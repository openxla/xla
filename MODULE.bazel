module(name = "xla")

bazel_dep(name = "rules_python", version = "1.0.0")
bazel_dep(name = "rules_cc", version = "0.2.0")
bazel_dep(name = "bazel_skylib", version = "1.8.1")
bazel_dep(name = "grpc", version = "1.74.0", repo_name = "com_github_grpc_grpc")
bazel_dep(name = "protobuf", version = "31.1", repo_name = "com_google_protobuf")
bazel_dep(name = "abseil-cpp", version = "20250814.0", repo_name = "com_google_absl")
bazel_dep(name = "googletest", version = "1.17.0", repo_name = "com_google_googletest")
bazel_dep(name = "platforms", version = "1.0.0")
bazel_dep(name = "rules_license", version = "1.0.0")
bazel_dep(name = "google_benchmark", version = "1.8.4", repo_name = "com_google_benchmark")
bazel_dep(name = "re2", version = "2024-07-02.bcr.1", repo_name = "com_googlesource_code_re2")
bazel_dep(name = "pybind11_bazel", version = "2.13.6")
bazel_dep(name = "snappy", version = "1.2.1")
bazel_dep(name = "zlib", version = "1.3.1.bcr.5")

# TODO: publish an official version of rules_ml_toolchain to BCR
# https://github.com/google-ml-infra/rules_ml_toolchain/pull/80
bazel_dep(name = "rules_ml_toolchain")
archive_override(
  module_name = "rules_ml_toolchain",
  urls = ["https://github.com/meteorcloudy/rules_ml_toolchain/archive/a423a8d14dc7e2a83216ac2e8ba005dabbcad10d.tar.gz"],
  strip_prefix = "rules_ml_toolchain-a423a8d14dc7e2a83216ac2e8ba005dabbcad10d",
)

# TODO: Upstream the patch?
single_version_override(
  module_name = "grpc",
  patches = ["//third_party/grpc:grpc.patch"],
  patch_strip = 1,
)

# TODO: Upstream those patch?
single_version_override(
  module_name = "abseil-cpp",
  patches = [
      "//third_party/absl:btree.patch",
      "//third_party/absl:build_dll.patch",
      "//third_party/absl:endian.patch",
      "//third_party/absl:rules_cc.patch",
      "//third_party/absl:check_op.patch",
      "//third_party/absl:check_op_2.patch",
  ],
  patch_strip = 1,
)

tf_vendored = use_repo_rule("//third_party:repo.bzl", "tf_vendored")
tf_vendored(
    name = "tsl",
    relpath = "third_party/tsl",
)

# TODO: most of them can be Bazel modules
third_party = use_extension("//third_party/extensions:third_party.bzl", "third_party_extension")
use_repo(third_party,
    "ml_dtypes_py",
    "highwayhash",
    "stablehlo",
    "farmhash_archive",
    "farmhash_gpu_archive",
    "shardy",
    "ducc",
    "hwloc",
    "onednn",
    "XNNPACK",
    "pthreadpool",
    "FXdiv",
    "cpuinfo",
    "eigen_archive",
    "llvm-raw",
)

rocm = use_extension("//third_party/extensions:rocm.bzl", "rocm_extension")
use_repo(rocm, "local_config_rocm")

remote_execution = use_extension("//third_party/extensions:remote_execution.bzl", "remote_execution_extension")
use_repo(remote_execution, "local_config_remote_execution")

tensorrt = use_extension("//third_party/extensions:tensorrt.bzl", "tensorrt_extension")
use_repo(tensorrt, "local_config_tensorrt")

cuda_extension = use_extension("@rules_ml_toolchain//third_party/extensions:cuda_extension.bzl", "cuda_extension")
use_repo(cuda_extension, "local_config_cuda")

python = use_extension("//third_party/extensions:python.bzl", "python_extension")
use_repo(python, "python_version_repo")

llvm = use_extension("//third_party/extensions:llvm.bzl", "llvm_extension")
use_repo(llvm, "llvm-project")

sycl = use_extension("//third_party/extensions:sycl.bzl", "sycl_extension")
use_repo(sycl, "local_config_sycl")

rbe_config = use_extension("//third_party/extensions:rbe_config.bzl", "rbe_config_ext")
use_repo(rbe_config, "ml_build_config_platform")

register_toolchains("@rules_ml_toolchain//cc:linux_x86_64_linux_x86_64")

register_toolchains("@rules_ml_toolchain//cc:linux_x86_64_linux_x86_64_cuda")

register_toolchains("@rules_ml_toolchain//cc:linux_aarch64_linux_aarch64")

register_toolchains("@rules_ml_toolchain//cc:linux_aarch64_linux_aarch64_cuda")
