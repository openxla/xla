module(name = "xla")

##############################################################
# Bazel module dependencies

bazel_dep(name = "abseil-cpp", version = "20250814.0", repo_name = "com_google_absl")
bazel_dep(name = "bazel_features", version = "1.36.0")
bazel_dep(name = "bazel_skylib", version = "1.8.1")
bazel_dep(name = "boringssl", version = "0.20250818.0")
bazel_dep(name = "curl", version = "8.8.0.bcr.3")
bazel_dep(name = "google_benchmark", version = "1.8.4", repo_name = "com_google_benchmark")
bazel_dep(name = "googletest", version = "1.17.0", repo_name = "com_google_googletest")
bazel_dep(name = "grpc", version = "1.74.1", repo_name = "com_github_grpc_grpc")
bazel_dep(name = "jsoncpp", version = "1.9.6", repo_name = "jsoncpp_git")
bazel_dep(name = "or-tools", version = "9.12", repo_name = "com_google_ortools")
bazel_dep(name = "platforms", version = "1.0.0")
bazel_dep(name = "protobuf", version = "31.1", repo_name = "com_google_protobuf")
bazel_dep(name = "pybind11_abseil", version = "202402.0")
bazel_dep(name = "pybind11_bazel", version = "2.13.6")
bazel_dep(name = "pybind11_protobuf", version = "0.0.0-20250210-f02a2b7")
bazel_dep(name = "re2", version = "2024-07-02.bcr.1", repo_name = "com_googlesource_code_re2")
bazel_dep(name = "rules_cc", version = "0.2.0")
bazel_dep(name = "rules_license", version = "1.0.0")
bazel_dep(name = "rules_python", version = "1.6.0")
bazel_dep(name = "rules_shell", version = "0.6.1")
bazel_dep(name = "snappy", version = "1.2.1")
bazel_dep(name = "zlib", version = "1.3.1.bcr.5")

# Only for compatibility, not directly used
bazel_dep(name = "grpc-java", version = "1.75.0", repo_name = "DO_NOT_USE_grpc_java")

# TODO: publish an official version of rules_ml_toolchain to BCR
# https://github.com/google-ml-infra/rules_ml_toolchain/pull/85
bazel_dep(name = "rules_ml_toolchain")
archive_override(
  module_name = "rules_ml_toolchain",
  urls = ["https://github.com/meteorcloudy/rules_ml_toolchain/archive/bb7915966180d7a1eeac037f755f0923f09bffb8.tar.gz"],
  strip_prefix = "rules_ml_toolchain-bb7915966180d7a1eeac037f755f0923f09bffb8",
)

# TODO: Upstream the patch?
single_version_override(
  module_name = "grpc",
  patches = ["//third_party/grpc:grpc.patch"],
  patch_strip = 1,
)

# TODO: Upstream those patch?
single_version_override(
  module_name = "abseil-cpp",
  patches = [
      "//third_party/absl:btree.patch",
      "//third_party/absl:build_dll.patch",
      "//third_party/absl:endian.patch",
      "//third_party/absl:rules_cc.patch",
      "//third_party/absl:check_op.patch",
      "//third_party/absl:check_op_2.patch",
  ],
  patch_strip = 1,
)

##############################################################
# C++ dependencies

# TODO: most of them can be Bazel modules, but need a release strategy for them
third_party = use_extension("//third_party/extensions:third_party.bzl", "third_party_extension")
use_repo(third_party,
    "absl_py",
    "cpuinfo",
    "cudnn_frontend_archive",
    "ducc",
    "eigen_archive",
    "farmhash_archive",
    "farmhash_gpu_archive",
    "FXdiv",
    "gloo",
    "highwayhash",
    "hwloc",
    "implib_so",
    "llvm_openmp",
    "llvm-raw",
    "ml_dtypes_py",
    "mpitrampoline",
    "nanobind",
    "nvshmem",
    "onednn",
    "pthreadpool",
    "shardy",
    "stablehlo",
    "triton",
    "XNNPACK",
)

##############################################################
# Python toolchain and pypi dependencies

python = use_extension("@rules_python//python/extensions:python.bzl", "python")
python.defaults(python_version = "3.11")
python.toolchain(python_version = "3.11")
use_repo(python, "pythons_hub")

pip = use_extension("@rules_python//python/extensions:pip.bzl", "pip")
pip.parse(
    hub_name = "xla_pypi",
    python_version = "3.11",
    requirements_lock = "//:requirements_lock_3_11.txt",
)

use_repo(pip, pypi = "xla_pypi")

##############################################################
# Other dependencies via module extensions

### TSL
tsl_extension = use_extension("//third_party/extensions:tsl.bzl", "tsl_extension")
use_repo(tsl_extension, "tsl")

### LLVM
llvm = use_extension("//third_party/extensions:llvm.bzl", "llvm_extension")
use_repo(llvm, "llvm-project")

### pybind
pybind11_internal_configure = use_extension(
    "@pybind11_bazel//:internal_configure.bzl",
    "internal_configure_extension",
)
use_repo(pybind11_internal_configure, "pybind11")

### RBE config
rbe_config = use_extension("//third_party/extensions:rbe_config.bzl", "rbe_config_ext")
use_repo(rbe_config, "ml_build_config_platform")

### From @rules_ml_toolchain
cuda_extension = use_extension("@rules_ml_toolchain//third_party/extensions:cuda_extension.bzl", "cuda_extension")
use_repo(cuda_extension, "local_config_cuda")

nccl_configure_ext = use_extension("@rules_ml_toolchain//third_party/extensions:nccl_configure_ext.bzl", "nccl_configure_ext")
use_repo(nccl_configure_ext, "local_config_nccl")

register_toolchains("@rules_ml_toolchain//cc:linux_x86_64_linux_x86_64")

register_toolchains("@rules_ml_toolchain//cc:linux_x86_64_linux_x86_64_cuda")

register_toolchains("@rules_ml_toolchain//cc:linux_aarch64_linux_aarch64")

register_toolchains("@rules_ml_toolchain//cc:linux_aarch64_linux_aarch64_cuda")

### Other local config repos
rocm = use_extension("//third_party/extensions:rocm.bzl", "rocm_extension")
use_repo(rocm, "local_config_rocm")

remote_execution = use_extension("//third_party/extensions:remote_execution.bzl", "remote_execution_extension")
use_repo(remote_execution, "local_config_remote_execution")

tensorrt = use_extension("//third_party/extensions:tensorrt.bzl", "tensorrt_extension")
use_repo(tensorrt, "local_config_tensorrt")

sycl = use_extension("//third_party/extensions:sycl.bzl", "sycl_extension")
use_repo(sycl, "local_config_sycl")
