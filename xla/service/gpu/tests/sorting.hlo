// NOTE: Assertions have been autogenerated by utils/generate-test-checks.py
// RUN: hlo-opt %s --platform=gpu --stage=llvm-before-optimizations --xla_gpu_target_config_filename=%S/../../../tools/hlo_opt/gpu_specs/%{GPU}.txtpb --split-input-file | FileCheck --check-prefixes=CHECK,CHECK-%{PTX} %s

HloModule TestModule, is_scheduled=true

compare {
  p.0.lhs = f32[] parameter(0)
  p.0.rhs = f32[] parameter(1)
  ROOT lt = pred[] compare(p.0.lhs, p.0.rhs), direction=LT
}

// CHECK-LABEL: @sort(
// CHECK:         %[[VAL_0:.*]] = alloca i8, align 1
// CHECK:         %[[VAL_1:.*]] = alloca i8, align 1
// CHECK:         %[[VAL_2:.*]] = alloca i8, align 1
// CHECK:         %[[VAL_3:.*]] = alloca i8, align 1
// CHECK:         %[[VAL_4:.*]] = alloca i8, align 1
// CHECK:         %[[VAL_5:.*]] = alloca i8, align 1
// CHECK-PTX:     %[[VAL_6:.*]] = call i32 @llvm.nvvm.read.ptx.sreg.ctaid.x
// CHECK-GCN:     %[[VAL_6:.*]] = call i32 @llvm.amdgcn.workgroup.id.x
// CHECK:         %[[VAL_7:.*]] = zext i32 %[[VAL_6]] to i64
// CHECK-PTX:     %[[VAL_8:.*]] = call i32 @llvm.nvvm.read.ptx.sreg.tid.x
// CHECK-GCN:     %[[VAL_8:.*]] = call i32 @llvm.amdgcn.workitem.id.x
// CHECK:         %[[VAL_9:.*]] = zext i32 %[[VAL_8]] to i64
// CHECK:         %[[VAL_10:.*]] = mul nuw nsw i64 %[[VAL_7]], 2
// CHECK:         %[[VAL_11:.*]] = add nuw nsw i64 %[[VAL_10]], %[[VAL_9]]
// CHECK:         %[[VAL_12:.*]] = icmp ult i64 %[[VAL_11]], 4
// CHECK:         call void @llvm.assume(i1 %[[VAL_12]])
// CHECK:         %[[VAL_13:.*]] = add nuw nsw i64 %[[VAL_11]], 0
// CHECK:         %[[VAL_14:.*]] = udiv i64 %[[VAL_13]], 1
// CHECK:         %[[VAL_15:.*]] = urem i64 %[[VAL_14]], 2
// CHECK:         %[[VAL_16:.*]] = udiv i64 %[[VAL_13]], 2
// CHECK:         %[[VAL_17:.*]] = icmp ult i64 %[[VAL_11]], 4
// CHECK:         br i1 %[[VAL_17]], label %[[VAL_18:.*]], label %[[VAL_19:.*]]
// CHECK:       sort.in_bounds-after:                             ; preds = %[[VAL_20:.*]], %[[VAL_21:.*]]
// CHECK:         ret void
// CHECK:       sort.in_bounds-true:                              ; preds = %[[VAL_21]]
// CHECK-PTX:     %[[VAL_22:.*]] = call i32 @llvm.nvvm.read.ptx.sreg.tid.x
// CHECK-GCN:     %[[VAL_22:.*]] = call i32 @llvm.amdgcn.workitem.id.x
// CHECK:         %[[VAL_23:.*]] = sext i32 %[[VAL_22]] to i64
// CHECK:         %[[VAL_24:.*]] = mul nuw nsw i64 %[[VAL_15]], 2
// CHECK:         %[[VAL_25:.*]] = mul nuw nsw i64 %[[VAL_23]], 2
// CHECK:         %[[VAL_26:.*]] = add nuw nsw i64 %[[VAL_24]], 0
// CHECK:         %[[VAL_27:.*]] = icmp slt i64 %[[VAL_26]], 3
// CHECK:         br i1 %[[VAL_27]], label %[[VAL_28:.*]], label %[[VAL_29:.*]]
// CHECK:       smaller_keys_index-after:                         ; preds = %[[VAL_28]], %[[VAL_18]]
// CHECK:         %[[VAL_30:.*]] = add nuw nsw i64 %[[VAL_24]], 1
// CHECK:         %[[VAL_31:.*]] = icmp slt i64 %[[VAL_30]], 3
// CHECK:         br i1 %[[VAL_31]], label %[[VAL_32:.*]], label %[[VAL_33:.*]]
// CHECK:       smaller_keys_index-after3:                        ; preds = %[[VAL_32]], %[[VAL_29]]
// CHECK-PTX:     call void @llvm.nvvm.barrier.cta.sync.aligned.all(i32 0)
// CHECK-GCN:     call void @llvm.amdgcn.s.barrier
// CHECK:         %[[VAL_34:.*]] = mul i64 %[[VAL_15]], 2
// CHECK:         %[[VAL_35:.*]] = icmp uge i64 %[[VAL_34]], 0
// CHECK:         br i1 %[[VAL_35]], label %[[VAL_36:.*]], label %[[VAL_37:.*]]
// CHECK:       is_last_tile-after:                               ; preds = %[[VAL_38:.*]], %[[VAL_39:.*]]
// CHECK-PTX:     call void @llvm.nvvm.barrier.cta.sync.aligned.all(i32 0)
// CHECK-GCN:     call void @llvm.amdgcn.s.barrier
// CHECK:         %[[VAL_40:.*]] = mul i64 %[[VAL_15]], 2
// CHECK:         %[[VAL_41:.*]] = icmp uge i64 %[[VAL_40]], 0
// CHECK:         br i1 %[[VAL_41]], label %[[VAL_42:.*]], label %[[VAL_43:.*]]
// CHECK:       is_last_tile-after16:                             ; preds = %[[VAL_44:.*]], %[[VAL_45:.*]]
// CHECK-PTX:     call void @llvm.nvvm.barrier.cta.sync.aligned.all(i32 0)
// CHECK-GCN:     call void @llvm.amdgcn.s.barrier
// CHECK:         %[[VAL_46:.*]] = mul i64 %[[VAL_15]], 2
// CHECK:         %[[VAL_47:.*]] = icmp uge i64 %[[VAL_46]], 0
// CHECK:         br i1 %[[VAL_47]], label %[[VAL_48:.*]], label %[[VAL_49:.*]]
// CHECK:       is_last_tile-after35:                             ; preds = %[[VAL_50:.*]], %[[VAL_51:.*]]
// CHECK-PTX:     call void @llvm.nvvm.barrier.cta.sync.aligned.all(i32 0)
// CHECK-GCN:     call void @llvm.amdgcn.s.barrier
// CHECK:         %[[VAL_52:.*]] = mul nuw nsw i64 %[[VAL_15]], 2
// CHECK:         %[[VAL_53:.*]] = mul nuw nsw i64 %[[VAL_23]], 2
// CHECK:         %[[VAL_54:.*]] = add nuw nsw i64 %[[VAL_52]], 0
// CHECK:         %[[VAL_55:.*]] = icmp slt i64 %[[VAL_54]], 3
// CHECK:         br i1 %[[VAL_55]], label %[[VAL_56:.*]], label %[[VAL_57:.*]]
// CHECK:       smaller_keys_index-after56:                       ; preds = %[[VAL_56]], %[[VAL_58:.*]]
// CHECK:         %[[VAL_59:.*]] = add nuw nsw i64 %[[VAL_52]], 1
// CHECK:         %[[VAL_60:.*]] = icmp slt i64 %[[VAL_59]], 3
// CHECK:         br i1 %[[VAL_60]], label %[[VAL_61:.*]], label %[[VAL_20]]
// CHECK:       smaller_keys_index-after60:                       ; preds = %[[VAL_61]], %[[VAL_57]]
// CHECK:         br label %[[VAL_19]]
// CHECK:       smaller_keys_index-true:                          ; preds = %[[VAL_18]]
// CHECK:         %[[VAL_62:.*]] = add nuw nsw i64 %[[VAL_25]], 0
// CHECK:         %[[VAL_63:.*]] = getelementptr inbounds [2 x [3 x float]], ptr %[[VAL_64:.*]], i64 0, i64 %[[VAL_16]], i64 %[[VAL_26]]
// CHECK:         %[[VAL_65:.*]] = load float, ptr %[[VAL_63]], align 4
// CHECK:         %[[VAL_66:.*]] = getelementptr [64 x float], ptr addrspace(3) @sort_tile_param_0, i64 0, i64 %[[VAL_62]]
// CHECK:         store float %[[VAL_65]], ptr addrspace(3) %[[VAL_66]], align 4
// CHECK:         br label %[[VAL_29]]
// CHECK:       smaller_keys_index-true2:                         ; preds = %[[VAL_29]]
// CHECK:         %[[VAL_67:.*]] = add nuw nsw i64 %[[VAL_25]], 1
// CHECK:         %[[VAL_68:.*]] = getelementptr inbounds [2 x [3 x float]], ptr %[[VAL_64]], i64 0, i64 %[[VAL_16]], i64 %[[VAL_30]]
// CHECK:         %[[VAL_69:.*]] = load float, ptr %[[VAL_68]], align 4
// CHECK:         %[[VAL_70:.*]] = getelementptr [64 x float], ptr addrspace(3) @sort_tile_param_0, i64 0, i64 %[[VAL_67]]
// CHECK:         store float %[[VAL_69]], ptr addrspace(3) %[[VAL_70]], align 4
// CHECK:         br label %[[VAL_33]]
// CHECK:       is_last_tile-true:                                ; preds = %[[VAL_33]]
// CHECK:         %[[VAL_71:.*]] = mul nuw nsw i64 %[[VAL_23]], 1
// CHECK:         %[[VAL_72:.*]] = add nuw nsw i64 %[[VAL_71]], 0
// CHECK:         %[[VAL_73:.*]] = mul i64 %[[VAL_72]], 2
// CHECK:         %[[VAL_74:.*]] = xor i64 %[[VAL_73]], 1
// CHECK:         %[[VAL_75:.*]] = icmp slt i64 %[[VAL_74]], 3
// CHECK:         br i1 %[[VAL_75]], label %[[VAL_76:.*]], label %[[VAL_39]]
// CHECK:       smaller_comparison_index-after:                   ; preds = %[[VAL_77:.*]], %[[VAL_36]]
// CHECK:         br label %[[VAL_78:.*]]
// CHECK:       is_last_tile-false:                               ; preds = %[[VAL_33]]
// CHECK:         %[[VAL_79:.*]] = mul nuw nsw i64 %[[VAL_23]], 1
// CHECK:         %[[VAL_80:.*]] = add nuw nsw i64 %[[VAL_79]], 0
// CHECK:         %[[VAL_81:.*]] = mul i64 %[[VAL_80]], 2
// CHECK:         %[[VAL_82:.*]] = xor i64 %[[VAL_81]], 1
// CHECK:         br i1 true, label %[[VAL_83:.*]], label %[[VAL_38]]
// CHECK:       smaller_comparison_index-after9:                  ; preds = %[[VAL_84:.*]], %[[VAL_37]]
// CHECK:         br label %[[VAL_78]]
// CHECK:       smaller_comparison_index-true:                    ; preds = %[[VAL_36]]
// CHECK:         %[[VAL_85:.*]] = getelementptr [64 x float], ptr addrspace(3) @sort_tile_param_0, i64 0, i64 %[[VAL_74]]
// CHECK:         %[[VAL_86:.*]] = addrspacecast ptr addrspace(3) %[[VAL_85]] to ptr
// CHECK:         %[[VAL_87:.*]] = getelementptr [64 x float], ptr addrspace(3) @sort_tile_param_0, i64 0, i64 %[[VAL_73]]
// CHECK:         %[[VAL_88:.*]] = addrspacecast ptr addrspace(3) %[[VAL_87]] to ptr
// CHECK-GCN:     %[[VAL_5_2:.*]] = addrspacecast ptr addrspace(5) %[[VAL_5]] to ptr
// CHECK-GCN:     call void @[[REGION:compare_.*]](ptr %[[VAL_86]], ptr %[[VAL_88]], ptr %[[VAL_5_2]])
// CHECK-PTX:     call void @[[REGION:compare_.*]](ptr %[[VAL_86]], ptr %[[VAL_88]], ptr %[[VAL_5]])
// CHECK-PTX:     %[[VAL_89:.*]] = load i8, ptr %[[VAL_5]], align 1
// CHECK-GCN:     %[[VAL_89:.*]] = load i8, ptr addrspace(5) %[[VAL_5]], align 1
// CHECK:         %[[VAL_90:.*]] = icmp ne i8 %[[VAL_89]], 0
// CHECK:         br i1 %[[VAL_90]], label %[[VAL_91:.*]], label %[[VAL_77]]
// CHECK:       is_smaller_than-after:                            ; preds = %[[VAL_91]], %[[VAL_76]]
// CHECK:         br label %[[VAL_39]]
// CHECK:       is_smaller_than-true:                             ; preds = %[[VAL_76]]
// CHECK:         %[[VAL_92:.*]] = load float, ptr %[[VAL_86]], align 4
// CHECK:         %[[VAL_93:.*]] = load float, ptr %[[VAL_88]], align 4
// CHECK:         %[[VAL_94:.*]] = getelementptr [64 x float], ptr addrspace(3) @sort_tile_param_0, i64 0, i64 %[[VAL_73]]
// CHECK:         store float %[[VAL_92]], ptr addrspace(3) %[[VAL_94]], align 4
// CHECK:         %[[VAL_95:.*]] = getelementptr [64 x float], ptr addrspace(3) @sort_tile_param_0, i64 0, i64 %[[VAL_74]]
// CHECK:         store float %[[VAL_93]], ptr addrspace(3) %[[VAL_95]], align 4
// CHECK:         br label %[[VAL_77]]
// CHECK:       smaller_comparison_index-true8:                   ; preds = %[[VAL_37]]
// CHECK:         %[[VAL_96:.*]] = getelementptr [64 x float], ptr addrspace(3) @sort_tile_param_0, i64 0, i64 %[[VAL_82]]
// CHECK:         %[[VAL_97:.*]] = addrspacecast ptr addrspace(3) %[[VAL_96]] to ptr
// CHECK:         %[[VAL_98:.*]] = getelementptr [64 x float], ptr addrspace(3) @sort_tile_param_0, i64 0, i64 %[[VAL_81]]
// CHECK:         %[[VAL_99:.*]] = addrspacecast ptr addrspace(3) %[[VAL_98]] to ptr
// CHECK-GCN:     %[[VAL_4_2:.*]] = addrspacecast ptr addrspace(5) %[[VAL_4]] to ptr
// CHECK-GCN:     call void @[[REGION]](ptr %[[VAL_97]], ptr %[[VAL_99]], ptr %[[VAL_4_2]])
// CHECK-PTX:     call void @[[REGION]](ptr %[[VAL_97]], ptr %[[VAL_99]], ptr %[[VAL_4]])
// CHECK-PTX:     %[[VAL_100:.*]] = load i8, ptr %[[VAL_4]], align 1
// CHECK-GCN:     %[[VAL_100:.*]] = load i8, ptr addrspace(5) %[[VAL_4]], align 1
// CHECK:         %[[VAL_101:.*]] = icmp ne i8 %[[VAL_100]], 0
// CHECK:         br i1 %[[VAL_101]], label %[[VAL_102:.*]], label %[[VAL_84]]
// CHECK:       is_smaller_than-after13:                          ; preds = %[[VAL_102]], %[[VAL_83]]
// CHECK:         br label %[[VAL_38]]
// CHECK:       is_smaller_than-true12:                           ; preds = %[[VAL_83]]
// CHECK:         %[[VAL_103:.*]] = load float, ptr %[[VAL_97]], align 4
// CHECK:         %[[VAL_104:.*]] = load float, ptr %[[VAL_99]], align 4
// CHECK:         %[[VAL_105:.*]] = getelementptr [64 x float], ptr addrspace(3) @sort_tile_param_0, i64 0, i64 %[[VAL_81]]
// CHECK:         store float %[[VAL_103]], ptr addrspace(3) %[[VAL_105]], align 4
// CHECK:         %[[VAL_106:.*]] = getelementptr [64 x float], ptr addrspace(3) @sort_tile_param_0, i64 0, i64 %[[VAL_82]]
// CHECK:         store float %[[VAL_104]], ptr addrspace(3) %[[VAL_106]], align 4
// CHECK:         br label %[[VAL_84]]
// CHECK:       is_last_tile-true14:                              ; preds = %[[VAL_78]]
// CHECK:         %[[VAL_107:.*]] = mul nuw nsw i64 %[[VAL_23]], 1
// CHECK:         %[[VAL_108:.*]] = add nuw nsw i64 %[[VAL_107]], 0
// CHECK:         %[[VAL_109:.*]] = icmp slt i64 %[[VAL_108]], 2
// CHECK:         %[[VAL_110:.*]] = select i1 %[[VAL_109]], i64 %[[VAL_108]], i64 0
// CHECK:         %[[VAL_111:.*]] = xor i64 %[[VAL_110]], 3
// CHECK:         %[[VAL_112:.*]] = icmp slt i64 %[[VAL_111]], 3
// CHECK:         br i1 %[[VAL_112]], label %[[VAL_113:.*]], label %[[VAL_45]]
// CHECK:       smaller_comparison_index-after20:                 ; preds = %[[VAL_114:.*]], %[[VAL_42]]
// CHECK:         br label %[[VAL_115:.*]]
// CHECK:       is_last_tile-false15:                             ; preds = %[[VAL_78]]
// CHECK:         %[[VAL_116:.*]] = mul nuw nsw i64 %[[VAL_23]], 1
// CHECK:         %[[VAL_117:.*]] = add nuw nsw i64 %[[VAL_116]], 0
// CHECK:         %[[VAL_118:.*]] = icmp slt i64 %[[VAL_117]], 2
// CHECK:         %[[VAL_119:.*]] = select i1 %[[VAL_118]], i64 %[[VAL_117]], i64 7
// CHECK:         %[[VAL_120:.*]] = xor i64 %[[VAL_119]], 3
// CHECK:         br i1 true, label %[[VAL_121:.*]], label %[[VAL_44]]
// CHECK:       smaller_comparison_index-after28:                 ; preds = %[[VAL_122:.*]], %[[VAL_43]]
// CHECK:         br label %[[VAL_115]]
// CHECK:       smaller_comparison_index-true19:                  ; preds = %[[VAL_42]]
// CHECK:         %[[VAL_123:.*]] = getelementptr [64 x float], ptr addrspace(3) @sort_tile_param_0, i64 0, i64 %[[VAL_111]]
// CHECK:         %[[VAL_124:.*]] = addrspacecast ptr addrspace(3) %[[VAL_123]] to ptr
// CHECK:         %[[VAL_125:.*]] = getelementptr [64 x float], ptr addrspace(3) @sort_tile_param_0, i64 0, i64 %[[VAL_110]]
// CHECK:         %[[VAL_126:.*]] = addrspacecast ptr addrspace(3) %[[VAL_125]] to ptr
// CHECK-GCN:     %[[VAL_3_2:.*]] = addrspacecast ptr addrspace(5) %[[VAL_3]] to ptr
// CHECK-GCN:     call void @[[REGION]](ptr %[[VAL_124]], ptr %[[VAL_126]], ptr %[[VAL_3_2]])
// CHECK-PTX:     call void @[[REGION]](ptr %[[VAL_124]], ptr %[[VAL_126]], ptr %[[VAL_3]])
// CHECK-PTX:     %[[VAL_127:.*]] = load i8, ptr %[[VAL_3]], align 1
// CHECK-GCN:     %[[VAL_127:.*]] = load i8, ptr addrspace(5) %[[VAL_3]], align 1
// CHECK:         %[[VAL_128:.*]] = icmp ne i8 %[[VAL_127]], 0
// CHECK:         br i1 %[[VAL_128]], label %[[VAL_129:.*]], label %[[VAL_114]]
// CHECK:       is_smaller_than-after24:                          ; preds = %[[VAL_129]], %[[VAL_113]]
// CHECK:         br label %[[VAL_45]]
// CHECK:       is_smaller_than-true23:                           ; preds = %[[VAL_113]]
// CHECK:         %[[VAL_130:.*]] = load float, ptr %[[VAL_124]], align 4
// CHECK:         %[[VAL_131:.*]] = load float, ptr %[[VAL_126]], align 4
// CHECK:         %[[VAL_132:.*]] = getelementptr [64 x float], ptr addrspace(3) @sort_tile_param_0, i64 0, i64 %[[VAL_110]]
// CHECK:         store float %[[VAL_130]], ptr addrspace(3) %[[VAL_132]], align 4
// CHECK:         %[[VAL_133:.*]] = getelementptr [64 x float], ptr addrspace(3) @sort_tile_param_0, i64 0, i64 %[[VAL_111]]
// CHECK:         store float %[[VAL_131]], ptr addrspace(3) %[[VAL_133]], align 4
// CHECK:         br label %[[VAL_114]]
// CHECK:       smaller_comparison_index-true27:                  ; preds = %[[VAL_43]]
// CHECK:         %[[VAL_134:.*]] = getelementptr [64 x float], ptr addrspace(3) @sort_tile_param_0, i64 0, i64 %[[VAL_120]]
// CHECK:         %[[VAL_135:.*]] = addrspacecast ptr addrspace(3) %[[VAL_134]] to ptr
// CHECK:         %[[VAL_136:.*]] = getelementptr [64 x float], ptr addrspace(3) @sort_tile_param_0, i64 0, i64 %[[VAL_119]]
// CHECK:         %[[VAL_137:.*]] = addrspacecast ptr addrspace(3) %[[VAL_136]] to ptr
// CHECK-GCN:     %[[VAL_2_2:.*]] = addrspacecast ptr addrspace(5) %[[VAL_2]] to ptr
// CHECK-GCN:     call void @[[REGION]](ptr %[[VAL_135]], ptr %[[VAL_137]], ptr %[[VAL_2_2]])
// CHECK-PTX:     call void @[[REGION]](ptr %[[VAL_135]], ptr %[[VAL_137]], ptr %[[VAL_2]])
// CHECK-PTX:     %[[VAL_138:.*]] = load i8, ptr %[[VAL_2]], align 1
// CHECK-GCN:     %[[VAL_138:.*]] = load i8, ptr addrspace(5) %[[VAL_2]], align 1
// CHECK:         %[[VAL_139:.*]] = icmp ne i8 %[[VAL_138]], 0
// CHECK:         br i1 %[[VAL_139]], label %[[VAL_140:.*]], label %[[VAL_122]]
// CHECK:       is_smaller_than-after32:                          ; preds = %[[VAL_140]], %[[VAL_121]]
// CHECK:         br label %[[VAL_44]]
// CHECK:       is_smaller_than-true31:                           ; preds = %[[VAL_121]]
// CHECK:         %[[VAL_141:.*]] = load float, ptr %[[VAL_135]], align 4
// CHECK:         %[[VAL_142:.*]] = load float, ptr %[[VAL_137]], align 4
// CHECK:         %[[VAL_143:.*]] = getelementptr [64 x float], ptr addrspace(3) @sort_tile_param_0, i64 0, i64 %[[VAL_119]]
// CHECK:         store float %[[VAL_141]], ptr addrspace(3) %[[VAL_143]], align 4
// CHECK:         %[[VAL_144:.*]] = getelementptr [64 x float], ptr addrspace(3) @sort_tile_param_0, i64 0, i64 %[[VAL_120]]
// CHECK:         store float %[[VAL_142]], ptr addrspace(3) %[[VAL_144]], align 4
// CHECK:         br label %[[VAL_122]]
// CHECK:       is_last_tile-true33:                              ; preds = %[[VAL_115]]
// CHECK:         %[[VAL_145:.*]] = mul nuw nsw i64 %[[VAL_23]], 1
// CHECK:         %[[VAL_146:.*]] = add nuw nsw i64 %[[VAL_145]], 0
// CHECK:         %[[VAL_147:.*]] = mul i64 %[[VAL_146]], 2
// CHECK:         %[[VAL_148:.*]] = xor i64 %[[VAL_147]], 1
// CHECK:         %[[VAL_149:.*]] = icmp slt i64 %[[VAL_148]], 3
// CHECK:         br i1 %[[VAL_149]], label %[[VAL_150:.*]], label %[[VAL_51]]
// CHECK:       smaller_comparison_index-after39:                 ; preds = %[[VAL_151:.*]], %[[VAL_48]]
// CHECK:         br label %[[VAL_58]]
// CHECK:       is_last_tile-false34:                             ; preds = %[[VAL_115]]
// CHECK:         %[[VAL_152:.*]] = mul nuw nsw i64 %[[VAL_23]], 1
// CHECK:         %[[VAL_153:.*]] = add nuw nsw i64 %[[VAL_152]], 0
// CHECK:         %[[VAL_154:.*]] = mul i64 %[[VAL_153]], 2
// CHECK:         %[[VAL_155:.*]] = xor i64 %[[VAL_154]], 1
// CHECK:         br i1 true, label %[[VAL_156:.*]], label %[[VAL_50]]
// CHECK:       smaller_comparison_index-after47:                 ; preds = %[[VAL_157:.*]], %[[VAL_49]]
// CHECK:         br label %[[VAL_58]]
// CHECK:       smaller_comparison_index-true38:                  ; preds = %[[VAL_48]]
// CHECK:         %[[VAL_158:.*]] = getelementptr [64 x float], ptr addrspace(3) @sort_tile_param_0, i64 0, i64 %[[VAL_148]]
// CHECK:         %[[VAL_159:.*]] = addrspacecast ptr addrspace(3) %[[VAL_158]] to ptr
// CHECK:         %[[VAL_160:.*]] = getelementptr [64 x float], ptr addrspace(3) @sort_tile_param_0, i64 0, i64 %[[VAL_147]]
// CHECK:         %[[VAL_161:.*]] = addrspacecast ptr addrspace(3) %[[VAL_160]] to ptr
// CHECK-GCN:     %[[VAL_1_2:.*]] = addrspacecast ptr addrspace(5) %[[VAL_1]] to ptr
// CHECK-GCN:     call void @[[REGION]](ptr %[[VAL_159]], ptr %[[VAL_161]], ptr %[[VAL_1_2]])
// CHECK-PTX:     call void @[[REGION]](ptr %[[VAL_159]], ptr %[[VAL_161]], ptr %[[VAL_1]])
// CHECK-PTX:     %[[VAL_162:.*]] = load i8, ptr %[[VAL_1]], align 1
// CHECK-GCN:     %[[VAL_162:.*]] = load i8, ptr addrspace(5) %[[VAL_1]], align 1
// CHECK:         %[[VAL_163:.*]] = icmp ne i8 %[[VAL_162]], 0
// CHECK:         br i1 %[[VAL_163]], label %[[VAL_164:.*]], label %[[VAL_151]]
// CHECK:       is_smaller_than-after43:                          ; preds = %[[VAL_164]], %[[VAL_150]]
// CHECK:         br label %[[VAL_51]]
// CHECK:       is_smaller_than-true42:                           ; preds = %[[VAL_150]]
// CHECK:         %[[VAL_165:.*]] = load float, ptr %[[VAL_159]], align 4
// CHECK:         %[[VAL_166:.*]] = load float, ptr %[[VAL_161]], align 4
// CHECK:         %[[VAL_167:.*]] = getelementptr [64 x float], ptr addrspace(3) @sort_tile_param_0, i64 0, i64 %[[VAL_147]]
// CHECK:         store float %[[VAL_165]], ptr addrspace(3) %[[VAL_167]], align 4
// CHECK:         %[[VAL_168:.*]] = getelementptr [64 x float], ptr addrspace(3) @sort_tile_param_0, i64 0, i64 %[[VAL_148]]
// CHECK:         store float %[[VAL_166]], ptr addrspace(3) %[[VAL_168]], align 4
// CHECK:         br label %[[VAL_151]]
// CHECK:       smaller_comparison_index-true46:                  ; preds = %[[VAL_49]]
// CHECK:         %[[VAL_169:.*]] = getelementptr [64 x float], ptr addrspace(3) @sort_tile_param_0, i64 0, i64 %[[VAL_155]]
// CHECK:         %[[VAL_170:.*]] = addrspacecast ptr addrspace(3) %[[VAL_169]] to ptr
// CHECK:         %[[VAL_171:.*]] = getelementptr [64 x float], ptr addrspace(3) @sort_tile_param_0, i64 0, i64 %[[VAL_154]]
// CHECK:         %[[VAL_172:.*]] = addrspacecast ptr addrspace(3) %[[VAL_171]] to ptr
// CHECK-GCN:     %[[VAL_0_1:.*]] = addrspacecast ptr addrspace(5) %[[VAL_0]] to ptr
// CHECK-GCN:     call void @[[REGION]](ptr %[[VAL_170]], ptr %[[VAL_172]], ptr %[[VAL_0_1]])
// CHECK-PTX:     call void @[[REGION]](ptr %[[VAL_170]], ptr %[[VAL_172]], ptr %[[VAL_0]])
// CHECK-PTX:     %[[VAL_173:.*]] = load i8, ptr %[[VAL_0]], align 1
// CHECK-GCN:     %[[VAL_173:.*]] = load i8, ptr addrspace(5) %[[VAL_0]], align 1
// CHECK:         %[[VAL_174:.*]] = icmp ne i8 %[[VAL_173]], 0
// CHECK:         br i1 %[[VAL_174]], label %[[VAL_175:.*]], label %[[VAL_157]]
// CHECK:       is_smaller_than-after51:                          ; preds = %[[VAL_175]], %[[VAL_156]]
// CHECK:         br label %[[VAL_50]]
// CHECK:       is_smaller_than-true50:                           ; preds = %[[VAL_156]]
// CHECK:         %[[VAL_176:.*]] = load float, ptr %[[VAL_170]], align 4
// CHECK:         %[[VAL_177:.*]] = load float, ptr %[[VAL_172]], align 4
// CHECK:         %[[VAL_178:.*]] = getelementptr [64 x float], ptr addrspace(3) @sort_tile_param_0, i64 0, i64 %[[VAL_154]]
// CHECK:         store float %[[VAL_176]], ptr addrspace(3) %[[VAL_178]], align 4
// CHECK:         %[[VAL_179:.*]] = getelementptr [64 x float], ptr addrspace(3) @sort_tile_param_0, i64 0, i64 %[[VAL_155]]
// CHECK:         store float %[[VAL_177]], ptr addrspace(3) %[[VAL_179]], align 4
// CHECK:         br label %[[VAL_157]]
// CHECK:       smaller_keys_index-true55:                        ; preds = %[[VAL_58]]
// CHECK:         %[[VAL_180:.*]] = add nuw nsw i64 %[[VAL_53]], 0
// CHECK:         %[[VAL_181:.*]] = getelementptr [64 x float], ptr addrspace(3) @sort_tile_param_0, i64 0, i64 %[[VAL_180]]
// CHECK:         %[[VAL_182:.*]] = load float, ptr addrspace(3) %[[VAL_181]], align 4
// CHECK:         %[[VAL_183:.*]] = getelementptr inbounds [2 x [3 x float]], ptr %[[VAL_64]], i64 0, i64 %[[VAL_16]], i64 %[[VAL_54]]
// CHECK:         store float %[[VAL_182]], ptr %[[VAL_183]], align 4
// CHECK:         br label %[[VAL_57]]
// CHECK:       smaller_keys_index-true59:                        ; preds = %[[VAL_57]]
// CHECK:         %[[VAL_184:.*]] = add nuw nsw i64 %[[VAL_53]], 1
// CHECK:         %[[VAL_185:.*]] = getelementptr [64 x float], ptr addrspace(3) @sort_tile_param_0, i64 0, i64 %[[VAL_184]]
// CHECK:         %[[VAL_186:.*]] = load float, ptr addrspace(3) %[[VAL_185]], align 4
// CHECK:         %[[VAL_187:.*]] = getelementptr inbounds [2 x [3 x float]], ptr %[[VAL_64]], i64 0, i64 %[[VAL_16]], i64 %[[VAL_59]]
// CHECK:         store float %[[VAL_186]], ptr %[[VAL_187]], align 4
// CHECK:         br label %[[VAL_20]]
// CHECK:         %[[VAL_188:.*]] = alloca i8, align 1
// CHECK:         %[[VAL_189:.*]] = load float, ptr %[[VAL_190:.*]], align 4
// CHECK:         %[[VAL_191:.*]] = load float, ptr %[[VAL_192:.*]], align 4
// CHECK:         %[[VAL_193:.*]] = fcmp olt float %[[VAL_189]], %[[VAL_191]]
// CHECK:         %[[VAL_194:.*]] = zext i1 %[[VAL_193]] to i8
// CHECK-PTX:     store i8 %[[VAL_194]], ptr %[[VAL_188]], align 1
// CHECK-GCN:     store i8 %[[VAL_194]], ptr addrspace(5) %[[VAL_188]], align 1
// CHECK-PTX:     %[[VAL_195:.*]] = load i8, ptr %[[VAL_188]], align 1
// CHECK-GCN:     %[[VAL_195:.*]] = load i8, ptr addrspace(5) %[[VAL_188]], align 1
// CHECK:         store i8 %[[VAL_195]], ptr %[[VAL_196:.*]], align 1
// CHECK:         ret void

ENTRY main {
  x = f32[2, 3] parameter(0)
  ROOT sort = f32[2, 3] sort(x), dimensions={1}, to_apply=compare
}

// -----

HloModule TestModule, is_scheduled=true

compare {
  p.0.lhs = s32[] parameter(0)
  p.0.rhs = s32[] parameter(1)
  p.1.lhs = f32[] parameter(2)
  p.1.rhs = f32[] parameter(3)
  ROOT lt = pred[] compare(p.1.lhs, p.1.rhs), direction=LT
}

// CHECK-LABEL: @sort(
// CHECK:         %[[VAL_0:.*]] = alloca i8, align 1
// CHECK:         %[[VAL_1:.*]] = alloca i8, align 1
// CHECK:         %[[VAL_2:.*]] = alloca i8, align 1
// CHECK:         %[[VAL_3:.*]] = alloca i8, align 1
// CHECK:         %[[VAL_4:.*]] = alloca i8, align 1
// CHECK:         %[[VAL_5:.*]] = alloca i8, align 1
// CHECK-PTX:     %[[VAL_6:.*]] = call i32 @llvm.nvvm.read.ptx.sreg.ctaid.x
// CHECK-GCN:     %[[VAL_6:.*]] = call i32 @llvm.amdgcn.workgroup.id.x
// CHECK:         %[[VAL_7:.*]] = zext i32 %[[VAL_6]] to i64
// CHECK-PTX:     %[[VAL_8:.*]] = call i32 @llvm.nvvm.read.ptx.sreg.tid.x
// CHECK-GCN:     %[[VAL_8:.*]] = call i32 @llvm.amdgcn.workitem.id.x
// CHECK:         %[[VAL_9:.*]] = zext i32 %[[VAL_8]] to i64
// CHECK:         %[[VAL_10:.*]] = mul nuw nsw i64 %[[VAL_7]], 2
// CHECK:         %[[VAL_11:.*]] = add nuw nsw i64 %[[VAL_10]], %[[VAL_9]]
// CHECK:         %[[VAL_12:.*]] = icmp ult i64 %[[VAL_11]], 4
// CHECK:         call void @llvm.assume(i1 %[[VAL_12]])
// CHECK:         %[[VAL_13:.*]] = add nuw nsw i64 %[[VAL_11]], 0
// CHECK:         %[[VAL_14:.*]] = udiv i64 %[[VAL_13]], 1
// CHECK:         %[[VAL_15:.*]] = urem i64 %[[VAL_14]], 2
// CHECK:         %[[VAL_16:.*]] = udiv i64 %[[VAL_13]], 2
// CHECK:         %[[VAL_17:.*]] = icmp ult i64 %[[VAL_11]], 4
// CHECK:         br i1 %[[VAL_17]], label %[[VAL_18:.*]], label %[[VAL_19:.*]]
// CHECK:       sort.in_bounds-after:                             ; preds = %[[VAL_20:.*]], %[[VAL_21:.*]]
// CHECK:         ret void
// CHECK:       sort.in_bounds-true:                              ; preds = %[[VAL_21]]
// CHECK-PTX:     %[[VAL_22:.*]] = call i32 @llvm.nvvm.read.ptx.sreg.tid.x
// CHECK-GCN:     %[[VAL_22:.*]] = call i32 @llvm.amdgcn.workitem.id.x
// CHECK:         %[[VAL_23:.*]] = sext i32 %[[VAL_22]] to i64
// CHECK:         %[[VAL_24:.*]] = mul nuw nsw i64 %[[VAL_15]], 2
// CHECK:         %[[VAL_25:.*]] = mul nuw nsw i64 %[[VAL_23]], 2
// CHECK:         %[[VAL_26:.*]] = add nuw nsw i64 %[[VAL_24]], 0
// CHECK:         %[[VAL_27:.*]] = icmp slt i64 %[[VAL_26]], 3
// CHECK:         br i1 %[[VAL_27]], label %[[VAL_28:.*]], label %[[VAL_29:.*]]
// CHECK:       smaller_keys_index-after:                         ; preds = %[[VAL_28]], %[[VAL_18]]
// CHECK:         %[[VAL_30:.*]] = add nuw nsw i64 %[[VAL_24]], 1
// CHECK:         %[[VAL_31:.*]] = icmp slt i64 %[[VAL_30]], 3
// CHECK:         br i1 %[[VAL_31]], label %[[VAL_32:.*]], label %[[VAL_33:.*]]
// CHECK:       smaller_keys_index-after3:                        ; preds = %[[VAL_32]], %[[VAL_29]]
// CHECK:         %[[VAL_34:.*]] = mul nuw nsw i64 %[[VAL_15]], 2
// CHECK:         %[[VAL_35:.*]] = mul nuw nsw i64 %[[VAL_23]], 2
// CHECK:         %[[VAL_36:.*]] = add nuw nsw i64 %[[VAL_34]], 0
// CHECK:         %[[VAL_37:.*]] = icmp slt i64 %[[VAL_36]], 3
// CHECK:         br i1 %[[VAL_37]], label %[[VAL_38:.*]], label %[[VAL_39:.*]]
// CHECK:       smaller_keys_index-after9:                        ; preds = %[[VAL_38]], %[[VAL_33]]
// CHECK:         %[[VAL_40:.*]] = add nuw nsw i64 %[[VAL_34]], 1
// CHECK:         %[[VAL_41:.*]] = icmp slt i64 %[[VAL_40]], 3
// CHECK:         br i1 %[[VAL_41]], label %[[VAL_42:.*]], label %[[VAL_43:.*]]
// CHECK:       smaller_keys_index-after13:                       ; preds = %[[VAL_42]], %[[VAL_39]]
// CHECK-PTX:     call void @llvm.nvvm.barrier.cta.sync.aligned.all(i32 0)
// CHECK-GCN:     call void @llvm.amdgcn.s.barrier
// CHECK:         %[[VAL_44:.*]] = mul i64 %[[VAL_15]], 2
// CHECK:         %[[VAL_45:.*]] = icmp uge i64 %[[VAL_44]], 0
// CHECK:         br i1 %[[VAL_45]], label %[[VAL_46:.*]], label %[[VAL_47:.*]]
// CHECK:       is_last_tile-after:                               ; preds = %[[VAL_48:.*]], %[[VAL_49:.*]]
// CHECK-PTX:     call void @llvm.nvvm.barrier.cta.sync.aligned.all(i32 0)
// CHECK-GCN:     call void @llvm.amdgcn.s.barrier
// CHECK:         %[[VAL_50:.*]] = mul i64 %[[VAL_15]], 2
// CHECK:         %[[VAL_51:.*]] = icmp uge i64 %[[VAL_50]], 0
// CHECK:         br i1 %[[VAL_51]], label %[[VAL_52:.*]], label %[[VAL_53:.*]]
// CHECK:       is_last_tile-after26:                             ; preds = %[[VAL_54:.*]], %[[VAL_55:.*]]
// CHECK-PTX:     call void @llvm.nvvm.barrier.cta.sync.aligned.all(i32 0)
// CHECK-GCN:     call void @llvm.amdgcn.s.barrier
// CHECK:         %[[VAL_56:.*]] = mul i64 %[[VAL_15]], 2
// CHECK:         %[[VAL_57:.*]] = icmp uge i64 %[[VAL_56]], 0
// CHECK:         br i1 %[[VAL_57]], label %[[VAL_58:.*]], label %[[VAL_59:.*]]
// CHECK:       is_last_tile-after45:                             ; preds = %[[VAL_60:.*]], %[[VAL_61:.*]]
// CHECK-PTX:     call void @llvm.nvvm.barrier.cta.sync.aligned.all(i32 0)
// CHECK-GCN:     call void @llvm.amdgcn.s.barrier
// CHECK:         %[[VAL_62:.*]] = mul nuw nsw i64 %[[VAL_15]], 2
// CHECK:         %[[VAL_63:.*]] = mul nuw nsw i64 %[[VAL_23]], 2
// CHECK:         %[[VAL_64:.*]] = add nuw nsw i64 %[[VAL_62]], 0
// CHECK:         %[[VAL_65:.*]] = icmp slt i64 %[[VAL_64]], 3
// CHECK:         br i1 %[[VAL_65]], label %[[VAL_66:.*]], label %[[VAL_67:.*]]
// CHECK:       smaller_keys_index-after66:                       ; preds = %[[VAL_66]], %[[VAL_68:.*]]
// CHECK:         %[[VAL_69:.*]] = add nuw nsw i64 %[[VAL_62]], 1
// CHECK:         %[[VAL_70:.*]] = icmp slt i64 %[[VAL_69]], 3
// CHECK:         br i1 %[[VAL_70]], label %[[VAL_71:.*]], label %[[VAL_72:.*]]
// CHECK:       smaller_keys_index-after70:                       ; preds = %[[VAL_71]], %[[VAL_67]]
// CHECK:         %[[VAL_73:.*]] = mul nuw nsw i64 %[[VAL_15]], 2
// CHECK:         %[[VAL_74:.*]] = mul nuw nsw i64 %[[VAL_23]], 2
// CHECK:         %[[VAL_75:.*]] = add nuw nsw i64 %[[VAL_73]], 0
// CHECK:         %[[VAL_76:.*]] = icmp slt i64 %[[VAL_75]], 3
// CHECK:         br i1 %[[VAL_76]], label %[[VAL_77:.*]], label %[[VAL_78:.*]]
// CHECK:       smaller_keys_index-after76:                       ; preds = %[[VAL_77]], %[[VAL_72]]
// CHECK:         %[[VAL_79:.*]] = add nuw nsw i64 %[[VAL_73]], 1
// CHECK:         %[[VAL_80:.*]] = icmp slt i64 %[[VAL_79]], 3
// CHECK:         br i1 %[[VAL_80]], label %[[VAL_81:.*]], label %[[VAL_20]]
// CHECK:       smaller_keys_index-after80:                       ; preds = %[[VAL_81]], %[[VAL_78]]
// CHECK:         br label %[[VAL_19]]
// CHECK:       smaller_keys_index-true:                          ; preds = %[[VAL_18]]
// CHECK:         %[[VAL_82:.*]] = add nuw nsw i64 %[[VAL_25]], 0
// CHECK:         %[[VAL_83:.*]] = getelementptr inbounds [2 x [3 x i32]], ptr %[[VAL_84:.*]], i64 0, i64 %[[VAL_16]], i64 %[[VAL_26]]
// CHECK:         %[[VAL_85:.*]] = load i32, ptr %[[VAL_83]], align 4
// CHECK:         %[[VAL_86:.*]] = getelementptr [64 x i32], ptr addrspace(3) @sort_tile_param_0, i64 0, i64 %[[VAL_82]]
// CHECK:         store i32 %[[VAL_85]], ptr addrspace(3) %[[VAL_86]], align 4
// CHECK:         br label %[[VAL_29]]
// CHECK:       smaller_keys_index-true2:                         ; preds = %[[VAL_29]]
// CHECK:         %[[VAL_87:.*]] = add nuw nsw i64 %[[VAL_25]], 1
// CHECK:         %[[VAL_88:.*]] = getelementptr inbounds [2 x [3 x i32]], ptr %[[VAL_84]], i64 0, i64 %[[VAL_16]], i64 %[[VAL_30]]
// CHECK:         %[[VAL_89:.*]] = load i32, ptr %[[VAL_88]], align 4
// CHECK:         %[[VAL_90:.*]] = getelementptr [64 x i32], ptr addrspace(3) @sort_tile_param_0, i64 0, i64 %[[VAL_87]]
// CHECK:         store i32 %[[VAL_89]], ptr addrspace(3) %[[VAL_90]], align 4
// CHECK:         br label %[[VAL_33]]
// CHECK:       smaller_keys_index-true8:                         ; preds = %[[VAL_33]]
// CHECK:         %[[VAL_91:.*]] = add nuw nsw i64 %[[VAL_35]], 0
// CHECK:         %[[VAL_92:.*]] = getelementptr inbounds [2 x [3 x float]], ptr %[[VAL_93:.*]], i64 0, i64 %[[VAL_16]], i64 %[[VAL_36]]
// CHECK:         %[[VAL_94:.*]] = load float, ptr %[[VAL_92]], align 4
// CHECK:         %[[VAL_95:.*]] = getelementptr [64 x float], ptr addrspace(3) @sort_tile_param_1, i64 0, i64 %[[VAL_91]]
// CHECK:         store float %[[VAL_94]], ptr addrspace(3) %[[VAL_95]], align 4
// CHECK:         br label %[[VAL_39]]
// CHECK:       smaller_keys_index-true12:                        ; preds = %[[VAL_39]]
// CHECK:         %[[VAL_96:.*]] = add nuw nsw i64 %[[VAL_35]], 1
// CHECK:         %[[VAL_97:.*]] = getelementptr inbounds [2 x [3 x float]], ptr %[[VAL_93]], i64 0, i64 %[[VAL_16]], i64 %[[VAL_40]]
// CHECK:         %[[VAL_98:.*]] = load float, ptr %[[VAL_97]], align 4
// CHECK:         %[[VAL_99:.*]] = getelementptr [64 x float], ptr addrspace(3) @sort_tile_param_1, i64 0, i64 %[[VAL_96]]
// CHECK:         store float %[[VAL_98]], ptr addrspace(3) %[[VAL_99]], align 4
// CHECK:         br label %[[VAL_43]]
// CHECK:       is_last_tile-true:                                ; preds = %[[VAL_43]]
// CHECK:         %[[VAL_100:.*]] = mul nuw nsw i64 %[[VAL_23]], 1
// CHECK:         %[[VAL_101:.*]] = add nuw nsw i64 %[[VAL_100]], 0
// CHECK:         %[[VAL_102:.*]] = mul i64 %[[VAL_101]], 2
// CHECK:         %[[VAL_103:.*]] = xor i64 %[[VAL_102]], 1
// CHECK:         %[[VAL_104:.*]] = icmp slt i64 %[[VAL_103]], 3
// CHECK:         br i1 %[[VAL_104]], label %[[VAL_105:.*]], label %[[VAL_49]]
// CHECK:       smaller_comparison_index-after:                   ; preds = %[[VAL_106:.*]], %[[VAL_46]]
// CHECK:         br label %[[VAL_107:.*]]
// CHECK:       is_last_tile-false:                               ; preds = %[[VAL_43]]
// CHECK:         %[[VAL_108:.*]] = mul nuw nsw i64 %[[VAL_23]], 1
// CHECK:         %[[VAL_109:.*]] = add nuw nsw i64 %[[VAL_108]], 0
// CHECK:         %[[VAL_110:.*]] = mul i64 %[[VAL_109]], 2
// CHECK:         %[[VAL_111:.*]] = xor i64 %[[VAL_110]], 1
// CHECK:         br i1 true, label %[[VAL_112:.*]], label %[[VAL_48]]
// CHECK:       smaller_comparison_index-after19:                 ; preds = %[[VAL_113:.*]], %[[VAL_47]]
// CHECK:         br label %[[VAL_107]]
// CHECK:       smaller_comparison_index-true:                    ; preds = %[[VAL_46]]
// CHECK:         %[[VAL_114:.*]] = getelementptr [64 x i32], ptr addrspace(3) @sort_tile_param_0, i64 0, i64 %[[VAL_103]]
// CHECK:         %[[VAL_115:.*]] = addrspacecast ptr addrspace(3) %[[VAL_114]] to ptr
// CHECK:         %[[VAL_116:.*]] = getelementptr [64 x i32], ptr addrspace(3) @sort_tile_param_0, i64 0, i64 %[[VAL_102]]
// CHECK:         %[[VAL_117:.*]] = addrspacecast ptr addrspace(3) %[[VAL_116]] to ptr
// CHECK:         %[[VAL_118:.*]] = getelementptr [64 x float], ptr addrspace(3) @sort_tile_param_1, i64 0, i64 %[[VAL_103]]
// CHECK:         %[[VAL_119:.*]] = addrspacecast ptr addrspace(3) %[[VAL_118]] to ptr
// CHECK:         %[[VAL_120:.*]] = getelementptr [64 x float], ptr addrspace(3) @sort_tile_param_1, i64 0, i64 %[[VAL_102]]
// CHECK:         %[[VAL_121:.*]] = addrspacecast ptr addrspace(3) %[[VAL_120]] to ptr
// CHECK-GCN:     %[[VAL_5_2:.*]] = addrspacecast ptr addrspace(5) %[[VAL_5]] to ptr
// CHECK-PTX:     call void @[[REGION2:compare_.*]](ptr %[[VAL_115]], ptr %[[VAL_117]], ptr %[[VAL_119]], ptr %[[VAL_121]], ptr %[[VAL_5]])
// CHECK-GCN:     call void @[[REGION2:compare_.*]](ptr %[[VAL_115]], ptr %[[VAL_117]], ptr %[[VAL_119]], ptr %[[VAL_121]], ptr %[[VAL_5_2]])
// CHECK-PTX:     %[[VAL_122:.*]] = load i8, ptr %[[VAL_5]], align 1
// CHECK-GCN:     %[[VAL_122:.*]] = load i8, ptr addrspace(5) %[[VAL_5]], align 1
// CHECK:         %[[VAL_123:.*]] = icmp ne i8 %[[VAL_122]], 0
// CHECK:         br i1 %[[VAL_123]], label %[[VAL_124:.*]], label %[[VAL_106]]
// CHECK:       is_smaller_than-after:                            ; preds = %[[VAL_124]], %[[VAL_105]]
// CHECK:         br label %[[VAL_49]]
// CHECK:       is_smaller_than-true:                             ; preds = %[[VAL_105]]
// CHECK:         %[[VAL_125:.*]] = load i32, ptr %[[VAL_115]], align 4
// CHECK:         %[[VAL_126:.*]] = load i32, ptr %[[VAL_117]], align 4
// CHECK:         %[[VAL_127:.*]] = getelementptr [64 x i32], ptr addrspace(3) @sort_tile_param_0, i64 0, i64 %[[VAL_102]]
// CHECK:         store i32 %[[VAL_125]], ptr addrspace(3) %[[VAL_127]], align 4
// CHECK:         %[[VAL_128:.*]] = getelementptr [64 x i32], ptr addrspace(3) @sort_tile_param_0, i64 0, i64 %[[VAL_103]]
// CHECK:         store i32 %[[VAL_126]], ptr addrspace(3) %[[VAL_128]], align 4
// CHECK:         %[[VAL_129:.*]] = load float, ptr %[[VAL_119]], align 4
// CHECK:         %[[VAL_130:.*]] = load float, ptr %[[VAL_121]], align 4
// CHECK:         %[[VAL_131:.*]] = getelementptr [64 x float], ptr addrspace(3) @sort_tile_param_1, i64 0, i64 %[[VAL_102]]
// CHECK:         store float %[[VAL_129]], ptr addrspace(3) %[[VAL_131]], align 4
// CHECK:         %[[VAL_132:.*]] = getelementptr [64 x float], ptr addrspace(3) @sort_tile_param_1, i64 0, i64 %[[VAL_103]]
// CHECK:         store float %[[VAL_130]], ptr addrspace(3) %[[VAL_132]], align 4
// CHECK:         br label %[[VAL_106]]
// CHECK:       smaller_comparison_index-true18:                  ; preds = %[[VAL_47]]
// CHECK:         %[[VAL_133:.*]] = getelementptr [64 x i32], ptr addrspace(3) @sort_tile_param_0, i64 0, i64 %[[VAL_111]]
// CHECK:         %[[VAL_134:.*]] = addrspacecast ptr addrspace(3) %[[VAL_133]] to ptr
// CHECK:         %[[VAL_135:.*]] = getelementptr [64 x i32], ptr addrspace(3) @sort_tile_param_0, i64 0, i64 %[[VAL_110]]
// CHECK:         %[[VAL_136:.*]] = addrspacecast ptr addrspace(3) %[[VAL_135]] to ptr
// CHECK:         %[[VAL_137:.*]] = getelementptr [64 x float], ptr addrspace(3) @sort_tile_param_1, i64 0, i64 %[[VAL_111]]
// CHECK:         %[[VAL_138:.*]] = addrspacecast ptr addrspace(3) %[[VAL_137]] to ptr
// CHECK:         %[[VAL_139:.*]] = getelementptr [64 x float], ptr addrspace(3) @sort_tile_param_1, i64 0, i64 %[[VAL_110]]
// CHECK:         %[[VAL_140:.*]] = addrspacecast ptr addrspace(3) %[[VAL_139]] to ptr
// CHECK-GCN:     %[[VAL_4_2:.*]] = addrspacecast ptr addrspace(5) %[[VAL_4]] to ptr
// CHECK-PTX:     call void @[[REGION2]](ptr %[[VAL_134]], ptr %[[VAL_136]], ptr %[[VAL_138]], ptr %[[VAL_140]], ptr %[[VAL_4]])
// CHECK-GCN:     call void @[[REGION2]](ptr %[[VAL_134]], ptr %[[VAL_136]], ptr %[[VAL_138]], ptr %[[VAL_140]], ptr %[[VAL_4_2]])
// CHECK-PTX:     %[[VAL_141:.*]] = load i8, ptr %[[VAL_4]], align 1
// CHECK-GCN:     %[[VAL_141:.*]] = load i8, ptr addrspace(5) %[[VAL_4]], align 1
// CHECK:         %[[VAL_142:.*]] = icmp ne i8 %[[VAL_141]], 0
// CHECK:         br i1 %[[VAL_142]], label %[[VAL_143:.*]], label %[[VAL_113]]
// CHECK:       is_smaller_than-after23:                          ; preds = %[[VAL_143]], %[[VAL_112]]
// CHECK:         br label %[[VAL_48]]
// CHECK:       is_smaller_than-true22:                           ; preds = %[[VAL_112]]
// CHECK:         %[[VAL_144:.*]] = load i32, ptr %[[VAL_134]], align 4
// CHECK:         %[[VAL_145:.*]] = load i32, ptr %[[VAL_136]], align 4
// CHECK:         %[[VAL_146:.*]] = getelementptr [64 x i32], ptr addrspace(3) @sort_tile_param_0, i64 0, i64 %[[VAL_110]]
// CHECK:         store i32 %[[VAL_144]], ptr addrspace(3) %[[VAL_146]], align 4
// CHECK:         %[[VAL_147:.*]] = getelementptr [64 x i32], ptr addrspace(3) @sort_tile_param_0, i64 0, i64 %[[VAL_111]]
// CHECK:         store i32 %[[VAL_145]], ptr addrspace(3) %[[VAL_147]], align 4
// CHECK:         %[[VAL_148:.*]] = load float, ptr %[[VAL_138]], align 4
// CHECK:         %[[VAL_149:.*]] = load float, ptr %[[VAL_140]], align 4
// CHECK:         %[[VAL_150:.*]] = getelementptr [64 x float], ptr addrspace(3) @sort_tile_param_1, i64 0, i64 %[[VAL_110]]
// CHECK:         store float %[[VAL_148]], ptr addrspace(3) %[[VAL_150]], align 4
// CHECK:         %[[VAL_151:.*]] = getelementptr [64 x float], ptr addrspace(3) @sort_tile_param_1, i64 0, i64 %[[VAL_111]]
// CHECK:         store float %[[VAL_149]], ptr addrspace(3) %[[VAL_151]], align 4
// CHECK:         br label %[[VAL_113]]
// CHECK:       is_last_tile-true24:                              ; preds = %[[VAL_107]]
// CHECK:         %[[VAL_152:.*]] = mul nuw nsw i64 %[[VAL_23]], 1
// CHECK:         %[[VAL_153:.*]] = add nuw nsw i64 %[[VAL_152]], 0
// CHECK:         %[[VAL_154:.*]] = icmp slt i64 %[[VAL_153]], 2
// CHECK:         %[[VAL_155:.*]] = select i1 %[[VAL_154]], i64 %[[VAL_153]], i64 0
// CHECK:         %[[VAL_156:.*]] = xor i64 %[[VAL_155]], 3
// CHECK:         %[[VAL_157:.*]] = icmp slt i64 %[[VAL_156]], 3
// CHECK:         br i1 %[[VAL_157]], label %[[VAL_158:.*]], label %[[VAL_55]]
// CHECK:       smaller_comparison_index-after30:                 ; preds = %[[VAL_159:.*]], %[[VAL_52]]
// CHECK:         br label %[[VAL_160:.*]]
// CHECK:       is_last_tile-false25:                             ; preds = %[[VAL_107]]
// CHECK:         %[[VAL_161:.*]] = mul nuw nsw i64 %[[VAL_23]], 1
// CHECK:         %[[VAL_162:.*]] = add nuw nsw i64 %[[VAL_161]], 0
// CHECK:         %[[VAL_163:.*]] = icmp slt i64 %[[VAL_162]], 2
// CHECK:         %[[VAL_164:.*]] = select i1 %[[VAL_163]], i64 %[[VAL_162]], i64 7
// CHECK:         %[[VAL_165:.*]] = xor i64 %[[VAL_164]], 3
// CHECK:         br i1 true, label %[[VAL_166:.*]], label %[[VAL_54]]
// CHECK:       smaller_comparison_index-after38:                 ; preds = %[[VAL_167:.*]], %[[VAL_53]]
// CHECK:         br label %[[VAL_160]]
// CHECK:       smaller_comparison_index-true29:                  ; preds = %[[VAL_52]]
// CHECK:         %[[VAL_168:.*]] = getelementptr [64 x i32], ptr addrspace(3) @sort_tile_param_0, i64 0, i64 %[[VAL_156]]
// CHECK:         %[[VAL_169:.*]] = addrspacecast ptr addrspace(3) %[[VAL_168]] to ptr
// CHECK:         %[[VAL_170:.*]] = getelementptr [64 x i32], ptr addrspace(3) @sort_tile_param_0, i64 0, i64 %[[VAL_155]]
// CHECK:         %[[VAL_171:.*]] = addrspacecast ptr addrspace(3) %[[VAL_170]] to ptr
// CHECK:         %[[VAL_172:.*]] = getelementptr [64 x float], ptr addrspace(3) @sort_tile_param_1, i64 0, i64 %[[VAL_156]]
// CHECK:         %[[VAL_173:.*]] = addrspacecast ptr addrspace(3) %[[VAL_172]] to ptr
// CHECK:         %[[VAL_174:.*]] = getelementptr [64 x float], ptr addrspace(3) @sort_tile_param_1, i64 0, i64 %[[VAL_155]]
// CHECK:         %[[VAL_175:.*]] = addrspacecast ptr addrspace(3) %[[VAL_174]] to ptr
// CHECK-GCN:     %[[VAL_3_2:.*]] = addrspacecast ptr addrspace(5) %[[VAL_3]] to ptr
// CHECK-PTX:     call void @[[REGION2]](ptr %[[VAL_169]], ptr %[[VAL_171]], ptr %[[VAL_173]], ptr %[[VAL_175]], ptr %[[VAL_3]])
// CHECK-GCN:     call void @[[REGION2]](ptr %[[VAL_169]], ptr %[[VAL_171]], ptr %[[VAL_173]], ptr %[[VAL_175]], ptr %[[VAL_3_2]])
// CHECK-PTX:     %[[VAL_176:.*]] = load i8, ptr %[[VAL_3]], align 1
// CHECK-GCN:     %[[VAL_176:.*]] = load i8, ptr addrspace(5) %[[VAL_3]], align 1
// CHECK:         %[[VAL_177:.*]] = icmp ne i8 %[[VAL_176]], 0
// CHECK:         br i1 %[[VAL_177]], label %[[VAL_178:.*]], label %[[VAL_159]]
// CHECK:       is_smaller_than-after34:                          ; preds = %[[VAL_178]], %[[VAL_158]]
// CHECK:         br label %[[VAL_55]]
// CHECK:       is_smaller_than-true33:                           ; preds = %[[VAL_158]]
// CHECK:         %[[VAL_179:.*]] = load i32, ptr %[[VAL_169]], align 4
// CHECK:         %[[VAL_180:.*]] = load i32, ptr %[[VAL_171]], align 4
// CHECK:         %[[VAL_181:.*]] = getelementptr [64 x i32], ptr addrspace(3) @sort_tile_param_0, i64 0, i64 %[[VAL_155]]
// CHECK:         store i32 %[[VAL_179]], ptr addrspace(3) %[[VAL_181]], align 4
// CHECK:         %[[VAL_182:.*]] = getelementptr [64 x i32], ptr addrspace(3) @sort_tile_param_0, i64 0, i64 %[[VAL_156]]
// CHECK:         store i32 %[[VAL_180]], ptr addrspace(3) %[[VAL_182]], align 4
// CHECK:         %[[VAL_183:.*]] = load float, ptr %[[VAL_173]], align 4
// CHECK:         %[[VAL_184:.*]] = load float, ptr %[[VAL_175]], align 4
// CHECK:         %[[VAL_185:.*]] = getelementptr [64 x float], ptr addrspace(3) @sort_tile_param_1, i64 0, i64 %[[VAL_155]]
// CHECK:         store float %[[VAL_183]], ptr addrspace(3) %[[VAL_185]], align 4
// CHECK:         %[[VAL_186:.*]] = getelementptr [64 x float], ptr addrspace(3) @sort_tile_param_1, i64 0, i64 %[[VAL_156]]
// CHECK:         store float %[[VAL_184]], ptr addrspace(3) %[[VAL_186]], align 4
// CHECK:         br label %[[VAL_159]]
// CHECK:       smaller_comparison_index-true37:                  ; preds = %[[VAL_53]]
// CHECK:         %[[VAL_187:.*]] = getelementptr [64 x i32], ptr addrspace(3) @sort_tile_param_0, i64 0, i64 %[[VAL_165]]
// CHECK:         %[[VAL_188:.*]] = addrspacecast ptr addrspace(3) %[[VAL_187]] to ptr
// CHECK:         %[[VAL_189:.*]] = getelementptr [64 x i32], ptr addrspace(3) @sort_tile_param_0, i64 0, i64 %[[VAL_164]]
// CHECK:         %[[VAL_190:.*]] = addrspacecast ptr addrspace(3) %[[VAL_189]] to ptr
// CHECK:         %[[VAL_191:.*]] = getelementptr [64 x float], ptr addrspace(3) @sort_tile_param_1, i64 0, i64 %[[VAL_165]]
// CHECK:         %[[VAL_192:.*]] = addrspacecast ptr addrspace(3) %[[VAL_191]] to ptr
// CHECK:         %[[VAL_193:.*]] = getelementptr [64 x float], ptr addrspace(3) @sort_tile_param_1, i64 0, i64 %[[VAL_164]]
// CHECK:         %[[VAL_194:.*]] = addrspacecast ptr addrspace(3) %[[VAL_193]] to ptr
// CHECK-GCN:     %[[VAL_2_2:.*]] = addrspacecast ptr addrspace(5) %[[VAL_2]] to ptr
// CHECK-PTX:     call void @[[REGION2]](ptr %[[VAL_188]], ptr %[[VAL_190]], ptr %[[VAL_192]], ptr %[[VAL_194]], ptr %[[VAL_2]])
// CHECK-GCN:     call void @[[REGION2]](ptr %[[VAL_188]], ptr %[[VAL_190]], ptr %[[VAL_192]], ptr %[[VAL_194]], ptr %[[VAL_2_2]])
// CHECK-PTX:     %[[VAL_195:.*]] = load i8, ptr %[[VAL_2]], align 1
// CHECK-GCN:     %[[VAL_195:.*]] = load i8, ptr addrspace(5) %[[VAL_2]], align 1
// CHECK:         %[[VAL_196:.*]] = icmp ne i8 %[[VAL_195]], 0
// CHECK:         br i1 %[[VAL_196]], label %[[VAL_197:.*]], label %[[VAL_167]]
// CHECK:       is_smaller_than-after42:                          ; preds = %[[VAL_197]], %[[VAL_166]]
// CHECK:         br label %[[VAL_54]]
// CHECK:       is_smaller_than-true41:                           ; preds = %[[VAL_166]]
// CHECK:         %[[VAL_198:.*]] = load i32, ptr %[[VAL_188]], align 4
// CHECK:         %[[VAL_199:.*]] = load i32, ptr %[[VAL_190]], align 4
// CHECK:         %[[VAL_200:.*]] = getelementptr [64 x i32], ptr addrspace(3) @sort_tile_param_0, i64 0, i64 %[[VAL_164]]
// CHECK:         store i32 %[[VAL_198]], ptr addrspace(3) %[[VAL_200]], align 4
// CHECK:         %[[VAL_201:.*]] = getelementptr [64 x i32], ptr addrspace(3) @sort_tile_param_0, i64 0, i64 %[[VAL_165]]
// CHECK:         store i32 %[[VAL_199]], ptr addrspace(3) %[[VAL_201]], align 4
// CHECK:         %[[VAL_202:.*]] = load float, ptr %[[VAL_192]], align 4
// CHECK:         %[[VAL_203:.*]] = load float, ptr %[[VAL_194]], align 4
// CHECK:         %[[VAL_204:.*]] = getelementptr [64 x float], ptr addrspace(3) @sort_tile_param_1, i64 0, i64 %[[VAL_164]]
// CHECK:         store float %[[VAL_202]], ptr addrspace(3) %[[VAL_204]], align 4
// CHECK:         %[[VAL_205:.*]] = getelementptr [64 x float], ptr addrspace(3) @sort_tile_param_1, i64 0, i64 %[[VAL_165]]
// CHECK:         store float %[[VAL_203]], ptr addrspace(3) %[[VAL_205]], align 4
// CHECK:         br label %[[VAL_167]]
// CHECK:       is_last_tile-true43:                              ; preds = %[[VAL_160]]
// CHECK:         %[[VAL_206:.*]] = mul nuw nsw i64 %[[VAL_23]], 1
// CHECK:         %[[VAL_207:.*]] = add nuw nsw i64 %[[VAL_206]], 0
// CHECK:         %[[VAL_208:.*]] = mul i64 %[[VAL_207]], 2
// CHECK:         %[[VAL_209:.*]] = xor i64 %[[VAL_208]], 1
// CHECK:         %[[VAL_210:.*]] = icmp slt i64 %[[VAL_209]], 3
// CHECK:         br i1 %[[VAL_210]], label %[[VAL_211:.*]], label %[[VAL_61]]
// CHECK:       smaller_comparison_index-after49:                 ; preds = %[[VAL_212:.*]], %[[VAL_58]]
// CHECK:         br label %[[VAL_68]]
// CHECK:       is_last_tile-false44:                             ; preds = %[[VAL_160]]
// CHECK:         %[[VAL_213:.*]] = mul nuw nsw i64 %[[VAL_23]], 1
// CHECK:         %[[VAL_214:.*]] = add nuw nsw i64 %[[VAL_213]], 0
// CHECK:         %[[VAL_215:.*]] = mul i64 %[[VAL_214]], 2
// CHECK:         %[[VAL_216:.*]] = xor i64 %[[VAL_215]], 1
// CHECK:         br i1 true, label %[[VAL_217:.*]], label %[[VAL_60]]
// CHECK:       smaller_comparison_index-after57:                 ; preds = %[[VAL_218:.*]], %[[VAL_59]]
// CHECK:         br label %[[VAL_68]]
// CHECK:       smaller_comparison_index-true48:                  ; preds = %[[VAL_58]]
// CHECK:         %[[VAL_219:.*]] = getelementptr [64 x i32], ptr addrspace(3) @sort_tile_param_0, i64 0, i64 %[[VAL_209]]
// CHECK:         %[[VAL_220:.*]] = addrspacecast ptr addrspace(3) %[[VAL_219]] to ptr
// CHECK:         %[[VAL_221:.*]] = getelementptr [64 x i32], ptr addrspace(3) @sort_tile_param_0, i64 0, i64 %[[VAL_208]]
// CHECK:         %[[VAL_222:.*]] = addrspacecast ptr addrspace(3) %[[VAL_221]] to ptr
// CHECK:         %[[VAL_223:.*]] = getelementptr [64 x float], ptr addrspace(3) @sort_tile_param_1, i64 0, i64 %[[VAL_209]]
// CHECK:         %[[VAL_224:.*]] = addrspacecast ptr addrspace(3) %[[VAL_223]] to ptr
// CHECK:         %[[VAL_225:.*]] = getelementptr [64 x float], ptr addrspace(3) @sort_tile_param_1, i64 0, i64 %[[VAL_208]]
// CHECK:         %[[VAL_226:.*]] = addrspacecast ptr addrspace(3) %[[VAL_225]] to ptr
// CHECK-GCN:     %[[VAL_1_2:.*]] = addrspacecast ptr addrspace(5) %[[VAL_1]] to ptr
// CHECK-PTX:     call void @[[REGION2]](ptr %[[VAL_220]], ptr %[[VAL_222]], ptr %[[VAL_224]], ptr %[[VAL_226]], ptr %[[VAL_1]])
// CHECK-GCN:     call void @[[REGION2]](ptr %[[VAL_220]], ptr %[[VAL_222]], ptr %[[VAL_224]], ptr %[[VAL_226]], ptr %[[VAL_1_2]])
// CHECK-PTX:     %[[VAL_227:.*]] = load i8, ptr %[[VAL_1]], align 1
// CHECK-GCN:     %[[VAL_227:.*]] = load i8, ptr addrspace(5) %[[VAL_1]], align 1
// CHECK:         %[[VAL_228:.*]] = icmp ne i8 %[[VAL_227]], 0
// CHECK:         br i1 %[[VAL_228]], label %[[VAL_229:.*]], label %[[VAL_212]]
// CHECK:       is_smaller_than-after53:                          ; preds = %[[VAL_229]], %[[VAL_211]]
// CHECK:         br label %[[VAL_61]]
// CHECK:       is_smaller_than-true52:                           ; preds = %[[VAL_211]]
// CHECK:         %[[VAL_230:.*]] = load i32, ptr %[[VAL_220]], align 4
// CHECK:         %[[VAL_231:.*]] = load i32, ptr %[[VAL_222]], align 4
// CHECK:         %[[VAL_232:.*]] = getelementptr [64 x i32], ptr addrspace(3) @sort_tile_param_0, i64 0, i64 %[[VAL_208]]
// CHECK:         store i32 %[[VAL_230]], ptr addrspace(3) %[[VAL_232]], align 4
// CHECK:         %[[VAL_233:.*]] = getelementptr [64 x i32], ptr addrspace(3) @sort_tile_param_0, i64 0, i64 %[[VAL_209]]
// CHECK:         store i32 %[[VAL_231]], ptr addrspace(3) %[[VAL_233]], align 4
// CHECK:         %[[VAL_234:.*]] = load float, ptr %[[VAL_224]], align 4
// CHECK:         %[[VAL_235:.*]] = load float, ptr %[[VAL_226]], align 4
// CHECK:         %[[VAL_236:.*]] = getelementptr [64 x float], ptr addrspace(3) @sort_tile_param_1, i64 0, i64 %[[VAL_208]]
// CHECK:         store float %[[VAL_234]], ptr addrspace(3) %[[VAL_236]], align 4
// CHECK:         %[[VAL_237:.*]] = getelementptr [64 x float], ptr addrspace(3) @sort_tile_param_1, i64 0, i64 %[[VAL_209]]
// CHECK:         store float %[[VAL_235]], ptr addrspace(3) %[[VAL_237]], align 4
// CHECK:         br label %[[VAL_212]]
// CHECK:       smaller_comparison_index-true56:                  ; preds = %[[VAL_59]]
// CHECK:         %[[VAL_238:.*]] = getelementptr [64 x i32], ptr addrspace(3) @sort_tile_param_0, i64 0, i64 %[[VAL_216]]
// CHECK:         %[[VAL_239:.*]] = addrspacecast ptr addrspace(3) %[[VAL_238]] to ptr
// CHECK:         %[[VAL_240:.*]] = getelementptr [64 x i32], ptr addrspace(3) @sort_tile_param_0, i64 0, i64 %[[VAL_215]]
// CHECK:         %[[VAL_241:.*]] = addrspacecast ptr addrspace(3) %[[VAL_240]] to ptr
// CHECK:         %[[VAL_242:.*]] = getelementptr [64 x float], ptr addrspace(3) @sort_tile_param_1, i64 0, i64 %[[VAL_216]]
// CHECK:         %[[VAL_243:.*]] = addrspacecast ptr addrspace(3) %[[VAL_242]] to ptr
// CHECK:         %[[VAL_244:.*]] = getelementptr [64 x float], ptr addrspace(3) @sort_tile_param_1, i64 0, i64 %[[VAL_215]]
// CHECK:         %[[VAL_245:.*]] = addrspacecast ptr addrspace(3) %[[VAL_244]] to ptr
// CHECK-GCN:     %[[VAL_0_2:.*]] = addrspacecast ptr addrspace(5) %[[VAL_0]] to ptr
// CHECK-PTX:     call void @[[REGION2]](ptr %[[VAL_239]], ptr %[[VAL_241]], ptr %[[VAL_243]], ptr %[[VAL_245]], ptr %[[VAL_0]])
// CHECK-GCN:     call void @[[REGION2]](ptr %[[VAL_239]], ptr %[[VAL_241]], ptr %[[VAL_243]], ptr %[[VAL_245]], ptr %[[VAL_0_2]])
// CHECK-PTX:     %[[VAL_246:.*]] = load i8, ptr %[[VAL_0]], align 1
// CHECK-GCN:     %[[VAL_246:.*]] = load i8, ptr addrspace(5) %[[VAL_0]], align 1
// CHECK:         %[[VAL_247:.*]] = icmp ne i8 %[[VAL_246]], 0
// CHECK:         br i1 %[[VAL_247]], label %[[VAL_248:.*]], label %[[VAL_218]]
// CHECK:       is_smaller_than-after61:                          ; preds = %[[VAL_248]], %[[VAL_217]]
// CHECK:         br label %[[VAL_60]]
// CHECK:       is_smaller_than-true60:                           ; preds = %[[VAL_217]]
// CHECK:         %[[VAL_249:.*]] = load i32, ptr %[[VAL_239]], align 4
// CHECK:         %[[VAL_250:.*]] = load i32, ptr %[[VAL_241]], align 4
// CHECK:         %[[VAL_251:.*]] = getelementptr [64 x i32], ptr addrspace(3) @sort_tile_param_0, i64 0, i64 %[[VAL_215]]
// CHECK:         store i32 %[[VAL_249]], ptr addrspace(3) %[[VAL_251]], align 4
// CHECK:         %[[VAL_252:.*]] = getelementptr [64 x i32], ptr addrspace(3) @sort_tile_param_0, i64 0, i64 %[[VAL_216]]
// CHECK:         store i32 %[[VAL_250]], ptr addrspace(3) %[[VAL_252]], align 4
// CHECK:         %[[VAL_253:.*]] = load float, ptr %[[VAL_243]], align 4
// CHECK:         %[[VAL_254:.*]] = load float, ptr %[[VAL_245]], align 4
// CHECK:         %[[VAL_255:.*]] = getelementptr [64 x float], ptr addrspace(3) @sort_tile_param_1, i64 0, i64 %[[VAL_215]]
// CHECK:         store float %[[VAL_253]], ptr addrspace(3) %[[VAL_255]], align 4
// CHECK:         %[[VAL_256:.*]] = getelementptr [64 x float], ptr addrspace(3) @sort_tile_param_1, i64 0, i64 %[[VAL_216]]
// CHECK:         store float %[[VAL_254]], ptr addrspace(3) %[[VAL_256]], align 4
// CHECK:         br label %[[VAL_218]]
// CHECK:       smaller_keys_index-true65:                        ; preds = %[[VAL_68]]
// CHECK:         %[[VAL_257:.*]] = add nuw nsw i64 %[[VAL_63]], 0
// CHECK:         %[[VAL_258:.*]] = getelementptr [64 x i32], ptr addrspace(3) @sort_tile_param_0, i64 0, i64 %[[VAL_257]]
// CHECK:         %[[VAL_259:.*]] = load i32, ptr addrspace(3) %[[VAL_258]], align 4
// CHECK:         %[[VAL_260:.*]] = getelementptr inbounds [2 x [3 x i32]], ptr %[[VAL_84]], i64 0, i64 %[[VAL_16]], i64 %[[VAL_64]]
// CHECK:         store i32 %[[VAL_259]], ptr %[[VAL_260]], align 4
// CHECK:         br label %[[VAL_67]]
// CHECK:       smaller_keys_index-true69:                        ; preds = %[[VAL_67]]
// CHECK:         %[[VAL_261:.*]] = add nuw nsw i64 %[[VAL_63]], 1
// CHECK:         %[[VAL_262:.*]] = getelementptr [64 x i32], ptr addrspace(3) @sort_tile_param_0, i64 0, i64 %[[VAL_261]]
// CHECK:         %[[VAL_263:.*]] = load i32, ptr addrspace(3) %[[VAL_262]], align 4
// CHECK:         %[[VAL_264:.*]] = getelementptr inbounds [2 x [3 x i32]], ptr %[[VAL_84]], i64 0, i64 %[[VAL_16]], i64 %[[VAL_69]]
// CHECK:         store i32 %[[VAL_263]], ptr %[[VAL_264]], align 4
// CHECK:         br label %[[VAL_72]]
// CHECK:       smaller_keys_index-true75:                        ; preds = %[[VAL_72]]
// CHECK:         %[[VAL_265:.*]] = add nuw nsw i64 %[[VAL_74]], 0
// CHECK:         %[[VAL_266:.*]] = getelementptr [64 x float], ptr addrspace(3) @sort_tile_param_1, i64 0, i64 %[[VAL_265]]
// CHECK:         %[[VAL_267:.*]] = load float, ptr addrspace(3) %[[VAL_266]], align 4
// CHECK:         %[[VAL_268:.*]] = getelementptr inbounds [2 x [3 x float]], ptr %[[VAL_93]], i64 0, i64 %[[VAL_16]], i64 %[[VAL_75]]
// CHECK:         store float %[[VAL_267]], ptr %[[VAL_268]], align 4
// CHECK:         br label %[[VAL_78]]
// CHECK:       smaller_keys_index-true79:                        ; preds = %[[VAL_78]]
// CHECK:         %[[VAL_269:.*]] = add nuw nsw i64 %[[VAL_74]], 1
// CHECK:         %[[VAL_270:.*]] = getelementptr [64 x float], ptr addrspace(3) @sort_tile_param_1, i64 0, i64 %[[VAL_269]]
// CHECK:         %[[VAL_271:.*]] = load float, ptr addrspace(3) %[[VAL_270]], align 4
// CHECK:         %[[VAL_272:.*]] = getelementptr inbounds [2 x [3 x float]], ptr %[[VAL_93]], i64 0, i64 %[[VAL_16]], i64 %[[VAL_79]]
// CHECK:         store float %[[VAL_271]], ptr %[[VAL_272]], align 4
// CHECK:         br label %[[VAL_20]]
// CHECK:         %[[VAL_273:.*]] = alloca i8, align 1
// CHECK:         %[[VAL_274:.*]] = load float, ptr %[[VAL_275:.*]], align 4
// CHECK:         %[[VAL_276:.*]] = load float, ptr %[[VAL_277:.*]], align 4
// CHECK:         %[[VAL_278:.*]] = fcmp olt float %[[VAL_274]], %[[VAL_276]]
// CHECK:         %[[VAL_279:.*]] = zext i1 %[[VAL_278]] to i8
// CHECK-PTX:     store i8 %[[VAL_279]], ptr %[[VAL_273]], align 1
// CHECK-GCN:     store i8 %[[VAL_279]], ptr addrspace(5) %[[VAL_273]], align 1
// CHECK-PTX:     %[[VAL_280:.*]] = load i8, ptr %[[VAL_273]], align 1
// CHECK-GCN:     %[[VAL_280:.*]] = load i8, ptr addrspace(5) %[[VAL_273]], align 1
// CHECK:         ret void

ENTRY main {
  x = s32[2, 3] parameter(0)
  y = f32[2, 3] parameter(1)
  ROOT sort = (s32[2, 3], f32[2, 3]) sort(x, y), dimensions={1}, to_apply=compare
}

// -----

HloModule TestModule, is_scheduled=true

compare {
  p.0.lhs = f64[] parameter(0)
  p.0.rhs = f64[] parameter(1)
  p.1.lhs = f64[] parameter(2)
  p.1.rhs = f64[] parameter(3)
  p.2.lhs = f64[] parameter(4)
  p.2.rhs = f64[] parameter(5)
  p.3.lhs = f64[] parameter(6)
  p.3.rhs = f64[] parameter(7)
  ROOT lt = pred[] compare(p.1.lhs, p.1.rhs), direction=LT
}

ENTRY main {
  param0 = f64[2, 2048] parameter(0)
  param1 = f64[2, 2048] parameter(1)
  param2 = f64[2, 2048] parameter(2)
  param3 = f64[2, 2048] parameter(3)
  ROOT sort = (f64[2, 2048], f64[2, 2048], f64[2, 2048], f64[2, 2048]) sort(param0, param1, param2, param3), dimensions={1}, to_apply=compare
}
// Check that we have a tile size of 1024.
// CHECK:         getelementptr [1024 x double], ptr addrspace(3) @sort_tile_param_0

// -----

HloModule TestModule, is_scheduled=true

compare {
  p.0.lhs = f64[] parameter(0)
  p.0.rhs = f64[] parameter(1)
  ROOT lt = pred[] compare(p.0.lhs, p.0.rhs), direction=LT
}

ENTRY main {
  param0 = f64[3072] parameter(0)
  ROOT sort = f64[3072] sort(param0), dimensions={0}, to_apply=compare
}

// CHECK-COUNT-164: xor i64
// CHECK-NOT: xor i64
