HloModule jit_train_step, input_output_alias={ {0}: (0, {}, may-alias), {1}: (1, {}, may-alias), {2}: (2, {}, may-alias), {3}: (3, {}, may-alias), {4}: (4, {}, may-alias), {5}: (5, {}, may-alias), {6}: (6, {}, may-alias), {7}: (7, {}, may-alias), {8}: (8, {}, may-alias), {9}: (9, {}, may-alias), {10}: (10, {}, may-alias), {11}: (11, {}, may-alias), {12}: (12, {}, may-alias), {13}: (13, {}, may-alias), {14}: (14, {}, may-alias), {15}: (15, {}, may-alias), {16}: (16, {}, may-alias), {17}: (17, {}, may-alias), {18}: (18, {}, may-alias), {19}: (19, {}, may-alias), {20}: (20, {}, may-alias), {21}: (21, {}, may-alias), {22}: (22, {}, may-alias), {23}: (23, {}, may-alias), {24}: (24, {}, may-alias), {25}: (25, {}, may-alias), {26}: (26, {}, may-alias), {27}: (27, {}, may-alias), {28}: (28, {}, may-alias), {29}: (29, {}, may-alias), {30}: (30, {}, may-alias), {31}: (31, {}, may-alias), {32}: (32, {}, may-alias), {33}: (33, {}, may-alias), {34}: (34, {}, may-alias), {35}: (35, {}, may-alias), {36}: (36, {}, may-alias), {37}: (37, {}, may-alias), {38}: (38, {}, may-alias), {39}: (39, {}, may-alias), {40}: (40, {}, may-alias), {41}: (41, {}, may-alias), {42}: (42, {}, may-alias), {43}: (43, {}, may-alias), {44}: (44, {}, may-alias), {45}: (45, {}, may-alias), {46}: (46, {}, may-alias), {47}: (47, {}, may-alias), {48}: (48, {}, may-alias), {49}: (49, {}, may-alias), {50}: (50, {}, may-alias), {51}: (51, {}, may-alias), {52}: (52, {}, may-alias), {53}: (53, {}, may-alias), {54}: (54, {}, may-alias), {55}: (55, {}, may-alias), {56}: (56, {}, may-alias), {57}: (57, {}, may-alias), {58}: (58, {}, may-alias), {59}: (59, {}, may-alias), {60}: (60, {}, may-alias), {61}: (61, {}, may-alias), {62}: (62, {}, may-alias), {63}: (63, {}, may-alias), {64}: (64, {}, may-alias), {65}: (65, {}, may-alias), {66}: (66, {}, may-alias), {67}: (67, {}, may-alias), {68}: (68, {}, may-alias), {69}: (69, {}, may-alias), {70}: (70, {}, may-alias), {71}: (71, {}, may-alias), {72}: (72, {}, may-alias), {73}: (73, {}, may-alias), {74}: (74, {}, may-alias), {75}: (75, {}, may-alias), {76}: (76, {}, may-alias), {77}: (77, {}, may-alias), {78}: (78, {}, may-alias), {79}: (79, {}, may-alias), {80}: (80, {}, may-alias), {81}: (81, {}, may-alias), {82}: (82, {}, may-alias), {83}: (83, {}, may-alias), {84}: (84, {}, may-alias), {85}: (85, {}, may-alias), {86}: (86, {}, may-alias), {87}: (87, {}, may-alias), {88}: (88, {}, may-alias), {89}: (89, {}, may-alias), {90}: (90, {}, may-alias), {91}: (91, {}, may-alias), {92}: (92, {}, may-alias), {93}: (93, {}, may-alias), {94}: (94, {}, may-alias), {95}: (95, {}, may-alias), {96}: (96, {}, may-alias), {97}: (97, {}, may-alias), {98}: (98, {}, may-alias), {99}: (99, {}, may-alias), {100}: (100, {}, may-alias), {101}: (101, {}, may-alias), {102}: (102, {}, may-alias), {103}: (103, {}, may-alias), {104}: (104, {}, may-alias), {105}: (105, {}, may-alias), {106}: (106, {}, may-alias), {107}: (107, {}, may-alias), {108}: (108, {}, may-alias), {109}: (109, {}, may-alias), {110}: (110, {}, may-alias), {111}: (111, {}, may-alias), {112}: (112, {}, may-alias), {113}: (113, {}, may-alias), {114}: (114, {}, may-alias), {115}: (115, {}, may-alias), {116}: (116, {}, may-alias), {117}: (117, {}, may-alias), {118}: (118, {}, may-alias), {119}: (119, {}, may-alias), {120}: (120, {}, may-alias), {121}: (121, {}, may-alias), {122}: (122, {}, may-alias), {123}: (123, {}, may-alias), {124}: (124, {}, may-alias), {125}: (125, {}, may-alias), {126}: (126, {}, may-alias), {127}: (127, {}, may-alias), {128}: (128, {}, may-alias), {129}: (129, {}, may-alias), {130}: (130, {}, may-alias), {131}: (131, {}, may-alias), {132}: (132, {}, may-alias), {133}: (133, {}, may-alias), {134}: (134, {}, may-alias), {135}: (135, {}, may-alias), {136}: (136, {}, may-alias), {137}: (137, {}, may-alias), {138}: (138, {}, may-alias), {139}: (139, {}, may-alias), {140}: (140, {}, may-alias), {141}: (141, {}, may-alias), {142}: (142, {}, may-alias), {143}: (143, {}, may-alias), {144}: (144, {}, may-alias), {145}: (145, {}, may-alias), {146}: (146, {}, may-alias), {147}: (147, {}, may-alias), {148}: (148, {}, may-alias), {149}: (149, {}, may-alias), {150}: (150, {}, may-alias), {151}: (151, {}, may-alias), {152}: (152, {}, may-alias), {153}: (153, {}, may-alias), {154}: (154, {}, may-alias), {155}: (155, {}, may-alias), {156}: (156, {}, may-alias), {157}: (157, {}, may-alias), {158}: (158, {}, may-alias), {159}: (159, {}, may-alias), {160}: (160, {}, may-alias), {161}: (161, {}, may-alias), {162}: (162, {}, may-alias), {163}: (163, {}, may-alias), {164}: (164, {}, may-alias), {165}: (165, {}, may-alias), {166}: (166, {}, may-alias), {167}: (167, {}, may-alias), {168}: (168, {}, may-alias), {169}: (169, {}, may-alias), {170}: (170, {}, may-alias), {171}: (171, {}, may-alias), {172}: (172, {}, may-alias), {173}: (173, {}, may-alias), {174}: (174, {}, may-alias), {175}: (175, {}, may-alias), {176}: (176, {}, may-alias), {177}: (177, {}, may-alias), {178}: (178, {}, may-alias), {179}: (179, {}, may-alias), {180}: (180, {}, may-alias), {181}: (181, {}, may-alias), {182}: (182, {}, may-alias), {183}: (183, {}, may-alias), {184}: (184, {}, may-alias), {185}: (185, {}, may-alias), {186}: (186, {}, may-alias), {187}: (187, {}, may-alias), {188}: (188, {}, may-alias), {189}: (189, {}, may-alias), {190}: (190, {}, may-alias), {191}: (191, {}, may-alias), {192}: (192, {}, may-alias), {193}: (193, {}, may-alias), {194}: (194, {}, may-alias), {195}: (195, {}, may-alias), {196}: (196, {}, may-alias), {197}: (197, {}, may-alias), {198}: (198, {}, may-alias), {199}: (199, {}, may-alias), {200}: (200, {}, may-alias), {201}: (201, {}, may-alias), {202}: (202, {}, may-alias), {203}: (203, {}, may-alias), {204}: (204, {}, may-alias), {205}: (205, {}, may-alias), {206}: (206, {}, may-alias), {207}: (207, {}, may-alias), {208}: (208, {}, may-alias), {209}: (209, {}, may-alias), {210}: (210, {}, may-alias), {211}: (211, {}, may-alias), {212}: (212, {}, may-alias), {213}: (213, {}, may-alias), {214}: (214, {}, may-alias), {215}: (215, {}, may-alias), {216}: (216, {}, may-alias), {217}: (217, {}, may-alias), {218}: (218, {}, may-alias), {219}: (219, {}, may-alias), {220}: (220, {}, may-alias), {221}: (221, {}, may-alias), {222}: (222, {}, may-alias), {223}: (223, {}, may-alias), {224}: (224, {}, may-alias), {225}: (225, {}, may-alias), {226}: (226, {}, may-alias), {227}: (227, {}, may-alias), {228}: (228, {}, may-alias), {229}: (229, {}, may-alias), {230}: (230, {}, may-alias), {231}: (231, {}, may-alias), {232}: (232, {}, may-alias), {233}: (233, {}, may-alias), {234}: (234, {}, may-alias), {235}: (235, {}, may-alias), {236}: (236, {}, may-alias), {237}: (237, {}, may-alias), {238}: (238, {}, may-alias), {239}: (239, {}, may-alias), {240}: (240, {}, may-alias), {241}: (241, {}, may-alias), {242}: (242, {}, may-alias), {243}: (243, {}, may-alias), {244}: (244, {}, may-alias), {245}: (245, {}, may-alias), {246}: (246, {}, may-alias), {247}: (247, {}, may-alias), {248}: (248, {}, may-alias), {249}: (249, {}, may-alias), {250}: (250, {}, may-alias), {251}: (251, {}, may-alias), {252}: (252, {}, may-alias), {253}: (253, {}, may-alias), {254}: (254, {}, may-alias), {255}: (255, {}, may-alias), {256}: (256, {}, may-alias), {257}: (257, {}, may-alias), {258}: (258, {}, may-alias), {259}: (259, {}, may-alias), {260}: (260, {}, may-alias), {261}: (261, {}, may-alias), {262}: (262, {}, may-alias), {263}: (263, {}, may-alias), {264}: (264, {}, may-alias), {265}: (265, {}, may-alias), {266}: (266, {}, may-alias), {267}: (267, {}, may-alias), {268}: (268, {}, may-alias), {269}: (269, {}, may-alias), {270}: (270, {}, may-alias), {271}: (271, {}, may-alias), {272}: (272, {}, may-alias), {273}: (273, {}, may-alias), {274}: (274, {}, may-alias), {275}: (275, {}, may-alias), {276}: (276, {}, may-alias), {277}: (277, {}, may-alias), {278}: (278, {}, may-alias), {279}: (279, {}, may-alias), {280}: (280, {}, may-alias), {281}: (281, {}, may-alias), {282}: (282, {}, may-alias), {283}: (283, {}, may-alias), {284}: (284, {}, may-alias), {285}: (285, {}, may-alias), {286}: (286, {}, may-alias), {287}: (287, {}, may-alias), {288}: (288, {}, may-alias), {289}: (289, {}, may-alias), {290}: (290, {}, may-alias), {291}: (291, {}, may-alias), {292}: (292, {}, may-alias), {293}: (293, {}, may-alias), {294}: (294, {}, may-alias), {295}: (295, {}, may-alias), {296}: (296, {}, may-alias), {297}: (297, {}, may-alias), {298}: (298, {}, may-alias), {299}: (299, {}, may-alias), {300}: (300, {}, may-alias), {301}: (301, {}, may-alias), {302}: (302, {}, may-alias), {303}: (303, {}, may-alias), {304}: (304, {}, may-alias), {305}: (305, {}, may-alias), {306}: (306, {}, may-alias), {307}: (307, {}, may-alias), {308}: (308, {}, may-alias), {309}: (309, {}, may-alias), {310}: (310, {}, may-alias), {311}: (311, {}, may-alias), {312}: (312, {}, may-alias), {313}: (313, {}, may-alias), {314}: (314, {}, may-alias), {315}: (315, {}, may-alias), {316}: (316, {}, may-alias), {317}: (317, {}, may-alias), {318}: (318, {}, may-alias), {319}: (319, {}, may-alias), {320}: (320, {}, may-alias), {321}: (321, {}, may-alias), {322}: (322, {}, may-alias), {323}: (323, {}, may-alias), {324}: (324, {}, may-alias), {325}: (325, {}, may-alias), {326}: (326, {}, may-alias), {327}: (327, {}, may-alias), {328}: (328, {}, may-alias), {329}: (329, {}, may-alias), {330}: (330, {}, may-alias), {331}: (331, {}, may-alias), {332}: (332, {}, may-alias), {333}: (333, {}, may-alias), {334}: (334, {}, may-alias), {335}: (335, {}, may-alias), {336}: (336, {}, may-alias), {337}: (337, {}, may-alias), {338}: (338, {}, may-alias), {339}: (339, {}, may-alias), {340}: (340, {}, may-alias), {341}: (341, {}, may-alias), {342}: (342, {}, may-alias), {343}: (343, {}, may-alias), {344}: (344, {}, may-alias), {345}: (345, {}, may-alias), {346}: (346, {}, may-alias), {347}: (347, {}, may-alias), {348}: (348, {}, may-alias), {349}: (349, {}, may-alias), {350}: (350, {}, may-alias), {351}: (351, {}, may-alias), {352}: (352, {}, may-alias), {353}: (353, {}, may-alias), {354}: (354, {}, may-alias), {355}: (355, {}, may-alias), {356}: (356, {}, may-alias), {357}: (357, {}, may-alias), {358}: (358, {}, may-alias), {359}: (359, {}, may-alias), {360}: (360, {}, may-alias), {361}: (361, {}, may-alias), {362}: (362, {}, may-alias), {363}: (363, {}, may-alias), {364}: (364, {}, may-alias), {365}: (365, {}, may-alias), {366}: (366, {}, may-alias), {367}: (367, {}, may-alias), {368}: (368, {}, may-alias), {369}: (369, {}, may-alias), {370}: (370, {}, may-alias), {371}: (371, {}, may-alias), {372}: (372, {}, may-alias), {373}: (373, {}, may-alias), {374}: (374, {}, may-alias), {375}: (375, {}, may-alias), {376}: (376, {}, may-alias), {377}: (377, {}, may-alias), {378}: (378, {}, may-alias), {379}: (379, {}, may-alias), {380}: (380, {}, may-alias), {381}: (381, {}, may-alias), {382}: (382, {}, may-alias), {383}: (383, {}, may-alias), {384}: (384, {}, may-alias), {385}: (385, {}, may-alias), {386}: (386, {}, may-alias), {387}: (387, {}, may-alias), {388}: (388, {}, may-alias), {389}: (389, {}, may-alias), {390}: (390, {}, may-alias), {391}: (391, {}, may-alias), {392}: (392, {}, may-alias), {393}: (393, {}, may-alias), {394}: (394, {}, may-alias), {395}: (395, {}, may-alias), {396}: (396, {}, may-alias), {397}: (397, {}, may-alias), {398}: (398, {}, may-alias), {399}: (399, {}, may-alias), {400}: (400, {}, may-alias), {401}: (401, {}, may-alias), {402}: (402, {}, may-alias), {403}: (403, {}, may-alias), {404}: (404, {}, may-alias), {405}: (405, {}, may-alias), {406}: (406, {}, may-alias), {407}: (407, {}, may-alias), {408}: (408, {}, may-alias), {409}: (409, {}, may-alias), {410}: (410, {}, may-alias), {411}: (411, {}, may-alias), {412}: (412, {}, may-alias), {413}: (413, {}, may-alias), {414}: (414, {}, may-alias), {415}: (415, {}, may-alias), {416}: (416, {}, may-alias), {417}: (417, {}, may-alias), {418}: (418, {}, may-alias), {419}: (419, {}, may-alias), {420}: (420, {}, may-alias), {421}: (421, {}, may-alias), {422}: (422, {}, may-alias), {423}: (423, {}, may-alias), {424}: (424, {}, may-alias), {425}: (425, {}, may-alias), {426}: (426, {}, may-alias), {427}: (427, {}, may-alias), {428}: (428, {}, may-alias), {429}: (429, {}, may-alias), {430}: (430, {}, may-alias), {431}: (431, {}, may-alias), {432}: (432, {}, may-alias), {433}: (433, {}, may-alias), {434}: (434, {}, may-alias), {435}: (435, {}, may-alias), {436}: (436, {}, may-alias), {437}: (437, {}, may-alias), {438}: (438, {}, may-alias), {439}: (439, {}, may-alias), {440}: (440, {}, may-alias), {441}: (441, {}, may-alias), {442}: (442, {}, may-alias), {443}: (443, {}, may-alias), {444}: (444, {}, may-alias), {445}: (445, {}, may-alias), {446}: (446, {}, may-alias), {447}: (447, {}, may-alias), {448}: (448, {}, may-alias), {449}: (449, {}, may-alias), {450}: (450, {}, may-alias), {451}: (451, {}, may-alias), {452}: (452, {}, may-alias), {453}: (453, {}, may-alias), {454}: (454, {}, may-alias), {455}: (455, {}, may-alias), {456}: (456, {}, may-alias), {457}: (457, {}, may-alias), {458}: (458, {}, may-alias), {459}: (459, {}, may-alias), {460}: (460, {}, may-alias), {461}: (461, {}, may-alias), {462}: (462, {}, may-alias), {463}: (463, {}, may-alias), {464}: (464, {}, may-alias), {465}: (465, {}, may-alias), {466}: (466, {}, may-alias), {467}: (467, {}, may-alias), {468}: (468, {}, may-alias), {469}: (469, {}, may-alias), {470}: (470, {}, may-alias), {471}: (471, {}, may-alias), {472}: (472, {}, may-alias), {473}: (473, {}, may-alias), {474}: (474, {}, may-alias), {475}: (475, {}, may-alias), {476}: (476, {}, may-alias), {477}: (477, {}, may-alias), {478}: (478, {}, may-alias), {479}: (479, {}, may-alias), {480}: (480, {}, may-alias), {481}: (481, {}, may-alias), {482}: (482, {}, may-alias), {483}: (483, {}, may-alias), {484}: (484, {}, may-alias), {485}: (485, {}, may-alias), {486}: (486, {}, may-alias), {487}: (487, {}, may-alias), {488}: (488, {}, may-alias), {489}: (489, {}, may-alias), {490}: (490, {}, may-alias), {491}: (491, {}, may-alias), {492}: (492, {}, may-alias), {493}: (493, {}, may-alias), {494}: (494, {}, may-alias), {495}: (495, {}, may-alias), {496}: (496, {}, may-alias), {497}: (497, {}, may-alias), {498}: (498, {}, may-alias), {499}: (499, {}, may-alias), {500}: (500, {}, may-alias), {501}: (501, {}, may-alias), {502}: (502, {}, may-alias), {503}: (503, {}, may-alias), {504}: (504, {}, may-alias), {505}: (505, {}, may-alias), {506}: (506, {}, may-alias), {507}: (507, {}, may-alias), {508}: (508, {}, may-alias), {509}: (509, {}, may-alias), {510}: (510, {}, may-alias), {511}: (511, {}, may-alias), {512}: (512, {}, may-alias), {513}: (513, {}, may-alias), {514}: (514, {}, may-alias), {515}: (515, {}, may-alias), {516}: (516, {}, may-alias), {517}: (517, {}, may-alias), {518}: (518, {}, may-alias), {519}: (519, {}, may-alias), {520}: (520, {}, may-alias), {521}: (521, {}, may-alias), {522}: (522, {}, may-alias), {523}: (523, {}, may-alias), {524}: (524, {}, may-alias), {525}: (525, {}, may-alias), {526}: (526, {}, may-alias), {527}: (527, {}, may-alias), {528}: (528, {}, may-alias), {529}: (529, {}, may-alias), {530}: (530, {}, may-alias), {531}: (531, {}, may-alias), {532}: (532, {}, may-alias), {533}: (533, {}, may-alias), {534}: (534, {}, may-alias), {535}: (535, {}, may-alias), {536}: (536, {}, may-alias), {537}: (537, {}, may-alias), {538}: (538, {}, may-alias), {539}: (539, {}, may-alias), {540}: (540, {}, may-alias), {541}: (541, {}, may-alias), {542}: (542, {}, may-alias), {543}: (543, {}, may-alias), {544}: (544, {}, may-alias), {545}: (545, {}, may-alias), {546}: (546, {}, may-alias), {547}: (547, {}, may-alias), {548}: (548, {}, may-alias), {549}: (549, {}, may-alias), {550}: (550, {}, may-alias), {551}: (551, {}, may-alias), {552}: (552, {}, may-alias), {553}: (553, {}, may-alias), {554}: (554, {}, may-alias), {555}: (555, {}, may-alias), {556}: (556, {}, may-alias), {557}: (557, {}, may-alias), {558}: (558, {}, may-alias), {559}: (559, {}, may-alias), {560}: (560, {}, may-alias), {561}: (561, {}, may-alias), {562}: (562, {}, may-alias), {563}: (563, {}, may-alias), {564}: (564, {}, may-alias), {565}: (565, {}, may-alias), {566}: (566, {}, may-alias), {567}: (567, {}, may-alias), {568}: (568, {}, may-alias), {569}: (569, {}, may-alias), {570}: (570, {}, may-alias), {571}: (571, {}, may-alias), {572}: (572, {}, may-alias), {573}: (573, {}, may-alias), {574}: (574, {}, may-alias), {575}: (575, {}, may-alias), {576}: (576, {}, may-alias), {577}: (577, {}, may-alias), {578}: (578, {}, may-alias), {579}: (579, {}, may-alias), {580}: (580, {}, may-alias), {581}: (581, {}, may-alias), {582}: (582, {}, may-alias), {583}: (583, {}, may-alias), {584}: (584, {}, may-alias), {585}: (585, {}, may-alias), {586}: (586, {}, may-alias), {587}: (587, {}, may-alias), {588}: (588, {}, may-alias), {589}: (589, {}, may-alias), {590}: (590, {}, may-alias), {591}: (591, {}, may-alias), {592}: (592, {}, may-alias), {593}: (593, {}, may-alias), {594}: (594, {}, may-alias), {595}: (595, {}, may-alias), {596}: (596, {}, may-alias), {597}: (597, {}, may-alias), {598}: (598, {}, may-alias), {599}: (599, {}, may-alias), {600}: (600, {}, may-alias), {601}: (601, {}, may-alias), {602}: (602, {}, may-alias), {603}: (603, {}, may-alias), {604}: (604, {}, may-alias), {605}: (605, {}, may-alias), {606}: (606, {}, may-alias), {607}: (607, {}, may-alias), {608}: (608, {}, may-alias), {609}: (609, {}, may-alias), {610}: (610, {}, may-alias), {611}: (611, {}, may-alias), {612}: (612, {}, may-alias), {613}: (613, {}, may-alias), {614}: (614, {}, may-alias), {615}: (615, {}, may-alias), {616}: (616, {}, may-alias), {617}: (617, {}, may-alias), {618}: (618, {}, may-alias), {619}: (619, {}, may-alias), {620}: (620, {}, may-alias), {621}: (621, {}, may-alias), {622}: (622, {}, may-alias), {623}: (623, {}, may-alias), {624}: (624, {}, may-alias), {625}: (625, {}, may-alias), {626}: (626, {}, may-alias), {627}: (627, {}, may-alias), {628}: (628, {}, may-alias), {629}: (629, {}, may-alias), {630}: (630, {}, may-alias), {631}: (631, {}, may-alias), {632}: (632, {}, may-alias), {633}: (633, {}, may-alias), {634}: (634, {}, may-alias), {635}: (635, {}, may-alias), {636}: (636, {}, may-alias), {637}: (637, {}, may-alias), {638}: (638, {}, may-alias), {639}: (639, {}, may-alias), {640}: (640, {}, may-alias), {641}: (641, {}, may-alias), {642}: (642, {}, may-alias), {643}: (643, {}, may-alias), {644}: (644, {}, may-alias), {645}: (645, {}, may-alias), {646}: (646, {}, may-alias), {647}: (647, {}, may-alias), {648}: (648, {}, may-alias), {649}: (649, {}, may-alias), {650}: (650, {}, may-alias), {651}: (651, {}, may-alias), {652}: (652, {}, may-alias), {653}: (653, {}, may-alias), {654}: (654, {}, may-alias), {655}: (655, {}, may-alias), {656}: (656, {}, may-alias), {657}: (657, {}, may-alias), {658}: (658, {}, may-alias), {659}: (659, {}, may-alias), {660}: (660, {}, may-alias), {661}: (661, {}, may-alias), {662}: (662, {}, may-alias), {663}: (663, {}, may-alias), {664}: (664, {}, may-alias), {665}: (665, {}, may-alias), {666}: (666, {}, may-alias), {667}: (667, {}, may-alias), {668}: (668, {}, may-alias), {669}: (669, {}, may-alias), {670}: (670, {}, may-alias), {671}: (671, {}, may-alias), {672}: (672, {}, may-alias), {673}: (673, {}, may-alias), {674}: (674, {}, may-alias), {675}: (675, {}, may-alias), {676}: (676, {}, may-alias), {677}: (677, {}, may-alias), {678}: (678, {}, may-alias), {679}: (679, {}, may-alias), {680}: (680, {}, may-alias), {681}: (681, {}, may-alias), {682}: (682, {}, may-alias), {683}: (683, {}, may-alias), {684}: (684, {}, may-alias), {685}: (685, {}, may-alias), {686}: (686, {}, may-alias), {687}: (687, {}, may-alias), {688}: (688, {}, may-alias), {689}: (689, {}, may-alias), {690}: (690, {}, may-alias), {691}: (691, {}, may-alias), {692}: (692, {}, may-alias), {693}: (693, {}, may-alias), {694}: (694, {}, may-alias), {695}: (695, {}, may-alias), {696}: (696, {}, may-alias), {697}: (697, {}, may-alias), {698}: (698, {}, may-alias), {699}: (699, {}, may-alias), {700}: (700, {}, may-alias), {701}: (701, {}, may-alias), {702}: (702, {}, may-alias), {703}: (703, {}, may-alias), {704}: (704, {}, may-alias), {705}: (705, {}, may-alias), {706}: (706, {}, may-alias), {707}: (707, {}, may-alias), {708}: (708, {}, may-alias), {709}: (709, {}, may-alias), {710}: (710, {}, may-alias), {711}: (711, {}, may-alias), {712}: (712, {}, may-alias), {713}: (713, {}, may-alias), {714}: (714, {}, may-alias), {715}: (715, {}, may-alias), {716}: (716, {}, may-alias), {717}: (717, {}, may-alias), {718}: (718, {}, may-alias), {719}: (719, {}, may-alias), {720}: (720, {}, may-alias), {721}: (721, {}, may-alias), {722}: (722, {}, may-alias), {723}: (723, {}, may-alias), {724}: (724, {}, may-alias), {725}: (725, {}, may-alias), {726}: (726, {}, may-alias), {727}: (727, {}, may-alias), {728}: (728, {}, may-alias), {729}: (729, {}, may-alias), {730}: (730, {}, may-alias), {731}: (731, {}, may-alias), {732}: (732, {}, may-alias), {733}: (733, {}, may-alias), {734}: (734, {}, may-alias), {735}: (735, {}, may-alias), {736}: (736, {}, may-alias), {737}: (737, {}, may-alias), {738}: (738, {}, may-alias), {739}: (739, {}, may-alias), {740}: (740, {}, may-alias), {741}: (741, {}, may-alias), {742}: (742, {}, may-alias), {743}: (743, {}, may-alias), {744}: (744, {}, may-alias), {745}: (745, {}, may-alias), {746}: (746, {}, may-alias), {747}: (747, {}, may-alias), {748}: (748, {}, may-alias), {749}: (749, {}, may-alias), {750}: (750, {}, may-alias), {751}: (751, {}, may-alias), {752}: (752, {}, may-alias), {753}: (753, {}, may-alias), {754}: (754, {}, may-alias), {755}: (755, {}, may-alias), {756}: (756, {}, may-alias), {757}: (757, {}, may-alias), {758}: (758, {}, may-alias), {759}: (759, {}, may-alias), {760}: (760, {}, may-alias), {761}: (761, {}, may-alias), {762}: (762, {}, may-alias), {763}: (763, {}, may-alias), {764}: (764, {}, may-alias), {765}: (765, {}, may-alias), {766}: (766, {}, may-alias), {767}: (767, {}, may-alias), {768}: (768, {}, may-alias), {769}: (769, {}, may-alias), {770}: (770, {}, may-alias), {771}: (771, {}, may-alias), {772}: (772, {}, may-alias), {773}: (773, {}, may-alias), {774}: (774, {}, may-alias), {775}: (775, {}, may-alias), {776}: (776, {}, may-alias), {777}: (777, {}, may-alias), {778}: (778, {}, may-alias), {779}: (779, {}, may-alias), {780}: (780, {}, may-alias), {781}: (781, {}, may-alias), {782}: (782, {}, may-alias), {783}: (783, {}, may-alias), {784}: (784, {}, may-alias), {785}: (785, {}, may-alias), {786}: (786, {}, may-alias), {787}: (787, {}, may-alias), {788}: (788, {}, may-alias), {789}: (789, {}, may-alias), {790}: (790, {}, may-alias), {791}: (791, {}, may-alias), {792}: (792, {}, may-alias), {793}: (793, {}, may-alias), {794}: (794, {}, may-alias), {795}: (795, {}, may-alias), {796}: (796, {}, may-alias), {797}: (797, {}, may-alias), {798}: (798, {}, may-alias), {799}: (799, {}, may-alias), {800}: (800, {}, may-alias), {801}: (801, {}, may-alias), {802}: (802, {}, may-alias), {803}: (803, {}, may-alias), {804}: (804, {}, may-alias), {805}: (805, {}, may-alias), {806}: (806, {}, may-alias), {807}: (807, {}, may-alias), {808}: (808, {}, may-alias), {809}: (809, {}, may-alias), {810}: (810, {}, may-alias), {811}: (811, {}, may-alias), {812}: (812, {}, may-alias), {813}: (813, {}, may-alias), {814}: (814, {}, may-alias), {815}: (815, {}, may-alias), {816}: (816, {}, may-alias), {817}: (817, {}, may-alias), {818}: (818, {}, may-alias), {819}: (819, {}, may-alias), {820}: (820, {}, may-alias), {821}: (821, {}, may-alias), {822}: (822, {}, may-alias), {823}: (823, {}, may-alias), {824}: (824, {}, may-alias), {825}: (825, {}, may-alias), {826}: (826, {}, may-alias), {827}: (827, {}, may-alias), {828}: (828, {}, may-alias), {829}: (829, {}, may-alias), {830}: (830, {}, may-alias), {831}: (831, {}, may-alias), {832}: (832, {}, may-alias), {833}: (833, {}, may-alias), {834}: (834, {}, may-alias), {835}: (835, {}, may-alias), {836}: (836, {}, may-alias), {837}: (837, {}, may-alias), {838}: (838, {}, may-alias), {839}: (839, {}, may-alias), {840}: (840, {}, may-alias), {841}: (841, {}, may-alias), {842}: (842, {}, may-alias), {843}: (843, {}, may-alias), {844}: (844, {}, may-alias), {845}: (845, {}, may-alias), {846}: (846, {}, may-alias), {847}: (847, {}, may-alias), {848}: (848, {}, may-alias), {849}: (849, {}, may-alias), {850}: (850, {}, may-alias), {851}: (851, {}, may-alias), {852}: (852, {}, may-alias), {853}: (853, {}, may-alias), {854}: (854, {}, may-alias), {855}: (855, {}, may-alias), {856}: (856, {}, may-alias), {857}: (857, {}, may-alias), {858}: (858, {}, may-alias), {859}: (859, {}, may-alias), {860}: (860, {}, may-alias), {861}: (861, {}, may-alias), {862}: (862, {}, may-alias), {863}: (863, {}, may-alias), {864}: (864, {}, may-alias), {865}: (865, {}, may-alias), {866}: (866, {}, may-alias), {867}: (867, {}, may-alias), {868}: (868, {}, may-alias), {869}: (869, {}, may-alias), {870}: (870, {}, may-alias), {871}: (871, {}, may-alias), {872}: (872, {}, may-alias), {873}: (873, {}, may-alias), {874}: (874, {}, may-alias), {875}: (875, {}, may-alias), {876}: (876, {}, may-alias), {877}: (877, {}, may-alias), {878}: (878, {}, may-alias), {879}: (879, {}, may-alias), {880}: (880, {}, may-alias), {881}: (881, {}, may-alias), {882}: (882, {}, may-alias), {883}: (883, {}, may-alias), {884}: (884, {}, may-alias), {885}: (885, {}, may-alias), {886}: (886, {}, may-alias), {887}: (887, {}, may-alias), {888}: (888, {}, may-alias), {889}: (889, {}, may-alias), {890}: (890, {}, may-alias), {891}: (891, {}, may-alias), {892}: (892, {}, may-alias), {893}: (893, {}, may-alias), {894}: (894, {}, may-alias), {895}: (895, {}, may-alias), {896}: (896, {}, may-alias), {897}: (897, {}, may-alias), {898}: (898, {}, may-alias), {899}: (899, {}, may-alias), {900}: (900, {}, may-alias), {901}: (901, {}, may-alias), {902}: (902, {}, may-alias), {903}: (903, {}, may-alias), {904}: (904, {}, may-alias), {905}: (905, {}, may-alias), {906}: (906, {}, may-alias), {907}: (907, {}, may-alias), {908}: (908, {}, may-alias), {909}: (909, {}, may-alias), {910}: (910, {}, may-alias), {911}: (911, {}, may-alias), {912}: (912, {}, may-alias), {913}: (913, {}, may-alias), {914}: (914, {}, may-alias), {915}: (915, {}, may-alias), {916}: (916, {}, may-alias), {917}: (917, {}, may-alias), {918}: (918, {}, may-alias), {919}: (919, {}, may-alias), {920}: (920, {}, may-alias), {921}: (921, {}, may-alias), {922}: (922, {}, may-alias), {923}: (923, {}, may-alias), {924}: (924, {}, may-alias), {925}: (925, {}, may-alias), {926}: (926, {}, may-alias), {927}: (927, {}, may-alias), {928}: (928, {}, may-alias), {929}: (929, {}, may-alias), {930}: (930, {}, may-alias), {931}: (931, {}, may-alias), {932}: (932, {}, may-alias), {933}: (933, {}, may-alias), {934}: (934, {}, may-alias), {935}: (935, {}, may-alias), {936}: (936, {}, may-alias), {937}: (937, {}, may-alias), {938}: (938, {}, may-alias), {939}: (939, {}, may-alias), {940}: (940, {}, may-alias), {941}: (941, {}, may-alias), {942}: (942, {}, may-alias), {943}: (943, {}, may-alias), {944}: (944, {}, may-alias), {945}: (945, {}, may-alias), {946}: (946, {}, may-alias), {947}: (947, {}, may-alias), {948}: (948, {}, may-alias), {949}: (949, {}, may-alias), {950}: (950, {}, may-alias), {951}: (951, {}, may-alias), {952}: (952, {}, may-alias), {953}: (953, {}, may-alias), {954}: (954, {}, may-alias), {955}: (955, {}, may-alias), {956}: (956, {}, may-alias), {957}: (957, {}, may-alias), {958}: (958, {}, may-alias), {959}: (959, {}, may-alias), {960}: (960, {}, may-alias), {961}: (961, {}, may-alias), {962}: (962, {}, may-alias), {963}: (963, {}, may-alias), {964}: (964, {}, may-alias), {965}: (965, {}, may-alias), {966}: (966, {}, may-alias), {967}: (967, {}, may-alias), {968}: (968, {}, may-alias), {969}: (969, {}, may-alias), {970}: (970, {}, may-alias), {971}: (971, {}, may-alias) }, entry_computation_layout={(s32[], bf16[4096]{0}, bf16[512,8]{1,0}, bf16[1,4096,14336]{2,1,0}, bf16[1,4096,14336]{2,1,0}, /*index=5*/bf16[1,14336,4096]{2,1,0}, bf16[4096]{0}, bf16[4096]{0}, bf16[512,8,128]{2,1,0}, bf16[32,128,512]{2,1,0}, /*index=10*/bf16[512,32,128]{2,1,0}, bf16[512,8,128]{2,1,0}, bf16[512,8]{1,0}, bf16[1,4096,14336]{2,1,0}, bf16[1,4096,14336]{2,1,0}, /*index=15*/bf16[1,14336,4096]{2,1,0}, bf16[4096]{0}, bf16[4096]{0}, bf16[512,8,128]{2,1,0}, bf16[32,128,512]{2,1,0}, /*index=20*/bf16[512,32,128]{2,1,0}, bf16[512,8,128]{2,1,0}, bf16[512,8]{1,0}, bf16[1,4096,14336]{2,1,0}, bf16[1,4096,14336]{2,1,0}, /*index=25*/bf16[1,14336,4096]{2,1,0}, bf16[4096]{0}, bf16[4096]{0}, bf16[512,8,128]{2,1,0}, bf16[32,128,512]{2,1,0}, /*index=30*/bf16[512,32,128]{2,1,0}, bf16[512,8,128]{2,1,0}, bf16[512,8]{1,0}, bf16[1,4096,14336]{2,1,0}, bf16[1,4096,14336]{2,1,0}, /*index=35*/bf16[1,14336,4096]{2,1,0}, bf16[4096]{0}, bf16[4096]{0}, bf16[512,8,128]{2,1,0}, bf16[32,128,512]{2,1,0}, /*index=40*/bf16[512,32,128]{2,1,0}, bf16[512,8,128]{2,1,0}, bf16[512,8]{1,0}, bf16[1,4096,14336]{2,1,0}, bf16[1,4096,14336]{2,1,0}, /*index=45*/bf16[1,14336,4096]{2,1,0}, bf16[4096]{0}, bf16[4096]{0}, bf16[512,8,128]{2,1,0}, bf16[32,128,512]{2,1,0}, /*index=50*/bf16[512,32,128]{2,1,0}, bf16[512,8,128]{2,1,0}, bf16[512,8]{1,0}, bf16[1,4096,14336]{2,1,0}, bf16[1,4096,14336]{2,1,0}, /*index=55*/bf16[1,14336,4096]{2,1,0}, bf16[4096]{0}, bf16[4096]{0}, bf16[512,8,128]{2,1,0}, bf16[32,128,512]{2,1,0}, /*index=60*/bf16[512,32,128]{2,1,0}, bf16[512,8,128]{2,1,0}, bf16[512,8]{1,0}, bf16[1,4096,14336]{2,1,0}, bf16[1,4096,14336]{2,1,0}, /*index=65*/bf16[1,14336,4096]{2,1,0}, bf16[4096]{0}, bf16[4096]{0}, bf16[512,8,128]{2,1,0}, bf16[32,128,512]{2,1,0}, /*index=70*/bf16[512,32,128]{2,1,0}, bf16[512,8,128]{2,1,0}, bf16[512,8]{1,0}, bf16[1,4096,14336]{2,1,0}, bf16[1,4096,14336]{2,1,0}, /*index=75*/bf16[1,14336,4096]{2,1,0}, bf16[4096]{0}, bf16[4096]{0}, bf16[512,8,128]{2,1,0}, bf16[32,128,512]{2,1,0}, /*index=80*/bf16[512,32,128]{2,1,0}, bf16[512,8,128]{2,1,0}, bf16[512,8]{1,0}, bf16[1,4096,14336]{2,1,0}, bf16[1,4096,14336]{2,1,0}, /*index=85*/bf16[1,14336,4096]{2,1,0}, bf16[4096]{0}, bf16[4096]{0}, bf16[512,8,128]{2,1,0}, bf16[32,128,512]{2,1,0}, /*index=90*/bf16[512,32,128]{2,1,0}, bf16[512,8,128]{2,1,0}, bf16[512,8]{1,0}, bf16[1,4096,14336]{2,1,0}, bf16[1,4096,14336]{2,1,0}, /*index=95*/bf16[1,14336,4096]{2,1,0}, bf16[4096]{0}, bf16[4096]{0}, bf16[512,8,128]{2,1,0}, bf16[32,128,512]{2,1,0}, /*index=100*/bf16[512,32,128]{2,1,0}, bf16[512,8,128]{2,1,0}, bf16[512,8]{1,0}, bf16[1,4096,14336]{2,1,0}, bf16[1,4096,14336]{2,1,0}, /*index=105*/bf16[1,14336,4096]{2,1,0}, bf16[4096]{0}, bf16[4096]{0}, bf16[512,8,128]{2,1,0}, bf16[32,128,512]{2,1,0}, /*index=110*/bf16[512,32,128]{2,1,0}, bf16[512,8,128]{2,1,0}, bf16[512,8]{1,0}, bf16[1,4096,14336]{2,1,0}, bf16[1,4096,14336]{2,1,0}, /*index=115*/bf16[1,14336,4096]{2,1,0}, bf16[4096]{0}, bf16[4096]{0}, bf16[512,8,128]{2,1,0}, bf16[32,128,512]{2,1,0}, /*index=120*/bf16[512,32,128]{2,1,0}, bf16[512,8,128]{2,1,0}, bf16[512,8]{1,0}, bf16[1,4096,14336]{2,1,0}, bf16[1,4096,14336]{2,1,0}, /*index=125*/bf16[1,14336,4096]{2,1,0}, bf16[4096]{0}, bf16[4096]{0}, bf16[512,8,128]{2,1,0}, bf16[32,128,512]{2,1,0}, /*index=130*/bf16[512,32,128]{2,1,0}, bf16[512,8,128]{2,1,0}, bf16[512,8]{1,0}, bf16[1,4096,14336]{2,1,0}, bf16[1,4096,14336]{2,1,0}, /*index=135*/bf16[1,14336,4096]{2,1,0}, bf16[4096]{0}, bf16[4096]{0}, bf16[512,8,128]{2,1,0}, bf16[32,128,512]{2,1,0}, /*index=140*/bf16[512,32,128]{2,1,0}, bf16[512,8,128]{2,1,0}, bf16[512,8]{1,0}, bf16[1,4096,14336]{2,1,0}, bf16[1,4096,14336]{2,1,0}, /*index=145*/bf16[1,14336,4096]{2,1,0}, bf16[4096]{0}, bf16[4096]{0}, bf16[512,8,128]{2,1,0}, bf16[32,128,512]{2,1,0}, /*index=150*/bf16[512,32,128]{2,1,0}, bf16[512,8,128]{2,1,0}, bf16[512,8]{1,0}, bf16[1,4096,14336]{2,1,0}, bf16[1,4096,14336]{2,1,0}, /*index=155*/bf16[1,14336,4096]{2,1,0}, bf16[4096]{0}, bf16[4096]{0}, bf16[512,8,128]{2,1,0}, bf16[32,128,512]{2,1,0}, /*index=160*/bf16[512,32,128]{2,1,0}, bf16[512,8,128]{2,1,0}, bf16[512,8]{1,0}, bf16[1,4096,14336]{2,1,0}, bf16[1,4096,14336]{2,1,0}, /*index=165*/bf16[1,14336,4096]{2,1,0}, bf16[4096]{0}, bf16[4096]{0}, bf16[512,8,128]{2,1,0}, bf16[32,128,512]{2,1,0}, /*index=170*/bf16[512,32,128]{2,1,0}, bf16[512,8,128]{2,1,0}, bf16[512,8]{1,0}, bf16[1,4096,14336]{2,1,0}, bf16[1,4096,14336]{2,1,0}, /*index=175*/bf16[1,14336,4096]{2,1,0}, bf16[4096]{0}, bf16[4096]{0}, bf16[512,8,128]{2,1,0}, bf16[32,128,512]{2,1,0}, /*index=180*/bf16[512,32,128]{2,1,0}, bf16[512,8,128]{2,1,0}, bf16[512,8]{1,0}, bf16[1,4096,14336]{2,1,0}, bf16[1,4096,14336]{2,1,0}, /*index=185*/bf16[1,14336,4096]{2,1,0}, bf16[4096]{0}, bf16[4096]{0}, bf16[512,8,128]{2,1,0}, bf16[32,128,512]{2,1,0}, /*index=190*/bf16[512,32,128]{2,1,0}, bf16[512,8,128]{2,1,0}, bf16[512,8]{1,0}, bf16[1,4096,14336]{2,1,0}, bf16[1,4096,14336]{2,1,0}, /*index=195*/bf16[1,14336,4096]{2,1,0}, bf16[4096]{0}, bf16[4096]{0}, bf16[512,8,128]{2,1,0}, bf16[32,128,512]{2,1,0}, /*index=200*/bf16[512,32,128]{2,1,0}, bf16[512,8,128]{2,1,0}, bf16[512,8]{1,0}, bf16[1,4096,14336]{2,1,0}, bf16[1,4096,14336]{2,1,0}, /*index=205*/bf16[1,14336,4096]{2,1,0}, bf16[4096]{0}, bf16[4096]{0}, bf16[512,8,128]{2,1,0}, bf16[32,128,512]{2,1,0}, /*index=210*/bf16[512,32,128]{2,1,0}, bf16[512,8,128]{2,1,0}, bf16[512,8]{1,0}, bf16[1,4096,14336]{2,1,0}, bf16[1,4096,14336]{2,1,0}, /*index=215*/bf16[1,14336,4096]{2,1,0}, bf16[4096]{0}, bf16[4096]{0}, bf16[512,8,128]{2,1,0}, bf16[32,128,512]{2,1,0}, /*index=220*/bf16[512,32,128]{2,1,0}, bf16[512,8,128]{2,1,0}, bf16[512,8]{1,0}, bf16[1,4096,14336]{2,1,0}, bf16[1,4096,14336]{2,1,0}, /*index=225*/bf16[1,14336,4096]{2,1,0}, bf16[4096]{0}, bf16[4096]{0}, bf16[512,8,128]{2,1,0}, bf16[32,128,512]{2,1,0}, /*index=230*/bf16[512,32,128]{2,1,0}, bf16[512,8,128]{2,1,0}, bf16[512,8]{1,0}, bf16[1,4096,14336]{2,1,0}, bf16[1,4096,14336]{2,1,0}, /*index=235*/bf16[1,14336,4096]{2,1,0}, bf16[4096]{0}, bf16[4096]{0}, bf16[512,8,128]{2,1,0}, bf16[32,128,512]{2,1,0}, /*index=240*/bf16[512,32,128]{2,1,0}, bf16[512,8,128]{2,1,0}, bf16[512,8]{1,0}, bf16[1,4096,14336]{2,1,0}, bf16[1,4096,14336]{2,1,0}, /*index=245*/bf16[1,14336,4096]{2,1,0}, bf16[4096]{0}, bf16[4096]{0}, bf16[512,8,128]{2,1,0}, bf16[32,128,512]{2,1,0}, /*index=250*/bf16[512,32,128]{2,1,0}, bf16[512,8,128]{2,1,0}, bf16[512,8]{1,0}, bf16[1,4096,14336]{2,1,0}, bf16[1,4096,14336]{2,1,0}, /*index=255*/bf16[1,14336,4096]{2,1,0}, bf16[4096]{0}, bf16[4096]{0}, bf16[512,8,128]{2,1,0}, bf16[32,128,512]{2,1,0}, /*index=260*/bf16[512,32,128]{2,1,0}, bf16[512,8,128]{2,1,0}, bf16[512,8]{1,0}, bf16[1,4096,14336]{2,1,0}, bf16[1,4096,14336]{2,1,0}, /*index=265*/bf16[1,14336,4096]{2,1,0}, bf16[4096]{0}, bf16[4096]{0}, bf16[512,8,128]{2,1,0}, bf16[32,128,512]{2,1,0}, /*index=270*/bf16[512,32,128]{2,1,0}, bf16[512,8,128]{2,1,0}, bf16[512,8]{1,0}, bf16[1,4096,14336]{2,1,0}, bf16[1,4096,14336]{2,1,0}, /*index=275*/bf16[1,14336,4096]{2,1,0}, bf16[4096]{0}, bf16[4096]{0}, bf16[512,8,128]{2,1,0}, bf16[32,128,512]{2,1,0}, /*index=280*/bf16[512,32,128]{2,1,0}, bf16[512,8,128]{2,1,0}, bf16[512,8]{1,0}, bf16[1,4096,14336]{2,1,0}, bf16[1,4096,14336]{2,1,0}, /*index=285*/bf16[1,14336,4096]{2,1,0}, bf16[4096]{0}, bf16[4096]{0}, bf16[512,8,128]{2,1,0}, bf16[32,128,512]{2,1,0}, /*index=290*/bf16[512,32,128]{2,1,0}, bf16[512,8,128]{2,1,0}, bf16[512,8]{1,0}, bf16[1,4096,14336]{2,1,0}, bf16[1,4096,14336]{2,1,0}, /*index=295*/bf16[1,14336,4096]{2,1,0}, bf16[4096]{0}, bf16[4096]{0}, bf16[512,8,128]{2,1,0}, bf16[32,128,512]{2,1,0}, /*index=300*/bf16[512,32,128]{2,1,0}, bf16[512,8,128]{2,1,0}, bf16[512,8]{1,0}, bf16[1,4096,14336]{2,1,0}, bf16[1,4096,14336]{2,1,0}, /*index=305*/bf16[1,14336,4096]{2,1,0}, bf16[4096]{0}, bf16[4096]{0}, bf16[512,8,128]{2,1,0}, bf16[32,128,512]{2,1,0}, /*index=310*/bf16[512,32,128]{2,1,0}, bf16[512,8,128]{2,1,0}, bf16[512,8]{1,0}, bf16[1,4096,14336]{2,1,0}, bf16[1,4096,14336]{2,1,0}, /*index=315*/bf16[1,14336,4096]{2,1,0}, bf16[4096]{0}, bf16[4096]{0}, bf16[512,8,128]{2,1,0}, bf16[32,128,512]{2,1,0}, /*index=320*/bf16[512,32,128]{2,1,0}, bf16[512,8,128]{2,1,0}, bf16[512,32000]{1,0}, bf16[32000,512]{1,0}, s32[], /*index=325*/bf16[4096]{0}, bf16[512,8]{1,0}, bf16[1,4096,14336]{2,1,0}, bf16[1,4096,14336]{2,1,0}, bf16[1,14336,4096]{2,1,0}, /*index=330*/bf16[4096]{0}, bf16[4096]{0}, bf16[512,8,128]{2,1,0}, bf16[32,128,512]{2,1,0}, bf16[512,32,128]{2,1,0}, /*index=335*/bf16[512,8,128]{2,1,0}, bf16[512,8]{1,0}, bf16[1,4096,14336]{2,1,0}, bf16[1,4096,14336]{2,1,0}, bf16[1,14336,4096]{2,1,0}, /*index=340*/bf16[4096]{0}, bf16[4096]{0}, bf16[512,8,128]{2,1,0}, bf16[32,128,512]{2,1,0}, bf16[512,32,128]{2,1,0}, /*index=345*/bf16[512,8,128]{2,1,0}, bf16[512,8]{1,0}, bf16[1,4096,14336]{2,1,0}, bf16[1,4096,14336]{2,1,0}, bf16[1,14336,4096]{2,1,0}, /*index=350*/bf16[4096]{0}, bf16[4096]{0}, bf16[512,8,128]{2,1,0}, bf16[32,128,512]{2,1,0}, bf16[512,32,128]{2,1,0}, /*index=355*/bf16[512,8,128]{2,1,0}, bf16[512,8]{1,0}, bf16[1,4096,14336]{2,1,0}, bf16[1,4096,14336]{2,1,0}, bf16[1,14336,4096]{2,1,0}, /*index=360*/bf16[4096]{0}, bf16[4096]{0}, bf16[512,8,128]{2,1,0}, bf16[32,128,512]{2,1,0}, bf16[512,32,128]{2,1,0}, /*index=365*/bf16[512,8,128]{2,1,0}, bf16[512,8]{1,0}, bf16[1,4096,14336]{2,1,0}, bf16[1,4096,14336]{2,1,0}, bf16[1,14336,4096]{2,1,0}, /*index=370*/bf16[4096]{0}, bf16[4096]{0}, bf16[512,8,128]{2,1,0}, bf16[32,128,512]{2,1,0}, bf16[512,32,128]{2,1,0}, /*index=375*/bf16[512,8,128]{2,1,0}, bf16[512,8]{1,0}, bf16[1,4096,14336]{2,1,0}, bf16[1,4096,14336]{2,1,0}, bf16[1,14336,4096]{2,1,0}, /*index=380*/bf16[4096]{0}, bf16[4096]{0}, bf16[512,8,128]{2,1,0}, bf16[32,128,512]{2,1,0}, bf16[512,32,128]{2,1,0}, /*index=385*/bf16[512,8,128]{2,1,0}, bf16[512,8]{1,0}, bf16[1,4096,14336]{2,1,0}, bf16[1,4096,14336]{2,1,0}, bf16[1,14336,4096]{2,1,0}, /*index=390*/bf16[4096]{0}, bf16[4096]{0}, bf16[512,8,128]{2,1,0}, bf16[32,128,512]{2,1,0}, bf16[512,32,128]{2,1,0}, /*index=395*/bf16[512,8,128]{2,1,0}, bf16[512,8]{1,0}, bf16[1,4096,14336]{2,1,0}, bf16[1,4096,14336]{2,1,0}, bf16[1,14336,4096]{2,1,0}, /*index=400*/bf16[4096]{0}, bf16[4096]{0}, bf16[512,8,128]{2,1,0}, bf16[32,128,512]{2,1,0}, bf16[512,32,128]{2,1,0}, /*index=405*/bf16[512,8,128]{2,1,0}, bf16[512,8]{1,0}, bf16[1,4096,14336]{2,1,0}, bf16[1,4096,14336]{2,1,0}, bf16[1,14336,4096]{2,1,0}, /*index=410*/bf16[4096]{0}, bf16[4096]{0}, bf16[512,8,128]{2,1,0}, bf16[32,128,512]{2,1,0}, bf16[512,32,128]{2,1,0}, /*index=415*/bf16[512,8,128]{2,1,0}, bf16[512,8]{1,0}, bf16[1,4096,14336]{2,1,0}, bf16[1,4096,14336]{2,1,0}, bf16[1,14336,4096]{2,1,0}, /*index=420*/bf16[4096]{0}, bf16[4096]{0}, bf16[512,8,128]{2,1,0}, bf16[32,128,512]{2,1,0}, bf16[512,32,128]{2,1,0}, /*index=425*/bf16[512,8,128]{2,1,0}, bf16[512,8]{1,0}, bf16[1,4096,14336]{2,1,0}, bf16[1,4096,14336]{2,1,0}, bf16[1,14336,4096]{2,1,0}, /*index=430*/bf16[4096]{0}, bf16[4096]{0}, bf16[512,8,128]{2,1,0}, bf16[32,128,512]{2,1,0}, bf16[512,32,128]{2,1,0}, /*index=435*/bf16[512,8,128]{2,1,0}, bf16[512,8]{1,0}, bf16[1,4096,14336]{2,1,0}, bf16[1,4096,14336]{2,1,0}, bf16[1,14336,4096]{2,1,0}, /*index=440*/bf16[4096]{0}, bf16[4096]{0}, bf16[512,8,128]{2,1,0}, bf16[32,128,512]{2,1,0}, bf16[512,32,128]{2,1,0}, /*index=445*/bf16[512,8,128]{2,1,0}, bf16[512,8]{1,0}, bf16[1,4096,14336]{2,1,0}, bf16[1,4096,14336]{2,1,0}, bf16[1,14336,4096]{2,1,0}, /*index=450*/bf16[4096]{0}, bf16[4096]{0}, bf16[512,8,128]{2,1,0}, bf16[32,128,512]{2,1,0}, bf16[512,32,128]{2,1,0}, /*index=455*/bf16[512,8,128]{2,1,0}, bf16[512,8]{1,0}, bf16[1,4096,14336]{2,1,0}, bf16[1,4096,14336]{2,1,0}, bf16[1,14336,4096]{2,1,0}, /*index=460*/bf16[4096]{0}, bf16[4096]{0}, bf16[512,8,128]{2,1,0}, bf16[32,128,512]{2,1,0}, bf16[512,32,128]{2,1,0}, /*index=465*/bf16[512,8,128]{2,1,0}, bf16[512,8]{1,0}, bf16[1,4096,14336]{2,1,0}, bf16[1,4096,14336]{2,1,0}, bf16[1,14336,4096]{2,1,0}, /*index=470*/bf16[4096]{0}, bf16[4096]{0}, bf16[512,8,128]{2,1,0}, bf16[32,128,512]{2,1,0}, bf16[512,32,128]{2,1,0}, /*index=475*/bf16[512,8,128]{2,1,0}, bf16[512,8]{1,0}, bf16[1,4096,14336]{2,1,0}, bf16[1,4096,14336]{2,1,0}, bf16[1,14336,4096]{2,1,0}, /*index=480*/bf16[4096]{0}, bf16[4096]{0}, bf16[512,8,128]{2,1,0}, bf16[32,128,512]{2,1,0}, bf16[512,32,128]{2,1,0}, /*index=485*/bf16[512,8,128]{2,1,0}, bf16[512,8]{1,0}, bf16[1,4096,14336]{2,1,0}, bf16[1,4096,14336]{2,1,0}, bf16[1,14336,4096]{2,1,0}, /*index=490*/bf16[4096]{0}, bf16[4096]{0}, bf16[512,8,128]{2,1,0}, bf16[32,128,512]{2,1,0}, bf16[512,32,128]{2,1,0}, /*index=495*/bf16[512,8,128]{2,1,0}, bf16[512,8]{1,0}, bf16[1,4096,14336]{2,1,0}, bf16[1,4096,14336]{2,1,0}, bf16[1,14336,4096]{2,1,0}, /*index=500*/bf16[4096]{0}, bf16[4096]{0}, bf16[512,8,128]{2,1,0}, bf16[32,128,512]{2,1,0}, bf16[512,32,128]{2,1,0}, /*index=505*/bf16[512,8,128]{2,1,0}, bf16[512,8]{1,0}, bf16[1,4096,14336]{2,1,0}, bf16[1,4096,14336]{2,1,0}, bf16[1,14336,4096]{2,1,0}, /*index=510*/bf16[4096]{0}, bf16[4096]{0}, bf16[512,8,128]{2,1,0}, bf16[32,128,512]{2,1,0}, bf16[512,32,128]{2,1,0}, /*index=515*/bf16[512,8,128]{2,1,0}, bf16[512,8]{1,0}, bf16[1,4096,14336]{2,1,0}, bf16[1,4096,14336]{2,1,0}, bf16[1,14336,4096]{2,1,0}, /*index=520*/bf16[4096]{0}, bf16[4096]{0}, bf16[512,8,128]{2,1,0}, bf16[32,128,512]{2,1,0}, bf16[512,32,128]{2,1,0}, /*index=525*/bf16[512,8,128]{2,1,0}, bf16[512,8]{1,0}, bf16[1,4096,14336]{2,1,0}, bf16[1,4096,14336]{2,1,0}, bf16[1,14336,4096]{2,1,0}, /*index=530*/bf16[4096]{0}, bf16[4096]{0}, bf16[512,8,128]{2,1,0}, bf16[32,128,512]{2,1,0}, bf16[512,32,128]{2,1,0}, /*index=535*/bf16[512,8,128]{2,1,0}, bf16[512,8]{1,0}, bf16[1,4096,14336]{2,1,0}, bf16[1,4096,14336]{2,1,0}, bf16[1,14336,4096]{2,1,0}, /*index=540*/bf16[4096]{0}, bf16[4096]{0}, bf16[512,8,128]{2,1,0}, bf16[32,128,512]{2,1,0}, bf16[512,32,128]{2,1,0}, /*index=545*/bf16[512,8,128]{2,1,0}, bf16[512,8]{1,0}, bf16[1,4096,14336]{2,1,0}, bf16[1,4096,14336]{2,1,0}, bf16[1,14336,4096]{2,1,0}, /*index=550*/bf16[4096]{0}, bf16[4096]{0}, bf16[512,8,128]{2,1,0}, bf16[32,128,512]{2,1,0}, bf16[512,32,128]{2,1,0}, /*index=555*/bf16[512,8,128]{2,1,0}, bf16[512,8]{1,0}, bf16[1,4096,14336]{2,1,0}, bf16[1,4096,14336]{2,1,0}, bf16[1,14336,4096]{2,1,0}, /*index=560*/bf16[4096]{0}, bf16[4096]{0}, bf16[512,8,128]{2,1,0}, bf16[32,128,512]{2,1,0}, bf16[512,32,128]{2,1,0}, /*index=565*/bf16[512,8,128]{2,1,0}, bf16[512,8]{1,0}, bf16[1,4096,14336]{2,1,0}, bf16[1,4096,14336]{2,1,0}, bf16[1,14336,4096]{2,1,0}, /*index=570*/bf16[4096]{0}, bf16[4096]{0}, bf16[512,8,128]{2,1,0}, bf16[32,128,512]{2,1,0}, bf16[512,32,128]{2,1,0}, /*index=575*/bf16[512,8,128]{2,1,0}, bf16[512,8]{1,0}, bf16[1,4096,14336]{2,1,0}, bf16[1,4096,14336]{2,1,0}, bf16[1,14336,4096]{2,1,0}, /*index=580*/bf16[4096]{0}, bf16[4096]{0}, bf16[512,8,128]{2,1,0}, bf16[32,128,512]{2,1,0}, bf16[512,32,128]{2,1,0}, /*index=585*/bf16[512,8,128]{2,1,0}, bf16[512,8]{1,0}, bf16[1,4096,14336]{2,1,0}, bf16[1,4096,14336]{2,1,0}, bf16[1,14336,4096]{2,1,0}, /*index=590*/bf16[4096]{0}, bf16[4096]{0}, bf16[512,8,128]{2,1,0}, bf16[32,128,512]{2,1,0}, bf16[512,32,128]{2,1,0}, /*index=595*/bf16[512,8,128]{2,1,0}, bf16[512,8]{1,0}, bf16[1,4096,14336]{2,1,0}, bf16[1,4096,14336]{2,1,0}, bf16[1,14336,4096]{2,1,0}, /*index=600*/bf16[4096]{0}, bf16[4096]{0}, bf16[512,8,128]{2,1,0}, bf16[32,128,512]{2,1,0}, bf16[512,32,128]{2,1,0}, /*index=605*/bf16[512,8,128]{2,1,0}, bf16[512,8]{1,0}, bf16[1,4096,14336]{2,1,0}, bf16[1,4096,14336]{2,1,0}, bf16[1,14336,4096]{2,1,0}, /*index=610*/bf16[4096]{0}, bf16[4096]{0}, bf16[512,8,128]{2,1,0}, bf16[32,128,512]{2,1,0}, bf16[512,32,128]{2,1,0}, /*index=615*/bf16[512,8,128]{2,1,0}, bf16[512,8]{1,0}, bf16[1,4096,14336]{2,1,0}, bf16[1,4096,14336]{2,1,0}, bf16[1,14336,4096]{2,1,0}, /*index=620*/bf16[4096]{0}, bf16[4096]{0}, bf16[512,8,128]{2,1,0}, bf16[32,128,512]{2,1,0}, bf16[512,32,128]{2,1,0}, /*index=625*/bf16[512,8,128]{2,1,0}, bf16[512,8]{1,0}, bf16[1,4096,14336]{2,1,0}, bf16[1,4096,14336]{2,1,0}, bf16[1,14336,4096]{2,1,0}, /*index=630*/bf16[4096]{0}, bf16[4096]{0}, bf16[512,8,128]{2,1,0}, bf16[32,128,512]{2,1,0}, bf16[512,32,128]{2,1,0}, /*index=635*/bf16[512,8,128]{2,1,0}, bf16[512,8]{1,0}, bf16[1,4096,14336]{2,1,0}, bf16[1,4096,14336]{2,1,0}, bf16[1,14336,4096]{2,1,0}, /*index=640*/bf16[4096]{0}, bf16[4096]{0}, bf16[512,8,128]{2,1,0}, bf16[32,128,512]{2,1,0}, bf16[512,32,128]{2,1,0}, /*index=645*/bf16[512,8,128]{2,1,0}, bf16[512,32000]{1,0}, bf16[32000,512]{1,0}, bf16[4096]{0}, bf16[512,8]{1,0}, /*index=650*/bf16[1,4096,14336]{2,1,0}, bf16[1,4096,14336]{2,1,0}, bf16[1,14336,4096]{2,1,0}, bf16[4096]{0}, bf16[4096]{0}, /*index=655*/bf16[512,8,128]{2,1,0}, bf16[32,128,512]{2,1,0}, bf16[512,32,128]{2,1,0}, bf16[512,8,128]{2,1,0}, bf16[512,8]{1,0}, /*index=660*/bf16[1,4096,14336]{2,1,0}, bf16[1,4096,14336]{2,1,0}, bf16[1,14336,4096]{2,1,0}, bf16[4096]{0}, bf16[4096]{0}, /*index=665*/bf16[512,8,128]{2,1,0}, bf16[32,128,512]{2,1,0}, bf16[512,32,128]{2,1,0}, bf16[512,8,128]{2,1,0}, bf16[512,8]{1,0}, /*index=670*/bf16[1,4096,14336]{2,1,0}, bf16[1,4096,14336]{2,1,0}, bf16[1,14336,4096]{2,1,0}, bf16[4096]{0}, bf16[4096]{0}, /*index=675*/bf16[512,8,128]{2,1,0}, bf16[32,128,512]{2,1,0}, bf16[512,32,128]{2,1,0}, bf16[512,8,128]{2,1,0}, bf16[512,8]{1,0}, /*index=680*/bf16[1,4096,14336]{2,1,0}, bf16[1,4096,14336]{2,1,0}, bf16[1,14336,4096]{2,1,0}, bf16[4096]{0}, bf16[4096]{0}, /*index=685*/bf16[512,8,128]{2,1,0}, bf16[32,128,512]{2,1,0}, bf16[512,32,128]{2,1,0}, bf16[512,8,128]{2,1,0}, bf16[512,8]{1,0}, /*index=690*/bf16[1,4096,14336]{2,1,0}, bf16[1,4096,14336]{2,1,0}, bf16[1,14336,4096]{2,1,0}, bf16[4096]{0}, bf16[4096]{0}, /*index=695*/bf16[512,8,128]{2,1,0}, bf16[32,128,512]{2,1,0}, bf16[512,32,128]{2,1,0}, bf16[512,8,128]{2,1,0}, bf16[512,8]{1,0}, /*index=700*/bf16[1,4096,14336]{2,1,0}, bf16[1,4096,14336]{2,1,0}, bf16[1,14336,4096]{2,1,0}, bf16[4096]{0}, bf16[4096]{0}, /*index=705*/bf16[512,8,128]{2,1,0}, bf16[32,128,512]{2,1,0}, bf16[512,32,128]{2,1,0}, bf16[512,8,128]{2,1,0}, bf16[512,8]{1,0}, /*index=710*/bf16[1,4096,14336]{2,1,0}, bf16[1,4096,14336]{2,1,0}, bf16[1,14336,4096]{2,1,0}, bf16[4096]{0}, bf16[4096]{0}, /*index=715*/bf16[512,8,128]{2,1,0}, bf16[32,128,512]{2,1,0}, bf16[512,32,128]{2,1,0}, bf16[512,8,128]{2,1,0}, bf16[512,8]{1,0}, /*index=720*/bf16[1,4096,14336]{2,1,0}, bf16[1,4096,14336]{2,1,0}, bf16[1,14336,4096]{2,1,0}, bf16[4096]{0}, bf16[4096]{0}, /*index=725*/bf16[512,8,128]{2,1,0}, bf16[32,128,512]{2,1,0}, bf16[512,32,128]{2,1,0}, bf16[512,8,128]{2,1,0}, bf16[512,8]{1,0}, /*index=730*/bf16[1,4096,14336]{2,1,0}, bf16[1,4096,14336]{2,1,0}, bf16[1,14336,4096]{2,1,0}, bf16[4096]{0}, bf16[4096]{0}, /*index=735*/bf16[512,8,128]{2,1,0}, bf16[32,128,512]{2,1,0}, bf16[512,32,128]{2,1,0}, bf16[512,8,128]{2,1,0}, bf16[512,8]{1,0}, /*index=740*/bf16[1,4096,14336]{2,1,0}, bf16[1,4096,14336]{2,1,0}, bf16[1,14336,4096]{2,1,0}, bf16[4096]{0}, bf16[4096]{0}, /*index=745*/bf16[512,8,128]{2,1,0}, bf16[32,128,512]{2,1,0}, bf16[512,32,128]{2,1,0}, bf16[512,8,128]{2,1,0}, bf16[512,8]{1,0}, /*index=750*/bf16[1,4096,14336]{2,1,0}, bf16[1,4096,14336]{2,1,0}, bf16[1,14336,4096]{2,1,0}, bf16[4096]{0}, bf16[4096]{0}, /*index=755*/bf16[512,8,128]{2,1,0}, bf16[32,128,512]{2,1,0}, bf16[512,32,128]{2,1,0}, bf16[512,8,128]{2,1,0}, bf16[512,8]{1,0}, /*index=760*/bf16[1,4096,14336]{2,1,0}, bf16[1,4096,14336]{2,1,0}, bf16[1,14336,4096]{2,1,0}, bf16[4096]{0}, bf16[4096]{0}, /*index=765*/bf16[512,8,128]{2,1,0}, bf16[32,128,512]{2,1,0}, bf16[512,32,128]{2,1,0}, bf16[512,8,128]{2,1,0}, bf16[512,8]{1,0}, /*index=770*/bf16[1,4096,14336]{2,1,0}, bf16[1,4096,14336]{2,1,0}, bf16[1,14336,4096]{2,1,0}, bf16[4096]{0}, bf16[4096]{0}, /*index=775*/bf16[512,8,128]{2,1,0}, bf16[32,128,512]{2,1,0}, bf16[512,32,128]{2,1,0}, bf16[512,8,128]{2,1,0}, bf16[512,8]{1,0}, /*index=780*/bf16[1,4096,14336]{2,1,0}, bf16[1,4096,14336]{2,1,0}, bf16[1,14336,4096]{2,1,0}, bf16[4096]{0}, bf16[4096]{0}, /*index=785*/bf16[512,8,128]{2,1,0}, bf16[32,128,512]{2,1,0}, bf16[512,32,128]{2,1,0}, bf16[512,8,128]{2,1,0}, bf16[512,8]{1,0}, /*index=790*/bf16[1,4096,14336]{2,1,0}, bf16[1,4096,14336]{2,1,0}, bf16[1,14336,4096]{2,1,0}, bf16[4096]{0}, bf16[4096]{0}, /*index=795*/bf16[512,8,128]{2,1,0}, bf16[32,128,512]{2,1,0}, bf16[512,32,128]{2,1,0}, bf16[512,8,128]{2,1,0}, bf16[512,8]{1,0}, /*index=800*/bf16[1,4096,14336]{2,1,0}, bf16[1,4096,14336]{2,1,0}, bf16[1,14336,4096]{2,1,0}, bf16[4096]{0}, bf16[4096]{0}, /*index=805*/bf16[512,8,128]{2,1,0}, bf16[32,128,512]{2,1,0}, bf16[512,32,128]{2,1,0}, bf16[512,8,128]{2,1,0}, bf16[512,8]{1,0}, /*index=810*/bf16[1,4096,14336]{2,1,0}, bf16[1,4096,14336]{2,1,0}, bf16[1,14336,4096]{2,1,0}, bf16[4096]{0}, bf16[4096]{0}, /*index=815*/bf16[512,8,128]{2,1,0}, bf16[32,128,512]{2,1,0}, bf16[512,32,128]{2,1,0}, bf16[512,8,128]{2,1,0}, bf16[512,8]{1,0}, /*index=820*/bf16[1,4096,14336]{2,1,0}, bf16[1,4096,14336]{2,1,0}, bf16[1,14336,4096]{2,1,0}, bf16[4096]{0}, bf16[4096]{0}, /*index=825*/bf16[512,8,128]{2,1,0}, bf16[32,128,512]{2,1,0}, bf16[512,32,128]{2,1,0}, bf16[512,8,128]{2,1,0}, bf16[512,8]{1,0}, /*index=830*/bf16[1,4096,14336]{2,1,0}, bf16[1,4096,14336]{2,1,0}, bf16[1,14336,4096]{2,1,0}, bf16[4096]{0}, bf16[4096]{0}, /*index=835*/bf16[512,8,128]{2,1,0}, bf16[32,128,512]{2,1,0}, bf16[512,32,128]{2,1,0}, bf16[512,8,128]{2,1,0}, bf16[512,8]{1,0}, /*index=840*/bf16[1,4096,14336]{2,1,0}, bf16[1,4096,14336]{2,1,0}, bf16[1,14336,4096]{2,1,0}, bf16[4096]{0}, bf16[4096]{0}, /*index=845*/bf16[512,8,128]{2,1,0}, bf16[32,128,512]{2,1,0}, bf16[512,32,128]{2,1,0}, bf16[512,8,128]{2,1,0}, bf16[512,8]{1,0}, /*index=850*/bf16[1,4096,14336]{2,1,0}, bf16[1,4096,14336]{2,1,0}, bf16[1,14336,4096]{2,1,0}, bf16[4096]{0}, bf16[4096]{0}, /*index=855*/bf16[512,8,128]{2,1,0}, bf16[32,128,512]{2,1,0}, bf16[512,32,128]{2,1,0}, bf16[512,8,128]{2,1,0}, bf16[512,8]{1,0}, /*index=860*/bf16[1,4096,14336]{2,1,0}, bf16[1,4096,14336]{2,1,0}, bf16[1,14336,4096]{2,1,0}, bf16[4096]{0}, bf16[4096]{0}, /*index=865*/bf16[512,8,128]{2,1,0}, bf16[32,128,512]{2,1,0}, bf16[512,32,128]{2,1,0}, bf16[512,8,128]{2,1,0}, bf16[512,8]{1,0}, /*index=870*/bf16[1,4096,14336]{2,1,0}, bf16[1,4096,14336]{2,1,0}, bf16[1,14336,4096]{2,1,0}, bf16[4096]{0}, bf16[4096]{0}, /*index=875*/bf16[512,8,128]{2,1,0}, bf16[32,128,512]{2,1,0}, bf16[512,32,128]{2,1,0}, bf16[512,8,128]{2,1,0}, bf16[512,8]{1,0}, /*index=880*/bf16[1,4096,14336]{2,1,0}, bf16[1,4096,14336]{2,1,0}, bf16[1,14336,4096]{2,1,0}, bf16[4096]{0}, bf16[4096]{0}, /*index=885*/bf16[512,8,128]{2,1,0}, bf16[32,128,512]{2,1,0}, bf16[512,32,128]{2,1,0}, bf16[512,8,128]{2,1,0}, bf16[512,8]{1,0}, /*index=890*/bf16[1,4096,14336]{2,1,0}, bf16[1,4096,14336]{2,1,0}, bf16[1,14336,4096]{2,1,0}, bf16[4096]{0}, bf16[4096]{0}, /*index=895*/bf16[512,8,128]{2,1,0}, bf16[32,128,512]{2,1,0}, bf16[512,32,128]{2,1,0}, bf16[512,8,128]{2,1,0}, bf16[512,8]{1,0}, /*index=900*/bf16[1,4096,14336]{2,1,0}, bf16[1,4096,14336]{2,1,0}, bf16[1,14336,4096]{2,1,0}, bf16[4096]{0}, bf16[4096]{0}, /*index=905*/bf16[512,8,128]{2,1,0}, bf16[32,128,512]{2,1,0}, bf16[512,32,128]{2,1,0}, bf16[512,8,128]{2,1,0}, bf16[512,8]{1,0}, /*index=910*/bf16[1,4096,14336]{2,1,0}, bf16[1,4096,14336]{2,1,0}, bf16[1,14336,4096]{2,1,0}, bf16[4096]{0}, bf16[4096]{0}, /*index=915*/bf16[512,8,128]{2,1,0}, bf16[32,128,512]{2,1,0}, bf16[512,32,128]{2,1,0}, bf16[512,8,128]{2,1,0}, bf16[512,8]{1,0}, /*index=920*/bf16[1,4096,14336]{2,1,0}, bf16[1,4096,14336]{2,1,0}, bf16[1,14336,4096]{2,1,0}, bf16[4096]{0}, bf16[4096]{0}, /*index=925*/bf16[512,8,128]{2,1,0}, bf16[32,128,512]{2,1,0}, bf16[512,32,128]{2,1,0}, bf16[512,8,128]{2,1,0}, bf16[512,8]{1,0}, /*index=930*/bf16[1,4096,14336]{2,1,0}, bf16[1,4096,14336]{2,1,0}, bf16[1,14336,4096]{2,1,0}, bf16[4096]{0}, bf16[4096]{0}, /*index=935*/bf16[512,8,128]{2,1,0}, bf16[32,128,512]{2,1,0}, bf16[512,32,128]{2,1,0}, bf16[512,8,128]{2,1,0}, bf16[512,8]{1,0}, /*index=940*/bf16[1,4096,14336]{2,1,0}, bf16[1,4096,14336]{2,1,0}, bf16[1,14336,4096]{2,1,0}, bf16[4096]{0}, bf16[4096]{0}, /*index=945*/bf16[512,8,128]{2,1,0}, bf16[32,128,512]{2,1,0}, bf16[512,32,128]{2,1,0}, bf16[512,8,128]{2,1,0}, bf16[512,8]{1,0}, /*index=950*/bf16[1,4096,14336]{2,1,0}, bf16[1,4096,14336]{2,1,0}, bf16[1,14336,4096]{2,1,0}, bf16[4096]{0}, bf16[4096]{0}, /*index=955*/bf16[512,8,128]{2,1,0}, bf16[32,128,512]{2,1,0}, bf16[512,32,128]{2,1,0}, bf16[512,8,128]{2,1,0}, bf16[512,8]{1,0}, /*index=960*/bf16[1,4096,14336]{2,1,0}, bf16[1,4096,14336]{2,1,0}, bf16[1,14336,4096]{2,1,0}, bf16[4096]{0}, bf16[4096]{0}, /*index=965*/bf16[512,8,128]{2,1,0}, bf16[32,128,512]{2,1,0}, bf16[512,32,128]{2,1,0}, bf16[512,8,128]{2,1,0}, bf16[512,32000]{1,0}, /*index=970*/bf16[32000,512]{1,0}, s32[], s32[1,4096]{1,0}, s32[1,4096]{1,0}, s32[1,4096]{1,0}, /*index=975*/s32[1,4096]{1,0}, s32[1,4096]{1,0})->(s32[], bf16[4096]{0}, bf16[512,8]{1,0}, bf16[1,4096,14336]{2,1,0}, bf16[1,4096,14336]{2,1,0}, /*index=5*/bf16[1,14336,4096]{2,1,0}, bf16[4096]{0}, bf16[4096]{0}, bf16[512,8,128]{2,1,0}, bf16[32,128,512]{2,1,0}, /*index=10*/bf16[512,32,128]{2,1,0}, bf16[512,8,128]{2,1,0}, bf16[512,8]{1,0}, bf16[1,4096,14336]{2,1,0}, bf16[1,4096,14336]{2,1,0}, /*index=15*/bf16[1,14336,4096]{2,1,0}, bf16[4096]{0}, bf16[4096]{0}, bf16[512,8,128]{2,1,0}, bf16[32,128,512]{2,1,0}, /*index=20*/bf16[512,32,128]{2,1,0}, bf16[512,8,128]{2,1,0}, bf16[512,8]{1,0}, bf16[1,4096,14336]{2,1,0}, bf16[1,4096,14336]{2,1,0}, /*index=25*/bf16[1,14336,4096]{2,1,0}, bf16[4096]{0}, bf16[4096]{0}, bf16[512,8,128]{2,1,0}, bf16[32,128,512]{2,1,0}, /*index=30*/bf16[512,32,128]{2,1,0}, bf16[512,8,128]{2,1,0}, bf16[512,8]{1,0}, bf16[1,4096,14336]{2,1,0}, bf16[1,4096,14336]{2,1,0}, /*index=35*/bf16[1,14336,4096]{2,1,0}, bf16[4096]{0}, bf16[4096]{0}, bf16[512,8,128]{2,1,0}, bf16[32,128,512]{2,1,0}, /*index=40*/bf16[512,32,128]{2,1,0}, bf16[512,8,128]{2,1,0}, bf16[512,8]{1,0}, bf16[1,4096,14336]{2,1,0}, bf16[1,4096,14336]{2,1,0}, /*index=45*/bf16[1,14336,4096]{2,1,0}, bf16[4096]{0}, bf16[4096]{0}, bf16[512,8,128]{2,1,0}, bf16[32,128,512]{2,1,0}, /*index=50*/bf16[512,32,128]{2,1,0}, bf16[512,8,128]{2,1,0}, bf16[512,8]{1,0}, bf16[1,4096,14336]{2,1,0}, bf16[1,4096,14336]{2,1,0}, /*index=55*/bf16[1,14336,4096]{2,1,0}, bf16[4096]{0}, bf16[4096]{0}, bf16[512,8,128]{2,1,0}, bf16[32,128,512]{2,1,0}, /*index=60*/bf16[512,32,128]{2,1,0}, bf16[512,8,128]{2,1,0}, bf16[512,8]{1,0}, bf16[1,4096,14336]{2,1,0}, bf16[1,4096,14336]{2,1,0}, /*index=65*/bf16[1,14336,4096]{2,1,0}, bf16[4096]{0}, bf16[4096]{0}, bf16[512,8,128]{2,1,0}, bf16[32,128,512]{2,1,0}, /*index=70*/bf16[512,32,128]{2,1,0}, bf16[512,8,128]{2,1,0}, bf16[512,8]{1,0}, bf16[1,4096,14336]{2,1,0}, bf16[1,4096,14336]{2,1,0}, /*index=75*/bf16[1,14336,4096]{2,1,0}, bf16[4096]{0}, bf16[4096]{0}, bf16[512,8,128]{2,1,0}, bf16[32,128,512]{2,1,0}, /*index=80*/bf16[512,32,128]{2,1,0}, bf16[512,8,128]{2,1,0}, bf16[512,8]{1,0}, bf16[1,4096,14336]{2,1,0}, bf16[1,4096,14336]{2,1,0}, /*index=85*/bf16[1,14336,4096]{2,1,0}, bf16[4096]{0}, bf16[4096]{0}, bf16[512,8,128]{2,1,0}, bf16[32,128,512]{2,1,0}, /*index=90*/bf16[512,32,128]{2,1,0}, bf16[512,8,128]{2,1,0}, bf16[512,8]{1,0}, bf16[1,4096,14336]{2,1,0}, bf16[1,4096,14336]{2,1,0}, /*index=95*/bf16[1,14336,4096]{2,1,0}, bf16[4096]{0}, bf16[4096]{0}, bf16[512,8,128]{2,1,0}, bf16[32,128,512]{2,1,0}, /*index=100*/bf16[512,32,128]{2,1,0}, bf16[512,8,128]{2,1,0}, bf16[512,8]{1,0}, bf16[1,4096,14336]{2,1,0}, bf16[1,4096,14336]{2,1,0}, /*index=105*/bf16[1,14336,4096]{2,1,0}, bf16[4096]{0}, bf16[4096]{0}, bf16[512,8,128]{2,1,0}, bf16[32,128,512]{2,1,0}, /*index=110*/bf16[512,32,128]{2,1,0}, bf16[512,8,128]{2,1,0}, bf16[512,8]{1,0}, bf16[1,4096,14336]{2,1,0}, bf16[1,4096,14336]{2,1,0}, /*index=115*/bf16[1,14336,4096]{2,1,0}, bf16[4096]{0}, bf16[4096]{0}, bf16[512,8,128]{2,1,0}, bf16[32,128,512]{2,1,0}, /*index=120*/bf16[512,32,128]{2,1,0}, bf16[512,8,128]{2,1,0}, bf16[512,8]{1,0}, bf16[1,4096,14336]{2,1,0}, bf16[1,4096,14336]{2,1,0}, /*index=125*/bf16[1,14336,4096]{2,1,0}, bf16[4096]{0}, bf16[4096]{0}, bf16[512,8,128]{2,1,0}, bf16[32,128,512]{2,1,0}, /*index=130*/bf16[512,32,128]{2,1,0}, bf16[512,8,128]{2,1,0}, bf16[512,8]{1,0}, bf16[1,4096,14336]{2,1,0}, bf16[1,4096,14336]{2,1,0}, /*index=135*/bf16[1,14336,4096]{2,1,0}, bf16[4096]{0}, bf16[4096]{0}, bf16[512,8,128]{2,1,0}, bf16[32,128,512]{2,1,0}, /*index=140*/bf16[512,32,128]{2,1,0}, bf16[512,8,128]{2,1,0}, bf16[512,8]{1,0}, bf16[1,4096,14336]{2,1,0}, bf16[1,4096,14336]{2,1,0}, /*index=145*/bf16[1,14336,4096]{2,1,0}, bf16[4096]{0}, bf16[4096]{0}, bf16[512,8,128]{2,1,0}, bf16[32,128,512]{2,1,0}, /*index=150*/bf16[512,32,128]{2,1,0}, bf16[512,8,128]{2,1,0}, bf16[512,8]{1,0}, bf16[1,4096,14336]{2,1,0}, bf16[1,4096,14336]{2,1,0}, /*index=155*/bf16[1,14336,4096]{2,1,0}, bf16[4096]{0}, bf16[4096]{0}, bf16[512,8,128]{2,1,0}, bf16[32,128,512]{2,1,0}, /*index=160*/bf16[512,32,128]{2,1,0}, bf16[512,8,128]{2,1,0}, bf16[512,8]{1,0}, bf16[1,4096,14336]{2,1,0}, bf16[1,4096,14336]{2,1,0}, /*index=165*/bf16[1,14336,4096]{2,1,0}, bf16[4096]{0}, bf16[4096]{0}, bf16[512,8,128]{2,1,0}, bf16[32,128,512]{2,1,0}, /*index=170*/bf16[512,32,128]{2,1,0}, bf16[512,8,128]{2,1,0}, bf16[512,8]{1,0}, bf16[1,4096,14336]{2,1,0}, bf16[1,4096,14336]{2,1,0}, /*index=175*/bf16[1,14336,4096]{2,1,0}, bf16[4096]{0}, bf16[4096]{0}, bf16[512,8,128]{2,1,0}, bf16[32,128,512]{2,1,0}, /*index=180*/bf16[512,32,128]{2,1,0}, bf16[512,8,128]{2,1,0}, bf16[512,8]{1,0}, bf16[1,4096,14336]{2,1,0}, bf16[1,4096,14336]{2,1,0}, /*index=185*/bf16[1,14336,4096]{2,1,0}, bf16[4096]{0}, bf16[4096]{0}, bf16[512,8,128]{2,1,0}, bf16[32,128,512]{2,1,0}, /*index=190*/bf16[512,32,128]{2,1,0}, bf16[512,8,128]{2,1,0}, bf16[512,8]{1,0}, bf16[1,4096,14336]{2,1,0}, bf16[1,4096,14336]{2,1,0}, /*index=195*/bf16[1,14336,4096]{2,1,0}, bf16[4096]{0}, bf16[4096]{0}, bf16[512,8,128]{2,1,0}, bf16[32,128,512]{2,1,0}, /*index=200*/bf16[512,32,128]{2,1,0}, bf16[512,8,128]{2,1,0}, bf16[512,8]{1,0}, bf16[1,4096,14336]{2,1,0}, bf16[1,4096,14336]{2,1,0}, /*index=205*/bf16[1,14336,4096]{2,1,0}, bf16[4096]{0}, bf16[4096]{0}, bf16[512,8,128]{2,1,0}, bf16[32,128,512]{2,1,0}, /*index=210*/bf16[512,32,128]{2,1,0}, bf16[512,8,128]{2,1,0}, bf16[512,8]{1,0}, bf16[1,4096,14336]{2,1,0}, bf16[1,4096,14336]{2,1,0}, /*index=215*/bf16[1,14336,4096]{2,1,0}, bf16[4096]{0}, bf16[4096]{0}, bf16[512,8,128]{2,1,0}, bf16[32,128,512]{2,1,0}, /*index=220*/bf16[512,32,128]{2,1,0}, bf16[512,8,128]{2,1,0}, bf16[512,8]{1,0}, bf16[1,4096,14336]{2,1,0}, bf16[1,4096,14336]{2,1,0}, /*index=225*/bf16[1,14336,4096]{2,1,0}, bf16[4096]{0}, bf16[4096]{0}, bf16[512,8,128]{2,1,0}, bf16[32,128,512]{2,1,0}, /*index=230*/bf16[512,32,128]{2,1,0}, bf16[512,8,128]{2,1,0}, bf16[512,8]{1,0}, bf16[1,4096,14336]{2,1,0}, bf16[1,4096,14336]{2,1,0}, /*index=235*/bf16[1,14336,4096]{2,1,0}, bf16[4096]{0}, bf16[4096]{0}, bf16[512,8,128]{2,1,0}, bf16[32,128,512]{2,1,0}, /*index=240*/bf16[512,32,128]{2,1,0}, bf16[512,8,128]{2,1,0}, bf16[512,8]{1,0}, bf16[1,4096,14336]{2,1,0}, bf16[1,4096,14336]{2,1,0}, /*index=245*/bf16[1,14336,4096]{2,1,0}, bf16[4096]{0}, bf16[4096]{0}, bf16[512,8,128]{2,1,0}, bf16[32,128,512]{2,1,0}, /*index=250*/bf16[512,32,128]{2,1,0}, bf16[512,8,128]{2,1,0}, bf16[512,8]{1,0}, bf16[1,4096,14336]{2,1,0}, bf16[1,4096,14336]{2,1,0}, /*index=255*/bf16[1,14336,4096]{2,1,0}, bf16[4096]{0}, bf16[4096]{0}, bf16[512,8,128]{2,1,0}, bf16[32,128,512]{2,1,0}, /*index=260*/bf16[512,32,128]{2,1,0}, bf16[512,8,128]{2,1,0}, bf16[512,8]{1,0}, bf16[1,4096,14336]{2,1,0}, bf16[1,4096,14336]{2,1,0}, /*index=265*/bf16[1,14336,4096]{2,1,0}, bf16[4096]{0}, bf16[4096]{0}, bf16[512,8,128]{2,1,0}, bf16[32,128,512]{2,1,0}, /*index=270*/bf16[512,32,128]{2,1,0}, bf16[512,8,128]{2,1,0}, bf16[512,8]{1,0}, bf16[1,4096,14336]{2,1,0}, bf16[1,4096,14336]{2,1,0}, /*index=275*/bf16[1,14336,4096]{2,1,0}, bf16[4096]{0}, bf16[4096]{0}, bf16[512,8,128]{2,1,0}, bf16[32,128,512]{2,1,0}, /*index=280*/bf16[512,32,128]{2,1,0}, bf16[512,8,128]{2,1,0}, bf16[512,8]{1,0}, bf16[1,4096,14336]{2,1,0}, bf16[1,4096,14336]{2,1,0}, /*index=285*/bf16[1,14336,4096]{2,1,0}, bf16[4096]{0}, bf16[4096]{0}, bf16[512,8,128]{2,1,0}, bf16[32,128,512]{2,1,0}, /*index=290*/bf16[512,32,128]{2,1,0}, bf16[512,8,128]{2,1,0}, bf16[512,8]{1,0}, bf16[1,4096,14336]{2,1,0}, bf16[1,4096,14336]{2,1,0}, /*index=295*/bf16[1,14336,4096]{2,1,0}, bf16[4096]{0}, bf16[4096]{0}, bf16[512,8,128]{2,1,0}, bf16[32,128,512]{2,1,0}, /*index=300*/bf16[512,32,128]{2,1,0}, bf16[512,8,128]{2,1,0}, bf16[512,8]{1,0}, bf16[1,4096,14336]{2,1,0}, bf16[1,4096,14336]{2,1,0}, /*index=305*/bf16[1,14336,4096]{2,1,0}, bf16[4096]{0}, bf16[4096]{0}, bf16[512,8,128]{2,1,0}, bf16[32,128,512]{2,1,0}, /*index=310*/bf16[512,32,128]{2,1,0}, bf16[512,8,128]{2,1,0}, bf16[512,8]{1,0}, bf16[1,4096,14336]{2,1,0}, bf16[1,4096,14336]{2,1,0}, /*index=315*/bf16[1,14336,4096]{2,1,0}, bf16[4096]{0}, bf16[4096]{0}, bf16[512,8,128]{2,1,0}, bf16[32,128,512]{2,1,0}, /*index=320*/bf16[512,32,128]{2,1,0}, bf16[512,8,128]{2,1,0}, bf16[512,32000]{1,0}, bf16[32000,512]{1,0}, s32[], /*index=325*/bf16[4096]{0}, bf16[512,8]{1,0}, bf16[1,4096,14336]{2,1,0}, bf16[1,4096,14336]{2,1,0}, bf16[1,14336,4096]{2,1,0}, /*index=330*/bf16[4096]{0}, bf16[4096]{0}, bf16[512,8,128]{2,1,0}, bf16[32,128,512]{2,1,0}, bf16[512,32,128]{2,1,0}, /*index=335*/bf16[512,8,128]{2,1,0}, bf16[512,8]{1,0}, bf16[1,4096,14336]{2,1,0}, bf16[1,4096,14336]{2,1,0}, bf16[1,14336,4096]{2,1,0}, /*index=340*/bf16[4096]{0}, bf16[4096]{0}, bf16[512,8,128]{2,1,0}, bf16[32,128,512]{2,1,0}, bf16[512,32,128]{2,1,0}, /*index=345*/bf16[512,8,128]{2,1,0}, bf16[512,8]{1,0}, bf16[1,4096,14336]{2,1,0}, bf16[1,4096,14336]{2,1,0}, bf16[1,14336,4096]{2,1,0}, /*index=350*/bf16[4096]{0}, bf16[4096]{0}, bf16[512,8,128]{2,1,0}, bf16[32,128,512]{2,1,0}, bf16[512,32,128]{2,1,0}, /*index=355*/bf16[512,8,128]{2,1,0}, bf16[512,8]{1,0}, bf16[1,4096,14336]{2,1,0}, bf16[1,4096,14336]{2,1,0}, bf16[1,14336,4096]{2,1,0}, /*index=360*/bf16[4096]{0}, bf16[4096]{0}, bf16[512,8,128]{2,1,0}, bf16[32,128,512]{2,1,0}, bf16[512,32,128]{2,1,0}, /*index=365*/bf16[512,8,128]{2,1,0}, bf16[512,8]{1,0}, bf16[1,4096,14336]{2,1,0}, bf16[1,4096,14336]{2,1,0}, bf16[1,14336,4096]{2,1,0}, /*index=370*/bf16[4096]{0}, bf16[4096]{0}, bf16[512,8,128]{2,1,0}, bf16[32,128,512]{2,1,0}, bf16[512,32,128]{2,1,0}, /*index=375*/bf16[512,8,128]{2,1,0}, bf16[512,8]{1,0}, bf16[1,4096,14336]{2,1,0}, bf16[1,4096,14336]{2,1,0}, bf16[1,14336,4096]{2,1,0}, /*index=380*/bf16[4096]{0}, bf16[4096]{0}, bf16[512,8,128]{2,1,0}, bf16[32,128,512]{2,1,0}, bf16[512,32,128]{2,1,0}, /*index=385*/bf16[512,8,128]{2,1,0}, bf16[512,8]{1,0}, bf16[1,4096,14336]{2,1,0}, bf16[1,4096,14336]{2,1,0}, bf16[1,14336,4096]{2,1,0}, /*index=390*/bf16[4096]{0}, bf16[4096]{0}, bf16[512,8,128]{2,1,0}, bf16[32,128,512]{2,1,0}, bf16[512,32,128]{2,1,0}, /*index=395*/bf16[512,8,128]{2,1,0}, bf16[512,8]{1,0}, bf16[1,4096,14336]{2,1,0}, bf16[1,4096,14336]{2,1,0}, bf16[1,14336,4096]{2,1,0}, /*index=400*/bf16[4096]{0}, bf16[4096]{0}, bf16[512,8,128]{2,1,0}, bf16[32,128,512]{2,1,0}, bf16[512,32,128]{2,1,0}, /*index=405*/bf16[512,8,128]{2,1,0}, bf16[512,8]{1,0}, bf16[1,4096,14336]{2,1,0}, bf16[1,4096,14336]{2,1,0}, bf16[1,14336,4096]{2,1,0}, /*index=410*/bf16[4096]{0}, bf16[4096]{0}, bf16[512,8,128]{2,1,0}, bf16[32,128,512]{2,1,0}, bf16[512,32,128]{2,1,0}, /*index=415*/bf16[512,8,128]{2,1,0}, bf16[512,8]{1,0}, bf16[1,4096,14336]{2,1,0}, bf16[1,4096,14336]{2,1,0}, bf16[1,14336,4096]{2,1,0}, /*index=420*/bf16[4096]{0}, bf16[4096]{0}, bf16[512,8,128]{2,1,0}, bf16[32,128,512]{2,1,0}, bf16[512,32,128]{2,1,0}, /*index=425*/bf16[512,8,128]{2,1,0}, bf16[512,8]{1,0}, bf16[1,4096,14336]{2,1,0}, bf16[1,4096,14336]{2,1,0}, bf16[1,14336,4096]{2,1,0}, /*index=430*/bf16[4096]{0}, bf16[4096]{0}, bf16[512,8,128]{2,1,0}, bf16[32,128,512]{2,1,0}, bf16[512,32,128]{2,1,0}, /*index=435*/bf16[512,8,128]{2,1,0}, bf16[512,8]{1,0}, bf16[1,4096,14336]{2,1,0}, bf16[1,4096,14336]{2,1,0}, bf16[1,14336,4096]{2,1,0}, /*index=440*/bf16[4096]{0}, bf16[4096]{0}, bf16[512,8,128]{2,1,0}, bf16[32,128,512]{2,1,0}, bf16[512,32,128]{2,1,0}, /*index=445*/bf16[512,8,128]{2,1,0}, bf16[512,8]{1,0}, bf16[1,4096,14336]{2,1,0}, bf16[1,4096,14336]{2,1,0}, bf16[1,14336,4096]{2,1,0}, /*index=450*/bf16[4096]{0}, bf16[4096]{0}, bf16[512,8,128]{2,1,0}, bf16[32,128,512]{2,1,0}, bf16[512,32,128]{2,1,0}, /*index=455*/bf16[512,8,128]{2,1,0}, bf16[512,8]{1,0}, bf16[1,4096,14336]{2,1,0}, bf16[1,4096,14336]{2,1,0}, bf16[1,14336,4096]{2,1,0}, /*index=460*/bf16[4096]{0}, bf16[4096]{0}, bf16[512,8,128]{2,1,0}, bf16[32,128,512]{2,1,0}, bf16[512,32,128]{2,1,0}, /*index=465*/bf16[512,8,128]{2,1,0}, bf16[512,8]{1,0}, bf16[1,4096,14336]{2,1,0}, bf16[1,4096,14336]{2,1,0}, bf16[1,14336,4096]{2,1,0}, /*index=470*/bf16[4096]{0}, bf16[4096]{0}, bf16[512,8,128]{2,1,0}, bf16[32,128,512]{2,1,0}, bf16[512,32,128]{2,1,0}, /*index=475*/bf16[512,8,128]{2,1,0}, bf16[512,8]{1,0}, bf16[1,4096,14336]{2,1,0}, bf16[1,4096,14336]{2,1,0}, bf16[1,14336,4096]{2,1,0}, /*index=480*/bf16[4096]{0}, bf16[4096]{0}, bf16[512,8,128]{2,1,0}, bf16[32,128,512]{2,1,0}, bf16[512,32,128]{2,1,0}, /*index=485*/bf16[512,8,128]{2,1,0}, bf16[512,8]{1,0}, bf16[1,4096,14336]{2,1,0}, bf16[1,4096,14336]{2,1,0}, bf16[1,14336,4096]{2,1,0}, /*index=490*/bf16[4096]{0}, bf16[4096]{0}, bf16[512,8,128]{2,1,0}, bf16[32,128,512]{2,1,0}, bf16[512,32,128]{2,1,0}, /*index=495*/bf16[512,8,128]{2,1,0}, bf16[512,8]{1,0}, bf16[1,4096,14336]{2,1,0}, bf16[1,4096,14336]{2,1,0}, bf16[1,14336,4096]{2,1,0}, /*index=500*/bf16[4096]{0}, bf16[4096]{0}, bf16[512,8,128]{2,1,0}, bf16[32,128,512]{2,1,0}, bf16[512,32,128]{2,1,0}, /*index=505*/bf16[512,8,128]{2,1,0}, bf16[512,8]{1,0}, bf16[1,4096,14336]{2,1,0}, bf16[1,4096,14336]{2,1,0}, bf16[1,14336,4096]{2,1,0}, /*index=510*/bf16[4096]{0}, bf16[4096]{0}, bf16[512,8,128]{2,1,0}, bf16[32,128,512]{2,1,0}, bf16[512,32,128]{2,1,0}, /*index=515*/bf16[512,8,128]{2,1,0}, bf16[512,8]{1,0}, bf16[1,4096,14336]{2,1,0}, bf16[1,4096,14336]{2,1,0}, bf16[1,14336,4096]{2,1,0}, /*index=520*/bf16[4096]{0}, bf16[4096]{0}, bf16[512,8,128]{2,1,0}, bf16[32,128,512]{2,1,0}, bf16[512,32,128]{2,1,0}, /*index=525*/bf16[512,8,128]{2,1,0}, bf16[512,8]{1,0}, bf16[1,4096,14336]{2,1,0}, bf16[1,4096,14336]{2,1,0}, bf16[1,14336,4096]{2,1,0}, /*index=530*/bf16[4096]{0}, bf16[4096]{0}, bf16[512,8,128]{2,1,0}, bf16[32,128,512]{2,1,0}, bf16[512,32,128]{2,1,0}, /*index=535*/bf16[512,8,128]{2,1,0}, bf16[512,8]{1,0}, bf16[1,4096,14336]{2,1,0}, bf16[1,4096,14336]{2,1,0}, bf16[1,14336,4096]{2,1,0}, /*index=540*/bf16[4096]{0}, bf16[4096]{0}, bf16[512,8,128]{2,1,0}, bf16[32,128,512]{2,1,0}, bf16[512,32,128]{2,1,0}, /*index=545*/bf16[512,8,128]{2,1,0}, bf16[512,8]{1,0}, bf16[1,4096,14336]{2,1,0}, bf16[1,4096,14336]{2,1,0}, bf16[1,14336,4096]{2,1,0}, /*index=550*/bf16[4096]{0}, bf16[4096]{0}, bf16[512,8,128]{2,1,0}, bf16[32,128,512]{2,1,0}, bf16[512,32,128]{2,1,0}, /*index=555*/bf16[512,8,128]{2,1,0}, bf16[512,8]{1,0}, bf16[1,4096,14336]{2,1,0}, bf16[1,4096,14336]{2,1,0}, bf16[1,14336,4096]{2,1,0}, /*index=560*/bf16[4096]{0}, bf16[4096]{0}, bf16[512,8,128]{2,1,0}, bf16[32,128,512]{2,1,0}, bf16[512,32,128]{2,1,0}, /*index=565*/bf16[512,8,128]{2,1,0}, bf16[512,8]{1,0}, bf16[1,4096,14336]{2,1,0}, bf16[1,4096,14336]{2,1,0}, bf16[1,14336,4096]{2,1,0}, /*index=570*/bf16[4096]{0}, bf16[4096]{0}, bf16[512,8,128]{2,1,0}, bf16[32,128,512]{2,1,0}, bf16[512,32,128]{2,1,0}, /*index=575*/bf16[512,8,128]{2,1,0}, bf16[512,8]{1,0}, bf16[1,4096,14336]{2,1,0}, bf16[1,4096,14336]{2,1,0}, bf16[1,14336,4096]{2,1,0}, /*index=580*/bf16[4096]{0}, bf16[4096]{0}, bf16[512,8,128]{2,1,0}, bf16[32,128,512]{2,1,0}, bf16[512,32,128]{2,1,0}, /*index=585*/bf16[512,8,128]{2,1,0}, bf16[512,8]{1,0}, bf16[1,4096,14336]{2,1,0}, bf16[1,4096,14336]{2,1,0}, bf16[1,14336,4096]{2,1,0}, /*index=590*/bf16[4096]{0}, bf16[4096]{0}, bf16[512,8,128]{2,1,0}, bf16[32,128,512]{2,1,0}, bf16[512,32,128]{2,1,0}, /*index=595*/bf16[512,8,128]{2,1,0}, bf16[512,8]{1,0}, bf16[1,4096,14336]{2,1,0}, bf16[1,4096,14336]{2,1,0}, bf16[1,14336,4096]{2,1,0}, /*index=600*/bf16[4096]{0}, bf16[4096]{0}, bf16[512,8,128]{2,1,0}, bf16[32,128,512]{2,1,0}, bf16[512,32,128]{2,1,0}, /*index=605*/bf16[512,8,128]{2,1,0}, bf16[512,8]{1,0}, bf16[1,4096,14336]{2,1,0}, bf16[1,4096,14336]{2,1,0}, bf16[1,14336,4096]{2,1,0}, /*index=610*/bf16[4096]{0}, bf16[4096]{0}, bf16[512,8,128]{2,1,0}, bf16[32,128,512]{2,1,0}, bf16[512,32,128]{2,1,0}, /*index=615*/bf16[512,8,128]{2,1,0}, bf16[512,8]{1,0}, bf16[1,4096,14336]{2,1,0}, bf16[1,4096,14336]{2,1,0}, bf16[1,14336,4096]{2,1,0}, /*index=620*/bf16[4096]{0}, bf16[4096]{0}, bf16[512,8,128]{2,1,0}, bf16[32,128,512]{2,1,0}, bf16[512,32,128]{2,1,0}, /*index=625*/bf16[512,8,128]{2,1,0}, bf16[512,8]{1,0}, bf16[1,4096,14336]{2,1,0}, bf16[1,4096,14336]{2,1,0}, bf16[1,14336,4096]{2,1,0}, /*index=630*/bf16[4096]{0}, bf16[4096]{0}, bf16[512,8,128]{2,1,0}, bf16[32,128,512]{2,1,0}, bf16[512,32,128]{2,1,0}, /*index=635*/bf16[512,8,128]{2,1,0}, bf16[512,8]{1,0}, bf16[1,4096,14336]{2,1,0}, bf16[1,4096,14336]{2,1,0}, bf16[1,14336,4096]{2,1,0}, /*index=640*/bf16[4096]{0}, bf16[4096]{0}, bf16[512,8,128]{2,1,0}, bf16[32,128,512]{2,1,0}, bf16[512,32,128]{2,1,0}, /*index=645*/bf16[512,8,128]{2,1,0}, bf16[512,32000]{1,0}, bf16[32000,512]{1,0}, bf16[4096]{0}, bf16[512,8]{1,0}, /*index=650*/bf16[1,4096,14336]{2,1,0}, bf16[1,4096,14336]{2,1,0}, bf16[1,14336,4096]{2,1,0}, bf16[4096]{0}, bf16[4096]{0}, /*index=655*/bf16[512,8,128]{2,1,0}, bf16[32,128,512]{2,1,0}, bf16[512,32,128]{2,1,0}, bf16[512,8,128]{2,1,0}, bf16[512,8]{1,0}, /*index=660*/bf16[1,4096,14336]{2,1,0}, bf16[1,4096,14336]{2,1,0}, bf16[1,14336,4096]{2,1,0}, bf16[4096]{0}, bf16[4096]{0}, /*index=665*/bf16[512,8,128]{2,1,0}, bf16[32,128,512]{2,1,0}, bf16[512,32,128]{2,1,0}, bf16[512,8,128]{2,1,0}, bf16[512,8]{1,0}, /*index=670*/bf16[1,4096,14336]{2,1,0}, bf16[1,4096,14336]{2,1,0}, bf16[1,14336,4096]{2,1,0}, bf16[4096]{0}, bf16[4096]{0}, /*index=675*/bf16[512,8,128]{2,1,0}, bf16[32,128,512]{2,1,0}, bf16[512,32,128]{2,1,0}, bf16[512,8,128]{2,1,0}, bf16[512,8]{1,0}, /*index=680*/bf16[1,4096,14336]{2,1,0}, bf16[1,4096,14336]{2,1,0}, bf16[1,14336,4096]{2,1,0}, bf16[4096]{0}, bf16[4096]{0}, /*index=685*/bf16[512,8,128]{2,1,0}, bf16[32,128,512]{2,1,0}, bf16[512,32,128]{2,1,0}, bf16[512,8,128]{2,1,0}, bf16[512,8]{1,0}, /*index=690*/bf16[1,4096,14336]{2,1,0}, bf16[1,4096,14336]{2,1,0}, bf16[1,14336,4096]{2,1,0}, bf16[4096]{0}, bf16[4096]{0}, /*index=695*/bf16[512,8,128]{2,1,0}, bf16[32,128,512]{2,1,0}, bf16[512,32,128]{2,1,0}, bf16[512,8,128]{2,1,0}, bf16[512,8]{1,0}, /*index=700*/bf16[1,4096,14336]{2,1,0}, bf16[1,4096,14336]{2,1,0}, bf16[1,14336,4096]{2,1,0}, bf16[4096]{0}, bf16[4096]{0}, /*index=705*/bf16[512,8,128]{2,1,0}, bf16[32,128,512]{2,1,0}, bf16[512,32,128]{2,1,0}, bf16[512,8,128]{2,1,0}, bf16[512,8]{1,0}, /*index=710*/bf16[1,4096,14336]{2,1,0}, bf16[1,4096,14336]{2,1,0}, bf16[1,14336,4096]{2,1,0}, bf16[4096]{0}, bf16[4096]{0}, /*index=715*/bf16[512,8,128]{2,1,0}, bf16[32,128,512]{2,1,0}, bf16[512,32,128]{2,1,0}, bf16[512,8,128]{2,1,0}, bf16[512,8]{1,0}, /*index=720*/bf16[1,4096,14336]{2,1,0}, bf16[1,4096,14336]{2,1,0}, bf16[1,14336,4096]{2,1,0}, bf16[4096]{0}, bf16[4096]{0}, /*index=725*/bf16[512,8,128]{2,1,0}, bf16[32,128,512]{2,1,0}, bf16[512,32,128]{2,1,0}, bf16[512,8,128]{2,1,0}, bf16[512,8]{1,0}, /*index=730*/bf16[1,4096,14336]{2,1,0}, bf16[1,4096,14336]{2,1,0}, bf16[1,14336,4096]{2,1,0}, bf16[4096]{0}, bf16[4096]{0}, /*index=735*/bf16[512,8,128]{2,1,0}, bf16[32,128,512]{2,1,0}, bf16[512,32,128]{2,1,0}, bf16[512,8,128]{2,1,0}, bf16[512,8]{1,0}, /*index=740*/bf16[1,4096,14336]{2,1,0}, bf16[1,4096,14336]{2,1,0}, bf16[1,14336,4096]{2,1,0}, bf16[4096]{0}, bf16[4096]{0}, /*index=745*/bf16[512,8,128]{2,1,0}, bf16[32,128,512]{2,1,0}, bf16[512,32,128]{2,1,0}, bf16[512,8,128]{2,1,0}, bf16[512,8]{1,0}, /*index=750*/bf16[1,4096,14336]{2,1,0}, bf16[1,4096,14336]{2,1,0}, bf16[1,14336,4096]{2,1,0}, bf16[4096]{0}, bf16[4096]{0}, /*index=755*/bf16[512,8,128]{2,1,0}, bf16[32,128,512]{2,1,0}, bf16[512,32,128]{2,1,0}, bf16[512,8,128]{2,1,0}, bf16[512,8]{1,0}, /*index=760*/bf16[1,4096,14336]{2,1,0}, bf16[1,4096,14336]{2,1,0}, bf16[1,14336,4096]{2,1,0}, bf16[4096]{0}, bf16[4096]{0}, /*index=765*/bf16[512,8,128]{2,1,0}, bf16[32,128,512]{2,1,0}, bf16[512,32,128]{2,1,0}, bf16[512,8,128]{2,1,0}, bf16[512,8]{1,0}, /*index=770*/bf16[1,4096,14336]{2,1,0}, bf16[1,4096,14336]{2,1,0}, bf16[1,14336,4096]{2,1,0}, bf16[4096]{0}, bf16[4096]{0}, /*index=775*/bf16[512,8,128]{2,1,0}, bf16[32,128,512]{2,1,0}, bf16[512,32,128]{2,1,0}, bf16[512,8,128]{2,1,0}, bf16[512,8]{1,0}, /*index=780*/bf16[1,4096,14336]{2,1,0}, bf16[1,4096,14336]{2,1,0}, bf16[1,14336,4096]{2,1,0}, bf16[4096]{0}, bf16[4096]{0}, /*index=785*/bf16[512,8,128]{2,1,0}, bf16[32,128,512]{2,1,0}, bf16[512,32,128]{2,1,0}, bf16[512,8,128]{2,1,0}, bf16[512,8]{1,0}, /*index=790*/bf16[1,4096,14336]{2,1,0}, bf16[1,4096,14336]{2,1,0}, bf16[1,14336,4096]{2,1,0}, bf16[4096]{0}, bf16[4096]{0}, /*index=795*/bf16[512,8,128]{2,1,0}, bf16[32,128,512]{2,1,0}, bf16[512,32,128]{2,1,0}, bf16[512,8,128]{2,1,0}, bf16[512,8]{1,0}, /*index=800*/bf16[1,4096,14336]{2,1,0}, bf16[1,4096,14336]{2,1,0}, bf16[1,14336,4096]{2,1,0}, bf16[4096]{0}, bf16[4096]{0}, /*index=805*/bf16[512,8,128]{2,1,0}, bf16[32,128,512]{2,1,0}, bf16[512,32,128]{2,1,0}, bf16[512,8,128]{2,1,0}, bf16[512,8]{1,0}, /*index=810*/bf16[1,4096,14336]{2,1,0}, bf16[1,4096,14336]{2,1,0}, bf16[1,14336,4096]{2,1,0}, bf16[4096]{0}, bf16[4096]{0}, /*index=815*/bf16[512,8,128]{2,1,0}, bf16[32,128,512]{2,1,0}, bf16[512,32,128]{2,1,0}, bf16[512,8,128]{2,1,0}, bf16[512,8]{1,0}, /*index=820*/bf16[1,4096,14336]{2,1,0}, bf16[1,4096,14336]{2,1,0}, bf16[1,14336,4096]{2,1,0}, bf16[4096]{0}, bf16[4096]{0}, /*index=825*/bf16[512,8,128]{2,1,0}, bf16[32,128,512]{2,1,0}, bf16[512,32,128]{2,1,0}, bf16[512,8,128]{2,1,0}, bf16[512,8]{1,0}, /*index=830*/bf16[1,4096,14336]{2,1,0}, bf16[1,4096,14336]{2,1,0}, bf16[1,14336,4096]{2,1,0}, bf16[4096]{0}, bf16[4096]{0}, /*index=835*/bf16[512,8,128]{2,1,0}, bf16[32,128,512]{2,1,0}, bf16[512,32,128]{2,1,0}, bf16[512,8,128]{2,1,0}, bf16[512,8]{1,0}, /*index=840*/bf16[1,4096,14336]{2,1,0}, bf16[1,4096,14336]{2,1,0}, bf16[1,14336,4096]{2,1,0}, bf16[4096]{0}, bf16[4096]{0}, /*index=845*/bf16[512,8,128]{2,1,0}, bf16[32,128,512]{2,1,0}, bf16[512,32,128]{2,1,0}, bf16[512,8,128]{2,1,0}, bf16[512,8]{1,0}, /*index=850*/bf16[1,4096,14336]{2,1,0}, bf16[1,4096,14336]{2,1,0}, bf16[1,14336,4096]{2,1,0}, bf16[4096]{0}, bf16[4096]{0}, /*index=855*/bf16[512,8,128]{2,1,0}, bf16[32,128,512]{2,1,0}, bf16[512,32,128]{2,1,0}, bf16[512,8,128]{2,1,0}, bf16[512,8]{1,0}, /*index=860*/bf16[1,4096,14336]{2,1,0}, bf16[1,4096,14336]{2,1,0}, bf16[1,14336,4096]{2,1,0}, bf16[4096]{0}, bf16[4096]{0}, /*index=865*/bf16[512,8,128]{2,1,0}, bf16[32,128,512]{2,1,0}, bf16[512,32,128]{2,1,0}, bf16[512,8,128]{2,1,0}, bf16[512,8]{1,0}, /*index=870*/bf16[1,4096,14336]{2,1,0}, bf16[1,4096,14336]{2,1,0}, bf16[1,14336,4096]{2,1,0}, bf16[4096]{0}, bf16[4096]{0}, /*index=875*/bf16[512,8,128]{2,1,0}, bf16[32,128,512]{2,1,0}, bf16[512,32,128]{2,1,0}, bf16[512,8,128]{2,1,0}, bf16[512,8]{1,0}, /*index=880*/bf16[1,4096,14336]{2,1,0}, bf16[1,4096,14336]{2,1,0}, bf16[1,14336,4096]{2,1,0}, bf16[4096]{0}, bf16[4096]{0}, /*index=885*/bf16[512,8,128]{2,1,0}, bf16[32,128,512]{2,1,0}, bf16[512,32,128]{2,1,0}, bf16[512,8,128]{2,1,0}, bf16[512,8]{1,0}, /*index=890*/bf16[1,4096,14336]{2,1,0}, bf16[1,4096,14336]{2,1,0}, bf16[1,14336,4096]{2,1,0}, bf16[4096]{0}, bf16[4096]{0}, /*index=895*/bf16[512,8,128]{2,1,0}, bf16[32,128,512]{2,1,0}, bf16[512,32,128]{2,1,0}, bf16[512,8,128]{2,1,0}, bf16[512,8]{1,0}, /*index=900*/bf16[1,4096,14336]{2,1,0}, bf16[1,4096,14336]{2,1,0}, bf16[1,14336,4096]{2,1,0}, bf16[4096]{0}, bf16[4096]{0}, /*index=905*/bf16[512,8,128]{2,1,0}, bf16[32,128,512]{2,1,0}, bf16[512,32,128]{2,1,0}, bf16[512,8,128]{2,1,0}, bf16[512,8]{1,0}, /*index=910*/bf16[1,4096,14336]{2,1,0}, bf16[1,4096,14336]{2,1,0}, bf16[1,14336,4096]{2,1,0}, bf16[4096]{0}, bf16[4096]{0}, /*index=915*/bf16[512,8,128]{2,1,0}, bf16[32,128,512]{2,1,0}, bf16[512,32,128]{2,1,0}, bf16[512,8,128]{2,1,0}, bf16[512,8]{1,0}, /*index=920*/bf16[1,4096,14336]{2,1,0}, bf16[1,4096,14336]{2,1,0}, bf16[1,14336,4096]{2,1,0}, bf16[4096]{0}, bf16[4096]{0}, /*index=925*/bf16[512,8,128]{2,1,0}, bf16[32,128,512]{2,1,0}, bf16[512,32,128]{2,1,0}, bf16[512,8,128]{2,1,0}, bf16[512,8]{1,0}, /*index=930*/bf16[1,4096,14336]{2,1,0}, bf16[1,4096,14336]{2,1,0}, bf16[1,14336,4096]{2,1,0}, bf16[4096]{0}, bf16[4096]{0}, /*index=935*/bf16[512,8,128]{2,1,0}, bf16[32,128,512]{2,1,0}, bf16[512,32,128]{2,1,0}, bf16[512,8,128]{2,1,0}, bf16[512,8]{1,0}, /*index=940*/bf16[1,4096,14336]{2,1,0}, bf16[1,4096,14336]{2,1,0}, bf16[1,14336,4096]{2,1,0}, bf16[4096]{0}, bf16[4096]{0}, /*index=945*/bf16[512,8,128]{2,1,0}, bf16[32,128,512]{2,1,0}, bf16[512,32,128]{2,1,0}, bf16[512,8,128]{2,1,0}, bf16[512,8]{1,0}, /*index=950*/bf16[1,4096,14336]{2,1,0}, bf16[1,4096,14336]{2,1,0}, bf16[1,14336,4096]{2,1,0}, bf16[4096]{0}, bf16[4096]{0}, /*index=955*/bf16[512,8,128]{2,1,0}, bf16[32,128,512]{2,1,0}, bf16[512,32,128]{2,1,0}, bf16[512,8,128]{2,1,0}, bf16[512,8]{1,0}, /*index=960*/bf16[1,4096,14336]{2,1,0}, bf16[1,4096,14336]{2,1,0}, bf16[1,14336,4096]{2,1,0}, bf16[4096]{0}, bf16[4096]{0}, /*index=965*/bf16[512,8,128]{2,1,0}, bf16[32,128,512]{2,1,0}, bf16[512,32,128]{2,1,0}, bf16[512,8,128]{2,1,0}, bf16[512,32000]{1,0}, /*index=970*/bf16[32000,512]{1,0}, s32[], bf16[], f32[], f32[], /*index=975*/f32[], bf16[], bf16[], s32[])}

%region_13.1491 (reduce_sum.1488: s32[], reduce_sum.1489: s32[]) -> s32[] {
  %reduce_sum.1488 = s32[] parameter(0)
  %reduce_sum.1489 = s32[] parameter(1)
  ROOT %reduce_sum.1490 = s32[] add(%reduce_sum.1488, %reduce_sum.1489)
}

%region_14.1500 (reduce_sum.1497: s32[], reduce_sum.1498: s32[]) -> s32[] {
  %reduce_sum.1497 = s32[] parameter(0)
  %reduce_sum.1498 = s32[] parameter(1)
  ROOT %reduce_sum.1499 = s32[] add(%reduce_sum.1497, %reduce_sum.1498)
}

%region_15.1506 (reduce_max.1503: s32[], reduce_max.1504: s32[]) -> s32[] {
  %reduce_max.1503 = s32[] parameter(0)
  %reduce_max.1504 = s32[] parameter(1)
  ROOT %reduce_max.1505 = s32[] maximum(%reduce_max.1503, %reduce_max.1504)
}

%region_25.1762 (reduce_sum.1759: s32[], reduce_sum.1760: s32[]) -> s32[] {
  %reduce_sum.1759 = s32[] parameter(0)
  %reduce_sum.1760 = s32[] parameter(1)
  ROOT %reduce_sum.1761 = s32[] add(%reduce_sum.1759, %reduce_sum.1760)
}

%region_26.1771 (reduce_sum.1768: s32[], reduce_sum.1769: s32[]) -> s32[] {
  %reduce_sum.1768 = s32[] parameter(0)
  %reduce_sum.1769 = s32[] parameter(1)
  ROOT %reduce_sum.1770 = s32[] add(%reduce_sum.1768, %reduce_sum.1769)
}

%region_27.1777 (reduce_max.1774: s32[], reduce_max.1775: s32[]) -> s32[] {
  %reduce_max.1774 = s32[] parameter(0)
  %reduce_max.1775 = s32[] parameter(1)
  ROOT %reduce_max.1776 = s32[] maximum(%reduce_max.1774, %reduce_max.1775)
}

%region_37.2033 (reduce_sum.2030: s32[], reduce_sum.2031: s32[]) -> s32[] {
  %reduce_sum.2030 = s32[] parameter(0)
  %reduce_sum.2031 = s32[] parameter(1)
  ROOT %reduce_sum.2032 = s32[] add(%reduce_sum.2030, %reduce_sum.2031)
}

%region_38.2042 (reduce_sum.2039: s32[], reduce_sum.2040: s32[]) -> s32[] {
  %reduce_sum.2039 = s32[] parameter(0)
  %reduce_sum.2040 = s32[] parameter(1)
  ROOT %reduce_sum.2041 = s32[] add(%reduce_sum.2039, %reduce_sum.2040)
}

%region_39.2048 (reduce_max.2045: s32[], reduce_max.2046: s32[]) -> s32[] {
  %reduce_max.2045 = s32[] parameter(0)
  %reduce_max.2046 = s32[] parameter(1)
  ROOT %reduce_max.2047 = s32[] maximum(%reduce_max.2045, %reduce_max.2046)
}

%region_49.2304 (reduce_sum.2301: s32[], reduce_sum.2302: s32[]) -> s32[] {
  %reduce_sum.2301 = s32[] parameter(0)
  %reduce_sum.2302 = s32[] parameter(1)
  ROOT %reduce_sum.2303 = s32[] add(%reduce_sum.2301, %reduce_sum.2302)
}

%region_50.2313 (reduce_sum.2310: s32[], reduce_sum.2311: s32[]) -> s32[] {
  %reduce_sum.2310 = s32[] parameter(0)
  %reduce_sum.2311 = s32[] parameter(1)
  ROOT %reduce_sum.2312 = s32[] add(%reduce_sum.2310, %reduce_sum.2311)
}

%region_51.2319 (reduce_max.2316: s32[], reduce_max.0: s32[]) -> s32[] {
  %reduce_max.2316 = s32[] parameter(0)
  %reduce_max.0 = s32[] parameter(1)
  ROOT %reduce_max.2318 = s32[] maximum(%reduce_max.2316, %reduce_max.0)
}

%region_61.2575 (reduce_sum.5: s32[], reduce_sum.6: s32[]) -> s32[] {
  %reduce_sum.5 = s32[] parameter(0)
  %reduce_sum.6 = s32[] parameter(1)
  ROOT %reduce_sum.2574 = s32[] add(%reduce_sum.5, %reduce_sum.6)
}

%region_62.2584 (reduce_sum.2581: s32[], reduce_sum.2582: s32[]) -> s32[] {
  %reduce_sum.2581 = s32[] parameter(0)
  %reduce_sum.2582 = s32[] parameter(1)
  ROOT %reduce_sum.2583 = s32[] add(%reduce_sum.2581, %reduce_sum.2582)
}

%region_63.2590 (reduce_max.2587: s32[], reduce_max.2588: s32[]) -> s32[] {
  %reduce_max.2587 = s32[] parameter(0)
  %reduce_max.2588 = s32[] parameter(1)
  ROOT %reduce_max.2589 = s32[] maximum(%reduce_max.2587, %reduce_max.2588)
}

%region_73.2846 (reduce_sum.2843: s32[], reduce_sum.2844: s32[]) -> s32[] {
  %reduce_sum.2843 = s32[] parameter(0)
  %reduce_sum.2844 = s32[] parameter(1)
  ROOT %reduce_sum.2845 = s32[] add(%reduce_sum.2843, %reduce_sum.2844)
}

%region_74.2855 (reduce_sum.2852: s32[], reduce_sum.2853: s32[]) -> s32[] {
  %reduce_sum.2852 = s32[] parameter(0)
  %reduce_sum.2853 = s32[] parameter(1)
  ROOT %reduce_sum.2854 = s32[] add(%reduce_sum.2852, %reduce_sum.2853)
}

%region_75.2861 (reduce_max.2858: s32[], reduce_max.2859: s32[]) -> s32[] {
  %reduce_max.2858 = s32[] parameter(0)
  %reduce_max.2859 = s32[] parameter(1)
  ROOT %reduce_max.2860 = s32[] maximum(%reduce_max.2858, %reduce_max.2859)
}

%region_85.3117 (reduce_sum.3114: s32[], reduce_sum.3115: s32[]) -> s32[] {
  %reduce_sum.3114 = s32[] parameter(0)
  %reduce_sum.3115 = s32[] parameter(1)
  ROOT %reduce_sum.3116 = s32[] add(%reduce_sum.3114, %reduce_sum.3115)
}

%region_86.3126 (reduce_sum.3123: s32[], reduce_sum.3124: s32[]) -> s32[] {
  %reduce_sum.3123 = s32[] parameter(0)
  %reduce_sum.3124 = s32[] parameter(1)
  ROOT %reduce_sum.3125 = s32[] add(%reduce_sum.3123, %reduce_sum.3124)
}

%region_87.3132 (reduce_max.3129: s32[], reduce_max.3130: s32[]) -> s32[] {
  %reduce_max.3129 = s32[] parameter(0)
  %reduce_max.3130 = s32[] parameter(1)
  ROOT %reduce_max.3131 = s32[] maximum(%reduce_max.3129, %reduce_max.3130)
}

%region_97.3388 (reduce_sum.3385: s32[], reduce_sum.3386: s32[]) -> s32[] {
  %reduce_sum.3385 = s32[] parameter(0)
  %reduce_sum.3386 = s32[] parameter(1)
  ROOT %reduce_sum.3387 = s32[] add(%reduce_sum.3385, %reduce_sum.3386)
}

%region_98.3397 (reduce_sum.3394: s32[], reduce_sum.3395: s32[]) -> s32[] {
  %reduce_sum.3394 = s32[] parameter(0)
  %reduce_sum.3395 = s32[] parameter(1)
  ROOT %reduce_sum.3396 = s32[] add(%reduce_sum.3394, %reduce_sum.3395)
}

%region_99.3403 (reduce_max.3400: s32[], reduce_max.3401: s32[]) -> s32[] {
  %reduce_max.3400 = s32[] parameter(0)
  %reduce_max.3401 = s32[] parameter(1)
  ROOT %reduce_max.3402 = s32[] maximum(%reduce_max.3400, %reduce_max.3401)
}

%region_109.3659 (reduce_sum.3656: s32[], reduce_sum.3657: s32[]) -> s32[] {
  %reduce_sum.3656 = s32[] parameter(0)
  %reduce_sum.3657 = s32[] parameter(1)
  ROOT %reduce_sum.3658 = s32[] add(%reduce_sum.3656, %reduce_sum.3657)
}

%region_110.3668 (reduce_sum.3665: s32[], reduce_sum.3666: s32[]) -> s32[] {
  %reduce_sum.3665 = s32[] parameter(0)
  %reduce_sum.3666 = s32[] parameter(1)
  ROOT %reduce_sum.3667 = s32[] add(%reduce_sum.3665, %reduce_sum.3666)
}

%region_111.3674 (reduce_max.3671: s32[], reduce_max.3672: s32[]) -> s32[] {
  %reduce_max.3671 = s32[] parameter(0)
  %reduce_max.3672 = s32[] parameter(1)
  ROOT %reduce_max.3673 = s32[] maximum(%reduce_max.3671, %reduce_max.3672)
}

%region_121.3930 (reduce_sum.3927: s32[], reduce_sum.3928: s32[]) -> s32[] {
  %reduce_sum.3927 = s32[] parameter(0)
  %reduce_sum.3928 = s32[] parameter(1)
  ROOT %reduce_sum.3929 = s32[] add(%reduce_sum.3927, %reduce_sum.3928)
}

%region_122.3939 (reduce_sum.3936: s32[], reduce_sum.3937: s32[]) -> s32[] {
  %reduce_sum.3936 = s32[] parameter(0)
  %reduce_sum.3937 = s32[] parameter(1)
  ROOT %reduce_sum.3938 = s32[] add(%reduce_sum.3936, %reduce_sum.3937)
}

%region_123.3945 (reduce_max.3942: s32[], reduce_max.3943: s32[]) -> s32[] {
  %reduce_max.3942 = s32[] parameter(0)
  %reduce_max.3943 = s32[] parameter(1)
  ROOT %reduce_max.3944 = s32[] maximum(%reduce_max.3942, %reduce_max.3943)
}

%region_133.4201 (reduce_sum.4198: s32[], reduce_sum.4199: s32[]) -> s32[] {
  %reduce_sum.4198 = s32[] parameter(0)
  %reduce_sum.4199 = s32[] parameter(1)
  ROOT %reduce_sum.4200 = s32[] add(%reduce_sum.4198, %reduce_sum.4199)
}

%region_134.4210 (reduce_sum.15: s32[], reduce_sum.16: s32[]) -> s32[] {
  %reduce_sum.15 = s32[] parameter(0)
  %reduce_sum.16 = s32[] parameter(1)
  ROOT %reduce_sum.17 = s32[] add(%reduce_sum.15, %reduce_sum.16)
}

%region_135.4216 (reduce_max.4213: s32[], reduce_max.4214: s32[]) -> s32[] {
  %reduce_max.4213 = s32[] parameter(0)
  %reduce_max.4214 = s32[] parameter(1)
  ROOT %reduce_max.4215 = s32[] maximum(%reduce_max.4213, %reduce_max.4214)
}

%region_145.4472 (reduce_sum.4469: s32[], reduce_sum.4470: s32[]) -> s32[] {
  %reduce_sum.4469 = s32[] parameter(0)
  %reduce_sum.4470 = s32[] parameter(1)
  ROOT %reduce_sum.4471 = s32[] add(%reduce_sum.4469, %reduce_sum.4470)
}

%region_146.4481 (reduce_sum.4478: s32[], reduce_sum.4479: s32[]) -> s32[] {
  %reduce_sum.4478 = s32[] parameter(0)
  %reduce_sum.4479 = s32[] parameter(1)
  ROOT %reduce_sum.4480 = s32[] add(%reduce_sum.4478, %reduce_sum.4479)
}

%region_147.4487 (reduce_max.4484: s32[], reduce_max.4485: s32[]) -> s32[] {
  %reduce_max.4484 = s32[] parameter(0)
  %reduce_max.4485 = s32[] parameter(1)
  ROOT %reduce_max.4486 = s32[] maximum(%reduce_max.4484, %reduce_max.4485)
}

%region_157.4743 (reduce_sum.4740: s32[], reduce_sum.4741: s32[]) -> s32[] {
  %reduce_sum.4740 = s32[] parameter(0)
  %reduce_sum.4741 = s32[] parameter(1)
  ROOT %reduce_sum.4742 = s32[] add(%reduce_sum.4740, %reduce_sum.4741)
}

%region_158.4752 (reduce_sum.4749: s32[], reduce_sum.4750: s32[]) -> s32[] {
  %reduce_sum.4749 = s32[] parameter(0)
  %reduce_sum.4750 = s32[] parameter(1)
  ROOT %reduce_sum.4751 = s32[] add(%reduce_sum.4749, %reduce_sum.4750)
}

%region_159.4758 (reduce_max.4755: s32[], reduce_max.4756: s32[]) -> s32[] {
  %reduce_max.4755 = s32[] parameter(0)
  %reduce_max.4756 = s32[] parameter(1)
  ROOT %reduce_max.4757 = s32[] maximum(%reduce_max.4755, %reduce_max.4756)
}

%region_169.5014 (reduce_sum.5011: s32[], reduce_sum.5012: s32[]) -> s32[] {
  %reduce_sum.5011 = s32[] parameter(0)
  %reduce_sum.5012 = s32[] parameter(1)
  ROOT %reduce_sum.5013 = s32[] add(%reduce_sum.5011, %reduce_sum.5012)
}

%region_170.5023 (reduce_sum.5020: s32[], reduce_sum.5021: s32[]) -> s32[] {
  %reduce_sum.5020 = s32[] parameter(0)
  %reduce_sum.5021 = s32[] parameter(1)
  ROOT %reduce_sum.5022 = s32[] add(%reduce_sum.5020, %reduce_sum.5021)
}

%region_171.5029 (reduce_max.5026: s32[], reduce_max.5027: s32[]) -> s32[] {
  %reduce_max.5026 = s32[] parameter(0)
  %reduce_max.5027 = s32[] parameter(1)
  ROOT %reduce_max.5028 = s32[] maximum(%reduce_max.5026, %reduce_max.5027)
}

%region_181.5285 (reduce_sum.5282: s32[], reduce_sum.5283: s32[]) -> s32[] {
  %reduce_sum.5282 = s32[] parameter(0)
  %reduce_sum.5283 = s32[] parameter(1)
  ROOT %reduce_sum.5284 = s32[] add(%reduce_sum.5282, %reduce_sum.5283)
}

%region_182.5294 (reduce_sum.5291: s32[], reduce_sum.5292: s32[]) -> s32[] {
  %reduce_sum.5291 = s32[] parameter(0)
  %reduce_sum.5292 = s32[] parameter(1)
  ROOT %reduce_sum.5293 = s32[] add(%reduce_sum.5291, %reduce_sum.5292)
}

%region_183.5300 (reduce_max.5297: s32[], reduce_max.5298: s32[]) -> s32[] {
  %reduce_max.5297 = s32[] parameter(0)
  %reduce_max.5298 = s32[] parameter(1)
  ROOT %reduce_max.5299 = s32[] maximum(%reduce_max.5297, %reduce_max.5298)
}

%region_193.5556 (reduce_sum.5553: s32[], reduce_sum.5554: s32[]) -> s32[] {
  %reduce_sum.5553 = s32[] parameter(0)
  %reduce_sum.5554 = s32[] parameter(1)
  ROOT %reduce_sum.5555 = s32[] add(%reduce_sum.5553, %reduce_sum.5554)
}

%region_194.5565 (reduce_sum.5562: s32[], reduce_sum.5563: s32[]) -> s32[] {
  %reduce_sum.5562 = s32[] parameter(0)
  %reduce_sum.5563 = s32[] parameter(1)
  ROOT %reduce_sum.5564 = s32[] add(%reduce_sum.5562, %reduce_sum.5563)
}

%region_195.5571 (reduce_max.5568: s32[], reduce_max.5569: s32[]) -> s32[] {
  %reduce_max.5568 = s32[] parameter(0)
  %reduce_max.5569 = s32[] parameter(1)
  ROOT %reduce_max.5570 = s32[] maximum(%reduce_max.5568, %reduce_max.5569)
}

%region_205.5827 (reduce_sum.5824: s32[], reduce_sum.5825: s32[]) -> s32[] {
  %reduce_sum.5824 = s32[] parameter(0)
  %reduce_sum.5825 = s32[] parameter(1)
  ROOT %reduce_sum.5826 = s32[] add(%reduce_sum.5824, %reduce_sum.5825)
}

%region_206.5836 (reduce_sum.5833: s32[], reduce_sum.5834: s32[]) -> s32[] {
  %reduce_sum.5833 = s32[] parameter(0)
  %reduce_sum.5834 = s32[] parameter(1)
  ROOT %reduce_sum.5835 = s32[] add(%reduce_sum.5833, %reduce_sum.5834)
}

%region_207.5842 (reduce_max.5839: s32[], reduce_max.5840: s32[]) -> s32[] {
  %reduce_max.5839 = s32[] parameter(0)
  %reduce_max.5840 = s32[] parameter(1)
  ROOT %reduce_max.5841 = s32[] maximum(%reduce_max.5839, %reduce_max.5840)
}

%region_217.6098 (reduce_sum.6095: s32[], reduce_sum.6096: s32[]) -> s32[] {
  %reduce_sum.6095 = s32[] parameter(0)
  %reduce_sum.6096 = s32[] parameter(1)
  ROOT %reduce_sum.6097 = s32[] add(%reduce_sum.6095, %reduce_sum.6096)
}

%region_218.6107 (reduce_sum.6104: s32[], reduce_sum.6105: s32[]) -> s32[] {
  %reduce_sum.6104 = s32[] parameter(0)
  %reduce_sum.6105 = s32[] parameter(1)
  ROOT %reduce_sum.6106 = s32[] add(%reduce_sum.6104, %reduce_sum.6105)
}

%region_219.6113 (reduce_max.6110: s32[], reduce_max.6111: s32[]) -> s32[] {
  %reduce_max.6110 = s32[] parameter(0)
  %reduce_max.6111 = s32[] parameter(1)
  ROOT %reduce_max.6112 = s32[] maximum(%reduce_max.6110, %reduce_max.6111)
}

%region_229.6369 (reduce_sum.6366: s32[], reduce_sum.6367: s32[]) -> s32[] {
  %reduce_sum.6366 = s32[] parameter(0)
  %reduce_sum.6367 = s32[] parameter(1)
  ROOT %reduce_sum.6368 = s32[] add(%reduce_sum.6366, %reduce_sum.6367)
}

%region_230.6378 (reduce_sum.6375: s32[], reduce_sum.6376: s32[]) -> s32[] {
  %reduce_sum.6375 = s32[] parameter(0)
  %reduce_sum.6376 = s32[] parameter(1)
  ROOT %reduce_sum.6377 = s32[] add(%reduce_sum.6375, %reduce_sum.6376)
}

%region_231.6384 (reduce_max.6381: s32[], reduce_max.6382: s32[]) -> s32[] {
  %reduce_max.6381 = s32[] parameter(0)
  %reduce_max.6382 = s32[] parameter(1)
  ROOT %reduce_max.6383 = s32[] maximum(%reduce_max.6381, %reduce_max.6382)
}

%region_241.6640 (reduce_sum.6637: s32[], reduce_sum.6638: s32[]) -> s32[] {
  %reduce_sum.6637 = s32[] parameter(0)
  %reduce_sum.6638 = s32[] parameter(1)
  ROOT %reduce_sum.27 = s32[] add(%reduce_sum.6637, %reduce_sum.6638)
}

%region_242.6649 (reduce_sum.6646: s32[], reduce_sum.6647: s32[]) -> s32[] {
  %reduce_sum.6646 = s32[] parameter(0)
  %reduce_sum.6647 = s32[] parameter(1)
  ROOT %reduce_sum.28 = s32[] add(%reduce_sum.6646, %reduce_sum.6647)
}

%region_243.6655 (reduce_max.6652: s32[], reduce_max.6653: s32[]) -> s32[] {
  %reduce_max.6652 = s32[] parameter(0)
  %reduce_max.6653 = s32[] parameter(1)
  ROOT %reduce_max.6654 = s32[] maximum(%reduce_max.6652, %reduce_max.6653)
}

%region_253.6911 (reduce_sum.6908: s32[], reduce_sum.6909: s32[]) -> s32[] {
  %reduce_sum.6908 = s32[] parameter(0)
  %reduce_sum.6909 = s32[] parameter(1)
  ROOT %reduce_sum.6910 = s32[] add(%reduce_sum.6908, %reduce_sum.6909)
}

%region_254.6920 (reduce_sum.6917: s32[], reduce_sum.6918: s32[]) -> s32[] {
  %reduce_sum.6917 = s32[] parameter(0)
  %reduce_sum.6918 = s32[] parameter(1)
  ROOT %reduce_sum.6919 = s32[] add(%reduce_sum.6917, %reduce_sum.6918)
}

%region_255.6926 (reduce_max.6923: s32[], reduce_max.6924: s32[]) -> s32[] {
  %reduce_max.6923 = s32[] parameter(0)
  %reduce_max.6924 = s32[] parameter(1)
  ROOT %reduce_max.6925 = s32[] maximum(%reduce_max.6923, %reduce_max.6924)
}

%region_265.7182 (reduce_sum.7179: s32[], reduce_sum.7180: s32[]) -> s32[] {
  %reduce_sum.7179 = s32[] parameter(0)
  %reduce_sum.7180 = s32[] parameter(1)
  ROOT %reduce_sum.7181 = s32[] add(%reduce_sum.7179, %reduce_sum.7180)
}

%region_266.7191 (reduce_sum.7188: s32[], reduce_sum.29: s32[]) -> s32[] {
  %reduce_sum.7188 = s32[] parameter(0)
  %reduce_sum.29 = s32[] parameter(1)
  ROOT %reduce_sum.30 = s32[] add(%reduce_sum.7188, %reduce_sum.29)
}

%region_267.7197 (reduce_max.7194: s32[], reduce_max.7195: s32[]) -> s32[] {
  %reduce_max.7194 = s32[] parameter(0)
  %reduce_max.7195 = s32[] parameter(1)
  ROOT %reduce_max.7196 = s32[] maximum(%reduce_max.7194, %reduce_max.7195)
}

%region_277.7453 (reduce_sum.7450: s32[], reduce_sum.7451: s32[]) -> s32[] {
  %reduce_sum.7450 = s32[] parameter(0)
  %reduce_sum.7451 = s32[] parameter(1)
  ROOT %reduce_sum.7452 = s32[] add(%reduce_sum.7450, %reduce_sum.7451)
}

%region_278.7462 (reduce_sum.31: s32[], reduce_sum.7460: s32[]) -> s32[] {
  %reduce_sum.31 = s32[] parameter(0)
  %reduce_sum.7460 = s32[] parameter(1)
  ROOT %reduce_sum.7461 = s32[] add(%reduce_sum.31, %reduce_sum.7460)
}

%region_279.7468 (reduce_max.7465: s32[], reduce_max.7466: s32[]) -> s32[] {
  %reduce_max.7465 = s32[] parameter(0)
  %reduce_max.7466 = s32[] parameter(1)
  ROOT %reduce_max.7467 = s32[] maximum(%reduce_max.7465, %reduce_max.7466)
}

%region_289.7724 (reduce_sum.7721: s32[], reduce_sum.7722: s32[]) -> s32[] {
  %reduce_sum.7721 = s32[] parameter(0)
  %reduce_sum.7722 = s32[] parameter(1)
  ROOT %reduce_sum.7723 = s32[] add(%reduce_sum.7721, %reduce_sum.7722)
}

%region_290.7733 (reduce_sum.7730: s32[], reduce_sum.32: s32[]) -> s32[] {
  %reduce_sum.7730 = s32[] parameter(0)
  %reduce_sum.32 = s32[] parameter(1)
  ROOT %reduce_sum.33 = s32[] add(%reduce_sum.7730, %reduce_sum.32)
}

%region_291.7739 (reduce_max.7736: s32[], reduce_max.7737: s32[]) -> s32[] {
  %reduce_max.7736 = s32[] parameter(0)
  %reduce_max.7737 = s32[] parameter(1)
  ROOT %reduce_max.7738 = s32[] maximum(%reduce_max.7736, %reduce_max.7737)
}

%region_301.7995 (reduce_sum.7992: s32[], reduce_sum.7993: s32[]) -> s32[] {
  %reduce_sum.7992 = s32[] parameter(0)
  %reduce_sum.7993 = s32[] parameter(1)
  ROOT %reduce_sum.7994 = s32[] add(%reduce_sum.7992, %reduce_sum.7993)
}

%region_302.8004 (reduce_sum.8001: s32[], reduce_sum.8002: s32[]) -> s32[] {
  %reduce_sum.8001 = s32[] parameter(0)
  %reduce_sum.8002 = s32[] parameter(1)
  ROOT %reduce_sum.8003 = s32[] add(%reduce_sum.8001, %reduce_sum.8002)
}

%region_303.8010 (reduce_max.8007: s32[], reduce_max.8008: s32[]) -> s32[] {
  %reduce_max.8007 = s32[] parameter(0)
  %reduce_max.8008 = s32[] parameter(1)
  ROOT %reduce_max.8009 = s32[] maximum(%reduce_max.8007, %reduce_max.8008)
}

%region_313.8266 (reduce_sum.8263: s32[], reduce_sum.8264: s32[]) -> s32[] {
  %reduce_sum.8263 = s32[] parameter(0)
  %reduce_sum.8264 = s32[] parameter(1)
  ROOT %reduce_sum.8265 = s32[] add(%reduce_sum.8263, %reduce_sum.8264)
}

%region_314.8275 (reduce_sum.8272: s32[], reduce_sum.8273: s32[]) -> s32[] {
  %reduce_sum.8272 = s32[] parameter(0)
  %reduce_sum.8273 = s32[] parameter(1)
  ROOT %reduce_sum.8274 = s32[] add(%reduce_sum.8272, %reduce_sum.8273)
}

%region_315.8281 (reduce_max.8278: s32[], reduce_max.8279: s32[]) -> s32[] {
  %reduce_max.8278 = s32[] parameter(0)
  %reduce_max.8279 = s32[] parameter(1)
  ROOT %reduce_max.8280 = s32[] maximum(%reduce_max.8278, %reduce_max.8279)
}

%region_325.8537 (reduce_sum.8534: s32[], reduce_sum.8535: s32[]) -> s32[] {
  %reduce_sum.8534 = s32[] parameter(0)
  %reduce_sum.8535 = s32[] parameter(1)
  ROOT %reduce_sum.8536 = s32[] add(%reduce_sum.8534, %reduce_sum.8535)
}

%region_326.8546 (reduce_sum.8543: s32[], reduce_sum.8544: s32[]) -> s32[] {
  %reduce_sum.8543 = s32[] parameter(0)
  %reduce_sum.8544 = s32[] parameter(1)
  ROOT %reduce_sum.8545 = s32[] add(%reduce_sum.8543, %reduce_sum.8544)
}

%region_327.8552 (reduce_max.8549: s32[], reduce_max.8550: s32[]) -> s32[] {
  %reduce_max.8549 = s32[] parameter(0)
  %reduce_max.8550 = s32[] parameter(1)
  ROOT %reduce_max.8551 = s32[] maximum(%reduce_max.8549, %reduce_max.8550)
}

%region_337.8808 (reduce_sum.8805: s32[], reduce_sum.8806: s32[]) -> s32[] {
  %reduce_sum.8805 = s32[] parameter(0)
  %reduce_sum.8806 = s32[] parameter(1)
  ROOT %reduce_sum.8807 = s32[] add(%reduce_sum.8805, %reduce_sum.8806)
}

%region_338.8817 (reduce_sum.8814: s32[], reduce_sum.41: s32[]) -> s32[] {
  %reduce_sum.8814 = s32[] parameter(0)
  %reduce_sum.41 = s32[] parameter(1)
  ROOT %reduce_sum.42 = s32[] add(%reduce_sum.8814, %reduce_sum.41)
}

%region_339.8823 (reduce_max.8820: s32[], reduce_max.8821: s32[]) -> s32[] {
  %reduce_max.8820 = s32[] parameter(0)
  %reduce_max.8821 = s32[] parameter(1)
  ROOT %reduce_max.8822 = s32[] maximum(%reduce_max.8820, %reduce_max.8821)
}

%region_349.9079 (reduce_sum.9076: s32[], reduce_sum.9077: s32[]) -> s32[] {
  %reduce_sum.9076 = s32[] parameter(0)
  %reduce_sum.9077 = s32[] parameter(1)
  ROOT %reduce_sum.9078 = s32[] add(%reduce_sum.9076, %reduce_sum.9077)
}

%region_350.9088 (reduce_sum.9085: s32[], reduce_sum.9086: s32[]) -> s32[] {
  %reduce_sum.9085 = s32[] parameter(0)
  %reduce_sum.9086 = s32[] parameter(1)
  ROOT %reduce_sum.9087 = s32[] add(%reduce_sum.9085, %reduce_sum.9086)
}

%region_351.9094 (reduce_max.9091: s32[], reduce_max.9092: s32[]) -> s32[] {
  %reduce_max.9091 = s32[] parameter(0)
  %reduce_max.9092 = s32[] parameter(1)
  ROOT %reduce_max.9093 = s32[] maximum(%reduce_max.9091, %reduce_max.9092)
}

%region_361.9350 (reduce_sum.9347: s32[], reduce_sum.9348: s32[]) -> s32[] {
  %reduce_sum.9347 = s32[] parameter(0)
  %reduce_sum.9348 = s32[] parameter(1)
  ROOT %reduce_sum.9349 = s32[] add(%reduce_sum.9347, %reduce_sum.9348)
}

%region_362.9359 (reduce_sum.9356: s32[], reduce_sum.9357: s32[]) -> s32[] {
  %reduce_sum.9356 = s32[] parameter(0)
  %reduce_sum.9357 = s32[] parameter(1)
  ROOT %reduce_sum.9358 = s32[] add(%reduce_sum.9356, %reduce_sum.9357)
}

%region_363.9365 (reduce_max.9362: s32[], reduce_max.9363: s32[]) -> s32[] {
  %reduce_max.9362 = s32[] parameter(0)
  %reduce_max.9363 = s32[] parameter(1)
  ROOT %reduce_max.9364 = s32[] maximum(%reduce_max.9362, %reduce_max.9363)
}

%region_373.9621 (reduce_sum.9618: s32[], reduce_sum.9619: s32[]) -> s32[] {
  %reduce_sum.9618 = s32[] parameter(0)
  %reduce_sum.9619 = s32[] parameter(1)
  ROOT %reduce_sum.9620 = s32[] add(%reduce_sum.9618, %reduce_sum.9619)
}

%region_374.9630 (reduce_sum.9627: s32[], reduce_sum.9628: s32[]) -> s32[] {
  %reduce_sum.9627 = s32[] parameter(0)
  %reduce_sum.9628 = s32[] parameter(1)
  ROOT %reduce_sum.9629 = s32[] add(%reduce_sum.9627, %reduce_sum.9628)
}

%region_375.9636 (reduce_max.9633: s32[], reduce_max.9634: s32[]) -> s32[] {
  %reduce_max.9633 = s32[] parameter(0)
  %reduce_max.9634 = s32[] parameter(1)
  ROOT %reduce_max.9635 = s32[] maximum(%reduce_max.9633, %reduce_max.9634)
}

%region_2001.42513 (reduce_sum.42510: f32[], reduce_sum.512: f32[]) -> f32[] {
  %reduce_sum.42510 = f32[] parameter(0)
  %reduce_sum.512 = f32[] parameter(1)
  ROOT %reduce_sum.513 = f32[] add(%reduce_sum.42510, %reduce_sum.512)
}

%region_2002.42521 (reduce_sum.42518: f32[], reduce_sum.42519: f32[]) -> f32[] {
  %reduce_sum.42518 = f32[] parameter(0)
  %reduce_sum.42519 = f32[] parameter(1)
  ROOT %reduce_sum.514 = f32[] add(%reduce_sum.42518, %reduce_sum.42519)
}

%region_2003.42530 (reduce_sum.42527: f32[], reduce_sum.42528: f32[]) -> f32[] {
  %reduce_sum.42527 = f32[] parameter(0)
  %reduce_sum.42528 = f32[] parameter(1)
  ROOT %reduce_sum.515 = f32[] add(%reduce_sum.42527, %reduce_sum.42528)
}

%region_2004.42539 (reduce_sum.42536: f32[], reduce_sum.42537: f32[]) -> f32[] {
  %reduce_sum.42536 = f32[] parameter(0)
  %reduce_sum.42537 = f32[] parameter(1)
  ROOT %reduce_sum.516 = f32[] add(%reduce_sum.42536, %reduce_sum.42537)
}

%region_2005.42548 (reduce_sum.42545: f32[], reduce_sum.42546: f32[]) -> f32[] {
  %reduce_sum.42545 = f32[] parameter(0)
  %reduce_sum.42546 = f32[] parameter(1)
  ROOT %reduce_sum.517 = f32[] add(%reduce_sum.42545, %reduce_sum.42546)
}

%region_2006.42557 (reduce_sum.42554: f32[], reduce_sum.42555: f32[]) -> f32[] {
  %reduce_sum.42554 = f32[] parameter(0)
  %reduce_sum.42555 = f32[] parameter(1)
  ROOT %reduce_sum.518 = f32[] add(%reduce_sum.42554, %reduce_sum.42555)
}

%region_2007.42566 (reduce_sum.42563: f32[], reduce_sum.42564: f32[]) -> f32[] {
  %reduce_sum.42563 = f32[] parameter(0)
  %reduce_sum.42564 = f32[] parameter(1)
  ROOT %reduce_sum.519 = f32[] add(%reduce_sum.42563, %reduce_sum.42564)
}

%region_2008.42575 (reduce_sum.42572: f32[], reduce_sum.42573: f32[]) -> f32[] {
  %reduce_sum.42572 = f32[] parameter(0)
  %reduce_sum.42573 = f32[] parameter(1)
  ROOT %reduce_sum.520 = f32[] add(%reduce_sum.42572, %reduce_sum.42573)
}

%region_2009.42584 (reduce_sum.42581: f32[], reduce_sum.42582: f32[]) -> f32[] {
  %reduce_sum.42581 = f32[] parameter(0)
  %reduce_sum.42582 = f32[] parameter(1)
  ROOT %reduce_sum.521 = f32[] add(%reduce_sum.42581, %reduce_sum.42582)
}

%region_2010.42593 (reduce_sum.42590: f32[], reduce_sum.42591: f32[]) -> f32[] {
  %reduce_sum.42590 = f32[] parameter(0)
  %reduce_sum.42591 = f32[] parameter(1)
  ROOT %reduce_sum.522 = f32[] add(%reduce_sum.42590, %reduce_sum.42591)
}

%region_2011.42602 (reduce_sum.42599: f32[], reduce_sum.42600: f32[]) -> f32[] {
  %reduce_sum.42599 = f32[] parameter(0)
  %reduce_sum.42600 = f32[] parameter(1)
  ROOT %reduce_sum.523 = f32[] add(%reduce_sum.42599, %reduce_sum.42600)
}

%region_2012.42611 (reduce_sum.42608: f32[], reduce_sum.42609: f32[]) -> f32[] {
  %reduce_sum.42608 = f32[] parameter(0)
  %reduce_sum.42609 = f32[] parameter(1)
  ROOT %reduce_sum.524 = f32[] add(%reduce_sum.42608, %reduce_sum.42609)
}

%region_2013.42620 (reduce_sum.42617: f32[], reduce_sum.42618: f32[]) -> f32[] {
  %reduce_sum.42617 = f32[] parameter(0)
  %reduce_sum.42618 = f32[] parameter(1)
  ROOT %reduce_sum.525 = f32[] add(%reduce_sum.42617, %reduce_sum.42618)
}

%region_2014.42629 (reduce_sum.42626: f32[], reduce_sum.42627: f32[]) -> f32[] {
  %reduce_sum.42626 = f32[] parameter(0)
  %reduce_sum.42627 = f32[] parameter(1)
  ROOT %reduce_sum.526 = f32[] add(%reduce_sum.42626, %reduce_sum.42627)
}

%region_2015.42638 (reduce_sum.42635: f32[], reduce_sum.42636: f32[]) -> f32[] {
  %reduce_sum.42635 = f32[] parameter(0)
  %reduce_sum.42636 = f32[] parameter(1)
  ROOT %reduce_sum.527 = f32[] add(%reduce_sum.42635, %reduce_sum.42636)
}

%region_2016.42647 (reduce_sum.42644: f32[], reduce_sum.42645: f32[]) -> f32[] {
  %reduce_sum.42644 = f32[] parameter(0)
  %reduce_sum.42645 = f32[] parameter(1)
  ROOT %reduce_sum.528 = f32[] add(%reduce_sum.42644, %reduce_sum.42645)
}

%region_2017.42656 (reduce_sum.42653: f32[], reduce_sum.42654: f32[]) -> f32[] {
  %reduce_sum.42653 = f32[] parameter(0)
  %reduce_sum.42654 = f32[] parameter(1)
  ROOT %reduce_sum.529 = f32[] add(%reduce_sum.42653, %reduce_sum.42654)
}

%region_2018.42665 (reduce_sum.42662: f32[], reduce_sum.42663: f32[]) -> f32[] {
  %reduce_sum.42662 = f32[] parameter(0)
  %reduce_sum.42663 = f32[] parameter(1)
  ROOT %reduce_sum.530 = f32[] add(%reduce_sum.42662, %reduce_sum.42663)
}

%region_2019.42674 (reduce_sum.42671: f32[], reduce_sum.42672: f32[]) -> f32[] {
  %reduce_sum.42671 = f32[] parameter(0)
  %reduce_sum.42672 = f32[] parameter(1)
  ROOT %reduce_sum.531 = f32[] add(%reduce_sum.42671, %reduce_sum.42672)
}

%region_2020.42683 (reduce_sum.42680: f32[], reduce_sum.42681: f32[]) -> f32[] {
  %reduce_sum.42680 = f32[] parameter(0)
  %reduce_sum.42681 = f32[] parameter(1)
  ROOT %reduce_sum.532 = f32[] add(%reduce_sum.42680, %reduce_sum.42681)
}

%region_2021.42692 (reduce_sum.42689: f32[], reduce_sum.42690: f32[]) -> f32[] {
  %reduce_sum.42689 = f32[] parameter(0)
  %reduce_sum.42690 = f32[] parameter(1)
  ROOT %reduce_sum.533 = f32[] add(%reduce_sum.42689, %reduce_sum.42690)
}

%region_2022.42701 (reduce_sum.42698: f32[], reduce_sum.42699: f32[]) -> f32[] {
  %reduce_sum.42698 = f32[] parameter(0)
  %reduce_sum.42699 = f32[] parameter(1)
  ROOT %reduce_sum.534 = f32[] add(%reduce_sum.42698, %reduce_sum.42699)
}

%region_2023.42710 (reduce_sum.42707: f32[], reduce_sum.42708: f32[]) -> f32[] {
  %reduce_sum.42707 = f32[] parameter(0)
  %reduce_sum.42708 = f32[] parameter(1)
  ROOT %reduce_sum.535 = f32[] add(%reduce_sum.42707, %reduce_sum.42708)
}

%region_2024.42719 (reduce_sum.42716: f32[], reduce_sum.42717: f32[]) -> f32[] {
  %reduce_sum.42716 = f32[] parameter(0)
  %reduce_sum.42717 = f32[] parameter(1)
  ROOT %reduce_sum.536 = f32[] add(%reduce_sum.42716, %reduce_sum.42717)
}

%region_2025.42728 (reduce_sum.42725: f32[], reduce_sum.42726: f32[]) -> f32[] {
  %reduce_sum.42725 = f32[] parameter(0)
  %reduce_sum.42726 = f32[] parameter(1)
  ROOT %reduce_sum.537 = f32[] add(%reduce_sum.42725, %reduce_sum.42726)
}

%region_2026.42737 (reduce_sum.42734: f32[], reduce_sum.42735: f32[]) -> f32[] {
  %reduce_sum.42734 = f32[] parameter(0)
  %reduce_sum.42735 = f32[] parameter(1)
  ROOT %reduce_sum.538 = f32[] add(%reduce_sum.42734, %reduce_sum.42735)
}

%region_2027.42746 (reduce_sum.42743: f32[], reduce_sum.42744: f32[]) -> f32[] {
  %reduce_sum.42743 = f32[] parameter(0)
  %reduce_sum.42744 = f32[] parameter(1)
  ROOT %reduce_sum.539 = f32[] add(%reduce_sum.42743, %reduce_sum.42744)
}

%region_2028.42755 (reduce_sum.42752: f32[], reduce_sum.42753: f32[]) -> f32[] {
  %reduce_sum.42752 = f32[] parameter(0)
  %reduce_sum.42753 = f32[] parameter(1)
  ROOT %reduce_sum.540 = f32[] add(%reduce_sum.42752, %reduce_sum.42753)
}

%region_2029.42764 (reduce_sum.42761: f32[], reduce_sum.42762: f32[]) -> f32[] {
  %reduce_sum.42761 = f32[] parameter(0)
  %reduce_sum.42762 = f32[] parameter(1)
  ROOT %reduce_sum.541 = f32[] add(%reduce_sum.42761, %reduce_sum.42762)
}

%region_2030.42773 (reduce_sum.42770: f32[], reduce_sum.42771: f32[]) -> f32[] {
  %reduce_sum.42770 = f32[] parameter(0)
  %reduce_sum.42771 = f32[] parameter(1)
  ROOT %reduce_sum.542 = f32[] add(%reduce_sum.42770, %reduce_sum.42771)
}

%region_2031.42782 (reduce_sum.42779: f32[], reduce_sum.42780: f32[]) -> f32[] {
  %reduce_sum.42779 = f32[] parameter(0)
  %reduce_sum.42780 = f32[] parameter(1)
  ROOT %reduce_sum.543 = f32[] add(%reduce_sum.42779, %reduce_sum.42780)
}

%region_2032.42791 (reduce_sum.42788: f32[], reduce_sum.42789: f32[]) -> f32[] {
  %reduce_sum.42788 = f32[] parameter(0)
  %reduce_sum.42789 = f32[] parameter(1)
  ROOT %reduce_sum.544 = f32[] add(%reduce_sum.42788, %reduce_sum.42789)
}

%region_2033.42800 (reduce_sum.42797: f32[], reduce_sum.42798: f32[]) -> f32[] {
  %reduce_sum.42797 = f32[] parameter(0)
  %reduce_sum.42798 = f32[] parameter(1)
  ROOT %reduce_sum.545 = f32[] add(%reduce_sum.42797, %reduce_sum.42798)
}

%region_2034.42809 (reduce_sum.42806: f32[], reduce_sum.42807: f32[]) -> f32[] {
  %reduce_sum.42806 = f32[] parameter(0)
  %reduce_sum.42807 = f32[] parameter(1)
  ROOT %reduce_sum.546 = f32[] add(%reduce_sum.42806, %reduce_sum.42807)
}

%region_2035.42818 (reduce_sum.42815: f32[], reduce_sum.42816: f32[]) -> f32[] {
  %reduce_sum.42815 = f32[] parameter(0)
  %reduce_sum.42816 = f32[] parameter(1)
  ROOT %reduce_sum.547 = f32[] add(%reduce_sum.42815, %reduce_sum.42816)
}

%region_2036.42827 (reduce_sum.42824: f32[], reduce_sum.42825: f32[]) -> f32[] {
  %reduce_sum.42824 = f32[] parameter(0)
  %reduce_sum.42825 = f32[] parameter(1)
  ROOT %reduce_sum.548 = f32[] add(%reduce_sum.42824, %reduce_sum.42825)
}

%region_2037.42836 (reduce_sum.42833: f32[], reduce_sum.42834: f32[]) -> f32[] {
  %reduce_sum.42833 = f32[] parameter(0)
  %reduce_sum.42834 = f32[] parameter(1)
  ROOT %reduce_sum.549 = f32[] add(%reduce_sum.42833, %reduce_sum.42834)
}

%region_2038.42845 (reduce_sum.42842: f32[], reduce_sum.42843: f32[]) -> f32[] {
  %reduce_sum.42842 = f32[] parameter(0)
  %reduce_sum.42843 = f32[] parameter(1)
  ROOT %reduce_sum.550 = f32[] add(%reduce_sum.42842, %reduce_sum.42843)
}

%region_2039.42854 (reduce_sum.42851: f32[], reduce_sum.42852: f32[]) -> f32[] {
  %reduce_sum.42851 = f32[] parameter(0)
  %reduce_sum.42852 = f32[] parameter(1)
  ROOT %reduce_sum.551 = f32[] add(%reduce_sum.42851, %reduce_sum.42852)
}

%region_2040.42863 (reduce_sum.42860: f32[], reduce_sum.42861: f32[]) -> f32[] {
  %reduce_sum.42860 = f32[] parameter(0)
  %reduce_sum.42861 = f32[] parameter(1)
  ROOT %reduce_sum.552 = f32[] add(%reduce_sum.42860, %reduce_sum.42861)
}

%region_2041.42872 (reduce_sum.42869: f32[], reduce_sum.42870: f32[]) -> f32[] {
  %reduce_sum.42869 = f32[] parameter(0)
  %reduce_sum.42870 = f32[] parameter(1)
  ROOT %reduce_sum.553 = f32[] add(%reduce_sum.42869, %reduce_sum.42870)
}

%region_2042.42881 (reduce_sum.42878: f32[], reduce_sum.42879: f32[]) -> f32[] {
  %reduce_sum.42878 = f32[] parameter(0)
  %reduce_sum.42879 = f32[] parameter(1)
  ROOT %reduce_sum.554 = f32[] add(%reduce_sum.42878, %reduce_sum.42879)
}

%region_2043.42890 (reduce_sum.42887: f32[], reduce_sum.42888: f32[]) -> f32[] {
  %reduce_sum.42887 = f32[] parameter(0)
  %reduce_sum.42888 = f32[] parameter(1)
  ROOT %reduce_sum.555 = f32[] add(%reduce_sum.42887, %reduce_sum.42888)
}

%region_2044.42899 (reduce_sum.42896: f32[], reduce_sum.42897: f32[]) -> f32[] {
  %reduce_sum.42896 = f32[] parameter(0)
  %reduce_sum.42897 = f32[] parameter(1)
  ROOT %reduce_sum.556 = f32[] add(%reduce_sum.42896, %reduce_sum.42897)
}

%region_2045.42908 (reduce_sum.42905: f32[], reduce_sum.42906: f32[]) -> f32[] {
  %reduce_sum.42905 = f32[] parameter(0)
  %reduce_sum.42906 = f32[] parameter(1)
  ROOT %reduce_sum.557 = f32[] add(%reduce_sum.42905, %reduce_sum.42906)
}

%region_2046.42917 (reduce_sum.42914: f32[], reduce_sum.42915: f32[]) -> f32[] {
  %reduce_sum.42914 = f32[] parameter(0)
  %reduce_sum.42915 = f32[] parameter(1)
  ROOT %reduce_sum.558 = f32[] add(%reduce_sum.42914, %reduce_sum.42915)
}

%region_2047.42926 (reduce_sum.42923: f32[], reduce_sum.42924: f32[]) -> f32[] {
  %reduce_sum.42923 = f32[] parameter(0)
  %reduce_sum.42924 = f32[] parameter(1)
  ROOT %reduce_sum.559 = f32[] add(%reduce_sum.42923, %reduce_sum.42924)
}

%region_2048.42935 (reduce_sum.42932: f32[], reduce_sum.42933: f32[]) -> f32[] {
  %reduce_sum.42932 = f32[] parameter(0)
  %reduce_sum.42933 = f32[] parameter(1)
  ROOT %reduce_sum.560 = f32[] add(%reduce_sum.42932, %reduce_sum.42933)
}

%region_2049.42944 (reduce_sum.42941: f32[], reduce_sum.42942: f32[]) -> f32[] {
  %reduce_sum.42941 = f32[] parameter(0)
  %reduce_sum.42942 = f32[] parameter(1)
  ROOT %reduce_sum.561 = f32[] add(%reduce_sum.42941, %reduce_sum.42942)
}

%region_2050.42953 (reduce_sum.42950: f32[], reduce_sum.42951: f32[]) -> f32[] {
  %reduce_sum.42950 = f32[] parameter(0)
  %reduce_sum.42951 = f32[] parameter(1)
  ROOT %reduce_sum.562 = f32[] add(%reduce_sum.42950, %reduce_sum.42951)
}

%region_2051.42962 (reduce_sum.42959: f32[], reduce_sum.42960: f32[]) -> f32[] {
  %reduce_sum.42959 = f32[] parameter(0)
  %reduce_sum.42960 = f32[] parameter(1)
  ROOT %reduce_sum.563 = f32[] add(%reduce_sum.42959, %reduce_sum.42960)
}

%region_2052.42971 (reduce_sum.42968: f32[], reduce_sum.42969: f32[]) -> f32[] {
  %reduce_sum.42968 = f32[] parameter(0)
  %reduce_sum.42969 = f32[] parameter(1)
  ROOT %reduce_sum.564 = f32[] add(%reduce_sum.42968, %reduce_sum.42969)
}

%region_2053.42980 (reduce_sum.42977: f32[], reduce_sum.42978: f32[]) -> f32[] {
  %reduce_sum.42977 = f32[] parameter(0)
  %reduce_sum.42978 = f32[] parameter(1)
  ROOT %reduce_sum.565 = f32[] add(%reduce_sum.42977, %reduce_sum.42978)
}

%region_2054.42989 (reduce_sum.42986: f32[], reduce_sum.42987: f32[]) -> f32[] {
  %reduce_sum.42986 = f32[] parameter(0)
  %reduce_sum.42987 = f32[] parameter(1)
  ROOT %reduce_sum.566 = f32[] add(%reduce_sum.42986, %reduce_sum.42987)
}

%region_2055.42998 (reduce_sum.42995: f32[], reduce_sum.42996: f32[]) -> f32[] {
  %reduce_sum.42995 = f32[] parameter(0)
  %reduce_sum.42996 = f32[] parameter(1)
  ROOT %reduce_sum.567 = f32[] add(%reduce_sum.42995, %reduce_sum.42996)
}

%region_2056.43007 (reduce_sum.43004: f32[], reduce_sum.43005: f32[]) -> f32[] {
  %reduce_sum.43004 = f32[] parameter(0)
  %reduce_sum.43005 = f32[] parameter(1)
  ROOT %reduce_sum.568 = f32[] add(%reduce_sum.43004, %reduce_sum.43005)
}

%region_2057.43016 (reduce_sum.43013: f32[], reduce_sum.43014: f32[]) -> f32[] {
  %reduce_sum.43013 = f32[] parameter(0)
  %reduce_sum.43014 = f32[] parameter(1)
  ROOT %reduce_sum.569 = f32[] add(%reduce_sum.43013, %reduce_sum.43014)
}

%region_2058.43025 (reduce_sum.43022: f32[], reduce_sum.43023: f32[]) -> f32[] {
  %reduce_sum.43022 = f32[] parameter(0)
  %reduce_sum.43023 = f32[] parameter(1)
  ROOT %reduce_sum.570 = f32[] add(%reduce_sum.43022, %reduce_sum.43023)
}

%region_2059.43034 (reduce_sum.43031: f32[], reduce_sum.43032: f32[]) -> f32[] {
  %reduce_sum.43031 = f32[] parameter(0)
  %reduce_sum.43032 = f32[] parameter(1)
  ROOT %reduce_sum.571 = f32[] add(%reduce_sum.43031, %reduce_sum.43032)
}

%region_2060.43043 (reduce_sum.43040: f32[], reduce_sum.43041: f32[]) -> f32[] {
  %reduce_sum.43040 = f32[] parameter(0)
  %reduce_sum.43041 = f32[] parameter(1)
  ROOT %reduce_sum.572 = f32[] add(%reduce_sum.43040, %reduce_sum.43041)
}

%region_2061.43052 (reduce_sum.43049: f32[], reduce_sum.43050: f32[]) -> f32[] {
  %reduce_sum.43049 = f32[] parameter(0)
  %reduce_sum.43050 = f32[] parameter(1)
  ROOT %reduce_sum.573 = f32[] add(%reduce_sum.43049, %reduce_sum.43050)
}

%region_2062.43061 (reduce_sum.43058: f32[], reduce_sum.43059: f32[]) -> f32[] {
  %reduce_sum.43058 = f32[] parameter(0)
  %reduce_sum.43059 = f32[] parameter(1)
  ROOT %reduce_sum.574 = f32[] add(%reduce_sum.43058, %reduce_sum.43059)
}

%region_2063.43070 (reduce_sum.43067: f32[], reduce_sum.43068: f32[]) -> f32[] {
  %reduce_sum.43067 = f32[] parameter(0)
  %reduce_sum.43068 = f32[] parameter(1)
  ROOT %reduce_sum.575 = f32[] add(%reduce_sum.43067, %reduce_sum.43068)
}

%region_2064.43079 (reduce_sum.43076: f32[], reduce_sum.43077: f32[]) -> f32[] {
  %reduce_sum.43076 = f32[] parameter(0)
  %reduce_sum.43077 = f32[] parameter(1)
  ROOT %reduce_sum.576 = f32[] add(%reduce_sum.43076, %reduce_sum.43077)
}

%region_2065.43088 (reduce_sum.43085: f32[], reduce_sum.43086: f32[]) -> f32[] {
  %reduce_sum.43085 = f32[] parameter(0)
  %reduce_sum.43086 = f32[] parameter(1)
  ROOT %reduce_sum.577 = f32[] add(%reduce_sum.43085, %reduce_sum.43086)
}

%region_2066.43097 (reduce_sum.43094: f32[], reduce_sum.43095: f32[]) -> f32[] {
  %reduce_sum.43094 = f32[] parameter(0)
  %reduce_sum.43095 = f32[] parameter(1)
  ROOT %reduce_sum.578 = f32[] add(%reduce_sum.43094, %reduce_sum.43095)
}

%region_2067.43106 (reduce_sum.43103: f32[], reduce_sum.43104: f32[]) -> f32[] {
  %reduce_sum.43103 = f32[] parameter(0)
  %reduce_sum.43104 = f32[] parameter(1)
  ROOT %reduce_sum.579 = f32[] add(%reduce_sum.43103, %reduce_sum.43104)
}

%region_2068.43115 (reduce_sum.43112: f32[], reduce_sum.43113: f32[]) -> f32[] {
  %reduce_sum.43112 = f32[] parameter(0)
  %reduce_sum.43113 = f32[] parameter(1)
  ROOT %reduce_sum.580 = f32[] add(%reduce_sum.43112, %reduce_sum.43113)
}

%region_2069.43124 (reduce_sum.43121: f32[], reduce_sum.43122: f32[]) -> f32[] {
  %reduce_sum.43121 = f32[] parameter(0)
  %reduce_sum.43122 = f32[] parameter(1)
  ROOT %reduce_sum.581 = f32[] add(%reduce_sum.43121, %reduce_sum.43122)
}

%region_2070.43133 (reduce_sum.43130: f32[], reduce_sum.43131: f32[]) -> f32[] {
  %reduce_sum.43130 = f32[] parameter(0)
  %reduce_sum.43131 = f32[] parameter(1)
  ROOT %reduce_sum.582 = f32[] add(%reduce_sum.43130, %reduce_sum.43131)
}

%region_2071.43142 (reduce_sum.43139: f32[], reduce_sum.43140: f32[]) -> f32[] {
  %reduce_sum.43139 = f32[] parameter(0)
  %reduce_sum.43140 = f32[] parameter(1)
  ROOT %reduce_sum.583 = f32[] add(%reduce_sum.43139, %reduce_sum.43140)
}

%region_2072.43151 (reduce_sum.43148: f32[], reduce_sum.43149: f32[]) -> f32[] {
  %reduce_sum.43148 = f32[] parameter(0)
  %reduce_sum.43149 = f32[] parameter(1)
  ROOT %reduce_sum.584 = f32[] add(%reduce_sum.43148, %reduce_sum.43149)
}

%region_2073.43160 (reduce_sum.43157: f32[], reduce_sum.43158: f32[]) -> f32[] {
  %reduce_sum.43157 = f32[] parameter(0)
  %reduce_sum.43158 = f32[] parameter(1)
  ROOT %reduce_sum.585 = f32[] add(%reduce_sum.43157, %reduce_sum.43158)
}

%region_2074.43169 (reduce_sum.43166: f32[], reduce_sum.43167: f32[]) -> f32[] {
  %reduce_sum.43166 = f32[] parameter(0)
  %reduce_sum.43167 = f32[] parameter(1)
  ROOT %reduce_sum.586 = f32[] add(%reduce_sum.43166, %reduce_sum.43167)
}

%region_2075.43178 (reduce_sum.43175: f32[], reduce_sum.43176: f32[]) -> f32[] {
  %reduce_sum.43175 = f32[] parameter(0)
  %reduce_sum.43176 = f32[] parameter(1)
  ROOT %reduce_sum.587 = f32[] add(%reduce_sum.43175, %reduce_sum.43176)
}

%region_2076.43187 (reduce_sum.43184: f32[], reduce_sum.43185: f32[]) -> f32[] {
  %reduce_sum.43184 = f32[] parameter(0)
  %reduce_sum.43185 = f32[] parameter(1)
  ROOT %reduce_sum.588 = f32[] add(%reduce_sum.43184, %reduce_sum.43185)
}

%region_2077.43196 (reduce_sum.43193: f32[], reduce_sum.43194: f32[]) -> f32[] {
  %reduce_sum.43193 = f32[] parameter(0)
  %reduce_sum.43194 = f32[] parameter(1)
  ROOT %reduce_sum.589 = f32[] add(%reduce_sum.43193, %reduce_sum.43194)
}

%region_2078.43205 (reduce_sum.43202: f32[], reduce_sum.43203: f32[]) -> f32[] {
  %reduce_sum.43202 = f32[] parameter(0)
  %reduce_sum.43203 = f32[] parameter(1)
  ROOT %reduce_sum.590 = f32[] add(%reduce_sum.43202, %reduce_sum.43203)
}

%region_2079.43214 (reduce_sum.43211: f32[], reduce_sum.43212: f32[]) -> f32[] {
  %reduce_sum.43211 = f32[] parameter(0)
  %reduce_sum.43212 = f32[] parameter(1)
  ROOT %reduce_sum.591 = f32[] add(%reduce_sum.43211, %reduce_sum.43212)
}

%region_2080.43223 (reduce_sum.43220: f32[], reduce_sum.43221: f32[]) -> f32[] {
  %reduce_sum.43220 = f32[] parameter(0)
  %reduce_sum.43221 = f32[] parameter(1)
  ROOT %reduce_sum.592 = f32[] add(%reduce_sum.43220, %reduce_sum.43221)
}

%region_2081.43232 (reduce_sum.43229: f32[], reduce_sum.43230: f32[]) -> f32[] {
  %reduce_sum.43229 = f32[] parameter(0)
  %reduce_sum.43230 = f32[] parameter(1)
  ROOT %reduce_sum.593 = f32[] add(%reduce_sum.43229, %reduce_sum.43230)
}

%region_2082.43241 (reduce_sum.43238: f32[], reduce_sum.43239: f32[]) -> f32[] {
  %reduce_sum.43238 = f32[] parameter(0)
  %reduce_sum.43239 = f32[] parameter(1)
  ROOT %reduce_sum.594 = f32[] add(%reduce_sum.43238, %reduce_sum.43239)
}

%region_2083.43250 (reduce_sum.43247: f32[], reduce_sum.43248: f32[]) -> f32[] {
  %reduce_sum.43247 = f32[] parameter(0)
  %reduce_sum.43248 = f32[] parameter(1)
  ROOT %reduce_sum.595 = f32[] add(%reduce_sum.43247, %reduce_sum.43248)
}

%region_2084.43259 (reduce_sum.43256: f32[], reduce_sum.43257: f32[]) -> f32[] {
  %reduce_sum.43256 = f32[] parameter(0)
  %reduce_sum.43257 = f32[] parameter(1)
  ROOT %reduce_sum.596 = f32[] add(%reduce_sum.43256, %reduce_sum.43257)
}

%region_2085.43268 (reduce_sum.43265: f32[], reduce_sum.43266: f32[]) -> f32[] {
  %reduce_sum.43265 = f32[] parameter(0)
  %reduce_sum.43266 = f32[] parameter(1)
  ROOT %reduce_sum.597 = f32[] add(%reduce_sum.43265, %reduce_sum.43266)
}

%region_2086.43277 (reduce_sum.43274: f32[], reduce_sum.43275: f32[]) -> f32[] {
  %reduce_sum.43274 = f32[] parameter(0)
  %reduce_sum.43275 = f32[] parameter(1)
  ROOT %reduce_sum.598 = f32[] add(%reduce_sum.43274, %reduce_sum.43275)
}

%region_2087.43286 (reduce_sum.43283: f32[], reduce_sum.43284: f32[]) -> f32[] {
  %reduce_sum.43283 = f32[] parameter(0)
  %reduce_sum.43284 = f32[] parameter(1)
  ROOT %reduce_sum.599 = f32[] add(%reduce_sum.43283, %reduce_sum.43284)
}

%region_2088.43295 (reduce_sum.43292: f32[], reduce_sum.43293: f32[]) -> f32[] {
  %reduce_sum.43292 = f32[] parameter(0)
  %reduce_sum.43293 = f32[] parameter(1)
  ROOT %reduce_sum.600 = f32[] add(%reduce_sum.43292, %reduce_sum.43293)
}

%region_2089.43304 (reduce_sum.43301: f32[], reduce_sum.43302: f32[]) -> f32[] {
  %reduce_sum.43301 = f32[] parameter(0)
  %reduce_sum.43302 = f32[] parameter(1)
  ROOT %reduce_sum.601 = f32[] add(%reduce_sum.43301, %reduce_sum.43302)
}

%region_2090.43313 (reduce_sum.43310: f32[], reduce_sum.43311: f32[]) -> f32[] {
  %reduce_sum.43310 = f32[] parameter(0)
  %reduce_sum.43311 = f32[] parameter(1)
  ROOT %reduce_sum.602 = f32[] add(%reduce_sum.43310, %reduce_sum.43311)
}

%region_2091.43322 (reduce_sum.43319: f32[], reduce_sum.43320: f32[]) -> f32[] {
  %reduce_sum.43319 = f32[] parameter(0)
  %reduce_sum.43320 = f32[] parameter(1)
  ROOT %reduce_sum.603 = f32[] add(%reduce_sum.43319, %reduce_sum.43320)
}

%region_2092.43331 (reduce_sum.43328: f32[], reduce_sum.43329: f32[]) -> f32[] {
  %reduce_sum.43328 = f32[] parameter(0)
  %reduce_sum.43329 = f32[] parameter(1)
  ROOT %reduce_sum.604 = f32[] add(%reduce_sum.43328, %reduce_sum.43329)
}

%region_2093.43340 (reduce_sum.43337: f32[], reduce_sum.43338: f32[]) -> f32[] {
  %reduce_sum.43337 = f32[] parameter(0)
  %reduce_sum.43338 = f32[] parameter(1)
  ROOT %reduce_sum.605 = f32[] add(%reduce_sum.43337, %reduce_sum.43338)
}

%region_2094.43349 (reduce_sum.43346: f32[], reduce_sum.43347: f32[]) -> f32[] {
  %reduce_sum.43346 = f32[] parameter(0)
  %reduce_sum.43347 = f32[] parameter(1)
  ROOT %reduce_sum.606 = f32[] add(%reduce_sum.43346, %reduce_sum.43347)
}

%region_2095.43358 (reduce_sum.43355: f32[], reduce_sum.43356: f32[]) -> f32[] {
  %reduce_sum.43355 = f32[] parameter(0)
  %reduce_sum.43356 = f32[] parameter(1)
  ROOT %reduce_sum.607 = f32[] add(%reduce_sum.43355, %reduce_sum.43356)
}

%region_2096.43367 (reduce_sum.43364: f32[], reduce_sum.43365: f32[]) -> f32[] {
  %reduce_sum.43364 = f32[] parameter(0)
  %reduce_sum.43365 = f32[] parameter(1)
  ROOT %reduce_sum.608 = f32[] add(%reduce_sum.43364, %reduce_sum.43365)
}

%region_2097.43376 (reduce_sum.43373: f32[], reduce_sum.43374: f32[]) -> f32[] {
  %reduce_sum.43373 = f32[] parameter(0)
  %reduce_sum.43374 = f32[] parameter(1)
  ROOT %reduce_sum.609 = f32[] add(%reduce_sum.43373, %reduce_sum.43374)
}

%region_2098.43385 (reduce_sum.43382: f32[], reduce_sum.43383: f32[]) -> f32[] {
  %reduce_sum.43382 = f32[] parameter(0)
  %reduce_sum.43383 = f32[] parameter(1)
  ROOT %reduce_sum.610 = f32[] add(%reduce_sum.43382, %reduce_sum.43383)
}

%region_2099.43394 (reduce_sum.43391: f32[], reduce_sum.43392: f32[]) -> f32[] {
  %reduce_sum.43391 = f32[] parameter(0)
  %reduce_sum.43392 = f32[] parameter(1)
  ROOT %reduce_sum.611 = f32[] add(%reduce_sum.43391, %reduce_sum.43392)
}

%region_2100.43403 (reduce_sum.43400: f32[], reduce_sum.43401: f32[]) -> f32[] {
  %reduce_sum.43400 = f32[] parameter(0)
  %reduce_sum.43401 = f32[] parameter(1)
  ROOT %reduce_sum.612 = f32[] add(%reduce_sum.43400, %reduce_sum.43401)
}

%region_2101.43412 (reduce_sum.43409: f32[], reduce_sum.43410: f32[]) -> f32[] {
  %reduce_sum.43409 = f32[] parameter(0)
  %reduce_sum.43410 = f32[] parameter(1)
  ROOT %reduce_sum.613 = f32[] add(%reduce_sum.43409, %reduce_sum.43410)
}

%region_2102.43421 (reduce_sum.43418: f32[], reduce_sum.43419: f32[]) -> f32[] {
  %reduce_sum.43418 = f32[] parameter(0)
  %reduce_sum.43419 = f32[] parameter(1)
  ROOT %reduce_sum.614 = f32[] add(%reduce_sum.43418, %reduce_sum.43419)
}

%region_2103.43430 (reduce_sum.43427: f32[], reduce_sum.43428: f32[]) -> f32[] {
  %reduce_sum.43427 = f32[] parameter(0)
  %reduce_sum.43428 = f32[] parameter(1)
  ROOT %reduce_sum.615 = f32[] add(%reduce_sum.43427, %reduce_sum.43428)
}

%region_2104.43439 (reduce_sum.43436: f32[], reduce_sum.43437: f32[]) -> f32[] {
  %reduce_sum.43436 = f32[] parameter(0)
  %reduce_sum.43437 = f32[] parameter(1)
  ROOT %reduce_sum.616 = f32[] add(%reduce_sum.43436, %reduce_sum.43437)
}

%region_2105.43448 (reduce_sum.43445: f32[], reduce_sum.43446: f32[]) -> f32[] {
  %reduce_sum.43445 = f32[] parameter(0)
  %reduce_sum.43446 = f32[] parameter(1)
  ROOT %reduce_sum.617 = f32[] add(%reduce_sum.43445, %reduce_sum.43446)
}

%region_2106.43457 (reduce_sum.43454: f32[], reduce_sum.43455: f32[]) -> f32[] {
  %reduce_sum.43454 = f32[] parameter(0)
  %reduce_sum.43455 = f32[] parameter(1)
  ROOT %reduce_sum.618 = f32[] add(%reduce_sum.43454, %reduce_sum.43455)
}

%region_2107.43466 (reduce_sum.43463: f32[], reduce_sum.43464: f32[]) -> f32[] {
  %reduce_sum.43463 = f32[] parameter(0)
  %reduce_sum.43464 = f32[] parameter(1)
  ROOT %reduce_sum.619 = f32[] add(%reduce_sum.43463, %reduce_sum.43464)
}

%region_2108.43475 (reduce_sum.43472: f32[], reduce_sum.43473: f32[]) -> f32[] {
  %reduce_sum.43472 = f32[] parameter(0)
  %reduce_sum.43473 = f32[] parameter(1)
  ROOT %reduce_sum.620 = f32[] add(%reduce_sum.43472, %reduce_sum.43473)
}

%region_2109.43484 (reduce_sum.43481: f32[], reduce_sum.43482: f32[]) -> f32[] {
  %reduce_sum.43481 = f32[] parameter(0)
  %reduce_sum.43482 = f32[] parameter(1)
  ROOT %reduce_sum.621 = f32[] add(%reduce_sum.43481, %reduce_sum.43482)
}

%region_2110.43493 (reduce_sum.43490: f32[], reduce_sum.43491: f32[]) -> f32[] {
  %reduce_sum.43490 = f32[] parameter(0)
  %reduce_sum.43491 = f32[] parameter(1)
  ROOT %reduce_sum.622 = f32[] add(%reduce_sum.43490, %reduce_sum.43491)
}

%region_2111.43502 (reduce_sum.43499: f32[], reduce_sum.43500: f32[]) -> f32[] {
  %reduce_sum.43499 = f32[] parameter(0)
  %reduce_sum.43500 = f32[] parameter(1)
  ROOT %reduce_sum.623 = f32[] add(%reduce_sum.43499, %reduce_sum.43500)
}

%region_2112.43511 (reduce_sum.43508: f32[], reduce_sum.43509: f32[]) -> f32[] {
  %reduce_sum.43508 = f32[] parameter(0)
  %reduce_sum.43509 = f32[] parameter(1)
  ROOT %reduce_sum.624 = f32[] add(%reduce_sum.43508, %reduce_sum.43509)
}

%region_2113.43520 (reduce_sum.43517: f32[], reduce_sum.43518: f32[]) -> f32[] {
  %reduce_sum.43517 = f32[] parameter(0)
  %reduce_sum.43518 = f32[] parameter(1)
  ROOT %reduce_sum.625 = f32[] add(%reduce_sum.43517, %reduce_sum.43518)
}

%region_2114.43529 (reduce_sum.43526: f32[], reduce_sum.43527: f32[]) -> f32[] {
  %reduce_sum.43526 = f32[] parameter(0)
  %reduce_sum.43527 = f32[] parameter(1)
  ROOT %reduce_sum.626 = f32[] add(%reduce_sum.43526, %reduce_sum.43527)
}

%region_2115.43538 (reduce_sum.43535: f32[], reduce_sum.43536: f32[]) -> f32[] {
  %reduce_sum.43535 = f32[] parameter(0)
  %reduce_sum.43536 = f32[] parameter(1)
  ROOT %reduce_sum.627 = f32[] add(%reduce_sum.43535, %reduce_sum.43536)
}

%region_2116.43547 (reduce_sum.43544: f32[], reduce_sum.43545: f32[]) -> f32[] {
  %reduce_sum.43544 = f32[] parameter(0)
  %reduce_sum.43545 = f32[] parameter(1)
  ROOT %reduce_sum.628 = f32[] add(%reduce_sum.43544, %reduce_sum.43545)
}

%region_2117.43556 (reduce_sum.43553: f32[], reduce_sum.43554: f32[]) -> f32[] {
  %reduce_sum.43553 = f32[] parameter(0)
  %reduce_sum.43554 = f32[] parameter(1)
  ROOT %reduce_sum.629 = f32[] add(%reduce_sum.43553, %reduce_sum.43554)
}

%region_2118.43565 (reduce_sum.43562: f32[], reduce_sum.43563: f32[]) -> f32[] {
  %reduce_sum.43562 = f32[] parameter(0)
  %reduce_sum.43563 = f32[] parameter(1)
  ROOT %reduce_sum.630 = f32[] add(%reduce_sum.43562, %reduce_sum.43563)
}

%region_2119.43574 (reduce_sum.43571: f32[], reduce_sum.43572: f32[]) -> f32[] {
  %reduce_sum.43571 = f32[] parameter(0)
  %reduce_sum.43572 = f32[] parameter(1)
  ROOT %reduce_sum.631 = f32[] add(%reduce_sum.43571, %reduce_sum.43572)
}

%region_2120.43583 (reduce_sum.43580: f32[], reduce_sum.43581: f32[]) -> f32[] {
  %reduce_sum.43580 = f32[] parameter(0)
  %reduce_sum.43581 = f32[] parameter(1)
  ROOT %reduce_sum.632 = f32[] add(%reduce_sum.43580, %reduce_sum.43581)
}

%region_2121.43592 (reduce_sum.43589: f32[], reduce_sum.43590: f32[]) -> f32[] {
  %reduce_sum.43589 = f32[] parameter(0)
  %reduce_sum.43590 = f32[] parameter(1)
  ROOT %reduce_sum.633 = f32[] add(%reduce_sum.43589, %reduce_sum.43590)
}

%region_2122.43601 (reduce_sum.43598: f32[], reduce_sum.43599: f32[]) -> f32[] {
  %reduce_sum.43598 = f32[] parameter(0)
  %reduce_sum.43599 = f32[] parameter(1)
  ROOT %reduce_sum.634 = f32[] add(%reduce_sum.43598, %reduce_sum.43599)
}

%region_2123.43610 (reduce_sum.43607: f32[], reduce_sum.43608: f32[]) -> f32[] {
  %reduce_sum.43607 = f32[] parameter(0)
  %reduce_sum.43608 = f32[] parameter(1)
  ROOT %reduce_sum.635 = f32[] add(%reduce_sum.43607, %reduce_sum.43608)
}

%region_2124.43619 (reduce_sum.43616: f32[], reduce_sum.43617: f32[]) -> f32[] {
  %reduce_sum.43616 = f32[] parameter(0)
  %reduce_sum.43617 = f32[] parameter(1)
  ROOT %reduce_sum.636 = f32[] add(%reduce_sum.43616, %reduce_sum.43617)
}

%region_2125.43628 (reduce_sum.43625: f32[], reduce_sum.43626: f32[]) -> f32[] {
  %reduce_sum.43625 = f32[] parameter(0)
  %reduce_sum.43626 = f32[] parameter(1)
  ROOT %reduce_sum.637 = f32[] add(%reduce_sum.43625, %reduce_sum.43626)
}

%region_2126.43637 (reduce_sum.43634: f32[], reduce_sum.43635: f32[]) -> f32[] {
  %reduce_sum.43634 = f32[] parameter(0)
  %reduce_sum.43635 = f32[] parameter(1)
  ROOT %reduce_sum.638 = f32[] add(%reduce_sum.43634, %reduce_sum.43635)
}

%region_2127.43646 (reduce_sum.43643: f32[], reduce_sum.43644: f32[]) -> f32[] {
  %reduce_sum.43643 = f32[] parameter(0)
  %reduce_sum.43644 = f32[] parameter(1)
  ROOT %reduce_sum.639 = f32[] add(%reduce_sum.43643, %reduce_sum.43644)
}

%region_2128.43655 (reduce_sum.43652: f32[], reduce_sum.43653: f32[]) -> f32[] {
  %reduce_sum.43652 = f32[] parameter(0)
  %reduce_sum.43653 = f32[] parameter(1)
  ROOT %reduce_sum.640 = f32[] add(%reduce_sum.43652, %reduce_sum.43653)
}

%region_2129.43664 (reduce_sum.43661: f32[], reduce_sum.43662: f32[]) -> f32[] {
  %reduce_sum.43661 = f32[] parameter(0)
  %reduce_sum.43662 = f32[] parameter(1)
  ROOT %reduce_sum.641 = f32[] add(%reduce_sum.43661, %reduce_sum.43662)
}

%region_2130.43673 (reduce_sum.43670: f32[], reduce_sum.43671: f32[]) -> f32[] {
  %reduce_sum.43670 = f32[] parameter(0)
  %reduce_sum.43671 = f32[] parameter(1)
  ROOT %reduce_sum.642 = f32[] add(%reduce_sum.43670, %reduce_sum.43671)
}

%region_2131.43682 (reduce_sum.43679: f32[], reduce_sum.43680: f32[]) -> f32[] {
  %reduce_sum.43679 = f32[] parameter(0)
  %reduce_sum.43680 = f32[] parameter(1)
  ROOT %reduce_sum.643 = f32[] add(%reduce_sum.43679, %reduce_sum.43680)
}

%region_2132.43691 (reduce_sum.43688: f32[], reduce_sum.43689: f32[]) -> f32[] {
  %reduce_sum.43688 = f32[] parameter(0)
  %reduce_sum.43689 = f32[] parameter(1)
  ROOT %reduce_sum.644 = f32[] add(%reduce_sum.43688, %reduce_sum.43689)
}

%region_2133.43700 (reduce_sum.43697: f32[], reduce_sum.43698: f32[]) -> f32[] {
  %reduce_sum.43697 = f32[] parameter(0)
  %reduce_sum.43698 = f32[] parameter(1)
  ROOT %reduce_sum.645 = f32[] add(%reduce_sum.43697, %reduce_sum.43698)
}

%region_2134.43709 (reduce_sum.43706: f32[], reduce_sum.43707: f32[]) -> f32[] {
  %reduce_sum.43706 = f32[] parameter(0)
  %reduce_sum.43707 = f32[] parameter(1)
  ROOT %reduce_sum.646 = f32[] add(%reduce_sum.43706, %reduce_sum.43707)
}

%region_2135.43718 (reduce_sum.43715: f32[], reduce_sum.43716: f32[]) -> f32[] {
  %reduce_sum.43715 = f32[] parameter(0)
  %reduce_sum.43716 = f32[] parameter(1)
  ROOT %reduce_sum.647 = f32[] add(%reduce_sum.43715, %reduce_sum.43716)
}

%region_2136.43727 (reduce_sum.43724: f32[], reduce_sum.43725: f32[]) -> f32[] {
  %reduce_sum.43724 = f32[] parameter(0)
  %reduce_sum.43725 = f32[] parameter(1)
  ROOT %reduce_sum.648 = f32[] add(%reduce_sum.43724, %reduce_sum.43725)
}

%region_2137.43736 (reduce_sum.43733: f32[], reduce_sum.43734: f32[]) -> f32[] {
  %reduce_sum.43733 = f32[] parameter(0)
  %reduce_sum.43734 = f32[] parameter(1)
  ROOT %reduce_sum.649 = f32[] add(%reduce_sum.43733, %reduce_sum.43734)
}

%region_2138.43745 (reduce_sum.43742: f32[], reduce_sum.43743: f32[]) -> f32[] {
  %reduce_sum.43742 = f32[] parameter(0)
  %reduce_sum.43743 = f32[] parameter(1)
  ROOT %reduce_sum.650 = f32[] add(%reduce_sum.43742, %reduce_sum.43743)
}

%region_2139.43754 (reduce_sum.43751: f32[], reduce_sum.43752: f32[]) -> f32[] {
  %reduce_sum.43751 = f32[] parameter(0)
  %reduce_sum.43752 = f32[] parameter(1)
  ROOT %reduce_sum.651 = f32[] add(%reduce_sum.43751, %reduce_sum.43752)
}

%region_2140.43763 (reduce_sum.43760: f32[], reduce_sum.43761: f32[]) -> f32[] {
  %reduce_sum.43760 = f32[] parameter(0)
  %reduce_sum.43761 = f32[] parameter(1)
  ROOT %reduce_sum.652 = f32[] add(%reduce_sum.43760, %reduce_sum.43761)
}

%region_2141.43772 (reduce_sum.43769: f32[], reduce_sum.43770: f32[]) -> f32[] {
  %reduce_sum.43769 = f32[] parameter(0)
  %reduce_sum.43770 = f32[] parameter(1)
  ROOT %reduce_sum.653 = f32[] add(%reduce_sum.43769, %reduce_sum.43770)
}

%region_2142.43781 (reduce_sum.43778: f32[], reduce_sum.43779: f32[]) -> f32[] {
  %reduce_sum.43778 = f32[] parameter(0)
  %reduce_sum.43779 = f32[] parameter(1)
  ROOT %reduce_sum.654 = f32[] add(%reduce_sum.43778, %reduce_sum.43779)
}

%region_2143.43790 (reduce_sum.43787: f32[], reduce_sum.43788: f32[]) -> f32[] {
  %reduce_sum.43787 = f32[] parameter(0)
  %reduce_sum.43788 = f32[] parameter(1)
  ROOT %reduce_sum.655 = f32[] add(%reduce_sum.43787, %reduce_sum.43788)
}

%region_2144.43799 (reduce_sum.43796: f32[], reduce_sum.43797: f32[]) -> f32[] {
  %reduce_sum.43796 = f32[] parameter(0)
  %reduce_sum.43797 = f32[] parameter(1)
  ROOT %reduce_sum.656 = f32[] add(%reduce_sum.43796, %reduce_sum.43797)
}

%region_2145.43808 (reduce_sum.43805: f32[], reduce_sum.43806: f32[]) -> f32[] {
  %reduce_sum.43805 = f32[] parameter(0)
  %reduce_sum.43806 = f32[] parameter(1)
  ROOT %reduce_sum.657 = f32[] add(%reduce_sum.43805, %reduce_sum.43806)
}

%region_2146.43817 (reduce_sum.43814: f32[], reduce_sum.43815: f32[]) -> f32[] {
  %reduce_sum.43814 = f32[] parameter(0)
  %reduce_sum.43815 = f32[] parameter(1)
  ROOT %reduce_sum.658 = f32[] add(%reduce_sum.43814, %reduce_sum.43815)
}

%region_2147.43826 (reduce_sum.43823: f32[], reduce_sum.43824: f32[]) -> f32[] {
  %reduce_sum.43823 = f32[] parameter(0)
  %reduce_sum.43824 = f32[] parameter(1)
  ROOT %reduce_sum.659 = f32[] add(%reduce_sum.43823, %reduce_sum.43824)
}

%region_2148.43835 (reduce_sum.43832: f32[], reduce_sum.43833: f32[]) -> f32[] {
  %reduce_sum.43832 = f32[] parameter(0)
  %reduce_sum.43833 = f32[] parameter(1)
  ROOT %reduce_sum.660 = f32[] add(%reduce_sum.43832, %reduce_sum.43833)
}

%region_2149.43844 (reduce_sum.43841: f32[], reduce_sum.43842: f32[]) -> f32[] {
  %reduce_sum.43841 = f32[] parameter(0)
  %reduce_sum.43842 = f32[] parameter(1)
  ROOT %reduce_sum.661 = f32[] add(%reduce_sum.43841, %reduce_sum.43842)
}

%region_2150.43853 (reduce_sum.43850: f32[], reduce_sum.43851: f32[]) -> f32[] {
  %reduce_sum.43850 = f32[] parameter(0)
  %reduce_sum.43851 = f32[] parameter(1)
  ROOT %reduce_sum.662 = f32[] add(%reduce_sum.43850, %reduce_sum.43851)
}

%region_2151.43862 (reduce_sum.43859: f32[], reduce_sum.43860: f32[]) -> f32[] {
  %reduce_sum.43859 = f32[] parameter(0)
  %reduce_sum.43860 = f32[] parameter(1)
  ROOT %reduce_sum.663 = f32[] add(%reduce_sum.43859, %reduce_sum.43860)
}

%region_2152.43871 (reduce_sum.43868: f32[], reduce_sum.43869: f32[]) -> f32[] {
  %reduce_sum.43868 = f32[] parameter(0)
  %reduce_sum.43869 = f32[] parameter(1)
  ROOT %reduce_sum.664 = f32[] add(%reduce_sum.43868, %reduce_sum.43869)
}

%region_2153.43880 (reduce_sum.43877: f32[], reduce_sum.43878: f32[]) -> f32[] {
  %reduce_sum.43877 = f32[] parameter(0)
  %reduce_sum.43878 = f32[] parameter(1)
  ROOT %reduce_sum.665 = f32[] add(%reduce_sum.43877, %reduce_sum.43878)
}

%region_2154.43889 (reduce_sum.43886: f32[], reduce_sum.43887: f32[]) -> f32[] {
  %reduce_sum.43886 = f32[] parameter(0)
  %reduce_sum.43887 = f32[] parameter(1)
  ROOT %reduce_sum.43888 = f32[] add(%reduce_sum.43886, %reduce_sum.43887)
}

%region_2155.43898 (reduce_sum.43895: f32[], reduce_sum.43896: f32[]) -> f32[] {
  %reduce_sum.43895 = f32[] parameter(0)
  %reduce_sum.43896 = f32[] parameter(1)
  ROOT %reduce_sum.666 = f32[] add(%reduce_sum.43895, %reduce_sum.43896)
}

%region_2156.43907 (reduce_sum.43904: f32[], reduce_sum.43905: f32[]) -> f32[] {
  %reduce_sum.43904 = f32[] parameter(0)
  %reduce_sum.43905 = f32[] parameter(1)
  ROOT %reduce_sum.667 = f32[] add(%reduce_sum.43904, %reduce_sum.43905)
}

%region_2157.43916 (reduce_sum.43913: f32[], reduce_sum.43914: f32[]) -> f32[] {
  %reduce_sum.43913 = f32[] parameter(0)
  %reduce_sum.43914 = f32[] parameter(1)
  ROOT %reduce_sum.668 = f32[] add(%reduce_sum.43913, %reduce_sum.43914)
}

%region_2158.43925 (reduce_sum.43922: f32[], reduce_sum.43923: f32[]) -> f32[] {
  %reduce_sum.43922 = f32[] parameter(0)
  %reduce_sum.43923 = f32[] parameter(1)
  ROOT %reduce_sum.669 = f32[] add(%reduce_sum.43922, %reduce_sum.43923)
}

%region_2159.43934 (reduce_sum.43931: f32[], reduce_sum.43932: f32[]) -> f32[] {
  %reduce_sum.43931 = f32[] parameter(0)
  %reduce_sum.43932 = f32[] parameter(1)
  ROOT %reduce_sum.670 = f32[] add(%reduce_sum.43931, %reduce_sum.43932)
}

%region_2160.43943 (reduce_sum.43940: f32[], reduce_sum.43941: f32[]) -> f32[] {
  %reduce_sum.43940 = f32[] parameter(0)
  %reduce_sum.43941 = f32[] parameter(1)
  ROOT %reduce_sum.671 = f32[] add(%reduce_sum.43940, %reduce_sum.43941)
}

%region_2161.43952 (reduce_sum.43949: f32[], reduce_sum.43950: f32[]) -> f32[] {
  %reduce_sum.43949 = f32[] parameter(0)
  %reduce_sum.43950 = f32[] parameter(1)
  ROOT %reduce_sum.672 = f32[] add(%reduce_sum.43949, %reduce_sum.43950)
}

%region_2162.43961 (reduce_sum.43958: f32[], reduce_sum.43959: f32[]) -> f32[] {
  %reduce_sum.43958 = f32[] parameter(0)
  %reduce_sum.43959 = f32[] parameter(1)
  ROOT %reduce_sum.673 = f32[] add(%reduce_sum.43958, %reduce_sum.43959)
}

%region_2163.43970 (reduce_sum.43967: f32[], reduce_sum.43968: f32[]) -> f32[] {
  %reduce_sum.43967 = f32[] parameter(0)
  %reduce_sum.43968 = f32[] parameter(1)
  ROOT %reduce_sum.674 = f32[] add(%reduce_sum.43967, %reduce_sum.43968)
}

%region_2164.43979 (reduce_sum.43976: f32[], reduce_sum.43977: f32[]) -> f32[] {
  %reduce_sum.43976 = f32[] parameter(0)
  %reduce_sum.43977 = f32[] parameter(1)
  ROOT %reduce_sum.675 = f32[] add(%reduce_sum.43976, %reduce_sum.43977)
}

%region_2165.43988 (reduce_sum.43985: f32[], reduce_sum.43986: f32[]) -> f32[] {
  %reduce_sum.43985 = f32[] parameter(0)
  %reduce_sum.43986 = f32[] parameter(1)
  ROOT %reduce_sum.676 = f32[] add(%reduce_sum.43985, %reduce_sum.43986)
}

%region_2166.43997 (reduce_sum.43994: f32[], reduce_sum.43995: f32[]) -> f32[] {
  %reduce_sum.43994 = f32[] parameter(0)
  %reduce_sum.43995 = f32[] parameter(1)
  ROOT %reduce_sum.677 = f32[] add(%reduce_sum.43994, %reduce_sum.43995)
}

%region_2167.44006 (reduce_sum.44003: f32[], reduce_sum.44004: f32[]) -> f32[] {
  %reduce_sum.44003 = f32[] parameter(0)
  %reduce_sum.44004 = f32[] parameter(1)
  ROOT %reduce_sum.678 = f32[] add(%reduce_sum.44003, %reduce_sum.44004)
}

%region_2168.44015 (reduce_sum.44012: f32[], reduce_sum.44013: f32[]) -> f32[] {
  %reduce_sum.44012 = f32[] parameter(0)
  %reduce_sum.44013 = f32[] parameter(1)
  ROOT %reduce_sum.679 = f32[] add(%reduce_sum.44012, %reduce_sum.44013)
}

%region_2169.44024 (reduce_sum.44021: f32[], reduce_sum.44022: f32[]) -> f32[] {
  %reduce_sum.44021 = f32[] parameter(0)
  %reduce_sum.44022 = f32[] parameter(1)
  ROOT %reduce_sum.680 = f32[] add(%reduce_sum.44021, %reduce_sum.44022)
}

%region_2170.44033 (reduce_sum.44030: f32[], reduce_sum.44031: f32[]) -> f32[] {
  %reduce_sum.44030 = f32[] parameter(0)
  %reduce_sum.44031 = f32[] parameter(1)
  ROOT %reduce_sum.681 = f32[] add(%reduce_sum.44030, %reduce_sum.44031)
}

%region_2171.44042 (reduce_sum.44039: f32[], reduce_sum.44040: f32[]) -> f32[] {
  %reduce_sum.44039 = f32[] parameter(0)
  %reduce_sum.44040 = f32[] parameter(1)
  ROOT %reduce_sum.682 = f32[] add(%reduce_sum.44039, %reduce_sum.44040)
}

%region_2172.44051 (reduce_sum.44048: f32[], reduce_sum.44049: f32[]) -> f32[] {
  %reduce_sum.44048 = f32[] parameter(0)
  %reduce_sum.44049 = f32[] parameter(1)
  ROOT %reduce_sum.683 = f32[] add(%reduce_sum.44048, %reduce_sum.44049)
}

%region_2173.44060 (reduce_sum.44057: f32[], reduce_sum.44058: f32[]) -> f32[] {
  %reduce_sum.44057 = f32[] parameter(0)
  %reduce_sum.44058 = f32[] parameter(1)
  ROOT %reduce_sum.684 = f32[] add(%reduce_sum.44057, %reduce_sum.44058)
}

%region_2174.44069 (reduce_sum.44066: f32[], reduce_sum.44067: f32[]) -> f32[] {
  %reduce_sum.44066 = f32[] parameter(0)
  %reduce_sum.44067 = f32[] parameter(1)
  ROOT %reduce_sum.685 = f32[] add(%reduce_sum.44066, %reduce_sum.44067)
}

%region_2175.44078 (reduce_sum.44075: f32[], reduce_sum.44076: f32[]) -> f32[] {
  %reduce_sum.44075 = f32[] parameter(0)
  %reduce_sum.44076 = f32[] parameter(1)
  ROOT %reduce_sum.686 = f32[] add(%reduce_sum.44075, %reduce_sum.44076)
}

%region_2176.44087 (reduce_sum.44084: f32[], reduce_sum.44085: f32[]) -> f32[] {
  %reduce_sum.44084 = f32[] parameter(0)
  %reduce_sum.44085 = f32[] parameter(1)
  ROOT %reduce_sum.687 = f32[] add(%reduce_sum.44084, %reduce_sum.44085)
}

%region_2177.44096 (reduce_sum.44093: f32[], reduce_sum.44094: f32[]) -> f32[] {
  %reduce_sum.44093 = f32[] parameter(0)
  %reduce_sum.44094 = f32[] parameter(1)
  ROOT %reduce_sum.688 = f32[] add(%reduce_sum.44093, %reduce_sum.44094)
}

%region_2178.44105 (reduce_sum.44102: f32[], reduce_sum.44103: f32[]) -> f32[] {
  %reduce_sum.44102 = f32[] parameter(0)
  %reduce_sum.44103 = f32[] parameter(1)
  ROOT %reduce_sum.689 = f32[] add(%reduce_sum.44102, %reduce_sum.44103)
}

%region_2179.44114 (reduce_sum.44111: f32[], reduce_sum.44112: f32[]) -> f32[] {
  %reduce_sum.44111 = f32[] parameter(0)
  %reduce_sum.44112 = f32[] parameter(1)
  ROOT %reduce_sum.690 = f32[] add(%reduce_sum.44111, %reduce_sum.44112)
}

%region_2180.44123 (reduce_sum.44120: f32[], reduce_sum.44121: f32[]) -> f32[] {
  %reduce_sum.44120 = f32[] parameter(0)
  %reduce_sum.44121 = f32[] parameter(1)
  ROOT %reduce_sum.691 = f32[] add(%reduce_sum.44120, %reduce_sum.44121)
}

%region_2181.44132 (reduce_sum.44129: f32[], reduce_sum.44130: f32[]) -> f32[] {
  %reduce_sum.44129 = f32[] parameter(0)
  %reduce_sum.44130 = f32[] parameter(1)
  ROOT %reduce_sum.692 = f32[] add(%reduce_sum.44129, %reduce_sum.44130)
}

%region_2182.44141 (reduce_sum.44138: f32[], reduce_sum.44139: f32[]) -> f32[] {
  %reduce_sum.44138 = f32[] parameter(0)
  %reduce_sum.44139 = f32[] parameter(1)
  ROOT %reduce_sum.693 = f32[] add(%reduce_sum.44138, %reduce_sum.44139)
}

%region_2183.44150 (reduce_sum.44147: f32[], reduce_sum.44148: f32[]) -> f32[] {
  %reduce_sum.44147 = f32[] parameter(0)
  %reduce_sum.44148 = f32[] parameter(1)
  ROOT %reduce_sum.694 = f32[] add(%reduce_sum.44147, %reduce_sum.44148)
}

%region_2184.44159 (reduce_sum.44156: f32[], reduce_sum.44157: f32[]) -> f32[] {
  %reduce_sum.44156 = f32[] parameter(0)
  %reduce_sum.44157 = f32[] parameter(1)
  ROOT %reduce_sum.695 = f32[] add(%reduce_sum.44156, %reduce_sum.44157)
}

%region_2185.44168 (reduce_sum.44165: f32[], reduce_sum.44166: f32[]) -> f32[] {
  %reduce_sum.44165 = f32[] parameter(0)
  %reduce_sum.44166 = f32[] parameter(1)
  ROOT %reduce_sum.696 = f32[] add(%reduce_sum.44165, %reduce_sum.44166)
}

%region_2186.44177 (reduce_sum.44174: f32[], reduce_sum.44175: f32[]) -> f32[] {
  %reduce_sum.44174 = f32[] parameter(0)
  %reduce_sum.44175 = f32[] parameter(1)
  ROOT %reduce_sum.697 = f32[] add(%reduce_sum.44174, %reduce_sum.44175)
}

%region_2187.44186 (reduce_sum.44183: f32[], reduce_sum.44184: f32[]) -> f32[] {
  %reduce_sum.44183 = f32[] parameter(0)
  %reduce_sum.44184 = f32[] parameter(1)
  ROOT %reduce_sum.698 = f32[] add(%reduce_sum.44183, %reduce_sum.44184)
}

%region_2188.44195 (reduce_sum.44192: f32[], reduce_sum.44193: f32[]) -> f32[] {
  %reduce_sum.44192 = f32[] parameter(0)
  %reduce_sum.44193 = f32[] parameter(1)
  ROOT %reduce_sum.699 = f32[] add(%reduce_sum.44192, %reduce_sum.44193)
}

%region_2189.44204 (reduce_sum.44201: f32[], reduce_sum.44202: f32[]) -> f32[] {
  %reduce_sum.44201 = f32[] parameter(0)
  %reduce_sum.44202 = f32[] parameter(1)
  ROOT %reduce_sum.700 = f32[] add(%reduce_sum.44201, %reduce_sum.44202)
}

%region_2190.44213 (reduce_sum.44210: f32[], reduce_sum.44211: f32[]) -> f32[] {
  %reduce_sum.44210 = f32[] parameter(0)
  %reduce_sum.44211 = f32[] parameter(1)
  ROOT %reduce_sum.701 = f32[] add(%reduce_sum.44210, %reduce_sum.44211)
}

%region_2191.44222 (reduce_sum.44219: f32[], reduce_sum.44220: f32[]) -> f32[] {
  %reduce_sum.44219 = f32[] parameter(0)
  %reduce_sum.44220 = f32[] parameter(1)
  ROOT %reduce_sum.702 = f32[] add(%reduce_sum.44219, %reduce_sum.44220)
}

%region_2192.44231 (reduce_sum.44228: f32[], reduce_sum.44229: f32[]) -> f32[] {
  %reduce_sum.44228 = f32[] parameter(0)
  %reduce_sum.44229 = f32[] parameter(1)
  ROOT %reduce_sum.703 = f32[] add(%reduce_sum.44228, %reduce_sum.44229)
}

%region_2193.44240 (reduce_sum.44237: f32[], reduce_sum.44238: f32[]) -> f32[] {
  %reduce_sum.44237 = f32[] parameter(0)
  %reduce_sum.44238 = f32[] parameter(1)
  ROOT %reduce_sum.704 = f32[] add(%reduce_sum.44237, %reduce_sum.44238)
}

%region_2194.44249 (reduce_sum.44246: f32[], reduce_sum.44247: f32[]) -> f32[] {
  %reduce_sum.44246 = f32[] parameter(0)
  %reduce_sum.44247 = f32[] parameter(1)
  ROOT %reduce_sum.705 = f32[] add(%reduce_sum.44246, %reduce_sum.44247)
}

%region_2195.44258 (reduce_sum.44255: f32[], reduce_sum.44256: f32[]) -> f32[] {
  %reduce_sum.44255 = f32[] parameter(0)
  %reduce_sum.44256 = f32[] parameter(1)
  ROOT %reduce_sum.706 = f32[] add(%reduce_sum.44255, %reduce_sum.44256)
}

%region_2196.44267 (reduce_sum.44264: f32[], reduce_sum.44265: f32[]) -> f32[] {
  %reduce_sum.44264 = f32[] parameter(0)
  %reduce_sum.44265 = f32[] parameter(1)
  ROOT %reduce_sum.707 = f32[] add(%reduce_sum.44264, %reduce_sum.44265)
}

%region_2197.44276 (reduce_sum.44273: f32[], reduce_sum.44274: f32[]) -> f32[] {
  %reduce_sum.44273 = f32[] parameter(0)
  %reduce_sum.44274 = f32[] parameter(1)
  ROOT %reduce_sum.708 = f32[] add(%reduce_sum.44273, %reduce_sum.44274)
}

%region_2198.44285 (reduce_sum.44282: f32[], reduce_sum.44283: f32[]) -> f32[] {
  %reduce_sum.44282 = f32[] parameter(0)
  %reduce_sum.44283 = f32[] parameter(1)
  ROOT %reduce_sum.709 = f32[] add(%reduce_sum.44282, %reduce_sum.44283)
}

%region_2199.44294 (reduce_sum.44291: f32[], reduce_sum.44292: f32[]) -> f32[] {
  %reduce_sum.44291 = f32[] parameter(0)
  %reduce_sum.44292 = f32[] parameter(1)
  ROOT %reduce_sum.710 = f32[] add(%reduce_sum.44291, %reduce_sum.44292)
}

%region_2200.44303 (reduce_sum.44300: f32[], reduce_sum.44301: f32[]) -> f32[] {
  %reduce_sum.44300 = f32[] parameter(0)
  %reduce_sum.44301 = f32[] parameter(1)
  ROOT %reduce_sum.711 = f32[] add(%reduce_sum.44300, %reduce_sum.44301)
}

%region_2201.44312 (reduce_sum.44309: f32[], reduce_sum.44310: f32[]) -> f32[] {
  %reduce_sum.44309 = f32[] parameter(0)
  %reduce_sum.44310 = f32[] parameter(1)
  ROOT %reduce_sum.712 = f32[] add(%reduce_sum.44309, %reduce_sum.44310)
}

%region_2202.44321 (reduce_sum.44318: f32[], reduce_sum.44319: f32[]) -> f32[] {
  %reduce_sum.44318 = f32[] parameter(0)
  %reduce_sum.44319 = f32[] parameter(1)
  ROOT %reduce_sum.713 = f32[] add(%reduce_sum.44318, %reduce_sum.44319)
}

%region_2203.44330 (reduce_sum.44327: f32[], reduce_sum.44328: f32[]) -> f32[] {
  %reduce_sum.44327 = f32[] parameter(0)
  %reduce_sum.44328 = f32[] parameter(1)
  ROOT %reduce_sum.714 = f32[] add(%reduce_sum.44327, %reduce_sum.44328)
}

%region_2204.44339 (reduce_sum.44336: f32[], reduce_sum.44337: f32[]) -> f32[] {
  %reduce_sum.44336 = f32[] parameter(0)
  %reduce_sum.44337 = f32[] parameter(1)
  ROOT %reduce_sum.715 = f32[] add(%reduce_sum.44336, %reduce_sum.44337)
}

%region_2205.44348 (reduce_sum.44345: f32[], reduce_sum.44346: f32[]) -> f32[] {
  %reduce_sum.44345 = f32[] parameter(0)
  %reduce_sum.44346 = f32[] parameter(1)
  ROOT %reduce_sum.716 = f32[] add(%reduce_sum.44345, %reduce_sum.44346)
}

%region_2206.44357 (reduce_sum.44354: f32[], reduce_sum.44355: f32[]) -> f32[] {
  %reduce_sum.44354 = f32[] parameter(0)
  %reduce_sum.44355 = f32[] parameter(1)
  ROOT %reduce_sum.717 = f32[] add(%reduce_sum.44354, %reduce_sum.44355)
}

%region_2207.44366 (reduce_sum.44363: f32[], reduce_sum.44364: f32[]) -> f32[] {
  %reduce_sum.44363 = f32[] parameter(0)
  %reduce_sum.44364 = f32[] parameter(1)
  ROOT %reduce_sum.718 = f32[] add(%reduce_sum.44363, %reduce_sum.44364)
}

%region_2208.44375 (reduce_sum.44372: f32[], reduce_sum.44373: f32[]) -> f32[] {
  %reduce_sum.44372 = f32[] parameter(0)
  %reduce_sum.44373 = f32[] parameter(1)
  ROOT %reduce_sum.719 = f32[] add(%reduce_sum.44372, %reduce_sum.44373)
}

%region_2209.44384 (reduce_sum.44381: f32[], reduce_sum.44382: f32[]) -> f32[] {
  %reduce_sum.44381 = f32[] parameter(0)
  %reduce_sum.44382 = f32[] parameter(1)
  ROOT %reduce_sum.720 = f32[] add(%reduce_sum.44381, %reduce_sum.44382)
}

%region_2210.44393 (reduce_sum.44390: f32[], reduce_sum.44391: f32[]) -> f32[] {
  %reduce_sum.44390 = f32[] parameter(0)
  %reduce_sum.44391 = f32[] parameter(1)
  ROOT %reduce_sum.721 = f32[] add(%reduce_sum.44390, %reduce_sum.44391)
}

%region_2211.44402 (reduce_sum.44399: f32[], reduce_sum.44400: f32[]) -> f32[] {
  %reduce_sum.44399 = f32[] parameter(0)
  %reduce_sum.44400 = f32[] parameter(1)
  ROOT %reduce_sum.722 = f32[] add(%reduce_sum.44399, %reduce_sum.44400)
}

%region_2212.44411 (reduce_sum.44408: f32[], reduce_sum.44409: f32[]) -> f32[] {
  %reduce_sum.44408 = f32[] parameter(0)
  %reduce_sum.44409 = f32[] parameter(1)
  ROOT %reduce_sum.723 = f32[] add(%reduce_sum.44408, %reduce_sum.44409)
}

%region_2213.44420 (reduce_sum.44417: f32[], reduce_sum.44418: f32[]) -> f32[] {
  %reduce_sum.44417 = f32[] parameter(0)
  %reduce_sum.44418 = f32[] parameter(1)
  ROOT %reduce_sum.724 = f32[] add(%reduce_sum.44417, %reduce_sum.44418)
}

%region_2214.44429 (reduce_sum.44426: f32[], reduce_sum.44427: f32[]) -> f32[] {
  %reduce_sum.44426 = f32[] parameter(0)
  %reduce_sum.44427 = f32[] parameter(1)
  ROOT %reduce_sum.725 = f32[] add(%reduce_sum.44426, %reduce_sum.44427)
}

%region_2215.44438 (reduce_sum.44435: f32[], reduce_sum.44436: f32[]) -> f32[] {
  %reduce_sum.44435 = f32[] parameter(0)
  %reduce_sum.44436 = f32[] parameter(1)
  ROOT %reduce_sum.726 = f32[] add(%reduce_sum.44435, %reduce_sum.44436)
}

%region_2216.44447 (reduce_sum.44444: f32[], reduce_sum.44445: f32[]) -> f32[] {
  %reduce_sum.44444 = f32[] parameter(0)
  %reduce_sum.44445 = f32[] parameter(1)
  ROOT %reduce_sum.727 = f32[] add(%reduce_sum.44444, %reduce_sum.44445)
}

%region_2217.44456 (reduce_sum.44453: f32[], reduce_sum.44454: f32[]) -> f32[] {
  %reduce_sum.44453 = f32[] parameter(0)
  %reduce_sum.44454 = f32[] parameter(1)
  ROOT %reduce_sum.728 = f32[] add(%reduce_sum.44453, %reduce_sum.44454)
}

%region_2218.44465 (reduce_sum.44462: f32[], reduce_sum.44463: f32[]) -> f32[] {
  %reduce_sum.44462 = f32[] parameter(0)
  %reduce_sum.44463 = f32[] parameter(1)
  ROOT %reduce_sum.729 = f32[] add(%reduce_sum.44462, %reduce_sum.44463)
}

%region_2219.44474 (reduce_sum.44471: f32[], reduce_sum.44472: f32[]) -> f32[] {
  %reduce_sum.44471 = f32[] parameter(0)
  %reduce_sum.44472 = f32[] parameter(1)
  ROOT %reduce_sum.730 = f32[] add(%reduce_sum.44471, %reduce_sum.44472)
}

%region_2220.44483 (reduce_sum.44480: f32[], reduce_sum.44481: f32[]) -> f32[] {
  %reduce_sum.44480 = f32[] parameter(0)
  %reduce_sum.44481 = f32[] parameter(1)
  ROOT %reduce_sum.731 = f32[] add(%reduce_sum.44480, %reduce_sum.44481)
}

%region_2221.44492 (reduce_sum.44489: f32[], reduce_sum.44490: f32[]) -> f32[] {
  %reduce_sum.44489 = f32[] parameter(0)
  %reduce_sum.44490 = f32[] parameter(1)
  ROOT %reduce_sum.732 = f32[] add(%reduce_sum.44489, %reduce_sum.44490)
}

%region_2222.44501 (reduce_sum.44498: f32[], reduce_sum.44499: f32[]) -> f32[] {
  %reduce_sum.44498 = f32[] parameter(0)
  %reduce_sum.44499 = f32[] parameter(1)
  ROOT %reduce_sum.733 = f32[] add(%reduce_sum.44498, %reduce_sum.44499)
}

%region_2223.44510 (reduce_sum.44507: f32[], reduce_sum.44508: f32[]) -> f32[] {
  %reduce_sum.44507 = f32[] parameter(0)
  %reduce_sum.44508 = f32[] parameter(1)
  ROOT %reduce_sum.734 = f32[] add(%reduce_sum.44507, %reduce_sum.44508)
}

%region_2224.44519 (reduce_sum.44516: f32[], reduce_sum.44517: f32[]) -> f32[] {
  %reduce_sum.44516 = f32[] parameter(0)
  %reduce_sum.44517 = f32[] parameter(1)
  ROOT %reduce_sum.735 = f32[] add(%reduce_sum.44516, %reduce_sum.44517)
}

%region_2225.44528 (reduce_sum.44525: f32[], reduce_sum.44526: f32[]) -> f32[] {
  %reduce_sum.44525 = f32[] parameter(0)
  %reduce_sum.44526 = f32[] parameter(1)
  ROOT %reduce_sum.736 = f32[] add(%reduce_sum.44525, %reduce_sum.44526)
}

%region_2226.44537 (reduce_sum.44534: f32[], reduce_sum.44535: f32[]) -> f32[] {
  %reduce_sum.44534 = f32[] parameter(0)
  %reduce_sum.44535 = f32[] parameter(1)
  ROOT %reduce_sum.737 = f32[] add(%reduce_sum.44534, %reduce_sum.44535)
}

%region_2227.44546 (reduce_sum.44543: f32[], reduce_sum.44544: f32[]) -> f32[] {
  %reduce_sum.44543 = f32[] parameter(0)
  %reduce_sum.44544 = f32[] parameter(1)
  ROOT %reduce_sum.738 = f32[] add(%reduce_sum.44543, %reduce_sum.44544)
}

%region_2228.44555 (reduce_sum.44552: f32[], reduce_sum.44553: f32[]) -> f32[] {
  %reduce_sum.44552 = f32[] parameter(0)
  %reduce_sum.44553 = f32[] parameter(1)
  ROOT %reduce_sum.739 = f32[] add(%reduce_sum.44552, %reduce_sum.44553)
}

%region_2229.44564 (reduce_sum.44561: f32[], reduce_sum.44562: f32[]) -> f32[] {
  %reduce_sum.44561 = f32[] parameter(0)
  %reduce_sum.44562 = f32[] parameter(1)
  ROOT %reduce_sum.740 = f32[] add(%reduce_sum.44561, %reduce_sum.44562)
}

%region_2230.44573 (reduce_sum.44570: f32[], reduce_sum.44571: f32[]) -> f32[] {
  %reduce_sum.44570 = f32[] parameter(0)
  %reduce_sum.44571 = f32[] parameter(1)
  ROOT %reduce_sum.741 = f32[] add(%reduce_sum.44570, %reduce_sum.44571)
}

%region_2231.44582 (reduce_sum.44579: f32[], reduce_sum.44580: f32[]) -> f32[] {
  %reduce_sum.44579 = f32[] parameter(0)
  %reduce_sum.44580 = f32[] parameter(1)
  ROOT %reduce_sum.742 = f32[] add(%reduce_sum.44579, %reduce_sum.44580)
}

%region_2232.44591 (reduce_sum.44588: f32[], reduce_sum.44589: f32[]) -> f32[] {
  %reduce_sum.44588 = f32[] parameter(0)
  %reduce_sum.44589 = f32[] parameter(1)
  ROOT %reduce_sum.743 = f32[] add(%reduce_sum.44588, %reduce_sum.44589)
}

%region_2233.44600 (reduce_sum.44597: f32[], reduce_sum.44598: f32[]) -> f32[] {
  %reduce_sum.44597 = f32[] parameter(0)
  %reduce_sum.44598 = f32[] parameter(1)
  ROOT %reduce_sum.744 = f32[] add(%reduce_sum.44597, %reduce_sum.44598)
}

%region_2234.44609 (reduce_sum.44606: f32[], reduce_sum.44607: f32[]) -> f32[] {
  %reduce_sum.44606 = f32[] parameter(0)
  %reduce_sum.44607 = f32[] parameter(1)
  ROOT %reduce_sum.745 = f32[] add(%reduce_sum.44606, %reduce_sum.44607)
}

%region_2235.44618 (reduce_sum.44615: f32[], reduce_sum.44616: f32[]) -> f32[] {
  %reduce_sum.44615 = f32[] parameter(0)
  %reduce_sum.44616 = f32[] parameter(1)
  ROOT %reduce_sum.746 = f32[] add(%reduce_sum.44615, %reduce_sum.44616)
}

%region_2236.44627 (reduce_sum.44624: f32[], reduce_sum.44625: f32[]) -> f32[] {
  %reduce_sum.44624 = f32[] parameter(0)
  %reduce_sum.44625 = f32[] parameter(1)
  ROOT %reduce_sum.747 = f32[] add(%reduce_sum.44624, %reduce_sum.44625)
}

%region_2237.44636 (reduce_sum.44633: f32[], reduce_sum.44634: f32[]) -> f32[] {
  %reduce_sum.44633 = f32[] parameter(0)
  %reduce_sum.44634 = f32[] parameter(1)
  ROOT %reduce_sum.748 = f32[] add(%reduce_sum.44633, %reduce_sum.44634)
}

%region_2238.44645 (reduce_sum.44642: f32[], reduce_sum.44643: f32[]) -> f32[] {
  %reduce_sum.44642 = f32[] parameter(0)
  %reduce_sum.44643 = f32[] parameter(1)
  ROOT %reduce_sum.749 = f32[] add(%reduce_sum.44642, %reduce_sum.44643)
}

%region_2239.44654 (reduce_sum.44651: f32[], reduce_sum.44652: f32[]) -> f32[] {
  %reduce_sum.44651 = f32[] parameter(0)
  %reduce_sum.44652 = f32[] parameter(1)
  ROOT %reduce_sum.750 = f32[] add(%reduce_sum.44651, %reduce_sum.44652)
}

%region_2240.44663 (reduce_sum.44660: f32[], reduce_sum.44661: f32[]) -> f32[] {
  %reduce_sum.44660 = f32[] parameter(0)
  %reduce_sum.44661 = f32[] parameter(1)
  ROOT %reduce_sum.751 = f32[] add(%reduce_sum.44660, %reduce_sum.44661)
}

%region_2241.44672 (reduce_sum.44669: f32[], reduce_sum.44670: f32[]) -> f32[] {
  %reduce_sum.44669 = f32[] parameter(0)
  %reduce_sum.44670 = f32[] parameter(1)
  ROOT %reduce_sum.752 = f32[] add(%reduce_sum.44669, %reduce_sum.44670)
}

%region_2242.44681 (reduce_sum.44678: f32[], reduce_sum.44679: f32[]) -> f32[] {
  %reduce_sum.44678 = f32[] parameter(0)
  %reduce_sum.44679 = f32[] parameter(1)
  ROOT %reduce_sum.753 = f32[] add(%reduce_sum.44678, %reduce_sum.44679)
}

%region_2243.44690 (reduce_sum.44687: f32[], reduce_sum.44688: f32[]) -> f32[] {
  %reduce_sum.44687 = f32[] parameter(0)
  %reduce_sum.44688 = f32[] parameter(1)
  ROOT %reduce_sum.754 = f32[] add(%reduce_sum.44687, %reduce_sum.44688)
}

%region_2244.44699 (reduce_sum.44696: f32[], reduce_sum.44697: f32[]) -> f32[] {
  %reduce_sum.44696 = f32[] parameter(0)
  %reduce_sum.44697 = f32[] parameter(1)
  ROOT %reduce_sum.755 = f32[] add(%reduce_sum.44696, %reduce_sum.44697)
}

%region_2245.44708 (reduce_sum.44705: f32[], reduce_sum.44706: f32[]) -> f32[] {
  %reduce_sum.44705 = f32[] parameter(0)
  %reduce_sum.44706 = f32[] parameter(1)
  ROOT %reduce_sum.756 = f32[] add(%reduce_sum.44705, %reduce_sum.44706)
}

%region_2246.44717 (reduce_sum.44714: f32[], reduce_sum.44715: f32[]) -> f32[] {
  %reduce_sum.44714 = f32[] parameter(0)
  %reduce_sum.44715 = f32[] parameter(1)
  ROOT %reduce_sum.757 = f32[] add(%reduce_sum.44714, %reduce_sum.44715)
}

%region_2247.44726 (reduce_sum.44723: f32[], reduce_sum.44724: f32[]) -> f32[] {
  %reduce_sum.44723 = f32[] parameter(0)
  %reduce_sum.44724 = f32[] parameter(1)
  ROOT %reduce_sum.758 = f32[] add(%reduce_sum.44723, %reduce_sum.44724)
}

%region_2248.44735 (reduce_sum.44732: f32[], reduce_sum.44733: f32[]) -> f32[] {
  %reduce_sum.44732 = f32[] parameter(0)
  %reduce_sum.44733 = f32[] parameter(1)
  ROOT %reduce_sum.759 = f32[] add(%reduce_sum.44732, %reduce_sum.44733)
}

%region_2249.44744 (reduce_sum.44741: f32[], reduce_sum.44742: f32[]) -> f32[] {
  %reduce_sum.44741 = f32[] parameter(0)
  %reduce_sum.44742 = f32[] parameter(1)
  ROOT %reduce_sum.760 = f32[] add(%reduce_sum.44741, %reduce_sum.44742)
}

%region_2250.44753 (reduce_sum.44750: f32[], reduce_sum.44751: f32[]) -> f32[] {
  %reduce_sum.44750 = f32[] parameter(0)
  %reduce_sum.44751 = f32[] parameter(1)
  ROOT %reduce_sum.761 = f32[] add(%reduce_sum.44750, %reduce_sum.44751)
}

%region_2251.44762 (reduce_sum.44759: f32[], reduce_sum.44760: f32[]) -> f32[] {
  %reduce_sum.44759 = f32[] parameter(0)
  %reduce_sum.44760 = f32[] parameter(1)
  ROOT %reduce_sum.762 = f32[] add(%reduce_sum.44759, %reduce_sum.44760)
}

%region_2252.44771 (reduce_sum.44768: f32[], reduce_sum.44769: f32[]) -> f32[] {
  %reduce_sum.44768 = f32[] parameter(0)
  %reduce_sum.44769 = f32[] parameter(1)
  ROOT %reduce_sum.763 = f32[] add(%reduce_sum.44768, %reduce_sum.44769)
}

%region_2253.44780 (reduce_sum.44777: f32[], reduce_sum.44778: f32[]) -> f32[] {
  %reduce_sum.44777 = f32[] parameter(0)
  %reduce_sum.44778 = f32[] parameter(1)
  ROOT %reduce_sum.764 = f32[] add(%reduce_sum.44777, %reduce_sum.44778)
}

%region_2254.44789 (reduce_sum.44786: f32[], reduce_sum.44787: f32[]) -> f32[] {
  %reduce_sum.44786 = f32[] parameter(0)
  %reduce_sum.44787 = f32[] parameter(1)
  ROOT %reduce_sum.765 = f32[] add(%reduce_sum.44786, %reduce_sum.44787)
}

%region_2255.44798 (reduce_sum.44795: f32[], reduce_sum.44796: f32[]) -> f32[] {
  %reduce_sum.44795 = f32[] parameter(0)
  %reduce_sum.44796 = f32[] parameter(1)
  ROOT %reduce_sum.766 = f32[] add(%reduce_sum.44795, %reduce_sum.44796)
}

%region_2256.44807 (reduce_sum.44804: f32[], reduce_sum.44805: f32[]) -> f32[] {
  %reduce_sum.44804 = f32[] parameter(0)
  %reduce_sum.44805 = f32[] parameter(1)
  ROOT %reduce_sum.767 = f32[] add(%reduce_sum.44804, %reduce_sum.44805)
}

%region_2257.44816 (reduce_sum.44813: f32[], reduce_sum.44814: f32[]) -> f32[] {
  %reduce_sum.44813 = f32[] parameter(0)
  %reduce_sum.44814 = f32[] parameter(1)
  ROOT %reduce_sum.768 = f32[] add(%reduce_sum.44813, %reduce_sum.44814)
}

%region_2258.44825 (reduce_sum.44822: f32[], reduce_sum.44823: f32[]) -> f32[] {
  %reduce_sum.44822 = f32[] parameter(0)
  %reduce_sum.44823 = f32[] parameter(1)
  ROOT %reduce_sum.769 = f32[] add(%reduce_sum.44822, %reduce_sum.44823)
}

%region_2259.44834 (reduce_sum.44831: f32[], reduce_sum.44832: f32[]) -> f32[] {
  %reduce_sum.44831 = f32[] parameter(0)
  %reduce_sum.44832 = f32[] parameter(1)
  ROOT %reduce_sum.770 = f32[] add(%reduce_sum.44831, %reduce_sum.44832)
}

%region_2260.44843 (reduce_sum.44840: f32[], reduce_sum.44841: f32[]) -> f32[] {
  %reduce_sum.44840 = f32[] parameter(0)
  %reduce_sum.44841 = f32[] parameter(1)
  ROOT %reduce_sum.771 = f32[] add(%reduce_sum.44840, %reduce_sum.44841)
}

%region_2261.44852 (reduce_sum.44849: f32[], reduce_sum.44850: f32[]) -> f32[] {
  %reduce_sum.44849 = f32[] parameter(0)
  %reduce_sum.44850 = f32[] parameter(1)
  ROOT %reduce_sum.772 = f32[] add(%reduce_sum.44849, %reduce_sum.44850)
}

%region_2262.44861 (reduce_sum.44858: f32[], reduce_sum.44859: f32[]) -> f32[] {
  %reduce_sum.44858 = f32[] parameter(0)
  %reduce_sum.44859 = f32[] parameter(1)
  ROOT %reduce_sum.773 = f32[] add(%reduce_sum.44858, %reduce_sum.44859)
}

%region_2263.44870 (reduce_sum.44867: f32[], reduce_sum.44868: f32[]) -> f32[] {
  %reduce_sum.44867 = f32[] parameter(0)
  %reduce_sum.44868 = f32[] parameter(1)
  ROOT %reduce_sum.774 = f32[] add(%reduce_sum.44867, %reduce_sum.44868)
}

%region_2264.44879 (reduce_sum.44876: f32[], reduce_sum.44877: f32[]) -> f32[] {
  %reduce_sum.44876 = f32[] parameter(0)
  %reduce_sum.44877 = f32[] parameter(1)
  ROOT %reduce_sum.775 = f32[] add(%reduce_sum.44876, %reduce_sum.44877)
}

%region_2265.44888 (reduce_sum.44885: f32[], reduce_sum.44886: f32[]) -> f32[] {
  %reduce_sum.44885 = f32[] parameter(0)
  %reduce_sum.44886 = f32[] parameter(1)
  ROOT %reduce_sum.776 = f32[] add(%reduce_sum.44885, %reduce_sum.44886)
}

%region_2266.44897 (reduce_sum.44894: f32[], reduce_sum.44895: f32[]) -> f32[] {
  %reduce_sum.44894 = f32[] parameter(0)
  %reduce_sum.44895 = f32[] parameter(1)
  ROOT %reduce_sum.777 = f32[] add(%reduce_sum.44894, %reduce_sum.44895)
}

%region_2267.44906 (reduce_sum.44903: f32[], reduce_sum.44904: f32[]) -> f32[] {
  %reduce_sum.44903 = f32[] parameter(0)
  %reduce_sum.44904 = f32[] parameter(1)
  ROOT %reduce_sum.778 = f32[] add(%reduce_sum.44903, %reduce_sum.44904)
}

%region_2268.44915 (reduce_sum.44912: f32[], reduce_sum.44913: f32[]) -> f32[] {
  %reduce_sum.44912 = f32[] parameter(0)
  %reduce_sum.44913 = f32[] parameter(1)
  ROOT %reduce_sum.779 = f32[] add(%reduce_sum.44912, %reduce_sum.44913)
}

%region_2269.44924 (reduce_sum.44921: f32[], reduce_sum.44922: f32[]) -> f32[] {
  %reduce_sum.44921 = f32[] parameter(0)
  %reduce_sum.44922 = f32[] parameter(1)
  ROOT %reduce_sum.780 = f32[] add(%reduce_sum.44921, %reduce_sum.44922)
}

%region_2270.44933 (reduce_sum.44930: f32[], reduce_sum.44931: f32[]) -> f32[] {
  %reduce_sum.44930 = f32[] parameter(0)
  %reduce_sum.44931 = f32[] parameter(1)
  ROOT %reduce_sum.781 = f32[] add(%reduce_sum.44930, %reduce_sum.44931)
}

%region_2271.44942 (reduce_sum.44939: f32[], reduce_sum.44940: f32[]) -> f32[] {
  %reduce_sum.44939 = f32[] parameter(0)
  %reduce_sum.44940 = f32[] parameter(1)
  ROOT %reduce_sum.782 = f32[] add(%reduce_sum.44939, %reduce_sum.44940)
}

%region_2272.44951 (reduce_sum.44948: f32[], reduce_sum.44949: f32[]) -> f32[] {
  %reduce_sum.44948 = f32[] parameter(0)
  %reduce_sum.44949 = f32[] parameter(1)
  ROOT %reduce_sum.783 = f32[] add(%reduce_sum.44948, %reduce_sum.44949)
}

%region_2273.44960 (reduce_sum.44957: f32[], reduce_sum.44958: f32[]) -> f32[] {
  %reduce_sum.44957 = f32[] parameter(0)
  %reduce_sum.44958 = f32[] parameter(1)
  ROOT %reduce_sum.784 = f32[] add(%reduce_sum.44957, %reduce_sum.44958)
}

%region_2274.44969 (reduce_sum.44966: f32[], reduce_sum.44967: f32[]) -> f32[] {
  %reduce_sum.44966 = f32[] parameter(0)
  %reduce_sum.44967 = f32[] parameter(1)
  ROOT %reduce_sum.785 = f32[] add(%reduce_sum.44966, %reduce_sum.44967)
}

%region_2275.44978 (reduce_sum.44975: f32[], reduce_sum.44976: f32[]) -> f32[] {
  %reduce_sum.44975 = f32[] parameter(0)
  %reduce_sum.44976 = f32[] parameter(1)
  ROOT %reduce_sum.786 = f32[] add(%reduce_sum.44975, %reduce_sum.44976)
}

%region_2276.44987 (reduce_sum.44984: f32[], reduce_sum.44985: f32[]) -> f32[] {
  %reduce_sum.44984 = f32[] parameter(0)
  %reduce_sum.44985 = f32[] parameter(1)
  ROOT %reduce_sum.787 = f32[] add(%reduce_sum.44984, %reduce_sum.44985)
}

%region_2277.44996 (reduce_sum.44993: f32[], reduce_sum.44994: f32[]) -> f32[] {
  %reduce_sum.44993 = f32[] parameter(0)
  %reduce_sum.44994 = f32[] parameter(1)
  ROOT %reduce_sum.788 = f32[] add(%reduce_sum.44993, %reduce_sum.44994)
}

%region_2278.45005 (reduce_sum.45002: f32[], reduce_sum.45003: f32[]) -> f32[] {
  %reduce_sum.45002 = f32[] parameter(0)
  %reduce_sum.45003 = f32[] parameter(1)
  ROOT %reduce_sum.789 = f32[] add(%reduce_sum.45002, %reduce_sum.45003)
}

%region_2279.45014 (reduce_sum.45011: f32[], reduce_sum.45012: f32[]) -> f32[] {
  %reduce_sum.45011 = f32[] parameter(0)
  %reduce_sum.45012 = f32[] parameter(1)
  ROOT %reduce_sum.790 = f32[] add(%reduce_sum.45011, %reduce_sum.45012)
}

%region_2280.45023 (reduce_sum.45020: f32[], reduce_sum.45021: f32[]) -> f32[] {
  %reduce_sum.45020 = f32[] parameter(0)
  %reduce_sum.45021 = f32[] parameter(1)
  ROOT %reduce_sum.791 = f32[] add(%reduce_sum.45020, %reduce_sum.45021)
}

%region_2281.45032 (reduce_sum.45029: f32[], reduce_sum.45030: f32[]) -> f32[] {
  %reduce_sum.45029 = f32[] parameter(0)
  %reduce_sum.45030 = f32[] parameter(1)
  ROOT %reduce_sum.792 = f32[] add(%reduce_sum.45029, %reduce_sum.45030)
}

%region_2282.45041 (reduce_sum.45038: f32[], reduce_sum.45039: f32[]) -> f32[] {
  %reduce_sum.45038 = f32[] parameter(0)
  %reduce_sum.45039 = f32[] parameter(1)
  ROOT %reduce_sum.793 = f32[] add(%reduce_sum.45038, %reduce_sum.45039)
}

%region_2283.45050 (reduce_sum.45047: f32[], reduce_sum.45048: f32[]) -> f32[] {
  %reduce_sum.45047 = f32[] parameter(0)
  %reduce_sum.45048 = f32[] parameter(1)
  ROOT %reduce_sum.794 = f32[] add(%reduce_sum.45047, %reduce_sum.45048)
}

%region_2284.45059 (reduce_sum.45056: f32[], reduce_sum.45057: f32[]) -> f32[] {
  %reduce_sum.45056 = f32[] parameter(0)
  %reduce_sum.45057 = f32[] parameter(1)
  ROOT %reduce_sum.795 = f32[] add(%reduce_sum.45056, %reduce_sum.45057)
}

%region_2285.45068 (reduce_sum.45065: f32[], reduce_sum.45066: f32[]) -> f32[] {
  %reduce_sum.45065 = f32[] parameter(0)
  %reduce_sum.45066 = f32[] parameter(1)
  ROOT %reduce_sum.796 = f32[] add(%reduce_sum.45065, %reduce_sum.45066)
}

%region_2286.45077 (reduce_sum.45074: f32[], reduce_sum.45075: f32[]) -> f32[] {
  %reduce_sum.45074 = f32[] parameter(0)
  %reduce_sum.45075 = f32[] parameter(1)
  ROOT %reduce_sum.797 = f32[] add(%reduce_sum.45074, %reduce_sum.45075)
}

%region_2287.45086 (reduce_sum.45083: f32[], reduce_sum.45084: f32[]) -> f32[] {
  %reduce_sum.45083 = f32[] parameter(0)
  %reduce_sum.45084 = f32[] parameter(1)
  ROOT %reduce_sum.798 = f32[] add(%reduce_sum.45083, %reduce_sum.45084)
}

%region_2288.45095 (reduce_sum.45092: f32[], reduce_sum.45093: f32[]) -> f32[] {
  %reduce_sum.45092 = f32[] parameter(0)
  %reduce_sum.45093 = f32[] parameter(1)
  ROOT %reduce_sum.799 = f32[] add(%reduce_sum.45092, %reduce_sum.45093)
}

%region_2289.45104 (reduce_sum.45101: f32[], reduce_sum.45102: f32[]) -> f32[] {
  %reduce_sum.45101 = f32[] parameter(0)
  %reduce_sum.45102 = f32[] parameter(1)
  ROOT %reduce_sum.800 = f32[] add(%reduce_sum.45101, %reduce_sum.45102)
}

%region_2290.45113 (reduce_sum.45110: f32[], reduce_sum.45111: f32[]) -> f32[] {
  %reduce_sum.45110 = f32[] parameter(0)
  %reduce_sum.45111 = f32[] parameter(1)
  ROOT %reduce_sum.801 = f32[] add(%reduce_sum.45110, %reduce_sum.45111)
}

%region_2291.45122 (reduce_sum.45119: f32[], reduce_sum.45120: f32[]) -> f32[] {
  %reduce_sum.45119 = f32[] parameter(0)
  %reduce_sum.45120 = f32[] parameter(1)
  ROOT %reduce_sum.802 = f32[] add(%reduce_sum.45119, %reduce_sum.45120)
}

%region_2292.45131 (reduce_sum.45128: f32[], reduce_sum.45129: f32[]) -> f32[] {
  %reduce_sum.45128 = f32[] parameter(0)
  %reduce_sum.45129 = f32[] parameter(1)
  ROOT %reduce_sum.803 = f32[] add(%reduce_sum.45128, %reduce_sum.45129)
}

%region_2293.45140 (reduce_sum.45137: f32[], reduce_sum.45138: f32[]) -> f32[] {
  %reduce_sum.45137 = f32[] parameter(0)
  %reduce_sum.45138 = f32[] parameter(1)
  ROOT %reduce_sum.804 = f32[] add(%reduce_sum.45137, %reduce_sum.45138)
}

%region_2294.45149 (reduce_sum.45146: f32[], reduce_sum.45147: f32[]) -> f32[] {
  %reduce_sum.45146 = f32[] parameter(0)
  %reduce_sum.45147 = f32[] parameter(1)
  ROOT %reduce_sum.805 = f32[] add(%reduce_sum.45146, %reduce_sum.45147)
}

%region_2295.45158 (reduce_sum.45155: f32[], reduce_sum.45156: f32[]) -> f32[] {
  %reduce_sum.45155 = f32[] parameter(0)
  %reduce_sum.45156 = f32[] parameter(1)
  ROOT %reduce_sum.806 = f32[] add(%reduce_sum.45155, %reduce_sum.45156)
}

%region_2296.45167 (reduce_sum.45164: f32[], reduce_sum.45165: f32[]) -> f32[] {
  %reduce_sum.45164 = f32[] parameter(0)
  %reduce_sum.45165 = f32[] parameter(1)
  ROOT %reduce_sum.807 = f32[] add(%reduce_sum.45164, %reduce_sum.45165)
}

%region_2297.45176 (reduce_sum.45173: f32[], reduce_sum.45174: f32[]) -> f32[] {
  %reduce_sum.45173 = f32[] parameter(0)
  %reduce_sum.45174 = f32[] parameter(1)
  ROOT %reduce_sum.808 = f32[] add(%reduce_sum.45173, %reduce_sum.45174)
}

%region_2298.45185 (reduce_sum.45182: f32[], reduce_sum.45183: f32[]) -> f32[] {
  %reduce_sum.45182 = f32[] parameter(0)
  %reduce_sum.45183 = f32[] parameter(1)
  ROOT %reduce_sum.809 = f32[] add(%reduce_sum.45182, %reduce_sum.45183)
}

%region_2299.45194 (reduce_sum.45191: f32[], reduce_sum.45192: f32[]) -> f32[] {
  %reduce_sum.45191 = f32[] parameter(0)
  %reduce_sum.45192 = f32[] parameter(1)
  ROOT %reduce_sum.810 = f32[] add(%reduce_sum.45191, %reduce_sum.45192)
}

%region_2300.45203 (reduce_sum.45200: f32[], reduce_sum.45201: f32[]) -> f32[] {
  %reduce_sum.45200 = f32[] parameter(0)
  %reduce_sum.45201 = f32[] parameter(1)
  ROOT %reduce_sum.811 = f32[] add(%reduce_sum.45200, %reduce_sum.45201)
}

%region_2301.45212 (reduce_sum.45209: f32[], reduce_sum.45210: f32[]) -> f32[] {
  %reduce_sum.45209 = f32[] parameter(0)
  %reduce_sum.45210 = f32[] parameter(1)
  ROOT %reduce_sum.812 = f32[] add(%reduce_sum.45209, %reduce_sum.45210)
}

%region_2302.45221 (reduce_sum.45218: f32[], reduce_sum.45219: f32[]) -> f32[] {
  %reduce_sum.45218 = f32[] parameter(0)
  %reduce_sum.45219 = f32[] parameter(1)
  ROOT %reduce_sum.813 = f32[] add(%reduce_sum.45218, %reduce_sum.45219)
}

%region_2303.45230 (reduce_sum.45227: f32[], reduce_sum.45228: f32[]) -> f32[] {
  %reduce_sum.45227 = f32[] parameter(0)
  %reduce_sum.45228 = f32[] parameter(1)
  ROOT %reduce_sum.814 = f32[] add(%reduce_sum.45227, %reduce_sum.45228)
}

%region_2304.45239 (reduce_sum.45236: f32[], reduce_sum.45237: f32[]) -> f32[] {
  %reduce_sum.45236 = f32[] parameter(0)
  %reduce_sum.45237 = f32[] parameter(1)
  ROOT %reduce_sum.815 = f32[] add(%reduce_sum.45236, %reduce_sum.45237)
}

%region_2305.45248 (reduce_sum.45245: f32[], reduce_sum.45246: f32[]) -> f32[] {
  %reduce_sum.45245 = f32[] parameter(0)
  %reduce_sum.45246 = f32[] parameter(1)
  ROOT %reduce_sum.816 = f32[] add(%reduce_sum.45245, %reduce_sum.45246)
}

%region_2306.45257 (reduce_sum.45254: f32[], reduce_sum.45255: f32[]) -> f32[] {
  %reduce_sum.45254 = f32[] parameter(0)
  %reduce_sum.45255 = f32[] parameter(1)
  ROOT %reduce_sum.817 = f32[] add(%reduce_sum.45254, %reduce_sum.45255)
}

%region_2307.45266 (reduce_sum.45263: f32[], reduce_sum.45264: f32[]) -> f32[] {
  %reduce_sum.45263 = f32[] parameter(0)
  %reduce_sum.45264 = f32[] parameter(1)
  ROOT %reduce_sum.818 = f32[] add(%reduce_sum.45263, %reduce_sum.45264)
}

%region_2308.45275 (reduce_sum.45272: f32[], reduce_sum.45273: f32[]) -> f32[] {
  %reduce_sum.45272 = f32[] parameter(0)
  %reduce_sum.45273 = f32[] parameter(1)
  ROOT %reduce_sum.819 = f32[] add(%reduce_sum.45272, %reduce_sum.45273)
}

%region_2309.45284 (reduce_sum.45281: f32[], reduce_sum.45282: f32[]) -> f32[] {
  %reduce_sum.45281 = f32[] parameter(0)
  %reduce_sum.45282 = f32[] parameter(1)
  ROOT %reduce_sum.820 = f32[] add(%reduce_sum.45281, %reduce_sum.45282)
}

%region_2310.45293 (reduce_sum.45290: f32[], reduce_sum.45291: f32[]) -> f32[] {
  %reduce_sum.45290 = f32[] parameter(0)
  %reduce_sum.45291 = f32[] parameter(1)
  ROOT %reduce_sum.821 = f32[] add(%reduce_sum.45290, %reduce_sum.45291)
}

%region_2311.45302 (reduce_sum.45299: f32[], reduce_sum.45300: f32[]) -> f32[] {
  %reduce_sum.45299 = f32[] parameter(0)
  %reduce_sum.45300 = f32[] parameter(1)
  ROOT %reduce_sum.822 = f32[] add(%reduce_sum.45299, %reduce_sum.45300)
}

%region_2312.45311 (reduce_sum.45308: f32[], reduce_sum.45309: f32[]) -> f32[] {
  %reduce_sum.45308 = f32[] parameter(0)
  %reduce_sum.45309 = f32[] parameter(1)
  ROOT %reduce_sum.823 = f32[] add(%reduce_sum.45308, %reduce_sum.45309)
}

%region_2313.45320 (reduce_sum.45317: f32[], reduce_sum.45318: f32[]) -> f32[] {
  %reduce_sum.45317 = f32[] parameter(0)
  %reduce_sum.45318 = f32[] parameter(1)
  ROOT %reduce_sum.824 = f32[] add(%reduce_sum.45317, %reduce_sum.45318)
}

%region_2314.45329 (reduce_sum.45326: f32[], reduce_sum.45327: f32[]) -> f32[] {
  %reduce_sum.45326 = f32[] parameter(0)
  %reduce_sum.45327 = f32[] parameter(1)
  ROOT %reduce_sum.825 = f32[] add(%reduce_sum.45326, %reduce_sum.45327)
}

%region_2315.45338 (reduce_sum.45335: f32[], reduce_sum.45336: f32[]) -> f32[] {
  %reduce_sum.45335 = f32[] parameter(0)
  %reduce_sum.45336 = f32[] parameter(1)
  ROOT %reduce_sum.826 = f32[] add(%reduce_sum.45335, %reduce_sum.45336)
}

%region_2316.45347 (reduce_sum.45344: f32[], reduce_sum.45345: f32[]) -> f32[] {
  %reduce_sum.45344 = f32[] parameter(0)
  %reduce_sum.45345 = f32[] parameter(1)
  ROOT %reduce_sum.827 = f32[] add(%reduce_sum.45344, %reduce_sum.45345)
}

%region_2317.45356 (reduce_sum.45353: f32[], reduce_sum.45354: f32[]) -> f32[] {
  %reduce_sum.45353 = f32[] parameter(0)
  %reduce_sum.45354 = f32[] parameter(1)
  ROOT %reduce_sum.828 = f32[] add(%reduce_sum.45353, %reduce_sum.45354)
}

%region_2318.45365 (reduce_sum.45362: f32[], reduce_sum.45363: f32[]) -> f32[] {
  %reduce_sum.45362 = f32[] parameter(0)
  %reduce_sum.45363 = f32[] parameter(1)
  ROOT %reduce_sum.829 = f32[] add(%reduce_sum.45362, %reduce_sum.45363)
}

%region_2319.45374 (reduce_sum.45371: f32[], reduce_sum.45372: f32[]) -> f32[] {
  %reduce_sum.45371 = f32[] parameter(0)
  %reduce_sum.45372 = f32[] parameter(1)
  ROOT %reduce_sum.830 = f32[] add(%reduce_sum.45371, %reduce_sum.45372)
}

%region_2320.45383 (reduce_sum.45380: f32[], reduce_sum.45381: f32[]) -> f32[] {
  %reduce_sum.45380 = f32[] parameter(0)
  %reduce_sum.45381 = f32[] parameter(1)
  ROOT %reduce_sum.831 = f32[] add(%reduce_sum.45380, %reduce_sum.45381)
}

%region_2321.45392 (reduce_sum.45389: f32[], reduce_sum.45390: f32[]) -> f32[] {
  %reduce_sum.45389 = f32[] parameter(0)
  %reduce_sum.45390 = f32[] parameter(1)
  ROOT %reduce_sum.832 = f32[] add(%reduce_sum.45389, %reduce_sum.45390)
}

%region_2322.45401 (reduce_sum.45398: f32[], reduce_sum.45399: f32[]) -> f32[] {
  %reduce_sum.45398 = f32[] parameter(0)
  %reduce_sum.45399 = f32[] parameter(1)
  ROOT %reduce_sum.833 = f32[] add(%reduce_sum.45398, %reduce_sum.45399)
}

%region_2323.45410 (reduce_sum.45407: f32[], reduce_sum.45408: f32[]) -> f32[] {
  %reduce_sum.45407 = f32[] parameter(0)
  %reduce_sum.45408 = f32[] parameter(1)
  ROOT %reduce_sum.834 = f32[] add(%reduce_sum.45407, %reduce_sum.45408)
}

%region_0.1090 (reduce_sum.1087: f32[], reduce_sum.1088: f32[]) -> f32[] {
  %reduce_sum.1087 = f32[] parameter(0)
  %reduce_sum.1088 = f32[] parameter(1)
  ROOT %reduce_sum.1089 = f32[] add(%reduce_sum.1087, %reduce_sum.1088)
}

%region_1.1200 (reduce_sum.1197: s32[], reduce_sum.1198: s32[]) -> s32[] {
  %reduce_sum.1197 = s32[] parameter(0)
  %reduce_sum.1198 = s32[] parameter(1)
  ROOT %reduce_sum.1199 = s32[] add(%reduce_sum.1197, %reduce_sum.1198)
}

%region_2.1209 (reduce_sum.1206: s32[], reduce_sum.1207: s32[]) -> s32[] {
  %reduce_sum.1206 = s32[] parameter(0)
  %reduce_sum.1207 = s32[] parameter(1)
  ROOT %reduce_sum.1208 = s32[] add(%reduce_sum.1206, %reduce_sum.1207)
}

%region_3.1216 (reduce_max.1213: s32[], reduce_max.1214: s32[]) -> s32[] {
  %reduce_max.1213 = s32[] parameter(0)
  %reduce_max.1214 = s32[] parameter(1)
  ROOT %reduce_max.1215 = s32[] maximum(%reduce_max.1213, %reduce_max.1214)
}

%region_4.1232 (reduce_sum.1229: f32[], reduce_sum.1230: f32[]) -> f32[] {
  %reduce_sum.1229 = f32[] parameter(0)
  %reduce_sum.1230 = f32[] parameter(1)
  ROOT %reduce_sum.1231 = f32[] add(%reduce_sum.1229, %reduce_sum.1230)
}

%compare_greater_than.6.1251.clone (p.0.lhs.64: bf16[], p.0.rhs.64: bf16[], p.1.lhs.64: s32[], p.1.rhs.64: s32[]) -> pred[] {
  %p.1.lhs.64 = s32[] parameter(2)
  %p.1.rhs.64 = s32[] parameter(3)
  %p.0.lhs.64 = bf16[] parameter(0)
  %p.0.rhs.64 = bf16[] parameter(1)
  ROOT %compare.64 = pred[] compare(%p.0.lhs.64, %p.0.rhs.64), direction=GT, type=TOTALORDER
}

%compare-value-and-index.9 (p.0.lhs.65: bf16[], p.0.rhs.65: bf16[], p.1.lhs.65: s32[], p.1.rhs.65: s32[]) -> pred[] {
  %p.0.lhs.65 = bf16[] parameter(0)
  %p.0.rhs.65 = bf16[] parameter(1)
  %compare.66 = pred[] compare(%p.0.lhs.65, %p.0.rhs.65), direction=EQ, type=TOTALORDER
  %p.1.lhs.65 = s32[] parameter(2)
  %p.1.rhs.65 = s32[] parameter(3)
  %compare.67 = pred[] compare(%p.1.lhs.65, %p.1.rhs.65), direction=LT
  %compare.65 = pred[] compare(%p.0.lhs.65, %p.0.rhs.65), direction=GT
  ROOT %select.67 = pred[] select(%compare.66, %compare.67, %compare.65)
}

%region_5.1289.clone (scatter.1: u32[], scatter.2: u32[]) -> u32[] {
  %scatter.1 = u32[] parameter(0)
  ROOT %scatter.2 = u32[] parameter(1)
}

%region_6.1299 (reduce_max.1296: f32[], reduce_max.1297: f32[]) -> f32[] {
  %reduce_max.1296 = f32[] parameter(0)
  %reduce_max.1297 = f32[] parameter(1)
  ROOT %reduce_max.1298 = f32[] maximum(%reduce_max.1296, %reduce_max.1297)
}

%region_7.1308 (reduce_sum.0: f32[], reduce_sum.1306: f32[]) -> f32[] {
  %reduce_sum.0 = f32[] parameter(0)
  %reduce_sum.1306 = f32[] parameter(1)
  ROOT %reduce_sum.1307 = f32[] add(%reduce_sum.0, %reduce_sum.1306)
}

%region_8.1318.clone (scatter-add.2: bf16[], scatter-add.3: bf16[]) -> bf16[] {
  %scatter-add.2 = bf16[] parameter(0)
  %scatter-add.3 = bf16[] parameter(1)
  ROOT %add.912 = bf16[] add(%scatter-add.2, %scatter-add.3)
}

%region_9.1330 (reduce_window_sum.1327: s32[], reduce_window_sum.1328: s32[]) -> s32[] {
  %reduce_window_sum.1327 = s32[] parameter(0)
  %reduce_window_sum.1328 = s32[] parameter(1)
  ROOT %reduce_window_sum.1329 = s32[] add(%reduce_window_sum.1327, %reduce_window_sum.1328)
}

%region_10.1342 (reduce_sum.1339: s32[], reduce_sum.1340: s32[]) -> s32[] {
  %reduce_sum.1339 = s32[] parameter(0)
  %reduce_sum.1340 = s32[] parameter(1)
  ROOT %reduce_sum.1341 = s32[] add(%reduce_sum.1339, %reduce_sum.1340)
}

%region_11.1352 (reduce_sum.1349: s32[], reduce_sum.1350: s32[]) -> s32[] {
  %reduce_sum.1349 = s32[] parameter(0)
  %reduce_sum.1350 = s32[] parameter(1)
  ROOT %reduce_sum.1351 = s32[] add(%reduce_sum.1349, %reduce_sum.1350)
}

%region_12.1397 (reduce_sum.1394: f32[], reduce_sum.1395: f32[]) -> f32[] {
  %reduce_sum.1394 = f32[] parameter(0)
  %reduce_sum.1395 = f32[] parameter(1)
  ROOT %reduce_sum.1396 = f32[] add(%reduce_sum.1394, %reduce_sum.1395)
}

%region_16.1521 (reduce_sum.1518: f32[], reduce_sum.1: f32[]) -> f32[] {
  %reduce_sum.1518 = f32[] parameter(0)
  %reduce_sum.1 = f32[] parameter(1)
  ROOT %reduce_sum.2 = f32[] add(%reduce_sum.1518, %reduce_sum.1)
}

%compare_greater_than.0.1540.clone (p.0.lhs.66: bf16[], p.0.rhs.66: bf16[], p.1.lhs.66: s32[], p.1.rhs.66: s32[]) -> pred[] {
  %p.1.lhs.66 = s32[] parameter(2)
  %p.1.rhs.66 = s32[] parameter(3)
  %p.0.lhs.66 = bf16[] parameter(0)
  %p.0.rhs.66 = bf16[] parameter(1)
  ROOT %compare.68 = pred[] compare(%p.0.lhs.66, %p.0.rhs.66), direction=GT, type=TOTALORDER
}

%compare-value-and-index.0 (p.0.lhs.67: bf16[], p.0.rhs.67: bf16[], p.1.lhs.67: s32[], p.1.rhs.67: s32[]) -> pred[] {
  %p.0.lhs.67 = bf16[] parameter(0)
  %p.0.rhs.67 = bf16[] parameter(1)
  %compare.70 = pred[] compare(%p.0.lhs.67, %p.0.rhs.67), direction=EQ, type=TOTALORDER
  %p.1.lhs.67 = s32[] parameter(2)
  %p.1.rhs.67 = s32[] parameter(3)
  %compare.71 = pred[] compare(%p.1.lhs.67, %p.1.rhs.67), direction=LT
  %compare.69 = pred[] compare(%p.0.lhs.67, %p.0.rhs.67), direction=GT
  ROOT %select.68 = pred[] select(%compare.70, %compare.71, %compare.69)
}

%region_17.1568.clone (scatter.3: u32[], scatter.4: u32[]) -> u32[] {
  %scatter.3 = u32[] parameter(0)
  ROOT %scatter.4 = u32[] parameter(1)
}

%region_18.1577 (reduce_max.1574: f32[], reduce_max.1575: f32[]) -> f32[] {
  %reduce_max.1574 = f32[] parameter(0)
  %reduce_max.1575 = f32[] parameter(1)
  ROOT %reduce_max.1576 = f32[] maximum(%reduce_max.1574, %reduce_max.1575)
}

%region_19.1586 (reduce_sum.1583: f32[], reduce_sum.1584: f32[]) -> f32[] {
  %reduce_sum.1583 = f32[] parameter(0)
  %reduce_sum.1584 = f32[] parameter(1)
  ROOT %reduce_sum.1585 = f32[] add(%reduce_sum.1583, %reduce_sum.1584)
}

%region_20.1595.clone (scatter-add.4: bf16[], scatter-add.5: bf16[]) -> bf16[] {
  %scatter-add.4 = bf16[] parameter(0)
  %scatter-add.5 = bf16[] parameter(1)
  ROOT %add.913 = bf16[] add(%scatter-add.4, %scatter-add.5)
}

%region_21.1607 (reduce_window_sum.1604: s32[], reduce_window_sum.1605: s32[]) -> s32[] {
  %reduce_window_sum.1604 = s32[] parameter(0)
  %reduce_window_sum.1605 = s32[] parameter(1)
  ROOT %reduce_window_sum.1606 = s32[] add(%reduce_window_sum.1604, %reduce_window_sum.1605)
}

%region_22.1616 (reduce_sum.1613: s32[], reduce_sum.1614: s32[]) -> s32[] {
  %reduce_sum.1613 = s32[] parameter(0)
  %reduce_sum.1614 = s32[] parameter(1)
  ROOT %reduce_sum.1615 = s32[] add(%reduce_sum.1613, %reduce_sum.1614)
}

%region_23.1626 (reduce_sum.1623: s32[], reduce_sum.1624: s32[]) -> s32[] {
  %reduce_sum.1623 = s32[] parameter(0)
  %reduce_sum.1624 = s32[] parameter(1)
  ROOT %reduce_sum.1625 = s32[] add(%reduce_sum.1623, %reduce_sum.1624)
}

%region_24.1668 (reduce_sum.1665: f32[], reduce_sum.1666: f32[]) -> f32[] {
  %reduce_sum.1665 = f32[] parameter(0)
  %reduce_sum.1666 = f32[] parameter(1)
  ROOT %reduce_sum.1667 = f32[] add(%reduce_sum.1665, %reduce_sum.1666)
}

%region_28.1792 (reduce_sum.1789: f32[], reduce_sum.1790: f32[]) -> f32[] {
  %reduce_sum.1789 = f32[] parameter(0)
  %reduce_sum.1790 = f32[] parameter(1)
  ROOT %reduce_sum.1791 = f32[] add(%reduce_sum.1789, %reduce_sum.1790)
}

%compare_greater_than.1.1811.clone (p.0.lhs.68: bf16[], p.0.rhs.68: bf16[], p.1.lhs.68: s32[], p.1.rhs.68: s32[]) -> pred[] {
  %p.1.lhs.68 = s32[] parameter(2)
  %p.1.rhs.68 = s32[] parameter(3)
  %p.0.lhs.68 = bf16[] parameter(0)
  %p.0.rhs.68 = bf16[] parameter(1)
  ROOT %compare.72 = pred[] compare(%p.0.lhs.68, %p.0.rhs.68), direction=GT, type=TOTALORDER
}

%compare-value-and-index.1 (p.0.lhs.69: bf16[], p.0.rhs.69: bf16[], p.1.lhs.69: s32[], p.1.rhs.69: s32[]) -> pred[] {
  %p.0.lhs.69 = bf16[] parameter(0)
  %p.0.rhs.69 = bf16[] parameter(1)
  %compare.74 = pred[] compare(%p.0.lhs.69, %p.0.rhs.69), direction=EQ, type=TOTALORDER
  %p.1.lhs.69 = s32[] parameter(2)
  %p.1.rhs.69 = s32[] parameter(3)
  %compare.75 = pred[] compare(%p.1.lhs.69, %p.1.rhs.69), direction=LT
  %compare.73 = pred[] compare(%p.0.lhs.69, %p.0.rhs.69), direction=GT
  ROOT %select.69 = pred[] select(%compare.74, %compare.75, %compare.73)
}

%region_29.1839.clone (scatter.5: u32[], scatter.6: u32[]) -> u32[] {
  %scatter.5 = u32[] parameter(0)
  ROOT %scatter.6 = u32[] parameter(1)
}

%region_30.1848 (reduce_max.1845: f32[], reduce_max.1846: f32[]) -> f32[] {
  %reduce_max.1845 = f32[] parameter(0)
  %reduce_max.1846 = f32[] parameter(1)
  ROOT %reduce_max.1847 = f32[] maximum(%reduce_max.1845, %reduce_max.1846)
}

%region_31.1857 (reduce_sum.1854: f32[], reduce_sum.1855: f32[]) -> f32[] {
  %reduce_sum.1854 = f32[] parameter(0)
  %reduce_sum.1855 = f32[] parameter(1)
  ROOT %reduce_sum.1856 = f32[] add(%reduce_sum.1854, %reduce_sum.1855)
}

%region_32.1866.clone (scatter-add.6: bf16[], scatter-add.7: bf16[]) -> bf16[] {
  %scatter-add.6 = bf16[] parameter(0)
  %scatter-add.7 = bf16[] parameter(1)
  ROOT %add.914 = bf16[] add(%scatter-add.6, %scatter-add.7)
}

%region_33.1878 (reduce_window_sum.1875: s32[], reduce_window_sum.1876: s32[]) -> s32[] {
  %reduce_window_sum.1875 = s32[] parameter(0)
  %reduce_window_sum.1876 = s32[] parameter(1)
  ROOT %reduce_window_sum.1877 = s32[] add(%reduce_window_sum.1875, %reduce_window_sum.1876)
}

%region_34.1887 (reduce_sum.1884: s32[], reduce_sum.1885: s32[]) -> s32[] {
  %reduce_sum.1884 = s32[] parameter(0)
  %reduce_sum.1885 = s32[] parameter(1)
  ROOT %reduce_sum.1886 = s32[] add(%reduce_sum.1884, %reduce_sum.1885)
}

%region_35.1897 (reduce_sum.1894: s32[], reduce_sum.1895: s32[]) -> s32[] {
  %reduce_sum.1894 = s32[] parameter(0)
  %reduce_sum.1895 = s32[] parameter(1)
  ROOT %reduce_sum.1896 = s32[] add(%reduce_sum.1894, %reduce_sum.1895)
}

%region_36.1939 (reduce_sum.1936: f32[], reduce_sum.1937: f32[]) -> f32[] {
  %reduce_sum.1936 = f32[] parameter(0)
  %reduce_sum.1937 = f32[] parameter(1)
  ROOT %reduce_sum.1938 = f32[] add(%reduce_sum.1936, %reduce_sum.1937)
}

%region_40.2063 (reduce_sum.2060: f32[], reduce_sum.2061: f32[]) -> f32[] {
  %reduce_sum.2060 = f32[] parameter(0)
  %reduce_sum.2061 = f32[] parameter(1)
  ROOT %reduce_sum.2062 = f32[] add(%reduce_sum.2060, %reduce_sum.2061)
}

%compare_greater_than.2.2082.clone (p.0.lhs.70: bf16[], p.0.rhs.70: bf16[], p.1.lhs.70: s32[], p.1.rhs.70: s32[]) -> pred[] {
  %p.1.lhs.70 = s32[] parameter(2)
  %p.1.rhs.70 = s32[] parameter(3)
  %p.0.lhs.70 = bf16[] parameter(0)
  %p.0.rhs.70 = bf16[] parameter(1)
  ROOT %compare.76 = pred[] compare(%p.0.lhs.70, %p.0.rhs.70), direction=GT, type=TOTALORDER
}

%compare-value-and-index.2 (p.0.lhs.71: bf16[], p.0.rhs.71: bf16[], p.1.lhs.71: s32[], p.1.rhs.71: s32[]) -> pred[] {
  %p.0.lhs.71 = bf16[] parameter(0)
  %p.0.rhs.71 = bf16[] parameter(1)
  %compare.78 = pred[] compare(%p.0.lhs.71, %p.0.rhs.71), direction=EQ, type=TOTALORDER
  %p.1.lhs.71 = s32[] parameter(2)
  %p.1.rhs.71 = s32[] parameter(3)
  %compare.79 = pred[] compare(%p.1.lhs.71, %p.1.rhs.71), direction=LT
  %compare.77 = pred[] compare(%p.0.lhs.71, %p.0.rhs.71), direction=GT
  ROOT %select.70 = pred[] select(%compare.78, %compare.79, %compare.77)
}

%region_41.2110.clone (scatter.7: u32[], scatter.8: u32[]) -> u32[] {
  %scatter.7 = u32[] parameter(0)
  ROOT %scatter.8 = u32[] parameter(1)
}

%region_42.2119 (reduce_max.2116: f32[], reduce_max.2117: f32[]) -> f32[] {
  %reduce_max.2116 = f32[] parameter(0)
  %reduce_max.2117 = f32[] parameter(1)
  ROOT %reduce_max.2118 = f32[] maximum(%reduce_max.2116, %reduce_max.2117)
}

%region_43.2128 (reduce_sum.2125: f32[], reduce_sum.2126: f32[]) -> f32[] {
  %reduce_sum.2125 = f32[] parameter(0)
  %reduce_sum.2126 = f32[] parameter(1)
  ROOT %reduce_sum.3 = f32[] add(%reduce_sum.2125, %reduce_sum.2126)
}

%region_44.2137.clone (scatter-add.8: bf16[], scatter-add.9: bf16[]) -> bf16[] {
  %scatter-add.8 = bf16[] parameter(0)
  %scatter-add.9 = bf16[] parameter(1)
  ROOT %add.915 = bf16[] add(%scatter-add.8, %scatter-add.9)
}

%region_45.2149 (reduce_window_sum.2146: s32[], reduce_window_sum.2147: s32[]) -> s32[] {
  %reduce_window_sum.2146 = s32[] parameter(0)
  %reduce_window_sum.2147 = s32[] parameter(1)
  ROOT %reduce_window_sum.2148 = s32[] add(%reduce_window_sum.2146, %reduce_window_sum.2147)
}

%region_46.2158 (reduce_sum.2155: s32[], reduce_sum.2156: s32[]) -> s32[] {
  %reduce_sum.2155 = s32[] parameter(0)
  %reduce_sum.2156 = s32[] parameter(1)
  ROOT %reduce_sum.2157 = s32[] add(%reduce_sum.2155, %reduce_sum.2156)
}

%region_47.2168 (reduce_sum.2165: s32[], reduce_sum.2166: s32[]) -> s32[] {
  %reduce_sum.2165 = s32[] parameter(0)
  %reduce_sum.2166 = s32[] parameter(1)
  ROOT %reduce_sum.2167 = s32[] add(%reduce_sum.2165, %reduce_sum.2166)
}

%region_48.2210 (reduce_sum.2207: f32[], reduce_sum.2208: f32[]) -> f32[] {
  %reduce_sum.2207 = f32[] parameter(0)
  %reduce_sum.2208 = f32[] parameter(1)
  ROOT %reduce_sum.2209 = f32[] add(%reduce_sum.2207, %reduce_sum.2208)
}

%region_52.2334 (reduce_sum.2331: f32[], reduce_sum.2332: f32[]) -> f32[] {
  %reduce_sum.2331 = f32[] parameter(0)
  %reduce_sum.2332 = f32[] parameter(1)
  ROOT %reduce_sum.2333 = f32[] add(%reduce_sum.2331, %reduce_sum.2332)
}

%compare_greater_than.3.2353.clone (p.0.lhs.72: bf16[], p.0.rhs.72: bf16[], p.1.lhs.72: s32[], p.1.rhs.72: s32[]) -> pred[] {
  %p.1.lhs.72 = s32[] parameter(2)
  %p.1.rhs.72 = s32[] parameter(3)
  %p.0.lhs.72 = bf16[] parameter(0)
  %p.0.rhs.72 = bf16[] parameter(1)
  ROOT %compare.80 = pred[] compare(%p.0.lhs.72, %p.0.rhs.72), direction=GT, type=TOTALORDER
}

%compare-value-and-index.3 (p.0.lhs.73: bf16[], p.0.rhs.73: bf16[], p.1.lhs.73: s32[], p.1.rhs.73: s32[]) -> pred[] {
  %p.0.lhs.73 = bf16[] parameter(0)
  %p.0.rhs.73 = bf16[] parameter(1)
  %compare.82 = pred[] compare(%p.0.lhs.73, %p.0.rhs.73), direction=EQ, type=TOTALORDER
  %p.1.lhs.73 = s32[] parameter(2)
  %p.1.rhs.73 = s32[] parameter(3)
  %compare.83 = pred[] compare(%p.1.lhs.73, %p.1.rhs.73), direction=LT
  %compare.81 = pred[] compare(%p.0.lhs.73, %p.0.rhs.73), direction=GT
  ROOT %select.71 = pred[] select(%compare.82, %compare.83, %compare.81)
}

%region_53.2381.clone (scatter.9: u32[], scatter.10: u32[]) -> u32[] {
  %scatter.9 = u32[] parameter(0)
  ROOT %scatter.10 = u32[] parameter(1)
}

%region_54.2390 (reduce_max.2387: f32[], reduce_max.2388: f32[]) -> f32[] {
  %reduce_max.2387 = f32[] parameter(0)
  %reduce_max.2388 = f32[] parameter(1)
  ROOT %reduce_max.2389 = f32[] maximum(%reduce_max.2387, %reduce_max.2388)
}

%region_55.2399 (reduce_sum.4: f32[], reduce_sum.2397: f32[]) -> f32[] {
  %reduce_sum.4 = f32[] parameter(0)
  %reduce_sum.2397 = f32[] parameter(1)
  ROOT %reduce_sum.2398 = f32[] add(%reduce_sum.4, %reduce_sum.2397)
}

%region_56.2408.clone (scatter-add.10: bf16[], scatter-add.11: bf16[]) -> bf16[] {
  %scatter-add.10 = bf16[] parameter(0)
  %scatter-add.11 = bf16[] parameter(1)
  ROOT %add.916 = bf16[] add(%scatter-add.10, %scatter-add.11)
}

%region_57.2420 (reduce_window_sum.2417: s32[], reduce_window_sum.2418: s32[]) -> s32[] {
  %reduce_window_sum.2417 = s32[] parameter(0)
  %reduce_window_sum.2418 = s32[] parameter(1)
  ROOT %reduce_window_sum.2419 = s32[] add(%reduce_window_sum.2417, %reduce_window_sum.2418)
}

%region_58.2429 (reduce_sum.2426: s32[], reduce_sum.2427: s32[]) -> s32[] {
  %reduce_sum.2426 = s32[] parameter(0)
  %reduce_sum.2427 = s32[] parameter(1)
  ROOT %reduce_sum.2428 = s32[] add(%reduce_sum.2426, %reduce_sum.2427)
}

%region_59.2439 (reduce_sum.2436: s32[], reduce_sum.2437: s32[]) -> s32[] {
  %reduce_sum.2436 = s32[] parameter(0)
  %reduce_sum.2437 = s32[] parameter(1)
  ROOT %reduce_sum.2438 = s32[] add(%reduce_sum.2436, %reduce_sum.2437)
}

%region_60.2481 (reduce_sum.2478: f32[], reduce_sum.2479: f32[]) -> f32[] {
  %reduce_sum.2478 = f32[] parameter(0)
  %reduce_sum.2479 = f32[] parameter(1)
  ROOT %reduce_sum.2480 = f32[] add(%reduce_sum.2478, %reduce_sum.2479)
}

%region_64.2605 (reduce_sum.2602: f32[], reduce_sum.2603: f32[]) -> f32[] {
  %reduce_sum.2602 = f32[] parameter(0)
  %reduce_sum.2603 = f32[] parameter(1)
  ROOT %reduce_sum.2604 = f32[] add(%reduce_sum.2602, %reduce_sum.2603)
}

%compare_greater_than.4.2624.clone (p.0.lhs.74: bf16[], p.0.rhs.74: bf16[], p.1.lhs.74: s32[], p.1.rhs.74: s32[]) -> pred[] {
  %p.1.lhs.74 = s32[] parameter(2)
  %p.1.rhs.74 = s32[] parameter(3)
  %p.0.lhs.74 = bf16[] parameter(0)
  %p.0.rhs.74 = bf16[] parameter(1)
  ROOT %compare.84 = pred[] compare(%p.0.lhs.74, %p.0.rhs.74), direction=GT, type=TOTALORDER
}

%compare-value-and-index.4 (p.0.lhs.75: bf16[], p.0.rhs.75: bf16[], p.1.lhs.75: s32[], p.1.rhs.75: s32[]) -> pred[] {
  %p.0.lhs.75 = bf16[] parameter(0)
  %p.0.rhs.75 = bf16[] parameter(1)
  %compare.86 = pred[] compare(%p.0.lhs.75, %p.0.rhs.75), direction=EQ, type=TOTALORDER
  %p.1.lhs.75 = s32[] parameter(2)
  %p.1.rhs.75 = s32[] parameter(3)
  %compare.87 = pred[] compare(%p.1.lhs.75, %p.1.rhs.75), direction=LT
  %compare.85 = pred[] compare(%p.0.lhs.75, %p.0.rhs.75), direction=GT
  ROOT %select.72 = pred[] select(%compare.86, %compare.87, %compare.85)
}

%region_65.2652.clone (scatter.11: u32[], scatter.12: u32[]) -> u32[] {
  %scatter.11 = u32[] parameter(0)
  ROOT %scatter.12 = u32[] parameter(1)
}

%region_66.2661 (reduce_max.2658: f32[], reduce_max.2659: f32[]) -> f32[] {
  %reduce_max.2658 = f32[] parameter(0)
  %reduce_max.2659 = f32[] parameter(1)
  ROOT %reduce_max.2660 = f32[] maximum(%reduce_max.2658, %reduce_max.2659)
}

%region_67.2670 (reduce_sum.2667: f32[], reduce_sum.2668: f32[]) -> f32[] {
  %reduce_sum.2667 = f32[] parameter(0)
  %reduce_sum.2668 = f32[] parameter(1)
  ROOT %reduce_sum.2669 = f32[] add(%reduce_sum.2667, %reduce_sum.2668)
}

%region_68.2679.clone (scatter-add.12: bf16[], scatter-add.13: bf16[]) -> bf16[] {
  %scatter-add.12 = bf16[] parameter(0)
  %scatter-add.13 = bf16[] parameter(1)
  ROOT %add.917 = bf16[] add(%scatter-add.12, %scatter-add.13)
}

%region_69.2691 (reduce_window_sum.2688: s32[], reduce_window_sum.2689: s32[]) -> s32[] {
  %reduce_window_sum.2688 = s32[] parameter(0)
  %reduce_window_sum.2689 = s32[] parameter(1)
  ROOT %reduce_window_sum.2690 = s32[] add(%reduce_window_sum.2688, %reduce_window_sum.2689)
}

%region_70.2700 (reduce_sum.7: s32[], reduce_sum.8: s32[]) -> s32[] {
  %reduce_sum.7 = s32[] parameter(0)
  %reduce_sum.8 = s32[] parameter(1)
  ROOT %reduce_sum.2699 = s32[] add(%reduce_sum.7, %reduce_sum.8)
}

%region_71.2710 (reduce_sum.2707: s32[], reduce_sum.2708: s32[]) -> s32[] {
  %reduce_sum.2707 = s32[] parameter(0)
  %reduce_sum.2708 = s32[] parameter(1)
  ROOT %reduce_sum.2709 = s32[] add(%reduce_sum.2707, %reduce_sum.2708)
}

%region_72.2752 (reduce_sum.2749: f32[], reduce_sum.2750: f32[]) -> f32[] {
  %reduce_sum.2749 = f32[] parameter(0)
  %reduce_sum.2750 = f32[] parameter(1)
  ROOT %reduce_sum.2751 = f32[] add(%reduce_sum.2749, %reduce_sum.2750)
}

%region_76.2876 (reduce_sum.2873: f32[], reduce_sum.2874: f32[]) -> f32[] {
  %reduce_sum.2873 = f32[] parameter(0)
  %reduce_sum.2874 = f32[] parameter(1)
  ROOT %reduce_sum.9 = f32[] add(%reduce_sum.2873, %reduce_sum.2874)
}

%compare_greater_than.5.2895.clone (p.0.lhs.76: bf16[], p.0.rhs.76: bf16[], p.1.lhs.76: s32[], p.1.rhs.76: s32[]) -> pred[] {
  %p.1.lhs.76 = s32[] parameter(2)
  %p.1.rhs.76 = s32[] parameter(3)
  %p.0.lhs.76 = bf16[] parameter(0)
  %p.0.rhs.76 = bf16[] parameter(1)
  ROOT %compare.88 = pred[] compare(%p.0.lhs.76, %p.0.rhs.76), direction=GT, type=TOTALORDER
}

%compare-value-and-index.5 (p.0.lhs.77: bf16[], p.0.rhs.77: bf16[], p.1.lhs.77: s32[], p.1.rhs.77: s32[]) -> pred[] {
  %p.0.lhs.77 = bf16[] parameter(0)
  %p.0.rhs.77 = bf16[] parameter(1)
  %compare.90 = pred[] compare(%p.0.lhs.77, %p.0.rhs.77), direction=EQ, type=TOTALORDER
  %p.1.lhs.77 = s32[] parameter(2)
  %p.1.rhs.77 = s32[] parameter(3)
  %compare.91 = pred[] compare(%p.1.lhs.77, %p.1.rhs.77), direction=LT
  %compare.89 = pred[] compare(%p.0.lhs.77, %p.0.rhs.77), direction=GT
  ROOT %select.73 = pred[] select(%compare.90, %compare.91, %compare.89)
}

%region_77.2923.clone (scatter.13: u32[], scatter.14: u32[]) -> u32[] {
  %scatter.13 = u32[] parameter(0)
  ROOT %scatter.14 = u32[] parameter(1)
}

%region_78.2932 (reduce_max.2929: f32[], reduce_max.2930: f32[]) -> f32[] {
  %reduce_max.2929 = f32[] parameter(0)
  %reduce_max.2930 = f32[] parameter(1)
  ROOT %reduce_max.2931 = f32[] maximum(%reduce_max.2929, %reduce_max.2930)
}

%region_79.2941 (reduce_sum.2938: f32[], reduce_sum.2939: f32[]) -> f32[] {
  %reduce_sum.2938 = f32[] parameter(0)
  %reduce_sum.2939 = f32[] parameter(1)
  ROOT %reduce_sum.2940 = f32[] add(%reduce_sum.2938, %reduce_sum.2939)
}

%region_80.2950.clone (scatter-add.14: bf16[], scatter-add.15: bf16[]) -> bf16[] {
  %scatter-add.14 = bf16[] parameter(0)
  %scatter-add.15 = bf16[] parameter(1)
  ROOT %add.918 = bf16[] add(%scatter-add.14, %scatter-add.15)
}

%region_81.2962 (reduce_window_sum.2959: s32[], reduce_window_sum.2960: s32[]) -> s32[] {
  %reduce_window_sum.2959 = s32[] parameter(0)
  %reduce_window_sum.2960 = s32[] parameter(1)
  ROOT %reduce_window_sum.2961 = s32[] add(%reduce_window_sum.2959, %reduce_window_sum.2960)
}

%region_82.2971 (reduce_sum.2968: s32[], reduce_sum.2969: s32[]) -> s32[] {
  %reduce_sum.2968 = s32[] parameter(0)
  %reduce_sum.2969 = s32[] parameter(1)
  ROOT %reduce_sum.2970 = s32[] add(%reduce_sum.2968, %reduce_sum.2969)
}

%region_83.2981 (reduce_sum.2978: s32[], reduce_sum.2979: s32[]) -> s32[] {
  %reduce_sum.2978 = s32[] parameter(0)
  %reduce_sum.2979 = s32[] parameter(1)
  ROOT %reduce_sum.2980 = s32[] add(%reduce_sum.2978, %reduce_sum.2979)
}

%region_84.3023 (reduce_sum.3020: f32[], reduce_sum.3021: f32[]) -> f32[] {
  %reduce_sum.3020 = f32[] parameter(0)
  %reduce_sum.3021 = f32[] parameter(1)
  ROOT %reduce_sum.3022 = f32[] add(%reduce_sum.3020, %reduce_sum.3021)
}

%region_88.3147 (reduce_sum.3144: f32[], reduce_sum.3145: f32[]) -> f32[] {
  %reduce_sum.3144 = f32[] parameter(0)
  %reduce_sum.3145 = f32[] parameter(1)
  ROOT %reduce_sum.3146 = f32[] add(%reduce_sum.3144, %reduce_sum.3145)
}

%compare_greater_than.7.3166.clone (p.0.lhs.78: bf16[], p.0.rhs.78: bf16[], p.1.lhs.78: s32[], p.1.rhs.78: s32[]) -> pred[] {
  %p.1.lhs.78 = s32[] parameter(2)
  %p.1.rhs.78 = s32[] parameter(3)
  %p.0.lhs.78 = bf16[] parameter(0)
  %p.0.rhs.78 = bf16[] parameter(1)
  ROOT %compare.92 = pred[] compare(%p.0.lhs.78, %p.0.rhs.78), direction=GT, type=TOTALORDER
}

%compare-value-and-index.6 (p.0.lhs.79: bf16[], p.0.rhs.79: bf16[], p.1.lhs.79: s32[], p.1.rhs.79: s32[]) -> pred[] {
  %p.0.lhs.79 = bf16[] parameter(0)
  %p.0.rhs.79 = bf16[] parameter(1)
  %compare.94 = pred[] compare(%p.0.lhs.79, %p.0.rhs.79), direction=EQ, type=TOTALORDER
  %p.1.lhs.79 = s32[] parameter(2)
  %p.1.rhs.79 = s32[] parameter(3)
  %compare.95 = pred[] compare(%p.1.lhs.79, %p.1.rhs.79), direction=LT
  %compare.93 = pred[] compare(%p.0.lhs.79, %p.0.rhs.79), direction=GT
  ROOT %select.74 = pred[] select(%compare.94, %compare.95, %compare.93)
}

%region_89.3194.clone (scatter.15: u32[], scatter.16: u32[]) -> u32[] {
  %scatter.15 = u32[] parameter(0)
  ROOT %scatter.16 = u32[] parameter(1)
}

%region_90.3203 (reduce_max.3200: f32[], reduce_max.3201: f32[]) -> f32[] {
  %reduce_max.3200 = f32[] parameter(0)
  %reduce_max.3201 = f32[] parameter(1)
  ROOT %reduce_max.3202 = f32[] maximum(%reduce_max.3200, %reduce_max.3201)
}

%region_91.3212 (reduce_sum.3209: f32[], reduce_sum.3210: f32[]) -> f32[] {
  %reduce_sum.3209 = f32[] parameter(0)
  %reduce_sum.3210 = f32[] parameter(1)
  ROOT %reduce_sum.3211 = f32[] add(%reduce_sum.3209, %reduce_sum.3210)
}

%region_92.3221.clone (scatter-add.16: bf16[], scatter-add.17: bf16[]) -> bf16[] {
  %scatter-add.16 = bf16[] parameter(0)
  %scatter-add.17 = bf16[] parameter(1)
  ROOT %add.919 = bf16[] add(%scatter-add.16, %scatter-add.17)
}

%region_93.3233 (reduce_window_sum.3230: s32[], reduce_window_sum.3231: s32[]) -> s32[] {
  %reduce_window_sum.3230 = s32[] parameter(0)
  %reduce_window_sum.3231 = s32[] parameter(1)
  ROOT %reduce_window_sum.3232 = s32[] add(%reduce_window_sum.3230, %reduce_window_sum.3231)
}

%region_94.3242 (reduce_sum.10: s32[], reduce_sum.3240: s32[]) -> s32[] {
  %reduce_sum.10 = s32[] parameter(0)
  %reduce_sum.3240 = s32[] parameter(1)
  ROOT %reduce_sum.11 = s32[] add(%reduce_sum.10, %reduce_sum.3240)
}

%region_95.3252 (reduce_sum.3249: s32[], reduce_sum.3250: s32[]) -> s32[] {
  %reduce_sum.3249 = s32[] parameter(0)
  %reduce_sum.3250 = s32[] parameter(1)
  ROOT %reduce_sum.3251 = s32[] add(%reduce_sum.3249, %reduce_sum.3250)
}

%region_96.3294 (reduce_sum.3291: f32[], reduce_sum.3292: f32[]) -> f32[] {
  %reduce_sum.3291 = f32[] parameter(0)
  %reduce_sum.3292 = f32[] parameter(1)
  ROOT %reduce_sum.3293 = f32[] add(%reduce_sum.3291, %reduce_sum.3292)
}

%region_100.3418 (reduce_sum.3415: f32[], reduce_sum.3416: f32[]) -> f32[] {
  %reduce_sum.3415 = f32[] parameter(0)
  %reduce_sum.3416 = f32[] parameter(1)
  ROOT %reduce_sum.3417 = f32[] add(%reduce_sum.3415, %reduce_sum.3416)
}

%compare_greater_than.8.3437.clone (p.0.lhs.80: bf16[], p.0.rhs.80: bf16[], p.1.lhs.80: s32[], p.1.rhs.80: s32[]) -> pred[] {
  %p.1.lhs.80 = s32[] parameter(2)
  %p.1.rhs.80 = s32[] parameter(3)
  %p.0.lhs.80 = bf16[] parameter(0)
  %p.0.rhs.80 = bf16[] parameter(1)
  ROOT %compare.96 = pred[] compare(%p.0.lhs.80, %p.0.rhs.80), direction=GT, type=TOTALORDER
}

%compare-value-and-index.7 (p.0.lhs.81: bf16[], p.0.rhs.81: bf16[], p.1.lhs.81: s32[], p.1.rhs.81: s32[]) -> pred[] {
  %p.0.lhs.81 = bf16[] parameter(0)
  %p.0.rhs.81 = bf16[] parameter(1)
  %compare.98 = pred[] compare(%p.0.lhs.81, %p.0.rhs.81), direction=EQ, type=TOTALORDER
  %p.1.lhs.81 = s32[] parameter(2)
  %p.1.rhs.81 = s32[] parameter(3)
  %compare.99 = pred[] compare(%p.1.lhs.81, %p.1.rhs.81), direction=LT
  %compare.97 = pred[] compare(%p.0.lhs.81, %p.0.rhs.81), direction=GT
  ROOT %select.75 = pred[] select(%compare.98, %compare.99, %compare.97)
}

%region_101.3465.clone (scatter.17: u32[], scatter.18: u32[]) -> u32[] {
  %scatter.17 = u32[] parameter(0)
  ROOT %scatter.18 = u32[] parameter(1)
}

%region_102.3474 (reduce_max.3471: f32[], reduce_max.3472: f32[]) -> f32[] {
  %reduce_max.3471 = f32[] parameter(0)
  %reduce_max.3472 = f32[] parameter(1)
  ROOT %reduce_max.3473 = f32[] maximum(%reduce_max.3471, %reduce_max.3472)
}

%region_103.3483 (reduce_sum.3480: f32[], reduce_sum.3481: f32[]) -> f32[] {
  %reduce_sum.3480 = f32[] parameter(0)
  %reduce_sum.3481 = f32[] parameter(1)
  ROOT %reduce_sum.3482 = f32[] add(%reduce_sum.3480, %reduce_sum.3481)
}

%region_104.3492.clone (scatter-add.18: bf16[], scatter-add.19: bf16[]) -> bf16[] {
  %scatter-add.18 = bf16[] parameter(0)
  %scatter-add.19 = bf16[] parameter(1)
  ROOT %add.920 = bf16[] add(%scatter-add.18, %scatter-add.19)
}

%region_105.3504 (reduce_window_sum.3501: s32[], reduce_window_sum.3502: s32[]) -> s32[] {
  %reduce_window_sum.3501 = s32[] parameter(0)
  %reduce_window_sum.3502 = s32[] parameter(1)
  ROOT %reduce_window_sum.3503 = s32[] add(%reduce_window_sum.3501, %reduce_window_sum.3502)
}

%region_106.3513 (reduce_sum.3510: s32[], reduce_sum.3511: s32[]) -> s32[] {
  %reduce_sum.3510 = s32[] parameter(0)
  %reduce_sum.3511 = s32[] parameter(1)
  ROOT %reduce_sum.3512 = s32[] add(%reduce_sum.3510, %reduce_sum.3511)
}

%region_107.3523 (reduce_sum.3520: s32[], reduce_sum.3521: s32[]) -> s32[] {
  %reduce_sum.3520 = s32[] parameter(0)
  %reduce_sum.3521 = s32[] parameter(1)
  ROOT %reduce_sum.3522 = s32[] add(%reduce_sum.3520, %reduce_sum.3521)
}

%region_108.3565 (reduce_sum.3562: f32[], reduce_sum.3563: f32[]) -> f32[] {
  %reduce_sum.3562 = f32[] parameter(0)
  %reduce_sum.3563 = f32[] parameter(1)
  ROOT %reduce_sum.3564 = f32[] add(%reduce_sum.3562, %reduce_sum.3563)
}

%region_112.3689 (reduce_sum.3686: f32[], reduce_sum.3687: f32[]) -> f32[] {
  %reduce_sum.3686 = f32[] parameter(0)
  %reduce_sum.3687 = f32[] parameter(1)
  ROOT %reduce_sum.3688 = f32[] add(%reduce_sum.3686, %reduce_sum.3687)
}

%compare_greater_than.9.3708.clone (p.0.lhs.82: bf16[], p.0.rhs.82: bf16[], p.1.lhs.82: s32[], p.1.rhs.82: s32[]) -> pred[] {
  %p.1.lhs.82 = s32[] parameter(2)
  %p.1.rhs.82 = s32[] parameter(3)
  %p.0.lhs.82 = bf16[] parameter(0)
  %p.0.rhs.82 = bf16[] parameter(1)
  ROOT %compare.100 = pred[] compare(%p.0.lhs.82, %p.0.rhs.82), direction=GT, type=TOTALORDER
}

%compare-value-and-index.8 (p.0.lhs.83: bf16[], p.0.rhs.83: bf16[], p.1.lhs.83: s32[], p.1.rhs.83: s32[]) -> pred[] {
  %p.0.lhs.83 = bf16[] parameter(0)
  %p.0.rhs.83 = bf16[] parameter(1)
  %compare.102 = pred[] compare(%p.0.lhs.83, %p.0.rhs.83), direction=EQ, type=TOTALORDER
  %p.1.lhs.83 = s32[] parameter(2)
  %p.1.rhs.83 = s32[] parameter(3)
  %compare.103 = pred[] compare(%p.1.lhs.83, %p.1.rhs.83), direction=LT
  %compare.101 = pred[] compare(%p.0.lhs.83, %p.0.rhs.83), direction=GT
  ROOT %select.76 = pred[] select(%compare.102, %compare.103, %compare.101)
}

%region_113.3736.clone (scatter.19: u32[], scatter.20: u32[]) -> u32[] {
  %scatter.19 = u32[] parameter(0)
  ROOT %scatter.20 = u32[] parameter(1)
}

%region_114.3745 (reduce_max.3742: f32[], reduce_max.3743: f32[]) -> f32[] {
  %reduce_max.3742 = f32[] parameter(0)
  %reduce_max.3743 = f32[] parameter(1)
  ROOT %reduce_max.3744 = f32[] maximum(%reduce_max.3742, %reduce_max.3743)
}

%region_115.3754 (reduce_sum.3751: f32[], reduce_sum.3752: f32[]) -> f32[] {
  %reduce_sum.3751 = f32[] parameter(0)
  %reduce_sum.3752 = f32[] parameter(1)
  ROOT %reduce_sum.3753 = f32[] add(%reduce_sum.3751, %reduce_sum.3752)
}

%region_116.3763.clone (scatter-add.20: bf16[], scatter-add.21: bf16[]) -> bf16[] {
  %scatter-add.20 = bf16[] parameter(0)
  %scatter-add.21 = bf16[] parameter(1)
  ROOT %add.921 = bf16[] add(%scatter-add.20, %scatter-add.21)
}

%region_117.3775 (reduce_window_sum.3772: s32[], reduce_window_sum.3773: s32[]) -> s32[] {
  %reduce_window_sum.3772 = s32[] parameter(0)
  %reduce_window_sum.3773 = s32[] parameter(1)
  ROOT %reduce_window_sum.3774 = s32[] add(%reduce_window_sum.3772, %reduce_window_sum.3773)
}

%region_118.3784 (reduce_sum.12: s32[], reduce_sum.3782: s32[]) -> s32[] {
  %reduce_sum.12 = s32[] parameter(0)
  %reduce_sum.3782 = s32[] parameter(1)
  ROOT %reduce_sum.13 = s32[] add(%reduce_sum.12, %reduce_sum.3782)
}

%region_119.3794 (reduce_sum.14: s32[], reduce_sum.3792: s32[]) -> s32[] {
  %reduce_sum.14 = s32[] parameter(0)
  %reduce_sum.3792 = s32[] parameter(1)
  ROOT %reduce_sum.3793 = s32[] add(%reduce_sum.14, %reduce_sum.3792)
}

%region_120.3836 (reduce_sum.3833: f32[], reduce_sum.3834: f32[]) -> f32[] {
  %reduce_sum.3833 = f32[] parameter(0)
  %reduce_sum.3834 = f32[] parameter(1)
  ROOT %reduce_sum.3835 = f32[] add(%reduce_sum.3833, %reduce_sum.3834)
}

%region_124.3960 (reduce_sum.3957: f32[], reduce_sum.3958: f32[]) -> f32[] {
  %reduce_sum.3957 = f32[] parameter(0)
  %reduce_sum.3958 = f32[] parameter(1)
  ROOT %reduce_sum.3959 = f32[] add(%reduce_sum.3957, %reduce_sum.3958)
}

%compare_greater_than.10.3979.clone (p.0.lhs.84: bf16[], p.0.rhs.84: bf16[], p.1.lhs.84: s32[], p.1.rhs.84: s32[]) -> pred[] {
  %p.1.lhs.84 = s32[] parameter(2)
  %p.1.rhs.84 = s32[] parameter(3)
  %p.0.lhs.84 = bf16[] parameter(0)
  %p.0.rhs.84 = bf16[] parameter(1)
  ROOT %compare.104 = pred[] compare(%p.0.lhs.84, %p.0.rhs.84), direction=GT, type=TOTALORDER
}

%compare-value-and-index.10 (p.0.lhs.85: bf16[], p.0.rhs.85: bf16[], p.1.lhs.85: s32[], p.1.rhs.85: s32[]) -> pred[] {
  %p.0.lhs.85 = bf16[] parameter(0)
  %p.0.rhs.85 = bf16[] parameter(1)
  %compare.106 = pred[] compare(%p.0.lhs.85, %p.0.rhs.85), direction=EQ, type=TOTALORDER
  %p.1.lhs.85 = s32[] parameter(2)
  %p.1.rhs.85 = s32[] parameter(3)
  %compare.107 = pred[] compare(%p.1.lhs.85, %p.1.rhs.85), direction=LT
  %compare.105 = pred[] compare(%p.0.lhs.85, %p.0.rhs.85), direction=GT
  ROOT %select.77 = pred[] select(%compare.106, %compare.107, %compare.105)
}

%region_125.4007.clone (scatter.21: u32[], scatter.22: u32[]) -> u32[] {
  %scatter.21 = u32[] parameter(0)
  ROOT %scatter.22 = u32[] parameter(1)
}

%region_126.4016 (reduce_max.4013: f32[], reduce_max.4014: f32[]) -> f32[] {
  %reduce_max.4013 = f32[] parameter(0)
  %reduce_max.4014 = f32[] parameter(1)
  ROOT %reduce_max.4015 = f32[] maximum(%reduce_max.4013, %reduce_max.4014)
}

%region_127.4025 (reduce_sum.4022: f32[], reduce_sum.4023: f32[]) -> f32[] {
  %reduce_sum.4022 = f32[] parameter(0)
  %reduce_sum.4023 = f32[] parameter(1)
  ROOT %reduce_sum.4024 = f32[] add(%reduce_sum.4022, %reduce_sum.4023)
}

%region_128.4034.clone (scatter-add.22: bf16[], scatter-add.23: bf16[]) -> bf16[] {
  %scatter-add.22 = bf16[] parameter(0)
  %scatter-add.23 = bf16[] parameter(1)
  ROOT %add.922 = bf16[] add(%scatter-add.22, %scatter-add.23)
}

%region_129.4046 (reduce_window_sum.4043: s32[], reduce_window_sum.4044: s32[]) -> s32[] {
  %reduce_window_sum.4043 = s32[] parameter(0)
  %reduce_window_sum.4044 = s32[] parameter(1)
  ROOT %reduce_window_sum.4045 = s32[] add(%reduce_window_sum.4043, %reduce_window_sum.4044)
}

%region_130.4055 (reduce_sum.4052: s32[], reduce_sum.4053: s32[]) -> s32[] {
  %reduce_sum.4052 = s32[] parameter(0)
  %reduce_sum.4053 = s32[] parameter(1)
  ROOT %reduce_sum.4054 = s32[] add(%reduce_sum.4052, %reduce_sum.4053)
}

%region_131.4065 (reduce_sum.4062: s32[], reduce_sum.4063: s32[]) -> s32[] {
  %reduce_sum.4062 = s32[] parameter(0)
  %reduce_sum.4063 = s32[] parameter(1)
  ROOT %reduce_sum.4064 = s32[] add(%reduce_sum.4062, %reduce_sum.4063)
}

%region_132.4107 (reduce_sum.4104: f32[], reduce_sum.4105: f32[]) -> f32[] {
  %reduce_sum.4104 = f32[] parameter(0)
  %reduce_sum.4105 = f32[] parameter(1)
  ROOT %reduce_sum.4106 = f32[] add(%reduce_sum.4104, %reduce_sum.4105)
}

%region_136.4231 (reduce_sum.4228: f32[], reduce_sum.4229: f32[]) -> f32[] {
  %reduce_sum.4228 = f32[] parameter(0)
  %reduce_sum.4229 = f32[] parameter(1)
  ROOT %reduce_sum.4230 = f32[] add(%reduce_sum.4228, %reduce_sum.4229)
}

%compare_greater_than.11.4250.clone (p.0.lhs.86: bf16[], p.0.rhs.86: bf16[], p.1.lhs.86: s32[], p.1.rhs.86: s32[]) -> pred[] {
  %p.1.lhs.86 = s32[] parameter(2)
  %p.1.rhs.86 = s32[] parameter(3)
  %p.0.lhs.86 = bf16[] parameter(0)
  %p.0.rhs.86 = bf16[] parameter(1)
  ROOT %compare.108 = pred[] compare(%p.0.lhs.86, %p.0.rhs.86), direction=GT, type=TOTALORDER
}

%compare-value-and-index.11 (p.0.lhs.87: bf16[], p.0.rhs.87: bf16[], p.1.lhs.87: s32[], p.1.rhs.87: s32[]) -> pred[] {
  %p.0.lhs.87 = bf16[] parameter(0)
  %p.0.rhs.87 = bf16[] parameter(1)
  %compare.110 = pred[] compare(%p.0.lhs.87, %p.0.rhs.87), direction=EQ, type=TOTALORDER
  %p.1.lhs.87 = s32[] parameter(2)
  %p.1.rhs.87 = s32[] parameter(3)
  %compare.111 = pred[] compare(%p.1.lhs.87, %p.1.rhs.87), direction=LT
  %compare.109 = pred[] compare(%p.0.lhs.87, %p.0.rhs.87), direction=GT
  ROOT %select.78 = pred[] select(%compare.110, %compare.111, %compare.109)
}

%region_137.4278.clone (scatter.23: u32[], scatter.24: u32[]) -> u32[] {
  %scatter.23 = u32[] parameter(0)
  ROOT %scatter.24 = u32[] parameter(1)
}

%region_138.4287 (reduce_max.4284: f32[], reduce_max.4285: f32[]) -> f32[] {
  %reduce_max.4284 = f32[] parameter(0)
  %reduce_max.4285 = f32[] parameter(1)
  ROOT %reduce_max.4286 = f32[] maximum(%reduce_max.4284, %reduce_max.4285)
}

%region_139.4296 (reduce_sum.4293: f32[], reduce_sum.4294: f32[]) -> f32[] {
  %reduce_sum.4293 = f32[] parameter(0)
  %reduce_sum.4294 = f32[] parameter(1)
  ROOT %reduce_sum.4295 = f32[] add(%reduce_sum.4293, %reduce_sum.4294)
}

%region_140.4305.clone (scatter-add.24: bf16[], scatter-add.25: bf16[]) -> bf16[] {
  %scatter-add.24 = bf16[] parameter(0)
  %scatter-add.25 = bf16[] parameter(1)
  ROOT %add.923 = bf16[] add(%scatter-add.24, %scatter-add.25)
}

%region_141.4317 (reduce_window_sum.4314: s32[], reduce_window_sum.4315: s32[]) -> s32[] {
  %reduce_window_sum.4314 = s32[] parameter(0)
  %reduce_window_sum.4315 = s32[] parameter(1)
  ROOT %reduce_window_sum.4316 = s32[] add(%reduce_window_sum.4314, %reduce_window_sum.4315)
}

%region_142.4326 (reduce_sum.4323: s32[], reduce_sum.4324: s32[]) -> s32[] {
  %reduce_sum.4323 = s32[] parameter(0)
  %reduce_sum.4324 = s32[] parameter(1)
  ROOT %reduce_sum.4325 = s32[] add(%reduce_sum.4323, %reduce_sum.4324)
}

%region_143.4336 (reduce_sum.4333: s32[], reduce_sum.4334: s32[]) -> s32[] {
  %reduce_sum.4333 = s32[] parameter(0)
  %reduce_sum.4334 = s32[] parameter(1)
  ROOT %reduce_sum.4335 = s32[] add(%reduce_sum.4333, %reduce_sum.4334)
}

%region_144.4378 (reduce_sum.4375: f32[], reduce_sum.4376: f32[]) -> f32[] {
  %reduce_sum.4375 = f32[] parameter(0)
  %reduce_sum.4376 = f32[] parameter(1)
  ROOT %reduce_sum.4377 = f32[] add(%reduce_sum.4375, %reduce_sum.4376)
}

%region_148.4502 (reduce_sum.4499: f32[], reduce_sum.4500: f32[]) -> f32[] {
  %reduce_sum.4499 = f32[] parameter(0)
  %reduce_sum.4500 = f32[] parameter(1)
  ROOT %reduce_sum.4501 = f32[] add(%reduce_sum.4499, %reduce_sum.4500)
}

%compare_greater_than.12.4521.clone (p.0.lhs.88: bf16[], p.0.rhs.88: bf16[], p.1.lhs.88: s32[], p.1.rhs.88: s32[]) -> pred[] {
  %p.1.lhs.88 = s32[] parameter(2)
  %p.1.rhs.88 = s32[] parameter(3)
  %p.0.lhs.88 = bf16[] parameter(0)
  %p.0.rhs.88 = bf16[] parameter(1)
  ROOT %compare.112 = pred[] compare(%p.0.lhs.88, %p.0.rhs.88), direction=GT, type=TOTALORDER
}

%compare-value-and-index.12 (p.0.lhs.89: bf16[], p.0.rhs.89: bf16[], p.1.lhs.89: s32[], p.1.rhs.89: s32[]) -> pred[] {
  %p.0.lhs.89 = bf16[] parameter(0)
  %p.0.rhs.89 = bf16[] parameter(1)
  %compare.114 = pred[] compare(%p.0.lhs.89, %p.0.rhs.89), direction=EQ, type=TOTALORDER
  %p.1.lhs.89 = s32[] parameter(2)
  %p.1.rhs.89 = s32[] parameter(3)
  %compare.115 = pred[] compare(%p.1.lhs.89, %p.1.rhs.89), direction=LT
  %compare.113 = pred[] compare(%p.0.lhs.89, %p.0.rhs.89), direction=GT
  ROOT %select.79 = pred[] select(%compare.114, %compare.115, %compare.113)
}

%region_149.4549.clone (scatter.25: u32[], scatter.26: u32[]) -> u32[] {
  %scatter.25 = u32[] parameter(0)
  ROOT %scatter.26 = u32[] parameter(1)
}

%region_150.4558 (reduce_max.4555: f32[], reduce_max.4556: f32[]) -> f32[] {
  %reduce_max.4555 = f32[] parameter(0)
  %reduce_max.4556 = f32[] parameter(1)
  ROOT %reduce_max.4557 = f32[] maximum(%reduce_max.4555, %reduce_max.4556)
}

%region_151.4567 (reduce_sum.4564: f32[], reduce_sum.4565: f32[]) -> f32[] {
  %reduce_sum.4564 = f32[] parameter(0)
  %reduce_sum.4565 = f32[] parameter(1)
  ROOT %reduce_sum.4566 = f32[] add(%reduce_sum.4564, %reduce_sum.4565)
}

%region_152.4576.clone (scatter-add.26: bf16[], scatter-add.27: bf16[]) -> bf16[] {
  %scatter-add.26 = bf16[] parameter(0)
  %scatter-add.27 = bf16[] parameter(1)
  ROOT %add.924 = bf16[] add(%scatter-add.26, %scatter-add.27)
}

%region_153.4588 (reduce_window_sum.4585: s32[], reduce_window_sum.4586: s32[]) -> s32[] {
  %reduce_window_sum.4585 = s32[] parameter(0)
  %reduce_window_sum.4586 = s32[] parameter(1)
  ROOT %reduce_window_sum.4587 = s32[] add(%reduce_window_sum.4585, %reduce_window_sum.4586)
}

%region_154.4597 (reduce_sum.4594: s32[], reduce_sum.4595: s32[]) -> s32[] {
  %reduce_sum.4594 = s32[] parameter(0)
  %reduce_sum.4595 = s32[] parameter(1)
  ROOT %reduce_sum.4596 = s32[] add(%reduce_sum.4594, %reduce_sum.4595)
}

%region_155.4607 (reduce_sum.4604: s32[], reduce_sum.4605: s32[]) -> s32[] {
  %reduce_sum.4604 = s32[] parameter(0)
  %reduce_sum.4605 = s32[] parameter(1)
  ROOT %reduce_sum.4606 = s32[] add(%reduce_sum.4604, %reduce_sum.4605)
}

%region_156.4649 (reduce_sum.4646: f32[], reduce_sum.4647: f32[]) -> f32[] {
  %reduce_sum.4646 = f32[] parameter(0)
  %reduce_sum.4647 = f32[] parameter(1)
  ROOT %reduce_sum.4648 = f32[] add(%reduce_sum.4646, %reduce_sum.4647)
}

%region_160.4773 (reduce_sum.4770: f32[], reduce_sum.4771: f32[]) -> f32[] {
  %reduce_sum.4770 = f32[] parameter(0)
  %reduce_sum.4771 = f32[] parameter(1)
  ROOT %reduce_sum.4772 = f32[] add(%reduce_sum.4770, %reduce_sum.4771)
}

%compare_greater_than.13.4792.clone (p.0.lhs.90: bf16[], p.0.rhs.90: bf16[], p.1.lhs.90: s32[], p.1.rhs.90: s32[]) -> pred[] {
  %p.1.lhs.90 = s32[] parameter(2)
  %p.1.rhs.90 = s32[] parameter(3)
  %p.0.lhs.90 = bf16[] parameter(0)
  %p.0.rhs.90 = bf16[] parameter(1)
  ROOT %compare.116 = pred[] compare(%p.0.lhs.90, %p.0.rhs.90), direction=GT, type=TOTALORDER
}

%compare-value-and-index.13 (p.0.lhs.91: bf16[], p.0.rhs.91: bf16[], p.1.lhs.91: s32[], p.1.rhs.91: s32[]) -> pred[] {
  %p.0.lhs.91 = bf16[] parameter(0)
  %p.0.rhs.91 = bf16[] parameter(1)
  %compare.118 = pred[] compare(%p.0.lhs.91, %p.0.rhs.91), direction=EQ, type=TOTALORDER
  %p.1.lhs.91 = s32[] parameter(2)
  %p.1.rhs.91 = s32[] parameter(3)
  %compare.119 = pred[] compare(%p.1.lhs.91, %p.1.rhs.91), direction=LT
  %compare.117 = pred[] compare(%p.0.lhs.91, %p.0.rhs.91), direction=GT
  ROOT %select.80 = pred[] select(%compare.118, %compare.119, %compare.117)
}

%region_161.4820.clone (scatter.27: u32[], scatter.28: u32[]) -> u32[] {
  %scatter.27 = u32[] parameter(0)
  ROOT %scatter.28 = u32[] parameter(1)
}

%region_162.4829 (reduce_max.4826: f32[], reduce_max.4827: f32[]) -> f32[] {
  %reduce_max.4826 = f32[] parameter(0)
  %reduce_max.4827 = f32[] parameter(1)
  ROOT %reduce_max.4828 = f32[] maximum(%reduce_max.4826, %reduce_max.4827)
}

%region_163.4838 (reduce_sum.4835: f32[], reduce_sum.4836: f32[]) -> f32[] {
  %reduce_sum.4835 = f32[] parameter(0)
  %reduce_sum.4836 = f32[] parameter(1)
  ROOT %reduce_sum.4837 = f32[] add(%reduce_sum.4835, %reduce_sum.4836)
}

%region_164.4847.clone (scatter-add.28: bf16[], scatter-add.29: bf16[]) -> bf16[] {
  %scatter-add.28 = bf16[] parameter(0)
  %scatter-add.29 = bf16[] parameter(1)
  ROOT %add.925 = bf16[] add(%scatter-add.28, %scatter-add.29)
}

%region_165.4859 (reduce_window_sum.4856: s32[], reduce_window_sum.4857: s32[]) -> s32[] {
  %reduce_window_sum.4856 = s32[] parameter(0)
  %reduce_window_sum.4857 = s32[] parameter(1)
  ROOT %reduce_window_sum.4858 = s32[] add(%reduce_window_sum.4856, %reduce_window_sum.4857)
}

%region_166.4868 (reduce_sum.18: s32[], reduce_sum.4866: s32[]) -> s32[] {
  %reduce_sum.18 = s32[] parameter(0)
  %reduce_sum.4866 = s32[] parameter(1)
  ROOT %reduce_sum.19 = s32[] add(%reduce_sum.18, %reduce_sum.4866)
}

%region_167.4878 (reduce_sum.4875: s32[], reduce_sum.4876: s32[]) -> s32[] {
  %reduce_sum.4875 = s32[] parameter(0)
  %reduce_sum.4876 = s32[] parameter(1)
  ROOT %reduce_sum.4877 = s32[] add(%reduce_sum.4875, %reduce_sum.4876)
}

%region_168.4920 (reduce_sum.4917: f32[], reduce_sum.4918: f32[]) -> f32[] {
  %reduce_sum.4917 = f32[] parameter(0)
  %reduce_sum.4918 = f32[] parameter(1)
  ROOT %reduce_sum.4919 = f32[] add(%reduce_sum.4917, %reduce_sum.4918)
}

%region_172.5044 (reduce_sum.5041: f32[], reduce_sum.5042: f32[]) -> f32[] {
  %reduce_sum.5041 = f32[] parameter(0)
  %reduce_sum.5042 = f32[] parameter(1)
  ROOT %reduce_sum.5043 = f32[] add(%reduce_sum.5041, %reduce_sum.5042)
}

%compare_greater_than.14.5063.clone (p.0.lhs.92: bf16[], p.0.rhs.92: bf16[], p.1.lhs.92: s32[], p.1.rhs.92: s32[]) -> pred[] {
  %p.1.lhs.92 = s32[] parameter(2)
  %p.1.rhs.92 = s32[] parameter(3)
  %p.0.lhs.92 = bf16[] parameter(0)
  %p.0.rhs.92 = bf16[] parameter(1)
  ROOT %compare.120 = pred[] compare(%p.0.lhs.92, %p.0.rhs.92), direction=GT, type=TOTALORDER
}

%compare-value-and-index.14 (p.0.lhs.93: bf16[], p.0.rhs.93: bf16[], p.1.lhs.93: s32[], p.1.rhs.93: s32[]) -> pred[] {
  %p.0.lhs.93 = bf16[] parameter(0)
  %p.0.rhs.93 = bf16[] parameter(1)
  %compare.122 = pred[] compare(%p.0.lhs.93, %p.0.rhs.93), direction=EQ, type=TOTALORDER
  %p.1.lhs.93 = s32[] parameter(2)
  %p.1.rhs.93 = s32[] parameter(3)
  %compare.123 = pred[] compare(%p.1.lhs.93, %p.1.rhs.93), direction=LT
  %compare.121 = pred[] compare(%p.0.lhs.93, %p.0.rhs.93), direction=GT
  ROOT %select.81 = pred[] select(%compare.122, %compare.123, %compare.121)
}

%region_173.5091.clone (scatter.29: u32[], scatter.30: u32[]) -> u32[] {
  %scatter.29 = u32[] parameter(0)
  ROOT %scatter.30 = u32[] parameter(1)
}

%region_174.5100 (reduce_max.5097: f32[], reduce_max.5098: f32[]) -> f32[] {
  %reduce_max.5097 = f32[] parameter(0)
  %reduce_max.5098 = f32[] parameter(1)
  ROOT %reduce_max.5099 = f32[] maximum(%reduce_max.5097, %reduce_max.5098)
}

%region_175.5109 (reduce_sum.5106: f32[], reduce_sum.5107: f32[]) -> f32[] {
  %reduce_sum.5106 = f32[] parameter(0)
  %reduce_sum.5107 = f32[] parameter(1)
  ROOT %reduce_sum.5108 = f32[] add(%reduce_sum.5106, %reduce_sum.5107)
}

%region_176.5118.clone (scatter-add.30: bf16[], scatter-add.31: bf16[]) -> bf16[] {
  %scatter-add.30 = bf16[] parameter(0)
  %scatter-add.31 = bf16[] parameter(1)
  ROOT %add.926 = bf16[] add(%scatter-add.30, %scatter-add.31)
}

%region_177.5130 (reduce_window_sum.5127: s32[], reduce_window_sum.5128: s32[]) -> s32[] {
  %reduce_window_sum.5127 = s32[] parameter(0)
  %reduce_window_sum.5128 = s32[] parameter(1)
  ROOT %reduce_window_sum.5129 = s32[] add(%reduce_window_sum.5127, %reduce_window_sum.5128)
}

%region_178.5139 (reduce_sum.5136: s32[], reduce_sum.5137: s32[]) -> s32[] {
  %reduce_sum.5136 = s32[] parameter(0)
  %reduce_sum.5137 = s32[] parameter(1)
  ROOT %reduce_sum.5138 = s32[] add(%reduce_sum.5136, %reduce_sum.5137)
}

%region_179.5149 (reduce_sum.5146: s32[], reduce_sum.5147: s32[]) -> s32[] {
  %reduce_sum.5146 = s32[] parameter(0)
  %reduce_sum.5147 = s32[] parameter(1)
  ROOT %reduce_sum.5148 = s32[] add(%reduce_sum.5146, %reduce_sum.5147)
}

%region_180.5191 (reduce_sum.5188: f32[], reduce_sum.5189: f32[]) -> f32[] {
  %reduce_sum.5188 = f32[] parameter(0)
  %reduce_sum.5189 = f32[] parameter(1)
  ROOT %reduce_sum.5190 = f32[] add(%reduce_sum.5188, %reduce_sum.5189)
}

%region_184.5315 (reduce_sum.5312: f32[], reduce_sum.5313: f32[]) -> f32[] {
  %reduce_sum.5312 = f32[] parameter(0)
  %reduce_sum.5313 = f32[] parameter(1)
  ROOT %reduce_sum.5314 = f32[] add(%reduce_sum.5312, %reduce_sum.5313)
}

%compare_greater_than.15.5334.clone (p.0.lhs.94: bf16[], p.0.rhs.94: bf16[], p.1.lhs.94: s32[], p.1.rhs.94: s32[]) -> pred[] {
  %p.1.lhs.94 = s32[] parameter(2)
  %p.1.rhs.94 = s32[] parameter(3)
  %p.0.lhs.94 = bf16[] parameter(0)
  %p.0.rhs.94 = bf16[] parameter(1)
  ROOT %compare.124 = pred[] compare(%p.0.lhs.94, %p.0.rhs.94), direction=GT, type=TOTALORDER
}

%compare-value-and-index.15 (p.0.lhs.95: bf16[], p.0.rhs.95: bf16[], p.1.lhs.95: s32[], p.1.rhs.95: s32[]) -> pred[] {
  %p.0.lhs.95 = bf16[] parameter(0)
  %p.0.rhs.95 = bf16[] parameter(1)
  %compare.126 = pred[] compare(%p.0.lhs.95, %p.0.rhs.95), direction=EQ, type=TOTALORDER
  %p.1.lhs.95 = s32[] parameter(2)
  %p.1.rhs.95 = s32[] parameter(3)
  %compare.127 = pred[] compare(%p.1.lhs.95, %p.1.rhs.95), direction=LT
  %compare.125 = pred[] compare(%p.0.lhs.95, %p.0.rhs.95), direction=GT
  ROOT %select.82 = pred[] select(%compare.126, %compare.127, %compare.125)
}

%region_185.5362.clone (scatter.31: u32[], scatter.32: u32[]) -> u32[] {
  %scatter.31 = u32[] parameter(0)
  ROOT %scatter.32 = u32[] parameter(1)
}

%region_186.5371 (reduce_max.5368: f32[], reduce_max.5369: f32[]) -> f32[] {
  %reduce_max.5368 = f32[] parameter(0)
  %reduce_max.5369 = f32[] parameter(1)
  ROOT %reduce_max.5370 = f32[] maximum(%reduce_max.5368, %reduce_max.5369)
}

%region_187.5380 (reduce_sum.5377: f32[], reduce_sum.5378: f32[]) -> f32[] {
  %reduce_sum.5377 = f32[] parameter(0)
  %reduce_sum.5378 = f32[] parameter(1)
  ROOT %reduce_sum.5379 = f32[] add(%reduce_sum.5377, %reduce_sum.5378)
}

%region_188.5389.clone (scatter-add.32: bf16[], scatter-add.33: bf16[]) -> bf16[] {
  %scatter-add.32 = bf16[] parameter(0)
  %scatter-add.33 = bf16[] parameter(1)
  ROOT %add.927 = bf16[] add(%scatter-add.32, %scatter-add.33)
}

%region_189.5401 (reduce_window_sum.5398: s32[], reduce_window_sum.5399: s32[]) -> s32[] {
  %reduce_window_sum.5398 = s32[] parameter(0)
  %reduce_window_sum.5399 = s32[] parameter(1)
  ROOT %reduce_window_sum.5400 = s32[] add(%reduce_window_sum.5398, %reduce_window_sum.5399)
}

%region_190.5410 (reduce_sum.5407: s32[], reduce_sum.5408: s32[]) -> s32[] {
  %reduce_sum.5407 = s32[] parameter(0)
  %reduce_sum.5408 = s32[] parameter(1)
  ROOT %reduce_sum.5409 = s32[] add(%reduce_sum.5407, %reduce_sum.5408)
}

%region_191.5420 (reduce_sum.5417: s32[], reduce_sum.5418: s32[]) -> s32[] {
  %reduce_sum.5417 = s32[] parameter(0)
  %reduce_sum.5418 = s32[] parameter(1)
  ROOT %reduce_sum.5419 = s32[] add(%reduce_sum.5417, %reduce_sum.5418)
}

%region_192.5462 (reduce_sum.5459: f32[], reduce_sum.5460: f32[]) -> f32[] {
  %reduce_sum.5459 = f32[] parameter(0)
  %reduce_sum.5460 = f32[] parameter(1)
  ROOT %reduce_sum.5461 = f32[] add(%reduce_sum.5459, %reduce_sum.5460)
}

%region_196.5586 (reduce_sum.5583: f32[], reduce_sum.5584: f32[]) -> f32[] {
  %reduce_sum.5583 = f32[] parameter(0)
  %reduce_sum.5584 = f32[] parameter(1)
  ROOT %reduce_sum.5585 = f32[] add(%reduce_sum.5583, %reduce_sum.5584)
}

%compare_greater_than.16.5605.clone (p.0.lhs.96: bf16[], p.0.rhs.96: bf16[], p.1.lhs.96: s32[], p.1.rhs.96: s32[]) -> pred[] {
  %p.1.lhs.96 = s32[] parameter(2)
  %p.1.rhs.96 = s32[] parameter(3)
  %p.0.lhs.96 = bf16[] parameter(0)
  %p.0.rhs.96 = bf16[] parameter(1)
  ROOT %compare.128 = pred[] compare(%p.0.lhs.96, %p.0.rhs.96), direction=GT, type=TOTALORDER
}

%compare-value-and-index.16 (p.0.lhs.97: bf16[], p.0.rhs.97: bf16[], p.1.lhs.97: s32[], p.1.rhs.97: s32[]) -> pred[] {
  %p.0.lhs.97 = bf16[] parameter(0)
  %p.0.rhs.97 = bf16[] parameter(1)
  %compare.130 = pred[] compare(%p.0.lhs.97, %p.0.rhs.97), direction=EQ, type=TOTALORDER
  %p.1.lhs.97 = s32[] parameter(2)
  %p.1.rhs.97 = s32[] parameter(3)
  %compare.131 = pred[] compare(%p.1.lhs.97, %p.1.rhs.97), direction=LT
  %compare.129 = pred[] compare(%p.0.lhs.97, %p.0.rhs.97), direction=GT
  ROOT %select.83 = pred[] select(%compare.130, %compare.131, %compare.129)
}

%region_197.5633.clone (scatter.33: u32[], scatter.34: u32[]) -> u32[] {
  %scatter.33 = u32[] parameter(0)
  ROOT %scatter.34 = u32[] parameter(1)
}

%region_198.5642 (reduce_max.5639: f32[], reduce_max.5640: f32[]) -> f32[] {
  %reduce_max.5639 = f32[] parameter(0)
  %reduce_max.5640 = f32[] parameter(1)
  ROOT %reduce_max.5641 = f32[] maximum(%reduce_max.5639, %reduce_max.5640)
}

%region_199.5651 (reduce_sum.5648: f32[], reduce_sum.5649: f32[]) -> f32[] {
  %reduce_sum.5648 = f32[] parameter(0)
  %reduce_sum.5649 = f32[] parameter(1)
  ROOT %reduce_sum.5650 = f32[] add(%reduce_sum.5648, %reduce_sum.5649)
}

%region_200.5660.clone (scatter-add.34: bf16[], scatter-add.35: bf16[]) -> bf16[] {
  %scatter-add.34 = bf16[] parameter(0)
  %scatter-add.35 = bf16[] parameter(1)
  ROOT %add.928 = bf16[] add(%scatter-add.34, %scatter-add.35)
}

%region_201.5672 (reduce_window_sum.5669: s32[], reduce_window_sum.5670: s32[]) -> s32[] {
  %reduce_window_sum.5669 = s32[] parameter(0)
  %reduce_window_sum.5670 = s32[] parameter(1)
  ROOT %reduce_window_sum.5671 = s32[] add(%reduce_window_sum.5669, %reduce_window_sum.5670)
}

%region_202.5681 (reduce_sum.5678: s32[], reduce_sum.5679: s32[]) -> s32[] {
  %reduce_sum.5678 = s32[] parameter(0)
  %reduce_sum.5679 = s32[] parameter(1)
  ROOT %reduce_sum.5680 = s32[] add(%reduce_sum.5678, %reduce_sum.5679)
}

%region_203.5691 (reduce_sum.5688: s32[], reduce_sum.5689: s32[]) -> s32[] {
  %reduce_sum.5688 = s32[] parameter(0)
  %reduce_sum.5689 = s32[] parameter(1)
  ROOT %reduce_sum.5690 = s32[] add(%reduce_sum.5688, %reduce_sum.5689)
}

%region_204.5733 (reduce_sum.5730: f32[], reduce_sum.20: f32[]) -> f32[] {
  %reduce_sum.5730 = f32[] parameter(0)
  %reduce_sum.20 = f32[] parameter(1)
  ROOT %reduce_sum.5732 = f32[] add(%reduce_sum.5730, %reduce_sum.20)
}

%region_208.5857 (reduce_sum.5854: f32[], reduce_sum.5855: f32[]) -> f32[] {
  %reduce_sum.5854 = f32[] parameter(0)
  %reduce_sum.5855 = f32[] parameter(1)
  ROOT %reduce_sum.5856 = f32[] add(%reduce_sum.5854, %reduce_sum.5855)
}

%compare_greater_than.17.5876.clone (p.0.lhs.98: bf16[], p.0.rhs.98: bf16[], p.1.lhs.98: s32[], p.1.rhs.98: s32[]) -> pred[] {
  %p.1.lhs.98 = s32[] parameter(2)
  %p.1.rhs.98 = s32[] parameter(3)
  %p.0.lhs.98 = bf16[] parameter(0)
  %p.0.rhs.98 = bf16[] parameter(1)
  ROOT %compare.132 = pred[] compare(%p.0.lhs.98, %p.0.rhs.98), direction=GT, type=TOTALORDER
}

%compare-value-and-index.17 (p.0.lhs.99: bf16[], p.0.rhs.99: bf16[], p.1.lhs.99: s32[], p.1.rhs.99: s32[]) -> pred[] {
  %p.0.lhs.99 = bf16[] parameter(0)
  %p.0.rhs.99 = bf16[] parameter(1)
  %compare.134 = pred[] compare(%p.0.lhs.99, %p.0.rhs.99), direction=EQ, type=TOTALORDER
  %p.1.lhs.99 = s32[] parameter(2)
  %p.1.rhs.99 = s32[] parameter(3)
  %compare.135 = pred[] compare(%p.1.lhs.99, %p.1.rhs.99), direction=LT
  %compare.133 = pred[] compare(%p.0.lhs.99, %p.0.rhs.99), direction=GT
  ROOT %select.84 = pred[] select(%compare.134, %compare.135, %compare.133)
}

%region_209.5904.clone (scatter.35: u32[], scatter.36: u32[]) -> u32[] {
  %scatter.35 = u32[] parameter(0)
  ROOT %scatter.36 = u32[] parameter(1)
}

%region_210.5913 (reduce_max.5910: f32[], reduce_max.5911: f32[]) -> f32[] {
  %reduce_max.5910 = f32[] parameter(0)
  %reduce_max.5911 = f32[] parameter(1)
  ROOT %reduce_max.5912 = f32[] maximum(%reduce_max.5910, %reduce_max.5911)
}

%region_211.5922 (reduce_sum.21: f32[], reduce_sum.5920: f32[]) -> f32[] {
  %reduce_sum.21 = f32[] parameter(0)
  %reduce_sum.5920 = f32[] parameter(1)
  ROOT %reduce_sum.5921 = f32[] add(%reduce_sum.21, %reduce_sum.5920)
}

%region_212.5931.clone (scatter-add.36: bf16[], scatter-add.37: bf16[]) -> bf16[] {
  %scatter-add.36 = bf16[] parameter(0)
  %scatter-add.37 = bf16[] parameter(1)
  ROOT %add.929 = bf16[] add(%scatter-add.36, %scatter-add.37)
}

%region_213.5943 (reduce_window_sum.5940: s32[], reduce_window_sum.5941: s32[]) -> s32[] {
  %reduce_window_sum.5940 = s32[] parameter(0)
  %reduce_window_sum.5941 = s32[] parameter(1)
  ROOT %reduce_window_sum.5942 = s32[] add(%reduce_window_sum.5940, %reduce_window_sum.5941)
}

%region_214.5952 (reduce_sum.5949: s32[], reduce_sum.5950: s32[]) -> s32[] {
  %reduce_sum.5949 = s32[] parameter(0)
  %reduce_sum.5950 = s32[] parameter(1)
  ROOT %reduce_sum.5951 = s32[] add(%reduce_sum.5949, %reduce_sum.5950)
}

%region_215.5962 (reduce_sum.5959: s32[], reduce_sum.5960: s32[]) -> s32[] {
  %reduce_sum.5959 = s32[] parameter(0)
  %reduce_sum.5960 = s32[] parameter(1)
  ROOT %reduce_sum.5961 = s32[] add(%reduce_sum.5959, %reduce_sum.5960)
}

%region_216.6004 (reduce_sum.6001: f32[], reduce_sum.6002: f32[]) -> f32[] {
  %reduce_sum.6001 = f32[] parameter(0)
  %reduce_sum.6002 = f32[] parameter(1)
  ROOT %reduce_sum.6003 = f32[] add(%reduce_sum.6001, %reduce_sum.6002)
}

%region_220.6128 (reduce_sum.6125: f32[], reduce_sum.6126: f32[]) -> f32[] {
  %reduce_sum.6125 = f32[] parameter(0)
  %reduce_sum.6126 = f32[] parameter(1)
  ROOT %reduce_sum.6127 = f32[] add(%reduce_sum.6125, %reduce_sum.6126)
}

%compare_greater_than.18.6147.clone (p.0.lhs.100: bf16[], p.0.rhs.100: bf16[], p.1.lhs.100: s32[], p.1.rhs.100: s32[]) -> pred[] {
  %p.1.lhs.100 = s32[] parameter(2)
  %p.1.rhs.100 = s32[] parameter(3)
  %p.0.lhs.100 = bf16[] parameter(0)
  %p.0.rhs.100 = bf16[] parameter(1)
  ROOT %compare.136 = pred[] compare(%p.0.lhs.100, %p.0.rhs.100), direction=GT, type=TOTALORDER
}

%compare-value-and-index.18 (p.0.lhs.101: bf16[], p.0.rhs.101: bf16[], p.1.lhs.101: s32[], p.1.rhs.101: s32[]) -> pred[] {
  %p.0.lhs.101 = bf16[] parameter(0)
  %p.0.rhs.101 = bf16[] parameter(1)
  %compare.138 = pred[] compare(%p.0.lhs.101, %p.0.rhs.101), direction=EQ, type=TOTALORDER
  %p.1.lhs.101 = s32[] parameter(2)
  %p.1.rhs.101 = s32[] parameter(3)
  %compare.139 = pred[] compare(%p.1.lhs.101, %p.1.rhs.101), direction=LT
  %compare.137 = pred[] compare(%p.0.lhs.101, %p.0.rhs.101), direction=GT
  ROOT %select.85 = pred[] select(%compare.138, %compare.139, %compare.137)
}

%region_221.6175.clone (scatter.37: u32[], scatter.38: u32[]) -> u32[] {
  %scatter.37 = u32[] parameter(0)
  ROOT %scatter.38 = u32[] parameter(1)
}

%region_222.6184 (reduce_max.6181: f32[], reduce_max.6182: f32[]) -> f32[] {
  %reduce_max.6181 = f32[] parameter(0)
  %reduce_max.6182 = f32[] parameter(1)
  ROOT %reduce_max.6183 = f32[] maximum(%reduce_max.6181, %reduce_max.6182)
}

%region_223.6193 (reduce_sum.6190: f32[], reduce_sum.6191: f32[]) -> f32[] {
  %reduce_sum.6190 = f32[] parameter(0)
  %reduce_sum.6191 = f32[] parameter(1)
  ROOT %reduce_sum.6192 = f32[] add(%reduce_sum.6190, %reduce_sum.6191)
}

%region_224.6202.clone (scatter-add.38: bf16[], scatter-add.39: bf16[]) -> bf16[] {
  %scatter-add.38 = bf16[] parameter(0)
  %scatter-add.39 = bf16[] parameter(1)
  ROOT %add.930 = bf16[] add(%scatter-add.38, %scatter-add.39)
}

%region_225.6214 (reduce_window_sum.6211: s32[], reduce_window_sum.6212: s32[]) -> s32[] {
  %reduce_window_sum.6211 = s32[] parameter(0)
  %reduce_window_sum.6212 = s32[] parameter(1)
  ROOT %reduce_window_sum.6213 = s32[] add(%reduce_window_sum.6211, %reduce_window_sum.6212)
}

%region_226.6223 (reduce_sum.22: s32[], reduce_sum.23: s32[]) -> s32[] {
  %reduce_sum.22 = s32[] parameter(0)
  %reduce_sum.23 = s32[] parameter(1)
  ROOT %reduce_sum.6222 = s32[] add(%reduce_sum.22, %reduce_sum.23)
}

%region_227.6233 (reduce_sum.6230: s32[], reduce_sum.6231: s32[]) -> s32[] {
  %reduce_sum.6230 = s32[] parameter(0)
  %reduce_sum.6231 = s32[] parameter(1)
  ROOT %reduce_sum.6232 = s32[] add(%reduce_sum.6230, %reduce_sum.6231)
}

%region_228.6275 (reduce_sum.6272: f32[], reduce_sum.6273: f32[]) -> f32[] {
  %reduce_sum.6272 = f32[] parameter(0)
  %reduce_sum.6273 = f32[] parameter(1)
  ROOT %reduce_sum.6274 = f32[] add(%reduce_sum.6272, %reduce_sum.6273)
}

%region_232.6399 (reduce_sum.6396: f32[], reduce_sum.6397: f32[]) -> f32[] {
  %reduce_sum.6396 = f32[] parameter(0)
  %reduce_sum.6397 = f32[] parameter(1)
  ROOT %reduce_sum.6398 = f32[] add(%reduce_sum.6396, %reduce_sum.6397)
}

%compare_greater_than.19.6418.clone (p.0.lhs.102: bf16[], p.0.rhs.102: bf16[], p.1.lhs.102: s32[], p.1.rhs.102: s32[]) -> pred[] {
  %p.1.lhs.102 = s32[] parameter(2)
  %p.1.rhs.102 = s32[] parameter(3)
  %p.0.lhs.102 = bf16[] parameter(0)
  %p.0.rhs.102 = bf16[] parameter(1)
  ROOT %compare.140 = pred[] compare(%p.0.lhs.102, %p.0.rhs.102), direction=GT, type=TOTALORDER
}

%compare-value-and-index.19 (p.0.lhs.103: bf16[], p.0.rhs.103: bf16[], p.1.lhs.103: s32[], p.1.rhs.103: s32[]) -> pred[] {
  %p.0.lhs.103 = bf16[] parameter(0)
  %p.0.rhs.103 = bf16[] parameter(1)
  %compare.142 = pred[] compare(%p.0.lhs.103, %p.0.rhs.103), direction=EQ, type=TOTALORDER
  %p.1.lhs.103 = s32[] parameter(2)
  %p.1.rhs.103 = s32[] parameter(3)
  %compare.143 = pred[] compare(%p.1.lhs.103, %p.1.rhs.103), direction=LT
  %compare.141 = pred[] compare(%p.0.lhs.103, %p.0.rhs.103), direction=GT
  ROOT %select.86 = pred[] select(%compare.142, %compare.143, %compare.141)
}

%region_233.6446.clone (scatter.39: u32[], scatter.40: u32[]) -> u32[] {
  %scatter.39 = u32[] parameter(0)
  ROOT %scatter.40 = u32[] parameter(1)
}

%region_234.6455 (reduce_max.6452: f32[], reduce_max.6453: f32[]) -> f32[] {
  %reduce_max.6452 = f32[] parameter(0)
  %reduce_max.6453 = f32[] parameter(1)
  ROOT %reduce_max.6454 = f32[] maximum(%reduce_max.6452, %reduce_max.6453)
}

%region_235.6464 (reduce_sum.6461: f32[], reduce_sum.6462: f32[]) -> f32[] {
  %reduce_sum.6461 = f32[] parameter(0)
  %reduce_sum.6462 = f32[] parameter(1)
  ROOT %reduce_sum.6463 = f32[] add(%reduce_sum.6461, %reduce_sum.6462)
}

%region_236.6473.clone (scatter-add.40: bf16[], scatter-add.41: bf16[]) -> bf16[] {
  %scatter-add.40 = bf16[] parameter(0)
  %scatter-add.41 = bf16[] parameter(1)
  ROOT %add.931 = bf16[] add(%scatter-add.40, %scatter-add.41)
}

%region_237.6485 (reduce_window_sum.6482: s32[], reduce_window_sum.6483: s32[]) -> s32[] {
  %reduce_window_sum.6482 = s32[] parameter(0)
  %reduce_window_sum.6483 = s32[] parameter(1)
  ROOT %reduce_window_sum.6484 = s32[] add(%reduce_window_sum.6482, %reduce_window_sum.6483)
}

%region_238.6494 (reduce_sum.6491: s32[], reduce_sum.6492: s32[]) -> s32[] {
  %reduce_sum.6491 = s32[] parameter(0)
  %reduce_sum.6492 = s32[] parameter(1)
  ROOT %reduce_sum.6493 = s32[] add(%reduce_sum.6491, %reduce_sum.6492)
}

%region_239.6504 (reduce_sum.6501: s32[], reduce_sum.6502: s32[]) -> s32[] {
  %reduce_sum.6501 = s32[] parameter(0)
  %reduce_sum.6502 = s32[] parameter(1)
  ROOT %reduce_sum.6503 = s32[] add(%reduce_sum.6501, %reduce_sum.6502)
}

%region_240.6546 (reduce_sum.24: f32[], reduce_sum.25: f32[]) -> f32[] {
  %reduce_sum.24 = f32[] parameter(0)
  %reduce_sum.25 = f32[] parameter(1)
  ROOT %reduce_sum.26 = f32[] add(%reduce_sum.24, %reduce_sum.25)
}

%region_244.6670 (reduce_sum.6667: f32[], reduce_sum.6668: f32[]) -> f32[] {
  %reduce_sum.6667 = f32[] parameter(0)
  %reduce_sum.6668 = f32[] parameter(1)
  ROOT %reduce_sum.6669 = f32[] add(%reduce_sum.6667, %reduce_sum.6668)
}

%compare_greater_than.20.6689.clone (p.0.lhs.104: bf16[], p.0.rhs.104: bf16[], p.1.lhs.104: s32[], p.1.rhs.104: s32[]) -> pred[] {
  %p.1.lhs.104 = s32[] parameter(2)
  %p.1.rhs.104 = s32[] parameter(3)
  %p.0.lhs.104 = bf16[] parameter(0)
  %p.0.rhs.104 = bf16[] parameter(1)
  ROOT %compare.144 = pred[] compare(%p.0.lhs.104, %p.0.rhs.104), direction=GT, type=TOTALORDER
}

%compare-value-and-index.20 (p.0.lhs.105: bf16[], p.0.rhs.105: bf16[], p.1.lhs.105: s32[], p.1.rhs.105: s32[]) -> pred[] {
  %p.0.lhs.105 = bf16[] parameter(0)
  %p.0.rhs.105 = bf16[] parameter(1)
  %compare.146 = pred[] compare(%p.0.lhs.105, %p.0.rhs.105), direction=EQ, type=TOTALORDER
  %p.1.lhs.105 = s32[] parameter(2)
  %p.1.rhs.105 = s32[] parameter(3)
  %compare.147 = pred[] compare(%p.1.lhs.105, %p.1.rhs.105), direction=LT
  %compare.145 = pred[] compare(%p.0.lhs.105, %p.0.rhs.105), direction=GT
  ROOT %select.87 = pred[] select(%compare.146, %compare.147, %compare.145)
}

%region_245.6717.clone (scatter.41: u32[], scatter.42: u32[]) -> u32[] {
  %scatter.41 = u32[] parameter(0)
  ROOT %scatter.42 = u32[] parameter(1)
}

%region_246.6726 (reduce_max.6723: f32[], reduce_max.6724: f32[]) -> f32[] {
  %reduce_max.6723 = f32[] parameter(0)
  %reduce_max.6724 = f32[] parameter(1)
  ROOT %reduce_max.6725 = f32[] maximum(%reduce_max.6723, %reduce_max.6724)
}

%region_247.6735 (reduce_sum.6732: f32[], reduce_sum.6733: f32[]) -> f32[] {
  %reduce_sum.6732 = f32[] parameter(0)
  %reduce_sum.6733 = f32[] parameter(1)
  ROOT %reduce_sum.6734 = f32[] add(%reduce_sum.6732, %reduce_sum.6733)
}

%region_248.6744.clone (scatter-add.42: bf16[], scatter-add.43: bf16[]) -> bf16[] {
  %scatter-add.42 = bf16[] parameter(0)
  %scatter-add.43 = bf16[] parameter(1)
  ROOT %add.932 = bf16[] add(%scatter-add.42, %scatter-add.43)
}

%region_249.6756 (reduce_window_sum.6753: s32[], reduce_window_sum.6754: s32[]) -> s32[] {
  %reduce_window_sum.6753 = s32[] parameter(0)
  %reduce_window_sum.6754 = s32[] parameter(1)
  ROOT %reduce_window_sum.6755 = s32[] add(%reduce_window_sum.6753, %reduce_window_sum.6754)
}

%region_250.6765 (reduce_sum.6762: s32[], reduce_sum.6763: s32[]) -> s32[] {
  %reduce_sum.6762 = s32[] parameter(0)
  %reduce_sum.6763 = s32[] parameter(1)
  ROOT %reduce_sum.6764 = s32[] add(%reduce_sum.6762, %reduce_sum.6763)
}

%region_251.6775 (reduce_sum.6772: s32[], reduce_sum.6773: s32[]) -> s32[] {
  %reduce_sum.6772 = s32[] parameter(0)
  %reduce_sum.6773 = s32[] parameter(1)
  ROOT %reduce_sum.6774 = s32[] add(%reduce_sum.6772, %reduce_sum.6773)
}

%region_252.6817 (reduce_sum.6814: f32[], reduce_sum.6815: f32[]) -> f32[] {
  %reduce_sum.6814 = f32[] parameter(0)
  %reduce_sum.6815 = f32[] parameter(1)
  ROOT %reduce_sum.6816 = f32[] add(%reduce_sum.6814, %reduce_sum.6815)
}

%region_256.6941 (reduce_sum.6938: f32[], reduce_sum.6939: f32[]) -> f32[] {
  %reduce_sum.6938 = f32[] parameter(0)
  %reduce_sum.6939 = f32[] parameter(1)
  ROOT %reduce_sum.6940 = f32[] add(%reduce_sum.6938, %reduce_sum.6939)
}

%compare_greater_than.21.6960.clone (p.0.lhs.106: bf16[], p.0.rhs.106: bf16[], p.1.lhs.106: s32[], p.1.rhs.106: s32[]) -> pred[] {
  %p.1.lhs.106 = s32[] parameter(2)
  %p.1.rhs.106 = s32[] parameter(3)
  %p.0.lhs.106 = bf16[] parameter(0)
  %p.0.rhs.106 = bf16[] parameter(1)
  ROOT %compare.148 = pred[] compare(%p.0.lhs.106, %p.0.rhs.106), direction=GT, type=TOTALORDER
}

%compare-value-and-index.21 (p.0.lhs.107: bf16[], p.0.rhs.107: bf16[], p.1.lhs.107: s32[], p.1.rhs.107: s32[]) -> pred[] {
  %p.0.lhs.107 = bf16[] parameter(0)
  %p.0.rhs.107 = bf16[] parameter(1)
  %compare.150 = pred[] compare(%p.0.lhs.107, %p.0.rhs.107), direction=EQ, type=TOTALORDER
  %p.1.lhs.107 = s32[] parameter(2)
  %p.1.rhs.107 = s32[] parameter(3)
  %compare.151 = pred[] compare(%p.1.lhs.107, %p.1.rhs.107), direction=LT
  %compare.149 = pred[] compare(%p.0.lhs.107, %p.0.rhs.107), direction=GT
  ROOT %select.88 = pred[] select(%compare.150, %compare.151, %compare.149)
}

%region_257.6988.clone (scatter.43: u32[], scatter.44: u32[]) -> u32[] {
  %scatter.43 = u32[] parameter(0)
  ROOT %scatter.44 = u32[] parameter(1)
}

%region_258.6997 (reduce_max.6994: f32[], reduce_max.6995: f32[]) -> f32[] {
  %reduce_max.6994 = f32[] parameter(0)
  %reduce_max.6995 = f32[] parameter(1)
  ROOT %reduce_max.6996 = f32[] maximum(%reduce_max.6994, %reduce_max.6995)
}

%region_259.7006 (reduce_sum.7003: f32[], reduce_sum.7004: f32[]) -> f32[] {
  %reduce_sum.7003 = f32[] parameter(0)
  %reduce_sum.7004 = f32[] parameter(1)
  ROOT %reduce_sum.7005 = f32[] add(%reduce_sum.7003, %reduce_sum.7004)
}

%region_260.7015.clone (scatter-add.44: bf16[], scatter-add.45: bf16[]) -> bf16[] {
  %scatter-add.44 = bf16[] parameter(0)
  %scatter-add.45 = bf16[] parameter(1)
  ROOT %add.933 = bf16[] add(%scatter-add.44, %scatter-add.45)
}

%region_261.7027 (reduce_window_sum.7024: s32[], reduce_window_sum.7025: s32[]) -> s32[] {
  %reduce_window_sum.7024 = s32[] parameter(0)
  %reduce_window_sum.7025 = s32[] parameter(1)
  ROOT %reduce_window_sum.7026 = s32[] add(%reduce_window_sum.7024, %reduce_window_sum.7025)
}

%region_262.7036 (reduce_sum.7033: s32[], reduce_sum.7034: s32[]) -> s32[] {
  %reduce_sum.7033 = s32[] parameter(0)
  %reduce_sum.7034 = s32[] parameter(1)
  ROOT %reduce_sum.7035 = s32[] add(%reduce_sum.7033, %reduce_sum.7034)
}

%region_263.7046 (reduce_sum.7043: s32[], reduce_sum.7044: s32[]) -> s32[] {
  %reduce_sum.7043 = s32[] parameter(0)
  %reduce_sum.7044 = s32[] parameter(1)
  ROOT %reduce_sum.7045 = s32[] add(%reduce_sum.7043, %reduce_sum.7044)
}

%region_264.7088 (reduce_sum.7085: f32[], reduce_sum.7086: f32[]) -> f32[] {
  %reduce_sum.7085 = f32[] parameter(0)
  %reduce_sum.7086 = f32[] parameter(1)
  ROOT %reduce_sum.7087 = f32[] add(%reduce_sum.7085, %reduce_sum.7086)
}

%region_268.7212 (reduce_sum.7209: f32[], reduce_sum.7210: f32[]) -> f32[] {
  %reduce_sum.7209 = f32[] parameter(0)
  %reduce_sum.7210 = f32[] parameter(1)
  ROOT %reduce_sum.7211 = f32[] add(%reduce_sum.7209, %reduce_sum.7210)
}

%compare_greater_than.22.7231.clone (p.0.lhs.108: bf16[], p.0.rhs.108: bf16[], p.1.lhs.108: s32[], p.1.rhs.108: s32[]) -> pred[] {
  %p.1.lhs.108 = s32[] parameter(2)
  %p.1.rhs.108 = s32[] parameter(3)
  %p.0.lhs.108 = bf16[] parameter(0)
  %p.0.rhs.108 = bf16[] parameter(1)
  ROOT %compare.152 = pred[] compare(%p.0.lhs.108, %p.0.rhs.108), direction=GT, type=TOTALORDER
}

%compare-value-and-index.22 (p.0.lhs.109: bf16[], p.0.rhs.109: bf16[], p.1.lhs.109: s32[], p.1.rhs.109: s32[]) -> pred[] {
  %p.0.lhs.109 = bf16[] parameter(0)
  %p.0.rhs.109 = bf16[] parameter(1)
  %compare.154 = pred[] compare(%p.0.lhs.109, %p.0.rhs.109), direction=EQ, type=TOTALORDER
  %p.1.lhs.109 = s32[] parameter(2)
  %p.1.rhs.109 = s32[] parameter(3)
  %compare.155 = pred[] compare(%p.1.lhs.109, %p.1.rhs.109), direction=LT
  %compare.153 = pred[] compare(%p.0.lhs.109, %p.0.rhs.109), direction=GT
  ROOT %select.89 = pred[] select(%compare.154, %compare.155, %compare.153)
}

%region_269.7259.clone (scatter.45: u32[], scatter.46: u32[]) -> u32[] {
  %scatter.45 = u32[] parameter(0)
  ROOT %scatter.46 = u32[] parameter(1)
}

%region_270.7268 (reduce_max.7265: f32[], reduce_max.7266: f32[]) -> f32[] {
  %reduce_max.7265 = f32[] parameter(0)
  %reduce_max.7266 = f32[] parameter(1)
  ROOT %reduce_max.7267 = f32[] maximum(%reduce_max.7265, %reduce_max.7266)
}

%region_271.7277 (reduce_sum.7274: f32[], reduce_sum.7275: f32[]) -> f32[] {
  %reduce_sum.7274 = f32[] parameter(0)
  %reduce_sum.7275 = f32[] parameter(1)
  ROOT %reduce_sum.7276 = f32[] add(%reduce_sum.7274, %reduce_sum.7275)
}

%region_272.7286.clone (scatter-add.46: bf16[], scatter-add.47: bf16[]) -> bf16[] {
  %scatter-add.46 = bf16[] parameter(0)
  %scatter-add.47 = bf16[] parameter(1)
  ROOT %add.934 = bf16[] add(%scatter-add.46, %scatter-add.47)
}

%region_273.7298 (reduce_window_sum.7295: s32[], reduce_window_sum.7296: s32[]) -> s32[] {
  %reduce_window_sum.7295 = s32[] parameter(0)
  %reduce_window_sum.7296 = s32[] parameter(1)
  ROOT %reduce_window_sum.7297 = s32[] add(%reduce_window_sum.7295, %reduce_window_sum.7296)
}

%region_274.7307 (reduce_sum.7304: s32[], reduce_sum.7305: s32[]) -> s32[] {
  %reduce_sum.7304 = s32[] parameter(0)
  %reduce_sum.7305 = s32[] parameter(1)
  ROOT %reduce_sum.7306 = s32[] add(%reduce_sum.7304, %reduce_sum.7305)
}

%region_275.7317 (reduce_sum.7314: s32[], reduce_sum.7315: s32[]) -> s32[] {
  %reduce_sum.7314 = s32[] parameter(0)
  %reduce_sum.7315 = s32[] parameter(1)
  ROOT %reduce_sum.7316 = s32[] add(%reduce_sum.7314, %reduce_sum.7315)
}

%region_276.7359 (reduce_sum.7356: f32[], reduce_sum.7357: f32[]) -> f32[] {
  %reduce_sum.7356 = f32[] parameter(0)
  %reduce_sum.7357 = f32[] parameter(1)
  ROOT %reduce_sum.7358 = f32[] add(%reduce_sum.7356, %reduce_sum.7357)
}

%region_280.7483 (reduce_sum.7480: f32[], reduce_sum.7481: f32[]) -> f32[] {
  %reduce_sum.7480 = f32[] parameter(0)
  %reduce_sum.7481 = f32[] parameter(1)
  ROOT %reduce_sum.7482 = f32[] add(%reduce_sum.7480, %reduce_sum.7481)
}

%compare_greater_than.23.7502.clone (p.0.lhs.110: bf16[], p.0.rhs.110: bf16[], p.1.lhs.110: s32[], p.1.rhs.110: s32[]) -> pred[] {
  %p.1.lhs.110 = s32[] parameter(2)
  %p.1.rhs.110 = s32[] parameter(3)
  %p.0.lhs.110 = bf16[] parameter(0)
  %p.0.rhs.110 = bf16[] parameter(1)
  ROOT %compare.156 = pred[] compare(%p.0.lhs.110, %p.0.rhs.110), direction=GT, type=TOTALORDER
}

%compare-value-and-index.23 (p.0.lhs.111: bf16[], p.0.rhs.111: bf16[], p.1.lhs.111: s32[], p.1.rhs.111: s32[]) -> pred[] {
  %p.0.lhs.111 = bf16[] parameter(0)
  %p.0.rhs.111 = bf16[] parameter(1)
  %compare.158 = pred[] compare(%p.0.lhs.111, %p.0.rhs.111), direction=EQ, type=TOTALORDER
  %p.1.lhs.111 = s32[] parameter(2)
  %p.1.rhs.111 = s32[] parameter(3)
  %compare.159 = pred[] compare(%p.1.lhs.111, %p.1.rhs.111), direction=LT
  %compare.157 = pred[] compare(%p.0.lhs.111, %p.0.rhs.111), direction=GT
  ROOT %select.90 = pred[] select(%compare.158, %compare.159, %compare.157)
}

%region_281.7530.clone (scatter.47: u32[], scatter.48: u32[]) -> u32[] {
  %scatter.47 = u32[] parameter(0)
  ROOT %scatter.48 = u32[] parameter(1)
}

%region_282.7539 (reduce_max.7536: f32[], reduce_max.7537: f32[]) -> f32[] {
  %reduce_max.7536 = f32[] parameter(0)
  %reduce_max.7537 = f32[] parameter(1)
  ROOT %reduce_max.7538 = f32[] maximum(%reduce_max.7536, %reduce_max.7537)
}

%region_283.7548 (reduce_sum.7545: f32[], reduce_sum.7546: f32[]) -> f32[] {
  %reduce_sum.7545 = f32[] parameter(0)
  %reduce_sum.7546 = f32[] parameter(1)
  ROOT %reduce_sum.7547 = f32[] add(%reduce_sum.7545, %reduce_sum.7546)
}

%region_284.7557.clone (scatter-add.48: bf16[], scatter-add.49: bf16[]) -> bf16[] {
  %scatter-add.48 = bf16[] parameter(0)
  %scatter-add.49 = bf16[] parameter(1)
  ROOT %add.935 = bf16[] add(%scatter-add.48, %scatter-add.49)
}

%region_285.7569 (reduce_window_sum.7566: s32[], reduce_window_sum.7567: s32[]) -> s32[] {
  %reduce_window_sum.7566 = s32[] parameter(0)
  %reduce_window_sum.7567 = s32[] parameter(1)
  ROOT %reduce_window_sum.7568 = s32[] add(%reduce_window_sum.7566, %reduce_window_sum.7567)
}

%region_286.7578 (reduce_sum.7575: s32[], reduce_sum.7576: s32[]) -> s32[] {
  %reduce_sum.7575 = s32[] parameter(0)
  %reduce_sum.7576 = s32[] parameter(1)
  ROOT %reduce_sum.7577 = s32[] add(%reduce_sum.7575, %reduce_sum.7576)
}

%region_287.7588 (reduce_sum.7585: s32[], reduce_sum.7586: s32[]) -> s32[] {
  %reduce_sum.7585 = s32[] parameter(0)
  %reduce_sum.7586 = s32[] parameter(1)
  ROOT %reduce_sum.7587 = s32[] add(%reduce_sum.7585, %reduce_sum.7586)
}

%region_288.7630 (reduce_sum.7627: f32[], reduce_sum.7628: f32[]) -> f32[] {
  %reduce_sum.7627 = f32[] parameter(0)
  %reduce_sum.7628 = f32[] parameter(1)
  ROOT %reduce_sum.7629 = f32[] add(%reduce_sum.7627, %reduce_sum.7628)
}

%region_292.7754 (reduce_sum.7751: f32[], reduce_sum.7752: f32[]) -> f32[] {
  %reduce_sum.7751 = f32[] parameter(0)
  %reduce_sum.7752 = f32[] parameter(1)
  ROOT %reduce_sum.7753 = f32[] add(%reduce_sum.7751, %reduce_sum.7752)
}

%compare_greater_than.24.7773.clone (p.0.lhs.112: bf16[], p.0.rhs.112: bf16[], p.1.lhs.112: s32[], p.1.rhs.112: s32[]) -> pred[] {
  %p.1.lhs.112 = s32[] parameter(2)
  %p.1.rhs.112 = s32[] parameter(3)
  %p.0.lhs.112 = bf16[] parameter(0)
  %p.0.rhs.112 = bf16[] parameter(1)
  ROOT %compare.160 = pred[] compare(%p.0.lhs.112, %p.0.rhs.112), direction=GT, type=TOTALORDER
}

%compare-value-and-index.24 (p.0.lhs.113: bf16[], p.0.rhs.113: bf16[], p.1.lhs.113: s32[], p.1.rhs.113: s32[]) -> pred[] {
  %p.0.lhs.113 = bf16[] parameter(0)
  %p.0.rhs.113 = bf16[] parameter(1)
  %compare.162 = pred[] compare(%p.0.lhs.113, %p.0.rhs.113), direction=EQ, type=TOTALORDER
  %p.1.lhs.113 = s32[] parameter(2)
  %p.1.rhs.113 = s32[] parameter(3)
  %compare.163 = pred[] compare(%p.1.lhs.113, %p.1.rhs.113), direction=LT
  %compare.161 = pred[] compare(%p.0.lhs.113, %p.0.rhs.113), direction=GT
  ROOT %select.91 = pred[] select(%compare.162, %compare.163, %compare.161)
}

%region_293.7801.clone (scatter.49: u32[], scatter.50: u32[]) -> u32[] {
  %scatter.49 = u32[] parameter(0)
  ROOT %scatter.50 = u32[] parameter(1)
}

%region_294.7810 (reduce_max.7807: f32[], reduce_max.7808: f32[]) -> f32[] {
  %reduce_max.7807 = f32[] parameter(0)
  %reduce_max.7808 = f32[] parameter(1)
  ROOT %reduce_max.7809 = f32[] maximum(%reduce_max.7807, %reduce_max.7808)
}

%region_295.7819 (reduce_sum.7816: f32[], reduce_sum.7817: f32[]) -> f32[] {
  %reduce_sum.7816 = f32[] parameter(0)
  %reduce_sum.7817 = f32[] parameter(1)
  ROOT %reduce_sum.7818 = f32[] add(%reduce_sum.7816, %reduce_sum.7817)
}

%region_296.7828.clone (scatter-add.50: bf16[], scatter-add.51: bf16[]) -> bf16[] {
  %scatter-add.50 = bf16[] parameter(0)
  %scatter-add.51 = bf16[] parameter(1)
  ROOT %add.936 = bf16[] add(%scatter-add.50, %scatter-add.51)
}

%region_297.7840 (reduce_window_sum.7837: s32[], reduce_window_sum.7838: s32[]) -> s32[] {
  %reduce_window_sum.7837 = s32[] parameter(0)
  %reduce_window_sum.7838 = s32[] parameter(1)
  ROOT %reduce_window_sum.7839 = s32[] add(%reduce_window_sum.7837, %reduce_window_sum.7838)
}

%region_298.7849 (reduce_sum.7846: s32[], reduce_sum.7847: s32[]) -> s32[] {
  %reduce_sum.7846 = s32[] parameter(0)
  %reduce_sum.7847 = s32[] parameter(1)
  ROOT %reduce_sum.7848 = s32[] add(%reduce_sum.7846, %reduce_sum.7847)
}

%region_299.7859 (reduce_sum.34: s32[], reduce_sum.35: s32[]) -> s32[] {
  %reduce_sum.34 = s32[] parameter(0)
  %reduce_sum.35 = s32[] parameter(1)
  ROOT %reduce_sum.7858 = s32[] add(%reduce_sum.34, %reduce_sum.35)
}

%region_300.7901 (reduce_sum.7898: f32[], reduce_sum.7899: f32[]) -> f32[] {
  %reduce_sum.7898 = f32[] parameter(0)
  %reduce_sum.7899 = f32[] parameter(1)
  ROOT %reduce_sum.7900 = f32[] add(%reduce_sum.7898, %reduce_sum.7899)
}

%region_304.8025 (reduce_sum.8022: f32[], reduce_sum.8023: f32[]) -> f32[] {
  %reduce_sum.8022 = f32[] parameter(0)
  %reduce_sum.8023 = f32[] parameter(1)
  ROOT %reduce_sum.8024 = f32[] add(%reduce_sum.8022, %reduce_sum.8023)
}

%compare_greater_than.25.8044.clone (p.0.lhs.114: bf16[], p.0.rhs.114: bf16[], p.1.lhs.114: s32[], p.1.rhs.114: s32[]) -> pred[] {
  %p.1.lhs.114 = s32[] parameter(2)
  %p.1.rhs.114 = s32[] parameter(3)
  %p.0.lhs.114 = bf16[] parameter(0)
  %p.0.rhs.114 = bf16[] parameter(1)
  ROOT %compare.164 = pred[] compare(%p.0.lhs.114, %p.0.rhs.114), direction=GT, type=TOTALORDER
}

%compare-value-and-index.25 (p.0.lhs.115: bf16[], p.0.rhs.115: bf16[], p.1.lhs.115: s32[], p.1.rhs.115: s32[]) -> pred[] {
  %p.0.lhs.115 = bf16[] parameter(0)
  %p.0.rhs.115 = bf16[] parameter(1)
  %compare.166 = pred[] compare(%p.0.lhs.115, %p.0.rhs.115), direction=EQ, type=TOTALORDER
  %p.1.lhs.115 = s32[] parameter(2)
  %p.1.rhs.115 = s32[] parameter(3)
  %compare.167 = pred[] compare(%p.1.lhs.115, %p.1.rhs.115), direction=LT
  %compare.165 = pred[] compare(%p.0.lhs.115, %p.0.rhs.115), direction=GT
  ROOT %select.92 = pred[] select(%compare.166, %compare.167, %compare.165)
}

%region_305.8072.clone (scatter.51: u32[], scatter.52: u32[]) -> u32[] {
  %scatter.51 = u32[] parameter(0)
  ROOT %scatter.52 = u32[] parameter(1)
}

%region_306.8081 (reduce_max.8078: f32[], reduce_max.8079: f32[]) -> f32[] {
  %reduce_max.8078 = f32[] parameter(0)
  %reduce_max.8079 = f32[] parameter(1)
  ROOT %reduce_max.8080 = f32[] maximum(%reduce_max.8078, %reduce_max.8079)
}

%region_307.8090 (reduce_sum.8087: f32[], reduce_sum.8088: f32[]) -> f32[] {
  %reduce_sum.8087 = f32[] parameter(0)
  %reduce_sum.8088 = f32[] parameter(1)
  ROOT %reduce_sum.8089 = f32[] add(%reduce_sum.8087, %reduce_sum.8088)
}

%region_308.8099.clone (scatter-add.52: bf16[], scatter-add.53: bf16[]) -> bf16[] {
  %scatter-add.52 = bf16[] parameter(0)
  %scatter-add.53 = bf16[] parameter(1)
  ROOT %add.937 = bf16[] add(%scatter-add.52, %scatter-add.53)
}

%region_309.8111 (reduce_window_sum.8108: s32[], reduce_window_sum.8109: s32[]) -> s32[] {
  %reduce_window_sum.8108 = s32[] parameter(0)
  %reduce_window_sum.8109 = s32[] parameter(1)
  ROOT %reduce_window_sum.8110 = s32[] add(%reduce_window_sum.8108, %reduce_window_sum.8109)
}

%region_310.8120 (reduce_sum.8117: s32[], reduce_sum.8118: s32[]) -> s32[] {
  %reduce_sum.8117 = s32[] parameter(0)
  %reduce_sum.8118 = s32[] parameter(1)
  ROOT %reduce_sum.8119 = s32[] add(%reduce_sum.8117, %reduce_sum.8118)
}

%region_311.8130 (reduce_sum.8127: s32[], reduce_sum.8128: s32[]) -> s32[] {
  %reduce_sum.8127 = s32[] parameter(0)
  %reduce_sum.8128 = s32[] parameter(1)
  ROOT %reduce_sum.8129 = s32[] add(%reduce_sum.8127, %reduce_sum.8128)
}

%region_312.8172 (reduce_sum.36: f32[], reduce_sum.37: f32[]) -> f32[] {
  %reduce_sum.36 = f32[] parameter(0)
  %reduce_sum.37 = f32[] parameter(1)
  ROOT %reduce_sum.8171 = f32[] add(%reduce_sum.36, %reduce_sum.37)
}

%region_316.8296 (reduce_sum.8293: f32[], reduce_sum.8294: f32[]) -> f32[] {
  %reduce_sum.8293 = f32[] parameter(0)
  %reduce_sum.8294 = f32[] parameter(1)
  ROOT %reduce_sum.8295 = f32[] add(%reduce_sum.8293, %reduce_sum.8294)
}

%compare_greater_than.26.8315.clone (p.0.lhs.116: bf16[], p.0.rhs.116: bf16[], p.1.lhs.116: s32[], p.1.rhs.116: s32[]) -> pred[] {
  %p.1.lhs.116 = s32[] parameter(2)
  %p.1.rhs.116 = s32[] parameter(3)
  %p.0.lhs.116 = bf16[] parameter(0)
  %p.0.rhs.116 = bf16[] parameter(1)
  ROOT %compare.168 = pred[] compare(%p.0.lhs.116, %p.0.rhs.116), direction=GT, type=TOTALORDER
}

%compare-value-and-index.26 (p.0.lhs.117: bf16[], p.0.rhs.117: bf16[], p.1.lhs.117: s32[], p.1.rhs.117: s32[]) -> pred[] {
  %p.0.lhs.117 = bf16[] parameter(0)
  %p.0.rhs.117 = bf16[] parameter(1)
  %compare.170 = pred[] compare(%p.0.lhs.117, %p.0.rhs.117), direction=EQ, type=TOTALORDER
  %p.1.lhs.117 = s32[] parameter(2)
  %p.1.rhs.117 = s32[] parameter(3)
  %compare.171 = pred[] compare(%p.1.lhs.117, %p.1.rhs.117), direction=LT
  %compare.169 = pred[] compare(%p.0.lhs.117, %p.0.rhs.117), direction=GT
  ROOT %select.93 = pred[] select(%compare.170, %compare.171, %compare.169)
}

%region_317.8343.clone (scatter.53: u32[], scatter.54: u32[]) -> u32[] {
  %scatter.53 = u32[] parameter(0)
  ROOT %scatter.54 = u32[] parameter(1)
}

%region_318.8352 (reduce_max.8349: f32[], reduce_max.8350: f32[]) -> f32[] {
  %reduce_max.8349 = f32[] parameter(0)
  %reduce_max.8350 = f32[] parameter(1)
  ROOT %reduce_max.8351 = f32[] maximum(%reduce_max.8349, %reduce_max.8350)
}

%region_319.8361 (reduce_sum.8358: f32[], reduce_sum.8359: f32[]) -> f32[] {
  %reduce_sum.8358 = f32[] parameter(0)
  %reduce_sum.8359 = f32[] parameter(1)
  ROOT %reduce_sum.8360 = f32[] add(%reduce_sum.8358, %reduce_sum.8359)
}

%region_320.8370.clone (scatter-add.54: bf16[], scatter-add.55: bf16[]) -> bf16[] {
  %scatter-add.54 = bf16[] parameter(0)
  %scatter-add.55 = bf16[] parameter(1)
  ROOT %add.938 = bf16[] add(%scatter-add.54, %scatter-add.55)
}

%region_321.8382 (reduce_window_sum.8379: s32[], reduce_window_sum.8380: s32[]) -> s32[] {
  %reduce_window_sum.8379 = s32[] parameter(0)
  %reduce_window_sum.8380 = s32[] parameter(1)
  ROOT %reduce_window_sum.8381 = s32[] add(%reduce_window_sum.8379, %reduce_window_sum.8380)
}

%region_322.8391 (reduce_sum.8388: s32[], reduce_sum.8389: s32[]) -> s32[] {
  %reduce_sum.8388 = s32[] parameter(0)
  %reduce_sum.8389 = s32[] parameter(1)
  ROOT %reduce_sum.8390 = s32[] add(%reduce_sum.8388, %reduce_sum.8389)
}

%region_323.8401 (reduce_sum.8398: s32[], reduce_sum.8399: s32[]) -> s32[] {
  %reduce_sum.8398 = s32[] parameter(0)
  %reduce_sum.8399 = s32[] parameter(1)
  ROOT %reduce_sum.8400 = s32[] add(%reduce_sum.8398, %reduce_sum.8399)
}

%region_324.8443 (reduce_sum.8440: f32[], reduce_sum.8441: f32[]) -> f32[] {
  %reduce_sum.8440 = f32[] parameter(0)
  %reduce_sum.8441 = f32[] parameter(1)
  ROOT %reduce_sum.8442 = f32[] add(%reduce_sum.8440, %reduce_sum.8441)
}

%region_328.8567 (reduce_sum.8564: f32[], reduce_sum.8565: f32[]) -> f32[] {
  %reduce_sum.8564 = f32[] parameter(0)
  %reduce_sum.8565 = f32[] parameter(1)
  ROOT %reduce_sum.8566 = f32[] add(%reduce_sum.8564, %reduce_sum.8565)
}

%compare_greater_than.27.8586.clone (p.0.lhs.118: bf16[], p.0.rhs.118: bf16[], p.1.lhs.118: s32[], p.1.rhs.118: s32[]) -> pred[] {
  %p.1.lhs.118 = s32[] parameter(2)
  %p.1.rhs.118 = s32[] parameter(3)
  %p.0.lhs.118 = bf16[] parameter(0)
  %p.0.rhs.118 = bf16[] parameter(1)
  ROOT %compare.172 = pred[] compare(%p.0.lhs.118, %p.0.rhs.118), direction=GT, type=TOTALORDER
}

%compare-value-and-index.27 (p.0.lhs.119: bf16[], p.0.rhs.119: bf16[], p.1.lhs.119: s32[], p.1.rhs.119: s32[]) -> pred[] {
  %p.0.lhs.119 = bf16[] parameter(0)
  %p.0.rhs.119 = bf16[] parameter(1)
  %compare.174 = pred[] compare(%p.0.lhs.119, %p.0.rhs.119), direction=EQ, type=TOTALORDER
  %p.1.lhs.119 = s32[] parameter(2)
  %p.1.rhs.119 = s32[] parameter(3)
  %compare.175 = pred[] compare(%p.1.lhs.119, %p.1.rhs.119), direction=LT
  %compare.173 = pred[] compare(%p.0.lhs.119, %p.0.rhs.119), direction=GT
  ROOT %select.94 = pred[] select(%compare.174, %compare.175, %compare.173)
}

%region_329.8614.clone (scatter.55: u32[], scatter.56: u32[]) -> u32[] {
  %scatter.55 = u32[] parameter(0)
  ROOT %scatter.56 = u32[] parameter(1)
}

%region_330.8623 (reduce_max.8620: f32[], reduce_max.8621: f32[]) -> f32[] {
  %reduce_max.8620 = f32[] parameter(0)
  %reduce_max.8621 = f32[] parameter(1)
  ROOT %reduce_max.8622 = f32[] maximum(%reduce_max.8620, %reduce_max.8621)
}

%region_331.8632 (reduce_sum.8629: f32[], reduce_sum.8630: f32[]) -> f32[] {
  %reduce_sum.8629 = f32[] parameter(0)
  %reduce_sum.8630 = f32[] parameter(1)
  ROOT %reduce_sum.8631 = f32[] add(%reduce_sum.8629, %reduce_sum.8630)
}

%region_332.8641.clone (scatter-add.56: bf16[], scatter-add.57: bf16[]) -> bf16[] {
  %scatter-add.56 = bf16[] parameter(0)
  %scatter-add.57 = bf16[] parameter(1)
  ROOT %add.939 = bf16[] add(%scatter-add.56, %scatter-add.57)
}

%region_333.8653 (reduce_window_sum.8650: s32[], reduce_window_sum.8651: s32[]) -> s32[] {
  %reduce_window_sum.8650 = s32[] parameter(0)
  %reduce_window_sum.8651 = s32[] parameter(1)
  ROOT %reduce_window_sum.8652 = s32[] add(%reduce_window_sum.8650, %reduce_window_sum.8651)
}

%region_334.8662 (reduce_sum.8659: s32[], reduce_sum.8660: s32[]) -> s32[] {
  %reduce_sum.8659 = s32[] parameter(0)
  %reduce_sum.8660 = s32[] parameter(1)
  ROOT %reduce_sum.8661 = s32[] add(%reduce_sum.8659, %reduce_sum.8660)
}

%region_335.8672 (reduce_sum.8669: s32[], reduce_sum.8670: s32[]) -> s32[] {
  %reduce_sum.8669 = s32[] parameter(0)
  %reduce_sum.8670 = s32[] parameter(1)
  ROOT %reduce_sum.38 = s32[] add(%reduce_sum.8669, %reduce_sum.8670)
}

%region_336.8714 (reduce_sum.39: f32[], reduce_sum.8712: f32[]) -> f32[] {
  %reduce_sum.39 = f32[] parameter(0)
  %reduce_sum.8712 = f32[] parameter(1)
  ROOT %reduce_sum.40 = f32[] add(%reduce_sum.39, %reduce_sum.8712)
}

%region_340.8838 (reduce_sum.8835: f32[], reduce_sum.8836: f32[]) -> f32[] {
  %reduce_sum.8835 = f32[] parameter(0)
  %reduce_sum.8836 = f32[] parameter(1)
  ROOT %reduce_sum.8837 = f32[] add(%reduce_sum.8835, %reduce_sum.8836)
}

%compare_greater_than.28.8857.clone (p.0.lhs.120: bf16[], p.0.rhs.120: bf16[], p.1.lhs.120: s32[], p.1.rhs.120: s32[]) -> pred[] {
  %p.1.lhs.120 = s32[] parameter(2)
  %p.1.rhs.120 = s32[] parameter(3)
  %p.0.lhs.120 = bf16[] parameter(0)
  %p.0.rhs.120 = bf16[] parameter(1)
  ROOT %compare.176 = pred[] compare(%p.0.lhs.120, %p.0.rhs.120), direction=GT, type=TOTALORDER
}

%compare-value-and-index.28 (p.0.lhs.121: bf16[], p.0.rhs.121: bf16[], p.1.lhs.121: s32[], p.1.rhs.121: s32[]) -> pred[] {
  %p.0.lhs.121 = bf16[] parameter(0)
  %p.0.rhs.121 = bf16[] parameter(1)
  %compare.178 = pred[] compare(%p.0.lhs.121, %p.0.rhs.121), direction=EQ, type=TOTALORDER
  %p.1.lhs.121 = s32[] parameter(2)
  %p.1.rhs.121 = s32[] parameter(3)
  %compare.179 = pred[] compare(%p.1.lhs.121, %p.1.rhs.121), direction=LT
  %compare.177 = pred[] compare(%p.0.lhs.121, %p.0.rhs.121), direction=GT
  ROOT %select.95 = pred[] select(%compare.178, %compare.179, %compare.177)
}

%region_341.8885.clone (scatter.57: u32[], scatter.58: u32[]) -> u32[] {
  %scatter.57 = u32[] parameter(0)
  ROOT %scatter.58 = u32[] parameter(1)
}

%region_342.8894 (reduce_max.8891: f32[], reduce_max.8892: f32[]) -> f32[] {
  %reduce_max.8891 = f32[] parameter(0)
  %reduce_max.8892 = f32[] parameter(1)
  ROOT %reduce_max.8893 = f32[] maximum(%reduce_max.8891, %reduce_max.8892)
}

%region_343.8903 (reduce_sum.8900: f32[], reduce_sum.8901: f32[]) -> f32[] {
  %reduce_sum.8900 = f32[] parameter(0)
  %reduce_sum.8901 = f32[] parameter(1)
  ROOT %reduce_sum.8902 = f32[] add(%reduce_sum.8900, %reduce_sum.8901)
}

%region_344.8912.clone (scatter-add.58: bf16[], scatter-add.59: bf16[]) -> bf16[] {
  %scatter-add.58 = bf16[] parameter(0)
  %scatter-add.59 = bf16[] parameter(1)
  ROOT %add.940 = bf16[] add(%scatter-add.58, %scatter-add.59)
}

%region_345.8924 (reduce_window_sum.8921: s32[], reduce_window_sum.8922: s32[]) -> s32[] {
  %reduce_window_sum.8921 = s32[] parameter(0)
  %reduce_window_sum.8922 = s32[] parameter(1)
  ROOT %reduce_window_sum.8923 = s32[] add(%reduce_window_sum.8921, %reduce_window_sum.8922)
}

%region_346.8933 (reduce_sum.8930: s32[], reduce_sum.8931: s32[]) -> s32[] {
  %reduce_sum.8930 = s32[] parameter(0)
  %reduce_sum.8931 = s32[] parameter(1)
  ROOT %reduce_sum.8932 = s32[] add(%reduce_sum.8930, %reduce_sum.8931)
}

%region_347.8943 (reduce_sum.8940: s32[], reduce_sum.8941: s32[]) -> s32[] {
  %reduce_sum.8940 = s32[] parameter(0)
  %reduce_sum.8941 = s32[] parameter(1)
  ROOT %reduce_sum.8942 = s32[] add(%reduce_sum.8940, %reduce_sum.8941)
}

%region_348.8985 (reduce_sum.8982: f32[], reduce_sum.8983: f32[]) -> f32[] {
  %reduce_sum.8982 = f32[] parameter(0)
  %reduce_sum.8983 = f32[] parameter(1)
  ROOT %reduce_sum.8984 = f32[] add(%reduce_sum.8982, %reduce_sum.8983)
}

%region_352.9109 (reduce_sum.9106: f32[], reduce_sum.9107: f32[]) -> f32[] {
  %reduce_sum.9106 = f32[] parameter(0)
  %reduce_sum.9107 = f32[] parameter(1)
  ROOT %reduce_sum.9108 = f32[] add(%reduce_sum.9106, %reduce_sum.9107)
}

%compare_greater_than.29.9128.clone (p.0.lhs.122: bf16[], p.0.rhs.122: bf16[], p.1.lhs.122: s32[], p.1.rhs.122: s32[]) -> pred[] {
  %p.1.lhs.122 = s32[] parameter(2)
  %p.1.rhs.122 = s32[] parameter(3)
  %p.0.lhs.122 = bf16[] parameter(0)
  %p.0.rhs.122 = bf16[] parameter(1)
  ROOT %compare.180 = pred[] compare(%p.0.lhs.122, %p.0.rhs.122), direction=GT, type=TOTALORDER
}

%compare-value-and-index.29 (p.0.lhs.123: bf16[], p.0.rhs.123: bf16[], p.1.lhs.123: s32[], p.1.rhs.123: s32[]) -> pred[] {
  %p.0.lhs.123 = bf16[] parameter(0)
  %p.0.rhs.123 = bf16[] parameter(1)
  %compare.182 = pred[] compare(%p.0.lhs.123, %p.0.rhs.123), direction=EQ, type=TOTALORDER
  %p.1.lhs.123 = s32[] parameter(2)
  %p.1.rhs.123 = s32[] parameter(3)
  %compare.183 = pred[] compare(%p.1.lhs.123, %p.1.rhs.123), direction=LT
  %compare.181 = pred[] compare(%p.0.lhs.123, %p.0.rhs.123), direction=GT
  ROOT %select.96 = pred[] select(%compare.182, %compare.183, %compare.181)
}

%region_353.9156.clone (scatter.59: u32[], scatter.60: u32[]) -> u32[] {
  %scatter.59 = u32[] parameter(0)
  ROOT %scatter.60 = u32[] parameter(1)
}

%region_354.9165 (reduce_max.9162: f32[], reduce_max.9163: f32[]) -> f32[] {
  %reduce_max.9162 = f32[] parameter(0)
  %reduce_max.9163 = f32[] parameter(1)
  ROOT %reduce_max.9164 = f32[] maximum(%reduce_max.9162, %reduce_max.9163)
}

%region_355.9174 (reduce_sum.9171: f32[], reduce_sum.9172: f32[]) -> f32[] {
  %reduce_sum.9171 = f32[] parameter(0)
  %reduce_sum.9172 = f32[] parameter(1)
  ROOT %reduce_sum.9173 = f32[] add(%reduce_sum.9171, %reduce_sum.9172)
}

%region_356.9183.clone (scatter-add.60: bf16[], scatter-add.61: bf16[]) -> bf16[] {
  %scatter-add.60 = bf16[] parameter(0)
  %scatter-add.61 = bf16[] parameter(1)
  ROOT %add.941 = bf16[] add(%scatter-add.60, %scatter-add.61)
}

%region_357.9195 (reduce_window_sum.9192: s32[], reduce_window_sum.9193: s32[]) -> s32[] {
  %reduce_window_sum.9192 = s32[] parameter(0)
  %reduce_window_sum.9193 = s32[] parameter(1)
  ROOT %reduce_window_sum.9194 = s32[] add(%reduce_window_sum.9192, %reduce_window_sum.9193)
}

%region_358.9204 (reduce_sum.9201: s32[], reduce_sum.9202: s32[]) -> s32[] {
  %reduce_sum.9201 = s32[] parameter(0)
  %reduce_sum.9202 = s32[] parameter(1)
  ROOT %reduce_sum.9203 = s32[] add(%reduce_sum.9201, %reduce_sum.9202)
}

%region_359.9214 (reduce_sum.9211: s32[], reduce_sum.9212: s32[]) -> s32[] {
  %reduce_sum.9211 = s32[] parameter(0)
  %reduce_sum.9212 = s32[] parameter(1)
  ROOT %reduce_sum.9213 = s32[] add(%reduce_sum.9211, %reduce_sum.9212)
}

%region_360.9256 (reduce_sum.43: f32[], reduce_sum.9254: f32[]) -> f32[] {
  %reduce_sum.43 = f32[] parameter(0)
  %reduce_sum.9254 = f32[] parameter(1)
  ROOT %reduce_sum.44 = f32[] add(%reduce_sum.43, %reduce_sum.9254)
}

%region_364.9380 (reduce_sum.45: f32[], reduce_sum.9378: f32[]) -> f32[] {
  %reduce_sum.45 = f32[] parameter(0)
  %reduce_sum.9378 = f32[] parameter(1)
  ROOT %reduce_sum.46 = f32[] add(%reduce_sum.45, %reduce_sum.9378)
}

%compare_greater_than.30.9399.clone (p.0.lhs.124: bf16[], p.0.rhs.124: bf16[], p.1.lhs.124: s32[], p.1.rhs.124: s32[]) -> pred[] {
  %p.1.lhs.124 = s32[] parameter(2)
  %p.1.rhs.124 = s32[] parameter(3)
  %p.0.lhs.124 = bf16[] parameter(0)
  %p.0.rhs.124 = bf16[] parameter(1)
  ROOT %compare.184 = pred[] compare(%p.0.lhs.124, %p.0.rhs.124), direction=GT, type=TOTALORDER
}

%compare-value-and-index.30 (p.0.lhs.125: bf16[], p.0.rhs.125: bf16[], p.1.lhs.125: s32[], p.1.rhs.125: s32[]) -> pred[] {
  %p.0.lhs.125 = bf16[] parameter(0)
  %p.0.rhs.125 = bf16[] parameter(1)
  %compare.186 = pred[] compare(%p.0.lhs.125, %p.0.rhs.125), direction=EQ, type=TOTALORDER
  %p.1.lhs.125 = s32[] parameter(2)
  %p.1.rhs.125 = s32[] parameter(3)
  %compare.187 = pred[] compare(%p.1.lhs.125, %p.1.rhs.125), direction=LT
  %compare.185 = pred[] compare(%p.0.lhs.125, %p.0.rhs.125), direction=GT
  ROOT %select.97 = pred[] select(%compare.186, %compare.187, %compare.185)
}

%region_365.9427.clone (scatter.61: u32[], scatter.62: u32[]) -> u32[] {
  %scatter.61 = u32[] parameter(0)
  ROOT %scatter.62 = u32[] parameter(1)
}

%region_366.9436 (reduce_max.9433: f32[], reduce_max.9434: f32[]) -> f32[] {
  %reduce_max.9433 = f32[] parameter(0)
  %reduce_max.9434 = f32[] parameter(1)
  ROOT %reduce_max.9435 = f32[] maximum(%reduce_max.9433, %reduce_max.9434)
}

%region_367.9445 (reduce_sum.9442: f32[], reduce_sum.9443: f32[]) -> f32[] {
  %reduce_sum.9442 = f32[] parameter(0)
  %reduce_sum.9443 = f32[] parameter(1)
  ROOT %reduce_sum.9444 = f32[] add(%reduce_sum.9442, %reduce_sum.9443)
}

%region_368.9454.clone (scatter-add.62: bf16[], scatter-add.63: bf16[]) -> bf16[] {
  %scatter-add.62 = bf16[] parameter(0)
  %scatter-add.63 = bf16[] parameter(1)
  ROOT %add.942 = bf16[] add(%scatter-add.62, %scatter-add.63)
}

%region_369.9466 (reduce_window_sum.9463: s32[], reduce_window_sum.9464: s32[]) -> s32[] {
  %reduce_window_sum.9463 = s32[] parameter(0)
  %reduce_window_sum.9464 = s32[] parameter(1)
  ROOT %reduce_window_sum.9465 = s32[] add(%reduce_window_sum.9463, %reduce_window_sum.9464)
}

%region_370.9475 (reduce_sum.9472: s32[], reduce_sum.9473: s32[]) -> s32[] {
  %reduce_sum.9472 = s32[] parameter(0)
  %reduce_sum.9473 = s32[] parameter(1)
  ROOT %reduce_sum.9474 = s32[] add(%reduce_sum.9472, %reduce_sum.9473)
}

%region_371.9485 (reduce_sum.9482: s32[], reduce_sum.9483: s32[]) -> s32[] {
  %reduce_sum.9482 = s32[] parameter(0)
  %reduce_sum.9483 = s32[] parameter(1)
  ROOT %reduce_sum.9484 = s32[] add(%reduce_sum.9482, %reduce_sum.9483)
}

%region_372.9527 (reduce_sum.9524: f32[], reduce_sum.9525: f32[]) -> f32[] {
  %reduce_sum.9524 = f32[] parameter(0)
  %reduce_sum.9525 = f32[] parameter(1)
  ROOT %reduce_sum.9526 = f32[] add(%reduce_sum.9524, %reduce_sum.9525)
}

%region_376.9651 (reduce_sum.9648: f32[], reduce_sum.9649: f32[]) -> f32[] {
  %reduce_sum.9648 = f32[] parameter(0)
  %reduce_sum.9649 = f32[] parameter(1)
  ROOT %reduce_sum.9650 = f32[] add(%reduce_sum.9648, %reduce_sum.9649)
}

%compare_greater_than.31.9670.clone (p.0.lhs.126: bf16[], p.0.rhs.126: bf16[], p.1.lhs.126: s32[], p.1.rhs.126: s32[]) -> pred[] {
  %p.1.lhs.126 = s32[] parameter(2)
  %p.1.rhs.126 = s32[] parameter(3)
  %p.0.lhs.126 = bf16[] parameter(0)
  %p.0.rhs.126 = bf16[] parameter(1)
  ROOT %compare.188 = pred[] compare(%p.0.lhs.126, %p.0.rhs.126), direction=GT, type=TOTALORDER
}

%compare-value-and-index.31 (p.0.lhs.127: bf16[], p.0.rhs.127: bf16[], p.1.lhs.127: s32[], p.1.rhs.127: s32[]) -> pred[] {
  %p.0.lhs.127 = bf16[] parameter(0)
  %p.0.rhs.127 = bf16[] parameter(1)
  %compare.190 = pred[] compare(%p.0.lhs.127, %p.0.rhs.127), direction=EQ, type=TOTALORDER
  %p.1.lhs.127 = s32[] parameter(2)
  %p.1.rhs.127 = s32[] parameter(3)
  %compare.191 = pred[] compare(%p.1.lhs.127, %p.1.rhs.127), direction=LT
  %compare.189 = pred[] compare(%p.0.lhs.127, %p.0.rhs.127), direction=GT
  ROOT %select.98 = pred[] select(%compare.190, %compare.191, %compare.189)
}

%region_377.9698.clone (scatter.63: u32[], scatter.64: u32[]) -> u32[] {
  %scatter.63 = u32[] parameter(0)
  ROOT %scatter.64 = u32[] parameter(1)
}

%region_378.9707 (reduce_max.9704: f32[], reduce_max.9705: f32[]) -> f32[] {
  %reduce_max.9704 = f32[] parameter(0)
  %reduce_max.9705 = f32[] parameter(1)
  ROOT %reduce_max.9706 = f32[] maximum(%reduce_max.9704, %reduce_max.9705)
}

%region_379.9716 (reduce_sum.9713: f32[], reduce_sum.9714: f32[]) -> f32[] {
  %reduce_sum.9713 = f32[] parameter(0)
  %reduce_sum.9714 = f32[] parameter(1)
  ROOT %reduce_sum.9715 = f32[] add(%reduce_sum.9713, %reduce_sum.9714)
}

%region_380.9725.clone (scatter-add.64: bf16[], scatter-add.65: bf16[]) -> bf16[] {
  %scatter-add.64 = bf16[] parameter(0)
  %scatter-add.65 = bf16[] parameter(1)
  ROOT %add.943 = bf16[] add(%scatter-add.64, %scatter-add.65)
}

%region_381.9737 (reduce_window_sum.9734: s32[], reduce_window_sum.9735: s32[]) -> s32[] {
  %reduce_window_sum.9734 = s32[] parameter(0)
  %reduce_window_sum.9735 = s32[] parameter(1)
  ROOT %reduce_window_sum.9736 = s32[] add(%reduce_window_sum.9734, %reduce_window_sum.9735)
}

%region_382.9746 (reduce_sum.9743: s32[], reduce_sum.9744: s32[]) -> s32[] {
  %reduce_sum.9743 = s32[] parameter(0)
  %reduce_sum.9744 = s32[] parameter(1)
  ROOT %reduce_sum.9745 = s32[] add(%reduce_sum.9743, %reduce_sum.9744)
}

%region_383.9756 (reduce_sum.9753: s32[], reduce_sum.9754: s32[]) -> s32[] {
  %reduce_sum.9753 = s32[] parameter(0)
  %reduce_sum.9754 = s32[] parameter(1)
  ROOT %reduce_sum.9755 = s32[] add(%reduce_sum.9753, %reduce_sum.9754)
}

%region_384.9797 (reduce_sum.9794: f32[], reduce_sum.9795: f32[]) -> f32[] {
  %reduce_sum.9794 = f32[] parameter(0)
  %reduce_sum.9795 = f32[] parameter(1)
  ROOT %reduce_sum.9796 = f32[] add(%reduce_sum.9794, %reduce_sum.9795)
}

%region_385.9814 (reduce_sum.9811: s32[], reduce_sum.9812: s32[]) -> s32[] {
  %reduce_sum.9811 = s32[] parameter(0)
  %reduce_sum.9812 = s32[] parameter(1)
  ROOT %reduce_sum.9813 = s32[] add(%reduce_sum.9811, %reduce_sum.9812)
}

%region_385.9814.clone (reduce_sum.1507: s32[], reduce_sum.1508: s32[]) -> s32[] {
  %reduce_sum.1507 = s32[] parameter(0)
  %reduce_sum.1508 = s32[] parameter(1)
  ROOT %reduce_sum.1509 = s32[] add(%reduce_sum.1507, %reduce_sum.1508)
}

%region_386.9833 (reduce_max.9830: f32[], reduce_max.9831: f32[]) -> f32[] {
  %reduce_max.9830 = f32[] parameter(0)
  %reduce_max.9831 = f32[] parameter(1)
  ROOT %reduce_max.9832 = f32[] maximum(%reduce_max.9830, %reduce_max.9831)
}

%region_387.9841 (reduce_sum.9838: f32[], reduce_sum.9839: f32[]) -> f32[] {
  %reduce_sum.9838 = f32[] parameter(0)
  %reduce_sum.9839 = f32[] parameter(1)
  ROOT %reduce_sum.9840 = f32[] add(%reduce_sum.9838, %reduce_sum.9839)
}

%region_388.9865 (reduce_sum.9862: bf16[], reduce_sum.47: bf16[]) -> bf16[] {
  %reduce_sum.9862 = bf16[] parameter(0)
  %reduce_sum.47 = bf16[] parameter(1)
  ROOT %reduce_sum.9864 = bf16[] add(%reduce_sum.9862, %reduce_sum.47)
}

%region_388.9865.clone (reduce_sum.1510: bf16[], reduce_sum.1511: bf16[]) -> bf16[] {
  %reduce_sum.1510 = bf16[] parameter(0)
  %reduce_sum.1511 = bf16[] parameter(1)
  ROOT %reduce_sum.1512 = bf16[] add(%reduce_sum.1510, %reduce_sum.1511)
}

%region_389.9872 (reduce_sum.48: f32[], reduce_sum.9870: f32[]) -> f32[] {
  %reduce_sum.48 = f32[] parameter(0)
  %reduce_sum.9870 = f32[] parameter(1)
  ROOT %reduce_sum.49 = f32[] add(%reduce_sum.48, %reduce_sum.9870)
}

%region_390.9885 (reduce_sum.9882: f32[], reduce_sum.9883: f32[]) -> f32[] {
  %reduce_sum.9882 = f32[] parameter(0)
  %reduce_sum.9883 = f32[] parameter(1)
  ROOT %reduce_sum.9884 = f32[] add(%reduce_sum.9882, %reduce_sum.9883)
}

%region_391.9929 (reduce_sum.50: f32[], reduce_sum.51: f32[]) -> f32[] {
  %reduce_sum.50 = f32[] parameter(0)
  %reduce_sum.51 = f32[] parameter(1)
  ROOT %reduce_sum.9928 = f32[] add(%reduce_sum.50, %reduce_sum.51)
}

%region_392.10025 (reduce_sum.10022: s32[], reduce_sum.10023: s32[]) -> s32[] {
  %reduce_sum.10022 = s32[] parameter(0)
  %reduce_sum.10023 = s32[] parameter(1)
  ROOT %reduce_sum.10024 = s32[] add(%reduce_sum.10022, %reduce_sum.10023)
}

%region_393.10034 (reduce_sum.52: s32[], reduce_sum.53: s32[]) -> s32[] {
  %reduce_sum.52 = s32[] parameter(0)
  %reduce_sum.53 = s32[] parameter(1)
  ROOT %reduce_sum.54 = s32[] add(%reduce_sum.52, %reduce_sum.53)
}

%region_394.10040 (reduce_max.10037: s32[], reduce_max.10038: s32[]) -> s32[] {
  %reduce_max.10037 = s32[] parameter(0)
  %reduce_max.10038 = s32[] parameter(1)
  ROOT %reduce_max.10039 = s32[] maximum(%reduce_max.10037, %reduce_max.10038)
}

%region_395.10055 (reduce_sum.10052: f32[], reduce_sum.10053: f32[]) -> f32[] {
  %reduce_sum.10052 = f32[] parameter(0)
  %reduce_sum.10053 = f32[] parameter(1)
  ROOT %reduce_sum.10054 = f32[] add(%reduce_sum.10052, %reduce_sum.10053)
}

%compare_greater_than.32.10076.clone (p.0.lhs.128: bf16[], p.0.rhs.128: bf16[], p.1.lhs.128: s32[], p.1.rhs.128: s32[]) -> pred[] {
  %p.1.lhs.128 = s32[] parameter(2)
  %p.1.rhs.128 = s32[] parameter(3)
  %p.0.lhs.128 = bf16[] parameter(0)
  %p.0.rhs.128 = bf16[] parameter(1)
  ROOT %compare.192 = pred[] compare(%p.0.lhs.128, %p.0.rhs.128), direction=GT, type=TOTALORDER
}

%compare-value-and-index.32 (p.0.lhs.129: bf16[], p.0.rhs.129: bf16[], p.1.lhs.129: s32[], p.1.rhs.129: s32[]) -> pred[] {
  %p.0.lhs.129 = bf16[] parameter(0)
  %p.0.rhs.129 = bf16[] parameter(1)
  %compare.194 = pred[] compare(%p.0.lhs.129, %p.0.rhs.129), direction=EQ, type=TOTALORDER
  %p.1.lhs.129 = s32[] parameter(2)
  %p.1.rhs.129 = s32[] parameter(3)
  %compare.195 = pred[] compare(%p.1.lhs.129, %p.1.rhs.129), direction=LT
  %compare.193 = pred[] compare(%p.0.lhs.129, %p.0.rhs.129), direction=GT
  ROOT %select.99 = pred[] select(%compare.194, %compare.195, %compare.193)
}

%region_396.10112.clone (scatter.65: u32[], scatter.66: u32[]) -> u32[] {
  %scatter.65 = u32[] parameter(0)
  ROOT %scatter.66 = u32[] parameter(1)
}

%region_397.10121 (reduce_max.10118: f32[], reduce_max.10119: f32[]) -> f32[] {
  %reduce_max.10118 = f32[] parameter(0)
  %reduce_max.10119 = f32[] parameter(1)
  ROOT %reduce_max.10120 = f32[] maximum(%reduce_max.10118, %reduce_max.10119)
}

%region_398.10130 (reduce_sum.10127: f32[], reduce_sum.10128: f32[]) -> f32[] {
  %reduce_sum.10127 = f32[] parameter(0)
  %reduce_sum.10128 = f32[] parameter(1)
  ROOT %reduce_sum.10129 = f32[] add(%reduce_sum.10127, %reduce_sum.10128)
}

%region_399.10139.clone (scatter-add.66: bf16[], scatter-add.67: bf16[]) -> bf16[] {
  %scatter-add.66 = bf16[] parameter(0)
  %scatter-add.67 = bf16[] parameter(1)
  ROOT %add.944 = bf16[] add(%scatter-add.66, %scatter-add.67)
}

%region_400.10151 (reduce_window_sum.10148: s32[], reduce_window_sum.10149: s32[]) -> s32[] {
  %reduce_window_sum.10148 = s32[] parameter(0)
  %reduce_window_sum.10149 = s32[] parameter(1)
  ROOT %reduce_window_sum.10150 = s32[] add(%reduce_window_sum.10148, %reduce_window_sum.10149)
}

%region_401.10160 (reduce_sum.10157: s32[], reduce_sum.10158: s32[]) -> s32[] {
  %reduce_sum.10157 = s32[] parameter(0)
  %reduce_sum.10158 = s32[] parameter(1)
  ROOT %reduce_sum.10159 = s32[] add(%reduce_sum.10157, %reduce_sum.10158)
}

%region_402.10170 (reduce_sum.55: s32[], reduce_sum.10168: s32[]) -> s32[] {
  %reduce_sum.55 = s32[] parameter(0)
  %reduce_sum.10168 = s32[] parameter(1)
  ROOT %reduce_sum.10169 = s32[] add(%reduce_sum.55, %reduce_sum.10168)
}

%region_403.10230 (reduce_and.10227: pred[], reduce_and.10228: pred[]) -> pred[] {
  %reduce_and.10227 = pred[] parameter(0)
  %reduce_and.10228 = pred[] parameter(1)
  ROOT %reduce_and.10229 = pred[] and(%reduce_and.10227, %reduce_and.10228)
}

%region_404.10242 (reduce_sum.10239: bf16[], reduce_sum.10240: bf16[]) -> bf16[] {
  %reduce_sum.10239 = bf16[] parameter(0)
  %reduce_sum.10240 = bf16[] parameter(1)
  ROOT %reduce_sum.10241 = bf16[] add(%reduce_sum.10239, %reduce_sum.10240)
}

%region_405.10259 (reduce_sum.10256: f32[], reduce_sum.10257: f32[]) -> f32[] {
  %reduce_sum.10256 = f32[] parameter(0)
  %reduce_sum.10257 = f32[] parameter(1)
  ROOT %reduce_sum.10258 = f32[] add(%reduce_sum.10256, %reduce_sum.10257)
}

%region_406.10269.clone (scatter-add.68: bf16[], scatter-add.69: bf16[]) -> bf16[] {
  %scatter-add.68 = bf16[] parameter(0)
  %scatter-add.69 = bf16[] parameter(1)
  ROOT %add.945 = bf16[] add(%scatter-add.68, %scatter-add.69)
}

%region_407.10285 (reduce_sum.10282: f32[], reduce_sum.10283: f32[]) -> f32[] {
  %reduce_sum.10282 = f32[] parameter(0)
  %reduce_sum.10283 = f32[] parameter(1)
  ROOT %reduce_sum.10284 = f32[] add(%reduce_sum.10282, %reduce_sum.10283)
}

%region_408.10364 (reduce_sum.10361: f32[], reduce_sum.10362: f32[]) -> f32[] {
  %reduce_sum.10361 = f32[] parameter(0)
  %reduce_sum.10362 = f32[] parameter(1)
  ROOT %reduce_sum.10363 = f32[] add(%reduce_sum.10361, %reduce_sum.10362)
}

%region_409.10406 (reduce_sum.10403: f32[], reduce_sum.10404: f32[]) -> f32[] {
  %reduce_sum.10403 = f32[] parameter(0)
  %reduce_sum.10404 = f32[] parameter(1)
  ROOT %reduce_sum.10405 = f32[] add(%reduce_sum.10403, %reduce_sum.10404)
}

%region_410.10502 (reduce_sum.56: s32[], reduce_sum.10500: s32[]) -> s32[] {
  %reduce_sum.56 = s32[] parameter(0)
  %reduce_sum.10500 = s32[] parameter(1)
  ROOT %reduce_sum.10501 = s32[] add(%reduce_sum.56, %reduce_sum.10500)
}

%region_411.10511 (reduce_sum.10508: s32[], reduce_sum.10509: s32[]) -> s32[] {
  %reduce_sum.10508 = s32[] parameter(0)
  %reduce_sum.10509 = s32[] parameter(1)
  ROOT %reduce_sum.10510 = s32[] add(%reduce_sum.10508, %reduce_sum.10509)
}

%region_412.10517 (reduce_max.10514: s32[], reduce_max.10515: s32[]) -> s32[] {
  %reduce_max.10514 = s32[] parameter(0)
  %reduce_max.10515 = s32[] parameter(1)
  ROOT %reduce_max.10516 = s32[] maximum(%reduce_max.10514, %reduce_max.10515)
}

%region_413.10532 (reduce_sum.10529: f32[], reduce_sum.10530: f32[]) -> f32[] {
  %reduce_sum.10529 = f32[] parameter(0)
  %reduce_sum.10530 = f32[] parameter(1)
  ROOT %reduce_sum.10531 = f32[] add(%reduce_sum.10529, %reduce_sum.10530)
}

%compare_greater_than.33.10553.clone (p.0.lhs.130: bf16[], p.0.rhs.130: bf16[], p.1.lhs.130: s32[], p.1.rhs.130: s32[]) -> pred[] {
  %p.1.lhs.130 = s32[] parameter(2)
  %p.1.rhs.130 = s32[] parameter(3)
  %p.0.lhs.130 = bf16[] parameter(0)
  %p.0.rhs.130 = bf16[] parameter(1)
  ROOT %compare.196 = pred[] compare(%p.0.lhs.130, %p.0.rhs.130), direction=GT, type=TOTALORDER
}

%compare-value-and-index.33 (p.0.lhs.131: bf16[], p.0.rhs.131: bf16[], p.1.lhs.131: s32[], p.1.rhs.131: s32[]) -> pred[] {
  %p.0.lhs.131 = bf16[] parameter(0)
  %p.0.rhs.131 = bf16[] parameter(1)
  %compare.198 = pred[] compare(%p.0.lhs.131, %p.0.rhs.131), direction=EQ, type=TOTALORDER
  %p.1.lhs.131 = s32[] parameter(2)
  %p.1.rhs.131 = s32[] parameter(3)
  %compare.199 = pred[] compare(%p.1.lhs.131, %p.1.rhs.131), direction=LT
  %compare.197 = pred[] compare(%p.0.lhs.131, %p.0.rhs.131), direction=GT
  ROOT %select.100 = pred[] select(%compare.198, %compare.199, %compare.197)
}

%region_414.10589.clone (scatter.67: u32[], scatter.68: u32[]) -> u32[] {
  %scatter.67 = u32[] parameter(0)
  ROOT %scatter.68 = u32[] parameter(1)
}

%region_415.10598 (reduce_max.10595: f32[], reduce_max.10596: f32[]) -> f32[] {
  %reduce_max.10595 = f32[] parameter(0)
  %reduce_max.10596 = f32[] parameter(1)
  ROOT %reduce_max.10597 = f32[] maximum(%reduce_max.10595, %reduce_max.10596)
}

%region_416.10607 (reduce_sum.57: f32[], reduce_sum.10605: f32[]) -> f32[] {
  %reduce_sum.57 = f32[] parameter(0)
  %reduce_sum.10605 = f32[] parameter(1)
  ROOT %reduce_sum.10606 = f32[] add(%reduce_sum.57, %reduce_sum.10605)
}

%region_417.10616.clone (scatter-add.70: bf16[], scatter-add.71: bf16[]) -> bf16[] {
  %scatter-add.70 = bf16[] parameter(0)
  %scatter-add.71 = bf16[] parameter(1)
  ROOT %add.946 = bf16[] add(%scatter-add.70, %scatter-add.71)
}

%region_418.10628 (reduce_window_sum.10625: s32[], reduce_window_sum.10626: s32[]) -> s32[] {
  %reduce_window_sum.10625 = s32[] parameter(0)
  %reduce_window_sum.10626 = s32[] parameter(1)
  ROOT %reduce_window_sum.10627 = s32[] add(%reduce_window_sum.10625, %reduce_window_sum.10626)
}

%region_419.10637 (reduce_sum.10634: s32[], reduce_sum.10635: s32[]) -> s32[] {
  %reduce_sum.10634 = s32[] parameter(0)
  %reduce_sum.10635 = s32[] parameter(1)
  ROOT %reduce_sum.10636 = s32[] add(%reduce_sum.10634, %reduce_sum.10635)
}

%region_420.10647 (reduce_sum.10644: s32[], reduce_sum.10645: s32[]) -> s32[] {
  %reduce_sum.10644 = s32[] parameter(0)
  %reduce_sum.10645 = s32[] parameter(1)
  ROOT %reduce_sum.10646 = s32[] add(%reduce_sum.10644, %reduce_sum.10645)
}

%region_421.10704 (reduce_and.10701: pred[], reduce_and.10702: pred[]) -> pred[] {
  %reduce_and.10701 = pred[] parameter(0)
  %reduce_and.10702 = pred[] parameter(1)
  ROOT %reduce_and.10703 = pred[] and(%reduce_and.10701, %reduce_and.10702)
}

%region_422.10716 (reduce_sum.10713: bf16[], reduce_sum.10714: bf16[]) -> bf16[] {
  %reduce_sum.10713 = bf16[] parameter(0)
  %reduce_sum.10714 = bf16[] parameter(1)
  ROOT %reduce_sum.10715 = bf16[] add(%reduce_sum.10713, %reduce_sum.10714)
}

%region_423.10733 (reduce_sum.10730: f32[], reduce_sum.10731: f32[]) -> f32[] {
  %reduce_sum.10730 = f32[] parameter(0)
  %reduce_sum.10731 = f32[] parameter(1)
  ROOT %reduce_sum.10732 = f32[] add(%reduce_sum.10730, %reduce_sum.10731)
}

%region_424.10743.clone (scatter-add.72: bf16[], scatter-add.73: bf16[]) -> bf16[] {
  %scatter-add.72 = bf16[] parameter(0)
  %scatter-add.73 = bf16[] parameter(1)
  ROOT %add.947 = bf16[] add(%scatter-add.72, %scatter-add.73)
}

%region_425.10759 (reduce_sum.10756: f32[], reduce_sum.10757: f32[]) -> f32[] {
  %reduce_sum.10756 = f32[] parameter(0)
  %reduce_sum.10757 = f32[] parameter(1)
  ROOT %reduce_sum.10758 = f32[] add(%reduce_sum.10756, %reduce_sum.10757)
}

%region_426.10838 (reduce_sum.10835: f32[], reduce_sum.10836: f32[]) -> f32[] {
  %reduce_sum.10835 = f32[] parameter(0)
  %reduce_sum.10836 = f32[] parameter(1)
  ROOT %reduce_sum.58 = f32[] add(%reduce_sum.10835, %reduce_sum.10836)
}

%region_427.10880 (reduce_sum.10877: f32[], reduce_sum.10878: f32[]) -> f32[] {
  %reduce_sum.10877 = f32[] parameter(0)
  %reduce_sum.10878 = f32[] parameter(1)
  ROOT %reduce_sum.10879 = f32[] add(%reduce_sum.10877, %reduce_sum.10878)
}

%region_428.10976 (reduce_sum.10973: s32[], reduce_sum.10974: s32[]) -> s32[] {
  %reduce_sum.10973 = s32[] parameter(0)
  %reduce_sum.10974 = s32[] parameter(1)
  ROOT %reduce_sum.10975 = s32[] add(%reduce_sum.10973, %reduce_sum.10974)
}

%region_429.10985 (reduce_sum.10982: s32[], reduce_sum.10983: s32[]) -> s32[] {
  %reduce_sum.10982 = s32[] parameter(0)
  %reduce_sum.10983 = s32[] parameter(1)
  ROOT %reduce_sum.10984 = s32[] add(%reduce_sum.10982, %reduce_sum.10983)
}

%region_430.10991 (reduce_max.10988: s32[], reduce_max.10989: s32[]) -> s32[] {
  %reduce_max.10988 = s32[] parameter(0)
  %reduce_max.10989 = s32[] parameter(1)
  ROOT %reduce_max.10990 = s32[] maximum(%reduce_max.10988, %reduce_max.10989)
}

%region_431.11006 (reduce_sum.11003: f32[], reduce_sum.59: f32[]) -> f32[] {
  %reduce_sum.11003 = f32[] parameter(0)
  %reduce_sum.59 = f32[] parameter(1)
  ROOT %reduce_sum.60 = f32[] add(%reduce_sum.11003, %reduce_sum.59)
}

%compare_greater_than.34.11027.clone (p.0.lhs.132: bf16[], p.0.rhs.132: bf16[], p.1.lhs.132: s32[], p.1.rhs.132: s32[]) -> pred[] {
  %p.1.lhs.132 = s32[] parameter(2)
  %p.1.rhs.132 = s32[] parameter(3)
  %p.0.lhs.132 = bf16[] parameter(0)
  %p.0.rhs.132 = bf16[] parameter(1)
  ROOT %compare.200 = pred[] compare(%p.0.lhs.132, %p.0.rhs.132), direction=GT, type=TOTALORDER
}

%compare-value-and-index.34 (p.0.lhs.133: bf16[], p.0.rhs.133: bf16[], p.1.lhs.133: s32[], p.1.rhs.133: s32[]) -> pred[] {
  %p.0.lhs.133 = bf16[] parameter(0)
  %p.0.rhs.133 = bf16[] parameter(1)
  %compare.202 = pred[] compare(%p.0.lhs.133, %p.0.rhs.133), direction=EQ, type=TOTALORDER
  %p.1.lhs.133 = s32[] parameter(2)
  %p.1.rhs.133 = s32[] parameter(3)
  %compare.203 = pred[] compare(%p.1.lhs.133, %p.1.rhs.133), direction=LT
  %compare.201 = pred[] compare(%p.0.lhs.133, %p.0.rhs.133), direction=GT
  ROOT %select.101 = pred[] select(%compare.202, %compare.203, %compare.201)
}

%region_432.11063.clone (scatter.69: u32[], scatter.70: u32[]) -> u32[] {
  %scatter.69 = u32[] parameter(0)
  ROOT %scatter.70 = u32[] parameter(1)
}

%region_433.11072 (reduce_max.11069: f32[], reduce_max.11070: f32[]) -> f32[] {
  %reduce_max.11069 = f32[] parameter(0)
  %reduce_max.11070 = f32[] parameter(1)
  ROOT %reduce_max.11071 = f32[] maximum(%reduce_max.11069, %reduce_max.11070)
}

%region_434.11081 (reduce_sum.11078: f32[], reduce_sum.61: f32[]) -> f32[] {
  %reduce_sum.11078 = f32[] parameter(0)
  %reduce_sum.61 = f32[] parameter(1)
  ROOT %reduce_sum.62 = f32[] add(%reduce_sum.11078, %reduce_sum.61)
}

%region_435.11090.clone (scatter-add.74: bf16[], scatter-add.75: bf16[]) -> bf16[] {
  %scatter-add.74 = bf16[] parameter(0)
  %scatter-add.75 = bf16[] parameter(1)
  ROOT %add.948 = bf16[] add(%scatter-add.74, %scatter-add.75)
}

%region_436.11102 (reduce_window_sum.11099: s32[], reduce_window_sum.11100: s32[]) -> s32[] {
  %reduce_window_sum.11099 = s32[] parameter(0)
  %reduce_window_sum.11100 = s32[] parameter(1)
  ROOT %reduce_window_sum.11101 = s32[] add(%reduce_window_sum.11099, %reduce_window_sum.11100)
}

%region_437.11111 (reduce_sum.11108: s32[], reduce_sum.11109: s32[]) -> s32[] {
  %reduce_sum.11108 = s32[] parameter(0)
  %reduce_sum.11109 = s32[] parameter(1)
  ROOT %reduce_sum.11110 = s32[] add(%reduce_sum.11108, %reduce_sum.11109)
}

%region_438.11121 (reduce_sum.11118: s32[], reduce_sum.11119: s32[]) -> s32[] {
  %reduce_sum.11118 = s32[] parameter(0)
  %reduce_sum.11119 = s32[] parameter(1)
  ROOT %reduce_sum.63 = s32[] add(%reduce_sum.11118, %reduce_sum.11119)
}

%region_439.11178 (reduce_and.11175: pred[], reduce_and.11176: pred[]) -> pred[] {
  %reduce_and.11175 = pred[] parameter(0)
  %reduce_and.11176 = pred[] parameter(1)
  ROOT %reduce_and.11177 = pred[] and(%reduce_and.11175, %reduce_and.11176)
}

%region_440.11190 (reduce_sum.11187: bf16[], reduce_sum.11188: bf16[]) -> bf16[] {
  %reduce_sum.11187 = bf16[] parameter(0)
  %reduce_sum.11188 = bf16[] parameter(1)
  ROOT %reduce_sum.11189 = bf16[] add(%reduce_sum.11187, %reduce_sum.11188)
}

%region_441.11207 (reduce_sum.11204: f32[], reduce_sum.11205: f32[]) -> f32[] {
  %reduce_sum.11204 = f32[] parameter(0)
  %reduce_sum.11205 = f32[] parameter(1)
  ROOT %reduce_sum.11206 = f32[] add(%reduce_sum.11204, %reduce_sum.11205)
}

%region_442.11217.clone (scatter-add.76: bf16[], scatter-add.77: bf16[]) -> bf16[] {
  %scatter-add.76 = bf16[] parameter(0)
  %scatter-add.77 = bf16[] parameter(1)
  ROOT %add.949 = bf16[] add(%scatter-add.76, %scatter-add.77)
}

%region_443.11233 (reduce_sum.11230: f32[], reduce_sum.11231: f32[]) -> f32[] {
  %reduce_sum.11230 = f32[] parameter(0)
  %reduce_sum.11231 = f32[] parameter(1)
  ROOT %reduce_sum.11232 = f32[] add(%reduce_sum.11230, %reduce_sum.11231)
}

%region_444.11312 (reduce_sum.11309: f32[], reduce_sum.11310: f32[]) -> f32[] {
  %reduce_sum.11309 = f32[] parameter(0)
  %reduce_sum.11310 = f32[] parameter(1)
  ROOT %reduce_sum.11311 = f32[] add(%reduce_sum.11309, %reduce_sum.11310)
}

%region_445.11354 (reduce_sum.11351: f32[], reduce_sum.11352: f32[]) -> f32[] {
  %reduce_sum.11351 = f32[] parameter(0)
  %reduce_sum.11352 = f32[] parameter(1)
  ROOT %reduce_sum.11353 = f32[] add(%reduce_sum.11351, %reduce_sum.11352)
}

%region_446.11450 (reduce_sum.11447: s32[], reduce_sum.11448: s32[]) -> s32[] {
  %reduce_sum.11447 = s32[] parameter(0)
  %reduce_sum.11448 = s32[] parameter(1)
  ROOT %reduce_sum.11449 = s32[] add(%reduce_sum.11447, %reduce_sum.11448)
}

%region_447.11459 (reduce_sum.11456: s32[], reduce_sum.11457: s32[]) -> s32[] {
  %reduce_sum.11456 = s32[] parameter(0)
  %reduce_sum.11457 = s32[] parameter(1)
  ROOT %reduce_sum.11458 = s32[] add(%reduce_sum.11456, %reduce_sum.11457)
}

%region_448.11465 (reduce_max.11462: s32[], reduce_max.11463: s32[]) -> s32[] {
  %reduce_max.11462 = s32[] parameter(0)
  %reduce_max.11463 = s32[] parameter(1)
  ROOT %reduce_max.11464 = s32[] maximum(%reduce_max.11462, %reduce_max.11463)
}

%region_449.11480 (reduce_sum.11477: f32[], reduce_sum.11478: f32[]) -> f32[] {
  %reduce_sum.11477 = f32[] parameter(0)
  %reduce_sum.11478 = f32[] parameter(1)
  ROOT %reduce_sum.11479 = f32[] add(%reduce_sum.11477, %reduce_sum.11478)
}

%compare_greater_than.35.11501.clone (p.0.lhs.134: bf16[], p.0.rhs.134: bf16[], p.1.lhs.134: s32[], p.1.rhs.134: s32[]) -> pred[] {
  %p.1.lhs.134 = s32[] parameter(2)
  %p.1.rhs.134 = s32[] parameter(3)
  %p.0.lhs.134 = bf16[] parameter(0)
  %p.0.rhs.134 = bf16[] parameter(1)
  ROOT %compare.204 = pred[] compare(%p.0.lhs.134, %p.0.rhs.134), direction=GT, type=TOTALORDER
}

%compare-value-and-index.35 (p.0.lhs.135: bf16[], p.0.rhs.135: bf16[], p.1.lhs.135: s32[], p.1.rhs.135: s32[]) -> pred[] {
  %p.0.lhs.135 = bf16[] parameter(0)
  %p.0.rhs.135 = bf16[] parameter(1)
  %compare.206 = pred[] compare(%p.0.lhs.135, %p.0.rhs.135), direction=EQ, type=TOTALORDER
  %p.1.lhs.135 = s32[] parameter(2)
  %p.1.rhs.135 = s32[] parameter(3)
  %compare.207 = pred[] compare(%p.1.lhs.135, %p.1.rhs.135), direction=LT
  %compare.205 = pred[] compare(%p.0.lhs.135, %p.0.rhs.135), direction=GT
  ROOT %select.102 = pred[] select(%compare.206, %compare.207, %compare.205)
}

%region_450.11537.clone (scatter.71: u32[], scatter.72: u32[]) -> u32[] {
  %scatter.71 = u32[] parameter(0)
  ROOT %scatter.72 = u32[] parameter(1)
}

%region_451.11546 (reduce_max.11543: f32[], reduce_max.11544: f32[]) -> f32[] {
  %reduce_max.11543 = f32[] parameter(0)
  %reduce_max.11544 = f32[] parameter(1)
  ROOT %reduce_max.11545 = f32[] maximum(%reduce_max.11543, %reduce_max.11544)
}

%region_452.11555 (reduce_sum.64: f32[], reduce_sum.65: f32[]) -> f32[] {
  %reduce_sum.64 = f32[] parameter(0)
  %reduce_sum.65 = f32[] parameter(1)
  ROOT %reduce_sum.11554 = f32[] add(%reduce_sum.64, %reduce_sum.65)
}

%region_453.11564.clone (scatter-add.78: bf16[], scatter-add.79: bf16[]) -> bf16[] {
  %scatter-add.78 = bf16[] parameter(0)
  %scatter-add.79 = bf16[] parameter(1)
  ROOT %add.950 = bf16[] add(%scatter-add.78, %scatter-add.79)
}

%region_454.11576 (reduce_window_sum.11573: s32[], reduce_window_sum.11574: s32[]) -> s32[] {
  %reduce_window_sum.11573 = s32[] parameter(0)
  %reduce_window_sum.11574 = s32[] parameter(1)
  ROOT %reduce_window_sum.11575 = s32[] add(%reduce_window_sum.11573, %reduce_window_sum.11574)
}

%region_455.11585 (reduce_sum.11582: s32[], reduce_sum.66: s32[]) -> s32[] {
  %reduce_sum.11582 = s32[] parameter(0)
  %reduce_sum.66 = s32[] parameter(1)
  ROOT %reduce_sum.67 = s32[] add(%reduce_sum.11582, %reduce_sum.66)
}

%region_456.11595 (reduce_sum.11592: s32[], reduce_sum.68: s32[]) -> s32[] {
  %reduce_sum.11592 = s32[] parameter(0)
  %reduce_sum.68 = s32[] parameter(1)
  ROOT %reduce_sum.69 = s32[] add(%reduce_sum.11592, %reduce_sum.68)
}

%region_457.11652 (reduce_and.11649: pred[], reduce_and.11650: pred[]) -> pred[] {
  %reduce_and.11649 = pred[] parameter(0)
  %reduce_and.11650 = pred[] parameter(1)
  ROOT %reduce_and.11651 = pred[] and(%reduce_and.11649, %reduce_and.11650)
}

%region_458.11664 (reduce_sum.11661: bf16[], reduce_sum.11662: bf16[]) -> bf16[] {
  %reduce_sum.11661 = bf16[] parameter(0)
  %reduce_sum.11662 = bf16[] parameter(1)
  ROOT %reduce_sum.11663 = bf16[] add(%reduce_sum.11661, %reduce_sum.11662)
}

%region_459.11681 (reduce_sum.11678: f32[], reduce_sum.11679: f32[]) -> f32[] {
  %reduce_sum.11678 = f32[] parameter(0)
  %reduce_sum.11679 = f32[] parameter(1)
  ROOT %reduce_sum.11680 = f32[] add(%reduce_sum.11678, %reduce_sum.11679)
}

%region_460.11691.clone (scatter-add.80: bf16[], scatter-add.81: bf16[]) -> bf16[] {
  %scatter-add.80 = bf16[] parameter(0)
  %scatter-add.81 = bf16[] parameter(1)
  ROOT %add.951 = bf16[] add(%scatter-add.80, %scatter-add.81)
}

%region_461.11707 (reduce_sum.70: f32[], reduce_sum.71: f32[]) -> f32[] {
  %reduce_sum.70 = f32[] parameter(0)
  %reduce_sum.71 = f32[] parameter(1)
  ROOT %reduce_sum.72 = f32[] add(%reduce_sum.70, %reduce_sum.71)
}

%region_462.11786 (reduce_sum.11783: f32[], reduce_sum.11784: f32[]) -> f32[] {
  %reduce_sum.11783 = f32[] parameter(0)
  %reduce_sum.11784 = f32[] parameter(1)
  ROOT %reduce_sum.11785 = f32[] add(%reduce_sum.11783, %reduce_sum.11784)
}

%region_463.11828 (reduce_sum.11825: f32[], reduce_sum.11826: f32[]) -> f32[] {
  %reduce_sum.11825 = f32[] parameter(0)
  %reduce_sum.11826 = f32[] parameter(1)
  ROOT %reduce_sum.11827 = f32[] add(%reduce_sum.11825, %reduce_sum.11826)
}

%region_464.11924 (reduce_sum.11921: s32[], reduce_sum.73: s32[]) -> s32[] {
  %reduce_sum.11921 = s32[] parameter(0)
  %reduce_sum.73 = s32[] parameter(1)
  ROOT %reduce_sum.11923 = s32[] add(%reduce_sum.11921, %reduce_sum.73)
}

%region_465.11933 (reduce_sum.11930: s32[], reduce_sum.11931: s32[]) -> s32[] {
  %reduce_sum.11930 = s32[] parameter(0)
  %reduce_sum.11931 = s32[] parameter(1)
  ROOT %reduce_sum.11932 = s32[] add(%reduce_sum.11930, %reduce_sum.11931)
}

%region_466.11939 (reduce_max.11936: s32[], reduce_max.11937: s32[]) -> s32[] {
  %reduce_max.11936 = s32[] parameter(0)
  %reduce_max.11937 = s32[] parameter(1)
  ROOT %reduce_max.11938 = s32[] maximum(%reduce_max.11936, %reduce_max.11937)
}

%region_467.11954 (reduce_sum.11951: f32[], reduce_sum.11952: f32[]) -> f32[] {
  %reduce_sum.11951 = f32[] parameter(0)
  %reduce_sum.11952 = f32[] parameter(1)
  ROOT %reduce_sum.11953 = f32[] add(%reduce_sum.11951, %reduce_sum.11952)
}

%compare_greater_than.36.11975.clone (p.0.lhs.136: bf16[], p.0.rhs.136: bf16[], p.1.lhs.136: s32[], p.1.rhs.136: s32[]) -> pred[] {
  %p.1.lhs.136 = s32[] parameter(2)
  %p.1.rhs.136 = s32[] parameter(3)
  %p.0.lhs.136 = bf16[] parameter(0)
  %p.0.rhs.136 = bf16[] parameter(1)
  ROOT %compare.208 = pred[] compare(%p.0.lhs.136, %p.0.rhs.136), direction=GT, type=TOTALORDER
}

%compare-value-and-index.36 (p.0.lhs.137: bf16[], p.0.rhs.137: bf16[], p.1.lhs.137: s32[], p.1.rhs.137: s32[]) -> pred[] {
  %p.0.lhs.137 = bf16[] parameter(0)
  %p.0.rhs.137 = bf16[] parameter(1)
  %compare.210 = pred[] compare(%p.0.lhs.137, %p.0.rhs.137), direction=EQ, type=TOTALORDER
  %p.1.lhs.137 = s32[] parameter(2)
  %p.1.rhs.137 = s32[] parameter(3)
  %compare.211 = pred[] compare(%p.1.lhs.137, %p.1.rhs.137), direction=LT
  %compare.209 = pred[] compare(%p.0.lhs.137, %p.0.rhs.137), direction=GT
  ROOT %select.103 = pred[] select(%compare.210, %compare.211, %compare.209)
}

%region_468.12011.clone (scatter.73: u32[], scatter.74: u32[]) -> u32[] {
  %scatter.73 = u32[] parameter(0)
  ROOT %scatter.74 = u32[] parameter(1)
}

%region_469.12020 (reduce_max.12017: f32[], reduce_max.12018: f32[]) -> f32[] {
  %reduce_max.12017 = f32[] parameter(0)
  %reduce_max.12018 = f32[] parameter(1)
  ROOT %reduce_max.12019 = f32[] maximum(%reduce_max.12017, %reduce_max.12018)
}

%region_470.12029 (reduce_sum.12026: f32[], reduce_sum.12027: f32[]) -> f32[] {
  %reduce_sum.12026 = f32[] parameter(0)
  %reduce_sum.12027 = f32[] parameter(1)
  ROOT %reduce_sum.12028 = f32[] add(%reduce_sum.12026, %reduce_sum.12027)
}

%region_471.12038.clone (scatter-add.82: bf16[], scatter-add.83: bf16[]) -> bf16[] {
  %scatter-add.82 = bf16[] parameter(0)
  %scatter-add.83 = bf16[] parameter(1)
  ROOT %add.952 = bf16[] add(%scatter-add.82, %scatter-add.83)
}

%region_472.12050 (reduce_window_sum.12047: s32[], reduce_window_sum.12048: s32[]) -> s32[] {
  %reduce_window_sum.12047 = s32[] parameter(0)
  %reduce_window_sum.12048 = s32[] parameter(1)
  ROOT %reduce_window_sum.12049 = s32[] add(%reduce_window_sum.12047, %reduce_window_sum.12048)
}

%region_473.12059 (reduce_sum.12056: s32[], reduce_sum.12057: s32[]) -> s32[] {
  %reduce_sum.12056 = s32[] parameter(0)
  %reduce_sum.12057 = s32[] parameter(1)
  ROOT %reduce_sum.12058 = s32[] add(%reduce_sum.12056, %reduce_sum.12057)
}

%region_474.12069 (reduce_sum.12066: s32[], reduce_sum.12067: s32[]) -> s32[] {
  %reduce_sum.12066 = s32[] parameter(0)
  %reduce_sum.12067 = s32[] parameter(1)
  ROOT %reduce_sum.12068 = s32[] add(%reduce_sum.12066, %reduce_sum.12067)
}

%region_475.12126 (reduce_and.12123: pred[], reduce_and.12124: pred[]) -> pred[] {
  %reduce_and.12123 = pred[] parameter(0)
  %reduce_and.12124 = pred[] parameter(1)
  ROOT %reduce_and.12125 = pred[] and(%reduce_and.12123, %reduce_and.12124)
}

%region_476.12138 (reduce_sum.12135: bf16[], reduce_sum.12136: bf16[]) -> bf16[] {
  %reduce_sum.12135 = bf16[] parameter(0)
  %reduce_sum.12136 = bf16[] parameter(1)
  ROOT %reduce_sum.12137 = bf16[] add(%reduce_sum.12135, %reduce_sum.12136)
}

%region_477.12155 (reduce_sum.12152: f32[], reduce_sum.12153: f32[]) -> f32[] {
  %reduce_sum.12152 = f32[] parameter(0)
  %reduce_sum.12153 = f32[] parameter(1)
  ROOT %reduce_sum.12154 = f32[] add(%reduce_sum.12152, %reduce_sum.12153)
}

%region_478.12165.clone (scatter-add.84: bf16[], scatter-add.85: bf16[]) -> bf16[] {
  %scatter-add.84 = bf16[] parameter(0)
  %scatter-add.85 = bf16[] parameter(1)
  ROOT %add.953 = bf16[] add(%scatter-add.84, %scatter-add.85)
}

%region_479.12181 (reduce_sum.74: f32[], reduce_sum.75: f32[]) -> f32[] {
  %reduce_sum.74 = f32[] parameter(0)
  %reduce_sum.75 = f32[] parameter(1)
  ROOT %reduce_sum.12180 = f32[] add(%reduce_sum.74, %reduce_sum.75)
}

%region_480.12260 (reduce_sum.12257: f32[], reduce_sum.12258: f32[]) -> f32[] {
  %reduce_sum.12257 = f32[] parameter(0)
  %reduce_sum.12258 = f32[] parameter(1)
  ROOT %reduce_sum.12259 = f32[] add(%reduce_sum.12257, %reduce_sum.12258)
}

%region_481.12302 (reduce_sum.12299: f32[], reduce_sum.76: f32[]) -> f32[] {
  %reduce_sum.12299 = f32[] parameter(0)
  %reduce_sum.76 = f32[] parameter(1)
  ROOT %reduce_sum.77 = f32[] add(%reduce_sum.12299, %reduce_sum.76)
}

%region_482.12398 (reduce_sum.12395: s32[], reduce_sum.12396: s32[]) -> s32[] {
  %reduce_sum.12395 = s32[] parameter(0)
  %reduce_sum.12396 = s32[] parameter(1)
  ROOT %reduce_sum.12397 = s32[] add(%reduce_sum.12395, %reduce_sum.12396)
}

%region_483.12407 (reduce_sum.12404: s32[], reduce_sum.12405: s32[]) -> s32[] {
  %reduce_sum.12404 = s32[] parameter(0)
  %reduce_sum.12405 = s32[] parameter(1)
  ROOT %reduce_sum.12406 = s32[] add(%reduce_sum.12404, %reduce_sum.12405)
}

%region_484.12413 (reduce_max.12410: s32[], reduce_max.12411: s32[]) -> s32[] {
  %reduce_max.12410 = s32[] parameter(0)
  %reduce_max.12411 = s32[] parameter(1)
  ROOT %reduce_max.12412 = s32[] maximum(%reduce_max.12410, %reduce_max.12411)
}

%region_485.12428 (reduce_sum.12425: f32[], reduce_sum.12426: f32[]) -> f32[] {
  %reduce_sum.12425 = f32[] parameter(0)
  %reduce_sum.12426 = f32[] parameter(1)
  ROOT %reduce_sum.12427 = f32[] add(%reduce_sum.12425, %reduce_sum.12426)
}

%compare_greater_than.37.12449.clone (p.0.lhs.138: bf16[], p.0.rhs.138: bf16[], p.1.lhs.138: s32[], p.1.rhs.138: s32[]) -> pred[] {
  %p.1.lhs.138 = s32[] parameter(2)
  %p.1.rhs.138 = s32[] parameter(3)
  %p.0.lhs.138 = bf16[] parameter(0)
  %p.0.rhs.138 = bf16[] parameter(1)
  ROOT %compare.212 = pred[] compare(%p.0.lhs.138, %p.0.rhs.138), direction=GT, type=TOTALORDER
}

%compare-value-and-index.37 (p.0.lhs.139: bf16[], p.0.rhs.139: bf16[], p.1.lhs.139: s32[], p.1.rhs.139: s32[]) -> pred[] {
  %p.0.lhs.139 = bf16[] parameter(0)
  %p.0.rhs.139 = bf16[] parameter(1)
  %compare.214 = pred[] compare(%p.0.lhs.139, %p.0.rhs.139), direction=EQ, type=TOTALORDER
  %p.1.lhs.139 = s32[] parameter(2)
  %p.1.rhs.139 = s32[] parameter(3)
  %compare.215 = pred[] compare(%p.1.lhs.139, %p.1.rhs.139), direction=LT
  %compare.213 = pred[] compare(%p.0.lhs.139, %p.0.rhs.139), direction=GT
  ROOT %select.104 = pred[] select(%compare.214, %compare.215, %compare.213)
}

%region_486.12485.clone (scatter.75: u32[], scatter.76: u32[]) -> u32[] {
  %scatter.75 = u32[] parameter(0)
  ROOT %scatter.76 = u32[] parameter(1)
}

%region_487.12494 (reduce_max.12491: f32[], reduce_max.12492: f32[]) -> f32[] {
  %reduce_max.12491 = f32[] parameter(0)
  %reduce_max.12492 = f32[] parameter(1)
  ROOT %reduce_max.12493 = f32[] maximum(%reduce_max.12491, %reduce_max.12492)
}

%region_488.12503 (reduce_sum.12500: f32[], reduce_sum.12501: f32[]) -> f32[] {
  %reduce_sum.12500 = f32[] parameter(0)
  %reduce_sum.12501 = f32[] parameter(1)
  ROOT %reduce_sum.12502 = f32[] add(%reduce_sum.12500, %reduce_sum.12501)
}

%region_489.12512.clone (scatter-add.86: bf16[], scatter-add.87: bf16[]) -> bf16[] {
  %scatter-add.86 = bf16[] parameter(0)
  %scatter-add.87 = bf16[] parameter(1)
  ROOT %add.954 = bf16[] add(%scatter-add.86, %scatter-add.87)
}

%region_490.12524 (reduce_window_sum.12521: s32[], reduce_window_sum.12522: s32[]) -> s32[] {
  %reduce_window_sum.12521 = s32[] parameter(0)
  %reduce_window_sum.12522 = s32[] parameter(1)
  ROOT %reduce_window_sum.12523 = s32[] add(%reduce_window_sum.12521, %reduce_window_sum.12522)
}

%region_491.12533 (reduce_sum.12530: s32[], reduce_sum.12531: s32[]) -> s32[] {
  %reduce_sum.12530 = s32[] parameter(0)
  %reduce_sum.12531 = s32[] parameter(1)
  ROOT %reduce_sum.12532 = s32[] add(%reduce_sum.12530, %reduce_sum.12531)
}

%region_492.12543 (reduce_sum.78: s32[], reduce_sum.12541: s32[]) -> s32[] {
  %reduce_sum.78 = s32[] parameter(0)
  %reduce_sum.12541 = s32[] parameter(1)
  ROOT %reduce_sum.12542 = s32[] add(%reduce_sum.78, %reduce_sum.12541)
}

%region_493.12600 (reduce_and.12597: pred[], reduce_and.12598: pred[]) -> pred[] {
  %reduce_and.12597 = pred[] parameter(0)
  %reduce_and.12598 = pred[] parameter(1)
  ROOT %reduce_and.12599 = pred[] and(%reduce_and.12597, %reduce_and.12598)
}

%region_494.12612 (reduce_sum.12609: bf16[], reduce_sum.79: bf16[]) -> bf16[] {
  %reduce_sum.12609 = bf16[] parameter(0)
  %reduce_sum.79 = bf16[] parameter(1)
  ROOT %reduce_sum.12611 = bf16[] add(%reduce_sum.12609, %reduce_sum.79)
}

%region_495.12629 (reduce_sum.12626: f32[], reduce_sum.12627: f32[]) -> f32[] {
  %reduce_sum.12626 = f32[] parameter(0)
  %reduce_sum.12627 = f32[] parameter(1)
  ROOT %reduce_sum.12628 = f32[] add(%reduce_sum.12626, %reduce_sum.12627)
}

%region_496.12639.clone (scatter-add.88: bf16[], scatter-add.89: bf16[]) -> bf16[] {
  %scatter-add.88 = bf16[] parameter(0)
  %scatter-add.89 = bf16[] parameter(1)
  ROOT %add.955 = bf16[] add(%scatter-add.88, %scatter-add.89)
}

%region_497.12655 (reduce_sum.12652: f32[], reduce_sum.12653: f32[]) -> f32[] {
  %reduce_sum.12652 = f32[] parameter(0)
  %reduce_sum.12653 = f32[] parameter(1)
  ROOT %reduce_sum.12654 = f32[] add(%reduce_sum.12652, %reduce_sum.12653)
}

%region_498.12734 (reduce_sum.12731: f32[], reduce_sum.12732: f32[]) -> f32[] {
  %reduce_sum.12731 = f32[] parameter(0)
  %reduce_sum.12732 = f32[] parameter(1)
  ROOT %reduce_sum.12733 = f32[] add(%reduce_sum.12731, %reduce_sum.12732)
}

%region_499.12776 (reduce_sum.12773: f32[], reduce_sum.12774: f32[]) -> f32[] {
  %reduce_sum.12773 = f32[] parameter(0)
  %reduce_sum.12774 = f32[] parameter(1)
  ROOT %reduce_sum.12775 = f32[] add(%reduce_sum.12773, %reduce_sum.12774)
}

%region_500.12872 (reduce_sum.80: s32[], reduce_sum.12870: s32[]) -> s32[] {
  %reduce_sum.80 = s32[] parameter(0)
  %reduce_sum.12870 = s32[] parameter(1)
  ROOT %reduce_sum.12871 = s32[] add(%reduce_sum.80, %reduce_sum.12870)
}

%region_501.12881 (reduce_sum.81: s32[], reduce_sum.82: s32[]) -> s32[] {
  %reduce_sum.81 = s32[] parameter(0)
  %reduce_sum.82 = s32[] parameter(1)
  ROOT %reduce_sum.12880 = s32[] add(%reduce_sum.81, %reduce_sum.82)
}

%region_502.12887 (reduce_max.12884: s32[], reduce_max.12885: s32[]) -> s32[] {
  %reduce_max.12884 = s32[] parameter(0)
  %reduce_max.12885 = s32[] parameter(1)
  ROOT %reduce_max.12886 = s32[] maximum(%reduce_max.12884, %reduce_max.12885)
}

%region_503.12902 (reduce_sum.12899: f32[], reduce_sum.12900: f32[]) -> f32[] {
  %reduce_sum.12899 = f32[] parameter(0)
  %reduce_sum.12900 = f32[] parameter(1)
  ROOT %reduce_sum.12901 = f32[] add(%reduce_sum.12899, %reduce_sum.12900)
}

%compare_greater_than.38.12923.clone (p.0.lhs.140: bf16[], p.0.rhs.140: bf16[], p.1.lhs.140: s32[], p.1.rhs.140: s32[]) -> pred[] {
  %p.1.lhs.140 = s32[] parameter(2)
  %p.1.rhs.140 = s32[] parameter(3)
  %p.0.lhs.140 = bf16[] parameter(0)
  %p.0.rhs.140 = bf16[] parameter(1)
  ROOT %compare.216 = pred[] compare(%p.0.lhs.140, %p.0.rhs.140), direction=GT, type=TOTALORDER
}

%compare-value-and-index.38 (p.0.lhs.141: bf16[], p.0.rhs.141: bf16[], p.1.lhs.141: s32[], p.1.rhs.141: s32[]) -> pred[] {
  %p.0.lhs.141 = bf16[] parameter(0)
  %p.0.rhs.141 = bf16[] parameter(1)
  %compare.218 = pred[] compare(%p.0.lhs.141, %p.0.rhs.141), direction=EQ, type=TOTALORDER
  %p.1.lhs.141 = s32[] parameter(2)
  %p.1.rhs.141 = s32[] parameter(3)
  %compare.219 = pred[] compare(%p.1.lhs.141, %p.1.rhs.141), direction=LT
  %compare.217 = pred[] compare(%p.0.lhs.141, %p.0.rhs.141), direction=GT
  ROOT %select.105 = pred[] select(%compare.218, %compare.219, %compare.217)
}

%region_504.12959.clone (scatter.77: u32[], scatter.78: u32[]) -> u32[] {
  %scatter.77 = u32[] parameter(0)
  ROOT %scatter.78 = u32[] parameter(1)
}

%region_505.12968 (reduce_max.12965: f32[], reduce_max.12966: f32[]) -> f32[] {
  %reduce_max.12965 = f32[] parameter(0)
  %reduce_max.12966 = f32[] parameter(1)
  ROOT %reduce_max.12967 = f32[] maximum(%reduce_max.12965, %reduce_max.12966)
}

%region_506.12977 (reduce_sum.12974: f32[], reduce_sum.12975: f32[]) -> f32[] {
  %reduce_sum.12974 = f32[] parameter(0)
  %reduce_sum.12975 = f32[] parameter(1)
  ROOT %reduce_sum.12976 = f32[] add(%reduce_sum.12974, %reduce_sum.12975)
}

%region_507.12986.clone (scatter-add.90: bf16[], scatter-add.91: bf16[]) -> bf16[] {
  %scatter-add.90 = bf16[] parameter(0)
  %scatter-add.91 = bf16[] parameter(1)
  ROOT %add.956 = bf16[] add(%scatter-add.90, %scatter-add.91)
}

%region_508.12998 (reduce_window_sum.12995: s32[], reduce_window_sum.12996: s32[]) -> s32[] {
  %reduce_window_sum.12995 = s32[] parameter(0)
  %reduce_window_sum.12996 = s32[] parameter(1)
  ROOT %reduce_window_sum.12997 = s32[] add(%reduce_window_sum.12995, %reduce_window_sum.12996)
}

%region_509.13007 (reduce_sum.13004: s32[], reduce_sum.13005: s32[]) -> s32[] {
  %reduce_sum.13004 = s32[] parameter(0)
  %reduce_sum.13005 = s32[] parameter(1)
  ROOT %reduce_sum.13006 = s32[] add(%reduce_sum.13004, %reduce_sum.13005)
}

%region_510.13017 (reduce_sum.13014: s32[], reduce_sum.13015: s32[]) -> s32[] {
  %reduce_sum.13014 = s32[] parameter(0)
  %reduce_sum.13015 = s32[] parameter(1)
  ROOT %reduce_sum.13016 = s32[] add(%reduce_sum.13014, %reduce_sum.13015)
}

%region_511.13074 (reduce_and.13071: pred[], reduce_and.13072: pred[]) -> pred[] {
  %reduce_and.13071 = pred[] parameter(0)
  %reduce_and.13072 = pred[] parameter(1)
  ROOT %reduce_and.13073 = pred[] and(%reduce_and.13071, %reduce_and.13072)
}

%region_512.13086 (reduce_sum.13083: bf16[], reduce_sum.13084: bf16[]) -> bf16[] {
  %reduce_sum.13083 = bf16[] parameter(0)
  %reduce_sum.13084 = bf16[] parameter(1)
  ROOT %reduce_sum.13085 = bf16[] add(%reduce_sum.13083, %reduce_sum.13084)
}

%region_513.13103 (reduce_sum.13100: f32[], reduce_sum.13101: f32[]) -> f32[] {
  %reduce_sum.13100 = f32[] parameter(0)
  %reduce_sum.13101 = f32[] parameter(1)
  ROOT %reduce_sum.13102 = f32[] add(%reduce_sum.13100, %reduce_sum.13101)
}

%region_514.13113.clone (scatter-add.92: bf16[], scatter-add.93: bf16[]) -> bf16[] {
  %scatter-add.92 = bf16[] parameter(0)
  %scatter-add.93 = bf16[] parameter(1)
  ROOT %add.957 = bf16[] add(%scatter-add.92, %scatter-add.93)
}

%region_515.13129 (reduce_sum.13126: f32[], reduce_sum.13127: f32[]) -> f32[] {
  %reduce_sum.13126 = f32[] parameter(0)
  %reduce_sum.13127 = f32[] parameter(1)
  ROOT %reduce_sum.13128 = f32[] add(%reduce_sum.13126, %reduce_sum.13127)
}

%region_516.13208 (reduce_sum.13205: f32[], reduce_sum.13206: f32[]) -> f32[] {
  %reduce_sum.13205 = f32[] parameter(0)
  %reduce_sum.13206 = f32[] parameter(1)
  ROOT %reduce_sum.13207 = f32[] add(%reduce_sum.13205, %reduce_sum.13206)
}

%region_517.13250 (reduce_sum.13247: f32[], reduce_sum.13248: f32[]) -> f32[] {
  %reduce_sum.13247 = f32[] parameter(0)
  %reduce_sum.13248 = f32[] parameter(1)
  ROOT %reduce_sum.13249 = f32[] add(%reduce_sum.13247, %reduce_sum.13248)
}

%region_518.13346 (reduce_sum.83: s32[], reduce_sum.84: s32[]) -> s32[] {
  %reduce_sum.83 = s32[] parameter(0)
  %reduce_sum.84 = s32[] parameter(1)
  ROOT %reduce_sum.85 = s32[] add(%reduce_sum.83, %reduce_sum.84)
}

%region_519.13355 (reduce_sum.13352: s32[], reduce_sum.13353: s32[]) -> s32[] {
  %reduce_sum.13352 = s32[] parameter(0)
  %reduce_sum.13353 = s32[] parameter(1)
  ROOT %reduce_sum.13354 = s32[] add(%reduce_sum.13352, %reduce_sum.13353)
}

%region_520.13361 (reduce_max.13358: s32[], reduce_max.13359: s32[]) -> s32[] {
  %reduce_max.13358 = s32[] parameter(0)
  %reduce_max.13359 = s32[] parameter(1)
  ROOT %reduce_max.13360 = s32[] maximum(%reduce_max.13358, %reduce_max.13359)
}

%region_521.13376 (reduce_sum.13373: f32[], reduce_sum.13374: f32[]) -> f32[] {
  %reduce_sum.13373 = f32[] parameter(0)
  %reduce_sum.13374 = f32[] parameter(1)
  ROOT %reduce_sum.13375 = f32[] add(%reduce_sum.13373, %reduce_sum.13374)
}

%compare_greater_than.39.13397.clone (p.0.lhs.142: bf16[], p.0.rhs.142: bf16[], p.1.lhs.142: s32[], p.1.rhs.142: s32[]) -> pred[] {
  %p.1.lhs.142 = s32[] parameter(2)
  %p.1.rhs.142 = s32[] parameter(3)
  %p.0.lhs.142 = bf16[] parameter(0)
  %p.0.rhs.142 = bf16[] parameter(1)
  ROOT %compare.220 = pred[] compare(%p.0.lhs.142, %p.0.rhs.142), direction=GT, type=TOTALORDER
}

%compare-value-and-index.39 (p.0.lhs.143: bf16[], p.0.rhs.143: bf16[], p.1.lhs.143: s32[], p.1.rhs.143: s32[]) -> pred[] {
  %p.0.lhs.143 = bf16[] parameter(0)
  %p.0.rhs.143 = bf16[] parameter(1)
  %compare.222 = pred[] compare(%p.0.lhs.143, %p.0.rhs.143), direction=EQ, type=TOTALORDER
  %p.1.lhs.143 = s32[] parameter(2)
  %p.1.rhs.143 = s32[] parameter(3)
  %compare.223 = pred[] compare(%p.1.lhs.143, %p.1.rhs.143), direction=LT
  %compare.221 = pred[] compare(%p.0.lhs.143, %p.0.rhs.143), direction=GT
  ROOT %select.106 = pred[] select(%compare.222, %compare.223, %compare.221)
}

%region_522.13433.clone (scatter.79: u32[], scatter.80: u32[]) -> u32[] {
  %scatter.79 = u32[] parameter(0)
  ROOT %scatter.80 = u32[] parameter(1)
}

%region_523.13442 (reduce_max.13439: f32[], reduce_max.13440: f32[]) -> f32[] {
  %reduce_max.13439 = f32[] parameter(0)
  %reduce_max.13440 = f32[] parameter(1)
  ROOT %reduce_max.13441 = f32[] maximum(%reduce_max.13439, %reduce_max.13440)
}

%region_524.13451 (reduce_sum.13448: f32[], reduce_sum.13449: f32[]) -> f32[] {
  %reduce_sum.13448 = f32[] parameter(0)
  %reduce_sum.13449 = f32[] parameter(1)
  ROOT %reduce_sum.13450 = f32[] add(%reduce_sum.13448, %reduce_sum.13449)
}

%region_525.13460.clone (scatter-add.94: bf16[], scatter-add.95: bf16[]) -> bf16[] {
  %scatter-add.94 = bf16[] parameter(0)
  %scatter-add.95 = bf16[] parameter(1)
  ROOT %add.958 = bf16[] add(%scatter-add.94, %scatter-add.95)
}

%region_526.13472 (reduce_window_sum.13469: s32[], reduce_window_sum.13470: s32[]) -> s32[] {
  %reduce_window_sum.13469 = s32[] parameter(0)
  %reduce_window_sum.13470 = s32[] parameter(1)
  ROOT %reduce_window_sum.13471 = s32[] add(%reduce_window_sum.13469, %reduce_window_sum.13470)
}

%region_527.13481 (reduce_sum.13478: s32[], reduce_sum.13479: s32[]) -> s32[] {
  %reduce_sum.13478 = s32[] parameter(0)
  %reduce_sum.13479 = s32[] parameter(1)
  ROOT %reduce_sum.13480 = s32[] add(%reduce_sum.13478, %reduce_sum.13479)
}

%region_528.13491 (reduce_sum.13488: s32[], reduce_sum.86: s32[]) -> s32[] {
  %reduce_sum.13488 = s32[] parameter(0)
  %reduce_sum.86 = s32[] parameter(1)
  ROOT %reduce_sum.13490 = s32[] add(%reduce_sum.13488, %reduce_sum.86)
}

%region_529.13548 (reduce_and.13545: pred[], reduce_and.13546: pred[]) -> pred[] {
  %reduce_and.13545 = pred[] parameter(0)
  %reduce_and.13546 = pred[] parameter(1)
  ROOT %reduce_and.13547 = pred[] and(%reduce_and.13545, %reduce_and.13546)
}

%region_530.13560 (reduce_sum.13557: bf16[], reduce_sum.13558: bf16[]) -> bf16[] {
  %reduce_sum.13557 = bf16[] parameter(0)
  %reduce_sum.13558 = bf16[] parameter(1)
  ROOT %reduce_sum.13559 = bf16[] add(%reduce_sum.13557, %reduce_sum.13558)
}

%region_531.13577 (reduce_sum.13574: f32[], reduce_sum.13575: f32[]) -> f32[] {
  %reduce_sum.13574 = f32[] parameter(0)
  %reduce_sum.13575 = f32[] parameter(1)
  ROOT %reduce_sum.13576 = f32[] add(%reduce_sum.13574, %reduce_sum.13575)
}

%region_532.13587.clone (scatter-add.96: bf16[], scatter-add.97: bf16[]) -> bf16[] {
  %scatter-add.96 = bf16[] parameter(0)
  %scatter-add.97 = bf16[] parameter(1)
  ROOT %add.959 = bf16[] add(%scatter-add.96, %scatter-add.97)
}

%region_533.13603 (reduce_sum.13600: f32[], reduce_sum.13601: f32[]) -> f32[] {
  %reduce_sum.13600 = f32[] parameter(0)
  %reduce_sum.13601 = f32[] parameter(1)
  ROOT %reduce_sum.13602 = f32[] add(%reduce_sum.13600, %reduce_sum.13601)
}

%region_534.13682 (reduce_sum.13679: f32[], reduce_sum.13680: f32[]) -> f32[] {
  %reduce_sum.13679 = f32[] parameter(0)
  %reduce_sum.13680 = f32[] parameter(1)
  ROOT %reduce_sum.13681 = f32[] add(%reduce_sum.13679, %reduce_sum.13680)
}

%region_535.13724 (reduce_sum.13721: f32[], reduce_sum.13722: f32[]) -> f32[] {
  %reduce_sum.13721 = f32[] parameter(0)
  %reduce_sum.13722 = f32[] parameter(1)
  ROOT %reduce_sum.13723 = f32[] add(%reduce_sum.13721, %reduce_sum.13722)
}

%region_536.13820 (reduce_sum.13817: s32[], reduce_sum.13818: s32[]) -> s32[] {
  %reduce_sum.13817 = s32[] parameter(0)
  %reduce_sum.13818 = s32[] parameter(1)
  ROOT %reduce_sum.13819 = s32[] add(%reduce_sum.13817, %reduce_sum.13818)
}

%region_537.13829 (reduce_sum.13826: s32[], reduce_sum.87: s32[]) -> s32[] {
  %reduce_sum.13826 = s32[] parameter(0)
  %reduce_sum.87 = s32[] parameter(1)
  ROOT %reduce_sum.88 = s32[] add(%reduce_sum.13826, %reduce_sum.87)
}

%region_538.13835 (reduce_max.13832: s32[], reduce_max.13833: s32[]) -> s32[] {
  %reduce_max.13832 = s32[] parameter(0)
  %reduce_max.13833 = s32[] parameter(1)
  ROOT %reduce_max.13834 = s32[] maximum(%reduce_max.13832, %reduce_max.13833)
}

%region_539.13850 (reduce_sum.13847: f32[], reduce_sum.13848: f32[]) -> f32[] {
  %reduce_sum.13847 = f32[] parameter(0)
  %reduce_sum.13848 = f32[] parameter(1)
  ROOT %reduce_sum.13849 = f32[] add(%reduce_sum.13847, %reduce_sum.13848)
}

%compare_greater_than.40.13871.clone (p.0.lhs.144: bf16[], p.0.rhs.144: bf16[], p.1.lhs.144: s32[], p.1.rhs.144: s32[]) -> pred[] {
  %p.1.lhs.144 = s32[] parameter(2)
  %p.1.rhs.144 = s32[] parameter(3)
  %p.0.lhs.144 = bf16[] parameter(0)
  %p.0.rhs.144 = bf16[] parameter(1)
  ROOT %compare.224 = pred[] compare(%p.0.lhs.144, %p.0.rhs.144), direction=GT, type=TOTALORDER
}

%compare-value-and-index.40 (p.0.lhs.145: bf16[], p.0.rhs.145: bf16[], p.1.lhs.145: s32[], p.1.rhs.145: s32[]) -> pred[] {
  %p.0.lhs.145 = bf16[] parameter(0)
  %p.0.rhs.145 = bf16[] parameter(1)
  %compare.226 = pred[] compare(%p.0.lhs.145, %p.0.rhs.145), direction=EQ, type=TOTALORDER
  %p.1.lhs.145 = s32[] parameter(2)
  %p.1.rhs.145 = s32[] parameter(3)
  %compare.227 = pred[] compare(%p.1.lhs.145, %p.1.rhs.145), direction=LT
  %compare.225 = pred[] compare(%p.0.lhs.145, %p.0.rhs.145), direction=GT
  ROOT %select.107 = pred[] select(%compare.226, %compare.227, %compare.225)
}

%region_540.13907.clone (scatter.81: u32[], scatter.82: u32[]) -> u32[] {
  %scatter.81 = u32[] parameter(0)
  ROOT %scatter.82 = u32[] parameter(1)
}

%region_541.13916 (reduce_max.13913: f32[], reduce_max.13914: f32[]) -> f32[] {
  %reduce_max.13913 = f32[] parameter(0)
  %reduce_max.13914 = f32[] parameter(1)
  ROOT %reduce_max.13915 = f32[] maximum(%reduce_max.13913, %reduce_max.13914)
}

%region_542.13925 (reduce_sum.89: f32[], reduce_sum.13923: f32[]) -> f32[] {
  %reduce_sum.89 = f32[] parameter(0)
  %reduce_sum.13923 = f32[] parameter(1)
  ROOT %reduce_sum.90 = f32[] add(%reduce_sum.89, %reduce_sum.13923)
}

%region_543.13934.clone (scatter-add.98: bf16[], scatter-add.99: bf16[]) -> bf16[] {
  %scatter-add.98 = bf16[] parameter(0)
  %scatter-add.99 = bf16[] parameter(1)
  ROOT %add.960 = bf16[] add(%scatter-add.98, %scatter-add.99)
}

%region_544.13946 (reduce_window_sum.13943: s32[], reduce_window_sum.13944: s32[]) -> s32[] {
  %reduce_window_sum.13943 = s32[] parameter(0)
  %reduce_window_sum.13944 = s32[] parameter(1)
  ROOT %reduce_window_sum.13945 = s32[] add(%reduce_window_sum.13943, %reduce_window_sum.13944)
}

%region_545.13955 (reduce_sum.13952: s32[], reduce_sum.13953: s32[]) -> s32[] {
  %reduce_sum.13952 = s32[] parameter(0)
  %reduce_sum.13953 = s32[] parameter(1)
  ROOT %reduce_sum.13954 = s32[] add(%reduce_sum.13952, %reduce_sum.13953)
}

%region_546.13965 (reduce_sum.13962: s32[], reduce_sum.13963: s32[]) -> s32[] {
  %reduce_sum.13962 = s32[] parameter(0)
  %reduce_sum.13963 = s32[] parameter(1)
  ROOT %reduce_sum.13964 = s32[] add(%reduce_sum.13962, %reduce_sum.13963)
}

%region_547.14022 (reduce_and.14019: pred[], reduce_and.14020: pred[]) -> pred[] {
  %reduce_and.14019 = pred[] parameter(0)
  %reduce_and.14020 = pred[] parameter(1)
  ROOT %reduce_and.14021 = pred[] and(%reduce_and.14019, %reduce_and.14020)
}

%region_548.14034 (reduce_sum.91: bf16[], reduce_sum.92: bf16[]) -> bf16[] {
  %reduce_sum.91 = bf16[] parameter(0)
  %reduce_sum.92 = bf16[] parameter(1)
  ROOT %reduce_sum.93 = bf16[] add(%reduce_sum.91, %reduce_sum.92)
}

%region_549.14051 (reduce_sum.14048: f32[], reduce_sum.14049: f32[]) -> f32[] {
  %reduce_sum.14048 = f32[] parameter(0)
  %reduce_sum.14049 = f32[] parameter(1)
  ROOT %reduce_sum.14050 = f32[] add(%reduce_sum.14048, %reduce_sum.14049)
}

%region_550.14061.clone (scatter-add.100: bf16[], scatter-add.101: bf16[]) -> bf16[] {
  %scatter-add.100 = bf16[] parameter(0)
  %scatter-add.101 = bf16[] parameter(1)
  ROOT %add.961 = bf16[] add(%scatter-add.100, %scatter-add.101)
}

%region_551.14077 (reduce_sum.14074: f32[], reduce_sum.14075: f32[]) -> f32[] {
  %reduce_sum.14074 = f32[] parameter(0)
  %reduce_sum.14075 = f32[] parameter(1)
  ROOT %reduce_sum.14076 = f32[] add(%reduce_sum.14074, %reduce_sum.14075)
}

%region_552.14156 (reduce_sum.14153: f32[], reduce_sum.14154: f32[]) -> f32[] {
  %reduce_sum.14153 = f32[] parameter(0)
  %reduce_sum.14154 = f32[] parameter(1)
  ROOT %reduce_sum.14155 = f32[] add(%reduce_sum.14153, %reduce_sum.14154)
}

%region_553.14198 (reduce_sum.14195: f32[], reduce_sum.94: f32[]) -> f32[] {
  %reduce_sum.14195 = f32[] parameter(0)
  %reduce_sum.94 = f32[] parameter(1)
  ROOT %reduce_sum.95 = f32[] add(%reduce_sum.14195, %reduce_sum.94)
}

%region_554.14294 (reduce_sum.14291: s32[], reduce_sum.14292: s32[]) -> s32[] {
  %reduce_sum.14291 = s32[] parameter(0)
  %reduce_sum.14292 = s32[] parameter(1)
  ROOT %reduce_sum.14293 = s32[] add(%reduce_sum.14291, %reduce_sum.14292)
}

%region_555.14303 (reduce_sum.14300: s32[], reduce_sum.14301: s32[]) -> s32[] {
  %reduce_sum.14300 = s32[] parameter(0)
  %reduce_sum.14301 = s32[] parameter(1)
  ROOT %reduce_sum.14302 = s32[] add(%reduce_sum.14300, %reduce_sum.14301)
}

%region_556.14309 (reduce_max.14306: s32[], reduce_max.14307: s32[]) -> s32[] {
  %reduce_max.14306 = s32[] parameter(0)
  %reduce_max.14307 = s32[] parameter(1)
  ROOT %reduce_max.14308 = s32[] maximum(%reduce_max.14306, %reduce_max.14307)
}

%region_557.14324 (reduce_sum.14321: f32[], reduce_sum.14322: f32[]) -> f32[] {
  %reduce_sum.14321 = f32[] parameter(0)
  %reduce_sum.14322 = f32[] parameter(1)
  ROOT %reduce_sum.14323 = f32[] add(%reduce_sum.14321, %reduce_sum.14322)
}

%compare_greater_than.41.14345.clone (p.0.lhs.146: bf16[], p.0.rhs.146: bf16[], p.1.lhs.146: s32[], p.1.rhs.146: s32[]) -> pred[] {
  %p.1.lhs.146 = s32[] parameter(2)
  %p.1.rhs.146 = s32[] parameter(3)
  %p.0.lhs.146 = bf16[] parameter(0)
  %p.0.rhs.146 = bf16[] parameter(1)
  ROOT %compare.228 = pred[] compare(%p.0.lhs.146, %p.0.rhs.146), direction=GT, type=TOTALORDER
}

%compare-value-and-index.41 (p.0.lhs.147: bf16[], p.0.rhs.147: bf16[], p.1.lhs.147: s32[], p.1.rhs.147: s32[]) -> pred[] {
  %p.0.lhs.147 = bf16[] parameter(0)
  %p.0.rhs.147 = bf16[] parameter(1)
  %compare.230 = pred[] compare(%p.0.lhs.147, %p.0.rhs.147), direction=EQ, type=TOTALORDER
  %p.1.lhs.147 = s32[] parameter(2)
  %p.1.rhs.147 = s32[] parameter(3)
  %compare.231 = pred[] compare(%p.1.lhs.147, %p.1.rhs.147), direction=LT
  %compare.229 = pred[] compare(%p.0.lhs.147, %p.0.rhs.147), direction=GT
  ROOT %select.108 = pred[] select(%compare.230, %compare.231, %compare.229)
}

%region_558.14381.clone (scatter.83: u32[], scatter.84: u32[]) -> u32[] {
  %scatter.83 = u32[] parameter(0)
  ROOT %scatter.84 = u32[] parameter(1)
}

%region_559.14390 (reduce_max.14387: f32[], reduce_max.14388: f32[]) -> f32[] {
  %reduce_max.14387 = f32[] parameter(0)
  %reduce_max.14388 = f32[] parameter(1)
  ROOT %reduce_max.14389 = f32[] maximum(%reduce_max.14387, %reduce_max.14388)
}

%region_560.14399 (reduce_sum.14396: f32[], reduce_sum.14397: f32[]) -> f32[] {
  %reduce_sum.14396 = f32[] parameter(0)
  %reduce_sum.14397 = f32[] parameter(1)
  ROOT %reduce_sum.14398 = f32[] add(%reduce_sum.14396, %reduce_sum.14397)
}

%region_561.14408.clone (scatter-add.102: bf16[], scatter-add.103: bf16[]) -> bf16[] {
  %scatter-add.102 = bf16[] parameter(0)
  %scatter-add.103 = bf16[] parameter(1)
  ROOT %add.962 = bf16[] add(%scatter-add.102, %scatter-add.103)
}

%region_562.14420 (reduce_window_sum.14417: s32[], reduce_window_sum.14418: s32[]) -> s32[] {
  %reduce_window_sum.14417 = s32[] parameter(0)
  %reduce_window_sum.14418 = s32[] parameter(1)
  ROOT %reduce_window_sum.14419 = s32[] add(%reduce_window_sum.14417, %reduce_window_sum.14418)
}

%region_563.14429 (reduce_sum.14426: s32[], reduce_sum.14427: s32[]) -> s32[] {
  %reduce_sum.14426 = s32[] parameter(0)
  %reduce_sum.14427 = s32[] parameter(1)
  ROOT %reduce_sum.14428 = s32[] add(%reduce_sum.14426, %reduce_sum.14427)
}

%region_564.14439 (reduce_sum.96: s32[], reduce_sum.97: s32[]) -> s32[] {
  %reduce_sum.96 = s32[] parameter(0)
  %reduce_sum.97 = s32[] parameter(1)
  ROOT %reduce_sum.98 = s32[] add(%reduce_sum.96, %reduce_sum.97)
}

%region_565.14496 (reduce_and.14493: pred[], reduce_and.14494: pred[]) -> pred[] {
  %reduce_and.14493 = pred[] parameter(0)
  %reduce_and.14494 = pred[] parameter(1)
  ROOT %reduce_and.14495 = pred[] and(%reduce_and.14493, %reduce_and.14494)
}

%region_566.14508 (reduce_sum.14505: bf16[], reduce_sum.14506: bf16[]) -> bf16[] {
  %reduce_sum.14505 = bf16[] parameter(0)
  %reduce_sum.14506 = bf16[] parameter(1)
  ROOT %reduce_sum.14507 = bf16[] add(%reduce_sum.14505, %reduce_sum.14506)
}

%region_567.14525 (reduce_sum.14522: f32[], reduce_sum.14523: f32[]) -> f32[] {
  %reduce_sum.14522 = f32[] parameter(0)
  %reduce_sum.14523 = f32[] parameter(1)
  ROOT %reduce_sum.14524 = f32[] add(%reduce_sum.14522, %reduce_sum.14523)
}

%region_568.14535.clone (scatter-add.104: bf16[], scatter-add.105: bf16[]) -> bf16[] {
  %scatter-add.104 = bf16[] parameter(0)
  %scatter-add.105 = bf16[] parameter(1)
  ROOT %add.963 = bf16[] add(%scatter-add.104, %scatter-add.105)
}

%region_569.14551 (reduce_sum.14548: f32[], reduce_sum.14549: f32[]) -> f32[] {
  %reduce_sum.14548 = f32[] parameter(0)
  %reduce_sum.14549 = f32[] parameter(1)
  ROOT %reduce_sum.14550 = f32[] add(%reduce_sum.14548, %reduce_sum.14549)
}

%region_570.14630 (reduce_sum.14627: f32[], reduce_sum.14628: f32[]) -> f32[] {
  %reduce_sum.14627 = f32[] parameter(0)
  %reduce_sum.14628 = f32[] parameter(1)
  ROOT %reduce_sum.14629 = f32[] add(%reduce_sum.14627, %reduce_sum.14628)
}

%region_571.14672 (reduce_sum.14669: f32[], reduce_sum.14670: f32[]) -> f32[] {
  %reduce_sum.14669 = f32[] parameter(0)
  %reduce_sum.14670 = f32[] parameter(1)
  ROOT %reduce_sum.14671 = f32[] add(%reduce_sum.14669, %reduce_sum.14670)
}

%region_572.14768 (reduce_sum.14765: s32[], reduce_sum.14766: s32[]) -> s32[] {
  %reduce_sum.14765 = s32[] parameter(0)
  %reduce_sum.14766 = s32[] parameter(1)
  ROOT %reduce_sum.14767 = s32[] add(%reduce_sum.14765, %reduce_sum.14766)
}

%region_573.14777 (reduce_sum.99: s32[], reduce_sum.100: s32[]) -> s32[] {
  %reduce_sum.99 = s32[] parameter(0)
  %reduce_sum.100 = s32[] parameter(1)
  ROOT %reduce_sum.14776 = s32[] add(%reduce_sum.99, %reduce_sum.100)
}

%region_574.14783 (reduce_max.14780: s32[], reduce_max.14781: s32[]) -> s32[] {
  %reduce_max.14780 = s32[] parameter(0)
  %reduce_max.14781 = s32[] parameter(1)
  ROOT %reduce_max.14782 = s32[] maximum(%reduce_max.14780, %reduce_max.14781)
}

%region_575.14798 (reduce_sum.14795: f32[], reduce_sum.14796: f32[]) -> f32[] {
  %reduce_sum.14795 = f32[] parameter(0)
  %reduce_sum.14796 = f32[] parameter(1)
  ROOT %reduce_sum.14797 = f32[] add(%reduce_sum.14795, %reduce_sum.14796)
}

%compare_greater_than.42.14819.clone (p.0.lhs.148: bf16[], p.0.rhs.148: bf16[], p.1.lhs.148: s32[], p.1.rhs.148: s32[]) -> pred[] {
  %p.1.lhs.148 = s32[] parameter(2)
  %p.1.rhs.148 = s32[] parameter(3)
  %p.0.lhs.148 = bf16[] parameter(0)
  %p.0.rhs.148 = bf16[] parameter(1)
  ROOT %compare.232 = pred[] compare(%p.0.lhs.148, %p.0.rhs.148), direction=GT, type=TOTALORDER
}

%compare-value-and-index.42 (p.0.lhs.149: bf16[], p.0.rhs.149: bf16[], p.1.lhs.149: s32[], p.1.rhs.149: s32[]) -> pred[] {
  %p.0.lhs.149 = bf16[] parameter(0)
  %p.0.rhs.149 = bf16[] parameter(1)
  %compare.234 = pred[] compare(%p.0.lhs.149, %p.0.rhs.149), direction=EQ, type=TOTALORDER
  %p.1.lhs.149 = s32[] parameter(2)
  %p.1.rhs.149 = s32[] parameter(3)
  %compare.235 = pred[] compare(%p.1.lhs.149, %p.1.rhs.149), direction=LT
  %compare.233 = pred[] compare(%p.0.lhs.149, %p.0.rhs.149), direction=GT
  ROOT %select.109 = pred[] select(%compare.234, %compare.235, %compare.233)
}

%region_576.14855.clone (scatter.85: u32[], scatter.86: u32[]) -> u32[] {
  %scatter.85 = u32[] parameter(0)
  ROOT %scatter.86 = u32[] parameter(1)
}

%region_577.14864 (reduce_max.14861: f32[], reduce_max.14862: f32[]) -> f32[] {
  %reduce_max.14861 = f32[] parameter(0)
  %reduce_max.14862 = f32[] parameter(1)
  ROOT %reduce_max.14863 = f32[] maximum(%reduce_max.14861, %reduce_max.14862)
}

%region_578.14873 (reduce_sum.14870: f32[], reduce_sum.14871: f32[]) -> f32[] {
  %reduce_sum.14870 = f32[] parameter(0)
  %reduce_sum.14871 = f32[] parameter(1)
  ROOT %reduce_sum.14872 = f32[] add(%reduce_sum.14870, %reduce_sum.14871)
}

%region_579.14882.clone (scatter-add.106: bf16[], scatter-add.107: bf16[]) -> bf16[] {
  %scatter-add.106 = bf16[] parameter(0)
  %scatter-add.107 = bf16[] parameter(1)
  ROOT %add.964 = bf16[] add(%scatter-add.106, %scatter-add.107)
}

%region_580.14894 (reduce_window_sum.14891: s32[], reduce_window_sum.14892: s32[]) -> s32[] {
  %reduce_window_sum.14891 = s32[] parameter(0)
  %reduce_window_sum.14892 = s32[] parameter(1)
  ROOT %reduce_window_sum.14893 = s32[] add(%reduce_window_sum.14891, %reduce_window_sum.14892)
}

%region_581.14903 (reduce_sum.14900: s32[], reduce_sum.14901: s32[]) -> s32[] {
  %reduce_sum.14900 = s32[] parameter(0)
  %reduce_sum.14901 = s32[] parameter(1)
  ROOT %reduce_sum.14902 = s32[] add(%reduce_sum.14900, %reduce_sum.14901)
}

%region_582.14913 (reduce_sum.14910: s32[], reduce_sum.14911: s32[]) -> s32[] {
  %reduce_sum.14910 = s32[] parameter(0)
  %reduce_sum.14911 = s32[] parameter(1)
  ROOT %reduce_sum.14912 = s32[] add(%reduce_sum.14910, %reduce_sum.14911)
}

%region_583.14970 (reduce_and.14967: pred[], reduce_and.14968: pred[]) -> pred[] {
  %reduce_and.14967 = pred[] parameter(0)
  %reduce_and.14968 = pred[] parameter(1)
  ROOT %reduce_and.14969 = pred[] and(%reduce_and.14967, %reduce_and.14968)
}

%region_584.14982 (reduce_sum.14979: bf16[], reduce_sum.14980: bf16[]) -> bf16[] {
  %reduce_sum.14979 = bf16[] parameter(0)
  %reduce_sum.14980 = bf16[] parameter(1)
  ROOT %reduce_sum.101 = bf16[] add(%reduce_sum.14979, %reduce_sum.14980)
}

%region_585.14999 (reduce_sum.14996: f32[], reduce_sum.14997: f32[]) -> f32[] {
  %reduce_sum.14996 = f32[] parameter(0)
  %reduce_sum.14997 = f32[] parameter(1)
  ROOT %reduce_sum.14998 = f32[] add(%reduce_sum.14996, %reduce_sum.14997)
}

%region_586.15009.clone (scatter-add.108: bf16[], scatter-add.109: bf16[]) -> bf16[] {
  %scatter-add.108 = bf16[] parameter(0)
  %scatter-add.109 = bf16[] parameter(1)
  ROOT %add.965 = bf16[] add(%scatter-add.108, %scatter-add.109)
}

%region_587.15025 (reduce_sum.15022: f32[], reduce_sum.15023: f32[]) -> f32[] {
  %reduce_sum.15022 = f32[] parameter(0)
  %reduce_sum.15023 = f32[] parameter(1)
  ROOT %reduce_sum.102 = f32[] add(%reduce_sum.15022, %reduce_sum.15023)
}

%region_588.15104 (reduce_sum.15101: f32[], reduce_sum.15102: f32[]) -> f32[] {
  %reduce_sum.15101 = f32[] parameter(0)
  %reduce_sum.15102 = f32[] parameter(1)
  ROOT %reduce_sum.15103 = f32[] add(%reduce_sum.15101, %reduce_sum.15102)
}

%region_589.15146 (reduce_sum.15143: f32[], reduce_sum.15144: f32[]) -> f32[] {
  %reduce_sum.15143 = f32[] parameter(0)
  %reduce_sum.15144 = f32[] parameter(1)
  ROOT %reduce_sum.15145 = f32[] add(%reduce_sum.15143, %reduce_sum.15144)
}

%region_590.15242 (reduce_sum.15239: s32[], reduce_sum.15240: s32[]) -> s32[] {
  %reduce_sum.15239 = s32[] parameter(0)
  %reduce_sum.15240 = s32[] parameter(1)
  ROOT %reduce_sum.15241 = s32[] add(%reduce_sum.15239, %reduce_sum.15240)
}

%region_591.15251 (reduce_sum.15248: s32[], reduce_sum.15249: s32[]) -> s32[] {
  %reduce_sum.15248 = s32[] parameter(0)
  %reduce_sum.15249 = s32[] parameter(1)
  ROOT %reduce_sum.15250 = s32[] add(%reduce_sum.15248, %reduce_sum.15249)
}

%region_592.15257 (reduce_max.15254: s32[], reduce_max.15255: s32[]) -> s32[] {
  %reduce_max.15254 = s32[] parameter(0)
  %reduce_max.15255 = s32[] parameter(1)
  ROOT %reduce_max.15256 = s32[] maximum(%reduce_max.15254, %reduce_max.15255)
}

%region_593.15272 (reduce_sum.15269: f32[], reduce_sum.15270: f32[]) -> f32[] {
  %reduce_sum.15269 = f32[] parameter(0)
  %reduce_sum.15270 = f32[] parameter(1)
  ROOT %reduce_sum.15271 = f32[] add(%reduce_sum.15269, %reduce_sum.15270)
}

%compare_greater_than.43.15293.clone (p.0.lhs.150: bf16[], p.0.rhs.150: bf16[], p.1.lhs.150: s32[], p.1.rhs.150: s32[]) -> pred[] {
  %p.1.lhs.150 = s32[] parameter(2)
  %p.1.rhs.150 = s32[] parameter(3)
  %p.0.lhs.150 = bf16[] parameter(0)
  %p.0.rhs.150 = bf16[] parameter(1)
  ROOT %compare.236 = pred[] compare(%p.0.lhs.150, %p.0.rhs.150), direction=GT, type=TOTALORDER
}

%compare-value-and-index.43 (p.0.lhs.151: bf16[], p.0.rhs.151: bf16[], p.1.lhs.151: s32[], p.1.rhs.151: s32[]) -> pred[] {
  %p.0.lhs.151 = bf16[] parameter(0)
  %p.0.rhs.151 = bf16[] parameter(1)
  %compare.238 = pred[] compare(%p.0.lhs.151, %p.0.rhs.151), direction=EQ, type=TOTALORDER
  %p.1.lhs.151 = s32[] parameter(2)
  %p.1.rhs.151 = s32[] parameter(3)
  %compare.239 = pred[] compare(%p.1.lhs.151, %p.1.rhs.151), direction=LT
  %compare.237 = pred[] compare(%p.0.lhs.151, %p.0.rhs.151), direction=GT
  ROOT %select.110 = pred[] select(%compare.238, %compare.239, %compare.237)
}

%region_594.15329.clone (scatter.87: u32[], scatter.88: u32[]) -> u32[] {
  %scatter.87 = u32[] parameter(0)
  ROOT %scatter.88 = u32[] parameter(1)
}

%region_595.15338 (reduce_max.15335: f32[], reduce_max.15336: f32[]) -> f32[] {
  %reduce_max.15335 = f32[] parameter(0)
  %reduce_max.15336 = f32[] parameter(1)
  ROOT %reduce_max.15337 = f32[] maximum(%reduce_max.15335, %reduce_max.15336)
}

%region_596.15347 (reduce_sum.15344: f32[], reduce_sum.15345: f32[]) -> f32[] {
  %reduce_sum.15344 = f32[] parameter(0)
  %reduce_sum.15345 = f32[] parameter(1)
  ROOT %reduce_sum.15346 = f32[] add(%reduce_sum.15344, %reduce_sum.15345)
}

%region_597.15356.clone (scatter-add.110: bf16[], scatter-add.111: bf16[]) -> bf16[] {
  %scatter-add.110 = bf16[] parameter(0)
  %scatter-add.111 = bf16[] parameter(1)
  ROOT %add.966 = bf16[] add(%scatter-add.110, %scatter-add.111)
}

%region_598.15368 (reduce_window_sum.15365: s32[], reduce_window_sum.15366: s32[]) -> s32[] {
  %reduce_window_sum.15365 = s32[] parameter(0)
  %reduce_window_sum.15366 = s32[] parameter(1)
  ROOT %reduce_window_sum.15367 = s32[] add(%reduce_window_sum.15365, %reduce_window_sum.15366)
}

%region_599.15377 (reduce_sum.15374: s32[], reduce_sum.15375: s32[]) -> s32[] {
  %reduce_sum.15374 = s32[] parameter(0)
  %reduce_sum.15375 = s32[] parameter(1)
  ROOT %reduce_sum.15376 = s32[] add(%reduce_sum.15374, %reduce_sum.15375)
}

%region_600.15387 (reduce_sum.103: s32[], reduce_sum.15385: s32[]) -> s32[] {
  %reduce_sum.103 = s32[] parameter(0)
  %reduce_sum.15385 = s32[] parameter(1)
  ROOT %reduce_sum.15386 = s32[] add(%reduce_sum.103, %reduce_sum.15385)
}

%region_601.15444 (reduce_and.15441: pred[], reduce_and.15442: pred[]) -> pred[] {
  %reduce_and.15441 = pred[] parameter(0)
  %reduce_and.15442 = pred[] parameter(1)
  ROOT %reduce_and.15443 = pred[] and(%reduce_and.15441, %reduce_and.15442)
}

%region_602.15456 (reduce_sum.15453: bf16[], reduce_sum.15454: bf16[]) -> bf16[] {
  %reduce_sum.15453 = bf16[] parameter(0)
  %reduce_sum.15454 = bf16[] parameter(1)
  ROOT %reduce_sum.15455 = bf16[] add(%reduce_sum.15453, %reduce_sum.15454)
}

%region_603.15473 (reduce_sum.15470: f32[], reduce_sum.15471: f32[]) -> f32[] {
  %reduce_sum.15470 = f32[] parameter(0)
  %reduce_sum.15471 = f32[] parameter(1)
  ROOT %reduce_sum.15472 = f32[] add(%reduce_sum.15470, %reduce_sum.15471)
}

%region_604.15483.clone (scatter-add.112: bf16[], scatter-add.113: bf16[]) -> bf16[] {
  %scatter-add.112 = bf16[] parameter(0)
  %scatter-add.113 = bf16[] parameter(1)
  ROOT %add.967 = bf16[] add(%scatter-add.112, %scatter-add.113)
}

%region_605.15499 (reduce_sum.15496: f32[], reduce_sum.15497: f32[]) -> f32[] {
  %reduce_sum.15496 = f32[] parameter(0)
  %reduce_sum.15497 = f32[] parameter(1)
  ROOT %reduce_sum.15498 = f32[] add(%reduce_sum.15496, %reduce_sum.15497)
}

%region_606.15578 (reduce_sum.15575: f32[], reduce_sum.15576: f32[]) -> f32[] {
  %reduce_sum.15575 = f32[] parameter(0)
  %reduce_sum.15576 = f32[] parameter(1)
  ROOT %reduce_sum.15577 = f32[] add(%reduce_sum.15575, %reduce_sum.15576)
}

%region_607.15620 (reduce_sum.15617: f32[], reduce_sum.15618: f32[]) -> f32[] {
  %reduce_sum.15617 = f32[] parameter(0)
  %reduce_sum.15618 = f32[] parameter(1)
  ROOT %reduce_sum.15619 = f32[] add(%reduce_sum.15617, %reduce_sum.15618)
}

%region_608.15716 (reduce_sum.15713: s32[], reduce_sum.15714: s32[]) -> s32[] {
  %reduce_sum.15713 = s32[] parameter(0)
  %reduce_sum.15714 = s32[] parameter(1)
  ROOT %reduce_sum.15715 = s32[] add(%reduce_sum.15713, %reduce_sum.15714)
}

%region_609.15725 (reduce_sum.15722: s32[], reduce_sum.15723: s32[]) -> s32[] {
  %reduce_sum.15722 = s32[] parameter(0)
  %reduce_sum.15723 = s32[] parameter(1)
  ROOT %reduce_sum.15724 = s32[] add(%reduce_sum.15722, %reduce_sum.15723)
}

%region_610.15731 (reduce_max.15728: s32[], reduce_max.15729: s32[]) -> s32[] {
  %reduce_max.15728 = s32[] parameter(0)
  %reduce_max.15729 = s32[] parameter(1)
  ROOT %reduce_max.15730 = s32[] maximum(%reduce_max.15728, %reduce_max.15729)
}

%region_611.15746 (reduce_sum.104: f32[], reduce_sum.105: f32[]) -> f32[] {
  %reduce_sum.104 = f32[] parameter(0)
  %reduce_sum.105 = f32[] parameter(1)
  ROOT %reduce_sum.106 = f32[] add(%reduce_sum.104, %reduce_sum.105)
}

%compare_greater_than.44.15767.clone (p.0.lhs.152: bf16[], p.0.rhs.152: bf16[], p.1.lhs.152: s32[], p.1.rhs.152: s32[]) -> pred[] {
  %p.1.lhs.152 = s32[] parameter(2)
  %p.1.rhs.152 = s32[] parameter(3)
  %p.0.lhs.152 = bf16[] parameter(0)
  %p.0.rhs.152 = bf16[] parameter(1)
  ROOT %compare.240 = pred[] compare(%p.0.lhs.152, %p.0.rhs.152), direction=GT, type=TOTALORDER
}

%compare-value-and-index.44 (p.0.lhs.153: bf16[], p.0.rhs.153: bf16[], p.1.lhs.153: s32[], p.1.rhs.153: s32[]) -> pred[] {
  %p.0.lhs.153 = bf16[] parameter(0)
  %p.0.rhs.153 = bf16[] parameter(1)
  %compare.242 = pred[] compare(%p.0.lhs.153, %p.0.rhs.153), direction=EQ, type=TOTALORDER
  %p.1.lhs.153 = s32[] parameter(2)
  %p.1.rhs.153 = s32[] parameter(3)
  %compare.243 = pred[] compare(%p.1.lhs.153, %p.1.rhs.153), direction=LT
  %compare.241 = pred[] compare(%p.0.lhs.153, %p.0.rhs.153), direction=GT
  ROOT %select.111 = pred[] select(%compare.242, %compare.243, %compare.241)
}

%region_612.15803.clone (scatter.89: u32[], scatter.90: u32[]) -> u32[] {
  %scatter.89 = u32[] parameter(0)
  ROOT %scatter.90 = u32[] parameter(1)
}

%region_613.15812 (reduce_max.15809: f32[], reduce_max.15810: f32[]) -> f32[] {
  %reduce_max.15809 = f32[] parameter(0)
  %reduce_max.15810 = f32[] parameter(1)
  ROOT %reduce_max.15811 = f32[] maximum(%reduce_max.15809, %reduce_max.15810)
}

%region_614.15821 (reduce_sum.15818: f32[], reduce_sum.15819: f32[]) -> f32[] {
  %reduce_sum.15818 = f32[] parameter(0)
  %reduce_sum.15819 = f32[] parameter(1)
  ROOT %reduce_sum.15820 = f32[] add(%reduce_sum.15818, %reduce_sum.15819)
}

%region_615.15830.clone (scatter-add.114: bf16[], scatter-add.115: bf16[]) -> bf16[] {
  %scatter-add.114 = bf16[] parameter(0)
  %scatter-add.115 = bf16[] parameter(1)
  ROOT %add.968 = bf16[] add(%scatter-add.114, %scatter-add.115)
}

%region_616.15842 (reduce_window_sum.15839: s32[], reduce_window_sum.15840: s32[]) -> s32[] {
  %reduce_window_sum.15839 = s32[] parameter(0)
  %reduce_window_sum.15840 = s32[] parameter(1)
  ROOT %reduce_window_sum.15841 = s32[] add(%reduce_window_sum.15839, %reduce_window_sum.15840)
}

%region_617.15851 (reduce_sum.15848: s32[], reduce_sum.15849: s32[]) -> s32[] {
  %reduce_sum.15848 = s32[] parameter(0)
  %reduce_sum.15849 = s32[] parameter(1)
  ROOT %reduce_sum.15850 = s32[] add(%reduce_sum.15848, %reduce_sum.15849)
}

%region_618.15861 (reduce_sum.15858: s32[], reduce_sum.15859: s32[]) -> s32[] {
  %reduce_sum.15858 = s32[] parameter(0)
  %reduce_sum.15859 = s32[] parameter(1)
  ROOT %reduce_sum.15860 = s32[] add(%reduce_sum.15858, %reduce_sum.15859)
}

%region_619.15918 (reduce_and.15915: pred[], reduce_and.15916: pred[]) -> pred[] {
  %reduce_and.15915 = pred[] parameter(0)
  %reduce_and.15916 = pred[] parameter(1)
  ROOT %reduce_and.15917 = pred[] and(%reduce_and.15915, %reduce_and.15916)
}

%region_620.15930 (reduce_sum.107: bf16[], reduce_sum.108: bf16[]) -> bf16[] {
  %reduce_sum.107 = bf16[] parameter(0)
  %reduce_sum.108 = bf16[] parameter(1)
  ROOT %reduce_sum.109 = bf16[] add(%reduce_sum.107, %reduce_sum.108)
}

%region_621.15947 (reduce_sum.15944: f32[], reduce_sum.15945: f32[]) -> f32[] {
  %reduce_sum.15944 = f32[] parameter(0)
  %reduce_sum.15945 = f32[] parameter(1)
  ROOT %reduce_sum.15946 = f32[] add(%reduce_sum.15944, %reduce_sum.15945)
}

%region_622.15957.clone (scatter-add.116: bf16[], scatter-add.117: bf16[]) -> bf16[] {
  %scatter-add.116 = bf16[] parameter(0)
  %scatter-add.117 = bf16[] parameter(1)
  ROOT %add.969 = bf16[] add(%scatter-add.116, %scatter-add.117)
}

%region_623.15973 (reduce_sum.15970: f32[], reduce_sum.15971: f32[]) -> f32[] {
  %reduce_sum.15970 = f32[] parameter(0)
  %reduce_sum.15971 = f32[] parameter(1)
  ROOT %reduce_sum.15972 = f32[] add(%reduce_sum.15970, %reduce_sum.15971)
}

%region_624.16052 (reduce_sum.16049: f32[], reduce_sum.16050: f32[]) -> f32[] {
  %reduce_sum.16049 = f32[] parameter(0)
  %reduce_sum.16050 = f32[] parameter(1)
  ROOT %reduce_sum.16051 = f32[] add(%reduce_sum.16049, %reduce_sum.16050)
}

%region_625.16094 (reduce_sum.16091: f32[], reduce_sum.16092: f32[]) -> f32[] {
  %reduce_sum.16091 = f32[] parameter(0)
  %reduce_sum.16092 = f32[] parameter(1)
  ROOT %reduce_sum.16093 = f32[] add(%reduce_sum.16091, %reduce_sum.16092)
}

%region_626.16190 (reduce_sum.16187: s32[], reduce_sum.16188: s32[]) -> s32[] {
  %reduce_sum.16187 = s32[] parameter(0)
  %reduce_sum.16188 = s32[] parameter(1)
  ROOT %reduce_sum.16189 = s32[] add(%reduce_sum.16187, %reduce_sum.16188)
}

%region_627.16199 (reduce_sum.16196: s32[], reduce_sum.16197: s32[]) -> s32[] {
  %reduce_sum.16196 = s32[] parameter(0)
  %reduce_sum.16197 = s32[] parameter(1)
  ROOT %reduce_sum.16198 = s32[] add(%reduce_sum.16196, %reduce_sum.16197)
}

%region_628.16205 (reduce_max.16202: s32[], reduce_max.16203: s32[]) -> s32[] {
  %reduce_max.16202 = s32[] parameter(0)
  %reduce_max.16203 = s32[] parameter(1)
  ROOT %reduce_max.16204 = s32[] maximum(%reduce_max.16202, %reduce_max.16203)
}

%region_629.16220 (reduce_sum.110: f32[], reduce_sum.111: f32[]) -> f32[] {
  %reduce_sum.110 = f32[] parameter(0)
  %reduce_sum.111 = f32[] parameter(1)
  ROOT %reduce_sum.16219 = f32[] add(%reduce_sum.110, %reduce_sum.111)
}

%compare_greater_than.45.16241.clone (p.0.lhs.154: bf16[], p.0.rhs.154: bf16[], p.1.lhs.154: s32[], p.1.rhs.154: s32[]) -> pred[] {
  %p.1.lhs.154 = s32[] parameter(2)
  %p.1.rhs.154 = s32[] parameter(3)
  %p.0.lhs.154 = bf16[] parameter(0)
  %p.0.rhs.154 = bf16[] parameter(1)
  ROOT %compare.244 = pred[] compare(%p.0.lhs.154, %p.0.rhs.154), direction=GT, type=TOTALORDER
}

%compare-value-and-index.45 (p.0.lhs.155: bf16[], p.0.rhs.155: bf16[], p.1.lhs.155: s32[], p.1.rhs.155: s32[]) -> pred[] {
  %p.0.lhs.155 = bf16[] parameter(0)
  %p.0.rhs.155 = bf16[] parameter(1)
  %compare.246 = pred[] compare(%p.0.lhs.155, %p.0.rhs.155), direction=EQ, type=TOTALORDER
  %p.1.lhs.155 = s32[] parameter(2)
  %p.1.rhs.155 = s32[] parameter(3)
  %compare.247 = pred[] compare(%p.1.lhs.155, %p.1.rhs.155), direction=LT
  %compare.245 = pred[] compare(%p.0.lhs.155, %p.0.rhs.155), direction=GT
  ROOT %select.112 = pred[] select(%compare.246, %compare.247, %compare.245)
}

%region_630.16277.clone (scatter.91: u32[], scatter.92: u32[]) -> u32[] {
  %scatter.91 = u32[] parameter(0)
  ROOT %scatter.92 = u32[] parameter(1)
}

%region_631.16286 (reduce_max.16283: f32[], reduce_max.16284: f32[]) -> f32[] {
  %reduce_max.16283 = f32[] parameter(0)
  %reduce_max.16284 = f32[] parameter(1)
  ROOT %reduce_max.16285 = f32[] maximum(%reduce_max.16283, %reduce_max.16284)
}

%region_632.16295 (reduce_sum.16292: f32[], reduce_sum.16293: f32[]) -> f32[] {
  %reduce_sum.16292 = f32[] parameter(0)
  %reduce_sum.16293 = f32[] parameter(1)
  ROOT %reduce_sum.16294 = f32[] add(%reduce_sum.16292, %reduce_sum.16293)
}

%region_633.16304.clone (scatter-add.118: bf16[], scatter-add.119: bf16[]) -> bf16[] {
  %scatter-add.118 = bf16[] parameter(0)
  %scatter-add.119 = bf16[] parameter(1)
  ROOT %add.970 = bf16[] add(%scatter-add.118, %scatter-add.119)
}

%region_634.16316 (reduce_window_sum.16313: s32[], reduce_window_sum.16314: s32[]) -> s32[] {
  %reduce_window_sum.16313 = s32[] parameter(0)
  %reduce_window_sum.16314 = s32[] parameter(1)
  ROOT %reduce_window_sum.16315 = s32[] add(%reduce_window_sum.16313, %reduce_window_sum.16314)
}

%region_635.16325 (reduce_sum.112: s32[], reduce_sum.16323: s32[]) -> s32[] {
  %reduce_sum.112 = s32[] parameter(0)
  %reduce_sum.16323 = s32[] parameter(1)
  ROOT %reduce_sum.113 = s32[] add(%reduce_sum.112, %reduce_sum.16323)
}

%region_636.16335 (reduce_sum.16332: s32[], reduce_sum.16333: s32[]) -> s32[] {
  %reduce_sum.16332 = s32[] parameter(0)
  %reduce_sum.16333 = s32[] parameter(1)
  ROOT %reduce_sum.16334 = s32[] add(%reduce_sum.16332, %reduce_sum.16333)
}

%region_637.16392 (reduce_and.16389: pred[], reduce_and.16390: pred[]) -> pred[] {
  %reduce_and.16389 = pred[] parameter(0)
  %reduce_and.16390 = pred[] parameter(1)
  ROOT %reduce_and.16391 = pred[] and(%reduce_and.16389, %reduce_and.16390)
}

%region_638.16404 (reduce_sum.16401: bf16[], reduce_sum.16402: bf16[]) -> bf16[] {
  %reduce_sum.16401 = bf16[] parameter(0)
  %reduce_sum.16402 = bf16[] parameter(1)
  ROOT %reduce_sum.16403 = bf16[] add(%reduce_sum.16401, %reduce_sum.16402)
}

%region_639.16421 (reduce_sum.16418: f32[], reduce_sum.16419: f32[]) -> f32[] {
  %reduce_sum.16418 = f32[] parameter(0)
  %reduce_sum.16419 = f32[] parameter(1)
  ROOT %reduce_sum.16420 = f32[] add(%reduce_sum.16418, %reduce_sum.16419)
}

%region_640.16431.clone (scatter-add.120: bf16[], scatter-add.121: bf16[]) -> bf16[] {
  %scatter-add.120 = bf16[] parameter(0)
  %scatter-add.121 = bf16[] parameter(1)
  ROOT %add.971 = bf16[] add(%scatter-add.120, %scatter-add.121)
}

%region_641.16447 (reduce_sum.16444: f32[], reduce_sum.16445: f32[]) -> f32[] {
  %reduce_sum.16444 = f32[] parameter(0)
  %reduce_sum.16445 = f32[] parameter(1)
  ROOT %reduce_sum.16446 = f32[] add(%reduce_sum.16444, %reduce_sum.16445)
}

%region_642.16526 (reduce_sum.16523: f32[], reduce_sum.16524: f32[]) -> f32[] {
  %reduce_sum.16523 = f32[] parameter(0)
  %reduce_sum.16524 = f32[] parameter(1)
  ROOT %reduce_sum.16525 = f32[] add(%reduce_sum.16523, %reduce_sum.16524)
}

%region_643.16568 (reduce_sum.16565: f32[], reduce_sum.16566: f32[]) -> f32[] {
  %reduce_sum.16565 = f32[] parameter(0)
  %reduce_sum.16566 = f32[] parameter(1)
  ROOT %reduce_sum.16567 = f32[] add(%reduce_sum.16565, %reduce_sum.16566)
}

%region_644.16664 (reduce_sum.16661: s32[], reduce_sum.16662: s32[]) -> s32[] {
  %reduce_sum.16661 = s32[] parameter(0)
  %reduce_sum.16662 = s32[] parameter(1)
  ROOT %reduce_sum.16663 = s32[] add(%reduce_sum.16661, %reduce_sum.16662)
}

%region_645.16673 (reduce_sum.16670: s32[], reduce_sum.16671: s32[]) -> s32[] {
  %reduce_sum.16670 = s32[] parameter(0)
  %reduce_sum.16671 = s32[] parameter(1)
  ROOT %reduce_sum.16672 = s32[] add(%reduce_sum.16670, %reduce_sum.16671)
}

%region_646.16679 (reduce_max.16676: s32[], reduce_max.16677: s32[]) -> s32[] {
  %reduce_max.16676 = s32[] parameter(0)
  %reduce_max.16677 = s32[] parameter(1)
  ROOT %reduce_max.16678 = s32[] maximum(%reduce_max.16676, %reduce_max.16677)
}

%region_647.16694 (reduce_sum.16691: f32[], reduce_sum.16692: f32[]) -> f32[] {
  %reduce_sum.16691 = f32[] parameter(0)
  %reduce_sum.16692 = f32[] parameter(1)
  ROOT %reduce_sum.16693 = f32[] add(%reduce_sum.16691, %reduce_sum.16692)
}

%compare_greater_than.46.16715.clone (p.0.lhs.156: bf16[], p.0.rhs.156: bf16[], p.1.lhs.156: s32[], p.1.rhs.156: s32[]) -> pred[] {
  %p.1.lhs.156 = s32[] parameter(2)
  %p.1.rhs.156 = s32[] parameter(3)
  %p.0.lhs.156 = bf16[] parameter(0)
  %p.0.rhs.156 = bf16[] parameter(1)
  ROOT %compare.248 = pred[] compare(%p.0.lhs.156, %p.0.rhs.156), direction=GT, type=TOTALORDER
}

%compare-value-and-index.46 (p.0.lhs.157: bf16[], p.0.rhs.157: bf16[], p.1.lhs.157: s32[], p.1.rhs.157: s32[]) -> pred[] {
  %p.0.lhs.157 = bf16[] parameter(0)
  %p.0.rhs.157 = bf16[] parameter(1)
  %compare.250 = pred[] compare(%p.0.lhs.157, %p.0.rhs.157), direction=EQ, type=TOTALORDER
  %p.1.lhs.157 = s32[] parameter(2)
  %p.1.rhs.157 = s32[] parameter(3)
  %compare.251 = pred[] compare(%p.1.lhs.157, %p.1.rhs.157), direction=LT
  %compare.249 = pred[] compare(%p.0.lhs.157, %p.0.rhs.157), direction=GT
  ROOT %select.113 = pred[] select(%compare.250, %compare.251, %compare.249)
}

%region_648.16751.clone (scatter.93: u32[], scatter.94: u32[]) -> u32[] {
  %scatter.93 = u32[] parameter(0)
  ROOT %scatter.94 = u32[] parameter(1)
}

%region_649.16760 (reduce_max.16757: f32[], reduce_max.16758: f32[]) -> f32[] {
  %reduce_max.16757 = f32[] parameter(0)
  %reduce_max.16758 = f32[] parameter(1)
  ROOT %reduce_max.16759 = f32[] maximum(%reduce_max.16757, %reduce_max.16758)
}

%region_650.16769 (reduce_sum.16766: f32[], reduce_sum.16767: f32[]) -> f32[] {
  %reduce_sum.16766 = f32[] parameter(0)
  %reduce_sum.16767 = f32[] parameter(1)
  ROOT %reduce_sum.16768 = f32[] add(%reduce_sum.16766, %reduce_sum.16767)
}

%region_651.16778.clone (scatter-add.122: bf16[], scatter-add.123: bf16[]) -> bf16[] {
  %scatter-add.122 = bf16[] parameter(0)
  %scatter-add.123 = bf16[] parameter(1)
  ROOT %add.972 = bf16[] add(%scatter-add.122, %scatter-add.123)
}

%region_652.16790 (reduce_window_sum.16787: s32[], reduce_window_sum.16788: s32[]) -> s32[] {
  %reduce_window_sum.16787 = s32[] parameter(0)
  %reduce_window_sum.16788 = s32[] parameter(1)
  ROOT %reduce_window_sum.16789 = s32[] add(%reduce_window_sum.16787, %reduce_window_sum.16788)
}

%region_653.16799 (reduce_sum.16796: s32[], reduce_sum.114: s32[]) -> s32[] {
  %reduce_sum.16796 = s32[] parameter(0)
  %reduce_sum.114 = s32[] parameter(1)
  ROOT %reduce_sum.16798 = s32[] add(%reduce_sum.16796, %reduce_sum.114)
}

%region_654.16809 (reduce_sum.115: s32[], reduce_sum.116: s32[]) -> s32[] {
  %reduce_sum.115 = s32[] parameter(0)
  %reduce_sum.116 = s32[] parameter(1)
  ROOT %reduce_sum.16808 = s32[] add(%reduce_sum.115, %reduce_sum.116)
}

%region_655.16866 (reduce_and.16863: pred[], reduce_and.16864: pred[]) -> pred[] {
  %reduce_and.16863 = pred[] parameter(0)
  %reduce_and.16864 = pred[] parameter(1)
  ROOT %reduce_and.16865 = pred[] and(%reduce_and.16863, %reduce_and.16864)
}

%region_656.16878 (reduce_sum.16875: bf16[], reduce_sum.16876: bf16[]) -> bf16[] {
  %reduce_sum.16875 = bf16[] parameter(0)
  %reduce_sum.16876 = bf16[] parameter(1)
  ROOT %reduce_sum.16877 = bf16[] add(%reduce_sum.16875, %reduce_sum.16876)
}

%region_657.16895 (reduce_sum.16892: f32[], reduce_sum.16893: f32[]) -> f32[] {
  %reduce_sum.16892 = f32[] parameter(0)
  %reduce_sum.16893 = f32[] parameter(1)
  ROOT %reduce_sum.16894 = f32[] add(%reduce_sum.16892, %reduce_sum.16893)
}

%region_658.16905.clone (scatter-add.124: bf16[], scatter-add.125: bf16[]) -> bf16[] {
  %scatter-add.124 = bf16[] parameter(0)
  %scatter-add.125 = bf16[] parameter(1)
  ROOT %add.973 = bf16[] add(%scatter-add.124, %scatter-add.125)
}

%region_659.16921 (reduce_sum.117: f32[], reduce_sum.16919: f32[]) -> f32[] {
  %reduce_sum.117 = f32[] parameter(0)
  %reduce_sum.16919 = f32[] parameter(1)
  ROOT %reduce_sum.118 = f32[] add(%reduce_sum.117, %reduce_sum.16919)
}

%region_660.17000 (reduce_sum.16997: f32[], reduce_sum.16998: f32[]) -> f32[] {
  %reduce_sum.16997 = f32[] parameter(0)
  %reduce_sum.16998 = f32[] parameter(1)
  ROOT %reduce_sum.16999 = f32[] add(%reduce_sum.16997, %reduce_sum.16998)
}

%region_661.17042 (reduce_sum.17039: f32[], reduce_sum.17040: f32[]) -> f32[] {
  %reduce_sum.17039 = f32[] parameter(0)
  %reduce_sum.17040 = f32[] parameter(1)
  ROOT %reduce_sum.17041 = f32[] add(%reduce_sum.17039, %reduce_sum.17040)
}

%region_662.17138 (reduce_sum.17135: s32[], reduce_sum.17136: s32[]) -> s32[] {
  %reduce_sum.17135 = s32[] parameter(0)
  %reduce_sum.17136 = s32[] parameter(1)
  ROOT %reduce_sum.17137 = s32[] add(%reduce_sum.17135, %reduce_sum.17136)
}

%region_663.17147 (reduce_sum.17144: s32[], reduce_sum.17145: s32[]) -> s32[] {
  %reduce_sum.17144 = s32[] parameter(0)
  %reduce_sum.17145 = s32[] parameter(1)
  ROOT %reduce_sum.17146 = s32[] add(%reduce_sum.17144, %reduce_sum.17145)
}

%region_664.17153 (reduce_max.17150: s32[], reduce_max.17151: s32[]) -> s32[] {
  %reduce_max.17150 = s32[] parameter(0)
  %reduce_max.17151 = s32[] parameter(1)
  ROOT %reduce_max.17152 = s32[] maximum(%reduce_max.17150, %reduce_max.17151)
}

%region_665.17168 (reduce_sum.17165: f32[], reduce_sum.17166: f32[]) -> f32[] {
  %reduce_sum.17165 = f32[] parameter(0)
  %reduce_sum.17166 = f32[] parameter(1)
  ROOT %reduce_sum.17167 = f32[] add(%reduce_sum.17165, %reduce_sum.17166)
}

%compare_greater_than.47.17189.clone (p.0.lhs.158: bf16[], p.0.rhs.158: bf16[], p.1.lhs.158: s32[], p.1.rhs.158: s32[]) -> pred[] {
  %p.1.lhs.158 = s32[] parameter(2)
  %p.1.rhs.158 = s32[] parameter(3)
  %p.0.lhs.158 = bf16[] parameter(0)
  %p.0.rhs.158 = bf16[] parameter(1)
  ROOT %compare.252 = pred[] compare(%p.0.lhs.158, %p.0.rhs.158), direction=GT, type=TOTALORDER
}

%compare-value-and-index.47 (p.0.lhs.159: bf16[], p.0.rhs.159: bf16[], p.1.lhs.159: s32[], p.1.rhs.159: s32[]) -> pred[] {
  %p.0.lhs.159 = bf16[] parameter(0)
  %p.0.rhs.159 = bf16[] parameter(1)
  %compare.254 = pred[] compare(%p.0.lhs.159, %p.0.rhs.159), direction=EQ, type=TOTALORDER
  %p.1.lhs.159 = s32[] parameter(2)
  %p.1.rhs.159 = s32[] parameter(3)
  %compare.255 = pred[] compare(%p.1.lhs.159, %p.1.rhs.159), direction=LT
  %compare.253 = pred[] compare(%p.0.lhs.159, %p.0.rhs.159), direction=GT
  ROOT %select.114 = pred[] select(%compare.254, %compare.255, %compare.253)
}

%region_666.17225.clone (scatter.95: u32[], scatter.96: u32[]) -> u32[] {
  %scatter.95 = u32[] parameter(0)
  ROOT %scatter.96 = u32[] parameter(1)
}

%region_667.17234 (reduce_max.17231: f32[], reduce_max.17232: f32[]) -> f32[] {
  %reduce_max.17231 = f32[] parameter(0)
  %reduce_max.17232 = f32[] parameter(1)
  ROOT %reduce_max.17233 = f32[] maximum(%reduce_max.17231, %reduce_max.17232)
}

%region_668.17243 (reduce_sum.17240: f32[], reduce_sum.17241: f32[]) -> f32[] {
  %reduce_sum.17240 = f32[] parameter(0)
  %reduce_sum.17241 = f32[] parameter(1)
  ROOT %reduce_sum.17242 = f32[] add(%reduce_sum.17240, %reduce_sum.17241)
}

%region_669.17252.clone (scatter-add.126: bf16[], scatter-add.127: bf16[]) -> bf16[] {
  %scatter-add.126 = bf16[] parameter(0)
  %scatter-add.127 = bf16[] parameter(1)
  ROOT %add.974 = bf16[] add(%scatter-add.126, %scatter-add.127)
}

%region_670.17264 (reduce_window_sum.17261: s32[], reduce_window_sum.17262: s32[]) -> s32[] {
  %reduce_window_sum.17261 = s32[] parameter(0)
  %reduce_window_sum.17262 = s32[] parameter(1)
  ROOT %reduce_window_sum.17263 = s32[] add(%reduce_window_sum.17261, %reduce_window_sum.17262)
}

%region_671.17273 (reduce_sum.17270: s32[], reduce_sum.17271: s32[]) -> s32[] {
  %reduce_sum.17270 = s32[] parameter(0)
  %reduce_sum.17271 = s32[] parameter(1)
  ROOT %reduce_sum.17272 = s32[] add(%reduce_sum.17270, %reduce_sum.17271)
}

%region_672.17283 (reduce_sum.17280: s32[], reduce_sum.17281: s32[]) -> s32[] {
  %reduce_sum.17280 = s32[] parameter(0)
  %reduce_sum.17281 = s32[] parameter(1)
  ROOT %reduce_sum.17282 = s32[] add(%reduce_sum.17280, %reduce_sum.17281)
}

%region_673.17340 (reduce_and.17337: pred[], reduce_and.17338: pred[]) -> pred[] {
  %reduce_and.17337 = pred[] parameter(0)
  %reduce_and.17338 = pred[] parameter(1)
  ROOT %reduce_and.17339 = pred[] and(%reduce_and.17337, %reduce_and.17338)
}

%region_674.17352 (reduce_sum.17349: bf16[], reduce_sum.17350: bf16[]) -> bf16[] {
  %reduce_sum.17349 = bf16[] parameter(0)
  %reduce_sum.17350 = bf16[] parameter(1)
  ROOT %reduce_sum.17351 = bf16[] add(%reduce_sum.17349, %reduce_sum.17350)
}

%region_675.17369 (reduce_sum.17366: f32[], reduce_sum.119: f32[]) -> f32[] {
  %reduce_sum.17366 = f32[] parameter(0)
  %reduce_sum.119 = f32[] parameter(1)
  ROOT %reduce_sum.17368 = f32[] add(%reduce_sum.17366, %reduce_sum.119)
}

%region_676.17379.clone (scatter-add.128: bf16[], scatter-add.129: bf16[]) -> bf16[] {
  %scatter-add.128 = bf16[] parameter(0)
  %scatter-add.129 = bf16[] parameter(1)
  ROOT %add.975 = bf16[] add(%scatter-add.128, %scatter-add.129)
}

%region_677.17395 (reduce_sum.17392: f32[], reduce_sum.17393: f32[]) -> f32[] {
  %reduce_sum.17392 = f32[] parameter(0)
  %reduce_sum.17393 = f32[] parameter(1)
  ROOT %reduce_sum.17394 = f32[] add(%reduce_sum.17392, %reduce_sum.17393)
}

%region_678.17474 (reduce_sum.17471: f32[], reduce_sum.17472: f32[]) -> f32[] {
  %reduce_sum.17471 = f32[] parameter(0)
  %reduce_sum.17472 = f32[] parameter(1)
  ROOT %reduce_sum.17473 = f32[] add(%reduce_sum.17471, %reduce_sum.17472)
}

%region_679.17516 (reduce_sum.17513: f32[], reduce_sum.17514: f32[]) -> f32[] {
  %reduce_sum.17513 = f32[] parameter(0)
  %reduce_sum.17514 = f32[] parameter(1)
  ROOT %reduce_sum.17515 = f32[] add(%reduce_sum.17513, %reduce_sum.17514)
}

%region_680.17612 (reduce_sum.17609: s32[], reduce_sum.17610: s32[]) -> s32[] {
  %reduce_sum.17609 = s32[] parameter(0)
  %reduce_sum.17610 = s32[] parameter(1)
  ROOT %reduce_sum.17611 = s32[] add(%reduce_sum.17609, %reduce_sum.17610)
}

%region_681.17621 (reduce_sum.17618: s32[], reduce_sum.17619: s32[]) -> s32[] {
  %reduce_sum.17618 = s32[] parameter(0)
  %reduce_sum.17619 = s32[] parameter(1)
  ROOT %reduce_sum.17620 = s32[] add(%reduce_sum.17618, %reduce_sum.17619)
}

%region_682.17627 (reduce_max.17624: s32[], reduce_max.17625: s32[]) -> s32[] {
  %reduce_max.17624 = s32[] parameter(0)
  %reduce_max.17625 = s32[] parameter(1)
  ROOT %reduce_max.17626 = s32[] maximum(%reduce_max.17624, %reduce_max.17625)
}

%region_683.17642 (reduce_sum.17639: f32[], reduce_sum.17640: f32[]) -> f32[] {
  %reduce_sum.17639 = f32[] parameter(0)
  %reduce_sum.17640 = f32[] parameter(1)
  ROOT %reduce_sum.17641 = f32[] add(%reduce_sum.17639, %reduce_sum.17640)
}

%compare_greater_than.48.17663.clone (p.0.lhs.160: bf16[], p.0.rhs.160: bf16[], p.1.lhs.160: s32[], p.1.rhs.160: s32[]) -> pred[] {
  %p.1.lhs.160 = s32[] parameter(2)
  %p.1.rhs.160 = s32[] parameter(3)
  %p.0.lhs.160 = bf16[] parameter(0)
  %p.0.rhs.160 = bf16[] parameter(1)
  ROOT %compare.256 = pred[] compare(%p.0.lhs.160, %p.0.rhs.160), direction=GT, type=TOTALORDER
}

%compare-value-and-index.48 (p.0.lhs.161: bf16[], p.0.rhs.161: bf16[], p.1.lhs.161: s32[], p.1.rhs.161: s32[]) -> pred[] {
  %p.0.lhs.161 = bf16[] parameter(0)
  %p.0.rhs.161 = bf16[] parameter(1)
  %compare.258 = pred[] compare(%p.0.lhs.161, %p.0.rhs.161), direction=EQ, type=TOTALORDER
  %p.1.lhs.161 = s32[] parameter(2)
  %p.1.rhs.161 = s32[] parameter(3)
  %compare.259 = pred[] compare(%p.1.lhs.161, %p.1.rhs.161), direction=LT
  %compare.257 = pred[] compare(%p.0.lhs.161, %p.0.rhs.161), direction=GT
  ROOT %select.115 = pred[] select(%compare.258, %compare.259, %compare.257)
}

%region_684.17699.clone (scatter.97: u32[], scatter.98: u32[]) -> u32[] {
  %scatter.97 = u32[] parameter(0)
  ROOT %scatter.98 = u32[] parameter(1)
}

%region_685.17708 (reduce_max.17705: f32[], reduce_max.17706: f32[]) -> f32[] {
  %reduce_max.17705 = f32[] parameter(0)
  %reduce_max.17706 = f32[] parameter(1)
  ROOT %reduce_max.17707 = f32[] maximum(%reduce_max.17705, %reduce_max.17706)
}

%region_686.17717 (reduce_sum.17714: f32[], reduce_sum.17715: f32[]) -> f32[] {
  %reduce_sum.17714 = f32[] parameter(0)
  %reduce_sum.17715 = f32[] parameter(1)
  ROOT %reduce_sum.17716 = f32[] add(%reduce_sum.17714, %reduce_sum.17715)
}

%region_687.17726.clone (scatter-add.130: bf16[], scatter-add.131: bf16[]) -> bf16[] {
  %scatter-add.130 = bf16[] parameter(0)
  %scatter-add.131 = bf16[] parameter(1)
  ROOT %add.976 = bf16[] add(%scatter-add.130, %scatter-add.131)
}

%region_688.17738 (reduce_window_sum.17735: s32[], reduce_window_sum.17736: s32[]) -> s32[] {
  %reduce_window_sum.17735 = s32[] parameter(0)
  %reduce_window_sum.17736 = s32[] parameter(1)
  ROOT %reduce_window_sum.17737 = s32[] add(%reduce_window_sum.17735, %reduce_window_sum.17736)
}

%region_689.17747 (reduce_sum.17744: s32[], reduce_sum.17745: s32[]) -> s32[] {
  %reduce_sum.17744 = s32[] parameter(0)
  %reduce_sum.17745 = s32[] parameter(1)
  ROOT %reduce_sum.17746 = s32[] add(%reduce_sum.17744, %reduce_sum.17745)
}

%region_690.17757 (reduce_sum.17754: s32[], reduce_sum.17755: s32[]) -> s32[] {
  %reduce_sum.17754 = s32[] parameter(0)
  %reduce_sum.17755 = s32[] parameter(1)
  ROOT %reduce_sum.17756 = s32[] add(%reduce_sum.17754, %reduce_sum.17755)
}

%region_691.17814 (reduce_and.17811: pred[], reduce_and.17812: pred[]) -> pred[] {
  %reduce_and.17811 = pred[] parameter(0)
  %reduce_and.17812 = pred[] parameter(1)
  ROOT %reduce_and.17813 = pred[] and(%reduce_and.17811, %reduce_and.17812)
}

%region_692.17826 (reduce_sum.17823: bf16[], reduce_sum.17824: bf16[]) -> bf16[] {
  %reduce_sum.17823 = bf16[] parameter(0)
  %reduce_sum.17824 = bf16[] parameter(1)
  ROOT %reduce_sum.17825 = bf16[] add(%reduce_sum.17823, %reduce_sum.17824)
}

%region_693.17843 (reduce_sum.17840: f32[], reduce_sum.17841: f32[]) -> f32[] {
  %reduce_sum.17840 = f32[] parameter(0)
  %reduce_sum.17841 = f32[] parameter(1)
  ROOT %reduce_sum.17842 = f32[] add(%reduce_sum.17840, %reduce_sum.17841)
}

%region_694.17853.clone (scatter-add.132: bf16[], scatter-add.133: bf16[]) -> bf16[] {
  %scatter-add.132 = bf16[] parameter(0)
  %scatter-add.133 = bf16[] parameter(1)
  ROOT %add.977 = bf16[] add(%scatter-add.132, %scatter-add.133)
}

%region_695.17869 (reduce_sum.120: f32[], reduce_sum.121: f32[]) -> f32[] {
  %reduce_sum.120 = f32[] parameter(0)
  %reduce_sum.121 = f32[] parameter(1)
  ROOT %reduce_sum.122 = f32[] add(%reduce_sum.120, %reduce_sum.121)
}

%region_696.17948 (reduce_sum.17945: f32[], reduce_sum.17946: f32[]) -> f32[] {
  %reduce_sum.17945 = f32[] parameter(0)
  %reduce_sum.17946 = f32[] parameter(1)
  ROOT %reduce_sum.123 = f32[] add(%reduce_sum.17945, %reduce_sum.17946)
}

%region_697.17990 (reduce_sum.17987: f32[], reduce_sum.17988: f32[]) -> f32[] {
  %reduce_sum.17987 = f32[] parameter(0)
  %reduce_sum.17988 = f32[] parameter(1)
  ROOT %reduce_sum.17989 = f32[] add(%reduce_sum.17987, %reduce_sum.17988)
}

%region_698.18086 (reduce_sum.18083: s32[], reduce_sum.18084: s32[]) -> s32[] {
  %reduce_sum.18083 = s32[] parameter(0)
  %reduce_sum.18084 = s32[] parameter(1)
  ROOT %reduce_sum.18085 = s32[] add(%reduce_sum.18083, %reduce_sum.18084)
}

%region_699.18095 (reduce_sum.18092: s32[], reduce_sum.18093: s32[]) -> s32[] {
  %reduce_sum.18092 = s32[] parameter(0)
  %reduce_sum.18093 = s32[] parameter(1)
  ROOT %reduce_sum.18094 = s32[] add(%reduce_sum.18092, %reduce_sum.18093)
}

%region_700.18101 (reduce_max.18098: s32[], reduce_max.18099: s32[]) -> s32[] {
  %reduce_max.18098 = s32[] parameter(0)
  %reduce_max.18099 = s32[] parameter(1)
  ROOT %reduce_max.18100 = s32[] maximum(%reduce_max.18098, %reduce_max.18099)
}

%region_701.18116 (reduce_sum.18113: f32[], reduce_sum.18114: f32[]) -> f32[] {
  %reduce_sum.18113 = f32[] parameter(0)
  %reduce_sum.18114 = f32[] parameter(1)
  ROOT %reduce_sum.18115 = f32[] add(%reduce_sum.18113, %reduce_sum.18114)
}

%compare_greater_than.49.18137.clone (p.0.lhs.162: bf16[], p.0.rhs.162: bf16[], p.1.lhs.162: s32[], p.1.rhs.162: s32[]) -> pred[] {
  %p.1.lhs.162 = s32[] parameter(2)
  %p.1.rhs.162 = s32[] parameter(3)
  %p.0.lhs.162 = bf16[] parameter(0)
  %p.0.rhs.162 = bf16[] parameter(1)
  ROOT %compare.260 = pred[] compare(%p.0.lhs.162, %p.0.rhs.162), direction=GT, type=TOTALORDER
}

%compare-value-and-index.49 (p.0.lhs.163: bf16[], p.0.rhs.163: bf16[], p.1.lhs.163: s32[], p.1.rhs.163: s32[]) -> pred[] {
  %p.0.lhs.163 = bf16[] parameter(0)
  %p.0.rhs.163 = bf16[] parameter(1)
  %compare.262 = pred[] compare(%p.0.lhs.163, %p.0.rhs.163), direction=EQ, type=TOTALORDER
  %p.1.lhs.163 = s32[] parameter(2)
  %p.1.rhs.163 = s32[] parameter(3)
  %compare.263 = pred[] compare(%p.1.lhs.163, %p.1.rhs.163), direction=LT
  %compare.261 = pred[] compare(%p.0.lhs.163, %p.0.rhs.163), direction=GT
  ROOT %select.116 = pred[] select(%compare.262, %compare.263, %compare.261)
}

%region_702.18173.clone (scatter.99: u32[], scatter.100: u32[]) -> u32[] {
  %scatter.99 = u32[] parameter(0)
  ROOT %scatter.100 = u32[] parameter(1)
}

%region_703.18182 (reduce_max.18179: f32[], reduce_max.18180: f32[]) -> f32[] {
  %reduce_max.18179 = f32[] parameter(0)
  %reduce_max.18180 = f32[] parameter(1)
  ROOT %reduce_max.18181 = f32[] maximum(%reduce_max.18179, %reduce_max.18180)
}

%region_704.18191 (reduce_sum.18188: f32[], reduce_sum.18189: f32[]) -> f32[] {
  %reduce_sum.18188 = f32[] parameter(0)
  %reduce_sum.18189 = f32[] parameter(1)
  ROOT %reduce_sum.18190 = f32[] add(%reduce_sum.18188, %reduce_sum.18189)
}

%region_705.18200.clone (scatter-add.134: bf16[], scatter-add.135: bf16[]) -> bf16[] {
  %scatter-add.134 = bf16[] parameter(0)
  %scatter-add.135 = bf16[] parameter(1)
  ROOT %add.978 = bf16[] add(%scatter-add.134, %scatter-add.135)
}

%region_706.18212 (reduce_window_sum.18209: s32[], reduce_window_sum.18210: s32[]) -> s32[] {
  %reduce_window_sum.18209 = s32[] parameter(0)
  %reduce_window_sum.18210 = s32[] parameter(1)
  ROOT %reduce_window_sum.18211 = s32[] add(%reduce_window_sum.18209, %reduce_window_sum.18210)
}

%region_707.18221 (reduce_sum.18218: s32[], reduce_sum.18219: s32[]) -> s32[] {
  %reduce_sum.18218 = s32[] parameter(0)
  %reduce_sum.18219 = s32[] parameter(1)
  ROOT %reduce_sum.18220 = s32[] add(%reduce_sum.18218, %reduce_sum.18219)
}

%region_708.18231 (reduce_sum.18228: s32[], reduce_sum.18229: s32[]) -> s32[] {
  %reduce_sum.18228 = s32[] parameter(0)
  %reduce_sum.18229 = s32[] parameter(1)
  ROOT %reduce_sum.18230 = s32[] add(%reduce_sum.18228, %reduce_sum.18229)
}

%region_709.18288 (reduce_and.18285: pred[], reduce_and.18286: pred[]) -> pred[] {
  %reduce_and.18285 = pred[] parameter(0)
  %reduce_and.18286 = pred[] parameter(1)
  ROOT %reduce_and.18287 = pred[] and(%reduce_and.18285, %reduce_and.18286)
}

%region_710.18300 (reduce_sum.18297: bf16[], reduce_sum.18298: bf16[]) -> bf16[] {
  %reduce_sum.18297 = bf16[] parameter(0)
  %reduce_sum.18298 = bf16[] parameter(1)
  ROOT %reduce_sum.18299 = bf16[] add(%reduce_sum.18297, %reduce_sum.18298)
}

%region_711.18317 (reduce_sum.18314: f32[], reduce_sum.18315: f32[]) -> f32[] {
  %reduce_sum.18314 = f32[] parameter(0)
  %reduce_sum.18315 = f32[] parameter(1)
  ROOT %reduce_sum.18316 = f32[] add(%reduce_sum.18314, %reduce_sum.18315)
}

%region_712.18327.clone (scatter-add.136: bf16[], scatter-add.137: bf16[]) -> bf16[] {
  %scatter-add.136 = bf16[] parameter(0)
  %scatter-add.137 = bf16[] parameter(1)
  ROOT %add.980 = bf16[] add(%scatter-add.136, %scatter-add.137)
}

%region_713.18343 (reduce_sum.18340: f32[], reduce_sum.18341: f32[]) -> f32[] {
  %reduce_sum.18340 = f32[] parameter(0)
  %reduce_sum.18341 = f32[] parameter(1)
  ROOT %reduce_sum.18342 = f32[] add(%reduce_sum.18340, %reduce_sum.18341)
}

%region_714.18422 (reduce_sum.18419: f32[], reduce_sum.18420: f32[]) -> f32[] {
  %reduce_sum.18419 = f32[] parameter(0)
  %reduce_sum.18420 = f32[] parameter(1)
  ROOT %reduce_sum.18421 = f32[] add(%reduce_sum.18419, %reduce_sum.18420)
}

%region_715.18464 (reduce_sum.18461: f32[], reduce_sum.18462: f32[]) -> f32[] {
  %reduce_sum.18461 = f32[] parameter(0)
  %reduce_sum.18462 = f32[] parameter(1)
  ROOT %reduce_sum.18463 = f32[] add(%reduce_sum.18461, %reduce_sum.18462)
}

%region_716.18560 (reduce_sum.18557: s32[], reduce_sum.18558: s32[]) -> s32[] {
  %reduce_sum.18557 = s32[] parameter(0)
  %reduce_sum.18558 = s32[] parameter(1)
  ROOT %reduce_sum.18559 = s32[] add(%reduce_sum.18557, %reduce_sum.18558)
}

%region_717.18569 (reduce_sum.18566: s32[], reduce_sum.18567: s32[]) -> s32[] {
  %reduce_sum.18566 = s32[] parameter(0)
  %reduce_sum.18567 = s32[] parameter(1)
  ROOT %reduce_sum.18568 = s32[] add(%reduce_sum.18566, %reduce_sum.18567)
}

%region_718.18575 (reduce_max.18572: s32[], reduce_max.18573: s32[]) -> s32[] {
  %reduce_max.18572 = s32[] parameter(0)
  %reduce_max.18573 = s32[] parameter(1)
  ROOT %reduce_max.18574 = s32[] maximum(%reduce_max.18572, %reduce_max.18573)
}

%region_719.18590 (reduce_sum.18587: f32[], reduce_sum.18588: f32[]) -> f32[] {
  %reduce_sum.18587 = f32[] parameter(0)
  %reduce_sum.18588 = f32[] parameter(1)
  ROOT %reduce_sum.18589 = f32[] add(%reduce_sum.18587, %reduce_sum.18588)
}

%compare_greater_than.50.18611.clone (p.0.lhs.164: bf16[], p.0.rhs.164: bf16[], p.1.lhs.164: s32[], p.1.rhs.164: s32[]) -> pred[] {
  %p.1.lhs.164 = s32[] parameter(2)
  %p.1.rhs.164 = s32[] parameter(3)
  %p.0.lhs.164 = bf16[] parameter(0)
  %p.0.rhs.164 = bf16[] parameter(1)
  ROOT %compare.264 = pred[] compare(%p.0.lhs.164, %p.0.rhs.164), direction=GT, type=TOTALORDER
}

%compare-value-and-index.50 (p.0.lhs.165: bf16[], p.0.rhs.165: bf16[], p.1.lhs.165: s32[], p.1.rhs.165: s32[]) -> pred[] {
  %p.0.lhs.165 = bf16[] parameter(0)
  %p.0.rhs.165 = bf16[] parameter(1)
  %compare.266 = pred[] compare(%p.0.lhs.165, %p.0.rhs.165), direction=EQ, type=TOTALORDER
  %p.1.lhs.165 = s32[] parameter(2)
  %p.1.rhs.165 = s32[] parameter(3)
  %compare.267 = pred[] compare(%p.1.lhs.165, %p.1.rhs.165), direction=LT
  %compare.265 = pred[] compare(%p.0.lhs.165, %p.0.rhs.165), direction=GT
  ROOT %select.117 = pred[] select(%compare.266, %compare.267, %compare.265)
}

%region_720.18647.clone (scatter.101: u32[], scatter.102: u32[]) -> u32[] {
  %scatter.101 = u32[] parameter(0)
  ROOT %scatter.102 = u32[] parameter(1)
}

%region_721.18656 (reduce_max.18653: f32[], reduce_max.18654: f32[]) -> f32[] {
  %reduce_max.18653 = f32[] parameter(0)
  %reduce_max.18654 = f32[] parameter(1)
  ROOT %reduce_max.18655 = f32[] maximum(%reduce_max.18653, %reduce_max.18654)
}

%region_722.18665 (reduce_sum.18662: f32[], reduce_sum.18663: f32[]) -> f32[] {
  %reduce_sum.18662 = f32[] parameter(0)
  %reduce_sum.18663 = f32[] parameter(1)
  ROOT %reduce_sum.18664 = f32[] add(%reduce_sum.18662, %reduce_sum.18663)
}

%region_723.18674.clone (scatter-add.138: bf16[], scatter-add.139: bf16[]) -> bf16[] {
  %scatter-add.138 = bf16[] parameter(0)
  %scatter-add.139 = bf16[] parameter(1)
  ROOT %add.982 = bf16[] add(%scatter-add.138, %scatter-add.139)
}

%region_724.18686 (reduce_window_sum.18683: s32[], reduce_window_sum.18684: s32[]) -> s32[] {
  %reduce_window_sum.18683 = s32[] parameter(0)
  %reduce_window_sum.18684 = s32[] parameter(1)
  ROOT %reduce_window_sum.18685 = s32[] add(%reduce_window_sum.18683, %reduce_window_sum.18684)
}

%region_725.18695 (reduce_sum.18692: s32[], reduce_sum.18693: s32[]) -> s32[] {
  %reduce_sum.18692 = s32[] parameter(0)
  %reduce_sum.18693 = s32[] parameter(1)
  ROOT %reduce_sum.18694 = s32[] add(%reduce_sum.18692, %reduce_sum.18693)
}

%region_726.18705 (reduce_sum.18702: s32[], reduce_sum.18703: s32[]) -> s32[] {
  %reduce_sum.18702 = s32[] parameter(0)
  %reduce_sum.18703 = s32[] parameter(1)
  ROOT %reduce_sum.18704 = s32[] add(%reduce_sum.18702, %reduce_sum.18703)
}

%region_727.18762 (reduce_and.18759: pred[], reduce_and.18760: pred[]) -> pred[] {
  %reduce_and.18759 = pred[] parameter(0)
  %reduce_and.18760 = pred[] parameter(1)
  ROOT %reduce_and.18761 = pred[] and(%reduce_and.18759, %reduce_and.18760)
}

%region_728.18774 (reduce_sum.18771: bf16[], reduce_sum.18772: bf16[]) -> bf16[] {
  %reduce_sum.18771 = bf16[] parameter(0)
  %reduce_sum.18772 = bf16[] parameter(1)
  ROOT %reduce_sum.18773 = bf16[] add(%reduce_sum.18771, %reduce_sum.18772)
}

%region_729.18791 (reduce_sum.18788: f32[], reduce_sum.18789: f32[]) -> f32[] {
  %reduce_sum.18788 = f32[] parameter(0)
  %reduce_sum.18789 = f32[] parameter(1)
  ROOT %reduce_sum.18790 = f32[] add(%reduce_sum.18788, %reduce_sum.18789)
}

%region_730.18801.clone (scatter-add.140: bf16[], scatter-add.141: bf16[]) -> bf16[] {
  %scatter-add.140 = bf16[] parameter(0)
  %scatter-add.141 = bf16[] parameter(1)
  ROOT %add.983 = bf16[] add(%scatter-add.140, %scatter-add.141)
}

%region_731.18817 (reduce_sum.124: f32[], reduce_sum.18815: f32[]) -> f32[] {
  %reduce_sum.124 = f32[] parameter(0)
  %reduce_sum.18815 = f32[] parameter(1)
  ROOT %reduce_sum.125 = f32[] add(%reduce_sum.124, %reduce_sum.18815)
}

%region_732.18896 (reduce_sum.18893: f32[], reduce_sum.18894: f32[]) -> f32[] {
  %reduce_sum.18893 = f32[] parameter(0)
  %reduce_sum.18894 = f32[] parameter(1)
  ROOT %reduce_sum.18895 = f32[] add(%reduce_sum.18893, %reduce_sum.18894)
}

%region_733.18938 (reduce_sum.18935: f32[], reduce_sum.18936: f32[]) -> f32[] {
  %reduce_sum.18935 = f32[] parameter(0)
  %reduce_sum.18936 = f32[] parameter(1)
  ROOT %reduce_sum.18937 = f32[] add(%reduce_sum.18935, %reduce_sum.18936)
}

%region_734.19034 (reduce_sum.19031: s32[], reduce_sum.19032: s32[]) -> s32[] {
  %reduce_sum.19031 = s32[] parameter(0)
  %reduce_sum.19032 = s32[] parameter(1)
  ROOT %reduce_sum.19033 = s32[] add(%reduce_sum.19031, %reduce_sum.19032)
}

%region_735.19043 (reduce_sum.19040: s32[], reduce_sum.19041: s32[]) -> s32[] {
  %reduce_sum.19040 = s32[] parameter(0)
  %reduce_sum.19041 = s32[] parameter(1)
  ROOT %reduce_sum.19042 = s32[] add(%reduce_sum.19040, %reduce_sum.19041)
}

%region_736.19049 (reduce_max.19046: s32[], reduce_max.19047: s32[]) -> s32[] {
  %reduce_max.19046 = s32[] parameter(0)
  %reduce_max.19047 = s32[] parameter(1)
  ROOT %reduce_max.19048 = s32[] maximum(%reduce_max.19046, %reduce_max.19047)
}

%region_737.19064 (reduce_sum.19061: f32[], reduce_sum.19062: f32[]) -> f32[] {
  %reduce_sum.19061 = f32[] parameter(0)
  %reduce_sum.19062 = f32[] parameter(1)
  ROOT %reduce_sum.126 = f32[] add(%reduce_sum.19061, %reduce_sum.19062)
}

%compare_greater_than.51.19085.clone (p.0.lhs.166: bf16[], p.0.rhs.166: bf16[], p.1.lhs.166: s32[], p.1.rhs.166: s32[]) -> pred[] {
  %p.1.lhs.166 = s32[] parameter(2)
  %p.1.rhs.166 = s32[] parameter(3)
  %p.0.lhs.166 = bf16[] parameter(0)
  %p.0.rhs.166 = bf16[] parameter(1)
  ROOT %compare.268 = pred[] compare(%p.0.lhs.166, %p.0.rhs.166), direction=GT, type=TOTALORDER
}

%compare-value-and-index.51 (p.0.lhs.167: bf16[], p.0.rhs.167: bf16[], p.1.lhs.167: s32[], p.1.rhs.167: s32[]) -> pred[] {
  %p.0.lhs.167 = bf16[] parameter(0)
  %p.0.rhs.167 = bf16[] parameter(1)
  %compare.270 = pred[] compare(%p.0.lhs.167, %p.0.rhs.167), direction=EQ, type=TOTALORDER
  %p.1.lhs.167 = s32[] parameter(2)
  %p.1.rhs.167 = s32[] parameter(3)
  %compare.271 = pred[] compare(%p.1.lhs.167, %p.1.rhs.167), direction=LT
  %compare.269 = pred[] compare(%p.0.lhs.167, %p.0.rhs.167), direction=GT
  ROOT %select.118 = pred[] select(%compare.270, %compare.271, %compare.269)
}

%region_738.19121.clone (scatter.103: u32[], scatter.104: u32[]) -> u32[] {
  %scatter.103 = u32[] parameter(0)
  ROOT %scatter.104 = u32[] parameter(1)
}

%region_739.19130 (reduce_max.19127: f32[], reduce_max.19128: f32[]) -> f32[] {
  %reduce_max.19127 = f32[] parameter(0)
  %reduce_max.19128 = f32[] parameter(1)
  ROOT %reduce_max.19129 = f32[] maximum(%reduce_max.19127, %reduce_max.19128)
}

%region_740.19139 (reduce_sum.19136: f32[], reduce_sum.19137: f32[]) -> f32[] {
  %reduce_sum.19136 = f32[] parameter(0)
  %reduce_sum.19137 = f32[] parameter(1)
  ROOT %reduce_sum.19138 = f32[] add(%reduce_sum.19136, %reduce_sum.19137)
}

%region_741.19148.clone (scatter-add.142: bf16[], scatter-add.143: bf16[]) -> bf16[] {
  %scatter-add.142 = bf16[] parameter(0)
  %scatter-add.143 = bf16[] parameter(1)
  ROOT %add.984 = bf16[] add(%scatter-add.142, %scatter-add.143)
}

%region_742.19160 (reduce_window_sum.19157: s32[], reduce_window_sum.19158: s32[]) -> s32[] {
  %reduce_window_sum.19157 = s32[] parameter(0)
  %reduce_window_sum.19158 = s32[] parameter(1)
  ROOT %reduce_window_sum.19159 = s32[] add(%reduce_window_sum.19157, %reduce_window_sum.19158)
}

%region_743.19169 (reduce_sum.19166: s32[], reduce_sum.19167: s32[]) -> s32[] {
  %reduce_sum.19166 = s32[] parameter(0)
  %reduce_sum.19167 = s32[] parameter(1)
  ROOT %reduce_sum.19168 = s32[] add(%reduce_sum.19166, %reduce_sum.19167)
}

%region_744.19179 (reduce_sum.19176: s32[], reduce_sum.19177: s32[]) -> s32[] {
  %reduce_sum.19176 = s32[] parameter(0)
  %reduce_sum.19177 = s32[] parameter(1)
  ROOT %reduce_sum.19178 = s32[] add(%reduce_sum.19176, %reduce_sum.19177)
}

%region_745.19236 (reduce_and.19233: pred[], reduce_and.19234: pred[]) -> pred[] {
  %reduce_and.19233 = pred[] parameter(0)
  %reduce_and.19234 = pred[] parameter(1)
  ROOT %reduce_and.19235 = pred[] and(%reduce_and.19233, %reduce_and.19234)
}

%region_746.19248 (reduce_sum.19245: bf16[], reduce_sum.19246: bf16[]) -> bf16[] {
  %reduce_sum.19245 = bf16[] parameter(0)
  %reduce_sum.19246 = bf16[] parameter(1)
  ROOT %reduce_sum.19247 = bf16[] add(%reduce_sum.19245, %reduce_sum.19246)
}

%region_747.19265 (reduce_sum.19262: f32[], reduce_sum.19263: f32[]) -> f32[] {
  %reduce_sum.19262 = f32[] parameter(0)
  %reduce_sum.19263 = f32[] parameter(1)
  ROOT %reduce_sum.19264 = f32[] add(%reduce_sum.19262, %reduce_sum.19263)
}

%region_748.19275.clone (scatter-add.144: bf16[], scatter-add.145: bf16[]) -> bf16[] {
  %scatter-add.144 = bf16[] parameter(0)
  %scatter-add.145 = bf16[] parameter(1)
  ROOT %add.985 = bf16[] add(%scatter-add.144, %scatter-add.145)
}

%region_749.19291 (reduce_sum.19288: f32[], reduce_sum.19289: f32[]) -> f32[] {
  %reduce_sum.19288 = f32[] parameter(0)
  %reduce_sum.19289 = f32[] parameter(1)
  ROOT %reduce_sum.19290 = f32[] add(%reduce_sum.19288, %reduce_sum.19289)
}

%region_750.19370 (reduce_sum.19367: f32[], reduce_sum.19368: f32[]) -> f32[] {
  %reduce_sum.19367 = f32[] parameter(0)
  %reduce_sum.19368 = f32[] parameter(1)
  ROOT %reduce_sum.19369 = f32[] add(%reduce_sum.19367, %reduce_sum.19368)
}

%region_751.19412 (reduce_sum.19409: f32[], reduce_sum.19410: f32[]) -> f32[] {
  %reduce_sum.19409 = f32[] parameter(0)
  %reduce_sum.19410 = f32[] parameter(1)
  ROOT %reduce_sum.19411 = f32[] add(%reduce_sum.19409, %reduce_sum.19410)
}

%region_752.19508 (reduce_sum.19505: s32[], reduce_sum.19506: s32[]) -> s32[] {
  %reduce_sum.19505 = s32[] parameter(0)
  %reduce_sum.19506 = s32[] parameter(1)
  ROOT %reduce_sum.19507 = s32[] add(%reduce_sum.19505, %reduce_sum.19506)
}

%region_753.19517 (reduce_sum.19514: s32[], reduce_sum.19515: s32[]) -> s32[] {
  %reduce_sum.19514 = s32[] parameter(0)
  %reduce_sum.19515 = s32[] parameter(1)
  ROOT %reduce_sum.19516 = s32[] add(%reduce_sum.19514, %reduce_sum.19515)
}

%region_754.19523 (reduce_max.19520: s32[], reduce_max.19521: s32[]) -> s32[] {
  %reduce_max.19520 = s32[] parameter(0)
  %reduce_max.19521 = s32[] parameter(1)
  ROOT %reduce_max.19522 = s32[] maximum(%reduce_max.19520, %reduce_max.19521)
}

%region_755.19538 (reduce_sum.19535: f32[], reduce_sum.19536: f32[]) -> f32[] {
  %reduce_sum.19535 = f32[] parameter(0)
  %reduce_sum.19536 = f32[] parameter(1)
  ROOT %reduce_sum.19537 = f32[] add(%reduce_sum.19535, %reduce_sum.19536)
}

%compare_greater_than.52.19559.clone (p.0.lhs.168: bf16[], p.0.rhs.168: bf16[], p.1.lhs.168: s32[], p.1.rhs.168: s32[]) -> pred[] {
  %p.1.lhs.168 = s32[] parameter(2)
  %p.1.rhs.168 = s32[] parameter(3)
  %p.0.lhs.168 = bf16[] parameter(0)
  %p.0.rhs.168 = bf16[] parameter(1)
  ROOT %compare.272 = pred[] compare(%p.0.lhs.168, %p.0.rhs.168), direction=GT, type=TOTALORDER
}

%compare-value-and-index.52 (p.0.lhs.169: bf16[], p.0.rhs.169: bf16[], p.1.lhs.169: s32[], p.1.rhs.169: s32[]) -> pred[] {
  %p.0.lhs.169 = bf16[] parameter(0)
  %p.0.rhs.169 = bf16[] parameter(1)
  %compare.274 = pred[] compare(%p.0.lhs.169, %p.0.rhs.169), direction=EQ, type=TOTALORDER
  %p.1.lhs.169 = s32[] parameter(2)
  %p.1.rhs.169 = s32[] parameter(3)
  %compare.275 = pred[] compare(%p.1.lhs.169, %p.1.rhs.169), direction=LT
  %compare.273 = pred[] compare(%p.0.lhs.169, %p.0.rhs.169), direction=GT
  ROOT %select.119 = pred[] select(%compare.274, %compare.275, %compare.273)
}

%region_756.19595.clone (scatter.105: u32[], scatter.106: u32[]) -> u32[] {
  %scatter.105 = u32[] parameter(0)
  ROOT %scatter.106 = u32[] parameter(1)
}

%region_757.19604 (reduce_max.19601: f32[], reduce_max.19602: f32[]) -> f32[] {
  %reduce_max.19601 = f32[] parameter(0)
  %reduce_max.19602 = f32[] parameter(1)
  ROOT %reduce_max.19603 = f32[] maximum(%reduce_max.19601, %reduce_max.19602)
}

%region_758.19613 (reduce_sum.19610: f32[], reduce_sum.19611: f32[]) -> f32[] {
  %reduce_sum.19610 = f32[] parameter(0)
  %reduce_sum.19611 = f32[] parameter(1)
  ROOT %reduce_sum.19612 = f32[] add(%reduce_sum.19610, %reduce_sum.19611)
}

%region_759.19622.clone (scatter-add.146: bf16[], scatter-add.147: bf16[]) -> bf16[] {
  %scatter-add.146 = bf16[] parameter(0)
  %scatter-add.147 = bf16[] parameter(1)
  ROOT %add.986 = bf16[] add(%scatter-add.146, %scatter-add.147)
}

%region_760.19634 (reduce_window_sum.19631: s32[], reduce_window_sum.19632: s32[]) -> s32[] {
  %reduce_window_sum.19631 = s32[] parameter(0)
  %reduce_window_sum.19632 = s32[] parameter(1)
  ROOT %reduce_window_sum.19633 = s32[] add(%reduce_window_sum.19631, %reduce_window_sum.19632)
}

%region_761.19643 (reduce_sum.127: s32[], reduce_sum.128: s32[]) -> s32[] {
  %reduce_sum.127 = s32[] parameter(0)
  %reduce_sum.128 = s32[] parameter(1)
  ROOT %reduce_sum.129 = s32[] add(%reduce_sum.127, %reduce_sum.128)
}

%region_762.19653 (reduce_sum.19650: s32[], reduce_sum.19651: s32[]) -> s32[] {
  %reduce_sum.19650 = s32[] parameter(0)
  %reduce_sum.19651 = s32[] parameter(1)
  ROOT %reduce_sum.19652 = s32[] add(%reduce_sum.19650, %reduce_sum.19651)
}

%region_763.19710 (reduce_and.19707: pred[], reduce_and.19708: pred[]) -> pred[] {
  %reduce_and.19707 = pred[] parameter(0)
  %reduce_and.19708 = pred[] parameter(1)
  ROOT %reduce_and.19709 = pred[] and(%reduce_and.19707, %reduce_and.19708)
}

%region_764.19722 (reduce_sum.19719: bf16[], reduce_sum.19720: bf16[]) -> bf16[] {
  %reduce_sum.19719 = bf16[] parameter(0)
  %reduce_sum.19720 = bf16[] parameter(1)
  ROOT %reduce_sum.19721 = bf16[] add(%reduce_sum.19719, %reduce_sum.19720)
}

%region_765.19739 (reduce_sum.19736: f32[], reduce_sum.19737: f32[]) -> f32[] {
  %reduce_sum.19736 = f32[] parameter(0)
  %reduce_sum.19737 = f32[] parameter(1)
  ROOT %reduce_sum.19738 = f32[] add(%reduce_sum.19736, %reduce_sum.19737)
}

%region_766.19749.clone (scatter-add.148: bf16[], scatter-add.149: bf16[]) -> bf16[] {
  %scatter-add.148 = bf16[] parameter(0)
  %scatter-add.149 = bf16[] parameter(1)
  ROOT %add.987 = bf16[] add(%scatter-add.148, %scatter-add.149)
}

%region_767.19765 (reduce_sum.19762: f32[], reduce_sum.19763: f32[]) -> f32[] {
  %reduce_sum.19762 = f32[] parameter(0)
  %reduce_sum.19763 = f32[] parameter(1)
  ROOT %reduce_sum.19764 = f32[] add(%reduce_sum.19762, %reduce_sum.19763)
}

%region_768.19844 (reduce_sum.19841: f32[], reduce_sum.19842: f32[]) -> f32[] {
  %reduce_sum.19841 = f32[] parameter(0)
  %reduce_sum.19842 = f32[] parameter(1)
  ROOT %reduce_sum.19843 = f32[] add(%reduce_sum.19841, %reduce_sum.19842)
}

%region_769.19886 (reduce_sum.19883: f32[], reduce_sum.19884: f32[]) -> f32[] {
  %reduce_sum.19883 = f32[] parameter(0)
  %reduce_sum.19884 = f32[] parameter(1)
  ROOT %reduce_sum.19885 = f32[] add(%reduce_sum.19883, %reduce_sum.19884)
}

%region_770.19982 (reduce_sum.19979: s32[], reduce_sum.19980: s32[]) -> s32[] {
  %reduce_sum.19979 = s32[] parameter(0)
  %reduce_sum.19980 = s32[] parameter(1)
  ROOT %reduce_sum.19981 = s32[] add(%reduce_sum.19979, %reduce_sum.19980)
}

%region_771.19991 (reduce_sum.19988: s32[], reduce_sum.19989: s32[]) -> s32[] {
  %reduce_sum.19988 = s32[] parameter(0)
  %reduce_sum.19989 = s32[] parameter(1)
  ROOT %reduce_sum.19990 = s32[] add(%reduce_sum.19988, %reduce_sum.19989)
}

%region_772.19997 (reduce_max.19994: s32[], reduce_max.19995: s32[]) -> s32[] {
  %reduce_max.19994 = s32[] parameter(0)
  %reduce_max.19995 = s32[] parameter(1)
  ROOT %reduce_max.19996 = s32[] maximum(%reduce_max.19994, %reduce_max.19995)
}

%region_773.20012 (reduce_sum.20009: f32[], reduce_sum.20010: f32[]) -> f32[] {
  %reduce_sum.20009 = f32[] parameter(0)
  %reduce_sum.20010 = f32[] parameter(1)
  ROOT %reduce_sum.20011 = f32[] add(%reduce_sum.20009, %reduce_sum.20010)
}

%compare_greater_than.53.20033.clone (p.0.lhs.170: bf16[], p.0.rhs.170: bf16[], p.1.lhs.170: s32[], p.1.rhs.170: s32[]) -> pred[] {
  %p.1.lhs.170 = s32[] parameter(2)
  %p.1.rhs.170 = s32[] parameter(3)
  %p.0.lhs.170 = bf16[] parameter(0)
  %p.0.rhs.170 = bf16[] parameter(1)
  ROOT %compare.276 = pred[] compare(%p.0.lhs.170, %p.0.rhs.170), direction=GT, type=TOTALORDER
}

%compare-value-and-index.53 (p.0.lhs.171: bf16[], p.0.rhs.171: bf16[], p.1.lhs.171: s32[], p.1.rhs.171: s32[]) -> pred[] {
  %p.0.lhs.171 = bf16[] parameter(0)
  %p.0.rhs.171 = bf16[] parameter(1)
  %compare.278 = pred[] compare(%p.0.lhs.171, %p.0.rhs.171), direction=EQ, type=TOTALORDER
  %p.1.lhs.171 = s32[] parameter(2)
  %p.1.rhs.171 = s32[] parameter(3)
  %compare.279 = pred[] compare(%p.1.lhs.171, %p.1.rhs.171), direction=LT
  %compare.277 = pred[] compare(%p.0.lhs.171, %p.0.rhs.171), direction=GT
  ROOT %select.120 = pred[] select(%compare.278, %compare.279, %compare.277)
}

%region_774.20069.clone (scatter.107: u32[], scatter.108: u32[]) -> u32[] {
  %scatter.107 = u32[] parameter(0)
  ROOT %scatter.108 = u32[] parameter(1)
}

%region_775.20078 (reduce_max.20075: f32[], reduce_max.20076: f32[]) -> f32[] {
  %reduce_max.20075 = f32[] parameter(0)
  %reduce_max.20076 = f32[] parameter(1)
  ROOT %reduce_max.20077 = f32[] maximum(%reduce_max.20075, %reduce_max.20076)
}

%region_776.20087 (reduce_sum.20084: f32[], reduce_sum.20085: f32[]) -> f32[] {
  %reduce_sum.20084 = f32[] parameter(0)
  %reduce_sum.20085 = f32[] parameter(1)
  ROOT %reduce_sum.20086 = f32[] add(%reduce_sum.20084, %reduce_sum.20085)
}

%region_777.20096.clone (scatter-add.150: bf16[], scatter-add.151: bf16[]) -> bf16[] {
  %scatter-add.150 = bf16[] parameter(0)
  %scatter-add.151 = bf16[] parameter(1)
  ROOT %add.988 = bf16[] add(%scatter-add.150, %scatter-add.151)
}

%region_778.20108 (reduce_window_sum.20105: s32[], reduce_window_sum.20106: s32[]) -> s32[] {
  %reduce_window_sum.20105 = s32[] parameter(0)
  %reduce_window_sum.20106 = s32[] parameter(1)
  ROOT %reduce_window_sum.20107 = s32[] add(%reduce_window_sum.20105, %reduce_window_sum.20106)
}

%region_779.20117 (reduce_sum.20114: s32[], reduce_sum.20115: s32[]) -> s32[] {
  %reduce_sum.20114 = s32[] parameter(0)
  %reduce_sum.20115 = s32[] parameter(1)
  ROOT %reduce_sum.20116 = s32[] add(%reduce_sum.20114, %reduce_sum.20115)
}

%region_780.20127 (reduce_sum.20124: s32[], reduce_sum.20125: s32[]) -> s32[] {
  %reduce_sum.20124 = s32[] parameter(0)
  %reduce_sum.20125 = s32[] parameter(1)
  ROOT %reduce_sum.20126 = s32[] add(%reduce_sum.20124, %reduce_sum.20125)
}

%region_781.20184 (reduce_and.20181: pred[], reduce_and.20182: pred[]) -> pred[] {
  %reduce_and.20181 = pred[] parameter(0)
  %reduce_and.20182 = pred[] parameter(1)
  ROOT %reduce_and.20183 = pred[] and(%reduce_and.20181, %reduce_and.20182)
}

%region_782.20196 (reduce_sum.20193: bf16[], reduce_sum.20194: bf16[]) -> bf16[] {
  %reduce_sum.20193 = bf16[] parameter(0)
  %reduce_sum.20194 = bf16[] parameter(1)
  ROOT %reduce_sum.20195 = bf16[] add(%reduce_sum.20193, %reduce_sum.20194)
}

%region_783.20213 (reduce_sum.130: f32[], reduce_sum.20211: f32[]) -> f32[] {
  %reduce_sum.130 = f32[] parameter(0)
  %reduce_sum.20211 = f32[] parameter(1)
  ROOT %reduce_sum.20212 = f32[] add(%reduce_sum.130, %reduce_sum.20211)
}

%region_784.20223.clone (scatter-add.152: bf16[], scatter-add.153: bf16[]) -> bf16[] {
  %scatter-add.152 = bf16[] parameter(0)
  %scatter-add.153 = bf16[] parameter(1)
  ROOT %add.989 = bf16[] add(%scatter-add.152, %scatter-add.153)
}

%region_785.20239 (reduce_sum.20236: f32[], reduce_sum.20237: f32[]) -> f32[] {
  %reduce_sum.20236 = f32[] parameter(0)
  %reduce_sum.20237 = f32[] parameter(1)
  ROOT %reduce_sum.131 = f32[] add(%reduce_sum.20236, %reduce_sum.20237)
}

%region_786.20318 (reduce_sum.20315: f32[], reduce_sum.20316: f32[]) -> f32[] {
  %reduce_sum.20315 = f32[] parameter(0)
  %reduce_sum.20316 = f32[] parameter(1)
  ROOT %reduce_sum.20317 = f32[] add(%reduce_sum.20315, %reduce_sum.20316)
}

%region_787.20360 (reduce_sum.20357: f32[], reduce_sum.20358: f32[]) -> f32[] {
  %reduce_sum.20357 = f32[] parameter(0)
  %reduce_sum.20358 = f32[] parameter(1)
  ROOT %reduce_sum.132 = f32[] add(%reduce_sum.20357, %reduce_sum.20358)
}

%region_788.20456 (reduce_sum.20453: s32[], reduce_sum.20454: s32[]) -> s32[] {
  %reduce_sum.20453 = s32[] parameter(0)
  %reduce_sum.20454 = s32[] parameter(1)
  ROOT %reduce_sum.20455 = s32[] add(%reduce_sum.20453, %reduce_sum.20454)
}

%region_789.20465 (reduce_sum.20462: s32[], reduce_sum.20463: s32[]) -> s32[] {
  %reduce_sum.20462 = s32[] parameter(0)
  %reduce_sum.20463 = s32[] parameter(1)
  ROOT %reduce_sum.20464 = s32[] add(%reduce_sum.20462, %reduce_sum.20463)
}

%region_790.20471 (reduce_max.20468: s32[], reduce_max.20469: s32[]) -> s32[] {
  %reduce_max.20468 = s32[] parameter(0)
  %reduce_max.20469 = s32[] parameter(1)
  ROOT %reduce_max.20470 = s32[] maximum(%reduce_max.20468, %reduce_max.20469)
}

%region_791.20486 (reduce_sum.20483: f32[], reduce_sum.20484: f32[]) -> f32[] {
  %reduce_sum.20483 = f32[] parameter(0)
  %reduce_sum.20484 = f32[] parameter(1)
  ROOT %reduce_sum.20485 = f32[] add(%reduce_sum.20483, %reduce_sum.20484)
}

%compare_greater_than.54.20507.clone (p.0.lhs.172: bf16[], p.0.rhs.172: bf16[], p.1.lhs.172: s32[], p.1.rhs.172: s32[]) -> pred[] {
  %p.1.lhs.172 = s32[] parameter(2)
  %p.1.rhs.172 = s32[] parameter(3)
  %p.0.lhs.172 = bf16[] parameter(0)
  %p.0.rhs.172 = bf16[] parameter(1)
  ROOT %compare.280 = pred[] compare(%p.0.lhs.172, %p.0.rhs.172), direction=GT, type=TOTALORDER
}

%compare-value-and-index.54 (p.0.lhs.173: bf16[], p.0.rhs.173: bf16[], p.1.lhs.173: s32[], p.1.rhs.173: s32[]) -> pred[] {
  %p.0.lhs.173 = bf16[] parameter(0)
  %p.0.rhs.173 = bf16[] parameter(1)
  %compare.282 = pred[] compare(%p.0.lhs.173, %p.0.rhs.173), direction=EQ, type=TOTALORDER
  %p.1.lhs.173 = s32[] parameter(2)
  %p.1.rhs.173 = s32[] parameter(3)
  %compare.283 = pred[] compare(%p.1.lhs.173, %p.1.rhs.173), direction=LT
  %compare.281 = pred[] compare(%p.0.lhs.173, %p.0.rhs.173), direction=GT
  ROOT %select.121 = pred[] select(%compare.282, %compare.283, %compare.281)
}

%region_792.20543.clone (scatter.109: u32[], scatter.110: u32[]) -> u32[] {
  %scatter.109 = u32[] parameter(0)
  ROOT %scatter.110 = u32[] parameter(1)
}

%region_793.20552 (reduce_max.20549: f32[], reduce_max.20550: f32[]) -> f32[] {
  %reduce_max.20549 = f32[] parameter(0)
  %reduce_max.20550 = f32[] parameter(1)
  ROOT %reduce_max.20551 = f32[] maximum(%reduce_max.20549, %reduce_max.20550)
}

%region_794.20561 (reduce_sum.20558: f32[], reduce_sum.20559: f32[]) -> f32[] {
  %reduce_sum.20558 = f32[] parameter(0)
  %reduce_sum.20559 = f32[] parameter(1)
  ROOT %reduce_sum.20560 = f32[] add(%reduce_sum.20558, %reduce_sum.20559)
}

%region_795.20570.clone (scatter-add.154: bf16[], scatter-add.155: bf16[]) -> bf16[] {
  %scatter-add.154 = bf16[] parameter(0)
  %scatter-add.155 = bf16[] parameter(1)
  ROOT %add.991 = bf16[] add(%scatter-add.154, %scatter-add.155)
}

%region_796.20582 (reduce_window_sum.20579: s32[], reduce_window_sum.20580: s32[]) -> s32[] {
  %reduce_window_sum.20579 = s32[] parameter(0)
  %reduce_window_sum.20580 = s32[] parameter(1)
  ROOT %reduce_window_sum.20581 = s32[] add(%reduce_window_sum.20579, %reduce_window_sum.20580)
}

%region_797.20591 (reduce_sum.20588: s32[], reduce_sum.20589: s32[]) -> s32[] {
  %reduce_sum.20588 = s32[] parameter(0)
  %reduce_sum.20589 = s32[] parameter(1)
  ROOT %reduce_sum.20590 = s32[] add(%reduce_sum.20588, %reduce_sum.20589)
}

%region_798.20601 (reduce_sum.20598: s32[], reduce_sum.20599: s32[]) -> s32[] {
  %reduce_sum.20598 = s32[] parameter(0)
  %reduce_sum.20599 = s32[] parameter(1)
  ROOT %reduce_sum.20600 = s32[] add(%reduce_sum.20598, %reduce_sum.20599)
}

%region_799.20658 (reduce_and.20655: pred[], reduce_and.20656: pred[]) -> pred[] {
  %reduce_and.20655 = pred[] parameter(0)
  %reduce_and.20656 = pred[] parameter(1)
  ROOT %reduce_and.20657 = pred[] and(%reduce_and.20655, %reduce_and.20656)
}

%region_800.20670 (reduce_sum.20667: bf16[], reduce_sum.20668: bf16[]) -> bf16[] {
  %reduce_sum.20667 = bf16[] parameter(0)
  %reduce_sum.20668 = bf16[] parameter(1)
  ROOT %reduce_sum.20669 = bf16[] add(%reduce_sum.20667, %reduce_sum.20668)
}

%region_801.20687 (reduce_sum.133: f32[], reduce_sum.134: f32[]) -> f32[] {
  %reduce_sum.133 = f32[] parameter(0)
  %reduce_sum.134 = f32[] parameter(1)
  ROOT %reduce_sum.135 = f32[] add(%reduce_sum.133, %reduce_sum.134)
}

%region_802.20697.clone (scatter-add.156: bf16[], scatter-add.157: bf16[]) -> bf16[] {
  %scatter-add.156 = bf16[] parameter(0)
  %scatter-add.157 = bf16[] parameter(1)
  ROOT %add.992 = bf16[] add(%scatter-add.156, %scatter-add.157)
}

%region_803.20713 (reduce_sum.20710: f32[], reduce_sum.20711: f32[]) -> f32[] {
  %reduce_sum.20710 = f32[] parameter(0)
  %reduce_sum.20711 = f32[] parameter(1)
  ROOT %reduce_sum.20712 = f32[] add(%reduce_sum.20710, %reduce_sum.20711)
}

%region_804.20792 (reduce_sum.20789: f32[], reduce_sum.20790: f32[]) -> f32[] {
  %reduce_sum.20789 = f32[] parameter(0)
  %reduce_sum.20790 = f32[] parameter(1)
  ROOT %reduce_sum.20791 = f32[] add(%reduce_sum.20789, %reduce_sum.20790)
}

%region_805.20834 (reduce_sum.20831: f32[], reduce_sum.136: f32[]) -> f32[] {
  %reduce_sum.20831 = f32[] parameter(0)
  %reduce_sum.136 = f32[] parameter(1)
  ROOT %reduce_sum.137 = f32[] add(%reduce_sum.20831, %reduce_sum.136)
}

%region_806.20930 (reduce_sum.138: s32[], reduce_sum.139: s32[]) -> s32[] {
  %reduce_sum.138 = s32[] parameter(0)
  %reduce_sum.139 = s32[] parameter(1)
  ROOT %reduce_sum.20929 = s32[] add(%reduce_sum.138, %reduce_sum.139)
}

%region_807.20939 (reduce_sum.140: s32[], reduce_sum.141: s32[]) -> s32[] {
  %reduce_sum.140 = s32[] parameter(0)
  %reduce_sum.141 = s32[] parameter(1)
  ROOT %reduce_sum.142 = s32[] add(%reduce_sum.140, %reduce_sum.141)
}

%region_808.20945 (reduce_max.20942: s32[], reduce_max.20943: s32[]) -> s32[] {
  %reduce_max.20942 = s32[] parameter(0)
  %reduce_max.20943 = s32[] parameter(1)
  ROOT %reduce_max.20944 = s32[] maximum(%reduce_max.20942, %reduce_max.20943)
}

%region_809.20960 (reduce_sum.143: f32[], reduce_sum.20958: f32[]) -> f32[] {
  %reduce_sum.143 = f32[] parameter(0)
  %reduce_sum.20958 = f32[] parameter(1)
  ROOT %reduce_sum.144 = f32[] add(%reduce_sum.143, %reduce_sum.20958)
}

%compare_greater_than.55.20981.clone (p.0.lhs.174: bf16[], p.0.rhs.174: bf16[], p.1.lhs.174: s32[], p.1.rhs.174: s32[]) -> pred[] {
  %p.1.lhs.174 = s32[] parameter(2)
  %p.1.rhs.174 = s32[] parameter(3)
  %p.0.lhs.174 = bf16[] parameter(0)
  %p.0.rhs.174 = bf16[] parameter(1)
  ROOT %compare.284 = pred[] compare(%p.0.lhs.174, %p.0.rhs.174), direction=GT, type=TOTALORDER
}

%compare-value-and-index.55 (p.0.lhs.175: bf16[], p.0.rhs.175: bf16[], p.1.lhs.175: s32[], p.1.rhs.175: s32[]) -> pred[] {
  %p.0.lhs.175 = bf16[] parameter(0)
  %p.0.rhs.175 = bf16[] parameter(1)
  %compare.286 = pred[] compare(%p.0.lhs.175, %p.0.rhs.175), direction=EQ, type=TOTALORDER
  %p.1.lhs.175 = s32[] parameter(2)
  %p.1.rhs.175 = s32[] parameter(3)
  %compare.287 = pred[] compare(%p.1.lhs.175, %p.1.rhs.175), direction=LT
  %compare.285 = pred[] compare(%p.0.lhs.175, %p.0.rhs.175), direction=GT
  ROOT %select.122 = pred[] select(%compare.286, %compare.287, %compare.285)
}

%region_810.21017.clone (scatter.111: u32[], scatter.112: u32[]) -> u32[] {
  %scatter.111 = u32[] parameter(0)
  ROOT %scatter.112 = u32[] parameter(1)
}

%region_811.21026 (reduce_max.21023: f32[], reduce_max.21024: f32[]) -> f32[] {
  %reduce_max.21023 = f32[] parameter(0)
  %reduce_max.21024 = f32[] parameter(1)
  ROOT %reduce_max.21025 = f32[] maximum(%reduce_max.21023, %reduce_max.21024)
}

%region_812.21035 (reduce_sum.21032: f32[], reduce_sum.21033: f32[]) -> f32[] {
  %reduce_sum.21032 = f32[] parameter(0)
  %reduce_sum.21033 = f32[] parameter(1)
  ROOT %reduce_sum.21034 = f32[] add(%reduce_sum.21032, %reduce_sum.21033)
}

%region_813.21044.clone (scatter-add.158: bf16[], scatter-add.159: bf16[]) -> bf16[] {
  %scatter-add.158 = bf16[] parameter(0)
  %scatter-add.159 = bf16[] parameter(1)
  ROOT %add.993 = bf16[] add(%scatter-add.158, %scatter-add.159)
}

%region_814.21056 (reduce_window_sum.21053: s32[], reduce_window_sum.21054: s32[]) -> s32[] {
  %reduce_window_sum.21053 = s32[] parameter(0)
  %reduce_window_sum.21054 = s32[] parameter(1)
  ROOT %reduce_window_sum.21055 = s32[] add(%reduce_window_sum.21053, %reduce_window_sum.21054)
}

%region_815.21065 (reduce_sum.21062: s32[], reduce_sum.21063: s32[]) -> s32[] {
  %reduce_sum.21062 = s32[] parameter(0)
  %reduce_sum.21063 = s32[] parameter(1)
  ROOT %reduce_sum.21064 = s32[] add(%reduce_sum.21062, %reduce_sum.21063)
}

%region_816.21075 (reduce_sum.21072: s32[], reduce_sum.21073: s32[]) -> s32[] {
  %reduce_sum.21072 = s32[] parameter(0)
  %reduce_sum.21073 = s32[] parameter(1)
  ROOT %reduce_sum.21074 = s32[] add(%reduce_sum.21072, %reduce_sum.21073)
}

%region_817.21132 (reduce_and.21129: pred[], reduce_and.21130: pred[]) -> pred[] {
  %reduce_and.21129 = pred[] parameter(0)
  %reduce_and.21130 = pred[] parameter(1)
  ROOT %reduce_and.21131 = pred[] and(%reduce_and.21129, %reduce_and.21130)
}

%region_818.21144 (reduce_sum.21141: bf16[], reduce_sum.21142: bf16[]) -> bf16[] {
  %reduce_sum.21141 = bf16[] parameter(0)
  %reduce_sum.21142 = bf16[] parameter(1)
  ROOT %reduce_sum.21143 = bf16[] add(%reduce_sum.21141, %reduce_sum.21142)
}

%region_819.21161 (reduce_sum.21158: f32[], reduce_sum.21159: f32[]) -> f32[] {
  %reduce_sum.21158 = f32[] parameter(0)
  %reduce_sum.21159 = f32[] parameter(1)
  ROOT %reduce_sum.21160 = f32[] add(%reduce_sum.21158, %reduce_sum.21159)
}

%region_820.21171.clone (scatter-add.160: bf16[], scatter-add.161: bf16[]) -> bf16[] {
  %scatter-add.160 = bf16[] parameter(0)
  %scatter-add.161 = bf16[] parameter(1)
  ROOT %add.994 = bf16[] add(%scatter-add.160, %scatter-add.161)
}

%region_821.21187 (reduce_sum.21184: f32[], reduce_sum.21185: f32[]) -> f32[] {
  %reduce_sum.21184 = f32[] parameter(0)
  %reduce_sum.21185 = f32[] parameter(1)
  ROOT %reduce_sum.21186 = f32[] add(%reduce_sum.21184, %reduce_sum.21185)
}

%region_822.21266 (reduce_sum.145: f32[], reduce_sum.21264: f32[]) -> f32[] {
  %reduce_sum.145 = f32[] parameter(0)
  %reduce_sum.21264 = f32[] parameter(1)
  ROOT %reduce_sum.146 = f32[] add(%reduce_sum.145, %reduce_sum.21264)
}

%region_823.21308 (reduce_sum.21305: f32[], reduce_sum.21306: f32[]) -> f32[] {
  %reduce_sum.21305 = f32[] parameter(0)
  %reduce_sum.21306 = f32[] parameter(1)
  ROOT %reduce_sum.21307 = f32[] add(%reduce_sum.21305, %reduce_sum.21306)
}

%region_824.21404 (reduce_sum.21401: s32[], reduce_sum.147: s32[]) -> s32[] {
  %reduce_sum.21401 = s32[] parameter(0)
  %reduce_sum.147 = s32[] parameter(1)
  ROOT %reduce_sum.148 = s32[] add(%reduce_sum.21401, %reduce_sum.147)
}

%region_825.21413 (reduce_sum.149: s32[], reduce_sum.150: s32[]) -> s32[] {
  %reduce_sum.149 = s32[] parameter(0)
  %reduce_sum.150 = s32[] parameter(1)
  ROOT %reduce_sum.21412 = s32[] add(%reduce_sum.149, %reduce_sum.150)
}

%region_826.21419 (reduce_max.21416: s32[], reduce_max.21417: s32[]) -> s32[] {
  %reduce_max.21416 = s32[] parameter(0)
  %reduce_max.21417 = s32[] parameter(1)
  ROOT %reduce_max.21418 = s32[] maximum(%reduce_max.21416, %reduce_max.21417)
}

%region_827.21434 (reduce_sum.21431: f32[], reduce_sum.21432: f32[]) -> f32[] {
  %reduce_sum.21431 = f32[] parameter(0)
  %reduce_sum.21432 = f32[] parameter(1)
  ROOT %reduce_sum.21433 = f32[] add(%reduce_sum.21431, %reduce_sum.21432)
}

%compare_greater_than.56.21455.clone (p.0.lhs.176: bf16[], p.0.rhs.176: bf16[], p.1.lhs.176: s32[], p.1.rhs.176: s32[]) -> pred[] {
  %p.1.lhs.176 = s32[] parameter(2)
  %p.1.rhs.176 = s32[] parameter(3)
  %p.0.lhs.176 = bf16[] parameter(0)
  %p.0.rhs.176 = bf16[] parameter(1)
  ROOT %compare.288 = pred[] compare(%p.0.lhs.176, %p.0.rhs.176), direction=GT, type=TOTALORDER
}

%compare-value-and-index.56 (p.0.lhs.177: bf16[], p.0.rhs.177: bf16[], p.1.lhs.177: s32[], p.1.rhs.177: s32[]) -> pred[] {
  %p.0.lhs.177 = bf16[] parameter(0)
  %p.0.rhs.177 = bf16[] parameter(1)
  %compare.290 = pred[] compare(%p.0.lhs.177, %p.0.rhs.177), direction=EQ, type=TOTALORDER
  %p.1.lhs.177 = s32[] parameter(2)
  %p.1.rhs.177 = s32[] parameter(3)
  %compare.291 = pred[] compare(%p.1.lhs.177, %p.1.rhs.177), direction=LT
  %compare.289 = pred[] compare(%p.0.lhs.177, %p.0.rhs.177), direction=GT
  ROOT %select.123 = pred[] select(%compare.290, %compare.291, %compare.289)
}

%region_828.21491.clone (scatter.113: u32[], scatter.114: u32[]) -> u32[] {
  %scatter.113 = u32[] parameter(0)
  ROOT %scatter.114 = u32[] parameter(1)
}

%region_829.21500 (reduce_max.21497: f32[], reduce_max.21498: f32[]) -> f32[] {
  %reduce_max.21497 = f32[] parameter(0)
  %reduce_max.21498 = f32[] parameter(1)
  ROOT %reduce_max.21499 = f32[] maximum(%reduce_max.21497, %reduce_max.21498)
}

%region_830.21509 (reduce_sum.21506: f32[], reduce_sum.151: f32[]) -> f32[] {
  %reduce_sum.21506 = f32[] parameter(0)
  %reduce_sum.151 = f32[] parameter(1)
  ROOT %reduce_sum.21508 = f32[] add(%reduce_sum.21506, %reduce_sum.151)
}

%region_831.21518.clone (scatter-add.162: bf16[], scatter-add.163: bf16[]) -> bf16[] {
  %scatter-add.162 = bf16[] parameter(0)
  %scatter-add.163 = bf16[] parameter(1)
  ROOT %add.995 = bf16[] add(%scatter-add.162, %scatter-add.163)
}

%region_832.21530 (reduce_window_sum.21527: s32[], reduce_window_sum.21528: s32[]) -> s32[] {
  %reduce_window_sum.21527 = s32[] parameter(0)
  %reduce_window_sum.21528 = s32[] parameter(1)
  ROOT %reduce_window_sum.21529 = s32[] add(%reduce_window_sum.21527, %reduce_window_sum.21528)
}

%region_833.21539 (reduce_sum.152: s32[], reduce_sum.21537: s32[]) -> s32[] {
  %reduce_sum.152 = s32[] parameter(0)
  %reduce_sum.21537 = s32[] parameter(1)
  ROOT %reduce_sum.21538 = s32[] add(%reduce_sum.152, %reduce_sum.21537)
}

%region_834.21549 (reduce_sum.21546: s32[], reduce_sum.21547: s32[]) -> s32[] {
  %reduce_sum.21546 = s32[] parameter(0)
  %reduce_sum.21547 = s32[] parameter(1)
  ROOT %reduce_sum.21548 = s32[] add(%reduce_sum.21546, %reduce_sum.21547)
}

%region_835.21606 (reduce_and.21603: pred[], reduce_and.21604: pred[]) -> pred[] {
  %reduce_and.21603 = pred[] parameter(0)
  %reduce_and.21604 = pred[] parameter(1)
  ROOT %reduce_and.21605 = pred[] and(%reduce_and.21603, %reduce_and.21604)
}

%region_836.21618 (reduce_sum.21615: bf16[], reduce_sum.21616: bf16[]) -> bf16[] {
  %reduce_sum.21615 = bf16[] parameter(0)
  %reduce_sum.21616 = bf16[] parameter(1)
  ROOT %reduce_sum.21617 = bf16[] add(%reduce_sum.21615, %reduce_sum.21616)
}

%region_837.21635 (reduce_sum.21632: f32[], reduce_sum.21633: f32[]) -> f32[] {
  %reduce_sum.21632 = f32[] parameter(0)
  %reduce_sum.21633 = f32[] parameter(1)
  ROOT %reduce_sum.21634 = f32[] add(%reduce_sum.21632, %reduce_sum.21633)
}

%region_838.21645.clone (scatter-add.164: bf16[], scatter-add.165: bf16[]) -> bf16[] {
  %scatter-add.164 = bf16[] parameter(0)
  %scatter-add.165 = bf16[] parameter(1)
  ROOT %add.996 = bf16[] add(%scatter-add.164, %scatter-add.165)
}

%region_839.21661 (reduce_sum.21658: f32[], reduce_sum.21659: f32[]) -> f32[] {
  %reduce_sum.21658 = f32[] parameter(0)
  %reduce_sum.21659 = f32[] parameter(1)
  ROOT %reduce_sum.21660 = f32[] add(%reduce_sum.21658, %reduce_sum.21659)
}

%region_840.21740 (reduce_sum.21737: f32[], reduce_sum.21738: f32[]) -> f32[] {
  %reduce_sum.21737 = f32[] parameter(0)
  %reduce_sum.21738 = f32[] parameter(1)
  ROOT %reduce_sum.21739 = f32[] add(%reduce_sum.21737, %reduce_sum.21738)
}

%region_841.21782 (reduce_sum.21779: f32[], reduce_sum.21780: f32[]) -> f32[] {
  %reduce_sum.21779 = f32[] parameter(0)
  %reduce_sum.21780 = f32[] parameter(1)
  ROOT %reduce_sum.21781 = f32[] add(%reduce_sum.21779, %reduce_sum.21780)
}

%region_842.21878 (reduce_sum.21875: s32[], reduce_sum.21876: s32[]) -> s32[] {
  %reduce_sum.21875 = s32[] parameter(0)
  %reduce_sum.21876 = s32[] parameter(1)
  ROOT %reduce_sum.21877 = s32[] add(%reduce_sum.21875, %reduce_sum.21876)
}

%region_843.21887 (reduce_sum.21884: s32[], reduce_sum.21885: s32[]) -> s32[] {
  %reduce_sum.21884 = s32[] parameter(0)
  %reduce_sum.21885 = s32[] parameter(1)
  ROOT %reduce_sum.21886 = s32[] add(%reduce_sum.21884, %reduce_sum.21885)
}

%region_844.21893 (reduce_max.21890: s32[], reduce_max.21891: s32[]) -> s32[] {
  %reduce_max.21890 = s32[] parameter(0)
  %reduce_max.21891 = s32[] parameter(1)
  ROOT %reduce_max.21892 = s32[] maximum(%reduce_max.21890, %reduce_max.21891)
}

%region_845.21908 (reduce_sum.153: f32[], reduce_sum.154: f32[]) -> f32[] {
  %reduce_sum.153 = f32[] parameter(0)
  %reduce_sum.154 = f32[] parameter(1)
  ROOT %reduce_sum.155 = f32[] add(%reduce_sum.153, %reduce_sum.154)
}

%compare_greater_than.57.21929.clone (p.0.lhs.178: bf16[], p.0.rhs.178: bf16[], p.1.lhs.178: s32[], p.1.rhs.178: s32[]) -> pred[] {
  %p.1.lhs.178 = s32[] parameter(2)
  %p.1.rhs.178 = s32[] parameter(3)
  %p.0.lhs.178 = bf16[] parameter(0)
  %p.0.rhs.178 = bf16[] parameter(1)
  ROOT %compare.292 = pred[] compare(%p.0.lhs.178, %p.0.rhs.178), direction=GT, type=TOTALORDER
}

%compare-value-and-index.57 (p.0.lhs.179: bf16[], p.0.rhs.179: bf16[], p.1.lhs.179: s32[], p.1.rhs.179: s32[]) -> pred[] {
  %p.0.lhs.179 = bf16[] parameter(0)
  %p.0.rhs.179 = bf16[] parameter(1)
  %compare.294 = pred[] compare(%p.0.lhs.179, %p.0.rhs.179), direction=EQ, type=TOTALORDER
  %p.1.lhs.179 = s32[] parameter(2)
  %p.1.rhs.179 = s32[] parameter(3)
  %compare.295 = pred[] compare(%p.1.lhs.179, %p.1.rhs.179), direction=LT
  %compare.293 = pred[] compare(%p.0.lhs.179, %p.0.rhs.179), direction=GT
  ROOT %select.124 = pred[] select(%compare.294, %compare.295, %compare.293)
}

%region_846.21965.clone (scatter.115: u32[], scatter.116: u32[]) -> u32[] {
  %scatter.115 = u32[] parameter(0)
  ROOT %scatter.116 = u32[] parameter(1)
}

%region_847.21974 (reduce_max.21971: f32[], reduce_max.21972: f32[]) -> f32[] {
  %reduce_max.21971 = f32[] parameter(0)
  %reduce_max.21972 = f32[] parameter(1)
  ROOT %reduce_max.21973 = f32[] maximum(%reduce_max.21971, %reduce_max.21972)
}

%region_848.21983 (reduce_sum.156: f32[], reduce_sum.157: f32[]) -> f32[] {
  %reduce_sum.156 = f32[] parameter(0)
  %reduce_sum.157 = f32[] parameter(1)
  ROOT %reduce_sum.21982 = f32[] add(%reduce_sum.156, %reduce_sum.157)
}

%region_849.21992.clone (scatter-add.166: bf16[], scatter-add.167: bf16[]) -> bf16[] {
  %scatter-add.166 = bf16[] parameter(0)
  %scatter-add.167 = bf16[] parameter(1)
  ROOT %add.998 = bf16[] add(%scatter-add.166, %scatter-add.167)
}

%region_850.22004 (reduce_window_sum.22001: s32[], reduce_window_sum.22002: s32[]) -> s32[] {
  %reduce_window_sum.22001 = s32[] parameter(0)
  %reduce_window_sum.22002 = s32[] parameter(1)
  ROOT %reduce_window_sum.22003 = s32[] add(%reduce_window_sum.22001, %reduce_window_sum.22002)
}

%region_851.22013 (reduce_sum.22010: s32[], reduce_sum.22011: s32[]) -> s32[] {
  %reduce_sum.22010 = s32[] parameter(0)
  %reduce_sum.22011 = s32[] parameter(1)
  ROOT %reduce_sum.22012 = s32[] add(%reduce_sum.22010, %reduce_sum.22011)
}

%region_852.22023 (reduce_sum.22020: s32[], reduce_sum.22021: s32[]) -> s32[] {
  %reduce_sum.22020 = s32[] parameter(0)
  %reduce_sum.22021 = s32[] parameter(1)
  ROOT %reduce_sum.22022 = s32[] add(%reduce_sum.22020, %reduce_sum.22021)
}

%region_853.22080 (reduce_and.22077: pred[], reduce_and.22078: pred[]) -> pred[] {
  %reduce_and.22077 = pred[] parameter(0)
  %reduce_and.22078 = pred[] parameter(1)
  ROOT %reduce_and.22079 = pred[] and(%reduce_and.22077, %reduce_and.22078)
}

%region_854.22092 (reduce_sum.22089: bf16[], reduce_sum.158: bf16[]) -> bf16[] {
  %reduce_sum.22089 = bf16[] parameter(0)
  %reduce_sum.158 = bf16[] parameter(1)
  ROOT %reduce_sum.159 = bf16[] add(%reduce_sum.22089, %reduce_sum.158)
}

%region_855.22109 (reduce_sum.22106: f32[], reduce_sum.22107: f32[]) -> f32[] {
  %reduce_sum.22106 = f32[] parameter(0)
  %reduce_sum.22107 = f32[] parameter(1)
  ROOT %reduce_sum.22108 = f32[] add(%reduce_sum.22106, %reduce_sum.22107)
}

%region_856.22119.clone (scatter-add.168: bf16[], scatter-add.169: bf16[]) -> bf16[] {
  %scatter-add.168 = bf16[] parameter(0)
  %scatter-add.169 = bf16[] parameter(1)
  ROOT %add.999 = bf16[] add(%scatter-add.168, %scatter-add.169)
}

%region_857.22135 (reduce_sum.22132: f32[], reduce_sum.22133: f32[]) -> f32[] {
  %reduce_sum.22132 = f32[] parameter(0)
  %reduce_sum.22133 = f32[] parameter(1)
  ROOT %reduce_sum.22134 = f32[] add(%reduce_sum.22132, %reduce_sum.22133)
}

%region_858.22214 (reduce_sum.22211: f32[], reduce_sum.22212: f32[]) -> f32[] {
  %reduce_sum.22211 = f32[] parameter(0)
  %reduce_sum.22212 = f32[] parameter(1)
  ROOT %reduce_sum.22213 = f32[] add(%reduce_sum.22211, %reduce_sum.22212)
}

%region_859.22256 (reduce_sum.22253: f32[], reduce_sum.22254: f32[]) -> f32[] {
  %reduce_sum.22253 = f32[] parameter(0)
  %reduce_sum.22254 = f32[] parameter(1)
  ROOT %reduce_sum.22255 = f32[] add(%reduce_sum.22253, %reduce_sum.22254)
}

%region_860.22352 (reduce_sum.160: s32[], reduce_sum.22350: s32[]) -> s32[] {
  %reduce_sum.160 = s32[] parameter(0)
  %reduce_sum.22350 = s32[] parameter(1)
  ROOT %reduce_sum.22351 = s32[] add(%reduce_sum.160, %reduce_sum.22350)
}

%region_861.22361 (reduce_sum.22358: s32[], reduce_sum.22359: s32[]) -> s32[] {
  %reduce_sum.22358 = s32[] parameter(0)
  %reduce_sum.22359 = s32[] parameter(1)
  ROOT %reduce_sum.22360 = s32[] add(%reduce_sum.22358, %reduce_sum.22359)
}

%region_862.22367 (reduce_max.22364: s32[], reduce_max.22365: s32[]) -> s32[] {
  %reduce_max.22364 = s32[] parameter(0)
  %reduce_max.22365 = s32[] parameter(1)
  ROOT %reduce_max.22366 = s32[] maximum(%reduce_max.22364, %reduce_max.22365)
}

%region_863.22382 (reduce_sum.22379: f32[], reduce_sum.22380: f32[]) -> f32[] {
  %reduce_sum.22379 = f32[] parameter(0)
  %reduce_sum.22380 = f32[] parameter(1)
  ROOT %reduce_sum.22381 = f32[] add(%reduce_sum.22379, %reduce_sum.22380)
}

%compare_greater_than.58.22403.clone (p.0.lhs.180: bf16[], p.0.rhs.180: bf16[], p.1.lhs.180: s32[], p.1.rhs.180: s32[]) -> pred[] {
  %p.1.lhs.180 = s32[] parameter(2)
  %p.1.rhs.180 = s32[] parameter(3)
  %p.0.lhs.180 = bf16[] parameter(0)
  %p.0.rhs.180 = bf16[] parameter(1)
  ROOT %compare.296 = pred[] compare(%p.0.lhs.180, %p.0.rhs.180), direction=GT, type=TOTALORDER
}

%compare-value-and-index.58 (p.0.lhs.181: bf16[], p.0.rhs.181: bf16[], p.1.lhs.181: s32[], p.1.rhs.181: s32[]) -> pred[] {
  %p.0.lhs.181 = bf16[] parameter(0)
  %p.0.rhs.181 = bf16[] parameter(1)
  %compare.298 = pred[] compare(%p.0.lhs.181, %p.0.rhs.181), direction=EQ, type=TOTALORDER
  %p.1.lhs.181 = s32[] parameter(2)
  %p.1.rhs.181 = s32[] parameter(3)
  %compare.299 = pred[] compare(%p.1.lhs.181, %p.1.rhs.181), direction=LT
  %compare.297 = pred[] compare(%p.0.lhs.181, %p.0.rhs.181), direction=GT
  ROOT %select.125 = pred[] select(%compare.298, %compare.299, %compare.297)
}

%region_864.22439.clone (scatter.117: u32[], scatter.118: u32[]) -> u32[] {
  %scatter.117 = u32[] parameter(0)
  ROOT %scatter.118 = u32[] parameter(1)
}

%region_865.22448 (reduce_max.22445: f32[], reduce_max.22446: f32[]) -> f32[] {
  %reduce_max.22445 = f32[] parameter(0)
  %reduce_max.22446 = f32[] parameter(1)
  ROOT %reduce_max.22447 = f32[] maximum(%reduce_max.22445, %reduce_max.22446)
}

%region_866.22457 (reduce_sum.22454: f32[], reduce_sum.22455: f32[]) -> f32[] {
  %reduce_sum.22454 = f32[] parameter(0)
  %reduce_sum.22455 = f32[] parameter(1)
  ROOT %reduce_sum.22456 = f32[] add(%reduce_sum.22454, %reduce_sum.22455)
}

%region_867.22466.clone (scatter-add.170: bf16[], scatter-add.171: bf16[]) -> bf16[] {
  %scatter-add.170 = bf16[] parameter(0)
  %scatter-add.171 = bf16[] parameter(1)
  ROOT %add.1000 = bf16[] add(%scatter-add.170, %scatter-add.171)
}

%region_868.22478 (reduce_window_sum.22475: s32[], reduce_window_sum.22476: s32[]) -> s32[] {
  %reduce_window_sum.22475 = s32[] parameter(0)
  %reduce_window_sum.22476 = s32[] parameter(1)
  ROOT %reduce_window_sum.22477 = s32[] add(%reduce_window_sum.22475, %reduce_window_sum.22476)
}

%region_869.22487 (reduce_sum.161: s32[], reduce_sum.22485: s32[]) -> s32[] {
  %reduce_sum.161 = s32[] parameter(0)
  %reduce_sum.22485 = s32[] parameter(1)
  ROOT %reduce_sum.162 = s32[] add(%reduce_sum.161, %reduce_sum.22485)
}

%region_870.22497 (reduce_sum.22494: s32[], reduce_sum.22495: s32[]) -> s32[] {
  %reduce_sum.22494 = s32[] parameter(0)
  %reduce_sum.22495 = s32[] parameter(1)
  ROOT %reduce_sum.22496 = s32[] add(%reduce_sum.22494, %reduce_sum.22495)
}

%region_871.22554 (reduce_and.22551: pred[], reduce_and.22552: pred[]) -> pred[] {
  %reduce_and.22551 = pred[] parameter(0)
  %reduce_and.22552 = pred[] parameter(1)
  ROOT %reduce_and.22553 = pred[] and(%reduce_and.22551, %reduce_and.22552)
}

%region_872.22566 (reduce_sum.163: bf16[], reduce_sum.164: bf16[]) -> bf16[] {
  %reduce_sum.163 = bf16[] parameter(0)
  %reduce_sum.164 = bf16[] parameter(1)
  ROOT %reduce_sum.165 = bf16[] add(%reduce_sum.163, %reduce_sum.164)
}

%region_873.22583 (reduce_sum.22580: f32[], reduce_sum.22581: f32[]) -> f32[] {
  %reduce_sum.22580 = f32[] parameter(0)
  %reduce_sum.22581 = f32[] parameter(1)
  ROOT %reduce_sum.22582 = f32[] add(%reduce_sum.22580, %reduce_sum.22581)
}

%region_874.22593.clone (scatter-add.172: bf16[], scatter-add.173: bf16[]) -> bf16[] {
  %scatter-add.172 = bf16[] parameter(0)
  %scatter-add.173 = bf16[] parameter(1)
  ROOT %add.1001 = bf16[] add(%scatter-add.172, %scatter-add.173)
}

%region_875.22609 (reduce_sum.22606: f32[], reduce_sum.22607: f32[]) -> f32[] {
  %reduce_sum.22606 = f32[] parameter(0)
  %reduce_sum.22607 = f32[] parameter(1)
  ROOT %reduce_sum.22608 = f32[] add(%reduce_sum.22606, %reduce_sum.22607)
}

%region_876.22688 (reduce_sum.22685: f32[], reduce_sum.166: f32[]) -> f32[] {
  %reduce_sum.22685 = f32[] parameter(0)
  %reduce_sum.166 = f32[] parameter(1)
  ROOT %reduce_sum.167 = f32[] add(%reduce_sum.22685, %reduce_sum.166)
}

%region_877.22730 (reduce_sum.22727: f32[], reduce_sum.22728: f32[]) -> f32[] {
  %reduce_sum.22727 = f32[] parameter(0)
  %reduce_sum.22728 = f32[] parameter(1)
  ROOT %reduce_sum.22729 = f32[] add(%reduce_sum.22727, %reduce_sum.22728)
}

%region_878.22826 (reduce_sum.22823: s32[], reduce_sum.22824: s32[]) -> s32[] {
  %reduce_sum.22823 = s32[] parameter(0)
  %reduce_sum.22824 = s32[] parameter(1)
  ROOT %reduce_sum.22825 = s32[] add(%reduce_sum.22823, %reduce_sum.22824)
}

%region_879.22835 (reduce_sum.22832: s32[], reduce_sum.22833: s32[]) -> s32[] {
  %reduce_sum.22832 = s32[] parameter(0)
  %reduce_sum.22833 = s32[] parameter(1)
  ROOT %reduce_sum.22834 = s32[] add(%reduce_sum.22832, %reduce_sum.22833)
}

%region_880.22841 (reduce_max.22838: s32[], reduce_max.22839: s32[]) -> s32[] {
  %reduce_max.22838 = s32[] parameter(0)
  %reduce_max.22839 = s32[] parameter(1)
  ROOT %reduce_max.22840 = s32[] maximum(%reduce_max.22838, %reduce_max.22839)
}

%region_881.22856 (reduce_sum.168: f32[], reduce_sum.22854: f32[]) -> f32[] {
  %reduce_sum.168 = f32[] parameter(0)
  %reduce_sum.22854 = f32[] parameter(1)
  ROOT %reduce_sum.169 = f32[] add(%reduce_sum.168, %reduce_sum.22854)
}

%compare_greater_than.59.22877.clone (p.0.lhs.182: bf16[], p.0.rhs.182: bf16[], p.1.lhs.182: s32[], p.1.rhs.182: s32[]) -> pred[] {
  %p.1.lhs.182 = s32[] parameter(2)
  %p.1.rhs.182 = s32[] parameter(3)
  %p.0.lhs.182 = bf16[] parameter(0)
  %p.0.rhs.182 = bf16[] parameter(1)
  ROOT %compare.300 = pred[] compare(%p.0.lhs.182, %p.0.rhs.182), direction=GT, type=TOTALORDER
}

%compare-value-and-index.59 (p.0.lhs.183: bf16[], p.0.rhs.183: bf16[], p.1.lhs.183: s32[], p.1.rhs.183: s32[]) -> pred[] {
  %p.0.lhs.183 = bf16[] parameter(0)
  %p.0.rhs.183 = bf16[] parameter(1)
  %compare.302 = pred[] compare(%p.0.lhs.183, %p.0.rhs.183), direction=EQ, type=TOTALORDER
  %p.1.lhs.183 = s32[] parameter(2)
  %p.1.rhs.183 = s32[] parameter(3)
  %compare.303 = pred[] compare(%p.1.lhs.183, %p.1.rhs.183), direction=LT
  %compare.301 = pred[] compare(%p.0.lhs.183, %p.0.rhs.183), direction=GT
  ROOT %select.126 = pred[] select(%compare.302, %compare.303, %compare.301)
}

%region_882.22913.clone (scatter.119: u32[], scatter.120: u32[]) -> u32[] {
  %scatter.119 = u32[] parameter(0)
  ROOT %scatter.120 = u32[] parameter(1)
}

%region_883.22922 (reduce_max.22919: f32[], reduce_max.22920: f32[]) -> f32[] {
  %reduce_max.22919 = f32[] parameter(0)
  %reduce_max.22920 = f32[] parameter(1)
  ROOT %reduce_max.22921 = f32[] maximum(%reduce_max.22919, %reduce_max.22920)
}

%region_884.22931 (reduce_sum.22928: f32[], reduce_sum.22929: f32[]) -> f32[] {
  %reduce_sum.22928 = f32[] parameter(0)
  %reduce_sum.22929 = f32[] parameter(1)
  ROOT %reduce_sum.22930 = f32[] add(%reduce_sum.22928, %reduce_sum.22929)
}

%region_885.22940.clone (scatter-add.174: bf16[], scatter-add.175: bf16[]) -> bf16[] {
  %scatter-add.174 = bf16[] parameter(0)
  %scatter-add.175 = bf16[] parameter(1)
  ROOT %add.1002 = bf16[] add(%scatter-add.174, %scatter-add.175)
}

%region_886.22952 (reduce_window_sum.22949: s32[], reduce_window_sum.22950: s32[]) -> s32[] {
  %reduce_window_sum.22949 = s32[] parameter(0)
  %reduce_window_sum.22950 = s32[] parameter(1)
  ROOT %reduce_window_sum.22951 = s32[] add(%reduce_window_sum.22949, %reduce_window_sum.22950)
}

%region_887.22961 (reduce_sum.22958: s32[], reduce_sum.22959: s32[]) -> s32[] {
  %reduce_sum.22958 = s32[] parameter(0)
  %reduce_sum.22959 = s32[] parameter(1)
  ROOT %reduce_sum.22960 = s32[] add(%reduce_sum.22958, %reduce_sum.22959)
}

%region_888.22971 (reduce_sum.22968: s32[], reduce_sum.22969: s32[]) -> s32[] {
  %reduce_sum.22968 = s32[] parameter(0)
  %reduce_sum.22969 = s32[] parameter(1)
  ROOT %reduce_sum.22970 = s32[] add(%reduce_sum.22968, %reduce_sum.22969)
}

%region_889.23028 (reduce_and.23025: pred[], reduce_and.23026: pred[]) -> pred[] {
  %reduce_and.23025 = pred[] parameter(0)
  %reduce_and.23026 = pred[] parameter(1)
  ROOT %reduce_and.23027 = pred[] and(%reduce_and.23025, %reduce_and.23026)
}

%region_890.23040 (reduce_sum.23037: bf16[], reduce_sum.23038: bf16[]) -> bf16[] {
  %reduce_sum.23037 = bf16[] parameter(0)
  %reduce_sum.23038 = bf16[] parameter(1)
  ROOT %reduce_sum.23039 = bf16[] add(%reduce_sum.23037, %reduce_sum.23038)
}

%region_891.23057 (reduce_sum.23054: f32[], reduce_sum.23055: f32[]) -> f32[] {
  %reduce_sum.23054 = f32[] parameter(0)
  %reduce_sum.23055 = f32[] parameter(1)
  ROOT %reduce_sum.23056 = f32[] add(%reduce_sum.23054, %reduce_sum.23055)
}

%region_892.23067.clone (scatter-add.176: bf16[], scatter-add.177: bf16[]) -> bf16[] {
  %scatter-add.176 = bf16[] parameter(0)
  %scatter-add.177 = bf16[] parameter(1)
  ROOT %add.1003 = bf16[] add(%scatter-add.176, %scatter-add.177)
}

%region_893.23083 (reduce_sum.23080: f32[], reduce_sum.23081: f32[]) -> f32[] {
  %reduce_sum.23080 = f32[] parameter(0)
  %reduce_sum.23081 = f32[] parameter(1)
  ROOT %reduce_sum.23082 = f32[] add(%reduce_sum.23080, %reduce_sum.23081)
}

%region_894.23162 (reduce_sum.23159: f32[], reduce_sum.23160: f32[]) -> f32[] {
  %reduce_sum.23159 = f32[] parameter(0)
  %reduce_sum.23160 = f32[] parameter(1)
  ROOT %reduce_sum.23161 = f32[] add(%reduce_sum.23159, %reduce_sum.23160)
}

%region_895.23204 (reduce_sum.23201: f32[], reduce_sum.23202: f32[]) -> f32[] {
  %reduce_sum.23201 = f32[] parameter(0)
  %reduce_sum.23202 = f32[] parameter(1)
  ROOT %reduce_sum.23203 = f32[] add(%reduce_sum.23201, %reduce_sum.23202)
}

%region_896.23300 (reduce_sum.23297: s32[], reduce_sum.170: s32[]) -> s32[] {
  %reduce_sum.23297 = s32[] parameter(0)
  %reduce_sum.170 = s32[] parameter(1)
  ROOT %reduce_sum.23299 = s32[] add(%reduce_sum.23297, %reduce_sum.170)
}

%region_897.23309 (reduce_sum.23306: s32[], reduce_sum.23307: s32[]) -> s32[] {
  %reduce_sum.23306 = s32[] parameter(0)
  %reduce_sum.23307 = s32[] parameter(1)
  ROOT %reduce_sum.23308 = s32[] add(%reduce_sum.23306, %reduce_sum.23307)
}

%region_898.23315 (reduce_max.23312: s32[], reduce_max.23313: s32[]) -> s32[] {
  %reduce_max.23312 = s32[] parameter(0)
  %reduce_max.23313 = s32[] parameter(1)
  ROOT %reduce_max.23314 = s32[] maximum(%reduce_max.23312, %reduce_max.23313)
}

%region_899.23330 (reduce_sum.23327: f32[], reduce_sum.23328: f32[]) -> f32[] {
  %reduce_sum.23327 = f32[] parameter(0)
  %reduce_sum.23328 = f32[] parameter(1)
  ROOT %reduce_sum.23329 = f32[] add(%reduce_sum.23327, %reduce_sum.23328)
}

%compare_greater_than.60.23351.clone (p.0.lhs.184: bf16[], p.0.rhs.184: bf16[], p.1.lhs.184: s32[], p.1.rhs.184: s32[]) -> pred[] {
  %p.1.lhs.184 = s32[] parameter(2)
  %p.1.rhs.184 = s32[] parameter(3)
  %p.0.lhs.184 = bf16[] parameter(0)
  %p.0.rhs.184 = bf16[] parameter(1)
  ROOT %compare.304 = pred[] compare(%p.0.lhs.184, %p.0.rhs.184), direction=GT, type=TOTALORDER
}

%compare-value-and-index.60 (p.0.lhs.185: bf16[], p.0.rhs.185: bf16[], p.1.lhs.185: s32[], p.1.rhs.185: s32[]) -> pred[] {
  %p.0.lhs.185 = bf16[] parameter(0)
  %p.0.rhs.185 = bf16[] parameter(1)
  %compare.306 = pred[] compare(%p.0.lhs.185, %p.0.rhs.185), direction=EQ, type=TOTALORDER
  %p.1.lhs.185 = s32[] parameter(2)
  %p.1.rhs.185 = s32[] parameter(3)
  %compare.307 = pred[] compare(%p.1.lhs.185, %p.1.rhs.185), direction=LT
  %compare.305 = pred[] compare(%p.0.lhs.185, %p.0.rhs.185), direction=GT
  ROOT %select.127 = pred[] select(%compare.306, %compare.307, %compare.305)
}

%region_900.23387.clone (scatter.121: u32[], scatter.122: u32[]) -> u32[] {
  %scatter.121 = u32[] parameter(0)
  ROOT %scatter.122 = u32[] parameter(1)
}

%region_901.23396 (reduce_max.23393: f32[], reduce_max.23394: f32[]) -> f32[] {
  %reduce_max.23393 = f32[] parameter(0)
  %reduce_max.23394 = f32[] parameter(1)
  ROOT %reduce_max.23395 = f32[] maximum(%reduce_max.23393, %reduce_max.23394)
}

%region_902.23405 (reduce_sum.23402: f32[], reduce_sum.23403: f32[]) -> f32[] {
  %reduce_sum.23402 = f32[] parameter(0)
  %reduce_sum.23403 = f32[] parameter(1)
  ROOT %reduce_sum.23404 = f32[] add(%reduce_sum.23402, %reduce_sum.23403)
}

%region_903.23414.clone (scatter-add.178: bf16[], scatter-add.179: bf16[]) -> bf16[] {
  %scatter-add.178 = bf16[] parameter(0)
  %scatter-add.179 = bf16[] parameter(1)
  ROOT %add.1004 = bf16[] add(%scatter-add.178, %scatter-add.179)
}

%region_904.23426 (reduce_window_sum.23423: s32[], reduce_window_sum.23424: s32[]) -> s32[] {
  %reduce_window_sum.23423 = s32[] parameter(0)
  %reduce_window_sum.23424 = s32[] parameter(1)
  ROOT %reduce_window_sum.23425 = s32[] add(%reduce_window_sum.23423, %reduce_window_sum.23424)
}

%region_905.23435 (reduce_sum.171: s32[], reduce_sum.23433: s32[]) -> s32[] {
  %reduce_sum.171 = s32[] parameter(0)
  %reduce_sum.23433 = s32[] parameter(1)
  ROOT %reduce_sum.23434 = s32[] add(%reduce_sum.171, %reduce_sum.23433)
}

%region_906.23445 (reduce_sum.23442: s32[], reduce_sum.23443: s32[]) -> s32[] {
  %reduce_sum.23442 = s32[] parameter(0)
  %reduce_sum.23443 = s32[] parameter(1)
  ROOT %reduce_sum.23444 = s32[] add(%reduce_sum.23442, %reduce_sum.23443)
}

%region_907.23502 (reduce_and.23499: pred[], reduce_and.23500: pred[]) -> pred[] {
  %reduce_and.23499 = pred[] parameter(0)
  %reduce_and.23500 = pred[] parameter(1)
  ROOT %reduce_and.23501 = pred[] and(%reduce_and.23499, %reduce_and.23500)
}

%region_908.23514 (reduce_sum.23511: bf16[], reduce_sum.23512: bf16[]) -> bf16[] {
  %reduce_sum.23511 = bf16[] parameter(0)
  %reduce_sum.23512 = bf16[] parameter(1)
  ROOT %reduce_sum.23513 = bf16[] add(%reduce_sum.23511, %reduce_sum.23512)
}

%region_909.23531 (reduce_sum.23528: f32[], reduce_sum.23529: f32[]) -> f32[] {
  %reduce_sum.23528 = f32[] parameter(0)
  %reduce_sum.23529 = f32[] parameter(1)
  ROOT %reduce_sum.23530 = f32[] add(%reduce_sum.23528, %reduce_sum.23529)
}

%region_910.23541.clone (scatter-add.180: bf16[], scatter-add.181: bf16[]) -> bf16[] {
  %scatter-add.180 = bf16[] parameter(0)
  %scatter-add.181 = bf16[] parameter(1)
  ROOT %add.1006 = bf16[] add(%scatter-add.180, %scatter-add.181)
}

%region_911.23557 (reduce_sum.23554: f32[], reduce_sum.23555: f32[]) -> f32[] {
  %reduce_sum.23554 = f32[] parameter(0)
  %reduce_sum.23555 = f32[] parameter(1)
  ROOT %reduce_sum.23556 = f32[] add(%reduce_sum.23554, %reduce_sum.23555)
}

%region_912.23636 (reduce_sum.23633: f32[], reduce_sum.23634: f32[]) -> f32[] {
  %reduce_sum.23633 = f32[] parameter(0)
  %reduce_sum.23634 = f32[] parameter(1)
  ROOT %reduce_sum.23635 = f32[] add(%reduce_sum.23633, %reduce_sum.23634)
}

%region_913.23678 (reduce_sum.23675: f32[], reduce_sum.23676: f32[]) -> f32[] {
  %reduce_sum.23675 = f32[] parameter(0)
  %reduce_sum.23676 = f32[] parameter(1)
  ROOT %reduce_sum.23677 = f32[] add(%reduce_sum.23675, %reduce_sum.23676)
}

%region_914.23774 (reduce_sum.23771: s32[], reduce_sum.23772: s32[]) -> s32[] {
  %reduce_sum.23771 = s32[] parameter(0)
  %reduce_sum.23772 = s32[] parameter(1)
  ROOT %reduce_sum.23773 = s32[] add(%reduce_sum.23771, %reduce_sum.23772)
}

%region_915.23783 (reduce_sum.23780: s32[], reduce_sum.23781: s32[]) -> s32[] {
  %reduce_sum.23780 = s32[] parameter(0)
  %reduce_sum.23781 = s32[] parameter(1)
  ROOT %reduce_sum.23782 = s32[] add(%reduce_sum.23780, %reduce_sum.23781)
}

%region_916.23789 (reduce_max.23786: s32[], reduce_max.23787: s32[]) -> s32[] {
  %reduce_max.23786 = s32[] parameter(0)
  %reduce_max.23787 = s32[] parameter(1)
  ROOT %reduce_max.23788 = s32[] maximum(%reduce_max.23786, %reduce_max.23787)
}

%region_917.23804 (reduce_sum.23801: f32[], reduce_sum.23802: f32[]) -> f32[] {
  %reduce_sum.23801 = f32[] parameter(0)
  %reduce_sum.23802 = f32[] parameter(1)
  ROOT %reduce_sum.23803 = f32[] add(%reduce_sum.23801, %reduce_sum.23802)
}

%compare_greater_than.61.23825.clone (p.0.lhs.186: bf16[], p.0.rhs.186: bf16[], p.1.lhs.186: s32[], p.1.rhs.186: s32[]) -> pred[] {
  %p.1.lhs.186 = s32[] parameter(2)
  %p.1.rhs.186 = s32[] parameter(3)
  %p.0.lhs.186 = bf16[] parameter(0)
  %p.0.rhs.186 = bf16[] parameter(1)
  ROOT %compare.308 = pred[] compare(%p.0.lhs.186, %p.0.rhs.186), direction=GT, type=TOTALORDER
}

%compare-value-and-index.61 (p.0.lhs.187: bf16[], p.0.rhs.187: bf16[], p.1.lhs.187: s32[], p.1.rhs.187: s32[]) -> pred[] {
  %p.0.lhs.187 = bf16[] parameter(0)
  %p.0.rhs.187 = bf16[] parameter(1)
  %compare.310 = pred[] compare(%p.0.lhs.187, %p.0.rhs.187), direction=EQ, type=TOTALORDER
  %p.1.lhs.187 = s32[] parameter(2)
  %p.1.rhs.187 = s32[] parameter(3)
  %compare.311 = pred[] compare(%p.1.lhs.187, %p.1.rhs.187), direction=LT
  %compare.309 = pred[] compare(%p.0.lhs.187, %p.0.rhs.187), direction=GT
  ROOT %select.128 = pred[] select(%compare.310, %compare.311, %compare.309)
}

%region_918.23861.clone (scatter.123: u32[], scatter.124: u32[]) -> u32[] {
  %scatter.123 = u32[] parameter(0)
  ROOT %scatter.124 = u32[] parameter(1)
}

%region_919.23870 (reduce_max.23867: f32[], reduce_max.23868: f32[]) -> f32[] {
  %reduce_max.23867 = f32[] parameter(0)
  %reduce_max.23868 = f32[] parameter(1)
  ROOT %reduce_max.23869 = f32[] maximum(%reduce_max.23867, %reduce_max.23868)
}

%region_920.23879 (reduce_sum.23876: f32[], reduce_sum.23877: f32[]) -> f32[] {
  %reduce_sum.23876 = f32[] parameter(0)
  %reduce_sum.23877 = f32[] parameter(1)
  ROOT %reduce_sum.23878 = f32[] add(%reduce_sum.23876, %reduce_sum.23877)
}

%region_921.23888.clone (scatter-add.182: bf16[], scatter-add.183: bf16[]) -> bf16[] {
  %scatter-add.182 = bf16[] parameter(0)
  %scatter-add.183 = bf16[] parameter(1)
  ROOT %add.1007 = bf16[] add(%scatter-add.182, %scatter-add.183)
}

%region_922.23900 (reduce_window_sum.23897: s32[], reduce_window_sum.23898: s32[]) -> s32[] {
  %reduce_window_sum.23897 = s32[] parameter(0)
  %reduce_window_sum.23898 = s32[] parameter(1)
  ROOT %reduce_window_sum.23899 = s32[] add(%reduce_window_sum.23897, %reduce_window_sum.23898)
}

%region_923.23909 (reduce_sum.23906: s32[], reduce_sum.23907: s32[]) -> s32[] {
  %reduce_sum.23906 = s32[] parameter(0)
  %reduce_sum.23907 = s32[] parameter(1)
  ROOT %reduce_sum.23908 = s32[] add(%reduce_sum.23906, %reduce_sum.23907)
}

%region_924.23919 (reduce_sum.23916: s32[], reduce_sum.23917: s32[]) -> s32[] {
  %reduce_sum.23916 = s32[] parameter(0)
  %reduce_sum.23917 = s32[] parameter(1)
  ROOT %reduce_sum.23918 = s32[] add(%reduce_sum.23916, %reduce_sum.23917)
}

%region_925.23976 (reduce_and.23973: pred[], reduce_and.23974: pred[]) -> pred[] {
  %reduce_and.23973 = pred[] parameter(0)
  %reduce_and.23974 = pred[] parameter(1)
  ROOT %reduce_and.23975 = pred[] and(%reduce_and.23973, %reduce_and.23974)
}

%region_926.23988 (reduce_sum.23985: bf16[], reduce_sum.23986: bf16[]) -> bf16[] {
  %reduce_sum.23985 = bf16[] parameter(0)
  %reduce_sum.23986 = bf16[] parameter(1)
  ROOT %reduce_sum.23987 = bf16[] add(%reduce_sum.23985, %reduce_sum.23986)
}

%region_927.24005 (reduce_sum.24002: f32[], reduce_sum.24003: f32[]) -> f32[] {
  %reduce_sum.24002 = f32[] parameter(0)
  %reduce_sum.24003 = f32[] parameter(1)
  ROOT %reduce_sum.24004 = f32[] add(%reduce_sum.24002, %reduce_sum.24003)
}

%region_928.24015.clone (scatter-add.184: bf16[], scatter-add.185: bf16[]) -> bf16[] {
  %scatter-add.184 = bf16[] parameter(0)
  %scatter-add.185 = bf16[] parameter(1)
  ROOT %add.1008 = bf16[] add(%scatter-add.184, %scatter-add.185)
}

%region_929.24031 (reduce_sum.24028: f32[], reduce_sum.24029: f32[]) -> f32[] {
  %reduce_sum.24028 = f32[] parameter(0)
  %reduce_sum.24029 = f32[] parameter(1)
  ROOT %reduce_sum.24030 = f32[] add(%reduce_sum.24028, %reduce_sum.24029)
}

%region_930.24110 (reduce_sum.24107: f32[], reduce_sum.24108: f32[]) -> f32[] {
  %reduce_sum.24107 = f32[] parameter(0)
  %reduce_sum.24108 = f32[] parameter(1)
  ROOT %reduce_sum.24109 = f32[] add(%reduce_sum.24107, %reduce_sum.24108)
}

%region_931.24152 (reduce_sum.24149: f32[], reduce_sum.172: f32[]) -> f32[] {
  %reduce_sum.24149 = f32[] parameter(0)
  %reduce_sum.172 = f32[] parameter(1)
  ROOT %reduce_sum.24151 = f32[] add(%reduce_sum.24149, %reduce_sum.172)
}

%region_932.24248 (reduce_sum.173: s32[], reduce_sum.174: s32[]) -> s32[] {
  %reduce_sum.173 = s32[] parameter(0)
  %reduce_sum.174 = s32[] parameter(1)
  ROOT %reduce_sum.175 = s32[] add(%reduce_sum.173, %reduce_sum.174)
}

%region_933.24257 (reduce_sum.24254: s32[], reduce_sum.24255: s32[]) -> s32[] {
  %reduce_sum.24254 = s32[] parameter(0)
  %reduce_sum.24255 = s32[] parameter(1)
  ROOT %reduce_sum.176 = s32[] add(%reduce_sum.24254, %reduce_sum.24255)
}

%region_934.24263 (reduce_max.24260: s32[], reduce_max.24261: s32[]) -> s32[] {
  %reduce_max.24260 = s32[] parameter(0)
  %reduce_max.24261 = s32[] parameter(1)
  ROOT %reduce_max.24262 = s32[] maximum(%reduce_max.24260, %reduce_max.24261)
}

%region_935.24278 (reduce_sum.24275: f32[], reduce_sum.24276: f32[]) -> f32[] {
  %reduce_sum.24275 = f32[] parameter(0)
  %reduce_sum.24276 = f32[] parameter(1)
  ROOT %reduce_sum.177 = f32[] add(%reduce_sum.24275, %reduce_sum.24276)
}

%compare_greater_than.62.24299.clone (p.0.lhs.188: bf16[], p.0.rhs.188: bf16[], p.1.lhs.188: s32[], p.1.rhs.188: s32[]) -> pred[] {
  %p.1.lhs.188 = s32[] parameter(2)
  %p.1.rhs.188 = s32[] parameter(3)
  %p.0.lhs.188 = bf16[] parameter(0)
  %p.0.rhs.188 = bf16[] parameter(1)
  ROOT %compare.312 = pred[] compare(%p.0.lhs.188, %p.0.rhs.188), direction=GT, type=TOTALORDER
}

%compare-value-and-index.62 (p.0.lhs.189: bf16[], p.0.rhs.189: bf16[], p.1.lhs.189: s32[], p.1.rhs.189: s32[]) -> pred[] {
  %p.0.lhs.189 = bf16[] parameter(0)
  %p.0.rhs.189 = bf16[] parameter(1)
  %compare.314 = pred[] compare(%p.0.lhs.189, %p.0.rhs.189), direction=EQ, type=TOTALORDER
  %p.1.lhs.189 = s32[] parameter(2)
  %p.1.rhs.189 = s32[] parameter(3)
  %compare.315 = pred[] compare(%p.1.lhs.189, %p.1.rhs.189), direction=LT
  %compare.313 = pred[] compare(%p.0.lhs.189, %p.0.rhs.189), direction=GT
  ROOT %select.129 = pred[] select(%compare.314, %compare.315, %compare.313)
}

%region_936.24335.clone (scatter.125: u32[], scatter.126: u32[]) -> u32[] {
  %scatter.125 = u32[] parameter(0)
  ROOT %scatter.126 = u32[] parameter(1)
}

%region_937.24344 (reduce_max.24341: f32[], reduce_max.24342: f32[]) -> f32[] {
  %reduce_max.24341 = f32[] parameter(0)
  %reduce_max.24342 = f32[] parameter(1)
  ROOT %reduce_max.24343 = f32[] maximum(%reduce_max.24341, %reduce_max.24342)
}

%region_938.24353 (reduce_sum.24350: f32[], reduce_sum.24351: f32[]) -> f32[] {
  %reduce_sum.24350 = f32[] parameter(0)
  %reduce_sum.24351 = f32[] parameter(1)
  ROOT %reduce_sum.24352 = f32[] add(%reduce_sum.24350, %reduce_sum.24351)
}

%region_939.24362.clone (scatter-add.186: bf16[], scatter-add.187: bf16[]) -> bf16[] {
  %scatter-add.186 = bf16[] parameter(0)
  %scatter-add.187 = bf16[] parameter(1)
  ROOT %add.1009 = bf16[] add(%scatter-add.186, %scatter-add.187)
}

%region_940.24374 (reduce_window_sum.24371: s32[], reduce_window_sum.24372: s32[]) -> s32[] {
  %reduce_window_sum.24371 = s32[] parameter(0)
  %reduce_window_sum.24372 = s32[] parameter(1)
  ROOT %reduce_window_sum.24373 = s32[] add(%reduce_window_sum.24371, %reduce_window_sum.24372)
}

%region_941.24383 (reduce_sum.24380: s32[], reduce_sum.24381: s32[]) -> s32[] {
  %reduce_sum.24380 = s32[] parameter(0)
  %reduce_sum.24381 = s32[] parameter(1)
  ROOT %reduce_sum.24382 = s32[] add(%reduce_sum.24380, %reduce_sum.24381)
}

%region_942.24393 (reduce_sum.178: s32[], reduce_sum.24391: s32[]) -> s32[] {
  %reduce_sum.178 = s32[] parameter(0)
  %reduce_sum.24391 = s32[] parameter(1)
  ROOT %reduce_sum.179 = s32[] add(%reduce_sum.178, %reduce_sum.24391)
}

%region_943.24450 (reduce_and.24447: pred[], reduce_and.24448: pred[]) -> pred[] {
  %reduce_and.24447 = pred[] parameter(0)
  %reduce_and.24448 = pred[] parameter(1)
  ROOT %reduce_and.24449 = pred[] and(%reduce_and.24447, %reduce_and.24448)
}

%region_944.24462 (reduce_sum.24459: bf16[], reduce_sum.24460: bf16[]) -> bf16[] {
  %reduce_sum.24459 = bf16[] parameter(0)
  %reduce_sum.24460 = bf16[] parameter(1)
  ROOT %reduce_sum.24461 = bf16[] add(%reduce_sum.24459, %reduce_sum.24460)
}

%region_945.24479 (reduce_sum.24476: f32[], reduce_sum.24477: f32[]) -> f32[] {
  %reduce_sum.24476 = f32[] parameter(0)
  %reduce_sum.24477 = f32[] parameter(1)
  ROOT %reduce_sum.24478 = f32[] add(%reduce_sum.24476, %reduce_sum.24477)
}

%region_946.24489.clone (scatter-add.188: bf16[], scatter-add.189: bf16[]) -> bf16[] {
  %scatter-add.188 = bf16[] parameter(0)
  %scatter-add.189 = bf16[] parameter(1)
  ROOT %add.1010 = bf16[] add(%scatter-add.188, %scatter-add.189)
}

%region_947.24505 (reduce_sum.24502: f32[], reduce_sum.24503: f32[]) -> f32[] {
  %reduce_sum.24502 = f32[] parameter(0)
  %reduce_sum.24503 = f32[] parameter(1)
  ROOT %reduce_sum.24504 = f32[] add(%reduce_sum.24502, %reduce_sum.24503)
}

%region_948.24584 (reduce_sum.24581: f32[], reduce_sum.180: f32[]) -> f32[] {
  %reduce_sum.24581 = f32[] parameter(0)
  %reduce_sum.180 = f32[] parameter(1)
  ROOT %reduce_sum.181 = f32[] add(%reduce_sum.24581, %reduce_sum.180)
}

%region_949.24624 (reduce_sum.24621: f32[], reduce_sum.24622: f32[]) -> f32[] {
  %reduce_sum.24621 = f32[] parameter(0)
  %reduce_sum.24622 = f32[] parameter(1)
  ROOT %reduce_sum.24623 = f32[] add(%reduce_sum.24621, %reduce_sum.24622)
}

%region_950.24720 (reduce_sum.24717: s32[], reduce_sum.182: s32[]) -> s32[] {
  %reduce_sum.24717 = s32[] parameter(0)
  %reduce_sum.182 = s32[] parameter(1)
  ROOT %reduce_sum.24719 = s32[] add(%reduce_sum.24717, %reduce_sum.182)
}

%region_951.24729 (reduce_sum.24726: s32[], reduce_sum.183: s32[]) -> s32[] {
  %reduce_sum.24726 = s32[] parameter(0)
  %reduce_sum.183 = s32[] parameter(1)
  ROOT %reduce_sum.24728 = s32[] add(%reduce_sum.24726, %reduce_sum.183)
}

%region_952.24735 (reduce_max.24732: s32[], reduce_max.24733: s32[]) -> s32[] {
  %reduce_max.24732 = s32[] parameter(0)
  %reduce_max.24733 = s32[] parameter(1)
  ROOT %reduce_max.24734 = s32[] maximum(%reduce_max.24732, %reduce_max.24733)
}

%region_953.24750 (reduce_sum.24747: f32[], reduce_sum.24748: f32[]) -> f32[] {
  %reduce_sum.24747 = f32[] parameter(0)
  %reduce_sum.24748 = f32[] parameter(1)
  ROOT %reduce_sum.24749 = f32[] add(%reduce_sum.24747, %reduce_sum.24748)
}

%compare_greater_than.63.24771.clone (p.0.lhs.190: bf16[], p.0.rhs.190: bf16[], p.1.lhs.190: s32[], p.1.rhs.190: s32[]) -> pred[] {
  %p.1.lhs.190 = s32[] parameter(2)
  %p.1.rhs.190 = s32[] parameter(3)
  %p.0.lhs.190 = bf16[] parameter(0)
  %p.0.rhs.190 = bf16[] parameter(1)
  ROOT %compare.316 = pred[] compare(%p.0.lhs.190, %p.0.rhs.190), direction=GT, type=TOTALORDER
}

%compare-value-and-index.63 (p.0.lhs.191: bf16[], p.0.rhs.191: bf16[], p.1.lhs.191: s32[], p.1.rhs.191: s32[]) -> pred[] {
  %p.0.lhs.191 = bf16[] parameter(0)
  %p.0.rhs.191 = bf16[] parameter(1)
  %compare.318 = pred[] compare(%p.0.lhs.191, %p.0.rhs.191), direction=EQ, type=TOTALORDER
  %p.1.lhs.191 = s32[] parameter(2)
  %p.1.rhs.191 = s32[] parameter(3)
  %compare.319 = pred[] compare(%p.1.lhs.191, %p.1.rhs.191), direction=LT
  %compare.317 = pred[] compare(%p.0.lhs.191, %p.0.rhs.191), direction=GT
  ROOT %select.130 = pred[] select(%compare.318, %compare.319, %compare.317)
}

%region_954.24810.clone (scatter.127: u32[], scatter.128: u32[]) -> u32[] {
  %scatter.127 = u32[] parameter(0)
  ROOT %scatter.128 = u32[] parameter(1)
}

%region_955.24821 (reduce_and.24818: pred[], reduce_and.24819: pred[]) -> pred[] {
  %reduce_and.24818 = pred[] parameter(0)
  %reduce_and.24819 = pred[] parameter(1)
  ROOT %reduce_and.24820 = pred[] and(%reduce_and.24818, %reduce_and.24819)
}

%region_956.24830 (reduce_max.24827: f32[], reduce_max.24828: f32[]) -> f32[] {
  %reduce_max.24827 = f32[] parameter(0)
  %reduce_max.24828 = f32[] parameter(1)
  ROOT %reduce_max.24829 = f32[] maximum(%reduce_max.24827, %reduce_max.24828)
}

%region_957.24839 (reduce_sum.24836: f32[], reduce_sum.184: f32[]) -> f32[] {
  %reduce_sum.24836 = f32[] parameter(0)
  %reduce_sum.184 = f32[] parameter(1)
  ROOT %reduce_sum.24838 = f32[] add(%reduce_sum.24836, %reduce_sum.184)
}

%region_958.24848.clone (scatter-add.190: bf16[], scatter-add.191: bf16[]) -> bf16[] {
  %scatter-add.190 = bf16[] parameter(0)
  %scatter-add.191 = bf16[] parameter(1)
  ROOT %add.1011 = bf16[] add(%scatter-add.190, %scatter-add.191)
}

%region_959.24860 (reduce_window_sum.24857: s32[], reduce_window_sum.24858: s32[]) -> s32[] {
  %reduce_window_sum.24857 = s32[] parameter(0)
  %reduce_window_sum.24858 = s32[] parameter(1)
  ROOT %reduce_window_sum.24859 = s32[] add(%reduce_window_sum.24857, %reduce_window_sum.24858)
}

%region_960.24869 (reduce_sum.185: s32[], reduce_sum.24867: s32[]) -> s32[] {
  %reduce_sum.185 = s32[] parameter(0)
  %reduce_sum.24867 = s32[] parameter(1)
  ROOT %reduce_sum.186 = s32[] add(%reduce_sum.185, %reduce_sum.24867)
}

%region_961.24879 (reduce_sum.24876: s32[], reduce_sum.24877: s32[]) -> s32[] {
  %reduce_sum.24876 = s32[] parameter(0)
  %reduce_sum.24877 = s32[] parameter(1)
  ROOT %reduce_sum.24878 = s32[] add(%reduce_sum.24876, %reduce_sum.24877)
}

%region_962.24914 (reduce_sum.24911: bf16[], reduce_sum.24912: bf16[]) -> bf16[] {
  %reduce_sum.24911 = bf16[] parameter(0)
  %reduce_sum.24912 = bf16[] parameter(1)
  ROOT %reduce_sum.24913 = bf16[] add(%reduce_sum.24911, %reduce_sum.24912)
}

%region_963.24931 (reduce_sum.24928: f32[], reduce_sum.24929: f32[]) -> f32[] {
  %reduce_sum.24928 = f32[] parameter(0)
  %reduce_sum.24929 = f32[] parameter(1)
  ROOT %reduce_sum.24930 = f32[] add(%reduce_sum.24928, %reduce_sum.24929)
}

%region_964.24941.clone (scatter-add.192: bf16[], scatter-add.193: bf16[]) -> bf16[] {
  %scatter-add.192 = bf16[] parameter(0)
  %scatter-add.193 = bf16[] parameter(1)
  ROOT %add.1012 = bf16[] add(%scatter-add.192, %scatter-add.193)
}

%add.clone (x.1: bf16[], y.1: bf16[]) -> bf16[] {
  %x.1 = bf16[] parameter(0)
  %y.1 = bf16[] parameter(1)
  ROOT %add.1014 = bf16[] add(%x.1, %y.1)
}

%region_965.24950 (reduce_sum.24947: f32[], reduce_sum.24948: f32[]) -> f32[] {
  %reduce_sum.24947 = f32[] parameter(0)
  %reduce_sum.24948 = f32[] parameter(1)
  ROOT %reduce_sum.24949 = f32[] add(%reduce_sum.24947, %reduce_sum.24948)
}

%region_965.24950.clone (reduce_sum.1513: f32[], reduce_sum.1514: f32[]) -> f32[] {
  %reduce_sum.1513 = f32[] parameter(0)
  %reduce_sum.1514 = f32[] parameter(1)
  ROOT %reduce_sum.1515 = f32[] add(%reduce_sum.1513, %reduce_sum.1514)
}

%region_966.24974 (reduce_sum.24971: f32[], reduce_sum.24972: f32[]) -> f32[] {
  %reduce_sum.24971 = f32[] parameter(0)
  %reduce_sum.24972 = f32[] parameter(1)
  ROOT %reduce_sum.24973 = f32[] add(%reduce_sum.24971, %reduce_sum.24972)
}

%region_966.24974.clone (reduce_sum.1516: f32[], reduce_sum.1517: f32[]) -> f32[] {
  %reduce_sum.1516 = f32[] parameter(0)
  %reduce_sum.1517 = f32[] parameter(1)
  ROOT %reduce_sum.1524 = f32[] add(%reduce_sum.1516, %reduce_sum.1517)
}

%region_967.24987 (reduce_sum.187: f32[], reduce_sum.24985: f32[]) -> f32[] {
  %reduce_sum.187 = f32[] parameter(0)
  %reduce_sum.24985 = f32[] parameter(1)
  ROOT %reduce_sum.188 = f32[] add(%reduce_sum.187, %reduce_sum.24985)
}

%region_967.24987.clone (reduce_sum.1525: f32[], reduce_sum.1526: f32[]) -> f32[] {
  %reduce_sum.1525 = f32[] parameter(0)
  %reduce_sum.1526 = f32[] parameter(1)
  ROOT %reduce_sum.1527 = f32[] add(%reduce_sum.1525, %reduce_sum.1526)
}

%region_968.24998 (reduce_sum.189: f32[], reduce_sum.190: f32[]) -> f32[] {
  %reduce_sum.189 = f32[] parameter(0)
  %reduce_sum.190 = f32[] parameter(1)
  ROOT %reduce_sum.24997 = f32[] add(%reduce_sum.189, %reduce_sum.190)
}

%region_968.24998.clone (reduce_sum.1528: f32[], reduce_sum.1529: f32[]) -> f32[] {
  %reduce_sum.1528 = f32[] parameter(0)
  %reduce_sum.1529 = f32[] parameter(1)
  ROOT %reduce_sum.1530 = f32[] add(%reduce_sum.1528, %reduce_sum.1529)
}

%region_969.25016 (reduce_sum.25013: bf16[], reduce_sum.25014: bf16[]) -> bf16[] {
  %reduce_sum.25013 = bf16[] parameter(0)
  %reduce_sum.25014 = bf16[] parameter(1)
  ROOT %reduce_sum.25015 = bf16[] add(%reduce_sum.25013, %reduce_sum.25014)
}

%region_969.25016.clone (reduce_sum.1531: bf16[], reduce_sum.1532: bf16[]) -> bf16[] {
  %reduce_sum.1531 = bf16[] parameter(0)
  %reduce_sum.1532 = bf16[] parameter(1)
  ROOT %reduce_sum.1533 = bf16[] add(%reduce_sum.1531, %reduce_sum.1532)
}

%region_970.25023 (reduce_sum.25020: f32[], reduce_sum.25021: f32[]) -> f32[] {
  %reduce_sum.25020 = f32[] parameter(0)
  %reduce_sum.25021 = f32[] parameter(1)
  ROOT %reduce_sum.25022 = f32[] add(%reduce_sum.25020, %reduce_sum.25021)
}

%region_971.25038 (reduce_sum.25035: f32[], reduce_sum.25036: f32[]) -> f32[] {
  %reduce_sum.25035 = f32[] parameter(0)
  %reduce_sum.25036 = f32[] parameter(1)
  ROOT %reduce_sum.25037 = f32[] add(%reduce_sum.25035, %reduce_sum.25036)
}

%region_972.25110 (reduce_sum.25107: bf16[], reduce_sum.25108: bf16[]) -> bf16[] {
  %reduce_sum.25107 = bf16[] parameter(0)
  %reduce_sum.25108 = bf16[] parameter(1)
  ROOT %reduce_sum.25109 = bf16[] add(%reduce_sum.25107, %reduce_sum.25108)
}

%region_972.25110.clone (reduce_sum.1534: bf16[], reduce_sum.1535: bf16[]) -> bf16[] {
  %reduce_sum.1534 = bf16[] parameter(0)
  %reduce_sum.1535 = bf16[] parameter(1)
  ROOT %reduce_sum.1536 = bf16[] add(%reduce_sum.1534, %reduce_sum.1535)
}

%region_973.25117 (reduce_sum.25114: f32[], reduce_sum.25115: f32[]) -> f32[] {
  %reduce_sum.25114 = f32[] parameter(0)
  %reduce_sum.25115 = f32[] parameter(1)
  ROOT %reduce_sum.25116 = f32[] add(%reduce_sum.25114, %reduce_sum.25115)
}

%add.1.clone (x.3: bf16[], y.3: bf16[]) -> bf16[] {
  %x.3 = bf16[] parameter(0)
  %y.3 = bf16[] parameter(1)
  ROOT %add.1016 = bf16[] add(%x.3, %y.3)
}

%region_974.25128 (reduce_sum.25125: f32[], reduce_sum.25126: f32[]) -> f32[] {
  %reduce_sum.25125 = f32[] parameter(0)
  %reduce_sum.25126 = f32[] parameter(1)
  ROOT %reduce_sum.25127 = f32[] add(%reduce_sum.25125, %reduce_sum.25126)
}

%region_974.25128.clone (reduce_sum.1537: f32[], reduce_sum.1538: f32[]) -> f32[] {
  %reduce_sum.1537 = f32[] parameter(0)
  %reduce_sum.1538 = f32[] parameter(1)
  ROOT %reduce_sum.1539 = f32[] add(%reduce_sum.1537, %reduce_sum.1538)
}

%add.2.clone (x.5: bf16[], y.5: bf16[]) -> bf16[] {
  %x.5 = bf16[] parameter(0)
  %y.5 = bf16[] parameter(1)
  ROOT %add.1018 = bf16[] add(%x.5, %y.5)
}

%region_975.25139 (reduce_sum.25136: f32[], reduce_sum.25137: f32[]) -> f32[] {
  %reduce_sum.25136 = f32[] parameter(0)
  %reduce_sum.25137 = f32[] parameter(1)
  ROOT %reduce_sum.25138 = f32[] add(%reduce_sum.25136, %reduce_sum.25137)
}

%region_975.25139.clone (reduce_sum.1540: f32[], reduce_sum.1541: f32[]) -> f32[] {
  %reduce_sum.1540 = f32[] parameter(0)
  %reduce_sum.1541 = f32[] parameter(1)
  ROOT %reduce_sum.1542 = f32[] add(%reduce_sum.1540, %reduce_sum.1541)
}

%add.3.clone (x.7: bf16[], y.7: bf16[]) -> bf16[] {
  %x.7 = bf16[] parameter(0)
  %y.7 = bf16[] parameter(1)
  ROOT %add.1020 = bf16[] add(%x.7, %y.7)
}

%region_976.25150 (reduce_sum.25147: f32[], reduce_sum.25148: f32[]) -> f32[] {
  %reduce_sum.25147 = f32[] parameter(0)
  %reduce_sum.25148 = f32[] parameter(1)
  ROOT %reduce_sum.25149 = f32[] add(%reduce_sum.25147, %reduce_sum.25148)
}

%region_976.25150.clone (reduce_sum.1543: f32[], reduce_sum.1544: f32[]) -> f32[] {
  %reduce_sum.1543 = f32[] parameter(0)
  %reduce_sum.1544 = f32[] parameter(1)
  ROOT %reduce_sum.1545 = f32[] add(%reduce_sum.1543, %reduce_sum.1544)
}

%add.4.clone (x.9: bf16[], y.9: bf16[]) -> bf16[] {
  %x.9 = bf16[] parameter(0)
  %y.9 = bf16[] parameter(1)
  ROOT %add.1022 = bf16[] add(%x.9, %y.9)
}

%region_977.25161 (reduce_sum.25158: f32[], reduce_sum.191: f32[]) -> f32[] {
  %reduce_sum.25158 = f32[] parameter(0)
  %reduce_sum.191 = f32[] parameter(1)
  ROOT %reduce_sum.192 = f32[] add(%reduce_sum.25158, %reduce_sum.191)
}

%region_977.25161.clone (reduce_sum.1546: f32[], reduce_sum.1547: f32[]) -> f32[] {
  %reduce_sum.1546 = f32[] parameter(0)
  %reduce_sum.1547 = f32[] parameter(1)
  ROOT %reduce_sum.1548 = f32[] add(%reduce_sum.1546, %reduce_sum.1547)
}

%add.5.clone (x.11: bf16[], y.11: bf16[]) -> bf16[] {
  %x.11 = bf16[] parameter(0)
  %y.11 = bf16[] parameter(1)
  ROOT %add.1024 = bf16[] add(%x.11, %y.11)
}

%region_978.25171 (reduce_sum.193: f32[], reduce_sum.194: f32[]) -> f32[] {
  %reduce_sum.193 = f32[] parameter(0)
  %reduce_sum.194 = f32[] parameter(1)
  ROOT %reduce_sum.25170 = f32[] add(%reduce_sum.193, %reduce_sum.194)
}

%region_978.25171.clone (reduce_sum.1549: f32[], reduce_sum.1550: f32[]) -> f32[] {
  %reduce_sum.1549 = f32[] parameter(0)
  %reduce_sum.1550 = f32[] parameter(1)
  ROOT %reduce_sum.1551 = f32[] add(%reduce_sum.1549, %reduce_sum.1550)
}

%region_979.25182 (reduce_sum.25179: f32[], reduce_sum.25180: f32[]) -> f32[] {
  %reduce_sum.25179 = f32[] parameter(0)
  %reduce_sum.25180 = f32[] parameter(1)
  ROOT %reduce_sum.25181 = f32[] add(%reduce_sum.25179, %reduce_sum.25180)
}

%region_979.25182.clone (reduce_sum.1552: f32[], reduce_sum.1553: f32[]) -> f32[] {
  %reduce_sum.1552 = f32[] parameter(0)
  %reduce_sum.1553 = f32[] parameter(1)
  ROOT %reduce_sum.1554 = f32[] add(%reduce_sum.1552, %reduce_sum.1553)
}

%region_980.25193 (reduce_sum.195: f32[], reduce_sum.196: f32[]) -> f32[] {
  %reduce_sum.195 = f32[] parameter(0)
  %reduce_sum.196 = f32[] parameter(1)
  ROOT %reduce_sum.25192 = f32[] add(%reduce_sum.195, %reduce_sum.196)
}

%region_980.25193.clone (reduce_sum.1555: f32[], reduce_sum.1556: f32[]) -> f32[] {
  %reduce_sum.1555 = f32[] parameter(0)
  %reduce_sum.1556 = f32[] parameter(1)
  ROOT %reduce_sum.1557 = f32[] add(%reduce_sum.1555, %reduce_sum.1556)
}

%region_981.25204 (reduce_sum.25201: f32[], reduce_sum.25202: f32[]) -> f32[] {
  %reduce_sum.25201 = f32[] parameter(0)
  %reduce_sum.25202 = f32[] parameter(1)
  ROOT %reduce_sum.25203 = f32[] add(%reduce_sum.25201, %reduce_sum.25202)
}

%region_981.25204.clone (reduce_sum.1558: f32[], reduce_sum.1559: f32[]) -> f32[] {
  %reduce_sum.1558 = f32[] parameter(0)
  %reduce_sum.1559 = f32[] parameter(1)
  ROOT %reduce_sum.1560 = f32[] add(%reduce_sum.1558, %reduce_sum.1559)
}

%region_982.25212 (reduce_sum.25209: bf16[], reduce_sum.25210: bf16[]) -> bf16[] {
  %reduce_sum.25209 = bf16[] parameter(0)
  %reduce_sum.25210 = bf16[] parameter(1)
  ROOT %reduce_sum.25211 = bf16[] add(%reduce_sum.25209, %reduce_sum.25210)
}

%region_982.25212.clone (reduce_sum.1561: bf16[], reduce_sum.1562: bf16[]) -> bf16[] {
  %reduce_sum.1561 = bf16[] parameter(0)
  %reduce_sum.1562 = bf16[] parameter(1)
  ROOT %reduce_sum.1563 = bf16[] add(%reduce_sum.1561, %reduce_sum.1562)
}

%region_983.25219 (reduce_sum.25216: f32[], reduce_sum.25217: f32[]) -> f32[] {
  %reduce_sum.25216 = f32[] parameter(0)
  %reduce_sum.25217 = f32[] parameter(1)
  ROOT %reduce_sum.25218 = f32[] add(%reduce_sum.25216, %reduce_sum.25217)
}

%region_984.25227 (reduce_sum.25224: bf16[], reduce_sum.25225: bf16[]) -> bf16[] {
  %reduce_sum.25224 = bf16[] parameter(0)
  %reduce_sum.25225 = bf16[] parameter(1)
  ROOT %reduce_sum.25226 = bf16[] add(%reduce_sum.25224, %reduce_sum.25225)
}

%region_984.25227.clone (reduce_sum.1564: bf16[], reduce_sum.1565: bf16[]) -> bf16[] {
  %reduce_sum.1564 = bf16[] parameter(0)
  %reduce_sum.1565 = bf16[] parameter(1)
  ROOT %reduce_sum.1566 = bf16[] add(%reduce_sum.1564, %reduce_sum.1565)
}

%region_985.25234 (reduce_sum.197: f32[], reduce_sum.198: f32[]) -> f32[] {
  %reduce_sum.197 = f32[] parameter(0)
  %reduce_sum.198 = f32[] parameter(1)
  ROOT %reduce_sum.25233 = f32[] add(%reduce_sum.197, %reduce_sum.198)
}

%add.6.clone (x.13: bf16[], y.13: bf16[]) -> bf16[] {
  %x.13 = bf16[] parameter(0)
  %y.13 = bf16[] parameter(1)
  ROOT %add.1026 = bf16[] add(%x.13, %y.13)
}

%region_986.25245 (reduce_sum.25242: f32[], reduce_sum.25243: f32[]) -> f32[] {
  %reduce_sum.25242 = f32[] parameter(0)
  %reduce_sum.25243 = f32[] parameter(1)
  ROOT %reduce_sum.25244 = f32[] add(%reduce_sum.25242, %reduce_sum.25243)
}

%region_986.25245.clone (reduce_sum.1567: f32[], reduce_sum.1568: f32[]) -> f32[] {
  %reduce_sum.1567 = f32[] parameter(0)
  %reduce_sum.1568 = f32[] parameter(1)
  ROOT %reduce_sum.1569 = f32[] add(%reduce_sum.1567, %reduce_sum.1568)
}

%add.7.clone (x.15: bf16[], y.15: bf16[]) -> bf16[] {
  %x.15 = bf16[] parameter(0)
  %y.15 = bf16[] parameter(1)
  ROOT %add.1028 = bf16[] add(%x.15, %y.15)
}

%region_987.25256 (reduce_sum.25253: f32[], reduce_sum.25254: f32[]) -> f32[] {
  %reduce_sum.25253 = f32[] parameter(0)
  %reduce_sum.25254 = f32[] parameter(1)
  ROOT %reduce_sum.25255 = f32[] add(%reduce_sum.25253, %reduce_sum.25254)
}

%region_987.25256.clone (reduce_sum.1570: f32[], reduce_sum.1571: f32[]) -> f32[] {
  %reduce_sum.1570 = f32[] parameter(0)
  %reduce_sum.1571 = f32[] parameter(1)
  ROOT %reduce_sum.1572 = f32[] add(%reduce_sum.1570, %reduce_sum.1571)
}

%add.8.clone (x.17: bf16[], y.17: bf16[]) -> bf16[] {
  %x.17 = bf16[] parameter(0)
  %y.17 = bf16[] parameter(1)
  ROOT %add.1030 = bf16[] add(%x.17, %y.17)
}

%region_988.25267 (reduce_sum.25264: f32[], reduce_sum.25265: f32[]) -> f32[] {
  %reduce_sum.25264 = f32[] parameter(0)
  %reduce_sum.25265 = f32[] parameter(1)
  ROOT %reduce_sum.25266 = f32[] add(%reduce_sum.25264, %reduce_sum.25265)
}

%region_988.25267.clone (reduce_sum.1573: f32[], reduce_sum.1574: f32[]) -> f32[] {
  %reduce_sum.1573 = f32[] parameter(0)
  %reduce_sum.1574 = f32[] parameter(1)
  ROOT %reduce_sum.1575 = f32[] add(%reduce_sum.1573, %reduce_sum.1574)
}

%add.9.clone (x.19: bf16[], y.19: bf16[]) -> bf16[] {
  %x.19 = bf16[] parameter(0)
  %y.19 = bf16[] parameter(1)
  ROOT %add.1032 = bf16[] add(%x.19, %y.19)
}

%region_989.25278 (reduce_sum.25275: f32[], reduce_sum.25276: f32[]) -> f32[] {
  %reduce_sum.25275 = f32[] parameter(0)
  %reduce_sum.25276 = f32[] parameter(1)
  ROOT %reduce_sum.25277 = f32[] add(%reduce_sum.25275, %reduce_sum.25276)
}

%region_989.25278.clone (reduce_sum.1576: f32[], reduce_sum.1577: f32[]) -> f32[] {
  %reduce_sum.1576 = f32[] parameter(0)
  %reduce_sum.1577 = f32[] parameter(1)
  ROOT %reduce_sum.1578 = f32[] add(%reduce_sum.1576, %reduce_sum.1577)
}

%add.10.clone (x.21: bf16[], y.21: bf16[]) -> bf16[] {
  %x.21 = bf16[] parameter(0)
  %y.21 = bf16[] parameter(1)
  ROOT %add.1034 = bf16[] add(%x.21, %y.21)
}

%region_990.25288 (reduce_sum.25285: f32[], reduce_sum.25286: f32[]) -> f32[] {
  %reduce_sum.25285 = f32[] parameter(0)
  %reduce_sum.25286 = f32[] parameter(1)
  ROOT %reduce_sum.25287 = f32[] add(%reduce_sum.25285, %reduce_sum.25286)
}

%region_990.25288.clone (reduce_sum.1579: f32[], reduce_sum.1580: f32[]) -> f32[] {
  %reduce_sum.1579 = f32[] parameter(0)
  %reduce_sum.1580 = f32[] parameter(1)
  ROOT %reduce_sum.1581 = f32[] add(%reduce_sum.1579, %reduce_sum.1580)
}

%region_991.25299 (reduce_sum.25296: f32[], reduce_sum.25297: f32[]) -> f32[] {
  %reduce_sum.25296 = f32[] parameter(0)
  %reduce_sum.25297 = f32[] parameter(1)
  ROOT %reduce_sum.25298 = f32[] add(%reduce_sum.25296, %reduce_sum.25297)
}

%region_991.25299.clone (reduce_sum.1582: f32[], reduce_sum.1586: f32[]) -> f32[] {
  %reduce_sum.1582 = f32[] parameter(0)
  %reduce_sum.1586 = f32[] parameter(1)
  ROOT %reduce_sum.1588 = f32[] add(%reduce_sum.1582, %reduce_sum.1586)
}

%region_992.25310 (reduce_sum.25307: f32[], reduce_sum.25308: f32[]) -> f32[] {
  %reduce_sum.25307 = f32[] parameter(0)
  %reduce_sum.25308 = f32[] parameter(1)
  ROOT %reduce_sum.25309 = f32[] add(%reduce_sum.25307, %reduce_sum.25308)
}

%region_992.25310.clone (reduce_sum.1589: f32[], reduce_sum.1590: f32[]) -> f32[] {
  %reduce_sum.1589 = f32[] parameter(0)
  %reduce_sum.1590 = f32[] parameter(1)
  ROOT %reduce_sum.1591 = f32[] add(%reduce_sum.1589, %reduce_sum.1590)
}

%region_993.25321 (reduce_sum.25318: f32[], reduce_sum.25319: f32[]) -> f32[] {
  %reduce_sum.25318 = f32[] parameter(0)
  %reduce_sum.25319 = f32[] parameter(1)
  ROOT %reduce_sum.25320 = f32[] add(%reduce_sum.25318, %reduce_sum.25319)
}

%region_993.25321.clone (reduce_sum.1592: f32[], reduce_sum.1593: f32[]) -> f32[] {
  %reduce_sum.1592 = f32[] parameter(0)
  %reduce_sum.1593 = f32[] parameter(1)
  ROOT %reduce_sum.1594 = f32[] add(%reduce_sum.1592, %reduce_sum.1593)
}

%region_994.25329 (reduce_sum.25326: bf16[], reduce_sum.25327: bf16[]) -> bf16[] {
  %reduce_sum.25326 = bf16[] parameter(0)
  %reduce_sum.25327 = bf16[] parameter(1)
  ROOT %reduce_sum.25328 = bf16[] add(%reduce_sum.25326, %reduce_sum.25327)
}

%region_994.25329.clone (reduce_sum.1595: bf16[], reduce_sum.1596: bf16[]) -> bf16[] {
  %reduce_sum.1595 = bf16[] parameter(0)
  %reduce_sum.1596 = bf16[] parameter(1)
  ROOT %reduce_sum.1597 = bf16[] add(%reduce_sum.1595, %reduce_sum.1596)
}

%region_995.25336 (reduce_sum.25333: f32[], reduce_sum.25334: f32[]) -> f32[] {
  %reduce_sum.25333 = f32[] parameter(0)
  %reduce_sum.25334 = f32[] parameter(1)
  ROOT %reduce_sum.25335 = f32[] add(%reduce_sum.25333, %reduce_sum.25334)
}

%region_996.25344 (reduce_sum.25341: bf16[], reduce_sum.25342: bf16[]) -> bf16[] {
  %reduce_sum.25341 = bf16[] parameter(0)
  %reduce_sum.25342 = bf16[] parameter(1)
  ROOT %reduce_sum.25343 = bf16[] add(%reduce_sum.25341, %reduce_sum.25342)
}

%region_996.25344.clone (reduce_sum.1598: bf16[], reduce_sum.1599: bf16[]) -> bf16[] {
  %reduce_sum.1598 = bf16[] parameter(0)
  %reduce_sum.1599 = bf16[] parameter(1)
  ROOT %reduce_sum.1600 = bf16[] add(%reduce_sum.1598, %reduce_sum.1599)
}

%region_997.25351 (reduce_sum.25348: f32[], reduce_sum.25349: f32[]) -> f32[] {
  %reduce_sum.25348 = f32[] parameter(0)
  %reduce_sum.25349 = f32[] parameter(1)
  ROOT %reduce_sum.25350 = f32[] add(%reduce_sum.25348, %reduce_sum.25349)
}

%add.11.clone (x.23: bf16[], y.23: bf16[]) -> bf16[] {
  %x.23 = bf16[] parameter(0)
  %y.23 = bf16[] parameter(1)
  ROOT %add.1036 = bf16[] add(%x.23, %y.23)
}

%region_998.25362 (reduce_sum.25359: f32[], reduce_sum.25360: f32[]) -> f32[] {
  %reduce_sum.25359 = f32[] parameter(0)
  %reduce_sum.25360 = f32[] parameter(1)
  ROOT %reduce_sum.25361 = f32[] add(%reduce_sum.25359, %reduce_sum.25360)
}

%region_998.25362.clone (reduce_sum.1601: f32[], reduce_sum.1602: f32[]) -> f32[] {
  %reduce_sum.1601 = f32[] parameter(0)
  %reduce_sum.1602 = f32[] parameter(1)
  ROOT %reduce_sum.1603 = f32[] add(%reduce_sum.1601, %reduce_sum.1602)
}

%add.12.clone (x.25: bf16[], y.25: bf16[]) -> bf16[] {
  %x.25 = bf16[] parameter(0)
  %y.25 = bf16[] parameter(1)
  ROOT %add.1038 = bf16[] add(%x.25, %y.25)
}

%region_999.25373 (reduce_sum.25370: f32[], reduce_sum.199: f32[]) -> f32[] {
  %reduce_sum.25370 = f32[] parameter(0)
  %reduce_sum.199 = f32[] parameter(1)
  ROOT %reduce_sum.25372 = f32[] add(%reduce_sum.25370, %reduce_sum.199)
}

%region_999.25373.clone (reduce_sum.1604: f32[], reduce_sum.1605: f32[]) -> f32[] {
  %reduce_sum.1604 = f32[] parameter(0)
  %reduce_sum.1605 = f32[] parameter(1)
  ROOT %reduce_sum.1606 = f32[] add(%reduce_sum.1604, %reduce_sum.1605)
}

%add.13.clone (x.27: bf16[], y.27: bf16[]) -> bf16[] {
  %x.27 = bf16[] parameter(0)
  %y.27 = bf16[] parameter(1)
  ROOT %add.1040 = bf16[] add(%x.27, %y.27)
}

%region_1000.25384 (reduce_sum.25381: f32[], reduce_sum.25382: f32[]) -> f32[] {
  %reduce_sum.25381 = f32[] parameter(0)
  %reduce_sum.25382 = f32[] parameter(1)
  ROOT %reduce_sum.25383 = f32[] add(%reduce_sum.25381, %reduce_sum.25382)
}

%region_1000.25384.clone (reduce_sum.1607: f32[], reduce_sum.1608: f32[]) -> f32[] {
  %reduce_sum.1607 = f32[] parameter(0)
  %reduce_sum.1608 = f32[] parameter(1)
  ROOT %reduce_sum.1609 = f32[] add(%reduce_sum.1607, %reduce_sum.1608)
}

%add.14.clone (x.29: bf16[], y.29: bf16[]) -> bf16[] {
  %x.29 = bf16[] parameter(0)
  %y.29 = bf16[] parameter(1)
  ROOT %add.1042 = bf16[] add(%x.29, %y.29)
}

%region_1001.25395 (reduce_sum.25392: f32[], reduce_sum.25393: f32[]) -> f32[] {
  %reduce_sum.25392 = f32[] parameter(0)
  %reduce_sum.25393 = f32[] parameter(1)
  ROOT %reduce_sum.25394 = f32[] add(%reduce_sum.25392, %reduce_sum.25393)
}

%region_1001.25395.clone (reduce_sum.1610: f32[], reduce_sum.1611: f32[]) -> f32[] {
  %reduce_sum.1610 = f32[] parameter(0)
  %reduce_sum.1611 = f32[] parameter(1)
  ROOT %reduce_sum.1612 = f32[] add(%reduce_sum.1610, %reduce_sum.1611)
}

%add.15.clone (x.31: bf16[], y.31: bf16[]) -> bf16[] {
  %x.31 = bf16[] parameter(0)
  %y.31 = bf16[] parameter(1)
  ROOT %add.1044 = bf16[] add(%x.31, %y.31)
}

%region_1002.25405 (reduce_sum.25402: f32[], reduce_sum.200: f32[]) -> f32[] {
  %reduce_sum.25402 = f32[] parameter(0)
  %reduce_sum.200 = f32[] parameter(1)
  ROOT %reduce_sum.25404 = f32[] add(%reduce_sum.25402, %reduce_sum.200)
}

%region_1002.25405.clone (reduce_sum.1616: f32[], reduce_sum.1618: f32[]) -> f32[] {
  %reduce_sum.1616 = f32[] parameter(0)
  %reduce_sum.1618 = f32[] parameter(1)
  ROOT %reduce_sum.1619 = f32[] add(%reduce_sum.1616, %reduce_sum.1618)
}

%region_1003.25416 (reduce_sum.25413: f32[], reduce_sum.201: f32[]) -> f32[] {
  %reduce_sum.25413 = f32[] parameter(0)
  %reduce_sum.201 = f32[] parameter(1)
  ROOT %reduce_sum.25415 = f32[] add(%reduce_sum.25413, %reduce_sum.201)
}

%region_1003.25416.clone (reduce_sum.1620: f32[], reduce_sum.1621: f32[]) -> f32[] {
  %reduce_sum.1620 = f32[] parameter(0)
  %reduce_sum.1621 = f32[] parameter(1)
  ROOT %reduce_sum.1622 = f32[] add(%reduce_sum.1620, %reduce_sum.1621)
}

%region_1004.25427 (reduce_sum.25424: f32[], reduce_sum.25425: f32[]) -> f32[] {
  %reduce_sum.25424 = f32[] parameter(0)
  %reduce_sum.25425 = f32[] parameter(1)
  ROOT %reduce_sum.25426 = f32[] add(%reduce_sum.25424, %reduce_sum.25425)
}

%region_1004.25427.clone (reduce_sum.1626: f32[], reduce_sum.1628: f32[]) -> f32[] {
  %reduce_sum.1626 = f32[] parameter(0)
  %reduce_sum.1628 = f32[] parameter(1)
  ROOT %reduce_sum.1629 = f32[] add(%reduce_sum.1626, %reduce_sum.1628)
}

%region_1005.25438 (reduce_sum.202: f32[], reduce_sum.25436: f32[]) -> f32[] {
  %reduce_sum.202 = f32[] parameter(0)
  %reduce_sum.25436 = f32[] parameter(1)
  ROOT %reduce_sum.25437 = f32[] add(%reduce_sum.202, %reduce_sum.25436)
}

%region_1005.25438.clone (reduce_sum.1630: f32[], reduce_sum.1631: f32[]) -> f32[] {
  %reduce_sum.1630 = f32[] parameter(0)
  %reduce_sum.1631 = f32[] parameter(1)
  ROOT %reduce_sum.1632 = f32[] add(%reduce_sum.1630, %reduce_sum.1631)
}

%region_1006.25446 (reduce_sum.203: bf16[], reduce_sum.25444: bf16[]) -> bf16[] {
  %reduce_sum.203 = bf16[] parameter(0)
  %reduce_sum.25444 = bf16[] parameter(1)
  ROOT %reduce_sum.204 = bf16[] add(%reduce_sum.203, %reduce_sum.25444)
}

%region_1006.25446.clone (reduce_sum.1633: bf16[], reduce_sum.1634: bf16[]) -> bf16[] {
  %reduce_sum.1633 = bf16[] parameter(0)
  %reduce_sum.1634 = bf16[] parameter(1)
  ROOT %reduce_sum.1635 = bf16[] add(%reduce_sum.1633, %reduce_sum.1634)
}

%region_1007.25453 (reduce_sum.205: f32[], reduce_sum.25451: f32[]) -> f32[] {
  %reduce_sum.205 = f32[] parameter(0)
  %reduce_sum.25451 = f32[] parameter(1)
  ROOT %reduce_sum.206 = f32[] add(%reduce_sum.205, %reduce_sum.25451)
}

%region_1008.25461 (reduce_sum.25458: bf16[], reduce_sum.25459: bf16[]) -> bf16[] {
  %reduce_sum.25458 = bf16[] parameter(0)
  %reduce_sum.25459 = bf16[] parameter(1)
  ROOT %reduce_sum.207 = bf16[] add(%reduce_sum.25458, %reduce_sum.25459)
}

%region_1008.25461.clone (reduce_sum.1636: bf16[], reduce_sum.1637: bf16[]) -> bf16[] {
  %reduce_sum.1636 = bf16[] parameter(0)
  %reduce_sum.1637 = bf16[] parameter(1)
  ROOT %reduce_sum.1638 = bf16[] add(%reduce_sum.1636, %reduce_sum.1637)
}

%region_1009.25468 (reduce_sum.25465: f32[], reduce_sum.25466: f32[]) -> f32[] {
  %reduce_sum.25465 = f32[] parameter(0)
  %reduce_sum.25466 = f32[] parameter(1)
  ROOT %reduce_sum.25467 = f32[] add(%reduce_sum.25465, %reduce_sum.25466)
}

%add.16.clone (x.33: bf16[], y.33: bf16[]) -> bf16[] {
  %x.33 = bf16[] parameter(0)
  %y.33 = bf16[] parameter(1)
  ROOT %add.1046 = bf16[] add(%x.33, %y.33)
}

%region_1010.25479 (reduce_sum.25476: f32[], reduce_sum.25477: f32[]) -> f32[] {
  %reduce_sum.25476 = f32[] parameter(0)
  %reduce_sum.25477 = f32[] parameter(1)
  ROOT %reduce_sum.25478 = f32[] add(%reduce_sum.25476, %reduce_sum.25477)
}

%region_1010.25479.clone (reduce_sum.1639: f32[], reduce_sum.1640: f32[]) -> f32[] {
  %reduce_sum.1639 = f32[] parameter(0)
  %reduce_sum.1640 = f32[] parameter(1)
  ROOT %reduce_sum.1641 = f32[] add(%reduce_sum.1639, %reduce_sum.1640)
}

%add.17.clone (x.35: bf16[], y.35: bf16[]) -> bf16[] {
  %x.35 = bf16[] parameter(0)
  %y.35 = bf16[] parameter(1)
  ROOT %add.1048 = bf16[] add(%x.35, %y.35)
}

%region_1011.25490 (reduce_sum.25487: f32[], reduce_sum.25488: f32[]) -> f32[] {
  %reduce_sum.25487 = f32[] parameter(0)
  %reduce_sum.25488 = f32[] parameter(1)
  ROOT %reduce_sum.25489 = f32[] add(%reduce_sum.25487, %reduce_sum.25488)
}

%region_1011.25490.clone (reduce_sum.1642: f32[], reduce_sum.1643: f32[]) -> f32[] {
  %reduce_sum.1642 = f32[] parameter(0)
  %reduce_sum.1643 = f32[] parameter(1)
  ROOT %reduce_sum.1644 = f32[] add(%reduce_sum.1642, %reduce_sum.1643)
}

%add.18.clone (x.37: bf16[], y.37: bf16[]) -> bf16[] {
  %x.37 = bf16[] parameter(0)
  %y.37 = bf16[] parameter(1)
  ROOT %add.1050 = bf16[] add(%x.37, %y.37)
}

%region_1012.25501 (reduce_sum.25498: f32[], reduce_sum.25499: f32[]) -> f32[] {
  %reduce_sum.25498 = f32[] parameter(0)
  %reduce_sum.25499 = f32[] parameter(1)
  ROOT %reduce_sum.25500 = f32[] add(%reduce_sum.25498, %reduce_sum.25499)
}

%region_1012.25501.clone (reduce_sum.1645: f32[], reduce_sum.1646: f32[]) -> f32[] {
  %reduce_sum.1645 = f32[] parameter(0)
  %reduce_sum.1646 = f32[] parameter(1)
  ROOT %reduce_sum.1647 = f32[] add(%reduce_sum.1645, %reduce_sum.1646)
}

%add.19.clone (x.39: bf16[], y.39: bf16[]) -> bf16[] {
  %x.39 = bf16[] parameter(0)
  %y.39 = bf16[] parameter(1)
  ROOT %add.1052 = bf16[] add(%x.39, %y.39)
}

%region_1013.25512 (reduce_sum.25509: f32[], reduce_sum.25510: f32[]) -> f32[] {
  %reduce_sum.25509 = f32[] parameter(0)
  %reduce_sum.25510 = f32[] parameter(1)
  ROOT %reduce_sum.25511 = f32[] add(%reduce_sum.25509, %reduce_sum.25510)
}

%region_1013.25512.clone (reduce_sum.1648: f32[], reduce_sum.1649: f32[]) -> f32[] {
  %reduce_sum.1648 = f32[] parameter(0)
  %reduce_sum.1649 = f32[] parameter(1)
  ROOT %reduce_sum.1650 = f32[] add(%reduce_sum.1648, %reduce_sum.1649)
}

%add.20.clone (x.41: bf16[], y.41: bf16[]) -> bf16[] {
  %x.41 = bf16[] parameter(0)
  %y.41 = bf16[] parameter(1)
  ROOT %add.1054 = bf16[] add(%x.41, %y.41)
}

%region_1014.25522 (reduce_sum.25519: f32[], reduce_sum.25520: f32[]) -> f32[] {
  %reduce_sum.25519 = f32[] parameter(0)
  %reduce_sum.25520 = f32[] parameter(1)
  ROOT %reduce_sum.25521 = f32[] add(%reduce_sum.25519, %reduce_sum.25520)
}

%region_1014.25522.clone (reduce_sum.1654: f32[], reduce_sum.1656: f32[]) -> f32[] {
  %reduce_sum.1654 = f32[] parameter(0)
  %reduce_sum.1656 = f32[] parameter(1)
  ROOT %reduce_sum.1657 = f32[] add(%reduce_sum.1654, %reduce_sum.1656)
}

%region_1015.25533 (reduce_sum.25530: f32[], reduce_sum.25531: f32[]) -> f32[] {
  %reduce_sum.25530 = f32[] parameter(0)
  %reduce_sum.25531 = f32[] parameter(1)
  ROOT %reduce_sum.25532 = f32[] add(%reduce_sum.25530, %reduce_sum.25531)
}

%region_1015.25533.clone (reduce_sum.1658: f32[], reduce_sum.1662: f32[]) -> f32[] {
  %reduce_sum.1658 = f32[] parameter(0)
  %reduce_sum.1662 = f32[] parameter(1)
  ROOT %reduce_sum.1664 = f32[] add(%reduce_sum.1658, %reduce_sum.1662)
}

%region_1016.25544 (reduce_sum.25541: f32[], reduce_sum.208: f32[]) -> f32[] {
  %reduce_sum.25541 = f32[] parameter(0)
  %reduce_sum.208 = f32[] parameter(1)
  ROOT %reduce_sum.209 = f32[] add(%reduce_sum.25541, %reduce_sum.208)
}

%region_1016.25544.clone (reduce_sum.1668: f32[], reduce_sum.1670: f32[]) -> f32[] {
  %reduce_sum.1668 = f32[] parameter(0)
  %reduce_sum.1670 = f32[] parameter(1)
  ROOT %reduce_sum.1671 = f32[] add(%reduce_sum.1668, %reduce_sum.1670)
}

%region_1017.25555 (reduce_sum.210: f32[], reduce_sum.211: f32[]) -> f32[] {
  %reduce_sum.210 = f32[] parameter(0)
  %reduce_sum.211 = f32[] parameter(1)
  ROOT %reduce_sum.212 = f32[] add(%reduce_sum.210, %reduce_sum.211)
}

%region_1017.25555.clone (reduce_sum.1672: f32[], reduce_sum.1673: f32[]) -> f32[] {
  %reduce_sum.1672 = f32[] parameter(0)
  %reduce_sum.1673 = f32[] parameter(1)
  ROOT %reduce_sum.1674 = f32[] add(%reduce_sum.1672, %reduce_sum.1673)
}

%region_1018.25563 (reduce_sum.213: bf16[], reduce_sum.214: bf16[]) -> bf16[] {
  %reduce_sum.213 = bf16[] parameter(0)
  %reduce_sum.214 = bf16[] parameter(1)
  ROOT %reduce_sum.25562 = bf16[] add(%reduce_sum.213, %reduce_sum.214)
}

%region_1018.25563.clone (reduce_sum.1675: bf16[], reduce_sum.1676: bf16[]) -> bf16[] {
  %reduce_sum.1675 = bf16[] parameter(0)
  %reduce_sum.1676 = bf16[] parameter(1)
  ROOT %reduce_sum.1677 = bf16[] add(%reduce_sum.1675, %reduce_sum.1676)
}

%region_1019.25570 (reduce_sum.25567: f32[], reduce_sum.25568: f32[]) -> f32[] {
  %reduce_sum.25567 = f32[] parameter(0)
  %reduce_sum.25568 = f32[] parameter(1)
  ROOT %reduce_sum.25569 = f32[] add(%reduce_sum.25567, %reduce_sum.25568)
}

%region_1020.25578 (reduce_sum.215: bf16[], reduce_sum.25576: bf16[]) -> bf16[] {
  %reduce_sum.215 = bf16[] parameter(0)
  %reduce_sum.25576 = bf16[] parameter(1)
  ROOT %reduce_sum.25577 = bf16[] add(%reduce_sum.215, %reduce_sum.25576)
}

%region_1020.25578.clone (reduce_sum.1678: bf16[], reduce_sum.1682: bf16[]) -> bf16[] {
  %reduce_sum.1678 = bf16[] parameter(0)
  %reduce_sum.1682 = bf16[] parameter(1)
  ROOT %reduce_sum.1684 = bf16[] add(%reduce_sum.1678, %reduce_sum.1682)
}

%region_1021.25585 (reduce_sum.25582: f32[], reduce_sum.25583: f32[]) -> f32[] {
  %reduce_sum.25582 = f32[] parameter(0)
  %reduce_sum.25583 = f32[] parameter(1)
  ROOT %reduce_sum.25584 = f32[] add(%reduce_sum.25582, %reduce_sum.25583)
}

%add.21.clone (x.43: bf16[], y.43: bf16[]) -> bf16[] {
  %x.43 = bf16[] parameter(0)
  %y.43 = bf16[] parameter(1)
  ROOT %add.1056 = bf16[] add(%x.43, %y.43)
}

%region_1022.25596 (reduce_sum.25593: f32[], reduce_sum.25594: f32[]) -> f32[] {
  %reduce_sum.25593 = f32[] parameter(0)
  %reduce_sum.25594 = f32[] parameter(1)
  ROOT %reduce_sum.25595 = f32[] add(%reduce_sum.25593, %reduce_sum.25594)
}

%region_1022.25596.clone (reduce_sum.1685: f32[], reduce_sum.1686: f32[]) -> f32[] {
  %reduce_sum.1685 = f32[] parameter(0)
  %reduce_sum.1686 = f32[] parameter(1)
  ROOT %reduce_sum.1687 = f32[] add(%reduce_sum.1685, %reduce_sum.1686)
}

%add.22.clone (x.45: bf16[], y.45: bf16[]) -> bf16[] {
  %x.45 = bf16[] parameter(0)
  %y.45 = bf16[] parameter(1)
  ROOT %add.1058 = bf16[] add(%x.45, %y.45)
}

%region_1023.25607 (reduce_sum.216: f32[], reduce_sum.25605: f32[]) -> f32[] {
  %reduce_sum.216 = f32[] parameter(0)
  %reduce_sum.25605 = f32[] parameter(1)
  ROOT %reduce_sum.217 = f32[] add(%reduce_sum.216, %reduce_sum.25605)
}

%region_1023.25607.clone (reduce_sum.1688: f32[], reduce_sum.1689: f32[]) -> f32[] {
  %reduce_sum.1688 = f32[] parameter(0)
  %reduce_sum.1689 = f32[] parameter(1)
  ROOT %reduce_sum.1690 = f32[] add(%reduce_sum.1688, %reduce_sum.1689)
}

%add.23.clone (x.47: bf16[], y.47: bf16[]) -> bf16[] {
  %x.47 = bf16[] parameter(0)
  %y.47 = bf16[] parameter(1)
  ROOT %add.1060 = bf16[] add(%x.47, %y.47)
}

%region_1024.25618 (reduce_sum.25615: f32[], reduce_sum.25616: f32[]) -> f32[] {
  %reduce_sum.25615 = f32[] parameter(0)
  %reduce_sum.25616 = f32[] parameter(1)
  ROOT %reduce_sum.25617 = f32[] add(%reduce_sum.25615, %reduce_sum.25616)
}

%region_1024.25618.clone (reduce_sum.1691: f32[], reduce_sum.1692: f32[]) -> f32[] {
  %reduce_sum.1691 = f32[] parameter(0)
  %reduce_sum.1692 = f32[] parameter(1)
  ROOT %reduce_sum.1693 = f32[] add(%reduce_sum.1691, %reduce_sum.1692)
}

%add.24.clone (x.49: bf16[], y.49: bf16[]) -> bf16[] {
  %x.49 = bf16[] parameter(0)
  %y.49 = bf16[] parameter(1)
  ROOT %add.1062 = bf16[] add(%x.49, %y.49)
}

%region_1025.25629 (reduce_sum.25626: f32[], reduce_sum.25627: f32[]) -> f32[] {
  %reduce_sum.25626 = f32[] parameter(0)
  %reduce_sum.25627 = f32[] parameter(1)
  ROOT %reduce_sum.25628 = f32[] add(%reduce_sum.25626, %reduce_sum.25627)
}

%region_1025.25629.clone (reduce_sum.1694: f32[], reduce_sum.1695: f32[]) -> f32[] {
  %reduce_sum.1694 = f32[] parameter(0)
  %reduce_sum.1695 = f32[] parameter(1)
  ROOT %reduce_sum.1696 = f32[] add(%reduce_sum.1694, %reduce_sum.1695)
}

%add.25.clone (x.51: bf16[], y.51: bf16[]) -> bf16[] {
  %x.51 = bf16[] parameter(0)
  %y.51 = bf16[] parameter(1)
  ROOT %add.1064 = bf16[] add(%x.51, %y.51)
}

%region_1026.25639 (reduce_sum.25636: f32[], reduce_sum.25637: f32[]) -> f32[] {
  %reduce_sum.25636 = f32[] parameter(0)
  %reduce_sum.25637 = f32[] parameter(1)
  ROOT %reduce_sum.25638 = f32[] add(%reduce_sum.25636, %reduce_sum.25637)
}

%region_1026.25639.clone (reduce_sum.1697: f32[], reduce_sum.1698: f32[]) -> f32[] {
  %reduce_sum.1697 = f32[] parameter(0)
  %reduce_sum.1698 = f32[] parameter(1)
  ROOT %reduce_sum.1699 = f32[] add(%reduce_sum.1697, %reduce_sum.1698)
}

%region_1027.25650 (reduce_sum.25647: f32[], reduce_sum.25648: f32[]) -> f32[] {
  %reduce_sum.25647 = f32[] parameter(0)
  %reduce_sum.25648 = f32[] parameter(1)
  ROOT %reduce_sum.25649 = f32[] add(%reduce_sum.25647, %reduce_sum.25648)
}

%region_1027.25650.clone (reduce_sum.1700: f32[], reduce_sum.1701: f32[]) -> f32[] {
  %reduce_sum.1700 = f32[] parameter(0)
  %reduce_sum.1701 = f32[] parameter(1)
  ROOT %reduce_sum.1702 = f32[] add(%reduce_sum.1700, %reduce_sum.1701)
}

%region_1028.25661 (reduce_sum.25658: f32[], reduce_sum.25659: f32[]) -> f32[] {
  %reduce_sum.25658 = f32[] parameter(0)
  %reduce_sum.25659 = f32[] parameter(1)
  ROOT %reduce_sum.25660 = f32[] add(%reduce_sum.25658, %reduce_sum.25659)
}

%region_1028.25661.clone (reduce_sum.1703: f32[], reduce_sum.1704: f32[]) -> f32[] {
  %reduce_sum.1703 = f32[] parameter(0)
  %reduce_sum.1704 = f32[] parameter(1)
  ROOT %reduce_sum.1705 = f32[] add(%reduce_sum.1703, %reduce_sum.1704)
}

%region_1029.25672 (reduce_sum.25669: f32[], reduce_sum.25670: f32[]) -> f32[] {
  %reduce_sum.25669 = f32[] parameter(0)
  %reduce_sum.25670 = f32[] parameter(1)
  ROOT %reduce_sum.25671 = f32[] add(%reduce_sum.25669, %reduce_sum.25670)
}

%region_1029.25672.clone (reduce_sum.1706: f32[], reduce_sum.1707: f32[]) -> f32[] {
  %reduce_sum.1706 = f32[] parameter(0)
  %reduce_sum.1707 = f32[] parameter(1)
  ROOT %reduce_sum.1708 = f32[] add(%reduce_sum.1706, %reduce_sum.1707)
}

%region_1030.25680 (reduce_sum.25677: bf16[], reduce_sum.25678: bf16[]) -> bf16[] {
  %reduce_sum.25677 = bf16[] parameter(0)
  %reduce_sum.25678 = bf16[] parameter(1)
  ROOT %reduce_sum.25679 = bf16[] add(%reduce_sum.25677, %reduce_sum.25678)
}

%region_1030.25680.clone (reduce_sum.1709: bf16[], reduce_sum.1710: bf16[]) -> bf16[] {
  %reduce_sum.1709 = bf16[] parameter(0)
  %reduce_sum.1710 = bf16[] parameter(1)
  ROOT %reduce_sum.1711 = bf16[] add(%reduce_sum.1709, %reduce_sum.1710)
}

%region_1031.25687 (reduce_sum.25684: f32[], reduce_sum.25685: f32[]) -> f32[] {
  %reduce_sum.25684 = f32[] parameter(0)
  %reduce_sum.25685 = f32[] parameter(1)
  ROOT %reduce_sum.25686 = f32[] add(%reduce_sum.25684, %reduce_sum.25685)
}

%region_1032.25695 (reduce_sum.25692: bf16[], reduce_sum.25693: bf16[]) -> bf16[] {
  %reduce_sum.25692 = bf16[] parameter(0)
  %reduce_sum.25693 = bf16[] parameter(1)
  ROOT %reduce_sum.25694 = bf16[] add(%reduce_sum.25692, %reduce_sum.25693)
}

%region_1032.25695.clone (reduce_sum.1712: bf16[], reduce_sum.1713: bf16[]) -> bf16[] {
  %reduce_sum.1712 = bf16[] parameter(0)
  %reduce_sum.1713 = bf16[] parameter(1)
  ROOT %reduce_sum.1714 = bf16[] add(%reduce_sum.1712, %reduce_sum.1713)
}

%region_1033.25702 (reduce_sum.25699: f32[], reduce_sum.25700: f32[]) -> f32[] {
  %reduce_sum.25699 = f32[] parameter(0)
  %reduce_sum.25700 = f32[] parameter(1)
  ROOT %reduce_sum.25701 = f32[] add(%reduce_sum.25699, %reduce_sum.25700)
}

%add.26.clone (x.53: bf16[], y.53: bf16[]) -> bf16[] {
  %x.53 = bf16[] parameter(0)
  %y.53 = bf16[] parameter(1)
  ROOT %add.1066 = bf16[] add(%x.53, %y.53)
}

%region_1034.25713 (reduce_sum.25710: f32[], reduce_sum.25711: f32[]) -> f32[] {
  %reduce_sum.25710 = f32[] parameter(0)
  %reduce_sum.25711 = f32[] parameter(1)
  ROOT %reduce_sum.25712 = f32[] add(%reduce_sum.25710, %reduce_sum.25711)
}

%region_1034.25713.clone (reduce_sum.1715: f32[], reduce_sum.1716: f32[]) -> f32[] {
  %reduce_sum.1715 = f32[] parameter(0)
  %reduce_sum.1716 = f32[] parameter(1)
  ROOT %reduce_sum.1720 = f32[] add(%reduce_sum.1715, %reduce_sum.1716)
}

%add.27.clone (x.55: bf16[], y.55: bf16[]) -> bf16[] {
  %x.55 = bf16[] parameter(0)
  %y.55 = bf16[] parameter(1)
  ROOT %add.1068 = bf16[] add(%x.55, %y.55)
}

%region_1035.25724 (reduce_sum.25721: f32[], reduce_sum.25722: f32[]) -> f32[] {
  %reduce_sum.25721 = f32[] parameter(0)
  %reduce_sum.25722 = f32[] parameter(1)
  ROOT %reduce_sum.25723 = f32[] add(%reduce_sum.25721, %reduce_sum.25722)
}

%region_1035.25724.clone (reduce_sum.1722: f32[], reduce_sum.1723: f32[]) -> f32[] {
  %reduce_sum.1722 = f32[] parameter(0)
  %reduce_sum.1723 = f32[] parameter(1)
  ROOT %reduce_sum.1724 = f32[] add(%reduce_sum.1722, %reduce_sum.1723)
}

%add.28.clone (x.57: bf16[], y.57: bf16[]) -> bf16[] {
  %x.57 = bf16[] parameter(0)
  %y.57 = bf16[] parameter(1)
  ROOT %add.1070 = bf16[] add(%x.57, %y.57)
}

%region_1036.25735 (reduce_sum.25732: f32[], reduce_sum.25733: f32[]) -> f32[] {
  %reduce_sum.25732 = f32[] parameter(0)
  %reduce_sum.25733 = f32[] parameter(1)
  ROOT %reduce_sum.25734 = f32[] add(%reduce_sum.25732, %reduce_sum.25733)
}

%region_1036.25735.clone (reduce_sum.1725: f32[], reduce_sum.1726: f32[]) -> f32[] {
  %reduce_sum.1725 = f32[] parameter(0)
  %reduce_sum.1726 = f32[] parameter(1)
  ROOT %reduce_sum.1727 = f32[] add(%reduce_sum.1725, %reduce_sum.1726)
}

%add.29.clone (x.59: bf16[], y.59: bf16[]) -> bf16[] {
  %x.59 = bf16[] parameter(0)
  %y.59 = bf16[] parameter(1)
  ROOT %add.1072 = bf16[] add(%x.59, %y.59)
}

%region_1037.25746 (reduce_sum.25743: f32[], reduce_sum.218: f32[]) -> f32[] {
  %reduce_sum.25743 = f32[] parameter(0)
  %reduce_sum.218 = f32[] parameter(1)
  ROOT %reduce_sum.219 = f32[] add(%reduce_sum.25743, %reduce_sum.218)
}

%region_1037.25746.clone (reduce_sum.1728: f32[], reduce_sum.1729: f32[]) -> f32[] {
  %reduce_sum.1728 = f32[] parameter(0)
  %reduce_sum.1729 = f32[] parameter(1)
  ROOT %reduce_sum.1730 = f32[] add(%reduce_sum.1728, %reduce_sum.1729)
}

%add.30.clone (x.61: bf16[], y.61: bf16[]) -> bf16[] {
  %x.61 = bf16[] parameter(0)
  %y.61 = bf16[] parameter(1)
  ROOT %add.1075 = bf16[] add(%x.61, %y.61)
}

%region_1038.25756 (reduce_sum.25753: f32[], reduce_sum.25754: f32[]) -> f32[] {
  %reduce_sum.25753 = f32[] parameter(0)
  %reduce_sum.25754 = f32[] parameter(1)
  ROOT %reduce_sum.25755 = f32[] add(%reduce_sum.25753, %reduce_sum.25754)
}

%region_1038.25756.clone (reduce_sum.1731: f32[], reduce_sum.1732: f32[]) -> f32[] {
  %reduce_sum.1731 = f32[] parameter(0)
  %reduce_sum.1732 = f32[] parameter(1)
  ROOT %reduce_sum.1733 = f32[] add(%reduce_sum.1731, %reduce_sum.1732)
}

%region_1039.25767 (reduce_sum.25764: f32[], reduce_sum.25765: f32[]) -> f32[] {
  %reduce_sum.25764 = f32[] parameter(0)
  %reduce_sum.25765 = f32[] parameter(1)
  ROOT %reduce_sum.220 = f32[] add(%reduce_sum.25764, %reduce_sum.25765)
}

%region_1039.25767.clone (reduce_sum.1734: f32[], reduce_sum.1735: f32[]) -> f32[] {
  %reduce_sum.1734 = f32[] parameter(0)
  %reduce_sum.1735 = f32[] parameter(1)
  ROOT %reduce_sum.1736 = f32[] add(%reduce_sum.1734, %reduce_sum.1735)
}

%region_1040.25778 (reduce_sum.25775: f32[], reduce_sum.25776: f32[]) -> f32[] {
  %reduce_sum.25775 = f32[] parameter(0)
  %reduce_sum.25776 = f32[] parameter(1)
  ROOT %reduce_sum.25777 = f32[] add(%reduce_sum.25775, %reduce_sum.25776)
}

%region_1040.25778.clone (reduce_sum.1737: f32[], reduce_sum.1738: f32[]) -> f32[] {
  %reduce_sum.1737 = f32[] parameter(0)
  %reduce_sum.1738 = f32[] parameter(1)
  ROOT %reduce_sum.1739 = f32[] add(%reduce_sum.1737, %reduce_sum.1738)
}

%region_1041.25789 (reduce_sum.25786: f32[], reduce_sum.25787: f32[]) -> f32[] {
  %reduce_sum.25786 = f32[] parameter(0)
  %reduce_sum.25787 = f32[] parameter(1)
  ROOT %reduce_sum.25788 = f32[] add(%reduce_sum.25786, %reduce_sum.25787)
}

%region_1041.25789.clone (reduce_sum.1740: f32[], reduce_sum.1741: f32[]) -> f32[] {
  %reduce_sum.1740 = f32[] parameter(0)
  %reduce_sum.1741 = f32[] parameter(1)
  ROOT %reduce_sum.1742 = f32[] add(%reduce_sum.1740, %reduce_sum.1741)
}

%region_1042.25797 (reduce_sum.25794: bf16[], reduce_sum.25795: bf16[]) -> bf16[] {
  %reduce_sum.25794 = bf16[] parameter(0)
  %reduce_sum.25795 = bf16[] parameter(1)
  ROOT %reduce_sum.25796 = bf16[] add(%reduce_sum.25794, %reduce_sum.25795)
}

%region_1042.25797.clone (reduce_sum.1743: bf16[], reduce_sum.1744: bf16[]) -> bf16[] {
  %reduce_sum.1743 = bf16[] parameter(0)
  %reduce_sum.1744 = bf16[] parameter(1)
  ROOT %reduce_sum.1745 = bf16[] add(%reduce_sum.1743, %reduce_sum.1744)
}

%region_1043.25804 (reduce_sum.25801: f32[], reduce_sum.25802: f32[]) -> f32[] {
  %reduce_sum.25801 = f32[] parameter(0)
  %reduce_sum.25802 = f32[] parameter(1)
  ROOT %reduce_sum.25803 = f32[] add(%reduce_sum.25801, %reduce_sum.25802)
}

%region_1044.25812 (reduce_sum.221: bf16[], reduce_sum.25810: bf16[]) -> bf16[] {
  %reduce_sum.221 = bf16[] parameter(0)
  %reduce_sum.25810 = bf16[] parameter(1)
  ROOT %reduce_sum.222 = bf16[] add(%reduce_sum.221, %reduce_sum.25810)
}

%region_1044.25812.clone (reduce_sum.1746: bf16[], reduce_sum.1747: bf16[]) -> bf16[] {
  %reduce_sum.1746 = bf16[] parameter(0)
  %reduce_sum.1747 = bf16[] parameter(1)
  ROOT %reduce_sum.1748 = bf16[] add(%reduce_sum.1746, %reduce_sum.1747)
}

%region_1045.25819 (reduce_sum.25816: f32[], reduce_sum.25817: f32[]) -> f32[] {
  %reduce_sum.25816 = f32[] parameter(0)
  %reduce_sum.25817 = f32[] parameter(1)
  ROOT %reduce_sum.25818 = f32[] add(%reduce_sum.25816, %reduce_sum.25817)
}

%add.31.clone (x.63: bf16[], y.63: bf16[]) -> bf16[] {
  %x.63 = bf16[] parameter(0)
  %y.63 = bf16[] parameter(1)
  ROOT %add.1077 = bf16[] add(%x.63, %y.63)
}

%region_1046.25830 (reduce_sum.25827: f32[], reduce_sum.25828: f32[]) -> f32[] {
  %reduce_sum.25827 = f32[] parameter(0)
  %reduce_sum.25828 = f32[] parameter(1)
  ROOT %reduce_sum.25829 = f32[] add(%reduce_sum.25827, %reduce_sum.25828)
}

%region_1046.25830.clone (reduce_sum.1749: f32[], reduce_sum.1750: f32[]) -> f32[] {
  %reduce_sum.1749 = f32[] parameter(0)
  %reduce_sum.1750 = f32[] parameter(1)
  ROOT %reduce_sum.1751 = f32[] add(%reduce_sum.1749, %reduce_sum.1750)
}

%add.32.clone (x.65: bf16[], y.65: bf16[]) -> bf16[] {
  %x.65 = bf16[] parameter(0)
  %y.65 = bf16[] parameter(1)
  ROOT %add.1079 = bf16[] add(%x.65, %y.65)
}

%region_1047.25841 (reduce_sum.25838: f32[], reduce_sum.25839: f32[]) -> f32[] {
  %reduce_sum.25838 = f32[] parameter(0)
  %reduce_sum.25839 = f32[] parameter(1)
  ROOT %reduce_sum.25840 = f32[] add(%reduce_sum.25838, %reduce_sum.25839)
}

%region_1047.25841.clone (reduce_sum.1752: f32[], reduce_sum.1753: f32[]) -> f32[] {
  %reduce_sum.1752 = f32[] parameter(0)
  %reduce_sum.1753 = f32[] parameter(1)
  ROOT %reduce_sum.1754 = f32[] add(%reduce_sum.1752, %reduce_sum.1753)
}

%add.33.clone (x.67: bf16[], y.67: bf16[]) -> bf16[] {
  %x.67 = bf16[] parameter(0)
  %y.67 = bf16[] parameter(1)
  ROOT %add.1081 = bf16[] add(%x.67, %y.67)
}

%region_1048.25852 (reduce_sum.25849: f32[], reduce_sum.25850: f32[]) -> f32[] {
  %reduce_sum.25849 = f32[] parameter(0)
  %reduce_sum.25850 = f32[] parameter(1)
  ROOT %reduce_sum.25851 = f32[] add(%reduce_sum.25849, %reduce_sum.25850)
}

%region_1048.25852.clone (reduce_sum.1755: f32[], reduce_sum.1756: f32[]) -> f32[] {
  %reduce_sum.1755 = f32[] parameter(0)
  %reduce_sum.1756 = f32[] parameter(1)
  ROOT %reduce_sum.1757 = f32[] add(%reduce_sum.1755, %reduce_sum.1756)
}

%add.34.clone (x.69: bf16[], y.69: bf16[]) -> bf16[] {
  %x.69 = bf16[] parameter(0)
  %y.69 = bf16[] parameter(1)
  ROOT %add.1083 = bf16[] add(%x.69, %y.69)
}

%region_1049.25863 (reduce_sum.25860: f32[], reduce_sum.25861: f32[]) -> f32[] {
  %reduce_sum.25860 = f32[] parameter(0)
  %reduce_sum.25861 = f32[] parameter(1)
  ROOT %reduce_sum.25862 = f32[] add(%reduce_sum.25860, %reduce_sum.25861)
}

%region_1049.25863.clone (reduce_sum.1758: f32[], reduce_sum.1762: f32[]) -> f32[] {
  %reduce_sum.1758 = f32[] parameter(0)
  %reduce_sum.1762 = f32[] parameter(1)
  ROOT %reduce_sum.1765 = f32[] add(%reduce_sum.1758, %reduce_sum.1762)
}

%add.35.clone (x.71: bf16[], y.71: bf16[]) -> bf16[] {
  %x.71 = bf16[] parameter(0)
  %y.71 = bf16[] parameter(1)
  ROOT %add.1085 = bf16[] add(%x.71, %y.71)
}

%region_1050.25873 (reduce_sum.223: f32[], reduce_sum.25871: f32[]) -> f32[] {
  %reduce_sum.223 = f32[] parameter(0)
  %reduce_sum.25871 = f32[] parameter(1)
  ROOT %reduce_sum.224 = f32[] add(%reduce_sum.223, %reduce_sum.25871)
}

%region_1050.25873.clone (reduce_sum.1766: f32[], reduce_sum.1767: f32[]) -> f32[] {
  %reduce_sum.1766 = f32[] parameter(0)
  %reduce_sum.1767 = f32[] parameter(1)
  ROOT %reduce_sum.1771 = f32[] add(%reduce_sum.1766, %reduce_sum.1767)
}

%region_1051.25884 (reduce_sum.225: f32[], reduce_sum.25882: f32[]) -> f32[] {
  %reduce_sum.225 = f32[] parameter(0)
  %reduce_sum.25882 = f32[] parameter(1)
  ROOT %reduce_sum.25883 = f32[] add(%reduce_sum.225, %reduce_sum.25882)
}

%region_1051.25884.clone (reduce_sum.1774: f32[], reduce_sum.1778: f32[]) -> f32[] {
  %reduce_sum.1774 = f32[] parameter(0)
  %reduce_sum.1778 = f32[] parameter(1)
  ROOT %reduce_sum.1780 = f32[] add(%reduce_sum.1774, %reduce_sum.1778)
}

%region_1052.25895 (reduce_sum.25892: f32[], reduce_sum.25893: f32[]) -> f32[] {
  %reduce_sum.25892 = f32[] parameter(0)
  %reduce_sum.25893 = f32[] parameter(1)
  ROOT %reduce_sum.25894 = f32[] add(%reduce_sum.25892, %reduce_sum.25893)
}

%region_1052.25895.clone (reduce_sum.1781: f32[], reduce_sum.1782: f32[]) -> f32[] {
  %reduce_sum.1781 = f32[] parameter(0)
  %reduce_sum.1782 = f32[] parameter(1)
  ROOT %reduce_sum.1783 = f32[] add(%reduce_sum.1781, %reduce_sum.1782)
}

%region_1053.25906 (reduce_sum.25903: f32[], reduce_sum.25904: f32[]) -> f32[] {
  %reduce_sum.25903 = f32[] parameter(0)
  %reduce_sum.25904 = f32[] parameter(1)
  ROOT %reduce_sum.25905 = f32[] add(%reduce_sum.25903, %reduce_sum.25904)
}

%region_1053.25906.clone (reduce_sum.1787: f32[], reduce_sum.1792: f32[]) -> f32[] {
  %reduce_sum.1787 = f32[] parameter(0)
  %reduce_sum.1792 = f32[] parameter(1)
  ROOT %reduce_sum.1794 = f32[] add(%reduce_sum.1787, %reduce_sum.1792)
}

%region_1054.25914 (reduce_sum.25911: bf16[], reduce_sum.25912: bf16[]) -> bf16[] {
  %reduce_sum.25911 = bf16[] parameter(0)
  %reduce_sum.25912 = bf16[] parameter(1)
  ROOT %reduce_sum.25913 = bf16[] add(%reduce_sum.25911, %reduce_sum.25912)
}

%region_1054.25914.clone (reduce_sum.1795: bf16[], reduce_sum.1796: bf16[]) -> bf16[] {
  %reduce_sum.1795 = bf16[] parameter(0)
  %reduce_sum.1796 = bf16[] parameter(1)
  ROOT %reduce_sum.1797 = bf16[] add(%reduce_sum.1795, %reduce_sum.1796)
}

%region_1055.25921 (reduce_sum.25918: f32[], reduce_sum.25919: f32[]) -> f32[] {
  %reduce_sum.25918 = f32[] parameter(0)
  %reduce_sum.25919 = f32[] parameter(1)
  ROOT %reduce_sum.25920 = f32[] add(%reduce_sum.25918, %reduce_sum.25919)
}

%region_1056.25929 (reduce_sum.25926: bf16[], reduce_sum.25927: bf16[]) -> bf16[] {
  %reduce_sum.25926 = bf16[] parameter(0)
  %reduce_sum.25927 = bf16[] parameter(1)
  ROOT %reduce_sum.25928 = bf16[] add(%reduce_sum.25926, %reduce_sum.25927)
}

%region_1056.25929.clone (reduce_sum.1798: bf16[], reduce_sum.1799: bf16[]) -> bf16[] {
  %reduce_sum.1798 = bf16[] parameter(0)
  %reduce_sum.1799 = bf16[] parameter(1)
  ROOT %reduce_sum.1800 = bf16[] add(%reduce_sum.1798, %reduce_sum.1799)
}

%region_1057.25936 (reduce_sum.25933: f32[], reduce_sum.25934: f32[]) -> f32[] {
  %reduce_sum.25933 = f32[] parameter(0)
  %reduce_sum.25934 = f32[] parameter(1)
  ROOT %reduce_sum.25935 = f32[] add(%reduce_sum.25933, %reduce_sum.25934)
}

%add.36.clone (x.73: bf16[], y.73: bf16[]) -> bf16[] {
  %x.73 = bf16[] parameter(0)
  %y.73 = bf16[] parameter(1)
  ROOT %add.1087 = bf16[] add(%x.73, %y.73)
}

%region_1058.25947 (reduce_sum.226: f32[], reduce_sum.227: f32[]) -> f32[] {
  %reduce_sum.226 = f32[] parameter(0)
  %reduce_sum.227 = f32[] parameter(1)
  ROOT %reduce_sum.228 = f32[] add(%reduce_sum.226, %reduce_sum.227)
}

%region_1058.25947.clone (reduce_sum.1801: f32[], reduce_sum.1802: f32[]) -> f32[] {
  %reduce_sum.1801 = f32[] parameter(0)
  %reduce_sum.1802 = f32[] parameter(1)
  ROOT %reduce_sum.1803 = f32[] add(%reduce_sum.1801, %reduce_sum.1802)
}

%add.37.clone (x.75: bf16[], y.75: bf16[]) -> bf16[] {
  %x.75 = bf16[] parameter(0)
  %y.75 = bf16[] parameter(1)
  ROOT %add.1089 = bf16[] add(%x.75, %y.75)
}

%region_1059.25958 (reduce_sum.25955: f32[], reduce_sum.25956: f32[]) -> f32[] {
  %reduce_sum.25955 = f32[] parameter(0)
  %reduce_sum.25956 = f32[] parameter(1)
  ROOT %reduce_sum.25957 = f32[] add(%reduce_sum.25955, %reduce_sum.25956)
}

%region_1059.25958.clone (reduce_sum.1804: f32[], reduce_sum.1805: f32[]) -> f32[] {
  %reduce_sum.1804 = f32[] parameter(0)
  %reduce_sum.1805 = f32[] parameter(1)
  ROOT %reduce_sum.1806 = f32[] add(%reduce_sum.1804, %reduce_sum.1805)
}

%add.38.clone (x.77: bf16[], y.77: bf16[]) -> bf16[] {
  %x.77 = bf16[] parameter(0)
  %y.77 = bf16[] parameter(1)
  ROOT %add.1091 = bf16[] add(%x.77, %y.77)
}

%region_1060.25969 (reduce_sum.25966: f32[], reduce_sum.25967: f32[]) -> f32[] {
  %reduce_sum.25966 = f32[] parameter(0)
  %reduce_sum.25967 = f32[] parameter(1)
  ROOT %reduce_sum.25968 = f32[] add(%reduce_sum.25966, %reduce_sum.25967)
}

%region_1060.25969.clone (reduce_sum.1807: f32[], reduce_sum.1808: f32[]) -> f32[] {
  %reduce_sum.1807 = f32[] parameter(0)
  %reduce_sum.1808 = f32[] parameter(1)
  ROOT %reduce_sum.1809 = f32[] add(%reduce_sum.1807, %reduce_sum.1808)
}

%add.39.clone (x.79: bf16[], y.79: bf16[]) -> bf16[] {
  %x.79 = bf16[] parameter(0)
  %y.79 = bf16[] parameter(1)
  ROOT %add.1093 = bf16[] add(%x.79, %y.79)
}

%region_1061.25980 (reduce_sum.229: f32[], reduce_sum.230: f32[]) -> f32[] {
  %reduce_sum.229 = f32[] parameter(0)
  %reduce_sum.230 = f32[] parameter(1)
  ROOT %reduce_sum.25979 = f32[] add(%reduce_sum.229, %reduce_sum.230)
}

%region_1061.25980.clone (reduce_sum.1810: f32[], reduce_sum.1811: f32[]) -> f32[] {
  %reduce_sum.1810 = f32[] parameter(0)
  %reduce_sum.1811 = f32[] parameter(1)
  ROOT %reduce_sum.1812 = f32[] add(%reduce_sum.1810, %reduce_sum.1811)
}

%add.40.clone (x.81: bf16[], y.81: bf16[]) -> bf16[] {
  %x.81 = bf16[] parameter(0)
  %y.81 = bf16[] parameter(1)
  ROOT %add.1095 = bf16[] add(%x.81, %y.81)
}

%region_1062.25990 (reduce_sum.231: f32[], reduce_sum.232: f32[]) -> f32[] {
  %reduce_sum.231 = f32[] parameter(0)
  %reduce_sum.232 = f32[] parameter(1)
  ROOT %reduce_sum.233 = f32[] add(%reduce_sum.231, %reduce_sum.232)
}

%region_1062.25990.clone (reduce_sum.1813: f32[], reduce_sum.1814: f32[]) -> f32[] {
  %reduce_sum.1813 = f32[] parameter(0)
  %reduce_sum.1814 = f32[] parameter(1)
  ROOT %reduce_sum.1815 = f32[] add(%reduce_sum.1813, %reduce_sum.1814)
}

%region_1063.26001 (reduce_sum.25998: f32[], reduce_sum.25999: f32[]) -> f32[] {
  %reduce_sum.25998 = f32[] parameter(0)
  %reduce_sum.25999 = f32[] parameter(1)
  ROOT %reduce_sum.26000 = f32[] add(%reduce_sum.25998, %reduce_sum.25999)
}

%region_1063.26001.clone (reduce_sum.1816: f32[], reduce_sum.1817: f32[]) -> f32[] {
  %reduce_sum.1816 = f32[] parameter(0)
  %reduce_sum.1817 = f32[] parameter(1)
  ROOT %reduce_sum.1818 = f32[] add(%reduce_sum.1816, %reduce_sum.1817)
}

%region_1064.26012 (reduce_sum.234: f32[], reduce_sum.235: f32[]) -> f32[] {
  %reduce_sum.234 = f32[] parameter(0)
  %reduce_sum.235 = f32[] parameter(1)
  ROOT %reduce_sum.26011 = f32[] add(%reduce_sum.234, %reduce_sum.235)
}

%region_1064.26012.clone (reduce_sum.1819: f32[], reduce_sum.1820: f32[]) -> f32[] {
  %reduce_sum.1819 = f32[] parameter(0)
  %reduce_sum.1820 = f32[] parameter(1)
  ROOT %reduce_sum.1821 = f32[] add(%reduce_sum.1819, %reduce_sum.1820)
}

%region_1065.26023 (reduce_sum.236: f32[], reduce_sum.26021: f32[]) -> f32[] {
  %reduce_sum.236 = f32[] parameter(0)
  %reduce_sum.26021 = f32[] parameter(1)
  ROOT %reduce_sum.237 = f32[] add(%reduce_sum.236, %reduce_sum.26021)
}

%region_1065.26023.clone (reduce_sum.1822: f32[], reduce_sum.1826: f32[]) -> f32[] {
  %reduce_sum.1822 = f32[] parameter(0)
  %reduce_sum.1826 = f32[] parameter(1)
  ROOT %reduce_sum.1828 = f32[] add(%reduce_sum.1822, %reduce_sum.1826)
}

%region_1066.26031 (reduce_sum.26028: bf16[], reduce_sum.238: bf16[]) -> bf16[] {
  %reduce_sum.26028 = bf16[] parameter(0)
  %reduce_sum.238 = bf16[] parameter(1)
  ROOT %reduce_sum.26030 = bf16[] add(%reduce_sum.26028, %reduce_sum.238)
}

%region_1066.26031.clone (reduce_sum.1829: bf16[], reduce_sum.1830: bf16[]) -> bf16[] {
  %reduce_sum.1829 = bf16[] parameter(0)
  %reduce_sum.1830 = bf16[] parameter(1)
  ROOT %reduce_sum.1831 = bf16[] add(%reduce_sum.1829, %reduce_sum.1830)
}

%region_1067.26038 (reduce_sum.26035: f32[], reduce_sum.26036: f32[]) -> f32[] {
  %reduce_sum.26035 = f32[] parameter(0)
  %reduce_sum.26036 = f32[] parameter(1)
  ROOT %reduce_sum.239 = f32[] add(%reduce_sum.26035, %reduce_sum.26036)
}

%region_1068.26046 (reduce_sum.26043: bf16[], reduce_sum.26044: bf16[]) -> bf16[] {
  %reduce_sum.26043 = bf16[] parameter(0)
  %reduce_sum.26044 = bf16[] parameter(1)
  ROOT %reduce_sum.26045 = bf16[] add(%reduce_sum.26043, %reduce_sum.26044)
}

%region_1068.26046.clone (reduce_sum.1832: bf16[], reduce_sum.1833: bf16[]) -> bf16[] {
  %reduce_sum.1832 = bf16[] parameter(0)
  %reduce_sum.1833 = bf16[] parameter(1)
  ROOT %reduce_sum.1834 = bf16[] add(%reduce_sum.1832, %reduce_sum.1833)
}

%region_1069.26053 (reduce_sum.26050: f32[], reduce_sum.26051: f32[]) -> f32[] {
  %reduce_sum.26050 = f32[] parameter(0)
  %reduce_sum.26051 = f32[] parameter(1)
  ROOT %reduce_sum.26052 = f32[] add(%reduce_sum.26050, %reduce_sum.26051)
}

%add.41.clone (x.83: bf16[], y.83: bf16[]) -> bf16[] {
  %x.83 = bf16[] parameter(0)
  %y.83 = bf16[] parameter(1)
  ROOT %add.1098 = bf16[] add(%x.83, %y.83)
}

%region_1070.26064 (reduce_sum.26061: f32[], reduce_sum.26062: f32[]) -> f32[] {
  %reduce_sum.26061 = f32[] parameter(0)
  %reduce_sum.26062 = f32[] parameter(1)
  ROOT %reduce_sum.26063 = f32[] add(%reduce_sum.26061, %reduce_sum.26062)
}

%region_1070.26064.clone (reduce_sum.1835: f32[], reduce_sum.1836: f32[]) -> f32[] {
  %reduce_sum.1835 = f32[] parameter(0)
  %reduce_sum.1836 = f32[] parameter(1)
  ROOT %reduce_sum.1837 = f32[] add(%reduce_sum.1835, %reduce_sum.1836)
}

%add.42.clone (x.85: bf16[], y.85: bf16[]) -> bf16[] {
  %x.85 = bf16[] parameter(0)
  %y.85 = bf16[] parameter(1)
  ROOT %add.1100 = bf16[] add(%x.85, %y.85)
}

%region_1071.26075 (reduce_sum.26072: f32[], reduce_sum.26073: f32[]) -> f32[] {
  %reduce_sum.26072 = f32[] parameter(0)
  %reduce_sum.26073 = f32[] parameter(1)
  ROOT %reduce_sum.26074 = f32[] add(%reduce_sum.26072, %reduce_sum.26073)
}

%region_1071.26075.clone (reduce_sum.1838: f32[], reduce_sum.1839: f32[]) -> f32[] {
  %reduce_sum.1838 = f32[] parameter(0)
  %reduce_sum.1839 = f32[] parameter(1)
  ROOT %reduce_sum.1840 = f32[] add(%reduce_sum.1838, %reduce_sum.1839)
}

%add.43.clone (x.87: bf16[], y.87: bf16[]) -> bf16[] {
  %x.87 = bf16[] parameter(0)
  %y.87 = bf16[] parameter(1)
  ROOT %add.1102 = bf16[] add(%x.87, %y.87)
}

%region_1072.26086 (reduce_sum.26083: f32[], reduce_sum.26084: f32[]) -> f32[] {
  %reduce_sum.26083 = f32[] parameter(0)
  %reduce_sum.26084 = f32[] parameter(1)
  ROOT %reduce_sum.26085 = f32[] add(%reduce_sum.26083, %reduce_sum.26084)
}

%region_1072.26086.clone (reduce_sum.1841: f32[], reduce_sum.1842: f32[]) -> f32[] {
  %reduce_sum.1841 = f32[] parameter(0)
  %reduce_sum.1842 = f32[] parameter(1)
  ROOT %reduce_sum.1843 = f32[] add(%reduce_sum.1841, %reduce_sum.1842)
}

%add.44.clone (x.89: bf16[], y.89: bf16[]) -> bf16[] {
  %x.89 = bf16[] parameter(0)
  %y.89 = bf16[] parameter(1)
  ROOT %add.1104 = bf16[] add(%x.89, %y.89)
}

%region_1073.26097 (reduce_sum.26094: f32[], reduce_sum.26095: f32[]) -> f32[] {
  %reduce_sum.26094 = f32[] parameter(0)
  %reduce_sum.26095 = f32[] parameter(1)
  ROOT %reduce_sum.26096 = f32[] add(%reduce_sum.26094, %reduce_sum.26095)
}

%region_1073.26097.clone (reduce_sum.1844: f32[], reduce_sum.1845: f32[]) -> f32[] {
  %reduce_sum.1844 = f32[] parameter(0)
  %reduce_sum.1845 = f32[] parameter(1)
  ROOT %reduce_sum.1846 = f32[] add(%reduce_sum.1844, %reduce_sum.1845)
}

%add.45.clone (x.91: bf16[], y.91: bf16[]) -> bf16[] {
  %x.91 = bf16[] parameter(0)
  %y.91 = bf16[] parameter(1)
  ROOT %add.1106 = bf16[] add(%x.91, %y.91)
}

%region_1074.26107 (reduce_sum.26104: f32[], reduce_sum.26105: f32[]) -> f32[] {
  %reduce_sum.26104 = f32[] parameter(0)
  %reduce_sum.26105 = f32[] parameter(1)
  ROOT %reduce_sum.26106 = f32[] add(%reduce_sum.26104, %reduce_sum.26105)
}

%region_1074.26107.clone (reduce_sum.1847: f32[], reduce_sum.1848: f32[]) -> f32[] {
  %reduce_sum.1847 = f32[] parameter(0)
  %reduce_sum.1848 = f32[] parameter(1)
  ROOT %reduce_sum.1849 = f32[] add(%reduce_sum.1847, %reduce_sum.1848)
}

%region_1075.26118 (reduce_sum.26115: f32[], reduce_sum.26116: f32[]) -> f32[] {
  %reduce_sum.26115 = f32[] parameter(0)
  %reduce_sum.26116 = f32[] parameter(1)
  ROOT %reduce_sum.26117 = f32[] add(%reduce_sum.26115, %reduce_sum.26116)
}

%region_1075.26118.clone (reduce_sum.1850: f32[], reduce_sum.1851: f32[]) -> f32[] {
  %reduce_sum.1850 = f32[] parameter(0)
  %reduce_sum.1851 = f32[] parameter(1)
  ROOT %reduce_sum.1852 = f32[] add(%reduce_sum.1850, %reduce_sum.1851)
}

%region_1076.26129 (reduce_sum.26126: f32[], reduce_sum.26127: f32[]) -> f32[] {
  %reduce_sum.26126 = f32[] parameter(0)
  %reduce_sum.26127 = f32[] parameter(1)
  ROOT %reduce_sum.26128 = f32[] add(%reduce_sum.26126, %reduce_sum.26127)
}

%region_1076.26129.clone (reduce_sum.1853: f32[], reduce_sum.1857: f32[]) -> f32[] {
  %reduce_sum.1853 = f32[] parameter(0)
  %reduce_sum.1857 = f32[] parameter(1)
  ROOT %reduce_sum.1859 = f32[] add(%reduce_sum.1853, %reduce_sum.1857)
}

%region_1077.26140 (reduce_sum.240: f32[], reduce_sum.241: f32[]) -> f32[] {
  %reduce_sum.240 = f32[] parameter(0)
  %reduce_sum.241 = f32[] parameter(1)
  ROOT %reduce_sum.26139 = f32[] add(%reduce_sum.240, %reduce_sum.241)
}

%region_1077.26140.clone (reduce_sum.1860: f32[], reduce_sum.1861: f32[]) -> f32[] {
  %reduce_sum.1860 = f32[] parameter(0)
  %reduce_sum.1861 = f32[] parameter(1)
  ROOT %reduce_sum.1862 = f32[] add(%reduce_sum.1860, %reduce_sum.1861)
}

%region_1078.26148 (reduce_sum.26145: bf16[], reduce_sum.26146: bf16[]) -> bf16[] {
  %reduce_sum.26145 = bf16[] parameter(0)
  %reduce_sum.26146 = bf16[] parameter(1)
  ROOT %reduce_sum.26147 = bf16[] add(%reduce_sum.26145, %reduce_sum.26146)
}

%region_1078.26148.clone (reduce_sum.1863: bf16[], reduce_sum.1864: bf16[]) -> bf16[] {
  %reduce_sum.1863 = bf16[] parameter(0)
  %reduce_sum.1864 = bf16[] parameter(1)
  ROOT %reduce_sum.1865 = bf16[] add(%reduce_sum.1863, %reduce_sum.1864)
}

%region_1079.26155 (reduce_sum.242: f32[], reduce_sum.26153: f32[]) -> f32[] {
  %reduce_sum.242 = f32[] parameter(0)
  %reduce_sum.26153 = f32[] parameter(1)
  ROOT %reduce_sum.26154 = f32[] add(%reduce_sum.242, %reduce_sum.26153)
}

%region_1080.26163 (reduce_sum.26160: bf16[], reduce_sum.26161: bf16[]) -> bf16[] {
  %reduce_sum.26160 = bf16[] parameter(0)
  %reduce_sum.26161 = bf16[] parameter(1)
  ROOT %reduce_sum.26162 = bf16[] add(%reduce_sum.26160, %reduce_sum.26161)
}

%region_1080.26163.clone (reduce_sum.1866: bf16[], reduce_sum.1867: bf16[]) -> bf16[] {
  %reduce_sum.1866 = bf16[] parameter(0)
  %reduce_sum.1867 = bf16[] parameter(1)
  ROOT %reduce_sum.1868 = bf16[] add(%reduce_sum.1866, %reduce_sum.1867)
}

%region_1081.26170 (reduce_sum.26167: f32[], reduce_sum.26168: f32[]) -> f32[] {
  %reduce_sum.26167 = f32[] parameter(0)
  %reduce_sum.26168 = f32[] parameter(1)
  ROOT %reduce_sum.26169 = f32[] add(%reduce_sum.26167, %reduce_sum.26168)
}

%add.46.clone (x.93: bf16[], y.93: bf16[]) -> bf16[] {
  %x.93 = bf16[] parameter(0)
  %y.93 = bf16[] parameter(1)
  ROOT %add.1108 = bf16[] add(%x.93, %y.93)
}

%region_1082.26181 (reduce_sum.26178: f32[], reduce_sum.243: f32[]) -> f32[] {
  %reduce_sum.26178 = f32[] parameter(0)
  %reduce_sum.243 = f32[] parameter(1)
  ROOT %reduce_sum.244 = f32[] add(%reduce_sum.26178, %reduce_sum.243)
}

%region_1082.26181.clone (reduce_sum.1869: f32[], reduce_sum.1870: f32[]) -> f32[] {
  %reduce_sum.1869 = f32[] parameter(0)
  %reduce_sum.1870 = f32[] parameter(1)
  ROOT %reduce_sum.1871 = f32[] add(%reduce_sum.1869, %reduce_sum.1870)
}

%add.47.clone (x.95: bf16[], y.95: bf16[]) -> bf16[] {
  %x.95 = bf16[] parameter(0)
  %y.95 = bf16[] parameter(1)
  ROOT %add.1110 = bf16[] add(%x.95, %y.95)
}

%region_1083.26192 (reduce_sum.26189: f32[], reduce_sum.26190: f32[]) -> f32[] {
  %reduce_sum.26189 = f32[] parameter(0)
  %reduce_sum.26190 = f32[] parameter(1)
  ROOT %reduce_sum.26191 = f32[] add(%reduce_sum.26189, %reduce_sum.26190)
}

%region_1083.26192.clone (reduce_sum.1872: f32[], reduce_sum.1873: f32[]) -> f32[] {
  %reduce_sum.1872 = f32[] parameter(0)
  %reduce_sum.1873 = f32[] parameter(1)
  ROOT %reduce_sum.1874 = f32[] add(%reduce_sum.1872, %reduce_sum.1873)
}

%add.48.clone (x.97: bf16[], y.97: bf16[]) -> bf16[] {
  %x.97 = bf16[] parameter(0)
  %y.97 = bf16[] parameter(1)
  ROOT %add.1112 = bf16[] add(%x.97, %y.97)
}

%region_1084.26203 (reduce_sum.26200: f32[], reduce_sum.26201: f32[]) -> f32[] {
  %reduce_sum.26200 = f32[] parameter(0)
  %reduce_sum.26201 = f32[] parameter(1)
  ROOT %reduce_sum.26202 = f32[] add(%reduce_sum.26200, %reduce_sum.26201)
}

%region_1084.26203.clone (reduce_sum.1875: f32[], reduce_sum.1876: f32[]) -> f32[] {
  %reduce_sum.1875 = f32[] parameter(0)
  %reduce_sum.1876 = f32[] parameter(1)
  ROOT %reduce_sum.1877 = f32[] add(%reduce_sum.1875, %reduce_sum.1876)
}

%add.49.clone (x.99: bf16[], y.99: bf16[]) -> bf16[] {
  %x.99 = bf16[] parameter(0)
  %y.99 = bf16[] parameter(1)
  ROOT %add.1114 = bf16[] add(%x.99, %y.99)
}

%region_1085.26214 (reduce_sum.26211: f32[], reduce_sum.26212: f32[]) -> f32[] {
  %reduce_sum.26211 = f32[] parameter(0)
  %reduce_sum.26212 = f32[] parameter(1)
  ROOT %reduce_sum.26213 = f32[] add(%reduce_sum.26211, %reduce_sum.26212)
}

%region_1085.26214.clone (reduce_sum.1878: f32[], reduce_sum.1879: f32[]) -> f32[] {
  %reduce_sum.1878 = f32[] parameter(0)
  %reduce_sum.1879 = f32[] parameter(1)
  ROOT %reduce_sum.1880 = f32[] add(%reduce_sum.1878, %reduce_sum.1879)
}

%add.50.clone (x.101: bf16[], y.101: bf16[]) -> bf16[] {
  %x.101 = bf16[] parameter(0)
  %y.101 = bf16[] parameter(1)
  ROOT %add.1116 = bf16[] add(%x.101, %y.101)
}

%region_1086.26224 (reduce_sum.26221: f32[], reduce_sum.26222: f32[]) -> f32[] {
  %reduce_sum.26221 = f32[] parameter(0)
  %reduce_sum.26222 = f32[] parameter(1)
  ROOT %reduce_sum.26223 = f32[] add(%reduce_sum.26221, %reduce_sum.26222)
}

%region_1086.26224.clone (reduce_sum.1881: f32[], reduce_sum.1882: f32[]) -> f32[] {
  %reduce_sum.1881 = f32[] parameter(0)
  %reduce_sum.1882 = f32[] parameter(1)
  ROOT %reduce_sum.1883 = f32[] add(%reduce_sum.1881, %reduce_sum.1882)
}

%region_1087.26235 (reduce_sum.26232: f32[], reduce_sum.26233: f32[]) -> f32[] {
  %reduce_sum.26232 = f32[] parameter(0)
  %reduce_sum.26233 = f32[] parameter(1)
  ROOT %reduce_sum.26234 = f32[] add(%reduce_sum.26232, %reduce_sum.26233)
}

%region_1087.26235.clone (reduce_sum.1887: f32[], reduce_sum.1889: f32[]) -> f32[] {
  %reduce_sum.1887 = f32[] parameter(0)
  %reduce_sum.1889 = f32[] parameter(1)
  ROOT %reduce_sum.1890 = f32[] add(%reduce_sum.1887, %reduce_sum.1889)
}

%region_1088.26246 (reduce_sum.26243: f32[], reduce_sum.26244: f32[]) -> f32[] {
  %reduce_sum.26243 = f32[] parameter(0)
  %reduce_sum.26244 = f32[] parameter(1)
  ROOT %reduce_sum.26245 = f32[] add(%reduce_sum.26243, %reduce_sum.26244)
}

%region_1088.26246.clone (reduce_sum.1891: f32[], reduce_sum.1892: f32[]) -> f32[] {
  %reduce_sum.1891 = f32[] parameter(0)
  %reduce_sum.1892 = f32[] parameter(1)
  ROOT %reduce_sum.1893 = f32[] add(%reduce_sum.1891, %reduce_sum.1892)
}

%region_1089.26257 (reduce_sum.26254: f32[], reduce_sum.26255: f32[]) -> f32[] {
  %reduce_sum.26254 = f32[] parameter(0)
  %reduce_sum.26255 = f32[] parameter(1)
  ROOT %reduce_sum.26256 = f32[] add(%reduce_sum.26254, %reduce_sum.26255)
}

%region_1089.26257.clone (reduce_sum.1897: f32[], reduce_sum.1899: f32[]) -> f32[] {
  %reduce_sum.1897 = f32[] parameter(0)
  %reduce_sum.1899 = f32[] parameter(1)
  ROOT %reduce_sum.1900 = f32[] add(%reduce_sum.1897, %reduce_sum.1899)
}

%region_1090.26265 (reduce_sum.26262: bf16[], reduce_sum.26263: bf16[]) -> bf16[] {
  %reduce_sum.26262 = bf16[] parameter(0)
  %reduce_sum.26263 = bf16[] parameter(1)
  ROOT %reduce_sum.26264 = bf16[] add(%reduce_sum.26262, %reduce_sum.26263)
}

%region_1090.26265.clone (reduce_sum.1901: bf16[], reduce_sum.1902: bf16[]) -> bf16[] {
  %reduce_sum.1901 = bf16[] parameter(0)
  %reduce_sum.1902 = bf16[] parameter(1)
  ROOT %reduce_sum.1903 = bf16[] add(%reduce_sum.1901, %reduce_sum.1902)
}

%region_1091.26272 (reduce_sum.26269: f32[], reduce_sum.26270: f32[]) -> f32[] {
  %reduce_sum.26269 = f32[] parameter(0)
  %reduce_sum.26270 = f32[] parameter(1)
  ROOT %reduce_sum.26271 = f32[] add(%reduce_sum.26269, %reduce_sum.26270)
}

%region_1092.26280 (reduce_sum.26277: bf16[], reduce_sum.26278: bf16[]) -> bf16[] {
  %reduce_sum.26277 = bf16[] parameter(0)
  %reduce_sum.26278 = bf16[] parameter(1)
  ROOT %reduce_sum.26279 = bf16[] add(%reduce_sum.26277, %reduce_sum.26278)
}

%region_1092.26280.clone (reduce_sum.1904: bf16[], reduce_sum.1905: bf16[]) -> bf16[] {
  %reduce_sum.1904 = bf16[] parameter(0)
  %reduce_sum.1905 = bf16[] parameter(1)
  ROOT %reduce_sum.1906 = bf16[] add(%reduce_sum.1904, %reduce_sum.1905)
}

%region_1093.26287 (reduce_sum.26284: f32[], reduce_sum.26285: f32[]) -> f32[] {
  %reduce_sum.26284 = f32[] parameter(0)
  %reduce_sum.26285 = f32[] parameter(1)
  ROOT %reduce_sum.26286 = f32[] add(%reduce_sum.26284, %reduce_sum.26285)
}

%add.51.clone (x.103: bf16[], y.103: bf16[]) -> bf16[] {
  %x.103 = bf16[] parameter(0)
  %y.103 = bf16[] parameter(1)
  ROOT %add.1118 = bf16[] add(%x.103, %y.103)
}

%region_1094.26298 (reduce_sum.26295: f32[], reduce_sum.26296: f32[]) -> f32[] {
  %reduce_sum.26295 = f32[] parameter(0)
  %reduce_sum.26296 = f32[] parameter(1)
  ROOT %reduce_sum.26297 = f32[] add(%reduce_sum.26295, %reduce_sum.26296)
}

%region_1094.26298.clone (reduce_sum.1907: f32[], reduce_sum.1908: f32[]) -> f32[] {
  %reduce_sum.1907 = f32[] parameter(0)
  %reduce_sum.1908 = f32[] parameter(1)
  ROOT %reduce_sum.1909 = f32[] add(%reduce_sum.1907, %reduce_sum.1908)
}

%add.52.clone (x.105: bf16[], y.105: bf16[]) -> bf16[] {
  %x.105 = bf16[] parameter(0)
  %y.105 = bf16[] parameter(1)
  ROOT %add.1120 = bf16[] add(%x.105, %y.105)
}

%region_1095.26309 (reduce_sum.26306: f32[], reduce_sum.26307: f32[]) -> f32[] {
  %reduce_sum.26306 = f32[] parameter(0)
  %reduce_sum.26307 = f32[] parameter(1)
  ROOT %reduce_sum.26308 = f32[] add(%reduce_sum.26306, %reduce_sum.26307)
}

%region_1095.26309.clone (reduce_sum.1910: f32[], reduce_sum.1911: f32[]) -> f32[] {
  %reduce_sum.1910 = f32[] parameter(0)
  %reduce_sum.1911 = f32[] parameter(1)
  ROOT %reduce_sum.1912 = f32[] add(%reduce_sum.1910, %reduce_sum.1911)
}

%add.53.clone (x.107: bf16[], y.107: bf16[]) -> bf16[] {
  %x.107 = bf16[] parameter(0)
  %y.107 = bf16[] parameter(1)
  ROOT %add.1122 = bf16[] add(%x.107, %y.107)
}

%region_1096.26320 (reduce_sum.245: f32[], reduce_sum.26318: f32[]) -> f32[] {
  %reduce_sum.245 = f32[] parameter(0)
  %reduce_sum.26318 = f32[] parameter(1)
  ROOT %reduce_sum.26319 = f32[] add(%reduce_sum.245, %reduce_sum.26318)
}

%region_1096.26320.clone (reduce_sum.1913: f32[], reduce_sum.1914: f32[]) -> f32[] {
  %reduce_sum.1913 = f32[] parameter(0)
  %reduce_sum.1914 = f32[] parameter(1)
  ROOT %reduce_sum.1915 = f32[] add(%reduce_sum.1913, %reduce_sum.1914)
}

%add.54.clone (x.109: bf16[], y.109: bf16[]) -> bf16[] {
  %x.109 = bf16[] parameter(0)
  %y.109 = bf16[] parameter(1)
  ROOT %add.1124 = bf16[] add(%x.109, %y.109)
}

%region_1097.26331 (reduce_sum.26328: f32[], reduce_sum.26329: f32[]) -> f32[] {
  %reduce_sum.26328 = f32[] parameter(0)
  %reduce_sum.26329 = f32[] parameter(1)
  ROOT %reduce_sum.26330 = f32[] add(%reduce_sum.26328, %reduce_sum.26329)
}

%region_1097.26331.clone (reduce_sum.1916: f32[], reduce_sum.1917: f32[]) -> f32[] {
  %reduce_sum.1916 = f32[] parameter(0)
  %reduce_sum.1917 = f32[] parameter(1)
  ROOT %reduce_sum.1918 = f32[] add(%reduce_sum.1916, %reduce_sum.1917)
}

%add.55.clone (x.111: bf16[], y.111: bf16[]) -> bf16[] {
  %x.111 = bf16[] parameter(0)
  %y.111 = bf16[] parameter(1)
  ROOT %add.1126 = bf16[] add(%x.111, %y.111)
}

%region_1098.26341 (reduce_sum.26338: f32[], reduce_sum.26339: f32[]) -> f32[] {
  %reduce_sum.26338 = f32[] parameter(0)
  %reduce_sum.26339 = f32[] parameter(1)
  ROOT %reduce_sum.26340 = f32[] add(%reduce_sum.26338, %reduce_sum.26339)
}

%region_1098.26341.clone (reduce_sum.1919: f32[], reduce_sum.1920: f32[]) -> f32[] {
  %reduce_sum.1919 = f32[] parameter(0)
  %reduce_sum.1920 = f32[] parameter(1)
  ROOT %reduce_sum.1921 = f32[] add(%reduce_sum.1919, %reduce_sum.1920)
}

%region_1099.26352 (reduce_sum.26349: f32[], reduce_sum.26350: f32[]) -> f32[] {
  %reduce_sum.26349 = f32[] parameter(0)
  %reduce_sum.26350 = f32[] parameter(1)
  ROOT %reduce_sum.26351 = f32[] add(%reduce_sum.26349, %reduce_sum.26350)
}

%region_1099.26352.clone (reduce_sum.1922: f32[], reduce_sum.1923: f32[]) -> f32[] {
  %reduce_sum.1922 = f32[] parameter(0)
  %reduce_sum.1923 = f32[] parameter(1)
  ROOT %reduce_sum.1924 = f32[] add(%reduce_sum.1922, %reduce_sum.1923)
}

%region_1100.26363 (reduce_sum.26360: f32[], reduce_sum.26361: f32[]) -> f32[] {
  %reduce_sum.26360 = f32[] parameter(0)
  %reduce_sum.26361 = f32[] parameter(1)
  ROOT %reduce_sum.26362 = f32[] add(%reduce_sum.26360, %reduce_sum.26361)
}

%region_1100.26363.clone (reduce_sum.1925: f32[], reduce_sum.1926: f32[]) -> f32[] {
  %reduce_sum.1925 = f32[] parameter(0)
  %reduce_sum.1926 = f32[] parameter(1)
  ROOT %reduce_sum.1927 = f32[] add(%reduce_sum.1925, %reduce_sum.1926)
}

%region_1101.26374 (reduce_sum.26371: f32[], reduce_sum.26372: f32[]) -> f32[] {
  %reduce_sum.26371 = f32[] parameter(0)
  %reduce_sum.26372 = f32[] parameter(1)
  ROOT %reduce_sum.26373 = f32[] add(%reduce_sum.26371, %reduce_sum.26372)
}

%region_1101.26374.clone (reduce_sum.1928: f32[], reduce_sum.1929: f32[]) -> f32[] {
  %reduce_sum.1928 = f32[] parameter(0)
  %reduce_sum.1929 = f32[] parameter(1)
  ROOT %reduce_sum.1930 = f32[] add(%reduce_sum.1928, %reduce_sum.1929)
}

%region_1102.26382 (reduce_sum.26379: bf16[], reduce_sum.26380: bf16[]) -> bf16[] {
  %reduce_sum.26379 = bf16[] parameter(0)
  %reduce_sum.26380 = bf16[] parameter(1)
  ROOT %reduce_sum.26381 = bf16[] add(%reduce_sum.26379, %reduce_sum.26380)
}

%region_1102.26382.clone (reduce_sum.1931: bf16[], reduce_sum.1932: bf16[]) -> bf16[] {
  %reduce_sum.1931 = bf16[] parameter(0)
  %reduce_sum.1932 = bf16[] parameter(1)
  ROOT %reduce_sum.1933 = bf16[] add(%reduce_sum.1931, %reduce_sum.1932)
}

%region_1103.26389 (reduce_sum.246: f32[], reduce_sum.26387: f32[]) -> f32[] {
  %reduce_sum.246 = f32[] parameter(0)
  %reduce_sum.26387 = f32[] parameter(1)
  ROOT %reduce_sum.247 = f32[] add(%reduce_sum.246, %reduce_sum.26387)
}

%region_1104.26397 (reduce_sum.26394: bf16[], reduce_sum.26395: bf16[]) -> bf16[] {
  %reduce_sum.26394 = bf16[] parameter(0)
  %reduce_sum.26395 = bf16[] parameter(1)
  ROOT %reduce_sum.26396 = bf16[] add(%reduce_sum.26394, %reduce_sum.26395)
}

%region_1104.26397.clone (reduce_sum.1934: bf16[], reduce_sum.1935: bf16[]) -> bf16[] {
  %reduce_sum.1934 = bf16[] parameter(0)
  %reduce_sum.1935 = bf16[] parameter(1)
  ROOT %reduce_sum.1939 = bf16[] add(%reduce_sum.1934, %reduce_sum.1935)
}

%region_1105.26404 (reduce_sum.26401: f32[], reduce_sum.26402: f32[]) -> f32[] {
  %reduce_sum.26401 = f32[] parameter(0)
  %reduce_sum.26402 = f32[] parameter(1)
  ROOT %reduce_sum.26403 = f32[] add(%reduce_sum.26401, %reduce_sum.26402)
}

%add.56.clone (x.113: bf16[], y.113: bf16[]) -> bf16[] {
  %x.113 = bf16[] parameter(0)
  %y.113 = bf16[] parameter(1)
  ROOT %add.1128 = bf16[] add(%x.113, %y.113)
}

%region_1106.26415 (reduce_sum.26412: f32[], reduce_sum.26413: f32[]) -> f32[] {
  %reduce_sum.26412 = f32[] parameter(0)
  %reduce_sum.26413 = f32[] parameter(1)
  ROOT %reduce_sum.26414 = f32[] add(%reduce_sum.26412, %reduce_sum.26413)
}

%region_1106.26415.clone (reduce_sum.1941: f32[], reduce_sum.1942: f32[]) -> f32[] {
  %reduce_sum.1941 = f32[] parameter(0)
  %reduce_sum.1942 = f32[] parameter(1)
  ROOT %reduce_sum.1943 = f32[] add(%reduce_sum.1941, %reduce_sum.1942)
}

%add.57.clone (x.115: bf16[], y.115: bf16[]) -> bf16[] {
  %x.115 = bf16[] parameter(0)
  %y.115 = bf16[] parameter(1)
  ROOT %add.1130 = bf16[] add(%x.115, %y.115)
}

%region_1107.26426 (reduce_sum.26423: f32[], reduce_sum.26424: f32[]) -> f32[] {
  %reduce_sum.26423 = f32[] parameter(0)
  %reduce_sum.26424 = f32[] parameter(1)
  ROOT %reduce_sum.26425 = f32[] add(%reduce_sum.26423, %reduce_sum.26424)
}

%region_1107.26426.clone (reduce_sum.1944: f32[], reduce_sum.1945: f32[]) -> f32[] {
  %reduce_sum.1944 = f32[] parameter(0)
  %reduce_sum.1945 = f32[] parameter(1)
  ROOT %reduce_sum.1946 = f32[] add(%reduce_sum.1944, %reduce_sum.1945)
}

%add.58.clone (x.117: bf16[], y.117: bf16[]) -> bf16[] {
  %x.117 = bf16[] parameter(0)
  %y.117 = bf16[] parameter(1)
  ROOT %add.1132 = bf16[] add(%x.117, %y.117)
}

%region_1108.26437 (reduce_sum.26434: f32[], reduce_sum.26435: f32[]) -> f32[] {
  %reduce_sum.26434 = f32[] parameter(0)
  %reduce_sum.26435 = f32[] parameter(1)
  ROOT %reduce_sum.26436 = f32[] add(%reduce_sum.26434, %reduce_sum.26435)
}

%region_1108.26437.clone (reduce_sum.1947: f32[], reduce_sum.1948: f32[]) -> f32[] {
  %reduce_sum.1947 = f32[] parameter(0)
  %reduce_sum.1948 = f32[] parameter(1)
  ROOT %reduce_sum.1949 = f32[] add(%reduce_sum.1947, %reduce_sum.1948)
}

%add.59.clone (x.119: bf16[], y.119: bf16[]) -> bf16[] {
  %x.119 = bf16[] parameter(0)
  %y.119 = bf16[] parameter(1)
  ROOT %add.1134 = bf16[] add(%x.119, %y.119)
}

%region_1109.26448 (reduce_sum.248: f32[], reduce_sum.249: f32[]) -> f32[] {
  %reduce_sum.248 = f32[] parameter(0)
  %reduce_sum.249 = f32[] parameter(1)
  ROOT %reduce_sum.250 = f32[] add(%reduce_sum.248, %reduce_sum.249)
}

%region_1109.26448.clone (reduce_sum.1950: f32[], reduce_sum.1951: f32[]) -> f32[] {
  %reduce_sum.1950 = f32[] parameter(0)
  %reduce_sum.1951 = f32[] parameter(1)
  ROOT %reduce_sum.1952 = f32[] add(%reduce_sum.1950, %reduce_sum.1951)
}

%add.60.clone (x.121: bf16[], y.121: bf16[]) -> bf16[] {
  %x.121 = bf16[] parameter(0)
  %y.121 = bf16[] parameter(1)
  ROOT %add.1136 = bf16[] add(%x.121, %y.121)
}

%region_1110.26458 (reduce_sum.251: f32[], reduce_sum.252: f32[]) -> f32[] {
  %reduce_sum.251 = f32[] parameter(0)
  %reduce_sum.252 = f32[] parameter(1)
  ROOT %reduce_sum.26457 = f32[] add(%reduce_sum.251, %reduce_sum.252)
}

%region_1110.26458.clone (reduce_sum.1953: f32[], reduce_sum.1954: f32[]) -> f32[] {
  %reduce_sum.1953 = f32[] parameter(0)
  %reduce_sum.1954 = f32[] parameter(1)
  ROOT %reduce_sum.1958 = f32[] add(%reduce_sum.1953, %reduce_sum.1954)
}

%region_1111.26469 (reduce_sum.26466: f32[], reduce_sum.26467: f32[]) -> f32[] {
  %reduce_sum.26466 = f32[] parameter(0)
  %reduce_sum.26467 = f32[] parameter(1)
  ROOT %reduce_sum.26468 = f32[] add(%reduce_sum.26466, %reduce_sum.26467)
}

%region_1111.26469.clone (reduce_sum.1960: f32[], reduce_sum.1961: f32[]) -> f32[] {
  %reduce_sum.1960 = f32[] parameter(0)
  %reduce_sum.1961 = f32[] parameter(1)
  ROOT %reduce_sum.1962 = f32[] add(%reduce_sum.1960, %reduce_sum.1961)
}

%region_1112.26480 (reduce_sum.26477: f32[], reduce_sum.26478: f32[]) -> f32[] {
  %reduce_sum.26477 = f32[] parameter(0)
  %reduce_sum.26478 = f32[] parameter(1)
  ROOT %reduce_sum.26479 = f32[] add(%reduce_sum.26477, %reduce_sum.26478)
}

%region_1112.26480.clone (reduce_sum.1966: f32[], reduce_sum.1968: f32[]) -> f32[] {
  %reduce_sum.1966 = f32[] parameter(0)
  %reduce_sum.1968 = f32[] parameter(1)
  ROOT %reduce_sum.1969 = f32[] add(%reduce_sum.1966, %reduce_sum.1968)
}

%region_1113.26491 (reduce_sum.26488: f32[], reduce_sum.26489: f32[]) -> f32[] {
  %reduce_sum.26488 = f32[] parameter(0)
  %reduce_sum.26489 = f32[] parameter(1)
  ROOT %reduce_sum.26490 = f32[] add(%reduce_sum.26488, %reduce_sum.26489)
}

%region_1113.26491.clone (reduce_sum.1970: f32[], reduce_sum.1971: f32[]) -> f32[] {
  %reduce_sum.1970 = f32[] parameter(0)
  %reduce_sum.1971 = f32[] parameter(1)
  ROOT %reduce_sum.1972 = f32[] add(%reduce_sum.1970, %reduce_sum.1971)
}

%region_1114.26499 (reduce_sum.26496: bf16[], reduce_sum.26497: bf16[]) -> bf16[] {
  %reduce_sum.26496 = bf16[] parameter(0)
  %reduce_sum.26497 = bf16[] parameter(1)
  ROOT %reduce_sum.26498 = bf16[] add(%reduce_sum.26496, %reduce_sum.26497)
}

%region_1114.26499.clone (reduce_sum.1973: bf16[], reduce_sum.1974: bf16[]) -> bf16[] {
  %reduce_sum.1973 = bf16[] parameter(0)
  %reduce_sum.1974 = bf16[] parameter(1)
  ROOT %reduce_sum.1975 = bf16[] add(%reduce_sum.1973, %reduce_sum.1974)
}

%region_1115.26506 (reduce_sum.26503: f32[], reduce_sum.26504: f32[]) -> f32[] {
  %reduce_sum.26503 = f32[] parameter(0)
  %reduce_sum.26504 = f32[] parameter(1)
  ROOT %reduce_sum.26505 = f32[] add(%reduce_sum.26503, %reduce_sum.26504)
}

%region_1116.26514 (reduce_sum.26511: bf16[], reduce_sum.26512: bf16[]) -> bf16[] {
  %reduce_sum.26511 = bf16[] parameter(0)
  %reduce_sum.26512 = bf16[] parameter(1)
  ROOT %reduce_sum.26513 = bf16[] add(%reduce_sum.26511, %reduce_sum.26512)
}

%region_1116.26514.clone (reduce_sum.1976: bf16[], reduce_sum.1977: bf16[]) -> bf16[] {
  %reduce_sum.1976 = bf16[] parameter(0)
  %reduce_sum.1977 = bf16[] parameter(1)
  ROOT %reduce_sum.1978 = bf16[] add(%reduce_sum.1976, %reduce_sum.1977)
}

%region_1117.26521 (reduce_sum.26518: f32[], reduce_sum.26519: f32[]) -> f32[] {
  %reduce_sum.26518 = f32[] parameter(0)
  %reduce_sum.26519 = f32[] parameter(1)
  ROOT %reduce_sum.26520 = f32[] add(%reduce_sum.26518, %reduce_sum.26519)
}

%add.61.clone (x.123: bf16[], y.123: bf16[]) -> bf16[] {
  %x.123 = bf16[] parameter(0)
  %y.123 = bf16[] parameter(1)
  ROOT %add.1138 = bf16[] add(%x.123, %y.123)
}

%region_1118.26532 (reduce_sum.253: f32[], reduce_sum.26530: f32[]) -> f32[] {
  %reduce_sum.253 = f32[] parameter(0)
  %reduce_sum.26530 = f32[] parameter(1)
  ROOT %reduce_sum.254 = f32[] add(%reduce_sum.253, %reduce_sum.26530)
}

%region_1118.26532.clone (reduce_sum.1979: f32[], reduce_sum.1980: f32[]) -> f32[] {
  %reduce_sum.1979 = f32[] parameter(0)
  %reduce_sum.1980 = f32[] parameter(1)
  ROOT %reduce_sum.1981 = f32[] add(%reduce_sum.1979, %reduce_sum.1980)
}

%add.62.clone (x.125: bf16[], y.125: bf16[]) -> bf16[] {
  %x.125 = bf16[] parameter(0)
  %y.125 = bf16[] parameter(1)
  ROOT %add.1140 = bf16[] add(%x.125, %y.125)
}

%region_1119.26543 (reduce_sum.26540: f32[], reduce_sum.26541: f32[]) -> f32[] {
  %reduce_sum.26540 = f32[] parameter(0)
  %reduce_sum.26541 = f32[] parameter(1)
  ROOT %reduce_sum.26542 = f32[] add(%reduce_sum.26540, %reduce_sum.26541)
}

%region_1119.26543.clone (reduce_sum.1982: f32[], reduce_sum.1986: f32[]) -> f32[] {
  %reduce_sum.1982 = f32[] parameter(0)
  %reduce_sum.1986 = f32[] parameter(1)
  ROOT %reduce_sum.1988 = f32[] add(%reduce_sum.1982, %reduce_sum.1986)
}

%add.63.clone (x.127: bf16[], y.127: bf16[]) -> bf16[] {
  %x.127 = bf16[] parameter(0)
  %y.127 = bf16[] parameter(1)
  ROOT %add.1143 = bf16[] add(%x.127, %y.127)
}

%region_1120.26554 (reduce_sum.26551: f32[], reduce_sum.26552: f32[]) -> f32[] {
  %reduce_sum.26551 = f32[] parameter(0)
  %reduce_sum.26552 = f32[] parameter(1)
  ROOT %reduce_sum.255 = f32[] add(%reduce_sum.26551, %reduce_sum.26552)
}

%region_1120.26554.clone (reduce_sum.1989: f32[], reduce_sum.1990: f32[]) -> f32[] {
  %reduce_sum.1989 = f32[] parameter(0)
  %reduce_sum.1990 = f32[] parameter(1)
  ROOT %reduce_sum.1991 = f32[] add(%reduce_sum.1989, %reduce_sum.1990)
}

%add.64.clone (x.129: bf16[], y.129: bf16[]) -> bf16[] {
  %x.129 = bf16[] parameter(0)
  %y.129 = bf16[] parameter(1)
  ROOT %add.1145 = bf16[] add(%x.129, %y.129)
}

%region_1121.26565 (reduce_sum.26562: f32[], reduce_sum.26563: f32[]) -> f32[] {
  %reduce_sum.26562 = f32[] parameter(0)
  %reduce_sum.26563 = f32[] parameter(1)
  ROOT %reduce_sum.256 = f32[] add(%reduce_sum.26562, %reduce_sum.26563)
}

%region_1121.26565.clone (reduce_sum.1992: f32[], reduce_sum.1993: f32[]) -> f32[] {
  %reduce_sum.1992 = f32[] parameter(0)
  %reduce_sum.1993 = f32[] parameter(1)
  ROOT %reduce_sum.1994 = f32[] add(%reduce_sum.1992, %reduce_sum.1993)
}

%add.65.clone (x.131: bf16[], y.131: bf16[]) -> bf16[] {
  %x.131 = bf16[] parameter(0)
  %y.131 = bf16[] parameter(1)
  ROOT %add.1147 = bf16[] add(%x.131, %y.131)
}

%region_1122.26575 (reduce_sum.26572: f32[], reduce_sum.26573: f32[]) -> f32[] {
  %reduce_sum.26572 = f32[] parameter(0)
  %reduce_sum.26573 = f32[] parameter(1)
  ROOT %reduce_sum.26574 = f32[] add(%reduce_sum.26572, %reduce_sum.26573)
}

%region_1122.26575.clone (reduce_sum.1995: f32[], reduce_sum.1996: f32[]) -> f32[] {
  %reduce_sum.1995 = f32[] parameter(0)
  %reduce_sum.1996 = f32[] parameter(1)
  ROOT %reduce_sum.1997 = f32[] add(%reduce_sum.1995, %reduce_sum.1996)
}

%region_1123.26586 (reduce_sum.26583: f32[], reduce_sum.26584: f32[]) -> f32[] {
  %reduce_sum.26583 = f32[] parameter(0)
  %reduce_sum.26584 = f32[] parameter(1)
  ROOT %reduce_sum.257 = f32[] add(%reduce_sum.26583, %reduce_sum.26584)
}

%region_1123.26586.clone (reduce_sum.1998: f32[], reduce_sum.1999: f32[]) -> f32[] {
  %reduce_sum.1998 = f32[] parameter(0)
  %reduce_sum.1999 = f32[] parameter(1)
  ROOT %reduce_sum.2000 = f32[] add(%reduce_sum.1998, %reduce_sum.1999)
}

%region_1124.26597 (reduce_sum.26594: f32[], reduce_sum.258: f32[]) -> f32[] {
  %reduce_sum.26594 = f32[] parameter(0)
  %reduce_sum.258 = f32[] parameter(1)
  ROOT %reduce_sum.259 = f32[] add(%reduce_sum.26594, %reduce_sum.258)
}

%region_1124.26597.clone (reduce_sum.2001: f32[], reduce_sum.2002: f32[]) -> f32[] {
  %reduce_sum.2001 = f32[] parameter(0)
  %reduce_sum.2002 = f32[] parameter(1)
  ROOT %reduce_sum.2003 = f32[] add(%reduce_sum.2001, %reduce_sum.2002)
}

%region_1125.26608 (reduce_sum.26605: f32[], reduce_sum.260: f32[]) -> f32[] {
  %reduce_sum.26605 = f32[] parameter(0)
  %reduce_sum.260 = f32[] parameter(1)
  ROOT %reduce_sum.26607 = f32[] add(%reduce_sum.26605, %reduce_sum.260)
}

%region_1125.26608.clone (reduce_sum.2004: f32[], reduce_sum.2005: f32[]) -> f32[] {
  %reduce_sum.2004 = f32[] parameter(0)
  %reduce_sum.2005 = f32[] parameter(1)
  ROOT %reduce_sum.2006 = f32[] add(%reduce_sum.2004, %reduce_sum.2005)
}

%region_1126.26616 (reduce_sum.26613: bf16[], reduce_sum.261: bf16[]) -> bf16[] {
  %reduce_sum.26613 = bf16[] parameter(0)
  %reduce_sum.261 = bf16[] parameter(1)
  ROOT %reduce_sum.262 = bf16[] add(%reduce_sum.26613, %reduce_sum.261)
}

%region_1126.26616.clone (reduce_sum.2007: bf16[], reduce_sum.2008: bf16[]) -> bf16[] {
  %reduce_sum.2007 = bf16[] parameter(0)
  %reduce_sum.2008 = bf16[] parameter(1)
  ROOT %reduce_sum.2009 = bf16[] add(%reduce_sum.2007, %reduce_sum.2008)
}

%region_1127.26623 (reduce_sum.26620: f32[], reduce_sum.26621: f32[]) -> f32[] {
  %reduce_sum.26620 = f32[] parameter(0)
  %reduce_sum.26621 = f32[] parameter(1)
  ROOT %reduce_sum.26622 = f32[] add(%reduce_sum.26620, %reduce_sum.26621)
}

%region_1128.26631 (reduce_sum.26628: bf16[], reduce_sum.26629: bf16[]) -> bf16[] {
  %reduce_sum.26628 = bf16[] parameter(0)
  %reduce_sum.26629 = bf16[] parameter(1)
  ROOT %reduce_sum.26630 = bf16[] add(%reduce_sum.26628, %reduce_sum.26629)
}

%region_1128.26631.clone (reduce_sum.2010: bf16[], reduce_sum.2011: bf16[]) -> bf16[] {
  %reduce_sum.2010 = bf16[] parameter(0)
  %reduce_sum.2011 = bf16[] parameter(1)
  ROOT %reduce_sum.2012 = bf16[] add(%reduce_sum.2010, %reduce_sum.2011)
}

%region_1129.26638 (reduce_sum.26635: f32[], reduce_sum.26636: f32[]) -> f32[] {
  %reduce_sum.26635 = f32[] parameter(0)
  %reduce_sum.26636 = f32[] parameter(1)
  ROOT %reduce_sum.26637 = f32[] add(%reduce_sum.26635, %reduce_sum.26636)
}

%add.66.clone (x.133: bf16[], y.133: bf16[]) -> bf16[] {
  %x.133 = bf16[] parameter(0)
  %y.133 = bf16[] parameter(1)
  ROOT %add.1149 = bf16[] add(%x.133, %y.133)
}

%region_1130.26649 (reduce_sum.26646: f32[], reduce_sum.26647: f32[]) -> f32[] {
  %reduce_sum.26646 = f32[] parameter(0)
  %reduce_sum.26647 = f32[] parameter(1)
  ROOT %reduce_sum.26648 = f32[] add(%reduce_sum.26646, %reduce_sum.26647)
}

%region_1130.26649.clone (reduce_sum.2013: f32[], reduce_sum.2014: f32[]) -> f32[] {
  %reduce_sum.2013 = f32[] parameter(0)
  %reduce_sum.2014 = f32[] parameter(1)
  ROOT %reduce_sum.2015 = f32[] add(%reduce_sum.2013, %reduce_sum.2014)
}

%add.67.clone (x.135: bf16[], y.135: bf16[]) -> bf16[] {
  %x.135 = bf16[] parameter(0)
  %y.135 = bf16[] parameter(1)
  ROOT %add.1151 = bf16[] add(%x.135, %y.135)
}

%region_1131.26660 (reduce_sum.26657: f32[], reduce_sum.26658: f32[]) -> f32[] {
  %reduce_sum.26657 = f32[] parameter(0)
  %reduce_sum.26658 = f32[] parameter(1)
  ROOT %reduce_sum.26659 = f32[] add(%reduce_sum.26657, %reduce_sum.26658)
}

%region_1131.26660.clone (reduce_sum.2016: f32[], reduce_sum.2017: f32[]) -> f32[] {
  %reduce_sum.2016 = f32[] parameter(0)
  %reduce_sum.2017 = f32[] parameter(1)
  ROOT %reduce_sum.2018 = f32[] add(%reduce_sum.2016, %reduce_sum.2017)
}

%add.68.clone (x.137: bf16[], y.137: bf16[]) -> bf16[] {
  %x.137 = bf16[] parameter(0)
  %y.137 = bf16[] parameter(1)
  ROOT %add.1153 = bf16[] add(%x.137, %y.137)
}

%region_1132.26671 (reduce_sum.26668: f32[], reduce_sum.26669: f32[]) -> f32[] {
  %reduce_sum.26668 = f32[] parameter(0)
  %reduce_sum.26669 = f32[] parameter(1)
  ROOT %reduce_sum.26670 = f32[] add(%reduce_sum.26668, %reduce_sum.26669)
}

%region_1132.26671.clone (reduce_sum.2019: f32[], reduce_sum.2020: f32[]) -> f32[] {
  %reduce_sum.2019 = f32[] parameter(0)
  %reduce_sum.2020 = f32[] parameter(1)
  ROOT %reduce_sum.2024 = f32[] add(%reduce_sum.2019, %reduce_sum.2020)
}

%add.69.clone (x.139: bf16[], y.139: bf16[]) -> bf16[] {
  %x.139 = bf16[] parameter(0)
  %y.139 = bf16[] parameter(1)
  ROOT %add.1155 = bf16[] add(%x.139, %y.139)
}

%region_1133.26682 (reduce_sum.26679: f32[], reduce_sum.26680: f32[]) -> f32[] {
  %reduce_sum.26679 = f32[] parameter(0)
  %reduce_sum.26680 = f32[] parameter(1)
  ROOT %reduce_sum.26681 = f32[] add(%reduce_sum.26679, %reduce_sum.26680)
}

%region_1133.26682.clone (reduce_sum.2026: f32[], reduce_sum.2027: f32[]) -> f32[] {
  %reduce_sum.2026 = f32[] parameter(0)
  %reduce_sum.2027 = f32[] parameter(1)
  ROOT %reduce_sum.2028 = f32[] add(%reduce_sum.2026, %reduce_sum.2027)
}

%add.70.clone (x.141: bf16[], y.141: bf16[]) -> bf16[] {
  %x.141 = bf16[] parameter(0)
  %y.141 = bf16[] parameter(1)
  ROOT %add.1157 = bf16[] add(%x.141, %y.141)
}

%region_1134.26692 (reduce_sum.26689: f32[], reduce_sum.26690: f32[]) -> f32[] {
  %reduce_sum.26689 = f32[] parameter(0)
  %reduce_sum.26690 = f32[] parameter(1)
  ROOT %reduce_sum.26691 = f32[] add(%reduce_sum.26689, %reduce_sum.26690)
}

%region_1134.26692.clone (reduce_sum.2029: f32[], reduce_sum.2033: f32[]) -> f32[] {
  %reduce_sum.2029 = f32[] parameter(0)
  %reduce_sum.2033 = f32[] parameter(1)
  ROOT %reduce_sum.2036 = f32[] add(%reduce_sum.2029, %reduce_sum.2033)
}

%region_1135.26703 (reduce_sum.263: f32[], reduce_sum.26701: f32[]) -> f32[] {
  %reduce_sum.263 = f32[] parameter(0)
  %reduce_sum.26701 = f32[] parameter(1)
  ROOT %reduce_sum.26702 = f32[] add(%reduce_sum.263, %reduce_sum.26701)
}

%region_1135.26703.clone (reduce_sum.2037: f32[], reduce_sum.2038: f32[]) -> f32[] {
  %reduce_sum.2037 = f32[] parameter(0)
  %reduce_sum.2038 = f32[] parameter(1)
  ROOT %reduce_sum.2042 = f32[] add(%reduce_sum.2037, %reduce_sum.2038)
}

%region_1136.26714 (reduce_sum.26711: f32[], reduce_sum.26712: f32[]) -> f32[] {
  %reduce_sum.26711 = f32[] parameter(0)
  %reduce_sum.26712 = f32[] parameter(1)
  ROOT %reduce_sum.264 = f32[] add(%reduce_sum.26711, %reduce_sum.26712)
}

%region_1136.26714.clone (reduce_sum.2045: f32[], reduce_sum.2046: f32[]) -> f32[] {
  %reduce_sum.2045 = f32[] parameter(0)
  %reduce_sum.2046 = f32[] parameter(1)
  ROOT %reduce_sum.2047 = f32[] add(%reduce_sum.2045, %reduce_sum.2046)
}

%region_1137.26725 (reduce_sum.26722: f32[], reduce_sum.26723: f32[]) -> f32[] {
  %reduce_sum.26722 = f32[] parameter(0)
  %reduce_sum.26723 = f32[] parameter(1)
  ROOT %reduce_sum.26724 = f32[] add(%reduce_sum.26722, %reduce_sum.26723)
}

%region_1137.26725.clone (reduce_sum.2048: f32[], reduce_sum.2049: f32[]) -> f32[] {
  %reduce_sum.2048 = f32[] parameter(0)
  %reduce_sum.2049 = f32[] parameter(1)
  ROOT %reduce_sum.2050 = f32[] add(%reduce_sum.2048, %reduce_sum.2049)
}

%region_1138.26733 (reduce_sum.26730: bf16[], reduce_sum.26731: bf16[]) -> bf16[] {
  %reduce_sum.26730 = bf16[] parameter(0)
  %reduce_sum.26731 = bf16[] parameter(1)
  ROOT %reduce_sum.26732 = bf16[] add(%reduce_sum.26730, %reduce_sum.26731)
}

%region_1138.26733.clone (reduce_sum.2051: bf16[], reduce_sum.2052: bf16[]) -> bf16[] {
  %reduce_sum.2051 = bf16[] parameter(0)
  %reduce_sum.2052 = bf16[] parameter(1)
  ROOT %reduce_sum.2053 = bf16[] add(%reduce_sum.2051, %reduce_sum.2052)
}

%region_1139.26740 (reduce_sum.26737: f32[], reduce_sum.26738: f32[]) -> f32[] {
  %reduce_sum.26737 = f32[] parameter(0)
  %reduce_sum.26738 = f32[] parameter(1)
  ROOT %reduce_sum.26739 = f32[] add(%reduce_sum.26737, %reduce_sum.26738)
}

%region_1140.26748 (reduce_sum.26745: bf16[], reduce_sum.26746: bf16[]) -> bf16[] {
  %reduce_sum.26745 = bf16[] parameter(0)
  %reduce_sum.26746 = bf16[] parameter(1)
  ROOT %reduce_sum.26747 = bf16[] add(%reduce_sum.26745, %reduce_sum.26746)
}

%region_1140.26748.clone (reduce_sum.2054: bf16[], reduce_sum.2055: bf16[]) -> bf16[] {
  %reduce_sum.2054 = bf16[] parameter(0)
  %reduce_sum.2055 = bf16[] parameter(1)
  ROOT %reduce_sum.2056 = bf16[] add(%reduce_sum.2054, %reduce_sum.2055)
}

%region_1141.26755 (reduce_sum.26752: f32[], reduce_sum.26753: f32[]) -> f32[] {
  %reduce_sum.26752 = f32[] parameter(0)
  %reduce_sum.26753 = f32[] parameter(1)
  ROOT %reduce_sum.26754 = f32[] add(%reduce_sum.26752, %reduce_sum.26753)
}

%add.71.clone (x.143: bf16[], y.143: bf16[]) -> bf16[] {
  %x.143 = bf16[] parameter(0)
  %y.143 = bf16[] parameter(1)
  ROOT %add.1159 = bf16[] add(%x.143, %y.143)
}

%region_1142.26766 (reduce_sum.26763: f32[], reduce_sum.26764: f32[]) -> f32[] {
  %reduce_sum.26763 = f32[] parameter(0)
  %reduce_sum.26764 = f32[] parameter(1)
  ROOT %reduce_sum.26765 = f32[] add(%reduce_sum.26763, %reduce_sum.26764)
}

%region_1142.26766.clone (reduce_sum.2057: f32[], reduce_sum.2058: f32[]) -> f32[] {
  %reduce_sum.2057 = f32[] parameter(0)
  %reduce_sum.2058 = f32[] parameter(1)
  ROOT %reduce_sum.2059 = f32[] add(%reduce_sum.2057, %reduce_sum.2058)
}

%add.72.clone (x.145: bf16[], y.145: bf16[]) -> bf16[] {
  %x.145 = bf16[] parameter(0)
  %y.145 = bf16[] parameter(1)
  ROOT %add.1161 = bf16[] add(%x.145, %y.145)
}

%region_1143.26777 (reduce_sum.26774: f32[], reduce_sum.26775: f32[]) -> f32[] {
  %reduce_sum.26774 = f32[] parameter(0)
  %reduce_sum.26775 = f32[] parameter(1)
  ROOT %reduce_sum.26776 = f32[] add(%reduce_sum.26774, %reduce_sum.26775)
}

%region_1143.26777.clone (reduce_sum.2063: f32[], reduce_sum.2065: f32[]) -> f32[] {
  %reduce_sum.2063 = f32[] parameter(0)
  %reduce_sum.2065 = f32[] parameter(1)
  ROOT %reduce_sum.2066 = f32[] add(%reduce_sum.2063, %reduce_sum.2065)
}

%add.73.clone (x.147: bf16[], y.147: bf16[]) -> bf16[] {
  %x.147 = bf16[] parameter(0)
  %y.147 = bf16[] parameter(1)
  ROOT %add.1163 = bf16[] add(%x.147, %y.147)
}

%region_1144.26788 (reduce_sum.26785: f32[], reduce_sum.26786: f32[]) -> f32[] {
  %reduce_sum.26785 = f32[] parameter(0)
  %reduce_sum.26786 = f32[] parameter(1)
  ROOT %reduce_sum.26787 = f32[] add(%reduce_sum.26785, %reduce_sum.26786)
}

%region_1144.26788.clone (reduce_sum.2067: f32[], reduce_sum.2068: f32[]) -> f32[] {
  %reduce_sum.2067 = f32[] parameter(0)
  %reduce_sum.2068 = f32[] parameter(1)
  ROOT %reduce_sum.2069 = f32[] add(%reduce_sum.2067, %reduce_sum.2068)
}

%add.74.clone (x.149: bf16[], y.149: bf16[]) -> bf16[] {
  %x.149 = bf16[] parameter(0)
  %y.149 = bf16[] parameter(1)
  ROOT %add.1165 = bf16[] add(%x.149, %y.149)
}

%region_1145.26799 (reduce_sum.26796: f32[], reduce_sum.26797: f32[]) -> f32[] {
  %reduce_sum.26796 = f32[] parameter(0)
  %reduce_sum.26797 = f32[] parameter(1)
  ROOT %reduce_sum.26798 = f32[] add(%reduce_sum.26796, %reduce_sum.26797)
}

%region_1145.26799.clone (reduce_sum.2070: f32[], reduce_sum.2071: f32[]) -> f32[] {
  %reduce_sum.2070 = f32[] parameter(0)
  %reduce_sum.2071 = f32[] parameter(1)
  ROOT %reduce_sum.2072 = f32[] add(%reduce_sum.2070, %reduce_sum.2071)
}

%add.75.clone (x.151: bf16[], y.151: bf16[]) -> bf16[] {
  %x.151 = bf16[] parameter(0)
  %y.151 = bf16[] parameter(1)
  ROOT %add.1167 = bf16[] add(%x.151, %y.151)
}

%region_1146.26809 (reduce_sum.26806: f32[], reduce_sum.26807: f32[]) -> f32[] {
  %reduce_sum.26806 = f32[] parameter(0)
  %reduce_sum.26807 = f32[] parameter(1)
  ROOT %reduce_sum.26808 = f32[] add(%reduce_sum.26806, %reduce_sum.26807)
}

%region_1146.26809.clone (reduce_sum.2073: f32[], reduce_sum.2074: f32[]) -> f32[] {
  %reduce_sum.2073 = f32[] parameter(0)
  %reduce_sum.2074 = f32[] parameter(1)
  ROOT %reduce_sum.2075 = f32[] add(%reduce_sum.2073, %reduce_sum.2074)
}

%region_1147.26820 (reduce_sum.26817: f32[], reduce_sum.26818: f32[]) -> f32[] {
  %reduce_sum.26817 = f32[] parameter(0)
  %reduce_sum.26818 = f32[] parameter(1)
  ROOT %reduce_sum.26819 = f32[] add(%reduce_sum.26817, %reduce_sum.26818)
}

%region_1147.26820.clone (reduce_sum.2076: f32[], reduce_sum.2077: f32[]) -> f32[] {
  %reduce_sum.2076 = f32[] parameter(0)
  %reduce_sum.2077 = f32[] parameter(1)
  ROOT %reduce_sum.2078 = f32[] add(%reduce_sum.2076, %reduce_sum.2077)
}

%region_1148.26831 (reduce_sum.26828: f32[], reduce_sum.26829: f32[]) -> f32[] {
  %reduce_sum.26828 = f32[] parameter(0)
  %reduce_sum.26829 = f32[] parameter(1)
  ROOT %reduce_sum.26830 = f32[] add(%reduce_sum.26828, %reduce_sum.26829)
}

%region_1148.26831.clone (reduce_sum.2082: f32[], reduce_sum.2084: f32[]) -> f32[] {
  %reduce_sum.2082 = f32[] parameter(0)
  %reduce_sum.2084 = f32[] parameter(1)
  ROOT %reduce_sum.2085 = f32[] add(%reduce_sum.2082, %reduce_sum.2084)
}

%region_1149.26842 (reduce_sum.26839: f32[], reduce_sum.26840: f32[]) -> f32[] {
  %reduce_sum.26839 = f32[] parameter(0)
  %reduce_sum.26840 = f32[] parameter(1)
  ROOT %reduce_sum.26841 = f32[] add(%reduce_sum.26839, %reduce_sum.26840)
}

%region_1149.26842.clone (reduce_sum.2086: f32[], reduce_sum.2087: f32[]) -> f32[] {
  %reduce_sum.2086 = f32[] parameter(0)
  %reduce_sum.2087 = f32[] parameter(1)
  ROOT %reduce_sum.2091 = f32[] add(%reduce_sum.2086, %reduce_sum.2087)
}

%region_1150.26850 (reduce_sum.26847: bf16[], reduce_sum.26848: bf16[]) -> bf16[] {
  %reduce_sum.26847 = bf16[] parameter(0)
  %reduce_sum.26848 = bf16[] parameter(1)
  ROOT %reduce_sum.26849 = bf16[] add(%reduce_sum.26847, %reduce_sum.26848)
}

%region_1150.26850.clone (reduce_sum.2093: bf16[], reduce_sum.2094: bf16[]) -> bf16[] {
  %reduce_sum.2093 = bf16[] parameter(0)
  %reduce_sum.2094 = bf16[] parameter(1)
  ROOT %reduce_sum.2095 = bf16[] add(%reduce_sum.2093, %reduce_sum.2094)
}

%region_1151.26857 (reduce_sum.26854: f32[], reduce_sum.26855: f32[]) -> f32[] {
  %reduce_sum.26854 = f32[] parameter(0)
  %reduce_sum.26855 = f32[] parameter(1)
  ROOT %reduce_sum.26856 = f32[] add(%reduce_sum.26854, %reduce_sum.26855)
}

%region_1152.26865 (reduce_sum.26862: bf16[], reduce_sum.26863: bf16[]) -> bf16[] {
  %reduce_sum.26862 = bf16[] parameter(0)
  %reduce_sum.26863 = bf16[] parameter(1)
  ROOT %reduce_sum.26864 = bf16[] add(%reduce_sum.26862, %reduce_sum.26863)
}

%region_1152.26865.clone (reduce_sum.2096: bf16[], reduce_sum.2097: bf16[]) -> bf16[] {
  %reduce_sum.2096 = bf16[] parameter(0)
  %reduce_sum.2097 = bf16[] parameter(1)
  ROOT %reduce_sum.2098 = bf16[] add(%reduce_sum.2096, %reduce_sum.2097)
}

%region_1153.26872 (reduce_sum.26869: f32[], reduce_sum.26870: f32[]) -> f32[] {
  %reduce_sum.26869 = f32[] parameter(0)
  %reduce_sum.26870 = f32[] parameter(1)
  ROOT %reduce_sum.26871 = f32[] add(%reduce_sum.26869, %reduce_sum.26870)
}

%add.76.clone (x.153: bf16[], y.153: bf16[]) -> bf16[] {
  %x.153 = bf16[] parameter(0)
  %y.153 = bf16[] parameter(1)
  ROOT %add.1170 = bf16[] add(%x.153, %y.153)
}

%region_1154.26883 (reduce_sum.26880: f32[], reduce_sum.26881: f32[]) -> f32[] {
  %reduce_sum.26880 = f32[] parameter(0)
  %reduce_sum.26881 = f32[] parameter(1)
  ROOT %reduce_sum.26882 = f32[] add(%reduce_sum.26880, %reduce_sum.26881)
}

%region_1154.26883.clone (reduce_sum.2099: f32[], reduce_sum.2100: f32[]) -> f32[] {
  %reduce_sum.2099 = f32[] parameter(0)
  %reduce_sum.2100 = f32[] parameter(1)
  ROOT %reduce_sum.2101 = f32[] add(%reduce_sum.2099, %reduce_sum.2100)
}

%add.77.clone (x.155: bf16[], y.155: bf16[]) -> bf16[] {
  %x.155 = bf16[] parameter(0)
  %y.155 = bf16[] parameter(1)
  ROOT %add.1172 = bf16[] add(%x.155, %y.155)
}

%region_1155.26894 (reduce_sum.265: f32[], reduce_sum.266: f32[]) -> f32[] {
  %reduce_sum.265 = f32[] parameter(0)
  %reduce_sum.266 = f32[] parameter(1)
  ROOT %reduce_sum.26893 = f32[] add(%reduce_sum.265, %reduce_sum.266)
}

%region_1155.26894.clone (reduce_sum.2102: f32[], reduce_sum.2103: f32[]) -> f32[] {
  %reduce_sum.2102 = f32[] parameter(0)
  %reduce_sum.2103 = f32[] parameter(1)
  ROOT %reduce_sum.2104 = f32[] add(%reduce_sum.2102, %reduce_sum.2103)
}

%add.78.clone (x.157: bf16[], y.157: bf16[]) -> bf16[] {
  %x.157 = bf16[] parameter(0)
  %y.157 = bf16[] parameter(1)
  ROOT %add.1175 = bf16[] add(%x.157, %y.157)
}

%region_1156.26905 (reduce_sum.267: f32[], reduce_sum.26903: f32[]) -> f32[] {
  %reduce_sum.267 = f32[] parameter(0)
  %reduce_sum.26903 = f32[] parameter(1)
  ROOT %reduce_sum.26904 = f32[] add(%reduce_sum.267, %reduce_sum.26903)
}

%region_1156.26905.clone (reduce_sum.2105: f32[], reduce_sum.2106: f32[]) -> f32[] {
  %reduce_sum.2105 = f32[] parameter(0)
  %reduce_sum.2106 = f32[] parameter(1)
  ROOT %reduce_sum.2107 = f32[] add(%reduce_sum.2105, %reduce_sum.2106)
}

%add.79.clone (x.159: bf16[], y.159: bf16[]) -> bf16[] {
  %x.159 = bf16[] parameter(0)
  %y.159 = bf16[] parameter(1)
  ROOT %add.1177 = bf16[] add(%x.159, %y.159)
}

%region_1157.26916 (reduce_sum.26913: f32[], reduce_sum.26914: f32[]) -> f32[] {
  %reduce_sum.26913 = f32[] parameter(0)
  %reduce_sum.26914 = f32[] parameter(1)
  ROOT %reduce_sum.26915 = f32[] add(%reduce_sum.26913, %reduce_sum.26914)
}

%region_1157.26916.clone (reduce_sum.2108: f32[], reduce_sum.2109: f32[]) -> f32[] {
  %reduce_sum.2108 = f32[] parameter(0)
  %reduce_sum.2109 = f32[] parameter(1)
  ROOT %reduce_sum.2110 = f32[] add(%reduce_sum.2108, %reduce_sum.2109)
}

%add.80.clone (x.161: bf16[], y.161: bf16[]) -> bf16[] {
  %x.161 = bf16[] parameter(0)
  %y.161 = bf16[] parameter(1)
  ROOT %add.1179 = bf16[] add(%x.161, %y.161)
}

%region_1158.26926 (reduce_sum.26923: f32[], reduce_sum.268: f32[]) -> f32[] {
  %reduce_sum.26923 = f32[] parameter(0)
  %reduce_sum.268 = f32[] parameter(1)
  ROOT %reduce_sum.26925 = f32[] add(%reduce_sum.26923, %reduce_sum.268)
}

%region_1158.26926.clone (reduce_sum.2111: f32[], reduce_sum.2112: f32[]) -> f32[] {
  %reduce_sum.2111 = f32[] parameter(0)
  %reduce_sum.2112 = f32[] parameter(1)
  ROOT %reduce_sum.2113 = f32[] add(%reduce_sum.2111, %reduce_sum.2112)
}

%region_1159.26937 (reduce_sum.26934: f32[], reduce_sum.26935: f32[]) -> f32[] {
  %reduce_sum.26934 = f32[] parameter(0)
  %reduce_sum.26935 = f32[] parameter(1)
  ROOT %reduce_sum.26936 = f32[] add(%reduce_sum.26934, %reduce_sum.26935)
}

%region_1159.26937.clone (reduce_sum.2114: f32[], reduce_sum.2115: f32[]) -> f32[] {
  %reduce_sum.2114 = f32[] parameter(0)
  %reduce_sum.2115 = f32[] parameter(1)
  ROOT %reduce_sum.2116 = f32[] add(%reduce_sum.2114, %reduce_sum.2115)
}

%region_1160.26948 (reduce_sum.26945: f32[], reduce_sum.26946: f32[]) -> f32[] {
  %reduce_sum.26945 = f32[] parameter(0)
  %reduce_sum.26946 = f32[] parameter(1)
  ROOT %reduce_sum.26947 = f32[] add(%reduce_sum.26945, %reduce_sum.26946)
}

%region_1160.26948.clone (reduce_sum.2117: f32[], reduce_sum.2118: f32[]) -> f32[] {
  %reduce_sum.2117 = f32[] parameter(0)
  %reduce_sum.2118 = f32[] parameter(1)
  ROOT %reduce_sum.2119 = f32[] add(%reduce_sum.2117, %reduce_sum.2118)
}

%region_1161.26959 (reduce_sum.26956: f32[], reduce_sum.26957: f32[]) -> f32[] {
  %reduce_sum.26956 = f32[] parameter(0)
  %reduce_sum.26957 = f32[] parameter(1)
  ROOT %reduce_sum.26958 = f32[] add(%reduce_sum.26956, %reduce_sum.26957)
}

%region_1161.26959.clone (reduce_sum.2120: f32[], reduce_sum.2121: f32[]) -> f32[] {
  %reduce_sum.2120 = f32[] parameter(0)
  %reduce_sum.2121 = f32[] parameter(1)
  ROOT %reduce_sum.2122 = f32[] add(%reduce_sum.2120, %reduce_sum.2121)
}

%region_1162.26967 (reduce_sum.26964: bf16[], reduce_sum.269: bf16[]) -> bf16[] {
  %reduce_sum.26964 = bf16[] parameter(0)
  %reduce_sum.269 = bf16[] parameter(1)
  ROOT %reduce_sum.26966 = bf16[] add(%reduce_sum.26964, %reduce_sum.269)
}

%region_1162.26967.clone (reduce_sum.2123: bf16[], reduce_sum.2124: bf16[]) -> bf16[] {
  %reduce_sum.2123 = bf16[] parameter(0)
  %reduce_sum.2124 = bf16[] parameter(1)
  ROOT %reduce_sum.2130 = bf16[] add(%reduce_sum.2123, %reduce_sum.2124)
}

%region_1163.26974 (reduce_sum.26971: f32[], reduce_sum.26972: f32[]) -> f32[] {
  %reduce_sum.26971 = f32[] parameter(0)
  %reduce_sum.26972 = f32[] parameter(1)
  ROOT %reduce_sum.26973 = f32[] add(%reduce_sum.26971, %reduce_sum.26972)
}

%region_1164.26982 (reduce_sum.26979: bf16[], reduce_sum.26980: bf16[]) -> bf16[] {
  %reduce_sum.26979 = bf16[] parameter(0)
  %reduce_sum.26980 = bf16[] parameter(1)
  ROOT %reduce_sum.26981 = bf16[] add(%reduce_sum.26979, %reduce_sum.26980)
}

%region_1164.26982.clone (reduce_sum.2132: bf16[], reduce_sum.2133: bf16[]) -> bf16[] {
  %reduce_sum.2132 = bf16[] parameter(0)
  %reduce_sum.2133 = bf16[] parameter(1)
  ROOT %reduce_sum.2134 = bf16[] add(%reduce_sum.2132, %reduce_sum.2133)
}

%region_1165.26989 (reduce_sum.26986: f32[], reduce_sum.26987: f32[]) -> f32[] {
  %reduce_sum.26986 = f32[] parameter(0)
  %reduce_sum.26987 = f32[] parameter(1)
  ROOT %reduce_sum.26988 = f32[] add(%reduce_sum.26986, %reduce_sum.26987)
}

%add.81.clone (x.163: bf16[], y.163: bf16[]) -> bf16[] {
  %x.163 = bf16[] parameter(0)
  %y.163 = bf16[] parameter(1)
  ROOT %add.1181 = bf16[] add(%x.163, %y.163)
}

%region_1166.27000 (reduce_sum.26997: f32[], reduce_sum.26998: f32[]) -> f32[] {
  %reduce_sum.26997 = f32[] parameter(0)
  %reduce_sum.26998 = f32[] parameter(1)
  ROOT %reduce_sum.26999 = f32[] add(%reduce_sum.26997, %reduce_sum.26998)
}

%region_1166.27000.clone (reduce_sum.2135: f32[], reduce_sum.2136: f32[]) -> f32[] {
  %reduce_sum.2135 = f32[] parameter(0)
  %reduce_sum.2136 = f32[] parameter(1)
  ROOT %reduce_sum.2137 = f32[] add(%reduce_sum.2135, %reduce_sum.2136)
}

%add.82.clone (x.165: bf16[], y.165: bf16[]) -> bf16[] {
  %x.165 = bf16[] parameter(0)
  %y.165 = bf16[] parameter(1)
  ROOT %add.1183 = bf16[] add(%x.165, %y.165)
}

%region_1167.27011 (reduce_sum.27008: f32[], reduce_sum.27009: f32[]) -> f32[] {
  %reduce_sum.27008 = f32[] parameter(0)
  %reduce_sum.27009 = f32[] parameter(1)
  ROOT %reduce_sum.27010 = f32[] add(%reduce_sum.27008, %reduce_sum.27009)
}

%region_1167.27011.clone (reduce_sum.2138: f32[], reduce_sum.2139: f32[]) -> f32[] {
  %reduce_sum.2138 = f32[] parameter(0)
  %reduce_sum.2139 = f32[] parameter(1)
  ROOT %reduce_sum.2140 = f32[] add(%reduce_sum.2138, %reduce_sum.2139)
}

%add.83.clone (x.167: bf16[], y.167: bf16[]) -> bf16[] {
  %x.167 = bf16[] parameter(0)
  %y.167 = bf16[] parameter(1)
  ROOT %add.1185 = bf16[] add(%x.167, %y.167)
}

%region_1168.27022 (reduce_sum.27019: f32[], reduce_sum.27020: f32[]) -> f32[] {
  %reduce_sum.27019 = f32[] parameter(0)
  %reduce_sum.27020 = f32[] parameter(1)
  ROOT %reduce_sum.27021 = f32[] add(%reduce_sum.27019, %reduce_sum.27020)
}

%region_1168.27022.clone (reduce_sum.2141: f32[], reduce_sum.2142: f32[]) -> f32[] {
  %reduce_sum.2141 = f32[] parameter(0)
  %reduce_sum.2142 = f32[] parameter(1)
  ROOT %reduce_sum.2143 = f32[] add(%reduce_sum.2141, %reduce_sum.2142)
}

%add.84.clone (x.169: bf16[], y.169: bf16[]) -> bf16[] {
  %x.169 = bf16[] parameter(0)
  %y.169 = bf16[] parameter(1)
  ROOT %add.1187 = bf16[] add(%x.169, %y.169)
}

%region_1169.27033 (reduce_sum.27030: f32[], reduce_sum.270: f32[]) -> f32[] {
  %reduce_sum.27030 = f32[] parameter(0)
  %reduce_sum.270 = f32[] parameter(1)
  ROOT %reduce_sum.271 = f32[] add(%reduce_sum.27030, %reduce_sum.270)
}

%region_1169.27033.clone (reduce_sum.2144: f32[], reduce_sum.2145: f32[]) -> f32[] {
  %reduce_sum.2144 = f32[] parameter(0)
  %reduce_sum.2145 = f32[] parameter(1)
  ROOT %reduce_sum.2146 = f32[] add(%reduce_sum.2144, %reduce_sum.2145)
}

%add.85.clone (x.171: bf16[], y.171: bf16[]) -> bf16[] {
  %x.171 = bf16[] parameter(0)
  %y.171 = bf16[] parameter(1)
  ROOT %add.1189 = bf16[] add(%x.171, %y.171)
}

%region_1170.27043 (reduce_sum.27040: f32[], reduce_sum.27041: f32[]) -> f32[] {
  %reduce_sum.27040 = f32[] parameter(0)
  %reduce_sum.27041 = f32[] parameter(1)
  ROOT %reduce_sum.27042 = f32[] add(%reduce_sum.27040, %reduce_sum.27041)
}

%region_1170.27043.clone (reduce_sum.2147: f32[], reduce_sum.2148: f32[]) -> f32[] {
  %reduce_sum.2147 = f32[] parameter(0)
  %reduce_sum.2148 = f32[] parameter(1)
  ROOT %reduce_sum.2149 = f32[] add(%reduce_sum.2147, %reduce_sum.2148)
}

%region_1171.27054 (reduce_sum.27051: f32[], reduce_sum.27052: f32[]) -> f32[] {
  %reduce_sum.27051 = f32[] parameter(0)
  %reduce_sum.27052 = f32[] parameter(1)
  ROOT %reduce_sum.27053 = f32[] add(%reduce_sum.27051, %reduce_sum.27052)
}

%region_1171.27054.clone (reduce_sum.2150: f32[], reduce_sum.2151: f32[]) -> f32[] {
  %reduce_sum.2150 = f32[] parameter(0)
  %reduce_sum.2151 = f32[] parameter(1)
  ROOT %reduce_sum.2152 = f32[] add(%reduce_sum.2150, %reduce_sum.2151)
}

%region_1172.27065 (reduce_sum.27062: f32[], reduce_sum.27063: f32[]) -> f32[] {
  %reduce_sum.27062 = f32[] parameter(0)
  %reduce_sum.27063 = f32[] parameter(1)
  ROOT %reduce_sum.27064 = f32[] add(%reduce_sum.27062, %reduce_sum.27063)
}

%region_1172.27065.clone (reduce_sum.2153: f32[], reduce_sum.2154: f32[]) -> f32[] {
  %reduce_sum.2153 = f32[] parameter(0)
  %reduce_sum.2154 = f32[] parameter(1)
  ROOT %reduce_sum.2158 = f32[] add(%reduce_sum.2153, %reduce_sum.2154)
}

%region_1173.27076 (reduce_sum.27073: f32[], reduce_sum.27074: f32[]) -> f32[] {
  %reduce_sum.27073 = f32[] parameter(0)
  %reduce_sum.27074 = f32[] parameter(1)
  ROOT %reduce_sum.27075 = f32[] add(%reduce_sum.27073, %reduce_sum.27074)
}

%region_1173.27076.clone (reduce_sum.2160: f32[], reduce_sum.2161: f32[]) -> f32[] {
  %reduce_sum.2160 = f32[] parameter(0)
  %reduce_sum.2161 = f32[] parameter(1)
  ROOT %reduce_sum.2162 = f32[] add(%reduce_sum.2160, %reduce_sum.2161)
}

%region_1174.27084 (reduce_sum.27081: bf16[], reduce_sum.27082: bf16[]) -> bf16[] {
  %reduce_sum.27081 = bf16[] parameter(0)
  %reduce_sum.27082 = bf16[] parameter(1)
  ROOT %reduce_sum.27083 = bf16[] add(%reduce_sum.27081, %reduce_sum.27082)
}

%region_1174.27084.clone (reduce_sum.2163: bf16[], reduce_sum.2164: bf16[]) -> bf16[] {
  %reduce_sum.2163 = bf16[] parameter(0)
  %reduce_sum.2164 = bf16[] parameter(1)
  ROOT %reduce_sum.2168 = bf16[] add(%reduce_sum.2163, %reduce_sum.2164)
}

%region_1175.27091 (reduce_sum.27088: f32[], reduce_sum.27089: f32[]) -> f32[] {
  %reduce_sum.27088 = f32[] parameter(0)
  %reduce_sum.27089 = f32[] parameter(1)
  ROOT %reduce_sum.27090 = f32[] add(%reduce_sum.27088, %reduce_sum.27089)
}

%region_1176.27099 (reduce_sum.27096: bf16[], reduce_sum.27097: bf16[]) -> bf16[] {
  %reduce_sum.27096 = bf16[] parameter(0)
  %reduce_sum.27097 = bf16[] parameter(1)
  ROOT %reduce_sum.272 = bf16[] add(%reduce_sum.27096, %reduce_sum.27097)
}

%region_1176.27099.clone (reduce_sum.2170: bf16[], reduce_sum.2171: bf16[]) -> bf16[] {
  %reduce_sum.2170 = bf16[] parameter(0)
  %reduce_sum.2171 = bf16[] parameter(1)
  ROOT %reduce_sum.2172 = bf16[] add(%reduce_sum.2170, %reduce_sum.2171)
}

%region_1177.27106 (reduce_sum.27103: f32[], reduce_sum.273: f32[]) -> f32[] {
  %reduce_sum.27103 = f32[] parameter(0)
  %reduce_sum.273 = f32[] parameter(1)
  ROOT %reduce_sum.274 = f32[] add(%reduce_sum.27103, %reduce_sum.273)
}

%add.86.clone (x.173: bf16[], y.173: bf16[]) -> bf16[] {
  %x.173 = bf16[] parameter(0)
  %y.173 = bf16[] parameter(1)
  ROOT %add.1191 = bf16[] add(%x.173, %y.173)
}

%region_1178.27117 (reduce_sum.27114: f32[], reduce_sum.27115: f32[]) -> f32[] {
  %reduce_sum.27114 = f32[] parameter(0)
  %reduce_sum.27115 = f32[] parameter(1)
  ROOT %reduce_sum.27116 = f32[] add(%reduce_sum.27114, %reduce_sum.27115)
}

%region_1178.27117.clone (reduce_sum.2173: f32[], reduce_sum.2174: f32[]) -> f32[] {
  %reduce_sum.2173 = f32[] parameter(0)
  %reduce_sum.2174 = f32[] parameter(1)
  ROOT %reduce_sum.2175 = f32[] add(%reduce_sum.2173, %reduce_sum.2174)
}

%add.87.clone (x.175: bf16[], y.175: bf16[]) -> bf16[] {
  %x.175 = bf16[] parameter(0)
  %y.175 = bf16[] parameter(1)
  ROOT %add.1193 = bf16[] add(%x.175, %y.175)
}

%region_1179.27128 (reduce_sum.27125: f32[], reduce_sum.27126: f32[]) -> f32[] {
  %reduce_sum.27125 = f32[] parameter(0)
  %reduce_sum.27126 = f32[] parameter(1)
  ROOT %reduce_sum.27127 = f32[] add(%reduce_sum.27125, %reduce_sum.27126)
}

%region_1179.27128.clone (reduce_sum.2176: f32[], reduce_sum.2177: f32[]) -> f32[] {
  %reduce_sum.2176 = f32[] parameter(0)
  %reduce_sum.2177 = f32[] parameter(1)
  ROOT %reduce_sum.2178 = f32[] add(%reduce_sum.2176, %reduce_sum.2177)
}

%add.88.clone (x.177: bf16[], y.177: bf16[]) -> bf16[] {
  %x.177 = bf16[] parameter(0)
  %y.177 = bf16[] parameter(1)
  ROOT %add.1195 = bf16[] add(%x.177, %y.177)
}

%region_1180.27139 (reduce_sum.27136: f32[], reduce_sum.27137: f32[]) -> f32[] {
  %reduce_sum.27136 = f32[] parameter(0)
  %reduce_sum.27137 = f32[] parameter(1)
  ROOT %reduce_sum.27138 = f32[] add(%reduce_sum.27136, %reduce_sum.27137)
}

%region_1180.27139.clone (reduce_sum.2179: f32[], reduce_sum.2180: f32[]) -> f32[] {
  %reduce_sum.2179 = f32[] parameter(0)
  %reduce_sum.2180 = f32[] parameter(1)
  ROOT %reduce_sum.2181 = f32[] add(%reduce_sum.2179, %reduce_sum.2180)
}

%add.89.clone (x.179: bf16[], y.179: bf16[]) -> bf16[] {
  %x.179 = bf16[] parameter(0)
  %y.179 = bf16[] parameter(1)
  ROOT %add.1197 = bf16[] add(%x.179, %y.179)
}

%region_1181.27150 (reduce_sum.27147: f32[], reduce_sum.27148: f32[]) -> f32[] {
  %reduce_sum.27147 = f32[] parameter(0)
  %reduce_sum.27148 = f32[] parameter(1)
  ROOT %reduce_sum.27149 = f32[] add(%reduce_sum.27147, %reduce_sum.27148)
}

%region_1181.27150.clone (reduce_sum.2182: f32[], reduce_sum.2183: f32[]) -> f32[] {
  %reduce_sum.2182 = f32[] parameter(0)
  %reduce_sum.2183 = f32[] parameter(1)
  ROOT %reduce_sum.2184 = f32[] add(%reduce_sum.2182, %reduce_sum.2183)
}

%add.90.clone (x.181: bf16[], y.181: bf16[]) -> bf16[] {
  %x.181 = bf16[] parameter(0)
  %y.181 = bf16[] parameter(1)
  ROOT %add.1199 = bf16[] add(%x.181, %y.181)
}

%region_1182.27160 (reduce_sum.27157: f32[], reduce_sum.27158: f32[]) -> f32[] {
  %reduce_sum.27157 = f32[] parameter(0)
  %reduce_sum.27158 = f32[] parameter(1)
  ROOT %reduce_sum.27159 = f32[] add(%reduce_sum.27157, %reduce_sum.27158)
}

%region_1182.27160.clone (reduce_sum.2185: f32[], reduce_sum.2186: f32[]) -> f32[] {
  %reduce_sum.2185 = f32[] parameter(0)
  %reduce_sum.2186 = f32[] parameter(1)
  ROOT %reduce_sum.2187 = f32[] add(%reduce_sum.2185, %reduce_sum.2186)
}

%region_1183.27171 (reduce_sum.27168: f32[], reduce_sum.27169: f32[]) -> f32[] {
  %reduce_sum.27168 = f32[] parameter(0)
  %reduce_sum.27169 = f32[] parameter(1)
  ROOT %reduce_sum.27170 = f32[] add(%reduce_sum.27168, %reduce_sum.27169)
}

%region_1183.27171.clone (reduce_sum.2188: f32[], reduce_sum.2189: f32[]) -> f32[] {
  %reduce_sum.2188 = f32[] parameter(0)
  %reduce_sum.2189 = f32[] parameter(1)
  ROOT %reduce_sum.2190 = f32[] add(%reduce_sum.2188, %reduce_sum.2189)
}

%region_1184.27182 (reduce_sum.275: f32[], reduce_sum.276: f32[]) -> f32[] {
  %reduce_sum.275 = f32[] parameter(0)
  %reduce_sum.276 = f32[] parameter(1)
  ROOT %reduce_sum.277 = f32[] add(%reduce_sum.275, %reduce_sum.276)
}

%region_1184.27182.clone (reduce_sum.2191: f32[], reduce_sum.2192: f32[]) -> f32[] {
  %reduce_sum.2191 = f32[] parameter(0)
  %reduce_sum.2192 = f32[] parameter(1)
  ROOT %reduce_sum.2193 = f32[] add(%reduce_sum.2191, %reduce_sum.2192)
}

%region_1185.27193 (reduce_sum.27190: f32[], reduce_sum.278: f32[]) -> f32[] {
  %reduce_sum.27190 = f32[] parameter(0)
  %reduce_sum.278 = f32[] parameter(1)
  ROOT %reduce_sum.279 = f32[] add(%reduce_sum.27190, %reduce_sum.278)
}

%region_1185.27193.clone (reduce_sum.2194: f32[], reduce_sum.2195: f32[]) -> f32[] {
  %reduce_sum.2194 = f32[] parameter(0)
  %reduce_sum.2195 = f32[] parameter(1)
  ROOT %reduce_sum.2196 = f32[] add(%reduce_sum.2194, %reduce_sum.2195)
}

%region_1186.27201 (reduce_sum.27198: bf16[], reduce_sum.27199: bf16[]) -> bf16[] {
  %reduce_sum.27198 = bf16[] parameter(0)
  %reduce_sum.27199 = bf16[] parameter(1)
  ROOT %reduce_sum.27200 = bf16[] add(%reduce_sum.27198, %reduce_sum.27199)
}

%region_1186.27201.clone (reduce_sum.2197: bf16[], reduce_sum.2198: bf16[]) -> bf16[] {
  %reduce_sum.2197 = bf16[] parameter(0)
  %reduce_sum.2198 = bf16[] parameter(1)
  ROOT %reduce_sum.2199 = bf16[] add(%reduce_sum.2197, %reduce_sum.2198)
}

%region_1187.27208 (reduce_sum.27205: f32[], reduce_sum.27206: f32[]) -> f32[] {
  %reduce_sum.27205 = f32[] parameter(0)
  %reduce_sum.27206 = f32[] parameter(1)
  ROOT %reduce_sum.27207 = f32[] add(%reduce_sum.27205, %reduce_sum.27206)
}

%region_1188.27216 (reduce_sum.27213: bf16[], reduce_sum.27214: bf16[]) -> bf16[] {
  %reduce_sum.27213 = bf16[] parameter(0)
  %reduce_sum.27214 = bf16[] parameter(1)
  ROOT %reduce_sum.27215 = bf16[] add(%reduce_sum.27213, %reduce_sum.27214)
}

%region_1188.27216.clone (reduce_sum.2200: bf16[], reduce_sum.2201: bf16[]) -> bf16[] {
  %reduce_sum.2200 = bf16[] parameter(0)
  %reduce_sum.2201 = bf16[] parameter(1)
  ROOT %reduce_sum.2202 = bf16[] add(%reduce_sum.2200, %reduce_sum.2201)
}

%region_1189.27223 (reduce_sum.27220: f32[], reduce_sum.27221: f32[]) -> f32[] {
  %reduce_sum.27220 = f32[] parameter(0)
  %reduce_sum.27221 = f32[] parameter(1)
  ROOT %reduce_sum.27222 = f32[] add(%reduce_sum.27220, %reduce_sum.27221)
}

%add.91.clone (x.183: bf16[], y.183: bf16[]) -> bf16[] {
  %x.183 = bf16[] parameter(0)
  %y.183 = bf16[] parameter(1)
  ROOT %add.1201 = bf16[] add(%x.183, %y.183)
}

%region_1190.27234 (reduce_sum.27231: f32[], reduce_sum.27232: f32[]) -> f32[] {
  %reduce_sum.27231 = f32[] parameter(0)
  %reduce_sum.27232 = f32[] parameter(1)
  ROOT %reduce_sum.27233 = f32[] add(%reduce_sum.27231, %reduce_sum.27232)
}

%region_1190.27234.clone (reduce_sum.2203: f32[], reduce_sum.2204: f32[]) -> f32[] {
  %reduce_sum.2203 = f32[] parameter(0)
  %reduce_sum.2204 = f32[] parameter(1)
  ROOT %reduce_sum.2205 = f32[] add(%reduce_sum.2203, %reduce_sum.2204)
}

%add.92.clone (x.185: bf16[], y.185: bf16[]) -> bf16[] {
  %x.185 = bf16[] parameter(0)
  %y.185 = bf16[] parameter(1)
  ROOT %add.1203 = bf16[] add(%x.185, %y.185)
}

%region_1191.27245 (reduce_sum.27242: f32[], reduce_sum.27243: f32[]) -> f32[] {
  %reduce_sum.27242 = f32[] parameter(0)
  %reduce_sum.27243 = f32[] parameter(1)
  ROOT %reduce_sum.27244 = f32[] add(%reduce_sum.27242, %reduce_sum.27243)
}

%region_1191.27245.clone (reduce_sum.2206: f32[], reduce_sum.2210: f32[]) -> f32[] {
  %reduce_sum.2206 = f32[] parameter(0)
  %reduce_sum.2210 = f32[] parameter(1)
  ROOT %reduce_sum.2212 = f32[] add(%reduce_sum.2206, %reduce_sum.2210)
}

%add.93.clone (x.187: bf16[], y.187: bf16[]) -> bf16[] {
  %x.187 = bf16[] parameter(0)
  %y.187 = bf16[] parameter(1)
  ROOT %add.1205 = bf16[] add(%x.187, %y.187)
}

%region_1192.27256 (reduce_sum.27253: f32[], reduce_sum.27254: f32[]) -> f32[] {
  %reduce_sum.27253 = f32[] parameter(0)
  %reduce_sum.27254 = f32[] parameter(1)
  ROOT %reduce_sum.27255 = f32[] add(%reduce_sum.27253, %reduce_sum.27254)
}

%region_1192.27256.clone (reduce_sum.2213: f32[], reduce_sum.2214: f32[]) -> f32[] {
  %reduce_sum.2213 = f32[] parameter(0)
  %reduce_sum.2214 = f32[] parameter(1)
  ROOT %reduce_sum.2215 = f32[] add(%reduce_sum.2213, %reduce_sum.2214)
}

%add.94.clone (x.189: bf16[], y.189: bf16[]) -> bf16[] {
  %x.189 = bf16[] parameter(0)
  %y.189 = bf16[] parameter(1)
  ROOT %add.1207 = bf16[] add(%x.189, %y.189)
}

%region_1193.27267 (reduce_sum.27264: f32[], reduce_sum.27265: f32[]) -> f32[] {
  %reduce_sum.27264 = f32[] parameter(0)
  %reduce_sum.27265 = f32[] parameter(1)
  ROOT %reduce_sum.27266 = f32[] add(%reduce_sum.27264, %reduce_sum.27265)
}

%region_1193.27267.clone (reduce_sum.2216: f32[], reduce_sum.2217: f32[]) -> f32[] {
  %reduce_sum.2216 = f32[] parameter(0)
  %reduce_sum.2217 = f32[] parameter(1)
  ROOT %reduce_sum.2218 = f32[] add(%reduce_sum.2216, %reduce_sum.2217)
}

%add.95.clone (x.191: bf16[], y.191: bf16[]) -> bf16[] {
  %x.191 = bf16[] parameter(0)
  %y.191 = bf16[] parameter(1)
  ROOT %add.1209 = bf16[] add(%x.191, %y.191)
}

%region_1194.27277 (reduce_sum.280: f32[], reduce_sum.281: f32[]) -> f32[] {
  %reduce_sum.280 = f32[] parameter(0)
  %reduce_sum.281 = f32[] parameter(1)
  ROOT %reduce_sum.27276 = f32[] add(%reduce_sum.280, %reduce_sum.281)
}

%region_1194.27277.clone (reduce_sum.2219: f32[], reduce_sum.2220: f32[]) -> f32[] {
  %reduce_sum.2219 = f32[] parameter(0)
  %reduce_sum.2220 = f32[] parameter(1)
  ROOT %reduce_sum.2221 = f32[] add(%reduce_sum.2219, %reduce_sum.2220)
}

%region_1195.27288 (reduce_sum.282: f32[], reduce_sum.27286: f32[]) -> f32[] {
  %reduce_sum.282 = f32[] parameter(0)
  %reduce_sum.27286 = f32[] parameter(1)
  ROOT %reduce_sum.283 = f32[] add(%reduce_sum.282, %reduce_sum.27286)
}

%region_1195.27288.clone (reduce_sum.2222: f32[], reduce_sum.2223: f32[]) -> f32[] {
  %reduce_sum.2222 = f32[] parameter(0)
  %reduce_sum.2223 = f32[] parameter(1)
  ROOT %reduce_sum.2224 = f32[] add(%reduce_sum.2222, %reduce_sum.2223)
}

%region_1196.27299 (reduce_sum.27296: f32[], reduce_sum.27297: f32[]) -> f32[] {
  %reduce_sum.27296 = f32[] parameter(0)
  %reduce_sum.27297 = f32[] parameter(1)
  ROOT %reduce_sum.27298 = f32[] add(%reduce_sum.27296, %reduce_sum.27297)
}

%region_1196.27299.clone (reduce_sum.2225: f32[], reduce_sum.2226: f32[]) -> f32[] {
  %reduce_sum.2225 = f32[] parameter(0)
  %reduce_sum.2226 = f32[] parameter(1)
  ROOT %reduce_sum.2227 = f32[] add(%reduce_sum.2225, %reduce_sum.2226)
}

%region_1197.27310 (reduce_sum.27307: f32[], reduce_sum.27308: f32[]) -> f32[] {
  %reduce_sum.27307 = f32[] parameter(0)
  %reduce_sum.27308 = f32[] parameter(1)
  ROOT %reduce_sum.27309 = f32[] add(%reduce_sum.27307, %reduce_sum.27308)
}

%region_1197.27310.clone (reduce_sum.2228: f32[], reduce_sum.2229: f32[]) -> f32[] {
  %reduce_sum.2228 = f32[] parameter(0)
  %reduce_sum.2229 = f32[] parameter(1)
  ROOT %reduce_sum.2230 = f32[] add(%reduce_sum.2228, %reduce_sum.2229)
}

%region_1198.27318 (reduce_sum.27315: bf16[], reduce_sum.27316: bf16[]) -> bf16[] {
  %reduce_sum.27315 = bf16[] parameter(0)
  %reduce_sum.27316 = bf16[] parameter(1)
  ROOT %reduce_sum.27317 = bf16[] add(%reduce_sum.27315, %reduce_sum.27316)
}

%region_1198.27318.clone (reduce_sum.2231: bf16[], reduce_sum.2232: bf16[]) -> bf16[] {
  %reduce_sum.2231 = bf16[] parameter(0)
  %reduce_sum.2232 = bf16[] parameter(1)
  ROOT %reduce_sum.2233 = bf16[] add(%reduce_sum.2231, %reduce_sum.2232)
}

%region_1199.27325 (reduce_sum.27322: f32[], reduce_sum.27323: f32[]) -> f32[] {
  %reduce_sum.27322 = f32[] parameter(0)
  %reduce_sum.27323 = f32[] parameter(1)
  ROOT %reduce_sum.27324 = f32[] add(%reduce_sum.27322, %reduce_sum.27323)
}

%region_1200.27333 (reduce_sum.27330: bf16[], reduce_sum.27331: bf16[]) -> bf16[] {
  %reduce_sum.27330 = bf16[] parameter(0)
  %reduce_sum.27331 = bf16[] parameter(1)
  ROOT %reduce_sum.27332 = bf16[] add(%reduce_sum.27330, %reduce_sum.27331)
}

%region_1200.27333.clone (reduce_sum.2234: bf16[], reduce_sum.2235: bf16[]) -> bf16[] {
  %reduce_sum.2234 = bf16[] parameter(0)
  %reduce_sum.2235 = bf16[] parameter(1)
  ROOT %reduce_sum.2236 = bf16[] add(%reduce_sum.2234, %reduce_sum.2235)
}

%region_1201.27340 (reduce_sum.284: f32[], reduce_sum.27338: f32[]) -> f32[] {
  %reduce_sum.284 = f32[] parameter(0)
  %reduce_sum.27338 = f32[] parameter(1)
  ROOT %reduce_sum.27339 = f32[] add(%reduce_sum.284, %reduce_sum.27338)
}

%add.96.clone (x.193: bf16[], y.193: bf16[]) -> bf16[] {
  %x.193 = bf16[] parameter(0)
  %y.193 = bf16[] parameter(1)
  ROOT %add.1211 = bf16[] add(%x.193, %y.193)
}

%region_1202.27351 (reduce_sum.27348: f32[], reduce_sum.27349: f32[]) -> f32[] {
  %reduce_sum.27348 = f32[] parameter(0)
  %reduce_sum.27349 = f32[] parameter(1)
  ROOT %reduce_sum.27350 = f32[] add(%reduce_sum.27348, %reduce_sum.27349)
}

%region_1202.27351.clone (reduce_sum.2237: f32[], reduce_sum.2238: f32[]) -> f32[] {
  %reduce_sum.2237 = f32[] parameter(0)
  %reduce_sum.2238 = f32[] parameter(1)
  ROOT %reduce_sum.2239 = f32[] add(%reduce_sum.2237, %reduce_sum.2238)
}

%add.97.clone (x.195: bf16[], y.195: bf16[]) -> bf16[] {
  %x.195 = bf16[] parameter(0)
  %y.195 = bf16[] parameter(1)
  ROOT %add.1213 = bf16[] add(%x.195, %y.195)
}

%region_1203.27362 (reduce_sum.27359: f32[], reduce_sum.27360: f32[]) -> f32[] {
  %reduce_sum.27359 = f32[] parameter(0)
  %reduce_sum.27360 = f32[] parameter(1)
  ROOT %reduce_sum.27361 = f32[] add(%reduce_sum.27359, %reduce_sum.27360)
}

%region_1203.27362.clone (reduce_sum.2240: f32[], reduce_sum.2241: f32[]) -> f32[] {
  %reduce_sum.2240 = f32[] parameter(0)
  %reduce_sum.2241 = f32[] parameter(1)
  ROOT %reduce_sum.2242 = f32[] add(%reduce_sum.2240, %reduce_sum.2241)
}

%add.98.clone (x.197: bf16[], y.197: bf16[]) -> bf16[] {
  %x.197 = bf16[] parameter(0)
  %y.197 = bf16[] parameter(1)
  ROOT %add.1215 = bf16[] add(%x.197, %y.197)
}

%region_1204.27373 (reduce_sum.27370: f32[], reduce_sum.27371: f32[]) -> f32[] {
  %reduce_sum.27370 = f32[] parameter(0)
  %reduce_sum.27371 = f32[] parameter(1)
  ROOT %reduce_sum.27372 = f32[] add(%reduce_sum.27370, %reduce_sum.27371)
}

%region_1204.27373.clone (reduce_sum.2243: f32[], reduce_sum.2244: f32[]) -> f32[] {
  %reduce_sum.2243 = f32[] parameter(0)
  %reduce_sum.2244 = f32[] parameter(1)
  ROOT %reduce_sum.2245 = f32[] add(%reduce_sum.2243, %reduce_sum.2244)
}

%add.99.clone (x.199: bf16[], y.199: bf16[]) -> bf16[] {
  %x.199 = bf16[] parameter(0)
  %y.199 = bf16[] parameter(1)
  ROOT %add.1217 = bf16[] add(%x.199, %y.199)
}

%region_1205.27384 (reduce_sum.27381: f32[], reduce_sum.27382: f32[]) -> f32[] {
  %reduce_sum.27381 = f32[] parameter(0)
  %reduce_sum.27382 = f32[] parameter(1)
  ROOT %reduce_sum.27383 = f32[] add(%reduce_sum.27381, %reduce_sum.27382)
}

%region_1205.27384.clone (reduce_sum.2246: f32[], reduce_sum.2247: f32[]) -> f32[] {
  %reduce_sum.2246 = f32[] parameter(0)
  %reduce_sum.2247 = f32[] parameter(1)
  ROOT %reduce_sum.2248 = f32[] add(%reduce_sum.2246, %reduce_sum.2247)
}

%add.100.clone (x.201: bf16[], y.201: bf16[]) -> bf16[] {
  %x.201 = bf16[] parameter(0)
  %y.201 = bf16[] parameter(1)
  ROOT %add.1219 = bf16[] add(%x.201, %y.201)
}

%region_1206.27394 (reduce_sum.27391: f32[], reduce_sum.27392: f32[]) -> f32[] {
  %reduce_sum.27391 = f32[] parameter(0)
  %reduce_sum.27392 = f32[] parameter(1)
  ROOT %reduce_sum.27393 = f32[] add(%reduce_sum.27391, %reduce_sum.27392)
}

%region_1206.27394.clone (reduce_sum.2249: f32[], reduce_sum.2250: f32[]) -> f32[] {
  %reduce_sum.2249 = f32[] parameter(0)
  %reduce_sum.2250 = f32[] parameter(1)
  ROOT %reduce_sum.2251 = f32[] add(%reduce_sum.2249, %reduce_sum.2250)
}

%region_1207.27405 (reduce_sum.27402: f32[], reduce_sum.27403: f32[]) -> f32[] {
  %reduce_sum.27402 = f32[] parameter(0)
  %reduce_sum.27403 = f32[] parameter(1)
  ROOT %reduce_sum.27404 = f32[] add(%reduce_sum.27402, %reduce_sum.27403)
}

%region_1207.27405.clone (reduce_sum.2252: f32[], reduce_sum.2253: f32[]) -> f32[] {
  %reduce_sum.2252 = f32[] parameter(0)
  %reduce_sum.2253 = f32[] parameter(1)
  ROOT %reduce_sum.2254 = f32[] add(%reduce_sum.2252, %reduce_sum.2253)
}

%region_1208.27416 (reduce_sum.27413: f32[], reduce_sum.27414: f32[]) -> f32[] {
  %reduce_sum.27413 = f32[] parameter(0)
  %reduce_sum.27414 = f32[] parameter(1)
  ROOT %reduce_sum.27415 = f32[] add(%reduce_sum.27413, %reduce_sum.27414)
}

%region_1208.27416.clone (reduce_sum.2255: f32[], reduce_sum.2256: f32[]) -> f32[] {
  %reduce_sum.2255 = f32[] parameter(0)
  %reduce_sum.2256 = f32[] parameter(1)
  ROOT %reduce_sum.2257 = f32[] add(%reduce_sum.2255, %reduce_sum.2256)
}

%region_1209.27427 (reduce_sum.27424: f32[], reduce_sum.27425: f32[]) -> f32[] {
  %reduce_sum.27424 = f32[] parameter(0)
  %reduce_sum.27425 = f32[] parameter(1)
  ROOT %reduce_sum.27426 = f32[] add(%reduce_sum.27424, %reduce_sum.27425)
}

%region_1209.27427.clone (reduce_sum.2258: f32[], reduce_sum.2262: f32[]) -> f32[] {
  %reduce_sum.2258 = f32[] parameter(0)
  %reduce_sum.2262 = f32[] parameter(1)
  ROOT %reduce_sum.2264 = f32[] add(%reduce_sum.2258, %reduce_sum.2262)
}

%region_1210.27435 (reduce_sum.27432: bf16[], reduce_sum.27433: bf16[]) -> bf16[] {
  %reduce_sum.27432 = bf16[] parameter(0)
  %reduce_sum.27433 = bf16[] parameter(1)
  ROOT %reduce_sum.27434 = bf16[] add(%reduce_sum.27432, %reduce_sum.27433)
}

%region_1210.27435.clone (reduce_sum.2265: bf16[], reduce_sum.2266: bf16[]) -> bf16[] {
  %reduce_sum.2265 = bf16[] parameter(0)
  %reduce_sum.2266 = bf16[] parameter(1)
  ROOT %reduce_sum.2270 = bf16[] add(%reduce_sum.2265, %reduce_sum.2266)
}

%region_1211.27442 (reduce_sum.27439: f32[], reduce_sum.27440: f32[]) -> f32[] {
  %reduce_sum.27439 = f32[] parameter(0)
  %reduce_sum.27440 = f32[] parameter(1)
  ROOT %reduce_sum.27441 = f32[] add(%reduce_sum.27439, %reduce_sum.27440)
}

%region_1212.27450 (reduce_sum.27447: bf16[], reduce_sum.27448: bf16[]) -> bf16[] {
  %reduce_sum.27447 = bf16[] parameter(0)
  %reduce_sum.27448 = bf16[] parameter(1)
  ROOT %reduce_sum.27449 = bf16[] add(%reduce_sum.27447, %reduce_sum.27448)
}

%region_1212.27450.clone (reduce_sum.2272: bf16[], reduce_sum.2273: bf16[]) -> bf16[] {
  %reduce_sum.2272 = bf16[] parameter(0)
  %reduce_sum.2273 = bf16[] parameter(1)
  ROOT %reduce_sum.2274 = bf16[] add(%reduce_sum.2272, %reduce_sum.2273)
}

%region_1213.27457 (reduce_sum.27454: f32[], reduce_sum.27455: f32[]) -> f32[] {
  %reduce_sum.27454 = f32[] parameter(0)
  %reduce_sum.27455 = f32[] parameter(1)
  ROOT %reduce_sum.27456 = f32[] add(%reduce_sum.27454, %reduce_sum.27455)
}

%add.101.clone (x.203: bf16[], y.203: bf16[]) -> bf16[] {
  %x.203 = bf16[] parameter(0)
  %y.203 = bf16[] parameter(1)
  ROOT %add.1221 = bf16[] add(%x.203, %y.203)
}

%region_1214.27468 (reduce_sum.27465: f32[], reduce_sum.27466: f32[]) -> f32[] {
  %reduce_sum.27465 = f32[] parameter(0)
  %reduce_sum.27466 = f32[] parameter(1)
  ROOT %reduce_sum.285 = f32[] add(%reduce_sum.27465, %reduce_sum.27466)
}

%region_1214.27468.clone (reduce_sum.2275: f32[], reduce_sum.2276: f32[]) -> f32[] {
  %reduce_sum.2275 = f32[] parameter(0)
  %reduce_sum.2276 = f32[] parameter(1)
  ROOT %reduce_sum.2277 = f32[] add(%reduce_sum.2275, %reduce_sum.2276)
}

%add.102.clone (x.205: bf16[], y.205: bf16[]) -> bf16[] {
  %x.205 = bf16[] parameter(0)
  %y.205 = bf16[] parameter(1)
  ROOT %add.1223 = bf16[] add(%x.205, %y.205)
}

%region_1215.27479 (reduce_sum.286: f32[], reduce_sum.287: f32[]) -> f32[] {
  %reduce_sum.286 = f32[] parameter(0)
  %reduce_sum.287 = f32[] parameter(1)
  ROOT %reduce_sum.27478 = f32[] add(%reduce_sum.286, %reduce_sum.287)
}

%region_1215.27479.clone (reduce_sum.2278: f32[], reduce_sum.2279: f32[]) -> f32[] {
  %reduce_sum.2278 = f32[] parameter(0)
  %reduce_sum.2279 = f32[] parameter(1)
  ROOT %reduce_sum.2280 = f32[] add(%reduce_sum.2278, %reduce_sum.2279)
}

%add.103.clone (x.207: bf16[], y.207: bf16[]) -> bf16[] {
  %x.207 = bf16[] parameter(0)
  %y.207 = bf16[] parameter(1)
  ROOT %add.1227 = bf16[] add(%x.207, %y.207)
}

%region_1216.27490 (reduce_sum.27487: f32[], reduce_sum.27488: f32[]) -> f32[] {
  %reduce_sum.27487 = f32[] parameter(0)
  %reduce_sum.27488 = f32[] parameter(1)
  ROOT %reduce_sum.27489 = f32[] add(%reduce_sum.27487, %reduce_sum.27488)
}

%region_1216.27490.clone (reduce_sum.2281: f32[], reduce_sum.2282: f32[]) -> f32[] {
  %reduce_sum.2281 = f32[] parameter(0)
  %reduce_sum.2282 = f32[] parameter(1)
  ROOT %reduce_sum.2283 = f32[] add(%reduce_sum.2281, %reduce_sum.2282)
}

%add.104.clone (x.209: bf16[], y.209: bf16[]) -> bf16[] {
  %x.209 = bf16[] parameter(0)
  %y.209 = bf16[] parameter(1)
  ROOT %add.1229 = bf16[] add(%x.209, %y.209)
}

%region_1217.27501 (reduce_sum.288: f32[], reduce_sum.289: f32[]) -> f32[] {
  %reduce_sum.288 = f32[] parameter(0)
  %reduce_sum.289 = f32[] parameter(1)
  ROOT %reduce_sum.27500 = f32[] add(%reduce_sum.288, %reduce_sum.289)
}

%region_1217.27501.clone (reduce_sum.2284: f32[], reduce_sum.2285: f32[]) -> f32[] {
  %reduce_sum.2284 = f32[] parameter(0)
  %reduce_sum.2285 = f32[] parameter(1)
  ROOT %reduce_sum.2286 = f32[] add(%reduce_sum.2284, %reduce_sum.2285)
}

%add.105.clone (x.211: bf16[], y.211: bf16[]) -> bf16[] {
  %x.211 = bf16[] parameter(0)
  %y.211 = bf16[] parameter(1)
  ROOT %add.1231 = bf16[] add(%x.211, %y.211)
}

%region_1218.27511 (reduce_sum.27508: f32[], reduce_sum.27509: f32[]) -> f32[] {
  %reduce_sum.27508 = f32[] parameter(0)
  %reduce_sum.27509 = f32[] parameter(1)
  ROOT %reduce_sum.27510 = f32[] add(%reduce_sum.27508, %reduce_sum.27509)
}

%region_1218.27511.clone (reduce_sum.2290: f32[], reduce_sum.2292: f32[]) -> f32[] {
  %reduce_sum.2290 = f32[] parameter(0)
  %reduce_sum.2292 = f32[] parameter(1)
  ROOT %reduce_sum.2293 = f32[] add(%reduce_sum.2290, %reduce_sum.2292)
}

%region_1219.27522 (reduce_sum.27519: f32[], reduce_sum.27520: f32[]) -> f32[] {
  %reduce_sum.27519 = f32[] parameter(0)
  %reduce_sum.27520 = f32[] parameter(1)
  ROOT %reduce_sum.27521 = f32[] add(%reduce_sum.27519, %reduce_sum.27520)
}

%region_1219.27522.clone (reduce_sum.2294: f32[], reduce_sum.2295: f32[]) -> f32[] {
  %reduce_sum.2294 = f32[] parameter(0)
  %reduce_sum.2295 = f32[] parameter(1)
  ROOT %reduce_sum.2296 = f32[] add(%reduce_sum.2294, %reduce_sum.2295)
}

%region_1220.27533 (reduce_sum.27530: f32[], reduce_sum.27531: f32[]) -> f32[] {
  %reduce_sum.27530 = f32[] parameter(0)
  %reduce_sum.27531 = f32[] parameter(1)
  ROOT %reduce_sum.27532 = f32[] add(%reduce_sum.27530, %reduce_sum.27531)
}

%region_1220.27533.clone (reduce_sum.2297: f32[], reduce_sum.2298: f32[]) -> f32[] {
  %reduce_sum.2297 = f32[] parameter(0)
  %reduce_sum.2298 = f32[] parameter(1)
  ROOT %reduce_sum.2299 = f32[] add(%reduce_sum.2297, %reduce_sum.2298)
}

%region_1221.27544 (reduce_sum.27541: f32[], reduce_sum.290: f32[]) -> f32[] {
  %reduce_sum.27541 = f32[] parameter(0)
  %reduce_sum.290 = f32[] parameter(1)
  ROOT %reduce_sum.27543 = f32[] add(%reduce_sum.27541, %reduce_sum.290)
}

%region_1221.27544.clone (reduce_sum.2300: f32[], reduce_sum.2304: f32[]) -> f32[] {
  %reduce_sum.2300 = f32[] parameter(0)
  %reduce_sum.2304 = f32[] parameter(1)
  ROOT %reduce_sum.2307 = f32[] add(%reduce_sum.2300, %reduce_sum.2304)
}

%region_1222.27552 (reduce_sum.27549: bf16[], reduce_sum.27550: bf16[]) -> bf16[] {
  %reduce_sum.27549 = bf16[] parameter(0)
  %reduce_sum.27550 = bf16[] parameter(1)
  ROOT %reduce_sum.27551 = bf16[] add(%reduce_sum.27549, %reduce_sum.27550)
}

%region_1222.27552.clone (reduce_sum.2308: bf16[], reduce_sum.2309: bf16[]) -> bf16[] {
  %reduce_sum.2308 = bf16[] parameter(0)
  %reduce_sum.2309 = bf16[] parameter(1)
  ROOT %reduce_sum.2313 = bf16[] add(%reduce_sum.2308, %reduce_sum.2309)
}

%region_1223.27559 (reduce_sum.27556: f32[], reduce_sum.27557: f32[]) -> f32[] {
  %reduce_sum.27556 = f32[] parameter(0)
  %reduce_sum.27557 = f32[] parameter(1)
  ROOT %reduce_sum.27558 = f32[] add(%reduce_sum.27556, %reduce_sum.27557)
}

%region_1224.27567 (reduce_sum.27564: bf16[], reduce_sum.27565: bf16[]) -> bf16[] {
  %reduce_sum.27564 = bf16[] parameter(0)
  %reduce_sum.27565 = bf16[] parameter(1)
  ROOT %reduce_sum.27566 = bf16[] add(%reduce_sum.27564, %reduce_sum.27565)
}

%region_1224.27567.clone (reduce_sum.2316: bf16[], reduce_sum.2317: bf16[]) -> bf16[] {
  %reduce_sum.2316 = bf16[] parameter(0)
  %reduce_sum.2317 = bf16[] parameter(1)
  ROOT %reduce_sum.2318 = bf16[] add(%reduce_sum.2316, %reduce_sum.2317)
}

%region_1225.27574 (reduce_sum.27571: f32[], reduce_sum.27572: f32[]) -> f32[] {
  %reduce_sum.27571 = f32[] parameter(0)
  %reduce_sum.27572 = f32[] parameter(1)
  ROOT %reduce_sum.27573 = f32[] add(%reduce_sum.27571, %reduce_sum.27572)
}

%add.106.clone (x.213: bf16[], y.213: bf16[]) -> bf16[] {
  %x.213 = bf16[] parameter(0)
  %y.213 = bf16[] parameter(1)
  ROOT %add.1233 = bf16[] add(%x.213, %y.213)
}

%region_1226.27585 (reduce_sum.27582: f32[], reduce_sum.27583: f32[]) -> f32[] {
  %reduce_sum.27582 = f32[] parameter(0)
  %reduce_sum.27583 = f32[] parameter(1)
  ROOT %reduce_sum.27584 = f32[] add(%reduce_sum.27582, %reduce_sum.27583)
}

%region_1226.27585.clone (reduce_sum.2319: f32[], reduce_sum.2320: f32[]) -> f32[] {
  %reduce_sum.2319 = f32[] parameter(0)
  %reduce_sum.2320 = f32[] parameter(1)
  ROOT %reduce_sum.2321 = f32[] add(%reduce_sum.2319, %reduce_sum.2320)
}

%add.107.clone (x.215: bf16[], y.215: bf16[]) -> bf16[] {
  %x.215 = bf16[] parameter(0)
  %y.215 = bf16[] parameter(1)
  ROOT %add.1236 = bf16[] add(%x.215, %y.215)
}

%region_1227.27596 (reduce_sum.27593: f32[], reduce_sum.27594: f32[]) -> f32[] {
  %reduce_sum.27593 = f32[] parameter(0)
  %reduce_sum.27594 = f32[] parameter(1)
  ROOT %reduce_sum.27595 = f32[] add(%reduce_sum.27593, %reduce_sum.27594)
}

%region_1227.27596.clone (reduce_sum.2322: f32[], reduce_sum.2323: f32[]) -> f32[] {
  %reduce_sum.2322 = f32[] parameter(0)
  %reduce_sum.2323 = f32[] parameter(1)
  ROOT %reduce_sum.2324 = f32[] add(%reduce_sum.2322, %reduce_sum.2323)
}

%add.108.clone (x.217: bf16[], y.217: bf16[]) -> bf16[] {
  %x.217 = bf16[] parameter(0)
  %y.217 = bf16[] parameter(1)
  ROOT %add.1238 = bf16[] add(%x.217, %y.217)
}

%region_1228.27607 (reduce_sum.27604: f32[], reduce_sum.27605: f32[]) -> f32[] {
  %reduce_sum.27604 = f32[] parameter(0)
  %reduce_sum.27605 = f32[] parameter(1)
  ROOT %reduce_sum.27606 = f32[] add(%reduce_sum.27604, %reduce_sum.27605)
}

%region_1228.27607.clone (reduce_sum.2328: f32[], reduce_sum.2330: f32[]) -> f32[] {
  %reduce_sum.2328 = f32[] parameter(0)
  %reduce_sum.2330 = f32[] parameter(1)
  ROOT %reduce_sum.2334 = f32[] add(%reduce_sum.2328, %reduce_sum.2330)
}

%add.109.clone (x.219: bf16[], y.219: bf16[]) -> bf16[] {
  %x.219 = bf16[] parameter(0)
  %y.219 = bf16[] parameter(1)
  ROOT %add.1240 = bf16[] add(%x.219, %y.219)
}

%region_1229.27618 (reduce_sum.27615: f32[], reduce_sum.27616: f32[]) -> f32[] {
  %reduce_sum.27615 = f32[] parameter(0)
  %reduce_sum.27616 = f32[] parameter(1)
  ROOT %reduce_sum.27617 = f32[] add(%reduce_sum.27615, %reduce_sum.27616)
}

%region_1229.27618.clone (reduce_sum.2336: f32[], reduce_sum.2337: f32[]) -> f32[] {
  %reduce_sum.2336 = f32[] parameter(0)
  %reduce_sum.2337 = f32[] parameter(1)
  ROOT %reduce_sum.2338 = f32[] add(%reduce_sum.2336, %reduce_sum.2337)
}

%add.110.clone (x.221: bf16[], y.221: bf16[]) -> bf16[] {
  %x.221 = bf16[] parameter(0)
  %y.221 = bf16[] parameter(1)
  ROOT %add.1242 = bf16[] add(%x.221, %y.221)
}

%region_1230.27628 (reduce_sum.27625: f32[], reduce_sum.27626: f32[]) -> f32[] {
  %reduce_sum.27625 = f32[] parameter(0)
  %reduce_sum.27626 = f32[] parameter(1)
  ROOT %reduce_sum.27627 = f32[] add(%reduce_sum.27625, %reduce_sum.27626)
}

%region_1230.27628.clone (reduce_sum.2339: f32[], reduce_sum.2340: f32[]) -> f32[] {
  %reduce_sum.2339 = f32[] parameter(0)
  %reduce_sum.2340 = f32[] parameter(1)
  ROOT %reduce_sum.2341 = f32[] add(%reduce_sum.2339, %reduce_sum.2340)
}

%region_1231.27639 (reduce_sum.27636: f32[], reduce_sum.27637: f32[]) -> f32[] {
  %reduce_sum.27636 = f32[] parameter(0)
  %reduce_sum.27637 = f32[] parameter(1)
  ROOT %reduce_sum.27638 = f32[] add(%reduce_sum.27636, %reduce_sum.27637)
}

%region_1231.27639.clone (reduce_sum.2342: f32[], reduce_sum.2343: f32[]) -> f32[] {
  %reduce_sum.2342 = f32[] parameter(0)
  %reduce_sum.2343 = f32[] parameter(1)
  ROOT %reduce_sum.2344 = f32[] add(%reduce_sum.2342, %reduce_sum.2343)
}

%region_1232.27650 (reduce_sum.27647: f32[], reduce_sum.27648: f32[]) -> f32[] {
  %reduce_sum.27647 = f32[] parameter(0)
  %reduce_sum.27648 = f32[] parameter(1)
  ROOT %reduce_sum.27649 = f32[] add(%reduce_sum.27647, %reduce_sum.27648)
}

%region_1232.27650.clone (reduce_sum.2345: f32[], reduce_sum.2346: f32[]) -> f32[] {
  %reduce_sum.2345 = f32[] parameter(0)
  %reduce_sum.2346 = f32[] parameter(1)
  ROOT %reduce_sum.2347 = f32[] add(%reduce_sum.2345, %reduce_sum.2346)
}

%region_1233.27661 (reduce_sum.27658: f32[], reduce_sum.27659: f32[]) -> f32[] {
  %reduce_sum.27658 = f32[] parameter(0)
  %reduce_sum.27659 = f32[] parameter(1)
  ROOT %reduce_sum.27660 = f32[] add(%reduce_sum.27658, %reduce_sum.27659)
}

%region_1233.27661.clone (reduce_sum.2348: f32[], reduce_sum.2349: f32[]) -> f32[] {
  %reduce_sum.2348 = f32[] parameter(0)
  %reduce_sum.2349 = f32[] parameter(1)
  ROOT %reduce_sum.2350 = f32[] add(%reduce_sum.2348, %reduce_sum.2349)
}

%region_1234.27669 (reduce_sum.27666: bf16[], reduce_sum.27667: bf16[]) -> bf16[] {
  %reduce_sum.27666 = bf16[] parameter(0)
  %reduce_sum.27667 = bf16[] parameter(1)
  ROOT %reduce_sum.27668 = bf16[] add(%reduce_sum.27666, %reduce_sum.27667)
}

%region_1234.27669.clone (reduce_sum.2351: bf16[], reduce_sum.2352: bf16[]) -> bf16[] {
  %reduce_sum.2351 = bf16[] parameter(0)
  %reduce_sum.2352 = bf16[] parameter(1)
  ROOT %reduce_sum.2353 = bf16[] add(%reduce_sum.2351, %reduce_sum.2352)
}

%region_1235.27676 (reduce_sum.27673: f32[], reduce_sum.27674: f32[]) -> f32[] {
  %reduce_sum.27673 = f32[] parameter(0)
  %reduce_sum.27674 = f32[] parameter(1)
  ROOT %reduce_sum.291 = f32[] add(%reduce_sum.27673, %reduce_sum.27674)
}

%region_1236.27684 (reduce_sum.292: bf16[], reduce_sum.293: bf16[]) -> bf16[] {
  %reduce_sum.292 = bf16[] parameter(0)
  %reduce_sum.293 = bf16[] parameter(1)
  ROOT %reduce_sum.294 = bf16[] add(%reduce_sum.292, %reduce_sum.293)
}

%region_1236.27684.clone (reduce_sum.2354: bf16[], reduce_sum.2355: bf16[]) -> bf16[] {
  %reduce_sum.2354 = bf16[] parameter(0)
  %reduce_sum.2355 = bf16[] parameter(1)
  ROOT %reduce_sum.2356 = bf16[] add(%reduce_sum.2354, %reduce_sum.2355)
}

%region_1237.27691 (reduce_sum.27688: f32[], reduce_sum.27689: f32[]) -> f32[] {
  %reduce_sum.27688 = f32[] parameter(0)
  %reduce_sum.27689 = f32[] parameter(1)
  ROOT %reduce_sum.27690 = f32[] add(%reduce_sum.27688, %reduce_sum.27689)
}

%add.111.clone (x.223: bf16[], y.223: bf16[]) -> bf16[] {
  %x.223 = bf16[] parameter(0)
  %y.223 = bf16[] parameter(1)
  ROOT %add.1244 = bf16[] add(%x.223, %y.223)
}

%region_1238.27702 (reduce_sum.27699: f32[], reduce_sum.27700: f32[]) -> f32[] {
  %reduce_sum.27699 = f32[] parameter(0)
  %reduce_sum.27700 = f32[] parameter(1)
  ROOT %reduce_sum.27701 = f32[] add(%reduce_sum.27699, %reduce_sum.27700)
}

%region_1238.27702.clone (reduce_sum.2357: f32[], reduce_sum.2358: f32[]) -> f32[] {
  %reduce_sum.2357 = f32[] parameter(0)
  %reduce_sum.2358 = f32[] parameter(1)
  ROOT %reduce_sum.2359 = f32[] add(%reduce_sum.2357, %reduce_sum.2358)
}

%add.112.clone (x.225: bf16[], y.225: bf16[]) -> bf16[] {
  %x.225 = bf16[] parameter(0)
  %y.225 = bf16[] parameter(1)
  ROOT %add.1246 = bf16[] add(%x.225, %y.225)
}

%region_1239.27713 (reduce_sum.27710: f32[], reduce_sum.295: f32[]) -> f32[] {
  %reduce_sum.27710 = f32[] parameter(0)
  %reduce_sum.295 = f32[] parameter(1)
  ROOT %reduce_sum.27712 = f32[] add(%reduce_sum.27710, %reduce_sum.295)
}

%region_1239.27713.clone (reduce_sum.2360: f32[], reduce_sum.2361: f32[]) -> f32[] {
  %reduce_sum.2360 = f32[] parameter(0)
  %reduce_sum.2361 = f32[] parameter(1)
  ROOT %reduce_sum.2362 = f32[] add(%reduce_sum.2360, %reduce_sum.2361)
}

%add.113.clone (x.227: bf16[], y.227: bf16[]) -> bf16[] {
  %x.227 = bf16[] parameter(0)
  %y.227 = bf16[] parameter(1)
  ROOT %add.1248 = bf16[] add(%x.227, %y.227)
}

%region_1240.27724 (reduce_sum.27721: f32[], reduce_sum.296: f32[]) -> f32[] {
  %reduce_sum.27721 = f32[] parameter(0)
  %reduce_sum.296 = f32[] parameter(1)
  ROOT %reduce_sum.27723 = f32[] add(%reduce_sum.27721, %reduce_sum.296)
}

%region_1240.27724.clone (reduce_sum.2363: f32[], reduce_sum.2364: f32[]) -> f32[] {
  %reduce_sum.2363 = f32[] parameter(0)
  %reduce_sum.2364 = f32[] parameter(1)
  ROOT %reduce_sum.2365 = f32[] add(%reduce_sum.2363, %reduce_sum.2364)
}

%add.114.clone (x.229: bf16[], y.229: bf16[]) -> bf16[] {
  %x.229 = bf16[] parameter(0)
  %y.229 = bf16[] parameter(1)
  ROOT %add.1250 = bf16[] add(%x.229, %y.229)
}

%region_1241.27735 (reduce_sum.27732: f32[], reduce_sum.27733: f32[]) -> f32[] {
  %reduce_sum.27732 = f32[] parameter(0)
  %reduce_sum.27733 = f32[] parameter(1)
  ROOT %reduce_sum.27734 = f32[] add(%reduce_sum.27732, %reduce_sum.27733)
}

%region_1241.27735.clone (reduce_sum.2366: f32[], reduce_sum.2367: f32[]) -> f32[] {
  %reduce_sum.2366 = f32[] parameter(0)
  %reduce_sum.2367 = f32[] parameter(1)
  ROOT %reduce_sum.2368 = f32[] add(%reduce_sum.2366, %reduce_sum.2367)
}

%add.115.clone (x.231: bf16[], y.231: bf16[]) -> bf16[] {
  %x.231 = bf16[] parameter(0)
  %y.231 = bf16[] parameter(1)
  ROOT %add.1252 = bf16[] add(%x.231, %y.231)
}

%region_1242.27745 (reduce_sum.27742: f32[], reduce_sum.297: f32[]) -> f32[] {
  %reduce_sum.27742 = f32[] parameter(0)
  %reduce_sum.297 = f32[] parameter(1)
  ROOT %reduce_sum.27744 = f32[] add(%reduce_sum.27742, %reduce_sum.297)
}

%region_1242.27745.clone (reduce_sum.2369: f32[], reduce_sum.2370: f32[]) -> f32[] {
  %reduce_sum.2369 = f32[] parameter(0)
  %reduce_sum.2370 = f32[] parameter(1)
  ROOT %reduce_sum.2371 = f32[] add(%reduce_sum.2369, %reduce_sum.2370)
}

%region_1243.27756 (reduce_sum.298: f32[], reduce_sum.27754: f32[]) -> f32[] {
  %reduce_sum.298 = f32[] parameter(0)
  %reduce_sum.27754 = f32[] parameter(1)
  ROOT %reduce_sum.27755 = f32[] add(%reduce_sum.298, %reduce_sum.27754)
}

%region_1243.27756.clone (reduce_sum.2372: f32[], reduce_sum.2373: f32[]) -> f32[] {
  %reduce_sum.2372 = f32[] parameter(0)
  %reduce_sum.2373 = f32[] parameter(1)
  ROOT %reduce_sum.2374 = f32[] add(%reduce_sum.2372, %reduce_sum.2373)
}

%region_1244.27767 (reduce_sum.27764: f32[], reduce_sum.27765: f32[]) -> f32[] {
  %reduce_sum.27764 = f32[] parameter(0)
  %reduce_sum.27765 = f32[] parameter(1)
  ROOT %reduce_sum.27766 = f32[] add(%reduce_sum.27764, %reduce_sum.27765)
}

%region_1244.27767.clone (reduce_sum.2375: f32[], reduce_sum.2376: f32[]) -> f32[] {
  %reduce_sum.2375 = f32[] parameter(0)
  %reduce_sum.2376 = f32[] parameter(1)
  ROOT %reduce_sum.2377 = f32[] add(%reduce_sum.2375, %reduce_sum.2376)
}

%region_1245.27778 (reduce_sum.27775: f32[], reduce_sum.27776: f32[]) -> f32[] {
  %reduce_sum.27775 = f32[] parameter(0)
  %reduce_sum.27776 = f32[] parameter(1)
  ROOT %reduce_sum.27777 = f32[] add(%reduce_sum.27775, %reduce_sum.27776)
}

%region_1245.27778.clone (reduce_sum.2378: f32[], reduce_sum.2379: f32[]) -> f32[] {
  %reduce_sum.2378 = f32[] parameter(0)
  %reduce_sum.2379 = f32[] parameter(1)
  ROOT %reduce_sum.2380 = f32[] add(%reduce_sum.2378, %reduce_sum.2379)
}

%region_1246.27786 (reduce_sum.27783: bf16[], reduce_sum.27784: bf16[]) -> bf16[] {
  %reduce_sum.27783 = bf16[] parameter(0)
  %reduce_sum.27784 = bf16[] parameter(1)
  ROOT %reduce_sum.27785 = bf16[] add(%reduce_sum.27783, %reduce_sum.27784)
}

%region_1246.27786.clone (reduce_sum.2381: bf16[], reduce_sum.2382: bf16[]) -> bf16[] {
  %reduce_sum.2381 = bf16[] parameter(0)
  %reduce_sum.2382 = bf16[] parameter(1)
  ROOT %reduce_sum.2386 = bf16[] add(%reduce_sum.2381, %reduce_sum.2382)
}

%region_1247.27793 (reduce_sum.27790: f32[], reduce_sum.27791: f32[]) -> f32[] {
  %reduce_sum.27790 = f32[] parameter(0)
  %reduce_sum.27791 = f32[] parameter(1)
  ROOT %reduce_sum.27792 = f32[] add(%reduce_sum.27790, %reduce_sum.27791)
}

%region_1248.27801 (reduce_sum.27798: bf16[], reduce_sum.27799: bf16[]) -> bf16[] {
  %reduce_sum.27798 = bf16[] parameter(0)
  %reduce_sum.27799 = bf16[] parameter(1)
  ROOT %reduce_sum.27800 = bf16[] add(%reduce_sum.27798, %reduce_sum.27799)
}

%region_1248.27801.clone (reduce_sum.2388: bf16[], reduce_sum.2389: bf16[]) -> bf16[] {
  %reduce_sum.2388 = bf16[] parameter(0)
  %reduce_sum.2389 = bf16[] parameter(1)
  ROOT %reduce_sum.2390 = bf16[] add(%reduce_sum.2388, %reduce_sum.2389)
}

%region_1249.27808 (reduce_sum.27805: f32[], reduce_sum.27806: f32[]) -> f32[] {
  %reduce_sum.27805 = f32[] parameter(0)
  %reduce_sum.27806 = f32[] parameter(1)
  ROOT %reduce_sum.27807 = f32[] add(%reduce_sum.27805, %reduce_sum.27806)
}

%add.116.clone (x.233: bf16[], y.233: bf16[]) -> bf16[] {
  %x.233 = bf16[] parameter(0)
  %y.233 = bf16[] parameter(1)
  ROOT %add.1254 = bf16[] add(%x.233, %y.233)
}

%region_1250.27819 (reduce_sum.27816: f32[], reduce_sum.27817: f32[]) -> f32[] {
  %reduce_sum.27816 = f32[] parameter(0)
  %reduce_sum.27817 = f32[] parameter(1)
  ROOT %reduce_sum.27818 = f32[] add(%reduce_sum.27816, %reduce_sum.27817)
}

%region_1250.27819.clone (reduce_sum.2391: f32[], reduce_sum.2395: f32[]) -> f32[] {
  %reduce_sum.2391 = f32[] parameter(0)
  %reduce_sum.2395 = f32[] parameter(1)
  ROOT %reduce_sum.2399 = f32[] add(%reduce_sum.2391, %reduce_sum.2395)
}

%add.117.clone (x.235: bf16[], y.235: bf16[]) -> bf16[] {
  %x.235 = bf16[] parameter(0)
  %y.235 = bf16[] parameter(1)
  ROOT %add.1256 = bf16[] add(%x.235, %y.235)
}

%region_1251.27830 (reduce_sum.27827: f32[], reduce_sum.27828: f32[]) -> f32[] {
  %reduce_sum.27827 = f32[] parameter(0)
  %reduce_sum.27828 = f32[] parameter(1)
  ROOT %reduce_sum.27829 = f32[] add(%reduce_sum.27827, %reduce_sum.27828)
}

%region_1251.27830.clone (reduce_sum.2401: f32[], reduce_sum.2402: f32[]) -> f32[] {
  %reduce_sum.2401 = f32[] parameter(0)
  %reduce_sum.2402 = f32[] parameter(1)
  ROOT %reduce_sum.2403 = f32[] add(%reduce_sum.2401, %reduce_sum.2402)
}

%add.118.clone (x.237: bf16[], y.237: bf16[]) -> bf16[] {
  %x.237 = bf16[] parameter(0)
  %y.237 = bf16[] parameter(1)
  ROOT %add.1258 = bf16[] add(%x.237, %y.237)
}

%region_1252.27841 (reduce_sum.27838: f32[], reduce_sum.27839: f32[]) -> f32[] {
  %reduce_sum.27838 = f32[] parameter(0)
  %reduce_sum.27839 = f32[] parameter(1)
  ROOT %reduce_sum.27840 = f32[] add(%reduce_sum.27838, %reduce_sum.27839)
}

%region_1252.27841.clone (reduce_sum.2404: f32[], reduce_sum.2405: f32[]) -> f32[] {
  %reduce_sum.2404 = f32[] parameter(0)
  %reduce_sum.2405 = f32[] parameter(1)
  ROOT %reduce_sum.2406 = f32[] add(%reduce_sum.2404, %reduce_sum.2405)
}

%add.119.clone (x.239: bf16[], y.239: bf16[]) -> bf16[] {
  %x.239 = bf16[] parameter(0)
  %y.239 = bf16[] parameter(1)
  ROOT %add.1261 = bf16[] add(%x.239, %y.239)
}

%region_1253.27852 (reduce_sum.27849: f32[], reduce_sum.299: f32[]) -> f32[] {
  %reduce_sum.27849 = f32[] parameter(0)
  %reduce_sum.299 = f32[] parameter(1)
  ROOT %reduce_sum.300 = f32[] add(%reduce_sum.27849, %reduce_sum.299)
}

%region_1253.27852.clone (reduce_sum.2407: f32[], reduce_sum.2408: f32[]) -> f32[] {
  %reduce_sum.2407 = f32[] parameter(0)
  %reduce_sum.2408 = f32[] parameter(1)
  ROOT %reduce_sum.2409 = f32[] add(%reduce_sum.2407, %reduce_sum.2408)
}

%add.120.clone (x.241: bf16[], y.241: bf16[]) -> bf16[] {
  %x.241 = bf16[] parameter(0)
  %y.241 = bf16[] parameter(1)
  ROOT %add.1263 = bf16[] add(%x.241, %y.241)
}

%region_1254.27862 (reduce_sum.27859: f32[], reduce_sum.301: f32[]) -> f32[] {
  %reduce_sum.27859 = f32[] parameter(0)
  %reduce_sum.301 = f32[] parameter(1)
  ROOT %reduce_sum.302 = f32[] add(%reduce_sum.27859, %reduce_sum.301)
}

%region_1254.27862.clone (reduce_sum.2410: f32[], reduce_sum.2411: f32[]) -> f32[] {
  %reduce_sum.2410 = f32[] parameter(0)
  %reduce_sum.2411 = f32[] parameter(1)
  ROOT %reduce_sum.2412 = f32[] add(%reduce_sum.2410, %reduce_sum.2411)
}

%region_1255.27873 (reduce_sum.27870: f32[], reduce_sum.303: f32[]) -> f32[] {
  %reduce_sum.27870 = f32[] parameter(0)
  %reduce_sum.303 = f32[] parameter(1)
  ROOT %reduce_sum.27872 = f32[] add(%reduce_sum.27870, %reduce_sum.303)
}

%region_1255.27873.clone (reduce_sum.2413: f32[], reduce_sum.2414: f32[]) -> f32[] {
  %reduce_sum.2413 = f32[] parameter(0)
  %reduce_sum.2414 = f32[] parameter(1)
  ROOT %reduce_sum.2415 = f32[] add(%reduce_sum.2413, %reduce_sum.2414)
}

%region_1256.27884 (reduce_sum.304: f32[], reduce_sum.27882: f32[]) -> f32[] {
  %reduce_sum.304 = f32[] parameter(0)
  %reduce_sum.27882 = f32[] parameter(1)
  ROOT %reduce_sum.305 = f32[] add(%reduce_sum.304, %reduce_sum.27882)
}

%region_1256.27884.clone (reduce_sum.2416: f32[], reduce_sum.2417: f32[]) -> f32[] {
  %reduce_sum.2416 = f32[] parameter(0)
  %reduce_sum.2417 = f32[] parameter(1)
  ROOT %reduce_sum.2418 = f32[] add(%reduce_sum.2416, %reduce_sum.2417)
}

%region_1257.27895 (reduce_sum.27892: f32[], reduce_sum.27893: f32[]) -> f32[] {
  %reduce_sum.27892 = f32[] parameter(0)
  %reduce_sum.27893 = f32[] parameter(1)
  ROOT %reduce_sum.27894 = f32[] add(%reduce_sum.27892, %reduce_sum.27893)
}

%region_1257.27895.clone (reduce_sum.2419: f32[], reduce_sum.2420: f32[]) -> f32[] {
  %reduce_sum.2419 = f32[] parameter(0)
  %reduce_sum.2420 = f32[] parameter(1)
  ROOT %reduce_sum.2421 = f32[] add(%reduce_sum.2419, %reduce_sum.2420)
}

%region_1258.27903 (reduce_sum.27900: bf16[], reduce_sum.27901: bf16[]) -> bf16[] {
  %reduce_sum.27900 = bf16[] parameter(0)
  %reduce_sum.27901 = bf16[] parameter(1)
  ROOT %reduce_sum.27902 = bf16[] add(%reduce_sum.27900, %reduce_sum.27901)
}

%region_1258.27903.clone (reduce_sum.2422: bf16[], reduce_sum.2423: bf16[]) -> bf16[] {
  %reduce_sum.2422 = bf16[] parameter(0)
  %reduce_sum.2423 = bf16[] parameter(1)
  ROOT %reduce_sum.2424 = bf16[] add(%reduce_sum.2422, %reduce_sum.2423)
}

%region_1259.27910 (reduce_sum.27907: f32[], reduce_sum.27908: f32[]) -> f32[] {
  %reduce_sum.27907 = f32[] parameter(0)
  %reduce_sum.27908 = f32[] parameter(1)
  ROOT %reduce_sum.27909 = f32[] add(%reduce_sum.27907, %reduce_sum.27908)
}

%region_1260.27918 (reduce_sum.27915: bf16[], reduce_sum.27916: bf16[]) -> bf16[] {
  %reduce_sum.27915 = bf16[] parameter(0)
  %reduce_sum.27916 = bf16[] parameter(1)
  ROOT %reduce_sum.27917 = bf16[] add(%reduce_sum.27915, %reduce_sum.27916)
}

%region_1260.27918.clone (reduce_sum.2425: bf16[], reduce_sum.2429: bf16[]) -> bf16[] {
  %reduce_sum.2425 = bf16[] parameter(0)
  %reduce_sum.2429 = bf16[] parameter(1)
  ROOT %reduce_sum.2434 = bf16[] add(%reduce_sum.2425, %reduce_sum.2429)
}

%region_1261.27925 (reduce_sum.27922: f32[], reduce_sum.27923: f32[]) -> f32[] {
  %reduce_sum.27922 = f32[] parameter(0)
  %reduce_sum.27923 = f32[] parameter(1)
  ROOT %reduce_sum.27924 = f32[] add(%reduce_sum.27922, %reduce_sum.27923)
}

%add.121.clone (x.243: bf16[], y.243: bf16[]) -> bf16[] {
  %x.243 = bf16[] parameter(0)
  %y.243 = bf16[] parameter(1)
  ROOT %add.1266 = bf16[] add(%x.243, %y.243)
}

%region_1262.27936 (reduce_sum.27933: f32[], reduce_sum.27934: f32[]) -> f32[] {
  %reduce_sum.27933 = f32[] parameter(0)
  %reduce_sum.27934 = f32[] parameter(1)
  ROOT %reduce_sum.27935 = f32[] add(%reduce_sum.27933, %reduce_sum.27934)
}

%region_1262.27936.clone (reduce_sum.2439: f32[], reduce_sum.2441: f32[]) -> f32[] {
  %reduce_sum.2439 = f32[] parameter(0)
  %reduce_sum.2441 = f32[] parameter(1)
  ROOT %reduce_sum.2442 = f32[] add(%reduce_sum.2439, %reduce_sum.2441)
}

%add.122.clone (x.245: bf16[], y.245: bf16[]) -> bf16[] {
  %x.245 = bf16[] parameter(0)
  %y.245 = bf16[] parameter(1)
  ROOT %add.1268 = bf16[] add(%x.245, %y.245)
}

%region_1263.27947 (reduce_sum.27944: f32[], reduce_sum.27945: f32[]) -> f32[] {
  %reduce_sum.27944 = f32[] parameter(0)
  %reduce_sum.27945 = f32[] parameter(1)
  ROOT %reduce_sum.27946 = f32[] add(%reduce_sum.27944, %reduce_sum.27945)
}

%region_1263.27947.clone (reduce_sum.2443: f32[], reduce_sum.2444: f32[]) -> f32[] {
  %reduce_sum.2443 = f32[] parameter(0)
  %reduce_sum.2444 = f32[] parameter(1)
  ROOT %reduce_sum.2445 = f32[] add(%reduce_sum.2443, %reduce_sum.2444)
}

%add.123.clone (x.247: bf16[], y.247: bf16[]) -> bf16[] {
  %x.247 = bf16[] parameter(0)
  %y.247 = bf16[] parameter(1)
  ROOT %add.1270 = bf16[] add(%x.247, %y.247)
}

%region_1264.27958 (reduce_sum.27955: f32[], reduce_sum.27956: f32[]) -> f32[] {
  %reduce_sum.27955 = f32[] parameter(0)
  %reduce_sum.27956 = f32[] parameter(1)
  ROOT %reduce_sum.27957 = f32[] add(%reduce_sum.27955, %reduce_sum.27956)
}

%region_1264.27958.clone (reduce_sum.2446: f32[], reduce_sum.2447: f32[]) -> f32[] {
  %reduce_sum.2446 = f32[] parameter(0)
  %reduce_sum.2447 = f32[] parameter(1)
  ROOT %reduce_sum.2448 = f32[] add(%reduce_sum.2446, %reduce_sum.2447)
}

%add.124.clone (x.249: bf16[], y.249: bf16[]) -> bf16[] {
  %x.249 = bf16[] parameter(0)
  %y.249 = bf16[] parameter(1)
  ROOT %add.1272 = bf16[] add(%x.249, %y.249)
}

%region_1265.27969 (reduce_sum.27966: f32[], reduce_sum.27967: f32[]) -> f32[] {
  %reduce_sum.27966 = f32[] parameter(0)
  %reduce_sum.27967 = f32[] parameter(1)
  ROOT %reduce_sum.27968 = f32[] add(%reduce_sum.27966, %reduce_sum.27967)
}

%region_1265.27969.clone (reduce_sum.2449: f32[], reduce_sum.2450: f32[]) -> f32[] {
  %reduce_sum.2449 = f32[] parameter(0)
  %reduce_sum.2450 = f32[] parameter(1)
  ROOT %reduce_sum.2451 = f32[] add(%reduce_sum.2449, %reduce_sum.2450)
}

%add.125.clone (x.251: bf16[], y.251: bf16[]) -> bf16[] {
  %x.251 = bf16[] parameter(0)
  %y.251 = bf16[] parameter(1)
  ROOT %add.1274 = bf16[] add(%x.251, %y.251)
}

%region_1266.27979 (reduce_sum.27976: f32[], reduce_sum.27977: f32[]) -> f32[] {
  %reduce_sum.27976 = f32[] parameter(0)
  %reduce_sum.27977 = f32[] parameter(1)
  ROOT %reduce_sum.27978 = f32[] add(%reduce_sum.27976, %reduce_sum.27977)
}

%region_1266.27979.clone (reduce_sum.2452: f32[], reduce_sum.2453: f32[]) -> f32[] {
  %reduce_sum.2452 = f32[] parameter(0)
  %reduce_sum.2453 = f32[] parameter(1)
  ROOT %reduce_sum.2454 = f32[] add(%reduce_sum.2452, %reduce_sum.2453)
}

%region_1267.27990 (reduce_sum.27987: f32[], reduce_sum.27988: f32[]) -> f32[] {
  %reduce_sum.27987 = f32[] parameter(0)
  %reduce_sum.27988 = f32[] parameter(1)
  ROOT %reduce_sum.27989 = f32[] add(%reduce_sum.27987, %reduce_sum.27988)
}

%region_1267.27990.clone (reduce_sum.2455: f32[], reduce_sum.2456: f32[]) -> f32[] {
  %reduce_sum.2455 = f32[] parameter(0)
  %reduce_sum.2456 = f32[] parameter(1)
  ROOT %reduce_sum.2457 = f32[] add(%reduce_sum.2455, %reduce_sum.2456)
}

%region_1268.28001 (reduce_sum.27998: f32[], reduce_sum.27999: f32[]) -> f32[] {
  %reduce_sum.27998 = f32[] parameter(0)
  %reduce_sum.27999 = f32[] parameter(1)
  ROOT %reduce_sum.28000 = f32[] add(%reduce_sum.27998, %reduce_sum.27999)
}

%region_1268.28001.clone (reduce_sum.2458: f32[], reduce_sum.2459: f32[]) -> f32[] {
  %reduce_sum.2458 = f32[] parameter(0)
  %reduce_sum.2459 = f32[] parameter(1)
  ROOT %reduce_sum.2460 = f32[] add(%reduce_sum.2458, %reduce_sum.2459)
}

%region_1269.28012 (reduce_sum.28009: f32[], reduce_sum.28010: f32[]) -> f32[] {
  %reduce_sum.28009 = f32[] parameter(0)
  %reduce_sum.28010 = f32[] parameter(1)
  ROOT %reduce_sum.28011 = f32[] add(%reduce_sum.28009, %reduce_sum.28010)
}

%region_1269.28012.clone (reduce_sum.2461: f32[], reduce_sum.2462: f32[]) -> f32[] {
  %reduce_sum.2461 = f32[] parameter(0)
  %reduce_sum.2462 = f32[] parameter(1)
  ROOT %reduce_sum.2463 = f32[] add(%reduce_sum.2461, %reduce_sum.2462)
}

%region_1270.28020 (reduce_sum.28017: bf16[], reduce_sum.28018: bf16[]) -> bf16[] {
  %reduce_sum.28017 = bf16[] parameter(0)
  %reduce_sum.28018 = bf16[] parameter(1)
  ROOT %reduce_sum.28019 = bf16[] add(%reduce_sum.28017, %reduce_sum.28018)
}

%region_1270.28020.clone (reduce_sum.2464: bf16[], reduce_sum.2465: bf16[]) -> bf16[] {
  %reduce_sum.2464 = bf16[] parameter(0)
  %reduce_sum.2465 = bf16[] parameter(1)
  ROOT %reduce_sum.2466 = bf16[] add(%reduce_sum.2464, %reduce_sum.2465)
}

%region_1271.28027 (reduce_sum.28024: f32[], reduce_sum.28025: f32[]) -> f32[] {
  %reduce_sum.28024 = f32[] parameter(0)
  %reduce_sum.28025 = f32[] parameter(1)
  ROOT %reduce_sum.28026 = f32[] add(%reduce_sum.28024, %reduce_sum.28025)
}

%region_1272.28035 (reduce_sum.28032: bf16[], reduce_sum.28033: bf16[]) -> bf16[] {
  %reduce_sum.28032 = bf16[] parameter(0)
  %reduce_sum.28033 = bf16[] parameter(1)
  ROOT %reduce_sum.28034 = bf16[] add(%reduce_sum.28032, %reduce_sum.28033)
}

%region_1272.28035.clone (reduce_sum.2467: bf16[], reduce_sum.2468: bf16[]) -> bf16[] {
  %reduce_sum.2467 = bf16[] parameter(0)
  %reduce_sum.2468 = bf16[] parameter(1)
  ROOT %reduce_sum.2469 = bf16[] add(%reduce_sum.2467, %reduce_sum.2468)
}

%region_1273.28042 (reduce_sum.28039: f32[], reduce_sum.28040: f32[]) -> f32[] {
  %reduce_sum.28039 = f32[] parameter(0)
  %reduce_sum.28040 = f32[] parameter(1)
  ROOT %reduce_sum.28041 = f32[] add(%reduce_sum.28039, %reduce_sum.28040)
}

%add.126.clone (x.253: bf16[], y.253: bf16[]) -> bf16[] {
  %x.253 = bf16[] parameter(0)
  %y.253 = bf16[] parameter(1)
  ROOT %add.1276 = bf16[] add(%x.253, %y.253)
}

%region_1274.28053 (reduce_sum.28050: f32[], reduce_sum.28051: f32[]) -> f32[] {
  %reduce_sum.28050 = f32[] parameter(0)
  %reduce_sum.28051 = f32[] parameter(1)
  ROOT %reduce_sum.306 = f32[] add(%reduce_sum.28050, %reduce_sum.28051)
}

%region_1274.28053.clone (reduce_sum.2470: f32[], reduce_sum.2471: f32[]) -> f32[] {
  %reduce_sum.2470 = f32[] parameter(0)
  %reduce_sum.2471 = f32[] parameter(1)
  ROOT %reduce_sum.2472 = f32[] add(%reduce_sum.2470, %reduce_sum.2471)
}

%add.127.clone (x.255: bf16[], y.255: bf16[]) -> bf16[] {
  %x.255 = bf16[] parameter(0)
  %y.255 = bf16[] parameter(1)
  ROOT %add.1278 = bf16[] add(%x.255, %y.255)
}

%region_1275.28064 (reduce_sum.28061: f32[], reduce_sum.28062: f32[]) -> f32[] {
  %reduce_sum.28061 = f32[] parameter(0)
  %reduce_sum.28062 = f32[] parameter(1)
  ROOT %reduce_sum.28063 = f32[] add(%reduce_sum.28061, %reduce_sum.28062)
}

%region_1275.28064.clone (reduce_sum.2473: f32[], reduce_sum.2474: f32[]) -> f32[] {
  %reduce_sum.2473 = f32[] parameter(0)
  %reduce_sum.2474 = f32[] parameter(1)
  ROOT %reduce_sum.2475 = f32[] add(%reduce_sum.2473, %reduce_sum.2474)
}

%add.128.clone (x.257: bf16[], y.257: bf16[]) -> bf16[] {
  %x.257 = bf16[] parameter(0)
  %y.257 = bf16[] parameter(1)
  ROOT %add.1280 = bf16[] add(%x.257, %y.257)
}

%region_1276.28075 (reduce_sum.28072: f32[], reduce_sum.28073: f32[]) -> f32[] {
  %reduce_sum.28072 = f32[] parameter(0)
  %reduce_sum.28073 = f32[] parameter(1)
  ROOT %reduce_sum.307 = f32[] add(%reduce_sum.28072, %reduce_sum.28073)
}

%region_1276.28075.clone (reduce_sum.2476: f32[], reduce_sum.2477: f32[]) -> f32[] {
  %reduce_sum.2476 = f32[] parameter(0)
  %reduce_sum.2477 = f32[] parameter(1)
  ROOT %reduce_sum.2481 = f32[] add(%reduce_sum.2476, %reduce_sum.2477)
}

%add.129.clone (x.259: bf16[], y.259: bf16[]) -> bf16[] {
  %x.259 = bf16[] parameter(0)
  %y.259 = bf16[] parameter(1)
  ROOT %add.1282 = bf16[] add(%x.259, %y.259)
}

%region_1277.28086 (reduce_sum.28083: f32[], reduce_sum.28084: f32[]) -> f32[] {
  %reduce_sum.28083 = f32[] parameter(0)
  %reduce_sum.28084 = f32[] parameter(1)
  ROOT %reduce_sum.28085 = f32[] add(%reduce_sum.28083, %reduce_sum.28084)
}

%region_1277.28086.clone (reduce_sum.2483: f32[], reduce_sum.2484: f32[]) -> f32[] {
  %reduce_sum.2483 = f32[] parameter(0)
  %reduce_sum.2484 = f32[] parameter(1)
  ROOT %reduce_sum.2485 = f32[] add(%reduce_sum.2483, %reduce_sum.2484)
}

%add.130.clone (x.261: bf16[], y.261: bf16[]) -> bf16[] {
  %x.261 = bf16[] parameter(0)
  %y.261 = bf16[] parameter(1)
  ROOT %add.1286 = bf16[] add(%x.261, %y.261)
}

%region_1278.28096 (reduce_sum.28093: f32[], reduce_sum.28094: f32[]) -> f32[] {
  %reduce_sum.28093 = f32[] parameter(0)
  %reduce_sum.28094 = f32[] parameter(1)
  ROOT %reduce_sum.28095 = f32[] add(%reduce_sum.28093, %reduce_sum.28094)
}

%region_1278.28096.clone (reduce_sum.2486: f32[], reduce_sum.2487: f32[]) -> f32[] {
  %reduce_sum.2486 = f32[] parameter(0)
  %reduce_sum.2487 = f32[] parameter(1)
  ROOT %reduce_sum.2488 = f32[] add(%reduce_sum.2486, %reduce_sum.2487)
}

%region_1279.28107 (reduce_sum.28104: f32[], reduce_sum.28105: f32[]) -> f32[] {
  %reduce_sum.28104 = f32[] parameter(0)
  %reduce_sum.28105 = f32[] parameter(1)
  ROOT %reduce_sum.28106 = f32[] add(%reduce_sum.28104, %reduce_sum.28105)
}

%region_1279.28107.clone (reduce_sum.2489: f32[], reduce_sum.2490: f32[]) -> f32[] {
  %reduce_sum.2489 = f32[] parameter(0)
  %reduce_sum.2490 = f32[] parameter(1)
  ROOT %reduce_sum.2491 = f32[] add(%reduce_sum.2489, %reduce_sum.2490)
}

%region_1280.28118 (reduce_sum.308: f32[], reduce_sum.309: f32[]) -> f32[] {
  %reduce_sum.308 = f32[] parameter(0)
  %reduce_sum.309 = f32[] parameter(1)
  ROOT %reduce_sum.310 = f32[] add(%reduce_sum.308, %reduce_sum.309)
}

%region_1280.28118.clone (reduce_sum.2492: f32[], reduce_sum.2493: f32[]) -> f32[] {
  %reduce_sum.2492 = f32[] parameter(0)
  %reduce_sum.2493 = f32[] parameter(1)
  ROOT %reduce_sum.2494 = f32[] add(%reduce_sum.2492, %reduce_sum.2493)
}

%region_1281.28129 (reduce_sum.28126: f32[], reduce_sum.28127: f32[]) -> f32[] {
  %reduce_sum.28126 = f32[] parameter(0)
  %reduce_sum.28127 = f32[] parameter(1)
  ROOT %reduce_sum.28128 = f32[] add(%reduce_sum.28126, %reduce_sum.28127)
}

%region_1281.28129.clone (reduce_sum.2495: f32[], reduce_sum.2496: f32[]) -> f32[] {
  %reduce_sum.2495 = f32[] parameter(0)
  %reduce_sum.2496 = f32[] parameter(1)
  ROOT %reduce_sum.2497 = f32[] add(%reduce_sum.2495, %reduce_sum.2496)
}

%region_1282.28137 (reduce_sum.28134: bf16[], reduce_sum.28135: bf16[]) -> bf16[] {
  %reduce_sum.28134 = bf16[] parameter(0)
  %reduce_sum.28135 = bf16[] parameter(1)
  ROOT %reduce_sum.28136 = bf16[] add(%reduce_sum.28134, %reduce_sum.28135)
}

%region_1282.28137.clone (reduce_sum.2498: bf16[], reduce_sum.2499: bf16[]) -> bf16[] {
  %reduce_sum.2498 = bf16[] parameter(0)
  %reduce_sum.2499 = bf16[] parameter(1)
  ROOT %reduce_sum.2500 = bf16[] add(%reduce_sum.2498, %reduce_sum.2499)
}

%region_1283.28144 (reduce_sum.28141: f32[], reduce_sum.28142: f32[]) -> f32[] {
  %reduce_sum.28141 = f32[] parameter(0)
  %reduce_sum.28142 = f32[] parameter(1)
  ROOT %reduce_sum.28143 = f32[] add(%reduce_sum.28141, %reduce_sum.28142)
}

%region_1284.28152 (reduce_sum.28149: bf16[], reduce_sum.28150: bf16[]) -> bf16[] {
  %reduce_sum.28149 = bf16[] parameter(0)
  %reduce_sum.28150 = bf16[] parameter(1)
  ROOT %reduce_sum.28151 = bf16[] add(%reduce_sum.28149, %reduce_sum.28150)
}

%region_1284.28152.clone (reduce_sum.2501: bf16[], reduce_sum.2502: bf16[]) -> bf16[] {
  %reduce_sum.2501 = bf16[] parameter(0)
  %reduce_sum.2502 = bf16[] parameter(1)
  ROOT %reduce_sum.2503 = bf16[] add(%reduce_sum.2501, %reduce_sum.2502)
}

%region_1285.28159 (reduce_sum.28156: f32[], reduce_sum.28157: f32[]) -> f32[] {
  %reduce_sum.28156 = f32[] parameter(0)
  %reduce_sum.28157 = f32[] parameter(1)
  ROOT %reduce_sum.28158 = f32[] add(%reduce_sum.28156, %reduce_sum.28157)
}

%add.131.clone (x.263: bf16[], y.263: bf16[]) -> bf16[] {
  %x.263 = bf16[] parameter(0)
  %y.263 = bf16[] parameter(1)
  ROOT %add.1288 = bf16[] add(%x.263, %y.263)
}

%region_1286.28170 (reduce_sum.28167: f32[], reduce_sum.28168: f32[]) -> f32[] {
  %reduce_sum.28167 = f32[] parameter(0)
  %reduce_sum.28168 = f32[] parameter(1)
  ROOT %reduce_sum.28169 = f32[] add(%reduce_sum.28167, %reduce_sum.28168)
}

%region_1286.28170.clone (reduce_sum.2504: f32[], reduce_sum.2505: f32[]) -> f32[] {
  %reduce_sum.2504 = f32[] parameter(0)
  %reduce_sum.2505 = f32[] parameter(1)
  ROOT %reduce_sum.2506 = f32[] add(%reduce_sum.2504, %reduce_sum.2505)
}

%add.132.clone (x.265: bf16[], y.265: bf16[]) -> bf16[] {
  %x.265 = bf16[] parameter(0)
  %y.265 = bf16[] parameter(1)
  ROOT %add.1290 = bf16[] add(%x.265, %y.265)
}

%region_1287.28181 (reduce_sum.311: f32[], reduce_sum.28179: f32[]) -> f32[] {
  %reduce_sum.311 = f32[] parameter(0)
  %reduce_sum.28179 = f32[] parameter(1)
  ROOT %reduce_sum.312 = f32[] add(%reduce_sum.311, %reduce_sum.28179)
}

%region_1287.28181.clone (reduce_sum.2507: f32[], reduce_sum.2508: f32[]) -> f32[] {
  %reduce_sum.2507 = f32[] parameter(0)
  %reduce_sum.2508 = f32[] parameter(1)
  ROOT %reduce_sum.2509 = f32[] add(%reduce_sum.2507, %reduce_sum.2508)
}

%add.133.clone (x.267: bf16[], y.267: bf16[]) -> bf16[] {
  %x.267 = bf16[] parameter(0)
  %y.267 = bf16[] parameter(1)
  ROOT %add.1292 = bf16[] add(%x.267, %y.267)
}

%region_1288.28192 (reduce_sum.313: f32[], reduce_sum.28190: f32[]) -> f32[] {
  %reduce_sum.313 = f32[] parameter(0)
  %reduce_sum.28190 = f32[] parameter(1)
  ROOT %reduce_sum.28191 = f32[] add(%reduce_sum.313, %reduce_sum.28190)
}

%region_1288.28192.clone (reduce_sum.2510: f32[], reduce_sum.2511: f32[]) -> f32[] {
  %reduce_sum.2510 = f32[] parameter(0)
  %reduce_sum.2511 = f32[] parameter(1)
  ROOT %reduce_sum.2512 = f32[] add(%reduce_sum.2510, %reduce_sum.2511)
}

%add.134.clone (x.269: bf16[], y.269: bf16[]) -> bf16[] {
  %x.269 = bf16[] parameter(0)
  %y.269 = bf16[] parameter(1)
  ROOT %add.1294 = bf16[] add(%x.269, %y.269)
}

%region_1289.28203 (reduce_sum.28200: f32[], reduce_sum.28201: f32[]) -> f32[] {
  %reduce_sum.28200 = f32[] parameter(0)
  %reduce_sum.28201 = f32[] parameter(1)
  ROOT %reduce_sum.28202 = f32[] add(%reduce_sum.28200, %reduce_sum.28201)
}

%region_1289.28203.clone (reduce_sum.2513: f32[], reduce_sum.2514: f32[]) -> f32[] {
  %reduce_sum.2513 = f32[] parameter(0)
  %reduce_sum.2514 = f32[] parameter(1)
  ROOT %reduce_sum.2515 = f32[] add(%reduce_sum.2513, %reduce_sum.2514)
}

%add.135.clone (x.271: bf16[], y.271: bf16[]) -> bf16[] {
  %x.271 = bf16[] parameter(0)
  %y.271 = bf16[] parameter(1)
  ROOT %add.1296 = bf16[] add(%x.271, %y.271)
}

%region_1290.28213 (reduce_sum.28210: f32[], reduce_sum.28211: f32[]) -> f32[] {
  %reduce_sum.28210 = f32[] parameter(0)
  %reduce_sum.28211 = f32[] parameter(1)
  ROOT %reduce_sum.28212 = f32[] add(%reduce_sum.28210, %reduce_sum.28211)
}

%region_1290.28213.clone (reduce_sum.2516: f32[], reduce_sum.2517: f32[]) -> f32[] {
  %reduce_sum.2516 = f32[] parameter(0)
  %reduce_sum.2517 = f32[] parameter(1)
  ROOT %reduce_sum.2518 = f32[] add(%reduce_sum.2516, %reduce_sum.2517)
}

%region_1291.28224 (reduce_sum.28221: f32[], reduce_sum.28222: f32[]) -> f32[] {
  %reduce_sum.28221 = f32[] parameter(0)
  %reduce_sum.28222 = f32[] parameter(1)
  ROOT %reduce_sum.28223 = f32[] add(%reduce_sum.28221, %reduce_sum.28222)
}

%region_1291.28224.clone (reduce_sum.2519: f32[], reduce_sum.2520: f32[]) -> f32[] {
  %reduce_sum.2519 = f32[] parameter(0)
  %reduce_sum.2520 = f32[] parameter(1)
  ROOT %reduce_sum.2521 = f32[] add(%reduce_sum.2519, %reduce_sum.2520)
}

%region_1292.28235 (reduce_sum.28232: f32[], reduce_sum.28233: f32[]) -> f32[] {
  %reduce_sum.28232 = f32[] parameter(0)
  %reduce_sum.28233 = f32[] parameter(1)
  ROOT %reduce_sum.28234 = f32[] add(%reduce_sum.28232, %reduce_sum.28233)
}

%region_1292.28235.clone (reduce_sum.2522: f32[], reduce_sum.2523: f32[]) -> f32[] {
  %reduce_sum.2522 = f32[] parameter(0)
  %reduce_sum.2523 = f32[] parameter(1)
  ROOT %reduce_sum.2524 = f32[] add(%reduce_sum.2522, %reduce_sum.2523)
}

%region_1293.28246 (reduce_sum.28243: f32[], reduce_sum.28244: f32[]) -> f32[] {
  %reduce_sum.28243 = f32[] parameter(0)
  %reduce_sum.28244 = f32[] parameter(1)
  ROOT %reduce_sum.28245 = f32[] add(%reduce_sum.28243, %reduce_sum.28244)
}

%region_1293.28246.clone (reduce_sum.2525: f32[], reduce_sum.2526: f32[]) -> f32[] {
  %reduce_sum.2525 = f32[] parameter(0)
  %reduce_sum.2526 = f32[] parameter(1)
  ROOT %reduce_sum.2527 = f32[] add(%reduce_sum.2525, %reduce_sum.2526)
}

%region_1294.28254 (reduce_sum.28251: bf16[], reduce_sum.314: bf16[]) -> bf16[] {
  %reduce_sum.28251 = bf16[] parameter(0)
  %reduce_sum.314 = bf16[] parameter(1)
  ROOT %reduce_sum.315 = bf16[] add(%reduce_sum.28251, %reduce_sum.314)
}

%region_1294.28254.clone (reduce_sum.2528: bf16[], reduce_sum.2529: bf16[]) -> bf16[] {
  %reduce_sum.2528 = bf16[] parameter(0)
  %reduce_sum.2529 = bf16[] parameter(1)
  ROOT %reduce_sum.2530 = bf16[] add(%reduce_sum.2528, %reduce_sum.2529)
}

%region_1295.28261 (reduce_sum.316: f32[], reduce_sum.317: f32[]) -> f32[] {
  %reduce_sum.316 = f32[] parameter(0)
  %reduce_sum.317 = f32[] parameter(1)
  ROOT %reduce_sum.318 = f32[] add(%reduce_sum.316, %reduce_sum.317)
}

%region_1296.28269 (reduce_sum.28266: bf16[], reduce_sum.28267: bf16[]) -> bf16[] {
  %reduce_sum.28266 = bf16[] parameter(0)
  %reduce_sum.28267 = bf16[] parameter(1)
  ROOT %reduce_sum.28268 = bf16[] add(%reduce_sum.28266, %reduce_sum.28267)
}

%region_1296.28269.clone (reduce_sum.2531: bf16[], reduce_sum.2532: bf16[]) -> bf16[] {
  %reduce_sum.2531 = bf16[] parameter(0)
  %reduce_sum.2532 = bf16[] parameter(1)
  ROOT %reduce_sum.2533 = bf16[] add(%reduce_sum.2531, %reduce_sum.2532)
}

%region_1297.28276 (reduce_sum.28273: f32[], reduce_sum.28274: f32[]) -> f32[] {
  %reduce_sum.28273 = f32[] parameter(0)
  %reduce_sum.28274 = f32[] parameter(1)
  ROOT %reduce_sum.28275 = f32[] add(%reduce_sum.28273, %reduce_sum.28274)
}

%add.136.clone (x.273: bf16[], y.273: bf16[]) -> bf16[] {
  %x.273 = bf16[] parameter(0)
  %y.273 = bf16[] parameter(1)
  ROOT %add.1298 = bf16[] add(%x.273, %y.273)
}

%region_1298.28287 (reduce_sum.319: f32[], reduce_sum.320: f32[]) -> f32[] {
  %reduce_sum.319 = f32[] parameter(0)
  %reduce_sum.320 = f32[] parameter(1)
  ROOT %reduce_sum.321 = f32[] add(%reduce_sum.319, %reduce_sum.320)
}

%region_1298.28287.clone (reduce_sum.2534: f32[], reduce_sum.2535: f32[]) -> f32[] {
  %reduce_sum.2534 = f32[] parameter(0)
  %reduce_sum.2535 = f32[] parameter(1)
  ROOT %reduce_sum.2536 = f32[] add(%reduce_sum.2534, %reduce_sum.2535)
}

%add.137.clone (x.275: bf16[], y.275: bf16[]) -> bf16[] {
  %x.275 = bf16[] parameter(0)
  %y.275 = bf16[] parameter(1)
  ROOT %add.1300 = bf16[] add(%x.275, %y.275)
}

%region_1299.28298 (reduce_sum.322: f32[], reduce_sum.323: f32[]) -> f32[] {
  %reduce_sum.322 = f32[] parameter(0)
  %reduce_sum.323 = f32[] parameter(1)
  ROOT %reduce_sum.324 = f32[] add(%reduce_sum.322, %reduce_sum.323)
}

%region_1299.28298.clone (reduce_sum.2537: f32[], reduce_sum.2538: f32[]) -> f32[] {
  %reduce_sum.2537 = f32[] parameter(0)
  %reduce_sum.2538 = f32[] parameter(1)
  ROOT %reduce_sum.2539 = f32[] add(%reduce_sum.2537, %reduce_sum.2538)
}

%add.138.clone (x.277: bf16[], y.277: bf16[]) -> bf16[] {
  %x.277 = bf16[] parameter(0)
  %y.277 = bf16[] parameter(1)
  ROOT %add.1302 = bf16[] add(%x.277, %y.277)
}

%region_1300.28309 (reduce_sum.28306: f32[], reduce_sum.28307: f32[]) -> f32[] {
  %reduce_sum.28306 = f32[] parameter(0)
  %reduce_sum.28307 = f32[] parameter(1)
  ROOT %reduce_sum.28308 = f32[] add(%reduce_sum.28306, %reduce_sum.28307)
}

%region_1300.28309.clone (reduce_sum.2540: f32[], reduce_sum.2541: f32[]) -> f32[] {
  %reduce_sum.2540 = f32[] parameter(0)
  %reduce_sum.2541 = f32[] parameter(1)
  ROOT %reduce_sum.2542 = f32[] add(%reduce_sum.2540, %reduce_sum.2541)
}

%add.139.clone (x.279: bf16[], y.279: bf16[]) -> bf16[] {
  %x.279 = bf16[] parameter(0)
  %y.279 = bf16[] parameter(1)
  ROOT %add.1304 = bf16[] add(%x.279, %y.279)
}

%region_1301.28320 (reduce_sum.325: f32[], reduce_sum.326: f32[]) -> f32[] {
  %reduce_sum.325 = f32[] parameter(0)
  %reduce_sum.326 = f32[] parameter(1)
  ROOT %reduce_sum.28319 = f32[] add(%reduce_sum.325, %reduce_sum.326)
}

%region_1301.28320.clone (reduce_sum.2543: f32[], reduce_sum.2544: f32[]) -> f32[] {
  %reduce_sum.2543 = f32[] parameter(0)
  %reduce_sum.2544 = f32[] parameter(1)
  ROOT %reduce_sum.2545 = f32[] add(%reduce_sum.2543, %reduce_sum.2544)
}

%add.140.clone (x.281: bf16[], y.281: bf16[]) -> bf16[] {
  %x.281 = bf16[] parameter(0)
  %y.281 = bf16[] parameter(1)
  ROOT %add.1306 = bf16[] add(%x.281, %y.281)
}

%region_1302.28330 (reduce_sum.327: f32[], reduce_sum.328: f32[]) -> f32[] {
  %reduce_sum.327 = f32[] parameter(0)
  %reduce_sum.328 = f32[] parameter(1)
  ROOT %reduce_sum.28329 = f32[] add(%reduce_sum.327, %reduce_sum.328)
}

%region_1302.28330.clone (reduce_sum.2546: f32[], reduce_sum.2547: f32[]) -> f32[] {
  %reduce_sum.2546 = f32[] parameter(0)
  %reduce_sum.2547 = f32[] parameter(1)
  ROOT %reduce_sum.2548 = f32[] add(%reduce_sum.2546, %reduce_sum.2547)
}

%region_1303.28341 (reduce_sum.28338: f32[], reduce_sum.28339: f32[]) -> f32[] {
  %reduce_sum.28338 = f32[] parameter(0)
  %reduce_sum.28339 = f32[] parameter(1)
  ROOT %reduce_sum.28340 = f32[] add(%reduce_sum.28338, %reduce_sum.28339)
}

%region_1303.28341.clone (reduce_sum.2549: f32[], reduce_sum.2550: f32[]) -> f32[] {
  %reduce_sum.2549 = f32[] parameter(0)
  %reduce_sum.2550 = f32[] parameter(1)
  ROOT %reduce_sum.2551 = f32[] add(%reduce_sum.2549, %reduce_sum.2550)
}

%region_1304.28352 (reduce_sum.329: f32[], reduce_sum.28350: f32[]) -> f32[] {
  %reduce_sum.329 = f32[] parameter(0)
  %reduce_sum.28350 = f32[] parameter(1)
  ROOT %reduce_sum.28351 = f32[] add(%reduce_sum.329, %reduce_sum.28350)
}

%region_1304.28352.clone (reduce_sum.2552: f32[], reduce_sum.2553: f32[]) -> f32[] {
  %reduce_sum.2552 = f32[] parameter(0)
  %reduce_sum.2553 = f32[] parameter(1)
  ROOT %reduce_sum.2554 = f32[] add(%reduce_sum.2552, %reduce_sum.2553)
}

%region_1305.28363 (reduce_sum.28360: f32[], reduce_sum.28361: f32[]) -> f32[] {
  %reduce_sum.28360 = f32[] parameter(0)
  %reduce_sum.28361 = f32[] parameter(1)
  ROOT %reduce_sum.28362 = f32[] add(%reduce_sum.28360, %reduce_sum.28361)
}

%region_1305.28363.clone (reduce_sum.2555: f32[], reduce_sum.2556: f32[]) -> f32[] {
  %reduce_sum.2555 = f32[] parameter(0)
  %reduce_sum.2556 = f32[] parameter(1)
  ROOT %reduce_sum.2557 = f32[] add(%reduce_sum.2555, %reduce_sum.2556)
}

%region_1306.28371 (reduce_sum.28368: bf16[], reduce_sum.28369: bf16[]) -> bf16[] {
  %reduce_sum.28368 = bf16[] parameter(0)
  %reduce_sum.28369 = bf16[] parameter(1)
  ROOT %reduce_sum.28370 = bf16[] add(%reduce_sum.28368, %reduce_sum.28369)
}

%region_1306.28371.clone (reduce_sum.2558: bf16[], reduce_sum.2559: bf16[]) -> bf16[] {
  %reduce_sum.2558 = bf16[] parameter(0)
  %reduce_sum.2559 = bf16[] parameter(1)
  ROOT %reduce_sum.2560 = bf16[] add(%reduce_sum.2558, %reduce_sum.2559)
}

%region_1307.28378 (reduce_sum.28375: f32[], reduce_sum.28376: f32[]) -> f32[] {
  %reduce_sum.28375 = f32[] parameter(0)
  %reduce_sum.28376 = f32[] parameter(1)
  ROOT %reduce_sum.28377 = f32[] add(%reduce_sum.28375, %reduce_sum.28376)
}

%region_1308.28386 (reduce_sum.28383: bf16[], reduce_sum.28384: bf16[]) -> bf16[] {
  %reduce_sum.28383 = bf16[] parameter(0)
  %reduce_sum.28384 = bf16[] parameter(1)
  ROOT %reduce_sum.28385 = bf16[] add(%reduce_sum.28383, %reduce_sum.28384)
}

%region_1308.28386.clone (reduce_sum.2561: bf16[], reduce_sum.2562: bf16[]) -> bf16[] {
  %reduce_sum.2561 = bf16[] parameter(0)
  %reduce_sum.2562 = bf16[] parameter(1)
  ROOT %reduce_sum.2566 = bf16[] add(%reduce_sum.2561, %reduce_sum.2562)
}

%region_1309.28393 (reduce_sum.28390: f32[], reduce_sum.28391: f32[]) -> f32[] {
  %reduce_sum.28390 = f32[] parameter(0)
  %reduce_sum.28391 = f32[] parameter(1)
  ROOT %reduce_sum.28392 = f32[] add(%reduce_sum.28390, %reduce_sum.28391)
}

%add.141.clone (x.283: bf16[], y.283: bf16[]) -> bf16[] {
  %x.283 = bf16[] parameter(0)
  %y.283 = bf16[] parameter(1)
  ROOT %add.1308 = bf16[] add(%x.283, %y.283)
}

%region_1310.28404 (reduce_sum.28401: f32[], reduce_sum.28402: f32[]) -> f32[] {
  %reduce_sum.28401 = f32[] parameter(0)
  %reduce_sum.28402 = f32[] parameter(1)
  ROOT %reduce_sum.28403 = f32[] add(%reduce_sum.28401, %reduce_sum.28402)
}

%region_1310.28404.clone (reduce_sum.2568: f32[], reduce_sum.2569: f32[]) -> f32[] {
  %reduce_sum.2568 = f32[] parameter(0)
  %reduce_sum.2569 = f32[] parameter(1)
  ROOT %reduce_sum.2570 = f32[] add(%reduce_sum.2568, %reduce_sum.2569)
}

%add.142.clone (x.285: bf16[], y.285: bf16[]) -> bf16[] {
  %x.285 = bf16[] parameter(0)
  %y.285 = bf16[] parameter(1)
  ROOT %add.1310 = bf16[] add(%x.285, %y.285)
}

%region_1311.28415 (reduce_sum.28412: f32[], reduce_sum.28413: f32[]) -> f32[] {
  %reduce_sum.28412 = f32[] parameter(0)
  %reduce_sum.28413 = f32[] parameter(1)
  ROOT %reduce_sum.28414 = f32[] add(%reduce_sum.28412, %reduce_sum.28413)
}

%region_1311.28415.clone (reduce_sum.2578: f32[], reduce_sum.2579: f32[]) -> f32[] {
  %reduce_sum.2578 = f32[] parameter(0)
  %reduce_sum.2579 = f32[] parameter(1)
  ROOT %reduce_sum.2580 = f32[] add(%reduce_sum.2578, %reduce_sum.2579)
}

%add.143.clone (x.287: bf16[], y.287: bf16[]) -> bf16[] {
  %x.287 = bf16[] parameter(0)
  %y.287 = bf16[] parameter(1)
  ROOT %add.1312 = bf16[] add(%x.287, %y.287)
}

%region_1312.28426 (reduce_sum.28423: f32[], reduce_sum.28424: f32[]) -> f32[] {
  %reduce_sum.28423 = f32[] parameter(0)
  %reduce_sum.28424 = f32[] parameter(1)
  ROOT %reduce_sum.28425 = f32[] add(%reduce_sum.28423, %reduce_sum.28424)
}

%region_1312.28426.clone (reduce_sum.2584: f32[], reduce_sum.2587: f32[]) -> f32[] {
  %reduce_sum.2584 = f32[] parameter(0)
  %reduce_sum.2587 = f32[] parameter(1)
  ROOT %reduce_sum.2588 = f32[] add(%reduce_sum.2584, %reduce_sum.2587)
}

%add.144.clone (x.289: bf16[], y.289: bf16[]) -> bf16[] {
  %x.289 = bf16[] parameter(0)
  %y.289 = bf16[] parameter(1)
  ROOT %add.1314 = bf16[] add(%x.289, %y.289)
}

%region_1313.28437 (reduce_sum.28434: f32[], reduce_sum.28435: f32[]) -> f32[] {
  %reduce_sum.28434 = f32[] parameter(0)
  %reduce_sum.28435 = f32[] parameter(1)
  ROOT %reduce_sum.28436 = f32[] add(%reduce_sum.28434, %reduce_sum.28435)
}

%region_1313.28437.clone (reduce_sum.2589: f32[], reduce_sum.2590: f32[]) -> f32[] {
  %reduce_sum.2589 = f32[] parameter(0)
  %reduce_sum.2590 = f32[] parameter(1)
  ROOT %reduce_sum.2594 = f32[] add(%reduce_sum.2589, %reduce_sum.2590)
}

%add.145.clone (x.291: bf16[], y.291: bf16[]) -> bf16[] {
  %x.291 = bf16[] parameter(0)
  %y.291 = bf16[] parameter(1)
  ROOT %add.1316 = bf16[] add(%x.291, %y.291)
}

%region_1314.28447 (reduce_sum.330: f32[], reduce_sum.331: f32[]) -> f32[] {
  %reduce_sum.330 = f32[] parameter(0)
  %reduce_sum.331 = f32[] parameter(1)
  ROOT %reduce_sum.332 = f32[] add(%reduce_sum.330, %reduce_sum.331)
}

%region_1314.28447.clone (reduce_sum.2596: f32[], reduce_sum.2597: f32[]) -> f32[] {
  %reduce_sum.2596 = f32[] parameter(0)
  %reduce_sum.2597 = f32[] parameter(1)
  ROOT %reduce_sum.2598 = f32[] add(%reduce_sum.2596, %reduce_sum.2597)
}

%region_1315.28458 (reduce_sum.28455: f32[], reduce_sum.333: f32[]) -> f32[] {
  %reduce_sum.28455 = f32[] parameter(0)
  %reduce_sum.333 = f32[] parameter(1)
  ROOT %reduce_sum.334 = f32[] add(%reduce_sum.28455, %reduce_sum.333)
}

%region_1315.28458.clone (reduce_sum.2599: f32[], reduce_sum.2600: f32[]) -> f32[] {
  %reduce_sum.2599 = f32[] parameter(0)
  %reduce_sum.2600 = f32[] parameter(1)
  ROOT %reduce_sum.2601 = f32[] add(%reduce_sum.2599, %reduce_sum.2600)
}

%region_1316.28469 (reduce_sum.28466: f32[], reduce_sum.28467: f32[]) -> f32[] {
  %reduce_sum.28466 = f32[] parameter(0)
  %reduce_sum.28467 = f32[] parameter(1)
  ROOT %reduce_sum.28468 = f32[] add(%reduce_sum.28466, %reduce_sum.28467)
}

%region_1316.28469.clone (reduce_sum.2605: f32[], reduce_sum.2607: f32[]) -> f32[] {
  %reduce_sum.2605 = f32[] parameter(0)
  %reduce_sum.2607 = f32[] parameter(1)
  ROOT %reduce_sum.2608 = f32[] add(%reduce_sum.2605, %reduce_sum.2607)
}

%region_1317.28480 (reduce_sum.28477: f32[], reduce_sum.28478: f32[]) -> f32[] {
  %reduce_sum.28477 = f32[] parameter(0)
  %reduce_sum.28478 = f32[] parameter(1)
  ROOT %reduce_sum.28479 = f32[] add(%reduce_sum.28477, %reduce_sum.28478)
}

%region_1317.28480.clone (reduce_sum.2609: f32[], reduce_sum.2610: f32[]) -> f32[] {
  %reduce_sum.2609 = f32[] parameter(0)
  %reduce_sum.2610 = f32[] parameter(1)
  ROOT %reduce_sum.2611 = f32[] add(%reduce_sum.2609, %reduce_sum.2610)
}

%region_1318.28488 (reduce_sum.28485: bf16[], reduce_sum.28486: bf16[]) -> bf16[] {
  %reduce_sum.28485 = bf16[] parameter(0)
  %reduce_sum.28486 = bf16[] parameter(1)
  ROOT %reduce_sum.335 = bf16[] add(%reduce_sum.28485, %reduce_sum.28486)
}

%region_1318.28488.clone (reduce_sum.2612: bf16[], reduce_sum.2613: bf16[]) -> bf16[] {
  %reduce_sum.2612 = bf16[] parameter(0)
  %reduce_sum.2613 = bf16[] parameter(1)
  ROOT %reduce_sum.2614 = bf16[] add(%reduce_sum.2612, %reduce_sum.2613)
}

%region_1319.28495 (reduce_sum.28492: f32[], reduce_sum.28493: f32[]) -> f32[] {
  %reduce_sum.28492 = f32[] parameter(0)
  %reduce_sum.28493 = f32[] parameter(1)
  ROOT %reduce_sum.28494 = f32[] add(%reduce_sum.28492, %reduce_sum.28493)
}

%region_1320.28503 (reduce_sum.28500: bf16[], reduce_sum.28501: bf16[]) -> bf16[] {
  %reduce_sum.28500 = bf16[] parameter(0)
  %reduce_sum.28501 = bf16[] parameter(1)
  ROOT %reduce_sum.28502 = bf16[] add(%reduce_sum.28500, %reduce_sum.28501)
}

%region_1320.28503.clone (reduce_sum.2615: bf16[], reduce_sum.2616: bf16[]) -> bf16[] {
  %reduce_sum.2615 = bf16[] parameter(0)
  %reduce_sum.2616 = bf16[] parameter(1)
  ROOT %reduce_sum.2617 = bf16[] add(%reduce_sum.2615, %reduce_sum.2616)
}

%region_1321.28510 (reduce_sum.28507: f32[], reduce_sum.28508: f32[]) -> f32[] {
  %reduce_sum.28507 = f32[] parameter(0)
  %reduce_sum.28508 = f32[] parameter(1)
  ROOT %reduce_sum.28509 = f32[] add(%reduce_sum.28507, %reduce_sum.28508)
}

%add.146.clone (x.293: bf16[], y.293: bf16[]) -> bf16[] {
  %x.293 = bf16[] parameter(0)
  %y.293 = bf16[] parameter(1)
  ROOT %add.1319 = bf16[] add(%x.293, %y.293)
}

%region_1322.28521 (reduce_sum.28518: f32[], reduce_sum.28519: f32[]) -> f32[] {
  %reduce_sum.28518 = f32[] parameter(0)
  %reduce_sum.28519 = f32[] parameter(1)
  ROOT %reduce_sum.28520 = f32[] add(%reduce_sum.28518, %reduce_sum.28519)
}

%region_1322.28521.clone (reduce_sum.2618: f32[], reduce_sum.2619: f32[]) -> f32[] {
  %reduce_sum.2618 = f32[] parameter(0)
  %reduce_sum.2619 = f32[] parameter(1)
  ROOT %reduce_sum.2620 = f32[] add(%reduce_sum.2618, %reduce_sum.2619)
}

%add.147.clone (x.295: bf16[], y.295: bf16[]) -> bf16[] {
  %x.295 = bf16[] parameter(0)
  %y.295 = bf16[] parameter(1)
  ROOT %add.1321 = bf16[] add(%x.295, %y.295)
}

%region_1323.28532 (reduce_sum.28529: f32[], reduce_sum.28530: f32[]) -> f32[] {
  %reduce_sum.28529 = f32[] parameter(0)
  %reduce_sum.28530 = f32[] parameter(1)
  ROOT %reduce_sum.28531 = f32[] add(%reduce_sum.28529, %reduce_sum.28530)
}

%region_1323.28532.clone (reduce_sum.2621: f32[], reduce_sum.2622: f32[]) -> f32[] {
  %reduce_sum.2621 = f32[] parameter(0)
  %reduce_sum.2622 = f32[] parameter(1)
  ROOT %reduce_sum.2623 = f32[] add(%reduce_sum.2621, %reduce_sum.2622)
}

%add.148.clone (x.297: bf16[], y.297: bf16[]) -> bf16[] {
  %x.297 = bf16[] parameter(0)
  %y.297 = bf16[] parameter(1)
  ROOT %add.1323 = bf16[] add(%x.297, %y.297)
}

%region_1324.28543 (reduce_sum.28540: f32[], reduce_sum.28541: f32[]) -> f32[] {
  %reduce_sum.28540 = f32[] parameter(0)
  %reduce_sum.28541 = f32[] parameter(1)
  ROOT %reduce_sum.28542 = f32[] add(%reduce_sum.28540, %reduce_sum.28541)
}

%region_1324.28543.clone (reduce_sum.2624: f32[], reduce_sum.2625: f32[]) -> f32[] {
  %reduce_sum.2624 = f32[] parameter(0)
  %reduce_sum.2625 = f32[] parameter(1)
  ROOT %reduce_sum.2626 = f32[] add(%reduce_sum.2624, %reduce_sum.2625)
}

%add.149.clone (x.299: bf16[], y.299: bf16[]) -> bf16[] {
  %x.299 = bf16[] parameter(0)
  %y.299 = bf16[] parameter(1)
  ROOT %add.1325 = bf16[] add(%x.299, %y.299)
}

%region_1325.28554 (reduce_sum.28551: f32[], reduce_sum.28552: f32[]) -> f32[] {
  %reduce_sum.28551 = f32[] parameter(0)
  %reduce_sum.28552 = f32[] parameter(1)
  ROOT %reduce_sum.28553 = f32[] add(%reduce_sum.28551, %reduce_sum.28552)
}

%region_1325.28554.clone (reduce_sum.2627: f32[], reduce_sum.2628: f32[]) -> f32[] {
  %reduce_sum.2627 = f32[] parameter(0)
  %reduce_sum.2628 = f32[] parameter(1)
  ROOT %reduce_sum.2632 = f32[] add(%reduce_sum.2627, %reduce_sum.2628)
}

%add.150.clone (x.301: bf16[], y.301: bf16[]) -> bf16[] {
  %x.301 = bf16[] parameter(0)
  %y.301 = bf16[] parameter(1)
  ROOT %add.1328 = bf16[] add(%x.301, %y.301)
}

%region_1326.28564 (reduce_sum.28561: f32[], reduce_sum.28562: f32[]) -> f32[] {
  %reduce_sum.28561 = f32[] parameter(0)
  %reduce_sum.28562 = f32[] parameter(1)
  ROOT %reduce_sum.28563 = f32[] add(%reduce_sum.28561, %reduce_sum.28562)
}

%region_1326.28564.clone (reduce_sum.2634: f32[], reduce_sum.2635: f32[]) -> f32[] {
  %reduce_sum.2634 = f32[] parameter(0)
  %reduce_sum.2635 = f32[] parameter(1)
  ROOT %reduce_sum.2636 = f32[] add(%reduce_sum.2634, %reduce_sum.2635)
}

%region_1327.28575 (reduce_sum.28572: f32[], reduce_sum.28573: f32[]) -> f32[] {
  %reduce_sum.28572 = f32[] parameter(0)
  %reduce_sum.28573 = f32[] parameter(1)
  ROOT %reduce_sum.28574 = f32[] add(%reduce_sum.28572, %reduce_sum.28573)
}

%region_1327.28575.clone (reduce_sum.2637: f32[], reduce_sum.2638: f32[]) -> f32[] {
  %reduce_sum.2637 = f32[] parameter(0)
  %reduce_sum.2638 = f32[] parameter(1)
  ROOT %reduce_sum.2639 = f32[] add(%reduce_sum.2637, %reduce_sum.2638)
}

%region_1328.28586 (reduce_sum.28583: f32[], reduce_sum.28584: f32[]) -> f32[] {
  %reduce_sum.28583 = f32[] parameter(0)
  %reduce_sum.28584 = f32[] parameter(1)
  ROOT %reduce_sum.28585 = f32[] add(%reduce_sum.28583, %reduce_sum.28584)
}

%region_1328.28586.clone (reduce_sum.2640: f32[], reduce_sum.2641: f32[]) -> f32[] {
  %reduce_sum.2640 = f32[] parameter(0)
  %reduce_sum.2641 = f32[] parameter(1)
  ROOT %reduce_sum.2642 = f32[] add(%reduce_sum.2640, %reduce_sum.2641)
}

%region_1329.28597 (reduce_sum.28594: f32[], reduce_sum.28595: f32[]) -> f32[] {
  %reduce_sum.28594 = f32[] parameter(0)
  %reduce_sum.28595 = f32[] parameter(1)
  ROOT %reduce_sum.28596 = f32[] add(%reduce_sum.28594, %reduce_sum.28595)
}

%region_1329.28597.clone (reduce_sum.2643: f32[], reduce_sum.2644: f32[]) -> f32[] {
  %reduce_sum.2643 = f32[] parameter(0)
  %reduce_sum.2644 = f32[] parameter(1)
  ROOT %reduce_sum.2645 = f32[] add(%reduce_sum.2643, %reduce_sum.2644)
}

%region_1330.28605 (reduce_sum.28602: bf16[], reduce_sum.28603: bf16[]) -> bf16[] {
  %reduce_sum.28602 = bf16[] parameter(0)
  %reduce_sum.28603 = bf16[] parameter(1)
  ROOT %reduce_sum.28604 = bf16[] add(%reduce_sum.28602, %reduce_sum.28603)
}

%region_1330.28605.clone (reduce_sum.2646: bf16[], reduce_sum.2647: bf16[]) -> bf16[] {
  %reduce_sum.2646 = bf16[] parameter(0)
  %reduce_sum.2647 = bf16[] parameter(1)
  ROOT %reduce_sum.2648 = bf16[] add(%reduce_sum.2646, %reduce_sum.2647)
}

%region_1331.28612 (reduce_sum.28609: f32[], reduce_sum.28610: f32[]) -> f32[] {
  %reduce_sum.28609 = f32[] parameter(0)
  %reduce_sum.28610 = f32[] parameter(1)
  ROOT %reduce_sum.28611 = f32[] add(%reduce_sum.28609, %reduce_sum.28610)
}

%region_1332.28620 (reduce_sum.28617: bf16[], reduce_sum.28618: bf16[]) -> bf16[] {
  %reduce_sum.28617 = bf16[] parameter(0)
  %reduce_sum.28618 = bf16[] parameter(1)
  ROOT %reduce_sum.28619 = bf16[] add(%reduce_sum.28617, %reduce_sum.28618)
}

%region_1332.28620.clone (reduce_sum.2649: bf16[], reduce_sum.2650: bf16[]) -> bf16[] {
  %reduce_sum.2649 = bf16[] parameter(0)
  %reduce_sum.2650 = bf16[] parameter(1)
  ROOT %reduce_sum.2651 = bf16[] add(%reduce_sum.2649, %reduce_sum.2650)
}

%region_1333.28627 (reduce_sum.28624: f32[], reduce_sum.336: f32[]) -> f32[] {
  %reduce_sum.28624 = f32[] parameter(0)
  %reduce_sum.336 = f32[] parameter(1)
  ROOT %reduce_sum.28626 = f32[] add(%reduce_sum.28624, %reduce_sum.336)
}

%add.151.clone (x.303: bf16[], y.303: bf16[]) -> bf16[] {
  %x.303 = bf16[] parameter(0)
  %y.303 = bf16[] parameter(1)
  ROOT %add.1330 = bf16[] add(%x.303, %y.303)
}

%region_1334.28638 (reduce_sum.28635: f32[], reduce_sum.28636: f32[]) -> f32[] {
  %reduce_sum.28635 = f32[] parameter(0)
  %reduce_sum.28636 = f32[] parameter(1)
  ROOT %reduce_sum.28637 = f32[] add(%reduce_sum.28635, %reduce_sum.28636)
}

%region_1334.28638.clone (reduce_sum.2652: f32[], reduce_sum.2653: f32[]) -> f32[] {
  %reduce_sum.2652 = f32[] parameter(0)
  %reduce_sum.2653 = f32[] parameter(1)
  ROOT %reduce_sum.2654 = f32[] add(%reduce_sum.2652, %reduce_sum.2653)
}

%add.152.clone (x.305: bf16[], y.305: bf16[]) -> bf16[] {
  %x.305 = bf16[] parameter(0)
  %y.305 = bf16[] parameter(1)
  ROOT %add.1332 = bf16[] add(%x.305, %y.305)
}

%region_1335.28649 (reduce_sum.28646: f32[], reduce_sum.28647: f32[]) -> f32[] {
  %reduce_sum.28646 = f32[] parameter(0)
  %reduce_sum.28647 = f32[] parameter(1)
  ROOT %reduce_sum.28648 = f32[] add(%reduce_sum.28646, %reduce_sum.28647)
}

%region_1335.28649.clone (reduce_sum.2655: f32[], reduce_sum.2656: f32[]) -> f32[] {
  %reduce_sum.2655 = f32[] parameter(0)
  %reduce_sum.2656 = f32[] parameter(1)
  ROOT %reduce_sum.2657 = f32[] add(%reduce_sum.2655, %reduce_sum.2656)
}

%add.153.clone (x.307: bf16[], y.307: bf16[]) -> bf16[] {
  %x.307 = bf16[] parameter(0)
  %y.307 = bf16[] parameter(1)
  ROOT %add.1334 = bf16[] add(%x.307, %y.307)
}

%region_1336.28660 (reduce_sum.28657: f32[], reduce_sum.28658: f32[]) -> f32[] {
  %reduce_sum.28657 = f32[] parameter(0)
  %reduce_sum.28658 = f32[] parameter(1)
  ROOT %reduce_sum.28659 = f32[] add(%reduce_sum.28657, %reduce_sum.28658)
}

%region_1336.28660.clone (reduce_sum.2658: f32[], reduce_sum.2659: f32[]) -> f32[] {
  %reduce_sum.2658 = f32[] parameter(0)
  %reduce_sum.2659 = f32[] parameter(1)
  ROOT %reduce_sum.2660 = f32[] add(%reduce_sum.2658, %reduce_sum.2659)
}

%add.154.clone (x.309: bf16[], y.309: bf16[]) -> bf16[] {
  %x.309 = bf16[] parameter(0)
  %y.309 = bf16[] parameter(1)
  ROOT %add.1337 = bf16[] add(%x.309, %y.309)
}

%region_1337.28671 (reduce_sum.28668: f32[], reduce_sum.28669: f32[]) -> f32[] {
  %reduce_sum.28668 = f32[] parameter(0)
  %reduce_sum.28669 = f32[] parameter(1)
  ROOT %reduce_sum.28670 = f32[] add(%reduce_sum.28668, %reduce_sum.28669)
}

%region_1337.28671.clone (reduce_sum.2661: f32[], reduce_sum.2662: f32[]) -> f32[] {
  %reduce_sum.2661 = f32[] parameter(0)
  %reduce_sum.2662 = f32[] parameter(1)
  ROOT %reduce_sum.2663 = f32[] add(%reduce_sum.2661, %reduce_sum.2662)
}

%add.155.clone (x.311: bf16[], y.311: bf16[]) -> bf16[] {
  %x.311 = bf16[] parameter(0)
  %y.311 = bf16[] parameter(1)
  ROOT %add.1339 = bf16[] add(%x.311, %y.311)
}

%region_1338.28681 (reduce_sum.28678: f32[], reduce_sum.28679: f32[]) -> f32[] {
  %reduce_sum.28678 = f32[] parameter(0)
  %reduce_sum.28679 = f32[] parameter(1)
  ROOT %reduce_sum.28680 = f32[] add(%reduce_sum.28678, %reduce_sum.28679)
}

%region_1338.28681.clone (reduce_sum.2664: f32[], reduce_sum.2665: f32[]) -> f32[] {
  %reduce_sum.2664 = f32[] parameter(0)
  %reduce_sum.2665 = f32[] parameter(1)
  ROOT %reduce_sum.2666 = f32[] add(%reduce_sum.2664, %reduce_sum.2665)
}

%region_1339.28692 (reduce_sum.28689: f32[], reduce_sum.28690: f32[]) -> f32[] {
  %reduce_sum.28689 = f32[] parameter(0)
  %reduce_sum.28690 = f32[] parameter(1)
  ROOT %reduce_sum.28691 = f32[] add(%reduce_sum.28689, %reduce_sum.28690)
}

%region_1339.28692.clone (reduce_sum.2670: f32[], reduce_sum.2672: f32[]) -> f32[] {
  %reduce_sum.2670 = f32[] parameter(0)
  %reduce_sum.2672 = f32[] parameter(1)
  ROOT %reduce_sum.2673 = f32[] add(%reduce_sum.2670, %reduce_sum.2672)
}

%region_1340.28703 (reduce_sum.28700: f32[], reduce_sum.28701: f32[]) -> f32[] {
  %reduce_sum.28700 = f32[] parameter(0)
  %reduce_sum.28701 = f32[] parameter(1)
  ROOT %reduce_sum.28702 = f32[] add(%reduce_sum.28700, %reduce_sum.28701)
}

%region_1340.28703.clone (reduce_sum.2674: f32[], reduce_sum.2675: f32[]) -> f32[] {
  %reduce_sum.2674 = f32[] parameter(0)
  %reduce_sum.2675 = f32[] parameter(1)
  ROOT %reduce_sum.2676 = f32[] add(%reduce_sum.2674, %reduce_sum.2675)
}

%region_1341.28714 (reduce_sum.28711: f32[], reduce_sum.28712: f32[]) -> f32[] {
  %reduce_sum.28711 = f32[] parameter(0)
  %reduce_sum.28712 = f32[] parameter(1)
  ROOT %reduce_sum.28713 = f32[] add(%reduce_sum.28711, %reduce_sum.28712)
}

%region_1341.28714.clone (reduce_sum.2677: f32[], reduce_sum.2678: f32[]) -> f32[] {
  %reduce_sum.2677 = f32[] parameter(0)
  %reduce_sum.2678 = f32[] parameter(1)
  ROOT %reduce_sum.2679 = f32[] add(%reduce_sum.2677, %reduce_sum.2678)
}

%region_1342.28722 (reduce_sum.28719: bf16[], reduce_sum.28720: bf16[]) -> bf16[] {
  %reduce_sum.28719 = bf16[] parameter(0)
  %reduce_sum.28720 = bf16[] parameter(1)
  ROOT %reduce_sum.28721 = bf16[] add(%reduce_sum.28719, %reduce_sum.28720)
}

%region_1342.28722.clone (reduce_sum.2680: bf16[], reduce_sum.2681: bf16[]) -> bf16[] {
  %reduce_sum.2680 = bf16[] parameter(0)
  %reduce_sum.2681 = bf16[] parameter(1)
  ROOT %reduce_sum.2682 = bf16[] add(%reduce_sum.2680, %reduce_sum.2681)
}

%region_1343.28729 (reduce_sum.28726: f32[], reduce_sum.28727: f32[]) -> f32[] {
  %reduce_sum.28726 = f32[] parameter(0)
  %reduce_sum.28727 = f32[] parameter(1)
  ROOT %reduce_sum.28728 = f32[] add(%reduce_sum.28726, %reduce_sum.28727)
}

%region_1344.28737 (reduce_sum.28734: bf16[], reduce_sum.28735: bf16[]) -> bf16[] {
  %reduce_sum.28734 = bf16[] parameter(0)
  %reduce_sum.28735 = bf16[] parameter(1)
  ROOT %reduce_sum.28736 = bf16[] add(%reduce_sum.28734, %reduce_sum.28735)
}

%region_1344.28737.clone (reduce_sum.2683: bf16[], reduce_sum.2684: bf16[]) -> bf16[] {
  %reduce_sum.2683 = bf16[] parameter(0)
  %reduce_sum.2684 = bf16[] parameter(1)
  ROOT %reduce_sum.2685 = bf16[] add(%reduce_sum.2683, %reduce_sum.2684)
}

%region_1345.28744 (reduce_sum.28741: f32[], reduce_sum.28742: f32[]) -> f32[] {
  %reduce_sum.28741 = f32[] parameter(0)
  %reduce_sum.28742 = f32[] parameter(1)
  ROOT %reduce_sum.28743 = f32[] add(%reduce_sum.28741, %reduce_sum.28742)
}

%add.156.clone (x.313: bf16[], y.313: bf16[]) -> bf16[] {
  %x.313 = bf16[] parameter(0)
  %y.313 = bf16[] parameter(1)
  ROOT %add.1341 = bf16[] add(%x.313, %y.313)
}

%region_1346.28755 (reduce_sum.28752: f32[], reduce_sum.337: f32[]) -> f32[] {
  %reduce_sum.28752 = f32[] parameter(0)
  %reduce_sum.337 = f32[] parameter(1)
  ROOT %reduce_sum.338 = f32[] add(%reduce_sum.28752, %reduce_sum.337)
}

%region_1346.28755.clone (reduce_sum.2686: f32[], reduce_sum.2690: f32[]) -> f32[] {
  %reduce_sum.2686 = f32[] parameter(0)
  %reduce_sum.2690 = f32[] parameter(1)
  ROOT %reduce_sum.2692 = f32[] add(%reduce_sum.2686, %reduce_sum.2690)
}

%add.157.clone (x.315: bf16[], y.315: bf16[]) -> bf16[] {
  %x.315 = bf16[] parameter(0)
  %y.315 = bf16[] parameter(1)
  ROOT %add.1343 = bf16[] add(%x.315, %y.315)
}

%region_1347.28766 (reduce_sum.339: f32[], reduce_sum.340: f32[]) -> f32[] {
  %reduce_sum.339 = f32[] parameter(0)
  %reduce_sum.340 = f32[] parameter(1)
  ROOT %reduce_sum.28765 = f32[] add(%reduce_sum.339, %reduce_sum.340)
}

%region_1347.28766.clone (reduce_sum.2693: f32[], reduce_sum.2694: f32[]) -> f32[] {
  %reduce_sum.2693 = f32[] parameter(0)
  %reduce_sum.2694 = f32[] parameter(1)
  ROOT %reduce_sum.2695 = f32[] add(%reduce_sum.2693, %reduce_sum.2694)
}

%add.158.clone (x.317: bf16[], y.317: bf16[]) -> bf16[] {
  %x.317 = bf16[] parameter(0)
  %y.317 = bf16[] parameter(1)
  ROOT %add.1345 = bf16[] add(%x.317, %y.317)
}

%region_1348.28777 (reduce_sum.28774: f32[], reduce_sum.28775: f32[]) -> f32[] {
  %reduce_sum.28774 = f32[] parameter(0)
  %reduce_sum.28775 = f32[] parameter(1)
  ROOT %reduce_sum.28776 = f32[] add(%reduce_sum.28774, %reduce_sum.28775)
}

%region_1348.28777.clone (reduce_sum.2702: f32[], reduce_sum.2703: f32[]) -> f32[] {
  %reduce_sum.2702 = f32[] parameter(0)
  %reduce_sum.2703 = f32[] parameter(1)
  ROOT %reduce_sum.2704 = f32[] add(%reduce_sum.2702, %reduce_sum.2703)
}

%add.159.clone (x.319: bf16[], y.319: bf16[]) -> bf16[] {
  %x.319 = bf16[] parameter(0)
  %y.319 = bf16[] parameter(1)
  ROOT %add.1347 = bf16[] add(%x.319, %y.319)
}

%region_1349.28788 (reduce_sum.28785: f32[], reduce_sum.28786: f32[]) -> f32[] {
  %reduce_sum.28785 = f32[] parameter(0)
  %reduce_sum.28786 = f32[] parameter(1)
  ROOT %reduce_sum.28787 = f32[] add(%reduce_sum.28785, %reduce_sum.28786)
}

%region_1349.28788.clone (reduce_sum.2705: f32[], reduce_sum.2706: f32[]) -> f32[] {
  %reduce_sum.2705 = f32[] parameter(0)
  %reduce_sum.2706 = f32[] parameter(1)
  ROOT %reduce_sum.2710 = f32[] add(%reduce_sum.2705, %reduce_sum.2706)
}

%add.160.clone (x.321: bf16[], y.321: bf16[]) -> bf16[] {
  %x.321 = bf16[] parameter(0)
  %y.321 = bf16[] parameter(1)
  ROOT %add.1349 = bf16[] add(%x.321, %y.321)
}

%region_1350.28798 (reduce_sum.28795: f32[], reduce_sum.28796: f32[]) -> f32[] {
  %reduce_sum.28795 = f32[] parameter(0)
  %reduce_sum.28796 = f32[] parameter(1)
  ROOT %reduce_sum.28797 = f32[] add(%reduce_sum.28795, %reduce_sum.28796)
}

%region_1350.28798.clone (reduce_sum.2712: f32[], reduce_sum.2713: f32[]) -> f32[] {
  %reduce_sum.2712 = f32[] parameter(0)
  %reduce_sum.2713 = f32[] parameter(1)
  ROOT %reduce_sum.2714 = f32[] add(%reduce_sum.2712, %reduce_sum.2713)
}

%region_1351.28812 (reduce_sum.28809: f32[], reduce_sum.28810: f32[]) -> f32[] {
  %reduce_sum.28809 = f32[] parameter(0)
  %reduce_sum.28810 = f32[] parameter(1)
  ROOT %reduce_sum.28811 = f32[] add(%reduce_sum.28809, %reduce_sum.28810)
}

%add.161.clone (x.323: bf16[], y.323: bf16[]) -> bf16[] {
  %x.323 = bf16[] parameter(0)
  %y.323 = bf16[] parameter(1)
  ROOT %add.1351 = bf16[] add(%x.323, %y.323)
}

%region_1352.28833 (reduce_sum.341: f32[], reduce_sum.342: f32[]) -> f32[] {
  %reduce_sum.341 = f32[] parameter(0)
  %reduce_sum.342 = f32[] parameter(1)
  ROOT %reduce_sum.28832 = f32[] add(%reduce_sum.341, %reduce_sum.342)
}

%region_1352.28833.clone (reduce_sum.2715: f32[], reduce_sum.2716: f32[]) -> f32[] {
  %reduce_sum.2715 = f32[] parameter(0)
  %reduce_sum.2716 = f32[] parameter(1)
  ROOT %reduce_sum.2717 = f32[] add(%reduce_sum.2715, %reduce_sum.2716)
}

%region_1353.36677 (reduce_sum.36674: f32[], reduce_sum.36675: f32[]) -> f32[] {
  %reduce_sum.36674 = f32[] parameter(0)
  %reduce_sum.36675 = f32[] parameter(1)
  ROOT %reduce_sum.36676 = f32[] add(%reduce_sum.36674, %reduce_sum.36675)
}

%region_1354.36685 (reduce_sum.36682: f32[], reduce_sum.36683: f32[]) -> f32[] {
  %reduce_sum.36682 = f32[] parameter(0)
  %reduce_sum.36683 = f32[] parameter(1)
  ROOT %reduce_sum.36684 = f32[] add(%reduce_sum.36682, %reduce_sum.36683)
}

%region_1354.36685.clone (reduce_sum.2718: f32[], reduce_sum.2719: f32[]) -> f32[] {
  %reduce_sum.2718 = f32[] parameter(0)
  %reduce_sum.2719 = f32[] parameter(1)
  ROOT %reduce_sum.2720 = f32[] add(%reduce_sum.2718, %reduce_sum.2719)
}

%region_1355.36694 (reduce_sum.36691: f32[], reduce_sum.36692: f32[]) -> f32[] {
  %reduce_sum.36691 = f32[] parameter(0)
  %reduce_sum.36692 = f32[] parameter(1)
  ROOT %reduce_sum.36693 = f32[] add(%reduce_sum.36691, %reduce_sum.36692)
}

%region_1355.36694.clone (reduce_sum.2721: f32[], reduce_sum.2722: f32[]) -> f32[] {
  %reduce_sum.2721 = f32[] parameter(0)
  %reduce_sum.2722 = f32[] parameter(1)
  ROOT %reduce_sum.2723 = f32[] add(%reduce_sum.2721, %reduce_sum.2722)
}

%region_1356.36703 (reduce_sum.36700: f32[], reduce_sum.36701: f32[]) -> f32[] {
  %reduce_sum.36700 = f32[] parameter(0)
  %reduce_sum.36701 = f32[] parameter(1)
  ROOT %reduce_sum.36702 = f32[] add(%reduce_sum.36700, %reduce_sum.36701)
}

%region_1356.36703.clone (reduce_sum.2724: f32[], reduce_sum.2725: f32[]) -> f32[] {
  %reduce_sum.2724 = f32[] parameter(0)
  %reduce_sum.2725 = f32[] parameter(1)
  ROOT %reduce_sum.2726 = f32[] add(%reduce_sum.2724, %reduce_sum.2725)
}

%region_1357.36712 (reduce_sum.36709: f32[], reduce_sum.36710: f32[]) -> f32[] {
  %reduce_sum.36709 = f32[] parameter(0)
  %reduce_sum.36710 = f32[] parameter(1)
  ROOT %reduce_sum.36711 = f32[] add(%reduce_sum.36709, %reduce_sum.36710)
}

%region_1357.36712.clone (reduce_sum.2727: f32[], reduce_sum.2728: f32[]) -> f32[] {
  %reduce_sum.2727 = f32[] parameter(0)
  %reduce_sum.2728 = f32[] parameter(1)
  ROOT %reduce_sum.2729 = f32[] add(%reduce_sum.2727, %reduce_sum.2728)
}

%region_1358.36721 (reduce_sum.36718: f32[], reduce_sum.36719: f32[]) -> f32[] {
  %reduce_sum.36718 = f32[] parameter(0)
  %reduce_sum.36719 = f32[] parameter(1)
  ROOT %reduce_sum.36720 = f32[] add(%reduce_sum.36718, %reduce_sum.36719)
}

%region_1359.36730 (reduce_sum.36727: f32[], reduce_sum.36728: f32[]) -> f32[] {
  %reduce_sum.36727 = f32[] parameter(0)
  %reduce_sum.36728 = f32[] parameter(1)
  ROOT %reduce_sum.36729 = f32[] add(%reduce_sum.36727, %reduce_sum.36728)
}

%region_1360.36739 (reduce_sum.36736: f32[], reduce_sum.36737: f32[]) -> f32[] {
  %reduce_sum.36736 = f32[] parameter(0)
  %reduce_sum.36737 = f32[] parameter(1)
  ROOT %reduce_sum.36738 = f32[] add(%reduce_sum.36736, %reduce_sum.36737)
}

%region_1360.36739.clone (reduce_sum.2730: f32[], reduce_sum.2731: f32[]) -> f32[] {
  %reduce_sum.2730 = f32[] parameter(0)
  %reduce_sum.2731 = f32[] parameter(1)
  ROOT %reduce_sum.2732 = f32[] add(%reduce_sum.2730, %reduce_sum.2731)
}

%region_1361.36748 (reduce_sum.36745: f32[], reduce_sum.36746: f32[]) -> f32[] {
  %reduce_sum.36745 = f32[] parameter(0)
  %reduce_sum.36746 = f32[] parameter(1)
  ROOT %reduce_sum.36747 = f32[] add(%reduce_sum.36745, %reduce_sum.36746)
}

%region_1361.36748.clone (reduce_sum.2733: f32[], reduce_sum.2734: f32[]) -> f32[] {
  %reduce_sum.2733 = f32[] parameter(0)
  %reduce_sum.2734 = f32[] parameter(1)
  ROOT %reduce_sum.2738 = f32[] add(%reduce_sum.2733, %reduce_sum.2734)
}

%region_1362.36757 (reduce_sum.36754: f32[], reduce_sum.36755: f32[]) -> f32[] {
  %reduce_sum.36754 = f32[] parameter(0)
  %reduce_sum.36755 = f32[] parameter(1)
  ROOT %reduce_sum.36756 = f32[] add(%reduce_sum.36754, %reduce_sum.36755)
}

%region_1362.36757.clone (reduce_sum.2740: f32[], reduce_sum.2741: f32[]) -> f32[] {
  %reduce_sum.2740 = f32[] parameter(0)
  %reduce_sum.2741 = f32[] parameter(1)
  ROOT %reduce_sum.2742 = f32[] add(%reduce_sum.2740, %reduce_sum.2741)
}

%region_1363.36766 (reduce_sum.36763: f32[], reduce_sum.36764: f32[]) -> f32[] {
  %reduce_sum.36763 = f32[] parameter(0)
  %reduce_sum.36764 = f32[] parameter(1)
  ROOT %reduce_sum.36765 = f32[] add(%reduce_sum.36763, %reduce_sum.36764)
}

%region_1363.36766.clone (reduce_sum.2743: f32[], reduce_sum.2744: f32[]) -> f32[] {
  %reduce_sum.2743 = f32[] parameter(0)
  %reduce_sum.2744 = f32[] parameter(1)
  ROOT %reduce_sum.2745 = f32[] add(%reduce_sum.2743, %reduce_sum.2744)
}

%region_1364.36775 (reduce_sum.36772: f32[], reduce_sum.36773: f32[]) -> f32[] {
  %reduce_sum.36772 = f32[] parameter(0)
  %reduce_sum.36773 = f32[] parameter(1)
  ROOT %reduce_sum.36774 = f32[] add(%reduce_sum.36772, %reduce_sum.36773)
}

%region_1364.36775.clone (reduce_sum.2746: f32[], reduce_sum.2747: f32[]) -> f32[] {
  %reduce_sum.2746 = f32[] parameter(0)
  %reduce_sum.2747 = f32[] parameter(1)
  ROOT %reduce_sum.2748 = f32[] add(%reduce_sum.2746, %reduce_sum.2747)
}

%region_1365.36784 (reduce_sum.36781: f32[], reduce_sum.36782: f32[]) -> f32[] {
  %reduce_sum.36781 = f32[] parameter(0)
  %reduce_sum.36782 = f32[] parameter(1)
  ROOT %reduce_sum.36783 = f32[] add(%reduce_sum.36781, %reduce_sum.36782)
}

%region_1365.36784.clone (reduce_sum.2752: f32[], reduce_sum.2754: f32[]) -> f32[] {
  %reduce_sum.2752 = f32[] parameter(0)
  %reduce_sum.2754 = f32[] parameter(1)
  ROOT %reduce_sum.2755 = f32[] add(%reduce_sum.2752, %reduce_sum.2754)
}

%region_1366.36793 (reduce_sum.36790: f32[], reduce_sum.36791: f32[]) -> f32[] {
  %reduce_sum.36790 = f32[] parameter(0)
  %reduce_sum.36791 = f32[] parameter(1)
  ROOT %reduce_sum.36792 = f32[] add(%reduce_sum.36790, %reduce_sum.36791)
}

%region_1366.36793.clone (reduce_sum.2756: f32[], reduce_sum.2757: f32[]) -> f32[] {
  %reduce_sum.2756 = f32[] parameter(0)
  %reduce_sum.2757 = f32[] parameter(1)
  ROOT %reduce_sum.2758 = f32[] add(%reduce_sum.2756, %reduce_sum.2757)
}

%region_1367.36802 (reduce_sum.36799: f32[], reduce_sum.36800: f32[]) -> f32[] {
  %reduce_sum.36799 = f32[] parameter(0)
  %reduce_sum.36800 = f32[] parameter(1)
  ROOT %reduce_sum.36801 = f32[] add(%reduce_sum.36799, %reduce_sum.36800)
}

%region_1367.36802.clone (reduce_sum.2759: f32[], reduce_sum.2760: f32[]) -> f32[] {
  %reduce_sum.2759 = f32[] parameter(0)
  %reduce_sum.2760 = f32[] parameter(1)
  ROOT %reduce_sum.2761 = f32[] add(%reduce_sum.2759, %reduce_sum.2760)
}

%region_1368.36811 (reduce_sum.36808: f32[], reduce_sum.36809: f32[]) -> f32[] {
  %reduce_sum.36808 = f32[] parameter(0)
  %reduce_sum.36809 = f32[] parameter(1)
  ROOT %reduce_sum.36810 = f32[] add(%reduce_sum.36808, %reduce_sum.36809)
}

%region_1369.36820 (reduce_sum.36817: f32[], reduce_sum.36818: f32[]) -> f32[] {
  %reduce_sum.36817 = f32[] parameter(0)
  %reduce_sum.36818 = f32[] parameter(1)
  ROOT %reduce_sum.36819 = f32[] add(%reduce_sum.36817, %reduce_sum.36818)
}

%region_1370.36829 (reduce_sum.36826: f32[], reduce_sum.36827: f32[]) -> f32[] {
  %reduce_sum.36826 = f32[] parameter(0)
  %reduce_sum.36827 = f32[] parameter(1)
  ROOT %reduce_sum.36828 = f32[] add(%reduce_sum.36826, %reduce_sum.36827)
}

%region_1370.36829.clone (reduce_sum.2762: f32[], reduce_sum.2763: f32[]) -> f32[] {
  %reduce_sum.2762 = f32[] parameter(0)
  %reduce_sum.2763 = f32[] parameter(1)
  ROOT %reduce_sum.2764 = f32[] add(%reduce_sum.2762, %reduce_sum.2763)
}

%region_1371.36838 (reduce_sum.36835: f32[], reduce_sum.36836: f32[]) -> f32[] {
  %reduce_sum.36835 = f32[] parameter(0)
  %reduce_sum.36836 = f32[] parameter(1)
  ROOT %reduce_sum.36837 = f32[] add(%reduce_sum.36835, %reduce_sum.36836)
}

%region_1371.36838.clone (reduce_sum.2765: f32[], reduce_sum.2766: f32[]) -> f32[] {
  %reduce_sum.2765 = f32[] parameter(0)
  %reduce_sum.2766 = f32[] parameter(1)
  ROOT %reduce_sum.2767 = f32[] add(%reduce_sum.2765, %reduce_sum.2766)
}

%region_1372.36847 (reduce_sum.36844: f32[], reduce_sum.36845: f32[]) -> f32[] {
  %reduce_sum.36844 = f32[] parameter(0)
  %reduce_sum.36845 = f32[] parameter(1)
  ROOT %reduce_sum.36846 = f32[] add(%reduce_sum.36844, %reduce_sum.36845)
}

%region_1372.36847.clone (reduce_sum.2768: f32[], reduce_sum.2769: f32[]) -> f32[] {
  %reduce_sum.2768 = f32[] parameter(0)
  %reduce_sum.2769 = f32[] parameter(1)
  ROOT %reduce_sum.2770 = f32[] add(%reduce_sum.2768, %reduce_sum.2769)
}

%region_1373.36856 (reduce_sum.36853: f32[], reduce_sum.36854: f32[]) -> f32[] {
  %reduce_sum.36853 = f32[] parameter(0)
  %reduce_sum.36854 = f32[] parameter(1)
  ROOT %reduce_sum.36855 = f32[] add(%reduce_sum.36853, %reduce_sum.36854)
}

%region_1373.36856.clone (reduce_sum.2771: f32[], reduce_sum.2772: f32[]) -> f32[] {
  %reduce_sum.2771 = f32[] parameter(0)
  %reduce_sum.2772 = f32[] parameter(1)
  ROOT %reduce_sum.2773 = f32[] add(%reduce_sum.2771, %reduce_sum.2772)
}

%region_1374.36865 (reduce_sum.36862: f32[], reduce_sum.36863: f32[]) -> f32[] {
  %reduce_sum.36862 = f32[] parameter(0)
  %reduce_sum.36863 = f32[] parameter(1)
  ROOT %reduce_sum.36864 = f32[] add(%reduce_sum.36862, %reduce_sum.36863)
}

%region_1374.36865.clone (reduce_sum.2774: f32[], reduce_sum.2775: f32[]) -> f32[] {
  %reduce_sum.2774 = f32[] parameter(0)
  %reduce_sum.2775 = f32[] parameter(1)
  ROOT %reduce_sum.2776 = f32[] add(%reduce_sum.2774, %reduce_sum.2775)
}

%region_1375.36874 (reduce_sum.36871: f32[], reduce_sum.36872: f32[]) -> f32[] {
  %reduce_sum.36871 = f32[] parameter(0)
  %reduce_sum.36872 = f32[] parameter(1)
  ROOT %reduce_sum.36873 = f32[] add(%reduce_sum.36871, %reduce_sum.36872)
}

%region_1375.36874.clone (reduce_sum.2777: f32[], reduce_sum.2778: f32[]) -> f32[] {
  %reduce_sum.2777 = f32[] parameter(0)
  %reduce_sum.2778 = f32[] parameter(1)
  ROOT %reduce_sum.2779 = f32[] add(%reduce_sum.2777, %reduce_sum.2778)
}

%region_1376.36883 (reduce_sum.36880: f32[], reduce_sum.36881: f32[]) -> f32[] {
  %reduce_sum.36880 = f32[] parameter(0)
  %reduce_sum.36881 = f32[] parameter(1)
  ROOT %reduce_sum.36882 = f32[] add(%reduce_sum.36880, %reduce_sum.36881)
}

%region_1376.36883.clone (reduce_sum.2780: f32[], reduce_sum.2781: f32[]) -> f32[] {
  %reduce_sum.2780 = f32[] parameter(0)
  %reduce_sum.2781 = f32[] parameter(1)
  ROOT %reduce_sum.2782 = f32[] add(%reduce_sum.2780, %reduce_sum.2781)
}

%region_1377.36892 (reduce_sum.36889: f32[], reduce_sum.36890: f32[]) -> f32[] {
  %reduce_sum.36889 = f32[] parameter(0)
  %reduce_sum.36890 = f32[] parameter(1)
  ROOT %reduce_sum.36891 = f32[] add(%reduce_sum.36889, %reduce_sum.36890)
}

%region_1377.36892.clone (reduce_sum.2783: f32[], reduce_sum.2784: f32[]) -> f32[] {
  %reduce_sum.2783 = f32[] parameter(0)
  %reduce_sum.2784 = f32[] parameter(1)
  ROOT %reduce_sum.2785 = f32[] add(%reduce_sum.2783, %reduce_sum.2784)
}

%region_1378.36901 (reduce_sum.36898: f32[], reduce_sum.36899: f32[]) -> f32[] {
  %reduce_sum.36898 = f32[] parameter(0)
  %reduce_sum.36899 = f32[] parameter(1)
  ROOT %reduce_sum.36900 = f32[] add(%reduce_sum.36898, %reduce_sum.36899)
}

%region_1379.36910 (reduce_sum.36907: f32[], reduce_sum.36908: f32[]) -> f32[] {
  %reduce_sum.36907 = f32[] parameter(0)
  %reduce_sum.36908 = f32[] parameter(1)
  ROOT %reduce_sum.36909 = f32[] add(%reduce_sum.36907, %reduce_sum.36908)
}

%region_1380.36919 (reduce_sum.36916: f32[], reduce_sum.36917: f32[]) -> f32[] {
  %reduce_sum.36916 = f32[] parameter(0)
  %reduce_sum.36917 = f32[] parameter(1)
  ROOT %reduce_sum.36918 = f32[] add(%reduce_sum.36916, %reduce_sum.36917)
}

%region_1380.36919.clone (reduce_sum.2786: f32[], reduce_sum.2787: f32[]) -> f32[] {
  %reduce_sum.2786 = f32[] parameter(0)
  %reduce_sum.2787 = f32[] parameter(1)
  ROOT %reduce_sum.2788 = f32[] add(%reduce_sum.2786, %reduce_sum.2787)
}

%region_1381.36928 (reduce_sum.36925: f32[], reduce_sum.36926: f32[]) -> f32[] {
  %reduce_sum.36925 = f32[] parameter(0)
  %reduce_sum.36926 = f32[] parameter(1)
  ROOT %reduce_sum.36927 = f32[] add(%reduce_sum.36925, %reduce_sum.36926)
}

%region_1381.36928.clone (reduce_sum.2789: f32[], reduce_sum.2790: f32[]) -> f32[] {
  %reduce_sum.2789 = f32[] parameter(0)
  %reduce_sum.2790 = f32[] parameter(1)
  ROOT %reduce_sum.2791 = f32[] add(%reduce_sum.2789, %reduce_sum.2790)
}

%region_1382.36937 (reduce_sum.36934: f32[], reduce_sum.36935: f32[]) -> f32[] {
  %reduce_sum.36934 = f32[] parameter(0)
  %reduce_sum.36935 = f32[] parameter(1)
  ROOT %reduce_sum.36936 = f32[] add(%reduce_sum.36934, %reduce_sum.36935)
}

%region_1382.36937.clone (reduce_sum.2792: f32[], reduce_sum.2793: f32[]) -> f32[] {
  %reduce_sum.2792 = f32[] parameter(0)
  %reduce_sum.2793 = f32[] parameter(1)
  ROOT %reduce_sum.2794 = f32[] add(%reduce_sum.2792, %reduce_sum.2793)
}

%region_1383.36946 (reduce_sum.36943: f32[], reduce_sum.36944: f32[]) -> f32[] {
  %reduce_sum.36943 = f32[] parameter(0)
  %reduce_sum.36944 = f32[] parameter(1)
  ROOT %reduce_sum.36945 = f32[] add(%reduce_sum.36943, %reduce_sum.36944)
}

%region_1383.36946.clone (reduce_sum.2795: f32[], reduce_sum.2796: f32[]) -> f32[] {
  %reduce_sum.2795 = f32[] parameter(0)
  %reduce_sum.2796 = f32[] parameter(1)
  ROOT %reduce_sum.2797 = f32[] add(%reduce_sum.2795, %reduce_sum.2796)
}

%region_1384.36955 (reduce_sum.36952: f32[], reduce_sum.36953: f32[]) -> f32[] {
  %reduce_sum.36952 = f32[] parameter(0)
  %reduce_sum.36953 = f32[] parameter(1)
  ROOT %reduce_sum.36954 = f32[] add(%reduce_sum.36952, %reduce_sum.36953)
}

%region_1384.36955.clone (reduce_sum.2798: f32[], reduce_sum.2799: f32[]) -> f32[] {
  %reduce_sum.2798 = f32[] parameter(0)
  %reduce_sum.2799 = f32[] parameter(1)
  ROOT %reduce_sum.2800 = f32[] add(%reduce_sum.2798, %reduce_sum.2799)
}

%region_1385.36964 (reduce_sum.36961: f32[], reduce_sum.36962: f32[]) -> f32[] {
  %reduce_sum.36961 = f32[] parameter(0)
  %reduce_sum.36962 = f32[] parameter(1)
  ROOT %reduce_sum.36963 = f32[] add(%reduce_sum.36961, %reduce_sum.36962)
}

%region_1385.36964.clone (reduce_sum.2801: f32[], reduce_sum.2802: f32[]) -> f32[] {
  %reduce_sum.2801 = f32[] parameter(0)
  %reduce_sum.2802 = f32[] parameter(1)
  ROOT %reduce_sum.2803 = f32[] add(%reduce_sum.2801, %reduce_sum.2802)
}

%region_1386.36973 (reduce_sum.36970: f32[], reduce_sum.36971: f32[]) -> f32[] {
  %reduce_sum.36970 = f32[] parameter(0)
  %reduce_sum.36971 = f32[] parameter(1)
  ROOT %reduce_sum.36972 = f32[] add(%reduce_sum.36970, %reduce_sum.36971)
}

%region_1386.36973.clone (reduce_sum.2804: f32[], reduce_sum.2805: f32[]) -> f32[] {
  %reduce_sum.2804 = f32[] parameter(0)
  %reduce_sum.2805 = f32[] parameter(1)
  ROOT %reduce_sum.2806 = f32[] add(%reduce_sum.2804, %reduce_sum.2805)
}

%region_1387.36982 (reduce_sum.36979: f32[], reduce_sum.36980: f32[]) -> f32[] {
  %reduce_sum.36979 = f32[] parameter(0)
  %reduce_sum.36980 = f32[] parameter(1)
  ROOT %reduce_sum.36981 = f32[] add(%reduce_sum.36979, %reduce_sum.36980)
}

%region_1387.36982.clone (reduce_sum.2807: f32[], reduce_sum.2808: f32[]) -> f32[] {
  %reduce_sum.2807 = f32[] parameter(0)
  %reduce_sum.2808 = f32[] parameter(1)
  ROOT %reduce_sum.2809 = f32[] add(%reduce_sum.2807, %reduce_sum.2808)
}

%region_1388.36991 (reduce_sum.36988: f32[], reduce_sum.36989: f32[]) -> f32[] {
  %reduce_sum.36988 = f32[] parameter(0)
  %reduce_sum.36989 = f32[] parameter(1)
  ROOT %reduce_sum.36990 = f32[] add(%reduce_sum.36988, %reduce_sum.36989)
}

%region_1389.37000 (reduce_sum.36997: f32[], reduce_sum.36998: f32[]) -> f32[] {
  %reduce_sum.36997 = f32[] parameter(0)
  %reduce_sum.36998 = f32[] parameter(1)
  ROOT %reduce_sum.36999 = f32[] add(%reduce_sum.36997, %reduce_sum.36998)
}

%region_1390.37009 (reduce_sum.37006: f32[], reduce_sum.37007: f32[]) -> f32[] {
  %reduce_sum.37006 = f32[] parameter(0)
  %reduce_sum.37007 = f32[] parameter(1)
  ROOT %reduce_sum.37008 = f32[] add(%reduce_sum.37006, %reduce_sum.37007)
}

%region_1390.37009.clone (reduce_sum.2810: f32[], reduce_sum.2811: f32[]) -> f32[] {
  %reduce_sum.2810 = f32[] parameter(0)
  %reduce_sum.2811 = f32[] parameter(1)
  ROOT %reduce_sum.2812 = f32[] add(%reduce_sum.2810, %reduce_sum.2811)
}

%region_1391.37018 (reduce_sum.37015: f32[], reduce_sum.37016: f32[]) -> f32[] {
  %reduce_sum.37015 = f32[] parameter(0)
  %reduce_sum.37016 = f32[] parameter(1)
  ROOT %reduce_sum.37017 = f32[] add(%reduce_sum.37015, %reduce_sum.37016)
}

%region_1391.37018.clone (reduce_sum.2813: f32[], reduce_sum.2814: f32[]) -> f32[] {
  %reduce_sum.2813 = f32[] parameter(0)
  %reduce_sum.2814 = f32[] parameter(1)
  ROOT %reduce_sum.2815 = f32[] add(%reduce_sum.2813, %reduce_sum.2814)
}

%region_1392.37027 (reduce_sum.37024: f32[], reduce_sum.37025: f32[]) -> f32[] {
  %reduce_sum.37024 = f32[] parameter(0)
  %reduce_sum.37025 = f32[] parameter(1)
  ROOT %reduce_sum.37026 = f32[] add(%reduce_sum.37024, %reduce_sum.37025)
}

%region_1392.37027.clone (reduce_sum.2816: f32[], reduce_sum.2817: f32[]) -> f32[] {
  %reduce_sum.2816 = f32[] parameter(0)
  %reduce_sum.2817 = f32[] parameter(1)
  ROOT %reduce_sum.2818 = f32[] add(%reduce_sum.2816, %reduce_sum.2817)
}

%region_1393.37036 (reduce_sum.37033: f32[], reduce_sum.37034: f32[]) -> f32[] {
  %reduce_sum.37033 = f32[] parameter(0)
  %reduce_sum.37034 = f32[] parameter(1)
  ROOT %reduce_sum.37035 = f32[] add(%reduce_sum.37033, %reduce_sum.37034)
}

%region_1393.37036.clone (reduce_sum.2819: f32[], reduce_sum.2820: f32[]) -> f32[] {
  %reduce_sum.2819 = f32[] parameter(0)
  %reduce_sum.2820 = f32[] parameter(1)
  ROOT %reduce_sum.2821 = f32[] add(%reduce_sum.2819, %reduce_sum.2820)
}

%region_1394.37045 (reduce_sum.37042: f32[], reduce_sum.37043: f32[]) -> f32[] {
  %reduce_sum.37042 = f32[] parameter(0)
  %reduce_sum.37043 = f32[] parameter(1)
  ROOT %reduce_sum.37044 = f32[] add(%reduce_sum.37042, %reduce_sum.37043)
}

%region_1394.37045.clone (reduce_sum.2822: f32[], reduce_sum.2823: f32[]) -> f32[] {
  %reduce_sum.2822 = f32[] parameter(0)
  %reduce_sum.2823 = f32[] parameter(1)
  ROOT %reduce_sum.2824 = f32[] add(%reduce_sum.2822, %reduce_sum.2823)
}

%region_1395.37054 (reduce_sum.37051: f32[], reduce_sum.37052: f32[]) -> f32[] {
  %reduce_sum.37051 = f32[] parameter(0)
  %reduce_sum.37052 = f32[] parameter(1)
  ROOT %reduce_sum.37053 = f32[] add(%reduce_sum.37051, %reduce_sum.37052)
}

%region_1395.37054.clone (reduce_sum.2825: f32[], reduce_sum.2826: f32[]) -> f32[] {
  %reduce_sum.2825 = f32[] parameter(0)
  %reduce_sum.2826 = f32[] parameter(1)
  ROOT %reduce_sum.2827 = f32[] add(%reduce_sum.2825, %reduce_sum.2826)
}

%region_1396.37063 (reduce_sum.37060: f32[], reduce_sum.37061: f32[]) -> f32[] {
  %reduce_sum.37060 = f32[] parameter(0)
  %reduce_sum.37061 = f32[] parameter(1)
  ROOT %reduce_sum.37062 = f32[] add(%reduce_sum.37060, %reduce_sum.37061)
}

%region_1396.37063.clone (reduce_sum.2828: f32[], reduce_sum.2829: f32[]) -> f32[] {
  %reduce_sum.2828 = f32[] parameter(0)
  %reduce_sum.2829 = f32[] parameter(1)
  ROOT %reduce_sum.2830 = f32[] add(%reduce_sum.2828, %reduce_sum.2829)
}

%region_1397.37072 (reduce_sum.37069: f32[], reduce_sum.37070: f32[]) -> f32[] {
  %reduce_sum.37069 = f32[] parameter(0)
  %reduce_sum.37070 = f32[] parameter(1)
  ROOT %reduce_sum.37071 = f32[] add(%reduce_sum.37069, %reduce_sum.37070)
}

%region_1397.37072.clone (reduce_sum.2831: f32[], reduce_sum.2832: f32[]) -> f32[] {
  %reduce_sum.2831 = f32[] parameter(0)
  %reduce_sum.2832 = f32[] parameter(1)
  ROOT %reduce_sum.2833 = f32[] add(%reduce_sum.2831, %reduce_sum.2832)
}

%region_1398.37081 (reduce_sum.37078: f32[], reduce_sum.37079: f32[]) -> f32[] {
  %reduce_sum.37078 = f32[] parameter(0)
  %reduce_sum.37079 = f32[] parameter(1)
  ROOT %reduce_sum.37080 = f32[] add(%reduce_sum.37078, %reduce_sum.37079)
}

%region_1399.37090 (reduce_sum.37087: f32[], reduce_sum.37088: f32[]) -> f32[] {
  %reduce_sum.37087 = f32[] parameter(0)
  %reduce_sum.37088 = f32[] parameter(1)
  ROOT %reduce_sum.37089 = f32[] add(%reduce_sum.37087, %reduce_sum.37088)
}

%region_1400.37099 (reduce_sum.37096: f32[], reduce_sum.37097: f32[]) -> f32[] {
  %reduce_sum.37096 = f32[] parameter(0)
  %reduce_sum.37097 = f32[] parameter(1)
  ROOT %reduce_sum.37098 = f32[] add(%reduce_sum.37096, %reduce_sum.37097)
}

%region_1400.37099.clone (reduce_sum.2834: f32[], reduce_sum.2835: f32[]) -> f32[] {
  %reduce_sum.2834 = f32[] parameter(0)
  %reduce_sum.2835 = f32[] parameter(1)
  ROOT %reduce_sum.2836 = f32[] add(%reduce_sum.2834, %reduce_sum.2835)
}

%region_1401.37108 (reduce_sum.37105: f32[], reduce_sum.37106: f32[]) -> f32[] {
  %reduce_sum.37105 = f32[] parameter(0)
  %reduce_sum.37106 = f32[] parameter(1)
  ROOT %reduce_sum.37107 = f32[] add(%reduce_sum.37105, %reduce_sum.37106)
}

%region_1401.37108.clone (reduce_sum.2837: f32[], reduce_sum.2838: f32[]) -> f32[] {
  %reduce_sum.2837 = f32[] parameter(0)
  %reduce_sum.2838 = f32[] parameter(1)
  ROOT %reduce_sum.2839 = f32[] add(%reduce_sum.2837, %reduce_sum.2838)
}

%region_1402.37117 (reduce_sum.37114: f32[], reduce_sum.37115: f32[]) -> f32[] {
  %reduce_sum.37114 = f32[] parameter(0)
  %reduce_sum.37115 = f32[] parameter(1)
  ROOT %reduce_sum.37116 = f32[] add(%reduce_sum.37114, %reduce_sum.37115)
}

%region_1402.37117.clone (reduce_sum.2840: f32[], reduce_sum.2841: f32[]) -> f32[] {
  %reduce_sum.2840 = f32[] parameter(0)
  %reduce_sum.2841 = f32[] parameter(1)
  ROOT %reduce_sum.2842 = f32[] add(%reduce_sum.2840, %reduce_sum.2841)
}

%region_1403.37126 (reduce_sum.37123: f32[], reduce_sum.37124: f32[]) -> f32[] {
  %reduce_sum.37123 = f32[] parameter(0)
  %reduce_sum.37124 = f32[] parameter(1)
  ROOT %reduce_sum.37125 = f32[] add(%reduce_sum.37123, %reduce_sum.37124)
}

%region_1403.37126.clone (reduce_sum.2846: f32[], reduce_sum.2849: f32[]) -> f32[] {
  %reduce_sum.2846 = f32[] parameter(0)
  %reduce_sum.2849 = f32[] parameter(1)
  ROOT %reduce_sum.2850 = f32[] add(%reduce_sum.2846, %reduce_sum.2849)
}

%region_1404.37135 (reduce_sum.37132: f32[], reduce_sum.37133: f32[]) -> f32[] {
  %reduce_sum.37132 = f32[] parameter(0)
  %reduce_sum.37133 = f32[] parameter(1)
  ROOT %reduce_sum.37134 = f32[] add(%reduce_sum.37132, %reduce_sum.37133)
}

%region_1404.37135.clone (reduce_sum.2851: f32[], reduce_sum.2855: f32[]) -> f32[] {
  %reduce_sum.2851 = f32[] parameter(0)
  %reduce_sum.2855 = f32[] parameter(1)
  ROOT %reduce_sum.2858 = f32[] add(%reduce_sum.2851, %reduce_sum.2855)
}

%region_1405.37144 (reduce_sum.37141: f32[], reduce_sum.37142: f32[]) -> f32[] {
  %reduce_sum.37141 = f32[] parameter(0)
  %reduce_sum.37142 = f32[] parameter(1)
  ROOT %reduce_sum.37143 = f32[] add(%reduce_sum.37141, %reduce_sum.37142)
}

%region_1405.37144.clone (reduce_sum.2859: f32[], reduce_sum.2860: f32[]) -> f32[] {
  %reduce_sum.2859 = f32[] parameter(0)
  %reduce_sum.2860 = f32[] parameter(1)
  ROOT %reduce_sum.2861 = f32[] add(%reduce_sum.2859, %reduce_sum.2860)
}

%region_1406.37153 (reduce_sum.37150: f32[], reduce_sum.37151: f32[]) -> f32[] {
  %reduce_sum.37150 = f32[] parameter(0)
  %reduce_sum.37151 = f32[] parameter(1)
  ROOT %reduce_sum.37152 = f32[] add(%reduce_sum.37150, %reduce_sum.37151)
}

%region_1406.37153.clone (reduce_sum.2862: f32[], reduce_sum.2863: f32[]) -> f32[] {
  %reduce_sum.2862 = f32[] parameter(0)
  %reduce_sum.2863 = f32[] parameter(1)
  ROOT %reduce_sum.2864 = f32[] add(%reduce_sum.2862, %reduce_sum.2863)
}

%region_1407.37162 (reduce_sum.37159: f32[], reduce_sum.37160: f32[]) -> f32[] {
  %reduce_sum.37159 = f32[] parameter(0)
  %reduce_sum.37160 = f32[] parameter(1)
  ROOT %reduce_sum.37161 = f32[] add(%reduce_sum.37159, %reduce_sum.37160)
}

%region_1407.37162.clone (reduce_sum.2865: f32[], reduce_sum.2866: f32[]) -> f32[] {
  %reduce_sum.2865 = f32[] parameter(0)
  %reduce_sum.2866 = f32[] parameter(1)
  ROOT %reduce_sum.2870 = f32[] add(%reduce_sum.2865, %reduce_sum.2866)
}

%region_1408.37171 (reduce_sum.37168: f32[], reduce_sum.37169: f32[]) -> f32[] {
  %reduce_sum.37168 = f32[] parameter(0)
  %reduce_sum.37169 = f32[] parameter(1)
  ROOT %reduce_sum.37170 = f32[] add(%reduce_sum.37168, %reduce_sum.37169)
}

%region_1409.37180 (reduce_sum.37177: f32[], reduce_sum.37178: f32[]) -> f32[] {
  %reduce_sum.37177 = f32[] parameter(0)
  %reduce_sum.37178 = f32[] parameter(1)
  ROOT %reduce_sum.37179 = f32[] add(%reduce_sum.37177, %reduce_sum.37178)
}

%region_1410.37189 (reduce_sum.37186: f32[], reduce_sum.37187: f32[]) -> f32[] {
  %reduce_sum.37186 = f32[] parameter(0)
  %reduce_sum.37187 = f32[] parameter(1)
  ROOT %reduce_sum.37188 = f32[] add(%reduce_sum.37186, %reduce_sum.37187)
}

%region_1410.37189.clone (reduce_sum.2872: f32[], reduce_sum.2878: f32[]) -> f32[] {
  %reduce_sum.2872 = f32[] parameter(0)
  %reduce_sum.2878 = f32[] parameter(1)
  ROOT %reduce_sum.2880 = f32[] add(%reduce_sum.2872, %reduce_sum.2878)
}

%region_1411.37198 (reduce_sum.37195: f32[], reduce_sum.37196: f32[]) -> f32[] {
  %reduce_sum.37195 = f32[] parameter(0)
  %reduce_sum.37196 = f32[] parameter(1)
  ROOT %reduce_sum.37197 = f32[] add(%reduce_sum.37195, %reduce_sum.37196)
}

%region_1411.37198.clone (reduce_sum.2881: f32[], reduce_sum.2882: f32[]) -> f32[] {
  %reduce_sum.2881 = f32[] parameter(0)
  %reduce_sum.2882 = f32[] parameter(1)
  ROOT %reduce_sum.2883 = f32[] add(%reduce_sum.2881, %reduce_sum.2882)
}

%region_1412.37207 (reduce_sum.37204: f32[], reduce_sum.37205: f32[]) -> f32[] {
  %reduce_sum.37204 = f32[] parameter(0)
  %reduce_sum.37205 = f32[] parameter(1)
  ROOT %reduce_sum.37206 = f32[] add(%reduce_sum.37204, %reduce_sum.37205)
}

%region_1412.37207.clone (reduce_sum.2884: f32[], reduce_sum.2885: f32[]) -> f32[] {
  %reduce_sum.2884 = f32[] parameter(0)
  %reduce_sum.2885 = f32[] parameter(1)
  ROOT %reduce_sum.2886 = f32[] add(%reduce_sum.2884, %reduce_sum.2885)
}

%region_1413.37216 (reduce_sum.37213: f32[], reduce_sum.37214: f32[]) -> f32[] {
  %reduce_sum.37213 = f32[] parameter(0)
  %reduce_sum.37214 = f32[] parameter(1)
  ROOT %reduce_sum.37215 = f32[] add(%reduce_sum.37213, %reduce_sum.37214)
}

%region_1413.37216.clone (reduce_sum.2887: f32[], reduce_sum.2888: f32[]) -> f32[] {
  %reduce_sum.2887 = f32[] parameter(0)
  %reduce_sum.2888 = f32[] parameter(1)
  ROOT %reduce_sum.2889 = f32[] add(%reduce_sum.2887, %reduce_sum.2888)
}

%region_1414.37225 (reduce_sum.37222: f32[], reduce_sum.37223: f32[]) -> f32[] {
  %reduce_sum.37222 = f32[] parameter(0)
  %reduce_sum.37223 = f32[] parameter(1)
  ROOT %reduce_sum.37224 = f32[] add(%reduce_sum.37222, %reduce_sum.37223)
}

%region_1414.37225.clone (reduce_sum.2890: f32[], reduce_sum.2891: f32[]) -> f32[] {
  %reduce_sum.2890 = f32[] parameter(0)
  %reduce_sum.2891 = f32[] parameter(1)
  ROOT %reduce_sum.2892 = f32[] add(%reduce_sum.2890, %reduce_sum.2891)
}

%region_1415.37234 (reduce_sum.37231: f32[], reduce_sum.37232: f32[]) -> f32[] {
  %reduce_sum.37231 = f32[] parameter(0)
  %reduce_sum.37232 = f32[] parameter(1)
  ROOT %reduce_sum.37233 = f32[] add(%reduce_sum.37231, %reduce_sum.37232)
}

%region_1415.37234.clone (reduce_sum.2893: f32[], reduce_sum.2894: f32[]) -> f32[] {
  %reduce_sum.2893 = f32[] parameter(0)
  %reduce_sum.2894 = f32[] parameter(1)
  ROOT %reduce_sum.2898 = f32[] add(%reduce_sum.2893, %reduce_sum.2894)
}

%region_1416.37243 (reduce_sum.37240: f32[], reduce_sum.37241: f32[]) -> f32[] {
  %reduce_sum.37240 = f32[] parameter(0)
  %reduce_sum.37241 = f32[] parameter(1)
  ROOT %reduce_sum.37242 = f32[] add(%reduce_sum.37240, %reduce_sum.37241)
}

%region_1416.37243.clone (reduce_sum.2900: f32[], reduce_sum.2901: f32[]) -> f32[] {
  %reduce_sum.2900 = f32[] parameter(0)
  %reduce_sum.2901 = f32[] parameter(1)
  ROOT %reduce_sum.2902 = f32[] add(%reduce_sum.2900, %reduce_sum.2901)
}

%region_1417.37252 (reduce_sum.37249: f32[], reduce_sum.37250: f32[]) -> f32[] {
  %reduce_sum.37249 = f32[] parameter(0)
  %reduce_sum.37250 = f32[] parameter(1)
  ROOT %reduce_sum.37251 = f32[] add(%reduce_sum.37249, %reduce_sum.37250)
}

%region_1417.37252.clone (reduce_sum.2903: f32[], reduce_sum.2904: f32[]) -> f32[] {
  %reduce_sum.2903 = f32[] parameter(0)
  %reduce_sum.2904 = f32[] parameter(1)
  ROOT %reduce_sum.2905 = f32[] add(%reduce_sum.2903, %reduce_sum.2904)
}

%region_1418.37261 (reduce_sum.37258: f32[], reduce_sum.37259: f32[]) -> f32[] {
  %reduce_sum.37258 = f32[] parameter(0)
  %reduce_sum.37259 = f32[] parameter(1)
  ROOT %reduce_sum.37260 = f32[] add(%reduce_sum.37258, %reduce_sum.37259)
}

%region_1419.37270 (reduce_sum.37267: f32[], reduce_sum.37268: f32[]) -> f32[] {
  %reduce_sum.37267 = f32[] parameter(0)
  %reduce_sum.37268 = f32[] parameter(1)
  ROOT %reduce_sum.37269 = f32[] add(%reduce_sum.37267, %reduce_sum.37268)
}

%region_1420.37279 (reduce_sum.37276: f32[], reduce_sum.37277: f32[]) -> f32[] {
  %reduce_sum.37276 = f32[] parameter(0)
  %reduce_sum.37277 = f32[] parameter(1)
  ROOT %reduce_sum.37278 = f32[] add(%reduce_sum.37276, %reduce_sum.37277)
}

%region_1420.37279.clone (reduce_sum.2906: f32[], reduce_sum.2907: f32[]) -> f32[] {
  %reduce_sum.2906 = f32[] parameter(0)
  %reduce_sum.2907 = f32[] parameter(1)
  ROOT %reduce_sum.2908 = f32[] add(%reduce_sum.2906, %reduce_sum.2907)
}

%region_1421.37288 (reduce_sum.37285: f32[], reduce_sum.37286: f32[]) -> f32[] {
  %reduce_sum.37285 = f32[] parameter(0)
  %reduce_sum.37286 = f32[] parameter(1)
  ROOT %reduce_sum.37287 = f32[] add(%reduce_sum.37285, %reduce_sum.37286)
}

%region_1421.37288.clone (reduce_sum.2909: f32[], reduce_sum.2910: f32[]) -> f32[] {
  %reduce_sum.2909 = f32[] parameter(0)
  %reduce_sum.2910 = f32[] parameter(1)
  ROOT %reduce_sum.2911 = f32[] add(%reduce_sum.2909, %reduce_sum.2910)
}

%region_1422.37297 (reduce_sum.37294: f32[], reduce_sum.37295: f32[]) -> f32[] {
  %reduce_sum.37294 = f32[] parameter(0)
  %reduce_sum.37295 = f32[] parameter(1)
  ROOT %reduce_sum.37296 = f32[] add(%reduce_sum.37294, %reduce_sum.37295)
}

%region_1422.37297.clone (reduce_sum.2912: f32[], reduce_sum.2913: f32[]) -> f32[] {
  %reduce_sum.2912 = f32[] parameter(0)
  %reduce_sum.2913 = f32[] parameter(1)
  ROOT %reduce_sum.2914 = f32[] add(%reduce_sum.2912, %reduce_sum.2913)
}

%region_1423.37306 (reduce_sum.37303: f32[], reduce_sum.37304: f32[]) -> f32[] {
  %reduce_sum.37303 = f32[] parameter(0)
  %reduce_sum.37304 = f32[] parameter(1)
  ROOT %reduce_sum.37305 = f32[] add(%reduce_sum.37303, %reduce_sum.37304)
}

%region_1423.37306.clone (reduce_sum.2915: f32[], reduce_sum.2916: f32[]) -> f32[] {
  %reduce_sum.2915 = f32[] parameter(0)
  %reduce_sum.2916 = f32[] parameter(1)
  ROOT %reduce_sum.2917 = f32[] add(%reduce_sum.2915, %reduce_sum.2916)
}

%region_1424.37315 (reduce_sum.37312: f32[], reduce_sum.37313: f32[]) -> f32[] {
  %reduce_sum.37312 = f32[] parameter(0)
  %reduce_sum.37313 = f32[] parameter(1)
  ROOT %reduce_sum.37314 = f32[] add(%reduce_sum.37312, %reduce_sum.37313)
}

%region_1424.37315.clone (reduce_sum.2918: f32[], reduce_sum.2919: f32[]) -> f32[] {
  %reduce_sum.2918 = f32[] parameter(0)
  %reduce_sum.2919 = f32[] parameter(1)
  ROOT %reduce_sum.2920 = f32[] add(%reduce_sum.2918, %reduce_sum.2919)
}

%region_1425.37324 (reduce_sum.37321: f32[], reduce_sum.37322: f32[]) -> f32[] {
  %reduce_sum.37321 = f32[] parameter(0)
  %reduce_sum.37322 = f32[] parameter(1)
  ROOT %reduce_sum.37323 = f32[] add(%reduce_sum.37321, %reduce_sum.37322)
}

%region_1425.37324.clone (reduce_sum.2921: f32[], reduce_sum.2922: f32[]) -> f32[] {
  %reduce_sum.2921 = f32[] parameter(0)
  %reduce_sum.2922 = f32[] parameter(1)
  ROOT %reduce_sum.2923 = f32[] add(%reduce_sum.2921, %reduce_sum.2922)
}

%region_1426.37333 (reduce_sum.37330: f32[], reduce_sum.37331: f32[]) -> f32[] {
  %reduce_sum.37330 = f32[] parameter(0)
  %reduce_sum.37331 = f32[] parameter(1)
  ROOT %reduce_sum.37332 = f32[] add(%reduce_sum.37330, %reduce_sum.37331)
}

%region_1426.37333.clone (reduce_sum.2924: f32[], reduce_sum.2925: f32[]) -> f32[] {
  %reduce_sum.2924 = f32[] parameter(0)
  %reduce_sum.2925 = f32[] parameter(1)
  ROOT %reduce_sum.2926 = f32[] add(%reduce_sum.2924, %reduce_sum.2925)
}

%region_1427.37342 (reduce_sum.37339: f32[], reduce_sum.37340: f32[]) -> f32[] {
  %reduce_sum.37339 = f32[] parameter(0)
  %reduce_sum.37340 = f32[] parameter(1)
  ROOT %reduce_sum.37341 = f32[] add(%reduce_sum.37339, %reduce_sum.37340)
}

%region_1427.37342.clone (reduce_sum.2927: f32[], reduce_sum.2928: f32[]) -> f32[] {
  %reduce_sum.2927 = f32[] parameter(0)
  %reduce_sum.2928 = f32[] parameter(1)
  ROOT %reduce_sum.2929 = f32[] add(%reduce_sum.2927, %reduce_sum.2928)
}

%region_1428.37351 (reduce_sum.37348: f32[], reduce_sum.37349: f32[]) -> f32[] {
  %reduce_sum.37348 = f32[] parameter(0)
  %reduce_sum.37349 = f32[] parameter(1)
  ROOT %reduce_sum.37350 = f32[] add(%reduce_sum.37348, %reduce_sum.37349)
}

%region_1429.37360 (reduce_sum.37357: f32[], reduce_sum.37358: f32[]) -> f32[] {
  %reduce_sum.37357 = f32[] parameter(0)
  %reduce_sum.37358 = f32[] parameter(1)
  ROOT %reduce_sum.37359 = f32[] add(%reduce_sum.37357, %reduce_sum.37358)
}

%region_1430.37369 (reduce_sum.37366: f32[], reduce_sum.37367: f32[]) -> f32[] {
  %reduce_sum.37366 = f32[] parameter(0)
  %reduce_sum.37367 = f32[] parameter(1)
  ROOT %reduce_sum.37368 = f32[] add(%reduce_sum.37366, %reduce_sum.37367)
}

%region_1430.37369.clone (reduce_sum.2930: f32[], reduce_sum.2931: f32[]) -> f32[] {
  %reduce_sum.2930 = f32[] parameter(0)
  %reduce_sum.2931 = f32[] parameter(1)
  ROOT %reduce_sum.2932 = f32[] add(%reduce_sum.2930, %reduce_sum.2931)
}

%region_1431.37378 (reduce_sum.37375: f32[], reduce_sum.37376: f32[]) -> f32[] {
  %reduce_sum.37375 = f32[] parameter(0)
  %reduce_sum.37376 = f32[] parameter(1)
  ROOT %reduce_sum.37377 = f32[] add(%reduce_sum.37375, %reduce_sum.37376)
}

%region_1431.37378.clone (reduce_sum.2936: f32[], reduce_sum.2941: f32[]) -> f32[] {
  %reduce_sum.2936 = f32[] parameter(0)
  %reduce_sum.2941 = f32[] parameter(1)
  ROOT %reduce_sum.2943 = f32[] add(%reduce_sum.2936, %reduce_sum.2941)
}

%region_1432.37387 (reduce_sum.37384: f32[], reduce_sum.37385: f32[]) -> f32[] {
  %reduce_sum.37384 = f32[] parameter(0)
  %reduce_sum.37385 = f32[] parameter(1)
  ROOT %reduce_sum.37386 = f32[] add(%reduce_sum.37384, %reduce_sum.37385)
}

%region_1432.37387.clone (reduce_sum.2944: f32[], reduce_sum.2945: f32[]) -> f32[] {
  %reduce_sum.2944 = f32[] parameter(0)
  %reduce_sum.2945 = f32[] parameter(1)
  ROOT %reduce_sum.2946 = f32[] add(%reduce_sum.2944, %reduce_sum.2945)
}

%region_1433.37396 (reduce_sum.37393: f32[], reduce_sum.37394: f32[]) -> f32[] {
  %reduce_sum.37393 = f32[] parameter(0)
  %reduce_sum.37394 = f32[] parameter(1)
  ROOT %reduce_sum.37395 = f32[] add(%reduce_sum.37393, %reduce_sum.37394)
}

%region_1433.37396.clone (reduce_sum.2947: f32[], reduce_sum.2948: f32[]) -> f32[] {
  %reduce_sum.2947 = f32[] parameter(0)
  %reduce_sum.2948 = f32[] parameter(1)
  ROOT %reduce_sum.2949 = f32[] add(%reduce_sum.2947, %reduce_sum.2948)
}

%region_1434.37405 (reduce_sum.37402: f32[], reduce_sum.37403: f32[]) -> f32[] {
  %reduce_sum.37402 = f32[] parameter(0)
  %reduce_sum.37403 = f32[] parameter(1)
  ROOT %reduce_sum.37404 = f32[] add(%reduce_sum.37402, %reduce_sum.37403)
}

%region_1434.37405.clone (reduce_sum.2950: f32[], reduce_sum.2951: f32[]) -> f32[] {
  %reduce_sum.2950 = f32[] parameter(0)
  %reduce_sum.2951 = f32[] parameter(1)
  ROOT %reduce_sum.2952 = f32[] add(%reduce_sum.2950, %reduce_sum.2951)
}

%region_1435.37414 (reduce_sum.37411: f32[], reduce_sum.37412: f32[]) -> f32[] {
  %reduce_sum.37411 = f32[] parameter(0)
  %reduce_sum.37412 = f32[] parameter(1)
  ROOT %reduce_sum.37413 = f32[] add(%reduce_sum.37411, %reduce_sum.37412)
}

%region_1435.37414.clone (reduce_sum.2953: f32[], reduce_sum.2954: f32[]) -> f32[] {
  %reduce_sum.2953 = f32[] parameter(0)
  %reduce_sum.2954 = f32[] parameter(1)
  ROOT %reduce_sum.2955 = f32[] add(%reduce_sum.2953, %reduce_sum.2954)
}

%region_1436.37423 (reduce_sum.37420: f32[], reduce_sum.37421: f32[]) -> f32[] {
  %reduce_sum.37420 = f32[] parameter(0)
  %reduce_sum.37421 = f32[] parameter(1)
  ROOT %reduce_sum.37422 = f32[] add(%reduce_sum.37420, %reduce_sum.37421)
}

%region_1436.37423.clone (reduce_sum.2956: f32[], reduce_sum.2957: f32[]) -> f32[] {
  %reduce_sum.2956 = f32[] parameter(0)
  %reduce_sum.2957 = f32[] parameter(1)
  ROOT %reduce_sum.2958 = f32[] add(%reduce_sum.2956, %reduce_sum.2957)
}

%region_1437.37432 (reduce_sum.37429: f32[], reduce_sum.37430: f32[]) -> f32[] {
  %reduce_sum.37429 = f32[] parameter(0)
  %reduce_sum.37430 = f32[] parameter(1)
  ROOT %reduce_sum.37431 = f32[] add(%reduce_sum.37429, %reduce_sum.37430)
}

%region_1437.37432.clone (reduce_sum.2959: f32[], reduce_sum.2960: f32[]) -> f32[] {
  %reduce_sum.2959 = f32[] parameter(0)
  %reduce_sum.2960 = f32[] parameter(1)
  ROOT %reduce_sum.2961 = f32[] add(%reduce_sum.2959, %reduce_sum.2960)
}

%region_1438.37441 (reduce_sum.37438: f32[], reduce_sum.37439: f32[]) -> f32[] {
  %reduce_sum.37438 = f32[] parameter(0)
  %reduce_sum.37439 = f32[] parameter(1)
  ROOT %reduce_sum.37440 = f32[] add(%reduce_sum.37438, %reduce_sum.37439)
}

%region_1439.37450 (reduce_sum.37447: f32[], reduce_sum.37448: f32[]) -> f32[] {
  %reduce_sum.37447 = f32[] parameter(0)
  %reduce_sum.37448 = f32[] parameter(1)
  ROOT %reduce_sum.37449 = f32[] add(%reduce_sum.37447, %reduce_sum.37448)
}

%region_1440.37459 (reduce_sum.37456: f32[], reduce_sum.37457: f32[]) -> f32[] {
  %reduce_sum.37456 = f32[] parameter(0)
  %reduce_sum.37457 = f32[] parameter(1)
  ROOT %reduce_sum.37458 = f32[] add(%reduce_sum.37456, %reduce_sum.37457)
}

%region_1440.37459.clone (reduce_sum.2962: f32[], reduce_sum.2963: f32[]) -> f32[] {
  %reduce_sum.2962 = f32[] parameter(0)
  %reduce_sum.2963 = f32[] parameter(1)
  ROOT %reduce_sum.2964 = f32[] add(%reduce_sum.2962, %reduce_sum.2963)
}

%region_1441.37468 (reduce_sum.37465: f32[], reduce_sum.37466: f32[]) -> f32[] {
  %reduce_sum.37465 = f32[] parameter(0)
  %reduce_sum.37466 = f32[] parameter(1)
  ROOT %reduce_sum.37467 = f32[] add(%reduce_sum.37465, %reduce_sum.37466)
}

%region_1441.37468.clone (reduce_sum.2965: f32[], reduce_sum.2966: f32[]) -> f32[] {
  %reduce_sum.2965 = f32[] parameter(0)
  %reduce_sum.2966 = f32[] parameter(1)
  ROOT %reduce_sum.2967 = f32[] add(%reduce_sum.2965, %reduce_sum.2966)
}

%region_1442.37477 (reduce_sum.37474: f32[], reduce_sum.37475: f32[]) -> f32[] {
  %reduce_sum.37474 = f32[] parameter(0)
  %reduce_sum.37475 = f32[] parameter(1)
  ROOT %reduce_sum.37476 = f32[] add(%reduce_sum.37474, %reduce_sum.37475)
}

%region_1442.37477.clone (reduce_sum.2971: f32[], reduce_sum.2973: f32[]) -> f32[] {
  %reduce_sum.2971 = f32[] parameter(0)
  %reduce_sum.2973 = f32[] parameter(1)
  ROOT %reduce_sum.2974 = f32[] add(%reduce_sum.2971, %reduce_sum.2973)
}

%region_1443.37486 (reduce_sum.37483: f32[], reduce_sum.37484: f32[]) -> f32[] {
  %reduce_sum.37483 = f32[] parameter(0)
  %reduce_sum.37484 = f32[] parameter(1)
  ROOT %reduce_sum.37485 = f32[] add(%reduce_sum.37483, %reduce_sum.37484)
}

%region_1443.37486.clone (reduce_sum.2975: f32[], reduce_sum.2976: f32[]) -> f32[] {
  %reduce_sum.2975 = f32[] parameter(0)
  %reduce_sum.2976 = f32[] parameter(1)
  ROOT %reduce_sum.2977 = f32[] add(%reduce_sum.2975, %reduce_sum.2976)
}

%region_1444.37495 (reduce_sum.37492: f32[], reduce_sum.37493: f32[]) -> f32[] {
  %reduce_sum.37492 = f32[] parameter(0)
  %reduce_sum.37493 = f32[] parameter(1)
  ROOT %reduce_sum.37494 = f32[] add(%reduce_sum.37492, %reduce_sum.37493)
}

%region_1444.37495.clone (reduce_sum.2981: f32[], reduce_sum.2983: f32[]) -> f32[] {
  %reduce_sum.2981 = f32[] parameter(0)
  %reduce_sum.2983 = f32[] parameter(1)
  ROOT %reduce_sum.2984 = f32[] add(%reduce_sum.2981, %reduce_sum.2983)
}

%region_1445.37504 (reduce_sum.37501: f32[], reduce_sum.37502: f32[]) -> f32[] {
  %reduce_sum.37501 = f32[] parameter(0)
  %reduce_sum.37502 = f32[] parameter(1)
  ROOT %reduce_sum.37503 = f32[] add(%reduce_sum.37501, %reduce_sum.37502)
}

%region_1445.37504.clone (reduce_sum.2985: f32[], reduce_sum.2986: f32[]) -> f32[] {
  %reduce_sum.2985 = f32[] parameter(0)
  %reduce_sum.2986 = f32[] parameter(1)
  ROOT %reduce_sum.2987 = f32[] add(%reduce_sum.2985, %reduce_sum.2986)
}

%region_1446.37513 (reduce_sum.37510: f32[], reduce_sum.37511: f32[]) -> f32[] {
  %reduce_sum.37510 = f32[] parameter(0)
  %reduce_sum.37511 = f32[] parameter(1)
  ROOT %reduce_sum.37512 = f32[] add(%reduce_sum.37510, %reduce_sum.37511)
}

%region_1446.37513.clone (reduce_sum.2988: f32[], reduce_sum.2989: f32[]) -> f32[] {
  %reduce_sum.2988 = f32[] parameter(0)
  %reduce_sum.2989 = f32[] parameter(1)
  ROOT %reduce_sum.2990 = f32[] add(%reduce_sum.2988, %reduce_sum.2989)
}

%region_1447.37522 (reduce_sum.37519: f32[], reduce_sum.37520: f32[]) -> f32[] {
  %reduce_sum.37519 = f32[] parameter(0)
  %reduce_sum.37520 = f32[] parameter(1)
  ROOT %reduce_sum.37521 = f32[] add(%reduce_sum.37519, %reduce_sum.37520)
}

%region_1447.37522.clone (reduce_sum.2994: f32[], reduce_sum.2996: f32[]) -> f32[] {
  %reduce_sum.2994 = f32[] parameter(0)
  %reduce_sum.2996 = f32[] parameter(1)
  ROOT %reduce_sum.2997 = f32[] add(%reduce_sum.2994, %reduce_sum.2996)
}

%region_1448.37531 (reduce_sum.37528: f32[], reduce_sum.37529: f32[]) -> f32[] {
  %reduce_sum.37528 = f32[] parameter(0)
  %reduce_sum.37529 = f32[] parameter(1)
  ROOT %reduce_sum.37530 = f32[] add(%reduce_sum.37528, %reduce_sum.37529)
}

%region_1449.37540 (reduce_sum.37537: f32[], reduce_sum.37538: f32[]) -> f32[] {
  %reduce_sum.37537 = f32[] parameter(0)
  %reduce_sum.37538 = f32[] parameter(1)
  ROOT %reduce_sum.37539 = f32[] add(%reduce_sum.37537, %reduce_sum.37538)
}

%region_1450.37549 (reduce_sum.37546: f32[], reduce_sum.37547: f32[]) -> f32[] {
  %reduce_sum.37546 = f32[] parameter(0)
  %reduce_sum.37547 = f32[] parameter(1)
  ROOT %reduce_sum.37548 = f32[] add(%reduce_sum.37546, %reduce_sum.37547)
}

%region_1450.37549.clone (reduce_sum.2998: f32[], reduce_sum.2999: f32[]) -> f32[] {
  %reduce_sum.2998 = f32[] parameter(0)
  %reduce_sum.2999 = f32[] parameter(1)
  ROOT %reduce_sum.3003 = f32[] add(%reduce_sum.2998, %reduce_sum.2999)
}

%region_1451.37558 (reduce_sum.37555: f32[], reduce_sum.37556: f32[]) -> f32[] {
  %reduce_sum.37555 = f32[] parameter(0)
  %reduce_sum.37556 = f32[] parameter(1)
  ROOT %reduce_sum.37557 = f32[] add(%reduce_sum.37555, %reduce_sum.37556)
}

%region_1451.37558.clone (reduce_sum.3005: f32[], reduce_sum.3006: f32[]) -> f32[] {
  %reduce_sum.3005 = f32[] parameter(0)
  %reduce_sum.3006 = f32[] parameter(1)
  ROOT %reduce_sum.3007 = f32[] add(%reduce_sum.3005, %reduce_sum.3006)
}

%region_1452.37567 (reduce_sum.37564: f32[], reduce_sum.37565: f32[]) -> f32[] {
  %reduce_sum.37564 = f32[] parameter(0)
  %reduce_sum.37565 = f32[] parameter(1)
  ROOT %reduce_sum.37566 = f32[] add(%reduce_sum.37564, %reduce_sum.37565)
}

%region_1452.37567.clone (reduce_sum.3008: f32[], reduce_sum.3009: f32[]) -> f32[] {
  %reduce_sum.3008 = f32[] parameter(0)
  %reduce_sum.3009 = f32[] parameter(1)
  ROOT %reduce_sum.3010 = f32[] add(%reduce_sum.3008, %reduce_sum.3009)
}

%region_1453.37576 (reduce_sum.37573: f32[], reduce_sum.37574: f32[]) -> f32[] {
  %reduce_sum.37573 = f32[] parameter(0)
  %reduce_sum.37574 = f32[] parameter(1)
  ROOT %reduce_sum.37575 = f32[] add(%reduce_sum.37573, %reduce_sum.37574)
}

%region_1453.37576.clone (reduce_sum.3011: f32[], reduce_sum.3012: f32[]) -> f32[] {
  %reduce_sum.3011 = f32[] parameter(0)
  %reduce_sum.3012 = f32[] parameter(1)
  ROOT %reduce_sum.3013 = f32[] add(%reduce_sum.3011, %reduce_sum.3012)
}

%region_1454.37585 (reduce_sum.37582: f32[], reduce_sum.37583: f32[]) -> f32[] {
  %reduce_sum.37582 = f32[] parameter(0)
  %reduce_sum.37583 = f32[] parameter(1)
  ROOT %reduce_sum.37584 = f32[] add(%reduce_sum.37582, %reduce_sum.37583)
}

%region_1454.37585.clone (reduce_sum.3014: f32[], reduce_sum.3015: f32[]) -> f32[] {
  %reduce_sum.3014 = f32[] parameter(0)
  %reduce_sum.3015 = f32[] parameter(1)
  ROOT %reduce_sum.3016 = f32[] add(%reduce_sum.3014, %reduce_sum.3015)
}

%region_1455.37594 (reduce_sum.37591: f32[], reduce_sum.37592: f32[]) -> f32[] {
  %reduce_sum.37591 = f32[] parameter(0)
  %reduce_sum.37592 = f32[] parameter(1)
  ROOT %reduce_sum.37593 = f32[] add(%reduce_sum.37591, %reduce_sum.37592)
}

%region_1455.37594.clone (reduce_sum.3017: f32[], reduce_sum.3018: f32[]) -> f32[] {
  %reduce_sum.3017 = f32[] parameter(0)
  %reduce_sum.3018 = f32[] parameter(1)
  ROOT %reduce_sum.3019 = f32[] add(%reduce_sum.3017, %reduce_sum.3018)
}

%region_1456.37603 (reduce_sum.37600: f32[], reduce_sum.37601: f32[]) -> f32[] {
  %reduce_sum.37600 = f32[] parameter(0)
  %reduce_sum.37601 = f32[] parameter(1)
  ROOT %reduce_sum.37602 = f32[] add(%reduce_sum.37600, %reduce_sum.37601)
}

%region_1456.37603.clone (reduce_sum.3023: f32[], reduce_sum.3025: f32[]) -> f32[] {
  %reduce_sum.3023 = f32[] parameter(0)
  %reduce_sum.3025 = f32[] parameter(1)
  ROOT %reduce_sum.3026 = f32[] add(%reduce_sum.3023, %reduce_sum.3025)
}

%region_1457.37612 (reduce_sum.37609: f32[], reduce_sum.37610: f32[]) -> f32[] {
  %reduce_sum.37609 = f32[] parameter(0)
  %reduce_sum.37610 = f32[] parameter(1)
  ROOT %reduce_sum.37611 = f32[] add(%reduce_sum.37609, %reduce_sum.37610)
}

%region_1457.37612.clone (reduce_sum.3027: f32[], reduce_sum.3028: f32[]) -> f32[] {
  %reduce_sum.3027 = f32[] parameter(0)
  %reduce_sum.3028 = f32[] parameter(1)
  ROOT %reduce_sum.3029 = f32[] add(%reduce_sum.3027, %reduce_sum.3028)
}

%region_1458.37621 (reduce_sum.37618: f32[], reduce_sum.37619: f32[]) -> f32[] {
  %reduce_sum.37618 = f32[] parameter(0)
  %reduce_sum.37619 = f32[] parameter(1)
  ROOT %reduce_sum.37620 = f32[] add(%reduce_sum.37618, %reduce_sum.37619)
}

%region_1459.37630 (reduce_sum.37627: f32[], reduce_sum.37628: f32[]) -> f32[] {
  %reduce_sum.37627 = f32[] parameter(0)
  %reduce_sum.37628 = f32[] parameter(1)
  ROOT %reduce_sum.37629 = f32[] add(%reduce_sum.37627, %reduce_sum.37628)
}

%region_1460.37639 (reduce_sum.37636: f32[], reduce_sum.37637: f32[]) -> f32[] {
  %reduce_sum.37636 = f32[] parameter(0)
  %reduce_sum.37637 = f32[] parameter(1)
  ROOT %reduce_sum.37638 = f32[] add(%reduce_sum.37636, %reduce_sum.37637)
}

%region_1460.37639.clone (reduce_sum.3030: f32[], reduce_sum.3031: f32[]) -> f32[] {
  %reduce_sum.3030 = f32[] parameter(0)
  %reduce_sum.3031 = f32[] parameter(1)
  ROOT %reduce_sum.3032 = f32[] add(%reduce_sum.3030, %reduce_sum.3031)
}

%region_1461.37648 (reduce_sum.37645: f32[], reduce_sum.37646: f32[]) -> f32[] {
  %reduce_sum.37645 = f32[] parameter(0)
  %reduce_sum.37646 = f32[] parameter(1)
  ROOT %reduce_sum.37647 = f32[] add(%reduce_sum.37645, %reduce_sum.37646)
}

%region_1461.37648.clone (reduce_sum.3033: f32[], reduce_sum.3034: f32[]) -> f32[] {
  %reduce_sum.3033 = f32[] parameter(0)
  %reduce_sum.3034 = f32[] parameter(1)
  ROOT %reduce_sum.3035 = f32[] add(%reduce_sum.3033, %reduce_sum.3034)
}

%region_1462.37657 (reduce_sum.37654: f32[], reduce_sum.37655: f32[]) -> f32[] {
  %reduce_sum.37654 = f32[] parameter(0)
  %reduce_sum.37655 = f32[] parameter(1)
  ROOT %reduce_sum.37656 = f32[] add(%reduce_sum.37654, %reduce_sum.37655)
}

%region_1462.37657.clone (reduce_sum.3036: f32[], reduce_sum.3037: f32[]) -> f32[] {
  %reduce_sum.3036 = f32[] parameter(0)
  %reduce_sum.3037 = f32[] parameter(1)
  ROOT %reduce_sum.3038 = f32[] add(%reduce_sum.3036, %reduce_sum.3037)
}

%region_1463.37666 (reduce_sum.37663: f32[], reduce_sum.37664: f32[]) -> f32[] {
  %reduce_sum.37663 = f32[] parameter(0)
  %reduce_sum.37664 = f32[] parameter(1)
  ROOT %reduce_sum.37665 = f32[] add(%reduce_sum.37663, %reduce_sum.37664)
}

%region_1463.37666.clone (reduce_sum.3042: f32[], reduce_sum.3044: f32[]) -> f32[] {
  %reduce_sum.3042 = f32[] parameter(0)
  %reduce_sum.3044 = f32[] parameter(1)
  ROOT %reduce_sum.3045 = f32[] add(%reduce_sum.3042, %reduce_sum.3044)
}

%region_1464.37675 (reduce_sum.37672: f32[], reduce_sum.37673: f32[]) -> f32[] {
  %reduce_sum.37672 = f32[] parameter(0)
  %reduce_sum.37673 = f32[] parameter(1)
  ROOT %reduce_sum.37674 = f32[] add(%reduce_sum.37672, %reduce_sum.37673)
}

%region_1464.37675.clone (reduce_sum.3046: f32[], reduce_sum.3047: f32[]) -> f32[] {
  %reduce_sum.3046 = f32[] parameter(0)
  %reduce_sum.3047 = f32[] parameter(1)
  ROOT %reduce_sum.3048 = f32[] add(%reduce_sum.3046, %reduce_sum.3047)
}

%region_1465.37684 (reduce_sum.37681: f32[], reduce_sum.37682: f32[]) -> f32[] {
  %reduce_sum.37681 = f32[] parameter(0)
  %reduce_sum.37682 = f32[] parameter(1)
  ROOT %reduce_sum.37683 = f32[] add(%reduce_sum.37681, %reduce_sum.37682)
}

%region_1465.37684.clone (reduce_sum.3049: f32[], reduce_sum.3050: f32[]) -> f32[] {
  %reduce_sum.3049 = f32[] parameter(0)
  %reduce_sum.3050 = f32[] parameter(1)
  ROOT %reduce_sum.3051 = f32[] add(%reduce_sum.3049, %reduce_sum.3050)
}

%region_1466.37693 (reduce_sum.37690: f32[], reduce_sum.37691: f32[]) -> f32[] {
  %reduce_sum.37690 = f32[] parameter(0)
  %reduce_sum.37691 = f32[] parameter(1)
  ROOT %reduce_sum.37692 = f32[] add(%reduce_sum.37690, %reduce_sum.37691)
}

%region_1466.37693.clone (reduce_sum.3052: f32[], reduce_sum.3053: f32[]) -> f32[] {
  %reduce_sum.3052 = f32[] parameter(0)
  %reduce_sum.3053 = f32[] parameter(1)
  ROOT %reduce_sum.3054 = f32[] add(%reduce_sum.3052, %reduce_sum.3053)
}

%region_1467.37702 (reduce_sum.37699: f32[], reduce_sum.37700: f32[]) -> f32[] {
  %reduce_sum.37699 = f32[] parameter(0)
  %reduce_sum.37700 = f32[] parameter(1)
  ROOT %reduce_sum.37701 = f32[] add(%reduce_sum.37699, %reduce_sum.37700)
}

%region_1467.37702.clone (reduce_sum.3055: f32[], reduce_sum.3056: f32[]) -> f32[] {
  %reduce_sum.3055 = f32[] parameter(0)
  %reduce_sum.3056 = f32[] parameter(1)
  ROOT %reduce_sum.3057 = f32[] add(%reduce_sum.3055, %reduce_sum.3056)
}

%region_1468.37711 (reduce_sum.37708: f32[], reduce_sum.37709: f32[]) -> f32[] {
  %reduce_sum.37708 = f32[] parameter(0)
  %reduce_sum.37709 = f32[] parameter(1)
  ROOT %reduce_sum.37710 = f32[] add(%reduce_sum.37708, %reduce_sum.37709)
}

%region_1469.37720 (reduce_sum.37717: f32[], reduce_sum.37718: f32[]) -> f32[] {
  %reduce_sum.37717 = f32[] parameter(0)
  %reduce_sum.37718 = f32[] parameter(1)
  ROOT %reduce_sum.37719 = f32[] add(%reduce_sum.37717, %reduce_sum.37718)
}

%region_1470.37729 (reduce_sum.37726: f32[], reduce_sum.37727: f32[]) -> f32[] {
  %reduce_sum.37726 = f32[] parameter(0)
  %reduce_sum.37727 = f32[] parameter(1)
  ROOT %reduce_sum.37728 = f32[] add(%reduce_sum.37726, %reduce_sum.37727)
}

%region_1470.37729.clone (reduce_sum.3058: f32[], reduce_sum.3059: f32[]) -> f32[] {
  %reduce_sum.3058 = f32[] parameter(0)
  %reduce_sum.3059 = f32[] parameter(1)
  ROOT %reduce_sum.3060 = f32[] add(%reduce_sum.3058, %reduce_sum.3059)
}

%region_1471.37738 (reduce_sum.37735: f32[], reduce_sum.37736: f32[]) -> f32[] {
  %reduce_sum.37735 = f32[] parameter(0)
  %reduce_sum.37736 = f32[] parameter(1)
  ROOT %reduce_sum.37737 = f32[] add(%reduce_sum.37735, %reduce_sum.37736)
}

%region_1471.37738.clone (reduce_sum.3061: f32[], reduce_sum.3062: f32[]) -> f32[] {
  %reduce_sum.3061 = f32[] parameter(0)
  %reduce_sum.3062 = f32[] parameter(1)
  ROOT %reduce_sum.3063 = f32[] add(%reduce_sum.3061, %reduce_sum.3062)
}

%region_1472.37747 (reduce_sum.37744: f32[], reduce_sum.37745: f32[]) -> f32[] {
  %reduce_sum.37744 = f32[] parameter(0)
  %reduce_sum.37745 = f32[] parameter(1)
  ROOT %reduce_sum.37746 = f32[] add(%reduce_sum.37744, %reduce_sum.37745)
}

%region_1472.37747.clone (reduce_sum.3064: f32[], reduce_sum.3065: f32[]) -> f32[] {
  %reduce_sum.3064 = f32[] parameter(0)
  %reduce_sum.3065 = f32[] parameter(1)
  ROOT %reduce_sum.3066 = f32[] add(%reduce_sum.3064, %reduce_sum.3065)
}

%region_1473.37756 (reduce_sum.37753: f32[], reduce_sum.37754: f32[]) -> f32[] {
  %reduce_sum.37753 = f32[] parameter(0)
  %reduce_sum.37754 = f32[] parameter(1)
  ROOT %reduce_sum.37755 = f32[] add(%reduce_sum.37753, %reduce_sum.37754)
}

%region_1473.37756.clone (reduce_sum.3067: f32[], reduce_sum.3068: f32[]) -> f32[] {
  %reduce_sum.3067 = f32[] parameter(0)
  %reduce_sum.3068 = f32[] parameter(1)
  ROOT %reduce_sum.3069 = f32[] add(%reduce_sum.3067, %reduce_sum.3068)
}

%region_1474.37765 (reduce_sum.37762: f32[], reduce_sum.37763: f32[]) -> f32[] {
  %reduce_sum.37762 = f32[] parameter(0)
  %reduce_sum.37763 = f32[] parameter(1)
  ROOT %reduce_sum.37764 = f32[] add(%reduce_sum.37762, %reduce_sum.37763)
}

%region_1474.37765.clone (reduce_sum.3070: f32[], reduce_sum.3071: f32[]) -> f32[] {
  %reduce_sum.3070 = f32[] parameter(0)
  %reduce_sum.3071 = f32[] parameter(1)
  ROOT %reduce_sum.3072 = f32[] add(%reduce_sum.3070, %reduce_sum.3071)
}

%region_1475.37774 (reduce_sum.37771: f32[], reduce_sum.37772: f32[]) -> f32[] {
  %reduce_sum.37771 = f32[] parameter(0)
  %reduce_sum.37772 = f32[] parameter(1)
  ROOT %reduce_sum.37773 = f32[] add(%reduce_sum.37771, %reduce_sum.37772)
}

%region_1475.37774.clone (reduce_sum.3073: f32[], reduce_sum.3074: f32[]) -> f32[] {
  %reduce_sum.3073 = f32[] parameter(0)
  %reduce_sum.3074 = f32[] parameter(1)
  ROOT %reduce_sum.3075 = f32[] add(%reduce_sum.3073, %reduce_sum.3074)
}

%region_1476.37783 (reduce_sum.37780: f32[], reduce_sum.37781: f32[]) -> f32[] {
  %reduce_sum.37780 = f32[] parameter(0)
  %reduce_sum.37781 = f32[] parameter(1)
  ROOT %reduce_sum.37782 = f32[] add(%reduce_sum.37780, %reduce_sum.37781)
}

%region_1476.37783.clone (reduce_sum.3076: f32[], reduce_sum.3077: f32[]) -> f32[] {
  %reduce_sum.3076 = f32[] parameter(0)
  %reduce_sum.3077 = f32[] parameter(1)
  ROOT %reduce_sum.3078 = f32[] add(%reduce_sum.3076, %reduce_sum.3077)
}

%region_1477.37792 (reduce_sum.37789: f32[], reduce_sum.37790: f32[]) -> f32[] {
  %reduce_sum.37789 = f32[] parameter(0)
  %reduce_sum.37790 = f32[] parameter(1)
  ROOT %reduce_sum.37791 = f32[] add(%reduce_sum.37789, %reduce_sum.37790)
}

%region_1477.37792.clone (reduce_sum.3079: f32[], reduce_sum.3080: f32[]) -> f32[] {
  %reduce_sum.3079 = f32[] parameter(0)
  %reduce_sum.3080 = f32[] parameter(1)
  ROOT %reduce_sum.3081 = f32[] add(%reduce_sum.3079, %reduce_sum.3080)
}

%region_1478.37801 (reduce_sum.37798: f32[], reduce_sum.37799: f32[]) -> f32[] {
  %reduce_sum.37798 = f32[] parameter(0)
  %reduce_sum.37799 = f32[] parameter(1)
  ROOT %reduce_sum.37800 = f32[] add(%reduce_sum.37798, %reduce_sum.37799)
}

%region_1479.37810 (reduce_sum.37807: f32[], reduce_sum.37808: f32[]) -> f32[] {
  %reduce_sum.37807 = f32[] parameter(0)
  %reduce_sum.37808 = f32[] parameter(1)
  ROOT %reduce_sum.37809 = f32[] add(%reduce_sum.37807, %reduce_sum.37808)
}

%region_1480.37819 (reduce_sum.37816: f32[], reduce_sum.37817: f32[]) -> f32[] {
  %reduce_sum.37816 = f32[] parameter(0)
  %reduce_sum.37817 = f32[] parameter(1)
  ROOT %reduce_sum.37818 = f32[] add(%reduce_sum.37816, %reduce_sum.37817)
}

%region_1480.37819.clone (reduce_sum.3082: f32[], reduce_sum.3083: f32[]) -> f32[] {
  %reduce_sum.3082 = f32[] parameter(0)
  %reduce_sum.3083 = f32[] parameter(1)
  ROOT %reduce_sum.3084 = f32[] add(%reduce_sum.3082, %reduce_sum.3083)
}

%region_1481.37828 (reduce_sum.37825: f32[], reduce_sum.37826: f32[]) -> f32[] {
  %reduce_sum.37825 = f32[] parameter(0)
  %reduce_sum.37826 = f32[] parameter(1)
  ROOT %reduce_sum.37827 = f32[] add(%reduce_sum.37825, %reduce_sum.37826)
}

%region_1481.37828.clone (reduce_sum.3085: f32[], reduce_sum.3086: f32[]) -> f32[] {
  %reduce_sum.3085 = f32[] parameter(0)
  %reduce_sum.3086 = f32[] parameter(1)
  ROOT %reduce_sum.3087 = f32[] add(%reduce_sum.3085, %reduce_sum.3086)
}

%region_1482.37837 (reduce_sum.37834: f32[], reduce_sum.37835: f32[]) -> f32[] {
  %reduce_sum.37834 = f32[] parameter(0)
  %reduce_sum.37835 = f32[] parameter(1)
  ROOT %reduce_sum.37836 = f32[] add(%reduce_sum.37834, %reduce_sum.37835)
}

%region_1482.37837.clone (reduce_sum.3088: f32[], reduce_sum.3089: f32[]) -> f32[] {
  %reduce_sum.3088 = f32[] parameter(0)
  %reduce_sum.3089 = f32[] parameter(1)
  ROOT %reduce_sum.3090 = f32[] add(%reduce_sum.3088, %reduce_sum.3089)
}

%region_1483.37846 (reduce_sum.37843: f32[], reduce_sum.37844: f32[]) -> f32[] {
  %reduce_sum.37843 = f32[] parameter(0)
  %reduce_sum.37844 = f32[] parameter(1)
  ROOT %reduce_sum.37845 = f32[] add(%reduce_sum.37843, %reduce_sum.37844)
}

%region_1483.37846.clone (reduce_sum.3091: f32[], reduce_sum.3092: f32[]) -> f32[] {
  %reduce_sum.3091 = f32[] parameter(0)
  %reduce_sum.3092 = f32[] parameter(1)
  ROOT %reduce_sum.3093 = f32[] add(%reduce_sum.3091, %reduce_sum.3092)
}

%region_1484.37855 (reduce_sum.37852: f32[], reduce_sum.37853: f32[]) -> f32[] {
  %reduce_sum.37852 = f32[] parameter(0)
  %reduce_sum.37853 = f32[] parameter(1)
  ROOT %reduce_sum.37854 = f32[] add(%reduce_sum.37852, %reduce_sum.37853)
}

%region_1484.37855.clone (reduce_sum.3094: f32[], reduce_sum.3095: f32[]) -> f32[] {
  %reduce_sum.3094 = f32[] parameter(0)
  %reduce_sum.3095 = f32[] parameter(1)
  ROOT %reduce_sum.3096 = f32[] add(%reduce_sum.3094, %reduce_sum.3095)
}

%region_1485.37864 (reduce_sum.37861: f32[], reduce_sum.37862: f32[]) -> f32[] {
  %reduce_sum.37861 = f32[] parameter(0)
  %reduce_sum.37862 = f32[] parameter(1)
  ROOT %reduce_sum.37863 = f32[] add(%reduce_sum.37861, %reduce_sum.37862)
}

%region_1485.37864.clone (reduce_sum.3097: f32[], reduce_sum.3098: f32[]) -> f32[] {
  %reduce_sum.3097 = f32[] parameter(0)
  %reduce_sum.3098 = f32[] parameter(1)
  ROOT %reduce_sum.3099 = f32[] add(%reduce_sum.3097, %reduce_sum.3098)
}

%region_1486.37873 (reduce_sum.37870: f32[], reduce_sum.37871: f32[]) -> f32[] {
  %reduce_sum.37870 = f32[] parameter(0)
  %reduce_sum.37871 = f32[] parameter(1)
  ROOT %reduce_sum.37872 = f32[] add(%reduce_sum.37870, %reduce_sum.37871)
}

%region_1486.37873.clone (reduce_sum.3100: f32[], reduce_sum.3101: f32[]) -> f32[] {
  %reduce_sum.3100 = f32[] parameter(0)
  %reduce_sum.3101 = f32[] parameter(1)
  ROOT %reduce_sum.3102 = f32[] add(%reduce_sum.3100, %reduce_sum.3101)
}

%region_1487.37882 (reduce_sum.37879: f32[], reduce_sum.37880: f32[]) -> f32[] {
  %reduce_sum.37879 = f32[] parameter(0)
  %reduce_sum.37880 = f32[] parameter(1)
  ROOT %reduce_sum.37881 = f32[] add(%reduce_sum.37879, %reduce_sum.37880)
}

%region_1487.37882.clone (reduce_sum.3103: f32[], reduce_sum.3104: f32[]) -> f32[] {
  %reduce_sum.3103 = f32[] parameter(0)
  %reduce_sum.3104 = f32[] parameter(1)
  ROOT %reduce_sum.3105 = f32[] add(%reduce_sum.3103, %reduce_sum.3104)
}

%region_1488.37891 (reduce_sum.37888: f32[], reduce_sum.37889: f32[]) -> f32[] {
  %reduce_sum.37888 = f32[] parameter(0)
  %reduce_sum.37889 = f32[] parameter(1)
  ROOT %reduce_sum.37890 = f32[] add(%reduce_sum.37888, %reduce_sum.37889)
}

%region_1489.37900 (reduce_sum.37897: f32[], reduce_sum.37898: f32[]) -> f32[] {
  %reduce_sum.37897 = f32[] parameter(0)
  %reduce_sum.37898 = f32[] parameter(1)
  ROOT %reduce_sum.37899 = f32[] add(%reduce_sum.37897, %reduce_sum.37898)
}

%region_1490.37909 (reduce_sum.37906: f32[], reduce_sum.37907: f32[]) -> f32[] {
  %reduce_sum.37906 = f32[] parameter(0)
  %reduce_sum.37907 = f32[] parameter(1)
  ROOT %reduce_sum.37908 = f32[] add(%reduce_sum.37906, %reduce_sum.37907)
}

%region_1490.37909.clone (reduce_sum.3106: f32[], reduce_sum.3107: f32[]) -> f32[] {
  %reduce_sum.3106 = f32[] parameter(0)
  %reduce_sum.3107 = f32[] parameter(1)
  ROOT %reduce_sum.3108 = f32[] add(%reduce_sum.3106, %reduce_sum.3107)
}

%region_1491.37918 (reduce_sum.37915: f32[], reduce_sum.37916: f32[]) -> f32[] {
  %reduce_sum.37915 = f32[] parameter(0)
  %reduce_sum.37916 = f32[] parameter(1)
  ROOT %reduce_sum.37917 = f32[] add(%reduce_sum.37915, %reduce_sum.37916)
}

%region_1491.37918.clone (reduce_sum.3109: f32[], reduce_sum.3110: f32[]) -> f32[] {
  %reduce_sum.3109 = f32[] parameter(0)
  %reduce_sum.3110 = f32[] parameter(1)
  ROOT %reduce_sum.3111 = f32[] add(%reduce_sum.3109, %reduce_sum.3110)
}

%region_1492.37927 (reduce_sum.37924: f32[], reduce_sum.37925: f32[]) -> f32[] {
  %reduce_sum.37924 = f32[] parameter(0)
  %reduce_sum.37925 = f32[] parameter(1)
  ROOT %reduce_sum.37926 = f32[] add(%reduce_sum.37924, %reduce_sum.37925)
}

%region_1492.37927.clone (reduce_sum.3112: f32[], reduce_sum.3113: f32[]) -> f32[] {
  %reduce_sum.3112 = f32[] parameter(0)
  %reduce_sum.3113 = f32[] parameter(1)
  ROOT %reduce_sum.3117 = f32[] add(%reduce_sum.3112, %reduce_sum.3113)
}

%region_1493.37936 (reduce_sum.37933: f32[], reduce_sum.37934: f32[]) -> f32[] {
  %reduce_sum.37933 = f32[] parameter(0)
  %reduce_sum.37934 = f32[] parameter(1)
  ROOT %reduce_sum.37935 = f32[] add(%reduce_sum.37933, %reduce_sum.37934)
}

%region_1493.37936.clone (reduce_sum.3120: f32[], reduce_sum.3121: f32[]) -> f32[] {
  %reduce_sum.3120 = f32[] parameter(0)
  %reduce_sum.3121 = f32[] parameter(1)
  ROOT %reduce_sum.3122 = f32[] add(%reduce_sum.3120, %reduce_sum.3121)
}

%region_1494.37945 (reduce_sum.37942: f32[], reduce_sum.37943: f32[]) -> f32[] {
  %reduce_sum.37942 = f32[] parameter(0)
  %reduce_sum.37943 = f32[] parameter(1)
  ROOT %reduce_sum.37944 = f32[] add(%reduce_sum.37942, %reduce_sum.37943)
}

%region_1494.37945.clone (reduce_sum.3126: f32[], reduce_sum.3129: f32[]) -> f32[] {
  %reduce_sum.3126 = f32[] parameter(0)
  %reduce_sum.3129 = f32[] parameter(1)
  ROOT %reduce_sum.3130 = f32[] add(%reduce_sum.3126, %reduce_sum.3129)
}

%region_1495.37954 (reduce_sum.37951: f32[], reduce_sum.37952: f32[]) -> f32[] {
  %reduce_sum.37951 = f32[] parameter(0)
  %reduce_sum.37952 = f32[] parameter(1)
  ROOT %reduce_sum.37953 = f32[] add(%reduce_sum.37951, %reduce_sum.37952)
}

%region_1495.37954.clone (reduce_sum.3131: f32[], reduce_sum.3132: f32[]) -> f32[] {
  %reduce_sum.3131 = f32[] parameter(0)
  %reduce_sum.3132 = f32[] parameter(1)
  ROOT %reduce_sum.3133 = f32[] add(%reduce_sum.3131, %reduce_sum.3132)
}

%region_1496.37963 (reduce_sum.37960: f32[], reduce_sum.37961: f32[]) -> f32[] {
  %reduce_sum.37960 = f32[] parameter(0)
  %reduce_sum.37961 = f32[] parameter(1)
  ROOT %reduce_sum.37962 = f32[] add(%reduce_sum.37960, %reduce_sum.37961)
}

%region_1496.37963.clone (reduce_sum.3134: f32[], reduce_sum.3135: f32[]) -> f32[] {
  %reduce_sum.3134 = f32[] parameter(0)
  %reduce_sum.3135 = f32[] parameter(1)
  ROOT %reduce_sum.3136 = f32[] add(%reduce_sum.3134, %reduce_sum.3135)
}

%region_1497.37972 (reduce_sum.37969: f32[], reduce_sum.37970: f32[]) -> f32[] {
  %reduce_sum.37969 = f32[] parameter(0)
  %reduce_sum.37970 = f32[] parameter(1)
  ROOT %reduce_sum.37971 = f32[] add(%reduce_sum.37969, %reduce_sum.37970)
}

%region_1497.37972.clone (reduce_sum.3137: f32[], reduce_sum.3138: f32[]) -> f32[] {
  %reduce_sum.3137 = f32[] parameter(0)
  %reduce_sum.3138 = f32[] parameter(1)
  ROOT %reduce_sum.3139 = f32[] add(%reduce_sum.3137, %reduce_sum.3138)
}

%region_1498.37981 (reduce_sum.37978: f32[], reduce_sum.37979: f32[]) -> f32[] {
  %reduce_sum.37978 = f32[] parameter(0)
  %reduce_sum.37979 = f32[] parameter(1)
  ROOT %reduce_sum.37980 = f32[] add(%reduce_sum.37978, %reduce_sum.37979)
}

%region_1499.37990 (reduce_sum.37987: f32[], reduce_sum.37988: f32[]) -> f32[] {
  %reduce_sum.37987 = f32[] parameter(0)
  %reduce_sum.37988 = f32[] parameter(1)
  ROOT %reduce_sum.37989 = f32[] add(%reduce_sum.37987, %reduce_sum.37988)
}

%region_1500.37999 (reduce_sum.37996: f32[], reduce_sum.37997: f32[]) -> f32[] {
  %reduce_sum.37996 = f32[] parameter(0)
  %reduce_sum.37997 = f32[] parameter(1)
  ROOT %reduce_sum.37998 = f32[] add(%reduce_sum.37996, %reduce_sum.37997)
}

%region_1500.37999.clone (reduce_sum.3140: f32[], reduce_sum.3141: f32[]) -> f32[] {
  %reduce_sum.3140 = f32[] parameter(0)
  %reduce_sum.3141 = f32[] parameter(1)
  ROOT %reduce_sum.3142 = f32[] add(%reduce_sum.3140, %reduce_sum.3141)
}

%region_1501.38008 (reduce_sum.38005: f32[], reduce_sum.38006: f32[]) -> f32[] {
  %reduce_sum.38005 = f32[] parameter(0)
  %reduce_sum.38006 = f32[] parameter(1)
  ROOT %reduce_sum.38007 = f32[] add(%reduce_sum.38005, %reduce_sum.38006)
}

%region_1501.38008.clone (reduce_sum.3143: f32[], reduce_sum.3147: f32[]) -> f32[] {
  %reduce_sum.3143 = f32[] parameter(0)
  %reduce_sum.3147 = f32[] parameter(1)
  ROOT %reduce_sum.3149 = f32[] add(%reduce_sum.3143, %reduce_sum.3147)
}

%region_1502.38017 (reduce_sum.38014: f32[], reduce_sum.38015: f32[]) -> f32[] {
  %reduce_sum.38014 = f32[] parameter(0)
  %reduce_sum.38015 = f32[] parameter(1)
  ROOT %reduce_sum.38016 = f32[] add(%reduce_sum.38014, %reduce_sum.38015)
}

%region_1502.38017.clone (reduce_sum.3150: f32[], reduce_sum.3151: f32[]) -> f32[] {
  %reduce_sum.3150 = f32[] parameter(0)
  %reduce_sum.3151 = f32[] parameter(1)
  ROOT %reduce_sum.3152 = f32[] add(%reduce_sum.3150, %reduce_sum.3151)
}

%region_1503.38026 (reduce_sum.38023: f32[], reduce_sum.38024: f32[]) -> f32[] {
  %reduce_sum.38023 = f32[] parameter(0)
  %reduce_sum.38024 = f32[] parameter(1)
  ROOT %reduce_sum.38025 = f32[] add(%reduce_sum.38023, %reduce_sum.38024)
}

%region_1503.38026.clone (reduce_sum.3153: f32[], reduce_sum.3154: f32[]) -> f32[] {
  %reduce_sum.3153 = f32[] parameter(0)
  %reduce_sum.3154 = f32[] parameter(1)
  ROOT %reduce_sum.3155 = f32[] add(%reduce_sum.3153, %reduce_sum.3154)
}

%region_1504.38035 (reduce_sum.38032: f32[], reduce_sum.38033: f32[]) -> f32[] {
  %reduce_sum.38032 = f32[] parameter(0)
  %reduce_sum.38033 = f32[] parameter(1)
  ROOT %reduce_sum.38034 = f32[] add(%reduce_sum.38032, %reduce_sum.38033)
}

%region_1504.38035.clone (reduce_sum.3156: f32[], reduce_sum.3157: f32[]) -> f32[] {
  %reduce_sum.3156 = f32[] parameter(0)
  %reduce_sum.3157 = f32[] parameter(1)
  ROOT %reduce_sum.3158 = f32[] add(%reduce_sum.3156, %reduce_sum.3157)
}

%region_1505.38044 (reduce_sum.38041: f32[], reduce_sum.38042: f32[]) -> f32[] {
  %reduce_sum.38041 = f32[] parameter(0)
  %reduce_sum.38042 = f32[] parameter(1)
  ROOT %reduce_sum.38043 = f32[] add(%reduce_sum.38041, %reduce_sum.38042)
}

%region_1505.38044.clone (reduce_sum.3159: f32[], reduce_sum.3160: f32[]) -> f32[] {
  %reduce_sum.3159 = f32[] parameter(0)
  %reduce_sum.3160 = f32[] parameter(1)
  ROOT %reduce_sum.3161 = f32[] add(%reduce_sum.3159, %reduce_sum.3160)
}

%region_1506.38053 (reduce_sum.38050: f32[], reduce_sum.38051: f32[]) -> f32[] {
  %reduce_sum.38050 = f32[] parameter(0)
  %reduce_sum.38051 = f32[] parameter(1)
  ROOT %reduce_sum.38052 = f32[] add(%reduce_sum.38050, %reduce_sum.38051)
}

%region_1506.38053.clone (reduce_sum.3162: f32[], reduce_sum.3163: f32[]) -> f32[] {
  %reduce_sum.3162 = f32[] parameter(0)
  %reduce_sum.3163 = f32[] parameter(1)
  ROOT %reduce_sum.3164 = f32[] add(%reduce_sum.3162, %reduce_sum.3163)
}

%region_1507.38062 (reduce_sum.38059: f32[], reduce_sum.38060: f32[]) -> f32[] {
  %reduce_sum.38059 = f32[] parameter(0)
  %reduce_sum.38060 = f32[] parameter(1)
  ROOT %reduce_sum.38061 = f32[] add(%reduce_sum.38059, %reduce_sum.38060)
}

%region_1507.38062.clone (reduce_sum.3165: f32[], reduce_sum.3166: f32[]) -> f32[] {
  %reduce_sum.3165 = f32[] parameter(0)
  %reduce_sum.3166 = f32[] parameter(1)
  ROOT %reduce_sum.3167 = f32[] add(%reduce_sum.3165, %reduce_sum.3166)
}

%region_1508.38071 (reduce_sum.38068: f32[], reduce_sum.38069: f32[]) -> f32[] {
  %reduce_sum.38068 = f32[] parameter(0)
  %reduce_sum.38069 = f32[] parameter(1)
  ROOT %reduce_sum.38070 = f32[] add(%reduce_sum.38068, %reduce_sum.38069)
}

%region_1509.38080 (reduce_sum.38077: f32[], reduce_sum.38078: f32[]) -> f32[] {
  %reduce_sum.38077 = f32[] parameter(0)
  %reduce_sum.38078 = f32[] parameter(1)
  ROOT %reduce_sum.38079 = f32[] add(%reduce_sum.38077, %reduce_sum.38078)
}

%region_1510.38089 (reduce_sum.38086: f32[], reduce_sum.38087: f32[]) -> f32[] {
  %reduce_sum.38086 = f32[] parameter(0)
  %reduce_sum.38087 = f32[] parameter(1)
  ROOT %reduce_sum.38088 = f32[] add(%reduce_sum.38086, %reduce_sum.38087)
}

%region_1510.38089.clone (reduce_sum.3168: f32[], reduce_sum.3169: f32[]) -> f32[] {
  %reduce_sum.3168 = f32[] parameter(0)
  %reduce_sum.3169 = f32[] parameter(1)
  ROOT %reduce_sum.3170 = f32[] add(%reduce_sum.3168, %reduce_sum.3169)
}

%region_1511.38098 (reduce_sum.38095: f32[], reduce_sum.38096: f32[]) -> f32[] {
  %reduce_sum.38095 = f32[] parameter(0)
  %reduce_sum.38096 = f32[] parameter(1)
  ROOT %reduce_sum.38097 = f32[] add(%reduce_sum.38095, %reduce_sum.38096)
}

%region_1511.38098.clone (reduce_sum.3174: f32[], reduce_sum.3176: f32[]) -> f32[] {
  %reduce_sum.3174 = f32[] parameter(0)
  %reduce_sum.3176 = f32[] parameter(1)
  ROOT %reduce_sum.3177 = f32[] add(%reduce_sum.3174, %reduce_sum.3176)
}

%region_1512.38107 (reduce_sum.38104: f32[], reduce_sum.38105: f32[]) -> f32[] {
  %reduce_sum.38104 = f32[] parameter(0)
  %reduce_sum.38105 = f32[] parameter(1)
  ROOT %reduce_sum.38106 = f32[] add(%reduce_sum.38104, %reduce_sum.38105)
}

%region_1512.38107.clone (reduce_sum.3178: f32[], reduce_sum.3182: f32[]) -> f32[] {
  %reduce_sum.3178 = f32[] parameter(0)
  %reduce_sum.3182 = f32[] parameter(1)
  ROOT %reduce_sum.3184 = f32[] add(%reduce_sum.3178, %reduce_sum.3182)
}

%region_1513.38116 (reduce_sum.38113: f32[], reduce_sum.38114: f32[]) -> f32[] {
  %reduce_sum.38113 = f32[] parameter(0)
  %reduce_sum.38114 = f32[] parameter(1)
  ROOT %reduce_sum.38115 = f32[] add(%reduce_sum.38113, %reduce_sum.38114)
}

%region_1513.38116.clone (reduce_sum.3185: f32[], reduce_sum.3186: f32[]) -> f32[] {
  %reduce_sum.3185 = f32[] parameter(0)
  %reduce_sum.3186 = f32[] parameter(1)
  ROOT %reduce_sum.3187 = f32[] add(%reduce_sum.3185, %reduce_sum.3186)
}

%region_1514.38125 (reduce_sum.38122: f32[], reduce_sum.38123: f32[]) -> f32[] {
  %reduce_sum.38122 = f32[] parameter(0)
  %reduce_sum.38123 = f32[] parameter(1)
  ROOT %reduce_sum.38124 = f32[] add(%reduce_sum.38122, %reduce_sum.38123)
}

%region_1514.38125.clone (reduce_sum.3188: f32[], reduce_sum.3189: f32[]) -> f32[] {
  %reduce_sum.3188 = f32[] parameter(0)
  %reduce_sum.3189 = f32[] parameter(1)
  ROOT %reduce_sum.3190 = f32[] add(%reduce_sum.3188, %reduce_sum.3189)
}

%region_1515.38134 (reduce_sum.38131: f32[], reduce_sum.38132: f32[]) -> f32[] {
  %reduce_sum.38131 = f32[] parameter(0)
  %reduce_sum.38132 = f32[] parameter(1)
  ROOT %reduce_sum.38133 = f32[] add(%reduce_sum.38131, %reduce_sum.38132)
}

%region_1515.38134.clone (reduce_sum.3191: f32[], reduce_sum.3192: f32[]) -> f32[] {
  %reduce_sum.3191 = f32[] parameter(0)
  %reduce_sum.3192 = f32[] parameter(1)
  ROOT %reduce_sum.3193 = f32[] add(%reduce_sum.3191, %reduce_sum.3192)
}

%region_1516.38143 (reduce_sum.38140: f32[], reduce_sum.38141: f32[]) -> f32[] {
  %reduce_sum.38140 = f32[] parameter(0)
  %reduce_sum.38141 = f32[] parameter(1)
  ROOT %reduce_sum.38142 = f32[] add(%reduce_sum.38140, %reduce_sum.38141)
}

%region_1516.38143.clone (reduce_sum.3194: f32[], reduce_sum.3195: f32[]) -> f32[] {
  %reduce_sum.3194 = f32[] parameter(0)
  %reduce_sum.3195 = f32[] parameter(1)
  ROOT %reduce_sum.3196 = f32[] add(%reduce_sum.3194, %reduce_sum.3195)
}

%region_1517.38152 (reduce_sum.38149: f32[], reduce_sum.38150: f32[]) -> f32[] {
  %reduce_sum.38149 = f32[] parameter(0)
  %reduce_sum.38150 = f32[] parameter(1)
  ROOT %reduce_sum.38151 = f32[] add(%reduce_sum.38149, %reduce_sum.38150)
}

%region_1517.38152.clone (reduce_sum.3197: f32[], reduce_sum.3198: f32[]) -> f32[] {
  %reduce_sum.3197 = f32[] parameter(0)
  %reduce_sum.3198 = f32[] parameter(1)
  ROOT %reduce_sum.3202 = f32[] add(%reduce_sum.3197, %reduce_sum.3198)
}

%region_1518.38161 (reduce_sum.38158: f32[], reduce_sum.38159: f32[]) -> f32[] {
  %reduce_sum.38158 = f32[] parameter(0)
  %reduce_sum.38159 = f32[] parameter(1)
  ROOT %reduce_sum.38160 = f32[] add(%reduce_sum.38158, %reduce_sum.38159)
}

%region_1519.38170 (reduce_sum.38167: f32[], reduce_sum.38168: f32[]) -> f32[] {
  %reduce_sum.38167 = f32[] parameter(0)
  %reduce_sum.38168 = f32[] parameter(1)
  ROOT %reduce_sum.38169 = f32[] add(%reduce_sum.38167, %reduce_sum.38168)
}

%region_1520.38179 (reduce_sum.38176: f32[], reduce_sum.38177: f32[]) -> f32[] {
  %reduce_sum.38176 = f32[] parameter(0)
  %reduce_sum.38177 = f32[] parameter(1)
  ROOT %reduce_sum.38178 = f32[] add(%reduce_sum.38176, %reduce_sum.38177)
}

%region_1520.38179.clone (reduce_sum.3204: f32[], reduce_sum.3205: f32[]) -> f32[] {
  %reduce_sum.3204 = f32[] parameter(0)
  %reduce_sum.3205 = f32[] parameter(1)
  ROOT %reduce_sum.3206 = f32[] add(%reduce_sum.3204, %reduce_sum.3205)
}

%region_1521.38188 (reduce_sum.38185: f32[], reduce_sum.38186: f32[]) -> f32[] {
  %reduce_sum.38185 = f32[] parameter(0)
  %reduce_sum.38186 = f32[] parameter(1)
  ROOT %reduce_sum.38187 = f32[] add(%reduce_sum.38185, %reduce_sum.38186)
}

%region_1521.38188.clone (reduce_sum.3207: f32[], reduce_sum.3208: f32[]) -> f32[] {
  %reduce_sum.3207 = f32[] parameter(0)
  %reduce_sum.3208 = f32[] parameter(1)
  ROOT %reduce_sum.3212 = f32[] add(%reduce_sum.3207, %reduce_sum.3208)
}

%region_1522.38197 (reduce_sum.38194: f32[], reduce_sum.38195: f32[]) -> f32[] {
  %reduce_sum.38194 = f32[] parameter(0)
  %reduce_sum.38195 = f32[] parameter(1)
  ROOT %reduce_sum.38196 = f32[] add(%reduce_sum.38194, %reduce_sum.38195)
}

%region_1522.38197.clone (reduce_sum.3214: f32[], reduce_sum.3215: f32[]) -> f32[] {
  %reduce_sum.3214 = f32[] parameter(0)
  %reduce_sum.3215 = f32[] parameter(1)
  ROOT %reduce_sum.3216 = f32[] add(%reduce_sum.3214, %reduce_sum.3215)
}

%region_1523.38206 (reduce_sum.38203: f32[], reduce_sum.38204: f32[]) -> f32[] {
  %reduce_sum.38203 = f32[] parameter(0)
  %reduce_sum.38204 = f32[] parameter(1)
  ROOT %reduce_sum.38205 = f32[] add(%reduce_sum.38203, %reduce_sum.38204)
}

%region_1523.38206.clone (reduce_sum.3217: f32[], reduce_sum.3218: f32[]) -> f32[] {
  %reduce_sum.3217 = f32[] parameter(0)
  %reduce_sum.3218 = f32[] parameter(1)
  ROOT %reduce_sum.3219 = f32[] add(%reduce_sum.3217, %reduce_sum.3218)
}

%region_1524.38215 (reduce_sum.38212: f32[], reduce_sum.38213: f32[]) -> f32[] {
  %reduce_sum.38212 = f32[] parameter(0)
  %reduce_sum.38213 = f32[] parameter(1)
  ROOT %reduce_sum.38214 = f32[] add(%reduce_sum.38212, %reduce_sum.38213)
}

%region_1524.38215.clone (reduce_sum.3220: f32[], reduce_sum.3221: f32[]) -> f32[] {
  %reduce_sum.3220 = f32[] parameter(0)
  %reduce_sum.3221 = f32[] parameter(1)
  ROOT %reduce_sum.3222 = f32[] add(%reduce_sum.3220, %reduce_sum.3221)
}

%region_1525.38224 (reduce_sum.38221: f32[], reduce_sum.38222: f32[]) -> f32[] {
  %reduce_sum.38221 = f32[] parameter(0)
  %reduce_sum.38222 = f32[] parameter(1)
  ROOT %reduce_sum.38223 = f32[] add(%reduce_sum.38221, %reduce_sum.38222)
}

%region_1525.38224.clone (reduce_sum.3223: f32[], reduce_sum.3224: f32[]) -> f32[] {
  %reduce_sum.3223 = f32[] parameter(0)
  %reduce_sum.3224 = f32[] parameter(1)
  ROOT %reduce_sum.3225 = f32[] add(%reduce_sum.3223, %reduce_sum.3224)
}

%region_1526.38233 (reduce_sum.38230: f32[], reduce_sum.38231: f32[]) -> f32[] {
  %reduce_sum.38230 = f32[] parameter(0)
  %reduce_sum.38231 = f32[] parameter(1)
  ROOT %reduce_sum.38232 = f32[] add(%reduce_sum.38230, %reduce_sum.38231)
}

%region_1526.38233.clone (reduce_sum.3226: f32[], reduce_sum.3227: f32[]) -> f32[] {
  %reduce_sum.3226 = f32[] parameter(0)
  %reduce_sum.3227 = f32[] parameter(1)
  ROOT %reduce_sum.3228 = f32[] add(%reduce_sum.3226, %reduce_sum.3227)
}

%region_1527.38242 (reduce_sum.38239: f32[], reduce_sum.38240: f32[]) -> f32[] {
  %reduce_sum.38239 = f32[] parameter(0)
  %reduce_sum.38240 = f32[] parameter(1)
  ROOT %reduce_sum.38241 = f32[] add(%reduce_sum.38239, %reduce_sum.38240)
}

%region_1527.38242.clone (reduce_sum.3229: f32[], reduce_sum.3230: f32[]) -> f32[] {
  %reduce_sum.3229 = f32[] parameter(0)
  %reduce_sum.3230 = f32[] parameter(1)
  ROOT %reduce_sum.3231 = f32[] add(%reduce_sum.3229, %reduce_sum.3230)
}

%region_1528.38251 (reduce_sum.38248: f32[], reduce_sum.38249: f32[]) -> f32[] {
  %reduce_sum.38248 = f32[] parameter(0)
  %reduce_sum.38249 = f32[] parameter(1)
  ROOT %reduce_sum.38250 = f32[] add(%reduce_sum.38248, %reduce_sum.38249)
}

%region_1529.38260 (reduce_sum.38257: f32[], reduce_sum.38258: f32[]) -> f32[] {
  %reduce_sum.38257 = f32[] parameter(0)
  %reduce_sum.38258 = f32[] parameter(1)
  ROOT %reduce_sum.38259 = f32[] add(%reduce_sum.38257, %reduce_sum.38258)
}

%region_1530.38269 (reduce_sum.38266: f32[], reduce_sum.38267: f32[]) -> f32[] {
  %reduce_sum.38266 = f32[] parameter(0)
  %reduce_sum.38267 = f32[] parameter(1)
  ROOT %reduce_sum.38268 = f32[] add(%reduce_sum.38266, %reduce_sum.38267)
}

%region_1530.38269.clone (reduce_sum.3232: f32[], reduce_sum.3233: f32[]) -> f32[] {
  %reduce_sum.3232 = f32[] parameter(0)
  %reduce_sum.3233 = f32[] parameter(1)
  ROOT %reduce_sum.3234 = f32[] add(%reduce_sum.3232, %reduce_sum.3233)
}

%region_1531.38278 (reduce_sum.38275: f32[], reduce_sum.38276: f32[]) -> f32[] {
  %reduce_sum.38275 = f32[] parameter(0)
  %reduce_sum.38276 = f32[] parameter(1)
  ROOT %reduce_sum.38277 = f32[] add(%reduce_sum.38275, %reduce_sum.38276)
}

%region_1531.38278.clone (reduce_sum.3235: f32[], reduce_sum.3236: f32[]) -> f32[] {
  %reduce_sum.3235 = f32[] parameter(0)
  %reduce_sum.3236 = f32[] parameter(1)
  ROOT %reduce_sum.3242 = f32[] add(%reduce_sum.3235, %reduce_sum.3236)
}

%region_1532.38287 (reduce_sum.38284: f32[], reduce_sum.38285: f32[]) -> f32[] {
  %reduce_sum.38284 = f32[] parameter(0)
  %reduce_sum.38285 = f32[] parameter(1)
  ROOT %reduce_sum.38286 = f32[] add(%reduce_sum.38284, %reduce_sum.38285)
}

%region_1532.38287.clone (reduce_sum.3244: f32[], reduce_sum.3245: f32[]) -> f32[] {
  %reduce_sum.3244 = f32[] parameter(0)
  %reduce_sum.3245 = f32[] parameter(1)
  ROOT %reduce_sum.3246 = f32[] add(%reduce_sum.3244, %reduce_sum.3245)
}

%region_1533.38296 (reduce_sum.38293: f32[], reduce_sum.38294: f32[]) -> f32[] {
  %reduce_sum.38293 = f32[] parameter(0)
  %reduce_sum.38294 = f32[] parameter(1)
  ROOT %reduce_sum.38295 = f32[] add(%reduce_sum.38293, %reduce_sum.38294)
}

%region_1533.38296.clone (reduce_sum.3247: f32[], reduce_sum.3248: f32[]) -> f32[] {
  %reduce_sum.3247 = f32[] parameter(0)
  %reduce_sum.3248 = f32[] parameter(1)
  ROOT %reduce_sum.3252 = f32[] add(%reduce_sum.3247, %reduce_sum.3248)
}

%region_1534.38305 (reduce_sum.38302: f32[], reduce_sum.38303: f32[]) -> f32[] {
  %reduce_sum.38302 = f32[] parameter(0)
  %reduce_sum.38303 = f32[] parameter(1)
  ROOT %reduce_sum.38304 = f32[] add(%reduce_sum.38302, %reduce_sum.38303)
}

%region_1534.38305.clone (reduce_sum.3254: f32[], reduce_sum.3255: f32[]) -> f32[] {
  %reduce_sum.3254 = f32[] parameter(0)
  %reduce_sum.3255 = f32[] parameter(1)
  ROOT %reduce_sum.3256 = f32[] add(%reduce_sum.3254, %reduce_sum.3255)
}

%region_1535.38314 (reduce_sum.38311: f32[], reduce_sum.38312: f32[]) -> f32[] {
  %reduce_sum.38311 = f32[] parameter(0)
  %reduce_sum.38312 = f32[] parameter(1)
  ROOT %reduce_sum.38313 = f32[] add(%reduce_sum.38311, %reduce_sum.38312)
}

%region_1535.38314.clone (reduce_sum.3257: f32[], reduce_sum.3258: f32[]) -> f32[] {
  %reduce_sum.3257 = f32[] parameter(0)
  %reduce_sum.3258 = f32[] parameter(1)
  ROOT %reduce_sum.3259 = f32[] add(%reduce_sum.3257, %reduce_sum.3258)
}

%region_1536.38323 (reduce_sum.38320: f32[], reduce_sum.38321: f32[]) -> f32[] {
  %reduce_sum.38320 = f32[] parameter(0)
  %reduce_sum.38321 = f32[] parameter(1)
  ROOT %reduce_sum.38322 = f32[] add(%reduce_sum.38320, %reduce_sum.38321)
}

%region_1536.38323.clone (reduce_sum.3260: f32[], reduce_sum.3261: f32[]) -> f32[] {
  %reduce_sum.3260 = f32[] parameter(0)
  %reduce_sum.3261 = f32[] parameter(1)
  ROOT %reduce_sum.3262 = f32[] add(%reduce_sum.3260, %reduce_sum.3261)
}

%region_1537.38332 (reduce_sum.38329: f32[], reduce_sum.38330: f32[]) -> f32[] {
  %reduce_sum.38329 = f32[] parameter(0)
  %reduce_sum.38330 = f32[] parameter(1)
  ROOT %reduce_sum.38331 = f32[] add(%reduce_sum.38329, %reduce_sum.38330)
}

%region_1537.38332.clone (reduce_sum.3263: f32[], reduce_sum.3264: f32[]) -> f32[] {
  %reduce_sum.3263 = f32[] parameter(0)
  %reduce_sum.3264 = f32[] parameter(1)
  ROOT %reduce_sum.3265 = f32[] add(%reduce_sum.3263, %reduce_sum.3264)
}

%region_1538.38341 (reduce_sum.38338: f32[], reduce_sum.38339: f32[]) -> f32[] {
  %reduce_sum.38338 = f32[] parameter(0)
  %reduce_sum.38339 = f32[] parameter(1)
  ROOT %reduce_sum.38340 = f32[] add(%reduce_sum.38338, %reduce_sum.38339)
}

%region_1539.38350 (reduce_sum.38347: f32[], reduce_sum.38348: f32[]) -> f32[] {
  %reduce_sum.38347 = f32[] parameter(0)
  %reduce_sum.38348 = f32[] parameter(1)
  ROOT %reduce_sum.38349 = f32[] add(%reduce_sum.38347, %reduce_sum.38348)
}

%region_1540.38359 (reduce_sum.38356: f32[], reduce_sum.38357: f32[]) -> f32[] {
  %reduce_sum.38356 = f32[] parameter(0)
  %reduce_sum.38357 = f32[] parameter(1)
  ROOT %reduce_sum.38358 = f32[] add(%reduce_sum.38356, %reduce_sum.38357)
}

%region_1540.38359.clone (reduce_sum.3266: f32[], reduce_sum.3267: f32[]) -> f32[] {
  %reduce_sum.3266 = f32[] parameter(0)
  %reduce_sum.3267 = f32[] parameter(1)
  ROOT %reduce_sum.3268 = f32[] add(%reduce_sum.3266, %reduce_sum.3267)
}

%region_1541.38368 (reduce_sum.38365: f32[], reduce_sum.38366: f32[]) -> f32[] {
  %reduce_sum.38365 = f32[] parameter(0)
  %reduce_sum.38366 = f32[] parameter(1)
  ROOT %reduce_sum.38367 = f32[] add(%reduce_sum.38365, %reduce_sum.38366)
}

%region_1541.38368.clone (reduce_sum.3269: f32[], reduce_sum.3270: f32[]) -> f32[] {
  %reduce_sum.3269 = f32[] parameter(0)
  %reduce_sum.3270 = f32[] parameter(1)
  ROOT %reduce_sum.3271 = f32[] add(%reduce_sum.3269, %reduce_sum.3270)
}

%region_1542.38377 (reduce_sum.38374: f32[], reduce_sum.38375: f32[]) -> f32[] {
  %reduce_sum.38374 = f32[] parameter(0)
  %reduce_sum.38375 = f32[] parameter(1)
  ROOT %reduce_sum.38376 = f32[] add(%reduce_sum.38374, %reduce_sum.38375)
}

%region_1542.38377.clone (reduce_sum.3272: f32[], reduce_sum.3273: f32[]) -> f32[] {
  %reduce_sum.3272 = f32[] parameter(0)
  %reduce_sum.3273 = f32[] parameter(1)
  ROOT %reduce_sum.3274 = f32[] add(%reduce_sum.3272, %reduce_sum.3273)
}

%region_1543.38386 (reduce_sum.38383: f32[], reduce_sum.38384: f32[]) -> f32[] {
  %reduce_sum.38383 = f32[] parameter(0)
  %reduce_sum.38384 = f32[] parameter(1)
  ROOT %reduce_sum.38385 = f32[] add(%reduce_sum.38383, %reduce_sum.38384)
}

%region_1543.38386.clone (reduce_sum.3275: f32[], reduce_sum.3276: f32[]) -> f32[] {
  %reduce_sum.3275 = f32[] parameter(0)
  %reduce_sum.3276 = f32[] parameter(1)
  ROOT %reduce_sum.3277 = f32[] add(%reduce_sum.3275, %reduce_sum.3276)
}

%region_1544.38395 (reduce_sum.38392: f32[], reduce_sum.38393: f32[]) -> f32[] {
  %reduce_sum.38392 = f32[] parameter(0)
  %reduce_sum.38393 = f32[] parameter(1)
  ROOT %reduce_sum.38394 = f32[] add(%reduce_sum.38392, %reduce_sum.38393)
}

%region_1544.38395.clone (reduce_sum.3278: f32[], reduce_sum.3279: f32[]) -> f32[] {
  %reduce_sum.3278 = f32[] parameter(0)
  %reduce_sum.3279 = f32[] parameter(1)
  ROOT %reduce_sum.3280 = f32[] add(%reduce_sum.3278, %reduce_sum.3279)
}

%region_1545.38404 (reduce_sum.38401: f32[], reduce_sum.38402: f32[]) -> f32[] {
  %reduce_sum.38401 = f32[] parameter(0)
  %reduce_sum.38402 = f32[] parameter(1)
  ROOT %reduce_sum.38403 = f32[] add(%reduce_sum.38401, %reduce_sum.38402)
}

%region_1545.38404.clone (reduce_sum.3281: f32[], reduce_sum.3282: f32[]) -> f32[] {
  %reduce_sum.3281 = f32[] parameter(0)
  %reduce_sum.3282 = f32[] parameter(1)
  ROOT %reduce_sum.3283 = f32[] add(%reduce_sum.3281, %reduce_sum.3282)
}

%region_1546.38413 (reduce_sum.38410: f32[], reduce_sum.38411: f32[]) -> f32[] {
  %reduce_sum.38410 = f32[] parameter(0)
  %reduce_sum.38411 = f32[] parameter(1)
  ROOT %reduce_sum.38412 = f32[] add(%reduce_sum.38410, %reduce_sum.38411)
}

%region_1546.38413.clone (reduce_sum.3284: f32[], reduce_sum.3285: f32[]) -> f32[] {
  %reduce_sum.3284 = f32[] parameter(0)
  %reduce_sum.3285 = f32[] parameter(1)
  ROOT %reduce_sum.3286 = f32[] add(%reduce_sum.3284, %reduce_sum.3285)
}

%region_1547.38422 (reduce_sum.38419: f32[], reduce_sum.38420: f32[]) -> f32[] {
  %reduce_sum.38419 = f32[] parameter(0)
  %reduce_sum.38420 = f32[] parameter(1)
  ROOT %reduce_sum.38421 = f32[] add(%reduce_sum.38419, %reduce_sum.38420)
}

%region_1547.38422.clone (reduce_sum.3287: f32[], reduce_sum.3288: f32[]) -> f32[] {
  %reduce_sum.3287 = f32[] parameter(0)
  %reduce_sum.3288 = f32[] parameter(1)
  ROOT %reduce_sum.3289 = f32[] add(%reduce_sum.3287, %reduce_sum.3288)
}

%region_1548.38431 (reduce_sum.38428: f32[], reduce_sum.38429: f32[]) -> f32[] {
  %reduce_sum.38428 = f32[] parameter(0)
  %reduce_sum.38429 = f32[] parameter(1)
  ROOT %reduce_sum.38430 = f32[] add(%reduce_sum.38428, %reduce_sum.38429)
}

%region_1549.38440 (reduce_sum.38437: f32[], reduce_sum.38438: f32[]) -> f32[] {
  %reduce_sum.38437 = f32[] parameter(0)
  %reduce_sum.38438 = f32[] parameter(1)
  ROOT %reduce_sum.38439 = f32[] add(%reduce_sum.38437, %reduce_sum.38438)
}

%region_1550.38449 (reduce_sum.38446: f32[], reduce_sum.38447: f32[]) -> f32[] {
  %reduce_sum.38446 = f32[] parameter(0)
  %reduce_sum.38447 = f32[] parameter(1)
  ROOT %reduce_sum.38448 = f32[] add(%reduce_sum.38446, %reduce_sum.38447)
}

%region_1550.38449.clone (reduce_sum.3290: f32[], reduce_sum.3294: f32[]) -> f32[] {
  %reduce_sum.3290 = f32[] parameter(0)
  %reduce_sum.3294 = f32[] parameter(1)
  ROOT %reduce_sum.3298 = f32[] add(%reduce_sum.3290, %reduce_sum.3294)
}

%region_1551.38458 (reduce_sum.38455: f32[], reduce_sum.38456: f32[]) -> f32[] {
  %reduce_sum.38455 = f32[] parameter(0)
  %reduce_sum.38456 = f32[] parameter(1)
  ROOT %reduce_sum.38457 = f32[] add(%reduce_sum.38455, %reduce_sum.38456)
}

%region_1551.38458.clone (reduce_sum.3300: f32[], reduce_sum.3301: f32[]) -> f32[] {
  %reduce_sum.3300 = f32[] parameter(0)
  %reduce_sum.3301 = f32[] parameter(1)
  ROOT %reduce_sum.3302 = f32[] add(%reduce_sum.3300, %reduce_sum.3301)
}

%region_1552.38467 (reduce_sum.38464: f32[], reduce_sum.38465: f32[]) -> f32[] {
  %reduce_sum.38464 = f32[] parameter(0)
  %reduce_sum.38465 = f32[] parameter(1)
  ROOT %reduce_sum.38466 = f32[] add(%reduce_sum.38464, %reduce_sum.38465)
}

%region_1552.38467.clone (reduce_sum.3303: f32[], reduce_sum.3307: f32[]) -> f32[] {
  %reduce_sum.3303 = f32[] parameter(0)
  %reduce_sum.3307 = f32[] parameter(1)
  ROOT %reduce_sum.3309 = f32[] add(%reduce_sum.3303, %reduce_sum.3307)
}

%region_1553.38476 (reduce_sum.38473: f32[], reduce_sum.38474: f32[]) -> f32[] {
  %reduce_sum.38473 = f32[] parameter(0)
  %reduce_sum.38474 = f32[] parameter(1)
  ROOT %reduce_sum.38475 = f32[] add(%reduce_sum.38473, %reduce_sum.38474)
}

%region_1553.38476.clone (reduce_sum.3310: f32[], reduce_sum.3311: f32[]) -> f32[] {
  %reduce_sum.3310 = f32[] parameter(0)
  %reduce_sum.3311 = f32[] parameter(1)
  ROOT %reduce_sum.3312 = f32[] add(%reduce_sum.3310, %reduce_sum.3311)
}

%region_1554.38485 (reduce_sum.38482: f32[], reduce_sum.38483: f32[]) -> f32[] {
  %reduce_sum.38482 = f32[] parameter(0)
  %reduce_sum.38483 = f32[] parameter(1)
  ROOT %reduce_sum.38484 = f32[] add(%reduce_sum.38482, %reduce_sum.38483)
}

%region_1554.38485.clone (reduce_sum.3313: f32[], reduce_sum.3314: f32[]) -> f32[] {
  %reduce_sum.3313 = f32[] parameter(0)
  %reduce_sum.3314 = f32[] parameter(1)
  ROOT %reduce_sum.3315 = f32[] add(%reduce_sum.3313, %reduce_sum.3314)
}

%region_1555.38494 (reduce_sum.38491: f32[], reduce_sum.38492: f32[]) -> f32[] {
  %reduce_sum.38491 = f32[] parameter(0)
  %reduce_sum.38492 = f32[] parameter(1)
  ROOT %reduce_sum.38493 = f32[] add(%reduce_sum.38491, %reduce_sum.38492)
}

%region_1555.38494.clone (reduce_sum.3316: f32[], reduce_sum.3317: f32[]) -> f32[] {
  %reduce_sum.3316 = f32[] parameter(0)
  %reduce_sum.3317 = f32[] parameter(1)
  ROOT %reduce_sum.3318 = f32[] add(%reduce_sum.3316, %reduce_sum.3317)
}

%region_1556.38503 (reduce_sum.38500: f32[], reduce_sum.38501: f32[]) -> f32[] {
  %reduce_sum.38500 = f32[] parameter(0)
  %reduce_sum.38501 = f32[] parameter(1)
  ROOT %reduce_sum.38502 = f32[] add(%reduce_sum.38500, %reduce_sum.38501)
}

%region_1556.38503.clone (reduce_sum.3319: f32[], reduce_sum.3320: f32[]) -> f32[] {
  %reduce_sum.3319 = f32[] parameter(0)
  %reduce_sum.3320 = f32[] parameter(1)
  ROOT %reduce_sum.3321 = f32[] add(%reduce_sum.3319, %reduce_sum.3320)
}

%region_1557.38512 (reduce_sum.38509: f32[], reduce_sum.38510: f32[]) -> f32[] {
  %reduce_sum.38509 = f32[] parameter(0)
  %reduce_sum.38510 = f32[] parameter(1)
  ROOT %reduce_sum.38511 = f32[] add(%reduce_sum.38509, %reduce_sum.38510)
}

%region_1557.38512.clone (reduce_sum.3322: f32[], reduce_sum.3323: f32[]) -> f32[] {
  %reduce_sum.3322 = f32[] parameter(0)
  %reduce_sum.3323 = f32[] parameter(1)
  ROOT %reduce_sum.3324 = f32[] add(%reduce_sum.3322, %reduce_sum.3323)
}

%region_1558.38521 (reduce_sum.38518: f32[], reduce_sum.38519: f32[]) -> f32[] {
  %reduce_sum.38518 = f32[] parameter(0)
  %reduce_sum.38519 = f32[] parameter(1)
  ROOT %reduce_sum.38520 = f32[] add(%reduce_sum.38518, %reduce_sum.38519)
}

%region_1559.38530 (reduce_sum.38527: f32[], reduce_sum.38528: f32[]) -> f32[] {
  %reduce_sum.38527 = f32[] parameter(0)
  %reduce_sum.38528 = f32[] parameter(1)
  ROOT %reduce_sum.38529 = f32[] add(%reduce_sum.38527, %reduce_sum.38528)
}

%region_1560.38539 (reduce_sum.38536: f32[], reduce_sum.38537: f32[]) -> f32[] {
  %reduce_sum.38536 = f32[] parameter(0)
  %reduce_sum.38537 = f32[] parameter(1)
  ROOT %reduce_sum.38538 = f32[] add(%reduce_sum.38536, %reduce_sum.38537)
}

%region_1560.38539.clone (reduce_sum.3325: f32[], reduce_sum.3326: f32[]) -> f32[] {
  %reduce_sum.3325 = f32[] parameter(0)
  %reduce_sum.3326 = f32[] parameter(1)
  ROOT %reduce_sum.3327 = f32[] add(%reduce_sum.3325, %reduce_sum.3326)
}

%region_1561.38548 (reduce_sum.38545: f32[], reduce_sum.38546: f32[]) -> f32[] {
  %reduce_sum.38545 = f32[] parameter(0)
  %reduce_sum.38546 = f32[] parameter(1)
  ROOT %reduce_sum.38547 = f32[] add(%reduce_sum.38545, %reduce_sum.38546)
}

%region_1561.38548.clone (reduce_sum.3328: f32[], reduce_sum.3329: f32[]) -> f32[] {
  %reduce_sum.3328 = f32[] parameter(0)
  %reduce_sum.3329 = f32[] parameter(1)
  ROOT %reduce_sum.3330 = f32[] add(%reduce_sum.3328, %reduce_sum.3329)
}

%region_1562.38557 (reduce_sum.38554: f32[], reduce_sum.38555: f32[]) -> f32[] {
  %reduce_sum.38554 = f32[] parameter(0)
  %reduce_sum.38555 = f32[] parameter(1)
  ROOT %reduce_sum.38556 = f32[] add(%reduce_sum.38554, %reduce_sum.38555)
}

%region_1562.38557.clone (reduce_sum.3331: f32[], reduce_sum.3332: f32[]) -> f32[] {
  %reduce_sum.3331 = f32[] parameter(0)
  %reduce_sum.3332 = f32[] parameter(1)
  ROOT %reduce_sum.3333 = f32[] add(%reduce_sum.3331, %reduce_sum.3332)
}

%region_1563.38566 (reduce_sum.38563: f32[], reduce_sum.38564: f32[]) -> f32[] {
  %reduce_sum.38563 = f32[] parameter(0)
  %reduce_sum.38564 = f32[] parameter(1)
  ROOT %reduce_sum.38565 = f32[] add(%reduce_sum.38563, %reduce_sum.38564)
}

%region_1563.38566.clone (reduce_sum.3334: f32[], reduce_sum.3335: f32[]) -> f32[] {
  %reduce_sum.3334 = f32[] parameter(0)
  %reduce_sum.3335 = f32[] parameter(1)
  ROOT %reduce_sum.3336 = f32[] add(%reduce_sum.3334, %reduce_sum.3335)
}

%region_1564.38575 (reduce_sum.38572: f32[], reduce_sum.38573: f32[]) -> f32[] {
  %reduce_sum.38572 = f32[] parameter(0)
  %reduce_sum.38573 = f32[] parameter(1)
  ROOT %reduce_sum.38574 = f32[] add(%reduce_sum.38572, %reduce_sum.38573)
}

%region_1564.38575.clone (reduce_sum.3337: f32[], reduce_sum.3338: f32[]) -> f32[] {
  %reduce_sum.3337 = f32[] parameter(0)
  %reduce_sum.3338 = f32[] parameter(1)
  ROOT %reduce_sum.3339 = f32[] add(%reduce_sum.3337, %reduce_sum.3338)
}

%region_1565.38584 (reduce_sum.38581: f32[], reduce_sum.38582: f32[]) -> f32[] {
  %reduce_sum.38581 = f32[] parameter(0)
  %reduce_sum.38582 = f32[] parameter(1)
  ROOT %reduce_sum.38583 = f32[] add(%reduce_sum.38581, %reduce_sum.38582)
}

%region_1565.38584.clone (reduce_sum.3340: f32[], reduce_sum.3341: f32[]) -> f32[] {
  %reduce_sum.3340 = f32[] parameter(0)
  %reduce_sum.3341 = f32[] parameter(1)
  ROOT %reduce_sum.3342 = f32[] add(%reduce_sum.3340, %reduce_sum.3341)
}

%region_1566.38593 (reduce_sum.38590: f32[], reduce_sum.38591: f32[]) -> f32[] {
  %reduce_sum.38590 = f32[] parameter(0)
  %reduce_sum.38591 = f32[] parameter(1)
  ROOT %reduce_sum.38592 = f32[] add(%reduce_sum.38590, %reduce_sum.38591)
}

%region_1566.38593.clone (reduce_sum.3346: f32[], reduce_sum.3348: f32[]) -> f32[] {
  %reduce_sum.3346 = f32[] parameter(0)
  %reduce_sum.3348 = f32[] parameter(1)
  ROOT %reduce_sum.3349 = f32[] add(%reduce_sum.3346, %reduce_sum.3348)
}

%region_1567.38602 (reduce_sum.38599: f32[], reduce_sum.38600: f32[]) -> f32[] {
  %reduce_sum.38599 = f32[] parameter(0)
  %reduce_sum.38600 = f32[] parameter(1)
  ROOT %reduce_sum.38601 = f32[] add(%reduce_sum.38599, %reduce_sum.38600)
}

%region_1567.38602.clone (reduce_sum.3350: f32[], reduce_sum.3351: f32[]) -> f32[] {
  %reduce_sum.3350 = f32[] parameter(0)
  %reduce_sum.3351 = f32[] parameter(1)
  ROOT %reduce_sum.3352 = f32[] add(%reduce_sum.3350, %reduce_sum.3351)
}

%region_1568.38611 (reduce_sum.38608: f32[], reduce_sum.38609: f32[]) -> f32[] {
  %reduce_sum.38608 = f32[] parameter(0)
  %reduce_sum.38609 = f32[] parameter(1)
  ROOT %reduce_sum.38610 = f32[] add(%reduce_sum.38608, %reduce_sum.38609)
}

%region_1569.38620 (reduce_sum.38617: f32[], reduce_sum.38618: f32[]) -> f32[] {
  %reduce_sum.38617 = f32[] parameter(0)
  %reduce_sum.38618 = f32[] parameter(1)
  ROOT %reduce_sum.38619 = f32[] add(%reduce_sum.38617, %reduce_sum.38618)
}

%region_1570.38629 (reduce_sum.38626: f32[], reduce_sum.38627: f32[]) -> f32[] {
  %reduce_sum.38626 = f32[] parameter(0)
  %reduce_sum.38627 = f32[] parameter(1)
  ROOT %reduce_sum.38628 = f32[] add(%reduce_sum.38626, %reduce_sum.38627)
}

%region_1570.38629.clone (reduce_sum.3353: f32[], reduce_sum.3354: f32[]) -> f32[] {
  %reduce_sum.3353 = f32[] parameter(0)
  %reduce_sum.3354 = f32[] parameter(1)
  ROOT %reduce_sum.3355 = f32[] add(%reduce_sum.3353, %reduce_sum.3354)
}

%region_1571.38638 (reduce_sum.38635: f32[], reduce_sum.38636: f32[]) -> f32[] {
  %reduce_sum.38635 = f32[] parameter(0)
  %reduce_sum.38636 = f32[] parameter(1)
  ROOT %reduce_sum.38637 = f32[] add(%reduce_sum.38635, %reduce_sum.38636)
}

%region_1571.38638.clone (reduce_sum.3356: f32[], reduce_sum.3357: f32[]) -> f32[] {
  %reduce_sum.3356 = f32[] parameter(0)
  %reduce_sum.3357 = f32[] parameter(1)
  ROOT %reduce_sum.3358 = f32[] add(%reduce_sum.3356, %reduce_sum.3357)
}

%region_1572.38647 (reduce_sum.38644: f32[], reduce_sum.38645: f32[]) -> f32[] {
  %reduce_sum.38644 = f32[] parameter(0)
  %reduce_sum.38645 = f32[] parameter(1)
  ROOT %reduce_sum.38646 = f32[] add(%reduce_sum.38644, %reduce_sum.38645)
}

%region_1572.38647.clone (reduce_sum.3359: f32[], reduce_sum.3360: f32[]) -> f32[] {
  %reduce_sum.3359 = f32[] parameter(0)
  %reduce_sum.3360 = f32[] parameter(1)
  ROOT %reduce_sum.3361 = f32[] add(%reduce_sum.3359, %reduce_sum.3360)
}

%region_1573.38656 (reduce_sum.38653: f32[], reduce_sum.38654: f32[]) -> f32[] {
  %reduce_sum.38653 = f32[] parameter(0)
  %reduce_sum.38654 = f32[] parameter(1)
  ROOT %reduce_sum.38655 = f32[] add(%reduce_sum.38653, %reduce_sum.38654)
}

%region_1573.38656.clone (reduce_sum.3362: f32[], reduce_sum.3363: f32[]) -> f32[] {
  %reduce_sum.3362 = f32[] parameter(0)
  %reduce_sum.3363 = f32[] parameter(1)
  ROOT %reduce_sum.3364 = f32[] add(%reduce_sum.3362, %reduce_sum.3363)
}

%region_1574.38665 (reduce_sum.38662: f32[], reduce_sum.38663: f32[]) -> f32[] {
  %reduce_sum.38662 = f32[] parameter(0)
  %reduce_sum.38663 = f32[] parameter(1)
  ROOT %reduce_sum.38664 = f32[] add(%reduce_sum.38662, %reduce_sum.38663)
}

%region_1574.38665.clone (reduce_sum.3365: f32[], reduce_sum.3366: f32[]) -> f32[] {
  %reduce_sum.3365 = f32[] parameter(0)
  %reduce_sum.3366 = f32[] parameter(1)
  ROOT %reduce_sum.3367 = f32[] add(%reduce_sum.3365, %reduce_sum.3366)
}

%region_1575.38674 (reduce_sum.38671: f32[], reduce_sum.38672: f32[]) -> f32[] {
  %reduce_sum.38671 = f32[] parameter(0)
  %reduce_sum.38672 = f32[] parameter(1)
  ROOT %reduce_sum.38673 = f32[] add(%reduce_sum.38671, %reduce_sum.38672)
}

%region_1575.38674.clone (reduce_sum.3368: f32[], reduce_sum.3369: f32[]) -> f32[] {
  %reduce_sum.3368 = f32[] parameter(0)
  %reduce_sum.3369 = f32[] parameter(1)
  ROOT %reduce_sum.3370 = f32[] add(%reduce_sum.3368, %reduce_sum.3369)
}

%region_1576.38683 (reduce_sum.38680: f32[], reduce_sum.38681: f32[]) -> f32[] {
  %reduce_sum.38680 = f32[] parameter(0)
  %reduce_sum.38681 = f32[] parameter(1)
  ROOT %reduce_sum.38682 = f32[] add(%reduce_sum.38680, %reduce_sum.38681)
}

%region_1576.38683.clone (reduce_sum.3371: f32[], reduce_sum.3372: f32[]) -> f32[] {
  %reduce_sum.3371 = f32[] parameter(0)
  %reduce_sum.3372 = f32[] parameter(1)
  ROOT %reduce_sum.3373 = f32[] add(%reduce_sum.3371, %reduce_sum.3372)
}

%region_1577.38692 (reduce_sum.38689: f32[], reduce_sum.38690: f32[]) -> f32[] {
  %reduce_sum.38689 = f32[] parameter(0)
  %reduce_sum.38690 = f32[] parameter(1)
  ROOT %reduce_sum.38691 = f32[] add(%reduce_sum.38689, %reduce_sum.38690)
}

%region_1577.38692.clone (reduce_sum.3374: f32[], reduce_sum.3375: f32[]) -> f32[] {
  %reduce_sum.3374 = f32[] parameter(0)
  %reduce_sum.3375 = f32[] parameter(1)
  ROOT %reduce_sum.3376 = f32[] add(%reduce_sum.3374, %reduce_sum.3375)
}

%region_1578.38701 (reduce_sum.38698: f32[], reduce_sum.38699: f32[]) -> f32[] {
  %reduce_sum.38698 = f32[] parameter(0)
  %reduce_sum.38699 = f32[] parameter(1)
  ROOT %reduce_sum.38700 = f32[] add(%reduce_sum.38698, %reduce_sum.38699)
}

%region_1579.38710 (reduce_sum.38707: f32[], reduce_sum.38708: f32[]) -> f32[] {
  %reduce_sum.38707 = f32[] parameter(0)
  %reduce_sum.38708 = f32[] parameter(1)
  ROOT %reduce_sum.38709 = f32[] add(%reduce_sum.38707, %reduce_sum.38708)
}

%region_1580.38719 (reduce_sum.38716: f32[], reduce_sum.38717: f32[]) -> f32[] {
  %reduce_sum.38716 = f32[] parameter(0)
  %reduce_sum.38717 = f32[] parameter(1)
  ROOT %reduce_sum.38718 = f32[] add(%reduce_sum.38716, %reduce_sum.38717)
}

%region_1580.38719.clone (reduce_sum.3377: f32[], reduce_sum.3378: f32[]) -> f32[] {
  %reduce_sum.3377 = f32[] parameter(0)
  %reduce_sum.3378 = f32[] parameter(1)
  ROOT %reduce_sum.3379 = f32[] add(%reduce_sum.3377, %reduce_sum.3378)
}

%region_1581.38728 (reduce_sum.38725: f32[], reduce_sum.38726: f32[]) -> f32[] {
  %reduce_sum.38725 = f32[] parameter(0)
  %reduce_sum.38726 = f32[] parameter(1)
  ROOT %reduce_sum.38727 = f32[] add(%reduce_sum.38725, %reduce_sum.38726)
}

%region_1581.38728.clone (reduce_sum.3380: f32[], reduce_sum.3381: f32[]) -> f32[] {
  %reduce_sum.3380 = f32[] parameter(0)
  %reduce_sum.3381 = f32[] parameter(1)
  ROOT %reduce_sum.3382 = f32[] add(%reduce_sum.3380, %reduce_sum.3381)
}

%region_1582.38737 (reduce_sum.38734: f32[], reduce_sum.38735: f32[]) -> f32[] {
  %reduce_sum.38734 = f32[] parameter(0)
  %reduce_sum.38735 = f32[] parameter(1)
  ROOT %reduce_sum.38736 = f32[] add(%reduce_sum.38734, %reduce_sum.38735)
}

%region_1582.38737.clone (reduce_sum.3383: f32[], reduce_sum.3384: f32[]) -> f32[] {
  %reduce_sum.3383 = f32[] parameter(0)
  %reduce_sum.3384 = f32[] parameter(1)
  ROOT %reduce_sum.3388 = f32[] add(%reduce_sum.3383, %reduce_sum.3384)
}

%region_1583.38746 (reduce_sum.38743: f32[], reduce_sum.38744: f32[]) -> f32[] {
  %reduce_sum.38743 = f32[] parameter(0)
  %reduce_sum.38744 = f32[] parameter(1)
  ROOT %reduce_sum.38745 = f32[] add(%reduce_sum.38743, %reduce_sum.38744)
}

%region_1583.38746.clone (reduce_sum.3391: f32[], reduce_sum.3392: f32[]) -> f32[] {
  %reduce_sum.3391 = f32[] parameter(0)
  %reduce_sum.3392 = f32[] parameter(1)
  ROOT %reduce_sum.3393 = f32[] add(%reduce_sum.3391, %reduce_sum.3392)
}

%region_1584.38755 (reduce_sum.38752: f32[], reduce_sum.38753: f32[]) -> f32[] {
  %reduce_sum.38752 = f32[] parameter(0)
  %reduce_sum.38753 = f32[] parameter(1)
  ROOT %reduce_sum.38754 = f32[] add(%reduce_sum.38752, %reduce_sum.38753)
}

%region_1584.38755.clone (reduce_sum.3397: f32[], reduce_sum.3400: f32[]) -> f32[] {
  %reduce_sum.3397 = f32[] parameter(0)
  %reduce_sum.3400 = f32[] parameter(1)
  ROOT %reduce_sum.3401 = f32[] add(%reduce_sum.3397, %reduce_sum.3400)
}

%region_1585.38764 (reduce_sum.38761: f32[], reduce_sum.38762: f32[]) -> f32[] {
  %reduce_sum.38761 = f32[] parameter(0)
  %reduce_sum.38762 = f32[] parameter(1)
  ROOT %reduce_sum.38763 = f32[] add(%reduce_sum.38761, %reduce_sum.38762)
}

%region_1585.38764.clone (reduce_sum.3402: f32[], reduce_sum.3403: f32[]) -> f32[] {
  %reduce_sum.3402 = f32[] parameter(0)
  %reduce_sum.3403 = f32[] parameter(1)
  ROOT %reduce_sum.3404 = f32[] add(%reduce_sum.3402, %reduce_sum.3403)
}

%region_1586.38773 (reduce_sum.38770: f32[], reduce_sum.38771: f32[]) -> f32[] {
  %reduce_sum.38770 = f32[] parameter(0)
  %reduce_sum.38771 = f32[] parameter(1)
  ROOT %reduce_sum.38772 = f32[] add(%reduce_sum.38770, %reduce_sum.38771)
}

%region_1586.38773.clone (reduce_sum.3405: f32[], reduce_sum.3406: f32[]) -> f32[] {
  %reduce_sum.3405 = f32[] parameter(0)
  %reduce_sum.3406 = f32[] parameter(1)
  ROOT %reduce_sum.3407 = f32[] add(%reduce_sum.3405, %reduce_sum.3406)
}

%region_1587.38782 (reduce_sum.38779: f32[], reduce_sum.38780: f32[]) -> f32[] {
  %reduce_sum.38779 = f32[] parameter(0)
  %reduce_sum.38780 = f32[] parameter(1)
  ROOT %reduce_sum.38781 = f32[] add(%reduce_sum.38779, %reduce_sum.38780)
}

%region_1587.38782.clone (reduce_sum.3408: f32[], reduce_sum.3409: f32[]) -> f32[] {
  %reduce_sum.3408 = f32[] parameter(0)
  %reduce_sum.3409 = f32[] parameter(1)
  ROOT %reduce_sum.3410 = f32[] add(%reduce_sum.3408, %reduce_sum.3409)
}

%region_1588.38791 (reduce_sum.38788: f32[], reduce_sum.38789: f32[]) -> f32[] {
  %reduce_sum.38788 = f32[] parameter(0)
  %reduce_sum.38789 = f32[] parameter(1)
  ROOT %reduce_sum.38790 = f32[] add(%reduce_sum.38788, %reduce_sum.38789)
}

%region_1589.38800 (reduce_sum.38797: f32[], reduce_sum.38798: f32[]) -> f32[] {
  %reduce_sum.38797 = f32[] parameter(0)
  %reduce_sum.38798 = f32[] parameter(1)
  ROOT %reduce_sum.38799 = f32[] add(%reduce_sum.38797, %reduce_sum.38798)
}

%region_1590.38809 (reduce_sum.38806: f32[], reduce_sum.38807: f32[]) -> f32[] {
  %reduce_sum.38806 = f32[] parameter(0)
  %reduce_sum.38807 = f32[] parameter(1)
  ROOT %reduce_sum.38808 = f32[] add(%reduce_sum.38806, %reduce_sum.38807)
}

%region_1590.38809.clone (reduce_sum.3411: f32[], reduce_sum.3412: f32[]) -> f32[] {
  %reduce_sum.3411 = f32[] parameter(0)
  %reduce_sum.3412 = f32[] parameter(1)
  ROOT %reduce_sum.3413 = f32[] add(%reduce_sum.3411, %reduce_sum.3412)
}

%region_1591.38818 (reduce_sum.38815: f32[], reduce_sum.38816: f32[]) -> f32[] {
  %reduce_sum.38815 = f32[] parameter(0)
  %reduce_sum.38816 = f32[] parameter(1)
  ROOT %reduce_sum.38817 = f32[] add(%reduce_sum.38815, %reduce_sum.38816)
}

%region_1591.38818.clone (reduce_sum.3414: f32[], reduce_sum.3418: f32[]) -> f32[] {
  %reduce_sum.3414 = f32[] parameter(0)
  %reduce_sum.3418 = f32[] parameter(1)
  ROOT %reduce_sum.3420 = f32[] add(%reduce_sum.3414, %reduce_sum.3418)
}

%region_1592.38827 (reduce_sum.38824: f32[], reduce_sum.38825: f32[]) -> f32[] {
  %reduce_sum.38824 = f32[] parameter(0)
  %reduce_sum.38825 = f32[] parameter(1)
  ROOT %reduce_sum.38826 = f32[] add(%reduce_sum.38824, %reduce_sum.38825)
}

%region_1592.38827.clone (reduce_sum.3421: f32[], reduce_sum.3422: f32[]) -> f32[] {
  %reduce_sum.3421 = f32[] parameter(0)
  %reduce_sum.3422 = f32[] parameter(1)
  ROOT %reduce_sum.3423 = f32[] add(%reduce_sum.3421, %reduce_sum.3422)
}

%region_1593.38836 (reduce_sum.38833: f32[], reduce_sum.38834: f32[]) -> f32[] {
  %reduce_sum.38833 = f32[] parameter(0)
  %reduce_sum.38834 = f32[] parameter(1)
  ROOT %reduce_sum.38835 = f32[] add(%reduce_sum.38833, %reduce_sum.38834)
}

%region_1593.38836.clone (reduce_sum.3424: f32[], reduce_sum.3425: f32[]) -> f32[] {
  %reduce_sum.3424 = f32[] parameter(0)
  %reduce_sum.3425 = f32[] parameter(1)
  ROOT %reduce_sum.3426 = f32[] add(%reduce_sum.3424, %reduce_sum.3425)
}

%region_1594.38845 (reduce_sum.38842: f32[], reduce_sum.38843: f32[]) -> f32[] {
  %reduce_sum.38842 = f32[] parameter(0)
  %reduce_sum.38843 = f32[] parameter(1)
  ROOT %reduce_sum.38844 = f32[] add(%reduce_sum.38842, %reduce_sum.38843)
}

%region_1594.38845.clone (reduce_sum.3427: f32[], reduce_sum.3428: f32[]) -> f32[] {
  %reduce_sum.3427 = f32[] parameter(0)
  %reduce_sum.3428 = f32[] parameter(1)
  ROOT %reduce_sum.3429 = f32[] add(%reduce_sum.3427, %reduce_sum.3428)
}

%region_1595.38854 (reduce_sum.38851: f32[], reduce_sum.38852: f32[]) -> f32[] {
  %reduce_sum.38851 = f32[] parameter(0)
  %reduce_sum.38852 = f32[] parameter(1)
  ROOT %reduce_sum.38853 = f32[] add(%reduce_sum.38851, %reduce_sum.38852)
}

%region_1595.38854.clone (reduce_sum.3430: f32[], reduce_sum.3431: f32[]) -> f32[] {
  %reduce_sum.3430 = f32[] parameter(0)
  %reduce_sum.3431 = f32[] parameter(1)
  ROOT %reduce_sum.3432 = f32[] add(%reduce_sum.3430, %reduce_sum.3431)
}

%region_1596.38863 (reduce_sum.38860: f32[], reduce_sum.38861: f32[]) -> f32[] {
  %reduce_sum.38860 = f32[] parameter(0)
  %reduce_sum.38861 = f32[] parameter(1)
  ROOT %reduce_sum.38862 = f32[] add(%reduce_sum.38860, %reduce_sum.38861)
}

%region_1596.38863.clone (reduce_sum.3433: f32[], reduce_sum.3434: f32[]) -> f32[] {
  %reduce_sum.3433 = f32[] parameter(0)
  %reduce_sum.3434 = f32[] parameter(1)
  ROOT %reduce_sum.3435 = f32[] add(%reduce_sum.3433, %reduce_sum.3434)
}

%region_1597.38872 (reduce_sum.38869: f32[], reduce_sum.38870: f32[]) -> f32[] {
  %reduce_sum.38869 = f32[] parameter(0)
  %reduce_sum.38870 = f32[] parameter(1)
  ROOT %reduce_sum.38871 = f32[] add(%reduce_sum.38869, %reduce_sum.38870)
}

%region_1597.38872.clone (reduce_sum.3436: f32[], reduce_sum.3437: f32[]) -> f32[] {
  %reduce_sum.3436 = f32[] parameter(0)
  %reduce_sum.3437 = f32[] parameter(1)
  ROOT %reduce_sum.3438 = f32[] add(%reduce_sum.3436, %reduce_sum.3437)
}

%region_1598.38881 (reduce_sum.38878: f32[], reduce_sum.38879: f32[]) -> f32[] {
  %reduce_sum.38878 = f32[] parameter(0)
  %reduce_sum.38879 = f32[] parameter(1)
  ROOT %reduce_sum.38880 = f32[] add(%reduce_sum.38878, %reduce_sum.38879)
}

%region_1599.38890 (reduce_sum.38887: f32[], reduce_sum.38888: f32[]) -> f32[] {
  %reduce_sum.38887 = f32[] parameter(0)
  %reduce_sum.38888 = f32[] parameter(1)
  ROOT %reduce_sum.38889 = f32[] add(%reduce_sum.38887, %reduce_sum.38888)
}

%region_1600.38899 (reduce_sum.38896: f32[], reduce_sum.38897: f32[]) -> f32[] {
  %reduce_sum.38896 = f32[] parameter(0)
  %reduce_sum.38897 = f32[] parameter(1)
  ROOT %reduce_sum.38898 = f32[] add(%reduce_sum.38896, %reduce_sum.38897)
}

%region_1600.38899.clone (reduce_sum.3439: f32[], reduce_sum.3440: f32[]) -> f32[] {
  %reduce_sum.3439 = f32[] parameter(0)
  %reduce_sum.3440 = f32[] parameter(1)
  ROOT %reduce_sum.3441 = f32[] add(%reduce_sum.3439, %reduce_sum.3440)
}

%region_1601.38908 (reduce_sum.38905: f32[], reduce_sum.38906: f32[]) -> f32[] {
  %reduce_sum.38905 = f32[] parameter(0)
  %reduce_sum.38906 = f32[] parameter(1)
  ROOT %reduce_sum.38907 = f32[] add(%reduce_sum.38905, %reduce_sum.38906)
}

%region_1601.38908.clone (reduce_sum.3442: f32[], reduce_sum.3443: f32[]) -> f32[] {
  %reduce_sum.3442 = f32[] parameter(0)
  %reduce_sum.3443 = f32[] parameter(1)
  ROOT %reduce_sum.3444 = f32[] add(%reduce_sum.3442, %reduce_sum.3443)
}

%region_1602.38917 (reduce_sum.38914: f32[], reduce_sum.38915: f32[]) -> f32[] {
  %reduce_sum.38914 = f32[] parameter(0)
  %reduce_sum.38915 = f32[] parameter(1)
  ROOT %reduce_sum.38916 = f32[] add(%reduce_sum.38914, %reduce_sum.38915)
}

%region_1602.38917.clone (reduce_sum.3445: f32[], reduce_sum.3446: f32[]) -> f32[] {
  %reduce_sum.3445 = f32[] parameter(0)
  %reduce_sum.3446 = f32[] parameter(1)
  ROOT %reduce_sum.3447 = f32[] add(%reduce_sum.3445, %reduce_sum.3446)
}

%region_1603.38926 (reduce_sum.38923: f32[], reduce_sum.38924: f32[]) -> f32[] {
  %reduce_sum.38923 = f32[] parameter(0)
  %reduce_sum.38924 = f32[] parameter(1)
  ROOT %reduce_sum.38925 = f32[] add(%reduce_sum.38923, %reduce_sum.38924)
}

%region_1603.38926.clone (reduce_sum.3448: f32[], reduce_sum.3449: f32[]) -> f32[] {
  %reduce_sum.3448 = f32[] parameter(0)
  %reduce_sum.3449 = f32[] parameter(1)
  ROOT %reduce_sum.3450 = f32[] add(%reduce_sum.3448, %reduce_sum.3449)
}

%region_1604.38935 (reduce_sum.38932: f32[], reduce_sum.38933: f32[]) -> f32[] {
  %reduce_sum.38932 = f32[] parameter(0)
  %reduce_sum.38933 = f32[] parameter(1)
  ROOT %reduce_sum.38934 = f32[] add(%reduce_sum.38932, %reduce_sum.38933)
}

%region_1604.38935.clone (reduce_sum.3451: f32[], reduce_sum.3452: f32[]) -> f32[] {
  %reduce_sum.3451 = f32[] parameter(0)
  %reduce_sum.3452 = f32[] parameter(1)
  ROOT %reduce_sum.3453 = f32[] add(%reduce_sum.3451, %reduce_sum.3452)
}

%region_1605.38944 (reduce_sum.38941: f32[], reduce_sum.38942: f32[]) -> f32[] {
  %reduce_sum.38941 = f32[] parameter(0)
  %reduce_sum.38942 = f32[] parameter(1)
  ROOT %reduce_sum.38943 = f32[] add(%reduce_sum.38941, %reduce_sum.38942)
}

%region_1605.38944.clone (reduce_sum.3454: f32[], reduce_sum.3455: f32[]) -> f32[] {
  %reduce_sum.3454 = f32[] parameter(0)
  %reduce_sum.3455 = f32[] parameter(1)
  ROOT %reduce_sum.3456 = f32[] add(%reduce_sum.3454, %reduce_sum.3455)
}

%region_1606.38953 (reduce_sum.38950: f32[], reduce_sum.38951: f32[]) -> f32[] {
  %reduce_sum.38950 = f32[] parameter(0)
  %reduce_sum.38951 = f32[] parameter(1)
  ROOT %reduce_sum.38952 = f32[] add(%reduce_sum.38950, %reduce_sum.38951)
}

%region_1606.38953.clone (reduce_sum.3457: f32[], reduce_sum.3458: f32[]) -> f32[] {
  %reduce_sum.3457 = f32[] parameter(0)
  %reduce_sum.3458 = f32[] parameter(1)
  ROOT %reduce_sum.3459 = f32[] add(%reduce_sum.3457, %reduce_sum.3458)
}

%region_1607.38962 (reduce_sum.38959: f32[], reduce_sum.38960: f32[]) -> f32[] {
  %reduce_sum.38959 = f32[] parameter(0)
  %reduce_sum.38960 = f32[] parameter(1)
  ROOT %reduce_sum.38961 = f32[] add(%reduce_sum.38959, %reduce_sum.38960)
}

%region_1607.38962.clone (reduce_sum.3460: f32[], reduce_sum.3461: f32[]) -> f32[] {
  %reduce_sum.3460 = f32[] parameter(0)
  %reduce_sum.3461 = f32[] parameter(1)
  ROOT %reduce_sum.3462 = f32[] add(%reduce_sum.3460, %reduce_sum.3461)
}

%region_1608.38971 (reduce_sum.38968: f32[], reduce_sum.38969: f32[]) -> f32[] {
  %reduce_sum.38968 = f32[] parameter(0)
  %reduce_sum.38969 = f32[] parameter(1)
  ROOT %reduce_sum.38970 = f32[] add(%reduce_sum.38968, %reduce_sum.38969)
}

%region_1609.38980 (reduce_sum.38977: f32[], reduce_sum.38978: f32[]) -> f32[] {
  %reduce_sum.38977 = f32[] parameter(0)
  %reduce_sum.38978 = f32[] parameter(1)
  ROOT %reduce_sum.38979 = f32[] add(%reduce_sum.38977, %reduce_sum.38978)
}

%region_1610.38989 (reduce_sum.38986: f32[], reduce_sum.38987: f32[]) -> f32[] {
  %reduce_sum.38986 = f32[] parameter(0)
  %reduce_sum.38987 = f32[] parameter(1)
  ROOT %reduce_sum.38988 = f32[] add(%reduce_sum.38986, %reduce_sum.38987)
}

%region_1610.38989.clone (reduce_sum.3463: f32[], reduce_sum.3464: f32[]) -> f32[] {
  %reduce_sum.3463 = f32[] parameter(0)
  %reduce_sum.3464 = f32[] parameter(1)
  ROOT %reduce_sum.3465 = f32[] add(%reduce_sum.3463, %reduce_sum.3464)
}

%region_1611.38998 (reduce_sum.38995: f32[], reduce_sum.38996: f32[]) -> f32[] {
  %reduce_sum.38995 = f32[] parameter(0)
  %reduce_sum.38996 = f32[] parameter(1)
  ROOT %reduce_sum.38997 = f32[] add(%reduce_sum.38995, %reduce_sum.38996)
}

%region_1611.38998.clone (reduce_sum.3466: f32[], reduce_sum.3467: f32[]) -> f32[] {
  %reduce_sum.3466 = f32[] parameter(0)
  %reduce_sum.3467 = f32[] parameter(1)
  ROOT %reduce_sum.3468 = f32[] add(%reduce_sum.3466, %reduce_sum.3467)
}

%region_1612.39007 (reduce_sum.39004: f32[], reduce_sum.39005: f32[]) -> f32[] {
  %reduce_sum.39004 = f32[] parameter(0)
  %reduce_sum.39005 = f32[] parameter(1)
  ROOT %reduce_sum.39006 = f32[] add(%reduce_sum.39004, %reduce_sum.39005)
}

%region_1612.39007.clone (reduce_sum.3469: f32[], reduce_sum.3470: f32[]) -> f32[] {
  %reduce_sum.3469 = f32[] parameter(0)
  %reduce_sum.3470 = f32[] parameter(1)
  ROOT %reduce_sum.3471 = f32[] add(%reduce_sum.3469, %reduce_sum.3470)
}

%region_1613.39016 (reduce_sum.39013: f32[], reduce_sum.39014: f32[]) -> f32[] {
  %reduce_sum.39013 = f32[] parameter(0)
  %reduce_sum.39014 = f32[] parameter(1)
  ROOT %reduce_sum.39015 = f32[] add(%reduce_sum.39013, %reduce_sum.39014)
}

%region_1613.39016.clone (reduce_sum.3472: f32[], reduce_sum.3473: f32[]) -> f32[] {
  %reduce_sum.3472 = f32[] parameter(0)
  %reduce_sum.3473 = f32[] parameter(1)
  ROOT %reduce_sum.3474 = f32[] add(%reduce_sum.3472, %reduce_sum.3473)
}

%region_1614.39025 (reduce_sum.39022: f32[], reduce_sum.39023: f32[]) -> f32[] {
  %reduce_sum.39022 = f32[] parameter(0)
  %reduce_sum.39023 = f32[] parameter(1)
  ROOT %reduce_sum.39024 = f32[] add(%reduce_sum.39022, %reduce_sum.39023)
}

%region_1614.39025.clone (reduce_sum.3478: f32[], reduce_sum.3486: f32[]) -> f32[] {
  %reduce_sum.3478 = f32[] parameter(0)
  %reduce_sum.3486 = f32[] parameter(1)
  ROOT %reduce_sum.3488 = f32[] add(%reduce_sum.3478, %reduce_sum.3486)
}

%region_1615.39034 (reduce_sum.39031: f32[], reduce_sum.39032: f32[]) -> f32[] {
  %reduce_sum.39031 = f32[] parameter(0)
  %reduce_sum.39032 = f32[] parameter(1)
  ROOT %reduce_sum.39033 = f32[] add(%reduce_sum.39031, %reduce_sum.39032)
}

%region_1615.39034.clone (reduce_sum.3489: f32[], reduce_sum.3490: f32[]) -> f32[] {
  %reduce_sum.3489 = f32[] parameter(0)
  %reduce_sum.3490 = f32[] parameter(1)
  ROOT %reduce_sum.3491 = f32[] add(%reduce_sum.3489, %reduce_sum.3490)
}

%region_1616.39043 (reduce_sum.39040: f32[], reduce_sum.39041: f32[]) -> f32[] {
  %reduce_sum.39040 = f32[] parameter(0)
  %reduce_sum.39041 = f32[] parameter(1)
  ROOT %reduce_sum.39042 = f32[] add(%reduce_sum.39040, %reduce_sum.39041)
}

%region_1616.39043.clone (reduce_sum.3492: f32[], reduce_sum.3493: f32[]) -> f32[] {
  %reduce_sum.3492 = f32[] parameter(0)
  %reduce_sum.3493 = f32[] parameter(1)
  ROOT %reduce_sum.3494 = f32[] add(%reduce_sum.3492, %reduce_sum.3493)
}

%region_1617.39052 (reduce_sum.39049: f32[], reduce_sum.39050: f32[]) -> f32[] {
  %reduce_sum.39049 = f32[] parameter(0)
  %reduce_sum.39050 = f32[] parameter(1)
  ROOT %reduce_sum.39051 = f32[] add(%reduce_sum.39049, %reduce_sum.39050)
}

%region_1617.39052.clone (reduce_sum.3495: f32[], reduce_sum.3496: f32[]) -> f32[] {
  %reduce_sum.3495 = f32[] parameter(0)
  %reduce_sum.3496 = f32[] parameter(1)
  ROOT %reduce_sum.3497 = f32[] add(%reduce_sum.3495, %reduce_sum.3496)
}

%region_1618.39061 (reduce_sum.39058: f32[], reduce_sum.39059: f32[]) -> f32[] {
  %reduce_sum.39058 = f32[] parameter(0)
  %reduce_sum.39059 = f32[] parameter(1)
  ROOT %reduce_sum.39060 = f32[] add(%reduce_sum.39058, %reduce_sum.39059)
}

%region_1619.39070 (reduce_sum.39067: f32[], reduce_sum.39068: f32[]) -> f32[] {
  %reduce_sum.39067 = f32[] parameter(0)
  %reduce_sum.39068 = f32[] parameter(1)
  ROOT %reduce_sum.39069 = f32[] add(%reduce_sum.39067, %reduce_sum.39068)
}

%region_1620.39079 (reduce_sum.39076: f32[], reduce_sum.39077: f32[]) -> f32[] {
  %reduce_sum.39076 = f32[] parameter(0)
  %reduce_sum.39077 = f32[] parameter(1)
  ROOT %reduce_sum.39078 = f32[] add(%reduce_sum.39076, %reduce_sum.39077)
}

%region_1620.39079.clone (reduce_sum.3498: f32[], reduce_sum.3499: f32[]) -> f32[] {
  %reduce_sum.3498 = f32[] parameter(0)
  %reduce_sum.3499 = f32[] parameter(1)
  ROOT %reduce_sum.3500 = f32[] add(%reduce_sum.3498, %reduce_sum.3499)
}

%region_1621.39088 (reduce_sum.39085: f32[], reduce_sum.39086: f32[]) -> f32[] {
  %reduce_sum.39085 = f32[] parameter(0)
  %reduce_sum.39086 = f32[] parameter(1)
  ROOT %reduce_sum.39087 = f32[] add(%reduce_sum.39085, %reduce_sum.39086)
}

%region_1621.39088.clone (reduce_sum.3501: f32[], reduce_sum.3502: f32[]) -> f32[] {
  %reduce_sum.3501 = f32[] parameter(0)
  %reduce_sum.3502 = f32[] parameter(1)
  ROOT %reduce_sum.3506 = f32[] add(%reduce_sum.3501, %reduce_sum.3502)
}

%region_1622.39097 (reduce_sum.39094: f32[], reduce_sum.39095: f32[]) -> f32[] {
  %reduce_sum.39094 = f32[] parameter(0)
  %reduce_sum.39095 = f32[] parameter(1)
  ROOT %reduce_sum.39096 = f32[] add(%reduce_sum.39094, %reduce_sum.39095)
}

%region_1622.39097.clone (reduce_sum.3508: f32[], reduce_sum.3509: f32[]) -> f32[] {
  %reduce_sum.3508 = f32[] parameter(0)
  %reduce_sum.3509 = f32[] parameter(1)
  ROOT %reduce_sum.3513 = f32[] add(%reduce_sum.3508, %reduce_sum.3509)
}

%region_1623.39106 (reduce_sum.39103: f32[], reduce_sum.39104: f32[]) -> f32[] {
  %reduce_sum.39103 = f32[] parameter(0)
  %reduce_sum.39104 = f32[] parameter(1)
  ROOT %reduce_sum.39105 = f32[] add(%reduce_sum.39103, %reduce_sum.39104)
}

%region_1623.39106.clone (reduce_sum.3515: f32[], reduce_sum.3516: f32[]) -> f32[] {
  %reduce_sum.3515 = f32[] parameter(0)
  %reduce_sum.3516 = f32[] parameter(1)
  ROOT %reduce_sum.3517 = f32[] add(%reduce_sum.3515, %reduce_sum.3516)
}

%region_1624.39115 (reduce_sum.39112: f32[], reduce_sum.39113: f32[]) -> f32[] {
  %reduce_sum.39112 = f32[] parameter(0)
  %reduce_sum.39113 = f32[] parameter(1)
  ROOT %reduce_sum.39114 = f32[] add(%reduce_sum.39112, %reduce_sum.39113)
}

%region_1624.39115.clone (reduce_sum.3518: f32[], reduce_sum.3519: f32[]) -> f32[] {
  %reduce_sum.3518 = f32[] parameter(0)
  %reduce_sum.3519 = f32[] parameter(1)
  ROOT %reduce_sum.3523 = f32[] add(%reduce_sum.3518, %reduce_sum.3519)
}

%region_1625.39124 (reduce_sum.39121: f32[], reduce_sum.39122: f32[]) -> f32[] {
  %reduce_sum.39121 = f32[] parameter(0)
  %reduce_sum.39122 = f32[] parameter(1)
  ROOT %reduce_sum.39123 = f32[] add(%reduce_sum.39121, %reduce_sum.39122)
}

%region_1625.39124.clone (reduce_sum.3525: f32[], reduce_sum.3526: f32[]) -> f32[] {
  %reduce_sum.3525 = f32[] parameter(0)
  %reduce_sum.3526 = f32[] parameter(1)
  ROOT %reduce_sum.3527 = f32[] add(%reduce_sum.3525, %reduce_sum.3526)
}

%region_1626.39133 (reduce_sum.39130: f32[], reduce_sum.39131: f32[]) -> f32[] {
  %reduce_sum.39130 = f32[] parameter(0)
  %reduce_sum.39131 = f32[] parameter(1)
  ROOT %reduce_sum.39132 = f32[] add(%reduce_sum.39130, %reduce_sum.39131)
}

%region_1626.39133.clone (reduce_sum.3528: f32[], reduce_sum.3529: f32[]) -> f32[] {
  %reduce_sum.3528 = f32[] parameter(0)
  %reduce_sum.3529 = f32[] parameter(1)
  ROOT %reduce_sum.3530 = f32[] add(%reduce_sum.3528, %reduce_sum.3529)
}

%region_1627.39142 (reduce_sum.39139: f32[], reduce_sum.39140: f32[]) -> f32[] {
  %reduce_sum.39139 = f32[] parameter(0)
  %reduce_sum.39140 = f32[] parameter(1)
  ROOT %reduce_sum.39141 = f32[] add(%reduce_sum.39139, %reduce_sum.39140)
}

%region_1627.39142.clone (reduce_sum.3531: f32[], reduce_sum.3532: f32[]) -> f32[] {
  %reduce_sum.3531 = f32[] parameter(0)
  %reduce_sum.3532 = f32[] parameter(1)
  ROOT %reduce_sum.3533 = f32[] add(%reduce_sum.3531, %reduce_sum.3532)
}

%region_1628.39151 (reduce_sum.39148: f32[], reduce_sum.39149: f32[]) -> f32[] {
  %reduce_sum.39148 = f32[] parameter(0)
  %reduce_sum.39149 = f32[] parameter(1)
  ROOT %reduce_sum.39150 = f32[] add(%reduce_sum.39148, %reduce_sum.39149)
}

%region_1629.39160 (reduce_sum.39157: f32[], reduce_sum.39158: f32[]) -> f32[] {
  %reduce_sum.39157 = f32[] parameter(0)
  %reduce_sum.39158 = f32[] parameter(1)
  ROOT %reduce_sum.39159 = f32[] add(%reduce_sum.39157, %reduce_sum.39158)
}

%region_1630.39169 (reduce_sum.39166: f32[], reduce_sum.39167: f32[]) -> f32[] {
  %reduce_sum.39166 = f32[] parameter(0)
  %reduce_sum.39167 = f32[] parameter(1)
  ROOT %reduce_sum.39168 = f32[] add(%reduce_sum.39166, %reduce_sum.39167)
}

%region_1630.39169.clone (reduce_sum.3534: f32[], reduce_sum.3535: f32[]) -> f32[] {
  %reduce_sum.3534 = f32[] parameter(0)
  %reduce_sum.3535 = f32[] parameter(1)
  ROOT %reduce_sum.3536 = f32[] add(%reduce_sum.3534, %reduce_sum.3535)
}

%region_1631.39178 (reduce_sum.39175: f32[], reduce_sum.39176: f32[]) -> f32[] {
  %reduce_sum.39175 = f32[] parameter(0)
  %reduce_sum.39176 = f32[] parameter(1)
  ROOT %reduce_sum.39177 = f32[] add(%reduce_sum.39175, %reduce_sum.39176)
}

%region_1631.39178.clone (reduce_sum.3537: f32[], reduce_sum.3538: f32[]) -> f32[] {
  %reduce_sum.3537 = f32[] parameter(0)
  %reduce_sum.3538 = f32[] parameter(1)
  ROOT %reduce_sum.3539 = f32[] add(%reduce_sum.3537, %reduce_sum.3538)
}

%region_1632.39187 (reduce_sum.39184: f32[], reduce_sum.39185: f32[]) -> f32[] {
  %reduce_sum.39184 = f32[] parameter(0)
  %reduce_sum.39185 = f32[] parameter(1)
  ROOT %reduce_sum.39186 = f32[] add(%reduce_sum.39184, %reduce_sum.39185)
}

%region_1632.39187.clone (reduce_sum.3540: f32[], reduce_sum.3544: f32[]) -> f32[] {
  %reduce_sum.3540 = f32[] parameter(0)
  %reduce_sum.3544 = f32[] parameter(1)
  ROOT %reduce_sum.3546 = f32[] add(%reduce_sum.3540, %reduce_sum.3544)
}

%region_1633.39196 (reduce_sum.39193: f32[], reduce_sum.39194: f32[]) -> f32[] {
  %reduce_sum.39193 = f32[] parameter(0)
  %reduce_sum.39194 = f32[] parameter(1)
  ROOT %reduce_sum.39195 = f32[] add(%reduce_sum.39193, %reduce_sum.39194)
}

%region_1633.39196.clone (reduce_sum.3547: f32[], reduce_sum.3548: f32[]) -> f32[] {
  %reduce_sum.3547 = f32[] parameter(0)
  %reduce_sum.3548 = f32[] parameter(1)
  ROOT %reduce_sum.3549 = f32[] add(%reduce_sum.3547, %reduce_sum.3548)
}

%region_1634.39205 (reduce_sum.39202: f32[], reduce_sum.39203: f32[]) -> f32[] {
  %reduce_sum.39202 = f32[] parameter(0)
  %reduce_sum.39203 = f32[] parameter(1)
  ROOT %reduce_sum.39204 = f32[] add(%reduce_sum.39202, %reduce_sum.39203)
}

%region_1634.39205.clone (reduce_sum.3550: f32[], reduce_sum.3551: f32[]) -> f32[] {
  %reduce_sum.3550 = f32[] parameter(0)
  %reduce_sum.3551 = f32[] parameter(1)
  ROOT %reduce_sum.3552 = f32[] add(%reduce_sum.3550, %reduce_sum.3551)
}

%region_1635.39214 (reduce_sum.39211: f32[], reduce_sum.39212: f32[]) -> f32[] {
  %reduce_sum.39211 = f32[] parameter(0)
  %reduce_sum.39212 = f32[] parameter(1)
  ROOT %reduce_sum.39213 = f32[] add(%reduce_sum.39211, %reduce_sum.39212)
}

%region_1635.39214.clone (reduce_sum.3553: f32[], reduce_sum.3554: f32[]) -> f32[] {
  %reduce_sum.3553 = f32[] parameter(0)
  %reduce_sum.3554 = f32[] parameter(1)
  ROOT %reduce_sum.3555 = f32[] add(%reduce_sum.3553, %reduce_sum.3554)
}

%region_1636.39223 (reduce_sum.39220: f32[], reduce_sum.39221: f32[]) -> f32[] {
  %reduce_sum.39220 = f32[] parameter(0)
  %reduce_sum.39221 = f32[] parameter(1)
  ROOT %reduce_sum.39222 = f32[] add(%reduce_sum.39220, %reduce_sum.39221)
}

%region_1636.39223.clone (reduce_sum.3556: f32[], reduce_sum.3557: f32[]) -> f32[] {
  %reduce_sum.3556 = f32[] parameter(0)
  %reduce_sum.3557 = f32[] parameter(1)
  ROOT %reduce_sum.3558 = f32[] add(%reduce_sum.3556, %reduce_sum.3557)
}

%region_1637.39232 (reduce_sum.39229: f32[], reduce_sum.39230: f32[]) -> f32[] {
  %reduce_sum.39229 = f32[] parameter(0)
  %reduce_sum.39230 = f32[] parameter(1)
  ROOT %reduce_sum.39231 = f32[] add(%reduce_sum.39229, %reduce_sum.39230)
}

%region_1637.39232.clone (reduce_sum.3559: f32[], reduce_sum.3560: f32[]) -> f32[] {
  %reduce_sum.3559 = f32[] parameter(0)
  %reduce_sum.3560 = f32[] parameter(1)
  ROOT %reduce_sum.3561 = f32[] add(%reduce_sum.3559, %reduce_sum.3560)
}

%region_1638.39241 (reduce_sum.39238: f32[], reduce_sum.39239: f32[]) -> f32[] {
  %reduce_sum.39238 = f32[] parameter(0)
  %reduce_sum.39239 = f32[] parameter(1)
  ROOT %reduce_sum.39240 = f32[] add(%reduce_sum.39238, %reduce_sum.39239)
}

%region_1639.39250 (reduce_sum.39247: f32[], reduce_sum.39248: f32[]) -> f32[] {
  %reduce_sum.39247 = f32[] parameter(0)
  %reduce_sum.39248 = f32[] parameter(1)
  ROOT %reduce_sum.39249 = f32[] add(%reduce_sum.39247, %reduce_sum.39248)
}

%region_1640.39259 (reduce_sum.39256: f32[], reduce_sum.39257: f32[]) -> f32[] {
  %reduce_sum.39256 = f32[] parameter(0)
  %reduce_sum.39257 = f32[] parameter(1)
  ROOT %reduce_sum.39258 = f32[] add(%reduce_sum.39256, %reduce_sum.39257)
}

%region_1640.39259.clone (reduce_sum.3565: f32[], reduce_sum.3567: f32[]) -> f32[] {
  %reduce_sum.3565 = f32[] parameter(0)
  %reduce_sum.3567 = f32[] parameter(1)
  ROOT %reduce_sum.3568 = f32[] add(%reduce_sum.3565, %reduce_sum.3567)
}

%region_1641.39268 (reduce_sum.39265: f32[], reduce_sum.39266: f32[]) -> f32[] {
  %reduce_sum.39265 = f32[] parameter(0)
  %reduce_sum.39266 = f32[] parameter(1)
  ROOT %reduce_sum.39267 = f32[] add(%reduce_sum.39265, %reduce_sum.39266)
}

%region_1641.39268.clone (reduce_sum.3569: f32[], reduce_sum.3570: f32[]) -> f32[] {
  %reduce_sum.3569 = f32[] parameter(0)
  %reduce_sum.3570 = f32[] parameter(1)
  ROOT %reduce_sum.3571 = f32[] add(%reduce_sum.3569, %reduce_sum.3570)
}

%region_1642.39277 (reduce_sum.39274: f32[], reduce_sum.39275: f32[]) -> f32[] {
  %reduce_sum.39274 = f32[] parameter(0)
  %reduce_sum.39275 = f32[] parameter(1)
  ROOT %reduce_sum.39276 = f32[] add(%reduce_sum.39274, %reduce_sum.39275)
}

%region_1642.39277.clone (reduce_sum.3572: f32[], reduce_sum.3573: f32[]) -> f32[] {
  %reduce_sum.3572 = f32[] parameter(0)
  %reduce_sum.3573 = f32[] parameter(1)
  ROOT %reduce_sum.3574 = f32[] add(%reduce_sum.3572, %reduce_sum.3573)
}

%region_1643.39286 (reduce_sum.39283: f32[], reduce_sum.39284: f32[]) -> f32[] {
  %reduce_sum.39283 = f32[] parameter(0)
  %reduce_sum.39284 = f32[] parameter(1)
  ROOT %reduce_sum.39285 = f32[] add(%reduce_sum.39283, %reduce_sum.39284)
}

%region_1643.39286.clone (reduce_sum.3575: f32[], reduce_sum.3576: f32[]) -> f32[] {
  %reduce_sum.3575 = f32[] parameter(0)
  %reduce_sum.3576 = f32[] parameter(1)
  ROOT %reduce_sum.3577 = f32[] add(%reduce_sum.3575, %reduce_sum.3576)
}

%region_1644.39295 (reduce_sum.39292: f32[], reduce_sum.39293: f32[]) -> f32[] {
  %reduce_sum.39292 = f32[] parameter(0)
  %reduce_sum.39293 = f32[] parameter(1)
  ROOT %reduce_sum.39294 = f32[] add(%reduce_sum.39292, %reduce_sum.39293)
}

%region_1644.39295.clone (reduce_sum.3578: f32[], reduce_sum.3579: f32[]) -> f32[] {
  %reduce_sum.3578 = f32[] parameter(0)
  %reduce_sum.3579 = f32[] parameter(1)
  ROOT %reduce_sum.3580 = f32[] add(%reduce_sum.3578, %reduce_sum.3579)
}

%region_1645.39304 (reduce_sum.39301: f32[], reduce_sum.39302: f32[]) -> f32[] {
  %reduce_sum.39301 = f32[] parameter(0)
  %reduce_sum.39302 = f32[] parameter(1)
  ROOT %reduce_sum.39303 = f32[] add(%reduce_sum.39301, %reduce_sum.39302)
}

%region_1645.39304.clone (reduce_sum.3581: f32[], reduce_sum.3582: f32[]) -> f32[] {
  %reduce_sum.3581 = f32[] parameter(0)
  %reduce_sum.3582 = f32[] parameter(1)
  ROOT %reduce_sum.3583 = f32[] add(%reduce_sum.3581, %reduce_sum.3582)
}

%region_1646.39313 (reduce_sum.39310: f32[], reduce_sum.39311: f32[]) -> f32[] {
  %reduce_sum.39310 = f32[] parameter(0)
  %reduce_sum.39311 = f32[] parameter(1)
  ROOT %reduce_sum.39312 = f32[] add(%reduce_sum.39310, %reduce_sum.39311)
}

%region_1646.39313.clone (reduce_sum.3584: f32[], reduce_sum.3585: f32[]) -> f32[] {
  %reduce_sum.3584 = f32[] parameter(0)
  %reduce_sum.3585 = f32[] parameter(1)
  ROOT %reduce_sum.3586 = f32[] add(%reduce_sum.3584, %reduce_sum.3585)
}

%region_1647.39322 (reduce_sum.39319: f32[], reduce_sum.39320: f32[]) -> f32[] {
  %reduce_sum.39319 = f32[] parameter(0)
  %reduce_sum.39320 = f32[] parameter(1)
  ROOT %reduce_sum.39321 = f32[] add(%reduce_sum.39319, %reduce_sum.39320)
}

%region_1647.39322.clone (reduce_sum.3587: f32[], reduce_sum.3588: f32[]) -> f32[] {
  %reduce_sum.3587 = f32[] parameter(0)
  %reduce_sum.3588 = f32[] parameter(1)
  ROOT %reduce_sum.3589 = f32[] add(%reduce_sum.3587, %reduce_sum.3588)
}

%region_1648.39331 (reduce_sum.39328: f32[], reduce_sum.39329: f32[]) -> f32[] {
  %reduce_sum.39328 = f32[] parameter(0)
  %reduce_sum.39329 = f32[] parameter(1)
  ROOT %reduce_sum.39330 = f32[] add(%reduce_sum.39328, %reduce_sum.39329)
}

%region_1649.39340 (reduce_sum.39337: f32[], reduce_sum.39338: f32[]) -> f32[] {
  %reduce_sum.39337 = f32[] parameter(0)
  %reduce_sum.39338 = f32[] parameter(1)
  ROOT %reduce_sum.39339 = f32[] add(%reduce_sum.39337, %reduce_sum.39338)
}

%region_1650.39349 (reduce_sum.39346: f32[], reduce_sum.39347: f32[]) -> f32[] {
  %reduce_sum.39346 = f32[] parameter(0)
  %reduce_sum.39347 = f32[] parameter(1)
  ROOT %reduce_sum.39348 = f32[] add(%reduce_sum.39346, %reduce_sum.39347)
}

%region_1650.39349.clone (reduce_sum.3590: f32[], reduce_sum.3591: f32[]) -> f32[] {
  %reduce_sum.3590 = f32[] parameter(0)
  %reduce_sum.3591 = f32[] parameter(1)
  ROOT %reduce_sum.3592 = f32[] add(%reduce_sum.3590, %reduce_sum.3591)
}

%region_1651.39358 (reduce_sum.39355: f32[], reduce_sum.39356: f32[]) -> f32[] {
  %reduce_sum.39355 = f32[] parameter(0)
  %reduce_sum.39356 = f32[] parameter(1)
  ROOT %reduce_sum.39357 = f32[] add(%reduce_sum.39355, %reduce_sum.39356)
}

%region_1651.39358.clone (reduce_sum.3593: f32[], reduce_sum.3594: f32[]) -> f32[] {
  %reduce_sum.3593 = f32[] parameter(0)
  %reduce_sum.3594 = f32[] parameter(1)
  ROOT %reduce_sum.3595 = f32[] add(%reduce_sum.3593, %reduce_sum.3594)
}

%region_1652.39367 (reduce_sum.39364: f32[], reduce_sum.39365: f32[]) -> f32[] {
  %reduce_sum.39364 = f32[] parameter(0)
  %reduce_sum.39365 = f32[] parameter(1)
  ROOT %reduce_sum.39366 = f32[] add(%reduce_sum.39364, %reduce_sum.39365)
}

%region_1652.39367.clone (reduce_sum.3596: f32[], reduce_sum.3597: f32[]) -> f32[] {
  %reduce_sum.3596 = f32[] parameter(0)
  %reduce_sum.3597 = f32[] parameter(1)
  ROOT %reduce_sum.3598 = f32[] add(%reduce_sum.3596, %reduce_sum.3597)
}

%region_1653.39376 (reduce_sum.39373: f32[], reduce_sum.39374: f32[]) -> f32[] {
  %reduce_sum.39373 = f32[] parameter(0)
  %reduce_sum.39374 = f32[] parameter(1)
  ROOT %reduce_sum.39375 = f32[] add(%reduce_sum.39373, %reduce_sum.39374)
}

%region_1653.39376.clone (reduce_sum.3602: f32[], reduce_sum.3604: f32[]) -> f32[] {
  %reduce_sum.3602 = f32[] parameter(0)
  %reduce_sum.3604 = f32[] parameter(1)
  ROOT %reduce_sum.3605 = f32[] add(%reduce_sum.3602, %reduce_sum.3604)
}

%region_1654.39385 (reduce_sum.39382: f32[], reduce_sum.39383: f32[]) -> f32[] {
  %reduce_sum.39382 = f32[] parameter(0)
  %reduce_sum.39383 = f32[] parameter(1)
  ROOT %reduce_sum.39384 = f32[] add(%reduce_sum.39382, %reduce_sum.39383)
}

%region_1654.39385.clone (reduce_sum.3606: f32[], reduce_sum.3607: f32[]) -> f32[] {
  %reduce_sum.3606 = f32[] parameter(0)
  %reduce_sum.3607 = f32[] parameter(1)
  ROOT %reduce_sum.3611 = f32[] add(%reduce_sum.3606, %reduce_sum.3607)
}

%region_1655.39394 (reduce_sum.39391: f32[], reduce_sum.39392: f32[]) -> f32[] {
  %reduce_sum.39391 = f32[] parameter(0)
  %reduce_sum.39392 = f32[] parameter(1)
  ROOT %reduce_sum.39393 = f32[] add(%reduce_sum.39391, %reduce_sum.39392)
}

%region_1655.39394.clone (reduce_sum.3613: f32[], reduce_sum.3614: f32[]) -> f32[] {
  %reduce_sum.3613 = f32[] parameter(0)
  %reduce_sum.3614 = f32[] parameter(1)
  ROOT %reduce_sum.3615 = f32[] add(%reduce_sum.3613, %reduce_sum.3614)
}

%region_1656.39403 (reduce_sum.39400: f32[], reduce_sum.39401: f32[]) -> f32[] {
  %reduce_sum.39400 = f32[] parameter(0)
  %reduce_sum.39401 = f32[] parameter(1)
  ROOT %reduce_sum.39402 = f32[] add(%reduce_sum.39400, %reduce_sum.39401)
}

%region_1656.39403.clone (reduce_sum.3616: f32[], reduce_sum.3617: f32[]) -> f32[] {
  %reduce_sum.3616 = f32[] parameter(0)
  %reduce_sum.3617 = f32[] parameter(1)
  ROOT %reduce_sum.3618 = f32[] add(%reduce_sum.3616, %reduce_sum.3617)
}

%region_1657.39412 (reduce_sum.39409: f32[], reduce_sum.39410: f32[]) -> f32[] {
  %reduce_sum.39409 = f32[] parameter(0)
  %reduce_sum.39410 = f32[] parameter(1)
  ROOT %reduce_sum.39411 = f32[] add(%reduce_sum.39409, %reduce_sum.39410)
}

%region_1657.39412.clone (reduce_sum.3619: f32[], reduce_sum.3620: f32[]) -> f32[] {
  %reduce_sum.3619 = f32[] parameter(0)
  %reduce_sum.3620 = f32[] parameter(1)
  ROOT %reduce_sum.3621 = f32[] add(%reduce_sum.3619, %reduce_sum.3620)
}

%region_1658.39421 (reduce_sum.39418: f32[], reduce_sum.39419: f32[]) -> f32[] {
  %reduce_sum.39418 = f32[] parameter(0)
  %reduce_sum.39419 = f32[] parameter(1)
  ROOT %reduce_sum.39420 = f32[] add(%reduce_sum.39418, %reduce_sum.39419)
}

%region_1659.39430 (reduce_sum.39427: f32[], reduce_sum.39428: f32[]) -> f32[] {
  %reduce_sum.39427 = f32[] parameter(0)
  %reduce_sum.39428 = f32[] parameter(1)
  ROOT %reduce_sum.39429 = f32[] add(%reduce_sum.39427, %reduce_sum.39428)
}

%region_1660.39439 (reduce_sum.39436: f32[], reduce_sum.39437: f32[]) -> f32[] {
  %reduce_sum.39436 = f32[] parameter(0)
  %reduce_sum.39437 = f32[] parameter(1)
  ROOT %reduce_sum.39438 = f32[] add(%reduce_sum.39436, %reduce_sum.39437)
}

%region_1660.39439.clone (reduce_sum.3622: f32[], reduce_sum.3623: f32[]) -> f32[] {
  %reduce_sum.3622 = f32[] parameter(0)
  %reduce_sum.3623 = f32[] parameter(1)
  ROOT %reduce_sum.3624 = f32[] add(%reduce_sum.3622, %reduce_sum.3623)
}

%region_1661.39448 (reduce_sum.39445: f32[], reduce_sum.39446: f32[]) -> f32[] {
  %reduce_sum.39445 = f32[] parameter(0)
  %reduce_sum.39446 = f32[] parameter(1)
  ROOT %reduce_sum.39447 = f32[] add(%reduce_sum.39445, %reduce_sum.39446)
}

%region_1661.39448.clone (reduce_sum.3625: f32[], reduce_sum.3626: f32[]) -> f32[] {
  %reduce_sum.3625 = f32[] parameter(0)
  %reduce_sum.3626 = f32[] parameter(1)
  ROOT %reduce_sum.3627 = f32[] add(%reduce_sum.3625, %reduce_sum.3626)
}

%region_1662.39457 (reduce_sum.39454: f32[], reduce_sum.39455: f32[]) -> f32[] {
  %reduce_sum.39454 = f32[] parameter(0)
  %reduce_sum.39455 = f32[] parameter(1)
  ROOT %reduce_sum.39456 = f32[] add(%reduce_sum.39454, %reduce_sum.39455)
}

%region_1662.39457.clone (reduce_sum.3628: f32[], reduce_sum.3629: f32[]) -> f32[] {
  %reduce_sum.3628 = f32[] parameter(0)
  %reduce_sum.3629 = f32[] parameter(1)
  ROOT %reduce_sum.3630 = f32[] add(%reduce_sum.3628, %reduce_sum.3629)
}

%region_1663.39466 (reduce_sum.39463: f32[], reduce_sum.39464: f32[]) -> f32[] {
  %reduce_sum.39463 = f32[] parameter(0)
  %reduce_sum.39464 = f32[] parameter(1)
  ROOT %reduce_sum.39465 = f32[] add(%reduce_sum.39463, %reduce_sum.39464)
}

%region_1663.39466.clone (reduce_sum.3631: f32[], reduce_sum.3632: f32[]) -> f32[] {
  %reduce_sum.3631 = f32[] parameter(0)
  %reduce_sum.3632 = f32[] parameter(1)
  ROOT %reduce_sum.3633 = f32[] add(%reduce_sum.3631, %reduce_sum.3632)
}

%region_1664.39475 (reduce_sum.39472: f32[], reduce_sum.39473: f32[]) -> f32[] {
  %reduce_sum.39472 = f32[] parameter(0)
  %reduce_sum.39473 = f32[] parameter(1)
  ROOT %reduce_sum.39474 = f32[] add(%reduce_sum.39472, %reduce_sum.39473)
}

%region_1664.39475.clone (reduce_sum.3634: f32[], reduce_sum.3635: f32[]) -> f32[] {
  %reduce_sum.3634 = f32[] parameter(0)
  %reduce_sum.3635 = f32[] parameter(1)
  ROOT %reduce_sum.3636 = f32[] add(%reduce_sum.3634, %reduce_sum.3635)
}

%region_1665.39484 (reduce_sum.39481: f32[], reduce_sum.39482: f32[]) -> f32[] {
  %reduce_sum.39481 = f32[] parameter(0)
  %reduce_sum.39482 = f32[] parameter(1)
  ROOT %reduce_sum.39483 = f32[] add(%reduce_sum.39481, %reduce_sum.39482)
}

%region_1665.39484.clone (reduce_sum.3637: f32[], reduce_sum.3638: f32[]) -> f32[] {
  %reduce_sum.3637 = f32[] parameter(0)
  %reduce_sum.3638 = f32[] parameter(1)
  ROOT %reduce_sum.3639 = f32[] add(%reduce_sum.3637, %reduce_sum.3638)
}

%region_1666.39493 (reduce_sum.39490: f32[], reduce_sum.39491: f32[]) -> f32[] {
  %reduce_sum.39490 = f32[] parameter(0)
  %reduce_sum.39491 = f32[] parameter(1)
  ROOT %reduce_sum.39492 = f32[] add(%reduce_sum.39490, %reduce_sum.39491)
}

%region_1666.39493.clone (reduce_sum.3640: f32[], reduce_sum.3641: f32[]) -> f32[] {
  %reduce_sum.3640 = f32[] parameter(0)
  %reduce_sum.3641 = f32[] parameter(1)
  ROOT %reduce_sum.3642 = f32[] add(%reduce_sum.3640, %reduce_sum.3641)
}

%region_1667.39502 (reduce_sum.39499: f32[], reduce_sum.39500: f32[]) -> f32[] {
  %reduce_sum.39499 = f32[] parameter(0)
  %reduce_sum.39500 = f32[] parameter(1)
  ROOT %reduce_sum.39501 = f32[] add(%reduce_sum.39499, %reduce_sum.39500)
}

%region_1667.39502.clone (reduce_sum.3643: f32[], reduce_sum.3644: f32[]) -> f32[] {
  %reduce_sum.3643 = f32[] parameter(0)
  %reduce_sum.3644 = f32[] parameter(1)
  ROOT %reduce_sum.3645 = f32[] add(%reduce_sum.3643, %reduce_sum.3644)
}

%region_1668.39511 (reduce_sum.39508: f32[], reduce_sum.39509: f32[]) -> f32[] {
  %reduce_sum.39508 = f32[] parameter(0)
  %reduce_sum.39509 = f32[] parameter(1)
  ROOT %reduce_sum.39510 = f32[] add(%reduce_sum.39508, %reduce_sum.39509)
}

%region_1669.39520 (reduce_sum.39517: f32[], reduce_sum.39518: f32[]) -> f32[] {
  %reduce_sum.39517 = f32[] parameter(0)
  %reduce_sum.39518 = f32[] parameter(1)
  ROOT %reduce_sum.39519 = f32[] add(%reduce_sum.39517, %reduce_sum.39518)
}

%region_1670.39529 (reduce_sum.39526: f32[], reduce_sum.39527: f32[]) -> f32[] {
  %reduce_sum.39526 = f32[] parameter(0)
  %reduce_sum.39527 = f32[] parameter(1)
  ROOT %reduce_sum.39528 = f32[] add(%reduce_sum.39526, %reduce_sum.39527)
}

%region_1670.39529.clone (reduce_sum.3646: f32[], reduce_sum.3650: f32[]) -> f32[] {
  %reduce_sum.3646 = f32[] parameter(0)
  %reduce_sum.3650 = f32[] parameter(1)
  ROOT %reduce_sum.3652 = f32[] add(%reduce_sum.3646, %reduce_sum.3650)
}

%region_1671.39538 (reduce_sum.39535: f32[], reduce_sum.39536: f32[]) -> f32[] {
  %reduce_sum.39535 = f32[] parameter(0)
  %reduce_sum.39536 = f32[] parameter(1)
  ROOT %reduce_sum.39537 = f32[] add(%reduce_sum.39535, %reduce_sum.39536)
}

%region_1671.39538.clone (reduce_sum.3653: f32[], reduce_sum.3654: f32[]) -> f32[] {
  %reduce_sum.3653 = f32[] parameter(0)
  %reduce_sum.3654 = f32[] parameter(1)
  ROOT %reduce_sum.3655 = f32[] add(%reduce_sum.3653, %reduce_sum.3654)
}

%region_1672.39547 (reduce_sum.39544: f32[], reduce_sum.39545: f32[]) -> f32[] {
  %reduce_sum.39544 = f32[] parameter(0)
  %reduce_sum.39545 = f32[] parameter(1)
  ROOT %reduce_sum.39546 = f32[] add(%reduce_sum.39544, %reduce_sum.39545)
}

%region_1672.39547.clone (reduce_sum.3659: f32[], reduce_sum.3662: f32[]) -> f32[] {
  %reduce_sum.3659 = f32[] parameter(0)
  %reduce_sum.3662 = f32[] parameter(1)
  ROOT %reduce_sum.3663 = f32[] add(%reduce_sum.3659, %reduce_sum.3662)
}

%region_1673.39556 (reduce_sum.39553: f32[], reduce_sum.39554: f32[]) -> f32[] {
  %reduce_sum.39553 = f32[] parameter(0)
  %reduce_sum.39554 = f32[] parameter(1)
  ROOT %reduce_sum.39555 = f32[] add(%reduce_sum.39553, %reduce_sum.39554)
}

%region_1673.39556.clone (reduce_sum.3664: f32[], reduce_sum.3668: f32[]) -> f32[] {
  %reduce_sum.3664 = f32[] parameter(0)
  %reduce_sum.3668 = f32[] parameter(1)
  ROOT %reduce_sum.3671 = f32[] add(%reduce_sum.3664, %reduce_sum.3668)
}

%region_1674.39565 (reduce_sum.39562: f32[], reduce_sum.39563: f32[]) -> f32[] {
  %reduce_sum.39562 = f32[] parameter(0)
  %reduce_sum.39563 = f32[] parameter(1)
  ROOT %reduce_sum.39564 = f32[] add(%reduce_sum.39562, %reduce_sum.39563)
}

%region_1674.39565.clone (reduce_sum.3672: f32[], reduce_sum.3673: f32[]) -> f32[] {
  %reduce_sum.3672 = f32[] parameter(0)
  %reduce_sum.3673 = f32[] parameter(1)
  ROOT %reduce_sum.3674 = f32[] add(%reduce_sum.3672, %reduce_sum.3673)
}

%region_1675.39574 (reduce_sum.39571: f32[], reduce_sum.39572: f32[]) -> f32[] {
  %reduce_sum.39571 = f32[] parameter(0)
  %reduce_sum.39572 = f32[] parameter(1)
  ROOT %reduce_sum.39573 = f32[] add(%reduce_sum.39571, %reduce_sum.39572)
}

%region_1675.39574.clone (reduce_sum.3675: f32[], reduce_sum.3676: f32[]) -> f32[] {
  %reduce_sum.3675 = f32[] parameter(0)
  %reduce_sum.3676 = f32[] parameter(1)
  ROOT %reduce_sum.3677 = f32[] add(%reduce_sum.3675, %reduce_sum.3676)
}

%region_1676.39587 (reduce_sum.39584: f32[], reduce_sum.39585: f32[]) -> f32[] {
  %reduce_sum.39584 = f32[] parameter(0)
  %reduce_sum.39585 = f32[] parameter(1)
  ROOT %reduce_sum.39586 = f32[] add(%reduce_sum.39584, %reduce_sum.39585)
}

%region_1677.39598 (reduce_sum.39595: f32[], reduce_sum.39596: f32[]) -> f32[] {
  %reduce_sum.39595 = f32[] parameter(0)
  %reduce_sum.39596 = f32[] parameter(1)
  ROOT %reduce_sum.39597 = f32[] add(%reduce_sum.39595, %reduce_sum.39596)
}

%region_1677.39598.clone (reduce_sum.3678: f32[], reduce_sum.3679: f32[]) -> f32[] {
  %reduce_sum.3678 = f32[] parameter(0)
  %reduce_sum.3679 = f32[] parameter(1)
  ROOT %reduce_sum.3680 = f32[] add(%reduce_sum.3678, %reduce_sum.3679)
}

%region_1678.39606 (reduce_sum.39603: f32[], reduce_sum.39604: f32[]) -> f32[] {
  %reduce_sum.39603 = f32[] parameter(0)
  %reduce_sum.39604 = f32[] parameter(1)
  ROOT %reduce_sum.39605 = f32[] add(%reduce_sum.39603, %reduce_sum.39604)
}

%region_1679.39614 (reduce_sum.39611: f32[], reduce_sum.39612: f32[]) -> f32[] {
  %reduce_sum.39611 = f32[] parameter(0)
  %reduce_sum.39612 = f32[] parameter(1)
  ROOT %reduce_sum.39613 = f32[] add(%reduce_sum.39611, %reduce_sum.39612)
}

%region_1679.39614.clone (reduce_sum.3681: f32[], reduce_sum.3682: f32[]) -> f32[] {
  %reduce_sum.3681 = f32[] parameter(0)
  %reduce_sum.3682 = f32[] parameter(1)
  ROOT %reduce_sum.3683 = f32[] add(%reduce_sum.3681, %reduce_sum.3682)
}

%region_1680.39623 (reduce_sum.39620: f32[], reduce_sum.39621: f32[]) -> f32[] {
  %reduce_sum.39620 = f32[] parameter(0)
  %reduce_sum.39621 = f32[] parameter(1)
  ROOT %reduce_sum.39622 = f32[] add(%reduce_sum.39620, %reduce_sum.39621)
}

%region_1680.39623.clone (reduce_sum.3684: f32[], reduce_sum.3685: f32[]) -> f32[] {
  %reduce_sum.3684 = f32[] parameter(0)
  %reduce_sum.3685 = f32[] parameter(1)
  ROOT %reduce_sum.3689 = f32[] add(%reduce_sum.3684, %reduce_sum.3685)
}

%region_1681.39632 (reduce_sum.39629: f32[], reduce_sum.39630: f32[]) -> f32[] {
  %reduce_sum.39629 = f32[] parameter(0)
  %reduce_sum.39630 = f32[] parameter(1)
  ROOT %reduce_sum.39631 = f32[] add(%reduce_sum.39629, %reduce_sum.39630)
}

%region_1681.39632.clone (reduce_sum.3691: f32[], reduce_sum.3692: f32[]) -> f32[] {
  %reduce_sum.3691 = f32[] parameter(0)
  %reduce_sum.3692 = f32[] parameter(1)
  ROOT %reduce_sum.3693 = f32[] add(%reduce_sum.3691, %reduce_sum.3692)
}

%region_1682.39641 (reduce_sum.39638: f32[], reduce_sum.39639: f32[]) -> f32[] {
  %reduce_sum.39638 = f32[] parameter(0)
  %reduce_sum.39639 = f32[] parameter(1)
  ROOT %reduce_sum.39640 = f32[] add(%reduce_sum.39638, %reduce_sum.39639)
}

%region_1682.39641.clone (reduce_sum.3694: f32[], reduce_sum.3695: f32[]) -> f32[] {
  %reduce_sum.3694 = f32[] parameter(0)
  %reduce_sum.3695 = f32[] parameter(1)
  ROOT %reduce_sum.3696 = f32[] add(%reduce_sum.3694, %reduce_sum.3695)
}

%region_1683.39650 (reduce_sum.39647: f32[], reduce_sum.39648: f32[]) -> f32[] {
  %reduce_sum.39647 = f32[] parameter(0)
  %reduce_sum.39648 = f32[] parameter(1)
  ROOT %reduce_sum.39649 = f32[] add(%reduce_sum.39647, %reduce_sum.39648)
}

%region_1684.39659 (reduce_sum.39656: f32[], reduce_sum.39657: f32[]) -> f32[] {
  %reduce_sum.39656 = f32[] parameter(0)
  %reduce_sum.39657 = f32[] parameter(1)
  ROOT %reduce_sum.39658 = f32[] add(%reduce_sum.39656, %reduce_sum.39657)
}

%region_1685.39668 (reduce_sum.39665: f32[], reduce_sum.39666: f32[]) -> f32[] {
  %reduce_sum.39665 = f32[] parameter(0)
  %reduce_sum.39666 = f32[] parameter(1)
  ROOT %reduce_sum.39667 = f32[] add(%reduce_sum.39665, %reduce_sum.39666)
}

%region_1685.39668.clone (reduce_sum.3697: f32[], reduce_sum.3698: f32[]) -> f32[] {
  %reduce_sum.3697 = f32[] parameter(0)
  %reduce_sum.3698 = f32[] parameter(1)
  ROOT %reduce_sum.3699 = f32[] add(%reduce_sum.3697, %reduce_sum.3698)
}

%region_1686.39677 (reduce_sum.39674: f32[], reduce_sum.39675: f32[]) -> f32[] {
  %reduce_sum.39674 = f32[] parameter(0)
  %reduce_sum.39675 = f32[] parameter(1)
  ROOT %reduce_sum.39676 = f32[] add(%reduce_sum.39674, %reduce_sum.39675)
}

%region_1686.39677.clone (reduce_sum.3700: f32[], reduce_sum.3701: f32[]) -> f32[] {
  %reduce_sum.3700 = f32[] parameter(0)
  %reduce_sum.3701 = f32[] parameter(1)
  ROOT %reduce_sum.3702 = f32[] add(%reduce_sum.3700, %reduce_sum.3701)
}

%region_1687.39686 (reduce_sum.39683: f32[], reduce_sum.39684: f32[]) -> f32[] {
  %reduce_sum.39683 = f32[] parameter(0)
  %reduce_sum.39684 = f32[] parameter(1)
  ROOT %reduce_sum.39685 = f32[] add(%reduce_sum.39683, %reduce_sum.39684)
}

%region_1687.39686.clone (reduce_sum.3703: f32[], reduce_sum.3704: f32[]) -> f32[] {
  %reduce_sum.3703 = f32[] parameter(0)
  %reduce_sum.3704 = f32[] parameter(1)
  ROOT %reduce_sum.3705 = f32[] add(%reduce_sum.3703, %reduce_sum.3704)
}

%region_1688.39695 (reduce_sum.39692: f32[], reduce_sum.39693: f32[]) -> f32[] {
  %reduce_sum.39692 = f32[] parameter(0)
  %reduce_sum.39693 = f32[] parameter(1)
  ROOT %reduce_sum.39694 = f32[] add(%reduce_sum.39692, %reduce_sum.39693)
}

%region_1688.39695.clone (reduce_sum.3706: f32[], reduce_sum.3707: f32[]) -> f32[] {
  %reduce_sum.3706 = f32[] parameter(0)
  %reduce_sum.3707 = f32[] parameter(1)
  ROOT %reduce_sum.3708 = f32[] add(%reduce_sum.3706, %reduce_sum.3707)
}

%region_1689.39704 (reduce_sum.39701: f32[], reduce_sum.39702: f32[]) -> f32[] {
  %reduce_sum.39701 = f32[] parameter(0)
  %reduce_sum.39702 = f32[] parameter(1)
  ROOT %reduce_sum.39703 = f32[] add(%reduce_sum.39701, %reduce_sum.39702)
}

%region_1689.39704.clone (reduce_sum.3709: f32[], reduce_sum.3710: f32[]) -> f32[] {
  %reduce_sum.3709 = f32[] parameter(0)
  %reduce_sum.3710 = f32[] parameter(1)
  ROOT %reduce_sum.3711 = f32[] add(%reduce_sum.3709, %reduce_sum.3710)
}

%region_1690.39713 (reduce_sum.39710: f32[], reduce_sum.39711: f32[]) -> f32[] {
  %reduce_sum.39710 = f32[] parameter(0)
  %reduce_sum.39711 = f32[] parameter(1)
  ROOT %reduce_sum.39712 = f32[] add(%reduce_sum.39710, %reduce_sum.39711)
}

%region_1690.39713.clone (reduce_sum.3712: f32[], reduce_sum.3713: f32[]) -> f32[] {
  %reduce_sum.3712 = f32[] parameter(0)
  %reduce_sum.3713 = f32[] parameter(1)
  ROOT %reduce_sum.3714 = f32[] add(%reduce_sum.3712, %reduce_sum.3713)
}

%region_1691.39722 (reduce_sum.39719: f32[], reduce_sum.39720: f32[]) -> f32[] {
  %reduce_sum.39719 = f32[] parameter(0)
  %reduce_sum.39720 = f32[] parameter(1)
  ROOT %reduce_sum.39721 = f32[] add(%reduce_sum.39719, %reduce_sum.39720)
}

%region_1691.39722.clone (reduce_sum.3715: f32[], reduce_sum.3716: f32[]) -> f32[] {
  %reduce_sum.3715 = f32[] parameter(0)
  %reduce_sum.3716 = f32[] parameter(1)
  ROOT %reduce_sum.3717 = f32[] add(%reduce_sum.3715, %reduce_sum.3716)
}

%region_1692.39731 (reduce_sum.39728: f32[], reduce_sum.39729: f32[]) -> f32[] {
  %reduce_sum.39728 = f32[] parameter(0)
  %reduce_sum.39729 = f32[] parameter(1)
  ROOT %reduce_sum.39730 = f32[] add(%reduce_sum.39728, %reduce_sum.39729)
}

%region_1692.39731.clone (reduce_sum.3718: f32[], reduce_sum.3719: f32[]) -> f32[] {
  %reduce_sum.3718 = f32[] parameter(0)
  %reduce_sum.3719 = f32[] parameter(1)
  ROOT %reduce_sum.3720 = f32[] add(%reduce_sum.3718, %reduce_sum.3719)
}

%region_1693.39740 (reduce_sum.39737: f32[], reduce_sum.39738: f32[]) -> f32[] {
  %reduce_sum.39737 = f32[] parameter(0)
  %reduce_sum.39738 = f32[] parameter(1)
  ROOT %reduce_sum.39739 = f32[] add(%reduce_sum.39737, %reduce_sum.39738)
}

%region_1694.39749 (reduce_sum.39746: f32[], reduce_sum.39747: f32[]) -> f32[] {
  %reduce_sum.39746 = f32[] parameter(0)
  %reduce_sum.39747 = f32[] parameter(1)
  ROOT %reduce_sum.39748 = f32[] add(%reduce_sum.39746, %reduce_sum.39747)
}

%region_1695.39758 (reduce_sum.39755: f32[], reduce_sum.39756: f32[]) -> f32[] {
  %reduce_sum.39755 = f32[] parameter(0)
  %reduce_sum.39756 = f32[] parameter(1)
  ROOT %reduce_sum.39757 = f32[] add(%reduce_sum.39755, %reduce_sum.39756)
}

%region_1695.39758.clone (reduce_sum.3721: f32[], reduce_sum.3722: f32[]) -> f32[] {
  %reduce_sum.3721 = f32[] parameter(0)
  %reduce_sum.3722 = f32[] parameter(1)
  ROOT %reduce_sum.3723 = f32[] add(%reduce_sum.3721, %reduce_sum.3722)
}

%region_1696.39767 (reduce_sum.39764: f32[], reduce_sum.39765: f32[]) -> f32[] {
  %reduce_sum.39764 = f32[] parameter(0)
  %reduce_sum.39765 = f32[] parameter(1)
  ROOT %reduce_sum.39766 = f32[] add(%reduce_sum.39764, %reduce_sum.39765)
}

%region_1696.39767.clone (reduce_sum.3724: f32[], reduce_sum.3725: f32[]) -> f32[] {
  %reduce_sum.3724 = f32[] parameter(0)
  %reduce_sum.3725 = f32[] parameter(1)
  ROOT %reduce_sum.3726 = f32[] add(%reduce_sum.3724, %reduce_sum.3725)
}

%region_1697.39776 (reduce_sum.39773: f32[], reduce_sum.39774: f32[]) -> f32[] {
  %reduce_sum.39773 = f32[] parameter(0)
  %reduce_sum.39774 = f32[] parameter(1)
  ROOT %reduce_sum.39775 = f32[] add(%reduce_sum.39773, %reduce_sum.39774)
}

%region_1697.39776.clone (reduce_sum.3727: f32[], reduce_sum.3728: f32[]) -> f32[] {
  %reduce_sum.3727 = f32[] parameter(0)
  %reduce_sum.3728 = f32[] parameter(1)
  ROOT %reduce_sum.3729 = f32[] add(%reduce_sum.3727, %reduce_sum.3728)
}

%region_1698.39785 (reduce_sum.39782: f32[], reduce_sum.39783: f32[]) -> f32[] {
  %reduce_sum.39782 = f32[] parameter(0)
  %reduce_sum.39783 = f32[] parameter(1)
  ROOT %reduce_sum.39784 = f32[] add(%reduce_sum.39782, %reduce_sum.39783)
}

%region_1698.39785.clone (reduce_sum.3730: f32[], reduce_sum.3731: f32[]) -> f32[] {
  %reduce_sum.3730 = f32[] parameter(0)
  %reduce_sum.3731 = f32[] parameter(1)
  ROOT %reduce_sum.3732 = f32[] add(%reduce_sum.3730, %reduce_sum.3731)
}

%region_1699.39794 (reduce_sum.39791: f32[], reduce_sum.39792: f32[]) -> f32[] {
  %reduce_sum.39791 = f32[] parameter(0)
  %reduce_sum.39792 = f32[] parameter(1)
  ROOT %reduce_sum.39793 = f32[] add(%reduce_sum.39791, %reduce_sum.39792)
}

%region_1699.39794.clone (reduce_sum.3733: f32[], reduce_sum.3734: f32[]) -> f32[] {
  %reduce_sum.3733 = f32[] parameter(0)
  %reduce_sum.3734 = f32[] parameter(1)
  ROOT %reduce_sum.3735 = f32[] add(%reduce_sum.3733, %reduce_sum.3734)
}

%region_1700.39803 (reduce_sum.39800: f32[], reduce_sum.39801: f32[]) -> f32[] {
  %reduce_sum.39800 = f32[] parameter(0)
  %reduce_sum.39801 = f32[] parameter(1)
  ROOT %reduce_sum.39802 = f32[] add(%reduce_sum.39800, %reduce_sum.39801)
}

%region_1700.39803.clone (reduce_sum.3736: f32[], reduce_sum.3737: f32[]) -> f32[] {
  %reduce_sum.3736 = f32[] parameter(0)
  %reduce_sum.3737 = f32[] parameter(1)
  ROOT %reduce_sum.3738 = f32[] add(%reduce_sum.3736, %reduce_sum.3737)
}

%region_1701.39812 (reduce_sum.39809: f32[], reduce_sum.39810: f32[]) -> f32[] {
  %reduce_sum.39809 = f32[] parameter(0)
  %reduce_sum.39810 = f32[] parameter(1)
  ROOT %reduce_sum.39811 = f32[] add(%reduce_sum.39809, %reduce_sum.39810)
}

%region_1701.39812.clone (reduce_sum.3739: f32[], reduce_sum.3740: f32[]) -> f32[] {
  %reduce_sum.3739 = f32[] parameter(0)
  %reduce_sum.3740 = f32[] parameter(1)
  ROOT %reduce_sum.3741 = f32[] add(%reduce_sum.3739, %reduce_sum.3740)
}

%region_1702.39821 (reduce_sum.39818: f32[], reduce_sum.39819: f32[]) -> f32[] {
  %reduce_sum.39818 = f32[] parameter(0)
  %reduce_sum.39819 = f32[] parameter(1)
  ROOT %reduce_sum.39820 = f32[] add(%reduce_sum.39818, %reduce_sum.39819)
}

%region_1702.39821.clone (reduce_sum.3742: f32[], reduce_sum.3743: f32[]) -> f32[] {
  %reduce_sum.3742 = f32[] parameter(0)
  %reduce_sum.3743 = f32[] parameter(1)
  ROOT %reduce_sum.3744 = f32[] add(%reduce_sum.3742, %reduce_sum.3743)
}

%region_1703.39830 (reduce_sum.39827: f32[], reduce_sum.39828: f32[]) -> f32[] {
  %reduce_sum.39827 = f32[] parameter(0)
  %reduce_sum.39828 = f32[] parameter(1)
  ROOT %reduce_sum.39829 = f32[] add(%reduce_sum.39827, %reduce_sum.39828)
}

%region_1704.39839 (reduce_sum.39836: f32[], reduce_sum.39837: f32[]) -> f32[] {
  %reduce_sum.39836 = f32[] parameter(0)
  %reduce_sum.39837 = f32[] parameter(1)
  ROOT %reduce_sum.39838 = f32[] add(%reduce_sum.39836, %reduce_sum.39837)
}

%region_1705.39848 (reduce_sum.39845: f32[], reduce_sum.39846: f32[]) -> f32[] {
  %reduce_sum.39845 = f32[] parameter(0)
  %reduce_sum.39846 = f32[] parameter(1)
  ROOT %reduce_sum.39847 = f32[] add(%reduce_sum.39845, %reduce_sum.39846)
}

%region_1705.39848.clone (reduce_sum.3745: f32[], reduce_sum.3746: f32[]) -> f32[] {
  %reduce_sum.3745 = f32[] parameter(0)
  %reduce_sum.3746 = f32[] parameter(1)
  ROOT %reduce_sum.3747 = f32[] add(%reduce_sum.3745, %reduce_sum.3746)
}

%region_1706.39857 (reduce_sum.39854: f32[], reduce_sum.39855: f32[]) -> f32[] {
  %reduce_sum.39854 = f32[] parameter(0)
  %reduce_sum.39855 = f32[] parameter(1)
  ROOT %reduce_sum.39856 = f32[] add(%reduce_sum.39854, %reduce_sum.39855)
}

%region_1706.39857.clone (reduce_sum.3748: f32[], reduce_sum.3749: f32[]) -> f32[] {
  %reduce_sum.3748 = f32[] parameter(0)
  %reduce_sum.3749 = f32[] parameter(1)
  ROOT %reduce_sum.3750 = f32[] add(%reduce_sum.3748, %reduce_sum.3749)
}

%region_1707.39866 (reduce_sum.39863: f32[], reduce_sum.39864: f32[]) -> f32[] {
  %reduce_sum.39863 = f32[] parameter(0)
  %reduce_sum.39864 = f32[] parameter(1)
  ROOT %reduce_sum.39865 = f32[] add(%reduce_sum.39863, %reduce_sum.39864)
}

%region_1707.39866.clone (reduce_sum.3754: f32[], reduce_sum.3756: f32[]) -> f32[] {
  %reduce_sum.3754 = f32[] parameter(0)
  %reduce_sum.3756 = f32[] parameter(1)
  ROOT %reduce_sum.3757 = f32[] add(%reduce_sum.3754, %reduce_sum.3756)
}

%region_1708.39875 (reduce_sum.39872: f32[], reduce_sum.39873: f32[]) -> f32[] {
  %reduce_sum.39872 = f32[] parameter(0)
  %reduce_sum.39873 = f32[] parameter(1)
  ROOT %reduce_sum.39874 = f32[] add(%reduce_sum.39872, %reduce_sum.39873)
}

%region_1708.39875.clone (reduce_sum.3758: f32[], reduce_sum.3759: f32[]) -> f32[] {
  %reduce_sum.3758 = f32[] parameter(0)
  %reduce_sum.3759 = f32[] parameter(1)
  ROOT %reduce_sum.3760 = f32[] add(%reduce_sum.3758, %reduce_sum.3759)
}

%region_1709.39884 (reduce_sum.39881: f32[], reduce_sum.39882: f32[]) -> f32[] {
  %reduce_sum.39881 = f32[] parameter(0)
  %reduce_sum.39882 = f32[] parameter(1)
  ROOT %reduce_sum.39883 = f32[] add(%reduce_sum.39881, %reduce_sum.39882)
}

%region_1709.39884.clone (reduce_sum.3761: f32[], reduce_sum.3762: f32[]) -> f32[] {
  %reduce_sum.3761 = f32[] parameter(0)
  %reduce_sum.3762 = f32[] parameter(1)
  ROOT %reduce_sum.3763 = f32[] add(%reduce_sum.3761, %reduce_sum.3762)
}

%region_1710.39893 (reduce_sum.39890: f32[], reduce_sum.39891: f32[]) -> f32[] {
  %reduce_sum.39890 = f32[] parameter(0)
  %reduce_sum.39891 = f32[] parameter(1)
  ROOT %reduce_sum.39892 = f32[] add(%reduce_sum.39890, %reduce_sum.39891)
}

%region_1710.39893.clone (reduce_sum.3764: f32[], reduce_sum.3765: f32[]) -> f32[] {
  %reduce_sum.3764 = f32[] parameter(0)
  %reduce_sum.3765 = f32[] parameter(1)
  ROOT %reduce_sum.3766 = f32[] add(%reduce_sum.3764, %reduce_sum.3765)
}

%region_1711.39902 (reduce_sum.39899: f32[], reduce_sum.39900: f32[]) -> f32[] {
  %reduce_sum.39899 = f32[] parameter(0)
  %reduce_sum.39900 = f32[] parameter(1)
  ROOT %reduce_sum.39901 = f32[] add(%reduce_sum.39899, %reduce_sum.39900)
}

%region_1711.39902.clone (reduce_sum.3767: f32[], reduce_sum.3768: f32[]) -> f32[] {
  %reduce_sum.3767 = f32[] parameter(0)
  %reduce_sum.3768 = f32[] parameter(1)
  ROOT %reduce_sum.3769 = f32[] add(%reduce_sum.3767, %reduce_sum.3768)
}

%region_1712.39911 (reduce_sum.39908: f32[], reduce_sum.39909: f32[]) -> f32[] {
  %reduce_sum.39908 = f32[] parameter(0)
  %reduce_sum.39909 = f32[] parameter(1)
  ROOT %reduce_sum.39910 = f32[] add(%reduce_sum.39908, %reduce_sum.39909)
}

%region_1712.39911.clone (reduce_sum.3770: f32[], reduce_sum.3771: f32[]) -> f32[] {
  %reduce_sum.3770 = f32[] parameter(0)
  %reduce_sum.3771 = f32[] parameter(1)
  ROOT %reduce_sum.3772 = f32[] add(%reduce_sum.3770, %reduce_sum.3771)
}

%region_1713.39920 (reduce_sum.39917: f32[], reduce_sum.39918: f32[]) -> f32[] {
  %reduce_sum.39917 = f32[] parameter(0)
  %reduce_sum.39918 = f32[] parameter(1)
  ROOT %reduce_sum.39919 = f32[] add(%reduce_sum.39917, %reduce_sum.39918)
}

%region_1714.39929 (reduce_sum.39926: f32[], reduce_sum.39927: f32[]) -> f32[] {
  %reduce_sum.39926 = f32[] parameter(0)
  %reduce_sum.39927 = f32[] parameter(1)
  ROOT %reduce_sum.39928 = f32[] add(%reduce_sum.39926, %reduce_sum.39927)
}

%region_1715.39938 (reduce_sum.39935: f32[], reduce_sum.39936: f32[]) -> f32[] {
  %reduce_sum.39935 = f32[] parameter(0)
  %reduce_sum.39936 = f32[] parameter(1)
  ROOT %reduce_sum.39937 = f32[] add(%reduce_sum.39935, %reduce_sum.39936)
}

%region_1715.39938.clone (reduce_sum.3773: f32[], reduce_sum.3774: f32[]) -> f32[] {
  %reduce_sum.3773 = f32[] parameter(0)
  %reduce_sum.3774 = f32[] parameter(1)
  ROOT %reduce_sum.3775 = f32[] add(%reduce_sum.3773, %reduce_sum.3774)
}

%region_1716.39947 (reduce_sum.39944: f32[], reduce_sum.39945: f32[]) -> f32[] {
  %reduce_sum.39944 = f32[] parameter(0)
  %reduce_sum.39945 = f32[] parameter(1)
  ROOT %reduce_sum.39946 = f32[] add(%reduce_sum.39944, %reduce_sum.39945)
}

%region_1716.39947.clone (reduce_sum.3776: f32[], reduce_sum.3777: f32[]) -> f32[] {
  %reduce_sum.3776 = f32[] parameter(0)
  %reduce_sum.3777 = f32[] parameter(1)
  ROOT %reduce_sum.3778 = f32[] add(%reduce_sum.3776, %reduce_sum.3777)
}

%region_1717.39956 (reduce_sum.39953: f32[], reduce_sum.39954: f32[]) -> f32[] {
  %reduce_sum.39953 = f32[] parameter(0)
  %reduce_sum.39954 = f32[] parameter(1)
  ROOT %reduce_sum.39955 = f32[] add(%reduce_sum.39953, %reduce_sum.39954)
}

%region_1717.39956.clone (reduce_sum.3784: f32[], reduce_sum.3786: f32[]) -> f32[] {
  %reduce_sum.3784 = f32[] parameter(0)
  %reduce_sum.3786 = f32[] parameter(1)
  ROOT %reduce_sum.3790 = f32[] add(%reduce_sum.3784, %reduce_sum.3786)
}

%region_1718.39965 (reduce_sum.39962: f32[], reduce_sum.39963: f32[]) -> f32[] {
  %reduce_sum.39962 = f32[] parameter(0)
  %reduce_sum.39963 = f32[] parameter(1)
  ROOT %reduce_sum.39964 = f32[] add(%reduce_sum.39962, %reduce_sum.39963)
}

%region_1718.39965.clone (reduce_sum.3794: f32[], reduce_sum.3796: f32[]) -> f32[] {
  %reduce_sum.3794 = f32[] parameter(0)
  %reduce_sum.3796 = f32[] parameter(1)
  ROOT %reduce_sum.3797 = f32[] add(%reduce_sum.3794, %reduce_sum.3796)
}

%region_1719.39974 (reduce_sum.39971: f32[], reduce_sum.39972: f32[]) -> f32[] {
  %reduce_sum.39971 = f32[] parameter(0)
  %reduce_sum.39972 = f32[] parameter(1)
  ROOT %reduce_sum.39973 = f32[] add(%reduce_sum.39971, %reduce_sum.39972)
}

%region_1719.39974.clone (reduce_sum.3798: f32[], reduce_sum.3799: f32[]) -> f32[] {
  %reduce_sum.3798 = f32[] parameter(0)
  %reduce_sum.3799 = f32[] parameter(1)
  ROOT %reduce_sum.3800 = f32[] add(%reduce_sum.3798, %reduce_sum.3799)
}

%region_1720.39983 (reduce_sum.39980: f32[], reduce_sum.39981: f32[]) -> f32[] {
  %reduce_sum.39980 = f32[] parameter(0)
  %reduce_sum.39981 = f32[] parameter(1)
  ROOT %reduce_sum.39982 = f32[] add(%reduce_sum.39980, %reduce_sum.39981)
}

%region_1720.39983.clone (reduce_sum.3801: f32[], reduce_sum.3802: f32[]) -> f32[] {
  %reduce_sum.3801 = f32[] parameter(0)
  %reduce_sum.3802 = f32[] parameter(1)
  ROOT %reduce_sum.3803 = f32[] add(%reduce_sum.3801, %reduce_sum.3802)
}

%region_1721.39992 (reduce_sum.39989: f32[], reduce_sum.39990: f32[]) -> f32[] {
  %reduce_sum.39989 = f32[] parameter(0)
  %reduce_sum.39990 = f32[] parameter(1)
  ROOT %reduce_sum.39991 = f32[] add(%reduce_sum.39989, %reduce_sum.39990)
}

%region_1721.39992.clone (reduce_sum.3804: f32[], reduce_sum.3805: f32[]) -> f32[] {
  %reduce_sum.3804 = f32[] parameter(0)
  %reduce_sum.3805 = f32[] parameter(1)
  ROOT %reduce_sum.3806 = f32[] add(%reduce_sum.3804, %reduce_sum.3805)
}

%region_1722.40001 (reduce_sum.39998: f32[], reduce_sum.39999: f32[]) -> f32[] {
  %reduce_sum.39998 = f32[] parameter(0)
  %reduce_sum.39999 = f32[] parameter(1)
  ROOT %reduce_sum.40000 = f32[] add(%reduce_sum.39998, %reduce_sum.39999)
}

%region_1722.40001.clone (reduce_sum.3810: f32[], reduce_sum.3812: f32[]) -> f32[] {
  %reduce_sum.3810 = f32[] parameter(0)
  %reduce_sum.3812 = f32[] parameter(1)
  ROOT %reduce_sum.3813 = f32[] add(%reduce_sum.3810, %reduce_sum.3812)
}

%region_1723.40010 (reduce_sum.40007: f32[], reduce_sum.40008: f32[]) -> f32[] {
  %reduce_sum.40007 = f32[] parameter(0)
  %reduce_sum.40008 = f32[] parameter(1)
  ROOT %reduce_sum.40009 = f32[] add(%reduce_sum.40007, %reduce_sum.40008)
}

%region_1724.40019 (reduce_sum.40016: f32[], reduce_sum.40017: f32[]) -> f32[] {
  %reduce_sum.40016 = f32[] parameter(0)
  %reduce_sum.40017 = f32[] parameter(1)
  ROOT %reduce_sum.40018 = f32[] add(%reduce_sum.40016, %reduce_sum.40017)
}

%region_1725.40028 (reduce_sum.40025: f32[], reduce_sum.40026: f32[]) -> f32[] {
  %reduce_sum.40025 = f32[] parameter(0)
  %reduce_sum.40026 = f32[] parameter(1)
  ROOT %reduce_sum.40027 = f32[] add(%reduce_sum.40025, %reduce_sum.40026)
}

%region_1725.40028.clone (reduce_sum.3814: f32[], reduce_sum.3815: f32[]) -> f32[] {
  %reduce_sum.3814 = f32[] parameter(0)
  %reduce_sum.3815 = f32[] parameter(1)
  ROOT %reduce_sum.3816 = f32[] add(%reduce_sum.3814, %reduce_sum.3815)
}

%region_1726.40037 (reduce_sum.40034: f32[], reduce_sum.40035: f32[]) -> f32[] {
  %reduce_sum.40034 = f32[] parameter(0)
  %reduce_sum.40035 = f32[] parameter(1)
  ROOT %reduce_sum.40036 = f32[] add(%reduce_sum.40034, %reduce_sum.40035)
}

%region_1726.40037.clone (reduce_sum.3817: f32[], reduce_sum.3818: f32[]) -> f32[] {
  %reduce_sum.3817 = f32[] parameter(0)
  %reduce_sum.3818 = f32[] parameter(1)
  ROOT %reduce_sum.3819 = f32[] add(%reduce_sum.3817, %reduce_sum.3818)
}

%region_1727.40046 (reduce_sum.40043: f32[], reduce_sum.40044: f32[]) -> f32[] {
  %reduce_sum.40043 = f32[] parameter(0)
  %reduce_sum.40044 = f32[] parameter(1)
  ROOT %reduce_sum.40045 = f32[] add(%reduce_sum.40043, %reduce_sum.40044)
}

%region_1727.40046.clone (reduce_sum.3820: f32[], reduce_sum.3821: f32[]) -> f32[] {
  %reduce_sum.3820 = f32[] parameter(0)
  %reduce_sum.3821 = f32[] parameter(1)
  ROOT %reduce_sum.3822 = f32[] add(%reduce_sum.3820, %reduce_sum.3821)
}

%region_1728.40055 (reduce_sum.40052: f32[], reduce_sum.40053: f32[]) -> f32[] {
  %reduce_sum.40052 = f32[] parameter(0)
  %reduce_sum.40053 = f32[] parameter(1)
  ROOT %reduce_sum.40054 = f32[] add(%reduce_sum.40052, %reduce_sum.40053)
}

%region_1728.40055.clone (reduce_sum.3823: f32[], reduce_sum.3824: f32[]) -> f32[] {
  %reduce_sum.3823 = f32[] parameter(0)
  %reduce_sum.3824 = f32[] parameter(1)
  ROOT %reduce_sum.3825 = f32[] add(%reduce_sum.3823, %reduce_sum.3824)
}

%region_1729.40064 (reduce_sum.40061: f32[], reduce_sum.40062: f32[]) -> f32[] {
  %reduce_sum.40061 = f32[] parameter(0)
  %reduce_sum.40062 = f32[] parameter(1)
  ROOT %reduce_sum.40063 = f32[] add(%reduce_sum.40061, %reduce_sum.40062)
}

%region_1729.40064.clone (reduce_sum.3826: f32[], reduce_sum.3827: f32[]) -> f32[] {
  %reduce_sum.3826 = f32[] parameter(0)
  %reduce_sum.3827 = f32[] parameter(1)
  ROOT %reduce_sum.3828 = f32[] add(%reduce_sum.3826, %reduce_sum.3827)
}

%region_1730.40073 (reduce_sum.40070: f32[], reduce_sum.40071: f32[]) -> f32[] {
  %reduce_sum.40070 = f32[] parameter(0)
  %reduce_sum.40071 = f32[] parameter(1)
  ROOT %reduce_sum.40072 = f32[] add(%reduce_sum.40070, %reduce_sum.40071)
}

%region_1730.40073.clone (reduce_sum.3829: f32[], reduce_sum.3830: f32[]) -> f32[] {
  %reduce_sum.3829 = f32[] parameter(0)
  %reduce_sum.3830 = f32[] parameter(1)
  ROOT %reduce_sum.3831 = f32[] add(%reduce_sum.3829, %reduce_sum.3830)
}

%region_1731.40082 (reduce_sum.40079: f32[], reduce_sum.40080: f32[]) -> f32[] {
  %reduce_sum.40079 = f32[] parameter(0)
  %reduce_sum.40080 = f32[] parameter(1)
  ROOT %reduce_sum.40081 = f32[] add(%reduce_sum.40079, %reduce_sum.40080)
}

%region_1731.40082.clone (reduce_sum.3832: f32[], reduce_sum.3836: f32[]) -> f32[] {
  %reduce_sum.3832 = f32[] parameter(0)
  %reduce_sum.3836 = f32[] parameter(1)
  ROOT %reduce_sum.3838 = f32[] add(%reduce_sum.3832, %reduce_sum.3836)
}

%region_1732.40091 (reduce_sum.40088: f32[], reduce_sum.40089: f32[]) -> f32[] {
  %reduce_sum.40088 = f32[] parameter(0)
  %reduce_sum.40089 = f32[] parameter(1)
  ROOT %reduce_sum.40090 = f32[] add(%reduce_sum.40088, %reduce_sum.40089)
}

%region_1732.40091.clone (reduce_sum.3839: f32[], reduce_sum.3840: f32[]) -> f32[] {
  %reduce_sum.3839 = f32[] parameter(0)
  %reduce_sum.3840 = f32[] parameter(1)
  ROOT %reduce_sum.3841 = f32[] add(%reduce_sum.3839, %reduce_sum.3840)
}

%region_1733.40100 (reduce_sum.40097: f32[], reduce_sum.40098: f32[]) -> f32[] {
  %reduce_sum.40097 = f32[] parameter(0)
  %reduce_sum.40098 = f32[] parameter(1)
  ROOT %reduce_sum.40099 = f32[] add(%reduce_sum.40097, %reduce_sum.40098)
}

%region_1734.40109 (reduce_sum.40106: f32[], reduce_sum.40107: f32[]) -> f32[] {
  %reduce_sum.40106 = f32[] parameter(0)
  %reduce_sum.40107 = f32[] parameter(1)
  ROOT %reduce_sum.40108 = f32[] add(%reduce_sum.40106, %reduce_sum.40107)
}

%region_1735.40118 (reduce_sum.40115: f32[], reduce_sum.40116: f32[]) -> f32[] {
  %reduce_sum.40115 = f32[] parameter(0)
  %reduce_sum.40116 = f32[] parameter(1)
  ROOT %reduce_sum.40117 = f32[] add(%reduce_sum.40115, %reduce_sum.40116)
}

%region_1735.40118.clone (reduce_sum.3842: f32[], reduce_sum.3843: f32[]) -> f32[] {
  %reduce_sum.3842 = f32[] parameter(0)
  %reduce_sum.3843 = f32[] parameter(1)
  ROOT %reduce_sum.3844 = f32[] add(%reduce_sum.3842, %reduce_sum.3843)
}

%region_1736.40127 (reduce_sum.40124: f32[], reduce_sum.40125: f32[]) -> f32[] {
  %reduce_sum.40124 = f32[] parameter(0)
  %reduce_sum.40125 = f32[] parameter(1)
  ROOT %reduce_sum.40126 = f32[] add(%reduce_sum.40124, %reduce_sum.40125)
}

%region_1736.40127.clone (reduce_sum.3848: f32[], reduce_sum.3850: f32[]) -> f32[] {
  %reduce_sum.3848 = f32[] parameter(0)
  %reduce_sum.3850 = f32[] parameter(1)
  ROOT %reduce_sum.3851 = f32[] add(%reduce_sum.3848, %reduce_sum.3850)
}

%region_1737.40136 (reduce_sum.40133: f32[], reduce_sum.40134: f32[]) -> f32[] {
  %reduce_sum.40133 = f32[] parameter(0)
  %reduce_sum.40134 = f32[] parameter(1)
  ROOT %reduce_sum.40135 = f32[] add(%reduce_sum.40133, %reduce_sum.40134)
}

%region_1737.40136.clone (reduce_sum.3852: f32[], reduce_sum.3853: f32[]) -> f32[] {
  %reduce_sum.3852 = f32[] parameter(0)
  %reduce_sum.3853 = f32[] parameter(1)
  ROOT %reduce_sum.3854 = f32[] add(%reduce_sum.3852, %reduce_sum.3853)
}

%region_1738.40145 (reduce_sum.40142: f32[], reduce_sum.40143: f32[]) -> f32[] {
  %reduce_sum.40142 = f32[] parameter(0)
  %reduce_sum.40143 = f32[] parameter(1)
  ROOT %reduce_sum.40144 = f32[] add(%reduce_sum.40142, %reduce_sum.40143)
}

%region_1738.40145.clone (reduce_sum.3855: f32[], reduce_sum.3856: f32[]) -> f32[] {
  %reduce_sum.3855 = f32[] parameter(0)
  %reduce_sum.3856 = f32[] parameter(1)
  ROOT %reduce_sum.3857 = f32[] add(%reduce_sum.3855, %reduce_sum.3856)
}

%region_1739.40154 (reduce_sum.40151: f32[], reduce_sum.40152: f32[]) -> f32[] {
  %reduce_sum.40151 = f32[] parameter(0)
  %reduce_sum.40152 = f32[] parameter(1)
  ROOT %reduce_sum.40153 = f32[] add(%reduce_sum.40151, %reduce_sum.40152)
}

%region_1739.40154.clone (reduce_sum.3858: f32[], reduce_sum.3859: f32[]) -> f32[] {
  %reduce_sum.3858 = f32[] parameter(0)
  %reduce_sum.3859 = f32[] parameter(1)
  ROOT %reduce_sum.3860 = f32[] add(%reduce_sum.3858, %reduce_sum.3859)
}

%region_1740.40163 (reduce_sum.40160: f32[], reduce_sum.40161: f32[]) -> f32[] {
  %reduce_sum.40160 = f32[] parameter(0)
  %reduce_sum.40161 = f32[] parameter(1)
  ROOT %reduce_sum.40162 = f32[] add(%reduce_sum.40160, %reduce_sum.40161)
}

%region_1740.40163.clone (reduce_sum.3861: f32[], reduce_sum.3862: f32[]) -> f32[] {
  %reduce_sum.3861 = f32[] parameter(0)
  %reduce_sum.3862 = f32[] parameter(1)
  ROOT %reduce_sum.3863 = f32[] add(%reduce_sum.3861, %reduce_sum.3862)
}

%region_1741.40172 (reduce_sum.40169: f32[], reduce_sum.40170: f32[]) -> f32[] {
  %reduce_sum.40169 = f32[] parameter(0)
  %reduce_sum.40170 = f32[] parameter(1)
  ROOT %reduce_sum.40171 = f32[] add(%reduce_sum.40169, %reduce_sum.40170)
}

%region_1741.40172.clone (reduce_sum.3864: f32[], reduce_sum.3865: f32[]) -> f32[] {
  %reduce_sum.3864 = f32[] parameter(0)
  %reduce_sum.3865 = f32[] parameter(1)
  ROOT %reduce_sum.3866 = f32[] add(%reduce_sum.3864, %reduce_sum.3865)
}

%region_1742.40181 (reduce_sum.40178: f32[], reduce_sum.40179: f32[]) -> f32[] {
  %reduce_sum.40178 = f32[] parameter(0)
  %reduce_sum.40179 = f32[] parameter(1)
  ROOT %reduce_sum.40180 = f32[] add(%reduce_sum.40178, %reduce_sum.40179)
}

%region_1742.40181.clone (reduce_sum.3867: f32[], reduce_sum.3868: f32[]) -> f32[] {
  %reduce_sum.3867 = f32[] parameter(0)
  %reduce_sum.3868 = f32[] parameter(1)
  ROOT %reduce_sum.3869 = f32[] add(%reduce_sum.3867, %reduce_sum.3868)
}

%region_1743.40190 (reduce_sum.40187: f32[], reduce_sum.40188: f32[]) -> f32[] {
  %reduce_sum.40187 = f32[] parameter(0)
  %reduce_sum.40188 = f32[] parameter(1)
  ROOT %reduce_sum.40189 = f32[] add(%reduce_sum.40187, %reduce_sum.40188)
}

%region_1744.40199 (reduce_sum.40196: f32[], reduce_sum.40197: f32[]) -> f32[] {
  %reduce_sum.40196 = f32[] parameter(0)
  %reduce_sum.40197 = f32[] parameter(1)
  ROOT %reduce_sum.40198 = f32[] add(%reduce_sum.40196, %reduce_sum.40197)
}

%region_1745.40208 (reduce_sum.40205: f32[], reduce_sum.40206: f32[]) -> f32[] {
  %reduce_sum.40205 = f32[] parameter(0)
  %reduce_sum.40206 = f32[] parameter(1)
  ROOT %reduce_sum.40207 = f32[] add(%reduce_sum.40205, %reduce_sum.40206)
}

%region_1745.40208.clone (reduce_sum.3870: f32[], reduce_sum.3871: f32[]) -> f32[] {
  %reduce_sum.3870 = f32[] parameter(0)
  %reduce_sum.3871 = f32[] parameter(1)
  ROOT %reduce_sum.3872 = f32[] add(%reduce_sum.3870, %reduce_sum.3871)
}

%region_1746.40217 (reduce_sum.40214: f32[], reduce_sum.40215: f32[]) -> f32[] {
  %reduce_sum.40214 = f32[] parameter(0)
  %reduce_sum.40215 = f32[] parameter(1)
  ROOT %reduce_sum.40216 = f32[] add(%reduce_sum.40214, %reduce_sum.40215)
}

%region_1746.40217.clone (reduce_sum.3873: f32[], reduce_sum.3874: f32[]) -> f32[] {
  %reduce_sum.3873 = f32[] parameter(0)
  %reduce_sum.3874 = f32[] parameter(1)
  ROOT %reduce_sum.3875 = f32[] add(%reduce_sum.3873, %reduce_sum.3874)
}

%region_1747.40226 (reduce_sum.40223: f32[], reduce_sum.40224: f32[]) -> f32[] {
  %reduce_sum.40223 = f32[] parameter(0)
  %reduce_sum.40224 = f32[] parameter(1)
  ROOT %reduce_sum.40225 = f32[] add(%reduce_sum.40223, %reduce_sum.40224)
}

%region_1747.40226.clone (reduce_sum.3876: f32[], reduce_sum.3877: f32[]) -> f32[] {
  %reduce_sum.3876 = f32[] parameter(0)
  %reduce_sum.3877 = f32[] parameter(1)
  ROOT %reduce_sum.3878 = f32[] add(%reduce_sum.3876, %reduce_sum.3877)
}

%region_1748.40235 (reduce_sum.40232: f32[], reduce_sum.40233: f32[]) -> f32[] {
  %reduce_sum.40232 = f32[] parameter(0)
  %reduce_sum.40233 = f32[] parameter(1)
  ROOT %reduce_sum.40234 = f32[] add(%reduce_sum.40232, %reduce_sum.40233)
}

%region_1748.40235.clone (reduce_sum.3879: f32[], reduce_sum.3880: f32[]) -> f32[] {
  %reduce_sum.3879 = f32[] parameter(0)
  %reduce_sum.3880 = f32[] parameter(1)
  ROOT %reduce_sum.3881 = f32[] add(%reduce_sum.3879, %reduce_sum.3880)
}

%region_1749.40244 (reduce_sum.40241: f32[], reduce_sum.40242: f32[]) -> f32[] {
  %reduce_sum.40241 = f32[] parameter(0)
  %reduce_sum.40242 = f32[] parameter(1)
  ROOT %reduce_sum.40243 = f32[] add(%reduce_sum.40241, %reduce_sum.40242)
}

%region_1749.40244.clone (reduce_sum.3882: f32[], reduce_sum.3883: f32[]) -> f32[] {
  %reduce_sum.3882 = f32[] parameter(0)
  %reduce_sum.3883 = f32[] parameter(1)
  ROOT %reduce_sum.3884 = f32[] add(%reduce_sum.3882, %reduce_sum.3883)
}

%region_1750.40253 (reduce_sum.40250: f32[], reduce_sum.40251: f32[]) -> f32[] {
  %reduce_sum.40250 = f32[] parameter(0)
  %reduce_sum.40251 = f32[] parameter(1)
  ROOT %reduce_sum.40252 = f32[] add(%reduce_sum.40250, %reduce_sum.40251)
}

%region_1750.40253.clone (reduce_sum.3885: f32[], reduce_sum.3886: f32[]) -> f32[] {
  %reduce_sum.3885 = f32[] parameter(0)
  %reduce_sum.3886 = f32[] parameter(1)
  ROOT %reduce_sum.3887 = f32[] add(%reduce_sum.3885, %reduce_sum.3886)
}

%region_1751.40262 (reduce_sum.40259: f32[], reduce_sum.40260: f32[]) -> f32[] {
  %reduce_sum.40259 = f32[] parameter(0)
  %reduce_sum.40260 = f32[] parameter(1)
  ROOT %reduce_sum.40261 = f32[] add(%reduce_sum.40259, %reduce_sum.40260)
}

%region_1751.40262.clone (reduce_sum.3888: f32[], reduce_sum.3889: f32[]) -> f32[] {
  %reduce_sum.3888 = f32[] parameter(0)
  %reduce_sum.3889 = f32[] parameter(1)
  ROOT %reduce_sum.3890 = f32[] add(%reduce_sum.3888, %reduce_sum.3889)
}

%region_1752.40271 (reduce_sum.40268: f32[], reduce_sum.40269: f32[]) -> f32[] {
  %reduce_sum.40268 = f32[] parameter(0)
  %reduce_sum.40269 = f32[] parameter(1)
  ROOT %reduce_sum.40270 = f32[] add(%reduce_sum.40268, %reduce_sum.40269)
}

%region_1752.40271.clone (reduce_sum.3891: f32[], reduce_sum.3892: f32[]) -> f32[] {
  %reduce_sum.3891 = f32[] parameter(0)
  %reduce_sum.3892 = f32[] parameter(1)
  ROOT %reduce_sum.3893 = f32[] add(%reduce_sum.3891, %reduce_sum.3892)
}

%region_1753.40280 (reduce_sum.40277: f32[], reduce_sum.40278: f32[]) -> f32[] {
  %reduce_sum.40277 = f32[] parameter(0)
  %reduce_sum.40278 = f32[] parameter(1)
  ROOT %reduce_sum.40279 = f32[] add(%reduce_sum.40277, %reduce_sum.40278)
}

%region_1754.40289 (reduce_sum.40286: f32[], reduce_sum.40287: f32[]) -> f32[] {
  %reduce_sum.40286 = f32[] parameter(0)
  %reduce_sum.40287 = f32[] parameter(1)
  ROOT %reduce_sum.40288 = f32[] add(%reduce_sum.40286, %reduce_sum.40287)
}

%region_1755.40298 (reduce_sum.40295: f32[], reduce_sum.40296: f32[]) -> f32[] {
  %reduce_sum.40295 = f32[] parameter(0)
  %reduce_sum.40296 = f32[] parameter(1)
  ROOT %reduce_sum.40297 = f32[] add(%reduce_sum.40295, %reduce_sum.40296)
}

%region_1755.40298.clone (reduce_sum.3894: f32[], reduce_sum.3895: f32[]) -> f32[] {
  %reduce_sum.3894 = f32[] parameter(0)
  %reduce_sum.3895 = f32[] parameter(1)
  ROOT %reduce_sum.3896 = f32[] add(%reduce_sum.3894, %reduce_sum.3895)
}

%region_1756.40307 (reduce_sum.40304: f32[], reduce_sum.40305: f32[]) -> f32[] {
  %reduce_sum.40304 = f32[] parameter(0)
  %reduce_sum.40305 = f32[] parameter(1)
  ROOT %reduce_sum.40306 = f32[] add(%reduce_sum.40304, %reduce_sum.40305)
}

%region_1756.40307.clone (reduce_sum.3897: f32[], reduce_sum.3898: f32[]) -> f32[] {
  %reduce_sum.3897 = f32[] parameter(0)
  %reduce_sum.3898 = f32[] parameter(1)
  ROOT %reduce_sum.3899 = f32[] add(%reduce_sum.3897, %reduce_sum.3898)
}

%region_1757.40316 (reduce_sum.40313: f32[], reduce_sum.40314: f32[]) -> f32[] {
  %reduce_sum.40313 = f32[] parameter(0)
  %reduce_sum.40314 = f32[] parameter(1)
  ROOT %reduce_sum.40315 = f32[] add(%reduce_sum.40313, %reduce_sum.40314)
}

%region_1757.40316.clone (reduce_sum.3900: f32[], reduce_sum.3901: f32[]) -> f32[] {
  %reduce_sum.3900 = f32[] parameter(0)
  %reduce_sum.3901 = f32[] parameter(1)
  ROOT %reduce_sum.3902 = f32[] add(%reduce_sum.3900, %reduce_sum.3901)
}

%region_1758.40325 (reduce_sum.40322: f32[], reduce_sum.40323: f32[]) -> f32[] {
  %reduce_sum.40322 = f32[] parameter(0)
  %reduce_sum.40323 = f32[] parameter(1)
  ROOT %reduce_sum.40324 = f32[] add(%reduce_sum.40322, %reduce_sum.40323)
}

%region_1758.40325.clone (reduce_sum.3906: f32[], reduce_sum.3908: f32[]) -> f32[] {
  %reduce_sum.3906 = f32[] parameter(0)
  %reduce_sum.3908 = f32[] parameter(1)
  ROOT %reduce_sum.3909 = f32[] add(%reduce_sum.3906, %reduce_sum.3908)
}

%region_1759.40334 (reduce_sum.40331: f32[], reduce_sum.40332: f32[]) -> f32[] {
  %reduce_sum.40331 = f32[] parameter(0)
  %reduce_sum.40332 = f32[] parameter(1)
  ROOT %reduce_sum.40333 = f32[] add(%reduce_sum.40331, %reduce_sum.40332)
}

%region_1759.40334.clone (reduce_sum.3910: f32[], reduce_sum.3911: f32[]) -> f32[] {
  %reduce_sum.3910 = f32[] parameter(0)
  %reduce_sum.3911 = f32[] parameter(1)
  ROOT %reduce_sum.3915 = f32[] add(%reduce_sum.3910, %reduce_sum.3911)
}

%region_1760.40343 (reduce_sum.40340: f32[], reduce_sum.40341: f32[]) -> f32[] {
  %reduce_sum.40340 = f32[] parameter(0)
  %reduce_sum.40341 = f32[] parameter(1)
  ROOT %reduce_sum.40342 = f32[] add(%reduce_sum.40340, %reduce_sum.40341)
}

%region_1760.40343.clone (reduce_sum.3917: f32[], reduce_sum.3918: f32[]) -> f32[] {
  %reduce_sum.3917 = f32[] parameter(0)
  %reduce_sum.3918 = f32[] parameter(1)
  ROOT %reduce_sum.3919 = f32[] add(%reduce_sum.3917, %reduce_sum.3918)
}

%region_1761.40352 (reduce_sum.40349: f32[], reduce_sum.40350: f32[]) -> f32[] {
  %reduce_sum.40349 = f32[] parameter(0)
  %reduce_sum.40350 = f32[] parameter(1)
  ROOT %reduce_sum.40351 = f32[] add(%reduce_sum.40349, %reduce_sum.40350)
}

%region_1761.40352.clone (reduce_sum.3920: f32[], reduce_sum.3921: f32[]) -> f32[] {
  %reduce_sum.3920 = f32[] parameter(0)
  %reduce_sum.3921 = f32[] parameter(1)
  ROOT %reduce_sum.3922 = f32[] add(%reduce_sum.3920, %reduce_sum.3921)
}

%region_1762.40361 (reduce_sum.40358: f32[], reduce_sum.40359: f32[]) -> f32[] {
  %reduce_sum.40358 = f32[] parameter(0)
  %reduce_sum.40359 = f32[] parameter(1)
  ROOT %reduce_sum.40360 = f32[] add(%reduce_sum.40358, %reduce_sum.40359)
}

%region_1762.40361.clone (reduce_sum.3923: f32[], reduce_sum.3924: f32[]) -> f32[] {
  %reduce_sum.3923 = f32[] parameter(0)
  %reduce_sum.3924 = f32[] parameter(1)
  ROOT %reduce_sum.3925 = f32[] add(%reduce_sum.3923, %reduce_sum.3924)
}

%region_1763.40370 (reduce_sum.40367: f32[], reduce_sum.40368: f32[]) -> f32[] {
  %reduce_sum.40367 = f32[] parameter(0)
  %reduce_sum.40368 = f32[] parameter(1)
  ROOT %reduce_sum.40369 = f32[] add(%reduce_sum.40367, %reduce_sum.40368)
}

%region_1764.40379 (reduce_sum.40376: f32[], reduce_sum.40377: f32[]) -> f32[] {
  %reduce_sum.40376 = f32[] parameter(0)
  %reduce_sum.40377 = f32[] parameter(1)
  ROOT %reduce_sum.40378 = f32[] add(%reduce_sum.40376, %reduce_sum.40377)
}

%region_1765.40388 (reduce_sum.40385: f32[], reduce_sum.40386: f32[]) -> f32[] {
  %reduce_sum.40385 = f32[] parameter(0)
  %reduce_sum.40386 = f32[] parameter(1)
  ROOT %reduce_sum.40387 = f32[] add(%reduce_sum.40385, %reduce_sum.40386)
}

%region_1765.40388.clone (reduce_sum.3926: f32[], reduce_sum.3930: f32[]) -> f32[] {
  %reduce_sum.3926 = f32[] parameter(0)
  %reduce_sum.3930 = f32[] parameter(1)
  ROOT %reduce_sum.3933 = f32[] add(%reduce_sum.3926, %reduce_sum.3930)
}

%region_1766.40397 (reduce_sum.40394: f32[], reduce_sum.40395: f32[]) -> f32[] {
  %reduce_sum.40394 = f32[] parameter(0)
  %reduce_sum.40395 = f32[] parameter(1)
  ROOT %reduce_sum.40396 = f32[] add(%reduce_sum.40394, %reduce_sum.40395)
}

%region_1766.40397.clone (reduce_sum.3934: f32[], reduce_sum.3935: f32[]) -> f32[] {
  %reduce_sum.3934 = f32[] parameter(0)
  %reduce_sum.3935 = f32[] parameter(1)
  ROOT %reduce_sum.3939 = f32[] add(%reduce_sum.3934, %reduce_sum.3935)
}

%region_1767.40406 (reduce_sum.40403: f32[], reduce_sum.40404: f32[]) -> f32[] {
  %reduce_sum.40403 = f32[] parameter(0)
  %reduce_sum.40404 = f32[] parameter(1)
  ROOT %reduce_sum.40405 = f32[] add(%reduce_sum.40403, %reduce_sum.40404)
}

%region_1767.40406.clone (reduce_sum.3942: f32[], reduce_sum.3943: f32[]) -> f32[] {
  %reduce_sum.3942 = f32[] parameter(0)
  %reduce_sum.3943 = f32[] parameter(1)
  ROOT %reduce_sum.3944 = f32[] add(%reduce_sum.3942, %reduce_sum.3943)
}

%region_1768.40415 (reduce_sum.40412: f32[], reduce_sum.40413: f32[]) -> f32[] {
  %reduce_sum.40412 = f32[] parameter(0)
  %reduce_sum.40413 = f32[] parameter(1)
  ROOT %reduce_sum.40414 = f32[] add(%reduce_sum.40412, %reduce_sum.40413)
}

%region_1768.40415.clone (reduce_sum.3945: f32[], reduce_sum.3946: f32[]) -> f32[] {
  %reduce_sum.3945 = f32[] parameter(0)
  %reduce_sum.3946 = f32[] parameter(1)
  ROOT %reduce_sum.3947 = f32[] add(%reduce_sum.3945, %reduce_sum.3946)
}

%region_1769.40424 (reduce_sum.40421: f32[], reduce_sum.40422: f32[]) -> f32[] {
  %reduce_sum.40421 = f32[] parameter(0)
  %reduce_sum.40422 = f32[] parameter(1)
  ROOT %reduce_sum.40423 = f32[] add(%reduce_sum.40421, %reduce_sum.40422)
}

%region_1769.40424.clone (reduce_sum.3948: f32[], reduce_sum.3949: f32[]) -> f32[] {
  %reduce_sum.3948 = f32[] parameter(0)
  %reduce_sum.3949 = f32[] parameter(1)
  ROOT %reduce_sum.3950 = f32[] add(%reduce_sum.3948, %reduce_sum.3949)
}

%region_1770.40433 (reduce_sum.40430: f32[], reduce_sum.40431: f32[]) -> f32[] {
  %reduce_sum.40430 = f32[] parameter(0)
  %reduce_sum.40431 = f32[] parameter(1)
  ROOT %reduce_sum.40432 = f32[] add(%reduce_sum.40430, %reduce_sum.40431)
}

%region_1770.40433.clone (reduce_sum.3954: f32[], reduce_sum.3956: f32[]) -> f32[] {
  %reduce_sum.3954 = f32[] parameter(0)
  %reduce_sum.3956 = f32[] parameter(1)
  ROOT %reduce_sum.3960 = f32[] add(%reduce_sum.3954, %reduce_sum.3956)
}

%region_1771.40442 (reduce_sum.40439: f32[], reduce_sum.40440: f32[]) -> f32[] {
  %reduce_sum.40439 = f32[] parameter(0)
  %reduce_sum.40440 = f32[] parameter(1)
  ROOT %reduce_sum.40441 = f32[] add(%reduce_sum.40439, %reduce_sum.40440)
}

%region_1771.40442.clone (reduce_sum.3962: f32[], reduce_sum.3963: f32[]) -> f32[] {
  %reduce_sum.3962 = f32[] parameter(0)
  %reduce_sum.3963 = f32[] parameter(1)
  ROOT %reduce_sum.3964 = f32[] add(%reduce_sum.3962, %reduce_sum.3963)
}

%region_1772.40451 (reduce_sum.40448: f32[], reduce_sum.40449: f32[]) -> f32[] {
  %reduce_sum.40448 = f32[] parameter(0)
  %reduce_sum.40449 = f32[] parameter(1)
  ROOT %reduce_sum.40450 = f32[] add(%reduce_sum.40448, %reduce_sum.40449)
}

%region_1772.40451.clone (reduce_sum.3965: f32[], reduce_sum.3966: f32[]) -> f32[] {
  %reduce_sum.3965 = f32[] parameter(0)
  %reduce_sum.3966 = f32[] parameter(1)
  ROOT %reduce_sum.3967 = f32[] add(%reduce_sum.3965, %reduce_sum.3966)
}

%region_1773.40460 (reduce_sum.40457: f32[], reduce_sum.40458: f32[]) -> f32[] {
  %reduce_sum.40457 = f32[] parameter(0)
  %reduce_sum.40458 = f32[] parameter(1)
  ROOT %reduce_sum.40459 = f32[] add(%reduce_sum.40457, %reduce_sum.40458)
}

%region_1774.40469 (reduce_sum.40466: f32[], reduce_sum.40467: f32[]) -> f32[] {
  %reduce_sum.40466 = f32[] parameter(0)
  %reduce_sum.40467 = f32[] parameter(1)
  ROOT %reduce_sum.40468 = f32[] add(%reduce_sum.40466, %reduce_sum.40467)
}

%region_1775.40478 (reduce_sum.40475: f32[], reduce_sum.40476: f32[]) -> f32[] {
  %reduce_sum.40475 = f32[] parameter(0)
  %reduce_sum.40476 = f32[] parameter(1)
  ROOT %reduce_sum.40477 = f32[] add(%reduce_sum.40475, %reduce_sum.40476)
}

%region_1775.40478.clone (reduce_sum.3968: f32[], reduce_sum.3969: f32[]) -> f32[] {
  %reduce_sum.3968 = f32[] parameter(0)
  %reduce_sum.3969 = f32[] parameter(1)
  ROOT %reduce_sum.3970 = f32[] add(%reduce_sum.3968, %reduce_sum.3969)
}

%region_1776.40487 (reduce_sum.40484: f32[], reduce_sum.40485: f32[]) -> f32[] {
  %reduce_sum.40484 = f32[] parameter(0)
  %reduce_sum.40485 = f32[] parameter(1)
  ROOT %reduce_sum.40486 = f32[] add(%reduce_sum.40484, %reduce_sum.40485)
}

%region_1776.40487.clone (reduce_sum.3971: f32[], reduce_sum.3972: f32[]) -> f32[] {
  %reduce_sum.3971 = f32[] parameter(0)
  %reduce_sum.3972 = f32[] parameter(1)
  ROOT %reduce_sum.3973 = f32[] add(%reduce_sum.3971, %reduce_sum.3972)
}

%region_1777.40496 (reduce_sum.40493: f32[], reduce_sum.40494: f32[]) -> f32[] {
  %reduce_sum.40493 = f32[] parameter(0)
  %reduce_sum.40494 = f32[] parameter(1)
  ROOT %reduce_sum.40495 = f32[] add(%reduce_sum.40493, %reduce_sum.40494)
}

%region_1777.40496.clone (reduce_sum.3974: f32[], reduce_sum.3975: f32[]) -> f32[] {
  %reduce_sum.3974 = f32[] parameter(0)
  %reduce_sum.3975 = f32[] parameter(1)
  ROOT %reduce_sum.3976 = f32[] add(%reduce_sum.3974, %reduce_sum.3975)
}

%region_1778.40505 (reduce_sum.40502: f32[], reduce_sum.40503: f32[]) -> f32[] {
  %reduce_sum.40502 = f32[] parameter(0)
  %reduce_sum.40503 = f32[] parameter(1)
  ROOT %reduce_sum.40504 = f32[] add(%reduce_sum.40502, %reduce_sum.40503)
}

%region_1778.40505.clone (reduce_sum.3977: f32[], reduce_sum.3978: f32[]) -> f32[] {
  %reduce_sum.3977 = f32[] parameter(0)
  %reduce_sum.3978 = f32[] parameter(1)
  ROOT %reduce_sum.3979 = f32[] add(%reduce_sum.3977, %reduce_sum.3978)
}

%region_1779.40514 (reduce_sum.40511: f32[], reduce_sum.40512: f32[]) -> f32[] {
  %reduce_sum.40511 = f32[] parameter(0)
  %reduce_sum.40512 = f32[] parameter(1)
  ROOT %reduce_sum.40513 = f32[] add(%reduce_sum.40511, %reduce_sum.40512)
}

%region_1779.40514.clone (reduce_sum.3980: f32[], reduce_sum.3981: f32[]) -> f32[] {
  %reduce_sum.3980 = f32[] parameter(0)
  %reduce_sum.3981 = f32[] parameter(1)
  ROOT %reduce_sum.3982 = f32[] add(%reduce_sum.3980, %reduce_sum.3981)
}

%region_1780.40523 (reduce_sum.40520: f32[], reduce_sum.40521: f32[]) -> f32[] {
  %reduce_sum.40520 = f32[] parameter(0)
  %reduce_sum.40521 = f32[] parameter(1)
  ROOT %reduce_sum.40522 = f32[] add(%reduce_sum.40520, %reduce_sum.40521)
}

%region_1780.40523.clone (reduce_sum.3983: f32[], reduce_sum.3984: f32[]) -> f32[] {
  %reduce_sum.3983 = f32[] parameter(0)
  %reduce_sum.3984 = f32[] parameter(1)
  ROOT %reduce_sum.3985 = f32[] add(%reduce_sum.3983, %reduce_sum.3984)
}

%region_1781.40532 (reduce_sum.40529: f32[], reduce_sum.40530: f32[]) -> f32[] {
  %reduce_sum.40529 = f32[] parameter(0)
  %reduce_sum.40530 = f32[] parameter(1)
  ROOT %reduce_sum.40531 = f32[] add(%reduce_sum.40529, %reduce_sum.40530)
}

%region_1781.40532.clone (reduce_sum.3986: f32[], reduce_sum.3987: f32[]) -> f32[] {
  %reduce_sum.3986 = f32[] parameter(0)
  %reduce_sum.3987 = f32[] parameter(1)
  ROOT %reduce_sum.3988 = f32[] add(%reduce_sum.3986, %reduce_sum.3987)
}

%region_1782.40541 (reduce_sum.40538: f32[], reduce_sum.40539: f32[]) -> f32[] {
  %reduce_sum.40538 = f32[] parameter(0)
  %reduce_sum.40539 = f32[] parameter(1)
  ROOT %reduce_sum.40540 = f32[] add(%reduce_sum.40538, %reduce_sum.40539)
}

%region_1782.40541.clone (reduce_sum.3989: f32[], reduce_sum.3990: f32[]) -> f32[] {
  %reduce_sum.3989 = f32[] parameter(0)
  %reduce_sum.3990 = f32[] parameter(1)
  ROOT %reduce_sum.3991 = f32[] add(%reduce_sum.3989, %reduce_sum.3990)
}

%region_1783.40550 (reduce_sum.40547: f32[], reduce_sum.40548: f32[]) -> f32[] {
  %reduce_sum.40547 = f32[] parameter(0)
  %reduce_sum.40548 = f32[] parameter(1)
  ROOT %reduce_sum.40549 = f32[] add(%reduce_sum.40547, %reduce_sum.40548)
}

%region_1784.40559 (reduce_sum.40556: f32[], reduce_sum.40557: f32[]) -> f32[] {
  %reduce_sum.40556 = f32[] parameter(0)
  %reduce_sum.40557 = f32[] parameter(1)
  ROOT %reduce_sum.40558 = f32[] add(%reduce_sum.40556, %reduce_sum.40557)
}

%region_1785.40568 (reduce_sum.40565: f32[], reduce_sum.40566: f32[]) -> f32[] {
  %reduce_sum.40565 = f32[] parameter(0)
  %reduce_sum.40566 = f32[] parameter(1)
  ROOT %reduce_sum.40567 = f32[] add(%reduce_sum.40565, %reduce_sum.40566)
}

%region_1785.40568.clone (reduce_sum.3992: f32[], reduce_sum.3993: f32[]) -> f32[] {
  %reduce_sum.3992 = f32[] parameter(0)
  %reduce_sum.3993 = f32[] parameter(1)
  ROOT %reduce_sum.3994 = f32[] add(%reduce_sum.3992, %reduce_sum.3993)
}

%region_1786.40577 (reduce_sum.40574: f32[], reduce_sum.40575: f32[]) -> f32[] {
  %reduce_sum.40574 = f32[] parameter(0)
  %reduce_sum.40575 = f32[] parameter(1)
  ROOT %reduce_sum.40576 = f32[] add(%reduce_sum.40574, %reduce_sum.40575)
}

%region_1786.40577.clone (reduce_sum.3995: f32[], reduce_sum.3996: f32[]) -> f32[] {
  %reduce_sum.3995 = f32[] parameter(0)
  %reduce_sum.3996 = f32[] parameter(1)
  ROOT %reduce_sum.3997 = f32[] add(%reduce_sum.3995, %reduce_sum.3996)
}

%region_1787.40586 (reduce_sum.40583: f32[], reduce_sum.40584: f32[]) -> f32[] {
  %reduce_sum.40583 = f32[] parameter(0)
  %reduce_sum.40584 = f32[] parameter(1)
  ROOT %reduce_sum.40585 = f32[] add(%reduce_sum.40583, %reduce_sum.40584)
}

%region_1787.40586.clone (reduce_sum.3998: f32[], reduce_sum.3999: f32[]) -> f32[] {
  %reduce_sum.3998 = f32[] parameter(0)
  %reduce_sum.3999 = f32[] parameter(1)
  ROOT %reduce_sum.4000 = f32[] add(%reduce_sum.3998, %reduce_sum.3999)
}

%region_1788.40595 (reduce_sum.40592: f32[], reduce_sum.40593: f32[]) -> f32[] {
  %reduce_sum.40592 = f32[] parameter(0)
  %reduce_sum.40593 = f32[] parameter(1)
  ROOT %reduce_sum.40594 = f32[] add(%reduce_sum.40592, %reduce_sum.40593)
}

%region_1788.40595.clone (reduce_sum.4001: f32[], reduce_sum.4002: f32[]) -> f32[] {
  %reduce_sum.4001 = f32[] parameter(0)
  %reduce_sum.4002 = f32[] parameter(1)
  ROOT %reduce_sum.4003 = f32[] add(%reduce_sum.4001, %reduce_sum.4002)
}

%region_1789.40604 (reduce_sum.40601: f32[], reduce_sum.40602: f32[]) -> f32[] {
  %reduce_sum.40601 = f32[] parameter(0)
  %reduce_sum.40602 = f32[] parameter(1)
  ROOT %reduce_sum.40603 = f32[] add(%reduce_sum.40601, %reduce_sum.40602)
}

%region_1789.40604.clone (reduce_sum.4004: f32[], reduce_sum.4005: f32[]) -> f32[] {
  %reduce_sum.4004 = f32[] parameter(0)
  %reduce_sum.4005 = f32[] parameter(1)
  ROOT %reduce_sum.4006 = f32[] add(%reduce_sum.4004, %reduce_sum.4005)
}

%region_1790.40613 (reduce_sum.40610: f32[], reduce_sum.40611: f32[]) -> f32[] {
  %reduce_sum.40610 = f32[] parameter(0)
  %reduce_sum.40611 = f32[] parameter(1)
  ROOT %reduce_sum.40612 = f32[] add(%reduce_sum.40610, %reduce_sum.40611)
}

%region_1790.40613.clone (reduce_sum.4007: f32[], reduce_sum.4008: f32[]) -> f32[] {
  %reduce_sum.4007 = f32[] parameter(0)
  %reduce_sum.4008 = f32[] parameter(1)
  ROOT %reduce_sum.4009 = f32[] add(%reduce_sum.4007, %reduce_sum.4008)
}

%region_1791.40622 (reduce_sum.40619: f32[], reduce_sum.40620: f32[]) -> f32[] {
  %reduce_sum.40619 = f32[] parameter(0)
  %reduce_sum.40620 = f32[] parameter(1)
  ROOT %reduce_sum.40621 = f32[] add(%reduce_sum.40619, %reduce_sum.40620)
}

%region_1791.40622.clone (reduce_sum.4010: f32[], reduce_sum.4011: f32[]) -> f32[] {
  %reduce_sum.4010 = f32[] parameter(0)
  %reduce_sum.4011 = f32[] parameter(1)
  ROOT %reduce_sum.4012 = f32[] add(%reduce_sum.4010, %reduce_sum.4011)
}

%region_1792.40631 (reduce_sum.40628: f32[], reduce_sum.40629: f32[]) -> f32[] {
  %reduce_sum.40628 = f32[] parameter(0)
  %reduce_sum.40629 = f32[] parameter(1)
  ROOT %reduce_sum.40630 = f32[] add(%reduce_sum.40628, %reduce_sum.40629)
}

%region_1792.40631.clone (reduce_sum.4013: f32[], reduce_sum.4014: f32[]) -> f32[] {
  %reduce_sum.4013 = f32[] parameter(0)
  %reduce_sum.4014 = f32[] parameter(1)
  ROOT %reduce_sum.4015 = f32[] add(%reduce_sum.4013, %reduce_sum.4014)
}

%region_1793.40640 (reduce_sum.40637: f32[], reduce_sum.40638: f32[]) -> f32[] {
  %reduce_sum.40637 = f32[] parameter(0)
  %reduce_sum.40638 = f32[] parameter(1)
  ROOT %reduce_sum.40639 = f32[] add(%reduce_sum.40637, %reduce_sum.40638)
}

%region_1794.40649 (reduce_sum.40646: f32[], reduce_sum.40647: f32[]) -> f32[] {
  %reduce_sum.40646 = f32[] parameter(0)
  %reduce_sum.40647 = f32[] parameter(1)
  ROOT %reduce_sum.40648 = f32[] add(%reduce_sum.40646, %reduce_sum.40647)
}

%region_1795.40658 (reduce_sum.40655: f32[], reduce_sum.40656: f32[]) -> f32[] {
  %reduce_sum.40655 = f32[] parameter(0)
  %reduce_sum.40656 = f32[] parameter(1)
  ROOT %reduce_sum.40657 = f32[] add(%reduce_sum.40655, %reduce_sum.40656)
}

%region_1795.40658.clone (reduce_sum.4016: f32[], reduce_sum.4017: f32[]) -> f32[] {
  %reduce_sum.4016 = f32[] parameter(0)
  %reduce_sum.4017 = f32[] parameter(1)
  ROOT %reduce_sum.4018 = f32[] add(%reduce_sum.4016, %reduce_sum.4017)
}

%region_1796.40667 (reduce_sum.40664: f32[], reduce_sum.40665: f32[]) -> f32[] {
  %reduce_sum.40664 = f32[] parameter(0)
  %reduce_sum.40665 = f32[] parameter(1)
  ROOT %reduce_sum.40666 = f32[] add(%reduce_sum.40664, %reduce_sum.40665)
}

%region_1796.40667.clone (reduce_sum.4019: f32[], reduce_sum.4020: f32[]) -> f32[] {
  %reduce_sum.4019 = f32[] parameter(0)
  %reduce_sum.4020 = f32[] parameter(1)
  ROOT %reduce_sum.4021 = f32[] add(%reduce_sum.4019, %reduce_sum.4020)
}

%region_1797.40676 (reduce_sum.40673: f32[], reduce_sum.40674: f32[]) -> f32[] {
  %reduce_sum.40673 = f32[] parameter(0)
  %reduce_sum.40674 = f32[] parameter(1)
  ROOT %reduce_sum.40675 = f32[] add(%reduce_sum.40673, %reduce_sum.40674)
}

%region_1797.40676.clone (reduce_sum.4025: f32[], reduce_sum.4027: f32[]) -> f32[] {
  %reduce_sum.4025 = f32[] parameter(0)
  %reduce_sum.4027 = f32[] parameter(1)
  ROOT %reduce_sum.4028 = f32[] add(%reduce_sum.4025, %reduce_sum.4027)
}

%region_1798.40685 (reduce_sum.40682: f32[], reduce_sum.40683: f32[]) -> f32[] {
  %reduce_sum.40682 = f32[] parameter(0)
  %reduce_sum.40683 = f32[] parameter(1)
  ROOT %reduce_sum.40684 = f32[] add(%reduce_sum.40682, %reduce_sum.40683)
}

%region_1798.40685.clone (reduce_sum.4029: f32[], reduce_sum.4030: f32[]) -> f32[] {
  %reduce_sum.4029 = f32[] parameter(0)
  %reduce_sum.4030 = f32[] parameter(1)
  ROOT %reduce_sum.4031 = f32[] add(%reduce_sum.4029, %reduce_sum.4030)
}

%region_1799.40694 (reduce_sum.40691: f32[], reduce_sum.40692: f32[]) -> f32[] {
  %reduce_sum.40691 = f32[] parameter(0)
  %reduce_sum.40692 = f32[] parameter(1)
  ROOT %reduce_sum.40693 = f32[] add(%reduce_sum.40691, %reduce_sum.40692)
}

%region_1799.40694.clone (reduce_sum.4032: f32[], reduce_sum.4033: f32[]) -> f32[] {
  %reduce_sum.4032 = f32[] parameter(0)
  %reduce_sum.4033 = f32[] parameter(1)
  ROOT %reduce_sum.4034 = f32[] add(%reduce_sum.4032, %reduce_sum.4033)
}

%region_1800.40703 (reduce_sum.40700: f32[], reduce_sum.40701: f32[]) -> f32[] {
  %reduce_sum.40700 = f32[] parameter(0)
  %reduce_sum.40701 = f32[] parameter(1)
  ROOT %reduce_sum.40702 = f32[] add(%reduce_sum.40700, %reduce_sum.40701)
}

%region_1800.40703.clone (reduce_sum.4035: f32[], reduce_sum.4036: f32[]) -> f32[] {
  %reduce_sum.4035 = f32[] parameter(0)
  %reduce_sum.4036 = f32[] parameter(1)
  ROOT %reduce_sum.4037 = f32[] add(%reduce_sum.4035, %reduce_sum.4036)
}

%region_1801.40712 (reduce_sum.40709: f32[], reduce_sum.40710: f32[]) -> f32[] {
  %reduce_sum.40709 = f32[] parameter(0)
  %reduce_sum.40710 = f32[] parameter(1)
  ROOT %reduce_sum.40711 = f32[] add(%reduce_sum.40709, %reduce_sum.40710)
}

%region_1801.40712.clone (reduce_sum.4038: f32[], reduce_sum.4039: f32[]) -> f32[] {
  %reduce_sum.4038 = f32[] parameter(0)
  %reduce_sum.4039 = f32[] parameter(1)
  ROOT %reduce_sum.4040 = f32[] add(%reduce_sum.4038, %reduce_sum.4039)
}

%region_1802.40721 (reduce_sum.40718: f32[], reduce_sum.40719: f32[]) -> f32[] {
  %reduce_sum.40718 = f32[] parameter(0)
  %reduce_sum.40719 = f32[] parameter(1)
  ROOT %reduce_sum.40720 = f32[] add(%reduce_sum.40718, %reduce_sum.40719)
}

%region_1802.40721.clone (reduce_sum.4041: f32[], reduce_sum.4042: f32[]) -> f32[] {
  %reduce_sum.4041 = f32[] parameter(0)
  %reduce_sum.4042 = f32[] parameter(1)
  ROOT %reduce_sum.4043 = f32[] add(%reduce_sum.4041, %reduce_sum.4042)
}

%region_1803.40730 (reduce_sum.40727: f32[], reduce_sum.40728: f32[]) -> f32[] {
  %reduce_sum.40727 = f32[] parameter(0)
  %reduce_sum.40728 = f32[] parameter(1)
  ROOT %reduce_sum.40729 = f32[] add(%reduce_sum.40727, %reduce_sum.40728)
}

%region_1804.40739 (reduce_sum.40736: f32[], reduce_sum.40737: f32[]) -> f32[] {
  %reduce_sum.40736 = f32[] parameter(0)
  %reduce_sum.40737 = f32[] parameter(1)
  ROOT %reduce_sum.40738 = f32[] add(%reduce_sum.40736, %reduce_sum.40737)
}

%region_1805.40748 (reduce_sum.40745: f32[], reduce_sum.40746: f32[]) -> f32[] {
  %reduce_sum.40745 = f32[] parameter(0)
  %reduce_sum.40746 = f32[] parameter(1)
  ROOT %reduce_sum.40747 = f32[] add(%reduce_sum.40745, %reduce_sum.40746)
}

%region_1805.40748.clone (reduce_sum.4044: f32[], reduce_sum.4045: f32[]) -> f32[] {
  %reduce_sum.4044 = f32[] parameter(0)
  %reduce_sum.4045 = f32[] parameter(1)
  ROOT %reduce_sum.4046 = f32[] add(%reduce_sum.4044, %reduce_sum.4045)
}

%region_1806.40757 (reduce_sum.40754: f32[], reduce_sum.40755: f32[]) -> f32[] {
  %reduce_sum.40754 = f32[] parameter(0)
  %reduce_sum.40755 = f32[] parameter(1)
  ROOT %reduce_sum.40756 = f32[] add(%reduce_sum.40754, %reduce_sum.40755)
}

%region_1806.40757.clone (reduce_sum.4047: f32[], reduce_sum.4048: f32[]) -> f32[] {
  %reduce_sum.4047 = f32[] parameter(0)
  %reduce_sum.4048 = f32[] parameter(1)
  ROOT %reduce_sum.4049 = f32[] add(%reduce_sum.4047, %reduce_sum.4048)
}

%region_1807.40766 (reduce_sum.40763: f32[], reduce_sum.40764: f32[]) -> f32[] {
  %reduce_sum.40763 = f32[] parameter(0)
  %reduce_sum.40764 = f32[] parameter(1)
  ROOT %reduce_sum.40765 = f32[] add(%reduce_sum.40763, %reduce_sum.40764)
}

%region_1807.40766.clone (reduce_sum.4050: f32[], reduce_sum.4051: f32[]) -> f32[] {
  %reduce_sum.4050 = f32[] parameter(0)
  %reduce_sum.4051 = f32[] parameter(1)
  ROOT %reduce_sum.4055 = f32[] add(%reduce_sum.4050, %reduce_sum.4051)
}

%region_1808.40775 (reduce_sum.40772: f32[], reduce_sum.40773: f32[]) -> f32[] {
  %reduce_sum.40772 = f32[] parameter(0)
  %reduce_sum.40773 = f32[] parameter(1)
  ROOT %reduce_sum.40774 = f32[] add(%reduce_sum.40772, %reduce_sum.40773)
}

%region_1808.40775.clone (reduce_sum.4057: f32[], reduce_sum.4058: f32[]) -> f32[] {
  %reduce_sum.4057 = f32[] parameter(0)
  %reduce_sum.4058 = f32[] parameter(1)
  ROOT %reduce_sum.4059 = f32[] add(%reduce_sum.4057, %reduce_sum.4058)
}

%region_1809.40784 (reduce_sum.40781: f32[], reduce_sum.40782: f32[]) -> f32[] {
  %reduce_sum.40781 = f32[] parameter(0)
  %reduce_sum.40782 = f32[] parameter(1)
  ROOT %reduce_sum.40783 = f32[] add(%reduce_sum.40781, %reduce_sum.40782)
}

%region_1809.40784.clone (reduce_sum.4060: f32[], reduce_sum.4061: f32[]) -> f32[] {
  %reduce_sum.4060 = f32[] parameter(0)
  %reduce_sum.4061 = f32[] parameter(1)
  ROOT %reduce_sum.4065 = f32[] add(%reduce_sum.4060, %reduce_sum.4061)
}

%region_1810.40793 (reduce_sum.40790: f32[], reduce_sum.40791: f32[]) -> f32[] {
  %reduce_sum.40790 = f32[] parameter(0)
  %reduce_sum.40791 = f32[] parameter(1)
  ROOT %reduce_sum.40792 = f32[] add(%reduce_sum.40790, %reduce_sum.40791)
}

%region_1810.40793.clone (reduce_sum.4067: f32[], reduce_sum.4068: f32[]) -> f32[] {
  %reduce_sum.4067 = f32[] parameter(0)
  %reduce_sum.4068 = f32[] parameter(1)
  ROOT %reduce_sum.4069 = f32[] add(%reduce_sum.4067, %reduce_sum.4068)
}

%region_1811.40802 (reduce_sum.40799: f32[], reduce_sum.40800: f32[]) -> f32[] {
  %reduce_sum.40799 = f32[] parameter(0)
  %reduce_sum.40800 = f32[] parameter(1)
  ROOT %reduce_sum.40801 = f32[] add(%reduce_sum.40799, %reduce_sum.40800)
}

%region_1811.40802.clone (reduce_sum.4070: f32[], reduce_sum.4071: f32[]) -> f32[] {
  %reduce_sum.4070 = f32[] parameter(0)
  %reduce_sum.4071 = f32[] parameter(1)
  ROOT %reduce_sum.4072 = f32[] add(%reduce_sum.4070, %reduce_sum.4071)
}

%region_1812.40811 (reduce_sum.40808: f32[], reduce_sum.40809: f32[]) -> f32[] {
  %reduce_sum.40808 = f32[] parameter(0)
  %reduce_sum.40809 = f32[] parameter(1)
  ROOT %reduce_sum.40810 = f32[] add(%reduce_sum.40808, %reduce_sum.40809)
}

%region_1812.40811.clone (reduce_sum.4073: f32[], reduce_sum.4074: f32[]) -> f32[] {
  %reduce_sum.4073 = f32[] parameter(0)
  %reduce_sum.4074 = f32[] parameter(1)
  ROOT %reduce_sum.4075 = f32[] add(%reduce_sum.4073, %reduce_sum.4074)
}

%region_1813.40820 (reduce_sum.40817: f32[], reduce_sum.40818: f32[]) -> f32[] {
  %reduce_sum.40817 = f32[] parameter(0)
  %reduce_sum.40818 = f32[] parameter(1)
  ROOT %reduce_sum.40819 = f32[] add(%reduce_sum.40817, %reduce_sum.40818)
}

%region_1814.40829 (reduce_sum.40826: f32[], reduce_sum.40827: f32[]) -> f32[] {
  %reduce_sum.40826 = f32[] parameter(0)
  %reduce_sum.40827 = f32[] parameter(1)
  ROOT %reduce_sum.40828 = f32[] add(%reduce_sum.40826, %reduce_sum.40827)
}

%region_1815.40838 (reduce_sum.40835: f32[], reduce_sum.40836: f32[]) -> f32[] {
  %reduce_sum.40835 = f32[] parameter(0)
  %reduce_sum.40836 = f32[] parameter(1)
  ROOT %reduce_sum.40837 = f32[] add(%reduce_sum.40835, %reduce_sum.40836)
}

%region_1815.40838.clone (reduce_sum.4076: f32[], reduce_sum.4077: f32[]) -> f32[] {
  %reduce_sum.4076 = f32[] parameter(0)
  %reduce_sum.4077 = f32[] parameter(1)
  ROOT %reduce_sum.4078 = f32[] add(%reduce_sum.4076, %reduce_sum.4077)
}

%region_1816.40847 (reduce_sum.40844: f32[], reduce_sum.40845: f32[]) -> f32[] {
  %reduce_sum.40844 = f32[] parameter(0)
  %reduce_sum.40845 = f32[] parameter(1)
  ROOT %reduce_sum.40846 = f32[] add(%reduce_sum.40844, %reduce_sum.40845)
}

%region_1816.40847.clone (reduce_sum.4079: f32[], reduce_sum.4080: f32[]) -> f32[] {
  %reduce_sum.4079 = f32[] parameter(0)
  %reduce_sum.4080 = f32[] parameter(1)
  ROOT %reduce_sum.4081 = f32[] add(%reduce_sum.4079, %reduce_sum.4080)
}

%region_1817.40856 (reduce_sum.40853: f32[], reduce_sum.40854: f32[]) -> f32[] {
  %reduce_sum.40853 = f32[] parameter(0)
  %reduce_sum.40854 = f32[] parameter(1)
  ROOT %reduce_sum.40855 = f32[] add(%reduce_sum.40853, %reduce_sum.40854)
}

%region_1817.40856.clone (reduce_sum.4082: f32[], reduce_sum.4086: f32[]) -> f32[] {
  %reduce_sum.4082 = f32[] parameter(0)
  %reduce_sum.4086 = f32[] parameter(1)
  ROOT %reduce_sum.4088 = f32[] add(%reduce_sum.4082, %reduce_sum.4086)
}

%region_1818.40865 (reduce_sum.40862: f32[], reduce_sum.40863: f32[]) -> f32[] {
  %reduce_sum.40862 = f32[] parameter(0)
  %reduce_sum.40863 = f32[] parameter(1)
  ROOT %reduce_sum.40864 = f32[] add(%reduce_sum.40862, %reduce_sum.40863)
}

%region_1818.40865.clone (reduce_sum.4089: f32[], reduce_sum.4090: f32[]) -> f32[] {
  %reduce_sum.4089 = f32[] parameter(0)
  %reduce_sum.4090 = f32[] parameter(1)
  ROOT %reduce_sum.4094 = f32[] add(%reduce_sum.4089, %reduce_sum.4090)
}

%region_1819.40874 (reduce_sum.40871: f32[], reduce_sum.40872: f32[]) -> f32[] {
  %reduce_sum.40871 = f32[] parameter(0)
  %reduce_sum.40872 = f32[] parameter(1)
  ROOT %reduce_sum.40873 = f32[] add(%reduce_sum.40871, %reduce_sum.40872)
}

%region_1819.40874.clone (reduce_sum.4096: f32[], reduce_sum.4097: f32[]) -> f32[] {
  %reduce_sum.4096 = f32[] parameter(0)
  %reduce_sum.4097 = f32[] parameter(1)
  ROOT %reduce_sum.4098 = f32[] add(%reduce_sum.4096, %reduce_sum.4097)
}

%region_1820.40883 (reduce_sum.40880: f32[], reduce_sum.40881: f32[]) -> f32[] {
  %reduce_sum.40880 = f32[] parameter(0)
  %reduce_sum.40881 = f32[] parameter(1)
  ROOT %reduce_sum.40882 = f32[] add(%reduce_sum.40880, %reduce_sum.40881)
}

%region_1820.40883.clone (reduce_sum.4099: f32[], reduce_sum.4100: f32[]) -> f32[] {
  %reduce_sum.4099 = f32[] parameter(0)
  %reduce_sum.4100 = f32[] parameter(1)
  ROOT %reduce_sum.4101 = f32[] add(%reduce_sum.4099, %reduce_sum.4100)
}

%region_1821.40892 (reduce_sum.40889: f32[], reduce_sum.40890: f32[]) -> f32[] {
  %reduce_sum.40889 = f32[] parameter(0)
  %reduce_sum.40890 = f32[] parameter(1)
  ROOT %reduce_sum.40891 = f32[] add(%reduce_sum.40889, %reduce_sum.40890)
}

%region_1821.40892.clone (reduce_sum.4102: f32[], reduce_sum.4103: f32[]) -> f32[] {
  %reduce_sum.4102 = f32[] parameter(0)
  %reduce_sum.4103 = f32[] parameter(1)
  ROOT %reduce_sum.4107 = f32[] add(%reduce_sum.4102, %reduce_sum.4103)
}

%region_1822.40901 (reduce_sum.40898: f32[], reduce_sum.40899: f32[]) -> f32[] {
  %reduce_sum.40898 = f32[] parameter(0)
  %reduce_sum.40899 = f32[] parameter(1)
  ROOT %reduce_sum.40900 = f32[] add(%reduce_sum.40898, %reduce_sum.40899)
}

%region_1822.40901.clone (reduce_sum.4109: f32[], reduce_sum.4110: f32[]) -> f32[] {
  %reduce_sum.4109 = f32[] parameter(0)
  %reduce_sum.4110 = f32[] parameter(1)
  ROOT %reduce_sum.4114 = f32[] add(%reduce_sum.4109, %reduce_sum.4110)
}

%region_1823.40910 (reduce_sum.40907: f32[], reduce_sum.40908: f32[]) -> f32[] {
  %reduce_sum.40907 = f32[] parameter(0)
  %reduce_sum.40908 = f32[] parameter(1)
  ROOT %reduce_sum.40909 = f32[] add(%reduce_sum.40907, %reduce_sum.40908)
}

%region_1824.40919 (reduce_sum.40916: f32[], reduce_sum.40917: f32[]) -> f32[] {
  %reduce_sum.40916 = f32[] parameter(0)
  %reduce_sum.40917 = f32[] parameter(1)
  ROOT %reduce_sum.40918 = f32[] add(%reduce_sum.40916, %reduce_sum.40917)
}

%region_1825.40928 (reduce_sum.40925: f32[], reduce_sum.40926: f32[]) -> f32[] {
  %reduce_sum.40925 = f32[] parameter(0)
  %reduce_sum.40926 = f32[] parameter(1)
  ROOT %reduce_sum.40927 = f32[] add(%reduce_sum.40925, %reduce_sum.40926)
}

%region_1825.40928.clone (reduce_sum.4116: f32[], reduce_sum.4117: f32[]) -> f32[] {
  %reduce_sum.4116 = f32[] parameter(0)
  %reduce_sum.4117 = f32[] parameter(1)
  ROOT %reduce_sum.4118 = f32[] add(%reduce_sum.4116, %reduce_sum.4117)
}

%region_1826.40937 (reduce_sum.40934: f32[], reduce_sum.40935: f32[]) -> f32[] {
  %reduce_sum.40934 = f32[] parameter(0)
  %reduce_sum.40935 = f32[] parameter(1)
  ROOT %reduce_sum.40936 = f32[] add(%reduce_sum.40934, %reduce_sum.40935)
}

%region_1826.40937.clone (reduce_sum.4119: f32[], reduce_sum.4120: f32[]) -> f32[] {
  %reduce_sum.4119 = f32[] parameter(0)
  %reduce_sum.4120 = f32[] parameter(1)
  ROOT %reduce_sum.4121 = f32[] add(%reduce_sum.4119, %reduce_sum.4120)
}

%region_1827.40946 (reduce_sum.40943: f32[], reduce_sum.40944: f32[]) -> f32[] {
  %reduce_sum.40943 = f32[] parameter(0)
  %reduce_sum.40944 = f32[] parameter(1)
  ROOT %reduce_sum.40945 = f32[] add(%reduce_sum.40943, %reduce_sum.40944)
}

%region_1827.40946.clone (reduce_sum.4122: f32[], reduce_sum.4123: f32[]) -> f32[] {
  %reduce_sum.4122 = f32[] parameter(0)
  %reduce_sum.4123 = f32[] parameter(1)
  ROOT %reduce_sum.4124 = f32[] add(%reduce_sum.4122, %reduce_sum.4123)
}

%region_1828.40955 (reduce_sum.40952: f32[], reduce_sum.40953: f32[]) -> f32[] {
  %reduce_sum.40952 = f32[] parameter(0)
  %reduce_sum.40953 = f32[] parameter(1)
  ROOT %reduce_sum.40954 = f32[] add(%reduce_sum.40952, %reduce_sum.40953)
}

%region_1828.40955.clone (reduce_sum.4125: f32[], reduce_sum.4126: f32[]) -> f32[] {
  %reduce_sum.4125 = f32[] parameter(0)
  %reduce_sum.4126 = f32[] parameter(1)
  ROOT %reduce_sum.4127 = f32[] add(%reduce_sum.4125, %reduce_sum.4126)
}

%region_1829.40964 (reduce_sum.40961: f32[], reduce_sum.40962: f32[]) -> f32[] {
  %reduce_sum.40961 = f32[] parameter(0)
  %reduce_sum.40962 = f32[] parameter(1)
  ROOT %reduce_sum.40963 = f32[] add(%reduce_sum.40961, %reduce_sum.40962)
}

%region_1829.40964.clone (reduce_sum.4128: f32[], reduce_sum.4129: f32[]) -> f32[] {
  %reduce_sum.4128 = f32[] parameter(0)
  %reduce_sum.4129 = f32[] parameter(1)
  ROOT %reduce_sum.4130 = f32[] add(%reduce_sum.4128, %reduce_sum.4129)
}

%region_1830.40973 (reduce_sum.40970: f32[], reduce_sum.40971: f32[]) -> f32[] {
  %reduce_sum.40970 = f32[] parameter(0)
  %reduce_sum.40971 = f32[] parameter(1)
  ROOT %reduce_sum.40972 = f32[] add(%reduce_sum.40970, %reduce_sum.40971)
}

%region_1830.40973.clone (reduce_sum.4131: f32[], reduce_sum.4132: f32[]) -> f32[] {
  %reduce_sum.4131 = f32[] parameter(0)
  %reduce_sum.4132 = f32[] parameter(1)
  ROOT %reduce_sum.4133 = f32[] add(%reduce_sum.4131, %reduce_sum.4132)
}

%region_1831.40982 (reduce_sum.40979: f32[], reduce_sum.40980: f32[]) -> f32[] {
  %reduce_sum.40979 = f32[] parameter(0)
  %reduce_sum.40980 = f32[] parameter(1)
  ROOT %reduce_sum.40981 = f32[] add(%reduce_sum.40979, %reduce_sum.40980)
}

%region_1831.40982.clone (reduce_sum.4134: f32[], reduce_sum.4135: f32[]) -> f32[] {
  %reduce_sum.4134 = f32[] parameter(0)
  %reduce_sum.4135 = f32[] parameter(1)
  ROOT %reduce_sum.4136 = f32[] add(%reduce_sum.4134, %reduce_sum.4135)
}

%region_1832.40991 (reduce_sum.40988: f32[], reduce_sum.40989: f32[]) -> f32[] {
  %reduce_sum.40988 = f32[] parameter(0)
  %reduce_sum.40989 = f32[] parameter(1)
  ROOT %reduce_sum.343 = f32[] add(%reduce_sum.40988, %reduce_sum.40989)
}

%region_1832.40991.clone (reduce_sum.4137: f32[], reduce_sum.4138: f32[]) -> f32[] {
  %reduce_sum.4137 = f32[] parameter(0)
  %reduce_sum.4138 = f32[] parameter(1)
  ROOT %reduce_sum.4139 = f32[] add(%reduce_sum.4137, %reduce_sum.4138)
}

%region_1833.41000 (reduce_sum.40997: f32[], reduce_sum.40998: f32[]) -> f32[] {
  %reduce_sum.40997 = f32[] parameter(0)
  %reduce_sum.40998 = f32[] parameter(1)
  ROOT %reduce_sum.344 = f32[] add(%reduce_sum.40997, %reduce_sum.40998)
}

%region_1834.41009 (reduce_sum.41006: f32[], reduce_sum.41007: f32[]) -> f32[] {
  %reduce_sum.41006 = f32[] parameter(0)
  %reduce_sum.41007 = f32[] parameter(1)
  ROOT %reduce_sum.345 = f32[] add(%reduce_sum.41006, %reduce_sum.41007)
}

%region_1835.41018 (reduce_sum.41015: f32[], reduce_sum.41016: f32[]) -> f32[] {
  %reduce_sum.41015 = f32[] parameter(0)
  %reduce_sum.41016 = f32[] parameter(1)
  ROOT %reduce_sum.346 = f32[] add(%reduce_sum.41015, %reduce_sum.41016)
}

%region_1835.41018.clone (reduce_sum.4140: f32[], reduce_sum.4141: f32[]) -> f32[] {
  %reduce_sum.4140 = f32[] parameter(0)
  %reduce_sum.4141 = f32[] parameter(1)
  ROOT %reduce_sum.4142 = f32[] add(%reduce_sum.4140, %reduce_sum.4141)
}

%region_1836.41027 (reduce_sum.41024: f32[], reduce_sum.41025: f32[]) -> f32[] {
  %reduce_sum.41024 = f32[] parameter(0)
  %reduce_sum.41025 = f32[] parameter(1)
  ROOT %reduce_sum.347 = f32[] add(%reduce_sum.41024, %reduce_sum.41025)
}

%region_1836.41027.clone (reduce_sum.4143: f32[], reduce_sum.4144: f32[]) -> f32[] {
  %reduce_sum.4143 = f32[] parameter(0)
  %reduce_sum.4144 = f32[] parameter(1)
  ROOT %reduce_sum.4145 = f32[] add(%reduce_sum.4143, %reduce_sum.4144)
}

%region_1837.41036 (reduce_sum.41033: f32[], reduce_sum.41034: f32[]) -> f32[] {
  %reduce_sum.41033 = f32[] parameter(0)
  %reduce_sum.41034 = f32[] parameter(1)
  ROOT %reduce_sum.348 = f32[] add(%reduce_sum.41033, %reduce_sum.41034)
}

%region_1837.41036.clone (reduce_sum.4146: f32[], reduce_sum.4147: f32[]) -> f32[] {
  %reduce_sum.4146 = f32[] parameter(0)
  %reduce_sum.4147 = f32[] parameter(1)
  ROOT %reduce_sum.4148 = f32[] add(%reduce_sum.4146, %reduce_sum.4147)
}

%region_1838.41045 (reduce_sum.41042: f32[], reduce_sum.41043: f32[]) -> f32[] {
  %reduce_sum.41042 = f32[] parameter(0)
  %reduce_sum.41043 = f32[] parameter(1)
  ROOT %reduce_sum.349 = f32[] add(%reduce_sum.41042, %reduce_sum.41043)
}

%region_1838.41045.clone (reduce_sum.4152: f32[], reduce_sum.4154: f32[]) -> f32[] {
  %reduce_sum.4152 = f32[] parameter(0)
  %reduce_sum.4154 = f32[] parameter(1)
  ROOT %reduce_sum.4155 = f32[] add(%reduce_sum.4152, %reduce_sum.4154)
}

%region_1839.41054 (reduce_sum.41051: f32[], reduce_sum.41052: f32[]) -> f32[] {
  %reduce_sum.41051 = f32[] parameter(0)
  %reduce_sum.41052 = f32[] parameter(1)
  ROOT %reduce_sum.350 = f32[] add(%reduce_sum.41051, %reduce_sum.41052)
}

%region_1839.41054.clone (reduce_sum.4156: f32[], reduce_sum.4157: f32[]) -> f32[] {
  %reduce_sum.4156 = f32[] parameter(0)
  %reduce_sum.4157 = f32[] parameter(1)
  ROOT %reduce_sum.4158 = f32[] add(%reduce_sum.4156, %reduce_sum.4157)
}

%region_1840.41063 (reduce_sum.41060: f32[], reduce_sum.41061: f32[]) -> f32[] {
  %reduce_sum.41060 = f32[] parameter(0)
  %reduce_sum.41061 = f32[] parameter(1)
  ROOT %reduce_sum.351 = f32[] add(%reduce_sum.41060, %reduce_sum.41061)
}

%region_1840.41063.clone (reduce_sum.4159: f32[], reduce_sum.4160: f32[]) -> f32[] {
  %reduce_sum.4159 = f32[] parameter(0)
  %reduce_sum.4160 = f32[] parameter(1)
  ROOT %reduce_sum.4161 = f32[] add(%reduce_sum.4159, %reduce_sum.4160)
}

%region_1841.41072 (reduce_sum.41069: f32[], reduce_sum.41070: f32[]) -> f32[] {
  %reduce_sum.41069 = f32[] parameter(0)
  %reduce_sum.41070 = f32[] parameter(1)
  ROOT %reduce_sum.352 = f32[] add(%reduce_sum.41069, %reduce_sum.41070)
}

%region_1841.41072.clone (reduce_sum.4162: f32[], reduce_sum.4163: f32[]) -> f32[] {
  %reduce_sum.4162 = f32[] parameter(0)
  %reduce_sum.4163 = f32[] parameter(1)
  ROOT %reduce_sum.4164 = f32[] add(%reduce_sum.4162, %reduce_sum.4163)
}

%region_1842.41081 (reduce_sum.41078: f32[], reduce_sum.41079: f32[]) -> f32[] {
  %reduce_sum.41078 = f32[] parameter(0)
  %reduce_sum.41079 = f32[] parameter(1)
  ROOT %reduce_sum.353 = f32[] add(%reduce_sum.41078, %reduce_sum.41079)
}

%region_1842.41081.clone (reduce_sum.4165: f32[], reduce_sum.4166: f32[]) -> f32[] {
  %reduce_sum.4165 = f32[] parameter(0)
  %reduce_sum.4166 = f32[] parameter(1)
  ROOT %reduce_sum.4167 = f32[] add(%reduce_sum.4165, %reduce_sum.4166)
}

%region_1843.41090 (reduce_sum.41087: f32[], reduce_sum.41088: f32[]) -> f32[] {
  %reduce_sum.41087 = f32[] parameter(0)
  %reduce_sum.41088 = f32[] parameter(1)
  ROOT %reduce_sum.354 = f32[] add(%reduce_sum.41087, %reduce_sum.41088)
}

%region_1844.41099 (reduce_sum.41096: f32[], reduce_sum.41097: f32[]) -> f32[] {
  %reduce_sum.41096 = f32[] parameter(0)
  %reduce_sum.41097 = f32[] parameter(1)
  ROOT %reduce_sum.355 = f32[] add(%reduce_sum.41096, %reduce_sum.41097)
}

%region_1845.41108 (reduce_sum.41105: f32[], reduce_sum.41106: f32[]) -> f32[] {
  %reduce_sum.41105 = f32[] parameter(0)
  %reduce_sum.41106 = f32[] parameter(1)
  ROOT %reduce_sum.356 = f32[] add(%reduce_sum.41105, %reduce_sum.41106)
}

%region_1845.41108.clone (reduce_sum.4168: f32[], reduce_sum.4169: f32[]) -> f32[] {
  %reduce_sum.4168 = f32[] parameter(0)
  %reduce_sum.4169 = f32[] parameter(1)
  ROOT %reduce_sum.4170 = f32[] add(%reduce_sum.4168, %reduce_sum.4169)
}

%region_1846.41117 (reduce_sum.41114: f32[], reduce_sum.41115: f32[]) -> f32[] {
  %reduce_sum.41114 = f32[] parameter(0)
  %reduce_sum.41115 = f32[] parameter(1)
  ROOT %reduce_sum.357 = f32[] add(%reduce_sum.41114, %reduce_sum.41115)
}

%region_1846.41117.clone (reduce_sum.4171: f32[], reduce_sum.4172: f32[]) -> f32[] {
  %reduce_sum.4171 = f32[] parameter(0)
  %reduce_sum.4172 = f32[] parameter(1)
  ROOT %reduce_sum.4173 = f32[] add(%reduce_sum.4171, %reduce_sum.4172)
}

%region_1847.41126 (reduce_sum.41123: f32[], reduce_sum.41124: f32[]) -> f32[] {
  %reduce_sum.41123 = f32[] parameter(0)
  %reduce_sum.41124 = f32[] parameter(1)
  ROOT %reduce_sum.358 = f32[] add(%reduce_sum.41123, %reduce_sum.41124)
}

%region_1847.41126.clone (reduce_sum.4174: f32[], reduce_sum.4175: f32[]) -> f32[] {
  %reduce_sum.4174 = f32[] parameter(0)
  %reduce_sum.4175 = f32[] parameter(1)
  ROOT %reduce_sum.4176 = f32[] add(%reduce_sum.4174, %reduce_sum.4175)
}

%region_1848.41135 (reduce_sum.41132: f32[], reduce_sum.41133: f32[]) -> f32[] {
  %reduce_sum.41132 = f32[] parameter(0)
  %reduce_sum.41133 = f32[] parameter(1)
  ROOT %reduce_sum.359 = f32[] add(%reduce_sum.41132, %reduce_sum.41133)
}

%region_1848.41135.clone (reduce_sum.4177: f32[], reduce_sum.4178: f32[]) -> f32[] {
  %reduce_sum.4177 = f32[] parameter(0)
  %reduce_sum.4178 = f32[] parameter(1)
  ROOT %reduce_sum.4179 = f32[] add(%reduce_sum.4177, %reduce_sum.4178)
}

%region_1849.41144 (reduce_sum.41141: f32[], reduce_sum.41142: f32[]) -> f32[] {
  %reduce_sum.41141 = f32[] parameter(0)
  %reduce_sum.41142 = f32[] parameter(1)
  ROOT %reduce_sum.360 = f32[] add(%reduce_sum.41141, %reduce_sum.41142)
}

%region_1849.41144.clone (reduce_sum.4180: f32[], reduce_sum.4181: f32[]) -> f32[] {
  %reduce_sum.4180 = f32[] parameter(0)
  %reduce_sum.4181 = f32[] parameter(1)
  ROOT %reduce_sum.4182 = f32[] add(%reduce_sum.4180, %reduce_sum.4181)
}

%region_1850.41153 (reduce_sum.41150: f32[], reduce_sum.41151: f32[]) -> f32[] {
  %reduce_sum.41150 = f32[] parameter(0)
  %reduce_sum.41151 = f32[] parameter(1)
  ROOT %reduce_sum.361 = f32[] add(%reduce_sum.41150, %reduce_sum.41151)
}

%region_1850.41153.clone (reduce_sum.4183: f32[], reduce_sum.4184: f32[]) -> f32[] {
  %reduce_sum.4183 = f32[] parameter(0)
  %reduce_sum.4184 = f32[] parameter(1)
  ROOT %reduce_sum.4185 = f32[] add(%reduce_sum.4183, %reduce_sum.4184)
}

%region_1851.41162 (reduce_sum.41159: f32[], reduce_sum.41160: f32[]) -> f32[] {
  %reduce_sum.41159 = f32[] parameter(0)
  %reduce_sum.41160 = f32[] parameter(1)
  ROOT %reduce_sum.362 = f32[] add(%reduce_sum.41159, %reduce_sum.41160)
}

%region_1851.41162.clone (reduce_sum.4186: f32[], reduce_sum.4187: f32[]) -> f32[] {
  %reduce_sum.4186 = f32[] parameter(0)
  %reduce_sum.4187 = f32[] parameter(1)
  ROOT %reduce_sum.4188 = f32[] add(%reduce_sum.4186, %reduce_sum.4187)
}

%region_1852.41171 (reduce_sum.41168: f32[], reduce_sum.41169: f32[]) -> f32[] {
  %reduce_sum.41168 = f32[] parameter(0)
  %reduce_sum.41169 = f32[] parameter(1)
  ROOT %reduce_sum.363 = f32[] add(%reduce_sum.41168, %reduce_sum.41169)
}

%region_1852.41171.clone (reduce_sum.4189: f32[], reduce_sum.4190: f32[]) -> f32[] {
  %reduce_sum.4189 = f32[] parameter(0)
  %reduce_sum.4190 = f32[] parameter(1)
  ROOT %reduce_sum.4191 = f32[] add(%reduce_sum.4189, %reduce_sum.4190)
}

%region_1853.41180 (reduce_sum.41177: f32[], reduce_sum.41178: f32[]) -> f32[] {
  %reduce_sum.41177 = f32[] parameter(0)
  %reduce_sum.41178 = f32[] parameter(1)
  ROOT %reduce_sum.364 = f32[] add(%reduce_sum.41177, %reduce_sum.41178)
}

%region_1854.41189 (reduce_sum.41186: f32[], reduce_sum.41187: f32[]) -> f32[] {
  %reduce_sum.41186 = f32[] parameter(0)
  %reduce_sum.41187 = f32[] parameter(1)
  ROOT %reduce_sum.365 = f32[] add(%reduce_sum.41186, %reduce_sum.41187)
}

%region_1855.41198 (reduce_sum.41195: f32[], reduce_sum.41196: f32[]) -> f32[] {
  %reduce_sum.41195 = f32[] parameter(0)
  %reduce_sum.41196 = f32[] parameter(1)
  ROOT %reduce_sum.366 = f32[] add(%reduce_sum.41195, %reduce_sum.41196)
}

%region_1855.41198.clone (reduce_sum.4192: f32[], reduce_sum.4193: f32[]) -> f32[] {
  %reduce_sum.4192 = f32[] parameter(0)
  %reduce_sum.4193 = f32[] parameter(1)
  ROOT %reduce_sum.4194 = f32[] add(%reduce_sum.4192, %reduce_sum.4193)
}

%region_1856.41207 (reduce_sum.41204: f32[], reduce_sum.41205: f32[]) -> f32[] {
  %reduce_sum.41204 = f32[] parameter(0)
  %reduce_sum.41205 = f32[] parameter(1)
  ROOT %reduce_sum.367 = f32[] add(%reduce_sum.41204, %reduce_sum.41205)
}

%region_1856.41207.clone (reduce_sum.4195: f32[], reduce_sum.4196: f32[]) -> f32[] {
  %reduce_sum.4195 = f32[] parameter(0)
  %reduce_sum.4196 = f32[] parameter(1)
  ROOT %reduce_sum.4197 = f32[] add(%reduce_sum.4195, %reduce_sum.4196)
}

%region_1857.41216 (reduce_sum.41213: f32[], reduce_sum.41214: f32[]) -> f32[] {
  %reduce_sum.41213 = f32[] parameter(0)
  %reduce_sum.41214 = f32[] parameter(1)
  ROOT %reduce_sum.368 = f32[] add(%reduce_sum.41213, %reduce_sum.41214)
}

%region_1857.41216.clone (reduce_sum.4201: f32[], reduce_sum.4204: f32[]) -> f32[] {
  %reduce_sum.4201 = f32[] parameter(0)
  %reduce_sum.4204 = f32[] parameter(1)
  ROOT %reduce_sum.4205 = f32[] add(%reduce_sum.4201, %reduce_sum.4204)
}

%region_1858.41225 (reduce_sum.41222: f32[], reduce_sum.41223: f32[]) -> f32[] {
  %reduce_sum.41222 = f32[] parameter(0)
  %reduce_sum.41223 = f32[] parameter(1)
  ROOT %reduce_sum.369 = f32[] add(%reduce_sum.41222, %reduce_sum.41223)
}

%region_1858.41225.clone (reduce_sum.4206: f32[], reduce_sum.4210: f32[]) -> f32[] {
  %reduce_sum.4206 = f32[] parameter(0)
  %reduce_sum.4210 = f32[] parameter(1)
  ROOT %reduce_sum.4213 = f32[] add(%reduce_sum.4206, %reduce_sum.4210)
}

%region_1859.41234 (reduce_sum.41231: f32[], reduce_sum.41232: f32[]) -> f32[] {
  %reduce_sum.41231 = f32[] parameter(0)
  %reduce_sum.41232 = f32[] parameter(1)
  ROOT %reduce_sum.370 = f32[] add(%reduce_sum.41231, %reduce_sum.41232)
}

%region_1859.41234.clone (reduce_sum.4214: f32[], reduce_sum.4215: f32[]) -> f32[] {
  %reduce_sum.4214 = f32[] parameter(0)
  %reduce_sum.4215 = f32[] parameter(1)
  ROOT %reduce_sum.4219 = f32[] add(%reduce_sum.4214, %reduce_sum.4215)
}

%region_1860.41243 (reduce_sum.41240: f32[], reduce_sum.41241: f32[]) -> f32[] {
  %reduce_sum.41240 = f32[] parameter(0)
  %reduce_sum.41241 = f32[] parameter(1)
  ROOT %reduce_sum.371 = f32[] add(%reduce_sum.41240, %reduce_sum.41241)
}

%region_1860.41243.clone (reduce_sum.4221: f32[], reduce_sum.4222: f32[]) -> f32[] {
  %reduce_sum.4221 = f32[] parameter(0)
  %reduce_sum.4222 = f32[] parameter(1)
  ROOT %reduce_sum.4223 = f32[] add(%reduce_sum.4221, %reduce_sum.4222)
}

%region_1861.41252 (reduce_sum.41249: f32[], reduce_sum.41250: f32[]) -> f32[] {
  %reduce_sum.41249 = f32[] parameter(0)
  %reduce_sum.41250 = f32[] parameter(1)
  ROOT %reduce_sum.372 = f32[] add(%reduce_sum.41249, %reduce_sum.41250)
}

%region_1861.41252.clone (reduce_sum.4224: f32[], reduce_sum.4225: f32[]) -> f32[] {
  %reduce_sum.4224 = f32[] parameter(0)
  %reduce_sum.4225 = f32[] parameter(1)
  ROOT %reduce_sum.4226 = f32[] add(%reduce_sum.4224, %reduce_sum.4225)
}

%region_1862.41261 (reduce_sum.41258: f32[], reduce_sum.41259: f32[]) -> f32[] {
  %reduce_sum.41258 = f32[] parameter(0)
  %reduce_sum.41259 = f32[] parameter(1)
  ROOT %reduce_sum.373 = f32[] add(%reduce_sum.41258, %reduce_sum.41259)
}

%region_1862.41261.clone (reduce_sum.4227: f32[], reduce_sum.4231: f32[]) -> f32[] {
  %reduce_sum.4227 = f32[] parameter(0)
  %reduce_sum.4231 = f32[] parameter(1)
  ROOT %reduce_sum.4233 = f32[] add(%reduce_sum.4227, %reduce_sum.4231)
}

%region_1863.41270 (reduce_sum.41267: f32[], reduce_sum.41268: f32[]) -> f32[] {
  %reduce_sum.41267 = f32[] parameter(0)
  %reduce_sum.41268 = f32[] parameter(1)
  ROOT %reduce_sum.374 = f32[] add(%reduce_sum.41267, %reduce_sum.41268)
}

%region_1864.41279 (reduce_sum.41276: f32[], reduce_sum.41277: f32[]) -> f32[] {
  %reduce_sum.41276 = f32[] parameter(0)
  %reduce_sum.41277 = f32[] parameter(1)
  ROOT %reduce_sum.375 = f32[] add(%reduce_sum.41276, %reduce_sum.41277)
}

%region_1865.41288 (reduce_sum.41285: f32[], reduce_sum.41286: f32[]) -> f32[] {
  %reduce_sum.41285 = f32[] parameter(0)
  %reduce_sum.41286 = f32[] parameter(1)
  ROOT %reduce_sum.376 = f32[] add(%reduce_sum.41285, %reduce_sum.41286)
}

%region_1865.41288.clone (reduce_sum.4234: f32[], reduce_sum.4235: f32[]) -> f32[] {
  %reduce_sum.4234 = f32[] parameter(0)
  %reduce_sum.4235 = f32[] parameter(1)
  ROOT %reduce_sum.4236 = f32[] add(%reduce_sum.4234, %reduce_sum.4235)
}

%region_1866.41297 (reduce_sum.41294: f32[], reduce_sum.41295: f32[]) -> f32[] {
  %reduce_sum.41294 = f32[] parameter(0)
  %reduce_sum.41295 = f32[] parameter(1)
  ROOT %reduce_sum.377 = f32[] add(%reduce_sum.41294, %reduce_sum.41295)
}

%region_1866.41297.clone (reduce_sum.4237: f32[], reduce_sum.4238: f32[]) -> f32[] {
  %reduce_sum.4237 = f32[] parameter(0)
  %reduce_sum.4238 = f32[] parameter(1)
  ROOT %reduce_sum.4239 = f32[] add(%reduce_sum.4237, %reduce_sum.4238)
}

%region_1867.41306 (reduce_sum.41303: f32[], reduce_sum.41304: f32[]) -> f32[] {
  %reduce_sum.41303 = f32[] parameter(0)
  %reduce_sum.41304 = f32[] parameter(1)
  ROOT %reduce_sum.378 = f32[] add(%reduce_sum.41303, %reduce_sum.41304)
}

%region_1867.41306.clone (reduce_sum.4240: f32[], reduce_sum.4241: f32[]) -> f32[] {
  %reduce_sum.4240 = f32[] parameter(0)
  %reduce_sum.4241 = f32[] parameter(1)
  ROOT %reduce_sum.4242 = f32[] add(%reduce_sum.4240, %reduce_sum.4241)
}

%region_1868.41315 (reduce_sum.41312: f32[], reduce_sum.41313: f32[]) -> f32[] {
  %reduce_sum.41312 = f32[] parameter(0)
  %reduce_sum.41313 = f32[] parameter(1)
  ROOT %reduce_sum.379 = f32[] add(%reduce_sum.41312, %reduce_sum.41313)
}

%region_1868.41315.clone (reduce_sum.4243: f32[], reduce_sum.4244: f32[]) -> f32[] {
  %reduce_sum.4243 = f32[] parameter(0)
  %reduce_sum.4244 = f32[] parameter(1)
  ROOT %reduce_sum.4245 = f32[] add(%reduce_sum.4243, %reduce_sum.4244)
}

%region_1869.41324 (reduce_sum.41321: f32[], reduce_sum.41322: f32[]) -> f32[] {
  %reduce_sum.41321 = f32[] parameter(0)
  %reduce_sum.41322 = f32[] parameter(1)
  ROOT %reduce_sum.380 = f32[] add(%reduce_sum.41321, %reduce_sum.41322)
}

%region_1869.41324.clone (reduce_sum.4246: f32[], reduce_sum.4247: f32[]) -> f32[] {
  %reduce_sum.4246 = f32[] parameter(0)
  %reduce_sum.4247 = f32[] parameter(1)
  ROOT %reduce_sum.4248 = f32[] add(%reduce_sum.4246, %reduce_sum.4247)
}

%region_1870.41333 (reduce_sum.41330: f32[], reduce_sum.41331: f32[]) -> f32[] {
  %reduce_sum.41330 = f32[] parameter(0)
  %reduce_sum.41331 = f32[] parameter(1)
  ROOT %reduce_sum.381 = f32[] add(%reduce_sum.41330, %reduce_sum.41331)
}

%region_1870.41333.clone (reduce_sum.4249: f32[], reduce_sum.4250: f32[]) -> f32[] {
  %reduce_sum.4249 = f32[] parameter(0)
  %reduce_sum.4250 = f32[] parameter(1)
  ROOT %reduce_sum.4251 = f32[] add(%reduce_sum.4249, %reduce_sum.4250)
}

%region_1871.41342 (reduce_sum.41339: f32[], reduce_sum.41340: f32[]) -> f32[] {
  %reduce_sum.41339 = f32[] parameter(0)
  %reduce_sum.41340 = f32[] parameter(1)
  ROOT %reduce_sum.382 = f32[] add(%reduce_sum.41339, %reduce_sum.41340)
}

%region_1871.41342.clone (reduce_sum.4252: f32[], reduce_sum.4253: f32[]) -> f32[] {
  %reduce_sum.4252 = f32[] parameter(0)
  %reduce_sum.4253 = f32[] parameter(1)
  ROOT %reduce_sum.4254 = f32[] add(%reduce_sum.4252, %reduce_sum.4253)
}

%region_1872.41351 (reduce_sum.41348: f32[], reduce_sum.41349: f32[]) -> f32[] {
  %reduce_sum.41348 = f32[] parameter(0)
  %reduce_sum.41349 = f32[] parameter(1)
  ROOT %reduce_sum.383 = f32[] add(%reduce_sum.41348, %reduce_sum.41349)
}

%region_1872.41351.clone (reduce_sum.4258: f32[], reduce_sum.4260: f32[]) -> f32[] {
  %reduce_sum.4258 = f32[] parameter(0)
  %reduce_sum.4260 = f32[] parameter(1)
  ROOT %reduce_sum.4261 = f32[] add(%reduce_sum.4258, %reduce_sum.4260)
}

%region_1873.41360 (reduce_sum.41357: f32[], reduce_sum.41358: f32[]) -> f32[] {
  %reduce_sum.41357 = f32[] parameter(0)
  %reduce_sum.41358 = f32[] parameter(1)
  ROOT %reduce_sum.384 = f32[] add(%reduce_sum.41357, %reduce_sum.41358)
}

%region_1874.41369 (reduce_sum.41366: f32[], reduce_sum.41367: f32[]) -> f32[] {
  %reduce_sum.41366 = f32[] parameter(0)
  %reduce_sum.41367 = f32[] parameter(1)
  ROOT %reduce_sum.385 = f32[] add(%reduce_sum.41366, %reduce_sum.41367)
}

%region_1875.41378 (reduce_sum.41375: f32[], reduce_sum.41376: f32[]) -> f32[] {
  %reduce_sum.41375 = f32[] parameter(0)
  %reduce_sum.41376 = f32[] parameter(1)
  ROOT %reduce_sum.386 = f32[] add(%reduce_sum.41375, %reduce_sum.41376)
}

%region_1875.41378.clone (reduce_sum.4262: f32[], reduce_sum.4263: f32[]) -> f32[] {
  %reduce_sum.4262 = f32[] parameter(0)
  %reduce_sum.4263 = f32[] parameter(1)
  ROOT %reduce_sum.4264 = f32[] add(%reduce_sum.4262, %reduce_sum.4263)
}

%region_1876.41387 (reduce_sum.41384: f32[], reduce_sum.41385: f32[]) -> f32[] {
  %reduce_sum.41384 = f32[] parameter(0)
  %reduce_sum.41385 = f32[] parameter(1)
  ROOT %reduce_sum.387 = f32[] add(%reduce_sum.41384, %reduce_sum.41385)
}

%region_1876.41387.clone (reduce_sum.4265: f32[], reduce_sum.4266: f32[]) -> f32[] {
  %reduce_sum.4265 = f32[] parameter(0)
  %reduce_sum.4266 = f32[] parameter(1)
  ROOT %reduce_sum.4267 = f32[] add(%reduce_sum.4265, %reduce_sum.4266)
}

%region_1877.41396 (reduce_sum.41393: f32[], reduce_sum.41394: f32[]) -> f32[] {
  %reduce_sum.41393 = f32[] parameter(0)
  %reduce_sum.41394 = f32[] parameter(1)
  ROOT %reduce_sum.388 = f32[] add(%reduce_sum.41393, %reduce_sum.41394)
}

%region_1877.41396.clone (reduce_sum.4268: f32[], reduce_sum.4269: f32[]) -> f32[] {
  %reduce_sum.4268 = f32[] parameter(0)
  %reduce_sum.4269 = f32[] parameter(1)
  ROOT %reduce_sum.4270 = f32[] add(%reduce_sum.4268, %reduce_sum.4269)
}

%region_1878.41405 (reduce_sum.41402: f32[], reduce_sum.41403: f32[]) -> f32[] {
  %reduce_sum.41402 = f32[] parameter(0)
  %reduce_sum.41403 = f32[] parameter(1)
  ROOT %reduce_sum.389 = f32[] add(%reduce_sum.41402, %reduce_sum.41403)
}

%region_1878.41405.clone (reduce_sum.4271: f32[], reduce_sum.4272: f32[]) -> f32[] {
  %reduce_sum.4271 = f32[] parameter(0)
  %reduce_sum.4272 = f32[] parameter(1)
  ROOT %reduce_sum.4273 = f32[] add(%reduce_sum.4271, %reduce_sum.4272)
}

%region_1879.41414 (reduce_sum.41411: f32[], reduce_sum.41412: f32[]) -> f32[] {
  %reduce_sum.41411 = f32[] parameter(0)
  %reduce_sum.41412 = f32[] parameter(1)
  ROOT %reduce_sum.390 = f32[] add(%reduce_sum.41411, %reduce_sum.41412)
}

%region_1879.41414.clone (reduce_sum.4274: f32[], reduce_sum.4275: f32[]) -> f32[] {
  %reduce_sum.4274 = f32[] parameter(0)
  %reduce_sum.4275 = f32[] parameter(1)
  ROOT %reduce_sum.4276 = f32[] add(%reduce_sum.4274, %reduce_sum.4275)
}

%region_1880.41423 (reduce_sum.41420: f32[], reduce_sum.41421: f32[]) -> f32[] {
  %reduce_sum.41420 = f32[] parameter(0)
  %reduce_sum.41421 = f32[] parameter(1)
  ROOT %reduce_sum.391 = f32[] add(%reduce_sum.41420, %reduce_sum.41421)
}

%region_1880.41423.clone (reduce_sum.4277: f32[], reduce_sum.4278: f32[]) -> f32[] {
  %reduce_sum.4277 = f32[] parameter(0)
  %reduce_sum.4278 = f32[] parameter(1)
  ROOT %reduce_sum.4279 = f32[] add(%reduce_sum.4277, %reduce_sum.4278)
}

%region_1881.41432 (reduce_sum.41429: f32[], reduce_sum.41430: f32[]) -> f32[] {
  %reduce_sum.41429 = f32[] parameter(0)
  %reduce_sum.41430 = f32[] parameter(1)
  ROOT %reduce_sum.392 = f32[] add(%reduce_sum.41429, %reduce_sum.41430)
}

%region_1881.41432.clone (reduce_sum.4280: f32[], reduce_sum.4281: f32[]) -> f32[] {
  %reduce_sum.4280 = f32[] parameter(0)
  %reduce_sum.4281 = f32[] parameter(1)
  ROOT %reduce_sum.4282 = f32[] add(%reduce_sum.4280, %reduce_sum.4281)
}

%region_1882.41441 (reduce_sum.41438: f32[], reduce_sum.41439: f32[]) -> f32[] {
  %reduce_sum.41438 = f32[] parameter(0)
  %reduce_sum.41439 = f32[] parameter(1)
  ROOT %reduce_sum.393 = f32[] add(%reduce_sum.41438, %reduce_sum.41439)
}

%region_1882.41441.clone (reduce_sum.4283: f32[], reduce_sum.4284: f32[]) -> f32[] {
  %reduce_sum.4283 = f32[] parameter(0)
  %reduce_sum.4284 = f32[] parameter(1)
  ROOT %reduce_sum.4285 = f32[] add(%reduce_sum.4283, %reduce_sum.4284)
}

%region_1883.41450 (reduce_sum.41447: f32[], reduce_sum.41448: f32[]) -> f32[] {
  %reduce_sum.41447 = f32[] parameter(0)
  %reduce_sum.41448 = f32[] parameter(1)
  ROOT %reduce_sum.394 = f32[] add(%reduce_sum.41447, %reduce_sum.41448)
}

%region_1884.41459 (reduce_sum.41456: f32[], reduce_sum.41457: f32[]) -> f32[] {
  %reduce_sum.41456 = f32[] parameter(0)
  %reduce_sum.41457 = f32[] parameter(1)
  ROOT %reduce_sum.395 = f32[] add(%reduce_sum.41456, %reduce_sum.41457)
}

%region_1885.41468 (reduce_sum.41465: f32[], reduce_sum.41466: f32[]) -> f32[] {
  %reduce_sum.41465 = f32[] parameter(0)
  %reduce_sum.41466 = f32[] parameter(1)
  ROOT %reduce_sum.396 = f32[] add(%reduce_sum.41465, %reduce_sum.41466)
}

%region_1885.41468.clone (reduce_sum.4286: f32[], reduce_sum.4287: f32[]) -> f32[] {
  %reduce_sum.4286 = f32[] parameter(0)
  %reduce_sum.4287 = f32[] parameter(1)
  ROOT %reduce_sum.4288 = f32[] add(%reduce_sum.4286, %reduce_sum.4287)
}

%region_1886.41477 (reduce_sum.41474: f32[], reduce_sum.41475: f32[]) -> f32[] {
  %reduce_sum.41474 = f32[] parameter(0)
  %reduce_sum.41475 = f32[] parameter(1)
  ROOT %reduce_sum.397 = f32[] add(%reduce_sum.41474, %reduce_sum.41475)
}

%region_1886.41477.clone (reduce_sum.4289: f32[], reduce_sum.4290: f32[]) -> f32[] {
  %reduce_sum.4289 = f32[] parameter(0)
  %reduce_sum.4290 = f32[] parameter(1)
  ROOT %reduce_sum.4291 = f32[] add(%reduce_sum.4289, %reduce_sum.4290)
}

%region_1887.41486 (reduce_sum.41483: f32[], reduce_sum.41484: f32[]) -> f32[] {
  %reduce_sum.41483 = f32[] parameter(0)
  %reduce_sum.41484 = f32[] parameter(1)
  ROOT %reduce_sum.398 = f32[] add(%reduce_sum.41483, %reduce_sum.41484)
}

%region_1887.41486.clone (reduce_sum.4292: f32[], reduce_sum.4296: f32[]) -> f32[] {
  %reduce_sum.4292 = f32[] parameter(0)
  %reduce_sum.4296 = f32[] parameter(1)
  ROOT %reduce_sum.4298 = f32[] add(%reduce_sum.4292, %reduce_sum.4296)
}

%region_1888.41495 (reduce_sum.41492: f32[], reduce_sum.41493: f32[]) -> f32[] {
  %reduce_sum.41492 = f32[] parameter(0)
  %reduce_sum.41493 = f32[] parameter(1)
  ROOT %reduce_sum.399 = f32[] add(%reduce_sum.41492, %reduce_sum.41493)
}

%region_1888.41495.clone (reduce_sum.4299: f32[], reduce_sum.4300: f32[]) -> f32[] {
  %reduce_sum.4299 = f32[] parameter(0)
  %reduce_sum.4300 = f32[] parameter(1)
  ROOT %reduce_sum.4301 = f32[] add(%reduce_sum.4299, %reduce_sum.4300)
}

%region_1889.41504 (reduce_sum.41501: f32[], reduce_sum.41502: f32[]) -> f32[] {
  %reduce_sum.41501 = f32[] parameter(0)
  %reduce_sum.41502 = f32[] parameter(1)
  ROOT %reduce_sum.400 = f32[] add(%reduce_sum.41501, %reduce_sum.41502)
}

%region_1889.41504.clone (reduce_sum.4302: f32[], reduce_sum.4303: f32[]) -> f32[] {
  %reduce_sum.4302 = f32[] parameter(0)
  %reduce_sum.4303 = f32[] parameter(1)
  ROOT %reduce_sum.4304 = f32[] add(%reduce_sum.4302, %reduce_sum.4303)
}

%region_1890.41513 (reduce_sum.41510: f32[], reduce_sum.41511: f32[]) -> f32[] {
  %reduce_sum.41510 = f32[] parameter(0)
  %reduce_sum.41511 = f32[] parameter(1)
  ROOT %reduce_sum.401 = f32[] add(%reduce_sum.41510, %reduce_sum.41511)
}

%region_1890.41513.clone (reduce_sum.4305: f32[], reduce_sum.4306: f32[]) -> f32[] {
  %reduce_sum.4305 = f32[] parameter(0)
  %reduce_sum.4306 = f32[] parameter(1)
  ROOT %reduce_sum.4307 = f32[] add(%reduce_sum.4305, %reduce_sum.4306)
}

%region_1891.41522 (reduce_sum.41519: f32[], reduce_sum.41520: f32[]) -> f32[] {
  %reduce_sum.41519 = f32[] parameter(0)
  %reduce_sum.41520 = f32[] parameter(1)
  ROOT %reduce_sum.402 = f32[] add(%reduce_sum.41519, %reduce_sum.41520)
}

%region_1891.41522.clone (reduce_sum.4308: f32[], reduce_sum.4309: f32[]) -> f32[] {
  %reduce_sum.4308 = f32[] parameter(0)
  %reduce_sum.4309 = f32[] parameter(1)
  ROOT %reduce_sum.4310 = f32[] add(%reduce_sum.4308, %reduce_sum.4309)
}

%region_1892.41531 (reduce_sum.41528: f32[], reduce_sum.41529: f32[]) -> f32[] {
  %reduce_sum.41528 = f32[] parameter(0)
  %reduce_sum.41529 = f32[] parameter(1)
  ROOT %reduce_sum.403 = f32[] add(%reduce_sum.41528, %reduce_sum.41529)
}

%region_1892.41531.clone (reduce_sum.4311: f32[], reduce_sum.4312: f32[]) -> f32[] {
  %reduce_sum.4311 = f32[] parameter(0)
  %reduce_sum.4312 = f32[] parameter(1)
  ROOT %reduce_sum.4313 = f32[] add(%reduce_sum.4311, %reduce_sum.4312)
}

%region_1893.41540 (reduce_sum.41537: f32[], reduce_sum.41538: f32[]) -> f32[] {
  %reduce_sum.41537 = f32[] parameter(0)
  %reduce_sum.41538 = f32[] parameter(1)
  ROOT %reduce_sum.404 = f32[] add(%reduce_sum.41537, %reduce_sum.41538)
}

%region_1894.41549 (reduce_sum.41546: f32[], reduce_sum.41547: f32[]) -> f32[] {
  %reduce_sum.41546 = f32[] parameter(0)
  %reduce_sum.41547 = f32[] parameter(1)
  ROOT %reduce_sum.405 = f32[] add(%reduce_sum.41546, %reduce_sum.41547)
}

%region_1895.41558 (reduce_sum.41555: f32[], reduce_sum.41556: f32[]) -> f32[] {
  %reduce_sum.41555 = f32[] parameter(0)
  %reduce_sum.41556 = f32[] parameter(1)
  ROOT %reduce_sum.406 = f32[] add(%reduce_sum.41555, %reduce_sum.41556)
}

%region_1895.41558.clone (reduce_sum.4314: f32[], reduce_sum.4315: f32[]) -> f32[] {
  %reduce_sum.4314 = f32[] parameter(0)
  %reduce_sum.4315 = f32[] parameter(1)
  ROOT %reduce_sum.4316 = f32[] add(%reduce_sum.4314, %reduce_sum.4315)
}

%region_1896.41567 (reduce_sum.41564: f32[], reduce_sum.41565: f32[]) -> f32[] {
  %reduce_sum.41564 = f32[] parameter(0)
  %reduce_sum.41565 = f32[] parameter(1)
  ROOT %reduce_sum.407 = f32[] add(%reduce_sum.41564, %reduce_sum.41565)
}

%region_1896.41567.clone (reduce_sum.4317: f32[], reduce_sum.4318: f32[]) -> f32[] {
  %reduce_sum.4317 = f32[] parameter(0)
  %reduce_sum.4318 = f32[] parameter(1)
  ROOT %reduce_sum.4319 = f32[] add(%reduce_sum.4317, %reduce_sum.4318)
}

%region_1897.41576 (reduce_sum.41573: f32[], reduce_sum.41574: f32[]) -> f32[] {
  %reduce_sum.41573 = f32[] parameter(0)
  %reduce_sum.41574 = f32[] parameter(1)
  ROOT %reduce_sum.408 = f32[] add(%reduce_sum.41573, %reduce_sum.41574)
}

%region_1897.41576.clone (reduce_sum.4320: f32[], reduce_sum.4321: f32[]) -> f32[] {
  %reduce_sum.4320 = f32[] parameter(0)
  %reduce_sum.4321 = f32[] parameter(1)
  ROOT %reduce_sum.4322 = f32[] add(%reduce_sum.4320, %reduce_sum.4321)
}

%region_1898.41585 (reduce_sum.41582: f32[], reduce_sum.41583: f32[]) -> f32[] {
  %reduce_sum.41582 = f32[] parameter(0)
  %reduce_sum.41583 = f32[] parameter(1)
  ROOT %reduce_sum.409 = f32[] add(%reduce_sum.41582, %reduce_sum.41583)
}

%region_1898.41585.clone (reduce_sum.4326: f32[], reduce_sum.4328: f32[]) -> f32[] {
  %reduce_sum.4326 = f32[] parameter(0)
  %reduce_sum.4328 = f32[] parameter(1)
  ROOT %reduce_sum.4329 = f32[] add(%reduce_sum.4326, %reduce_sum.4328)
}

%region_1899.41594 (reduce_sum.41591: f32[], reduce_sum.41592: f32[]) -> f32[] {
  %reduce_sum.41591 = f32[] parameter(0)
  %reduce_sum.41592 = f32[] parameter(1)
  ROOT %reduce_sum.410 = f32[] add(%reduce_sum.41591, %reduce_sum.41592)
}

%region_1899.41594.clone (reduce_sum.4330: f32[], reduce_sum.4331: f32[]) -> f32[] {
  %reduce_sum.4330 = f32[] parameter(0)
  %reduce_sum.4331 = f32[] parameter(1)
  ROOT %reduce_sum.4332 = f32[] add(%reduce_sum.4330, %reduce_sum.4331)
}

%region_1900.41603 (reduce_sum.41600: f32[], reduce_sum.41601: f32[]) -> f32[] {
  %reduce_sum.41600 = f32[] parameter(0)
  %reduce_sum.41601 = f32[] parameter(1)
  ROOT %reduce_sum.411 = f32[] add(%reduce_sum.41600, %reduce_sum.41601)
}

%region_1900.41603.clone (reduce_sum.4336: f32[], reduce_sum.4338: f32[]) -> f32[] {
  %reduce_sum.4336 = f32[] parameter(0)
  %reduce_sum.4338 = f32[] parameter(1)
  ROOT %reduce_sum.4339 = f32[] add(%reduce_sum.4336, %reduce_sum.4338)
}

%region_1901.41612 (reduce_sum.41609: f32[], reduce_sum.41610: f32[]) -> f32[] {
  %reduce_sum.41609 = f32[] parameter(0)
  %reduce_sum.41610 = f32[] parameter(1)
  ROOT %reduce_sum.412 = f32[] add(%reduce_sum.41609, %reduce_sum.41610)
}

%region_1901.41612.clone (reduce_sum.4340: f32[], reduce_sum.4341: f32[]) -> f32[] {
  %reduce_sum.4340 = f32[] parameter(0)
  %reduce_sum.4341 = f32[] parameter(1)
  ROOT %reduce_sum.4342 = f32[] add(%reduce_sum.4340, %reduce_sum.4341)
}

%region_1902.41621 (reduce_sum.41618: f32[], reduce_sum.41619: f32[]) -> f32[] {
  %reduce_sum.41618 = f32[] parameter(0)
  %reduce_sum.41619 = f32[] parameter(1)
  ROOT %reduce_sum.413 = f32[] add(%reduce_sum.41618, %reduce_sum.41619)
}

%region_1902.41621.clone (reduce_sum.4343: f32[], reduce_sum.4344: f32[]) -> f32[] {
  %reduce_sum.4343 = f32[] parameter(0)
  %reduce_sum.4344 = f32[] parameter(1)
  ROOT %reduce_sum.4345 = f32[] add(%reduce_sum.4343, %reduce_sum.4344)
}

%region_1903.41630 (reduce_sum.41627: f32[], reduce_sum.41628: f32[]) -> f32[] {
  %reduce_sum.41627 = f32[] parameter(0)
  %reduce_sum.41628 = f32[] parameter(1)
  ROOT %reduce_sum.414 = f32[] add(%reduce_sum.41627, %reduce_sum.41628)
}

%region_1904.41639 (reduce_sum.41636: f32[], reduce_sum.41637: f32[]) -> f32[] {
  %reduce_sum.41636 = f32[] parameter(0)
  %reduce_sum.41637 = f32[] parameter(1)
  ROOT %reduce_sum.415 = f32[] add(%reduce_sum.41636, %reduce_sum.41637)
}

%region_1905.41648 (reduce_sum.41645: f32[], reduce_sum.41646: f32[]) -> f32[] {
  %reduce_sum.41645 = f32[] parameter(0)
  %reduce_sum.41646 = f32[] parameter(1)
  ROOT %reduce_sum.416 = f32[] add(%reduce_sum.41645, %reduce_sum.41646)
}

%region_1905.41648.clone (reduce_sum.4346: f32[], reduce_sum.4347: f32[]) -> f32[] {
  %reduce_sum.4346 = f32[] parameter(0)
  %reduce_sum.4347 = f32[] parameter(1)
  ROOT %reduce_sum.4348 = f32[] add(%reduce_sum.4346, %reduce_sum.4347)
}

%region_1906.41657 (reduce_sum.41654: f32[], reduce_sum.41655: f32[]) -> f32[] {
  %reduce_sum.41654 = f32[] parameter(0)
  %reduce_sum.41655 = f32[] parameter(1)
  ROOT %reduce_sum.417 = f32[] add(%reduce_sum.41654, %reduce_sum.41655)
}

%region_1906.41657.clone (reduce_sum.4349: f32[], reduce_sum.4350: f32[]) -> f32[] {
  %reduce_sum.4349 = f32[] parameter(0)
  %reduce_sum.4350 = f32[] parameter(1)
  ROOT %reduce_sum.4351 = f32[] add(%reduce_sum.4349, %reduce_sum.4350)
}

%region_1907.41666 (reduce_sum.41663: f32[], reduce_sum.41664: f32[]) -> f32[] {
  %reduce_sum.41663 = f32[] parameter(0)
  %reduce_sum.41664 = f32[] parameter(1)
  ROOT %reduce_sum.418 = f32[] add(%reduce_sum.41663, %reduce_sum.41664)
}

%region_1907.41666.clone (reduce_sum.4352: f32[], reduce_sum.4353: f32[]) -> f32[] {
  %reduce_sum.4352 = f32[] parameter(0)
  %reduce_sum.4353 = f32[] parameter(1)
  ROOT %reduce_sum.4354 = f32[] add(%reduce_sum.4352, %reduce_sum.4353)
}

%region_1908.41675 (reduce_sum.41672: f32[], reduce_sum.41673: f32[]) -> f32[] {
  %reduce_sum.41672 = f32[] parameter(0)
  %reduce_sum.41673 = f32[] parameter(1)
  ROOT %reduce_sum.419 = f32[] add(%reduce_sum.41672, %reduce_sum.41673)
}

%region_1908.41675.clone (reduce_sum.4355: f32[], reduce_sum.4356: f32[]) -> f32[] {
  %reduce_sum.4355 = f32[] parameter(0)
  %reduce_sum.4356 = f32[] parameter(1)
  ROOT %reduce_sum.4357 = f32[] add(%reduce_sum.4355, %reduce_sum.4356)
}

%region_1909.41684 (reduce_sum.41681: f32[], reduce_sum.41682: f32[]) -> f32[] {
  %reduce_sum.41681 = f32[] parameter(0)
  %reduce_sum.41682 = f32[] parameter(1)
  ROOT %reduce_sum.420 = f32[] add(%reduce_sum.41681, %reduce_sum.41682)
}

%region_1909.41684.clone (reduce_sum.4358: f32[], reduce_sum.4359: f32[]) -> f32[] {
  %reduce_sum.4358 = f32[] parameter(0)
  %reduce_sum.4359 = f32[] parameter(1)
  ROOT %reduce_sum.4360 = f32[] add(%reduce_sum.4358, %reduce_sum.4359)
}

%region_1910.41693 (reduce_sum.41690: f32[], reduce_sum.41691: f32[]) -> f32[] {
  %reduce_sum.41690 = f32[] parameter(0)
  %reduce_sum.41691 = f32[] parameter(1)
  ROOT %reduce_sum.421 = f32[] add(%reduce_sum.41690, %reduce_sum.41691)
}

%region_1910.41693.clone (reduce_sum.4361: f32[], reduce_sum.4362: f32[]) -> f32[] {
  %reduce_sum.4361 = f32[] parameter(0)
  %reduce_sum.4362 = f32[] parameter(1)
  ROOT %reduce_sum.4363 = f32[] add(%reduce_sum.4361, %reduce_sum.4362)
}

%region_1911.41702 (reduce_sum.41699: f32[], reduce_sum.41700: f32[]) -> f32[] {
  %reduce_sum.41699 = f32[] parameter(0)
  %reduce_sum.41700 = f32[] parameter(1)
  ROOT %reduce_sum.422 = f32[] add(%reduce_sum.41699, %reduce_sum.41700)
}

%region_1911.41702.clone (reduce_sum.4364: f32[], reduce_sum.4365: f32[]) -> f32[] {
  %reduce_sum.4364 = f32[] parameter(0)
  %reduce_sum.4365 = f32[] parameter(1)
  ROOT %reduce_sum.4366 = f32[] add(%reduce_sum.4364, %reduce_sum.4365)
}

%region_1912.41711 (reduce_sum.41708: f32[], reduce_sum.41709: f32[]) -> f32[] {
  %reduce_sum.41708 = f32[] parameter(0)
  %reduce_sum.41709 = f32[] parameter(1)
  ROOT %reduce_sum.423 = f32[] add(%reduce_sum.41708, %reduce_sum.41709)
}

%region_1912.41711.clone (reduce_sum.4367: f32[], reduce_sum.4368: f32[]) -> f32[] {
  %reduce_sum.4367 = f32[] parameter(0)
  %reduce_sum.4368 = f32[] parameter(1)
  ROOT %reduce_sum.4369 = f32[] add(%reduce_sum.4367, %reduce_sum.4368)
}

%region_1913.41720 (reduce_sum.41717: f32[], reduce_sum.41718: f32[]) -> f32[] {
  %reduce_sum.41717 = f32[] parameter(0)
  %reduce_sum.41718 = f32[] parameter(1)
  ROOT %reduce_sum.424 = f32[] add(%reduce_sum.41717, %reduce_sum.41718)
}

%region_1914.41729 (reduce_sum.41726: f32[], reduce_sum.41727: f32[]) -> f32[] {
  %reduce_sum.41726 = f32[] parameter(0)
  %reduce_sum.41727 = f32[] parameter(1)
  ROOT %reduce_sum.425 = f32[] add(%reduce_sum.41726, %reduce_sum.41727)
}

%region_1915.41738 (reduce_sum.41735: f32[], reduce_sum.41736: f32[]) -> f32[] {
  %reduce_sum.41735 = f32[] parameter(0)
  %reduce_sum.41736 = f32[] parameter(1)
  ROOT %reduce_sum.426 = f32[] add(%reduce_sum.41735, %reduce_sum.41736)
}

%region_1915.41738.clone (reduce_sum.4370: f32[], reduce_sum.4371: f32[]) -> f32[] {
  %reduce_sum.4370 = f32[] parameter(0)
  %reduce_sum.4371 = f32[] parameter(1)
  ROOT %reduce_sum.4372 = f32[] add(%reduce_sum.4370, %reduce_sum.4371)
}

%region_1916.41747 (reduce_sum.41744: f32[], reduce_sum.41745: f32[]) -> f32[] {
  %reduce_sum.41744 = f32[] parameter(0)
  %reduce_sum.41745 = f32[] parameter(1)
  ROOT %reduce_sum.427 = f32[] add(%reduce_sum.41744, %reduce_sum.41745)
}

%region_1916.41747.clone (reduce_sum.4373: f32[], reduce_sum.4374: f32[]) -> f32[] {
  %reduce_sum.4373 = f32[] parameter(0)
  %reduce_sum.4374 = f32[] parameter(1)
  ROOT %reduce_sum.4378 = f32[] add(%reduce_sum.4373, %reduce_sum.4374)
}

%region_1917.41756 (reduce_sum.41753: f32[], reduce_sum.41754: f32[]) -> f32[] {
  %reduce_sum.41753 = f32[] parameter(0)
  %reduce_sum.41754 = f32[] parameter(1)
  ROOT %reduce_sum.428 = f32[] add(%reduce_sum.41753, %reduce_sum.41754)
}

%region_1917.41756.clone (reduce_sum.4380: f32[], reduce_sum.4381: f32[]) -> f32[] {
  %reduce_sum.4380 = f32[] parameter(0)
  %reduce_sum.4381 = f32[] parameter(1)
  ROOT %reduce_sum.4382 = f32[] add(%reduce_sum.4380, %reduce_sum.4381)
}

%region_1918.41765 (reduce_sum.41762: f32[], reduce_sum.41763: f32[]) -> f32[] {
  %reduce_sum.41762 = f32[] parameter(0)
  %reduce_sum.41763 = f32[] parameter(1)
  ROOT %reduce_sum.429 = f32[] add(%reduce_sum.41762, %reduce_sum.41763)
}

%region_1918.41765.clone (reduce_sum.4383: f32[], reduce_sum.4384: f32[]) -> f32[] {
  %reduce_sum.4383 = f32[] parameter(0)
  %reduce_sum.4384 = f32[] parameter(1)
  ROOT %reduce_sum.4385 = f32[] add(%reduce_sum.4383, %reduce_sum.4384)
}

%region_1919.41774 (reduce_sum.41771: f32[], reduce_sum.41772: f32[]) -> f32[] {
  %reduce_sum.41771 = f32[] parameter(0)
  %reduce_sum.41772 = f32[] parameter(1)
  ROOT %reduce_sum.430 = f32[] add(%reduce_sum.41771, %reduce_sum.41772)
}

%region_1919.41774.clone (reduce_sum.4386: f32[], reduce_sum.4390: f32[]) -> f32[] {
  %reduce_sum.4386 = f32[] parameter(0)
  %reduce_sum.4390 = f32[] parameter(1)
  ROOT %reduce_sum.4392 = f32[] add(%reduce_sum.4386, %reduce_sum.4390)
}

%region_1920.41783 (reduce_sum.41780: f32[], reduce_sum.41781: f32[]) -> f32[] {
  %reduce_sum.41780 = f32[] parameter(0)
  %reduce_sum.41781 = f32[] parameter(1)
  ROOT %reduce_sum.431 = f32[] add(%reduce_sum.41780, %reduce_sum.41781)
}

%region_1920.41783.clone (reduce_sum.4393: f32[], reduce_sum.4394: f32[]) -> f32[] {
  %reduce_sum.4393 = f32[] parameter(0)
  %reduce_sum.4394 = f32[] parameter(1)
  ROOT %reduce_sum.4398 = f32[] add(%reduce_sum.4393, %reduce_sum.4394)
}

%region_1921.41792 (reduce_sum.41789: f32[], reduce_sum.41790: f32[]) -> f32[] {
  %reduce_sum.41789 = f32[] parameter(0)
  %reduce_sum.41790 = f32[] parameter(1)
  ROOT %reduce_sum.432 = f32[] add(%reduce_sum.41789, %reduce_sum.41790)
}

%region_1921.41792.clone (reduce_sum.4400: f32[], reduce_sum.4401: f32[]) -> f32[] {
  %reduce_sum.4400 = f32[] parameter(0)
  %reduce_sum.4401 = f32[] parameter(1)
  ROOT %reduce_sum.4402 = f32[] add(%reduce_sum.4400, %reduce_sum.4401)
}

%region_1922.41801 (reduce_sum.41798: f32[], reduce_sum.41799: f32[]) -> f32[] {
  %reduce_sum.41798 = f32[] parameter(0)
  %reduce_sum.41799 = f32[] parameter(1)
  ROOT %reduce_sum.433 = f32[] add(%reduce_sum.41798, %reduce_sum.41799)
}

%region_1922.41801.clone (reduce_sum.4403: f32[], reduce_sum.4404: f32[]) -> f32[] {
  %reduce_sum.4403 = f32[] parameter(0)
  %reduce_sum.4404 = f32[] parameter(1)
  ROOT %reduce_sum.4405 = f32[] add(%reduce_sum.4403, %reduce_sum.4404)
}

%region_1923.41810 (reduce_sum.41807: f32[], reduce_sum.41808: f32[]) -> f32[] {
  %reduce_sum.41807 = f32[] parameter(0)
  %reduce_sum.41808 = f32[] parameter(1)
  ROOT %reduce_sum.434 = f32[] add(%reduce_sum.41807, %reduce_sum.41808)
}

%region_1924.41819 (reduce_sum.41816: f32[], reduce_sum.41817: f32[]) -> f32[] {
  %reduce_sum.41816 = f32[] parameter(0)
  %reduce_sum.41817 = f32[] parameter(1)
  ROOT %reduce_sum.435 = f32[] add(%reduce_sum.41816, %reduce_sum.41817)
}

%region_1925.41828 (reduce_sum.41825: f32[], reduce_sum.41826: f32[]) -> f32[] {
  %reduce_sum.41825 = f32[] parameter(0)
  %reduce_sum.41826 = f32[] parameter(1)
  ROOT %reduce_sum.436 = f32[] add(%reduce_sum.41825, %reduce_sum.41826)
}

%region_1925.41828.clone (reduce_sum.4406: f32[], reduce_sum.4407: f32[]) -> f32[] {
  %reduce_sum.4406 = f32[] parameter(0)
  %reduce_sum.4407 = f32[] parameter(1)
  ROOT %reduce_sum.4408 = f32[] add(%reduce_sum.4406, %reduce_sum.4407)
}

%region_1926.41837 (reduce_sum.41834: f32[], reduce_sum.41835: f32[]) -> f32[] {
  %reduce_sum.41834 = f32[] parameter(0)
  %reduce_sum.41835 = f32[] parameter(1)
  ROOT %reduce_sum.437 = f32[] add(%reduce_sum.41834, %reduce_sum.41835)
}

%region_1926.41837.clone (reduce_sum.4409: f32[], reduce_sum.4410: f32[]) -> f32[] {
  %reduce_sum.4409 = f32[] parameter(0)
  %reduce_sum.4410 = f32[] parameter(1)
  ROOT %reduce_sum.4411 = f32[] add(%reduce_sum.4409, %reduce_sum.4410)
}

%region_1927.41846 (reduce_sum.41843: f32[], reduce_sum.41844: f32[]) -> f32[] {
  %reduce_sum.41843 = f32[] parameter(0)
  %reduce_sum.41844 = f32[] parameter(1)
  ROOT %reduce_sum.438 = f32[] add(%reduce_sum.41843, %reduce_sum.41844)
}

%region_1927.41846.clone (reduce_sum.4412: f32[], reduce_sum.4413: f32[]) -> f32[] {
  %reduce_sum.4412 = f32[] parameter(0)
  %reduce_sum.4413 = f32[] parameter(1)
  ROOT %reduce_sum.4414 = f32[] add(%reduce_sum.4412, %reduce_sum.4413)
}

%region_1928.41855 (reduce_sum.41852: f32[], reduce_sum.41853: f32[]) -> f32[] {
  %reduce_sum.41852 = f32[] parameter(0)
  %reduce_sum.41853 = f32[] parameter(1)
  ROOT %reduce_sum.439 = f32[] add(%reduce_sum.41852, %reduce_sum.41853)
}

%region_1928.41855.clone (reduce_sum.4418: f32[], reduce_sum.4420: f32[]) -> f32[] {
  %reduce_sum.4418 = f32[] parameter(0)
  %reduce_sum.4420 = f32[] parameter(1)
  ROOT %reduce_sum.4421 = f32[] add(%reduce_sum.4418, %reduce_sum.4420)
}

%region_1929.41864 (reduce_sum.41861: f32[], reduce_sum.41862: f32[]) -> f32[] {
  %reduce_sum.41861 = f32[] parameter(0)
  %reduce_sum.41862 = f32[] parameter(1)
  ROOT %reduce_sum.440 = f32[] add(%reduce_sum.41861, %reduce_sum.41862)
}

%region_1929.41864.clone (reduce_sum.4422: f32[], reduce_sum.4423: f32[]) -> f32[] {
  %reduce_sum.4422 = f32[] parameter(0)
  %reduce_sum.4423 = f32[] parameter(1)
  ROOT %reduce_sum.4424 = f32[] add(%reduce_sum.4422, %reduce_sum.4423)
}

%region_1930.41873 (reduce_sum.41870: f32[], reduce_sum.41871: f32[]) -> f32[] {
  %reduce_sum.41870 = f32[] parameter(0)
  %reduce_sum.41871 = f32[] parameter(1)
  ROOT %reduce_sum.441 = f32[] add(%reduce_sum.41870, %reduce_sum.41871)
}

%region_1930.41873.clone (reduce_sum.4425: f32[], reduce_sum.4426: f32[]) -> f32[] {
  %reduce_sum.4425 = f32[] parameter(0)
  %reduce_sum.4426 = f32[] parameter(1)
  ROOT %reduce_sum.4427 = f32[] add(%reduce_sum.4425, %reduce_sum.4426)
}

%region_1931.41882 (reduce_sum.41879: f32[], reduce_sum.41880: f32[]) -> f32[] {
  %reduce_sum.41879 = f32[] parameter(0)
  %reduce_sum.41880 = f32[] parameter(1)
  ROOT %reduce_sum.442 = f32[] add(%reduce_sum.41879, %reduce_sum.41880)
}

%region_1931.41882.clone (reduce_sum.4428: f32[], reduce_sum.4429: f32[]) -> f32[] {
  %reduce_sum.4428 = f32[] parameter(0)
  %reduce_sum.4429 = f32[] parameter(1)
  ROOT %reduce_sum.4430 = f32[] add(%reduce_sum.4428, %reduce_sum.4429)
}

%region_1932.41891 (reduce_sum.41888: f32[], reduce_sum.41889: f32[]) -> f32[] {
  %reduce_sum.41888 = f32[] parameter(0)
  %reduce_sum.41889 = f32[] parameter(1)
  ROOT %reduce_sum.443 = f32[] add(%reduce_sum.41888, %reduce_sum.41889)
}

%region_1932.41891.clone (reduce_sum.4431: f32[], reduce_sum.4432: f32[]) -> f32[] {
  %reduce_sum.4431 = f32[] parameter(0)
  %reduce_sum.4432 = f32[] parameter(1)
  ROOT %reduce_sum.4433 = f32[] add(%reduce_sum.4431, %reduce_sum.4432)
}

%region_1933.41900 (reduce_sum.41897: f32[], reduce_sum.41898: f32[]) -> f32[] {
  %reduce_sum.41897 = f32[] parameter(0)
  %reduce_sum.41898 = f32[] parameter(1)
  ROOT %reduce_sum.444 = f32[] add(%reduce_sum.41897, %reduce_sum.41898)
}

%region_1934.41909 (reduce_sum.41906: f32[], reduce_sum.41907: f32[]) -> f32[] {
  %reduce_sum.41906 = f32[] parameter(0)
  %reduce_sum.41907 = f32[] parameter(1)
  ROOT %reduce_sum.445 = f32[] add(%reduce_sum.41906, %reduce_sum.41907)
}

%region_1935.41918 (reduce_sum.41915: f32[], reduce_sum.41916: f32[]) -> f32[] {
  %reduce_sum.41915 = f32[] parameter(0)
  %reduce_sum.41916 = f32[] parameter(1)
  ROOT %reduce_sum.446 = f32[] add(%reduce_sum.41915, %reduce_sum.41916)
}

%region_1935.41918.clone (reduce_sum.4434: f32[], reduce_sum.4435: f32[]) -> f32[] {
  %reduce_sum.4434 = f32[] parameter(0)
  %reduce_sum.4435 = f32[] parameter(1)
  ROOT %reduce_sum.4436 = f32[] add(%reduce_sum.4434, %reduce_sum.4435)
}

%region_1936.41927 (reduce_sum.41924: f32[], reduce_sum.41925: f32[]) -> f32[] {
  %reduce_sum.41924 = f32[] parameter(0)
  %reduce_sum.41925 = f32[] parameter(1)
  ROOT %reduce_sum.447 = f32[] add(%reduce_sum.41924, %reduce_sum.41925)
}

%region_1936.41927.clone (reduce_sum.4437: f32[], reduce_sum.4438: f32[]) -> f32[] {
  %reduce_sum.4437 = f32[] parameter(0)
  %reduce_sum.4438 = f32[] parameter(1)
  ROOT %reduce_sum.4439 = f32[] add(%reduce_sum.4437, %reduce_sum.4438)
}

%region_1937.41936 (reduce_sum.41933: f32[], reduce_sum.41934: f32[]) -> f32[] {
  %reduce_sum.41933 = f32[] parameter(0)
  %reduce_sum.41934 = f32[] parameter(1)
  ROOT %reduce_sum.448 = f32[] add(%reduce_sum.41933, %reduce_sum.41934)
}

%region_1937.41936.clone (reduce_sum.4440: f32[], reduce_sum.4441: f32[]) -> f32[] {
  %reduce_sum.4440 = f32[] parameter(0)
  %reduce_sum.4441 = f32[] parameter(1)
  ROOT %reduce_sum.4442 = f32[] add(%reduce_sum.4440, %reduce_sum.4441)
}

%region_1938.41945 (reduce_sum.41942: f32[], reduce_sum.41943: f32[]) -> f32[] {
  %reduce_sum.41942 = f32[] parameter(0)
  %reduce_sum.41943 = f32[] parameter(1)
  ROOT %reduce_sum.449 = f32[] add(%reduce_sum.41942, %reduce_sum.41943)
}

%region_1938.41945.clone (reduce_sum.4443: f32[], reduce_sum.4444: f32[]) -> f32[] {
  %reduce_sum.4443 = f32[] parameter(0)
  %reduce_sum.4444 = f32[] parameter(1)
  ROOT %reduce_sum.4445 = f32[] add(%reduce_sum.4443, %reduce_sum.4444)
}

%region_1939.41954 (reduce_sum.41951: f32[], reduce_sum.41952: f32[]) -> f32[] {
  %reduce_sum.41951 = f32[] parameter(0)
  %reduce_sum.41952 = f32[] parameter(1)
  ROOT %reduce_sum.450 = f32[] add(%reduce_sum.41951, %reduce_sum.41952)
}

%region_1939.41954.clone (reduce_sum.4446: f32[], reduce_sum.4447: f32[]) -> f32[] {
  %reduce_sum.4446 = f32[] parameter(0)
  %reduce_sum.4447 = f32[] parameter(1)
  ROOT %reduce_sum.4448 = f32[] add(%reduce_sum.4446, %reduce_sum.4447)
}

%region_1940.41963 (reduce_sum.41960: f32[], reduce_sum.41961: f32[]) -> f32[] {
  %reduce_sum.41960 = f32[] parameter(0)
  %reduce_sum.41961 = f32[] parameter(1)
  ROOT %reduce_sum.451 = f32[] add(%reduce_sum.41960, %reduce_sum.41961)
}

%region_1940.41963.clone (reduce_sum.4449: f32[], reduce_sum.4450: f32[]) -> f32[] {
  %reduce_sum.4449 = f32[] parameter(0)
  %reduce_sum.4450 = f32[] parameter(1)
  ROOT %reduce_sum.4451 = f32[] add(%reduce_sum.4449, %reduce_sum.4450)
}

%region_1941.41972 (reduce_sum.41969: f32[], reduce_sum.41970: f32[]) -> f32[] {
  %reduce_sum.41969 = f32[] parameter(0)
  %reduce_sum.41970 = f32[] parameter(1)
  ROOT %reduce_sum.452 = f32[] add(%reduce_sum.41969, %reduce_sum.41970)
}

%region_1941.41972.clone (reduce_sum.4452: f32[], reduce_sum.4456: f32[]) -> f32[] {
  %reduce_sum.4452 = f32[] parameter(0)
  %reduce_sum.4456 = f32[] parameter(1)
  ROOT %reduce_sum.4458 = f32[] add(%reduce_sum.4452, %reduce_sum.4456)
}

%region_1942.41981 (reduce_sum.41978: f32[], reduce_sum.41979: f32[]) -> f32[] {
  %reduce_sum.41978 = f32[] parameter(0)
  %reduce_sum.41979 = f32[] parameter(1)
  ROOT %reduce_sum.453 = f32[] add(%reduce_sum.41978, %reduce_sum.41979)
}

%region_1942.41981.clone (reduce_sum.4459: f32[], reduce_sum.4460: f32[]) -> f32[] {
  %reduce_sum.4459 = f32[] parameter(0)
  %reduce_sum.4460 = f32[] parameter(1)
  ROOT %reduce_sum.4461 = f32[] add(%reduce_sum.4459, %reduce_sum.4460)
}

%region_1943.41990 (reduce_sum.41987: f32[], reduce_sum.41988: f32[]) -> f32[] {
  %reduce_sum.41987 = f32[] parameter(0)
  %reduce_sum.41988 = f32[] parameter(1)
  ROOT %reduce_sum.454 = f32[] add(%reduce_sum.41987, %reduce_sum.41988)
}

%region_1944.41999 (reduce_sum.41996: f32[], reduce_sum.41997: f32[]) -> f32[] {
  %reduce_sum.41996 = f32[] parameter(0)
  %reduce_sum.41997 = f32[] parameter(1)
  ROOT %reduce_sum.455 = f32[] add(%reduce_sum.41996, %reduce_sum.41997)
}

%region_1945.42008 (reduce_sum.42005: f32[], reduce_sum.42006: f32[]) -> f32[] {
  %reduce_sum.42005 = f32[] parameter(0)
  %reduce_sum.42006 = f32[] parameter(1)
  ROOT %reduce_sum.456 = f32[] add(%reduce_sum.42005, %reduce_sum.42006)
}

%region_1945.42008.clone (reduce_sum.4462: f32[], reduce_sum.4463: f32[]) -> f32[] {
  %reduce_sum.4462 = f32[] parameter(0)
  %reduce_sum.4463 = f32[] parameter(1)
  ROOT %reduce_sum.4464 = f32[] add(%reduce_sum.4462, %reduce_sum.4463)
}

%region_1946.42017 (reduce_sum.42014: f32[], reduce_sum.42015: f32[]) -> f32[] {
  %reduce_sum.42014 = f32[] parameter(0)
  %reduce_sum.42015 = f32[] parameter(1)
  ROOT %reduce_sum.457 = f32[] add(%reduce_sum.42014, %reduce_sum.42015)
}

%region_1946.42017.clone (reduce_sum.4465: f32[], reduce_sum.4466: f32[]) -> f32[] {
  %reduce_sum.4465 = f32[] parameter(0)
  %reduce_sum.4466 = f32[] parameter(1)
  ROOT %reduce_sum.4467 = f32[] add(%reduce_sum.4465, %reduce_sum.4466)
}

%region_1947.42026 (reduce_sum.42023: f32[], reduce_sum.42024: f32[]) -> f32[] {
  %reduce_sum.42023 = f32[] parameter(0)
  %reduce_sum.42024 = f32[] parameter(1)
  ROOT %reduce_sum.458 = f32[] add(%reduce_sum.42023, %reduce_sum.42024)
}

%region_1947.42026.clone (reduce_sum.4468: f32[], reduce_sum.4472: f32[]) -> f32[] {
  %reduce_sum.4468 = f32[] parameter(0)
  %reduce_sum.4472 = f32[] parameter(1)
  ROOT %reduce_sum.4475 = f32[] add(%reduce_sum.4468, %reduce_sum.4472)
}

%region_1948.42035 (reduce_sum.42032: f32[], reduce_sum.42033: f32[]) -> f32[] {
  %reduce_sum.42032 = f32[] parameter(0)
  %reduce_sum.42033 = f32[] parameter(1)
  ROOT %reduce_sum.459 = f32[] add(%reduce_sum.42032, %reduce_sum.42033)
}

%region_1948.42035.clone (reduce_sum.4476: f32[], reduce_sum.4477: f32[]) -> f32[] {
  %reduce_sum.4476 = f32[] parameter(0)
  %reduce_sum.4477 = f32[] parameter(1)
  ROOT %reduce_sum.4481 = f32[] add(%reduce_sum.4476, %reduce_sum.4477)
}

%region_1949.42044 (reduce_sum.42041: f32[], reduce_sum.42042: f32[]) -> f32[] {
  %reduce_sum.42041 = f32[] parameter(0)
  %reduce_sum.42042 = f32[] parameter(1)
  ROOT %reduce_sum.460 = f32[] add(%reduce_sum.42041, %reduce_sum.42042)
}

%region_1949.42044.clone (reduce_sum.4484: f32[], reduce_sum.4485: f32[]) -> f32[] {
  %reduce_sum.4484 = f32[] parameter(0)
  %reduce_sum.4485 = f32[] parameter(1)
  ROOT %reduce_sum.4486 = f32[] add(%reduce_sum.4484, %reduce_sum.4485)
}

%region_1950.42053 (reduce_sum.42050: f32[], reduce_sum.42051: f32[]) -> f32[] {
  %reduce_sum.42050 = f32[] parameter(0)
  %reduce_sum.42051 = f32[] parameter(1)
  ROOT %reduce_sum.461 = f32[] add(%reduce_sum.42050, %reduce_sum.42051)
}

%region_1950.42053.clone (reduce_sum.4487: f32[], reduce_sum.4488: f32[]) -> f32[] {
  %reduce_sum.4487 = f32[] parameter(0)
  %reduce_sum.4488 = f32[] parameter(1)
  ROOT %reduce_sum.4489 = f32[] add(%reduce_sum.4487, %reduce_sum.4488)
}

%region_1951.42062 (reduce_sum.42059: f32[], reduce_sum.42060: f32[]) -> f32[] {
  %reduce_sum.42059 = f32[] parameter(0)
  %reduce_sum.42060 = f32[] parameter(1)
  ROOT %reduce_sum.462 = f32[] add(%reduce_sum.42059, %reduce_sum.42060)
}

%region_1951.42062.clone (reduce_sum.4490: f32[], reduce_sum.4491: f32[]) -> f32[] {
  %reduce_sum.4490 = f32[] parameter(0)
  %reduce_sum.4491 = f32[] parameter(1)
  ROOT %reduce_sum.4492 = f32[] add(%reduce_sum.4490, %reduce_sum.4491)
}

%region_1952.42071 (reduce_sum.42068: f32[], reduce_sum.42069: f32[]) -> f32[] {
  %reduce_sum.42068 = f32[] parameter(0)
  %reduce_sum.42069 = f32[] parameter(1)
  ROOT %reduce_sum.463 = f32[] add(%reduce_sum.42068, %reduce_sum.42069)
}

%region_1952.42071.clone (reduce_sum.4493: f32[], reduce_sum.4494: f32[]) -> f32[] {
  %reduce_sum.4493 = f32[] parameter(0)
  %reduce_sum.4494 = f32[] parameter(1)
  ROOT %reduce_sum.4495 = f32[] add(%reduce_sum.4493, %reduce_sum.4494)
}

%region_1953.42080 (reduce_sum.42077: f32[], reduce_sum.42078: f32[]) -> f32[] {
  %reduce_sum.42077 = f32[] parameter(0)
  %reduce_sum.42078 = f32[] parameter(1)
  ROOT %reduce_sum.464 = f32[] add(%reduce_sum.42077, %reduce_sum.42078)
}

%region_1954.42089 (reduce_sum.42086: f32[], reduce_sum.42087: f32[]) -> f32[] {
  %reduce_sum.42086 = f32[] parameter(0)
  %reduce_sum.42087 = f32[] parameter(1)
  ROOT %reduce_sum.465 = f32[] add(%reduce_sum.42086, %reduce_sum.42087)
}

%region_1955.42098 (reduce_sum.42095: f32[], reduce_sum.42096: f32[]) -> f32[] {
  %reduce_sum.42095 = f32[] parameter(0)
  %reduce_sum.42096 = f32[] parameter(1)
  ROOT %reduce_sum.466 = f32[] add(%reduce_sum.42095, %reduce_sum.42096)
}

%region_1955.42098.clone (reduce_sum.4496: f32[], reduce_sum.4497: f32[]) -> f32[] {
  %reduce_sum.4496 = f32[] parameter(0)
  %reduce_sum.4497 = f32[] parameter(1)
  ROOT %reduce_sum.4498 = f32[] add(%reduce_sum.4496, %reduce_sum.4497)
}

%region_1956.42107 (reduce_sum.42104: f32[], reduce_sum.42105: f32[]) -> f32[] {
  %reduce_sum.42104 = f32[] parameter(0)
  %reduce_sum.42105 = f32[] parameter(1)
  ROOT %reduce_sum.467 = f32[] add(%reduce_sum.42104, %reduce_sum.42105)
}

%region_1956.42107.clone (reduce_sum.4502: f32[], reduce_sum.4504: f32[]) -> f32[] {
  %reduce_sum.4502 = f32[] parameter(0)
  %reduce_sum.4504 = f32[] parameter(1)
  ROOT %reduce_sum.4505 = f32[] add(%reduce_sum.4502, %reduce_sum.4504)
}

%region_1957.42116 (reduce_sum.42113: f32[], reduce_sum.42114: f32[]) -> f32[] {
  %reduce_sum.42113 = f32[] parameter(0)
  %reduce_sum.42114 = f32[] parameter(1)
  ROOT %reduce_sum.468 = f32[] add(%reduce_sum.42113, %reduce_sum.42114)
}

%region_1957.42116.clone (reduce_sum.4506: f32[], reduce_sum.4507: f32[]) -> f32[] {
  %reduce_sum.4506 = f32[] parameter(0)
  %reduce_sum.4507 = f32[] parameter(1)
  ROOT %reduce_sum.4508 = f32[] add(%reduce_sum.4506, %reduce_sum.4507)
}

%region_1958.42125 (reduce_sum.42122: f32[], reduce_sum.42123: f32[]) -> f32[] {
  %reduce_sum.42122 = f32[] parameter(0)
  %reduce_sum.42123 = f32[] parameter(1)
  ROOT %reduce_sum.469 = f32[] add(%reduce_sum.42122, %reduce_sum.42123)
}

%region_1958.42125.clone (reduce_sum.4509: f32[], reduce_sum.4510: f32[]) -> f32[] {
  %reduce_sum.4509 = f32[] parameter(0)
  %reduce_sum.4510 = f32[] parameter(1)
  ROOT %reduce_sum.4514 = f32[] add(%reduce_sum.4509, %reduce_sum.4510)
}

%region_1959.42134 (reduce_sum.42131: f32[], reduce_sum.42132: f32[]) -> f32[] {
  %reduce_sum.42131 = f32[] parameter(0)
  %reduce_sum.42132 = f32[] parameter(1)
  ROOT %reduce_sum.470 = f32[] add(%reduce_sum.42131, %reduce_sum.42132)
}

%region_1959.42134.clone (reduce_sum.4516: f32[], reduce_sum.4517: f32[]) -> f32[] {
  %reduce_sum.4516 = f32[] parameter(0)
  %reduce_sum.4517 = f32[] parameter(1)
  ROOT %reduce_sum.4518 = f32[] add(%reduce_sum.4516, %reduce_sum.4517)
}

%region_1960.42143 (reduce_sum.42140: f32[], reduce_sum.42141: f32[]) -> f32[] {
  %reduce_sum.42140 = f32[] parameter(0)
  %reduce_sum.42141 = f32[] parameter(1)
  ROOT %reduce_sum.471 = f32[] add(%reduce_sum.42140, %reduce_sum.42141)
}

%region_1960.42143.clone (reduce_sum.4519: f32[], reduce_sum.4523: f32[]) -> f32[] {
  %reduce_sum.4519 = f32[] parameter(0)
  %reduce_sum.4523 = f32[] parameter(1)
  ROOT %reduce_sum.4525 = f32[] add(%reduce_sum.4519, %reduce_sum.4523)
}

%region_1961.42152 (reduce_sum.42149: f32[], reduce_sum.42150: f32[]) -> f32[] {
  %reduce_sum.42149 = f32[] parameter(0)
  %reduce_sum.42150 = f32[] parameter(1)
  ROOT %reduce_sum.472 = f32[] add(%reduce_sum.42149, %reduce_sum.42150)
}

%region_1961.42152.clone (reduce_sum.4526: f32[], reduce_sum.4527: f32[]) -> f32[] {
  %reduce_sum.4526 = f32[] parameter(0)
  %reduce_sum.4527 = f32[] parameter(1)
  ROOT %reduce_sum.4528 = f32[] add(%reduce_sum.4526, %reduce_sum.4527)
}

%region_1962.42161 (reduce_sum.42158: f32[], reduce_sum.42159: f32[]) -> f32[] {
  %reduce_sum.42158 = f32[] parameter(0)
  %reduce_sum.42159 = f32[] parameter(1)
  ROOT %reduce_sum.473 = f32[] add(%reduce_sum.42158, %reduce_sum.42159)
}

%region_1962.42161.clone (reduce_sum.4529: f32[], reduce_sum.4530: f32[]) -> f32[] {
  %reduce_sum.4529 = f32[] parameter(0)
  %reduce_sum.4530 = f32[] parameter(1)
  ROOT %reduce_sum.4531 = f32[] add(%reduce_sum.4529, %reduce_sum.4530)
}

%region_1963.42170 (reduce_sum.42167: f32[], reduce_sum.42168: f32[]) -> f32[] {
  %reduce_sum.42167 = f32[] parameter(0)
  %reduce_sum.42168 = f32[] parameter(1)
  ROOT %reduce_sum.474 = f32[] add(%reduce_sum.42167, %reduce_sum.42168)
}

%region_1964.42179 (reduce_sum.42176: f32[], reduce_sum.42177: f32[]) -> f32[] {
  %reduce_sum.42176 = f32[] parameter(0)
  %reduce_sum.42177 = f32[] parameter(1)
  ROOT %reduce_sum.475 = f32[] add(%reduce_sum.42176, %reduce_sum.42177)
}

%region_1965.42188 (reduce_sum.42185: f32[], reduce_sum.42186: f32[]) -> f32[] {
  %reduce_sum.42185 = f32[] parameter(0)
  %reduce_sum.42186 = f32[] parameter(1)
  ROOT %reduce_sum.476 = f32[] add(%reduce_sum.42185, %reduce_sum.42186)
}

%region_1965.42188.clone (reduce_sum.4532: f32[], reduce_sum.4533: f32[]) -> f32[] {
  %reduce_sum.4532 = f32[] parameter(0)
  %reduce_sum.4533 = f32[] parameter(1)
  ROOT %reduce_sum.4534 = f32[] add(%reduce_sum.4532, %reduce_sum.4533)
}

%region_1966.42197 (reduce_sum.42194: f32[], reduce_sum.42195: f32[]) -> f32[] {
  %reduce_sum.42194 = f32[] parameter(0)
  %reduce_sum.42195 = f32[] parameter(1)
  ROOT %reduce_sum.477 = f32[] add(%reduce_sum.42194, %reduce_sum.42195)
}

%region_1966.42197.clone (reduce_sum.4535: f32[], reduce_sum.4536: f32[]) -> f32[] {
  %reduce_sum.4535 = f32[] parameter(0)
  %reduce_sum.4536 = f32[] parameter(1)
  ROOT %reduce_sum.4537 = f32[] add(%reduce_sum.4535, %reduce_sum.4536)
}

%region_1967.42206 (reduce_sum.42203: f32[], reduce_sum.42204: f32[]) -> f32[] {
  %reduce_sum.42203 = f32[] parameter(0)
  %reduce_sum.42204 = f32[] parameter(1)
  ROOT %reduce_sum.478 = f32[] add(%reduce_sum.42203, %reduce_sum.42204)
}

%region_1967.42206.clone (reduce_sum.4538: f32[], reduce_sum.4539: f32[]) -> f32[] {
  %reduce_sum.4538 = f32[] parameter(0)
  %reduce_sum.4539 = f32[] parameter(1)
  ROOT %reduce_sum.4540 = f32[] add(%reduce_sum.4538, %reduce_sum.4539)
}

%region_1968.42215 (reduce_sum.42212: f32[], reduce_sum.42213: f32[]) -> f32[] {
  %reduce_sum.42212 = f32[] parameter(0)
  %reduce_sum.42213 = f32[] parameter(1)
  ROOT %reduce_sum.479 = f32[] add(%reduce_sum.42212, %reduce_sum.42213)
}

%region_1968.42215.clone (reduce_sum.4541: f32[], reduce_sum.4542: f32[]) -> f32[] {
  %reduce_sum.4541 = f32[] parameter(0)
  %reduce_sum.4542 = f32[] parameter(1)
  ROOT %reduce_sum.4543 = f32[] add(%reduce_sum.4541, %reduce_sum.4542)
}

%region_1969.42224 (reduce_sum.42221: f32[], reduce_sum.42222: f32[]) -> f32[] {
  %reduce_sum.42221 = f32[] parameter(0)
  %reduce_sum.42222 = f32[] parameter(1)
  ROOT %reduce_sum.480 = f32[] add(%reduce_sum.42221, %reduce_sum.42222)
}

%region_1969.42224.clone (reduce_sum.4544: f32[], reduce_sum.4545: f32[]) -> f32[] {
  %reduce_sum.4544 = f32[] parameter(0)
  %reduce_sum.4545 = f32[] parameter(1)
  ROOT %reduce_sum.4546 = f32[] add(%reduce_sum.4544, %reduce_sum.4545)
}

%region_1970.42233 (reduce_sum.42230: f32[], reduce_sum.42231: f32[]) -> f32[] {
  %reduce_sum.42230 = f32[] parameter(0)
  %reduce_sum.42231 = f32[] parameter(1)
  ROOT %reduce_sum.481 = f32[] add(%reduce_sum.42230, %reduce_sum.42231)
}

%region_1970.42233.clone (reduce_sum.4547: f32[], reduce_sum.4548: f32[]) -> f32[] {
  %reduce_sum.4547 = f32[] parameter(0)
  %reduce_sum.4548 = f32[] parameter(1)
  ROOT %reduce_sum.4549 = f32[] add(%reduce_sum.4547, %reduce_sum.4548)
}

%region_1971.42242 (reduce_sum.42239: f32[], reduce_sum.42240: f32[]) -> f32[] {
  %reduce_sum.42239 = f32[] parameter(0)
  %reduce_sum.42240 = f32[] parameter(1)
  ROOT %reduce_sum.482 = f32[] add(%reduce_sum.42239, %reduce_sum.42240)
}

%region_1971.42242.clone (reduce_sum.4550: f32[], reduce_sum.4551: f32[]) -> f32[] {
  %reduce_sum.4550 = f32[] parameter(0)
  %reduce_sum.4551 = f32[] parameter(1)
  ROOT %reduce_sum.4552 = f32[] add(%reduce_sum.4550, %reduce_sum.4551)
}

%region_1972.42251 (reduce_sum.42248: f32[], reduce_sum.42249: f32[]) -> f32[] {
  %reduce_sum.42248 = f32[] parameter(0)
  %reduce_sum.42249 = f32[] parameter(1)
  ROOT %reduce_sum.483 = f32[] add(%reduce_sum.42248, %reduce_sum.42249)
}

%region_1972.42251.clone (reduce_sum.4553: f32[], reduce_sum.4554: f32[]) -> f32[] {
  %reduce_sum.4553 = f32[] parameter(0)
  %reduce_sum.4554 = f32[] parameter(1)
  ROOT %reduce_sum.4555 = f32[] add(%reduce_sum.4553, %reduce_sum.4554)
}

%region_1973.42260 (reduce_sum.42257: f32[], reduce_sum.42258: f32[]) -> f32[] {
  %reduce_sum.42257 = f32[] parameter(0)
  %reduce_sum.42258 = f32[] parameter(1)
  ROOT %reduce_sum.484 = f32[] add(%reduce_sum.42257, %reduce_sum.42258)
}

%region_1974.42269 (reduce_sum.42266: f32[], reduce_sum.42267: f32[]) -> f32[] {
  %reduce_sum.42266 = f32[] parameter(0)
  %reduce_sum.42267 = f32[] parameter(1)
  ROOT %reduce_sum.485 = f32[] add(%reduce_sum.42266, %reduce_sum.42267)
}

%region_1975.42278 (reduce_sum.42275: f32[], reduce_sum.42276: f32[]) -> f32[] {
  %reduce_sum.42275 = f32[] parameter(0)
  %reduce_sum.42276 = f32[] parameter(1)
  ROOT %reduce_sum.486 = f32[] add(%reduce_sum.42275, %reduce_sum.42276)
}

%region_1975.42278.clone (reduce_sum.4556: f32[], reduce_sum.4557: f32[]) -> f32[] {
  %reduce_sum.4556 = f32[] parameter(0)
  %reduce_sum.4557 = f32[] parameter(1)
  ROOT %reduce_sum.4558 = f32[] add(%reduce_sum.4556, %reduce_sum.4557)
}

%region_1976.42287 (reduce_sum.42284: f32[], reduce_sum.42285: f32[]) -> f32[] {
  %reduce_sum.42284 = f32[] parameter(0)
  %reduce_sum.42285 = f32[] parameter(1)
  ROOT %reduce_sum.487 = f32[] add(%reduce_sum.42284, %reduce_sum.42285)
}

%region_1976.42287.clone (reduce_sum.4562: f32[], reduce_sum.4567: f32[]) -> f32[] {
  %reduce_sum.4562 = f32[] parameter(0)
  %reduce_sum.4567 = f32[] parameter(1)
  ROOT %reduce_sum.4569 = f32[] add(%reduce_sum.4562, %reduce_sum.4567)
}

%region_1977.42296 (reduce_sum.42293: f32[], reduce_sum.42294: f32[]) -> f32[] {
  %reduce_sum.42293 = f32[] parameter(0)
  %reduce_sum.42294 = f32[] parameter(1)
  ROOT %reduce_sum.488 = f32[] add(%reduce_sum.42293, %reduce_sum.42294)
}

%region_1977.42296.clone (reduce_sum.4570: f32[], reduce_sum.4571: f32[]) -> f32[] {
  %reduce_sum.4570 = f32[] parameter(0)
  %reduce_sum.4571 = f32[] parameter(1)
  ROOT %reduce_sum.4572 = f32[] add(%reduce_sum.4570, %reduce_sum.4571)
}

%region_1978.42305 (reduce_sum.42302: f32[], reduce_sum.42303: f32[]) -> f32[] {
  %reduce_sum.42302 = f32[] parameter(0)
  %reduce_sum.42303 = f32[] parameter(1)
  ROOT %reduce_sum.489 = f32[] add(%reduce_sum.42302, %reduce_sum.42303)
}

%region_1978.42305.clone (reduce_sum.4573: f32[], reduce_sum.4574: f32[]) -> f32[] {
  %reduce_sum.4573 = f32[] parameter(0)
  %reduce_sum.4574 = f32[] parameter(1)
  ROOT %reduce_sum.4575 = f32[] add(%reduce_sum.4573, %reduce_sum.4574)
}

%region_1979.42314 (reduce_sum.42311: f32[], reduce_sum.42312: f32[]) -> f32[] {
  %reduce_sum.42311 = f32[] parameter(0)
  %reduce_sum.42312 = f32[] parameter(1)
  ROOT %reduce_sum.490 = f32[] add(%reduce_sum.42311, %reduce_sum.42312)
}

%region_1979.42314.clone (reduce_sum.4576: f32[], reduce_sum.4577: f32[]) -> f32[] {
  %reduce_sum.4576 = f32[] parameter(0)
  %reduce_sum.4577 = f32[] parameter(1)
  ROOT %reduce_sum.4578 = f32[] add(%reduce_sum.4576, %reduce_sum.4577)
}

%region_1980.42323 (reduce_sum.42320: f32[], reduce_sum.42321: f32[]) -> f32[] {
  %reduce_sum.42320 = f32[] parameter(0)
  %reduce_sum.42321 = f32[] parameter(1)
  ROOT %reduce_sum.491 = f32[] add(%reduce_sum.42320, %reduce_sum.42321)
}

%region_1980.42323.clone (reduce_sum.4579: f32[], reduce_sum.4580: f32[]) -> f32[] {
  %reduce_sum.4579 = f32[] parameter(0)
  %reduce_sum.4580 = f32[] parameter(1)
  ROOT %reduce_sum.4581 = f32[] add(%reduce_sum.4579, %reduce_sum.4580)
}

%region_1981.42332 (reduce_sum.42329: f32[], reduce_sum.42330: f32[]) -> f32[] {
  %reduce_sum.42329 = f32[] parameter(0)
  %reduce_sum.42330 = f32[] parameter(1)
  ROOT %reduce_sum.492 = f32[] add(%reduce_sum.42329, %reduce_sum.42330)
}

%region_1981.42332.clone (reduce_sum.4582: f32[], reduce_sum.4583: f32[]) -> f32[] {
  %reduce_sum.4582 = f32[] parameter(0)
  %reduce_sum.4583 = f32[] parameter(1)
  ROOT %reduce_sum.4584 = f32[] add(%reduce_sum.4582, %reduce_sum.4583)
}

%region_1982.42341 (reduce_sum.42338: f32[], reduce_sum.42339: f32[]) -> f32[] {
  %reduce_sum.42338 = f32[] parameter(0)
  %reduce_sum.42339 = f32[] parameter(1)
  ROOT %reduce_sum.493 = f32[] add(%reduce_sum.42338, %reduce_sum.42339)
}

%region_1982.42341.clone (reduce_sum.4585: f32[], reduce_sum.4586: f32[]) -> f32[] {
  %reduce_sum.4585 = f32[] parameter(0)
  %reduce_sum.4586 = f32[] parameter(1)
  ROOT %reduce_sum.4587 = f32[] add(%reduce_sum.4585, %reduce_sum.4586)
}

%region_1983.42350 (reduce_sum.42347: f32[], reduce_sum.42348: f32[]) -> f32[] {
  %reduce_sum.42347 = f32[] parameter(0)
  %reduce_sum.42348 = f32[] parameter(1)
  ROOT %reduce_sum.494 = f32[] add(%reduce_sum.42347, %reduce_sum.42348)
}

%region_1984.42359 (reduce_sum.42356: f32[], reduce_sum.42357: f32[]) -> f32[] {
  %reduce_sum.42356 = f32[] parameter(0)
  %reduce_sum.42357 = f32[] parameter(1)
  ROOT %reduce_sum.495 = f32[] add(%reduce_sum.42356, %reduce_sum.42357)
}

%region_1985.42368 (reduce_sum.42365: f32[], reduce_sum.42366: f32[]) -> f32[] {
  %reduce_sum.42365 = f32[] parameter(0)
  %reduce_sum.42366 = f32[] parameter(1)
  ROOT %reduce_sum.496 = f32[] add(%reduce_sum.42365, %reduce_sum.42366)
}

%region_1985.42368.clone (reduce_sum.4588: f32[], reduce_sum.4589: f32[]) -> f32[] {
  %reduce_sum.4588 = f32[] parameter(0)
  %reduce_sum.4589 = f32[] parameter(1)
  ROOT %reduce_sum.4590 = f32[] add(%reduce_sum.4588, %reduce_sum.4589)
}

%region_1986.42377 (reduce_sum.42374: f32[], reduce_sum.42375: f32[]) -> f32[] {
  %reduce_sum.42374 = f32[] parameter(0)
  %reduce_sum.42375 = f32[] parameter(1)
  ROOT %reduce_sum.497 = f32[] add(%reduce_sum.42374, %reduce_sum.42375)
}

%region_1986.42377.clone (reduce_sum.4591: f32[], reduce_sum.4592: f32[]) -> f32[] {
  %reduce_sum.4591 = f32[] parameter(0)
  %reduce_sum.4592 = f32[] parameter(1)
  ROOT %reduce_sum.4593 = f32[] add(%reduce_sum.4591, %reduce_sum.4592)
}

%region_1987.42386 (reduce_sum.42383: f32[], reduce_sum.42384: f32[]) -> f32[] {
  %reduce_sum.42383 = f32[] parameter(0)
  %reduce_sum.42384 = f32[] parameter(1)
  ROOT %reduce_sum.498 = f32[] add(%reduce_sum.42383, %reduce_sum.42384)
}

%region_1987.42386.clone (reduce_sum.4597: f32[], reduce_sum.4599: f32[]) -> f32[] {
  %reduce_sum.4597 = f32[] parameter(0)
  %reduce_sum.4599 = f32[] parameter(1)
  ROOT %reduce_sum.4600 = f32[] add(%reduce_sum.4597, %reduce_sum.4599)
}

%region_1988.42395 (reduce_sum.42392: f32[], reduce_sum.42393: f32[]) -> f32[] {
  %reduce_sum.42392 = f32[] parameter(0)
  %reduce_sum.42393 = f32[] parameter(1)
  ROOT %reduce_sum.499 = f32[] add(%reduce_sum.42392, %reduce_sum.42393)
}

%region_1988.42395.clone (reduce_sum.4601: f32[], reduce_sum.4602: f32[]) -> f32[] {
  %reduce_sum.4601 = f32[] parameter(0)
  %reduce_sum.4602 = f32[] parameter(1)
  ROOT %reduce_sum.4603 = f32[] add(%reduce_sum.4601, %reduce_sum.4602)
}

%region_1989.42404 (reduce_sum.42401: f32[], reduce_sum.42402: f32[]) -> f32[] {
  %reduce_sum.42401 = f32[] parameter(0)
  %reduce_sum.42402 = f32[] parameter(1)
  ROOT %reduce_sum.500 = f32[] add(%reduce_sum.42401, %reduce_sum.42402)
}

%region_1989.42404.clone (reduce_sum.4607: f32[], reduce_sum.4609: f32[]) -> f32[] {
  %reduce_sum.4607 = f32[] parameter(0)
  %reduce_sum.4609 = f32[] parameter(1)
  ROOT %reduce_sum.4610 = f32[] add(%reduce_sum.4607, %reduce_sum.4609)
}

%region_1990.42413 (reduce_sum.42410: f32[], reduce_sum.42411: f32[]) -> f32[] {
  %reduce_sum.42410 = f32[] parameter(0)
  %reduce_sum.42411 = f32[] parameter(1)
  ROOT %reduce_sum.501 = f32[] add(%reduce_sum.42410, %reduce_sum.42411)
}

%region_1990.42413.clone (reduce_sum.4611: f32[], reduce_sum.4612: f32[]) -> f32[] {
  %reduce_sum.4611 = f32[] parameter(0)
  %reduce_sum.4612 = f32[] parameter(1)
  ROOT %reduce_sum.4613 = f32[] add(%reduce_sum.4611, %reduce_sum.4612)
}

%region_1991.42422 (reduce_sum.42419: f32[], reduce_sum.42420: f32[]) -> f32[] {
  %reduce_sum.42419 = f32[] parameter(0)
  %reduce_sum.42420 = f32[] parameter(1)
  ROOT %reduce_sum.502 = f32[] add(%reduce_sum.42419, %reduce_sum.42420)
}

%region_1991.42422.clone (reduce_sum.4614: f32[], reduce_sum.4615: f32[]) -> f32[] {
  %reduce_sum.4614 = f32[] parameter(0)
  %reduce_sum.4615 = f32[] parameter(1)
  ROOT %reduce_sum.4616 = f32[] add(%reduce_sum.4614, %reduce_sum.4615)
}

%region_1992.42431 (reduce_sum.42428: f32[], reduce_sum.42429: f32[]) -> f32[] {
  %reduce_sum.42428 = f32[] parameter(0)
  %reduce_sum.42429 = f32[] parameter(1)
  ROOT %reduce_sum.503 = f32[] add(%reduce_sum.42428, %reduce_sum.42429)
}

%region_1992.42431.clone (reduce_sum.4617: f32[], reduce_sum.4618: f32[]) -> f32[] {
  %reduce_sum.4617 = f32[] parameter(0)
  %reduce_sum.4618 = f32[] parameter(1)
  ROOT %reduce_sum.4619 = f32[] add(%reduce_sum.4617, %reduce_sum.4618)
}

%region_1993.42440 (reduce_sum.42437: f32[], reduce_sum.42438: f32[]) -> f32[] {
  %reduce_sum.42437 = f32[] parameter(0)
  %reduce_sum.42438 = f32[] parameter(1)
  ROOT %reduce_sum.504 = f32[] add(%reduce_sum.42437, %reduce_sum.42438)
}

%region_1994.42449 (reduce_sum.42446: f32[], reduce_sum.42447: f32[]) -> f32[] {
  %reduce_sum.42446 = f32[] parameter(0)
  %reduce_sum.42447 = f32[] parameter(1)
  ROOT %reduce_sum.505 = f32[] add(%reduce_sum.42446, %reduce_sum.42447)
}

%region_1995.42458 (reduce_sum.42455: f32[], reduce_sum.42456: f32[]) -> f32[] {
  %reduce_sum.42455 = f32[] parameter(0)
  %reduce_sum.42456 = f32[] parameter(1)
  ROOT %reduce_sum.506 = f32[] add(%reduce_sum.42455, %reduce_sum.42456)
}

%region_1995.42458.clone (reduce_sum.4620: f32[], reduce_sum.4621: f32[]) -> f32[] {
  %reduce_sum.4620 = f32[] parameter(0)
  %reduce_sum.4621 = f32[] parameter(1)
  ROOT %reduce_sum.4622 = f32[] add(%reduce_sum.4620, %reduce_sum.4621)
}

%region_1996.42467 (reduce_sum.42464: f32[], reduce_sum.42465: f32[]) -> f32[] {
  %reduce_sum.42464 = f32[] parameter(0)
  %reduce_sum.42465 = f32[] parameter(1)
  ROOT %reduce_sum.507 = f32[] add(%reduce_sum.42464, %reduce_sum.42465)
}

%region_1996.42467.clone (reduce_sum.4623: f32[], reduce_sum.4624: f32[]) -> f32[] {
  %reduce_sum.4623 = f32[] parameter(0)
  %reduce_sum.4624 = f32[] parameter(1)
  ROOT %reduce_sum.4625 = f32[] add(%reduce_sum.4623, %reduce_sum.4624)
}

%region_1997.42476 (reduce_sum.42473: f32[], reduce_sum.42474: f32[]) -> f32[] {
  %reduce_sum.42473 = f32[] parameter(0)
  %reduce_sum.42474 = f32[] parameter(1)
  ROOT %reduce_sum.508 = f32[] add(%reduce_sum.42473, %reduce_sum.42474)
}

%region_1997.42476.clone (reduce_sum.4626: f32[], reduce_sum.4627: f32[]) -> f32[] {
  %reduce_sum.4626 = f32[] parameter(0)
  %reduce_sum.4627 = f32[] parameter(1)
  ROOT %reduce_sum.4628 = f32[] add(%reduce_sum.4626, %reduce_sum.4627)
}

%region_1998.42485 (reduce_sum.42482: f32[], reduce_sum.42483: f32[]) -> f32[] {
  %reduce_sum.42482 = f32[] parameter(0)
  %reduce_sum.42483 = f32[] parameter(1)
  ROOT %reduce_sum.509 = f32[] add(%reduce_sum.42482, %reduce_sum.42483)
}

%region_1998.42485.clone (reduce_sum.4629: f32[], reduce_sum.4630: f32[]) -> f32[] {
  %reduce_sum.4629 = f32[] parameter(0)
  %reduce_sum.4630 = f32[] parameter(1)
  ROOT %reduce_sum.4631 = f32[] add(%reduce_sum.4629, %reduce_sum.4630)
}

%region_1999.42494 (reduce_sum.42491: f32[], reduce_sum.42492: f32[]) -> f32[] {
  %reduce_sum.42491 = f32[] parameter(0)
  %reduce_sum.42492 = f32[] parameter(1)
  ROOT %reduce_sum.510 = f32[] add(%reduce_sum.42491, %reduce_sum.42492)
}

%region_1999.42494.clone (reduce_sum.4632: f32[], reduce_sum.4633: f32[]) -> f32[] {
  %reduce_sum.4632 = f32[] parameter(0)
  %reduce_sum.4633 = f32[] parameter(1)
  ROOT %reduce_sum.4634 = f32[] add(%reduce_sum.4632, %reduce_sum.4633)
}

%region_2000.42503 (reduce_sum.42500: f32[], reduce_sum.42501: f32[]) -> f32[] {
  %reduce_sum.42500 = f32[] parameter(0)
  %reduce_sum.42501 = f32[] parameter(1)
  ROOT %reduce_sum.511 = f32[] add(%reduce_sum.42500, %reduce_sum.42501)
}

%region_2000.42503.clone (reduce_sum.4635: f32[], reduce_sum.4636: f32[]) -> f32[] {
  %reduce_sum.4635 = f32[] parameter(0)
  %reduce_sum.4636 = f32[] parameter(1)
  ROOT %reduce_sum.4637 = f32[] add(%reduce_sum.4635, %reduce_sum.4636)
}

%region_2002.42521.clone (reduce_sum.4638: f32[], reduce_sum.4639: f32[]) -> f32[] {
  %reduce_sum.4638 = f32[] parameter(0)
  %reduce_sum.4639 = f32[] parameter(1)
  ROOT %reduce_sum.4640 = f32[] add(%reduce_sum.4638, %reduce_sum.4639)
}

%region_2003.42530.clone (reduce_sum.4641: f32[], reduce_sum.4642: f32[]) -> f32[] {
  %reduce_sum.4641 = f32[] parameter(0)
  %reduce_sum.4642 = f32[] parameter(1)
  ROOT %reduce_sum.4643 = f32[] add(%reduce_sum.4641, %reduce_sum.4642)
}

%region_2004.42539.clone (reduce_sum.4644: f32[], reduce_sum.4645: f32[]) -> f32[] {
  %reduce_sum.4644 = f32[] parameter(0)
  %reduce_sum.4645 = f32[] parameter(1)
  ROOT %reduce_sum.4649 = f32[] add(%reduce_sum.4644, %reduce_sum.4645)
}

%region_2005.42548.clone (reduce_sum.4651: f32[], reduce_sum.4652: f32[]) -> f32[] {
  %reduce_sum.4651 = f32[] parameter(0)
  %reduce_sum.4652 = f32[] parameter(1)
  ROOT %reduce_sum.4653 = f32[] add(%reduce_sum.4651, %reduce_sum.4652)
}

%region_2008.42575.clone (reduce_sum.4654: f32[], reduce_sum.4655: f32[]) -> f32[] {
  %reduce_sum.4654 = f32[] parameter(0)
  %reduce_sum.4655 = f32[] parameter(1)
  ROOT %reduce_sum.4656 = f32[] add(%reduce_sum.4654, %reduce_sum.4655)
}

%region_2009.42584.clone (reduce_sum.4657: f32[], reduce_sum.4658: f32[]) -> f32[] {
  %reduce_sum.4657 = f32[] parameter(0)
  %reduce_sum.4658 = f32[] parameter(1)
  ROOT %reduce_sum.4659 = f32[] add(%reduce_sum.4657, %reduce_sum.4658)
}

%region_2010.42593.clone (reduce_sum.4660: f32[], reduce_sum.4661: f32[]) -> f32[] {
  %reduce_sum.4660 = f32[] parameter(0)
  %reduce_sum.4661 = f32[] parameter(1)
  ROOT %reduce_sum.4662 = f32[] add(%reduce_sum.4660, %reduce_sum.4661)
}

%region_2011.42602.clone (reduce_sum.4663: f32[], reduce_sum.4664: f32[]) -> f32[] {
  %reduce_sum.4663 = f32[] parameter(0)
  %reduce_sum.4664 = f32[] parameter(1)
  ROOT %reduce_sum.4665 = f32[] add(%reduce_sum.4663, %reduce_sum.4664)
}

%region_2012.42611.clone (reduce_sum.4666: f32[], reduce_sum.4667: f32[]) -> f32[] {
  %reduce_sum.4666 = f32[] parameter(0)
  %reduce_sum.4667 = f32[] parameter(1)
  ROOT %reduce_sum.4668 = f32[] add(%reduce_sum.4666, %reduce_sum.4667)
}

%region_2013.42620.clone (reduce_sum.4669: f32[], reduce_sum.4670: f32[]) -> f32[] {
  %reduce_sum.4669 = f32[] parameter(0)
  %reduce_sum.4670 = f32[] parameter(1)
  ROOT %reduce_sum.4671 = f32[] add(%reduce_sum.4669, %reduce_sum.4670)
}

%region_2014.42629.clone (reduce_sum.4672: f32[], reduce_sum.4673: f32[]) -> f32[] {
  %reduce_sum.4672 = f32[] parameter(0)
  %reduce_sum.4673 = f32[] parameter(1)
  ROOT %reduce_sum.4674 = f32[] add(%reduce_sum.4672, %reduce_sum.4673)
}

%region_2015.42638.clone (reduce_sum.4675: f32[], reduce_sum.4676: f32[]) -> f32[] {
  %reduce_sum.4675 = f32[] parameter(0)
  %reduce_sum.4676 = f32[] parameter(1)
  ROOT %reduce_sum.4677 = f32[] add(%reduce_sum.4675, %reduce_sum.4676)
}

%region_2018.42665.clone (reduce_sum.4678: f32[], reduce_sum.4679: f32[]) -> f32[] {
  %reduce_sum.4678 = f32[] parameter(0)
  %reduce_sum.4679 = f32[] parameter(1)
  ROOT %reduce_sum.4680 = f32[] add(%reduce_sum.4678, %reduce_sum.4679)
}

%region_2019.42674.clone (reduce_sum.4681: f32[], reduce_sum.4682: f32[]) -> f32[] {
  %reduce_sum.4681 = f32[] parameter(0)
  %reduce_sum.4682 = f32[] parameter(1)
  ROOT %reduce_sum.4683 = f32[] add(%reduce_sum.4681, %reduce_sum.4682)
}

%region_2020.42683.clone (reduce_sum.4684: f32[], reduce_sum.4685: f32[]) -> f32[] {
  %reduce_sum.4684 = f32[] parameter(0)
  %reduce_sum.4685 = f32[] parameter(1)
  ROOT %reduce_sum.4686 = f32[] add(%reduce_sum.4684, %reduce_sum.4685)
}

%region_2021.42692.clone (reduce_sum.4687: f32[], reduce_sum.4688: f32[]) -> f32[] {
  %reduce_sum.4687 = f32[] parameter(0)
  %reduce_sum.4688 = f32[] parameter(1)
  ROOT %reduce_sum.4689 = f32[] add(%reduce_sum.4687, %reduce_sum.4688)
}

%region_2022.42701.clone (reduce_sum.4690: f32[], reduce_sum.4694: f32[]) -> f32[] {
  %reduce_sum.4690 = f32[] parameter(0)
  %reduce_sum.4694 = f32[] parameter(1)
  ROOT %reduce_sum.4696 = f32[] add(%reduce_sum.4690, %reduce_sum.4694)
}

%region_2023.42710.clone (reduce_sum.4697: f32[], reduce_sum.4698: f32[]) -> f32[] {
  %reduce_sum.4697 = f32[] parameter(0)
  %reduce_sum.4698 = f32[] parameter(1)
  ROOT %reduce_sum.4702 = f32[] add(%reduce_sum.4697, %reduce_sum.4698)
}

%region_2024.42719.clone (reduce_sum.4704: f32[], reduce_sum.4705: f32[]) -> f32[] {
  %reduce_sum.4704 = f32[] parameter(0)
  %reduce_sum.4705 = f32[] parameter(1)
  ROOT %reduce_sum.4706 = f32[] add(%reduce_sum.4704, %reduce_sum.4705)
}

%region_2025.42728.clone (reduce_sum.4707: f32[], reduce_sum.4708: f32[]) -> f32[] {
  %reduce_sum.4707 = f32[] parameter(0)
  %reduce_sum.4708 = f32[] parameter(1)
  ROOT %reduce_sum.4709 = f32[] add(%reduce_sum.4707, %reduce_sum.4708)
}

%region_2028.42755.clone (reduce_sum.4710: f32[], reduce_sum.4711: f32[]) -> f32[] {
  %reduce_sum.4710 = f32[] parameter(0)
  %reduce_sum.4711 = f32[] parameter(1)
  ROOT %reduce_sum.4712 = f32[] add(%reduce_sum.4710, %reduce_sum.4711)
}

%region_2029.42764.clone (reduce_sum.4713: f32[], reduce_sum.4714: f32[]) -> f32[] {
  %reduce_sum.4713 = f32[] parameter(0)
  %reduce_sum.4714 = f32[] parameter(1)
  ROOT %reduce_sum.4715 = f32[] add(%reduce_sum.4713, %reduce_sum.4714)
}

%region_2030.42773.clone (reduce_sum.4716: f32[], reduce_sum.4717: f32[]) -> f32[] {
  %reduce_sum.4716 = f32[] parameter(0)
  %reduce_sum.4717 = f32[] parameter(1)
  ROOT %reduce_sum.4718 = f32[] add(%reduce_sum.4716, %reduce_sum.4717)
}

%region_2031.42782.clone (reduce_sum.4722: f32[], reduce_sum.4724: f32[]) -> f32[] {
  %reduce_sum.4722 = f32[] parameter(0)
  %reduce_sum.4724 = f32[] parameter(1)
  ROOT %reduce_sum.4725 = f32[] add(%reduce_sum.4722, %reduce_sum.4724)
}

%region_2032.42791.clone (reduce_sum.4726: f32[], reduce_sum.4727: f32[]) -> f32[] {
  %reduce_sum.4726 = f32[] parameter(0)
  %reduce_sum.4727 = f32[] parameter(1)
  ROOT %reduce_sum.4728 = f32[] add(%reduce_sum.4726, %reduce_sum.4727)
}

%region_2033.42800.clone (reduce_sum.4729: f32[], reduce_sum.4730: f32[]) -> f32[] {
  %reduce_sum.4729 = f32[] parameter(0)
  %reduce_sum.4730 = f32[] parameter(1)
  ROOT %reduce_sum.4731 = f32[] add(%reduce_sum.4729, %reduce_sum.4730)
}

%region_2034.42809.clone (reduce_sum.4732: f32[], reduce_sum.4733: f32[]) -> f32[] {
  %reduce_sum.4732 = f32[] parameter(0)
  %reduce_sum.4733 = f32[] parameter(1)
  ROOT %reduce_sum.4734 = f32[] add(%reduce_sum.4732, %reduce_sum.4733)
}

%region_2035.42818.clone (reduce_sum.4735: f32[], reduce_sum.4736: f32[]) -> f32[] {
  %reduce_sum.4735 = f32[] parameter(0)
  %reduce_sum.4736 = f32[] parameter(1)
  ROOT %reduce_sum.4737 = f32[] add(%reduce_sum.4735, %reduce_sum.4736)
}

%region_2038.42845.clone (reduce_sum.4738: f32[], reduce_sum.4739: f32[]) -> f32[] {
  %reduce_sum.4738 = f32[] parameter(0)
  %reduce_sum.4739 = f32[] parameter(1)
  ROOT %reduce_sum.4743 = f32[] add(%reduce_sum.4738, %reduce_sum.4739)
}

%region_2039.42854.clone (reduce_sum.4746: f32[], reduce_sum.4747: f32[]) -> f32[] {
  %reduce_sum.4746 = f32[] parameter(0)
  %reduce_sum.4747 = f32[] parameter(1)
  ROOT %reduce_sum.4748 = f32[] add(%reduce_sum.4746, %reduce_sum.4747)
}

%region_2040.42863.clone (reduce_sum.4752: f32[], reduce_sum.4755: f32[]) -> f32[] {
  %reduce_sum.4752 = f32[] parameter(0)
  %reduce_sum.4755 = f32[] parameter(1)
  ROOT %reduce_sum.4756 = f32[] add(%reduce_sum.4752, %reduce_sum.4755)
}

%region_2041.42872.clone (reduce_sum.4760: f32[], reduce_sum.4762: f32[]) -> f32[] {
  %reduce_sum.4760 = f32[] parameter(0)
  %reduce_sum.4762 = f32[] parameter(1)
  ROOT %reduce_sum.4763 = f32[] add(%reduce_sum.4760, %reduce_sum.4762)
}

%region_2042.42881.clone (reduce_sum.4764: f32[], reduce_sum.4765: f32[]) -> f32[] {
  %reduce_sum.4764 = f32[] parameter(0)
  %reduce_sum.4765 = f32[] parameter(1)
  ROOT %reduce_sum.4766 = f32[] add(%reduce_sum.4764, %reduce_sum.4765)
}

%region_2043.42890.clone (reduce_sum.4767: f32[], reduce_sum.4768: f32[]) -> f32[] {
  %reduce_sum.4767 = f32[] parameter(0)
  %reduce_sum.4768 = f32[] parameter(1)
  ROOT %reduce_sum.4769 = f32[] add(%reduce_sum.4767, %reduce_sum.4768)
}

%region_2044.42899.clone (reduce_sum.4773: f32[], reduce_sum.4775: f32[]) -> f32[] {
  %reduce_sum.4773 = f32[] parameter(0)
  %reduce_sum.4775 = f32[] parameter(1)
  ROOT %reduce_sum.4776 = f32[] add(%reduce_sum.4773, %reduce_sum.4775)
}

%region_2045.42908.clone (reduce_sum.4777: f32[], reduce_sum.4778: f32[]) -> f32[] {
  %reduce_sum.4777 = f32[] parameter(0)
  %reduce_sum.4778 = f32[] parameter(1)
  ROOT %reduce_sum.4779 = f32[] add(%reduce_sum.4777, %reduce_sum.4778)
}

%region_2048.42935.clone (reduce_sum.4780: f32[], reduce_sum.4781: f32[]) -> f32[] {
  %reduce_sum.4780 = f32[] parameter(0)
  %reduce_sum.4781 = f32[] parameter(1)
  ROOT %reduce_sum.4782 = f32[] add(%reduce_sum.4780, %reduce_sum.4781)
}

%region_2049.42944.clone (reduce_sum.4783: f32[], reduce_sum.4784: f32[]) -> f32[] {
  %reduce_sum.4783 = f32[] parameter(0)
  %reduce_sum.4784 = f32[] parameter(1)
  ROOT %reduce_sum.4785 = f32[] add(%reduce_sum.4783, %reduce_sum.4784)
}

%region_2050.42953.clone (reduce_sum.4786: f32[], reduce_sum.4787: f32[]) -> f32[] {
  %reduce_sum.4786 = f32[] parameter(0)
  %reduce_sum.4787 = f32[] parameter(1)
  ROOT %reduce_sum.4788 = f32[] add(%reduce_sum.4786, %reduce_sum.4787)
}

%region_2051.42962.clone (reduce_sum.4789: f32[], reduce_sum.4790: f32[]) -> f32[] {
  %reduce_sum.4789 = f32[] parameter(0)
  %reduce_sum.4790 = f32[] parameter(1)
  ROOT %reduce_sum.4791 = f32[] add(%reduce_sum.4789, %reduce_sum.4790)
}

%region_2052.42971.clone (reduce_sum.4792: f32[], reduce_sum.4793: f32[]) -> f32[] {
  %reduce_sum.4792 = f32[] parameter(0)
  %reduce_sum.4793 = f32[] parameter(1)
  ROOT %reduce_sum.4794 = f32[] add(%reduce_sum.4792, %reduce_sum.4793)
}

%region_2053.42980.clone (reduce_sum.4795: f32[], reduce_sum.4796: f32[]) -> f32[] {
  %reduce_sum.4795 = f32[] parameter(0)
  %reduce_sum.4796 = f32[] parameter(1)
  ROOT %reduce_sum.4797 = f32[] add(%reduce_sum.4795, %reduce_sum.4796)
}

%region_2054.42989.clone (reduce_sum.4798: f32[], reduce_sum.4799: f32[]) -> f32[] {
  %reduce_sum.4798 = f32[] parameter(0)
  %reduce_sum.4799 = f32[] parameter(1)
  ROOT %reduce_sum.4800 = f32[] add(%reduce_sum.4798, %reduce_sum.4799)
}

%region_2055.42998.clone (reduce_sum.4801: f32[], reduce_sum.4802: f32[]) -> f32[] {
  %reduce_sum.4801 = f32[] parameter(0)
  %reduce_sum.4802 = f32[] parameter(1)
  ROOT %reduce_sum.4803 = f32[] add(%reduce_sum.4801, %reduce_sum.4802)
}

%region_2058.43025.clone (reduce_sum.4804: f32[], reduce_sum.4805: f32[]) -> f32[] {
  %reduce_sum.4804 = f32[] parameter(0)
  %reduce_sum.4805 = f32[] parameter(1)
  ROOT %reduce_sum.4806 = f32[] add(%reduce_sum.4804, %reduce_sum.4805)
}

%region_2059.43034.clone (reduce_sum.4807: f32[], reduce_sum.4808: f32[]) -> f32[] {
  %reduce_sum.4807 = f32[] parameter(0)
  %reduce_sum.4808 = f32[] parameter(1)
  ROOT %reduce_sum.4809 = f32[] add(%reduce_sum.4807, %reduce_sum.4808)
}

%region_2060.43043.clone (reduce_sum.4810: f32[], reduce_sum.4811: f32[]) -> f32[] {
  %reduce_sum.4810 = f32[] parameter(0)
  %reduce_sum.4811 = f32[] parameter(1)
  ROOT %reduce_sum.4812 = f32[] add(%reduce_sum.4810, %reduce_sum.4811)
}

%region_2061.43052.clone (reduce_sum.4813: f32[], reduce_sum.4814: f32[]) -> f32[] {
  %reduce_sum.4813 = f32[] parameter(0)
  %reduce_sum.4814 = f32[] parameter(1)
  ROOT %reduce_sum.4818 = f32[] add(%reduce_sum.4813, %reduce_sum.4814)
}

%region_2062.43061.clone (reduce_sum.4820: f32[], reduce_sum.4821: f32[]) -> f32[] {
  %reduce_sum.4820 = f32[] parameter(0)
  %reduce_sum.4821 = f32[] parameter(1)
  ROOT %reduce_sum.4822 = f32[] add(%reduce_sum.4820, %reduce_sum.4821)
}

%region_2063.43070.clone (reduce_sum.4823: f32[], reduce_sum.4827: f32[]) -> f32[] {
  %reduce_sum.4823 = f32[] parameter(0)
  %reduce_sum.4827 = f32[] parameter(1)
  ROOT %reduce_sum.4829 = f32[] add(%reduce_sum.4823, %reduce_sum.4827)
}

%region_2064.43079.clone (reduce_sum.4830: f32[], reduce_sum.4831: f32[]) -> f32[] {
  %reduce_sum.4830 = f32[] parameter(0)
  %reduce_sum.4831 = f32[] parameter(1)
  ROOT %reduce_sum.4832 = f32[] add(%reduce_sum.4830, %reduce_sum.4831)
}

%region_2065.43088.clone (reduce_sum.4833: f32[], reduce_sum.4834: f32[]) -> f32[] {
  %reduce_sum.4833 = f32[] parameter(0)
  %reduce_sum.4834 = f32[] parameter(1)
  ROOT %reduce_sum.4838 = f32[] add(%reduce_sum.4833, %reduce_sum.4834)
}

%region_2068.43115.clone (reduce_sum.4840: f32[], reduce_sum.4841: f32[]) -> f32[] {
  %reduce_sum.4840 = f32[] parameter(0)
  %reduce_sum.4841 = f32[] parameter(1)
  ROOT %reduce_sum.4842 = f32[] add(%reduce_sum.4840, %reduce_sum.4841)
}

%region_2069.43124.clone (reduce_sum.4843: f32[], reduce_sum.4844: f32[]) -> f32[] {
  %reduce_sum.4843 = f32[] parameter(0)
  %reduce_sum.4844 = f32[] parameter(1)
  ROOT %reduce_sum.4845 = f32[] add(%reduce_sum.4843, %reduce_sum.4844)
}

%region_2070.43133.clone (reduce_sum.4846: f32[], reduce_sum.4847: f32[]) -> f32[] {
  %reduce_sum.4846 = f32[] parameter(0)
  %reduce_sum.4847 = f32[] parameter(1)
  ROOT %reduce_sum.4848 = f32[] add(%reduce_sum.4846, %reduce_sum.4847)
}

%region_2071.43142.clone (reduce_sum.4849: f32[], reduce_sum.4850: f32[]) -> f32[] {
  %reduce_sum.4849 = f32[] parameter(0)
  %reduce_sum.4850 = f32[] parameter(1)
  ROOT %reduce_sum.4851 = f32[] add(%reduce_sum.4849, %reduce_sum.4850)
}

%region_2072.43151.clone (reduce_sum.4852: f32[], reduce_sum.4853: f32[]) -> f32[] {
  %reduce_sum.4852 = f32[] parameter(0)
  %reduce_sum.4853 = f32[] parameter(1)
  ROOT %reduce_sum.4854 = f32[] add(%reduce_sum.4852, %reduce_sum.4853)
}

%region_2073.43160.clone (reduce_sum.4855: f32[], reduce_sum.4856: f32[]) -> f32[] {
  %reduce_sum.4855 = f32[] parameter(0)
  %reduce_sum.4856 = f32[] parameter(1)
  ROOT %reduce_sum.4857 = f32[] add(%reduce_sum.4855, %reduce_sum.4856)
}

%region_2074.43169.clone (reduce_sum.4858: f32[], reduce_sum.4859: f32[]) -> f32[] {
  %reduce_sum.4858 = f32[] parameter(0)
  %reduce_sum.4859 = f32[] parameter(1)
  ROOT %reduce_sum.4860 = f32[] add(%reduce_sum.4858, %reduce_sum.4859)
}

%region_2075.43178.clone (reduce_sum.4861: f32[], reduce_sum.4862: f32[]) -> f32[] {
  %reduce_sum.4861 = f32[] parameter(0)
  %reduce_sum.4862 = f32[] parameter(1)
  ROOT %reduce_sum.4868 = f32[] add(%reduce_sum.4861, %reduce_sum.4862)
}

%region_2078.43205.clone (reduce_sum.4870: f32[], reduce_sum.4871: f32[]) -> f32[] {
  %reduce_sum.4870 = f32[] parameter(0)
  %reduce_sum.4871 = f32[] parameter(1)
  ROOT %reduce_sum.4872 = f32[] add(%reduce_sum.4870, %reduce_sum.4871)
}

%region_2079.43214.clone (reduce_sum.4873: f32[], reduce_sum.4874: f32[]) -> f32[] {
  %reduce_sum.4873 = f32[] parameter(0)
  %reduce_sum.4874 = f32[] parameter(1)
  ROOT %reduce_sum.4878 = f32[] add(%reduce_sum.4873, %reduce_sum.4874)
}

%region_2080.43223.clone (reduce_sum.4880: f32[], reduce_sum.4881: f32[]) -> f32[] {
  %reduce_sum.4880 = f32[] parameter(0)
  %reduce_sum.4881 = f32[] parameter(1)
  ROOT %reduce_sum.4882 = f32[] add(%reduce_sum.4880, %reduce_sum.4881)
}

%region_2081.43232.clone (reduce_sum.4883: f32[], reduce_sum.4884: f32[]) -> f32[] {
  %reduce_sum.4883 = f32[] parameter(0)
  %reduce_sum.4884 = f32[] parameter(1)
  ROOT %reduce_sum.4885 = f32[] add(%reduce_sum.4883, %reduce_sum.4884)
}

%region_2082.43241.clone (reduce_sum.4886: f32[], reduce_sum.4887: f32[]) -> f32[] {
  %reduce_sum.4886 = f32[] parameter(0)
  %reduce_sum.4887 = f32[] parameter(1)
  ROOT %reduce_sum.4888 = f32[] add(%reduce_sum.4886, %reduce_sum.4887)
}

%region_2083.43250.clone (reduce_sum.4889: f32[], reduce_sum.4890: f32[]) -> f32[] {
  %reduce_sum.4889 = f32[] parameter(0)
  %reduce_sum.4890 = f32[] parameter(1)
  ROOT %reduce_sum.4891 = f32[] add(%reduce_sum.4889, %reduce_sum.4890)
}

%region_2084.43259.clone (reduce_sum.4892: f32[], reduce_sum.4893: f32[]) -> f32[] {
  %reduce_sum.4892 = f32[] parameter(0)
  %reduce_sum.4893 = f32[] parameter(1)
  ROOT %reduce_sum.4894 = f32[] add(%reduce_sum.4892, %reduce_sum.4893)
}

%region_2085.43268.clone (reduce_sum.4895: f32[], reduce_sum.4896: f32[]) -> f32[] {
  %reduce_sum.4895 = f32[] parameter(0)
  %reduce_sum.4896 = f32[] parameter(1)
  ROOT %reduce_sum.4897 = f32[] add(%reduce_sum.4895, %reduce_sum.4896)
}

%region_2088.43295.clone (reduce_sum.4898: f32[], reduce_sum.4899: f32[]) -> f32[] {
  %reduce_sum.4898 = f32[] parameter(0)
  %reduce_sum.4899 = f32[] parameter(1)
  ROOT %reduce_sum.4900 = f32[] add(%reduce_sum.4898, %reduce_sum.4899)
}

%region_2089.43304.clone (reduce_sum.4901: f32[], reduce_sum.4902: f32[]) -> f32[] {
  %reduce_sum.4901 = f32[] parameter(0)
  %reduce_sum.4902 = f32[] parameter(1)
  ROOT %reduce_sum.4903 = f32[] add(%reduce_sum.4901, %reduce_sum.4902)
}

%region_2090.43313.clone (reduce_sum.4904: f32[], reduce_sum.4905: f32[]) -> f32[] {
  %reduce_sum.4904 = f32[] parameter(0)
  %reduce_sum.4905 = f32[] parameter(1)
  ROOT %reduce_sum.4906 = f32[] add(%reduce_sum.4904, %reduce_sum.4905)
}

%region_2091.43322.clone (reduce_sum.4907: f32[], reduce_sum.4908: f32[]) -> f32[] {
  %reduce_sum.4907 = f32[] parameter(0)
  %reduce_sum.4908 = f32[] parameter(1)
  ROOT %reduce_sum.4909 = f32[] add(%reduce_sum.4907, %reduce_sum.4908)
}

%region_2092.43331.clone (reduce_sum.4910: f32[], reduce_sum.4911: f32[]) -> f32[] {
  %reduce_sum.4910 = f32[] parameter(0)
  %reduce_sum.4911 = f32[] parameter(1)
  ROOT %reduce_sum.4912 = f32[] add(%reduce_sum.4910, %reduce_sum.4911)
}

%region_2093.43340.clone (reduce_sum.4913: f32[], reduce_sum.4914: f32[]) -> f32[] {
  %reduce_sum.4913 = f32[] parameter(0)
  %reduce_sum.4914 = f32[] parameter(1)
  ROOT %reduce_sum.4915 = f32[] add(%reduce_sum.4913, %reduce_sum.4914)
}

%region_2094.43349.clone (reduce_sum.4916: f32[], reduce_sum.4920: f32[]) -> f32[] {
  %reduce_sum.4916 = f32[] parameter(0)
  %reduce_sum.4920 = f32[] parameter(1)
  ROOT %reduce_sum.4922 = f32[] add(%reduce_sum.4916, %reduce_sum.4920)
}

%region_2095.43358.clone (reduce_sum.4923: f32[], reduce_sum.4924: f32[]) -> f32[] {
  %reduce_sum.4923 = f32[] parameter(0)
  %reduce_sum.4924 = f32[] parameter(1)
  ROOT %reduce_sum.4925 = f32[] add(%reduce_sum.4923, %reduce_sum.4924)
}

%region_2098.43385.clone (reduce_sum.4926: f32[], reduce_sum.4927: f32[]) -> f32[] {
  %reduce_sum.4926 = f32[] parameter(0)
  %reduce_sum.4927 = f32[] parameter(1)
  ROOT %reduce_sum.4928 = f32[] add(%reduce_sum.4926, %reduce_sum.4927)
}

%region_2099.43394.clone (reduce_sum.4929: f32[], reduce_sum.4930: f32[]) -> f32[] {
  %reduce_sum.4929 = f32[] parameter(0)
  %reduce_sum.4930 = f32[] parameter(1)
  ROOT %reduce_sum.4931 = f32[] add(%reduce_sum.4929, %reduce_sum.4930)
}

%region_2100.43403.clone (reduce_sum.4932: f32[], reduce_sum.4933: f32[]) -> f32[] {
  %reduce_sum.4932 = f32[] parameter(0)
  %reduce_sum.4933 = f32[] parameter(1)
  ROOT %reduce_sum.4934 = f32[] add(%reduce_sum.4932, %reduce_sum.4933)
}

%region_2101.43412.clone (reduce_sum.4935: f32[], reduce_sum.4936: f32[]) -> f32[] {
  %reduce_sum.4935 = f32[] parameter(0)
  %reduce_sum.4936 = f32[] parameter(1)
  ROOT %reduce_sum.4937 = f32[] add(%reduce_sum.4935, %reduce_sum.4936)
}

%region_2102.43421.clone (reduce_sum.4938: f32[], reduce_sum.4939: f32[]) -> f32[] {
  %reduce_sum.4938 = f32[] parameter(0)
  %reduce_sum.4939 = f32[] parameter(1)
  ROOT %reduce_sum.4940 = f32[] add(%reduce_sum.4938, %reduce_sum.4939)
}

%region_2103.43430.clone (reduce_sum.4941: f32[], reduce_sum.4942: f32[]) -> f32[] {
  %reduce_sum.4941 = f32[] parameter(0)
  %reduce_sum.4942 = f32[] parameter(1)
  ROOT %reduce_sum.4943 = f32[] add(%reduce_sum.4941, %reduce_sum.4942)
}

%region_2104.43439.clone (reduce_sum.4944: f32[], reduce_sum.4945: f32[]) -> f32[] {
  %reduce_sum.4944 = f32[] parameter(0)
  %reduce_sum.4945 = f32[] parameter(1)
  ROOT %reduce_sum.4946 = f32[] add(%reduce_sum.4944, %reduce_sum.4945)
}

%region_2105.43448.clone (reduce_sum.4947: f32[], reduce_sum.4948: f32[]) -> f32[] {
  %reduce_sum.4947 = f32[] parameter(0)
  %reduce_sum.4948 = f32[] parameter(1)
  ROOT %reduce_sum.4949 = f32[] add(%reduce_sum.4947, %reduce_sum.4948)
}

%region_2108.43475.clone (reduce_sum.4950: f32[], reduce_sum.4951: f32[]) -> f32[] {
  %reduce_sum.4950 = f32[] parameter(0)
  %reduce_sum.4951 = f32[] parameter(1)
  ROOT %reduce_sum.4952 = f32[] add(%reduce_sum.4950, %reduce_sum.4951)
}

%region_2109.43484.clone (reduce_sum.4953: f32[], reduce_sum.4954: f32[]) -> f32[] {
  %reduce_sum.4953 = f32[] parameter(0)
  %reduce_sum.4954 = f32[] parameter(1)
  ROOT %reduce_sum.4955 = f32[] add(%reduce_sum.4953, %reduce_sum.4954)
}

%region_2110.43493.clone (reduce_sum.4956: f32[], reduce_sum.4957: f32[]) -> f32[] {
  %reduce_sum.4956 = f32[] parameter(0)
  %reduce_sum.4957 = f32[] parameter(1)
  ROOT %reduce_sum.4958 = f32[] add(%reduce_sum.4956, %reduce_sum.4957)
}

%region_2111.43502.clone (reduce_sum.4959: f32[], reduce_sum.4960: f32[]) -> f32[] {
  %reduce_sum.4959 = f32[] parameter(0)
  %reduce_sum.4960 = f32[] parameter(1)
  ROOT %reduce_sum.4961 = f32[] add(%reduce_sum.4959, %reduce_sum.4960)
}

%region_2112.43511.clone (reduce_sum.4962: f32[], reduce_sum.4963: f32[]) -> f32[] {
  %reduce_sum.4962 = f32[] parameter(0)
  %reduce_sum.4963 = f32[] parameter(1)
  ROOT %reduce_sum.4964 = f32[] add(%reduce_sum.4962, %reduce_sum.4963)
}

%region_2113.43520.clone (reduce_sum.4965: f32[], reduce_sum.4966: f32[]) -> f32[] {
  %reduce_sum.4965 = f32[] parameter(0)
  %reduce_sum.4966 = f32[] parameter(1)
  ROOT %reduce_sum.4967 = f32[] add(%reduce_sum.4965, %reduce_sum.4966)
}

%region_2114.43529.clone (reduce_sum.4968: f32[], reduce_sum.4969: f32[]) -> f32[] {
  %reduce_sum.4968 = f32[] parameter(0)
  %reduce_sum.4969 = f32[] parameter(1)
  ROOT %reduce_sum.4970 = f32[] add(%reduce_sum.4968, %reduce_sum.4969)
}

%region_2115.43538.clone (reduce_sum.4971: f32[], reduce_sum.4972: f32[]) -> f32[] {
  %reduce_sum.4971 = f32[] parameter(0)
  %reduce_sum.4972 = f32[] parameter(1)
  ROOT %reduce_sum.4973 = f32[] add(%reduce_sum.4971, %reduce_sum.4972)
}

%region_2118.43565.clone (reduce_sum.4974: f32[], reduce_sum.4975: f32[]) -> f32[] {
  %reduce_sum.4974 = f32[] parameter(0)
  %reduce_sum.4975 = f32[] parameter(1)
  ROOT %reduce_sum.4976 = f32[] add(%reduce_sum.4974, %reduce_sum.4975)
}

%region_2119.43574.clone (reduce_sum.4977: f32[], reduce_sum.4978: f32[]) -> f32[] {
  %reduce_sum.4977 = f32[] parameter(0)
  %reduce_sum.4978 = f32[] parameter(1)
  ROOT %reduce_sum.4979 = f32[] add(%reduce_sum.4977, %reduce_sum.4978)
}

%region_2120.43583.clone (reduce_sum.4980: f32[], reduce_sum.4981: f32[]) -> f32[] {
  %reduce_sum.4980 = f32[] parameter(0)
  %reduce_sum.4981 = f32[] parameter(1)
  ROOT %reduce_sum.4982 = f32[] add(%reduce_sum.4980, %reduce_sum.4981)
}

%region_2121.43592.clone (reduce_sum.4983: f32[], reduce_sum.4984: f32[]) -> f32[] {
  %reduce_sum.4983 = f32[] parameter(0)
  %reduce_sum.4984 = f32[] parameter(1)
  ROOT %reduce_sum.4985 = f32[] add(%reduce_sum.4983, %reduce_sum.4984)
}

%region_2122.43601.clone (reduce_sum.4986: f32[], reduce_sum.4987: f32[]) -> f32[] {
  %reduce_sum.4986 = f32[] parameter(0)
  %reduce_sum.4987 = f32[] parameter(1)
  ROOT %reduce_sum.4988 = f32[] add(%reduce_sum.4986, %reduce_sum.4987)
}

%region_2123.43610.clone (reduce_sum.4989: f32[], reduce_sum.4990: f32[]) -> f32[] {
  %reduce_sum.4989 = f32[] parameter(0)
  %reduce_sum.4990 = f32[] parameter(1)
  ROOT %reduce_sum.4991 = f32[] add(%reduce_sum.4989, %reduce_sum.4990)
}

%region_2124.43619.clone (reduce_sum.4992: f32[], reduce_sum.4993: f32[]) -> f32[] {
  %reduce_sum.4992 = f32[] parameter(0)
  %reduce_sum.4993 = f32[] parameter(1)
  ROOT %reduce_sum.4994 = f32[] add(%reduce_sum.4992, %reduce_sum.4993)
}

%region_2125.43628.clone (reduce_sum.4998: f32[], reduce_sum.5000: f32[]) -> f32[] {
  %reduce_sum.4998 = f32[] parameter(0)
  %reduce_sum.5000 = f32[] parameter(1)
  ROOT %reduce_sum.5001 = f32[] add(%reduce_sum.4998, %reduce_sum.5000)
}

%region_2128.43655.clone (reduce_sum.5002: f32[], reduce_sum.5006: f32[]) -> f32[] {
  %reduce_sum.5002 = f32[] parameter(0)
  %reduce_sum.5006 = f32[] parameter(1)
  ROOT %reduce_sum.5008 = f32[] add(%reduce_sum.5002, %reduce_sum.5006)
}

%region_2129.43664.clone (reduce_sum.5009: f32[], reduce_sum.5010: f32[]) -> f32[] {
  %reduce_sum.5009 = f32[] parameter(0)
  %reduce_sum.5010 = f32[] parameter(1)
  ROOT %reduce_sum.5014 = f32[] add(%reduce_sum.5009, %reduce_sum.5010)
}

%region_2130.43673.clone (reduce_sum.5017: f32[], reduce_sum.5018: f32[]) -> f32[] {
  %reduce_sum.5017 = f32[] parameter(0)
  %reduce_sum.5018 = f32[] parameter(1)
  ROOT %reduce_sum.5019 = f32[] add(%reduce_sum.5017, %reduce_sum.5018)
}

%region_2131.43682.clone (reduce_sum.5026: f32[], reduce_sum.5028: f32[]) -> f32[] {
  %reduce_sum.5026 = f32[] parameter(0)
  %reduce_sum.5028 = f32[] parameter(1)
  ROOT %reduce_sum.5029 = f32[] add(%reduce_sum.5026, %reduce_sum.5028)
}

%region_2132.43691.clone (reduce_sum.5030: f32[], reduce_sum.5031: f32[]) -> f32[] {
  %reduce_sum.5030 = f32[] parameter(0)
  %reduce_sum.5031 = f32[] parameter(1)
  ROOT %reduce_sum.5032 = f32[] add(%reduce_sum.5030, %reduce_sum.5031)
}

%region_2133.43700.clone (reduce_sum.5033: f32[], reduce_sum.5034: f32[]) -> f32[] {
  %reduce_sum.5033 = f32[] parameter(0)
  %reduce_sum.5034 = f32[] parameter(1)
  ROOT %reduce_sum.5035 = f32[] add(%reduce_sum.5033, %reduce_sum.5034)
}

%region_2134.43709.clone (reduce_sum.5036: f32[], reduce_sum.5037: f32[]) -> f32[] {
  %reduce_sum.5036 = f32[] parameter(0)
  %reduce_sum.5037 = f32[] parameter(1)
  ROOT %reduce_sum.5038 = f32[] add(%reduce_sum.5036, %reduce_sum.5037)
}

%region_2135.43718.clone (reduce_sum.5039: f32[], reduce_sum.5040: f32[]) -> f32[] {
  %reduce_sum.5039 = f32[] parameter(0)
  %reduce_sum.5040 = f32[] parameter(1)
  ROOT %reduce_sum.5044 = f32[] add(%reduce_sum.5039, %reduce_sum.5040)
}

%region_2138.43745.clone (reduce_sum.5046: f32[], reduce_sum.5047: f32[]) -> f32[] {
  %reduce_sum.5046 = f32[] parameter(0)
  %reduce_sum.5047 = f32[] parameter(1)
  ROOT %reduce_sum.5048 = f32[] add(%reduce_sum.5046, %reduce_sum.5047)
}

%region_2139.43754.clone (reduce_sum.5049: f32[], reduce_sum.5050: f32[]) -> f32[] {
  %reduce_sum.5049 = f32[] parameter(0)
  %reduce_sum.5050 = f32[] parameter(1)
  ROOT %reduce_sum.5051 = f32[] add(%reduce_sum.5049, %reduce_sum.5050)
}

%region_2140.43763.clone (reduce_sum.5052: f32[], reduce_sum.5053: f32[]) -> f32[] {
  %reduce_sum.5052 = f32[] parameter(0)
  %reduce_sum.5053 = f32[] parameter(1)
  ROOT %reduce_sum.5054 = f32[] add(%reduce_sum.5052, %reduce_sum.5053)
}

%region_2141.43772.clone (reduce_sum.5055: f32[], reduce_sum.5056: f32[]) -> f32[] {
  %reduce_sum.5055 = f32[] parameter(0)
  %reduce_sum.5056 = f32[] parameter(1)
  ROOT %reduce_sum.5057 = f32[] add(%reduce_sum.5055, %reduce_sum.5056)
}

%region_2142.43781.clone (reduce_sum.5058: f32[], reduce_sum.5059: f32[]) -> f32[] {
  %reduce_sum.5058 = f32[] parameter(0)
  %reduce_sum.5059 = f32[] parameter(1)
  ROOT %reduce_sum.5060 = f32[] add(%reduce_sum.5058, %reduce_sum.5059)
}

%region_2143.43790.clone (reduce_sum.5064: f32[], reduce_sum.5066: f32[]) -> f32[] {
  %reduce_sum.5064 = f32[] parameter(0)
  %reduce_sum.5066 = f32[] parameter(1)
  ROOT %reduce_sum.5067 = f32[] add(%reduce_sum.5064, %reduce_sum.5066)
}

%region_2144.43799.clone (reduce_sum.5068: f32[], reduce_sum.5069: f32[]) -> f32[] {
  %reduce_sum.5068 = f32[] parameter(0)
  %reduce_sum.5069 = f32[] parameter(1)
  ROOT %reduce_sum.5070 = f32[] add(%reduce_sum.5068, %reduce_sum.5069)
}

%region_2145.43808.clone (reduce_sum.5071: f32[], reduce_sum.5072: f32[]) -> f32[] {
  %reduce_sum.5071 = f32[] parameter(0)
  %reduce_sum.5072 = f32[] parameter(1)
  ROOT %reduce_sum.5073 = f32[] add(%reduce_sum.5071, %reduce_sum.5072)
}

%region_2148.43835.clone (reduce_sum.5074: f32[], reduce_sum.5075: f32[]) -> f32[] {
  %reduce_sum.5074 = f32[] parameter(0)
  %reduce_sum.5075 = f32[] parameter(1)
  ROOT %reduce_sum.5076 = f32[] add(%reduce_sum.5074, %reduce_sum.5075)
}

%region_2149.43844.clone (reduce_sum.5077: f32[], reduce_sum.5078: f32[]) -> f32[] {
  %reduce_sum.5077 = f32[] parameter(0)
  %reduce_sum.5078 = f32[] parameter(1)
  ROOT %reduce_sum.5079 = f32[] add(%reduce_sum.5077, %reduce_sum.5078)
}

%region_2150.43853.clone (reduce_sum.5080: f32[], reduce_sum.5081: f32[]) -> f32[] {
  %reduce_sum.5080 = f32[] parameter(0)
  %reduce_sum.5081 = f32[] parameter(1)
  ROOT %reduce_sum.5082 = f32[] add(%reduce_sum.5080, %reduce_sum.5081)
}

%region_2151.43862.clone (reduce_sum.5083: f32[], reduce_sum.5084: f32[]) -> f32[] {
  %reduce_sum.5083 = f32[] parameter(0)
  %reduce_sum.5084 = f32[] parameter(1)
  ROOT %reduce_sum.5085 = f32[] add(%reduce_sum.5083, %reduce_sum.5084)
}

%region_2152.43871.clone (reduce_sum.5086: f32[], reduce_sum.5087: f32[]) -> f32[] {
  %reduce_sum.5086 = f32[] parameter(0)
  %reduce_sum.5087 = f32[] parameter(1)
  ROOT %reduce_sum.5088 = f32[] add(%reduce_sum.5086, %reduce_sum.5087)
}

%region_2153.43880.clone (reduce_sum.5089: f32[], reduce_sum.5090: f32[]) -> f32[] {
  %reduce_sum.5089 = f32[] parameter(0)
  %reduce_sum.5090 = f32[] parameter(1)
  ROOT %reduce_sum.5091 = f32[] add(%reduce_sum.5089, %reduce_sum.5090)
}

%region_2154.43889.clone (reduce_sum.5092: f32[], reduce_sum.5093: f32[]) -> f32[] {
  %reduce_sum.5092 = f32[] parameter(0)
  %reduce_sum.5093 = f32[] parameter(1)
  ROOT %reduce_sum.5094 = f32[] add(%reduce_sum.5092, %reduce_sum.5093)
}

%region_2155.43898.clone (reduce_sum.5095: f32[], reduce_sum.5096: f32[]) -> f32[] {
  %reduce_sum.5095 = f32[] parameter(0)
  %reduce_sum.5096 = f32[] parameter(1)
  ROOT %reduce_sum.5097 = f32[] add(%reduce_sum.5095, %reduce_sum.5096)
}

%region_2158.43925.clone (reduce_sum.5098: f32[], reduce_sum.5099: f32[]) -> f32[] {
  %reduce_sum.5098 = f32[] parameter(0)
  %reduce_sum.5099 = f32[] parameter(1)
  ROOT %reduce_sum.5100 = f32[] add(%reduce_sum.5098, %reduce_sum.5099)
}

%region_2159.43934.clone (reduce_sum.5101: f32[], reduce_sum.5102: f32[]) -> f32[] {
  %reduce_sum.5101 = f32[] parameter(0)
  %reduce_sum.5102 = f32[] parameter(1)
  ROOT %reduce_sum.5103 = f32[] add(%reduce_sum.5101, %reduce_sum.5102)
}

%region_2160.43943.clone (reduce_sum.5104: f32[], reduce_sum.5105: f32[]) -> f32[] {
  %reduce_sum.5104 = f32[] parameter(0)
  %reduce_sum.5105 = f32[] parameter(1)
  ROOT %reduce_sum.5109 = f32[] add(%reduce_sum.5104, %reduce_sum.5105)
}

%region_2161.43952.clone (reduce_sum.5111: f32[], reduce_sum.5112: f32[]) -> f32[] {
  %reduce_sum.5111 = f32[] parameter(0)
  %reduce_sum.5112 = f32[] parameter(1)
  ROOT %reduce_sum.5113 = f32[] add(%reduce_sum.5111, %reduce_sum.5112)
}

%region_2162.43961.clone (reduce_sum.5114: f32[], reduce_sum.5115: f32[]) -> f32[] {
  %reduce_sum.5114 = f32[] parameter(0)
  %reduce_sum.5115 = f32[] parameter(1)
  ROOT %reduce_sum.5116 = f32[] add(%reduce_sum.5114, %reduce_sum.5115)
}

%region_2163.43970.clone (reduce_sum.5117: f32[], reduce_sum.5118: f32[]) -> f32[] {
  %reduce_sum.5117 = f32[] parameter(0)
  %reduce_sum.5118 = f32[] parameter(1)
  ROOT %reduce_sum.5122 = f32[] add(%reduce_sum.5117, %reduce_sum.5118)
}

%region_2164.43979.clone (reduce_sum.5124: f32[], reduce_sum.5125: f32[]) -> f32[] {
  %reduce_sum.5124 = f32[] parameter(0)
  %reduce_sum.5125 = f32[] parameter(1)
  ROOT %reduce_sum.5126 = f32[] add(%reduce_sum.5124, %reduce_sum.5125)
}

%region_2165.43988.clone (reduce_sum.5127: f32[], reduce_sum.5131: f32[]) -> f32[] {
  %reduce_sum.5127 = f32[] parameter(0)
  %reduce_sum.5131 = f32[] parameter(1)
  ROOT %reduce_sum.5133 = f32[] add(%reduce_sum.5127, %reduce_sum.5131)
}

%region_2168.44015.clone (reduce_sum.5134: f32[], reduce_sum.5135: f32[]) -> f32[] {
  %reduce_sum.5134 = f32[] parameter(0)
  %reduce_sum.5135 = f32[] parameter(1)
  ROOT %reduce_sum.5139 = f32[] add(%reduce_sum.5134, %reduce_sum.5135)
}

%region_2169.44024.clone (reduce_sum.5141: f32[], reduce_sum.5142: f32[]) -> f32[] {
  %reduce_sum.5141 = f32[] parameter(0)
  %reduce_sum.5142 = f32[] parameter(1)
  ROOT %reduce_sum.5143 = f32[] add(%reduce_sum.5141, %reduce_sum.5142)
}

%region_2170.44033.clone (reduce_sum.5144: f32[], reduce_sum.5145: f32[]) -> f32[] {
  %reduce_sum.5144 = f32[] parameter(0)
  %reduce_sum.5145 = f32[] parameter(1)
  ROOT %reduce_sum.5149 = f32[] add(%reduce_sum.5144, %reduce_sum.5145)
}

%region_2171.44042.clone (reduce_sum.5151: f32[], reduce_sum.5152: f32[]) -> f32[] {
  %reduce_sum.5151 = f32[] parameter(0)
  %reduce_sum.5152 = f32[] parameter(1)
  ROOT %reduce_sum.5153 = f32[] add(%reduce_sum.5151, %reduce_sum.5152)
}

%region_2172.44051.clone (reduce_sum.5154: f32[], reduce_sum.5155: f32[]) -> f32[] {
  %reduce_sum.5154 = f32[] parameter(0)
  %reduce_sum.5155 = f32[] parameter(1)
  ROOT %reduce_sum.5156 = f32[] add(%reduce_sum.5154, %reduce_sum.5155)
}

%region_2173.44060.clone (reduce_sum.5157: f32[], reduce_sum.5158: f32[]) -> f32[] {
  %reduce_sum.5157 = f32[] parameter(0)
  %reduce_sum.5158 = f32[] parameter(1)
  ROOT %reduce_sum.5159 = f32[] add(%reduce_sum.5157, %reduce_sum.5158)
}

%region_2174.44069.clone (reduce_sum.5160: f32[], reduce_sum.5161: f32[]) -> f32[] {
  %reduce_sum.5160 = f32[] parameter(0)
  %reduce_sum.5161 = f32[] parameter(1)
  ROOT %reduce_sum.5162 = f32[] add(%reduce_sum.5160, %reduce_sum.5161)
}

%region_2175.44078.clone (reduce_sum.5163: f32[], reduce_sum.5164: f32[]) -> f32[] {
  %reduce_sum.5163 = f32[] parameter(0)
  %reduce_sum.5164 = f32[] parameter(1)
  ROOT %reduce_sum.5165 = f32[] add(%reduce_sum.5163, %reduce_sum.5164)
}

%region_2178.44105.clone (reduce_sum.5166: f32[], reduce_sum.5170: f32[]) -> f32[] {
  %reduce_sum.5166 = f32[] parameter(0)
  %reduce_sum.5170 = f32[] parameter(1)
  ROOT %reduce_sum.5172 = f32[] add(%reduce_sum.5166, %reduce_sum.5170)
}

%region_2179.44114.clone (reduce_sum.5173: f32[], reduce_sum.5174: f32[]) -> f32[] {
  %reduce_sum.5173 = f32[] parameter(0)
  %reduce_sum.5174 = f32[] parameter(1)
  ROOT %reduce_sum.5175 = f32[] add(%reduce_sum.5173, %reduce_sum.5174)
}

%region_2180.44123.clone (reduce_sum.5176: f32[], reduce_sum.5177: f32[]) -> f32[] {
  %reduce_sum.5176 = f32[] parameter(0)
  %reduce_sum.5177 = f32[] parameter(1)
  ROOT %reduce_sum.5178 = f32[] add(%reduce_sum.5176, %reduce_sum.5177)
}

%region_2181.44132.clone (reduce_sum.5179: f32[], reduce_sum.5180: f32[]) -> f32[] {
  %reduce_sum.5179 = f32[] parameter(0)
  %reduce_sum.5180 = f32[] parameter(1)
  ROOT %reduce_sum.5181 = f32[] add(%reduce_sum.5179, %reduce_sum.5180)
}

%region_2182.44141.clone (reduce_sum.5182: f32[], reduce_sum.5183: f32[]) -> f32[] {
  %reduce_sum.5182 = f32[] parameter(0)
  %reduce_sum.5183 = f32[] parameter(1)
  ROOT %reduce_sum.5184 = f32[] add(%reduce_sum.5182, %reduce_sum.5183)
}

%region_2183.44150.clone (reduce_sum.5185: f32[], reduce_sum.5186: f32[]) -> f32[] {
  %reduce_sum.5185 = f32[] parameter(0)
  %reduce_sum.5186 = f32[] parameter(1)
  ROOT %reduce_sum.5187 = f32[] add(%reduce_sum.5185, %reduce_sum.5186)
}

%region_2184.44159.clone (reduce_sum.5191: f32[], reduce_sum.5193: f32[]) -> f32[] {
  %reduce_sum.5191 = f32[] parameter(0)
  %reduce_sum.5193 = f32[] parameter(1)
  ROOT %reduce_sum.5194 = f32[] add(%reduce_sum.5191, %reduce_sum.5193)
}

%region_2185.44168.clone (reduce_sum.5195: f32[], reduce_sum.5196: f32[]) -> f32[] {
  %reduce_sum.5195 = f32[] parameter(0)
  %reduce_sum.5196 = f32[] parameter(1)
  ROOT %reduce_sum.5197 = f32[] add(%reduce_sum.5195, %reduce_sum.5196)
}

%region_2188.44195.clone (reduce_sum.5198: f32[], reduce_sum.5199: f32[]) -> f32[] {
  %reduce_sum.5198 = f32[] parameter(0)
  %reduce_sum.5199 = f32[] parameter(1)
  ROOT %reduce_sum.5200 = f32[] add(%reduce_sum.5198, %reduce_sum.5199)
}

%region_2189.44204.clone (reduce_sum.5201: f32[], reduce_sum.5202: f32[]) -> f32[] {
  %reduce_sum.5201 = f32[] parameter(0)
  %reduce_sum.5202 = f32[] parameter(1)
  ROOT %reduce_sum.5203 = f32[] add(%reduce_sum.5201, %reduce_sum.5202)
}

%region_2190.44213.clone (reduce_sum.5204: f32[], reduce_sum.5205: f32[]) -> f32[] {
  %reduce_sum.5204 = f32[] parameter(0)
  %reduce_sum.5205 = f32[] parameter(1)
  ROOT %reduce_sum.5206 = f32[] add(%reduce_sum.5204, %reduce_sum.5205)
}

%region_2191.44222.clone (reduce_sum.5207: f32[], reduce_sum.5208: f32[]) -> f32[] {
  %reduce_sum.5207 = f32[] parameter(0)
  %reduce_sum.5208 = f32[] parameter(1)
  ROOT %reduce_sum.5209 = f32[] add(%reduce_sum.5207, %reduce_sum.5208)
}

%region_2192.44231.clone (reduce_sum.5210: f32[], reduce_sum.5211: f32[]) -> f32[] {
  %reduce_sum.5210 = f32[] parameter(0)
  %reduce_sum.5211 = f32[] parameter(1)
  ROOT %reduce_sum.5212 = f32[] add(%reduce_sum.5210, %reduce_sum.5211)
}

%region_2193.44240.clone (reduce_sum.5213: f32[], reduce_sum.5214: f32[]) -> f32[] {
  %reduce_sum.5213 = f32[] parameter(0)
  %reduce_sum.5214 = f32[] parameter(1)
  ROOT %reduce_sum.5215 = f32[] add(%reduce_sum.5213, %reduce_sum.5214)
}

%region_2194.44249.clone (reduce_sum.5216: f32[], reduce_sum.5217: f32[]) -> f32[] {
  %reduce_sum.5216 = f32[] parameter(0)
  %reduce_sum.5217 = f32[] parameter(1)
  ROOT %reduce_sum.5218 = f32[] add(%reduce_sum.5216, %reduce_sum.5217)
}

%region_2195.44258.clone (reduce_sum.5219: f32[], reduce_sum.5220: f32[]) -> f32[] {
  %reduce_sum.5219 = f32[] parameter(0)
  %reduce_sum.5220 = f32[] parameter(1)
  ROOT %reduce_sum.5221 = f32[] add(%reduce_sum.5219, %reduce_sum.5220)
}

%region_2198.44285.clone (reduce_sum.5222: f32[], reduce_sum.5223: f32[]) -> f32[] {
  %reduce_sum.5222 = f32[] parameter(0)
  %reduce_sum.5223 = f32[] parameter(1)
  ROOT %reduce_sum.5224 = f32[] add(%reduce_sum.5222, %reduce_sum.5223)
}

%region_2199.44294.clone (reduce_sum.5225: f32[], reduce_sum.5226: f32[]) -> f32[] {
  %reduce_sum.5225 = f32[] parameter(0)
  %reduce_sum.5226 = f32[] parameter(1)
  ROOT %reduce_sum.5227 = f32[] add(%reduce_sum.5225, %reduce_sum.5226)
}

%region_2200.44303.clone (reduce_sum.5228: f32[], reduce_sum.5229: f32[]) -> f32[] {
  %reduce_sum.5228 = f32[] parameter(0)
  %reduce_sum.5229 = f32[] parameter(1)
  ROOT %reduce_sum.5230 = f32[] add(%reduce_sum.5228, %reduce_sum.5229)
}

%region_2201.44312.clone (reduce_sum.5231: f32[], reduce_sum.5232: f32[]) -> f32[] {
  %reduce_sum.5231 = f32[] parameter(0)
  %reduce_sum.5232 = f32[] parameter(1)
  ROOT %reduce_sum.5233 = f32[] add(%reduce_sum.5231, %reduce_sum.5232)
}

%region_2202.44321.clone (reduce_sum.5234: f32[], reduce_sum.5235: f32[]) -> f32[] {
  %reduce_sum.5234 = f32[] parameter(0)
  %reduce_sum.5235 = f32[] parameter(1)
  ROOT %reduce_sum.5236 = f32[] add(%reduce_sum.5234, %reduce_sum.5235)
}

%region_2203.44330.clone (reduce_sum.5237: f32[], reduce_sum.5238: f32[]) -> f32[] {
  %reduce_sum.5237 = f32[] parameter(0)
  %reduce_sum.5238 = f32[] parameter(1)
  ROOT %reduce_sum.5239 = f32[] add(%reduce_sum.5237, %reduce_sum.5238)
}

%region_2204.44339.clone (reduce_sum.5240: f32[], reduce_sum.5241: f32[]) -> f32[] {
  %reduce_sum.5240 = f32[] parameter(0)
  %reduce_sum.5241 = f32[] parameter(1)
  ROOT %reduce_sum.5242 = f32[] add(%reduce_sum.5240, %reduce_sum.5241)
}

%region_2205.44348.clone (reduce_sum.5243: f32[], reduce_sum.5244: f32[]) -> f32[] {
  %reduce_sum.5243 = f32[] parameter(0)
  %reduce_sum.5244 = f32[] parameter(1)
  ROOT %reduce_sum.5245 = f32[] add(%reduce_sum.5243, %reduce_sum.5244)
}

%region_2208.44375.clone (reduce_sum.5246: f32[], reduce_sum.5247: f32[]) -> f32[] {
  %reduce_sum.5246 = f32[] parameter(0)
  %reduce_sum.5247 = f32[] parameter(1)
  ROOT %reduce_sum.5248 = f32[] add(%reduce_sum.5246, %reduce_sum.5247)
}

%region_2209.44384.clone (reduce_sum.5249: f32[], reduce_sum.5250: f32[]) -> f32[] {
  %reduce_sum.5249 = f32[] parameter(0)
  %reduce_sum.5250 = f32[] parameter(1)
  ROOT %reduce_sum.5251 = f32[] add(%reduce_sum.5249, %reduce_sum.5250)
}

%region_2210.44393.clone (reduce_sum.5252: f32[], reduce_sum.5253: f32[]) -> f32[] {
  %reduce_sum.5252 = f32[] parameter(0)
  %reduce_sum.5253 = f32[] parameter(1)
  ROOT %reduce_sum.5254 = f32[] add(%reduce_sum.5252, %reduce_sum.5253)
}

%region_2211.44402.clone (reduce_sum.5255: f32[], reduce_sum.5256: f32[]) -> f32[] {
  %reduce_sum.5255 = f32[] parameter(0)
  %reduce_sum.5256 = f32[] parameter(1)
  ROOT %reduce_sum.5257 = f32[] add(%reduce_sum.5255, %reduce_sum.5256)
}

%region_2212.44411.clone (reduce_sum.5258: f32[], reduce_sum.5259: f32[]) -> f32[] {
  %reduce_sum.5258 = f32[] parameter(0)
  %reduce_sum.5259 = f32[] parameter(1)
  ROOT %reduce_sum.5260 = f32[] add(%reduce_sum.5258, %reduce_sum.5259)
}

%region_2213.44420.clone (reduce_sum.5261: f32[], reduce_sum.5262: f32[]) -> f32[] {
  %reduce_sum.5261 = f32[] parameter(0)
  %reduce_sum.5262 = f32[] parameter(1)
  ROOT %reduce_sum.5263 = f32[] add(%reduce_sum.5261, %reduce_sum.5262)
}

%region_2214.44429.clone (reduce_sum.5264: f32[], reduce_sum.5265: f32[]) -> f32[] {
  %reduce_sum.5264 = f32[] parameter(0)
  %reduce_sum.5265 = f32[] parameter(1)
  ROOT %reduce_sum.5266 = f32[] add(%reduce_sum.5264, %reduce_sum.5265)
}

%region_2215.44438.clone (reduce_sum.5267: f32[], reduce_sum.5268: f32[]) -> f32[] {
  %reduce_sum.5267 = f32[] parameter(0)
  %reduce_sum.5268 = f32[] parameter(1)
  ROOT %reduce_sum.5269 = f32[] add(%reduce_sum.5267, %reduce_sum.5268)
}

%region_2218.44465.clone (reduce_sum.5270: f32[], reduce_sum.5271: f32[]) -> f32[] {
  %reduce_sum.5270 = f32[] parameter(0)
  %reduce_sum.5271 = f32[] parameter(1)
  ROOT %reduce_sum.5272 = f32[] add(%reduce_sum.5270, %reduce_sum.5271)
}

%region_2219.44474.clone (reduce_sum.5273: f32[], reduce_sum.5274: f32[]) -> f32[] {
  %reduce_sum.5273 = f32[] parameter(0)
  %reduce_sum.5274 = f32[] parameter(1)
  ROOT %reduce_sum.5275 = f32[] add(%reduce_sum.5273, %reduce_sum.5274)
}

%region_2220.44483.clone (reduce_sum.5276: f32[], reduce_sum.5277: f32[]) -> f32[] {
  %reduce_sum.5276 = f32[] parameter(0)
  %reduce_sum.5277 = f32[] parameter(1)
  ROOT %reduce_sum.5278 = f32[] add(%reduce_sum.5276, %reduce_sum.5277)
}

%region_2221.44492.clone (reduce_sum.5279: f32[], reduce_sum.5280: f32[]) -> f32[] {
  %reduce_sum.5279 = f32[] parameter(0)
  %reduce_sum.5280 = f32[] parameter(1)
  ROOT %reduce_sum.5281 = f32[] add(%reduce_sum.5279, %reduce_sum.5280)
}

%region_2222.44501.clone (reduce_sum.5285: f32[], reduce_sum.5288: f32[]) -> f32[] {
  %reduce_sum.5285 = f32[] parameter(0)
  %reduce_sum.5288 = f32[] parameter(1)
  ROOT %reduce_sum.5289 = f32[] add(%reduce_sum.5285, %reduce_sum.5288)
}

%region_2223.44510.clone (reduce_sum.5290: f32[], reduce_sum.5294: f32[]) -> f32[] {
  %reduce_sum.5290 = f32[] parameter(0)
  %reduce_sum.5294 = f32[] parameter(1)
  ROOT %reduce_sum.5297 = f32[] add(%reduce_sum.5290, %reduce_sum.5294)
}

%region_2224.44519.clone (reduce_sum.5298: f32[], reduce_sum.5302: f32[]) -> f32[] {
  %reduce_sum.5298 = f32[] parameter(0)
  %reduce_sum.5302 = f32[] parameter(1)
  ROOT %reduce_sum.5304 = f32[] add(%reduce_sum.5298, %reduce_sum.5302)
}

%region_2225.44528.clone (reduce_sum.5305: f32[], reduce_sum.5306: f32[]) -> f32[] {
  %reduce_sum.5305 = f32[] parameter(0)
  %reduce_sum.5306 = f32[] parameter(1)
  ROOT %reduce_sum.5310 = f32[] add(%reduce_sum.5305, %reduce_sum.5306)
}

%region_2228.44555.clone (reduce_sum.5315: f32[], reduce_sum.5317: f32[]) -> f32[] {
  %reduce_sum.5315 = f32[] parameter(0)
  %reduce_sum.5317 = f32[] parameter(1)
  ROOT %reduce_sum.5318 = f32[] add(%reduce_sum.5315, %reduce_sum.5317)
}

%region_2229.44564.clone (reduce_sum.5319: f32[], reduce_sum.5320: f32[]) -> f32[] {
  %reduce_sum.5319 = f32[] parameter(0)
  %reduce_sum.5320 = f32[] parameter(1)
  ROOT %reduce_sum.5321 = f32[] add(%reduce_sum.5319, %reduce_sum.5320)
}

%region_2230.44573.clone (reduce_sum.5322: f32[], reduce_sum.5323: f32[]) -> f32[] {
  %reduce_sum.5322 = f32[] parameter(0)
  %reduce_sum.5323 = f32[] parameter(1)
  ROOT %reduce_sum.5324 = f32[] add(%reduce_sum.5322, %reduce_sum.5323)
}

%region_2231.44582.clone (reduce_sum.5325: f32[], reduce_sum.5326: f32[]) -> f32[] {
  %reduce_sum.5325 = f32[] parameter(0)
  %reduce_sum.5326 = f32[] parameter(1)
  ROOT %reduce_sum.5330 = f32[] add(%reduce_sum.5325, %reduce_sum.5326)
}

%region_2232.44591.clone (reduce_sum.5332: f32[], reduce_sum.5333: f32[]) -> f32[] {
  %reduce_sum.5332 = f32[] parameter(0)
  %reduce_sum.5333 = f32[] parameter(1)
  ROOT %reduce_sum.5334 = f32[] add(%reduce_sum.5332, %reduce_sum.5333)
}

%region_2233.44600.clone (reduce_sum.5335: f32[], reduce_sum.5336: f32[]) -> f32[] {
  %reduce_sum.5335 = f32[] parameter(0)
  %reduce_sum.5336 = f32[] parameter(1)
  ROOT %reduce_sum.5337 = f32[] add(%reduce_sum.5335, %reduce_sum.5336)
}

%region_2234.44609.clone (reduce_sum.5338: f32[], reduce_sum.5339: f32[]) -> f32[] {
  %reduce_sum.5338 = f32[] parameter(0)
  %reduce_sum.5339 = f32[] parameter(1)
  ROOT %reduce_sum.5340 = f32[] add(%reduce_sum.5338, %reduce_sum.5339)
}

%region_2235.44618.clone (reduce_sum.5341: f32[], reduce_sum.5342: f32[]) -> f32[] {
  %reduce_sum.5341 = f32[] parameter(0)
  %reduce_sum.5342 = f32[] parameter(1)
  ROOT %reduce_sum.5343 = f32[] add(%reduce_sum.5341, %reduce_sum.5342)
}

%region_2238.44645.clone (reduce_sum.5344: f32[], reduce_sum.5345: f32[]) -> f32[] {
  %reduce_sum.5344 = f32[] parameter(0)
  %reduce_sum.5345 = f32[] parameter(1)
  ROOT %reduce_sum.5346 = f32[] add(%reduce_sum.5344, %reduce_sum.5345)
}

%region_2239.44654.clone (reduce_sum.5347: f32[], reduce_sum.5348: f32[]) -> f32[] {
  %reduce_sum.5347 = f32[] parameter(0)
  %reduce_sum.5348 = f32[] parameter(1)
  ROOT %reduce_sum.5349 = f32[] add(%reduce_sum.5347, %reduce_sum.5348)
}

%region_2240.44663.clone (reduce_sum.5350: f32[], reduce_sum.5351: f32[]) -> f32[] {
  %reduce_sum.5350 = f32[] parameter(0)
  %reduce_sum.5351 = f32[] parameter(1)
  ROOT %reduce_sum.5352 = f32[] add(%reduce_sum.5350, %reduce_sum.5351)
}

%region_2241.44672.clone (reduce_sum.5353: f32[], reduce_sum.5354: f32[]) -> f32[] {
  %reduce_sum.5353 = f32[] parameter(0)
  %reduce_sum.5354 = f32[] parameter(1)
  ROOT %reduce_sum.5355 = f32[] add(%reduce_sum.5353, %reduce_sum.5354)
}

%region_2242.44681.clone (reduce_sum.5356: f32[], reduce_sum.5357: f32[]) -> f32[] {
  %reduce_sum.5356 = f32[] parameter(0)
  %reduce_sum.5357 = f32[] parameter(1)
  ROOT %reduce_sum.5358 = f32[] add(%reduce_sum.5356, %reduce_sum.5357)
}

%region_2243.44690.clone (reduce_sum.5359: f32[], reduce_sum.5360: f32[]) -> f32[] {
  %reduce_sum.5359 = f32[] parameter(0)
  %reduce_sum.5360 = f32[] parameter(1)
  ROOT %reduce_sum.5361 = f32[] add(%reduce_sum.5359, %reduce_sum.5360)
}

%region_2244.44699.clone (reduce_sum.5362: f32[], reduce_sum.5363: f32[]) -> f32[] {
  %reduce_sum.5362 = f32[] parameter(0)
  %reduce_sum.5363 = f32[] parameter(1)
  ROOT %reduce_sum.5364 = f32[] add(%reduce_sum.5362, %reduce_sum.5363)
}

%region_2245.44708.clone (reduce_sum.5368: f32[], reduce_sum.5370: f32[]) -> f32[] {
  %reduce_sum.5368 = f32[] parameter(0)
  %reduce_sum.5370 = f32[] parameter(1)
  ROOT %reduce_sum.5371 = f32[] add(%reduce_sum.5368, %reduce_sum.5370)
}

%region_2248.44735.clone (reduce_sum.5372: f32[], reduce_sum.5373: f32[]) -> f32[] {
  %reduce_sum.5372 = f32[] parameter(0)
  %reduce_sum.5373 = f32[] parameter(1)
  ROOT %reduce_sum.5374 = f32[] add(%reduce_sum.5372, %reduce_sum.5373)
}

%region_2249.44744.clone (reduce_sum.5375: f32[], reduce_sum.5376: f32[]) -> f32[] {
  %reduce_sum.5375 = f32[] parameter(0)
  %reduce_sum.5376 = f32[] parameter(1)
  ROOT %reduce_sum.5380 = f32[] add(%reduce_sum.5375, %reduce_sum.5376)
}

%region_2250.44753.clone (reduce_sum.5382: f32[], reduce_sum.5383: f32[]) -> f32[] {
  %reduce_sum.5382 = f32[] parameter(0)
  %reduce_sum.5383 = f32[] parameter(1)
  ROOT %reduce_sum.5384 = f32[] add(%reduce_sum.5382, %reduce_sum.5383)
}

%region_2251.44762.clone (reduce_sum.5385: f32[], reduce_sum.5386: f32[]) -> f32[] {
  %reduce_sum.5385 = f32[] parameter(0)
  %reduce_sum.5386 = f32[] parameter(1)
  ROOT %reduce_sum.5387 = f32[] add(%reduce_sum.5385, %reduce_sum.5386)
}

%region_2252.44771.clone (reduce_sum.5388: f32[], reduce_sum.5389: f32[]) -> f32[] {
  %reduce_sum.5388 = f32[] parameter(0)
  %reduce_sum.5389 = f32[] parameter(1)
  ROOT %reduce_sum.5390 = f32[] add(%reduce_sum.5388, %reduce_sum.5389)
}

%region_2253.44780.clone (reduce_sum.5391: f32[], reduce_sum.5392: f32[]) -> f32[] {
  %reduce_sum.5391 = f32[] parameter(0)
  %reduce_sum.5392 = f32[] parameter(1)
  ROOT %reduce_sum.5393 = f32[] add(%reduce_sum.5391, %reduce_sum.5392)
}

%region_2254.44789.clone (reduce_sum.5394: f32[], reduce_sum.5395: f32[]) -> f32[] {
  %reduce_sum.5394 = f32[] parameter(0)
  %reduce_sum.5395 = f32[] parameter(1)
  ROOT %reduce_sum.5396 = f32[] add(%reduce_sum.5394, %reduce_sum.5395)
}

%region_2255.44798.clone (reduce_sum.5397: f32[], reduce_sum.5398: f32[]) -> f32[] {
  %reduce_sum.5397 = f32[] parameter(0)
  %reduce_sum.5398 = f32[] parameter(1)
  ROOT %reduce_sum.5399 = f32[] add(%reduce_sum.5397, %reduce_sum.5398)
}

%region_2258.44825.clone (reduce_sum.5400: f32[], reduce_sum.5401: f32[]) -> f32[] {
  %reduce_sum.5400 = f32[] parameter(0)
  %reduce_sum.5401 = f32[] parameter(1)
  ROOT %reduce_sum.5402 = f32[] add(%reduce_sum.5400, %reduce_sum.5401)
}

%region_2259.44834.clone (reduce_sum.5403: f32[], reduce_sum.5404: f32[]) -> f32[] {
  %reduce_sum.5403 = f32[] parameter(0)
  %reduce_sum.5404 = f32[] parameter(1)
  ROOT %reduce_sum.5405 = f32[] add(%reduce_sum.5403, %reduce_sum.5404)
}

%region_2260.44843.clone (reduce_sum.5406: f32[], reduce_sum.5410: f32[]) -> f32[] {
  %reduce_sum.5406 = f32[] parameter(0)
  %reduce_sum.5410 = f32[] parameter(1)
  ROOT %reduce_sum.5412 = f32[] add(%reduce_sum.5406, %reduce_sum.5410)
}

%region_2261.44852.clone (reduce_sum.5413: f32[], reduce_sum.5414: f32[]) -> f32[] {
  %reduce_sum.5413 = f32[] parameter(0)
  %reduce_sum.5414 = f32[] parameter(1)
  ROOT %reduce_sum.5415 = f32[] add(%reduce_sum.5413, %reduce_sum.5414)
}

%region_2262.44861.clone (reduce_sum.5416: f32[], reduce_sum.5420: f32[]) -> f32[] {
  %reduce_sum.5416 = f32[] parameter(0)
  %reduce_sum.5420 = f32[] parameter(1)
  ROOT %reduce_sum.5422 = f32[] add(%reduce_sum.5416, %reduce_sum.5420)
}

%region_2263.44870.clone (reduce_sum.5426: f32[], reduce_sum.5428: f32[]) -> f32[] {
  %reduce_sum.5426 = f32[] parameter(0)
  %reduce_sum.5428 = f32[] parameter(1)
  ROOT %reduce_sum.5429 = f32[] add(%reduce_sum.5426, %reduce_sum.5428)
}

%region_2264.44879.clone (reduce_sum.5430: f32[], reduce_sum.5431: f32[]) -> f32[] {
  %reduce_sum.5430 = f32[] parameter(0)
  %reduce_sum.5431 = f32[] parameter(1)
  ROOT %reduce_sum.5435 = f32[] add(%reduce_sum.5430, %reduce_sum.5431)
}

%region_2265.44888.clone (reduce_sum.5437: f32[], reduce_sum.5438: f32[]) -> f32[] {
  %reduce_sum.5437 = f32[] parameter(0)
  %reduce_sum.5438 = f32[] parameter(1)
  ROOT %reduce_sum.5439 = f32[] add(%reduce_sum.5437, %reduce_sum.5438)
}

%region_2268.44915.clone (reduce_sum.5440: f32[], reduce_sum.5441: f32[]) -> f32[] {
  %reduce_sum.5440 = f32[] parameter(0)
  %reduce_sum.5441 = f32[] parameter(1)
  ROOT %reduce_sum.5442 = f32[] add(%reduce_sum.5440, %reduce_sum.5441)
}

%region_2269.44924.clone (reduce_sum.5443: f32[], reduce_sum.5444: f32[]) -> f32[] {
  %reduce_sum.5443 = f32[] parameter(0)
  %reduce_sum.5444 = f32[] parameter(1)
  ROOT %reduce_sum.5445 = f32[] add(%reduce_sum.5443, %reduce_sum.5444)
}

%region_2270.44933.clone (reduce_sum.5446: f32[], reduce_sum.5447: f32[]) -> f32[] {
  %reduce_sum.5446 = f32[] parameter(0)
  %reduce_sum.5447 = f32[] parameter(1)
  ROOT %reduce_sum.5448 = f32[] add(%reduce_sum.5446, %reduce_sum.5447)
}

%region_2271.44942.clone (reduce_sum.5449: f32[], reduce_sum.5450: f32[]) -> f32[] {
  %reduce_sum.5449 = f32[] parameter(0)
  %reduce_sum.5450 = f32[] parameter(1)
  ROOT %reduce_sum.5451 = f32[] add(%reduce_sum.5449, %reduce_sum.5450)
}

%region_2272.44951.clone (reduce_sum.5452: f32[], reduce_sum.5453: f32[]) -> f32[] {
  %reduce_sum.5452 = f32[] parameter(0)
  %reduce_sum.5453 = f32[] parameter(1)
  ROOT %reduce_sum.5454 = f32[] add(%reduce_sum.5452, %reduce_sum.5453)
}

%region_2273.44960.clone (reduce_sum.5455: f32[], reduce_sum.5456: f32[]) -> f32[] {
  %reduce_sum.5455 = f32[] parameter(0)
  %reduce_sum.5456 = f32[] parameter(1)
  ROOT %reduce_sum.5457 = f32[] add(%reduce_sum.5455, %reduce_sum.5456)
}

%region_2274.44969.clone (reduce_sum.5458: f32[], reduce_sum.5462: f32[]) -> f32[] {
  %reduce_sum.5458 = f32[] parameter(0)
  %reduce_sum.5462 = f32[] parameter(1)
  ROOT %reduce_sum.5464 = f32[] add(%reduce_sum.5458, %reduce_sum.5462)
}

%region_2275.44978.clone (reduce_sum.5465: f32[], reduce_sum.5466: f32[]) -> f32[] {
  %reduce_sum.5465 = f32[] parameter(0)
  %reduce_sum.5466 = f32[] parameter(1)
  ROOT %reduce_sum.5467 = f32[] add(%reduce_sum.5465, %reduce_sum.5466)
}

%region_2278.45005.clone (reduce_sum.5468: f32[], reduce_sum.5469: f32[]) -> f32[] {
  %reduce_sum.5468 = f32[] parameter(0)
  %reduce_sum.5469 = f32[] parameter(1)
  ROOT %reduce_sum.5470 = f32[] add(%reduce_sum.5468, %reduce_sum.5469)
}

%region_2279.45014.clone (reduce_sum.5474: f32[], reduce_sum.5476: f32[]) -> f32[] {
  %reduce_sum.5474 = f32[] parameter(0)
  %reduce_sum.5476 = f32[] parameter(1)
  ROOT %reduce_sum.5477 = f32[] add(%reduce_sum.5474, %reduce_sum.5476)
}

%region_2280.45023.clone (reduce_sum.5478: f32[], reduce_sum.5479: f32[]) -> f32[] {
  %reduce_sum.5478 = f32[] parameter(0)
  %reduce_sum.5479 = f32[] parameter(1)
  ROOT %reduce_sum.5480 = f32[] add(%reduce_sum.5478, %reduce_sum.5479)
}

%region_2281.45032.clone (reduce_sum.5481: f32[], reduce_sum.5482: f32[]) -> f32[] {
  %reduce_sum.5481 = f32[] parameter(0)
  %reduce_sum.5482 = f32[] parameter(1)
  ROOT %reduce_sum.5483 = f32[] add(%reduce_sum.5481, %reduce_sum.5482)
}

%region_2282.45041.clone (reduce_sum.5484: f32[], reduce_sum.5485: f32[]) -> f32[] {
  %reduce_sum.5484 = f32[] parameter(0)
  %reduce_sum.5485 = f32[] parameter(1)
  ROOT %reduce_sum.5486 = f32[] add(%reduce_sum.5484, %reduce_sum.5485)
}

%region_2283.45050.clone (reduce_sum.5487: f32[], reduce_sum.5488: f32[]) -> f32[] {
  %reduce_sum.5487 = f32[] parameter(0)
  %reduce_sum.5488 = f32[] parameter(1)
  ROOT %reduce_sum.5489 = f32[] add(%reduce_sum.5487, %reduce_sum.5488)
}

%region_2284.45059.clone (reduce_sum.5490: f32[], reduce_sum.5491: f32[]) -> f32[] {
  %reduce_sum.5490 = f32[] parameter(0)
  %reduce_sum.5491 = f32[] parameter(1)
  ROOT %reduce_sum.5492 = f32[] add(%reduce_sum.5490, %reduce_sum.5491)
}

%region_2285.45068.clone (reduce_sum.5493: f32[], reduce_sum.5494: f32[]) -> f32[] {
  %reduce_sum.5493 = f32[] parameter(0)
  %reduce_sum.5494 = f32[] parameter(1)
  ROOT %reduce_sum.5495 = f32[] add(%reduce_sum.5493, %reduce_sum.5494)
}

%region_2288.45095.clone (reduce_sum.5496: f32[], reduce_sum.5497: f32[]) -> f32[] {
  %reduce_sum.5496 = f32[] parameter(0)
  %reduce_sum.5497 = f32[] parameter(1)
  ROOT %reduce_sum.5498 = f32[] add(%reduce_sum.5496, %reduce_sum.5497)
}

%region_2289.45104.clone (reduce_sum.5499: f32[], reduce_sum.5500: f32[]) -> f32[] {
  %reduce_sum.5499 = f32[] parameter(0)
  %reduce_sum.5500 = f32[] parameter(1)
  ROOT %reduce_sum.5501 = f32[] add(%reduce_sum.5499, %reduce_sum.5500)
}

%region_2290.45113.clone (reduce_sum.5502: f32[], reduce_sum.5503: f32[]) -> f32[] {
  %reduce_sum.5502 = f32[] parameter(0)
  %reduce_sum.5503 = f32[] parameter(1)
  ROOT %reduce_sum.5504 = f32[] add(%reduce_sum.5502, %reduce_sum.5503)
}

%region_2291.45122.clone (reduce_sum.5505: f32[], reduce_sum.5506: f32[]) -> f32[] {
  %reduce_sum.5505 = f32[] parameter(0)
  %reduce_sum.5506 = f32[] parameter(1)
  ROOT %reduce_sum.5507 = f32[] add(%reduce_sum.5505, %reduce_sum.5506)
}

%region_2292.45131.clone (reduce_sum.5508: f32[], reduce_sum.5509: f32[]) -> f32[] {
  %reduce_sum.5508 = f32[] parameter(0)
  %reduce_sum.5509 = f32[] parameter(1)
  ROOT %reduce_sum.5510 = f32[] add(%reduce_sum.5508, %reduce_sum.5509)
}

%region_2293.45140.clone (reduce_sum.5511: f32[], reduce_sum.5512: f32[]) -> f32[] {
  %reduce_sum.5511 = f32[] parameter(0)
  %reduce_sum.5512 = f32[] parameter(1)
  ROOT %reduce_sum.5513 = f32[] add(%reduce_sum.5511, %reduce_sum.5512)
}

%region_2294.45149.clone (reduce_sum.5514: f32[], reduce_sum.5515: f32[]) -> f32[] {
  %reduce_sum.5514 = f32[] parameter(0)
  %reduce_sum.5515 = f32[] parameter(1)
  ROOT %reduce_sum.5516 = f32[] add(%reduce_sum.5514, %reduce_sum.5515)
}

%region_2295.45158.clone (reduce_sum.5517: f32[], reduce_sum.5518: f32[]) -> f32[] {
  %reduce_sum.5517 = f32[] parameter(0)
  %reduce_sum.5518 = f32[] parameter(1)
  ROOT %reduce_sum.5519 = f32[] add(%reduce_sum.5517, %reduce_sum.5518)
}

%region_2298.45185.clone (reduce_sum.5520: f32[], reduce_sum.5521: f32[]) -> f32[] {
  %reduce_sum.5520 = f32[] parameter(0)
  %reduce_sum.5521 = f32[] parameter(1)
  ROOT %reduce_sum.5522 = f32[] add(%reduce_sum.5520, %reduce_sum.5521)
}

%region_2299.45194.clone (reduce_sum.5523: f32[], reduce_sum.5524: f32[]) -> f32[] {
  %reduce_sum.5523 = f32[] parameter(0)
  %reduce_sum.5524 = f32[] parameter(1)
  ROOT %reduce_sum.5525 = f32[] add(%reduce_sum.5523, %reduce_sum.5524)
}

%region_2300.45203.clone (reduce_sum.5526: f32[], reduce_sum.5527: f32[]) -> f32[] {
  %reduce_sum.5526 = f32[] parameter(0)
  %reduce_sum.5527 = f32[] parameter(1)
  ROOT %reduce_sum.5528 = f32[] add(%reduce_sum.5526, %reduce_sum.5527)
}

%region_2301.45212.clone (reduce_sum.5529: f32[], reduce_sum.5530: f32[]) -> f32[] {
  %reduce_sum.5529 = f32[] parameter(0)
  %reduce_sum.5530 = f32[] parameter(1)
  ROOT %reduce_sum.5531 = f32[] add(%reduce_sum.5529, %reduce_sum.5530)
}

%region_2302.45221.clone (reduce_sum.5532: f32[], reduce_sum.5533: f32[]) -> f32[] {
  %reduce_sum.5532 = f32[] parameter(0)
  %reduce_sum.5533 = f32[] parameter(1)
  ROOT %reduce_sum.5534 = f32[] add(%reduce_sum.5532, %reduce_sum.5533)
}

%region_2303.45230.clone (reduce_sum.5535: f32[], reduce_sum.5536: f32[]) -> f32[] {
  %reduce_sum.5535 = f32[] parameter(0)
  %reduce_sum.5536 = f32[] parameter(1)
  ROOT %reduce_sum.5537 = f32[] add(%reduce_sum.5535, %reduce_sum.5536)
}

%region_2304.45239.clone (reduce_sum.5538: f32[], reduce_sum.5539: f32[]) -> f32[] {
  %reduce_sum.5538 = f32[] parameter(0)
  %reduce_sum.5539 = f32[] parameter(1)
  ROOT %reduce_sum.5540 = f32[] add(%reduce_sum.5538, %reduce_sum.5539)
}

%region_2305.45248.clone (reduce_sum.5541: f32[], reduce_sum.5542: f32[]) -> f32[] {
  %reduce_sum.5541 = f32[] parameter(0)
  %reduce_sum.5542 = f32[] parameter(1)
  ROOT %reduce_sum.5543 = f32[] add(%reduce_sum.5541, %reduce_sum.5542)
}

%region_2308.45275.clone (reduce_sum.5544: f32[], reduce_sum.5545: f32[]) -> f32[] {
  %reduce_sum.5544 = f32[] parameter(0)
  %reduce_sum.5545 = f32[] parameter(1)
  ROOT %reduce_sum.5546 = f32[] add(%reduce_sum.5544, %reduce_sum.5545)
}

%region_2309.45284.clone (reduce_sum.5547: f32[], reduce_sum.5548: f32[]) -> f32[] {
  %reduce_sum.5547 = f32[] parameter(0)
  %reduce_sum.5548 = f32[] parameter(1)
  ROOT %reduce_sum.5549 = f32[] add(%reduce_sum.5547, %reduce_sum.5548)
}

%region_2310.45293.clone (reduce_sum.5550: f32[], reduce_sum.5551: f32[]) -> f32[] {
  %reduce_sum.5550 = f32[] parameter(0)
  %reduce_sum.5551 = f32[] parameter(1)
  ROOT %reduce_sum.5552 = f32[] add(%reduce_sum.5550, %reduce_sum.5551)
}

%region_2311.45302.clone (reduce_sum.5556: f32[], reduce_sum.5559: f32[]) -> f32[] {
  %reduce_sum.5556 = f32[] parameter(0)
  %reduce_sum.5559 = f32[] parameter(1)
  ROOT %reduce_sum.5560 = f32[] add(%reduce_sum.5556, %reduce_sum.5559)
}

%region_2312.45311.clone (reduce_sum.5561: f32[], reduce_sum.5565: f32[]) -> f32[] {
  %reduce_sum.5561 = f32[] parameter(0)
  %reduce_sum.5565 = f32[] parameter(1)
  ROOT %reduce_sum.5568 = f32[] add(%reduce_sum.5561, %reduce_sum.5565)
}

%region_2313.45320.clone (reduce_sum.5569: f32[], reduce_sum.5570: f32[]) -> f32[] {
  %reduce_sum.5569 = f32[] parameter(0)
  %reduce_sum.5570 = f32[] parameter(1)
  ROOT %reduce_sum.5571 = f32[] add(%reduce_sum.5569, %reduce_sum.5570)
}

%region_2314.45329.clone (reduce_sum.5572: f32[], reduce_sum.5573: f32[]) -> f32[] {
  %reduce_sum.5572 = f32[] parameter(0)
  %reduce_sum.5573 = f32[] parameter(1)
  ROOT %reduce_sum.5574 = f32[] add(%reduce_sum.5572, %reduce_sum.5573)
}

%region_2315.45338.clone (reduce_sum.5575: f32[], reduce_sum.5576: f32[]) -> f32[] {
  %reduce_sum.5575 = f32[] parameter(0)
  %reduce_sum.5576 = f32[] parameter(1)
  ROOT %reduce_sum.5577 = f32[] add(%reduce_sum.5575, %reduce_sum.5576)
}

%region_2318.45365.clone (reduce_sum.5578: f32[], reduce_sum.5579: f32[]) -> f32[] {
  %reduce_sum.5578 = f32[] parameter(0)
  %reduce_sum.5579 = f32[] parameter(1)
  ROOT %reduce_sum.5580 = f32[] add(%reduce_sum.5578, %reduce_sum.5579)
}

%region_2319.45374.clone (reduce_sum.5581: f32[], reduce_sum.5582: f32[]) -> f32[] {
  %reduce_sum.5581 = f32[] parameter(0)
  %reduce_sum.5582 = f32[] parameter(1)
  ROOT %reduce_sum.5586 = f32[] add(%reduce_sum.5581, %reduce_sum.5582)
}

%region_2320.45383.clone (reduce_sum.5588: f32[], reduce_sum.5589: f32[]) -> f32[] {
  %reduce_sum.5588 = f32[] parameter(0)
  %reduce_sum.5589 = f32[] parameter(1)
  ROOT %reduce_sum.5590 = f32[] add(%reduce_sum.5588, %reduce_sum.5589)
}

%region_2321.45392.clone (reduce_sum.5591: f32[], reduce_sum.5592: f32[]) -> f32[] {
  %reduce_sum.5591 = f32[] parameter(0)
  %reduce_sum.5592 = f32[] parameter(1)
  ROOT %reduce_sum.5593 = f32[] add(%reduce_sum.5591, %reduce_sum.5592)
}

%region_2322.45401.clone (reduce_sum.5594: f32[], reduce_sum.5595: f32[]) -> f32[] {
  %reduce_sum.5594 = f32[] parameter(0)
  %reduce_sum.5595 = f32[] parameter(1)
  ROOT %reduce_sum.5596 = f32[] add(%reduce_sum.5594, %reduce_sum.5595)
}

%region_2323.45410.clone (reduce_sum.5597: f32[], reduce_sum.5598: f32[]) -> f32[] {
  %reduce_sum.5597 = f32[] parameter(0)
  %reduce_sum.5598 = f32[] parameter(1)
  ROOT %reduce_sum.5599 = f32[] add(%reduce_sum.5597, %reduce_sum.5598)
}

ENTRY %main.46395_spmd (param: s32[], param.1: bf16[4096], param.13: bf16[512,8], param.14: bf16[1,4096,14336], param.15: bf16[1,4096,14336], param.16: bf16[1,14336,4096], param.12: bf16[4096], param.5: bf16[4096], param.8: bf16[512,8,128], param.11: bf16[32,128,512], param.6: bf16[512,32,128], param.9: bf16[512,8,128], param.23: bf16[512,8], param.24: bf16[1,4096,14336], param.25: bf16[1,4096,14336], param.26: bf16[1,14336,4096], param.22: bf16[4096], param.17: bf16[4096], param.19: bf16[512,8,128], param.21: bf16[32,128,512], param.18: bf16[512,32,128], param.20: bf16[512,8,128], param.113: bf16[512,8], param.114: bf16[1,4096,14336], param.115: bf16[1,4096,14336], param.116: bf16[1,14336,4096], param.112: bf16[4096], param.107: bf16[4096], param.109: bf16[512,8,128], param.111: bf16[32,128,512], param.108: bf16[512,32,128], param.110: bf16[512,8,128], param.123: bf16[512,8], param.124: bf16[1,4096,14336], param.125: bf16[1,4096,14336], param.126: bf16[1,14336,4096], param.122: bf16[4096], param.117: bf16[4096], param.119: bf16[512,8,128], param.121: bf16[32,128,512], param.118: bf16[512,32,128], param.120: bf16[512,8,128], param.133: bf16[512,8], param.134: bf16[1,4096,14336], param.135: bf16[1,4096,14336], param.136: bf16[1,14336,4096], param.132: bf16[4096], param.127: bf16[4096], param.129: bf16[512,8,128], param.131: bf16[32,128,512], param.128: bf16[512,32,128], param.130: bf16[512,8,128], param.143: bf16[512,8], param.144: bf16[1,4096,14336], param.145: bf16[1,4096,14336], param.146: bf16[1,14336,4096], param.142: bf16[4096], param.137: bf16[4096], param.139: bf16[512,8,128], param.141: bf16[32,128,512], param.138: bf16[512,32,128], param.140: bf16[512,8,128], param.153: bf16[512,8], param.154: bf16[1,4096,14336], param.155: bf16[1,4096,14336], param.156: bf16[1,14336,4096], param.152: bf16[4096], param.147: bf16[4096], param.149: bf16[512,8,128], param.151: bf16[32,128,512], param.148: bf16[512,32,128], param.150: bf16[512,8,128], param.163: bf16[512,8], param.164: bf16[1,4096,14336], param.165: bf16[1,4096,14336], param.166: bf16[1,14336,4096], param.162: bf16[4096], param.157: bf16[4096], param.159: bf16[512,8,128], param.161: bf16[32,128,512], param.158: bf16[512,32,128], param.160: bf16[512,8,128], param.173: bf16[512,8], param.174: bf16[1,4096,14336], param.175: bf16[1,4096,14336], param.176: bf16[1,14336,4096], param.172: bf16[4096], param.167: bf16[4096], param.169: bf16[512,8,128], param.171: bf16[32,128,512], param.168: bf16[512,32,128], param.170: bf16[512,8,128], param.183: bf16[512,8], param.184: bf16[1,4096,14336], param.185: bf16[1,4096,14336], param.186: bf16[1,14336,4096], param.182: bf16[4096], param.177: bf16[4096], param.179: bf16[512,8,128], param.181: bf16[32,128,512], param.178: bf16[512,32,128], param.180: bf16[512,8,128], param.193: bf16[512,8], param.194: bf16[1,4096,14336], param.195: bf16[1,4096,14336], param.196: bf16[1,14336,4096], param.192: bf16[4096], param.187: bf16[4096], param.189: bf16[512,8,128], param.191: bf16[32,128,512], param.188: bf16[512,32,128], param.190: bf16[512,8,128], param.203: bf16[512,8], param.204: bf16[1,4096,14336], param.205: bf16[1,4096,14336], param.206: bf16[1,14336,4096], param.202: bf16[4096], param.197: bf16[4096], param.199: bf16[512,8,128], param.201: bf16[32,128,512], param.198: bf16[512,32,128], param.200: bf16[512,8,128], param.33: bf16[512,8], param.34: bf16[1,4096,14336], param.35: bf16[1,4096,14336], param.36: bf16[1,14336,4096], param.32: bf16[4096], param.27: bf16[4096], param.29: bf16[512,8,128], param.31: bf16[32,128,512], param.28: bf16[512,32,128], param.30: bf16[512,8,128], param.213: bf16[512,8], param.214: bf16[1,4096,14336], param.215: bf16[1,4096,14336], param.216: bf16[1,14336,4096], param.212: bf16[4096], param.207: bf16[4096], param.209: bf16[512,8,128], param.211: bf16[32,128,512], param.208: bf16[512,32,128], param.210: bf16[512,8,128], param.223: bf16[512,8], param.224: bf16[1,4096,14336], param.225: bf16[1,4096,14336], param.226: bf16[1,14336,4096], param.222: bf16[4096], param.217: bf16[4096], param.219: bf16[512,8,128], param.221: bf16[32,128,512], param.218: bf16[512,32,128], param.220: bf16[512,8,128], param.233: bf16[512,8], param.234: bf16[1,4096,14336], param.235: bf16[1,4096,14336], param.236: bf16[1,14336,4096], param.232: bf16[4096], param.227: bf16[4096], param.229: bf16[512,8,128], param.231: bf16[32,128,512], param.228: bf16[512,32,128], param.230: bf16[512,8,128], param.243: bf16[512,8], param.244: bf16[1,4096,14336], param.245: bf16[1,4096,14336], param.246: bf16[1,14336,4096], param.242: bf16[4096], param.237: bf16[4096], param.239: bf16[512,8,128], param.241: bf16[32,128,512], param.238: bf16[512,32,128], param.240: bf16[512,8,128], param.253: bf16[512,8], param.254: bf16[1,4096,14336], param.255: bf16[1,4096,14336], param.256: bf16[1,14336,4096], param.252: bf16[4096], param.247: bf16[4096], param.249: bf16[512,8,128], param.251: bf16[32,128,512], param.248: bf16[512,32,128], param.250: bf16[512,8,128], param.263: bf16[512,8], param.264: bf16[1,4096,14336], param.265: bf16[1,4096,14336], param.266: bf16[1,14336,4096], param.262: bf16[4096], param.257: bf16[4096], param.259: bf16[512,8,128], param.261: bf16[32,128,512], param.258: bf16[512,32,128], param.260: bf16[512,8,128], param.273: bf16[512,8], param.274: bf16[1,4096,14336], param.275: bf16[1,4096,14336], param.276: bf16[1,14336,4096], param.272: bf16[4096], param.267: bf16[4096], param.269: bf16[512,8,128], param.271: bf16[32,128,512], param.268: bf16[512,32,128], param.270: bf16[512,8,128], param.283: bf16[512,8], param.284: bf16[1,4096,14336], param.285: bf16[1,4096,14336], param.286: bf16[1,14336,4096], param.282: bf16[4096], param.277: bf16[4096], param.279: bf16[512,8,128], param.281: bf16[32,128,512], param.278: bf16[512,32,128], param.280: bf16[512,8,128], param.293: bf16[512,8], param.294: bf16[1,4096,14336], param.295: bf16[1,4096,14336], param.296: bf16[1,14336,4096], param.292: bf16[4096], param.287: bf16[4096], param.289: bf16[512,8,128], param.291: bf16[32,128,512], param.288: bf16[512,32,128], param.290: bf16[512,8,128], param.303: bf16[512,8], param.304: bf16[1,4096,14336], param.305: bf16[1,4096,14336], param.306: bf16[1,14336,4096], param.302: bf16[4096], param.297: bf16[4096], param.299: bf16[512,8,128], param.301: bf16[32,128,512], param.298: bf16[512,32,128], param.300: bf16[512,8,128], param.43: bf16[512,8], param.44: bf16[1,4096,14336], param.45: bf16[1,4096,14336], param.46: bf16[1,14336,4096], param.42: bf16[4096], param.37: bf16[4096], param.39: bf16[512,8,128], param.41: bf16[32,128,512], param.38: bf16[512,32,128], param.40: bf16[512,8,128], param.313: bf16[512,8], param.314: bf16[1,4096,14336], param.315: bf16[1,4096,14336], param.316: bf16[1,14336,4096], param.312: bf16[4096], param.307: bf16[4096], param.309: bf16[512,8,128], param.311: bf16[32,128,512], param.308: bf16[512,32,128], param.310: bf16[512,8,128], param.323: bf16[512,8], param.324: bf16[1,4096,14336], param.325: bf16[1,4096,14336], param.326: bf16[1,14336,4096], param.322: bf16[4096], param.317: bf16[4096], param.319: bf16[512,8,128], param.321: bf16[32,128,512], param.318: bf16[512,32,128], param.320: bf16[512,8,128], param.53: bf16[512,8], param.54: bf16[1,4096,14336], param.55: bf16[1,4096,14336], param.56: bf16[1,14336,4096], param.52: bf16[4096], param.47: bf16[4096], param.49: bf16[512,8,128], param.51: bf16[32,128,512], param.48: bf16[512,32,128], param.50: bf16[512,8,128], param.63: bf16[512,8], param.64: bf16[1,4096,14336], param.65: bf16[1,4096,14336], param.66: bf16[1,14336,4096], param.62: bf16[4096], param.57: bf16[4096], param.59: bf16[512,8,128], param.61: bf16[32,128,512], param.58: bf16[512,32,128], param.60: bf16[512,8,128], param.73: bf16[512,8], param.74: bf16[1,4096,14336], param.75: bf16[1,4096,14336], param.76: bf16[1,14336,4096], param.72: bf16[4096], param.67: bf16[4096], param.69: bf16[512,8,128], param.71: bf16[32,128,512], param.68: bf16[512,32,128], param.70: bf16[512,8,128], param.83: bf16[512,8], param.84: bf16[1,4096,14336], param.85: bf16[1,4096,14336], param.86: bf16[1,14336,4096], param.82: bf16[4096], param.77: bf16[4096], param.79: bf16[512,8,128], param.81: bf16[32,128,512], param.78: bf16[512,32,128], param.80: bf16[512,8,128], param.93: bf16[512,8], param.94: bf16[1,4096,14336], param.95: bf16[1,4096,14336], param.96: bf16[1,14336,4096], param.92: bf16[4096], param.87: bf16[4096], param.89: bf16[512,8,128], param.91: bf16[32,128,512], param.88: bf16[512,32,128], param.90: bf16[512,8,128], param.103: bf16[512,8], param.104: bf16[1,4096,14336], param.105: bf16[1,4096,14336], param.106: bf16[1,14336,4096], param.102: bf16[4096], param.97: bf16[4096], param.99: bf16[512,8,128], param.101: bf16[32,128,512], param.98: bf16[512,32,128], param.100: bf16[512,8,128], param.328: bf16[512,32000], param.4: bf16[32000,512], param.331: s32[], param.330: bf16[4096], param.333: bf16[512,8], param.335: bf16[1,4096,14336], param.337: bf16[1,4096,14336], param.339: bf16[1,14336,4096], param.341: bf16[4096], param.343: bf16[4096], param.345: bf16[512,8,128], param.347: bf16[32,128,512], param.349: bf16[512,32,128], param.351: bf16[512,8,128], param.353: bf16[512,8], param.355: bf16[1,4096,14336], param.357: bf16[1,4096,14336], param.359: bf16[1,14336,4096], param.361: bf16[4096], param.363: bf16[4096], param.365: bf16[512,8,128], param.367: bf16[32,128,512], param.369: bf16[512,32,128], param.371: bf16[512,8,128], param.373: bf16[512,8], param.375: bf16[1,4096,14336], param.377: bf16[1,4096,14336], param.379: bf16[1,14336,4096], param.381: bf16[4096], param.383: bf16[4096], param.385: bf16[512,8,128], param.387: bf16[32,128,512], param.389: bf16[512,32,128], param.391: bf16[512,8,128], param.393: bf16[512,8], param.395: bf16[1,4096,14336], param.397: bf16[1,4096,14336], param.399: bf16[1,14336,4096], param.401: bf16[4096], param.403: bf16[4096], param.405: bf16[512,8,128], param.407: bf16[32,128,512], param.409: bf16[512,32,128], param.411: bf16[512,8,128], param.413: bf16[512,8], param.415: bf16[1,4096,14336], param.417: bf16[1,4096,14336], param.419: bf16[1,14336,4096], param.421: bf16[4096], param.423: bf16[4096], param.425: bf16[512,8,128], param.427: bf16[32,128,512], param.429: bf16[512,32,128], param.431: bf16[512,8,128], param.433: bf16[512,8], param.435: bf16[1,4096,14336], param.437: bf16[1,4096,14336], param.439: bf16[1,14336,4096], param.441: bf16[4096], param.443: bf16[4096], param.445: bf16[512,8,128], param.447: bf16[32,128,512], param.449: bf16[512,32,128], param.451: bf16[512,8,128], param.453: bf16[512,8], param.455: bf16[1,4096,14336], param.457: bf16[1,4096,14336], param.459: bf16[1,14336,4096], param.461: bf16[4096], param.463: bf16[4096], param.465: bf16[512,8,128], param.467: bf16[32,128,512], param.469: bf16[512,32,128], param.471: bf16[512,8,128], param.473: bf16[512,8], param.475: bf16[1,4096,14336], param.477: bf16[1,4096,14336], param.479: bf16[1,14336,4096], param.481: bf16[4096], param.483: bf16[4096], param.485: bf16[512,8,128], param.487: bf16[32,128,512], param.489: bf16[512,32,128], param.491: bf16[512,8,128], param.493: bf16[512,8], param.495: bf16[1,4096,14336], param.497: bf16[1,4096,14336], param.499: bf16[1,14336,4096], param.501: bf16[4096], param.503: bf16[4096], param.505: bf16[512,8,128], param.507: bf16[32,128,512], param.509: bf16[512,32,128], param.511: bf16[512,8,128], param.513: bf16[512,8], param.515: bf16[1,4096,14336], param.517: bf16[1,4096,14336], param.519: bf16[1,14336,4096], param.521: bf16[4096], param.523: bf16[4096], param.525: bf16[512,8,128], param.527: bf16[32,128,512], param.529: bf16[512,32,128], param.531: bf16[512,8,128], param.533: bf16[512,8], param.535: bf16[1,4096,14336], param.537: bf16[1,4096,14336], param.539: bf16[1,14336,4096], param.541: bf16[4096], param.543: bf16[4096], param.545: bf16[512,8,128], param.547: bf16[32,128,512], param.549: bf16[512,32,128], param.551: bf16[512,8,128], param.553: bf16[512,8], param.555: bf16[1,4096,14336], param.557: bf16[1,4096,14336], param.559: bf16[1,14336,4096], param.561: bf16[4096], param.563: bf16[4096], param.565: bf16[512,8,128], param.567: bf16[32,128,512], param.569: bf16[512,32,128], param.571: bf16[512,8,128], param.573: bf16[512,8], param.575: bf16[1,4096,14336], param.577: bf16[1,4096,14336], param.579: bf16[1,14336,4096], param.581: bf16[4096], param.583: bf16[4096], param.585: bf16[512,8,128], param.587: bf16[32,128,512], param.589: bf16[512,32,128], param.591: bf16[512,8,128], param.593: bf16[512,8], param.595: bf16[1,4096,14336], param.597: bf16[1,4096,14336], param.599: bf16[1,14336,4096], param.601: bf16[4096], param.603: bf16[4096], param.605: bf16[512,8,128], param.607: bf16[32,128,512], param.609: bf16[512,32,128], param.611: bf16[512,8,128], param.613: bf16[512,8], param.615: bf16[1,4096,14336], param.617: bf16[1,4096,14336], param.619: bf16[1,14336,4096], param.621: bf16[4096], param.623: bf16[4096], param.625: bf16[512,8,128], param.627: bf16[32,128,512], param.629: bf16[512,32,128], param.631: bf16[512,8,128], param.633: bf16[512,8], param.635: bf16[1,4096,14336], param.637: bf16[1,4096,14336], param.639: bf16[1,14336,4096], param.641: bf16[4096], param.643: bf16[4096], param.645: bf16[512,8,128], param.647: bf16[32,128,512], param.649: bf16[512,32,128], param.651: bf16[512,8,128], param.653: bf16[512,8], param.655: bf16[1,4096,14336], param.657: bf16[1,4096,14336], param.659: bf16[1,14336,4096], param.661: bf16[4096], param.663: bf16[4096], param.665: bf16[512,8,128], param.667: bf16[32,128,512], param.669: bf16[512,32,128], param.671: bf16[512,8,128], param.673: bf16[512,8], param.675: bf16[1,4096,14336], param.677: bf16[1,4096,14336], param.679: bf16[1,14336,4096], param.681: bf16[4096], param.683: bf16[4096], param.685: bf16[512,8,128], param.687: bf16[32,128,512], param.689: bf16[512,32,128], param.691: bf16[512,8,128], param.693: bf16[512,8], param.695: bf16[1,4096,14336], param.697: bf16[1,4096,14336], param.699: bf16[1,14336,4096], param.701: bf16[4096], param.703: bf16[4096], param.705: bf16[512,8,128], param.707: bf16[32,128,512], param.709: bf16[512,32,128], param.711: bf16[512,8,128], param.713: bf16[512,8], param.715: bf16[1,4096,14336], param.717: bf16[1,4096,14336], param.719: bf16[1,14336,4096], param.721: bf16[4096], param.723: bf16[4096], param.725: bf16[512,8,128], param.727: bf16[32,128,512], param.729: bf16[512,32,128], param.731: bf16[512,8,128], param.733: bf16[512,8], param.735: bf16[1,4096,14336], param.737: bf16[1,4096,14336], param.739: bf16[1,14336,4096], param.741: bf16[4096], param.743: bf16[4096], param.745: bf16[512,8,128], param.747: bf16[32,128,512], param.749: bf16[512,32,128], param.751: bf16[512,8,128], param.753: bf16[512,8], param.755: bf16[1,4096,14336], param.757: bf16[1,4096,14336], param.759: bf16[1,14336,4096], param.761: bf16[4096], param.763: bf16[4096], param.765: bf16[512,8,128], param.767: bf16[32,128,512], param.769: bf16[512,32,128], param.771: bf16[512,8,128], param.773: bf16[512,8], param.775: bf16[1,4096,14336], param.777: bf16[1,4096,14336], param.779: bf16[1,14336,4096], param.781: bf16[4096], param.783: bf16[4096], param.785: bf16[512,8,128], param.787: bf16[32,128,512], param.789: bf16[512,32,128], param.791: bf16[512,8,128], param.793: bf16[512,8], param.795: bf16[1,4096,14336], param.797: bf16[1,4096,14336], param.799: bf16[1,14336,4096], param.801: bf16[4096], param.803: bf16[4096], param.805: bf16[512,8,128], param.807: bf16[32,128,512], param.809: bf16[512,32,128], param.811: bf16[512,8,128], param.813: bf16[512,8], param.815: bf16[1,4096,14336], param.817: bf16[1,4096,14336], param.819: bf16[1,14336,4096], param.821: bf16[4096], param.823: bf16[4096], param.825: bf16[512,8,128], param.827: bf16[32,128,512], param.829: bf16[512,32,128], param.831: bf16[512,8,128], param.833: bf16[512,8], param.835: bf16[1,4096,14336], param.837: bf16[1,4096,14336], param.839: bf16[1,14336,4096], param.841: bf16[4096], param.843: bf16[4096], param.845: bf16[512,8,128], param.847: bf16[32,128,512], param.849: bf16[512,32,128], param.851: bf16[512,8,128], param.853: bf16[512,8], param.855: bf16[1,4096,14336], param.857: bf16[1,4096,14336], param.859: bf16[1,14336,4096], param.861: bf16[4096], param.863: bf16[4096], param.865: bf16[512,8,128], param.867: bf16[32,128,512], param.869: bf16[512,32,128], param.871: bf16[512,8,128], param.873: bf16[512,8], param.875: bf16[1,4096,14336], param.877: bf16[1,4096,14336], param.879: bf16[1,14336,4096], param.881: bf16[4096], param.883: bf16[4096], param.885: bf16[512,8,128], param.887: bf16[32,128,512], param.889: bf16[512,32,128], param.891: bf16[512,8,128], param.893: bf16[512,8], param.895: bf16[1,4096,14336], param.897: bf16[1,4096,14336], param.899: bf16[1,14336,4096], param.901: bf16[4096], param.903: bf16[4096], param.905: bf16[512,8,128], param.907: bf16[32,128,512], param.909: bf16[512,32,128], param.911: bf16[512,8,128], param.913: bf16[512,8], param.915: bf16[1,4096,14336], param.917: bf16[1,4096,14336], param.919: bf16[1,14336,4096], param.921: bf16[4096], param.923: bf16[4096], param.925: bf16[512,8,128], param.927: bf16[32,128,512], param.929: bf16[512,32,128], param.931: bf16[512,8,128], param.933: bf16[512,8], param.935: bf16[1,4096,14336], param.937: bf16[1,4096,14336], param.939: bf16[1,14336,4096], param.941: bf16[4096], param.943: bf16[4096], param.945: bf16[512,8,128], param.947: bf16[32,128,512], param.949: bf16[512,32,128], param.951: bf16[512,8,128], param.953: bf16[512,8], param.955: bf16[1,4096,14336], param.957: bf16[1,4096,14336], param.959: bf16[1,14336,4096], param.961: bf16[4096], param.963: bf16[4096], param.965: bf16[512,8,128], param.967: bf16[32,128,512], param.969: bf16[512,32,128], param.971: bf16[512,8,128], param.973: bf16[512,32000], param.975: bf16[32000,512], param.332: bf16[4096], param.334: bf16[512,8], param.336: bf16[1,4096,14336], param.338: bf16[1,4096,14336], param.340: bf16[1,14336,4096], param.342: bf16[4096], param.344: bf16[4096], param.346: bf16[512,8,128], param.348: bf16[32,128,512], param.350: bf16[512,32,128], param.352: bf16[512,8,128], param.354: bf16[512,8], param.356: bf16[1,4096,14336], param.358: bf16[1,4096,14336], param.360: bf16[1,14336,4096], param.362: bf16[4096], param.364: bf16[4096], param.366: bf16[512,8,128], param.368: bf16[32,128,512], param.370: bf16[512,32,128], param.372: bf16[512,8,128], param.374: bf16[512,8], param.376: bf16[1,4096,14336], param.378: bf16[1,4096,14336], param.380: bf16[1,14336,4096], param.382: bf16[4096], param.384: bf16[4096], param.386: bf16[512,8,128], param.388: bf16[32,128,512], param.390: bf16[512,32,128], param.392: bf16[512,8,128], param.394: bf16[512,8], param.396: bf16[1,4096,14336], param.398: bf16[1,4096,14336], param.400: bf16[1,14336,4096], param.402: bf16[4096], param.404: bf16[4096], param.406: bf16[512,8,128], param.408: bf16[32,128,512], param.410: bf16[512,32,128], param.412: bf16[512,8,128], param.414: bf16[512,8], param.416: bf16[1,4096,14336], param.418: bf16[1,4096,14336], param.420: bf16[1,14336,4096], param.422: bf16[4096], param.424: bf16[4096], param.426: bf16[512,8,128], param.428: bf16[32,128,512], param.430: bf16[512,32,128], param.432: bf16[512,8,128], param.434: bf16[512,8], param.436: bf16[1,4096,14336], param.438: bf16[1,4096,14336], param.440: bf16[1,14336,4096], param.442: bf16[4096], param.444: bf16[4096], param.446: bf16[512,8,128], param.448: bf16[32,128,512], param.450: bf16[512,32,128], param.452: bf16[512,8,128], param.454: bf16[512,8], param.456: bf16[1,4096,14336], param.458: bf16[1,4096,14336], param.460: bf16[1,14336,4096], param.462: bf16[4096], param.464: bf16[4096], param.466: bf16[512,8,128], param.468: bf16[32,128,512], param.470: bf16[512,32,128], param.472: bf16[512,8,128], param.474: bf16[512,8], param.476: bf16[1,4096,14336], param.478: bf16[1,4096,14336], param.480: bf16[1,14336,4096], param.482: bf16[4096], param.484: bf16[4096], param.486: bf16[512,8,128], param.488: bf16[32,128,512], param.490: bf16[512,32,128], param.492: bf16[512,8,128], param.494: bf16[512,8], param.496: bf16[1,4096,14336], param.498: bf16[1,4096,14336], param.500: bf16[1,14336,4096], param.502: bf16[4096], param.504: bf16[4096], param.506: bf16[512,8,128], param.508: bf16[32,128,512], param.510: bf16[512,32,128], param.512: bf16[512,8,128], param.514: bf16[512,8], param.516: bf16[1,4096,14336], param.518: bf16[1,4096,14336], param.520: bf16[1,14336,4096], param.522: bf16[4096], param.524: bf16[4096], param.526: bf16[512,8,128], param.528: bf16[32,128,512], param.530: bf16[512,32,128], param.532: bf16[512,8,128], param.534: bf16[512,8], param.536: bf16[1,4096,14336], param.538: bf16[1,4096,14336], param.540: bf16[1,14336,4096], param.542: bf16[4096], param.544: bf16[4096], param.546: bf16[512,8,128], param.548: bf16[32,128,512], param.550: bf16[512,32,128], param.552: bf16[512,8,128], param.554: bf16[512,8], param.556: bf16[1,4096,14336], param.558: bf16[1,4096,14336], param.560: bf16[1,14336,4096], param.562: bf16[4096], param.564: bf16[4096], param.566: bf16[512,8,128], param.568: bf16[32,128,512], param.570: bf16[512,32,128], param.572: bf16[512,8,128], param.574: bf16[512,8], param.576: bf16[1,4096,14336], param.578: bf16[1,4096,14336], param.580: bf16[1,14336,4096], param.582: bf16[4096], param.584: bf16[4096], param.586: bf16[512,8,128], param.588: bf16[32,128,512], param.590: bf16[512,32,128], param.592: bf16[512,8,128], param.594: bf16[512,8], param.596: bf16[1,4096,14336], param.598: bf16[1,4096,14336], param.600: bf16[1,14336,4096], param.602: bf16[4096], param.604: bf16[4096], param.606: bf16[512,8,128], param.608: bf16[32,128,512], param.610: bf16[512,32,128], param.612: bf16[512,8,128], param.614: bf16[512,8], param.616: bf16[1,4096,14336], param.618: bf16[1,4096,14336], param.620: bf16[1,14336,4096], param.622: bf16[4096], param.624: bf16[4096], param.626: bf16[512,8,128], param.628: bf16[32,128,512], param.630: bf16[512,32,128], param.632: bf16[512,8,128], param.634: bf16[512,8], param.636: bf16[1,4096,14336], param.638: bf16[1,4096,14336], param.640: bf16[1,14336,4096], param.642: bf16[4096], param.644: bf16[4096], param.646: bf16[512,8,128], param.648: bf16[32,128,512], param.650: bf16[512,32,128], param.652: bf16[512,8,128], param.654: bf16[512,8], param.656: bf16[1,4096,14336], param.658: bf16[1,4096,14336], param.660: bf16[1,14336,4096], param.662: bf16[4096], param.664: bf16[4096], param.666: bf16[512,8,128], param.668: bf16[32,128,512], param.670: bf16[512,32,128], param.672: bf16[512,8,128], param.674: bf16[512,8], param.676: bf16[1,4096,14336], param.678: bf16[1,4096,14336], param.680: bf16[1,14336,4096], param.682: bf16[4096], param.684: bf16[4096], param.686: bf16[512,8,128], param.688: bf16[32,128,512], param.690: bf16[512,32,128], param.692: bf16[512,8,128], param.694: bf16[512,8], param.696: bf16[1,4096,14336], param.698: bf16[1,4096,14336], param.700: bf16[1,14336,4096], param.702: bf16[4096], param.704: bf16[4096], param.706: bf16[512,8,128], param.708: bf16[32,128,512], param.710: bf16[512,32,128], param.712: bf16[512,8,128], param.714: bf16[512,8], param.716: bf16[1,4096,14336], param.718: bf16[1,4096,14336], param.720: bf16[1,14336,4096], param.722: bf16[4096], param.724: bf16[4096], param.726: bf16[512,8,128], param.728: bf16[32,128,512], param.730: bf16[512,32,128], param.732: bf16[512,8,128], param.734: bf16[512,8], param.736: bf16[1,4096,14336], param.738: bf16[1,4096,14336], param.740: bf16[1,14336,4096], param.742: bf16[4096], param.744: bf16[4096], param.746: bf16[512,8,128], param.748: bf16[32,128,512], param.750: bf16[512,32,128], param.752: bf16[512,8,128], param.754: bf16[512,8], param.756: bf16[1,4096,14336], param.758: bf16[1,4096,14336], param.760: bf16[1,14336,4096], param.762: bf16[4096], param.764: bf16[4096], param.766: bf16[512,8,128], param.768: bf16[32,128,512], param.770: bf16[512,32,128], param.772: bf16[512,8,128], param.774: bf16[512,8], param.776: bf16[1,4096,14336], param.778: bf16[1,4096,14336], param.780: bf16[1,14336,4096], param.782: bf16[4096], param.784: bf16[4096], param.786: bf16[512,8,128], param.788: bf16[32,128,512], param.790: bf16[512,32,128], param.792: bf16[512,8,128], param.794: bf16[512,8], param.796: bf16[1,4096,14336], param.798: bf16[1,4096,14336], param.800: bf16[1,14336,4096], param.802: bf16[4096], param.804: bf16[4096], param.806: bf16[512,8,128], param.808: bf16[32,128,512], param.810: bf16[512,32,128], param.812: bf16[512,8,128], param.814: bf16[512,8], param.816: bf16[1,4096,14336], param.818: bf16[1,4096,14336], param.820: bf16[1,14336,4096], param.822: bf16[4096], param.824: bf16[4096], param.826: bf16[512,8,128], param.828: bf16[32,128,512], param.830: bf16[512,32,128], param.832: bf16[512,8,128], param.834: bf16[512,8], param.836: bf16[1,4096,14336], param.838: bf16[1,4096,14336], param.840: bf16[1,14336,4096], param.842: bf16[4096], param.844: bf16[4096], param.846: bf16[512,8,128], param.848: bf16[32,128,512], param.850: bf16[512,32,128], param.852: bf16[512,8,128], param.854: bf16[512,8], param.856: bf16[1,4096,14336], param.858: bf16[1,4096,14336], param.860: bf16[1,14336,4096], param.862: bf16[4096], param.864: bf16[4096], param.866: bf16[512,8,128], param.868: bf16[32,128,512], param.870: bf16[512,32,128], param.872: bf16[512,8,128], param.874: bf16[512,8], param.876: bf16[1,4096,14336], param.878: bf16[1,4096,14336], param.880: bf16[1,14336,4096], param.882: bf16[4096], param.884: bf16[4096], param.886: bf16[512,8,128], param.888: bf16[32,128,512], param.890: bf16[512,32,128], param.892: bf16[512,8,128], param.894: bf16[512,8], param.896: bf16[1,4096,14336], param.898: bf16[1,4096,14336], param.900: bf16[1,14336,4096], param.902: bf16[4096], param.904: bf16[4096], param.906: bf16[512,8,128], param.908: bf16[32,128,512], param.910: bf16[512,32,128], param.912: bf16[512,8,128], param.914: bf16[512,8], param.916: bf16[1,4096,14336], param.918: bf16[1,4096,14336], param.920: bf16[1,14336,4096], param.922: bf16[4096], param.924: bf16[4096], param.926: bf16[512,8,128], param.928: bf16[32,128,512], param.930: bf16[512,32,128], param.932: bf16[512,8,128], param.934: bf16[512,8], param.936: bf16[1,4096,14336], param.938: bf16[1,4096,14336], param.940: bf16[1,14336,4096], param.942: bf16[4096], param.944: bf16[4096], param.946: bf16[512,8,128], param.948: bf16[32,128,512], param.950: bf16[512,32,128], param.952: bf16[512,8,128], param.954: bf16[512,8], param.956: bf16[1,4096,14336], param.958: bf16[1,4096,14336], param.960: bf16[1,14336,4096], param.962: bf16[4096], param.964: bf16[4096], param.966: bf16[512,8,128], param.968: bf16[32,128,512], param.970: bf16[512,32,128], param.972: bf16[512,8,128], param.974: bf16[512,32000], param.976: bf16[32000,512], param.2: s32[], param.3: s32[1,4096], param.7: s32[1,4096], param.10: s32[1,4096], param.329: s32[1,4096], param.327: s32[1,4096]) -> (s32[], bf16[4096], bf16[512,8], bf16[1,4096,14336], bf16[1,4096,14336], /*index=5*/bf16[1,14336,4096], bf16[4096], bf16[4096], bf16[512,8,128], bf16[32,128,512], /*index=10*/bf16[512,32,128], bf16[512,8,128], bf16[512,8], bf16[1,4096,14336], bf16[1,4096,14336], /*index=15*/bf16[1,14336,4096], bf16[4096], bf16[4096], bf16[512,8,128], bf16[32,128,512], /*index=20*/bf16[512,32,128], bf16[512,8,128], bf16[512,8], bf16[1,4096,14336], bf16[1,4096,14336], /*index=25*/bf16[1,14336,4096], bf16[4096], bf16[4096], bf16[512,8,128], bf16[32,128,512], /*index=30*/bf16[512,32,128], bf16[512,8,128], bf16[512,8], bf16[1,4096,14336], bf16[1,4096,14336], /*index=35*/bf16[1,14336,4096], bf16[4096], bf16[4096], bf16[512,8,128], bf16[32,128,512], /*index=40*/bf16[512,32,128], bf16[512,8,128], bf16[512,8], bf16[1,4096,14336], bf16[1,4096,14336], /*index=45*/bf16[1,14336,4096], bf16[4096], bf16[4096], bf16[512,8,128], bf16[32,128,512], /*index=50*/bf16[512,32,128], bf16[512,8,128], bf16[512,8], bf16[1,4096,14336], bf16[1,4096,14336], /*index=55*/bf16[1,14336,4096], bf16[4096], bf16[4096], bf16[512,8,128], bf16[32,128,512], /*index=60*/bf16[512,32,128], bf16[512,8,128], bf16[512,8], bf16[1,4096,14336], bf16[1,4096,14336], /*index=65*/bf16[1,14336,4096], bf16[4096], bf16[4096], bf16[512,8,128], bf16[32,128,512], /*index=70*/bf16[512,32,128], bf16[512,8,128], bf16[512,8], bf16[1,4096,14336], bf16[1,4096,14336], /*index=75*/bf16[1,14336,4096], bf16[4096], bf16[4096], bf16[512,8,128], bf16[32,128,512], /*index=80*/bf16[512,32,128], bf16[512,8,128], bf16[512,8], bf16[1,4096,14336], bf16[1,4096,14336], /*index=85*/bf16[1,14336,4096], bf16[4096], bf16[4096], bf16[512,8,128], bf16[32,128,512], /*index=90*/bf16[512,32,128], bf16[512,8,128], bf16[512,8], bf16[1,4096,14336], bf16[1,4096,14336], /*index=95*/bf16[1,14336,4096], bf16[4096], bf16[4096], bf16[512,8,128], bf16[32,128,512], /*index=100*/bf16[512,32,128], bf16[512,8,128], bf16[512,8], bf16[1,4096,14336], bf16[1,4096,14336], /*index=105*/bf16[1,14336,4096], bf16[4096], bf16[4096], bf16[512,8,128], bf16[32,128,512], /*index=110*/bf16[512,32,128], bf16[512,8,128], bf16[512,8], bf16[1,4096,14336], bf16[1,4096,14336], /*index=115*/bf16[1,14336,4096], bf16[4096], bf16[4096], bf16[512,8,128], bf16[32,128,512], /*index=120*/bf16[512,32,128], bf16[512,8,128], bf16[512,8], bf16[1,4096,14336], bf16[1,4096,14336], /*index=125*/bf16[1,14336,4096], bf16[4096], bf16[4096], bf16[512,8,128], bf16[32,128,512], /*index=130*/bf16[512,32,128], bf16[512,8,128], bf16[512,8], bf16[1,4096,14336], bf16[1,4096,14336], /*index=135*/bf16[1,14336,4096], bf16[4096], bf16[4096], bf16[512,8,128], bf16[32,128,512], /*index=140*/bf16[512,32,128], bf16[512,8,128], bf16[512,8], bf16[1,4096,14336], bf16[1,4096,14336], /*index=145*/bf16[1,14336,4096], bf16[4096], bf16[4096], bf16[512,8,128], bf16[32,128,512], /*index=150*/bf16[512,32,128], bf16[512,8,128], bf16[512,8], bf16[1,4096,14336], bf16[1,4096,14336], /*index=155*/bf16[1,14336,4096], bf16[4096], bf16[4096], bf16[512,8,128], bf16[32,128,512], /*index=160*/bf16[512,32,128], bf16[512,8,128], bf16[512,8], bf16[1,4096,14336], bf16[1,4096,14336], /*index=165*/bf16[1,14336,4096], bf16[4096], bf16[4096], bf16[512,8,128], bf16[32,128,512], /*index=170*/bf16[512,32,128], bf16[512,8,128], bf16[512,8], bf16[1,4096,14336], bf16[1,4096,14336], /*index=175*/bf16[1,14336,4096], bf16[4096], bf16[4096], bf16[512,8,128], bf16[32,128,512], /*index=180*/bf16[512,32,128], bf16[512,8,128], bf16[512,8], bf16[1,4096,14336], bf16[1,4096,14336], /*index=185*/bf16[1,14336,4096], bf16[4096], bf16[4096], bf16[512,8,128], bf16[32,128,512], /*index=190*/bf16[512,32,128], bf16[512,8,128], bf16[512,8], bf16[1,4096,14336], bf16[1,4096,14336], /*index=195*/bf16[1,14336,4096], bf16[4096], bf16[4096], bf16[512,8,128], bf16[32,128,512], /*index=200*/bf16[512,32,128], bf16[512,8,128], bf16[512,8], bf16[1,4096,14336], bf16[1,4096,14336], /*index=205*/bf16[1,14336,4096], bf16[4096], bf16[4096], bf16[512,8,128], bf16[32,128,512], /*index=210*/bf16[512,32,128], bf16[512,8,128], bf16[512,8], bf16[1,4096,14336], bf16[1,4096,14336], /*index=215*/bf16[1,14336,4096], bf16[4096], bf16[4096], bf16[512,8,128], bf16[32,128,512], /*index=220*/bf16[512,32,128], bf16[512,8,128], bf16[512,8], bf16[1,4096,14336], bf16[1,4096,14336], /*index=225*/bf16[1,14336,4096], bf16[4096], bf16[4096], bf16[512,8,128], bf16[32,128,512], /*index=230*/bf16[512,32,128], bf16[512,8,128], bf16[512,8], bf16[1,4096,14336], bf16[1,4096,14336], /*index=235*/bf16[1,14336,4096], bf16[4096], bf16[4096], bf16[512,8,128], bf16[32,128,512], /*index=240*/bf16[512,32,128], bf16[512,8,128], bf16[512,8], bf16[1,4096,14336], bf16[1,4096,14336], /*index=245*/bf16[1,14336,4096], bf16[4096], bf16[4096], bf16[512,8,128], bf16[32,128,512], /*index=250*/bf16[512,32,128], bf16[512,8,128], bf16[512,8], bf16[1,4096,14336], bf16[1,4096,14336], /*index=255*/bf16[1,14336,4096], bf16[4096], bf16[4096], bf16[512,8,128], bf16[32,128,512], /*index=260*/bf16[512,32,128], bf16[512,8,128], bf16[512,8], bf16[1,4096,14336], bf16[1,4096,14336], /*index=265*/bf16[1,14336,4096], bf16[4096], bf16[4096], bf16[512,8,128], bf16[32,128,512], /*index=270*/bf16[512,32,128], bf16[512,8,128], bf16[512,8], bf16[1,4096,14336], bf16[1,4096,14336], /*index=275*/bf16[1,14336,4096], bf16[4096], bf16[4096], bf16[512,8,128], bf16[32,128,512], /*index=280*/bf16[512,32,128], bf16[512,8,128], bf16[512,8], bf16[1,4096,14336], bf16[1,4096,14336], /*index=285*/bf16[1,14336,4096], bf16[4096], bf16[4096], bf16[512,8,128], bf16[32,128,512], /*index=290*/bf16[512,32,128], bf16[512,8,128], bf16[512,8], bf16[1,4096,14336], bf16[1,4096,14336], /*index=295*/bf16[1,14336,4096], bf16[4096], bf16[4096], bf16[512,8,128], bf16[32,128,512], /*index=300*/bf16[512,32,128], bf16[512,8,128], bf16[512,8], bf16[1,4096,14336], bf16[1,4096,14336], /*index=305*/bf16[1,14336,4096], bf16[4096], bf16[4096], bf16[512,8,128], bf16[32,128,512], /*index=310*/bf16[512,32,128], bf16[512,8,128], bf16[512,8], bf16[1,4096,14336], bf16[1,4096,14336], /*index=315*/bf16[1,14336,4096], bf16[4096], bf16[4096], bf16[512,8,128], bf16[32,128,512], /*index=320*/bf16[512,32,128], bf16[512,8,128], bf16[512,32000], bf16[32000,512], s32[], /*index=325*/bf16[4096], bf16[512,8], bf16[1,4096,14336], bf16[1,4096,14336], bf16[1,14336,4096], /*index=330*/bf16[4096], bf16[4096], bf16[512,8,128], bf16[32,128,512], bf16[512,32,128], /*index=335*/bf16[512,8,128], bf16[512,8], bf16[1,4096,14336], bf16[1,4096,14336], bf16[1,14336,4096], /*index=340*/bf16[4096], bf16[4096], bf16[512,8,128], bf16[32,128,512], bf16[512,32,128], /*index=345*/bf16[512,8,128], bf16[512,8], bf16[1,4096,14336], bf16[1,4096,14336], bf16[1,14336,4096], /*index=350*/bf16[4096], bf16[4096], bf16[512,8,128], bf16[32,128,512], bf16[512,32,128], /*index=355*/bf16[512,8,128], bf16[512,8], bf16[1,4096,14336], bf16[1,4096,14336], bf16[1,14336,4096], /*index=360*/bf16[4096], bf16[4096], bf16[512,8,128], bf16[32,128,512], bf16[512,32,128], /*index=365*/bf16[512,8,128], bf16[512,8], bf16[1,4096,14336], bf16[1,4096,14336], bf16[1,14336,4096], /*index=370*/bf16[4096], bf16[4096], bf16[512,8,128], bf16[32,128,512], bf16[512,32,128], /*index=375*/bf16[512,8,128], bf16[512,8], bf16[1,4096,14336], bf16[1,4096,14336], bf16[1,14336,4096], /*index=380*/bf16[4096], bf16[4096], bf16[512,8,128], bf16[32,128,512], bf16[512,32,128], /*index=385*/bf16[512,8,128], bf16[512,8], bf16[1,4096,14336], bf16[1,4096,14336], bf16[1,14336,4096], /*index=390*/bf16[4096], bf16[4096], bf16[512,8,128], bf16[32,128,512], bf16[512,32,128], /*index=395*/bf16[512,8,128], bf16[512,8], bf16[1,4096,14336], bf16[1,4096,14336], bf16[1,14336,4096], /*index=400*/bf16[4096], bf16[4096], bf16[512,8,128], bf16[32,128,512], bf16[512,32,128], /*index=405*/bf16[512,8,128], bf16[512,8], bf16[1,4096,14336], bf16[1,4096,14336], bf16[1,14336,4096], /*index=410*/bf16[4096], bf16[4096], bf16[512,8,128], bf16[32,128,512], bf16[512,32,128], /*index=415*/bf16[512,8,128], bf16[512,8], bf16[1,4096,14336], bf16[1,4096,14336], bf16[1,14336,4096], /*index=420*/bf16[4096], bf16[4096], bf16[512,8,128], bf16[32,128,512], bf16[512,32,128], /*index=425*/bf16[512,8,128], bf16[512,8], bf16[1,4096,14336], bf16[1,4096,14336], bf16[1,14336,4096], /*index=430*/bf16[4096], bf16[4096], bf16[512,8,128], bf16[32,128,512], bf16[512,32,128], /*index=435*/bf16[512,8,128], bf16[512,8], bf16[1,4096,14336], bf16[1,4096,14336], bf16[1,14336,4096], /*index=440*/bf16[4096], bf16[4096], bf16[512,8,128], bf16[32,128,512], bf16[512,32,128], /*index=445*/bf16[512,8,128], bf16[512,8], bf16[1,4096,14336], bf16[1,4096,14336], bf16[1,14336,4096], /*index=450*/bf16[4096], bf16[4096], bf16[512,8,128], bf16[32,128,512], bf16[512,32,128], /*index=455*/bf16[512,8,128], bf16[512,8], bf16[1,4096,14336], bf16[1,4096,14336], bf16[1,14336,4096], /*index=460*/bf16[4096], bf16[4096], bf16[512,8,128], bf16[32,128,512], bf16[512,32,128], /*index=465*/bf16[512,8,128], bf16[512,8], bf16[1,4096,14336], bf16[1,4096,14336], bf16[1,14336,4096], /*index=470*/bf16[4096], bf16[4096], bf16[512,8,128], bf16[32,128,512], bf16[512,32,128], /*index=475*/bf16[512,8,128], bf16[512,8], bf16[1,4096,14336], bf16[1,4096,14336], bf16[1,14336,4096], /*index=480*/bf16[4096], bf16[4096], bf16[512,8,128], bf16[32,128,512], bf16[512,32,128], /*index=485*/bf16[512,8,128], bf16[512,8], bf16[1,4096,14336], bf16[1,4096,14336], bf16[1,14336,4096], /*index=490*/bf16[4096], bf16[4096], bf16[512,8,128], bf16[32,128,512], bf16[512,32,128], /*index=495*/bf16[512,8,128], bf16[512,8], bf16[1,4096,14336], bf16[1,4096,14336], bf16[1,14336,4096], /*index=500*/bf16[4096], bf16[4096], bf16[512,8,128], bf16[32,128,512], bf16[512,32,128], /*index=505*/bf16[512,8,128], bf16[512,8], bf16[1,4096,14336], bf16[1,4096,14336], bf16[1,14336,4096], /*index=510*/bf16[4096], bf16[4096], bf16[512,8,128], bf16[32,128,512], bf16[512,32,128], /*index=515*/bf16[512,8,128], bf16[512,8], bf16[1,4096,14336], bf16[1,4096,14336], bf16[1,14336,4096], /*index=520*/bf16[4096], bf16[4096], bf16[512,8,128], bf16[32,128,512], bf16[512,32,128], /*index=525*/bf16[512,8,128], bf16[512,8], bf16[1,4096,14336], bf16[1,4096,14336], bf16[1,14336,4096], /*index=530*/bf16[4096], bf16[4096], bf16[512,8,128], bf16[32,128,512], bf16[512,32,128], /*index=535*/bf16[512,8,128], bf16[512,8], bf16[1,4096,14336], bf16[1,4096,14336], bf16[1,14336,4096], /*index=540*/bf16[4096], bf16[4096], bf16[512,8,128], bf16[32,128,512], bf16[512,32,128], /*index=545*/bf16[512,8,128], bf16[512,8], bf16[1,4096,14336], bf16[1,4096,14336], bf16[1,14336,4096], /*index=550*/bf16[4096], bf16[4096], bf16[512,8,128], bf16[32,128,512], bf16[512,32,128], /*index=555*/bf16[512,8,128], bf16[512,8], bf16[1,4096,14336], bf16[1,4096,14336], bf16[1,14336,4096], /*index=560*/bf16[4096], bf16[4096], bf16[512,8,128], bf16[32,128,512], bf16[512,32,128], /*index=565*/bf16[512,8,128], bf16[512,8], bf16[1,4096,14336], bf16[1,4096,14336], bf16[1,14336,4096], /*index=570*/bf16[4096], bf16[4096], bf16[512,8,128], bf16[32,128,512], bf16[512,32,128], /*index=575*/bf16[512,8,128], bf16[512,8], bf16[1,4096,14336], bf16[1,4096,14336], bf16[1,14336,4096], /*index=580*/bf16[4096], bf16[4096], bf16[512,8,128], bf16[32,128,512], bf16[512,32,128], /*index=585*/bf16[512,8,128], bf16[512,8], bf16[1,4096,14336], bf16[1,4096,14336], bf16[1,14336,4096], /*index=590*/bf16[4096], bf16[4096], bf16[512,8,128], bf16[32,128,512], bf16[512,32,128], /*index=595*/bf16[512,8,128], bf16[512,8], bf16[1,4096,14336], bf16[1,4096,14336], bf16[1,14336,4096], /*index=600*/bf16[4096], bf16[4096], bf16[512,8,128], bf16[32,128,512], bf16[512,32,128], /*index=605*/bf16[512,8,128], bf16[512,8], bf16[1,4096,14336], bf16[1,4096,14336], bf16[1,14336,4096], /*index=610*/bf16[4096], bf16[4096], bf16[512,8,128], bf16[32,128,512], bf16[512,32,128], /*index=615*/bf16[512,8,128], bf16[512,8], bf16[1,4096,14336], bf16[1,4096,14336], bf16[1,14336,4096], /*index=620*/bf16[4096], bf16[4096], bf16[512,8,128], bf16[32,128,512], bf16[512,32,128], /*index=625*/bf16[512,8,128], bf16[512,8], bf16[1,4096,14336], bf16[1,4096,14336], bf16[1,14336,4096], /*index=630*/bf16[4096], bf16[4096], bf16[512,8,128], bf16[32,128,512], bf16[512,32,128], /*index=635*/bf16[512,8,128], bf16[512,8], bf16[1,4096,14336], bf16[1,4096,14336], bf16[1,14336,4096], /*index=640*/bf16[4096], bf16[4096], bf16[512,8,128], bf16[32,128,512], bf16[512,32,128], /*index=645*/bf16[512,8,128], bf16[512,32000], bf16[32000,512], bf16[4096], bf16[512,8], /*index=650*/bf16[1,4096,14336], bf16[1,4096,14336], bf16[1,14336,4096], bf16[4096], bf16[4096], /*index=655*/bf16[512,8,128], bf16[32,128,512], bf16[512,32,128], bf16[512,8,128], bf16[512,8], /*index=660*/bf16[1,4096,14336], bf16[1,4096,14336], bf16[1,14336,4096], bf16[4096], bf16[4096], /*index=665*/bf16[512,8,128], bf16[32,128,512], bf16[512,32,128], bf16[512,8,128], bf16[512,8], /*index=670*/bf16[1,4096,14336], bf16[1,4096,14336], bf16[1,14336,4096], bf16[4096], bf16[4096], /*index=675*/bf16[512,8,128], bf16[32,128,512], bf16[512,32,128], bf16[512,8,128], bf16[512,8], /*index=680*/bf16[1,4096,14336], bf16[1,4096,14336], bf16[1,14336,4096], bf16[4096], bf16[4096], /*index=685*/bf16[512,8,128], bf16[32,128,512], bf16[512,32,128], bf16[512,8,128], bf16[512,8], /*index=690*/bf16[1,4096,14336], bf16[1,4096,14336], bf16[1,14336,4096], bf16[4096], bf16[4096], /*index=695*/bf16[512,8,128], bf16[32,128,512], bf16[512,32,128], bf16[512,8,128], bf16[512,8], /*index=700*/bf16[1,4096,14336], bf16[1,4096,14336], bf16[1,14336,4096], bf16[4096], bf16[4096], /*index=705*/bf16[512,8,128], bf16[32,128,512], bf16[512,32,128], bf16[512,8,128], bf16[512,8], /*index=710*/bf16[1,4096,14336], bf16[1,4096,14336], bf16[1,14336,4096], bf16[4096], bf16[4096], /*index=715*/bf16[512,8,128], bf16[32,128,512], bf16[512,32,128], bf16[512,8,128], bf16[512,8], /*index=720*/bf16[1,4096,14336], bf16[1,4096,14336], bf16[1,14336,4096], bf16[4096], bf16[4096], /*index=725*/bf16[512,8,128], bf16[32,128,512], bf16[512,32,128], bf16[512,8,128], bf16[512,8], /*index=730*/bf16[1,4096,14336], bf16[1,4096,14336], bf16[1,14336,4096], bf16[4096], bf16[4096], /*index=735*/bf16[512,8,128], bf16[32,128,512], bf16[512,32,128], bf16[512,8,128], bf16[512,8], /*index=740*/bf16[1,4096,14336], bf16[1,4096,14336], bf16[1,14336,4096], bf16[4096], bf16[4096], /*index=745*/bf16[512,8,128], bf16[32,128,512], bf16[512,32,128], bf16[512,8,128], bf16[512,8], /*index=750*/bf16[1,4096,14336], bf16[1,4096,14336], bf16[1,14336,4096], bf16[4096], bf16[4096], /*index=755*/bf16[512,8,128], bf16[32,128,512], bf16[512,32,128], bf16[512,8,128], bf16[512,8], /*index=760*/bf16[1,4096,14336], bf16[1,4096,14336], bf16[1,14336,4096], bf16[4096], bf16[4096], /*index=765*/bf16[512,8,128], bf16[32,128,512], bf16[512,32,128], bf16[512,8,128], bf16[512,8], /*index=770*/bf16[1,4096,14336], bf16[1,4096,14336], bf16[1,14336,4096], bf16[4096], bf16[4096], /*index=775*/bf16[512,8,128], bf16[32,128,512], bf16[512,32,128], bf16[512,8,128], bf16[512,8], /*index=780*/bf16[1,4096,14336], bf16[1,4096,14336], bf16[1,14336,4096], bf16[4096], bf16[4096], /*index=785*/bf16[512,8,128], bf16[32,128,512], bf16[512,32,128], bf16[512,8,128], bf16[512,8], /*index=790*/bf16[1,4096,14336], bf16[1,4096,14336], bf16[1,14336,4096], bf16[4096], bf16[4096], /*index=795*/bf16[512,8,128], bf16[32,128,512], bf16[512,32,128], bf16[512,8,128], bf16[512,8], /*index=800*/bf16[1,4096,14336], bf16[1,4096,14336], bf16[1,14336,4096], bf16[4096], bf16[4096], /*index=805*/bf16[512,8,128], bf16[32,128,512], bf16[512,32,128], bf16[512,8,128], bf16[512,8], /*index=810*/bf16[1,4096,14336], bf16[1,4096,14336], bf16[1,14336,4096], bf16[4096], bf16[4096], /*index=815*/bf16[512,8,128], bf16[32,128,512], bf16[512,32,128], bf16[512,8,128], bf16[512,8], /*index=820*/bf16[1,4096,14336], bf16[1,4096,14336], bf16[1,14336,4096], bf16[4096], bf16[4096], /*index=825*/bf16[512,8,128], bf16[32,128,512], bf16[512,32,128], bf16[512,8,128], bf16[512,8], /*index=830*/bf16[1,4096,14336], bf16[1,4096,14336], bf16[1,14336,4096], bf16[4096], bf16[4096], /*index=835*/bf16[512,8,128], bf16[32,128,512], bf16[512,32,128], bf16[512,8,128], bf16[512,8], /*index=840*/bf16[1,4096,14336], bf16[1,4096,14336], bf16[1,14336,4096], bf16[4096], bf16[4096], /*index=845*/bf16[512,8,128], bf16[32,128,512], bf16[512,32,128], bf16[512,8,128], bf16[512,8], /*index=850*/bf16[1,4096,14336], bf16[1,4096,14336], bf16[1,14336,4096], bf16[4096], bf16[4096], /*index=855*/bf16[512,8,128], bf16[32,128,512], bf16[512,32,128], bf16[512,8,128], bf16[512,8], /*index=860*/bf16[1,4096,14336], bf16[1,4096,14336], bf16[1,14336,4096], bf16[4096], bf16[4096], /*index=865*/bf16[512,8,128], bf16[32,128,512], bf16[512,32,128], bf16[512,8,128], bf16[512,8], /*index=870*/bf16[1,4096,14336], bf16[1,4096,14336], bf16[1,14336,4096], bf16[4096], bf16[4096], /*index=875*/bf16[512,8,128], bf16[32,128,512], bf16[512,32,128], bf16[512,8,128], bf16[512,8], /*index=880*/bf16[1,4096,14336], bf16[1,4096,14336], bf16[1,14336,4096], bf16[4096], bf16[4096], /*index=885*/bf16[512,8,128], bf16[32,128,512], bf16[512,32,128], bf16[512,8,128], bf16[512,8], /*index=890*/bf16[1,4096,14336], bf16[1,4096,14336], bf16[1,14336,4096], bf16[4096], bf16[4096], /*index=895*/bf16[512,8,128], bf16[32,128,512], bf16[512,32,128], bf16[512,8,128], bf16[512,8], /*index=900*/bf16[1,4096,14336], bf16[1,4096,14336], bf16[1,14336,4096], bf16[4096], bf16[4096], /*index=905*/bf16[512,8,128], bf16[32,128,512], bf16[512,32,128], bf16[512,8,128], bf16[512,8], /*index=910*/bf16[1,4096,14336], bf16[1,4096,14336], bf16[1,14336,4096], bf16[4096], bf16[4096], /*index=915*/bf16[512,8,128], bf16[32,128,512], bf16[512,32,128], bf16[512,8,128], bf16[512,8], /*index=920*/bf16[1,4096,14336], bf16[1,4096,14336], bf16[1,14336,4096], bf16[4096], bf16[4096], /*index=925*/bf16[512,8,128], bf16[32,128,512], bf16[512,32,128], bf16[512,8,128], bf16[512,8], /*index=930*/bf16[1,4096,14336], bf16[1,4096,14336], bf16[1,14336,4096], bf16[4096], bf16[4096], /*index=935*/bf16[512,8,128], bf16[32,128,512], bf16[512,32,128], bf16[512,8,128], bf16[512,8], /*index=940*/bf16[1,4096,14336], bf16[1,4096,14336], bf16[1,14336,4096], bf16[4096], bf16[4096], /*index=945*/bf16[512,8,128], bf16[32,128,512], bf16[512,32,128], bf16[512,8,128], bf16[512,8], /*index=950*/bf16[1,4096,14336], bf16[1,4096,14336], bf16[1,14336,4096], bf16[4096], bf16[4096], /*index=955*/bf16[512,8,128], bf16[32,128,512], bf16[512,32,128], bf16[512,8,128], bf16[512,8], /*index=960*/bf16[1,4096,14336], bf16[1,4096,14336], bf16[1,14336,4096], bf16[4096], bf16[4096], /*index=965*/bf16[512,8,128], bf16[32,128,512], bf16[512,32,128], bf16[512,8,128], bf16[512,32000], /*index=970*/bf16[32000,512], s32[], bf16[], f32[], f32[], /*index=975*/f32[], bf16[], bf16[], s32[]) {
  %param = s32[] parameter(0), sharding={replicated}
  %constant.1177 = s32[] constant(1)
  %add.1352 = s32[] add(%param, %constant.1177)
  %param.1 = bf16[4096]{0} parameter(1), sharding={replicated}
  %param.2 = s32[] parameter(971), sharding={replicated}
  %lt.0 = pred[] compare(%param.2, %constant.1177), direction=LT
  %constant.1178 = f32[] constant(1)
  %constant.1181 = s32[] constant(0)
  %max.1 = s32[] maximum(%constant.1181, %param.2)
  %min.1 = s32[] minimum(%constant.1177, %max.1)
  %convert_element_type.1173 = f32[] convert(%min.1)
  %sub.64 = f32[] subtract(%constant.1178, %convert_element_type.1173)
  %constant.1182 = f32[] constant(-3e-05)
  %mul.2417 = f32[] multiply(%sub.64, %constant.1182)
  %constant.1183 = f32[] constant(3e-05)
  %add.1353 = f32[] add(%mul.2417, %constant.1183)
  %constant.1184 = s32[] constant(-1)
  %sub.65 = s32[] add(%param.2, %constant.1184)
  %convert_element_type.1174 = f32[] convert(%sub.65)
  %constant.1185 = f32[] constant(0.209439531)
  %mul.2418 = f32[] multiply(%convert_element_type.1174, %constant.1185)
  %cos.0 = f32[] cosine(%mul.2418)
  %add.1354 = f32[] add(%cos.0, %constant.1178)
  %constant.1186 = f32[] constant(1.5e-05)
  %mul.2419 = f32[] multiply(%add.1354, %constant.1186)
  %constant.1187 = f32[] constant(0.5)
  %mul.2421 = f32[] multiply(%add.1354, %constant.1187)
  %sub.66 = f32[] subtract(%constant.1178, %mul.2421)
  %constant.1188 = f32[] constant(3e-06)
  %mul.2422 = f32[] multiply(%sub.66, %constant.1188)
  %add.1355 = f32[] add(%mul.2419, %mul.2422)
  %select_n.252 = f32[] select(%lt.0, %add.1353, %add.1355)
  %constant.1189 = f32[] constant(-1)
  %mul.2423 = f32[] multiply(%select_n.252, %constant.1189)
  %convert_element_type.1176 = bf16[] convert(%mul.2423)
  %mul.2424 = bf16[4096]{0} broadcast(%convert_element_type.1176), dimensions={}
  %constant.1190 = bf16[] constant(0)
  %broadcast.3379 = bf16[1,4096,8]{2,1,0} broadcast(%constant.1190), dimensions={}
  %iota.1866 = s32[1,4096,2,1]{3,2,1,0} iota(), iota_dimension=0
  %constant.1192 = s32[8]{0} constant({0, 1, 2, 3, 4, 5, 6, 7})
  %partition-id = u32[] partition-id()
  %dynamic-slice = s32[1]{0} dynamic-slice(%constant.1192, %partition-id), dynamic_slice_sizes={1}
  %reshape.9180 = s32[] reshape(%dynamic-slice)
  %multiply.1232 = s32[] multiply(%reshape.9180, %constant.1177)
  %broadcast.3380 = s32[1,4096,2,1]{3,2,1,0} broadcast(%multiply.1232), dimensions={}
  %add.1356 = s32[1,4096,2,1]{3,2,1,0} add(%iota.1866, %broadcast.3380)
  %iota.1867 = s32[1,4096,2,1]{3,2,1,0} iota(), iota_dimension=1
  %iota.1869 = s32[1,4096,2,1]{3,2,1,0} iota(), iota_dimension=1
  %iota.1871 = s32[1,4096,2,1]{3,2,1,0} iota(), iota_dimension=1
  %iota.1873 = s32[1,4096,2,1]{3,2,1,0} iota(), iota_dimension=1
  %iota.1875 = s32[1,4096,2,1]{3,2,1,0} iota(), iota_dimension=1
  %iota.1877 = s32[1,4096,2,1]{3,2,1,0} iota(), iota_dimension=1
  %iota.1879 = s32[1,4096,2,1]{3,2,1,0} iota(), iota_dimension=1
  %iota.1881 = s32[1,4096,2,1]{3,2,1,0} iota(), iota_dimension=1
  %iota.1883 = s32[1,4096,2,1]{3,2,1,0} iota(), iota_dimension=1
  %iota.1885 = s32[1,4096,2,1]{3,2,1,0} iota(), iota_dimension=1
  %iota.1887 = s32[1,4096,2,1]{3,2,1,0} iota(), iota_dimension=1
  %iota.1890 = s32[1,4096,2,1]{3,2,1,0} iota(), iota_dimension=1
  %iota.1892 = s32[1,4096,2,1]{3,2,1,0} iota(), iota_dimension=1
  %iota.1894 = s32[1,4096,2,1]{3,2,1,0} iota(), iota_dimension=1
  %iota.1896 = s32[1,4096,2,1]{3,2,1,0} iota(), iota_dimension=1
  %iota.1898 = s32[1,4096,2,1]{3,2,1,0} iota(), iota_dimension=1
  %iota.1900 = s32[1,4096,2,1]{3,2,1,0} iota(), iota_dimension=1
  %iota.1902 = s32[1,4096,2,1]{3,2,1,0} iota(), iota_dimension=1
  %iota.1904 = s32[1,4096,2,1]{3,2,1,0} iota(), iota_dimension=1
  %iota.1906 = s32[1,4096,2,1]{3,2,1,0} iota(), iota_dimension=1
  %iota.1908 = s32[1,4096,2,1]{3,2,1,0} iota(), iota_dimension=1
  %iota.1910 = s32[1,4096,2,1]{3,2,1,0} iota(), iota_dimension=1
  %iota.1912 = s32[1,4096,2,1]{3,2,1,0} iota(), iota_dimension=1
  %iota.1914 = s32[1,4096,2,1]{3,2,1,0} iota(), iota_dimension=1
  %iota.1916 = s32[1,4096,2,1]{3,2,1,0} iota(), iota_dimension=1
  %iota.1918 = s32[1,4096,2,1]{3,2,1,0} iota(), iota_dimension=1
  %iota.1920 = s32[1,4096,2,1]{3,2,1,0} iota(), iota_dimension=1
  %iota.1922 = s32[1,4096,2,1]{3,2,1,0} iota(), iota_dimension=1
  %iota.1924 = s32[1,4096,2,1]{3,2,1,0} iota(), iota_dimension=1
  %iota.1926 = s32[1,4096,2,1]{3,2,1,0} iota(), iota_dimension=1
  %iota.1928 = s32[1,4096,2,1]{3,2,1,0} iota(), iota_dimension=1
  %iota.1930 = s32[1,4096,2,1]{3,2,1,0} iota(), iota_dimension=1
  %param.3 = s32[1,4096]{1,0} parameter(972), sharding={devices=[8,1]<=[8]}
  %eq.1852 = s32[1,4096,32000]{2,1,0} broadcast(%param.3), dimensions={0,1}
  %iota.1931 = s32[1,4096,32000]{2,1,0} iota(), iota_dimension=2
  %eq.1853 = pred[1,4096,32000]{2,1,0} compare(%eq.1852, %iota.1931), direction=EQ
  %convert_element_type.1177 = bf16[1,4096,32000]{2,1,0} convert(%eq.1853)
  %param.4 = bf16[32000,512]{1,0} parameter(323), sharding={devices=[1,8]<=[8]}
  %all-gather = bf16[32000,4096]{1,0} all-gather(%param.4), channel_id=1, replica_groups=[1,8]<=[8], dimensions={1}, use_global_device_ids=true
  %dot.162 = bf16[1,4096,4096]{2,1,0} dot(%convert_element_type.1177, %all-gather), lhs_contracting_dims={2}, rhs_contracting_dims={0}
  %sharding_constraint.162 = bf16[1,4096,4096]{2,1,0} copy(%dot.162)
  %sharding_constraint.163 = bf16[1,4096,4096]{2,1,0} copy(%sharding_constraint.162)
  %convert_element_type.1178 = f32[1,4096,4096]{2,1,0} convert(%sharding_constraint.163)
  %square.3 = f32[1,4096,4096]{2,1,0} multiply(%convert_element_type.1178, %convert_element_type.1178)
  %constant.1360 = f32[] constant(0)
  %reduce.192 = f32[1,4096]{1,0} reduce(%square.3, %constant.1360), dimensions={2}, to_apply=%region_0.1090
  %constant.1361 = f32[] constant(0.000244140625)
  %broadcast.3412 = f32[1,4096]{1,0} broadcast(%constant.1361), dimensions={}
  %div.399 = f32[1,4096]{1,0} multiply(%reduce.192, %broadcast.3412)
  %constant.1362 = f32[] constant(1e-05)
  %broadcast.3413 = f32[1,4096]{1,0} broadcast(%constant.1362), dimensions={}
  %add.1392 = f32[1,4096]{1,0} add(%div.399, %broadcast.3413)
  %rsqrt.64 = f32[1,4096]{1,0} rsqrt(%add.1392)
  %mul.2426 = f32[1,4096,4096]{2,1,0} broadcast(%rsqrt.64), dimensions={0,1}
  %mul.2427 = f32[1,4096,4096]{2,1,0} multiply(%convert_element_type.1178, %mul.2426)
  %convert_element_type.1179 = bf16[1,4096,4096]{2,1,0} convert(%mul.2427)
  %param.5 = bf16[4096]{0} parameter(7), sharding={replicated}
  %mul.2428 = bf16[1,4096,4096]{2,1,0} broadcast(%param.5), dimensions={2}
  %mul.2429 = bf16[1,4096,4096]{2,1,0} multiply(%convert_element_type.1179, %mul.2428)
  %sharding_constraint.164 = bf16[1,4096,4096]{2,1,0} copy(%mul.2429)
  %sharding_constraint.165 = bf16[1,4096,4096]{2,1,0} copy(%sharding_constraint.164)
  %param.6 = bf16[512,32,128]{2,1,0} parameter(10), sharding={devices=[8,1,1]<=[8]}
  %all-gather.1 = bf16[4096,32,128]{2,1,0} all-gather(%param.6), channel_id=2, replica_groups=[1,8]<=[8], dimensions={0}, use_global_device_ids=true
  %dot.163 = bf16[1,4096,32,128]{3,2,1,0} dot(%sharding_constraint.165, %all-gather.1), lhs_contracting_dims={2}, rhs_contracting_dims={0}
  %slice.130 = bf16[1,4096,32,64]{3,2,1,0} slice(%dot.163), slice={[0:1], [0:4096], [0:32], [0:64]}
  %param.7 = s32[1,4096]{1,0} parameter(973), sharding={devices=[8,1]<=[8]}
  %convert_element_type.1180 = f32[1,4096]{1,0} convert(%param.7)
  %div.400 = f32[1,4096,1,64]{3,2,1,0} broadcast(%convert_element_type.1180), dimensions={0,1}
  %constant.1372 = f32[] constant(1e+06)
  %broadcast.3414 = f32[64]{0} broadcast(%constant.1372), dimensions={}
  %iota.1932 = s32[64]{0} iota(), iota_dimension=0
  %constant.1374 = s32[] constant(2)
  %broadcast.3415 = s32[64]{0} broadcast(%constant.1374), dimensions={}
  %mul.2430 = s32[64]{0} multiply(%iota.1932, %broadcast.3415)
  %convert_element_type.1181 = f32[64]{0} convert(%mul.2430)
  %constant.1375 = f32[] constant(0.0078125)
  %broadcast.3416 = f32[64]{0} broadcast(%constant.1375), dimensions={}
  %div.401 = f32[64]{0} multiply(%convert_element_type.1181, %broadcast.3416)
  %pow.2 = f32[64]{0} power(%broadcast.3414, %div.401)
  %div.402 = f32[1,4096,1,64]{3,2,1,0} broadcast(%pow.2), dimensions={3}
  %div.403 = f32[1,4096,1,64]{3,2,1,0} divide(%div.400, %div.402)
  %cos.1 = f32[1,4096,1,64]{3,2,1,0} cosine(%div.403)
  %convert_element_type.1182 = bf16[1,4096,1,64]{3,2,1,0} convert(%cos.1)
  %mul.2431 = bf16[1,4096,64]{2,1,0} reshape(%convert_element_type.1182)
  %mul.2435 = bf16[1,4096,32,64]{3,2,1,0} broadcast(%mul.2431), dimensions={0,1,3}
  %mul.2436 = bf16[1,4096,32,64]{3,2,1,0} multiply(%slice.130, %mul.2435)
  %slice.131 = bf16[1,4096,32,64]{3,2,1,0} slice(%dot.163), slice={[0:1], [0:4096], [0:32], [64:128]}
  %sin.0 = f32[1,4096,1,64]{3,2,1,0} sine(%div.403)
  %convert_element_type.1183 = bf16[1,4096,1,64]{3,2,1,0} convert(%sin.0)
  %mul.2437 = bf16[1,4096,64]{2,1,0} reshape(%convert_element_type.1183)
  %mul.2438 = bf16[1,4096,32,64]{3,2,1,0} broadcast(%mul.2437), dimensions={0,1,3}
  %mul.2439 = bf16[1,4096,32,64]{3,2,1,0} multiply(%slice.131, %mul.2438)
  %sub.67 = bf16[1,4096,32,64]{3,2,1,0} subtract(%mul.2436, %mul.2439)
  %mul.2450 = bf16[1,4096,32,64]{3,2,1,0} multiply(%slice.131, %mul.2435)
  %mul.2453 = bf16[1,4096,32,64]{3,2,1,0} multiply(%slice.130, %mul.2438)
  %add.1393 = bf16[1,4096,32,64]{3,2,1,0} add(%mul.2450, %mul.2453)
  %concatenate.3 = bf16[1,4096,32,128]{3,2,1,0} concatenate(%sub.67, %add.1393), dimensions={3}
  %sharding_constraint.166 = bf16[1,4096,32,128]{3,2,1,0} copy(%concatenate.3)
  %param.8 = bf16[512,8,128]{2,1,0} parameter(8), sharding={devices=[8,1,1]<=[8]}
  %all-gather.2 = bf16[4096,8,128]{2,1,0} all-gather(%param.8), channel_id=3, replica_groups=[1,8]<=[8], dimensions={0}, use_global_device_ids=true
  %dot.164 = bf16[1,4096,8,128]{3,2,1,0} dot(%sharding_constraint.165, %all-gather.2), lhs_contracting_dims={2}, rhs_contracting_dims={0}
  %slice.132 = bf16[1,4096,8,64]{3,2,1,0} slice(%dot.164), slice={[0:1], [0:4096], [0:8], [0:64]}
  %mul.2456 = bf16[1,4096,8,64]{3,2,1,0} broadcast(%mul.2431), dimensions={0,1,3}
  %mul.2457 = bf16[1,4096,8,64]{3,2,1,0} multiply(%slice.132, %mul.2456)
  %slice.133 = bf16[1,4096,8,64]{3,2,1,0} slice(%dot.164), slice={[0:1], [0:4096], [0:8], [64:128]}
  %mul.2460 = bf16[1,4096,8,64]{3,2,1,0} broadcast(%mul.2437), dimensions={0,1,3}
  %mul.2461 = bf16[1,4096,8,64]{3,2,1,0} multiply(%slice.133, %mul.2460)
  %sub.68 = bf16[1,4096,8,64]{3,2,1,0} subtract(%mul.2457, %mul.2461)
  %mul.2465 = bf16[1,4096,8,64]{3,2,1,0} multiply(%slice.133, %mul.2456)
  %mul.2469 = bf16[1,4096,8,64]{3,2,1,0} multiply(%slice.132, %mul.2460)
  %add.1394 = bf16[1,4096,8,64]{3,2,1,0} add(%mul.2465, %mul.2469)
  %concatenate.4 = bf16[1,4096,8,128]{3,2,1,0} concatenate(%sub.68, %add.1394), dimensions={3}
  %sharding_constraint.168 = bf16[1,4096,8,128]{3,2,1,0} copy(%concatenate.4)
  %param.9 = bf16[512,8,128]{2,1,0} parameter(11), sharding={devices=[8,1,1]<=[8]}
  %all-gather.3 = bf16[4096,8,128]{2,1,0} all-gather(%param.9), channel_id=4, replica_groups=[1,8]<=[8], dimensions={0}, use_global_device_ids=true
  %dot.165 = bf16[1,4096,8,128]{3,2,1,0} dot(%sharding_constraint.165, %all-gather.3), lhs_contracting_dims={2}, rhs_contracting_dims={0}
  %sharding_constraint.169 = bf16[1,4096,8,128]{3,2,1,0} copy(%dot.165)
  %constant.1403 = bf16[0]{0} constant({})
  %constant.1404 = u32[] constant(0)
  %broadcast.3417 = u32[16]{0} broadcast(%constant.1404), dimensions={}
  %constant.1417 = s32[8]{0} constant({0, 2, 4, 6, 8, 10, 12, 14})
  %dynamic-slice.37 = s32[1]{0} dynamic-slice(%constant.1417, %partition-id), dynamic_slice_sizes={1}
  %reshape.9220 = s32[] reshape(%dynamic-slice.37)
  %dynamic-slice.38 = u32[2]{0} dynamic-slice(%broadcast.3417, %reshape.9220), dynamic_slice_sizes={2}
  %constant.1418 = s32[1]{0} constant({0})
  %param.10 = s32[1,4096]{1,0} parameter(974), sharding={devices=[8,1]<=[8]}
  %eq.1854 = s32[1,4096,4096]{2,1,0} broadcast(%param.10), dimensions={0,1}
  %eq.1855 = s32[1,4096,4096]{2,1,0} broadcast(%param.10), dimensions={0,2}
  %eq.1856 = pred[1,4096,4096]{2,1,0} compare(%eq.1854, %eq.1855), direction=EQ
  %iota.1934 = s32[4096,4096]{1,0} iota(), iota_dimension=1
  %iota.1935 = s32[4096,4096]{1,0} iota(), iota_dimension=0
  %le.1 = pred[4096,4096]{1,0} compare(%iota.1934, %iota.1935), direction=LE
  %and.64 = pred[1,4096,4096]{2,1,0} broadcast(%le.1), dimensions={1,2}
  %and.65 = pred[1,4096,4096]{2,1,0} and(%eq.1856, %and.64)
  %broadcast_in_dim.516 = f32[1,4096,4096]{2,1,0} broadcast(%constant.1360), dimensions={}
  %constant.1405 = f32[] constant(-2.38197633e+38)
  %broadcast_in_dim.517 = f32[1,4096,4096]{2,1,0} broadcast(%constant.1405), dimensions={}
  %select_n.253 = f32[1,4096,4096]{2,1,0} select(%and.65, %broadcast_in_dim.516, %broadcast_in_dim.517)
  %ne.64 = pred[1,4096,4096]{2,1,0} compare(%select_n.253, %broadcast_in_dim.516), direction=NE
  %not.64 = pred[1,4096,4096]{2,1,0} not(%ne.64)
  %convert_element_type.1188 = s32[1,4096,4096]{2,1,0} convert(%not.64)
  %reduce.193 = s32[1,4096]{1,0} reduce(%convert_element_type.1188, %constant.1181), dimensions={1}, to_apply=%region_1.1200
  %reduce_sum.5600 = s32[1,1,1,4096]{3,2,1,0} reshape(%reduce.193)
  %slice.134 = s32[1,1,1,1]{3,2,1,0} slice(%reduce_sum.5600), slice={[0:1], [0:1], [0:1], [0:1]}
  %squeeze.0 = s32[1,1]{1,0} reshape(%slice.134)
  %reshape.9221 = s32[1]{0} reshape(%squeeze.0)
  %lt.17 = pred[1]{0} compare(%reshape.9221, %constant.1418), direction=LT
  %broadcast_in_dim.518 = s32[1]{0} reshape(%constant.1181)
  %select_n.254 = s32[1]{0} select(%lt.17, %broadcast_in_dim.518, %reshape.9221)
  %concatenate.31 = s32[2]{0} concatenate(%constant.1418, %select_n.254), dimensions={0}
  %reduce.194 = s32[1,4096]{1,0} reduce(%convert_element_type.1188, %constant.1181), dimensions={2}, to_apply=%region_2.1209
  %reduce_sum.5601 = s32[1,1,1,4096]{3,2,1,0} reshape(%reduce.194)
  %constant.1415 = s32[] constant(-2147483648)
  %reduce.195 = s32[1,1]{1,0} reduce(%reduce_sum.5601, %constant.1415), dimensions={3,2}, to_apply=%region_3.1216
  %reshape.9222 = s32[1]{0} reshape(%reduce.195)
  %lt.33 = pred[1]{0} compare(%reshape.9222, %constant.1418), direction=LT
  %select_n.255 = s32[1]{0} select(%lt.33, %broadcast_in_dim.518, %reshape.9222)
  %concatenate.36 = s32[2]{0} concatenate(%constant.1418, %select_n.255), dimensions={0}
  %constant.1416 = f32[0]{0} constant({})
  %te_fused_attn_forward_ffi.37 = (bf16[1,4096,32,128]{3,2,1,0}, f32[1,32,4096,1]{3,2,1,0}, u32[2,4]{1,0}, u8[48]{0}) custom-call(%sharding_constraint.166, %sharding_constraint.168, %sharding_constraint.169, %constant.1403, %dynamic-slice.38, /*index=5*/%concatenate.31, %concatenate.36, %constant.1416, %constant.1416, %constant.1416, /*index=10*/%constant.1416, %constant.1416, %constant.1416), custom_call_target="te_fused_attn_forward_ffi", operand_layout_constraints={bf16[1,4096,32,128]{3,2,1,0}, bf16[1,4096,8,128]{3,2,1,0}, bf16[1,4096,8,128]{3,2,1,0}, bf16[0]{0}, u32[2]{0}, s32[2]{0}, s32[2]{0}, f32[0]{0}, f32[0]{0}, f32[0]{0}, f32[0]{0}, f32[0]{0}, f32[0]{0}}, api_version=API_VERSION_TYPED_FFI, backend_config={attn_heads = 32 : i64, bias_batch = 0 : i64, bias_heads = 0 : i64, bias_type = 0 : i64, deterministic = false, dropout_probability = 0.000000e+00 : f64, input_batch = 1 : i64, is_training = true, kv_max_seqlen = 4096 : i64, mask_type = 3 : i64, max_segments_per_seq = 1 : i64, num_gqa_groups = 8 : i64, q_max_seqlen = 4096 : i64, qk_head_dim = 128 : i64, qkv_layout = 9 : i64, scaling_factor = 1.000000e+00 : f64, v_head_dim = 128 : i64, window_size_left = -1 : i64, window_size_right = -1 : i64}
  %get-tuple-element.259 = bf16[1,4096,32,128]{3,2,1,0} get-tuple-element(%te_fused_attn_forward_ffi.37), index=0
  %sharding_constraint.170 = bf16[1,4096,32,128]{3,2,1,0} copy(%get-tuple-element.259)
  %param.11 = bf16[32,128,512]{2,1,0} parameter(9), sharding={devices=[1,1,8]<=[8]}
  %all-gather.5 = bf16[32,128,4096]{2,1,0} all-gather(%param.11), channel_id=6, replica_groups=[1,8]<=[8], dimensions={2}, use_global_device_ids=true
  %dot.166 = bf16[1,4096,4096]{2,1,0} dot(%sharding_constraint.170, %all-gather.5), lhs_contracting_dims={2,3}, rhs_contracting_dims={0,1}
  %sharding_constraint.171 = bf16[1,4096,4096]{2,1,0} copy(%dot.166)
  %add.1395 = bf16[1,4096,4096]{2,1,0} add(%sharding_constraint.163, %sharding_constraint.171)
  %convert_element_type.1191 = f32[1,4096,4096]{2,1,0} convert(%add.1395)
  %square.4 = f32[1,4096,4096]{2,1,0} multiply(%convert_element_type.1191, %convert_element_type.1191)
  %reduce.196 = f32[1,4096]{1,0} reduce(%square.4, %constant.1360), dimensions={2}, to_apply=%region_4.1232
  %div.408 = f32[1,4096]{1,0} multiply(%reduce.196, %broadcast.3412)
  %add.1396 = f32[1,4096]{1,0} add(%div.408, %broadcast.3413)
  %rsqrt.65 = f32[1,4096]{1,0} rsqrt(%add.1396)
  %mul.2470 = f32[1,4096,4096]{2,1,0} broadcast(%rsqrt.65), dimensions={0,1}
  %mul.2471 = f32[1,4096,4096]{2,1,0} multiply(%convert_element_type.1191, %mul.2470)
  %convert_element_type.1192 = bf16[1,4096,4096]{2,1,0} convert(%mul.2471)
  %param.12 = bf16[4096]{0} parameter(6), sharding={replicated}
  %mul.2472 = bf16[1,4096,4096]{2,1,0} broadcast(%param.12), dimensions={2}
  %mul.2473 = bf16[1,4096,4096]{2,1,0} multiply(%convert_element_type.1192, %mul.2472)
  %sharding_constraint.172 = bf16[1,4096,4096]{2,1,0} copy(%mul.2473)
  %param.13 = bf16[512,8]{1,0} parameter(2), sharding={devices=[8,1]<=[8]}
  %all-gather.6 = bf16[4096,8]{1,0} all-gather(%param.13), channel_id=7, replica_groups=[1,8]<=[8], dimensions={0}, use_global_device_ids=true
  %dot.167 = bf16[1,4096,8]{2,1,0} dot(%sharding_constraint.172, %all-gather.6), lhs_contracting_dims={2}, rhs_contracting_dims={0}
  %sharding_constraint.173 = bf16[1,4096,8]{2,1,0} copy(%dot.167)
  %top_k.0 = bf16[4096,8]{1,0} reshape(%sharding_constraint.173)
  %top_k.1 = (bf16[4096,2]{1,0}, s32[4096,2]{1,0}) custom-call(%top_k.0), custom_call_target="TopK", called_computations={%compare_greater_than.6.1251.clone}
  %get-tuple-element.260 = bf16[4096,2]{1,0} get-tuple-element(%top_k.1), index=0
  %get-tuple-element.261 = s32[4096,2]{1,0} get-tuple-element(%top_k.1), index=1
  %constant.1421 = u32[8]{0} constant({0, 0, 0, 0, 0, 0, 0, 0})
  %dynamic-slice.39 = u32[1]{0} dynamic-slice(%constant.1421, %partition-id), dynamic_slice_sizes={1}
  %reshape.9223 = u32[] reshape(%dynamic-slice.39)
  %convert = s32[] convert(%reshape.9223)
  %constant.1422 = s32[] constant(8)
  %multiply.1269 = s32[] multiply(%convert, %constant.1422)
  %broadcast.3418 = s32[4096,2]{1,0} broadcast(%multiply.1269), dimensions={}
  %add.1397 = s32[4096,2]{1,0} add(%get-tuple-element.261, %broadcast.3418)
  %sort.64 = (bf16[4096,2]{1,0}, s32[4096,2]{1,0}) sort(%get-tuple-element.260, %add.1397), dimensions={1}, is_stable=true, to_apply=%compare-value-and-index.9
  %get-tuple-element.263 = s32[4096,2]{1,0} get-tuple-element(%sort.64), index=1
  %slice.136 = s32[4096,2]{1,0} slice(%get-tuple-element.263), slice={[0:4096], [0:2]}
  %top_k.2 = s32[1,4096,2]{2,1,0} reshape(%slice.136)
  %broadcast.3419 = s32[1,4096,2]{2,1,0} broadcast(%constant.1181), dimensions={}
  %lt.1 = pred[1,4096,2]{2,1,0} compare(%top_k.2, %broadcast.3419), direction=LT
  %broadcast.3420 = s32[1,4096,2]{2,1,0} broadcast(%constant.1422), dimensions={}
  %add.1398 = s32[1,4096,2]{2,1,0} add(%top_k.2, %broadcast.3420)
  %select_n.256 = s32[1,4096,2]{2,1,0} select(%lt.1, %add.1398, %top_k.2)
  %broadcast_in_dim.520 = s32[1,4096,2,1]{3,2,1,0} reshape(%select_n.256)
  %concatenate.5 = s32[1,4096,2,3]{3,2,1,0} concatenate(%add.1356, %iota.1930, %broadcast_in_dim.520), dimensions={3}
  %reshape.9251 = s32[1]{0} reshape(%reshape.9180)
  %concatenate.8 = s32[3]{0} concatenate(%reshape.9251, %broadcast_in_dim.518, %broadcast_in_dim.518), dimensions={0}
  %broadcast.3428 = s32[1,4096,2,3]{3,2,1,0} broadcast(%concatenate.8), dimensions={3}
  %subtract.2 = s32[1,4096,2,3]{3,2,1,0} subtract(%concatenate.5, %broadcast.3428)
  %iota.1936 = u32[1,4096,2]{2,1,0} iota(), iota_dimension=2
  %iota.1937 = u32[1,4096,2]{2,1,0} iota(), iota_dimension=1
  %constant.1424 = u32[] constant(2)
  %reshape.9224 = u32[1,4096,2]{2,1,0} broadcast(%constant.1424), dimensions={}
  %reshape.9225 = u32[1,4096,2]{2,1,0} multiply(%iota.1937, %reshape.9224)
  %reshape.9226 = u32[1,4096,2]{2,1,0} add(%iota.1936, %reshape.9225)
  %iota.1938 = u32[1,4096,2]{2,1,0} iota(), iota_dimension=0
  %convert.1 = u32[] convert(%multiply.1232)
  %broadcast.3421 = u32[1,4096,2]{2,1,0} broadcast(%convert.1), dimensions={}
  %add.1399 = u32[1,4096,2]{2,1,0} add(%iota.1938, %broadcast.3421)
  %constant.1429 = u32[] constant(8192)
  %reshape.9228 = u32[1,4096,2]{2,1,0} broadcast(%constant.1429), dimensions={}
  %reshape.9229 = u32[1,4096,2]{2,1,0} multiply(%add.1399, %reshape.9228)
  %reshape.9230 = u32[1,4096,2]{2,1,0} add(%reshape.9226, %reshape.9229)
  %constant.1430 = u32[] constant(1)
  %broadcast.3422 = u32[1,4096,2]{2,1,0} broadcast(%constant.1430), dimensions={}
  %add.1401 = u32[1,4096,2]{2,1,0} add(%reshape.9230, %broadcast.3422)
  %broadcast.3423 = u32[8,4096,8]{2,1,0} broadcast(%constant.1404), dimensions={}
  %dynamic-slice.43 = u32[1,4096,8]{2,1,0} dynamic-slice(%broadcast.3423, %reshape.9180, %constant.1181, %constant.1181), dynamic_slice_sizes={1,4096,8}
  %scatter.129 = u32[1,4096,8]{2,1,0} scatter(%dynamic-slice.43, %subtract.2, %add.1401), update_window_dims={}, inserted_window_dims={0,1,2}, scatter_dims_to_operand_dims={0,1,2}, index_vector_dim=3, to_apply=%region_5.1289.clone
  %gather = u32[1,4096,2]{2,1,0} gather(%scatter.129, %subtract.2), offset_dims={}, collapsed_slice_dims={0,1,2}, start_index_map={0,1,2}, index_vector_dim=3, slice_sizes={1,1,1}
  %eq.1857 = pred[1,4096,2]{2,1,0} compare(%add.1401, %gather), direction=EQ
  %get-tuple-element.262 = bf16[4096,2]{1,0} get-tuple-element(%sort.64), index=0
  %slice.135 = bf16[4096,2]{1,0} slice(%get-tuple-element.262), slice={[0:4096], [0:2]}
  %convert_element_type.1194 = f32[4096,2]{1,0} convert(%slice.135)
  %convert_element_type.1195 = f32[1,4096,2]{2,1,0} reshape(%convert_element_type.1194)
  %constant.1450 = f32[] constant(-inf)
  %reduce.197 = f32[4096]{0} reduce(%convert_element_type.1194, %constant.1450), dimensions={1}, to_apply=%region_6.1299
  %sub.69 = f32[1,4096]{1,0} reshape(%reduce.197)
  %sub.70 = f32[1,4096,2]{2,1,0} broadcast(%sub.69), dimensions={0,1}
  %sub.71 = f32[1,4096,2]{2,1,0} subtract(%convert_element_type.1195, %sub.70)
  %exp.126 = f32[1,4096,2]{2,1,0} exponential(%sub.71)
  %reduce.198 = f32[1,4096]{1,0} reduce(%exp.126, %constant.1360), dimensions={2}, to_apply=%region_7.1308
  %div.409 = f32[1,4096,2]{2,1,0} broadcast(%reduce.198), dimensions={0,1}
  %div.410 = f32[1,4096,2]{2,1,0} divide(%exp.126, %div.409)
  %convert_element_type.1197 = bf16[1,4096,2]{2,1,0} convert(%div.410)
  %broadcast.3427 = bf16[1,4096,2]{2,1,0} broadcast(%constant.1190), dimensions={}
  %select_n.257 = bf16[1,4096,2]{2,1,0} select(%eq.1857, %convert_element_type.1197, %broadcast.3427)
  %scatter.130 = bf16[1,4096,8]{2,1,0} scatter(%broadcast.3379, %subtract.2, %select_n.257), update_window_dims={}, inserted_window_dims={0,1,2}, scatter_dims_to_operand_dims={0,1,2}, index_vector_dim=3, to_apply=%region_8.1318.clone
  %eq.1859 = s32[1,4096,2,8]{3,2,1,0} broadcast(%top_k.2), dimensions={0,1,2}
  %iota.1946 = s32[1,4096,2,8]{3,2,1,0} iota(), iota_dimension=3
  %eq.1860 = pred[1,4096,2,8]{3,2,1,0} compare(%eq.1859, %iota.1946), direction=EQ
  %convert_element_type.1198 = s32[1,4096,2,8]{3,2,1,0} convert(%eq.1860)
  %reshape.9257 = s32[1,8192,8]{2,1,0} reshape(%convert_element_type.1198)
  %sharding_constraint.174 = s32[1,8192,8]{2,1,0} copy(%reshape.9257)
  %reduce-window = s32[1,8192,8]{2,1,0} reduce-window(%sharding_constraint.174, %constant.1181), window={size=1x8192x1 pad=0_0x8191_0x0_0}, to_apply=%region_9.1330
  %reshape.9259 = s32[1,4096,2,8]{3,2,1,0} reshape(%reduce-window)
  %sharding_constraint.175 = s32[1,4096,2,8]{3,2,1,0} copy(%reshape.9259)
  %constant.1463 = s32[] constant(1024)
  %broadcast.3429 = s32[1,4096,2,8]{3,2,1,0} broadcast(%constant.1463), dimensions={}
  %le.2 = pred[1,4096,2,8]{3,2,1,0} compare(%sharding_constraint.175, %broadcast.3429), direction=LE
  %broadcast.3430 = s32[1,4096,2,8]{3,2,1,0} broadcast(%constant.1181), dimensions={}
  %mul.2474 = s32[1,4096,2,8]{3,2,1,0} select(%le.2, %convert_element_type.1198, %broadcast.3430)
  %reduce.199 = s32[1,4096,8]{2,1,0} reduce(%mul.2474, %constant.1181), dimensions={2}, to_apply=%region_10.1342
  %convert_element_type.1199 = bf16[1,4096,8]{2,1,0} convert(%reduce.199)
  %mul.2475 = bf16[1,4096,8]{2,1,0} multiply(%scatter.130, %convert_element_type.1199)
  %mul.2476 = bf16[1,4096,8,1025]{3,2,1,0} broadcast(%mul.2475), dimensions={0,1,2}
  %mul.2485 = s32[1,8192,8]{2,1,0} multiply(%sharding_constraint.174, %reduce-window)
  %reshape.9260 = s32[1,4096,2,8]{3,2,1,0} reshape(%mul.2485)
  %reduce.200 = s32[1,4096,8]{2,1,0} reduce(%reshape.9260, %constant.1181), dimensions={2}, to_apply=%region_11.1352
  %mul.2494 = s32[1,4096,8]{2,1,0} multiply(%reduce.200, %reduce.199)
  %eq.1861 = s32[1,4096,8,1025]{3,2,1,0} broadcast(%mul.2494), dimensions={0,1,2}
  %iota.1947 = s32[1,4096,8,1025]{3,2,1,0} iota(), iota_dimension=3
  %eq.1862 = pred[1,4096,8,1025]{3,2,1,0} compare(%eq.1861, %iota.1947), direction=EQ
  %convert_element_type.1200 = s32[1,4096,8,1025]{3,2,1,0} convert(%eq.1862)
  %convert_element_type.1201 = bf16[1,4096,8,1025]{3,2,1,0} convert(%convert_element_type.1200)
  %mul.2495 = bf16[1,4096,8,1025]{3,2,1,0} multiply(%mul.2476, %convert_element_type.1201)
  %slice.137 = bf16[1,4096,8,1024]{3,2,1,0} slice(%mul.2495), slice={[0:1], [0:4096], [0:8], [1:1025]}
  %sharding_constraint.176 = bf16[1,4096,8,1024]{3,2,1,0} copy(%slice.137)
  %broadcast.3431 = bf16[1,4096,8,1024]{3,2,1,0} broadcast(%constant.1190), dimensions={}
  %convert_element_type.1202 = pred[1,4096,8,1024]{3,2,1,0} compare(%slice.137, %broadcast.3431), direction=NE
  %sharding_constraint.177 = pred[1,4096,8,1024]{3,2,1,0} copy(%convert_element_type.1202)
  %dot_general.36 = bf16[1,4096,8,1024]{3,2,1,0} convert(%sharding_constraint.177)
  %dot.168 = bf16[1,8,1024,4096]{3,2,1,0} dot(%dot_general.36, %sharding_constraint.172), lhs_batch_dims={0}, lhs_contracting_dims={1}, rhs_batch_dims={0}, rhs_contracting_dims={1}
  %reshape.9263 = bf16[1,8,1,1024,4096]{4,3,2,1,0} reshape(%dot.168)
  %all-to-all = bf16[1,8,1,1024,4096]{4,3,2,1,0} all-to-all(%reshape.9263), channel_id=11, replica_groups=[1,8]<=[8], dimensions={1}
  %transpose.5 = bf16[8,1,1,1024,4096]{4,3,2,0,1} transpose(%all-to-all), dimensions={1,0,2,3,4}
  %reshape.9264 = bf16[8,1,1024,4096]{3,2,1,0} reshape(%transpose.5)
  %transpose.6 = bf16[1,8,1024,4096]{3,2,0,1} transpose(%reshape.9264), dimensions={1,0,2,3}
  %sharding_constraint.178 = bf16[1,8,1024,4096]{3,2,0,1} copy(%transpose.6)
  %param.14 = bf16[1,4096,14336]{2,1,0} parameter(3), sharding={devices=[8,1,1]<=[8]}
  %sharding_constraint.179 = bf16[1,4096,14336]{2,1,0} copy(%param.14)
  %dot.169 = bf16[1,8,1024,14336]{3,2,1,0} dot(%sharding_constraint.178, %sharding_constraint.179), lhs_batch_dims={0}, lhs_contracting_dims={3}, rhs_batch_dims={0}, rhs_contracting_dims={1}
  %sharding_constraint.180 = bf16[1,8,1024,14336]{3,2,1,0} copy(%dot.169)
  %constant.1491 = bf16[] constant(1)
  %jit_silu_.0 = bf16[1,8,1024,14336]{3,2,1,0} broadcast(%constant.1491), dimensions={}
  %neg.158 = bf16[1,8,1024,14336]{3,2,1,0} negate(%sharding_constraint.180)
  %exp.127 = bf16[1,8,1024,14336]{3,2,1,0} exponential(%neg.158)
  %add.1405 = bf16[1,8,1024,14336]{3,2,1,0} add(%exp.127, %jit_silu_.0)
  %div.411 = bf16[1,8,1024,14336]{3,2,1,0} divide(%jit_silu_.0, %add.1405)
  %mul.2496 = bf16[1,8,1024,14336]{3,2,1,0} multiply(%sharding_constraint.180, %div.411)
  %param.15 = bf16[1,4096,14336]{2,1,0} parameter(4), sharding={devices=[8,1,1]<=[8]}
  %sharding_constraint.181 = bf16[1,4096,14336]{2,1,0} copy(%param.15)
  %dot.170 = bf16[1,8,1024,14336]{3,2,1,0} dot(%sharding_constraint.178, %sharding_constraint.181), lhs_batch_dims={0}, lhs_contracting_dims={3}, rhs_batch_dims={0}, rhs_contracting_dims={1}
  %sharding_constraint.182 = bf16[1,8,1024,14336]{3,2,1,0} copy(%dot.170)
  %mul.2497 = bf16[1,8,1024,14336]{3,2,1,0} multiply(%mul.2496, %sharding_constraint.182)
  %param.16 = bf16[1,14336,4096]{2,1,0} parameter(5), sharding={devices=[8,1,1]<=[8]}
  %sharding_constraint.183 = bf16[1,14336,4096]{2,1,0} copy(%param.16)
  %dot.171 = bf16[1,8,1024,4096]{3,2,1,0} dot(%mul.2497, %sharding_constraint.183), lhs_batch_dims={0}, lhs_contracting_dims={3}, rhs_batch_dims={0}, rhs_contracting_dims={1}
  %sharding_constraint.184 = bf16[1,8,1024,4096]{3,2,1,0} copy(%dot.171)
  %reshape.9267 = bf16[1,8,1,1024,4096]{4,3,2,1,0} reshape(%sharding_constraint.184)
  %all-to-all.1 = bf16[1,8,1,1024,4096]{4,3,2,1,0} all-to-all(%reshape.9267), channel_id=12, replica_groups=[1,8]<=[8], dimensions={1}
  %transpose.7 = bf16[8,1,1,1024,4096]{4,3,2,0,1} transpose(%all-to-all.1), dimensions={1,0,2,3,4}
  %reshape.9268 = bf16[8,1,1024,4096]{3,2,1,0} reshape(%transpose.7)
  %dot.172 = bf16[1,4096,4096]{2,1,0} dot(%sharding_constraint.176, %reshape.9268), lhs_batch_dims={0}, lhs_contracting_dims={3,2}, rhs_batch_dims={1}, rhs_contracting_dims={2,0}
  %sharding_constraint.185 = bf16[1,4096,4096]{2,1,0} copy(%dot.172)
  %add.1406 = bf16[1,4096,4096]{2,1,0} add(%sharding_constraint.185, %add.1395)
  %sharding_constraint.186 = bf16[1,4096,4096]{2,1,0} copy(%add.1406)
  %sharding_constraint.187 = bf16[1,4096,4096]{2,1,0} copy(%sharding_constraint.186)
  %convert_element_type.1204 = f32[1,4096,4096]{2,1,0} convert(%sharding_constraint.187)
  %square.5 = f32[1,4096,4096]{2,1,0} multiply(%convert_element_type.1204, %convert_element_type.1204)
  %reduce.201 = f32[1,4096]{1,0} reduce(%square.5, %constant.1360), dimensions={2}, to_apply=%region_12.1397
  %div.412 = f32[1,4096]{1,0} multiply(%reduce.201, %broadcast.3412)
  %add.1407 = f32[1,4096]{1,0} add(%div.412, %broadcast.3413)
  %rsqrt.66 = f32[1,4096]{1,0} rsqrt(%add.1407)
  %mul.2499 = f32[1,4096,4096]{2,1,0} broadcast(%rsqrt.66), dimensions={0,1}
  %mul.2500 = f32[1,4096,4096]{2,1,0} multiply(%convert_element_type.1204, %mul.2499)
  %convert_element_type.1206 = bf16[1,4096,4096]{2,1,0} convert(%mul.2500)
  %param.17 = bf16[4096]{0} parameter(17), sharding={replicated}
  %mul.2501 = bf16[1,4096,4096]{2,1,0} broadcast(%param.17), dimensions={2}
  %mul.2502 = bf16[1,4096,4096]{2,1,0} multiply(%convert_element_type.1206, %mul.2501)
  %sharding_constraint.188 = bf16[1,4096,4096]{2,1,0} copy(%mul.2502)
  %sharding_constraint.189 = bf16[1,4096,4096]{2,1,0} copy(%sharding_constraint.188)
  %param.18 = bf16[512,32,128]{2,1,0} parameter(20), sharding={devices=[8,1,1]<=[8]}
  %all-gather.8 = bf16[4096,32,128]{2,1,0} all-gather(%param.18), channel_id=13, replica_groups=[1,8]<=[8], dimensions={0}, use_global_device_ids=true
  %dot.173 = bf16[1,4096,32,128]{3,2,1,0} dot(%sharding_constraint.189, %all-gather.8), lhs_contracting_dims={2}, rhs_contracting_dims={0}
  %slice.138 = bf16[1,4096,32,64]{3,2,1,0} slice(%dot.173), slice={[0:1], [0:4096], [0:32], [0:64]}
  %mul.2509 = bf16[1,4096,32,64]{3,2,1,0} multiply(%slice.138, %mul.2435)
  %slice.139 = bf16[1,4096,32,64]{3,2,1,0} slice(%dot.173), slice={[0:1], [0:4096], [0:32], [64:128]}
  %mul.2515 = bf16[1,4096,32,64]{3,2,1,0} multiply(%slice.139, %mul.2438)
  %sub.72 = bf16[1,4096,32,64]{3,2,1,0} subtract(%mul.2509, %mul.2515)
  %mul.2535 = bf16[1,4096,32,64]{3,2,1,0} multiply(%slice.139, %mul.2435)
  %mul.2538 = bf16[1,4096,32,64]{3,2,1,0} multiply(%slice.138, %mul.2438)
  %add.1408 = bf16[1,4096,32,64]{3,2,1,0} add(%mul.2535, %mul.2538)
  %concatenate.9 = bf16[1,4096,32,128]{3,2,1,0} concatenate(%sub.72, %add.1408), dimensions={3}
  %sharding_constraint.190 = bf16[1,4096,32,128]{3,2,1,0} copy(%concatenate.9)
  %param.19 = bf16[512,8,128]{2,1,0} parameter(18), sharding={devices=[8,1,1]<=[8]}
  %all-gather.9 = bf16[4096,8,128]{2,1,0} all-gather(%param.19), channel_id=14, replica_groups=[1,8]<=[8], dimensions={0}, use_global_device_ids=true
  %dot.174 = bf16[1,4096,8,128]{3,2,1,0} dot(%sharding_constraint.189, %all-gather.9), lhs_contracting_dims={2}, rhs_contracting_dims={0}
  %slice.140 = bf16[1,4096,8,64]{3,2,1,0} slice(%dot.174), slice={[0:1], [0:4096], [0:8], [0:64]}
  %mul.2548 = bf16[1,4096,8,64]{3,2,1,0} multiply(%slice.140, %mul.2456)
  %slice.141 = bf16[1,4096,8,64]{3,2,1,0} slice(%dot.174), slice={[0:1], [0:4096], [0:8], [64:128]}
  %mul.2557 = bf16[1,4096,8,64]{3,2,1,0} multiply(%slice.141, %mul.2460)
  %sub.73 = bf16[1,4096,8,64]{3,2,1,0} subtract(%mul.2548, %mul.2557)
  %mul.2560 = bf16[1,4096,8,64]{3,2,1,0} multiply(%slice.141, %mul.2456)
  %mul.2563 = bf16[1,4096,8,64]{3,2,1,0} multiply(%slice.140, %mul.2460)
  %add.1409 = bf16[1,4096,8,64]{3,2,1,0} add(%mul.2560, %mul.2563)
  %concatenate.10 = bf16[1,4096,8,128]{3,2,1,0} concatenate(%sub.73, %add.1409), dimensions={3}
  %sharding_constraint.192 = bf16[1,4096,8,128]{3,2,1,0} copy(%concatenate.10)
  %param.20 = bf16[512,8,128]{2,1,0} parameter(21), sharding={devices=[8,1,1]<=[8]}
  %all-gather.10 = bf16[4096,8,128]{2,1,0} all-gather(%param.20), channel_id=15, replica_groups=[1,8]<=[8], dimensions={0}, use_global_device_ids=true
  %dot.175 = bf16[1,4096,8,128]{3,2,1,0} dot(%sharding_constraint.189, %all-gather.10), lhs_contracting_dims={2}, rhs_contracting_dims={0}
  %sharding_constraint.193 = bf16[1,4096,8,128]{3,2,1,0} copy(%dot.175)
  %te_fused_attn_forward_ffi.0 = (bf16[1,4096,32,128]{3,2,1,0}, f32[1,32,4096,1]{3,2,1,0}, u32[2,4]{1,0}, u8[48]{0}) custom-call(%sharding_constraint.190, %sharding_constraint.192, %sharding_constraint.193, %constant.1403, %dynamic-slice.38, /*index=5*/%concatenate.31, %concatenate.36, %constant.1416, %constant.1416, %constant.1416, /*index=10*/%constant.1416, %constant.1416, %constant.1416), custom_call_target="te_fused_attn_forward_ffi", operand_layout_constraints={bf16[1,4096,32,128]{3,2,1,0}, bf16[1,4096,8,128]{3,2,1,0}, bf16[1,4096,8,128]{3,2,1,0}, bf16[0]{0}, u32[2]{0}, s32[2]{0}, s32[2]{0}, f32[0]{0}, f32[0]{0}, f32[0]{0}, f32[0]{0}, f32[0]{0}, f32[0]{0}}, api_version=API_VERSION_TYPED_FFI, backend_config={attn_heads = 32 : i64, bias_batch = 0 : i64, bias_heads = 0 : i64, bias_type = 0 : i64, deterministic = false, dropout_probability = 0.000000e+00 : f64, input_batch = 1 : i64, is_training = true, kv_max_seqlen = 4096 : i64, mask_type = 3 : i64, max_segments_per_seq = 1 : i64, num_gqa_groups = 8 : i64, q_max_seqlen = 4096 : i64, qk_head_dim = 128 : i64, qkv_layout = 9 : i64, scaling_factor = 1.000000e+00 : f64, v_head_dim = 128 : i64, window_size_left = -1 : i64, window_size_right = -1 : i64}
  %get-tuple-element.269 = bf16[1,4096,32,128]{3,2,1,0} get-tuple-element(%te_fused_attn_forward_ffi.0), index=0
  %sharding_constraint.194 = bf16[1,4096,32,128]{3,2,1,0} copy(%get-tuple-element.269)
  %param.21 = bf16[32,128,512]{2,1,0} parameter(19), sharding={devices=[1,1,8]<=[8]}
  %all-gather.12 = bf16[32,128,4096]{2,1,0} all-gather(%param.21), channel_id=17, replica_groups=[1,8]<=[8], dimensions={2}, use_global_device_ids=true
  %dot.176 = bf16[1,4096,4096]{2,1,0} dot(%sharding_constraint.194, %all-gather.12), lhs_contracting_dims={2,3}, rhs_contracting_dims={0,1}
  %sharding_constraint.195 = bf16[1,4096,4096]{2,1,0} copy(%dot.176)
  %add.1410 = bf16[1,4096,4096]{2,1,0} add(%sharding_constraint.187, %sharding_constraint.195)
  %convert_element_type.1217 = f32[1,4096,4096]{2,1,0} convert(%add.1410)
  %square.6 = f32[1,4096,4096]{2,1,0} multiply(%convert_element_type.1217, %convert_element_type.1217)
  %reduce.205 = f32[1,4096]{1,0} reduce(%square.6, %constant.1360), dimensions={2}, to_apply=%region_16.1521
  %div.421 = f32[1,4096]{1,0} multiply(%reduce.205, %broadcast.3412)
  %add.1411 = f32[1,4096]{1,0} add(%div.421, %broadcast.3413)
  %rsqrt.67 = f32[1,4096]{1,0} rsqrt(%add.1411)
  %mul.2564 = f32[1,4096,4096]{2,1,0} broadcast(%rsqrt.67), dimensions={0,1}
  %mul.2565 = f32[1,4096,4096]{2,1,0} multiply(%convert_element_type.1217, %mul.2564)
  %convert_element_type.1218 = bf16[1,4096,4096]{2,1,0} convert(%mul.2565)
  %param.22 = bf16[4096]{0} parameter(16), sharding={replicated}
  %mul.2566 = bf16[1,4096,4096]{2,1,0} broadcast(%param.22), dimensions={2}
  %mul.2567 = bf16[1,4096,4096]{2,1,0} multiply(%convert_element_type.1218, %mul.2566)
  %sharding_constraint.196 = bf16[1,4096,4096]{2,1,0} copy(%mul.2567)
  %param.23 = bf16[512,8]{1,0} parameter(12), sharding={devices=[8,1]<=[8]}
  %all-gather.13 = bf16[4096,8]{1,0} all-gather(%param.23), channel_id=18, replica_groups=[1,8]<=[8], dimensions={0}, use_global_device_ids=true
  %dot.177 = bf16[1,4096,8]{2,1,0} dot(%sharding_constraint.196, %all-gather.13), lhs_contracting_dims={2}, rhs_contracting_dims={0}
  %sharding_constraint.197 = bf16[1,4096,8]{2,1,0} copy(%dot.177)
  %top_k.3 = bf16[4096,8]{1,0} reshape(%sharding_constraint.197)
  %top_k.4 = (bf16[4096,2]{1,0}, s32[4096,2]{1,0}) custom-call(%top_k.3), custom_call_target="TopK", called_computations={%compare_greater_than.0.1540.clone}
  %get-tuple-element.270 = bf16[4096,2]{1,0} get-tuple-element(%top_k.4), index=0
  %get-tuple-element.271 = s32[4096,2]{1,0} get-tuple-element(%top_k.4), index=1
  %add.1412 = s32[4096,2]{1,0} add(%get-tuple-element.271, %broadcast.3418)
  %sort.65 = (bf16[4096,2]{1,0}, s32[4096,2]{1,0}) sort(%get-tuple-element.270, %add.1412), dimensions={1}, is_stable=true, to_apply=%compare-value-and-index.0
  %get-tuple-element.273 = s32[4096,2]{1,0} get-tuple-element(%sort.65), index=1
  %slice.144 = s32[4096,2]{1,0} slice(%get-tuple-element.273), slice={[0:4096], [0:2]}
  %top_k.5 = s32[1,4096,2]{2,1,0} reshape(%slice.144)
  %lt.4 = pred[1,4096,2]{2,1,0} compare(%top_k.5, %broadcast.3419), direction=LT
  %add.1414 = s32[1,4096,2]{2,1,0} add(%top_k.5, %broadcast.3420)
  %select_n.261 = s32[1,4096,2]{2,1,0} select(%lt.4, %add.1414, %top_k.5)
  %broadcast_in_dim.523 = s32[1,4096,2,1]{3,2,1,0} reshape(%select_n.261)
  %concatenate.13 = s32[1,4096,2,3]{3,2,1,0} concatenate(%add.1356, %iota.1928, %broadcast_in_dim.523), dimensions={3}
  %subtract.5 = s32[1,4096,2,3]{3,2,1,0} subtract(%concatenate.13, %broadcast.3428)
  %scatter.131 = u32[1,4096,8]{2,1,0} scatter(%dynamic-slice.43, %subtract.5, %add.1401), update_window_dims={}, inserted_window_dims={0,1,2}, scatter_dims_to_operand_dims={0,1,2}, index_vector_dim=3, to_apply=%region_17.1568.clone
  %gather.1 = u32[1,4096,2]{2,1,0} gather(%scatter.131, %subtract.5), offset_dims={}, collapsed_slice_dims={0,1,2}, start_index_map={0,1,2}, index_vector_dim=3, slice_sizes={1,1,1}
  %eq.1866 = pred[1,4096,2]{2,1,0} compare(%add.1401, %gather.1), direction=EQ
  %get-tuple-element.272 = bf16[4096,2]{1,0} get-tuple-element(%sort.65), index=0
  %slice.143 = bf16[4096,2]{1,0} slice(%get-tuple-element.272), slice={[0:4096], [0:2]}
  %convert_element_type.1219 = f32[4096,2]{1,0} convert(%slice.143)
  %convert_element_type.1220 = f32[1,4096,2]{2,1,0} reshape(%convert_element_type.1219)
  %reduce.206 = f32[4096]{0} reduce(%convert_element_type.1219, %constant.1450), dimensions={1}, to_apply=%region_18.1577
  %sub.74 = f32[1,4096]{1,0} reshape(%reduce.206)
  %sub.75 = f32[1,4096,2]{2,1,0} broadcast(%sub.74), dimensions={0,1}
  %sub.76 = f32[1,4096,2]{2,1,0} subtract(%convert_element_type.1220, %sub.75)
  %exp.128 = f32[1,4096,2]{2,1,0} exponential(%sub.76)
  %reduce.207 = f32[1,4096]{1,0} reduce(%exp.128, %constant.1360), dimensions={2}, to_apply=%region_19.1586
  %div.422 = f32[1,4096,2]{2,1,0} broadcast(%reduce.207), dimensions={0,1}
  %div.423 = f32[1,4096,2]{2,1,0} divide(%exp.128, %div.422)
  %convert_element_type.1221 = bf16[1,4096,2]{2,1,0} convert(%div.423)
  %select_n.262 = bf16[1,4096,2]{2,1,0} select(%eq.1866, %convert_element_type.1221, %broadcast.3427)
  %scatter.132 = bf16[1,4096,8]{2,1,0} scatter(%broadcast.3379, %subtract.5, %select_n.262), update_window_dims={}, inserted_window_dims={0,1,2}, scatter_dims_to_operand_dims={0,1,2}, index_vector_dim=3, to_apply=%region_20.1595.clone
  %eq.1872 = s32[1,4096,2,8]{3,2,1,0} broadcast(%top_k.5), dimensions={0,1,2}
  %iota.1959 = s32[1,4096,2,8]{3,2,1,0} iota(), iota_dimension=3
  %eq.1873 = pred[1,4096,2,8]{3,2,1,0} compare(%eq.1872, %iota.1959), direction=EQ
  %convert_element_type.1222 = s32[1,4096,2,8]{3,2,1,0} convert(%eq.1873)
  %reshape.9308 = s32[1,8192,8]{2,1,0} reshape(%convert_element_type.1222)
  %sharding_constraint.198 = s32[1,8192,8]{2,1,0} copy(%reshape.9308)
  %reduce-window.1 = s32[1,8192,8]{2,1,0} reduce-window(%sharding_constraint.198, %constant.1181), window={size=1x8192x1 pad=0_0x8191_0x0_0}, to_apply=%region_21.1607
  %reshape.9310 = s32[1,4096,2,8]{3,2,1,0} reshape(%reduce-window.1)
  %sharding_constraint.199 = s32[1,4096,2,8]{3,2,1,0} copy(%reshape.9310)
  %le.4 = pred[1,4096,2,8]{3,2,1,0} compare(%sharding_constraint.199, %broadcast.3429), direction=LE
  %mul.2568 = s32[1,4096,2,8]{3,2,1,0} select(%le.4, %convert_element_type.1222, %broadcast.3430)
  %reduce.208 = s32[1,4096,8]{2,1,0} reduce(%mul.2568, %constant.1181), dimensions={2}, to_apply=%region_22.1616
  %convert_element_type.1223 = bf16[1,4096,8]{2,1,0} convert(%reduce.208)
  %mul.2569 = bf16[1,4096,8]{2,1,0} multiply(%scatter.132, %convert_element_type.1223)
  %mul.2570 = bf16[1,4096,8,1025]{3,2,1,0} broadcast(%mul.2569), dimensions={0,1,2}
  %mul.2571 = s32[1,8192,8]{2,1,0} multiply(%sharding_constraint.198, %reduce-window.1)
  %reshape.9311 = s32[1,4096,2,8]{3,2,1,0} reshape(%mul.2571)
  %reduce.209 = s32[1,4096,8]{2,1,0} reduce(%reshape.9311, %constant.1181), dimensions={2}, to_apply=%region_23.1626
  %mul.2572 = s32[1,4096,8]{2,1,0} multiply(%reduce.209, %reduce.208)
  %eq.1874 = s32[1,4096,8,1025]{3,2,1,0} broadcast(%mul.2572), dimensions={0,1,2}
  %iota.1960 = s32[1,4096,8,1025]{3,2,1,0} iota(), iota_dimension=3
  %eq.1875 = pred[1,4096,8,1025]{3,2,1,0} compare(%eq.1874, %iota.1960), direction=EQ
  %convert_element_type.1224 = s32[1,4096,8,1025]{3,2,1,0} convert(%eq.1875)
  %convert_element_type.1225 = bf16[1,4096,8,1025]{3,2,1,0} convert(%convert_element_type.1224)
  %mul.2573 = bf16[1,4096,8,1025]{3,2,1,0} multiply(%mul.2570, %convert_element_type.1225)
  %slice.145 = bf16[1,4096,8,1024]{3,2,1,0} slice(%mul.2573), slice={[0:1], [0:4096], [0:8], [1:1025]}
  %sharding_constraint.200 = bf16[1,4096,8,1024]{3,2,1,0} copy(%slice.145)
  %convert_element_type.1226 = pred[1,4096,8,1024]{3,2,1,0} compare(%slice.145, %broadcast.3431), direction=NE
  %sharding_constraint.201 = pred[1,4096,8,1024]{3,2,1,0} copy(%convert_element_type.1226)
  %dot_general.37 = bf16[1,4096,8,1024]{3,2,1,0} convert(%sharding_constraint.201)
  %dot.178 = bf16[1,8,1024,4096]{3,2,1,0} dot(%dot_general.37, %sharding_constraint.196), lhs_batch_dims={0}, lhs_contracting_dims={1}, rhs_batch_dims={0}, rhs_contracting_dims={1}
  %reshape.9314 = bf16[1,8,1,1024,4096]{4,3,2,1,0} reshape(%dot.178)
  %all-to-all.2 = bf16[1,8,1,1024,4096]{4,3,2,1,0} all-to-all(%reshape.9314), channel_id=22, replica_groups=[1,8]<=[8], dimensions={1}
  %transpose.8 = bf16[8,1,1,1024,4096]{4,3,2,0,1} transpose(%all-to-all.2), dimensions={1,0,2,3,4}
  %reshape.9315 = bf16[8,1,1024,4096]{3,2,1,0} reshape(%transpose.8)
  %transpose.9 = bf16[1,8,1024,4096]{3,2,0,1} transpose(%reshape.9315), dimensions={1,0,2,3}
  %sharding_constraint.202 = bf16[1,8,1024,4096]{3,2,0,1} copy(%transpose.9)
  %param.24 = bf16[1,4096,14336]{2,1,0} parameter(13), sharding={devices=[8,1,1]<=[8]}
  %sharding_constraint.203 = bf16[1,4096,14336]{2,1,0} copy(%param.24)
  %dot.179 = bf16[1,8,1024,14336]{3,2,1,0} dot(%sharding_constraint.202, %sharding_constraint.203), lhs_batch_dims={0}, lhs_contracting_dims={3}, rhs_batch_dims={0}, rhs_contracting_dims={1}
  %sharding_constraint.204 = bf16[1,8,1024,14336]{3,2,1,0} copy(%dot.179)
  %neg.159 = bf16[1,8,1024,14336]{3,2,1,0} negate(%sharding_constraint.204)
  %exp.129 = bf16[1,8,1024,14336]{3,2,1,0} exponential(%neg.159)
  %add.1419 = bf16[1,8,1024,14336]{3,2,1,0} add(%exp.129, %jit_silu_.0)
  %div.424 = bf16[1,8,1024,14336]{3,2,1,0} divide(%jit_silu_.0, %add.1419)
  %mul.2574 = bf16[1,8,1024,14336]{3,2,1,0} multiply(%sharding_constraint.204, %div.424)
  %param.25 = bf16[1,4096,14336]{2,1,0} parameter(14), sharding={devices=[8,1,1]<=[8]}
  %sharding_constraint.205 = bf16[1,4096,14336]{2,1,0} copy(%param.25)
  %dot.180 = bf16[1,8,1024,14336]{3,2,1,0} dot(%sharding_constraint.202, %sharding_constraint.205), lhs_batch_dims={0}, lhs_contracting_dims={3}, rhs_batch_dims={0}, rhs_contracting_dims={1}
  %sharding_constraint.206 = bf16[1,8,1024,14336]{3,2,1,0} copy(%dot.180)
  %mul.2575 = bf16[1,8,1024,14336]{3,2,1,0} multiply(%mul.2574, %sharding_constraint.206)
  %param.26 = bf16[1,14336,4096]{2,1,0} parameter(15), sharding={devices=[8,1,1]<=[8]}
  %sharding_constraint.207 = bf16[1,14336,4096]{2,1,0} copy(%param.26)
  %dot.181 = bf16[1,8,1024,4096]{3,2,1,0} dot(%mul.2575, %sharding_constraint.207), lhs_batch_dims={0}, lhs_contracting_dims={3}, rhs_batch_dims={0}, rhs_contracting_dims={1}
  %sharding_constraint.208 = bf16[1,8,1024,4096]{3,2,1,0} copy(%dot.181)
  %reshape.9318 = bf16[1,8,1,1024,4096]{4,3,2,1,0} reshape(%sharding_constraint.208)
  %all-to-all.3 = bf16[1,8,1,1024,4096]{4,3,2,1,0} all-to-all(%reshape.9318), channel_id=23, replica_groups=[1,8]<=[8], dimensions={1}
  %transpose.10 = bf16[8,1,1,1024,4096]{4,3,2,0,1} transpose(%all-to-all.3), dimensions={1,0,2,3,4}
  %reshape.9319 = bf16[8,1,1024,4096]{3,2,1,0} reshape(%transpose.10)
  %dot.182 = bf16[1,4096,4096]{2,1,0} dot(%sharding_constraint.200, %reshape.9319), lhs_batch_dims={0}, lhs_contracting_dims={3,2}, rhs_batch_dims={1}, rhs_contracting_dims={2,0}
  %sharding_constraint.209 = bf16[1,4096,4096]{2,1,0} copy(%dot.182)
  %add.1420 = bf16[1,4096,4096]{2,1,0} add(%sharding_constraint.209, %add.1410)
  %sharding_constraint.210 = bf16[1,4096,4096]{2,1,0} copy(%add.1420)
  %sharding_constraint.211 = bf16[1,4096,4096]{2,1,0} copy(%sharding_constraint.210)
  %convert_element_type.1228 = f32[1,4096,4096]{2,1,0} convert(%sharding_constraint.211)
  %square.7 = f32[1,4096,4096]{2,1,0} multiply(%convert_element_type.1228, %convert_element_type.1228)
  %reduce.210 = f32[1,4096]{1,0} reduce(%square.7, %constant.1360), dimensions={2}, to_apply=%region_24.1668
  %div.425 = f32[1,4096]{1,0} multiply(%reduce.210, %broadcast.3412)
  %add.1421 = f32[1,4096]{1,0} add(%div.425, %broadcast.3413)
  %rsqrt.68 = f32[1,4096]{1,0} rsqrt(%add.1421)
  %mul.2576 = f32[1,4096,4096]{2,1,0} broadcast(%rsqrt.68), dimensions={0,1}
  %mul.2577 = f32[1,4096,4096]{2,1,0} multiply(%convert_element_type.1228, %mul.2576)
  %convert_element_type.1229 = bf16[1,4096,4096]{2,1,0} convert(%mul.2577)
  %param.27 = bf16[4096]{0} parameter(127), sharding={replicated}
  %mul.2578 = bf16[1,4096,4096]{2,1,0} broadcast(%param.27), dimensions={2}
  %mul.2579 = bf16[1,4096,4096]{2,1,0} multiply(%convert_element_type.1229, %mul.2578)
  %sharding_constraint.212 = bf16[1,4096,4096]{2,1,0} copy(%mul.2579)
  %sharding_constraint.213 = bf16[1,4096,4096]{2,1,0} copy(%sharding_constraint.212)
  %param.28 = bf16[512,32,128]{2,1,0} parameter(130), sharding={devices=[8,1,1]<=[8]}
  %all-gather.15 = bf16[4096,32,128]{2,1,0} all-gather(%param.28), channel_id=24, replica_groups=[1,8]<=[8], dimensions={0}, use_global_device_ids=true
  %dot.183 = bf16[1,4096,32,128]{3,2,1,0} dot(%sharding_constraint.213, %all-gather.15), lhs_contracting_dims={2}, rhs_contracting_dims={0}
  %slice.146 = bf16[1,4096,32,64]{3,2,1,0} slice(%dot.183), slice={[0:1], [0:4096], [0:32], [0:64]}
  %mul.2583 = bf16[1,4096,32,64]{3,2,1,0} multiply(%slice.146, %mul.2435)
  %slice.147 = bf16[1,4096,32,64]{3,2,1,0} slice(%dot.183), slice={[0:1], [0:4096], [0:32], [64:128]}
  %mul.2586 = bf16[1,4096,32,64]{3,2,1,0} multiply(%slice.147, %mul.2438)
  %sub.77 = bf16[1,4096,32,64]{3,2,1,0} subtract(%mul.2583, %mul.2586)
  %mul.2589 = bf16[1,4096,32,64]{3,2,1,0} multiply(%slice.147, %mul.2435)
  %mul.2592 = bf16[1,4096,32,64]{3,2,1,0} multiply(%slice.146, %mul.2438)
  %add.1422 = bf16[1,4096,32,64]{3,2,1,0} add(%mul.2589, %mul.2592)
  %concatenate.17 = bf16[1,4096,32,128]{3,2,1,0} concatenate(%sub.77, %add.1422), dimensions={3}
  %sharding_constraint.214 = bf16[1,4096,32,128]{3,2,1,0} copy(%concatenate.17)
  %param.29 = bf16[512,8,128]{2,1,0} parameter(128), sharding={devices=[8,1,1]<=[8]}
  %all-gather.16 = bf16[4096,8,128]{2,1,0} all-gather(%param.29), channel_id=25, replica_groups=[1,8]<=[8], dimensions={0}, use_global_device_ids=true
  %dot.184 = bf16[1,4096,8,128]{3,2,1,0} dot(%sharding_constraint.213, %all-gather.16), lhs_contracting_dims={2}, rhs_contracting_dims={0}
  %slice.148 = bf16[1,4096,8,64]{3,2,1,0} slice(%dot.184), slice={[0:1], [0:4096], [0:8], [0:64]}
  %mul.2596 = bf16[1,4096,8,64]{3,2,1,0} multiply(%slice.148, %mul.2456)
  %slice.149 = bf16[1,4096,8,64]{3,2,1,0} slice(%dot.184), slice={[0:1], [0:4096], [0:8], [64:128]}
  %mul.2599 = bf16[1,4096,8,64]{3,2,1,0} multiply(%slice.149, %mul.2460)
  %sub.78 = bf16[1,4096,8,64]{3,2,1,0} subtract(%mul.2596, %mul.2599)
  %mul.2612 = bf16[1,4096,8,64]{3,2,1,0} multiply(%slice.149, %mul.2456)
  %mul.2617 = bf16[1,4096,8,64]{3,2,1,0} multiply(%slice.148, %mul.2460)
  %add.1423 = bf16[1,4096,8,64]{3,2,1,0} add(%mul.2612, %mul.2617)
  %concatenate.18 = bf16[1,4096,8,128]{3,2,1,0} concatenate(%sub.78, %add.1423), dimensions={3}
  %sharding_constraint.216 = bf16[1,4096,8,128]{3,2,1,0} copy(%concatenate.18)
  %param.30 = bf16[512,8,128]{2,1,0} parameter(131), sharding={devices=[8,1,1]<=[8]}
  %all-gather.17 = bf16[4096,8,128]{2,1,0} all-gather(%param.30), channel_id=26, replica_groups=[1,8]<=[8], dimensions={0}, use_global_device_ids=true
  %dot.185 = bf16[1,4096,8,128]{3,2,1,0} dot(%sharding_constraint.213, %all-gather.17), lhs_contracting_dims={2}, rhs_contracting_dims={0}
  %sharding_constraint.217 = bf16[1,4096,8,128]{3,2,1,0} copy(%dot.185)
  %te_fused_attn_forward_ffi.4 = (bf16[1,4096,32,128]{3,2,1,0}, f32[1,32,4096,1]{3,2,1,0}, u32[2,4]{1,0}, u8[48]{0}) custom-call(%sharding_constraint.214, %sharding_constraint.216, %sharding_constraint.217, %constant.1403, %dynamic-slice.38, /*index=5*/%concatenate.31, %concatenate.36, %constant.1416, %constant.1416, %constant.1416, /*index=10*/%constant.1416, %constant.1416, %constant.1416), custom_call_target="te_fused_attn_forward_ffi", operand_layout_constraints={bf16[1,4096,32,128]{3,2,1,0}, bf16[1,4096,8,128]{3,2,1,0}, bf16[1,4096,8,128]{3,2,1,0}, bf16[0]{0}, u32[2]{0}, s32[2]{0}, s32[2]{0}, f32[0]{0}, f32[0]{0}, f32[0]{0}, f32[0]{0}, f32[0]{0}, f32[0]{0}}, api_version=API_VERSION_TYPED_FFI, backend_config={attn_heads = 32 : i64, bias_batch = 0 : i64, bias_heads = 0 : i64, bias_type = 0 : i64, deterministic = false, dropout_probability = 0.000000e+00 : f64, input_batch = 1 : i64, is_training = true, kv_max_seqlen = 4096 : i64, mask_type = 3 : i64, max_segments_per_seq = 1 : i64, num_gqa_groups = 8 : i64, q_max_seqlen = 4096 : i64, qk_head_dim = 128 : i64, qkv_layout = 9 : i64, scaling_factor = 1.000000e+00 : f64, v_head_dim = 128 : i64, window_size_left = -1 : i64, window_size_right = -1 : i64}
  %get-tuple-element.279 = bf16[1,4096,32,128]{3,2,1,0} get-tuple-element(%te_fused_attn_forward_ffi.4), index=0
  %sharding_constraint.218 = bf16[1,4096,32,128]{3,2,1,0} copy(%get-tuple-element.279)
  %param.31 = bf16[32,128,512]{2,1,0} parameter(129), sharding={devices=[1,1,8]<=[8]}
  %all-gather.19 = bf16[32,128,4096]{2,1,0} all-gather(%param.31), channel_id=28, replica_groups=[1,8]<=[8], dimensions={2}, use_global_device_ids=true
  %dot.186 = bf16[1,4096,4096]{2,1,0} dot(%sharding_constraint.218, %all-gather.19), lhs_contracting_dims={2,3}, rhs_contracting_dims={0,1}
  %sharding_constraint.219 = bf16[1,4096,4096]{2,1,0} copy(%dot.186)
  %add.1424 = bf16[1,4096,4096]{2,1,0} add(%sharding_constraint.211, %sharding_constraint.219)
  %convert_element_type.1244 = f32[1,4096,4096]{2,1,0} convert(%add.1424)
  %square.8 = f32[1,4096,4096]{2,1,0} multiply(%convert_element_type.1244, %convert_element_type.1244)
  %reduce.214 = f32[1,4096]{1,0} reduce(%square.8, %constant.1360), dimensions={2}, to_apply=%region_28.1792
  %div.434 = f32[1,4096]{1,0} multiply(%reduce.214, %broadcast.3412)
  %add.1425 = f32[1,4096]{1,0} add(%div.434, %broadcast.3413)
  %rsqrt.69 = f32[1,4096]{1,0} rsqrt(%add.1425)
  %mul.2618 = f32[1,4096,4096]{2,1,0} broadcast(%rsqrt.69), dimensions={0,1}
  %mul.2619 = f32[1,4096,4096]{2,1,0} multiply(%convert_element_type.1244, %mul.2618)
  %convert_element_type.1246 = bf16[1,4096,4096]{2,1,0} convert(%mul.2619)
  %param.32 = bf16[4096]{0} parameter(126), sharding={replicated}
  %mul.2620 = bf16[1,4096,4096]{2,1,0} broadcast(%param.32), dimensions={2}
  %mul.2621 = bf16[1,4096,4096]{2,1,0} multiply(%convert_element_type.1246, %mul.2620)
  %sharding_constraint.220 = bf16[1,4096,4096]{2,1,0} copy(%mul.2621)
  %param.33 = bf16[512,8]{1,0} parameter(122), sharding={devices=[8,1]<=[8]}
  %all-gather.20 = bf16[4096,8]{1,0} all-gather(%param.33), channel_id=29, replica_groups=[1,8]<=[8], dimensions={0}, use_global_device_ids=true
  %dot.187 = bf16[1,4096,8]{2,1,0} dot(%sharding_constraint.220, %all-gather.20), lhs_contracting_dims={2}, rhs_contracting_dims={0}
  %sharding_constraint.221 = bf16[1,4096,8]{2,1,0} copy(%dot.187)
  %top_k.6 = bf16[4096,8]{1,0} reshape(%sharding_constraint.221)
  %top_k.7 = (bf16[4096,2]{1,0}, s32[4096,2]{1,0}) custom-call(%top_k.6), custom_call_target="TopK", called_computations={%compare_greater_than.1.1811.clone}
  %get-tuple-element.280 = bf16[4096,2]{1,0} get-tuple-element(%top_k.7), index=0
  %get-tuple-element.281 = s32[4096,2]{1,0} get-tuple-element(%top_k.7), index=1
  %add.1426 = s32[4096,2]{1,0} add(%get-tuple-element.281, %broadcast.3418)
  %sort.66 = (bf16[4096,2]{1,0}, s32[4096,2]{1,0}) sort(%get-tuple-element.280, %add.1426), dimensions={1}, is_stable=true, to_apply=%compare-value-and-index.1
  %get-tuple-element.283 = s32[4096,2]{1,0} get-tuple-element(%sort.66), index=1
  %slice.152 = s32[4096,2]{1,0} slice(%get-tuple-element.283), slice={[0:4096], [0:2]}
  %top_k.8 = s32[1,4096,2]{2,1,0} reshape(%slice.152)
  %lt.7 = pred[1,4096,2]{2,1,0} compare(%top_k.8, %broadcast.3419), direction=LT
  %add.1427 = s32[1,4096,2]{2,1,0} add(%top_k.8, %broadcast.3420)
  %select_n.266 = s32[1,4096,2]{2,1,0} select(%lt.7, %add.1427, %top_k.8)
  %broadcast_in_dim.526 = s32[1,4096,2,1]{3,2,1,0} reshape(%select_n.266)
  %concatenate.21 = s32[1,4096,2,3]{3,2,1,0} concatenate(%add.1356, %iota.1926, %broadcast_in_dim.526), dimensions={3}
  %subtract.8 = s32[1,4096,2,3]{3,2,1,0} subtract(%concatenate.21, %broadcast.3428)
  %scatter.133 = u32[1,4096,8]{2,1,0} scatter(%dynamic-slice.43, %subtract.8, %add.1401), update_window_dims={}, inserted_window_dims={0,1,2}, scatter_dims_to_operand_dims={0,1,2}, index_vector_dim=3, to_apply=%region_29.1839.clone
  %gather.2 = u32[1,4096,2]{2,1,0} gather(%scatter.133, %subtract.8), offset_dims={}, collapsed_slice_dims={0,1,2}, start_index_map={0,1,2}, index_vector_dim=3, slice_sizes={1,1,1}
  %eq.1879 = pred[1,4096,2]{2,1,0} compare(%add.1401, %gather.2), direction=EQ
  %get-tuple-element.282 = bf16[4096,2]{1,0} get-tuple-element(%sort.66), index=0
  %slice.151 = bf16[4096,2]{1,0} slice(%get-tuple-element.282), slice={[0:4096], [0:2]}
  %convert_element_type.1247 = f32[4096,2]{1,0} convert(%slice.151)
  %convert_element_type.1248 = f32[1,4096,2]{2,1,0} reshape(%convert_element_type.1247)
  %reduce.215 = f32[4096]{0} reduce(%convert_element_type.1247, %constant.1450), dimensions={1}, to_apply=%region_30.1848
  %sub.79 = f32[1,4096]{1,0} reshape(%reduce.215)
  %sub.80 = f32[1,4096,2]{2,1,0} broadcast(%sub.79), dimensions={0,1}
  %sub.81 = f32[1,4096,2]{2,1,0} subtract(%convert_element_type.1248, %sub.80)
  %exp.130 = f32[1,4096,2]{2,1,0} exponential(%sub.81)
  %reduce.216 = f32[1,4096]{1,0} reduce(%exp.130, %constant.1360), dimensions={2}, to_apply=%region_31.1857
  %div.435 = f32[1,4096,2]{2,1,0} broadcast(%reduce.216), dimensions={0,1}
  %div.436 = f32[1,4096,2]{2,1,0} divide(%exp.130, %div.435)
  %convert_element_type.1249 = bf16[1,4096,2]{2,1,0} convert(%div.436)
  %select_n.267 = bf16[1,4096,2]{2,1,0} select(%eq.1879, %convert_element_type.1249, %broadcast.3427)
  %scatter.134 = bf16[1,4096,8]{2,1,0} scatter(%broadcast.3379, %subtract.8, %select_n.267), update_window_dims={}, inserted_window_dims={0,1,2}, scatter_dims_to_operand_dims={0,1,2}, index_vector_dim=3, to_apply=%region_32.1866.clone
  %eq.1881 = s32[1,4096,2,8]{3,2,1,0} broadcast(%top_k.8), dimensions={0,1,2}
  %iota.1971 = s32[1,4096,2,8]{3,2,1,0} iota(), iota_dimension=3
  %eq.1882 = pred[1,4096,2,8]{3,2,1,0} compare(%eq.1881, %iota.1971), direction=EQ
  %convert_element_type.1250 = s32[1,4096,2,8]{3,2,1,0} convert(%eq.1882)
  %reshape.9360 = s32[1,8192,8]{2,1,0} reshape(%convert_element_type.1250)
  %sharding_constraint.222 = s32[1,8192,8]{2,1,0} copy(%reshape.9360)
  %reduce-window.2 = s32[1,8192,8]{2,1,0} reduce-window(%sharding_constraint.222, %constant.1181), window={size=1x8192x1 pad=0_0x8191_0x0_0}, to_apply=%region_33.1878
  %reshape.9362 = s32[1,4096,2,8]{3,2,1,0} reshape(%reduce-window.2)
  %sharding_constraint.223 = s32[1,4096,2,8]{3,2,1,0} copy(%reshape.9362)
  %le.6 = pred[1,4096,2,8]{3,2,1,0} compare(%sharding_constraint.223, %broadcast.3429), direction=LE
  %mul.2622 = s32[1,4096,2,8]{3,2,1,0} select(%le.6, %convert_element_type.1250, %broadcast.3430)
  %reduce.217 = s32[1,4096,8]{2,1,0} reduce(%mul.2622, %constant.1181), dimensions={2}, to_apply=%region_34.1887
  %convert_element_type.1251 = bf16[1,4096,8]{2,1,0} convert(%reduce.217)
  %mul.2623 = bf16[1,4096,8]{2,1,0} multiply(%scatter.134, %convert_element_type.1251)
  %mul.2624 = bf16[1,4096,8,1025]{3,2,1,0} broadcast(%mul.2623), dimensions={0,1,2}
  %mul.2625 = s32[1,8192,8]{2,1,0} multiply(%sharding_constraint.222, %reduce-window.2)
  %reshape.9363 = s32[1,4096,2,8]{3,2,1,0} reshape(%mul.2625)
  %reduce.218 = s32[1,4096,8]{2,1,0} reduce(%reshape.9363, %constant.1181), dimensions={2}, to_apply=%region_35.1897
  %mul.2626 = s32[1,4096,8]{2,1,0} multiply(%reduce.218, %reduce.217)
  %eq.1883 = s32[1,4096,8,1025]{3,2,1,0} broadcast(%mul.2626), dimensions={0,1,2}
  %iota.1972 = s32[1,4096,8,1025]{3,2,1,0} iota(), iota_dimension=3
  %eq.1884 = pred[1,4096,8,1025]{3,2,1,0} compare(%eq.1883, %iota.1972), direction=EQ
  %convert_element_type.1252 = s32[1,4096,8,1025]{3,2,1,0} convert(%eq.1884)
  %convert_element_type.1253 = bf16[1,4096,8,1025]{3,2,1,0} convert(%convert_element_type.1252)
  %mul.2627 = bf16[1,4096,8,1025]{3,2,1,0} multiply(%mul.2624, %convert_element_type.1253)
  %slice.153 = bf16[1,4096,8,1024]{3,2,1,0} slice(%mul.2627), slice={[0:1], [0:4096], [0:8], [1:1025]}
  %sharding_constraint.224 = bf16[1,4096,8,1024]{3,2,1,0} copy(%slice.153)
  %convert_element_type.1254 = pred[1,4096,8,1024]{3,2,1,0} compare(%slice.153, %broadcast.3431), direction=NE
  %sharding_constraint.225 = pred[1,4096,8,1024]{3,2,1,0} copy(%convert_element_type.1254)
  %dot_general.38 = bf16[1,4096,8,1024]{3,2,1,0} convert(%sharding_constraint.225)
  %dot.188 = bf16[1,8,1024,4096]{3,2,1,0} dot(%dot_general.38, %sharding_constraint.220), lhs_batch_dims={0}, lhs_contracting_dims={1}, rhs_batch_dims={0}, rhs_contracting_dims={1}
  %reshape.9366 = bf16[1,8,1,1024,4096]{4,3,2,1,0} reshape(%dot.188)
  %all-to-all.4 = bf16[1,8,1,1024,4096]{4,3,2,1,0} all-to-all(%reshape.9366), channel_id=33, replica_groups=[1,8]<=[8], dimensions={1}
  %transpose.11 = bf16[8,1,1,1024,4096]{4,3,2,0,1} transpose(%all-to-all.4), dimensions={1,0,2,3,4}
  %reshape.9368 = bf16[8,1,1024,4096]{3,2,1,0} reshape(%transpose.11)
  %transpose.12 = bf16[1,8,1024,4096]{3,2,0,1} transpose(%reshape.9368), dimensions={1,0,2,3}
  %sharding_constraint.226 = bf16[1,8,1024,4096]{3,2,0,1} copy(%transpose.12)
  %param.34 = bf16[1,4096,14336]{2,1,0} parameter(123), sharding={devices=[8,1,1]<=[8]}
  %sharding_constraint.227 = bf16[1,4096,14336]{2,1,0} copy(%param.34)
  %dot.189 = bf16[1,8,1024,14336]{3,2,1,0} dot(%sharding_constraint.226, %sharding_constraint.227), lhs_batch_dims={0}, lhs_contracting_dims={3}, rhs_batch_dims={0}, rhs_contracting_dims={1}
  %sharding_constraint.228 = bf16[1,8,1024,14336]{3,2,1,0} copy(%dot.189)
  %neg.160 = bf16[1,8,1024,14336]{3,2,1,0} negate(%sharding_constraint.228)
  %exp.131 = bf16[1,8,1024,14336]{3,2,1,0} exponential(%neg.160)
  %add.1432 = bf16[1,8,1024,14336]{3,2,1,0} add(%exp.131, %jit_silu_.0)
  %div.437 = bf16[1,8,1024,14336]{3,2,1,0} divide(%jit_silu_.0, %add.1432)
  %mul.2628 = bf16[1,8,1024,14336]{3,2,1,0} multiply(%sharding_constraint.228, %div.437)
  %param.35 = bf16[1,4096,14336]{2,1,0} parameter(124), sharding={devices=[8,1,1]<=[8]}
  %sharding_constraint.229 = bf16[1,4096,14336]{2,1,0} copy(%param.35)
  %dot.190 = bf16[1,8,1024,14336]{3,2,1,0} dot(%sharding_constraint.226, %sharding_constraint.229), lhs_batch_dims={0}, lhs_contracting_dims={3}, rhs_batch_dims={0}, rhs_contracting_dims={1}
  %sharding_constraint.230 = bf16[1,8,1024,14336]{3,2,1,0} copy(%dot.190)
  %mul.2629 = bf16[1,8,1024,14336]{3,2,1,0} multiply(%mul.2628, %sharding_constraint.230)
  %param.36 = bf16[1,14336,4096]{2,1,0} parameter(125), sharding={devices=[8,1,1]<=[8]}
  %sharding_constraint.231 = bf16[1,14336,4096]{2,1,0} copy(%param.36)
  %dot.191 = bf16[1,8,1024,4096]{3,2,1,0} dot(%mul.2629, %sharding_constraint.231), lhs_batch_dims={0}, lhs_contracting_dims={3}, rhs_batch_dims={0}, rhs_contracting_dims={1}
  %sharding_constraint.232 = bf16[1,8,1024,4096]{3,2,1,0} copy(%dot.191)
  %reshape.9372 = bf16[1,8,1,1024,4096]{4,3,2,1,0} reshape(%sharding_constraint.232)
  %all-to-all.5 = bf16[1,8,1,1024,4096]{4,3,2,1,0} all-to-all(%reshape.9372), channel_id=34, replica_groups=[1,8]<=[8], dimensions={1}
  %transpose.13 = bf16[8,1,1,1024,4096]{4,3,2,0,1} transpose(%all-to-all.5), dimensions={1,0,2,3,4}
  %reshape.9373 = bf16[8,1,1024,4096]{3,2,1,0} reshape(%transpose.13)
  %dot.192 = bf16[1,4096,4096]{2,1,0} dot(%sharding_constraint.224, %reshape.9373), lhs_batch_dims={0}, lhs_contracting_dims={3,2}, rhs_batch_dims={1}, rhs_contracting_dims={2,0}
  %sharding_constraint.233 = bf16[1,4096,4096]{2,1,0} copy(%dot.192)
  %add.1433 = bf16[1,4096,4096]{2,1,0} add(%sharding_constraint.233, %add.1424)
  %sharding_constraint.234 = bf16[1,4096,4096]{2,1,0} copy(%add.1433)
  %sharding_constraint.235 = bf16[1,4096,4096]{2,1,0} copy(%sharding_constraint.234)
  %convert_element_type.1255 = f32[1,4096,4096]{2,1,0} convert(%sharding_constraint.235)
  %square.9 = f32[1,4096,4096]{2,1,0} multiply(%convert_element_type.1255, %convert_element_type.1255)
  %reduce.219 = f32[1,4096]{1,0} reduce(%square.9, %constant.1360), dimensions={2}, to_apply=%region_36.1939
  %div.438 = f32[1,4096]{1,0} multiply(%reduce.219, %broadcast.3412)
  %add.1434 = f32[1,4096]{1,0} add(%div.438, %broadcast.3413)
  %rsqrt.70 = f32[1,4096]{1,0} rsqrt(%add.1434)
  %mul.2630 = f32[1,4096,4096]{2,1,0} broadcast(%rsqrt.70), dimensions={0,1}
  %mul.2631 = f32[1,4096,4096]{2,1,0} multiply(%convert_element_type.1255, %mul.2630)
  %convert_element_type.1256 = bf16[1,4096,4096]{2,1,0} convert(%mul.2631)
  %param.37 = bf16[4096]{0} parameter(237), sharding={replicated}
  %mul.2632 = bf16[1,4096,4096]{2,1,0} broadcast(%param.37), dimensions={2}
  %mul.2633 = bf16[1,4096,4096]{2,1,0} multiply(%convert_element_type.1256, %mul.2632)
  %sharding_constraint.236 = bf16[1,4096,4096]{2,1,0} copy(%mul.2633)
  %sharding_constraint.237 = bf16[1,4096,4096]{2,1,0} copy(%sharding_constraint.236)
  %param.38 = bf16[512,32,128]{2,1,0} parameter(240), sharding={devices=[8,1,1]<=[8]}
  %all-gather.22 = bf16[4096,32,128]{2,1,0} all-gather(%param.38), channel_id=35, replica_groups=[1,8]<=[8], dimensions={0}, use_global_device_ids=true
  %dot.193 = bf16[1,4096,32,128]{3,2,1,0} dot(%sharding_constraint.237, %all-gather.22), lhs_contracting_dims={2}, rhs_contracting_dims={0}
  %slice.154 = bf16[1,4096,32,64]{3,2,1,0} slice(%dot.193), slice={[0:1], [0:4096], [0:32], [0:64]}
  %mul.2637 = bf16[1,4096,32,64]{3,2,1,0} multiply(%slice.154, %mul.2435)
  %slice.155 = bf16[1,4096,32,64]{3,2,1,0} slice(%dot.193), slice={[0:1], [0:4096], [0:32], [64:128]}
  %mul.2640 = bf16[1,4096,32,64]{3,2,1,0} multiply(%slice.155, %mul.2438)
  %sub.82 = bf16[1,4096,32,64]{3,2,1,0} subtract(%mul.2637, %mul.2640)
  %mul.2643 = bf16[1,4096,32,64]{3,2,1,0} multiply(%slice.155, %mul.2435)
  %mul.2646 = bf16[1,4096,32,64]{3,2,1,0} multiply(%slice.154, %mul.2438)
  %add.1435 = bf16[1,4096,32,64]{3,2,1,0} add(%mul.2643, %mul.2646)
  %concatenate.25 = bf16[1,4096,32,128]{3,2,1,0} concatenate(%sub.82, %add.1435), dimensions={3}
  %sharding_constraint.238 = bf16[1,4096,32,128]{3,2,1,0} copy(%concatenate.25)
  %param.39 = bf16[512,8,128]{2,1,0} parameter(238), sharding={devices=[8,1,1]<=[8]}
  %all-gather.23 = bf16[4096,8,128]{2,1,0} all-gather(%param.39), channel_id=36, replica_groups=[1,8]<=[8], dimensions={0}, use_global_device_ids=true
  %dot.194 = bf16[1,4096,8,128]{3,2,1,0} dot(%sharding_constraint.237, %all-gather.23), lhs_contracting_dims={2}, rhs_contracting_dims={0}
  %slice.156 = bf16[1,4096,8,64]{3,2,1,0} slice(%dot.194), slice={[0:1], [0:4096], [0:8], [0:64]}
  %mul.2650 = bf16[1,4096,8,64]{3,2,1,0} multiply(%slice.156, %mul.2456)
  %slice.157 = bf16[1,4096,8,64]{3,2,1,0} slice(%dot.194), slice={[0:1], [0:4096], [0:8], [64:128]}
  %mul.2653 = bf16[1,4096,8,64]{3,2,1,0} multiply(%slice.157, %mul.2460)
  %sub.83 = bf16[1,4096,8,64]{3,2,1,0} subtract(%mul.2650, %mul.2653)
  %mul.2656 = bf16[1,4096,8,64]{3,2,1,0} multiply(%slice.157, %mul.2456)
  %mul.2659 = bf16[1,4096,8,64]{3,2,1,0} multiply(%slice.156, %mul.2460)
  %add.1436 = bf16[1,4096,8,64]{3,2,1,0} add(%mul.2656, %mul.2659)
  %concatenate.26 = bf16[1,4096,8,128]{3,2,1,0} concatenate(%sub.83, %add.1436), dimensions={3}
  %sharding_constraint.240 = bf16[1,4096,8,128]{3,2,1,0} copy(%concatenate.26)
  %param.40 = bf16[512,8,128]{2,1,0} parameter(241), sharding={devices=[8,1,1]<=[8]}
  %all-gather.24 = bf16[4096,8,128]{2,1,0} all-gather(%param.40), channel_id=37, replica_groups=[1,8]<=[8], dimensions={0}, use_global_device_ids=true
  %dot.195 = bf16[1,4096,8,128]{3,2,1,0} dot(%sharding_constraint.237, %all-gather.24), lhs_contracting_dims={2}, rhs_contracting_dims={0}
  %sharding_constraint.241 = bf16[1,4096,8,128]{3,2,1,0} copy(%dot.195)
  %te_fused_attn_forward_ffi.8 = (bf16[1,4096,32,128]{3,2,1,0}, f32[1,32,4096,1]{3,2,1,0}, u32[2,4]{1,0}, u8[48]{0}) custom-call(%sharding_constraint.238, %sharding_constraint.240, %sharding_constraint.241, %constant.1403, %dynamic-slice.38, /*index=5*/%concatenate.31, %concatenate.36, %constant.1416, %constant.1416, %constant.1416, /*index=10*/%constant.1416, %constant.1416, %constant.1416), custom_call_target="te_fused_attn_forward_ffi", operand_layout_constraints={bf16[1,4096,32,128]{3,2,1,0}, bf16[1,4096,8,128]{3,2,1,0}, bf16[1,4096,8,128]{3,2,1,0}, bf16[0]{0}, u32[2]{0}, s32[2]{0}, s32[2]{0}, f32[0]{0}, f32[0]{0}, f32[0]{0}, f32[0]{0}, f32[0]{0}, f32[0]{0}}, api_version=API_VERSION_TYPED_FFI, backend_config={attn_heads = 32 : i64, bias_batch = 0 : i64, bias_heads = 0 : i64, bias_type = 0 : i64, deterministic = false, dropout_probability = 0.000000e+00 : f64, input_batch = 1 : i64, is_training = true, kv_max_seqlen = 4096 : i64, mask_type = 3 : i64, max_segments_per_seq = 1 : i64, num_gqa_groups = 8 : i64, q_max_seqlen = 4096 : i64, qk_head_dim = 128 : i64, qkv_layout = 9 : i64, scaling_factor = 1.000000e+00 : f64, v_head_dim = 128 : i64, window_size_left = -1 : i64, window_size_right = -1 : i64}
  %get-tuple-element.289 = bf16[1,4096,32,128]{3,2,1,0} get-tuple-element(%te_fused_attn_forward_ffi.8), index=0
  %sharding_constraint.242 = bf16[1,4096,32,128]{3,2,1,0} copy(%get-tuple-element.289)
  %param.41 = bf16[32,128,512]{2,1,0} parameter(239), sharding={devices=[1,1,8]<=[8]}
  %all-gather.26 = bf16[32,128,4096]{2,1,0} all-gather(%param.41), channel_id=39, replica_groups=[1,8]<=[8], dimensions={2}, use_global_device_ids=true
  %dot.196 = bf16[1,4096,4096]{2,1,0} dot(%sharding_constraint.242, %all-gather.26), lhs_contracting_dims={2,3}, rhs_contracting_dims={0,1}
  %sharding_constraint.243 = bf16[1,4096,4096]{2,1,0} copy(%dot.196)
  %add.1437 = bf16[1,4096,4096]{2,1,0} add(%sharding_constraint.235, %sharding_constraint.243)
  %convert_element_type.1267 = f32[1,4096,4096]{2,1,0} convert(%add.1437)
  %square.10 = f32[1,4096,4096]{2,1,0} multiply(%convert_element_type.1267, %convert_element_type.1267)
  %reduce.223 = f32[1,4096]{1,0} reduce(%square.10, %constant.1360), dimensions={2}, to_apply=%region_40.2063
  %div.447 = f32[1,4096]{1,0} multiply(%reduce.223, %broadcast.3412)
  %add.1439 = f32[1,4096]{1,0} add(%div.447, %broadcast.3413)
  %rsqrt.71 = f32[1,4096]{1,0} rsqrt(%add.1439)
  %mul.2660 = f32[1,4096,4096]{2,1,0} broadcast(%rsqrt.71), dimensions={0,1}
  %mul.2661 = f32[1,4096,4096]{2,1,0} multiply(%convert_element_type.1267, %mul.2660)
  %convert_element_type.1268 = bf16[1,4096,4096]{2,1,0} convert(%mul.2661)
  %param.42 = bf16[4096]{0} parameter(236), sharding={replicated}
  %mul.2662 = bf16[1,4096,4096]{2,1,0} broadcast(%param.42), dimensions={2}
  %mul.2663 = bf16[1,4096,4096]{2,1,0} multiply(%convert_element_type.1268, %mul.2662)
  %sharding_constraint.244 = bf16[1,4096,4096]{2,1,0} copy(%mul.2663)
  %param.43 = bf16[512,8]{1,0} parameter(232), sharding={devices=[8,1]<=[8]}
  %all-gather.27 = bf16[4096,8]{1,0} all-gather(%param.43), channel_id=40, replica_groups=[1,8]<=[8], dimensions={0}, use_global_device_ids=true
  %dot.197 = bf16[1,4096,8]{2,1,0} dot(%sharding_constraint.244, %all-gather.27), lhs_contracting_dims={2}, rhs_contracting_dims={0}
  %sharding_constraint.245 = bf16[1,4096,8]{2,1,0} copy(%dot.197)
  %top_k.9 = bf16[4096,8]{1,0} reshape(%sharding_constraint.245)
  %top_k.10 = (bf16[4096,2]{1,0}, s32[4096,2]{1,0}) custom-call(%top_k.9), custom_call_target="TopK", called_computations={%compare_greater_than.2.2082.clone}
  %get-tuple-element.290 = bf16[4096,2]{1,0} get-tuple-element(%top_k.10), index=0
  %get-tuple-element.291 = s32[4096,2]{1,0} get-tuple-element(%top_k.10), index=1
  %add.1440 = s32[4096,2]{1,0} add(%get-tuple-element.291, %broadcast.3418)
  %sort.67 = (bf16[4096,2]{1,0}, s32[4096,2]{1,0}) sort(%get-tuple-element.290, %add.1440), dimensions={1}, is_stable=true, to_apply=%compare-value-and-index.2
  %get-tuple-element.293 = s32[4096,2]{1,0} get-tuple-element(%sort.67), index=1
  %slice.160 = s32[4096,2]{1,0} slice(%get-tuple-element.293), slice={[0:4096], [0:2]}
  %top_k.11 = s32[1,4096,2]{2,1,0} reshape(%slice.160)
  %lt.10 = pred[1,4096,2]{2,1,0} compare(%top_k.11, %broadcast.3419), direction=LT
  %add.1441 = s32[1,4096,2]{2,1,0} add(%top_k.11, %broadcast.3420)
  %select_n.271 = s32[1,4096,2]{2,1,0} select(%lt.10, %add.1441, %top_k.11)
  %broadcast_in_dim.529 = s32[1,4096,2,1]{3,2,1,0} reshape(%select_n.271)
  %concatenate.29 = s32[1,4096,2,3]{3,2,1,0} concatenate(%add.1356, %iota.1924, %broadcast_in_dim.529), dimensions={3}
  %subtract.11 = s32[1,4096,2,3]{3,2,1,0} subtract(%concatenate.29, %broadcast.3428)
  %scatter.135 = u32[1,4096,8]{2,1,0} scatter(%dynamic-slice.43, %subtract.11, %add.1401), update_window_dims={}, inserted_window_dims={0,1,2}, scatter_dims_to_operand_dims={0,1,2}, index_vector_dim=3, to_apply=%region_41.2110.clone
  %gather.3 = u32[1,4096,2]{2,1,0} gather(%scatter.135, %subtract.11), offset_dims={}, collapsed_slice_dims={0,1,2}, start_index_map={0,1,2}, index_vector_dim=3, slice_sizes={1,1,1}
  %eq.1888 = pred[1,4096,2]{2,1,0} compare(%add.1401, %gather.3), direction=EQ
  %get-tuple-element.292 = bf16[4096,2]{1,0} get-tuple-element(%sort.67), index=0
  %slice.159 = bf16[4096,2]{1,0} slice(%get-tuple-element.292), slice={[0:4096], [0:2]}
  %convert_element_type.1269 = f32[4096,2]{1,0} convert(%slice.159)
  %convert_element_type.1270 = f32[1,4096,2]{2,1,0} reshape(%convert_element_type.1269)
  %reduce.224 = f32[4096]{0} reduce(%convert_element_type.1269, %constant.1450), dimensions={1}, to_apply=%region_42.2119
  %sub.84 = f32[1,4096]{1,0} reshape(%reduce.224)
  %sub.85 = f32[1,4096,2]{2,1,0} broadcast(%sub.84), dimensions={0,1}
  %sub.86 = f32[1,4096,2]{2,1,0} subtract(%convert_element_type.1270, %sub.85)
  %exp.132 = f32[1,4096,2]{2,1,0} exponential(%sub.86)
  %reduce.225 = f32[1,4096]{1,0} reduce(%exp.132, %constant.1360), dimensions={2}, to_apply=%region_43.2128
  %div.448 = f32[1,4096,2]{2,1,0} broadcast(%reduce.225), dimensions={0,1}
  %div.449 = f32[1,4096,2]{2,1,0} divide(%exp.132, %div.448)
  %convert_element_type.1271 = bf16[1,4096,2]{2,1,0} convert(%div.449)
  %select_n.272 = bf16[1,4096,2]{2,1,0} select(%eq.1888, %convert_element_type.1271, %broadcast.3427)
  %scatter.136 = bf16[1,4096,8]{2,1,0} scatter(%broadcast.3379, %subtract.11, %select_n.272), update_window_dims={}, inserted_window_dims={0,1,2}, scatter_dims_to_operand_dims={0,1,2}, index_vector_dim=3, to_apply=%region_44.2137.clone
  %eq.1890 = s32[1,4096,2,8]{3,2,1,0} broadcast(%top_k.11), dimensions={0,1,2}
  %iota.1983 = s32[1,4096,2,8]{3,2,1,0} iota(), iota_dimension=3
  %eq.1891 = pred[1,4096,2,8]{3,2,1,0} compare(%eq.1890, %iota.1983), direction=EQ
  %convert_element_type.1272 = s32[1,4096,2,8]{3,2,1,0} convert(%eq.1891)
  %reshape.9418 = s32[1,8192,8]{2,1,0} reshape(%convert_element_type.1272)
  %sharding_constraint.246 = s32[1,8192,8]{2,1,0} copy(%reshape.9418)
  %reduce-window.3 = s32[1,8192,8]{2,1,0} reduce-window(%sharding_constraint.246, %constant.1181), window={size=1x8192x1 pad=0_0x8191_0x0_0}, to_apply=%region_45.2149
  %reshape.9424 = s32[1,4096,2,8]{3,2,1,0} reshape(%reduce-window.3)
  %sharding_constraint.247 = s32[1,4096,2,8]{3,2,1,0} copy(%reshape.9424)
  %le.8 = pred[1,4096,2,8]{3,2,1,0} compare(%sharding_constraint.247, %broadcast.3429), direction=LE
  %mul.2664 = s32[1,4096,2,8]{3,2,1,0} select(%le.8, %convert_element_type.1272, %broadcast.3430)
  %reduce.226 = s32[1,4096,8]{2,1,0} reduce(%mul.2664, %constant.1181), dimensions={2}, to_apply=%region_46.2158
  %convert_element_type.1273 = bf16[1,4096,8]{2,1,0} convert(%reduce.226)
  %mul.2665 = bf16[1,4096,8]{2,1,0} multiply(%scatter.136, %convert_element_type.1273)
  %mul.2666 = bf16[1,4096,8,1025]{3,2,1,0} broadcast(%mul.2665), dimensions={0,1,2}
  %mul.2667 = s32[1,8192,8]{2,1,0} multiply(%sharding_constraint.246, %reduce-window.3)
  %reshape.9425 = s32[1,4096,2,8]{3,2,1,0} reshape(%mul.2667)
  %reduce.227 = s32[1,4096,8]{2,1,0} reduce(%reshape.9425, %constant.1181), dimensions={2}, to_apply=%region_47.2168
  %mul.2668 = s32[1,4096,8]{2,1,0} multiply(%reduce.227, %reduce.226)
  %eq.1892 = s32[1,4096,8,1025]{3,2,1,0} broadcast(%mul.2668), dimensions={0,1,2}
  %iota.1984 = s32[1,4096,8,1025]{3,2,1,0} iota(), iota_dimension=3
  %eq.1893 = pred[1,4096,8,1025]{3,2,1,0} compare(%eq.1892, %iota.1984), direction=EQ
  %convert_element_type.1274 = s32[1,4096,8,1025]{3,2,1,0} convert(%eq.1893)
  %convert_element_type.1275 = bf16[1,4096,8,1025]{3,2,1,0} convert(%convert_element_type.1274)
  %mul.2669 = bf16[1,4096,8,1025]{3,2,1,0} multiply(%mul.2666, %convert_element_type.1275)
  %slice.161 = bf16[1,4096,8,1024]{3,2,1,0} slice(%mul.2669), slice={[0:1], [0:4096], [0:8], [1:1025]}
  %sharding_constraint.248 = bf16[1,4096,8,1024]{3,2,1,0} copy(%slice.161)
  %convert_element_type.1276 = pred[1,4096,8,1024]{3,2,1,0} compare(%slice.161, %broadcast.3431), direction=NE
  %sharding_constraint.249 = pred[1,4096,8,1024]{3,2,1,0} copy(%convert_element_type.1276)
  %dot_general.39 = bf16[1,4096,8,1024]{3,2,1,0} convert(%sharding_constraint.249)
  %dot.198 = bf16[1,8,1024,4096]{3,2,1,0} dot(%dot_general.39, %sharding_constraint.244), lhs_batch_dims={0}, lhs_contracting_dims={1}, rhs_batch_dims={0}, rhs_contracting_dims={1}
  %reshape.9428 = bf16[1,8,1,1024,4096]{4,3,2,1,0} reshape(%dot.198)
  %all-to-all.6 = bf16[1,8,1,1024,4096]{4,3,2,1,0} all-to-all(%reshape.9428), channel_id=44, replica_groups=[1,8]<=[8], dimensions={1}
  %transpose.14 = bf16[8,1,1,1024,4096]{4,3,2,0,1} transpose(%all-to-all.6), dimensions={1,0,2,3,4}
  %reshape.9429 = bf16[8,1,1024,4096]{3,2,1,0} reshape(%transpose.14)
  %transpose.15 = bf16[1,8,1024,4096]{3,2,0,1} transpose(%reshape.9429), dimensions={1,0,2,3}
  %sharding_constraint.250 = bf16[1,8,1024,4096]{3,2,0,1} copy(%transpose.15)
  %param.44 = bf16[1,4096,14336]{2,1,0} parameter(233), sharding={devices=[8,1,1]<=[8]}
  %sharding_constraint.251 = bf16[1,4096,14336]{2,1,0} copy(%param.44)
  %dot.199 = bf16[1,8,1024,14336]{3,2,1,0} dot(%sharding_constraint.250, %sharding_constraint.251), lhs_batch_dims={0}, lhs_contracting_dims={3}, rhs_batch_dims={0}, rhs_contracting_dims={1}
  %sharding_constraint.252 = bf16[1,8,1024,14336]{3,2,1,0} copy(%dot.199)
  %neg.161 = bf16[1,8,1024,14336]{3,2,1,0} negate(%sharding_constraint.252)
  %exp.133 = bf16[1,8,1024,14336]{3,2,1,0} exponential(%neg.161)
  %add.1446 = bf16[1,8,1024,14336]{3,2,1,0} add(%exp.133, %jit_silu_.0)
  %div.450 = bf16[1,8,1024,14336]{3,2,1,0} divide(%jit_silu_.0, %add.1446)
  %mul.2670 = bf16[1,8,1024,14336]{3,2,1,0} multiply(%sharding_constraint.252, %div.450)
  %param.45 = bf16[1,4096,14336]{2,1,0} parameter(234), sharding={devices=[8,1,1]<=[8]}
  %sharding_constraint.253 = bf16[1,4096,14336]{2,1,0} copy(%param.45)
  %dot.200 = bf16[1,8,1024,14336]{3,2,1,0} dot(%sharding_constraint.250, %sharding_constraint.253), lhs_batch_dims={0}, lhs_contracting_dims={3}, rhs_batch_dims={0}, rhs_contracting_dims={1}
  %sharding_constraint.254 = bf16[1,8,1024,14336]{3,2,1,0} copy(%dot.200)
  %mul.2671 = bf16[1,8,1024,14336]{3,2,1,0} multiply(%mul.2670, %sharding_constraint.254)
  %param.46 = bf16[1,14336,4096]{2,1,0} parameter(235), sharding={devices=[8,1,1]<=[8]}
  %sharding_constraint.255 = bf16[1,14336,4096]{2,1,0} copy(%param.46)
  %dot.201 = bf16[1,8,1024,4096]{3,2,1,0} dot(%mul.2671, %sharding_constraint.255), lhs_batch_dims={0}, lhs_contracting_dims={3}, rhs_batch_dims={0}, rhs_contracting_dims={1}
  %sharding_constraint.256 = bf16[1,8,1024,4096]{3,2,1,0} copy(%dot.201)
  %reshape.9432 = bf16[1,8,1,1024,4096]{4,3,2,1,0} reshape(%sharding_constraint.256)
  %all-to-all.7 = bf16[1,8,1,1024,4096]{4,3,2,1,0} all-to-all(%reshape.9432), channel_id=45, replica_groups=[1,8]<=[8], dimensions={1}
  %transpose.16 = bf16[8,1,1,1024,4096]{4,3,2,0,1} transpose(%all-to-all.7), dimensions={1,0,2,3,4}
  %reshape.9433 = bf16[8,1,1024,4096]{3,2,1,0} reshape(%transpose.16)
  %dot.202 = bf16[1,4096,4096]{2,1,0} dot(%sharding_constraint.248, %reshape.9433), lhs_batch_dims={0}, lhs_contracting_dims={3,2}, rhs_batch_dims={1}, rhs_contracting_dims={2,0}
  %sharding_constraint.257 = bf16[1,4096,4096]{2,1,0} copy(%dot.202)
  %add.1447 = bf16[1,4096,4096]{2,1,0} add(%sharding_constraint.257, %add.1437)
  %sharding_constraint.258 = bf16[1,4096,4096]{2,1,0} copy(%add.1447)
  %sharding_constraint.259 = bf16[1,4096,4096]{2,1,0} copy(%sharding_constraint.258)
  %convert_element_type.1277 = f32[1,4096,4096]{2,1,0} convert(%sharding_constraint.259)
  %square.11 = f32[1,4096,4096]{2,1,0} multiply(%convert_element_type.1277, %convert_element_type.1277)
  %reduce.228 = f32[1,4096]{1,0} reduce(%square.11, %constant.1360), dimensions={2}, to_apply=%region_48.2210
  %div.451 = f32[1,4096]{1,0} multiply(%reduce.228, %broadcast.3412)
  %add.1448 = f32[1,4096]{1,0} add(%div.451, %broadcast.3413)
  %rsqrt.72 = f32[1,4096]{1,0} rsqrt(%add.1448)
  %mul.2672 = f32[1,4096,4096]{2,1,0} broadcast(%rsqrt.72), dimensions={0,1}
  %mul.2673 = f32[1,4096,4096]{2,1,0} multiply(%convert_element_type.1277, %mul.2672)
  %convert_element_type.1278 = bf16[1,4096,4096]{2,1,0} convert(%mul.2673)
  %param.47 = bf16[4096]{0} parameter(267), sharding={replicated}
  %mul.2674 = bf16[1,4096,4096]{2,1,0} broadcast(%param.47), dimensions={2}
  %mul.2675 = bf16[1,4096,4096]{2,1,0} multiply(%convert_element_type.1278, %mul.2674)
  %sharding_constraint.260 = bf16[1,4096,4096]{2,1,0} copy(%mul.2675)
  %sharding_constraint.261 = bf16[1,4096,4096]{2,1,0} copy(%sharding_constraint.260)
  %param.48 = bf16[512,32,128]{2,1,0} parameter(270), sharding={devices=[8,1,1]<=[8]}
  %all-gather.29 = bf16[4096,32,128]{2,1,0} all-gather(%param.48), channel_id=46, replica_groups=[1,8]<=[8], dimensions={0}, use_global_device_ids=true
  %dot.203 = bf16[1,4096,32,128]{3,2,1,0} dot(%sharding_constraint.261, %all-gather.29), lhs_contracting_dims={2}, rhs_contracting_dims={0}
  %slice.162 = bf16[1,4096,32,64]{3,2,1,0} slice(%dot.203), slice={[0:1], [0:4096], [0:32], [0:64]}
  %mul.2679 = bf16[1,4096,32,64]{3,2,1,0} multiply(%slice.162, %mul.2435)
  %slice.163 = bf16[1,4096,32,64]{3,2,1,0} slice(%dot.203), slice={[0:1], [0:4096], [0:32], [64:128]}
  %mul.2682 = bf16[1,4096,32,64]{3,2,1,0} multiply(%slice.163, %mul.2438)
  %sub.87 = bf16[1,4096,32,64]{3,2,1,0} subtract(%mul.2679, %mul.2682)
  %mul.2685 = bf16[1,4096,32,64]{3,2,1,0} multiply(%slice.163, %mul.2435)
  %mul.2689 = bf16[1,4096,32,64]{3,2,1,0} multiply(%slice.162, %mul.2438)
  %add.1449 = bf16[1,4096,32,64]{3,2,1,0} add(%mul.2685, %mul.2689)
  %concatenate.34 = bf16[1,4096,32,128]{3,2,1,0} concatenate(%sub.87, %add.1449), dimensions={3}
  %sharding_constraint.262 = bf16[1,4096,32,128]{3,2,1,0} copy(%concatenate.34)
  %param.49 = bf16[512,8,128]{2,1,0} parameter(268), sharding={devices=[8,1,1]<=[8]}
  %all-gather.30 = bf16[4096,8,128]{2,1,0} all-gather(%param.49), channel_id=47, replica_groups=[1,8]<=[8], dimensions={0}, use_global_device_ids=true
  %dot.204 = bf16[1,4096,8,128]{3,2,1,0} dot(%sharding_constraint.261, %all-gather.30), lhs_contracting_dims={2}, rhs_contracting_dims={0}
  %slice.164 = bf16[1,4096,8,64]{3,2,1,0} slice(%dot.204), slice={[0:1], [0:4096], [0:8], [0:64]}
  %mul.2695 = bf16[1,4096,8,64]{3,2,1,0} multiply(%slice.164, %mul.2456)
  %slice.165 = bf16[1,4096,8,64]{3,2,1,0} slice(%dot.204), slice={[0:1], [0:4096], [0:8], [64:128]}
  %mul.2699 = bf16[1,4096,8,64]{3,2,1,0} multiply(%slice.165, %mul.2460)
  %sub.88 = bf16[1,4096,8,64]{3,2,1,0} subtract(%mul.2695, %mul.2699)
  %mul.2709 = bf16[1,4096,8,64]{3,2,1,0} multiply(%slice.165, %mul.2456)
  %mul.2713 = bf16[1,4096,8,64]{3,2,1,0} multiply(%slice.164, %mul.2460)
  %add.1450 = bf16[1,4096,8,64]{3,2,1,0} add(%mul.2709, %mul.2713)
  %concatenate.35 = bf16[1,4096,8,128]{3,2,1,0} concatenate(%sub.88, %add.1450), dimensions={3}
  %sharding_constraint.264 = bf16[1,4096,8,128]{3,2,1,0} copy(%concatenate.35)
  %param.50 = bf16[512,8,128]{2,1,0} parameter(271), sharding={devices=[8,1,1]<=[8]}
  %all-gather.31 = bf16[4096,8,128]{2,1,0} all-gather(%param.50), channel_id=48, replica_groups=[1,8]<=[8], dimensions={0}, use_global_device_ids=true
  %dot.205 = bf16[1,4096,8,128]{3,2,1,0} dot(%sharding_constraint.261, %all-gather.31), lhs_contracting_dims={2}, rhs_contracting_dims={0}
  %sharding_constraint.265 = bf16[1,4096,8,128]{3,2,1,0} copy(%dot.205)
  %te_fused_attn_forward_ffi.12 = (bf16[1,4096,32,128]{3,2,1,0}, f32[1,32,4096,1]{3,2,1,0}, u32[2,4]{1,0}, u8[48]{0}) custom-call(%sharding_constraint.262, %sharding_constraint.264, %sharding_constraint.265, %constant.1403, %dynamic-slice.38, /*index=5*/%concatenate.31, %concatenate.36, %constant.1416, %constant.1416, %constant.1416, /*index=10*/%constant.1416, %constant.1416, %constant.1416), custom_call_target="te_fused_attn_forward_ffi", operand_layout_constraints={bf16[1,4096,32,128]{3,2,1,0}, bf16[1,4096,8,128]{3,2,1,0}, bf16[1,4096,8,128]{3,2,1,0}, bf16[0]{0}, u32[2]{0}, s32[2]{0}, s32[2]{0}, f32[0]{0}, f32[0]{0}, f32[0]{0}, f32[0]{0}, f32[0]{0}, f32[0]{0}}, api_version=API_VERSION_TYPED_FFI, backend_config={attn_heads = 32 : i64, bias_batch = 0 : i64, bias_heads = 0 : i64, bias_type = 0 : i64, deterministic = false, dropout_probability = 0.000000e+00 : f64, input_batch = 1 : i64, is_training = true, kv_max_seqlen = 4096 : i64, mask_type = 3 : i64, max_segments_per_seq = 1 : i64, num_gqa_groups = 8 : i64, q_max_seqlen = 4096 : i64, qk_head_dim = 128 : i64, qkv_layout = 9 : i64, scaling_factor = 1.000000e+00 : f64, v_head_dim = 128 : i64, window_size_left = -1 : i64, window_size_right = -1 : i64}
  %get-tuple-element.299 = bf16[1,4096,32,128]{3,2,1,0} get-tuple-element(%te_fused_attn_forward_ffi.12), index=0
  %sharding_constraint.266 = bf16[1,4096,32,128]{3,2,1,0} copy(%get-tuple-element.299)
  %param.51 = bf16[32,128,512]{2,1,0} parameter(269), sharding={devices=[1,1,8]<=[8]}
  %all-gather.33 = bf16[32,128,4096]{2,1,0} all-gather(%param.51), channel_id=50, replica_groups=[1,8]<=[8], dimensions={2}, use_global_device_ids=true
  %dot.206 = bf16[1,4096,4096]{2,1,0} dot(%sharding_constraint.266, %all-gather.33), lhs_contracting_dims={2,3}, rhs_contracting_dims={0,1}
  %sharding_constraint.267 = bf16[1,4096,4096]{2,1,0} copy(%dot.206)
  %add.1451 = bf16[1,4096,4096]{2,1,0} add(%sharding_constraint.259, %sharding_constraint.267)
  %convert_element_type.1289 = f32[1,4096,4096]{2,1,0} convert(%add.1451)
  %square.12 = f32[1,4096,4096]{2,1,0} multiply(%convert_element_type.1289, %convert_element_type.1289)
  %reduce.232 = f32[1,4096]{1,0} reduce(%square.12, %constant.1360), dimensions={2}, to_apply=%region_52.2334
  %div.460 = f32[1,4096]{1,0} multiply(%reduce.232, %broadcast.3412)
  %add.1452 = f32[1,4096]{1,0} add(%div.460, %broadcast.3413)
  %rsqrt.73 = f32[1,4096]{1,0} rsqrt(%add.1452)
  %mul.2714 = f32[1,4096,4096]{2,1,0} broadcast(%rsqrt.73), dimensions={0,1}
  %mul.2715 = f32[1,4096,4096]{2,1,0} multiply(%convert_element_type.1289, %mul.2714)
  %convert_element_type.1290 = bf16[1,4096,4096]{2,1,0} convert(%mul.2715)
  %param.52 = bf16[4096]{0} parameter(266), sharding={replicated}
  %mul.2716 = bf16[1,4096,4096]{2,1,0} broadcast(%param.52), dimensions={2}
  %mul.2717 = bf16[1,4096,4096]{2,1,0} multiply(%convert_element_type.1290, %mul.2716)
  %sharding_constraint.268 = bf16[1,4096,4096]{2,1,0} copy(%mul.2717)
  %param.53 = bf16[512,8]{1,0} parameter(262), sharding={devices=[8,1]<=[8]}
  %all-gather.34 = bf16[4096,8]{1,0} all-gather(%param.53), channel_id=51, replica_groups=[1,8]<=[8], dimensions={0}, use_global_device_ids=true
  %dot.207 = bf16[1,4096,8]{2,1,0} dot(%sharding_constraint.268, %all-gather.34), lhs_contracting_dims={2}, rhs_contracting_dims={0}
  %sharding_constraint.269 = bf16[1,4096,8]{2,1,0} copy(%dot.207)
  %top_k.12 = bf16[4096,8]{1,0} reshape(%sharding_constraint.269)
  %top_k.13 = (bf16[4096,2]{1,0}, s32[4096,2]{1,0}) custom-call(%top_k.12), custom_call_target="TopK", called_computations={%compare_greater_than.3.2353.clone}
  %get-tuple-element.300 = bf16[4096,2]{1,0} get-tuple-element(%top_k.13), index=0
  %get-tuple-element.301 = s32[4096,2]{1,0} get-tuple-element(%top_k.13), index=1
  %add.1453 = s32[4096,2]{1,0} add(%get-tuple-element.301, %broadcast.3418)
  %sort.68 = (bf16[4096,2]{1,0}, s32[4096,2]{1,0}) sort(%get-tuple-element.300, %add.1453), dimensions={1}, is_stable=true, to_apply=%compare-value-and-index.3
  %get-tuple-element.303 = s32[4096,2]{1,0} get-tuple-element(%sort.68), index=1
  %slice.168 = s32[4096,2]{1,0} slice(%get-tuple-element.303), slice={[0:4096], [0:2]}
  %top_k.14 = s32[1,4096,2]{2,1,0} reshape(%slice.168)
  %lt.13 = pred[1,4096,2]{2,1,0} compare(%top_k.14, %broadcast.3419), direction=LT
  %add.1454 = s32[1,4096,2]{2,1,0} add(%top_k.14, %broadcast.3420)
  %select_n.276 = s32[1,4096,2]{2,1,0} select(%lt.13, %add.1454, %top_k.14)
  %broadcast_in_dim.532 = s32[1,4096,2,1]{3,2,1,0} reshape(%select_n.276)
  %concatenate.39 = s32[1,4096,2,3]{3,2,1,0} concatenate(%add.1356, %iota.1922, %broadcast_in_dim.532), dimensions={3}
  %subtract.14 = s32[1,4096,2,3]{3,2,1,0} subtract(%concatenate.39, %broadcast.3428)
  %scatter.137 = u32[1,4096,8]{2,1,0} scatter(%dynamic-slice.43, %subtract.14, %add.1401), update_window_dims={}, inserted_window_dims={0,1,2}, scatter_dims_to_operand_dims={0,1,2}, index_vector_dim=3, to_apply=%region_53.2381.clone
  %gather.4 = u32[1,4096,2]{2,1,0} gather(%scatter.137, %subtract.14), offset_dims={}, collapsed_slice_dims={0,1,2}, start_index_map={0,1,2}, index_vector_dim=3, slice_sizes={1,1,1}
  %eq.1897 = pred[1,4096,2]{2,1,0} compare(%add.1401, %gather.4), direction=EQ
  %get-tuple-element.302 = bf16[4096,2]{1,0} get-tuple-element(%sort.68), index=0
  %slice.167 = bf16[4096,2]{1,0} slice(%get-tuple-element.302), slice={[0:4096], [0:2]}
  %convert_element_type.1291 = f32[4096,2]{1,0} convert(%slice.167)
  %convert_element_type.1292 = f32[1,4096,2]{2,1,0} reshape(%convert_element_type.1291)
  %reduce.233 = f32[4096]{0} reduce(%convert_element_type.1291, %constant.1450), dimensions={1}, to_apply=%region_54.2390
  %sub.89 = f32[1,4096]{1,0} reshape(%reduce.233)
  %sub.90 = f32[1,4096,2]{2,1,0} broadcast(%sub.89), dimensions={0,1}
  %sub.91 = f32[1,4096,2]{2,1,0} subtract(%convert_element_type.1292, %sub.90)
  %exp.134 = f32[1,4096,2]{2,1,0} exponential(%sub.91)
  %reduce.234 = f32[1,4096]{1,0} reduce(%exp.134, %constant.1360), dimensions={2}, to_apply=%region_55.2399
  %div.461 = f32[1,4096,2]{2,1,0} broadcast(%reduce.234), dimensions={0,1}
  %div.462 = f32[1,4096,2]{2,1,0} divide(%exp.134, %div.461)
  %convert_element_type.1295 = bf16[1,4096,2]{2,1,0} convert(%div.462)
  %select_n.277 = bf16[1,4096,2]{2,1,0} select(%eq.1897, %convert_element_type.1295, %broadcast.3427)
  %scatter.138 = bf16[1,4096,8]{2,1,0} scatter(%broadcast.3379, %subtract.14, %select_n.277), update_window_dims={}, inserted_window_dims={0,1,2}, scatter_dims_to_operand_dims={0,1,2}, index_vector_dim=3, to_apply=%region_56.2408.clone
  %eq.1899 = s32[1,4096,2,8]{3,2,1,0} broadcast(%top_k.14), dimensions={0,1,2}
  %iota.1996 = s32[1,4096,2,8]{3,2,1,0} iota(), iota_dimension=3
  %eq.1903 = pred[1,4096,2,8]{3,2,1,0} compare(%eq.1899, %iota.1996), direction=EQ
  %convert_element_type.1296 = s32[1,4096,2,8]{3,2,1,0} convert(%eq.1903)
  %reshape.9475 = s32[1,8192,8]{2,1,0} reshape(%convert_element_type.1296)
  %sharding_constraint.270 = s32[1,8192,8]{2,1,0} copy(%reshape.9475)
  %reduce-window.4 = s32[1,8192,8]{2,1,0} reduce-window(%sharding_constraint.270, %constant.1181), window={size=1x8192x1 pad=0_0x8191_0x0_0}, to_apply=%region_57.2420
  %reshape.9477 = s32[1,4096,2,8]{3,2,1,0} reshape(%reduce-window.4)
  %sharding_constraint.271 = s32[1,4096,2,8]{3,2,1,0} copy(%reshape.9477)
  %le.10 = pred[1,4096,2,8]{3,2,1,0} compare(%sharding_constraint.271, %broadcast.3429), direction=LE
  %mul.2719 = s32[1,4096,2,8]{3,2,1,0} select(%le.10, %convert_element_type.1296, %broadcast.3430)
  %reduce.235 = s32[1,4096,8]{2,1,0} reduce(%mul.2719, %constant.1181), dimensions={2}, to_apply=%region_58.2429
  %convert_element_type.1297 = bf16[1,4096,8]{2,1,0} convert(%reduce.235)
  %mul.2720 = bf16[1,4096,8]{2,1,0} multiply(%scatter.138, %convert_element_type.1297)
  %mul.2721 = bf16[1,4096,8,1025]{3,2,1,0} broadcast(%mul.2720), dimensions={0,1,2}
  %mul.2722 = s32[1,8192,8]{2,1,0} multiply(%sharding_constraint.270, %reduce-window.4)
  %reshape.9478 = s32[1,4096,2,8]{3,2,1,0} reshape(%mul.2722)
  %reduce.236 = s32[1,4096,8]{2,1,0} reduce(%reshape.9478, %constant.1181), dimensions={2}, to_apply=%region_59.2439
  %mul.2723 = s32[1,4096,8]{2,1,0} multiply(%reduce.236, %reduce.235)
  %eq.1904 = s32[1,4096,8,1025]{3,2,1,0} broadcast(%mul.2723), dimensions={0,1,2}
  %iota.1997 = s32[1,4096,8,1025]{3,2,1,0} iota(), iota_dimension=3
  %eq.1905 = pred[1,4096,8,1025]{3,2,1,0} compare(%eq.1904, %iota.1997), direction=EQ
  %convert_element_type.1298 = s32[1,4096,8,1025]{3,2,1,0} convert(%eq.1905)
  %convert_element_type.1299 = bf16[1,4096,8,1025]{3,2,1,0} convert(%convert_element_type.1298)
  %mul.2725 = bf16[1,4096,8,1025]{3,2,1,0} multiply(%mul.2721, %convert_element_type.1299)
  %slice.169 = bf16[1,4096,8,1024]{3,2,1,0} slice(%mul.2725), slice={[0:1], [0:4096], [0:8], [1:1025]}
  %sharding_constraint.272 = bf16[1,4096,8,1024]{3,2,1,0} copy(%slice.169)
  %convert_element_type.1301 = pred[1,4096,8,1024]{3,2,1,0} compare(%slice.169, %broadcast.3431), direction=NE
  %sharding_constraint.273 = pred[1,4096,8,1024]{3,2,1,0} copy(%convert_element_type.1301)
  %dot_general.40 = bf16[1,4096,8,1024]{3,2,1,0} convert(%sharding_constraint.273)
  %dot.208 = bf16[1,8,1024,4096]{3,2,1,0} dot(%dot_general.40, %sharding_constraint.268), lhs_batch_dims={0}, lhs_contracting_dims={1}, rhs_batch_dims={0}, rhs_contracting_dims={1}
  %reshape.9482 = bf16[1,8,1,1024,4096]{4,3,2,1,0} reshape(%dot.208)
  %all-to-all.8 = bf16[1,8,1,1024,4096]{4,3,2,1,0} all-to-all(%reshape.9482), channel_id=55, replica_groups=[1,8]<=[8], dimensions={1}
  %transpose.17 = bf16[8,1,1,1024,4096]{4,3,2,0,1} transpose(%all-to-all.8), dimensions={1,0,2,3,4}
  %reshape.9483 = bf16[8,1,1024,4096]{3,2,1,0} reshape(%transpose.17)
  %transpose.18 = bf16[1,8,1024,4096]{3,2,0,1} transpose(%reshape.9483), dimensions={1,0,2,3}
  %sharding_constraint.274 = bf16[1,8,1024,4096]{3,2,0,1} copy(%transpose.18)
  %param.54 = bf16[1,4096,14336]{2,1,0} parameter(263), sharding={devices=[8,1,1]<=[8]}
  %sharding_constraint.275 = bf16[1,4096,14336]{2,1,0} copy(%param.54)
  %dot.209 = bf16[1,8,1024,14336]{3,2,1,0} dot(%sharding_constraint.274, %sharding_constraint.275), lhs_batch_dims={0}, lhs_contracting_dims={3}, rhs_batch_dims={0}, rhs_contracting_dims={1}
  %sharding_constraint.276 = bf16[1,8,1024,14336]{3,2,1,0} copy(%dot.209)
  %neg.162 = bf16[1,8,1024,14336]{3,2,1,0} negate(%sharding_constraint.276)
  %exp.135 = bf16[1,8,1024,14336]{3,2,1,0} exponential(%neg.162)
  %add.1459 = bf16[1,8,1024,14336]{3,2,1,0} add(%exp.135, %jit_silu_.0)
  %div.463 = bf16[1,8,1024,14336]{3,2,1,0} divide(%jit_silu_.0, %add.1459)
  %mul.2726 = bf16[1,8,1024,14336]{3,2,1,0} multiply(%sharding_constraint.276, %div.463)
  %param.55 = bf16[1,4096,14336]{2,1,0} parameter(264), sharding={devices=[8,1,1]<=[8]}
  %sharding_constraint.277 = bf16[1,4096,14336]{2,1,0} copy(%param.55)
  %dot.210 = bf16[1,8,1024,14336]{3,2,1,0} dot(%sharding_constraint.274, %sharding_constraint.277), lhs_batch_dims={0}, lhs_contracting_dims={3}, rhs_batch_dims={0}, rhs_contracting_dims={1}
  %sharding_constraint.278 = bf16[1,8,1024,14336]{3,2,1,0} copy(%dot.210)
  %mul.2727 = bf16[1,8,1024,14336]{3,2,1,0} multiply(%mul.2726, %sharding_constraint.278)
  %param.56 = bf16[1,14336,4096]{2,1,0} parameter(265), sharding={devices=[8,1,1]<=[8]}
  %sharding_constraint.279 = bf16[1,14336,4096]{2,1,0} copy(%param.56)
  %dot.211 = bf16[1,8,1024,4096]{3,2,1,0} dot(%mul.2727, %sharding_constraint.279), lhs_batch_dims={0}, lhs_contracting_dims={3}, rhs_batch_dims={0}, rhs_contracting_dims={1}
  %sharding_constraint.280 = bf16[1,8,1024,4096]{3,2,1,0} copy(%dot.211)
  %reshape.9486 = bf16[1,8,1,1024,4096]{4,3,2,1,0} reshape(%sharding_constraint.280)
  %all-to-all.9 = bf16[1,8,1,1024,4096]{4,3,2,1,0} all-to-all(%reshape.9486), channel_id=56, replica_groups=[1,8]<=[8], dimensions={1}
  %transpose.19 = bf16[8,1,1,1024,4096]{4,3,2,0,1} transpose(%all-to-all.9), dimensions={1,0,2,3,4}
  %reshape.9487 = bf16[8,1,1024,4096]{3,2,1,0} reshape(%transpose.19)
  %dot.212 = bf16[1,4096,4096]{2,1,0} dot(%sharding_constraint.272, %reshape.9487), lhs_batch_dims={0}, lhs_contracting_dims={3,2}, rhs_batch_dims={1}, rhs_contracting_dims={2,0}
  %sharding_constraint.281 = bf16[1,4096,4096]{2,1,0} copy(%dot.212)
  %add.1460 = bf16[1,4096,4096]{2,1,0} add(%sharding_constraint.281, %add.1451)
  %sharding_constraint.282 = bf16[1,4096,4096]{2,1,0} copy(%add.1460)
  %sharding_constraint.283 = bf16[1,4096,4096]{2,1,0} copy(%sharding_constraint.282)
  %convert_element_type.1302 = f32[1,4096,4096]{2,1,0} convert(%sharding_constraint.283)
  %square.13 = f32[1,4096,4096]{2,1,0} multiply(%convert_element_type.1302, %convert_element_type.1302)
  %reduce.237 = f32[1,4096]{1,0} reduce(%square.13, %constant.1360), dimensions={2}, to_apply=%region_60.2481
  %div.464 = f32[1,4096]{1,0} multiply(%reduce.237, %broadcast.3412)
  %add.1461 = f32[1,4096]{1,0} add(%div.464, %broadcast.3413)
  %rsqrt.74 = f32[1,4096]{1,0} rsqrt(%add.1461)
  %mul.2728 = f32[1,4096,4096]{2,1,0} broadcast(%rsqrt.74), dimensions={0,1}
  %mul.2729 = f32[1,4096,4096]{2,1,0} multiply(%convert_element_type.1302, %mul.2728)
  %convert_element_type.1303 = bf16[1,4096,4096]{2,1,0} convert(%mul.2729)
  %param.57 = bf16[4096]{0} parameter(277), sharding={replicated}
  %mul.2730 = bf16[1,4096,4096]{2,1,0} broadcast(%param.57), dimensions={2}
  %mul.2731 = bf16[1,4096,4096]{2,1,0} multiply(%convert_element_type.1303, %mul.2730)
  %sharding_constraint.284 = bf16[1,4096,4096]{2,1,0} copy(%mul.2731)
  %sharding_constraint.285 = bf16[1,4096,4096]{2,1,0} copy(%sharding_constraint.284)
  %param.58 = bf16[512,32,128]{2,1,0} parameter(280), sharding={devices=[8,1,1]<=[8]}
  %all-gather.36 = bf16[4096,32,128]{2,1,0} all-gather(%param.58), channel_id=57, replica_groups=[1,8]<=[8], dimensions={0}, use_global_device_ids=true
  %dot.213 = bf16[1,4096,32,128]{3,2,1,0} dot(%sharding_constraint.285, %all-gather.36), lhs_contracting_dims={2}, rhs_contracting_dims={0}
  %slice.170 = bf16[1,4096,32,64]{3,2,1,0} slice(%dot.213), slice={[0:1], [0:4096], [0:32], [0:64]}
  %mul.2736 = bf16[1,4096,32,64]{3,2,1,0} multiply(%slice.170, %mul.2435)
  %slice.171 = bf16[1,4096,32,64]{3,2,1,0} slice(%dot.213), slice={[0:1], [0:4096], [0:32], [64:128]}
  %mul.2740 = bf16[1,4096,32,64]{3,2,1,0} multiply(%slice.171, %mul.2438)
  %sub.92 = bf16[1,4096,32,64]{3,2,1,0} subtract(%mul.2736, %mul.2740)
  %mul.2743 = bf16[1,4096,32,64]{3,2,1,0} multiply(%slice.171, %mul.2435)
  %mul.2754 = bf16[1,4096,32,64]{3,2,1,0} multiply(%slice.170, %mul.2438)
  %add.1462 = bf16[1,4096,32,64]{3,2,1,0} add(%mul.2743, %mul.2754)
  %concatenate.43 = bf16[1,4096,32,128]{3,2,1,0} concatenate(%sub.92, %add.1462), dimensions={3}
  %sharding_constraint.286 = bf16[1,4096,32,128]{3,2,1,0} copy(%concatenate.43)
  %param.59 = bf16[512,8,128]{2,1,0} parameter(278), sharding={devices=[8,1,1]<=[8]}
  %all-gather.37 = bf16[4096,8,128]{2,1,0} all-gather(%param.59), channel_id=58, replica_groups=[1,8]<=[8], dimensions={0}, use_global_device_ids=true
  %dot.214 = bf16[1,4096,8,128]{3,2,1,0} dot(%sharding_constraint.285, %all-gather.37), lhs_contracting_dims={2}, rhs_contracting_dims={0}
  %slice.172 = bf16[1,4096,8,64]{3,2,1,0} slice(%dot.214), slice={[0:1], [0:4096], [0:8], [0:64]}
  %mul.2763 = bf16[1,4096,8,64]{3,2,1,0} multiply(%slice.172, %mul.2456)
  %slice.173 = bf16[1,4096,8,64]{3,2,1,0} slice(%dot.214), slice={[0:1], [0:4096], [0:8], [64:128]}
  %mul.2766 = bf16[1,4096,8,64]{3,2,1,0} multiply(%slice.173, %mul.2460)
  %sub.93 = bf16[1,4096,8,64]{3,2,1,0} subtract(%mul.2763, %mul.2766)
  %mul.2770 = bf16[1,4096,8,64]{3,2,1,0} multiply(%slice.173, %mul.2456)
  %mul.2773 = bf16[1,4096,8,64]{3,2,1,0} multiply(%slice.172, %mul.2460)
  %add.1463 = bf16[1,4096,8,64]{3,2,1,0} add(%mul.2770, %mul.2773)
  %concatenate.44 = bf16[1,4096,8,128]{3,2,1,0} concatenate(%sub.93, %add.1463), dimensions={3}
  %sharding_constraint.288 = bf16[1,4096,8,128]{3,2,1,0} copy(%concatenate.44)
  %param.60 = bf16[512,8,128]{2,1,0} parameter(281), sharding={devices=[8,1,1]<=[8]}
  %all-gather.38 = bf16[4096,8,128]{2,1,0} all-gather(%param.60), channel_id=59, replica_groups=[1,8]<=[8], dimensions={0}, use_global_device_ids=true
  %dot.215 = bf16[1,4096,8,128]{3,2,1,0} dot(%sharding_constraint.285, %all-gather.38), lhs_contracting_dims={2}, rhs_contracting_dims={0}
  %sharding_constraint.289 = bf16[1,4096,8,128]{3,2,1,0} copy(%dot.215)
  %te_fused_attn_forward_ffi.16 = (bf16[1,4096,32,128]{3,2,1,0}, f32[1,32,4096,1]{3,2,1,0}, u32[2,4]{1,0}, u8[48]{0}) custom-call(%sharding_constraint.286, %sharding_constraint.288, %sharding_constraint.289, %constant.1403, %dynamic-slice.38, /*index=5*/%concatenate.31, %concatenate.36, %constant.1416, %constant.1416, %constant.1416, /*index=10*/%constant.1416, %constant.1416, %constant.1416), custom_call_target="te_fused_attn_forward_ffi", operand_layout_constraints={bf16[1,4096,32,128]{3,2,1,0}, bf16[1,4096,8,128]{3,2,1,0}, bf16[1,4096,8,128]{3,2,1,0}, bf16[0]{0}, u32[2]{0}, s32[2]{0}, s32[2]{0}, f32[0]{0}, f32[0]{0}, f32[0]{0}, f32[0]{0}, f32[0]{0}, f32[0]{0}}, api_version=API_VERSION_TYPED_FFI, backend_config={attn_heads = 32 : i64, bias_batch = 0 : i64, bias_heads = 0 : i64, bias_type = 0 : i64, deterministic = false, dropout_probability = 0.000000e+00 : f64, input_batch = 1 : i64, is_training = true, kv_max_seqlen = 4096 : i64, mask_type = 3 : i64, max_segments_per_seq = 1 : i64, num_gqa_groups = 8 : i64, q_max_seqlen = 4096 : i64, qk_head_dim = 128 : i64, qkv_layout = 9 : i64, scaling_factor = 1.000000e+00 : f64, v_head_dim = 128 : i64, window_size_left = -1 : i64, window_size_right = -1 : i64}
  %get-tuple-element.309 = bf16[1,4096,32,128]{3,2,1,0} get-tuple-element(%te_fused_attn_forward_ffi.16), index=0
  %sharding_constraint.290 = bf16[1,4096,32,128]{3,2,1,0} copy(%get-tuple-element.309)
  %param.61 = bf16[32,128,512]{2,1,0} parameter(279), sharding={devices=[1,1,8]<=[8]}
  %all-gather.40 = bf16[32,128,4096]{2,1,0} all-gather(%param.61), channel_id=61, replica_groups=[1,8]<=[8], dimensions={2}, use_global_device_ids=true
  %dot.216 = bf16[1,4096,4096]{2,1,0} dot(%sharding_constraint.290, %all-gather.40), lhs_contracting_dims={2,3}, rhs_contracting_dims={0,1}
  %sharding_constraint.291 = bf16[1,4096,4096]{2,1,0} copy(%dot.216)
  %add.1464 = bf16[1,4096,4096]{2,1,0} add(%sharding_constraint.283, %sharding_constraint.291)
  %convert_element_type.1316 = f32[1,4096,4096]{2,1,0} convert(%add.1464)
  %square.14 = f32[1,4096,4096]{2,1,0} multiply(%convert_element_type.1316, %convert_element_type.1316)
  %reduce.241 = f32[1,4096]{1,0} reduce(%square.14, %constant.1360), dimensions={2}, to_apply=%region_64.2605
  %div.473 = f32[1,4096]{1,0} multiply(%reduce.241, %broadcast.3412)
  %add.1465 = f32[1,4096]{1,0} add(%div.473, %broadcast.3413)
  %rsqrt.75 = f32[1,4096]{1,0} rsqrt(%add.1465)
  %mul.2774 = f32[1,4096,4096]{2,1,0} broadcast(%rsqrt.75), dimensions={0,1}
  %mul.2775 = f32[1,4096,4096]{2,1,0} multiply(%convert_element_type.1316, %mul.2774)
  %convert_element_type.1317 = bf16[1,4096,4096]{2,1,0} convert(%mul.2775)
  %param.62 = bf16[4096]{0} parameter(276), sharding={replicated}
  %mul.2776 = bf16[1,4096,4096]{2,1,0} broadcast(%param.62), dimensions={2}
  %mul.2780 = bf16[1,4096,4096]{2,1,0} multiply(%convert_element_type.1317, %mul.2776)
  %sharding_constraint.292 = bf16[1,4096,4096]{2,1,0} copy(%mul.2780)
  %param.63 = bf16[512,8]{1,0} parameter(272), sharding={devices=[8,1]<=[8]}
  %all-gather.41 = bf16[4096,8]{1,0} all-gather(%param.63), channel_id=62, replica_groups=[1,8]<=[8], dimensions={0}, use_global_device_ids=true
  %dot.217 = bf16[1,4096,8]{2,1,0} dot(%sharding_constraint.292, %all-gather.41), lhs_contracting_dims={2}, rhs_contracting_dims={0}
  %sharding_constraint.293 = bf16[1,4096,8]{2,1,0} copy(%dot.217)
  %top_k.15 = bf16[4096,8]{1,0} reshape(%sharding_constraint.293)
  %top_k.16 = (bf16[4096,2]{1,0}, s32[4096,2]{1,0}) custom-call(%top_k.15), custom_call_target="TopK", called_computations={%compare_greater_than.4.2624.clone}
  %get-tuple-element.310 = bf16[4096,2]{1,0} get-tuple-element(%top_k.16), index=0
  %get-tuple-element.311 = s32[4096,2]{1,0} get-tuple-element(%top_k.16), index=1
  %add.1466 = s32[4096,2]{1,0} add(%get-tuple-element.311, %broadcast.3418)
  %sort.69 = (bf16[4096,2]{1,0}, s32[4096,2]{1,0}) sort(%get-tuple-element.310, %add.1466), dimensions={1}, is_stable=true, to_apply=%compare-value-and-index.4
  %get-tuple-element.313 = s32[4096,2]{1,0} get-tuple-element(%sort.69), index=1
  %slice.176 = s32[4096,2]{1,0} slice(%get-tuple-element.313), slice={[0:4096], [0:2]}
  %top_k.17 = s32[1,4096,2]{2,1,0} reshape(%slice.176)
  %lt.16 = pred[1,4096,2]{2,1,0} compare(%top_k.17, %broadcast.3419), direction=LT
  %add.1467 = s32[1,4096,2]{2,1,0} add(%top_k.17, %broadcast.3420)
  %select_n.281 = s32[1,4096,2]{2,1,0} select(%lt.16, %add.1467, %top_k.17)
  %broadcast_in_dim.535 = s32[1,4096,2,1]{3,2,1,0} reshape(%select_n.281)
  %concatenate.47 = s32[1,4096,2,3]{3,2,1,0} concatenate(%add.1356, %iota.1920, %broadcast_in_dim.535), dimensions={3}
  %subtract.17 = s32[1,4096,2,3]{3,2,1,0} subtract(%concatenate.47, %broadcast.3428)
  %scatter.139 = u32[1,4096,8]{2,1,0} scatter(%dynamic-slice.43, %subtract.17, %add.1401), update_window_dims={}, inserted_window_dims={0,1,2}, scatter_dims_to_operand_dims={0,1,2}, index_vector_dim=3, to_apply=%region_65.2652.clone
  %gather.5 = u32[1,4096,2]{2,1,0} gather(%scatter.139, %subtract.17), offset_dims={}, collapsed_slice_dims={0,1,2}, start_index_map={0,1,2}, index_vector_dim=3, slice_sizes={1,1,1}
  %eq.1909 = pred[1,4096,2]{2,1,0} compare(%add.1401, %gather.5), direction=EQ
  %get-tuple-element.312 = bf16[4096,2]{1,0} get-tuple-element(%sort.69), index=0
  %slice.175 = bf16[4096,2]{1,0} slice(%get-tuple-element.312), slice={[0:4096], [0:2]}
  %convert_element_type.1318 = f32[4096,2]{1,0} convert(%slice.175)
  %convert_element_type.1319 = f32[1,4096,2]{2,1,0} reshape(%convert_element_type.1318)
  %reduce.242 = f32[4096]{0} reduce(%convert_element_type.1318, %constant.1450), dimensions={1}, to_apply=%region_66.2661
  %sub.94 = f32[1,4096]{1,0} reshape(%reduce.242)
  %sub.95 = f32[1,4096,2]{2,1,0} broadcast(%sub.94), dimensions={0,1}
  %sub.96 = f32[1,4096,2]{2,1,0} subtract(%convert_element_type.1319, %sub.95)
  %exp.136 = f32[1,4096,2]{2,1,0} exponential(%sub.96)
  %reduce.243 = f32[1,4096]{1,0} reduce(%exp.136, %constant.1360), dimensions={2}, to_apply=%region_67.2670
  %div.474 = f32[1,4096,2]{2,1,0} broadcast(%reduce.243), dimensions={0,1}
  %div.475 = f32[1,4096,2]{2,1,0} divide(%exp.136, %div.474)
  %convert_element_type.1320 = bf16[1,4096,2]{2,1,0} convert(%div.475)
  %select_n.282 = bf16[1,4096,2]{2,1,0} select(%eq.1909, %convert_element_type.1320, %broadcast.3427)
  %scatter.140 = bf16[1,4096,8]{2,1,0} scatter(%broadcast.3379, %subtract.17, %select_n.282), update_window_dims={}, inserted_window_dims={0,1,2}, scatter_dims_to_operand_dims={0,1,2}, index_vector_dim=3, to_apply=%region_68.2679.clone
  %eq.1911 = s32[1,4096,2,8]{3,2,1,0} broadcast(%top_k.17), dimensions={0,1,2}
  %iota.2008 = s32[1,4096,2,8]{3,2,1,0} iota(), iota_dimension=3
  %eq.1912 = pred[1,4096,2,8]{3,2,1,0} compare(%eq.1911, %iota.2008), direction=EQ
  %convert_element_type.1321 = s32[1,4096,2,8]{3,2,1,0} convert(%eq.1912)
  %reshape.9527 = s32[1,8192,8]{2,1,0} reshape(%convert_element_type.1321)
  %sharding_constraint.294 = s32[1,8192,8]{2,1,0} copy(%reshape.9527)
  %reduce-window.5 = s32[1,8192,8]{2,1,0} reduce-window(%sharding_constraint.294, %constant.1181), window={size=1x8192x1 pad=0_0x8191_0x0_0}, to_apply=%region_69.2691
  %reshape.9529 = s32[1,4096,2,8]{3,2,1,0} reshape(%reduce-window.5)
  %sharding_constraint.295 = s32[1,4096,2,8]{3,2,1,0} copy(%reshape.9529)
  %le.12 = pred[1,4096,2,8]{3,2,1,0} compare(%sharding_constraint.295, %broadcast.3429), direction=LE
  %mul.2798 = s32[1,4096,2,8]{3,2,1,0} select(%le.12, %convert_element_type.1321, %broadcast.3430)
  %reduce.244 = s32[1,4096,8]{2,1,0} reduce(%mul.2798, %constant.1181), dimensions={2}, to_apply=%region_70.2700
  %convert_element_type.1322 = bf16[1,4096,8]{2,1,0} convert(%reduce.244)
  %mul.2799 = bf16[1,4096,8]{2,1,0} multiply(%scatter.140, %convert_element_type.1322)
  %mul.2800 = bf16[1,4096,8,1025]{3,2,1,0} broadcast(%mul.2799), dimensions={0,1,2}
  %mul.2801 = s32[1,8192,8]{2,1,0} multiply(%sharding_constraint.294, %reduce-window.5)
  %reshape.9530 = s32[1,4096,2,8]{3,2,1,0} reshape(%mul.2801)
  %reduce.245 = s32[1,4096,8]{2,1,0} reduce(%reshape.9530, %constant.1181), dimensions={2}, to_apply=%region_71.2710
  %mul.2803 = s32[1,4096,8]{2,1,0} multiply(%reduce.245, %reduce.244)
  %eq.1913 = s32[1,4096,8,1025]{3,2,1,0} broadcast(%mul.2803), dimensions={0,1,2}
  %iota.2009 = s32[1,4096,8,1025]{3,2,1,0} iota(), iota_dimension=3
  %eq.1914 = pred[1,4096,8,1025]{3,2,1,0} compare(%eq.1913, %iota.2009), direction=EQ
  %convert_element_type.1323 = s32[1,4096,8,1025]{3,2,1,0} convert(%eq.1914)
  %convert_element_type.1325 = bf16[1,4096,8,1025]{3,2,1,0} convert(%convert_element_type.1323)
  %mul.2804 = bf16[1,4096,8,1025]{3,2,1,0} multiply(%mul.2800, %convert_element_type.1325)
  %slice.177 = bf16[1,4096,8,1024]{3,2,1,0} slice(%mul.2804), slice={[0:1], [0:4096], [0:8], [1:1025]}
  %sharding_constraint.296 = bf16[1,4096,8,1024]{3,2,1,0} copy(%slice.177)
  %convert_element_type.1326 = pred[1,4096,8,1024]{3,2,1,0} compare(%slice.177, %broadcast.3431), direction=NE
  %sharding_constraint.297 = pred[1,4096,8,1024]{3,2,1,0} copy(%convert_element_type.1326)
  %dot_general.41 = bf16[1,4096,8,1024]{3,2,1,0} convert(%sharding_constraint.297)
  %dot.218 = bf16[1,8,1024,4096]{3,2,1,0} dot(%dot_general.41, %sharding_constraint.292), lhs_batch_dims={0}, lhs_contracting_dims={1}, rhs_batch_dims={0}, rhs_contracting_dims={1}
  %reshape.9533 = bf16[1,8,1,1024,4096]{4,3,2,1,0} reshape(%dot.218)
  %all-to-all.10 = bf16[1,8,1,1024,4096]{4,3,2,1,0} all-to-all(%reshape.9533), channel_id=66, replica_groups=[1,8]<=[8], dimensions={1}
  %transpose.20 = bf16[8,1,1,1024,4096]{4,3,2,0,1} transpose(%all-to-all.10), dimensions={1,0,2,3,4}
  %reshape.9534 = bf16[8,1,1024,4096]{3,2,1,0} reshape(%transpose.20)
  %transpose.21 = bf16[1,8,1024,4096]{3,2,0,1} transpose(%reshape.9534), dimensions={1,0,2,3}
  %sharding_constraint.298 = bf16[1,8,1024,4096]{3,2,0,1} copy(%transpose.21)
  %param.64 = bf16[1,4096,14336]{2,1,0} parameter(273), sharding={devices=[8,1,1]<=[8]}
  %sharding_constraint.299 = bf16[1,4096,14336]{2,1,0} copy(%param.64)
  %dot.219 = bf16[1,8,1024,14336]{3,2,1,0} dot(%sharding_constraint.298, %sharding_constraint.299), lhs_batch_dims={0}, lhs_contracting_dims={3}, rhs_batch_dims={0}, rhs_contracting_dims={1}
  %sharding_constraint.300 = bf16[1,8,1024,14336]{3,2,1,0} copy(%dot.219)
  %neg.163 = bf16[1,8,1024,14336]{3,2,1,0} negate(%sharding_constraint.300)
  %exp.137 = bf16[1,8,1024,14336]{3,2,1,0} exponential(%neg.163)
  %add.1473 = bf16[1,8,1024,14336]{3,2,1,0} add(%exp.137, %jit_silu_.0)
  %div.476 = bf16[1,8,1024,14336]{3,2,1,0} divide(%jit_silu_.0, %add.1473)
  %mul.2805 = bf16[1,8,1024,14336]{3,2,1,0} multiply(%sharding_constraint.300, %div.476)
  %param.65 = bf16[1,4096,14336]{2,1,0} parameter(274), sharding={devices=[8,1,1]<=[8]}
  %sharding_constraint.301 = bf16[1,4096,14336]{2,1,0} copy(%param.65)
  %dot.220 = bf16[1,8,1024,14336]{3,2,1,0} dot(%sharding_constraint.298, %sharding_constraint.301), lhs_batch_dims={0}, lhs_contracting_dims={3}, rhs_batch_dims={0}, rhs_contracting_dims={1}
  %sharding_constraint.302 = bf16[1,8,1024,14336]{3,2,1,0} copy(%dot.220)
  %mul.2806 = bf16[1,8,1024,14336]{3,2,1,0} multiply(%mul.2805, %sharding_constraint.302)
  %param.66 = bf16[1,14336,4096]{2,1,0} parameter(275), sharding={devices=[8,1,1]<=[8]}
  %sharding_constraint.303 = bf16[1,14336,4096]{2,1,0} copy(%param.66)
  %dot.221 = bf16[1,8,1024,4096]{3,2,1,0} dot(%mul.2806, %sharding_constraint.303), lhs_batch_dims={0}, lhs_contracting_dims={3}, rhs_batch_dims={0}, rhs_contracting_dims={1}
  %sharding_constraint.304 = bf16[1,8,1024,4096]{3,2,1,0} copy(%dot.221)
  %reshape.9537 = bf16[1,8,1,1024,4096]{4,3,2,1,0} reshape(%sharding_constraint.304)
  %all-to-all.11 = bf16[1,8,1,1024,4096]{4,3,2,1,0} all-to-all(%reshape.9537), channel_id=67, replica_groups=[1,8]<=[8], dimensions={1}
  %transpose.22 = bf16[8,1,1,1024,4096]{4,3,2,0,1} transpose(%all-to-all.11), dimensions={1,0,2,3,4}
  %reshape.9538 = bf16[8,1,1024,4096]{3,2,1,0} reshape(%transpose.22)
  %dot.222 = bf16[1,4096,4096]{2,1,0} dot(%sharding_constraint.296, %reshape.9538), lhs_batch_dims={0}, lhs_contracting_dims={3,2}, rhs_batch_dims={1}, rhs_contracting_dims={2,0}
  %sharding_constraint.305 = bf16[1,4096,4096]{2,1,0} copy(%dot.222)
  %add.1474 = bf16[1,4096,4096]{2,1,0} add(%sharding_constraint.305, %add.1464)
  %sharding_constraint.306 = bf16[1,4096,4096]{2,1,0} copy(%add.1474)
  %sharding_constraint.307 = bf16[1,4096,4096]{2,1,0} copy(%sharding_constraint.306)
  %convert_element_type.1328 = f32[1,4096,4096]{2,1,0} convert(%sharding_constraint.307)
  %square.15 = f32[1,4096,4096]{2,1,0} multiply(%convert_element_type.1328, %convert_element_type.1328)
  %reduce.246 = f32[1,4096]{1,0} reduce(%square.15, %constant.1360), dimensions={2}, to_apply=%region_72.2752
  %div.477 = f32[1,4096]{1,0} multiply(%reduce.246, %broadcast.3412)
  %add.1475 = f32[1,4096]{1,0} add(%div.477, %broadcast.3413)
  %rsqrt.76 = f32[1,4096]{1,0} rsqrt(%add.1475)
  %mul.2807 = f32[1,4096,4096]{2,1,0} broadcast(%rsqrt.76), dimensions={0,1}
  %mul.2808 = f32[1,4096,4096]{2,1,0} multiply(%convert_element_type.1328, %mul.2807)
  %convert_element_type.1329 = bf16[1,4096,4096]{2,1,0} convert(%mul.2808)
  %param.67 = bf16[4096]{0} parameter(287), sharding={replicated}
  %mul.2809 = bf16[1,4096,4096]{2,1,0} broadcast(%param.67), dimensions={2}
  %mul.2813 = bf16[1,4096,4096]{2,1,0} multiply(%convert_element_type.1329, %mul.2809)
  %sharding_constraint.308 = bf16[1,4096,4096]{2,1,0} copy(%mul.2813)
  %sharding_constraint.309 = bf16[1,4096,4096]{2,1,0} copy(%sharding_constraint.308)
  %param.68 = bf16[512,32,128]{2,1,0} parameter(290), sharding={devices=[8,1,1]<=[8]}
  %all-gather.43 = bf16[4096,32,128]{2,1,0} all-gather(%param.68), channel_id=68, replica_groups=[1,8]<=[8], dimensions={0}, use_global_device_ids=true
  %dot.223 = bf16[1,4096,32,128]{3,2,1,0} dot(%sharding_constraint.309, %all-gather.43), lhs_contracting_dims={2}, rhs_contracting_dims={0}
  %slice.178 = bf16[1,4096,32,64]{3,2,1,0} slice(%dot.223), slice={[0:1], [0:4096], [0:32], [0:64]}
  %mul.2829 = bf16[1,4096,32,64]{3,2,1,0} multiply(%slice.178, %mul.2435)
  %slice.179 = bf16[1,4096,32,64]{3,2,1,0} slice(%dot.223), slice={[0:1], [0:4096], [0:32], [64:128]}
  %mul.2840 = bf16[1,4096,32,64]{3,2,1,0} multiply(%slice.179, %mul.2438)
  %sub.97 = bf16[1,4096,32,64]{3,2,1,0} subtract(%mul.2829, %mul.2840)
  %mul.2843 = bf16[1,4096,32,64]{3,2,1,0} multiply(%slice.179, %mul.2435)
  %mul.2846 = bf16[1,4096,32,64]{3,2,1,0} multiply(%slice.178, %mul.2438)
  %add.1476 = bf16[1,4096,32,64]{3,2,1,0} add(%mul.2843, %mul.2846)
  %concatenate.51 = bf16[1,4096,32,128]{3,2,1,0} concatenate(%sub.97, %add.1476), dimensions={3}
  %sharding_constraint.310 = bf16[1,4096,32,128]{3,2,1,0} copy(%concatenate.51)
  %param.69 = bf16[512,8,128]{2,1,0} parameter(288), sharding={devices=[8,1,1]<=[8]}
  %all-gather.44 = bf16[4096,8,128]{2,1,0} all-gather(%param.69), channel_id=69, replica_groups=[1,8]<=[8], dimensions={0}, use_global_device_ids=true
  %dot.224 = bf16[1,4096,8,128]{3,2,1,0} dot(%sharding_constraint.309, %all-gather.44), lhs_contracting_dims={2}, rhs_contracting_dims={0}
  %slice.180 = bf16[1,4096,8,64]{3,2,1,0} slice(%dot.224), slice={[0:1], [0:4096], [0:8], [0:64]}
  %mul.2850 = bf16[1,4096,8,64]{3,2,1,0} multiply(%slice.180, %mul.2456)
  %slice.181 = bf16[1,4096,8,64]{3,2,1,0} slice(%dot.224), slice={[0:1], [0:4096], [0:8], [64:128]}
  %mul.2853 = bf16[1,4096,8,64]{3,2,1,0} multiply(%slice.181, %mul.2460)
  %sub.98 = bf16[1,4096,8,64]{3,2,1,0} subtract(%mul.2850, %mul.2853)
  %mul.2856 = bf16[1,4096,8,64]{3,2,1,0} multiply(%slice.181, %mul.2456)
  %mul.2859 = bf16[1,4096,8,64]{3,2,1,0} multiply(%slice.180, %mul.2460)
  %add.1477 = bf16[1,4096,8,64]{3,2,1,0} add(%mul.2856, %mul.2859)
  %concatenate.52 = bf16[1,4096,8,128]{3,2,1,0} concatenate(%sub.98, %add.1477), dimensions={3}
  %sharding_constraint.312 = bf16[1,4096,8,128]{3,2,1,0} copy(%concatenate.52)
  %param.70 = bf16[512,8,128]{2,1,0} parameter(291), sharding={devices=[8,1,1]<=[8]}
  %all-gather.45 = bf16[4096,8,128]{2,1,0} all-gather(%param.70), channel_id=70, replica_groups=[1,8]<=[8], dimensions={0}, use_global_device_ids=true
  %dot.225 = bf16[1,4096,8,128]{3,2,1,0} dot(%sharding_constraint.309, %all-gather.45), lhs_contracting_dims={2}, rhs_contracting_dims={0}
  %sharding_constraint.313 = bf16[1,4096,8,128]{3,2,1,0} copy(%dot.225)
  %te_fused_attn_forward_ffi.20 = (bf16[1,4096,32,128]{3,2,1,0}, f32[1,32,4096,1]{3,2,1,0}, u32[2,4]{1,0}, u8[48]{0}) custom-call(%sharding_constraint.310, %sharding_constraint.312, %sharding_constraint.313, %constant.1403, %dynamic-slice.38, /*index=5*/%concatenate.31, %concatenate.36, %constant.1416, %constant.1416, %constant.1416, /*index=10*/%constant.1416, %constant.1416, %constant.1416), custom_call_target="te_fused_attn_forward_ffi", operand_layout_constraints={bf16[1,4096,32,128]{3,2,1,0}, bf16[1,4096,8,128]{3,2,1,0}, bf16[1,4096,8,128]{3,2,1,0}, bf16[0]{0}, u32[2]{0}, s32[2]{0}, s32[2]{0}, f32[0]{0}, f32[0]{0}, f32[0]{0}, f32[0]{0}, f32[0]{0}, f32[0]{0}}, api_version=API_VERSION_TYPED_FFI, backend_config={attn_heads = 32 : i64, bias_batch = 0 : i64, bias_heads = 0 : i64, bias_type = 0 : i64, deterministic = false, dropout_probability = 0.000000e+00 : f64, input_batch = 1 : i64, is_training = true, kv_max_seqlen = 4096 : i64, mask_type = 3 : i64, max_segments_per_seq = 1 : i64, num_gqa_groups = 8 : i64, q_max_seqlen = 4096 : i64, qk_head_dim = 128 : i64, qkv_layout = 9 : i64, scaling_factor = 1.000000e+00 : f64, v_head_dim = 128 : i64, window_size_left = -1 : i64, window_size_right = -1 : i64}
  %get-tuple-element.319 = bf16[1,4096,32,128]{3,2,1,0} get-tuple-element(%te_fused_attn_forward_ffi.20), index=0
  %sharding_constraint.314 = bf16[1,4096,32,128]{3,2,1,0} copy(%get-tuple-element.319)
  %param.71 = bf16[32,128,512]{2,1,0} parameter(289), sharding={devices=[1,1,8]<=[8]}
  %all-gather.47 = bf16[32,128,4096]{2,1,0} all-gather(%param.71), channel_id=72, replica_groups=[1,8]<=[8], dimensions={2}, use_global_device_ids=true
  %dot.226 = bf16[1,4096,4096]{2,1,0} dot(%sharding_constraint.314, %all-gather.47), lhs_contracting_dims={2,3}, rhs_contracting_dims={0,1}
  %sharding_constraint.315 = bf16[1,4096,4096]{2,1,0} copy(%dot.226)
  %add.1478 = bf16[1,4096,4096]{2,1,0} add(%sharding_constraint.307, %sharding_constraint.315)
  %convert_element_type.1340 = f32[1,4096,4096]{2,1,0} convert(%add.1478)
  %square.16 = f32[1,4096,4096]{2,1,0} multiply(%convert_element_type.1340, %convert_element_type.1340)
  %reduce.250 = f32[1,4096]{1,0} reduce(%square.16, %constant.1360), dimensions={2}, to_apply=%region_76.2876
  %div.486 = f32[1,4096]{1,0} multiply(%reduce.250, %broadcast.3412)
  %add.1479 = f32[1,4096]{1,0} add(%div.486, %broadcast.3413)
  %rsqrt.77 = f32[1,4096]{1,0} rsqrt(%add.1479)
  %mul.2860 = f32[1,4096,4096]{2,1,0} broadcast(%rsqrt.77), dimensions={0,1}
  %mul.2861 = f32[1,4096,4096]{2,1,0} multiply(%convert_element_type.1340, %mul.2860)
  %convert_element_type.1341 = bf16[1,4096,4096]{2,1,0} convert(%mul.2861)
  %param.72 = bf16[4096]{0} parameter(286), sharding={replicated}
  %mul.2862 = bf16[1,4096,4096]{2,1,0} broadcast(%param.72), dimensions={2}
  %mul.2863 = bf16[1,4096,4096]{2,1,0} multiply(%convert_element_type.1341, %mul.2862)
  %sharding_constraint.316 = bf16[1,4096,4096]{2,1,0} copy(%mul.2863)
  %param.73 = bf16[512,8]{1,0} parameter(282), sharding={devices=[8,1]<=[8]}
  %all-gather.48 = bf16[4096,8]{1,0} all-gather(%param.73), channel_id=73, replica_groups=[1,8]<=[8], dimensions={0}, use_global_device_ids=true
  %dot.227 = bf16[1,4096,8]{2,1,0} dot(%sharding_constraint.316, %all-gather.48), lhs_contracting_dims={2}, rhs_contracting_dims={0}
  %sharding_constraint.317 = bf16[1,4096,8]{2,1,0} copy(%dot.227)
  %top_k.18 = bf16[4096,8]{1,0} reshape(%sharding_constraint.317)
  %top_k.19 = (bf16[4096,2]{1,0}, s32[4096,2]{1,0}) custom-call(%top_k.18), custom_call_target="TopK", called_computations={%compare_greater_than.5.2895.clone}
  %get-tuple-element.320 = bf16[4096,2]{1,0} get-tuple-element(%top_k.19), index=0
  %get-tuple-element.321 = s32[4096,2]{1,0} get-tuple-element(%top_k.19), index=1
  %add.1480 = s32[4096,2]{1,0} add(%get-tuple-element.321, %broadcast.3418)
  %sort.70 = (bf16[4096,2]{1,0}, s32[4096,2]{1,0}) sort(%get-tuple-element.320, %add.1480), dimensions={1}, is_stable=true, to_apply=%compare-value-and-index.5
  %get-tuple-element.323 = s32[4096,2]{1,0} get-tuple-element(%sort.70), index=1
  %slice.184 = s32[4096,2]{1,0} slice(%get-tuple-element.323), slice={[0:4096], [0:2]}
  %top_k.20 = s32[1,4096,2]{2,1,0} reshape(%slice.184)
  %lt.20 = pred[1,4096,2]{2,1,0} compare(%top_k.20, %broadcast.3419), direction=LT
  %add.1481 = s32[1,4096,2]{2,1,0} add(%top_k.20, %broadcast.3420)
  %select_n.286 = s32[1,4096,2]{2,1,0} select(%lt.20, %add.1481, %top_k.20)
  %broadcast_in_dim.538 = s32[1,4096,2,1]{3,2,1,0} reshape(%select_n.286)
  %concatenate.55 = s32[1,4096,2,3]{3,2,1,0} concatenate(%add.1356, %iota.1918, %broadcast_in_dim.538), dimensions={3}
  %subtract.20 = s32[1,4096,2,3]{3,2,1,0} subtract(%concatenate.55, %broadcast.3428)
  %scatter.141 = u32[1,4096,8]{2,1,0} scatter(%dynamic-slice.43, %subtract.20, %add.1401), update_window_dims={}, inserted_window_dims={0,1,2}, scatter_dims_to_operand_dims={0,1,2}, index_vector_dim=3, to_apply=%region_77.2923.clone
  %gather.6 = u32[1,4096,2]{2,1,0} gather(%scatter.141, %subtract.20), offset_dims={}, collapsed_slice_dims={0,1,2}, start_index_map={0,1,2}, index_vector_dim=3, slice_sizes={1,1,1}
  %eq.1918 = pred[1,4096,2]{2,1,0} compare(%add.1401, %gather.6), direction=EQ
  %get-tuple-element.322 = bf16[4096,2]{1,0} get-tuple-element(%sort.70), index=0
  %slice.183 = bf16[4096,2]{1,0} slice(%get-tuple-element.322), slice={[0:4096], [0:2]}
  %convert_element_type.1343 = f32[4096,2]{1,0} convert(%slice.183)
  %convert_element_type.1345 = f32[1,4096,2]{2,1,0} reshape(%convert_element_type.1343)
  %reduce.251 = f32[4096]{0} reduce(%convert_element_type.1343, %constant.1450), dimensions={1}, to_apply=%region_78.2932
  %sub.99 = f32[1,4096]{1,0} reshape(%reduce.251)
  %sub.100 = f32[1,4096,2]{2,1,0} broadcast(%sub.99), dimensions={0,1}
  %sub.101 = f32[1,4096,2]{2,1,0} subtract(%convert_element_type.1345, %sub.100)
  %exp.138 = f32[1,4096,2]{2,1,0} exponential(%sub.101)
  %reduce.252 = f32[1,4096]{1,0} reduce(%exp.138, %constant.1360), dimensions={2}, to_apply=%region_79.2941
  %div.487 = f32[1,4096,2]{2,1,0} broadcast(%reduce.252), dimensions={0,1}
  %div.488 = f32[1,4096,2]{2,1,0} divide(%exp.138, %div.487)
  %convert_element_type.1346 = bf16[1,4096,2]{2,1,0} convert(%div.488)
  %select_n.287 = bf16[1,4096,2]{2,1,0} select(%eq.1918, %convert_element_type.1346, %broadcast.3427)
  %scatter.142 = bf16[1,4096,8]{2,1,0} scatter(%broadcast.3379, %subtract.20, %select_n.287), update_window_dims={}, inserted_window_dims={0,1,2}, scatter_dims_to_operand_dims={0,1,2}, index_vector_dim=3, to_apply=%region_80.2950.clone
  %eq.1920 = s32[1,4096,2,8]{3,2,1,0} broadcast(%top_k.20), dimensions={0,1,2}
  %iota.2020 = s32[1,4096,2,8]{3,2,1,0} iota(), iota_dimension=3
  %eq.1921 = pred[1,4096,2,8]{3,2,1,0} compare(%eq.1920, %iota.2020), direction=EQ
  %convert_element_type.1347 = s32[1,4096,2,8]{3,2,1,0} convert(%eq.1921)
  %reshape.9578 = s32[1,8192,8]{2,1,0} reshape(%convert_element_type.1347)
  %sharding_constraint.318 = s32[1,8192,8]{2,1,0} copy(%reshape.9578)
  %reduce-window.6 = s32[1,8192,8]{2,1,0} reduce-window(%sharding_constraint.318, %constant.1181), window={size=1x8192x1 pad=0_0x8191_0x0_0}, to_apply=%region_81.2962
  %reshape.9580 = s32[1,4096,2,8]{3,2,1,0} reshape(%reduce-window.6)
  %sharding_constraint.319 = s32[1,4096,2,8]{3,2,1,0} copy(%reshape.9580)
  %le.14 = pred[1,4096,2,8]{3,2,1,0} compare(%sharding_constraint.319, %broadcast.3429), direction=LE
  %mul.2864 = s32[1,4096,2,8]{3,2,1,0} select(%le.14, %convert_element_type.1347, %broadcast.3430)
  %reduce.253 = s32[1,4096,8]{2,1,0} reduce(%mul.2864, %constant.1181), dimensions={2}, to_apply=%region_82.2971
  %convert_element_type.1348 = bf16[1,4096,8]{2,1,0} convert(%reduce.253)
  %mul.2865 = bf16[1,4096,8]{2,1,0} multiply(%scatter.142, %convert_element_type.1348)
  %mul.2866 = bf16[1,4096,8,1025]{3,2,1,0} broadcast(%mul.2865), dimensions={0,1,2}
  %mul.2867 = s32[1,8192,8]{2,1,0} multiply(%sharding_constraint.318, %reduce-window.6)
  %reshape.9581 = s32[1,4096,2,8]{3,2,1,0} reshape(%mul.2867)
  %reduce.254 = s32[1,4096,8]{2,1,0} reduce(%reshape.9581, %constant.1181), dimensions={2}, to_apply=%region_83.2981
  %mul.2868 = s32[1,4096,8]{2,1,0} multiply(%reduce.254, %reduce.253)
  %eq.1922 = s32[1,4096,8,1025]{3,2,1,0} broadcast(%mul.2868), dimensions={0,1,2}
  %iota.2023 = s32[1,4096,8,1025]{3,2,1,0} iota(), iota_dimension=3
  %eq.1923 = pred[1,4096,8,1025]{3,2,1,0} compare(%eq.1922, %iota.2023), direction=EQ
  %convert_element_type.1349 = s32[1,4096,8,1025]{3,2,1,0} convert(%eq.1923)
  %convert_element_type.1350 = bf16[1,4096,8,1025]{3,2,1,0} convert(%convert_element_type.1349)
  %mul.2869 = bf16[1,4096,8,1025]{3,2,1,0} multiply(%mul.2866, %convert_element_type.1350)
  %slice.185 = bf16[1,4096,8,1024]{3,2,1,0} slice(%mul.2869), slice={[0:1], [0:4096], [0:8], [1:1025]}
  %sharding_constraint.320 = bf16[1,4096,8,1024]{3,2,1,0} copy(%slice.185)
  %convert_element_type.1351 = pred[1,4096,8,1024]{3,2,1,0} compare(%slice.185, %broadcast.3431), direction=NE
  %sharding_constraint.321 = pred[1,4096,8,1024]{3,2,1,0} copy(%convert_element_type.1351)
  %dot_general.42 = bf16[1,4096,8,1024]{3,2,1,0} convert(%sharding_constraint.321)
  %dot.228 = bf16[1,8,1024,4096]{3,2,1,0} dot(%dot_general.42, %sharding_constraint.316), lhs_batch_dims={0}, lhs_contracting_dims={1}, rhs_batch_dims={0}, rhs_contracting_dims={1}
  %reshape.9584 = bf16[1,8,1,1024,4096]{4,3,2,1,0} reshape(%dot.228)
  %all-to-all.12 = bf16[1,8,1,1024,4096]{4,3,2,1,0} all-to-all(%reshape.9584), channel_id=77, replica_groups=[1,8]<=[8], dimensions={1}
  %transpose.23 = bf16[8,1,1,1024,4096]{4,3,2,0,1} transpose(%all-to-all.12), dimensions={1,0,2,3,4}
  %reshape.9585 = bf16[8,1,1024,4096]{3,2,1,0} reshape(%transpose.23)
  %transpose.24 = bf16[1,8,1024,4096]{3,2,0,1} transpose(%reshape.9585), dimensions={1,0,2,3}
  %sharding_constraint.322 = bf16[1,8,1024,4096]{3,2,0,1} copy(%transpose.24)
  %param.74 = bf16[1,4096,14336]{2,1,0} parameter(283), sharding={devices=[8,1,1]<=[8]}
  %sharding_constraint.323 = bf16[1,4096,14336]{2,1,0} copy(%param.74)
  %dot.229 = bf16[1,8,1024,14336]{3,2,1,0} dot(%sharding_constraint.322, %sharding_constraint.323), lhs_batch_dims={0}, lhs_contracting_dims={3}, rhs_batch_dims={0}, rhs_contracting_dims={1}
  %sharding_constraint.324 = bf16[1,8,1024,14336]{3,2,1,0} copy(%dot.229)
  %neg.164 = bf16[1,8,1024,14336]{3,2,1,0} negate(%sharding_constraint.324)
  %exp.139 = bf16[1,8,1024,14336]{3,2,1,0} exponential(%neg.164)
  %add.1486 = bf16[1,8,1024,14336]{3,2,1,0} add(%exp.139, %jit_silu_.0)
  %div.489 = bf16[1,8,1024,14336]{3,2,1,0} divide(%jit_silu_.0, %add.1486)
  %mul.2870 = bf16[1,8,1024,14336]{3,2,1,0} multiply(%sharding_constraint.324, %div.489)
  %param.75 = bf16[1,4096,14336]{2,1,0} parameter(284), sharding={devices=[8,1,1]<=[8]}
  %sharding_constraint.325 = bf16[1,4096,14336]{2,1,0} copy(%param.75)
  %dot.230 = bf16[1,8,1024,14336]{3,2,1,0} dot(%sharding_constraint.322, %sharding_constraint.325), lhs_batch_dims={0}, lhs_contracting_dims={3}, rhs_batch_dims={0}, rhs_contracting_dims={1}
  %sharding_constraint.326 = bf16[1,8,1024,14336]{3,2,1,0} copy(%dot.230)
  %mul.2871 = bf16[1,8,1024,14336]{3,2,1,0} multiply(%mul.2870, %sharding_constraint.326)
  %param.76 = bf16[1,14336,4096]{2,1,0} parameter(285), sharding={devices=[8,1,1]<=[8]}
  %sharding_constraint.327 = bf16[1,14336,4096]{2,1,0} copy(%param.76)
  %dot.231 = bf16[1,8,1024,4096]{3,2,1,0} dot(%mul.2871, %sharding_constraint.327), lhs_batch_dims={0}, lhs_contracting_dims={3}, rhs_batch_dims={0}, rhs_contracting_dims={1}
  %sharding_constraint.328 = bf16[1,8,1024,4096]{3,2,1,0} copy(%dot.231)
  %reshape.9588 = bf16[1,8,1,1024,4096]{4,3,2,1,0} reshape(%sharding_constraint.328)
  %all-to-all.13 = bf16[1,8,1,1024,4096]{4,3,2,1,0} all-to-all(%reshape.9588), channel_id=78, replica_groups=[1,8]<=[8], dimensions={1}
  %transpose.25 = bf16[8,1,1,1024,4096]{4,3,2,0,1} transpose(%all-to-all.13), dimensions={1,0,2,3,4}
  %reshape.9589 = bf16[8,1,1024,4096]{3,2,1,0} reshape(%transpose.25)
  %dot.232 = bf16[1,4096,4096]{2,1,0} dot(%sharding_constraint.320, %reshape.9589), lhs_batch_dims={0}, lhs_contracting_dims={3,2}, rhs_batch_dims={1}, rhs_contracting_dims={2,0}
  %sharding_constraint.329 = bf16[1,4096,4096]{2,1,0} copy(%dot.232)
  %add.1487 = bf16[1,4096,4096]{2,1,0} add(%sharding_constraint.329, %add.1478)
  %sharding_constraint.330 = bf16[1,4096,4096]{2,1,0} copy(%add.1487)
  %sharding_constraint.331 = bf16[1,4096,4096]{2,1,0} copy(%sharding_constraint.330)
  %convert_element_type.1352 = f32[1,4096,4096]{2,1,0} convert(%sharding_constraint.331)
  %square.17 = f32[1,4096,4096]{2,1,0} multiply(%convert_element_type.1352, %convert_element_type.1352)
  %reduce.255 = f32[1,4096]{1,0} reduce(%square.17, %constant.1360), dimensions={2}, to_apply=%region_84.3023
  %div.490 = f32[1,4096]{1,0} multiply(%reduce.255, %broadcast.3412)
  %add.1488 = f32[1,4096]{1,0} add(%div.490, %broadcast.3413)
  %rsqrt.78 = f32[1,4096]{1,0} rsqrt(%add.1488)
  %mul.2872 = f32[1,4096,4096]{2,1,0} broadcast(%rsqrt.78), dimensions={0,1}
  %mul.2873 = f32[1,4096,4096]{2,1,0} multiply(%convert_element_type.1352, %mul.2872)
  %convert_element_type.1353 = bf16[1,4096,4096]{2,1,0} convert(%mul.2873)
  %param.77 = bf16[4096]{0} parameter(297), sharding={replicated}
  %mul.2874 = bf16[1,4096,4096]{2,1,0} broadcast(%param.77), dimensions={2}
  %mul.2875 = bf16[1,4096,4096]{2,1,0} multiply(%convert_element_type.1353, %mul.2874)
  %sharding_constraint.332 = bf16[1,4096,4096]{2,1,0} copy(%mul.2875)
  %sharding_constraint.333 = bf16[1,4096,4096]{2,1,0} copy(%sharding_constraint.332)
  %param.78 = bf16[512,32,128]{2,1,0} parameter(300), sharding={devices=[8,1,1]<=[8]}
  %all-gather.50 = bf16[4096,32,128]{2,1,0} all-gather(%param.78), channel_id=79, replica_groups=[1,8]<=[8], dimensions={0}, use_global_device_ids=true
  %dot.233 = bf16[1,4096,32,128]{3,2,1,0} dot(%sharding_constraint.333, %all-gather.50), lhs_contracting_dims={2}, rhs_contracting_dims={0}
  %slice.186 = bf16[1,4096,32,64]{3,2,1,0} slice(%dot.233), slice={[0:1], [0:4096], [0:32], [0:64]}
  %mul.2879 = bf16[1,4096,32,64]{3,2,1,0} multiply(%slice.186, %mul.2435)
  %slice.187 = bf16[1,4096,32,64]{3,2,1,0} slice(%dot.233), slice={[0:1], [0:4096], [0:32], [64:128]}
  %mul.2886 = bf16[1,4096,32,64]{3,2,1,0} multiply(%slice.187, %mul.2438)
  %sub.102 = bf16[1,4096,32,64]{3,2,1,0} subtract(%mul.2879, %mul.2886)
  %mul.2889 = bf16[1,4096,32,64]{3,2,1,0} multiply(%slice.187, %mul.2435)
  %mul.2892 = bf16[1,4096,32,64]{3,2,1,0} multiply(%slice.186, %mul.2438)
  %add.1489 = bf16[1,4096,32,64]{3,2,1,0} add(%mul.2889, %mul.2892)
  %concatenate.59 = bf16[1,4096,32,128]{3,2,1,0} concatenate(%sub.102, %add.1489), dimensions={3}
  %sharding_constraint.334 = bf16[1,4096,32,128]{3,2,1,0} copy(%concatenate.59)
  %param.79 = bf16[512,8,128]{2,1,0} parameter(298), sharding={devices=[8,1,1]<=[8]}
  %all-gather.51 = bf16[4096,8,128]{2,1,0} all-gather(%param.79), channel_id=80, replica_groups=[1,8]<=[8], dimensions={0}, use_global_device_ids=true
  %dot.234 = bf16[1,4096,8,128]{3,2,1,0} dot(%sharding_constraint.333, %all-gather.51), lhs_contracting_dims={2}, rhs_contracting_dims={0}
  %slice.188 = bf16[1,4096,8,64]{3,2,1,0} slice(%dot.234), slice={[0:1], [0:4096], [0:8], [0:64]}
  %mul.2896 = bf16[1,4096,8,64]{3,2,1,0} multiply(%slice.188, %mul.2456)
  %slice.189 = bf16[1,4096,8,64]{3,2,1,0} slice(%dot.234), slice={[0:1], [0:4096], [0:8], [64:128]}
  %mul.2899 = bf16[1,4096,8,64]{3,2,1,0} multiply(%slice.189, %mul.2460)
  %sub.103 = bf16[1,4096,8,64]{3,2,1,0} subtract(%mul.2896, %mul.2899)
  %mul.2902 = bf16[1,4096,8,64]{3,2,1,0} multiply(%slice.189, %mul.2456)
  %mul.2909 = bf16[1,4096,8,64]{3,2,1,0} multiply(%slice.188, %mul.2460)
  %add.1490 = bf16[1,4096,8,64]{3,2,1,0} add(%mul.2902, %mul.2909)
  %concatenate.60 = bf16[1,4096,8,128]{3,2,1,0} concatenate(%sub.103, %add.1490), dimensions={3}
  %sharding_constraint.336 = bf16[1,4096,8,128]{3,2,1,0} copy(%concatenate.60)
  %param.80 = bf16[512,8,128]{2,1,0} parameter(301), sharding={devices=[8,1,1]<=[8]}
  %all-gather.52 = bf16[4096,8,128]{2,1,0} all-gather(%param.80), channel_id=81, replica_groups=[1,8]<=[8], dimensions={0}, use_global_device_ids=true
  %dot.235 = bf16[1,4096,8,128]{3,2,1,0} dot(%sharding_constraint.333, %all-gather.52), lhs_contracting_dims={2}, rhs_contracting_dims={0}
  %sharding_constraint.337 = bf16[1,4096,8,128]{3,2,1,0} copy(%dot.235)
  %te_fused_attn_forward_ffi.24 = (bf16[1,4096,32,128]{3,2,1,0}, f32[1,32,4096,1]{3,2,1,0}, u32[2,4]{1,0}, u8[48]{0}) custom-call(%sharding_constraint.334, %sharding_constraint.336, %sharding_constraint.337, %constant.1403, %dynamic-slice.38, /*index=5*/%concatenate.31, %concatenate.36, %constant.1416, %constant.1416, %constant.1416, /*index=10*/%constant.1416, %constant.1416, %constant.1416), custom_call_target="te_fused_attn_forward_ffi", operand_layout_constraints={bf16[1,4096,32,128]{3,2,1,0}, bf16[1,4096,8,128]{3,2,1,0}, bf16[1,4096,8,128]{3,2,1,0}, bf16[0]{0}, u32[2]{0}, s32[2]{0}, s32[2]{0}, f32[0]{0}, f32[0]{0}, f32[0]{0}, f32[0]{0}, f32[0]{0}, f32[0]{0}}, api_version=API_VERSION_TYPED_FFI, backend_config={attn_heads = 32 : i64, bias_batch = 0 : i64, bias_heads = 0 : i64, bias_type = 0 : i64, deterministic = false, dropout_probability = 0.000000e+00 : f64, input_batch = 1 : i64, is_training = true, kv_max_seqlen = 4096 : i64, mask_type = 3 : i64, max_segments_per_seq = 1 : i64, num_gqa_groups = 8 : i64, q_max_seqlen = 4096 : i64, qk_head_dim = 128 : i64, qkv_layout = 9 : i64, scaling_factor = 1.000000e+00 : f64, v_head_dim = 128 : i64, window_size_left = -1 : i64, window_size_right = -1 : i64}
  %get-tuple-element.329 = bf16[1,4096,32,128]{3,2,1,0} get-tuple-element(%te_fused_attn_forward_ffi.24), index=0
  %sharding_constraint.338 = bf16[1,4096,32,128]{3,2,1,0} copy(%get-tuple-element.329)
  %param.81 = bf16[32,128,512]{2,1,0} parameter(299), sharding={devices=[1,1,8]<=[8]}
  %all-gather.54 = bf16[32,128,4096]{2,1,0} all-gather(%param.81), channel_id=83, replica_groups=[1,8]<=[8], dimensions={2}, use_global_device_ids=true
  %dot.236 = bf16[1,4096,4096]{2,1,0} dot(%sharding_constraint.338, %all-gather.54), lhs_contracting_dims={2,3}, rhs_contracting_dims={0,1}
  %sharding_constraint.339 = bf16[1,4096,4096]{2,1,0} copy(%dot.236)
  %add.1491 = bf16[1,4096,4096]{2,1,0} add(%sharding_constraint.331, %sharding_constraint.339)
  %convert_element_type.1368 = f32[1,4096,4096]{2,1,0} convert(%add.1491)
  %square.18 = f32[1,4096,4096]{2,1,0} multiply(%convert_element_type.1368, %convert_element_type.1368)
  %reduce.259 = f32[1,4096]{1,0} reduce(%square.18, %constant.1360), dimensions={2}, to_apply=%region_88.3147
  %div.499 = f32[1,4096]{1,0} multiply(%reduce.259, %broadcast.3412)
  %add.1492 = f32[1,4096]{1,0} add(%div.499, %broadcast.3413)
  %rsqrt.79 = f32[1,4096]{1,0} rsqrt(%add.1492)
  %mul.2914 = f32[1,4096,4096]{2,1,0} broadcast(%rsqrt.79), dimensions={0,1}
  %mul.2915 = f32[1,4096,4096]{2,1,0} multiply(%convert_element_type.1368, %mul.2914)
  %convert_element_type.1369 = bf16[1,4096,4096]{2,1,0} convert(%mul.2915)
  %param.82 = bf16[4096]{0} parameter(296), sharding={replicated}
  %mul.2916 = bf16[1,4096,4096]{2,1,0} broadcast(%param.82), dimensions={2}
  %mul.2917 = bf16[1,4096,4096]{2,1,0} multiply(%convert_element_type.1369, %mul.2916)
  %sharding_constraint.340 = bf16[1,4096,4096]{2,1,0} copy(%mul.2917)
  %param.83 = bf16[512,8]{1,0} parameter(292), sharding={devices=[8,1]<=[8]}
  %all-gather.55 = bf16[4096,8]{1,0} all-gather(%param.83), channel_id=84, replica_groups=[1,8]<=[8], dimensions={0}, use_global_device_ids=true
  %dot.237 = bf16[1,4096,8]{2,1,0} dot(%sharding_constraint.340, %all-gather.55), lhs_contracting_dims={2}, rhs_contracting_dims={0}
  %sharding_constraint.341 = bf16[1,4096,8]{2,1,0} copy(%dot.237)
  %top_k.21 = bf16[4096,8]{1,0} reshape(%sharding_constraint.341)
  %top_k.22 = (bf16[4096,2]{1,0}, s32[4096,2]{1,0}) custom-call(%top_k.21), custom_call_target="TopK", called_computations={%compare_greater_than.7.3166.clone}
  %get-tuple-element.330 = bf16[4096,2]{1,0} get-tuple-element(%top_k.22), index=0
  %get-tuple-element.331 = s32[4096,2]{1,0} get-tuple-element(%top_k.22), index=1
  %add.1493 = s32[4096,2]{1,0} add(%get-tuple-element.331, %broadcast.3418)
  %sort.71 = (bf16[4096,2]{1,0}, s32[4096,2]{1,0}) sort(%get-tuple-element.330, %add.1493), dimensions={1}, is_stable=true, to_apply=%compare-value-and-index.6
  %get-tuple-element.333 = s32[4096,2]{1,0} get-tuple-element(%sort.71), index=1
  %slice.192 = s32[4096,2]{1,0} slice(%get-tuple-element.333), slice={[0:4096], [0:2]}
  %top_k.23 = s32[1,4096,2]{2,1,0} reshape(%slice.192)
  %lt.23 = pred[1,4096,2]{2,1,0} compare(%top_k.23, %broadcast.3419), direction=LT
  %add.1494 = s32[1,4096,2]{2,1,0} add(%top_k.23, %broadcast.3420)
  %select_n.291 = s32[1,4096,2]{2,1,0} select(%lt.23, %add.1494, %top_k.23)
  %broadcast_in_dim.541 = s32[1,4096,2,1]{3,2,1,0} reshape(%select_n.291)
  %concatenate.63 = s32[1,4096,2,3]{3,2,1,0} concatenate(%add.1356, %iota.1916, %broadcast_in_dim.541), dimensions={3}
  %subtract.23 = s32[1,4096,2,3]{3,2,1,0} subtract(%concatenate.63, %broadcast.3428)
  %scatter.143 = u32[1,4096,8]{2,1,0} scatter(%dynamic-slice.43, %subtract.23, %add.1401), update_window_dims={}, inserted_window_dims={0,1,2}, scatter_dims_to_operand_dims={0,1,2}, index_vector_dim=3, to_apply=%region_89.3194.clone
  %gather.7 = u32[1,4096,2]{2,1,0} gather(%scatter.143, %subtract.23), offset_dims={}, collapsed_slice_dims={0,1,2}, start_index_map={0,1,2}, index_vector_dim=3, slice_sizes={1,1,1}
  %eq.1927 = pred[1,4096,2]{2,1,0} compare(%add.1401, %gather.7), direction=EQ
  %get-tuple-element.332 = bf16[4096,2]{1,0} get-tuple-element(%sort.71), index=0
  %slice.191 = bf16[4096,2]{1,0} slice(%get-tuple-element.332), slice={[0:4096], [0:2]}
  %convert_element_type.1370 = f32[4096,2]{1,0} convert(%slice.191)
  %convert_element_type.1371 = f32[1,4096,2]{2,1,0} reshape(%convert_element_type.1370)
  %reduce.260 = f32[4096]{0} reduce(%convert_element_type.1370, %constant.1450), dimensions={1}, to_apply=%region_90.3203
  %sub.104 = f32[1,4096]{1,0} reshape(%reduce.260)
  %sub.105 = f32[1,4096,2]{2,1,0} broadcast(%sub.104), dimensions={0,1}
  %sub.106 = f32[1,4096,2]{2,1,0} subtract(%convert_element_type.1371, %sub.105)
  %exp.140 = f32[1,4096,2]{2,1,0} exponential(%sub.106)
  %reduce.261 = f32[1,4096]{1,0} reduce(%exp.140, %constant.1360), dimensions={2}, to_apply=%region_91.3212
  %div.500 = f32[1,4096,2]{2,1,0} broadcast(%reduce.261), dimensions={0,1}
  %div.501 = f32[1,4096,2]{2,1,0} divide(%exp.140, %div.500)
  %convert_element_type.1372 = bf16[1,4096,2]{2,1,0} convert(%div.501)
  %select_n.292 = bf16[1,4096,2]{2,1,0} select(%eq.1927, %convert_element_type.1372, %broadcast.3427)
  %scatter.144 = bf16[1,4096,8]{2,1,0} scatter(%broadcast.3379, %subtract.23, %select_n.292), update_window_dims={}, inserted_window_dims={0,1,2}, scatter_dims_to_operand_dims={0,1,2}, index_vector_dim=3, to_apply=%region_92.3221.clone
  %eq.1929 = s32[1,4096,2,8]{3,2,1,0} broadcast(%top_k.23), dimensions={0,1,2}
  %iota.2036 = s32[1,4096,2,8]{3,2,1,0} iota(), iota_dimension=3
  %eq.1930 = pred[1,4096,2,8]{3,2,1,0} compare(%eq.1929, %iota.2036), direction=EQ
  %convert_element_type.1373 = s32[1,4096,2,8]{3,2,1,0} convert(%eq.1930)
  %reshape.9629 = s32[1,8192,8]{2,1,0} reshape(%convert_element_type.1373)
  %sharding_constraint.342 = s32[1,8192,8]{2,1,0} copy(%reshape.9629)
  %reduce-window.7 = s32[1,8192,8]{2,1,0} reduce-window(%sharding_constraint.342, %constant.1181), window={size=1x8192x1 pad=0_0x8191_0x0_0}, to_apply=%region_93.3233
  %reshape.9631 = s32[1,4096,2,8]{3,2,1,0} reshape(%reduce-window.7)
  %sharding_constraint.343 = s32[1,4096,2,8]{3,2,1,0} copy(%reshape.9631)
  %le.16 = pred[1,4096,2,8]{3,2,1,0} compare(%sharding_constraint.343, %broadcast.3429), direction=LE
  %mul.2918 = s32[1,4096,2,8]{3,2,1,0} select(%le.16, %convert_element_type.1373, %broadcast.3430)
  %reduce.262 = s32[1,4096,8]{2,1,0} reduce(%mul.2918, %constant.1181), dimensions={2}, to_apply=%region_94.3242
  %convert_element_type.1374 = bf16[1,4096,8]{2,1,0} convert(%reduce.262)
  %mul.2919 = bf16[1,4096,8]{2,1,0} multiply(%scatter.144, %convert_element_type.1374)
  %mul.2920 = bf16[1,4096,8,1025]{3,2,1,0} broadcast(%mul.2919), dimensions={0,1,2}
  %mul.2921 = s32[1,8192,8]{2,1,0} multiply(%sharding_constraint.342, %reduce-window.7)
  %reshape.9632 = s32[1,4096,2,8]{3,2,1,0} reshape(%mul.2921)
  %reduce.263 = s32[1,4096,8]{2,1,0} reduce(%reshape.9632, %constant.1181), dimensions={2}, to_apply=%region_95.3252
  %mul.2922 = s32[1,4096,8]{2,1,0} multiply(%reduce.263, %reduce.262)
  %eq.1931 = s32[1,4096,8,1025]{3,2,1,0} broadcast(%mul.2922), dimensions={0,1,2}
  %iota.2037 = s32[1,4096,8,1025]{3,2,1,0} iota(), iota_dimension=3
  %eq.1932 = pred[1,4096,8,1025]{3,2,1,0} compare(%eq.1931, %iota.2037), direction=EQ
  %convert_element_type.1375 = s32[1,4096,8,1025]{3,2,1,0} convert(%eq.1932)
  %convert_element_type.1376 = bf16[1,4096,8,1025]{3,2,1,0} convert(%convert_element_type.1375)
  %mul.2923 = bf16[1,4096,8,1025]{3,2,1,0} multiply(%mul.2920, %convert_element_type.1376)
  %slice.193 = bf16[1,4096,8,1024]{3,2,1,0} slice(%mul.2923), slice={[0:1], [0:4096], [0:8], [1:1025]}
  %sharding_constraint.344 = bf16[1,4096,8,1024]{3,2,1,0} copy(%slice.193)
  %convert_element_type.1378 = pred[1,4096,8,1024]{3,2,1,0} compare(%slice.193, %broadcast.3431), direction=NE
  %sharding_constraint.345 = pred[1,4096,8,1024]{3,2,1,0} copy(%convert_element_type.1378)
  %dot_general.43 = bf16[1,4096,8,1024]{3,2,1,0} convert(%sharding_constraint.345)
  %dot.238 = bf16[1,8,1024,4096]{3,2,1,0} dot(%dot_general.43, %sharding_constraint.340), lhs_batch_dims={0}, lhs_contracting_dims={1}, rhs_batch_dims={0}, rhs_contracting_dims={1}
  %reshape.9635 = bf16[1,8,1,1024,4096]{4,3,2,1,0} reshape(%dot.238)
  %all-to-all.14 = bf16[1,8,1,1024,4096]{4,3,2,1,0} all-to-all(%reshape.9635), channel_id=88, replica_groups=[1,8]<=[8], dimensions={1}
  %transpose.26 = bf16[8,1,1,1024,4096]{4,3,2,0,1} transpose(%all-to-all.14), dimensions={1,0,2,3,4}
  %reshape.9636 = bf16[8,1,1024,4096]{3,2,1,0} reshape(%transpose.26)
  %transpose.27 = bf16[1,8,1024,4096]{3,2,0,1} transpose(%reshape.9636), dimensions={1,0,2,3}
  %sharding_constraint.346 = bf16[1,8,1024,4096]{3,2,0,1} copy(%transpose.27)
  %param.84 = bf16[1,4096,14336]{2,1,0} parameter(293), sharding={devices=[8,1,1]<=[8]}
  %sharding_constraint.347 = bf16[1,4096,14336]{2,1,0} copy(%param.84)
  %dot.239 = bf16[1,8,1024,14336]{3,2,1,0} dot(%sharding_constraint.346, %sharding_constraint.347), lhs_batch_dims={0}, lhs_contracting_dims={3}, rhs_batch_dims={0}, rhs_contracting_dims={1}
  %sharding_constraint.348 = bf16[1,8,1024,14336]{3,2,1,0} copy(%dot.239)
  %neg.165 = bf16[1,8,1024,14336]{3,2,1,0} negate(%sharding_constraint.348)
  %exp.141 = bf16[1,8,1024,14336]{3,2,1,0} exponential(%neg.165)
  %add.1499 = bf16[1,8,1024,14336]{3,2,1,0} add(%exp.141, %jit_silu_.0)
  %div.502 = bf16[1,8,1024,14336]{3,2,1,0} divide(%jit_silu_.0, %add.1499)
  %mul.2924 = bf16[1,8,1024,14336]{3,2,1,0} multiply(%sharding_constraint.348, %div.502)
  %param.85 = bf16[1,4096,14336]{2,1,0} parameter(294), sharding={devices=[8,1,1]<=[8]}
  %sharding_constraint.349 = bf16[1,4096,14336]{2,1,0} copy(%param.85)
  %dot.240 = bf16[1,8,1024,14336]{3,2,1,0} dot(%sharding_constraint.346, %sharding_constraint.349), lhs_batch_dims={0}, lhs_contracting_dims={3}, rhs_batch_dims={0}, rhs_contracting_dims={1}
  %sharding_constraint.350 = bf16[1,8,1024,14336]{3,2,1,0} copy(%dot.240)
  %mul.2925 = bf16[1,8,1024,14336]{3,2,1,0} multiply(%mul.2924, %sharding_constraint.350)
  %param.86 = bf16[1,14336,4096]{2,1,0} parameter(295), sharding={devices=[8,1,1]<=[8]}
  %sharding_constraint.351 = bf16[1,14336,4096]{2,1,0} copy(%param.86)
  %dot.241 = bf16[1,8,1024,4096]{3,2,1,0} dot(%mul.2925, %sharding_constraint.351), lhs_batch_dims={0}, lhs_contracting_dims={3}, rhs_batch_dims={0}, rhs_contracting_dims={1}
  %sharding_constraint.352 = bf16[1,8,1024,4096]{3,2,1,0} copy(%dot.241)
  %reshape.9639 = bf16[1,8,1,1024,4096]{4,3,2,1,0} reshape(%sharding_constraint.352)
  %all-to-all.15 = bf16[1,8,1,1024,4096]{4,3,2,1,0} all-to-all(%reshape.9639), channel_id=89, replica_groups=[1,8]<=[8], dimensions={1}
  %transpose.28 = bf16[8,1,1,1024,4096]{4,3,2,0,1} transpose(%all-to-all.15), dimensions={1,0,2,3,4}
  %reshape.9640 = bf16[8,1,1024,4096]{3,2,1,0} reshape(%transpose.28)
  %dot.242 = bf16[1,4096,4096]{2,1,0} dot(%sharding_constraint.344, %reshape.9640), lhs_batch_dims={0}, lhs_contracting_dims={3,2}, rhs_batch_dims={1}, rhs_contracting_dims={2,0}
  %sharding_constraint.353 = bf16[1,4096,4096]{2,1,0} copy(%dot.242)
  %add.1500 = bf16[1,4096,4096]{2,1,0} add(%sharding_constraint.353, %add.1491)
  %sharding_constraint.354 = bf16[1,4096,4096]{2,1,0} copy(%add.1500)
  %sharding_constraint.355 = bf16[1,4096,4096]{2,1,0} copy(%sharding_constraint.354)
  %convert_element_type.1379 = f32[1,4096,4096]{2,1,0} convert(%sharding_constraint.355)
  %square.19 = f32[1,4096,4096]{2,1,0} multiply(%convert_element_type.1379, %convert_element_type.1379)
  %reduce.264 = f32[1,4096]{1,0} reduce(%square.19, %constant.1360), dimensions={2}, to_apply=%region_96.3294
  %div.503 = f32[1,4096]{1,0} multiply(%reduce.264, %broadcast.3412)
  %add.1501 = f32[1,4096]{1,0} add(%div.503, %broadcast.3413)
  %rsqrt.80 = f32[1,4096]{1,0} rsqrt(%add.1501)
  %mul.2926 = f32[1,4096,4096]{2,1,0} broadcast(%rsqrt.80), dimensions={0,1}
  %mul.2927 = f32[1,4096,4096]{2,1,0} multiply(%convert_element_type.1379, %mul.2926)
  %convert_element_type.1380 = bf16[1,4096,4096]{2,1,0} convert(%mul.2927)
  %param.87 = bf16[4096]{0} parameter(307), sharding={replicated}
  %mul.2928 = bf16[1,4096,4096]{2,1,0} broadcast(%param.87), dimensions={2}
  %mul.2929 = bf16[1,4096,4096]{2,1,0} multiply(%convert_element_type.1380, %mul.2928)
  %sharding_constraint.356 = bf16[1,4096,4096]{2,1,0} copy(%mul.2929)
  %sharding_constraint.357 = bf16[1,4096,4096]{2,1,0} copy(%sharding_constraint.356)
  %param.88 = bf16[512,32,128]{2,1,0} parameter(310), sharding={devices=[8,1,1]<=[8]}
  %all-gather.57 = bf16[4096,32,128]{2,1,0} all-gather(%param.88), channel_id=90, replica_groups=[1,8]<=[8], dimensions={0}, use_global_device_ids=true
  %dot.243 = bf16[1,4096,32,128]{3,2,1,0} dot(%sharding_constraint.357, %all-gather.57), lhs_contracting_dims={2}, rhs_contracting_dims={0}
  %slice.194 = bf16[1,4096,32,64]{3,2,1,0} slice(%dot.243), slice={[0:1], [0:4096], [0:32], [0:64]}
  %mul.2933 = bf16[1,4096,32,64]{3,2,1,0} multiply(%slice.194, %mul.2435)
  %slice.195 = bf16[1,4096,32,64]{3,2,1,0} slice(%dot.243), slice={[0:1], [0:4096], [0:32], [64:128]}
  %mul.2936 = bf16[1,4096,32,64]{3,2,1,0} multiply(%slice.195, %mul.2438)
  %sub.107 = bf16[1,4096,32,64]{3,2,1,0} subtract(%mul.2933, %mul.2936)
  %mul.2939 = bf16[1,4096,32,64]{3,2,1,0} multiply(%slice.195, %mul.2435)
  %mul.2942 = bf16[1,4096,32,64]{3,2,1,0} multiply(%slice.194, %mul.2438)
  %add.1502 = bf16[1,4096,32,64]{3,2,1,0} add(%mul.2939, %mul.2942)
  %concatenate.67 = bf16[1,4096,32,128]{3,2,1,0} concatenate(%sub.107, %add.1502), dimensions={3}
  %sharding_constraint.358 = bf16[1,4096,32,128]{3,2,1,0} copy(%concatenate.67)
  %param.89 = bf16[512,8,128]{2,1,0} parameter(308), sharding={devices=[8,1,1]<=[8]}
  %all-gather.58 = bf16[4096,8,128]{2,1,0} all-gather(%param.89), channel_id=91, replica_groups=[1,8]<=[8], dimensions={0}, use_global_device_ids=true
  %dot.244 = bf16[1,4096,8,128]{3,2,1,0} dot(%sharding_constraint.357, %all-gather.58), lhs_contracting_dims={2}, rhs_contracting_dims={0}
  %slice.196 = bf16[1,4096,8,64]{3,2,1,0} slice(%dot.244), slice={[0:1], [0:4096], [0:8], [0:64]}
  %mul.2946 = bf16[1,4096,8,64]{3,2,1,0} multiply(%slice.196, %mul.2456)
  %slice.197 = bf16[1,4096,8,64]{3,2,1,0} slice(%dot.244), slice={[0:1], [0:4096], [0:8], [64:128]}
  %mul.2949 = bf16[1,4096,8,64]{3,2,1,0} multiply(%slice.197, %mul.2460)
  %sub.108 = bf16[1,4096,8,64]{3,2,1,0} subtract(%mul.2946, %mul.2949)
  %mul.2952 = bf16[1,4096,8,64]{3,2,1,0} multiply(%slice.197, %mul.2456)
  %mul.2955 = bf16[1,4096,8,64]{3,2,1,0} multiply(%slice.196, %mul.2460)
  %add.1504 = bf16[1,4096,8,64]{3,2,1,0} add(%mul.2952, %mul.2955)
  %concatenate.68 = bf16[1,4096,8,128]{3,2,1,0} concatenate(%sub.108, %add.1504), dimensions={3}
  %sharding_constraint.360 = bf16[1,4096,8,128]{3,2,1,0} copy(%concatenate.68)
  %param.90 = bf16[512,8,128]{2,1,0} parameter(311), sharding={devices=[8,1,1]<=[8]}
  %all-gather.59 = bf16[4096,8,128]{2,1,0} all-gather(%param.90), channel_id=92, replica_groups=[1,8]<=[8], dimensions={0}, use_global_device_ids=true
  %dot.245 = bf16[1,4096,8,128]{3,2,1,0} dot(%sharding_constraint.357, %all-gather.59), lhs_contracting_dims={2}, rhs_contracting_dims={0}
  %sharding_constraint.361 = bf16[1,4096,8,128]{3,2,1,0} copy(%dot.245)
  %te_fused_attn_forward_ffi.28 = (bf16[1,4096,32,128]{3,2,1,0}, f32[1,32,4096,1]{3,2,1,0}, u32[2,4]{1,0}, u8[48]{0}) custom-call(%sharding_constraint.358, %sharding_constraint.360, %sharding_constraint.361, %constant.1403, %dynamic-slice.38, /*index=5*/%concatenate.31, %concatenate.36, %constant.1416, %constant.1416, %constant.1416, /*index=10*/%constant.1416, %constant.1416, %constant.1416), custom_call_target="te_fused_attn_forward_ffi", operand_layout_constraints={bf16[1,4096,32,128]{3,2,1,0}, bf16[1,4096,8,128]{3,2,1,0}, bf16[1,4096,8,128]{3,2,1,0}, bf16[0]{0}, u32[2]{0}, s32[2]{0}, s32[2]{0}, f32[0]{0}, f32[0]{0}, f32[0]{0}, f32[0]{0}, f32[0]{0}, f32[0]{0}}, api_version=API_VERSION_TYPED_FFI, backend_config={attn_heads = 32 : i64, bias_batch = 0 : i64, bias_heads = 0 : i64, bias_type = 0 : i64, deterministic = false, dropout_probability = 0.000000e+00 : f64, input_batch = 1 : i64, is_training = true, kv_max_seqlen = 4096 : i64, mask_type = 3 : i64, max_segments_per_seq = 1 : i64, num_gqa_groups = 8 : i64, q_max_seqlen = 4096 : i64, qk_head_dim = 128 : i64, qkv_layout = 9 : i64, scaling_factor = 1.000000e+00 : f64, v_head_dim = 128 : i64, window_size_left = -1 : i64, window_size_right = -1 : i64}
  %get-tuple-element.339 = bf16[1,4096,32,128]{3,2,1,0} get-tuple-element(%te_fused_attn_forward_ffi.28), index=0
  %sharding_constraint.362 = bf16[1,4096,32,128]{3,2,1,0} copy(%get-tuple-element.339)
  %param.91 = bf16[32,128,512]{2,1,0} parameter(309), sharding={devices=[1,1,8]<=[8]}
  %all-gather.61 = bf16[32,128,4096]{2,1,0} all-gather(%param.91), channel_id=94, replica_groups=[1,8]<=[8], dimensions={2}, use_global_device_ids=true
  %dot.246 = bf16[1,4096,4096]{2,1,0} dot(%sharding_constraint.362, %all-gather.61), lhs_contracting_dims={2,3}, rhs_contracting_dims={0,1}
  %sharding_constraint.363 = bf16[1,4096,4096]{2,1,0} copy(%dot.246)
  %add.1505 = bf16[1,4096,4096]{2,1,0} add(%sharding_constraint.355, %sharding_constraint.363)
  %convert_element_type.1391 = f32[1,4096,4096]{2,1,0} convert(%add.1505)
  %square.20 = f32[1,4096,4096]{2,1,0} multiply(%convert_element_type.1391, %convert_element_type.1391)
  %reduce.268 = f32[1,4096]{1,0} reduce(%square.20, %constant.1360), dimensions={2}, to_apply=%region_100.3418
  %div.512 = f32[1,4096]{1,0} multiply(%reduce.268, %broadcast.3412)
  %add.1506 = f32[1,4096]{1,0} add(%div.512, %broadcast.3413)
  %rsqrt.81 = f32[1,4096]{1,0} rsqrt(%add.1506)
  %mul.2956 = f32[1,4096,4096]{2,1,0} broadcast(%rsqrt.81), dimensions={0,1}
  %mul.2957 = f32[1,4096,4096]{2,1,0} multiply(%convert_element_type.1391, %mul.2956)
  %convert_element_type.1393 = bf16[1,4096,4096]{2,1,0} convert(%mul.2957)
  %param.92 = bf16[4096]{0} parameter(306), sharding={replicated}
  %mul.2958 = bf16[1,4096,4096]{2,1,0} broadcast(%param.92), dimensions={2}
  %mul.2959 = bf16[1,4096,4096]{2,1,0} multiply(%convert_element_type.1393, %mul.2958)
  %sharding_constraint.364 = bf16[1,4096,4096]{2,1,0} copy(%mul.2959)
  %param.93 = bf16[512,8]{1,0} parameter(302), sharding={devices=[8,1]<=[8]}
  %all-gather.62 = bf16[4096,8]{1,0} all-gather(%param.93), channel_id=95, replica_groups=[1,8]<=[8], dimensions={0}, use_global_device_ids=true
  %dot.247 = bf16[1,4096,8]{2,1,0} dot(%sharding_constraint.364, %all-gather.62), lhs_contracting_dims={2}, rhs_contracting_dims={0}
  %sharding_constraint.365 = bf16[1,4096,8]{2,1,0} copy(%dot.247)
  %top_k.24 = bf16[4096,8]{1,0} reshape(%sharding_constraint.365)
  %top_k.25 = (bf16[4096,2]{1,0}, s32[4096,2]{1,0}) custom-call(%top_k.24), custom_call_target="TopK", called_computations={%compare_greater_than.8.3437.clone}
  %get-tuple-element.340 = bf16[4096,2]{1,0} get-tuple-element(%top_k.25), index=0
  %get-tuple-element.341 = s32[4096,2]{1,0} get-tuple-element(%top_k.25), index=1
  %add.1507 = s32[4096,2]{1,0} add(%get-tuple-element.341, %broadcast.3418)
  %sort.72 = (bf16[4096,2]{1,0}, s32[4096,2]{1,0}) sort(%get-tuple-element.340, %add.1507), dimensions={1}, is_stable=true, to_apply=%compare-value-and-index.7
  %get-tuple-element.343 = s32[4096,2]{1,0} get-tuple-element(%sort.72), index=1
  %slice.200 = s32[4096,2]{1,0} slice(%get-tuple-element.343), slice={[0:4096], [0:2]}
  %top_k.26 = s32[1,4096,2]{2,1,0} reshape(%slice.200)
  %lt.26 = pred[1,4096,2]{2,1,0} compare(%top_k.26, %broadcast.3419), direction=LT
  %add.1508 = s32[1,4096,2]{2,1,0} add(%top_k.26, %broadcast.3420)
  %select_n.296 = s32[1,4096,2]{2,1,0} select(%lt.26, %add.1508, %top_k.26)
  %broadcast_in_dim.544 = s32[1,4096,2,1]{3,2,1,0} reshape(%select_n.296)
  %concatenate.71 = s32[1,4096,2,3]{3,2,1,0} concatenate(%add.1356, %iota.1914, %broadcast_in_dim.544), dimensions={3}
  %subtract.26 = s32[1,4096,2,3]{3,2,1,0} subtract(%concatenate.71, %broadcast.3428)
  %scatter.145 = u32[1,4096,8]{2,1,0} scatter(%dynamic-slice.43, %subtract.26, %add.1401), update_window_dims={}, inserted_window_dims={0,1,2}, scatter_dims_to_operand_dims={0,1,2}, index_vector_dim=3, to_apply=%region_101.3465.clone
  %gather.8 = u32[1,4096,2]{2,1,0} gather(%scatter.145, %subtract.26), offset_dims={}, collapsed_slice_dims={0,1,2}, start_index_map={0,1,2}, index_vector_dim=3, slice_sizes={1,1,1}
  %eq.1943 = pred[1,4096,2]{2,1,0} compare(%add.1401, %gather.8), direction=EQ
  %get-tuple-element.342 = bf16[4096,2]{1,0} get-tuple-element(%sort.72), index=0
  %slice.199 = bf16[4096,2]{1,0} slice(%get-tuple-element.342), slice={[0:4096], [0:2]}
  %convert_element_type.1394 = f32[4096,2]{1,0} convert(%slice.199)
  %convert_element_type.1395 = f32[1,4096,2]{2,1,0} reshape(%convert_element_type.1394)
  %reduce.269 = f32[4096]{0} reduce(%convert_element_type.1394, %constant.1450), dimensions={1}, to_apply=%region_102.3474
  %sub.109 = f32[1,4096]{1,0} reshape(%reduce.269)
  %sub.110 = f32[1,4096,2]{2,1,0} broadcast(%sub.109), dimensions={0,1}
  %sub.111 = f32[1,4096,2]{2,1,0} subtract(%convert_element_type.1395, %sub.110)
  %exp.142 = f32[1,4096,2]{2,1,0} exponential(%sub.111)
  %reduce.270 = f32[1,4096]{1,0} reduce(%exp.142, %constant.1360), dimensions={2}, to_apply=%region_103.3483
  %div.513 = f32[1,4096,2]{2,1,0} broadcast(%reduce.270), dimensions={0,1}
  %div.514 = f32[1,4096,2]{2,1,0} divide(%exp.142, %div.513)
  %convert_element_type.1396 = bf16[1,4096,2]{2,1,0} convert(%div.514)
  %select_n.297 = bf16[1,4096,2]{2,1,0} select(%eq.1943, %convert_element_type.1396, %broadcast.3427)
  %scatter.146 = bf16[1,4096,8]{2,1,0} scatter(%broadcast.3379, %subtract.26, %select_n.297), update_window_dims={}, inserted_window_dims={0,1,2}, scatter_dims_to_operand_dims={0,1,2}, index_vector_dim=3, to_apply=%region_104.3492.clone
  %eq.1945 = s32[1,4096,2,8]{3,2,1,0} broadcast(%top_k.26), dimensions={0,1,2}
  %iota.2048 = s32[1,4096,2,8]{3,2,1,0} iota(), iota_dimension=3
  %eq.1946 = pred[1,4096,2,8]{3,2,1,0} compare(%eq.1945, %iota.2048), direction=EQ
  %convert_element_type.1397 = s32[1,4096,2,8]{3,2,1,0} convert(%eq.1946)
  %reshape.9683 = s32[1,8192,8]{2,1,0} reshape(%convert_element_type.1397)
  %sharding_constraint.366 = s32[1,8192,8]{2,1,0} copy(%reshape.9683)
  %reduce-window.8 = s32[1,8192,8]{2,1,0} reduce-window(%sharding_constraint.366, %constant.1181), window={size=1x8192x1 pad=0_0x8191_0x0_0}, to_apply=%region_105.3504
  %reshape.9689 = s32[1,4096,2,8]{3,2,1,0} reshape(%reduce-window.8)
  %sharding_constraint.367 = s32[1,4096,2,8]{3,2,1,0} copy(%reshape.9689)
  %le.18 = pred[1,4096,2,8]{3,2,1,0} compare(%sharding_constraint.367, %broadcast.3429), direction=LE
  %mul.2960 = s32[1,4096,2,8]{3,2,1,0} select(%le.18, %convert_element_type.1397, %broadcast.3430)
  %reduce.271 = s32[1,4096,8]{2,1,0} reduce(%mul.2960, %constant.1181), dimensions={2}, to_apply=%region_106.3513
  %convert_element_type.1398 = bf16[1,4096,8]{2,1,0} convert(%reduce.271)
  %mul.2961 = bf16[1,4096,8]{2,1,0} multiply(%scatter.146, %convert_element_type.1398)
  %mul.2962 = bf16[1,4096,8,1025]{3,2,1,0} broadcast(%mul.2961), dimensions={0,1,2}
  %mul.2963 = s32[1,8192,8]{2,1,0} multiply(%sharding_constraint.366, %reduce-window.8)
  %reshape.9694 = s32[1,4096,2,8]{3,2,1,0} reshape(%mul.2963)
  %reduce.272 = s32[1,4096,8]{2,1,0} reduce(%reshape.9694, %constant.1181), dimensions={2}, to_apply=%region_107.3523
  %mul.2964 = s32[1,4096,8]{2,1,0} multiply(%reduce.272, %reduce.271)
  %eq.1947 = s32[1,4096,8,1025]{3,2,1,0} broadcast(%mul.2964), dimensions={0,1,2}
  %iota.2049 = s32[1,4096,8,1025]{3,2,1,0} iota(), iota_dimension=3
  %eq.1948 = pred[1,4096,8,1025]{3,2,1,0} compare(%eq.1947, %iota.2049), direction=EQ
  %convert_element_type.1399 = s32[1,4096,8,1025]{3,2,1,0} convert(%eq.1948)
  %convert_element_type.1400 = bf16[1,4096,8,1025]{3,2,1,0} convert(%convert_element_type.1399)
  %mul.2965 = bf16[1,4096,8,1025]{3,2,1,0} multiply(%mul.2962, %convert_element_type.1400)
  %slice.201 = bf16[1,4096,8,1024]{3,2,1,0} slice(%mul.2965), slice={[0:1], [0:4096], [0:8], [1:1025]}
  %sharding_constraint.368 = bf16[1,4096,8,1024]{3,2,1,0} copy(%slice.201)
  %convert_element_type.1401 = pred[1,4096,8,1024]{3,2,1,0} compare(%slice.201, %broadcast.3431), direction=NE
  %sharding_constraint.369 = pred[1,4096,8,1024]{3,2,1,0} copy(%convert_element_type.1401)
  %dot_general.44 = bf16[1,4096,8,1024]{3,2,1,0} convert(%sharding_constraint.369)
  %dot.248 = bf16[1,8,1024,4096]{3,2,1,0} dot(%dot_general.44, %sharding_constraint.364), lhs_batch_dims={0}, lhs_contracting_dims={1}, rhs_batch_dims={0}, rhs_contracting_dims={1}
  %reshape.9697 = bf16[1,8,1,1024,4096]{4,3,2,1,0} reshape(%dot.248)
  %all-to-all.16 = bf16[1,8,1,1024,4096]{4,3,2,1,0} all-to-all(%reshape.9697), channel_id=99, replica_groups=[1,8]<=[8], dimensions={1}
  %transpose.29 = bf16[8,1,1,1024,4096]{4,3,2,0,1} transpose(%all-to-all.16), dimensions={1,0,2,3,4}
  %reshape.9698 = bf16[8,1,1024,4096]{3,2,1,0} reshape(%transpose.29)
  %transpose.30 = bf16[1,8,1024,4096]{3,2,0,1} transpose(%reshape.9698), dimensions={1,0,2,3}
  %sharding_constraint.370 = bf16[1,8,1024,4096]{3,2,0,1} copy(%transpose.30)
  %param.94 = bf16[1,4096,14336]{2,1,0} parameter(303), sharding={devices=[8,1,1]<=[8]}
  %sharding_constraint.371 = bf16[1,4096,14336]{2,1,0} copy(%param.94)
  %dot.249 = bf16[1,8,1024,14336]{3,2,1,0} dot(%sharding_constraint.370, %sharding_constraint.371), lhs_batch_dims={0}, lhs_contracting_dims={3}, rhs_batch_dims={0}, rhs_contracting_dims={1}
  %sharding_constraint.372 = bf16[1,8,1024,14336]{3,2,1,0} copy(%dot.249)
  %neg.166 = bf16[1,8,1024,14336]{3,2,1,0} negate(%sharding_constraint.372)
  %exp.143 = bf16[1,8,1024,14336]{3,2,1,0} exponential(%neg.166)
  %add.1513 = bf16[1,8,1024,14336]{3,2,1,0} add(%exp.143, %jit_silu_.0)
  %div.515 = bf16[1,8,1024,14336]{3,2,1,0} divide(%jit_silu_.0, %add.1513)
  %mul.2966 = bf16[1,8,1024,14336]{3,2,1,0} multiply(%sharding_constraint.372, %div.515)
  %param.95 = bf16[1,4096,14336]{2,1,0} parameter(304), sharding={devices=[8,1,1]<=[8]}
  %sharding_constraint.373 = bf16[1,4096,14336]{2,1,0} copy(%param.95)
  %dot.250 = bf16[1,8,1024,14336]{3,2,1,0} dot(%sharding_constraint.370, %sharding_constraint.373), lhs_batch_dims={0}, lhs_contracting_dims={3}, rhs_batch_dims={0}, rhs_contracting_dims={1}
  %sharding_constraint.374 = bf16[1,8,1024,14336]{3,2,1,0} copy(%dot.250)
  %mul.2968 = bf16[1,8,1024,14336]{3,2,1,0} multiply(%mul.2966, %sharding_constraint.374)
  %param.96 = bf16[1,14336,4096]{2,1,0} parameter(305), sharding={devices=[8,1,1]<=[8]}
  %sharding_constraint.375 = bf16[1,14336,4096]{2,1,0} copy(%param.96)
  %dot.251 = bf16[1,8,1024,4096]{3,2,1,0} dot(%mul.2968, %sharding_constraint.375), lhs_batch_dims={0}, lhs_contracting_dims={3}, rhs_batch_dims={0}, rhs_contracting_dims={1}
  %sharding_constraint.376 = bf16[1,8,1024,4096]{3,2,1,0} copy(%dot.251)
  %reshape.9701 = bf16[1,8,1,1024,4096]{4,3,2,1,0} reshape(%sharding_constraint.376)
  %all-to-all.17 = bf16[1,8,1,1024,4096]{4,3,2,1,0} all-to-all(%reshape.9701), channel_id=100, replica_groups=[1,8]<=[8], dimensions={1}
  %transpose.31 = bf16[8,1,1,1024,4096]{4,3,2,0,1} transpose(%all-to-all.17), dimensions={1,0,2,3,4}
  %reshape.9702 = bf16[8,1,1024,4096]{3,2,1,0} reshape(%transpose.31)
  %dot.252 = bf16[1,4096,4096]{2,1,0} dot(%sharding_constraint.368, %reshape.9702), lhs_batch_dims={0}, lhs_contracting_dims={3,2}, rhs_batch_dims={1}, rhs_contracting_dims={2,0}
  %sharding_constraint.377 = bf16[1,4096,4096]{2,1,0} copy(%dot.252)
  %add.1516 = bf16[1,4096,4096]{2,1,0} add(%sharding_constraint.377, %add.1505)
  %sharding_constraint.378 = bf16[1,4096,4096]{2,1,0} copy(%add.1516)
  %sharding_constraint.379 = bf16[1,4096,4096]{2,1,0} copy(%sharding_constraint.378)
  %convert_element_type.1402 = f32[1,4096,4096]{2,1,0} convert(%sharding_constraint.379)
  %square.21 = f32[1,4096,4096]{2,1,0} multiply(%convert_element_type.1402, %convert_element_type.1402)
  %reduce.273 = f32[1,4096]{1,0} reduce(%square.21, %constant.1360), dimensions={2}, to_apply=%region_108.3565
  %div.516 = f32[1,4096]{1,0} multiply(%reduce.273, %broadcast.3412)
  %add.1517 = f32[1,4096]{1,0} add(%div.516, %broadcast.3413)
  %rsqrt.82 = f32[1,4096]{1,0} rsqrt(%add.1517)
  %mul.2969 = f32[1,4096,4096]{2,1,0} broadcast(%rsqrt.82), dimensions={0,1}
  %mul.2970 = f32[1,4096,4096]{2,1,0} multiply(%convert_element_type.1402, %mul.2969)
  %convert_element_type.1403 = bf16[1,4096,4096]{2,1,0} convert(%mul.2970)
  %param.97 = bf16[4096]{0} parameter(317), sharding={replicated}
  %mul.2971 = bf16[1,4096,4096]{2,1,0} broadcast(%param.97), dimensions={2}
  %mul.2972 = bf16[1,4096,4096]{2,1,0} multiply(%convert_element_type.1403, %mul.2971)
  %sharding_constraint.380 = bf16[1,4096,4096]{2,1,0} copy(%mul.2972)
  %sharding_constraint.381 = bf16[1,4096,4096]{2,1,0} copy(%sharding_constraint.380)
  %param.98 = bf16[512,32,128]{2,1,0} parameter(320), sharding={devices=[8,1,1]<=[8]}
  %all-gather.64 = bf16[4096,32,128]{2,1,0} all-gather(%param.98), channel_id=101, replica_groups=[1,8]<=[8], dimensions={0}, use_global_device_ids=true
  %dot.253 = bf16[1,4096,32,128]{3,2,1,0} dot(%sharding_constraint.381, %all-gather.64), lhs_contracting_dims={2}, rhs_contracting_dims={0}
  %slice.202 = bf16[1,4096,32,64]{3,2,1,0} slice(%dot.253), slice={[0:1], [0:4096], [0:32], [0:64]}
  %mul.2979 = bf16[1,4096,32,64]{3,2,1,0} multiply(%slice.202, %mul.2435)
  %slice.203 = bf16[1,4096,32,64]{3,2,1,0} slice(%dot.253), slice={[0:1], [0:4096], [0:32], [64:128]}
  %mul.2982 = bf16[1,4096,32,64]{3,2,1,0} multiply(%slice.203, %mul.2438)
  %sub.112 = bf16[1,4096,32,64]{3,2,1,0} subtract(%mul.2979, %mul.2982)
  %mul.2986 = bf16[1,4096,32,64]{3,2,1,0} multiply(%slice.203, %mul.2435)
  %mul.2991 = bf16[1,4096,32,64]{3,2,1,0} multiply(%slice.202, %mul.2438)
  %add.1518 = bf16[1,4096,32,64]{3,2,1,0} add(%mul.2986, %mul.2991)
  %concatenate.75 = bf16[1,4096,32,128]{3,2,1,0} concatenate(%sub.112, %add.1518), dimensions={3}
  %sharding_constraint.382 = bf16[1,4096,32,128]{3,2,1,0} copy(%concatenate.75)
  %param.99 = bf16[512,8,128]{2,1,0} parameter(318), sharding={devices=[8,1,1]<=[8]}
  %all-gather.65 = bf16[4096,8,128]{2,1,0} all-gather(%param.99), channel_id=102, replica_groups=[1,8]<=[8], dimensions={0}, use_global_device_ids=true
  %dot.254 = bf16[1,4096,8,128]{3,2,1,0} dot(%sharding_constraint.381, %all-gather.65), lhs_contracting_dims={2}, rhs_contracting_dims={0}
  %slice.204 = bf16[1,4096,8,64]{3,2,1,0} slice(%dot.254), slice={[0:1], [0:4096], [0:8], [0:64]}
  %mul.2995 = bf16[1,4096,8,64]{3,2,1,0} multiply(%slice.204, %mul.2456)
  %slice.205 = bf16[1,4096,8,64]{3,2,1,0} slice(%dot.254), slice={[0:1], [0:4096], [0:8], [64:128]}
  %mul.3000 = bf16[1,4096,8,64]{3,2,1,0} multiply(%slice.205, %mul.2460)
  %sub.113 = bf16[1,4096,8,64]{3,2,1,0} subtract(%mul.2995, %mul.3000)
  %mul.3003 = bf16[1,4096,8,64]{3,2,1,0} multiply(%slice.205, %mul.2456)
  %mul.3007 = bf16[1,4096,8,64]{3,2,1,0} multiply(%slice.204, %mul.2460)
  %add.1519 = bf16[1,4096,8,64]{3,2,1,0} add(%mul.3003, %mul.3007)
  %concatenate.76 = bf16[1,4096,8,128]{3,2,1,0} concatenate(%sub.113, %add.1519), dimensions={3}
  %sharding_constraint.384 = bf16[1,4096,8,128]{3,2,1,0} copy(%concatenate.76)
  %param.100 = bf16[512,8,128]{2,1,0} parameter(321), sharding={devices=[8,1,1]<=[8]}
  %all-gather.66 = bf16[4096,8,128]{2,1,0} all-gather(%param.100), channel_id=103, replica_groups=[1,8]<=[8], dimensions={0}, use_global_device_ids=true
  %dot.255 = bf16[1,4096,8,128]{3,2,1,0} dot(%sharding_constraint.381, %all-gather.66), lhs_contracting_dims={2}, rhs_contracting_dims={0}
  %sharding_constraint.385 = bf16[1,4096,8,128]{3,2,1,0} copy(%dot.255)
  %te_fused_attn_forward_ffi.32 = (bf16[1,4096,32,128]{3,2,1,0}, f32[1,32,4096,1]{3,2,1,0}, u32[2,4]{1,0}, u8[48]{0}) custom-call(%sharding_constraint.382, %sharding_constraint.384, %sharding_constraint.385, %constant.1403, %dynamic-slice.38, /*index=5*/%concatenate.31, %concatenate.36, %constant.1416, %constant.1416, %constant.1416, /*index=10*/%constant.1416, %constant.1416, %constant.1416), custom_call_target="te_fused_attn_forward_ffi", operand_layout_constraints={bf16[1,4096,32,128]{3,2,1,0}, bf16[1,4096,8,128]{3,2,1,0}, bf16[1,4096,8,128]{3,2,1,0}, bf16[0]{0}, u32[2]{0}, s32[2]{0}, s32[2]{0}, f32[0]{0}, f32[0]{0}, f32[0]{0}, f32[0]{0}, f32[0]{0}, f32[0]{0}}, api_version=API_VERSION_TYPED_FFI, backend_config={attn_heads = 32 : i64, bias_batch = 0 : i64, bias_heads = 0 : i64, bias_type = 0 : i64, deterministic = false, dropout_probability = 0.000000e+00 : f64, input_batch = 1 : i64, is_training = true, kv_max_seqlen = 4096 : i64, mask_type = 3 : i64, max_segments_per_seq = 1 : i64, num_gqa_groups = 8 : i64, q_max_seqlen = 4096 : i64, qk_head_dim = 128 : i64, qkv_layout = 9 : i64, scaling_factor = 1.000000e+00 : f64, v_head_dim = 128 : i64, window_size_left = -1 : i64, window_size_right = -1 : i64}
  %get-tuple-element.349 = bf16[1,4096,32,128]{3,2,1,0} get-tuple-element(%te_fused_attn_forward_ffi.32), index=0
  %sharding_constraint.386 = bf16[1,4096,32,128]{3,2,1,0} copy(%get-tuple-element.349)
  %param.101 = bf16[32,128,512]{2,1,0} parameter(319), sharding={devices=[1,1,8]<=[8]}
  %all-gather.68 = bf16[32,128,4096]{2,1,0} all-gather(%param.101), channel_id=105, replica_groups=[1,8]<=[8], dimensions={2}, use_global_device_ids=true
  %dot.256 = bf16[1,4096,4096]{2,1,0} dot(%sharding_constraint.386, %all-gather.68), lhs_contracting_dims={2,3}, rhs_contracting_dims={0,1}
  %sharding_constraint.387 = bf16[1,4096,4096]{2,1,0} copy(%dot.256)
  %add.1520 = bf16[1,4096,4096]{2,1,0} add(%sharding_constraint.379, %sharding_constraint.387)
  %convert_element_type.1417 = f32[1,4096,4096]{2,1,0} convert(%add.1520)
  %square.22 = f32[1,4096,4096]{2,1,0} multiply(%convert_element_type.1417, %convert_element_type.1417)
  %reduce.277 = f32[1,4096]{1,0} reduce(%square.22, %constant.1360), dimensions={2}, to_apply=%region_112.3689
  %div.525 = f32[1,4096]{1,0} multiply(%reduce.277, %broadcast.3412)
  %add.1521 = f32[1,4096]{1,0} add(%div.525, %broadcast.3413)
  %rsqrt.83 = f32[1,4096]{1,0} rsqrt(%add.1521)
  %mul.3008 = f32[1,4096,4096]{2,1,0} broadcast(%rsqrt.83), dimensions={0,1}
  %mul.3013 = f32[1,4096,4096]{2,1,0} multiply(%convert_element_type.1417, %mul.3008)
  %convert_element_type.1418 = bf16[1,4096,4096]{2,1,0} convert(%mul.3013)
  %param.102 = bf16[4096]{0} parameter(316), sharding={replicated}
  %mul.3014 = bf16[1,4096,4096]{2,1,0} broadcast(%param.102), dimensions={2}
  %mul.3015 = bf16[1,4096,4096]{2,1,0} multiply(%convert_element_type.1418, %mul.3014)
  %sharding_constraint.388 = bf16[1,4096,4096]{2,1,0} copy(%mul.3015)
  %param.103 = bf16[512,8]{1,0} parameter(312), sharding={devices=[8,1]<=[8]}
  %all-gather.69 = bf16[4096,8]{1,0} all-gather(%param.103), channel_id=106, replica_groups=[1,8]<=[8], dimensions={0}, use_global_device_ids=true
  %dot.257 = bf16[1,4096,8]{2,1,0} dot(%sharding_constraint.388, %all-gather.69), lhs_contracting_dims={2}, rhs_contracting_dims={0}
  %sharding_constraint.389 = bf16[1,4096,8]{2,1,0} copy(%dot.257)
  %top_k.27 = bf16[4096,8]{1,0} reshape(%sharding_constraint.389)
  %top_k.28 = (bf16[4096,2]{1,0}, s32[4096,2]{1,0}) custom-call(%top_k.27), custom_call_target="TopK", called_computations={%compare_greater_than.9.3708.clone}
  %get-tuple-element.350 = bf16[4096,2]{1,0} get-tuple-element(%top_k.28), index=0
  %get-tuple-element.351 = s32[4096,2]{1,0} get-tuple-element(%top_k.28), index=1
  %add.1522 = s32[4096,2]{1,0} add(%get-tuple-element.351, %broadcast.3418)
  %sort.73 = (bf16[4096,2]{1,0}, s32[4096,2]{1,0}) sort(%get-tuple-element.350, %add.1522), dimensions={1}, is_stable=true, to_apply=%compare-value-and-index.8
  %get-tuple-element.353 = s32[4096,2]{1,0} get-tuple-element(%sort.73), index=1
  %slice.208 = s32[4096,2]{1,0} slice(%get-tuple-element.353), slice={[0:4096], [0:2]}
  %top_k.29 = s32[1,4096,2]{2,1,0} reshape(%slice.208)
  %lt.29 = pred[1,4096,2]{2,1,0} compare(%top_k.29, %broadcast.3419), direction=LT
  %add.1523 = s32[1,4096,2]{2,1,0} add(%top_k.29, %broadcast.3420)
  %select_n.301 = s32[1,4096,2]{2,1,0} select(%lt.29, %add.1523, %top_k.29)
  %broadcast_in_dim.547 = s32[1,4096,2,1]{3,2,1,0} reshape(%select_n.301)
  %concatenate.79 = s32[1,4096,2,3]{3,2,1,0} concatenate(%add.1356, %iota.1912, %broadcast_in_dim.547), dimensions={3}
  %subtract.29 = s32[1,4096,2,3]{3,2,1,0} subtract(%concatenate.79, %broadcast.3428)
  %scatter.147 = u32[1,4096,8]{2,1,0} scatter(%dynamic-slice.43, %subtract.29, %add.1401), update_window_dims={}, inserted_window_dims={0,1,2}, scatter_dims_to_operand_dims={0,1,2}, index_vector_dim=3, to_apply=%region_113.3736.clone
  %gather.9 = u32[1,4096,2]{2,1,0} gather(%scatter.147, %subtract.29), offset_dims={}, collapsed_slice_dims={0,1,2}, start_index_map={0,1,2}, index_vector_dim=3, slice_sizes={1,1,1}
  %eq.1952 = pred[1,4096,2]{2,1,0} compare(%add.1401, %gather.9), direction=EQ
  %get-tuple-element.352 = bf16[4096,2]{1,0} get-tuple-element(%sort.73), index=0
  %slice.207 = bf16[4096,2]{1,0} slice(%get-tuple-element.352), slice={[0:4096], [0:2]}
  %convert_element_type.1419 = f32[4096,2]{1,0} convert(%slice.207)
  %convert_element_type.1420 = f32[1,4096,2]{2,1,0} reshape(%convert_element_type.1419)
  %reduce.278 = f32[4096]{0} reduce(%convert_element_type.1419, %constant.1450), dimensions={1}, to_apply=%region_114.3745
  %sub.114 = f32[1,4096]{1,0} reshape(%reduce.278)
  %sub.115 = f32[1,4096,2]{2,1,0} broadcast(%sub.114), dimensions={0,1}
  %sub.116 = f32[1,4096,2]{2,1,0} subtract(%convert_element_type.1420, %sub.115)
  %exp.144 = f32[1,4096,2]{2,1,0} exponential(%sub.116)
  %reduce.279 = f32[1,4096]{1,0} reduce(%exp.144, %constant.1360), dimensions={2}, to_apply=%region_115.3754
  %div.526 = f32[1,4096,2]{2,1,0} broadcast(%reduce.279), dimensions={0,1}
  %div.527 = f32[1,4096,2]{2,1,0} divide(%exp.144, %div.526)
  %convert_element_type.1422 = bf16[1,4096,2]{2,1,0} convert(%div.527)
  %select_n.302 = bf16[1,4096,2]{2,1,0} select(%eq.1952, %convert_element_type.1422, %broadcast.3427)
  %scatter.148 = bf16[1,4096,8]{2,1,0} scatter(%broadcast.3379, %subtract.29, %select_n.302), update_window_dims={}, inserted_window_dims={0,1,2}, scatter_dims_to_operand_dims={0,1,2}, index_vector_dim=3, to_apply=%region_116.3763.clone
  %eq.1954 = s32[1,4096,2,8]{3,2,1,0} broadcast(%top_k.29), dimensions={0,1,2}
  %iota.2061 = s32[1,4096,2,8]{3,2,1,0} iota(), iota_dimension=3
  %eq.1955 = pred[1,4096,2,8]{3,2,1,0} compare(%eq.1954, %iota.2061), direction=EQ
  %convert_element_type.1423 = s32[1,4096,2,8]{3,2,1,0} convert(%eq.1955)
  %reshape.9744 = s32[1,8192,8]{2,1,0} reshape(%convert_element_type.1423)
  %sharding_constraint.390 = s32[1,8192,8]{2,1,0} copy(%reshape.9744)
  %reduce-window.9 = s32[1,8192,8]{2,1,0} reduce-window(%sharding_constraint.390, %constant.1181), window={size=1x8192x1 pad=0_0x8191_0x0_0}, to_apply=%region_117.3775
  %reshape.9746 = s32[1,4096,2,8]{3,2,1,0} reshape(%reduce-window.9)
  %sharding_constraint.391 = s32[1,4096,2,8]{3,2,1,0} copy(%reshape.9746)
  %le.20 = pred[1,4096,2,8]{3,2,1,0} compare(%sharding_constraint.391, %broadcast.3429), direction=LE
  %mul.3016 = s32[1,4096,2,8]{3,2,1,0} select(%le.20, %convert_element_type.1423, %broadcast.3430)
  %reduce.280 = s32[1,4096,8]{2,1,0} reduce(%mul.3016, %constant.1181), dimensions={2}, to_apply=%region_118.3784
  %convert_element_type.1424 = bf16[1,4096,8]{2,1,0} convert(%reduce.280)
  %mul.3017 = bf16[1,4096,8]{2,1,0} multiply(%scatter.148, %convert_element_type.1424)
  %mul.3018 = bf16[1,4096,8,1025]{3,2,1,0} broadcast(%mul.3017), dimensions={0,1,2}
  %mul.3019 = s32[1,8192,8]{2,1,0} multiply(%sharding_constraint.390, %reduce-window.9)
  %reshape.9747 = s32[1,4096,2,8]{3,2,1,0} reshape(%mul.3019)
  %reduce.281 = s32[1,4096,8]{2,1,0} reduce(%reshape.9747, %constant.1181), dimensions={2}, to_apply=%region_119.3794
  %mul.3020 = s32[1,4096,8]{2,1,0} multiply(%reduce.281, %reduce.280)
  %eq.1956 = s32[1,4096,8,1025]{3,2,1,0} broadcast(%mul.3020), dimensions={0,1,2}
  %iota.2062 = s32[1,4096,8,1025]{3,2,1,0} iota(), iota_dimension=3
  %eq.1957 = pred[1,4096,8,1025]{3,2,1,0} compare(%eq.1956, %iota.2062), direction=EQ
  %convert_element_type.1425 = s32[1,4096,8,1025]{3,2,1,0} convert(%eq.1957)
  %convert_element_type.1426 = bf16[1,4096,8,1025]{3,2,1,0} convert(%convert_element_type.1425)
  %mul.3021 = bf16[1,4096,8,1025]{3,2,1,0} multiply(%mul.3018, %convert_element_type.1426)
  %slice.209 = bf16[1,4096,8,1024]{3,2,1,0} slice(%mul.3021), slice={[0:1], [0:4096], [0:8], [1:1025]}
  %sharding_constraint.392 = bf16[1,4096,8,1024]{3,2,1,0} copy(%slice.209)
  %convert_element_type.1428 = pred[1,4096,8,1024]{3,2,1,0} compare(%slice.209, %broadcast.3431), direction=NE
  %sharding_constraint.393 = pred[1,4096,8,1024]{3,2,1,0} copy(%convert_element_type.1428)
  %dot_general.45 = bf16[1,4096,8,1024]{3,2,1,0} convert(%sharding_constraint.393)
  %dot.258 = bf16[1,8,1024,4096]{3,2,1,0} dot(%dot_general.45, %sharding_constraint.388), lhs_batch_dims={0}, lhs_contracting_dims={1}, rhs_batch_dims={0}, rhs_contracting_dims={1}
  %reshape.9750 = bf16[1,8,1,1024,4096]{4,3,2,1,0} reshape(%dot.258)
  %all-to-all.18 = bf16[1,8,1,1024,4096]{4,3,2,1,0} all-to-all(%reshape.9750), channel_id=110, replica_groups=[1,8]<=[8], dimensions={1}
  %transpose.32 = bf16[8,1,1,1024,4096]{4,3,2,0,1} transpose(%all-to-all.18), dimensions={1,0,2,3,4}
  %reshape.9751 = bf16[8,1,1024,4096]{3,2,1,0} reshape(%transpose.32)
  %transpose.33 = bf16[1,8,1024,4096]{3,2,0,1} transpose(%reshape.9751), dimensions={1,0,2,3}
  %sharding_constraint.394 = bf16[1,8,1024,4096]{3,2,0,1} copy(%transpose.33)
  %param.104 = bf16[1,4096,14336]{2,1,0} parameter(313), sharding={devices=[8,1,1]<=[8]}
  %sharding_constraint.395 = bf16[1,4096,14336]{2,1,0} copy(%param.104)
  %dot.259 = bf16[1,8,1024,14336]{3,2,1,0} dot(%sharding_constraint.394, %sharding_constraint.395), lhs_batch_dims={0}, lhs_contracting_dims={3}, rhs_batch_dims={0}, rhs_contracting_dims={1}
  %sharding_constraint.396 = bf16[1,8,1024,14336]{3,2,1,0} copy(%dot.259)
  %neg.167 = bf16[1,8,1024,14336]{3,2,1,0} negate(%sharding_constraint.396)
  %exp.145 = bf16[1,8,1024,14336]{3,2,1,0} exponential(%neg.167)
  %add.1530 = bf16[1,8,1024,14336]{3,2,1,0} add(%exp.145, %jit_silu_.0)
  %div.528 = bf16[1,8,1024,14336]{3,2,1,0} divide(%jit_silu_.0, %add.1530)
  %mul.3022 = bf16[1,8,1024,14336]{3,2,1,0} multiply(%sharding_constraint.396, %div.528)
  %param.105 = bf16[1,4096,14336]{2,1,0} parameter(314), sharding={devices=[8,1,1]<=[8]}
  %sharding_constraint.397 = bf16[1,4096,14336]{2,1,0} copy(%param.105)
  %dot.260 = bf16[1,8,1024,14336]{3,2,1,0} dot(%sharding_constraint.394, %sharding_constraint.397), lhs_batch_dims={0}, lhs_contracting_dims={3}, rhs_batch_dims={0}, rhs_contracting_dims={1}
  %sharding_constraint.398 = bf16[1,8,1024,14336]{3,2,1,0} copy(%dot.260)
  %mul.3023 = bf16[1,8,1024,14336]{3,2,1,0} multiply(%mul.3022, %sharding_constraint.398)
  %param.106 = bf16[1,14336,4096]{2,1,0} parameter(315), sharding={devices=[8,1,1]<=[8]}
  %sharding_constraint.399 = bf16[1,14336,4096]{2,1,0} copy(%param.106)
  %dot.261 = bf16[1,8,1024,4096]{3,2,1,0} dot(%mul.3023, %sharding_constraint.399), lhs_batch_dims={0}, lhs_contracting_dims={3}, rhs_batch_dims={0}, rhs_contracting_dims={1}
  %sharding_constraint.400 = bf16[1,8,1024,4096]{3,2,1,0} copy(%dot.261)
  %reshape.9755 = bf16[1,8,1,1024,4096]{4,3,2,1,0} reshape(%sharding_constraint.400)
  %all-to-all.19 = bf16[1,8,1,1024,4096]{4,3,2,1,0} all-to-all(%reshape.9755), channel_id=111, replica_groups=[1,8]<=[8], dimensions={1}
  %transpose.34 = bf16[8,1,1,1024,4096]{4,3,2,0,1} transpose(%all-to-all.19), dimensions={1,0,2,3,4}
  %reshape.9756 = bf16[8,1,1024,4096]{3,2,1,0} reshape(%transpose.34)
  %dot.262 = bf16[1,4096,4096]{2,1,0} dot(%sharding_constraint.392, %reshape.9756), lhs_batch_dims={0}, lhs_contracting_dims={3,2}, rhs_batch_dims={1}, rhs_contracting_dims={2,0}
  %sharding_constraint.401 = bf16[1,4096,4096]{2,1,0} copy(%dot.262)
  %add.1531 = bf16[1,4096,4096]{2,1,0} add(%sharding_constraint.401, %add.1520)
  %sharding_constraint.402 = bf16[1,4096,4096]{2,1,0} copy(%add.1531)
  %sharding_constraint.403 = bf16[1,4096,4096]{2,1,0} copy(%sharding_constraint.402)
  %convert_element_type.1429 = f32[1,4096,4096]{2,1,0} convert(%sharding_constraint.403)
  %square.23 = f32[1,4096,4096]{2,1,0} multiply(%convert_element_type.1429, %convert_element_type.1429)
  %reduce.282 = f32[1,4096]{1,0} reduce(%square.23, %constant.1360), dimensions={2}, to_apply=%region_120.3836
  %div.529 = f32[1,4096]{1,0} multiply(%reduce.282, %broadcast.3412)
  %add.1532 = f32[1,4096]{1,0} add(%div.529, %broadcast.3413)
  %rsqrt.84 = f32[1,4096]{1,0} rsqrt(%add.1532)
  %mul.3024 = f32[1,4096,4096]{2,1,0} broadcast(%rsqrt.84), dimensions={0,1}
  %mul.3025 = f32[1,4096,4096]{2,1,0} multiply(%convert_element_type.1429, %mul.3024)
  %convert_element_type.1430 = bf16[1,4096,4096]{2,1,0} convert(%mul.3025)
  %param.107 = bf16[4096]{0} parameter(27), sharding={replicated}
  %mul.3026 = bf16[1,4096,4096]{2,1,0} broadcast(%param.107), dimensions={2}
  %mul.3027 = bf16[1,4096,4096]{2,1,0} multiply(%convert_element_type.1430, %mul.3026)
  %sharding_constraint.404 = bf16[1,4096,4096]{2,1,0} copy(%mul.3027)
  %sharding_constraint.405 = bf16[1,4096,4096]{2,1,0} copy(%sharding_constraint.404)
  %param.108 = bf16[512,32,128]{2,1,0} parameter(30), sharding={devices=[8,1,1]<=[8]}
  %all-gather.71 = bf16[4096,32,128]{2,1,0} all-gather(%param.108), channel_id=112, replica_groups=[1,8]<=[8], dimensions={0}, use_global_device_ids=true
  %dot.263 = bf16[1,4096,32,128]{3,2,1,0} dot(%sharding_constraint.405, %all-gather.71), lhs_contracting_dims={2}, rhs_contracting_dims={0}
  %slice.210 = bf16[1,4096,32,64]{3,2,1,0} slice(%dot.263), slice={[0:1], [0:4096], [0:32], [0:64]}
  %mul.3035 = bf16[1,4096,32,64]{3,2,1,0} multiply(%slice.210, %mul.2435)
  %slice.211 = bf16[1,4096,32,64]{3,2,1,0} slice(%dot.263), slice={[0:1], [0:4096], [0:32], [64:128]}
  %mul.3038 = bf16[1,4096,32,64]{3,2,1,0} multiply(%slice.211, %mul.2438)
  %sub.117 = bf16[1,4096,32,64]{3,2,1,0} subtract(%mul.3035, %mul.3038)
  %mul.3042 = bf16[1,4096,32,64]{3,2,1,0} multiply(%slice.211, %mul.2435)
  %mul.3045 = bf16[1,4096,32,64]{3,2,1,0} multiply(%slice.210, %mul.2438)
  %add.1533 = bf16[1,4096,32,64]{3,2,1,0} add(%mul.3042, %mul.3045)
  %concatenate.83 = bf16[1,4096,32,128]{3,2,1,0} concatenate(%sub.117, %add.1533), dimensions={3}
  %sharding_constraint.406 = bf16[1,4096,32,128]{3,2,1,0} copy(%concatenate.83)
  %param.109 = bf16[512,8,128]{2,1,0} parameter(28), sharding={devices=[8,1,1]<=[8]}
  %all-gather.72 = bf16[4096,8,128]{2,1,0} all-gather(%param.109), channel_id=113, replica_groups=[1,8]<=[8], dimensions={0}, use_global_device_ids=true
  %dot.264 = bf16[1,4096,8,128]{3,2,1,0} dot(%sharding_constraint.405, %all-gather.72), lhs_contracting_dims={2}, rhs_contracting_dims={0}
  %slice.212 = bf16[1,4096,8,64]{3,2,1,0} slice(%dot.264), slice={[0:1], [0:4096], [0:8], [0:64]}
  %mul.3053 = bf16[1,4096,8,64]{3,2,1,0} multiply(%slice.212, %mul.2456)
  %slice.213 = bf16[1,4096,8,64]{3,2,1,0} slice(%dot.264), slice={[0:1], [0:4096], [0:8], [64:128]}
  %mul.3067 = bf16[1,4096,8,64]{3,2,1,0} multiply(%slice.213, %mul.2460)
  %sub.118 = bf16[1,4096,8,64]{3,2,1,0} subtract(%mul.3053, %mul.3067)
  %mul.3070 = bf16[1,4096,8,64]{3,2,1,0} multiply(%slice.213, %mul.2456)
  %mul.3074 = bf16[1,4096,8,64]{3,2,1,0} multiply(%slice.212, %mul.2460)
  %add.1534 = bf16[1,4096,8,64]{3,2,1,0} add(%mul.3070, %mul.3074)
  %concatenate.84 = bf16[1,4096,8,128]{3,2,1,0} concatenate(%sub.118, %add.1534), dimensions={3}
  %sharding_constraint.408 = bf16[1,4096,8,128]{3,2,1,0} copy(%concatenate.84)
  %param.110 = bf16[512,8,128]{2,1,0} parameter(31), sharding={devices=[8,1,1]<=[8]}
  %all-gather.73 = bf16[4096,8,128]{2,1,0} all-gather(%param.110), channel_id=114, replica_groups=[1,8]<=[8], dimensions={0}, use_global_device_ids=true
  %dot.265 = bf16[1,4096,8,128]{3,2,1,0} dot(%sharding_constraint.405, %all-gather.73), lhs_contracting_dims={2}, rhs_contracting_dims={0}
  %sharding_constraint.409 = bf16[1,4096,8,128]{3,2,1,0} copy(%dot.265)
  %te_fused_attn_forward_ffi.36 = (bf16[1,4096,32,128]{3,2,1,0}, f32[1,32,4096,1]{3,2,1,0}, u32[2,4]{1,0}, u8[48]{0}) custom-call(%sharding_constraint.406, %sharding_constraint.408, %sharding_constraint.409, %constant.1403, %dynamic-slice.38, /*index=5*/%concatenate.31, %concatenate.36, %constant.1416, %constant.1416, %constant.1416, /*index=10*/%constant.1416, %constant.1416, %constant.1416), custom_call_target="te_fused_attn_forward_ffi", operand_layout_constraints={bf16[1,4096,32,128]{3,2,1,0}, bf16[1,4096,8,128]{3,2,1,0}, bf16[1,4096,8,128]{3,2,1,0}, bf16[0]{0}, u32[2]{0}, s32[2]{0}, s32[2]{0}, f32[0]{0}, f32[0]{0}, f32[0]{0}, f32[0]{0}, f32[0]{0}, f32[0]{0}}, api_version=API_VERSION_TYPED_FFI, backend_config={attn_heads = 32 : i64, bias_batch = 0 : i64, bias_heads = 0 : i64, bias_type = 0 : i64, deterministic = false, dropout_probability = 0.000000e+00 : f64, input_batch = 1 : i64, is_training = true, kv_max_seqlen = 4096 : i64, mask_type = 3 : i64, max_segments_per_seq = 1 : i64, num_gqa_groups = 8 : i64, q_max_seqlen = 4096 : i64, qk_head_dim = 128 : i64, qkv_layout = 9 : i64, scaling_factor = 1.000000e+00 : f64, v_head_dim = 128 : i64, window_size_left = -1 : i64, window_size_right = -1 : i64}
  %get-tuple-element.359 = bf16[1,4096,32,128]{3,2,1,0} get-tuple-element(%te_fused_attn_forward_ffi.36), index=0
  %sharding_constraint.410 = bf16[1,4096,32,128]{3,2,1,0} copy(%get-tuple-element.359)
  %param.111 = bf16[32,128,512]{2,1,0} parameter(29), sharding={devices=[1,1,8]<=[8]}
  %all-gather.75 = bf16[32,128,4096]{2,1,0} all-gather(%param.111), channel_id=116, replica_groups=[1,8]<=[8], dimensions={2}, use_global_device_ids=true
  %dot.266 = bf16[1,4096,4096]{2,1,0} dot(%sharding_constraint.410, %all-gather.75), lhs_contracting_dims={2,3}, rhs_contracting_dims={0,1}
  %sharding_constraint.411 = bf16[1,4096,4096]{2,1,0} copy(%dot.266)
  %add.1535 = bf16[1,4096,4096]{2,1,0} add(%sharding_constraint.403, %sharding_constraint.411)
  %convert_element_type.1441 = f32[1,4096,4096]{2,1,0} convert(%add.1535)
  %square.24 = f32[1,4096,4096]{2,1,0} multiply(%convert_element_type.1441, %convert_element_type.1441)
  %reduce.286 = f32[1,4096]{1,0} reduce(%square.24, %constant.1360), dimensions={2}, to_apply=%region_124.3960
  %div.538 = f32[1,4096]{1,0} multiply(%reduce.286, %broadcast.3412)
  %add.1536 = f32[1,4096]{1,0} add(%div.538, %broadcast.3413)
  %rsqrt.85 = f32[1,4096]{1,0} rsqrt(%add.1536)
  %mul.3075 = f32[1,4096,4096]{2,1,0} broadcast(%rsqrt.85), dimensions={0,1}
  %mul.3076 = f32[1,4096,4096]{2,1,0} multiply(%convert_element_type.1441, %mul.3075)
  %convert_element_type.1442 = bf16[1,4096,4096]{2,1,0} convert(%mul.3076)
  %param.112 = bf16[4096]{0} parameter(26), sharding={replicated}
  %mul.3077 = bf16[1,4096,4096]{2,1,0} broadcast(%param.112), dimensions={2}
  %mul.3078 = bf16[1,4096,4096]{2,1,0} multiply(%convert_element_type.1442, %mul.3077)
  %sharding_constraint.412 = bf16[1,4096,4096]{2,1,0} copy(%mul.3078)
  %param.113 = bf16[512,8]{1,0} parameter(22), sharding={devices=[8,1]<=[8]}
  %all-gather.76 = bf16[4096,8]{1,0} all-gather(%param.113), channel_id=117, replica_groups=[1,8]<=[8], dimensions={0}, use_global_device_ids=true
  %dot.267 = bf16[1,4096,8]{2,1,0} dot(%sharding_constraint.412, %all-gather.76), lhs_contracting_dims={2}, rhs_contracting_dims={0}
  %sharding_constraint.413 = bf16[1,4096,8]{2,1,0} copy(%dot.267)
  %top_k.30 = bf16[4096,8]{1,0} reshape(%sharding_constraint.413)
  %top_k.31 = (bf16[4096,2]{1,0}, s32[4096,2]{1,0}) custom-call(%top_k.30), custom_call_target="TopK", called_computations={%compare_greater_than.10.3979.clone}
  %get-tuple-element.360 = bf16[4096,2]{1,0} get-tuple-element(%top_k.31), index=0
  %get-tuple-element.361 = s32[4096,2]{1,0} get-tuple-element(%top_k.31), index=1
  %add.1537 = s32[4096,2]{1,0} add(%get-tuple-element.361, %broadcast.3418)
  %sort.74 = (bf16[4096,2]{1,0}, s32[4096,2]{1,0}) sort(%get-tuple-element.360, %add.1537), dimensions={1}, is_stable=true, to_apply=%compare-value-and-index.10
  %get-tuple-element.363 = s32[4096,2]{1,0} get-tuple-element(%sort.74), index=1
  %slice.216 = s32[4096,2]{1,0} slice(%get-tuple-element.363), slice={[0:4096], [0:2]}
  %top_k.32 = s32[1,4096,2]{2,1,0} reshape(%slice.216)
  %lt.32 = pred[1,4096,2]{2,1,0} compare(%top_k.32, %broadcast.3419), direction=LT
  %add.1538 = s32[1,4096,2]{2,1,0} add(%top_k.32, %broadcast.3420)
  %select_n.306 = s32[1,4096,2]{2,1,0} select(%lt.32, %add.1538, %top_k.32)
  %broadcast_in_dim.550 = s32[1,4096,2,1]{3,2,1,0} reshape(%select_n.306)
  %concatenate.87 = s32[1,4096,2,3]{3,2,1,0} concatenate(%add.1356, %iota.1910, %broadcast_in_dim.550), dimensions={3}
  %subtract.32 = s32[1,4096,2,3]{3,2,1,0} subtract(%concatenate.87, %broadcast.3428)
  %scatter.149 = u32[1,4096,8]{2,1,0} scatter(%dynamic-slice.43, %subtract.32, %add.1401), update_window_dims={}, inserted_window_dims={0,1,2}, scatter_dims_to_operand_dims={0,1,2}, index_vector_dim=3, to_apply=%region_125.4007.clone
  %gather.10 = u32[1,4096,2]{2,1,0} gather(%scatter.149, %subtract.32), offset_dims={}, collapsed_slice_dims={0,1,2}, start_index_map={0,1,2}, index_vector_dim=3, slice_sizes={1,1,1}
  %eq.1961 = pred[1,4096,2]{2,1,0} compare(%add.1401, %gather.10), direction=EQ
  %get-tuple-element.362 = bf16[4096,2]{1,0} get-tuple-element(%sort.74), index=0
  %slice.215 = bf16[4096,2]{1,0} slice(%get-tuple-element.362), slice={[0:4096], [0:2]}
  %convert_element_type.1443 = f32[4096,2]{1,0} convert(%slice.215)
  %convert_element_type.1445 = f32[1,4096,2]{2,1,0} reshape(%convert_element_type.1443)
  %reduce.287 = f32[4096]{0} reduce(%convert_element_type.1443, %constant.1450), dimensions={1}, to_apply=%region_126.4016
  %sub.119 = f32[1,4096]{1,0} reshape(%reduce.287)
  %sub.120 = f32[1,4096,2]{2,1,0} broadcast(%sub.119), dimensions={0,1}
  %sub.121 = f32[1,4096,2]{2,1,0} subtract(%convert_element_type.1445, %sub.120)
  %exp.146 = f32[1,4096,2]{2,1,0} exponential(%sub.121)
  %reduce.288 = f32[1,4096]{1,0} reduce(%exp.146, %constant.1360), dimensions={2}, to_apply=%region_127.4025
  %div.539 = f32[1,4096,2]{2,1,0} broadcast(%reduce.288), dimensions={0,1}
  %div.540 = f32[1,4096,2]{2,1,0} divide(%exp.146, %div.539)
  %convert_element_type.1446 = bf16[1,4096,2]{2,1,0} convert(%div.540)
  %select_n.307 = bf16[1,4096,2]{2,1,0} select(%eq.1961, %convert_element_type.1446, %broadcast.3427)
  %scatter.150 = bf16[1,4096,8]{2,1,0} scatter(%broadcast.3379, %subtract.32, %select_n.307), update_window_dims={}, inserted_window_dims={0,1,2}, scatter_dims_to_operand_dims={0,1,2}, index_vector_dim=3, to_apply=%region_128.4034.clone
  %eq.1963 = s32[1,4096,2,8]{3,2,1,0} broadcast(%top_k.32), dimensions={0,1,2}
  %iota.2073 = s32[1,4096,2,8]{3,2,1,0} iota(), iota_dimension=3
  %eq.1964 = pred[1,4096,2,8]{3,2,1,0} compare(%eq.1963, %iota.2073), direction=EQ
  %convert_element_type.1449 = s32[1,4096,2,8]{3,2,1,0} convert(%eq.1964)
  %reshape.9796 = s32[1,8192,8]{2,1,0} reshape(%convert_element_type.1449)
  %sharding_constraint.414 = s32[1,8192,8]{2,1,0} copy(%reshape.9796)
  %reduce-window.10 = s32[1,8192,8]{2,1,0} reduce-window(%sharding_constraint.414, %constant.1181), window={size=1x8192x1 pad=0_0x8191_0x0_0}, to_apply=%region_129.4046
  %reshape.9798 = s32[1,4096,2,8]{3,2,1,0} reshape(%reduce-window.10)
  %sharding_constraint.415 = s32[1,4096,2,8]{3,2,1,0} copy(%reshape.9798)
  %le.22 = pred[1,4096,2,8]{3,2,1,0} compare(%sharding_constraint.415, %broadcast.3429), direction=LE
  %mul.3079 = s32[1,4096,2,8]{3,2,1,0} select(%le.22, %convert_element_type.1449, %broadcast.3430)
  %reduce.289 = s32[1,4096,8]{2,1,0} reduce(%mul.3079, %constant.1181), dimensions={2}, to_apply=%region_130.4055
  %convert_element_type.1450 = bf16[1,4096,8]{2,1,0} convert(%reduce.289)
  %mul.3080 = bf16[1,4096,8]{2,1,0} multiply(%scatter.150, %convert_element_type.1450)
  %mul.3084 = bf16[1,4096,8,1025]{3,2,1,0} broadcast(%mul.3080), dimensions={0,1,2}
  %mul.3102 = s32[1,8192,8]{2,1,0} multiply(%sharding_constraint.414, %reduce-window.10)
  %reshape.9799 = s32[1,4096,2,8]{3,2,1,0} reshape(%mul.3102)
  %reduce.290 = s32[1,4096,8]{2,1,0} reduce(%reshape.9799, %constant.1181), dimensions={2}, to_apply=%region_131.4065
  %mul.3103 = s32[1,4096,8]{2,1,0} multiply(%reduce.290, %reduce.289)
  %eq.1965 = s32[1,4096,8,1025]{3,2,1,0} broadcast(%mul.3103), dimensions={0,1,2}
  %iota.2074 = s32[1,4096,8,1025]{3,2,1,0} iota(), iota_dimension=3
  %eq.1966 = pred[1,4096,8,1025]{3,2,1,0} compare(%eq.1965, %iota.2074), direction=EQ
  %convert_element_type.1451 = s32[1,4096,8,1025]{3,2,1,0} convert(%eq.1966)
  %convert_element_type.1452 = bf16[1,4096,8,1025]{3,2,1,0} convert(%convert_element_type.1451)
  %mul.3104 = bf16[1,4096,8,1025]{3,2,1,0} multiply(%mul.3084, %convert_element_type.1452)
  %slice.217 = bf16[1,4096,8,1024]{3,2,1,0} slice(%mul.3104), slice={[0:1], [0:4096], [0:8], [1:1025]}
  %sharding_constraint.416 = bf16[1,4096,8,1024]{3,2,1,0} copy(%slice.217)
  %convert_element_type.1453 = pred[1,4096,8,1024]{3,2,1,0} compare(%slice.217, %broadcast.3431), direction=NE
  %sharding_constraint.417 = pred[1,4096,8,1024]{3,2,1,0} copy(%convert_element_type.1453)
  %dot_general.46 = bf16[1,4096,8,1024]{3,2,1,0} convert(%sharding_constraint.417)
  %dot.268 = bf16[1,8,1024,4096]{3,2,1,0} dot(%dot_general.46, %sharding_constraint.412), lhs_batch_dims={0}, lhs_contracting_dims={1}, rhs_batch_dims={0}, rhs_contracting_dims={1}
  %reshape.9802 = bf16[1,8,1,1024,4096]{4,3,2,1,0} reshape(%dot.268)
  %all-to-all.20 = bf16[1,8,1,1024,4096]{4,3,2,1,0} all-to-all(%reshape.9802), channel_id=121, replica_groups=[1,8]<=[8], dimensions={1}
  %transpose.35 = bf16[8,1,1,1024,4096]{4,3,2,0,1} transpose(%all-to-all.20), dimensions={1,0,2,3,4}
  %reshape.9803 = bf16[8,1,1024,4096]{3,2,1,0} reshape(%transpose.35)
  %transpose.36 = bf16[1,8,1024,4096]{3,2,0,1} transpose(%reshape.9803), dimensions={1,0,2,3}
  %sharding_constraint.418 = bf16[1,8,1024,4096]{3,2,0,1} copy(%transpose.36)
  %param.114 = bf16[1,4096,14336]{2,1,0} parameter(23), sharding={devices=[8,1,1]<=[8]}
  %sharding_constraint.419 = bf16[1,4096,14336]{2,1,0} copy(%param.114)
  %dot.269 = bf16[1,8,1024,14336]{3,2,1,0} dot(%sharding_constraint.418, %sharding_constraint.419), lhs_batch_dims={0}, lhs_contracting_dims={3}, rhs_batch_dims={0}, rhs_contracting_dims={1}
  %sharding_constraint.420 = bf16[1,8,1024,14336]{3,2,1,0} copy(%dot.269)
  %neg.168 = bf16[1,8,1024,14336]{3,2,1,0} negate(%sharding_constraint.420)
  %exp.147 = bf16[1,8,1024,14336]{3,2,1,0} exponential(%neg.168)
  %add.1543 = bf16[1,8,1024,14336]{3,2,1,0} add(%exp.147, %jit_silu_.0)
  %div.541 = bf16[1,8,1024,14336]{3,2,1,0} divide(%jit_silu_.0, %add.1543)
  %mul.3105 = bf16[1,8,1024,14336]{3,2,1,0} multiply(%sharding_constraint.420, %div.541)
  %param.115 = bf16[1,4096,14336]{2,1,0} parameter(24), sharding={devices=[8,1,1]<=[8]}
  %sharding_constraint.421 = bf16[1,4096,14336]{2,1,0} copy(%param.115)
  %dot.270 = bf16[1,8,1024,14336]{3,2,1,0} dot(%sharding_constraint.418, %sharding_constraint.421), lhs_batch_dims={0}, lhs_contracting_dims={3}, rhs_batch_dims={0}, rhs_contracting_dims={1}
  %sharding_constraint.422 = bf16[1,8,1024,14336]{3,2,1,0} copy(%dot.270)
  %mul.3107 = bf16[1,8,1024,14336]{3,2,1,0} multiply(%mul.3105, %sharding_constraint.422)
  %param.116 = bf16[1,14336,4096]{2,1,0} parameter(25), sharding={devices=[8,1,1]<=[8]}
  %sharding_constraint.423 = bf16[1,14336,4096]{2,1,0} copy(%param.116)
  %dot.271 = bf16[1,8,1024,4096]{3,2,1,0} dot(%mul.3107, %sharding_constraint.423), lhs_batch_dims={0}, lhs_contracting_dims={3}, rhs_batch_dims={0}, rhs_contracting_dims={1}
  %sharding_constraint.424 = bf16[1,8,1024,4096]{3,2,1,0} copy(%dot.271)
  %reshape.9806 = bf16[1,8,1,1024,4096]{4,3,2,1,0} reshape(%sharding_constraint.424)
  %all-to-all.21 = bf16[1,8,1,1024,4096]{4,3,2,1,0} all-to-all(%reshape.9806), channel_id=122, replica_groups=[1,8]<=[8], dimensions={1}
  %transpose.37 = bf16[8,1,1,1024,4096]{4,3,2,0,1} transpose(%all-to-all.21), dimensions={1,0,2,3,4}
  %reshape.9807 = bf16[8,1,1024,4096]{3,2,1,0} reshape(%transpose.37)
  %dot.272 = bf16[1,4096,4096]{2,1,0} dot(%sharding_constraint.416, %reshape.9807), lhs_batch_dims={0}, lhs_contracting_dims={3,2}, rhs_batch_dims={1}, rhs_contracting_dims={2,0}
  %sharding_constraint.425 = bf16[1,4096,4096]{2,1,0} copy(%dot.272)
  %add.1544 = bf16[1,4096,4096]{2,1,0} add(%sharding_constraint.425, %add.1535)
  %sharding_constraint.426 = bf16[1,4096,4096]{2,1,0} copy(%add.1544)
  %sharding_constraint.427 = bf16[1,4096,4096]{2,1,0} copy(%sharding_constraint.426)
  %convert_element_type.1455 = f32[1,4096,4096]{2,1,0} convert(%sharding_constraint.427)
  %square.25 = f32[1,4096,4096]{2,1,0} multiply(%convert_element_type.1455, %convert_element_type.1455)
  %reduce.291 = f32[1,4096]{1,0} reduce(%square.25, %constant.1360), dimensions={2}, to_apply=%region_132.4107
  %div.542 = f32[1,4096]{1,0} multiply(%reduce.291, %broadcast.3412)
  %add.1545 = f32[1,4096]{1,0} add(%div.542, %broadcast.3413)
  %rsqrt.86 = f32[1,4096]{1,0} rsqrt(%add.1545)
  %mul.3108 = f32[1,4096,4096]{2,1,0} broadcast(%rsqrt.86), dimensions={0,1}
  %mul.3109 = f32[1,4096,4096]{2,1,0} multiply(%convert_element_type.1455, %mul.3108)
  %convert_element_type.1456 = bf16[1,4096,4096]{2,1,0} convert(%mul.3109)
  %param.117 = bf16[4096]{0} parameter(37), sharding={replicated}
  %mul.3110 = bf16[1,4096,4096]{2,1,0} broadcast(%param.117), dimensions={2}
  %mul.3111 = bf16[1,4096,4096]{2,1,0} multiply(%convert_element_type.1456, %mul.3110)
  %sharding_constraint.428 = bf16[1,4096,4096]{2,1,0} copy(%mul.3111)
  %sharding_constraint.429 = bf16[1,4096,4096]{2,1,0} copy(%sharding_constraint.428)
  %param.118 = bf16[512,32,128]{2,1,0} parameter(40), sharding={devices=[8,1,1]<=[8]}
  %all-gather.78 = bf16[4096,32,128]{2,1,0} all-gather(%param.118), channel_id=123, replica_groups=[1,8]<=[8], dimensions={0}, use_global_device_ids=true
  %dot.273 = bf16[1,4096,32,128]{3,2,1,0} dot(%sharding_constraint.429, %all-gather.78), lhs_contracting_dims={2}, rhs_contracting_dims={0}
  %slice.218 = bf16[1,4096,32,64]{3,2,1,0} slice(%dot.273), slice={[0:1], [0:4096], [0:32], [0:64]}
  %mul.3115 = bf16[1,4096,32,64]{3,2,1,0} multiply(%slice.218, %mul.2435)
  %slice.219 = bf16[1,4096,32,64]{3,2,1,0} slice(%dot.273), slice={[0:1], [0:4096], [0:32], [64:128]}
  %mul.3118 = bf16[1,4096,32,64]{3,2,1,0} multiply(%slice.219, %mul.2438)
  %sub.122 = bf16[1,4096,32,64]{3,2,1,0} subtract(%mul.3115, %mul.3118)
  %mul.3121 = bf16[1,4096,32,64]{3,2,1,0} multiply(%slice.219, %mul.2435)
  %mul.3124 = bf16[1,4096,32,64]{3,2,1,0} multiply(%slice.218, %mul.2438)
  %add.1547 = bf16[1,4096,32,64]{3,2,1,0} add(%mul.3121, %mul.3124)
  %concatenate.91 = bf16[1,4096,32,128]{3,2,1,0} concatenate(%sub.122, %add.1547), dimensions={3}
  %sharding_constraint.430 = bf16[1,4096,32,128]{3,2,1,0} copy(%concatenate.91)
  %param.119 = bf16[512,8,128]{2,1,0} parameter(38), sharding={devices=[8,1,1]<=[8]}
  %all-gather.79 = bf16[4096,8,128]{2,1,0} all-gather(%param.119), channel_id=124, replica_groups=[1,8]<=[8], dimensions={0}, use_global_device_ids=true
  %dot.274 = bf16[1,4096,8,128]{3,2,1,0} dot(%sharding_constraint.429, %all-gather.79), lhs_contracting_dims={2}, rhs_contracting_dims={0}
  %slice.220 = bf16[1,4096,8,64]{3,2,1,0} slice(%dot.274), slice={[0:1], [0:4096], [0:8], [0:64]}
  %mul.3144 = bf16[1,4096,8,64]{3,2,1,0} multiply(%slice.220, %mul.2456)
  %slice.221 = bf16[1,4096,8,64]{3,2,1,0} slice(%dot.274), slice={[0:1], [0:4096], [0:8], [64:128]}
  %mul.3147 = bf16[1,4096,8,64]{3,2,1,0} multiply(%slice.221, %mul.2460)
  %sub.123 = bf16[1,4096,8,64]{3,2,1,0} subtract(%mul.3144, %mul.3147)
  %mul.3150 = bf16[1,4096,8,64]{3,2,1,0} multiply(%slice.221, %mul.2456)
  %mul.3157 = bf16[1,4096,8,64]{3,2,1,0} multiply(%slice.220, %mul.2460)
  %add.1548 = bf16[1,4096,8,64]{3,2,1,0} add(%mul.3150, %mul.3157)
  %concatenate.92 = bf16[1,4096,8,128]{3,2,1,0} concatenate(%sub.123, %add.1548), dimensions={3}
  %sharding_constraint.432 = bf16[1,4096,8,128]{3,2,1,0} copy(%concatenate.92)
  %param.120 = bf16[512,8,128]{2,1,0} parameter(41), sharding={devices=[8,1,1]<=[8]}
  %all-gather.80 = bf16[4096,8,128]{2,1,0} all-gather(%param.120), channel_id=125, replica_groups=[1,8]<=[8], dimensions={0}, use_global_device_ids=true
  %dot.275 = bf16[1,4096,8,128]{3,2,1,0} dot(%sharding_constraint.429, %all-gather.80), lhs_contracting_dims={2}, rhs_contracting_dims={0}
  %sharding_constraint.433 = bf16[1,4096,8,128]{3,2,1,0} copy(%dot.275)
  %te_fused_attn_forward_ffi.44 = (bf16[1,4096,32,128]{3,2,1,0}, f32[1,32,4096,1]{3,2,1,0}, u32[2,4]{1,0}, u8[48]{0}) custom-call(%sharding_constraint.430, %sharding_constraint.432, %sharding_constraint.433, %constant.1403, %dynamic-slice.38, /*index=5*/%concatenate.31, %concatenate.36, %constant.1416, %constant.1416, %constant.1416, /*index=10*/%constant.1416, %constant.1416, %constant.1416), custom_call_target="te_fused_attn_forward_ffi", operand_layout_constraints={bf16[1,4096,32,128]{3,2,1,0}, bf16[1,4096,8,128]{3,2,1,0}, bf16[1,4096,8,128]{3,2,1,0}, bf16[0]{0}, u32[2]{0}, s32[2]{0}, s32[2]{0}, f32[0]{0}, f32[0]{0}, f32[0]{0}, f32[0]{0}, f32[0]{0}, f32[0]{0}}, api_version=API_VERSION_TYPED_FFI, backend_config={attn_heads = 32 : i64, bias_batch = 0 : i64, bias_heads = 0 : i64, bias_type = 0 : i64, deterministic = false, dropout_probability = 0.000000e+00 : f64, input_batch = 1 : i64, is_training = true, kv_max_seqlen = 4096 : i64, mask_type = 3 : i64, max_segments_per_seq = 1 : i64, num_gqa_groups = 8 : i64, q_max_seqlen = 4096 : i64, qk_head_dim = 128 : i64, qkv_layout = 9 : i64, scaling_factor = 1.000000e+00 : f64, v_head_dim = 128 : i64, window_size_left = -1 : i64, window_size_right = -1 : i64}
  %get-tuple-element.369 = bf16[1,4096,32,128]{3,2,1,0} get-tuple-element(%te_fused_attn_forward_ffi.44), index=0
  %sharding_constraint.434 = bf16[1,4096,32,128]{3,2,1,0} copy(%get-tuple-element.369)
  %param.121 = bf16[32,128,512]{2,1,0} parameter(39), sharding={devices=[1,1,8]<=[8]}
  %all-gather.82 = bf16[32,128,4096]{2,1,0} all-gather(%param.121), channel_id=127, replica_groups=[1,8]<=[8], dimensions={2}, use_global_device_ids=true
  %dot.276 = bf16[1,4096,4096]{2,1,0} dot(%sharding_constraint.434, %all-gather.82), lhs_contracting_dims={2,3}, rhs_contracting_dims={0,1}
  %sharding_constraint.435 = bf16[1,4096,4096]{2,1,0} copy(%dot.276)
  %add.1549 = bf16[1,4096,4096]{2,1,0} add(%sharding_constraint.427, %sharding_constraint.435)
  %convert_element_type.1468 = f32[1,4096,4096]{2,1,0} convert(%add.1549)
  %square.26 = f32[1,4096,4096]{2,1,0} multiply(%convert_element_type.1468, %convert_element_type.1468)
  %reduce.295 = f32[1,4096]{1,0} reduce(%square.26, %constant.1360), dimensions={2}, to_apply=%region_136.4231
  %div.551 = f32[1,4096]{1,0} multiply(%reduce.295, %broadcast.3412)
  %add.1550 = f32[1,4096]{1,0} add(%div.551, %broadcast.3413)
  %rsqrt.87 = f32[1,4096]{1,0} rsqrt(%add.1550)
  %mul.3158 = f32[1,4096,4096]{2,1,0} broadcast(%rsqrt.87), dimensions={0,1}
  %mul.3159 = f32[1,4096,4096]{2,1,0} multiply(%convert_element_type.1468, %mul.3158)
  %convert_element_type.1469 = bf16[1,4096,4096]{2,1,0} convert(%mul.3159)
  %param.122 = bf16[4096]{0} parameter(36), sharding={replicated}
  %mul.3160 = bf16[1,4096,4096]{2,1,0} broadcast(%param.122), dimensions={2}
  %mul.3161 = bf16[1,4096,4096]{2,1,0} multiply(%convert_element_type.1469, %mul.3160)
  %sharding_constraint.436 = bf16[1,4096,4096]{2,1,0} copy(%mul.3161)
  %param.123 = bf16[512,8]{1,0} parameter(32), sharding={devices=[8,1]<=[8]}
  %all-gather.83 = bf16[4096,8]{1,0} all-gather(%param.123), channel_id=128, replica_groups=[1,8]<=[8], dimensions={0}, use_global_device_ids=true
  %dot.277 = bf16[1,4096,8]{2,1,0} dot(%sharding_constraint.436, %all-gather.83), lhs_contracting_dims={2}, rhs_contracting_dims={0}
  %sharding_constraint.437 = bf16[1,4096,8]{2,1,0} copy(%dot.277)
  %top_k.33 = bf16[4096,8]{1,0} reshape(%sharding_constraint.437)
  %top_k.34 = (bf16[4096,2]{1,0}, s32[4096,2]{1,0}) custom-call(%top_k.33), custom_call_target="TopK", called_computations={%compare_greater_than.11.4250.clone}
  %get-tuple-element.370 = bf16[4096,2]{1,0} get-tuple-element(%top_k.34), index=0
  %get-tuple-element.371 = s32[4096,2]{1,0} get-tuple-element(%top_k.34), index=1
  %add.1551 = s32[4096,2]{1,0} add(%get-tuple-element.371, %broadcast.3418)
  %sort.75 = (bf16[4096,2]{1,0}, s32[4096,2]{1,0}) sort(%get-tuple-element.370, %add.1551), dimensions={1}, is_stable=true, to_apply=%compare-value-and-index.11
  %get-tuple-element.373 = s32[4096,2]{1,0} get-tuple-element(%sort.75), index=1
  %slice.224 = s32[4096,2]{1,0} slice(%get-tuple-element.373), slice={[0:4096], [0:2]}
  %top_k.35 = s32[1,4096,2]{2,1,0} reshape(%slice.224)
  %lt.36 = pred[1,4096,2]{2,1,0} compare(%top_k.35, %broadcast.3419), direction=LT
  %add.1552 = s32[1,4096,2]{2,1,0} add(%top_k.35, %broadcast.3420)
  %select_n.311 = s32[1,4096,2]{2,1,0} select(%lt.36, %add.1552, %top_k.35)
  %broadcast_in_dim.553 = s32[1,4096,2,1]{3,2,1,0} reshape(%select_n.311)
  %concatenate.95 = s32[1,4096,2,3]{3,2,1,0} concatenate(%add.1356, %iota.1908, %broadcast_in_dim.553), dimensions={3}
  %subtract.35 = s32[1,4096,2,3]{3,2,1,0} subtract(%concatenate.95, %broadcast.3428)
  %scatter.151 = u32[1,4096,8]{2,1,0} scatter(%dynamic-slice.43, %subtract.35, %add.1401), update_window_dims={}, inserted_window_dims={0,1,2}, scatter_dims_to_operand_dims={0,1,2}, index_vector_dim=3, to_apply=%region_137.4278.clone
  %gather.11 = u32[1,4096,2]{2,1,0} gather(%scatter.151, %subtract.35), offset_dims={}, collapsed_slice_dims={0,1,2}, start_index_map={0,1,2}, index_vector_dim=3, slice_sizes={1,1,1}
  %eq.1970 = pred[1,4096,2]{2,1,0} compare(%add.1401, %gather.11), direction=EQ
  %get-tuple-element.372 = bf16[4096,2]{1,0} get-tuple-element(%sort.75), index=0
  %slice.223 = bf16[4096,2]{1,0} slice(%get-tuple-element.372), slice={[0:4096], [0:2]}
  %convert_element_type.1470 = f32[4096,2]{1,0} convert(%slice.223)
  %convert_element_type.1471 = f32[1,4096,2]{2,1,0} reshape(%convert_element_type.1470)
  %reduce.296 = f32[4096]{0} reduce(%convert_element_type.1470, %constant.1450), dimensions={1}, to_apply=%region_138.4287
  %sub.124 = f32[1,4096]{1,0} reshape(%reduce.296)
  %sub.125 = f32[1,4096,2]{2,1,0} broadcast(%sub.124), dimensions={0,1}
  %sub.126 = f32[1,4096,2]{2,1,0} subtract(%convert_element_type.1471, %sub.125)
  %exp.148 = f32[1,4096,2]{2,1,0} exponential(%sub.126)
  %reduce.297 = f32[1,4096]{1,0} reduce(%exp.148, %constant.1360), dimensions={2}, to_apply=%region_139.4296
  %div.552 = f32[1,4096,2]{2,1,0} broadcast(%reduce.297), dimensions={0,1}
  %div.553 = f32[1,4096,2]{2,1,0} divide(%exp.148, %div.552)
  %convert_element_type.1472 = bf16[1,4096,2]{2,1,0} convert(%div.553)
  %select_n.312 = bf16[1,4096,2]{2,1,0} select(%eq.1970, %convert_element_type.1472, %broadcast.3427)
  %scatter.152 = bf16[1,4096,8]{2,1,0} scatter(%broadcast.3379, %subtract.35, %select_n.312), update_window_dims={}, inserted_window_dims={0,1,2}, scatter_dims_to_operand_dims={0,1,2}, index_vector_dim=3, to_apply=%region_140.4305.clone
  %eq.1972 = s32[1,4096,2,8]{3,2,1,0} broadcast(%top_k.35), dimensions={0,1,2}
  %iota.2085 = s32[1,4096,2,8]{3,2,1,0} iota(), iota_dimension=3
  %eq.1973 = pred[1,4096,2,8]{3,2,1,0} compare(%eq.1972, %iota.2085), direction=EQ
  %convert_element_type.1473 = s32[1,4096,2,8]{3,2,1,0} convert(%eq.1973)
  %reshape.9847 = s32[1,8192,8]{2,1,0} reshape(%convert_element_type.1473)
  %sharding_constraint.438 = s32[1,8192,8]{2,1,0} copy(%reshape.9847)
  %reduce-window.11 = s32[1,8192,8]{2,1,0} reduce-window(%sharding_constraint.438, %constant.1181), window={size=1x8192x1 pad=0_0x8191_0x0_0}, to_apply=%region_141.4317
  %reshape.9849 = s32[1,4096,2,8]{3,2,1,0} reshape(%reduce-window.11)
  %sharding_constraint.439 = s32[1,4096,2,8]{3,2,1,0} copy(%reshape.9849)
  %le.24 = pred[1,4096,2,8]{3,2,1,0} compare(%sharding_constraint.439, %broadcast.3429), direction=LE
  %mul.3162 = s32[1,4096,2,8]{3,2,1,0} select(%le.24, %convert_element_type.1473, %broadcast.3430)
  %reduce.298 = s32[1,4096,8]{2,1,0} reduce(%mul.3162, %constant.1181), dimensions={2}, to_apply=%region_142.4326
  %convert_element_type.1474 = bf16[1,4096,8]{2,1,0} convert(%reduce.298)
  %mul.3163 = bf16[1,4096,8]{2,1,0} multiply(%scatter.152, %convert_element_type.1474)
  %mul.3164 = bf16[1,4096,8,1025]{3,2,1,0} broadcast(%mul.3163), dimensions={0,1,2}
  %mul.3165 = s32[1,8192,8]{2,1,0} multiply(%sharding_constraint.438, %reduce-window.11)
  %reshape.9850 = s32[1,4096,2,8]{3,2,1,0} reshape(%mul.3165)
  %reduce.299 = s32[1,4096,8]{2,1,0} reduce(%reshape.9850, %constant.1181), dimensions={2}, to_apply=%region_143.4336
  %mul.3166 = s32[1,4096,8]{2,1,0} multiply(%reduce.299, %reduce.298)
  %eq.1974 = s32[1,4096,8,1025]{3,2,1,0} broadcast(%mul.3166), dimensions={0,1,2}
  %iota.2086 = s32[1,4096,8,1025]{3,2,1,0} iota(), iota_dimension=3
  %eq.1975 = pred[1,4096,8,1025]{3,2,1,0} compare(%eq.1974, %iota.2086), direction=EQ
  %convert_element_type.1476 = s32[1,4096,8,1025]{3,2,1,0} convert(%eq.1975)
  %convert_element_type.1477 = bf16[1,4096,8,1025]{3,2,1,0} convert(%convert_element_type.1476)
  %mul.3167 = bf16[1,4096,8,1025]{3,2,1,0} multiply(%mul.3164, %convert_element_type.1477)
  %slice.225 = bf16[1,4096,8,1024]{3,2,1,0} slice(%mul.3167), slice={[0:1], [0:4096], [0:8], [1:1025]}
  %sharding_constraint.440 = bf16[1,4096,8,1024]{3,2,1,0} copy(%slice.225)
  %convert_element_type.1478 = pred[1,4096,8,1024]{3,2,1,0} compare(%slice.225, %broadcast.3431), direction=NE
  %sharding_constraint.441 = pred[1,4096,8,1024]{3,2,1,0} copy(%convert_element_type.1478)
  %dot_general.47 = bf16[1,4096,8,1024]{3,2,1,0} convert(%sharding_constraint.441)
  %dot.278 = bf16[1,8,1024,4096]{3,2,1,0} dot(%dot_general.47, %sharding_constraint.436), lhs_batch_dims={0}, lhs_contracting_dims={1}, rhs_batch_dims={0}, rhs_contracting_dims={1}
  %reshape.9853 = bf16[1,8,1,1024,4096]{4,3,2,1,0} reshape(%dot.278)
  %all-to-all.22 = bf16[1,8,1,1024,4096]{4,3,2,1,0} all-to-all(%reshape.9853), channel_id=132, replica_groups=[1,8]<=[8], dimensions={1}
  %transpose.38 = bf16[8,1,1,1024,4096]{4,3,2,0,1} transpose(%all-to-all.22), dimensions={1,0,2,3,4}
  %reshape.9854 = bf16[8,1,1024,4096]{3,2,1,0} reshape(%transpose.38)
  %transpose.39 = bf16[1,8,1024,4096]{3,2,0,1} transpose(%reshape.9854), dimensions={1,0,2,3}
  %sharding_constraint.442 = bf16[1,8,1024,4096]{3,2,0,1} copy(%transpose.39)
  %param.124 = bf16[1,4096,14336]{2,1,0} parameter(33), sharding={devices=[8,1,1]<=[8]}
  %sharding_constraint.443 = bf16[1,4096,14336]{2,1,0} copy(%param.124)
  %dot.279 = bf16[1,8,1024,14336]{3,2,1,0} dot(%sharding_constraint.442, %sharding_constraint.443), lhs_batch_dims={0}, lhs_contracting_dims={3}, rhs_batch_dims={0}, rhs_contracting_dims={1}
  %sharding_constraint.444 = bf16[1,8,1024,14336]{3,2,1,0} copy(%dot.279)
  %neg.169 = bf16[1,8,1024,14336]{3,2,1,0} negate(%sharding_constraint.444)
  %exp.149 = bf16[1,8,1024,14336]{3,2,1,0} exponential(%neg.169)
  %add.1557 = bf16[1,8,1024,14336]{3,2,1,0} add(%exp.149, %jit_silu_.0)
  %div.554 = bf16[1,8,1024,14336]{3,2,1,0} divide(%jit_silu_.0, %add.1557)
  %mul.3168 = bf16[1,8,1024,14336]{3,2,1,0} multiply(%sharding_constraint.444, %div.554)
  %param.125 = bf16[1,4096,14336]{2,1,0} parameter(34), sharding={devices=[8,1,1]<=[8]}
  %sharding_constraint.445 = bf16[1,4096,14336]{2,1,0} copy(%param.125)
  %dot.280 = bf16[1,8,1024,14336]{3,2,1,0} dot(%sharding_constraint.442, %sharding_constraint.445), lhs_batch_dims={0}, lhs_contracting_dims={3}, rhs_batch_dims={0}, rhs_contracting_dims={1}
  %sharding_constraint.446 = bf16[1,8,1024,14336]{3,2,1,0} copy(%dot.280)
  %mul.3169 = bf16[1,8,1024,14336]{3,2,1,0} multiply(%mul.3168, %sharding_constraint.446)
  %param.126 = bf16[1,14336,4096]{2,1,0} parameter(35), sharding={devices=[8,1,1]<=[8]}
  %sharding_constraint.447 = bf16[1,14336,4096]{2,1,0} copy(%param.126)
  %dot.281 = bf16[1,8,1024,4096]{3,2,1,0} dot(%mul.3169, %sharding_constraint.447), lhs_batch_dims={0}, lhs_contracting_dims={3}, rhs_batch_dims={0}, rhs_contracting_dims={1}
  %sharding_constraint.448 = bf16[1,8,1024,4096]{3,2,1,0} copy(%dot.281)
  %reshape.9857 = bf16[1,8,1,1024,4096]{4,3,2,1,0} reshape(%sharding_constraint.448)
  %all-to-all.23 = bf16[1,8,1,1024,4096]{4,3,2,1,0} all-to-all(%reshape.9857), channel_id=133, replica_groups=[1,8]<=[8], dimensions={1}
  %transpose.40 = bf16[8,1,1,1024,4096]{4,3,2,0,1} transpose(%all-to-all.23), dimensions={1,0,2,3,4}
  %reshape.9858 = bf16[8,1,1024,4096]{3,2,1,0} reshape(%transpose.40)
  %dot.282 = bf16[1,4096,4096]{2,1,0} dot(%sharding_constraint.440, %reshape.9858), lhs_batch_dims={0}, lhs_contracting_dims={3,2}, rhs_batch_dims={1}, rhs_contracting_dims={2,0}
  %sharding_constraint.449 = bf16[1,4096,4096]{2,1,0} copy(%dot.282)
  %add.1558 = bf16[1,4096,4096]{2,1,0} add(%sharding_constraint.449, %add.1549)
  %sharding_constraint.450 = bf16[1,4096,4096]{2,1,0} copy(%add.1558)
  %sharding_constraint.451 = bf16[1,4096,4096]{2,1,0} copy(%sharding_constraint.450)
  %convert_element_type.1480 = f32[1,4096,4096]{2,1,0} convert(%sharding_constraint.451)
  %square.27 = f32[1,4096,4096]{2,1,0} multiply(%convert_element_type.1480, %convert_element_type.1480)
  %reduce.300 = f32[1,4096]{1,0} reduce(%square.27, %constant.1360), dimensions={2}, to_apply=%region_144.4378
  %div.555 = f32[1,4096]{1,0} multiply(%reduce.300, %broadcast.3412)
  %add.1559 = f32[1,4096]{1,0} add(%div.555, %broadcast.3413)
  %rsqrt.88 = f32[1,4096]{1,0} rsqrt(%add.1559)
  %mul.3170 = f32[1,4096,4096]{2,1,0} broadcast(%rsqrt.88), dimensions={0,1}
  %mul.3171 = f32[1,4096,4096]{2,1,0} multiply(%convert_element_type.1480, %mul.3170)
  %convert_element_type.1481 = bf16[1,4096,4096]{2,1,0} convert(%mul.3171)
  %param.127 = bf16[4096]{0} parameter(47), sharding={replicated}
  %mul.3172 = bf16[1,4096,4096]{2,1,0} broadcast(%param.127), dimensions={2}
  %mul.3173 = bf16[1,4096,4096]{2,1,0} multiply(%convert_element_type.1481, %mul.3172)
  %sharding_constraint.452 = bf16[1,4096,4096]{2,1,0} copy(%mul.3173)
  %sharding_constraint.453 = bf16[1,4096,4096]{2,1,0} copy(%sharding_constraint.452)
  %param.128 = bf16[512,32,128]{2,1,0} parameter(50), sharding={devices=[8,1,1]<=[8]}
  %all-gather.85 = bf16[4096,32,128]{2,1,0} all-gather(%param.128), channel_id=134, replica_groups=[1,8]<=[8], dimensions={0}, use_global_device_ids=true
  %dot.283 = bf16[1,4096,32,128]{3,2,1,0} dot(%sharding_constraint.453, %all-gather.85), lhs_contracting_dims={2}, rhs_contracting_dims={0}
  %slice.226 = bf16[1,4096,32,64]{3,2,1,0} slice(%dot.283), slice={[0:1], [0:4096], [0:32], [0:64]}
  %mul.3177 = bf16[1,4096,32,64]{3,2,1,0} multiply(%slice.226, %mul.2435)
  %slice.227 = bf16[1,4096,32,64]{3,2,1,0} slice(%dot.283), slice={[0:1], [0:4096], [0:32], [64:128]}
  %mul.3180 = bf16[1,4096,32,64]{3,2,1,0} multiply(%slice.227, %mul.2438)
  %sub.127 = bf16[1,4096,32,64]{3,2,1,0} subtract(%mul.3177, %mul.3180)
  %mul.3183 = bf16[1,4096,32,64]{3,2,1,0} multiply(%slice.227, %mul.2435)
  %mul.3186 = bf16[1,4096,32,64]{3,2,1,0} multiply(%slice.226, %mul.2438)
  %add.1560 = bf16[1,4096,32,64]{3,2,1,0} add(%mul.3183, %mul.3186)
  %concatenate.99 = bf16[1,4096,32,128]{3,2,1,0} concatenate(%sub.127, %add.1560), dimensions={3}
  %sharding_constraint.454 = bf16[1,4096,32,128]{3,2,1,0} copy(%concatenate.99)
  %param.129 = bf16[512,8,128]{2,1,0} parameter(48), sharding={devices=[8,1,1]<=[8]}
  %all-gather.86 = bf16[4096,8,128]{2,1,0} all-gather(%param.129), channel_id=135, replica_groups=[1,8]<=[8], dimensions={0}, use_global_device_ids=true
  %dot.284 = bf16[1,4096,8,128]{3,2,1,0} dot(%sharding_constraint.453, %all-gather.86), lhs_contracting_dims={2}, rhs_contracting_dims={0}
  %slice.228 = bf16[1,4096,8,64]{3,2,1,0} slice(%dot.284), slice={[0:1], [0:4096], [0:8], [0:64]}
  %mul.3190 = bf16[1,4096,8,64]{3,2,1,0} multiply(%slice.228, %mul.2456)
  %slice.229 = bf16[1,4096,8,64]{3,2,1,0} slice(%dot.284), slice={[0:1], [0:4096], [0:8], [64:128]}
  %mul.3193 = bf16[1,4096,8,64]{3,2,1,0} multiply(%slice.229, %mul.2460)
  %sub.128 = bf16[1,4096,8,64]{3,2,1,0} subtract(%mul.3190, %mul.3193)
  %mul.3196 = bf16[1,4096,8,64]{3,2,1,0} multiply(%slice.229, %mul.2456)
  %mul.3199 = bf16[1,4096,8,64]{3,2,1,0} multiply(%slice.228, %mul.2460)
  %add.1561 = bf16[1,4096,8,64]{3,2,1,0} add(%mul.3196, %mul.3199)
  %concatenate.100 = bf16[1,4096,8,128]{3,2,1,0} concatenate(%sub.128, %add.1561), dimensions={3}
  %sharding_constraint.456 = bf16[1,4096,8,128]{3,2,1,0} copy(%concatenate.100)
  %param.130 = bf16[512,8,128]{2,1,0} parameter(51), sharding={devices=[8,1,1]<=[8]}
  %all-gather.87 = bf16[4096,8,128]{2,1,0} all-gather(%param.130), channel_id=136, replica_groups=[1,8]<=[8], dimensions={0}, use_global_device_ids=true
  %dot.285 = bf16[1,4096,8,128]{3,2,1,0} dot(%sharding_constraint.453, %all-gather.87), lhs_contracting_dims={2}, rhs_contracting_dims={0}
  %sharding_constraint.457 = bf16[1,4096,8,128]{3,2,1,0} copy(%dot.285)
  %te_fused_attn_forward_ffi.48 = (bf16[1,4096,32,128]{3,2,1,0}, f32[1,32,4096,1]{3,2,1,0}, u32[2,4]{1,0}, u8[48]{0}) custom-call(%sharding_constraint.454, %sharding_constraint.456, %sharding_constraint.457, %constant.1403, %dynamic-slice.38, /*index=5*/%concatenate.31, %concatenate.36, %constant.1416, %constant.1416, %constant.1416, /*index=10*/%constant.1416, %constant.1416, %constant.1416), custom_call_target="te_fused_attn_forward_ffi", operand_layout_constraints={bf16[1,4096,32,128]{3,2,1,0}, bf16[1,4096,8,128]{3,2,1,0}, bf16[1,4096,8,128]{3,2,1,0}, bf16[0]{0}, u32[2]{0}, s32[2]{0}, s32[2]{0}, f32[0]{0}, f32[0]{0}, f32[0]{0}, f32[0]{0}, f32[0]{0}, f32[0]{0}}, api_version=API_VERSION_TYPED_FFI, backend_config={attn_heads = 32 : i64, bias_batch = 0 : i64, bias_heads = 0 : i64, bias_type = 0 : i64, deterministic = false, dropout_probability = 0.000000e+00 : f64, input_batch = 1 : i64, is_training = true, kv_max_seqlen = 4096 : i64, mask_type = 3 : i64, max_segments_per_seq = 1 : i64, num_gqa_groups = 8 : i64, q_max_seqlen = 4096 : i64, qk_head_dim = 128 : i64, qkv_layout = 9 : i64, scaling_factor = 1.000000e+00 : f64, v_head_dim = 128 : i64, window_size_left = -1 : i64, window_size_right = -1 : i64}
  %get-tuple-element.379 = bf16[1,4096,32,128]{3,2,1,0} get-tuple-element(%te_fused_attn_forward_ffi.48), index=0
  %sharding_constraint.458 = bf16[1,4096,32,128]{3,2,1,0} copy(%get-tuple-element.379)
  %param.131 = bf16[32,128,512]{2,1,0} parameter(49), sharding={devices=[1,1,8]<=[8]}
  %all-gather.89 = bf16[32,128,4096]{2,1,0} all-gather(%param.131), channel_id=138, replica_groups=[1,8]<=[8], dimensions={2}, use_global_device_ids=true
  %dot.286 = bf16[1,4096,4096]{2,1,0} dot(%sharding_constraint.458, %all-gather.89), lhs_contracting_dims={2,3}, rhs_contracting_dims={0,1}
  %sharding_constraint.459 = bf16[1,4096,4096]{2,1,0} copy(%dot.286)
  %add.1562 = bf16[1,4096,4096]{2,1,0} add(%sharding_constraint.451, %sharding_constraint.459)
  %convert_element_type.1494 = f32[1,4096,4096]{2,1,0} convert(%add.1562)
  %square.28 = f32[1,4096,4096]{2,1,0} multiply(%convert_element_type.1494, %convert_element_type.1494)
  %reduce.304 = f32[1,4096]{1,0} reduce(%square.28, %constant.1360), dimensions={2}, to_apply=%region_148.4502
  %div.564 = f32[1,4096]{1,0} multiply(%reduce.304, %broadcast.3412)
  %add.1563 = f32[1,4096]{1,0} add(%div.564, %broadcast.3413)
  %rsqrt.89 = f32[1,4096]{1,0} rsqrt(%add.1563)
  %mul.3200 = f32[1,4096,4096]{2,1,0} broadcast(%rsqrt.89), dimensions={0,1}
  %mul.3201 = f32[1,4096,4096]{2,1,0} multiply(%convert_element_type.1494, %mul.3200)
  %convert_element_type.1495 = bf16[1,4096,4096]{2,1,0} convert(%mul.3201)
  %param.132 = bf16[4096]{0} parameter(46), sharding={replicated}
  %mul.3202 = bf16[1,4096,4096]{2,1,0} broadcast(%param.132), dimensions={2}
  %mul.3203 = bf16[1,4096,4096]{2,1,0} multiply(%convert_element_type.1495, %mul.3202)
  %sharding_constraint.460 = bf16[1,4096,4096]{2,1,0} copy(%mul.3203)
  %param.133 = bf16[512,8]{1,0} parameter(42), sharding={devices=[8,1]<=[8]}
  %all-gather.90 = bf16[4096,8]{1,0} all-gather(%param.133), channel_id=139, replica_groups=[1,8]<=[8], dimensions={0}, use_global_device_ids=true
  %dot.287 = bf16[1,4096,8]{2,1,0} dot(%sharding_constraint.460, %all-gather.90), lhs_contracting_dims={2}, rhs_contracting_dims={0}
  %sharding_constraint.461 = bf16[1,4096,8]{2,1,0} copy(%dot.287)
  %top_k.36 = bf16[4096,8]{1,0} reshape(%sharding_constraint.461)
  %top_k.37 = (bf16[4096,2]{1,0}, s32[4096,2]{1,0}) custom-call(%top_k.36), custom_call_target="TopK", called_computations={%compare_greater_than.12.4521.clone}
  %get-tuple-element.380 = bf16[4096,2]{1,0} get-tuple-element(%top_k.37), index=0
  %get-tuple-element.381 = s32[4096,2]{1,0} get-tuple-element(%top_k.37), index=1
  %add.1566 = s32[4096,2]{1,0} add(%get-tuple-element.381, %broadcast.3418)
  %sort.76 = (bf16[4096,2]{1,0}, s32[4096,2]{1,0}) sort(%get-tuple-element.380, %add.1566), dimensions={1}, is_stable=true, to_apply=%compare-value-and-index.12
  %get-tuple-element.383 = s32[4096,2]{1,0} get-tuple-element(%sort.76), index=1
  %slice.232 = s32[4096,2]{1,0} slice(%get-tuple-element.383), slice={[0:4096], [0:2]}
  %top_k.38 = s32[1,4096,2]{2,1,0} reshape(%slice.232)
  %lt.39 = pred[1,4096,2]{2,1,0} compare(%top_k.38, %broadcast.3419), direction=LT
  %add.1567 = s32[1,4096,2]{2,1,0} add(%top_k.38, %broadcast.3420)
  %select_n.316 = s32[1,4096,2]{2,1,0} select(%lt.39, %add.1567, %top_k.38)
  %broadcast_in_dim.556 = s32[1,4096,2,1]{3,2,1,0} reshape(%select_n.316)
  %concatenate.103 = s32[1,4096,2,3]{3,2,1,0} concatenate(%add.1356, %iota.1906, %broadcast_in_dim.556), dimensions={3}
  %subtract.38 = s32[1,4096,2,3]{3,2,1,0} subtract(%concatenate.103, %broadcast.3428)
  %scatter.153 = u32[1,4096,8]{2,1,0} scatter(%dynamic-slice.43, %subtract.38, %add.1401), update_window_dims={}, inserted_window_dims={0,1,2}, scatter_dims_to_operand_dims={0,1,2}, index_vector_dim=3, to_apply=%region_149.4549.clone
  %gather.12 = u32[1,4096,2]{2,1,0} gather(%scatter.153, %subtract.38), offset_dims={}, collapsed_slice_dims={0,1,2}, start_index_map={0,1,2}, index_vector_dim=3, slice_sizes={1,1,1}
  %eq.1979 = pred[1,4096,2]{2,1,0} compare(%add.1401, %gather.12), direction=EQ
  %get-tuple-element.382 = bf16[4096,2]{1,0} get-tuple-element(%sort.76), index=0
  %slice.231 = bf16[4096,2]{1,0} slice(%get-tuple-element.382), slice={[0:4096], [0:2]}
  %convert_element_type.1497 = f32[4096,2]{1,0} convert(%slice.231)
  %convert_element_type.1498 = f32[1,4096,2]{2,1,0} reshape(%convert_element_type.1497)
  %reduce.305 = f32[4096]{0} reduce(%convert_element_type.1497, %constant.1450), dimensions={1}, to_apply=%region_150.4558
  %sub.129 = f32[1,4096]{1,0} reshape(%reduce.305)
  %sub.130 = f32[1,4096,2]{2,1,0} broadcast(%sub.129), dimensions={0,1}
  %sub.131 = f32[1,4096,2]{2,1,0} subtract(%convert_element_type.1498, %sub.130)
  %exp.150 = f32[1,4096,2]{2,1,0} exponential(%sub.131)
  %reduce.306 = f32[1,4096]{1,0} reduce(%exp.150, %constant.1360), dimensions={2}, to_apply=%region_151.4567
  %div.565 = f32[1,4096,2]{2,1,0} broadcast(%reduce.306), dimensions={0,1}
  %div.566 = f32[1,4096,2]{2,1,0} divide(%exp.150, %div.565)
  %convert_element_type.1499 = bf16[1,4096,2]{2,1,0} convert(%div.566)
  %select_n.317 = bf16[1,4096,2]{2,1,0} select(%eq.1979, %convert_element_type.1499, %broadcast.3427)
  %scatter.154 = bf16[1,4096,8]{2,1,0} scatter(%broadcast.3379, %subtract.38, %select_n.317), update_window_dims={}, inserted_window_dims={0,1,2}, scatter_dims_to_operand_dims={0,1,2}, index_vector_dim=3, to_apply=%region_152.4576.clone
  %eq.1981 = s32[1,4096,2,8]{3,2,1,0} broadcast(%top_k.38), dimensions={0,1,2}
  %iota.2103 = s32[1,4096,2,8]{3,2,1,0} iota(), iota_dimension=3
  %eq.1982 = pred[1,4096,2,8]{3,2,1,0} compare(%eq.1981, %iota.2103), direction=EQ
  %convert_element_type.1500 = s32[1,4096,2,8]{3,2,1,0} convert(%eq.1982)
  %reshape.9899 = s32[1,8192,8]{2,1,0} reshape(%convert_element_type.1500)
  %sharding_constraint.462 = s32[1,8192,8]{2,1,0} copy(%reshape.9899)
  %reduce-window.12 = s32[1,8192,8]{2,1,0} reduce-window(%sharding_constraint.462, %constant.1181), window={size=1x8192x1 pad=0_0x8191_0x0_0}, to_apply=%region_153.4588
  %reshape.9901 = s32[1,4096,2,8]{3,2,1,0} reshape(%reduce-window.12)
  %sharding_constraint.463 = s32[1,4096,2,8]{3,2,1,0} copy(%reshape.9901)
  %le.26 = pred[1,4096,2,8]{3,2,1,0} compare(%sharding_constraint.463, %broadcast.3429), direction=LE
  %mul.3204 = s32[1,4096,2,8]{3,2,1,0} select(%le.26, %convert_element_type.1500, %broadcast.3430)
  %reduce.307 = s32[1,4096,8]{2,1,0} reduce(%mul.3204, %constant.1181), dimensions={2}, to_apply=%region_154.4597
  %convert_element_type.1501 = bf16[1,4096,8]{2,1,0} convert(%reduce.307)
  %mul.3205 = bf16[1,4096,8]{2,1,0} multiply(%scatter.154, %convert_element_type.1501)
  %mul.3206 = bf16[1,4096,8,1025]{3,2,1,0} broadcast(%mul.3205), dimensions={0,1,2}
  %mul.3207 = s32[1,8192,8]{2,1,0} multiply(%sharding_constraint.462, %reduce-window.12)
  %reshape.9902 = s32[1,4096,2,8]{3,2,1,0} reshape(%mul.3207)
  %reduce.308 = s32[1,4096,8]{2,1,0} reduce(%reshape.9902, %constant.1181), dimensions={2}, to_apply=%region_155.4607
  %mul.3212 = s32[1,4096,8]{2,1,0} multiply(%reduce.308, %reduce.307)
  %eq.1983 = s32[1,4096,8,1025]{3,2,1,0} broadcast(%mul.3212), dimensions={0,1,2}
  %iota.2104 = s32[1,4096,8,1025]{3,2,1,0} iota(), iota_dimension=3
  %eq.1984 = pred[1,4096,8,1025]{3,2,1,0} compare(%eq.1983, %iota.2104), direction=EQ
  %convert_element_type.1502 = s32[1,4096,8,1025]{3,2,1,0} convert(%eq.1984)
  %convert_element_type.1503 = bf16[1,4096,8,1025]{3,2,1,0} convert(%convert_element_type.1502)
  %mul.3213 = bf16[1,4096,8,1025]{3,2,1,0} multiply(%mul.3206, %convert_element_type.1503)
  %slice.233 = bf16[1,4096,8,1024]{3,2,1,0} slice(%mul.3213), slice={[0:1], [0:4096], [0:8], [1:1025]}
  %sharding_constraint.464 = bf16[1,4096,8,1024]{3,2,1,0} copy(%slice.233)
  %convert_element_type.1504 = pred[1,4096,8,1024]{3,2,1,0} compare(%slice.233, %broadcast.3431), direction=NE
  %sharding_constraint.465 = pred[1,4096,8,1024]{3,2,1,0} copy(%convert_element_type.1504)
  %dot_general.48 = bf16[1,4096,8,1024]{3,2,1,0} convert(%sharding_constraint.465)
  %dot.288 = bf16[1,8,1024,4096]{3,2,1,0} dot(%dot_general.48, %sharding_constraint.460), lhs_batch_dims={0}, lhs_contracting_dims={1}, rhs_batch_dims={0}, rhs_contracting_dims={1}
  %reshape.9905 = bf16[1,8,1,1024,4096]{4,3,2,1,0} reshape(%dot.288)
  %all-to-all.24 = bf16[1,8,1,1024,4096]{4,3,2,1,0} all-to-all(%reshape.9905), channel_id=143, replica_groups=[1,8]<=[8], dimensions={1}
  %transpose.41 = bf16[8,1,1,1024,4096]{4,3,2,0,1} transpose(%all-to-all.24), dimensions={1,0,2,3,4}
  %reshape.9906 = bf16[8,1,1024,4096]{3,2,1,0} reshape(%transpose.41)
  %transpose.42 = bf16[1,8,1024,4096]{3,2,0,1} transpose(%reshape.9906), dimensions={1,0,2,3}
  %sharding_constraint.466 = bf16[1,8,1024,4096]{3,2,0,1} copy(%transpose.42)
  %param.134 = bf16[1,4096,14336]{2,1,0} parameter(43), sharding={devices=[8,1,1]<=[8]}
  %sharding_constraint.467 = bf16[1,4096,14336]{2,1,0} copy(%param.134)
  %dot.289 = bf16[1,8,1024,14336]{3,2,1,0} dot(%sharding_constraint.466, %sharding_constraint.467), lhs_batch_dims={0}, lhs_contracting_dims={3}, rhs_batch_dims={0}, rhs_contracting_dims={1}
  %sharding_constraint.468 = bf16[1,8,1024,14336]{3,2,1,0} copy(%dot.289)
  %neg.170 = bf16[1,8,1024,14336]{3,2,1,0} negate(%sharding_constraint.468)
  %exp.151 = bf16[1,8,1024,14336]{3,2,1,0} exponential(%neg.170)
  %add.1572 = bf16[1,8,1024,14336]{3,2,1,0} add(%exp.151, %jit_silu_.0)
  %div.567 = bf16[1,8,1024,14336]{3,2,1,0} divide(%jit_silu_.0, %add.1572)
  %mul.3218 = bf16[1,8,1024,14336]{3,2,1,0} multiply(%sharding_constraint.468, %div.567)
  %param.135 = bf16[1,4096,14336]{2,1,0} parameter(44), sharding={devices=[8,1,1]<=[8]}
  %sharding_constraint.469 = bf16[1,4096,14336]{2,1,0} copy(%param.135)
  %dot.290 = bf16[1,8,1024,14336]{3,2,1,0} dot(%sharding_constraint.466, %sharding_constraint.469), lhs_batch_dims={0}, lhs_contracting_dims={3}, rhs_batch_dims={0}, rhs_contracting_dims={1}
  %sharding_constraint.470 = bf16[1,8,1024,14336]{3,2,1,0} copy(%dot.290)
  %mul.3219 = bf16[1,8,1024,14336]{3,2,1,0} multiply(%mul.3218, %sharding_constraint.470)
  %param.136 = bf16[1,14336,4096]{2,1,0} parameter(45), sharding={devices=[8,1,1]<=[8]}
  %sharding_constraint.471 = bf16[1,14336,4096]{2,1,0} copy(%param.136)
  %dot.291 = bf16[1,8,1024,4096]{3,2,1,0} dot(%mul.3219, %sharding_constraint.471), lhs_batch_dims={0}, lhs_contracting_dims={3}, rhs_batch_dims={0}, rhs_contracting_dims={1}
  %sharding_constraint.472 = bf16[1,8,1024,4096]{3,2,1,0} copy(%dot.291)
  %reshape.9909 = bf16[1,8,1,1024,4096]{4,3,2,1,0} reshape(%sharding_constraint.472)
  %all-to-all.25 = bf16[1,8,1,1024,4096]{4,3,2,1,0} all-to-all(%reshape.9909), channel_id=144, replica_groups=[1,8]<=[8], dimensions={1}
  %transpose.43 = bf16[8,1,1,1024,4096]{4,3,2,0,1} transpose(%all-to-all.25), dimensions={1,0,2,3,4}
  %reshape.9910 = bf16[8,1,1024,4096]{3,2,1,0} reshape(%transpose.43)
  %dot.292 = bf16[1,4096,4096]{2,1,0} dot(%sharding_constraint.464, %reshape.9910), lhs_batch_dims={0}, lhs_contracting_dims={3,2}, rhs_batch_dims={1}, rhs_contracting_dims={2,0}
  %sharding_constraint.473 = bf16[1,4096,4096]{2,1,0} copy(%dot.292)
  %add.1573 = bf16[1,4096,4096]{2,1,0} add(%sharding_constraint.473, %add.1562)
  %sharding_constraint.474 = bf16[1,4096,4096]{2,1,0} copy(%add.1573)
  %sharding_constraint.475 = bf16[1,4096,4096]{2,1,0} copy(%sharding_constraint.474)
  %convert_element_type.1505 = f32[1,4096,4096]{2,1,0} convert(%sharding_constraint.475)
  %square.29 = f32[1,4096,4096]{2,1,0} multiply(%convert_element_type.1505, %convert_element_type.1505)
  %reduce.309 = f32[1,4096]{1,0} reduce(%square.29, %constant.1360), dimensions={2}, to_apply=%region_156.4649
  %div.568 = f32[1,4096]{1,0} multiply(%reduce.309, %broadcast.3412)
  %add.1574 = f32[1,4096]{1,0} add(%div.568, %broadcast.3413)
  %rsqrt.90 = f32[1,4096]{1,0} rsqrt(%add.1574)
  %mul.3220 = f32[1,4096,4096]{2,1,0} broadcast(%rsqrt.90), dimensions={0,1}
  %mul.3221 = f32[1,4096,4096]{2,1,0} multiply(%convert_element_type.1505, %mul.3220)
  %convert_element_type.1506 = bf16[1,4096,4096]{2,1,0} convert(%mul.3221)
  %param.137 = bf16[4096]{0} parameter(57), sharding={replicated}
  %mul.3222 = bf16[1,4096,4096]{2,1,0} broadcast(%param.137), dimensions={2}
  %mul.3223 = bf16[1,4096,4096]{2,1,0} multiply(%convert_element_type.1506, %mul.3222)
  %sharding_constraint.476 = bf16[1,4096,4096]{2,1,0} copy(%mul.3223)
  %sharding_constraint.477 = bf16[1,4096,4096]{2,1,0} copy(%sharding_constraint.476)
  %param.138 = bf16[512,32,128]{2,1,0} parameter(60), sharding={devices=[8,1,1]<=[8]}
  %all-gather.92 = bf16[4096,32,128]{2,1,0} all-gather(%param.138), channel_id=145, replica_groups=[1,8]<=[8], dimensions={0}, use_global_device_ids=true
  %dot.293 = bf16[1,4096,32,128]{3,2,1,0} dot(%sharding_constraint.477, %all-gather.92), lhs_contracting_dims={2}, rhs_contracting_dims={0}
  %slice.234 = bf16[1,4096,32,64]{3,2,1,0} slice(%dot.293), slice={[0:1], [0:4096], [0:32], [0:64]}
  %mul.3227 = bf16[1,4096,32,64]{3,2,1,0} multiply(%slice.234, %mul.2435)
  %slice.235 = bf16[1,4096,32,64]{3,2,1,0} slice(%dot.293), slice={[0:1], [0:4096], [0:32], [64:128]}
  %mul.3230 = bf16[1,4096,32,64]{3,2,1,0} multiply(%slice.235, %mul.2438)
  %sub.132 = bf16[1,4096,32,64]{3,2,1,0} subtract(%mul.3227, %mul.3230)
  %mul.3233 = bf16[1,4096,32,64]{3,2,1,0} multiply(%slice.235, %mul.2435)
  %mul.3236 = bf16[1,4096,32,64]{3,2,1,0} multiply(%slice.234, %mul.2438)
  %add.1575 = bf16[1,4096,32,64]{3,2,1,0} add(%mul.3233, %mul.3236)
  %concatenate.107 = bf16[1,4096,32,128]{3,2,1,0} concatenate(%sub.132, %add.1575), dimensions={3}
  %sharding_constraint.478 = bf16[1,4096,32,128]{3,2,1,0} copy(%concatenate.107)
  %param.139 = bf16[512,8,128]{2,1,0} parameter(58), sharding={devices=[8,1,1]<=[8]}
  %all-gather.93 = bf16[4096,8,128]{2,1,0} all-gather(%param.139), channel_id=146, replica_groups=[1,8]<=[8], dimensions={0}, use_global_device_ids=true
  %dot.294 = bf16[1,4096,8,128]{3,2,1,0} dot(%sharding_constraint.477, %all-gather.93), lhs_contracting_dims={2}, rhs_contracting_dims={0}
  %slice.236 = bf16[1,4096,8,64]{3,2,1,0} slice(%dot.294), slice={[0:1], [0:4096], [0:8], [0:64]}
  %mul.3241 = bf16[1,4096,8,64]{3,2,1,0} multiply(%slice.236, %mul.2456)
  %slice.237 = bf16[1,4096,8,64]{3,2,1,0} slice(%dot.294), slice={[0:1], [0:4096], [0:8], [64:128]}
  %mul.3244 = bf16[1,4096,8,64]{3,2,1,0} multiply(%slice.237, %mul.2460)
  %sub.133 = bf16[1,4096,8,64]{3,2,1,0} subtract(%mul.3241, %mul.3244)
  %mul.3250 = bf16[1,4096,8,64]{3,2,1,0} multiply(%slice.237, %mul.2456)
  %mul.3253 = bf16[1,4096,8,64]{3,2,1,0} multiply(%slice.236, %mul.2460)
  %add.1576 = bf16[1,4096,8,64]{3,2,1,0} add(%mul.3250, %mul.3253)
  %concatenate.108 = bf16[1,4096,8,128]{3,2,1,0} concatenate(%sub.133, %add.1576), dimensions={3}
  %sharding_constraint.480 = bf16[1,4096,8,128]{3,2,1,0} copy(%concatenate.108)
  %param.140 = bf16[512,8,128]{2,1,0} parameter(61), sharding={devices=[8,1,1]<=[8]}
  %all-gather.94 = bf16[4096,8,128]{2,1,0} all-gather(%param.140), channel_id=147, replica_groups=[1,8]<=[8], dimensions={0}, use_global_device_ids=true
  %dot.295 = bf16[1,4096,8,128]{3,2,1,0} dot(%sharding_constraint.477, %all-gather.94), lhs_contracting_dims={2}, rhs_contracting_dims={0}
  %sharding_constraint.481 = bf16[1,4096,8,128]{3,2,1,0} copy(%dot.295)
  %te_fused_attn_forward_ffi.52 = (bf16[1,4096,32,128]{3,2,1,0}, f32[1,32,4096,1]{3,2,1,0}, u32[2,4]{1,0}, u8[48]{0}) custom-call(%sharding_constraint.478, %sharding_constraint.480, %sharding_constraint.481, %constant.1403, %dynamic-slice.38, /*index=5*/%concatenate.31, %concatenate.36, %constant.1416, %constant.1416, %constant.1416, /*index=10*/%constant.1416, %constant.1416, %constant.1416), custom_call_target="te_fused_attn_forward_ffi", operand_layout_constraints={bf16[1,4096,32,128]{3,2,1,0}, bf16[1,4096,8,128]{3,2,1,0}, bf16[1,4096,8,128]{3,2,1,0}, bf16[0]{0}, u32[2]{0}, s32[2]{0}, s32[2]{0}, f32[0]{0}, f32[0]{0}, f32[0]{0}, f32[0]{0}, f32[0]{0}, f32[0]{0}}, api_version=API_VERSION_TYPED_FFI, backend_config={attn_heads = 32 : i64, bias_batch = 0 : i64, bias_heads = 0 : i64, bias_type = 0 : i64, deterministic = false, dropout_probability = 0.000000e+00 : f64, input_batch = 1 : i64, is_training = true, kv_max_seqlen = 4096 : i64, mask_type = 3 : i64, max_segments_per_seq = 1 : i64, num_gqa_groups = 8 : i64, q_max_seqlen = 4096 : i64, qk_head_dim = 128 : i64, qkv_layout = 9 : i64, scaling_factor = 1.000000e+00 : f64, v_head_dim = 128 : i64, window_size_left = -1 : i64, window_size_right = -1 : i64}
  %get-tuple-element.389 = bf16[1,4096,32,128]{3,2,1,0} get-tuple-element(%te_fused_attn_forward_ffi.52), index=0
  %sharding_constraint.482 = bf16[1,4096,32,128]{3,2,1,0} copy(%get-tuple-element.389)
  %param.141 = bf16[32,128,512]{2,1,0} parameter(59), sharding={devices=[1,1,8]<=[8]}
  %all-gather.96 = bf16[32,128,4096]{2,1,0} all-gather(%param.141), channel_id=149, replica_groups=[1,8]<=[8], dimensions={2}, use_global_device_ids=true
  %dot.296 = bf16[1,4096,4096]{2,1,0} dot(%sharding_constraint.482, %all-gather.96), lhs_contracting_dims={2,3}, rhs_contracting_dims={0,1}
  %sharding_constraint.483 = bf16[1,4096,4096]{2,1,0} copy(%dot.296)
  %add.1577 = bf16[1,4096,4096]{2,1,0} add(%sharding_constraint.475, %sharding_constraint.483)
  %convert_element_type.1519 = f32[1,4096,4096]{2,1,0} convert(%add.1577)
  %square.30 = f32[1,4096,4096]{2,1,0} multiply(%convert_element_type.1519, %convert_element_type.1519)
  %reduce.313 = f32[1,4096]{1,0} reduce(%square.30, %constant.1360), dimensions={2}, to_apply=%region_160.4773
  %div.577 = f32[1,4096]{1,0} multiply(%reduce.313, %broadcast.3412)
  %add.1578 = f32[1,4096]{1,0} add(%div.577, %broadcast.3413)
  %rsqrt.91 = f32[1,4096]{1,0} rsqrt(%add.1578)
  %mul.3255 = f32[1,4096,4096]{2,1,0} broadcast(%rsqrt.91), dimensions={0,1}
  %mul.3256 = f32[1,4096,4096]{2,1,0} multiply(%convert_element_type.1519, %mul.3255)
  %convert_element_type.1520 = bf16[1,4096,4096]{2,1,0} convert(%mul.3256)
  %param.142 = bf16[4096]{0} parameter(56), sharding={replicated}
  %mul.3257 = bf16[1,4096,4096]{2,1,0} broadcast(%param.142), dimensions={2}
  %mul.3258 = bf16[1,4096,4096]{2,1,0} multiply(%convert_element_type.1520, %mul.3257)
  %sharding_constraint.484 = bf16[1,4096,4096]{2,1,0} copy(%mul.3258)
  %param.143 = bf16[512,8]{1,0} parameter(52), sharding={devices=[8,1]<=[8]}
  %all-gather.97 = bf16[4096,8]{1,0} all-gather(%param.143), channel_id=150, replica_groups=[1,8]<=[8], dimensions={0}, use_global_device_ids=true
  %dot.297 = bf16[1,4096,8]{2,1,0} dot(%sharding_constraint.484, %all-gather.97), lhs_contracting_dims={2}, rhs_contracting_dims={0}
  %sharding_constraint.485 = bf16[1,4096,8]{2,1,0} copy(%dot.297)
  %top_k.39 = bf16[4096,8]{1,0} reshape(%sharding_constraint.485)
  %top_k.40 = (bf16[4096,2]{1,0}, s32[4096,2]{1,0}) custom-call(%top_k.39), custom_call_target="TopK", called_computations={%compare_greater_than.13.4792.clone}
  %get-tuple-element.390 = bf16[4096,2]{1,0} get-tuple-element(%top_k.40), index=0
  %get-tuple-element.391 = s32[4096,2]{1,0} get-tuple-element(%top_k.40), index=1
  %add.1579 = s32[4096,2]{1,0} add(%get-tuple-element.391, %broadcast.3418)
  %sort.77 = (bf16[4096,2]{1,0}, s32[4096,2]{1,0}) sort(%get-tuple-element.390, %add.1579), dimensions={1}, is_stable=true, to_apply=%compare-value-and-index.13
  %get-tuple-element.393 = s32[4096,2]{1,0} get-tuple-element(%sort.77), index=1
  %slice.240 = s32[4096,2]{1,0} slice(%get-tuple-element.393), slice={[0:4096], [0:2]}
  %top_k.41 = s32[1,4096,2]{2,1,0} reshape(%slice.240)
  %lt.42 = pred[1,4096,2]{2,1,0} compare(%top_k.41, %broadcast.3419), direction=LT
  %add.1580 = s32[1,4096,2]{2,1,0} add(%top_k.41, %broadcast.3420)
  %select_n.321 = s32[1,4096,2]{2,1,0} select(%lt.42, %add.1580, %top_k.41)
  %broadcast_in_dim.559 = s32[1,4096,2,1]{3,2,1,0} reshape(%select_n.321)
  %concatenate.111 = s32[1,4096,2,3]{3,2,1,0} concatenate(%add.1356, %iota.1904, %broadcast_in_dim.559), dimensions={3}
  %subtract.41 = s32[1,4096,2,3]{3,2,1,0} subtract(%concatenate.111, %broadcast.3428)
  %scatter.155 = u32[1,4096,8]{2,1,0} scatter(%dynamic-slice.43, %subtract.41, %add.1401), update_window_dims={}, inserted_window_dims={0,1,2}, scatter_dims_to_operand_dims={0,1,2}, index_vector_dim=3, to_apply=%region_161.4820.clone
  %gather.13 = u32[1,4096,2]{2,1,0} gather(%scatter.155, %subtract.41), offset_dims={}, collapsed_slice_dims={0,1,2}, start_index_map={0,1,2}, index_vector_dim=3, slice_sizes={1,1,1}
  %eq.1988 = pred[1,4096,2]{2,1,0} compare(%add.1401, %gather.13), direction=EQ
  %get-tuple-element.392 = bf16[4096,2]{1,0} get-tuple-element(%sort.77), index=0
  %slice.239 = bf16[4096,2]{1,0} slice(%get-tuple-element.392), slice={[0:4096], [0:2]}
  %convert_element_type.1521 = f32[4096,2]{1,0} convert(%slice.239)
  %convert_element_type.1522 = f32[1,4096,2]{2,1,0} reshape(%convert_element_type.1521)
  %reduce.314 = f32[4096]{0} reduce(%convert_element_type.1521, %constant.1450), dimensions={1}, to_apply=%region_162.4829
  %sub.134 = f32[1,4096]{1,0} reshape(%reduce.314)
  %sub.135 = f32[1,4096,2]{2,1,0} broadcast(%sub.134), dimensions={0,1}
  %sub.136 = f32[1,4096,2]{2,1,0} subtract(%convert_element_type.1522, %sub.135)
  %exp.152 = f32[1,4096,2]{2,1,0} exponential(%sub.136)
  %reduce.315 = f32[1,4096]{1,0} reduce(%exp.152, %constant.1360), dimensions={2}, to_apply=%region_163.4838
  %div.578 = f32[1,4096,2]{2,1,0} broadcast(%reduce.315), dimensions={0,1}
  %div.579 = f32[1,4096,2]{2,1,0} divide(%exp.152, %div.578)
  %convert_element_type.1523 = bf16[1,4096,2]{2,1,0} convert(%div.579)
  %select_n.322 = bf16[1,4096,2]{2,1,0} select(%eq.1988, %convert_element_type.1523, %broadcast.3427)
  %scatter.156 = bf16[1,4096,8]{2,1,0} scatter(%broadcast.3379, %subtract.41, %select_n.322), update_window_dims={}, inserted_window_dims={0,1,2}, scatter_dims_to_operand_dims={0,1,2}, index_vector_dim=3, to_apply=%region_164.4847.clone
  %eq.1990 = s32[1,4096,2,8]{3,2,1,0} broadcast(%top_k.41), dimensions={0,1,2}
  %iota.2115 = s32[1,4096,2,8]{3,2,1,0} iota(), iota_dimension=3
  %eq.1991 = pred[1,4096,2,8]{3,2,1,0} compare(%eq.1990, %iota.2115), direction=EQ
  %convert_element_type.1524 = s32[1,4096,2,8]{3,2,1,0} convert(%eq.1991)
  %reshape.9950 = s32[1,8192,8]{2,1,0} reshape(%convert_element_type.1524)
  %sharding_constraint.486 = s32[1,8192,8]{2,1,0} copy(%reshape.9950)
  %reduce-window.13 = s32[1,8192,8]{2,1,0} reduce-window(%sharding_constraint.486, %constant.1181), window={size=1x8192x1 pad=0_0x8191_0x0_0}, to_apply=%region_165.4859
  %reshape.9952 = s32[1,4096,2,8]{3,2,1,0} reshape(%reduce-window.13)
  %sharding_constraint.487 = s32[1,4096,2,8]{3,2,1,0} copy(%reshape.9952)
  %le.28 = pred[1,4096,2,8]{3,2,1,0} compare(%sharding_constraint.487, %broadcast.3429), direction=LE
  %mul.3259 = s32[1,4096,2,8]{3,2,1,0} select(%le.28, %convert_element_type.1524, %broadcast.3430)
  %reduce.316 = s32[1,4096,8]{2,1,0} reduce(%mul.3259, %constant.1181), dimensions={2}, to_apply=%region_166.4868
  %convert_element_type.1525 = bf16[1,4096,8]{2,1,0} convert(%reduce.316)
  %mul.3261 = bf16[1,4096,8]{2,1,0} multiply(%scatter.156, %convert_element_type.1525)
  %mul.3262 = bf16[1,4096,8,1025]{3,2,1,0} broadcast(%mul.3261), dimensions={0,1,2}
  %mul.3263 = s32[1,8192,8]{2,1,0} multiply(%sharding_constraint.486, %reduce-window.13)
  %reshape.9953 = s32[1,4096,2,8]{3,2,1,0} reshape(%mul.3263)
  %reduce.317 = s32[1,4096,8]{2,1,0} reduce(%reshape.9953, %constant.1181), dimensions={2}, to_apply=%region_167.4878
  %mul.3264 = s32[1,4096,8]{2,1,0} multiply(%reduce.317, %reduce.316)
  %eq.1992 = s32[1,4096,8,1025]{3,2,1,0} broadcast(%mul.3264), dimensions={0,1,2}
  %iota.2116 = s32[1,4096,8,1025]{3,2,1,0} iota(), iota_dimension=3
  %eq.1993 = pred[1,4096,8,1025]{3,2,1,0} compare(%eq.1992, %iota.2116), direction=EQ
  %convert_element_type.1526 = s32[1,4096,8,1025]{3,2,1,0} convert(%eq.1993)
  %convert_element_type.1527 = bf16[1,4096,8,1025]{3,2,1,0} convert(%convert_element_type.1526)
  %mul.3265 = bf16[1,4096,8,1025]{3,2,1,0} multiply(%mul.3262, %convert_element_type.1527)
  %slice.241 = bf16[1,4096,8,1024]{3,2,1,0} slice(%mul.3265), slice={[0:1], [0:4096], [0:8], [1:1025]}
  %sharding_constraint.488 = bf16[1,4096,8,1024]{3,2,1,0} copy(%slice.241)
  %convert_element_type.1529 = pred[1,4096,8,1024]{3,2,1,0} compare(%slice.241, %broadcast.3431), direction=NE
  %sharding_constraint.489 = pred[1,4096,8,1024]{3,2,1,0} copy(%convert_element_type.1529)
  %dot_general.49 = bf16[1,4096,8,1024]{3,2,1,0} convert(%sharding_constraint.489)
  %dot.298 = bf16[1,8,1024,4096]{3,2,1,0} dot(%dot_general.49, %sharding_constraint.484), lhs_batch_dims={0}, lhs_contracting_dims={1}, rhs_batch_dims={0}, rhs_contracting_dims={1}
  %reshape.9956 = bf16[1,8,1,1024,4096]{4,3,2,1,0} reshape(%dot.298)
  %all-to-all.26 = bf16[1,8,1,1024,4096]{4,3,2,1,0} all-to-all(%reshape.9956), channel_id=154, replica_groups=[1,8]<=[8], dimensions={1}
  %transpose.44 = bf16[8,1,1,1024,4096]{4,3,2,0,1} transpose(%all-to-all.26), dimensions={1,0,2,3,4}
  %reshape.9957 = bf16[8,1,1024,4096]{3,2,1,0} reshape(%transpose.44)
  %transpose.45 = bf16[1,8,1024,4096]{3,2,0,1} transpose(%reshape.9957), dimensions={1,0,2,3}
  %sharding_constraint.490 = bf16[1,8,1024,4096]{3,2,0,1} copy(%transpose.45)
  %param.144 = bf16[1,4096,14336]{2,1,0} parameter(53), sharding={devices=[8,1,1]<=[8]}
  %sharding_constraint.491 = bf16[1,4096,14336]{2,1,0} copy(%param.144)
  %dot.299 = bf16[1,8,1024,14336]{3,2,1,0} dot(%sharding_constraint.490, %sharding_constraint.491), lhs_batch_dims={0}, lhs_contracting_dims={3}, rhs_batch_dims={0}, rhs_contracting_dims={1}
  %sharding_constraint.492 = bf16[1,8,1024,14336]{3,2,1,0} copy(%dot.299)
  %neg.171 = bf16[1,8,1024,14336]{3,2,1,0} negate(%sharding_constraint.492)
  %exp.153 = bf16[1,8,1024,14336]{3,2,1,0} exponential(%neg.171)
  %add.1586 = bf16[1,8,1024,14336]{3,2,1,0} add(%exp.153, %jit_silu_.0)
  %div.580 = bf16[1,8,1024,14336]{3,2,1,0} divide(%jit_silu_.0, %add.1586)
  %mul.3266 = bf16[1,8,1024,14336]{3,2,1,0} multiply(%sharding_constraint.492, %div.580)
  %param.145 = bf16[1,4096,14336]{2,1,0} parameter(54), sharding={devices=[8,1,1]<=[8]}
  %sharding_constraint.493 = bf16[1,4096,14336]{2,1,0} copy(%param.145)
  %dot.300 = bf16[1,8,1024,14336]{3,2,1,0} dot(%sharding_constraint.490, %sharding_constraint.493), lhs_batch_dims={0}, lhs_contracting_dims={3}, rhs_batch_dims={0}, rhs_contracting_dims={1}
  %sharding_constraint.494 = bf16[1,8,1024,14336]{3,2,1,0} copy(%dot.300)
  %mul.3267 = bf16[1,8,1024,14336]{3,2,1,0} multiply(%mul.3266, %sharding_constraint.494)
  %param.146 = bf16[1,14336,4096]{2,1,0} parameter(55), sharding={devices=[8,1,1]<=[8]}
  %sharding_constraint.495 = bf16[1,14336,4096]{2,1,0} copy(%param.146)
  %dot.301 = bf16[1,8,1024,4096]{3,2,1,0} dot(%mul.3267, %sharding_constraint.495), lhs_batch_dims={0}, lhs_contracting_dims={3}, rhs_batch_dims={0}, rhs_contracting_dims={1}
  %sharding_constraint.496 = bf16[1,8,1024,4096]{3,2,1,0} copy(%dot.301)
  %reshape.9961 = bf16[1,8,1,1024,4096]{4,3,2,1,0} reshape(%sharding_constraint.496)
  %all-to-all.27 = bf16[1,8,1,1024,4096]{4,3,2,1,0} all-to-all(%reshape.9961), channel_id=155, replica_groups=[1,8]<=[8], dimensions={1}
  %transpose.46 = bf16[8,1,1,1024,4096]{4,3,2,0,1} transpose(%all-to-all.27), dimensions={1,0,2,3,4}
  %reshape.9962 = bf16[8,1,1024,4096]{3,2,1,0} reshape(%transpose.46)
  %dot.302 = bf16[1,4096,4096]{2,1,0} dot(%sharding_constraint.488, %reshape.9962), lhs_batch_dims={0}, lhs_contracting_dims={3,2}, rhs_batch_dims={1}, rhs_contracting_dims={2,0}
  %sharding_constraint.497 = bf16[1,4096,4096]{2,1,0} copy(%dot.302)
  %add.1587 = bf16[1,4096,4096]{2,1,0} add(%sharding_constraint.497, %add.1577)
  %sharding_constraint.498 = bf16[1,4096,4096]{2,1,0} copy(%add.1587)
  %sharding_constraint.499 = bf16[1,4096,4096]{2,1,0} copy(%sharding_constraint.498)
  %convert_element_type.1530 = f32[1,4096,4096]{2,1,0} convert(%sharding_constraint.499)
  %square.31 = f32[1,4096,4096]{2,1,0} multiply(%convert_element_type.1530, %convert_element_type.1530)
  %reduce.318 = f32[1,4096]{1,0} reduce(%square.31, %constant.1360), dimensions={2}, to_apply=%region_168.4920
  %div.581 = f32[1,4096]{1,0} multiply(%reduce.318, %broadcast.3412)
  %add.1588 = f32[1,4096]{1,0} add(%div.581, %broadcast.3413)
  %rsqrt.92 = f32[1,4096]{1,0} rsqrt(%add.1588)
  %mul.3268 = f32[1,4096,4096]{2,1,0} broadcast(%rsqrt.92), dimensions={0,1}
  %mul.3269 = f32[1,4096,4096]{2,1,0} multiply(%convert_element_type.1530, %mul.3268)
  %convert_element_type.1531 = bf16[1,4096,4096]{2,1,0} convert(%mul.3269)
  %param.147 = bf16[4096]{0} parameter(67), sharding={replicated}
  %mul.3270 = bf16[1,4096,4096]{2,1,0} broadcast(%param.147), dimensions={2}
  %mul.3271 = bf16[1,4096,4096]{2,1,0} multiply(%convert_element_type.1531, %mul.3270)
  %sharding_constraint.500 = bf16[1,4096,4096]{2,1,0} copy(%mul.3271)
  %sharding_constraint.501 = bf16[1,4096,4096]{2,1,0} copy(%sharding_constraint.500)
  %param.148 = bf16[512,32,128]{2,1,0} parameter(70), sharding={devices=[8,1,1]<=[8]}
  %all-gather.99 = bf16[4096,32,128]{2,1,0} all-gather(%param.148), channel_id=156, replica_groups=[1,8]<=[8], dimensions={0}, use_global_device_ids=true
  %dot.303 = bf16[1,4096,32,128]{3,2,1,0} dot(%sharding_constraint.501, %all-gather.99), lhs_contracting_dims={2}, rhs_contracting_dims={0}
  %slice.242 = bf16[1,4096,32,64]{3,2,1,0} slice(%dot.303), slice={[0:1], [0:4096], [0:32], [0:64]}
  %mul.3275 = bf16[1,4096,32,64]{3,2,1,0} multiply(%slice.242, %mul.2435)
  %slice.243 = bf16[1,4096,32,64]{3,2,1,0} slice(%dot.303), slice={[0:1], [0:4096], [0:32], [64:128]}
  %mul.3279 = bf16[1,4096,32,64]{3,2,1,0} multiply(%slice.243, %mul.2438)
  %sub.137 = bf16[1,4096,32,64]{3,2,1,0} subtract(%mul.3275, %mul.3279)
  %mul.3283 = bf16[1,4096,32,64]{3,2,1,0} multiply(%slice.243, %mul.2435)
  %mul.3286 = bf16[1,4096,32,64]{3,2,1,0} multiply(%slice.242, %mul.2438)
  %add.1589 = bf16[1,4096,32,64]{3,2,1,0} add(%mul.3283, %mul.3286)
  %concatenate.115 = bf16[1,4096,32,128]{3,2,1,0} concatenate(%sub.137, %add.1589), dimensions={3}
  %sharding_constraint.502 = bf16[1,4096,32,128]{3,2,1,0} copy(%concatenate.115)
  %param.149 = bf16[512,8,128]{2,1,0} parameter(68), sharding={devices=[8,1,1]<=[8]}
  %all-gather.100 = bf16[4096,8,128]{2,1,0} all-gather(%param.149), channel_id=157, replica_groups=[1,8]<=[8], dimensions={0}, use_global_device_ids=true
  %dot.304 = bf16[1,4096,8,128]{3,2,1,0} dot(%sharding_constraint.501, %all-gather.100), lhs_contracting_dims={2}, rhs_contracting_dims={0}
  %slice.244 = bf16[1,4096,8,64]{3,2,1,0} slice(%dot.304), slice={[0:1], [0:4096], [0:8], [0:64]}
  %mul.3290 = bf16[1,4096,8,64]{3,2,1,0} multiply(%slice.244, %mul.2456)
  %slice.245 = bf16[1,4096,8,64]{3,2,1,0} slice(%dot.304), slice={[0:1], [0:4096], [0:8], [64:128]}
  %mul.3293 = bf16[1,4096,8,64]{3,2,1,0} multiply(%slice.245, %mul.2460)
  %sub.138 = bf16[1,4096,8,64]{3,2,1,0} subtract(%mul.3290, %mul.3293)
  %mul.3297 = bf16[1,4096,8,64]{3,2,1,0} multiply(%slice.245, %mul.2456)
  %mul.3305 = bf16[1,4096,8,64]{3,2,1,0} multiply(%slice.244, %mul.2460)
  %add.1590 = bf16[1,4096,8,64]{3,2,1,0} add(%mul.3297, %mul.3305)
  %concatenate.116 = bf16[1,4096,8,128]{3,2,1,0} concatenate(%sub.138, %add.1590), dimensions={3}
  %sharding_constraint.504 = bf16[1,4096,8,128]{3,2,1,0} copy(%concatenate.116)
  %param.150 = bf16[512,8,128]{2,1,0} parameter(71), sharding={devices=[8,1,1]<=[8]}
  %all-gather.101 = bf16[4096,8,128]{2,1,0} all-gather(%param.150), channel_id=158, replica_groups=[1,8]<=[8], dimensions={0}, use_global_device_ids=true
  %dot.305 = bf16[1,4096,8,128]{3,2,1,0} dot(%sharding_constraint.501, %all-gather.101), lhs_contracting_dims={2}, rhs_contracting_dims={0}
  %sharding_constraint.505 = bf16[1,4096,8,128]{3,2,1,0} copy(%dot.305)
  %te_fused_attn_forward_ffi.56 = (bf16[1,4096,32,128]{3,2,1,0}, f32[1,32,4096,1]{3,2,1,0}, u32[2,4]{1,0}, u8[48]{0}) custom-call(%sharding_constraint.502, %sharding_constraint.504, %sharding_constraint.505, %constant.1403, %dynamic-slice.38, /*index=5*/%concatenate.31, %concatenate.36, %constant.1416, %constant.1416, %constant.1416, /*index=10*/%constant.1416, %constant.1416, %constant.1416), custom_call_target="te_fused_attn_forward_ffi", operand_layout_constraints={bf16[1,4096,32,128]{3,2,1,0}, bf16[1,4096,8,128]{3,2,1,0}, bf16[1,4096,8,128]{3,2,1,0}, bf16[0]{0}, u32[2]{0}, s32[2]{0}, s32[2]{0}, f32[0]{0}, f32[0]{0}, f32[0]{0}, f32[0]{0}, f32[0]{0}, f32[0]{0}}, api_version=API_VERSION_TYPED_FFI, backend_config={attn_heads = 32 : i64, bias_batch = 0 : i64, bias_heads = 0 : i64, bias_type = 0 : i64, deterministic = false, dropout_probability = 0.000000e+00 : f64, input_batch = 1 : i64, is_training = true, kv_max_seqlen = 4096 : i64, mask_type = 3 : i64, max_segments_per_seq = 1 : i64, num_gqa_groups = 8 : i64, q_max_seqlen = 4096 : i64, qk_head_dim = 128 : i64, qkv_layout = 9 : i64, scaling_factor = 1.000000e+00 : f64, v_head_dim = 128 : i64, window_size_left = -1 : i64, window_size_right = -1 : i64}
  %get-tuple-element.399 = bf16[1,4096,32,128]{3,2,1,0} get-tuple-element(%te_fused_attn_forward_ffi.56), index=0
  %sharding_constraint.506 = bf16[1,4096,32,128]{3,2,1,0} copy(%get-tuple-element.399)
  %param.151 = bf16[32,128,512]{2,1,0} parameter(69), sharding={devices=[1,1,8]<=[8]}
  %all-gather.103 = bf16[32,128,4096]{2,1,0} all-gather(%param.151), channel_id=160, replica_groups=[1,8]<=[8], dimensions={2}, use_global_device_ids=true
  %dot.306 = bf16[1,4096,4096]{2,1,0} dot(%sharding_constraint.506, %all-gather.103), lhs_contracting_dims={2,3}, rhs_contracting_dims={0,1}
  %sharding_constraint.507 = bf16[1,4096,4096]{2,1,0} copy(%dot.306)
  %add.1591 = bf16[1,4096,4096]{2,1,0} add(%sharding_constraint.499, %sharding_constraint.507)
  %convert_element_type.1543 = f32[1,4096,4096]{2,1,0} convert(%add.1591)
  %square.32 = f32[1,4096,4096]{2,1,0} multiply(%convert_element_type.1543, %convert_element_type.1543)
  %reduce.322 = f32[1,4096]{1,0} reduce(%square.32, %constant.1360), dimensions={2}, to_apply=%region_172.5044
  %div.590 = f32[1,4096]{1,0} multiply(%reduce.322, %broadcast.3412)
  %add.1592 = f32[1,4096]{1,0} add(%div.590, %broadcast.3413)
  %rsqrt.93 = f32[1,4096]{1,0} rsqrt(%add.1592)
  %mul.3306 = f32[1,4096,4096]{2,1,0} broadcast(%rsqrt.93), dimensions={0,1}
  %mul.3307 = f32[1,4096,4096]{2,1,0} multiply(%convert_element_type.1543, %mul.3306)
  %convert_element_type.1544 = bf16[1,4096,4096]{2,1,0} convert(%mul.3307)
  %param.152 = bf16[4096]{0} parameter(66), sharding={replicated}
  %mul.3308 = bf16[1,4096,4096]{2,1,0} broadcast(%param.152), dimensions={2}
  %mul.3310 = bf16[1,4096,4096]{2,1,0} multiply(%convert_element_type.1544, %mul.3308)
  %sharding_constraint.508 = bf16[1,4096,4096]{2,1,0} copy(%mul.3310)
  %param.153 = bf16[512,8]{1,0} parameter(62), sharding={devices=[8,1]<=[8]}
  %all-gather.104 = bf16[4096,8]{1,0} all-gather(%param.153), channel_id=161, replica_groups=[1,8]<=[8], dimensions={0}, use_global_device_ids=true
  %dot.307 = bf16[1,4096,8]{2,1,0} dot(%sharding_constraint.508, %all-gather.104), lhs_contracting_dims={2}, rhs_contracting_dims={0}
  %sharding_constraint.509 = bf16[1,4096,8]{2,1,0} copy(%dot.307)
  %top_k.42 = bf16[4096,8]{1,0} reshape(%sharding_constraint.509)
  %top_k.43 = (bf16[4096,2]{1,0}, s32[4096,2]{1,0}) custom-call(%top_k.42), custom_call_target="TopK", called_computations={%compare_greater_than.14.5063.clone}
  %get-tuple-element.400 = bf16[4096,2]{1,0} get-tuple-element(%top_k.43), index=0
  %get-tuple-element.401 = s32[4096,2]{1,0} get-tuple-element(%top_k.43), index=1
  %add.1593 = s32[4096,2]{1,0} add(%get-tuple-element.401, %broadcast.3418)
  %sort.78 = (bf16[4096,2]{1,0}, s32[4096,2]{1,0}) sort(%get-tuple-element.400, %add.1593), dimensions={1}, is_stable=true, to_apply=%compare-value-and-index.14
  %get-tuple-element.403 = s32[4096,2]{1,0} get-tuple-element(%sort.78), index=1
  %slice.248 = s32[4096,2]{1,0} slice(%get-tuple-element.403), slice={[0:4096], [0:2]}
  %top_k.44 = s32[1,4096,2]{2,1,0} reshape(%slice.248)
  %lt.45 = pred[1,4096,2]{2,1,0} compare(%top_k.44, %broadcast.3419), direction=LT
  %add.1595 = s32[1,4096,2]{2,1,0} add(%top_k.44, %broadcast.3420)
  %select_n.326 = s32[1,4096,2]{2,1,0} select(%lt.45, %add.1595, %top_k.44)
  %broadcast_in_dim.562 = s32[1,4096,2,1]{3,2,1,0} reshape(%select_n.326)
  %concatenate.119 = s32[1,4096,2,3]{3,2,1,0} concatenate(%add.1356, %iota.1902, %broadcast_in_dim.562), dimensions={3}
  %subtract.44 = s32[1,4096,2,3]{3,2,1,0} subtract(%concatenate.119, %broadcast.3428)
  %scatter.157 = u32[1,4096,8]{2,1,0} scatter(%dynamic-slice.43, %subtract.44, %add.1401), update_window_dims={}, inserted_window_dims={0,1,2}, scatter_dims_to_operand_dims={0,1,2}, index_vector_dim=3, to_apply=%region_173.5091.clone
  %gather.14 = u32[1,4096,2]{2,1,0} gather(%scatter.157, %subtract.44), offset_dims={}, collapsed_slice_dims={0,1,2}, start_index_map={0,1,2}, index_vector_dim=3, slice_sizes={1,1,1}
  %eq.1997 = pred[1,4096,2]{2,1,0} compare(%add.1401, %gather.14), direction=EQ
  %get-tuple-element.402 = bf16[4096,2]{1,0} get-tuple-element(%sort.78), index=0
  %slice.247 = bf16[4096,2]{1,0} slice(%get-tuple-element.402), slice={[0:4096], [0:2]}
  %convert_element_type.1545 = f32[4096,2]{1,0} convert(%slice.247)
  %convert_element_type.1546 = f32[1,4096,2]{2,1,0} reshape(%convert_element_type.1545)
  %reduce.323 = f32[4096]{0} reduce(%convert_element_type.1545, %constant.1450), dimensions={1}, to_apply=%region_174.5100
  %sub.139 = f32[1,4096]{1,0} reshape(%reduce.323)
  %sub.140 = f32[1,4096,2]{2,1,0} broadcast(%sub.139), dimensions={0,1}
  %sub.141 = f32[1,4096,2]{2,1,0} subtract(%convert_element_type.1546, %sub.140)
  %exp.154 = f32[1,4096,2]{2,1,0} exponential(%sub.141)
  %reduce.324 = f32[1,4096]{1,0} reduce(%exp.154, %constant.1360), dimensions={2}, to_apply=%region_175.5109
  %div.591 = f32[1,4096,2]{2,1,0} broadcast(%reduce.324), dimensions={0,1}
  %div.592 = f32[1,4096,2]{2,1,0} divide(%exp.154, %div.591)
  %convert_element_type.1548 = bf16[1,4096,2]{2,1,0} convert(%div.592)
  %select_n.327 = bf16[1,4096,2]{2,1,0} select(%eq.1997, %convert_element_type.1548, %broadcast.3427)
  %scatter.158 = bf16[1,4096,8]{2,1,0} scatter(%broadcast.3379, %subtract.44, %select_n.327), update_window_dims={}, inserted_window_dims={0,1,2}, scatter_dims_to_operand_dims={0,1,2}, index_vector_dim=3, to_apply=%region_176.5118.clone
  %eq.1999 = s32[1,4096,2,8]{3,2,1,0} broadcast(%top_k.44), dimensions={0,1,2}
  %iota.2127 = s32[1,4096,2,8]{3,2,1,0} iota(), iota_dimension=3
  %eq.2000 = pred[1,4096,2,8]{3,2,1,0} compare(%eq.1999, %iota.2127), direction=EQ
  %convert_element_type.1549 = s32[1,4096,2,8]{3,2,1,0} convert(%eq.2000)
  %reshape.10005 = s32[1,8192,8]{2,1,0} reshape(%convert_element_type.1549)
  %sharding_constraint.510 = s32[1,8192,8]{2,1,0} copy(%reshape.10005)
  %reduce-window.14 = s32[1,8192,8]{2,1,0} reduce-window(%sharding_constraint.510, %constant.1181), window={size=1x8192x1 pad=0_0x8191_0x0_0}, to_apply=%region_177.5130
  %reshape.10007 = s32[1,4096,2,8]{3,2,1,0} reshape(%reduce-window.14)
  %sharding_constraint.511 = s32[1,4096,2,8]{3,2,1,0} copy(%reshape.10007)
  %le.30 = pred[1,4096,2,8]{3,2,1,0} compare(%sharding_constraint.511, %broadcast.3429), direction=LE
  %mul.3312 = s32[1,4096,2,8]{3,2,1,0} select(%le.30, %convert_element_type.1549, %broadcast.3430)
  %reduce.325 = s32[1,4096,8]{2,1,0} reduce(%mul.3312, %constant.1181), dimensions={2}, to_apply=%region_178.5139
  %convert_element_type.1551 = bf16[1,4096,8]{2,1,0} convert(%reduce.325)
  %mul.3317 = bf16[1,4096,8]{2,1,0} multiply(%scatter.158, %convert_element_type.1551)
  %mul.3318 = bf16[1,4096,8,1025]{3,2,1,0} broadcast(%mul.3317), dimensions={0,1,2}
  %mul.3322 = s32[1,8192,8]{2,1,0} multiply(%sharding_constraint.510, %reduce-window.14)
  %reshape.10008 = s32[1,4096,2,8]{3,2,1,0} reshape(%mul.3322)
  %reduce.326 = s32[1,4096,8]{2,1,0} reduce(%reshape.10008, %constant.1181), dimensions={2}, to_apply=%region_179.5149
  %mul.3323 = s32[1,4096,8]{2,1,0} multiply(%reduce.326, %reduce.325)
  %eq.2001 = s32[1,4096,8,1025]{3,2,1,0} broadcast(%mul.3323), dimensions={0,1,2}
  %iota.2128 = s32[1,4096,8,1025]{3,2,1,0} iota(), iota_dimension=3
  %eq.2002 = pred[1,4096,8,1025]{3,2,1,0} compare(%eq.2001, %iota.2128), direction=EQ
  %convert_element_type.1552 = s32[1,4096,8,1025]{3,2,1,0} convert(%eq.2002)
  %convert_element_type.1553 = bf16[1,4096,8,1025]{3,2,1,0} convert(%convert_element_type.1552)
  %mul.3324 = bf16[1,4096,8,1025]{3,2,1,0} multiply(%mul.3318, %convert_element_type.1553)
  %slice.249 = bf16[1,4096,8,1024]{3,2,1,0} slice(%mul.3324), slice={[0:1], [0:4096], [0:8], [1:1025]}
  %sharding_constraint.512 = bf16[1,4096,8,1024]{3,2,1,0} copy(%slice.249)
  %convert_element_type.1554 = pred[1,4096,8,1024]{3,2,1,0} compare(%slice.249, %broadcast.3431), direction=NE
  %sharding_constraint.513 = pred[1,4096,8,1024]{3,2,1,0} copy(%convert_element_type.1554)
  %dot_general.50 = bf16[1,4096,8,1024]{3,2,1,0} convert(%sharding_constraint.513)
  %dot.308 = bf16[1,8,1024,4096]{3,2,1,0} dot(%dot_general.50, %sharding_constraint.508), lhs_batch_dims={0}, lhs_contracting_dims={1}, rhs_batch_dims={0}, rhs_contracting_dims={1}
  %reshape.10011 = bf16[1,8,1,1024,4096]{4,3,2,1,0} reshape(%dot.308)
  %all-to-all.28 = bf16[1,8,1,1024,4096]{4,3,2,1,0} all-to-all(%reshape.10011), channel_id=165, replica_groups=[1,8]<=[8], dimensions={1}
  %transpose.47 = bf16[8,1,1,1024,4096]{4,3,2,0,1} transpose(%all-to-all.28), dimensions={1,0,2,3,4}
  %reshape.10012 = bf16[8,1,1024,4096]{3,2,1,0} reshape(%transpose.47)
  %transpose.48 = bf16[1,8,1024,4096]{3,2,0,1} transpose(%reshape.10012), dimensions={1,0,2,3}
  %sharding_constraint.514 = bf16[1,8,1024,4096]{3,2,0,1} copy(%transpose.48)
  %param.154 = bf16[1,4096,14336]{2,1,0} parameter(63), sharding={devices=[8,1,1]<=[8]}
  %sharding_constraint.515 = bf16[1,4096,14336]{2,1,0} copy(%param.154)
  %dot.309 = bf16[1,8,1024,14336]{3,2,1,0} dot(%sharding_constraint.514, %sharding_constraint.515), lhs_batch_dims={0}, lhs_contracting_dims={3}, rhs_batch_dims={0}, rhs_contracting_dims={1}
  %sharding_constraint.516 = bf16[1,8,1024,14336]{3,2,1,0} copy(%dot.309)
  %neg.172 = bf16[1,8,1024,14336]{3,2,1,0} negate(%sharding_constraint.516)
  %exp.155 = bf16[1,8,1024,14336]{3,2,1,0} exponential(%neg.172)
  %add.1600 = bf16[1,8,1024,14336]{3,2,1,0} add(%exp.155, %jit_silu_.0)
  %div.593 = bf16[1,8,1024,14336]{3,2,1,0} divide(%jit_silu_.0, %add.1600)
  %mul.3328 = bf16[1,8,1024,14336]{3,2,1,0} multiply(%sharding_constraint.516, %div.593)
  %param.155 = bf16[1,4096,14336]{2,1,0} parameter(64), sharding={devices=[8,1,1]<=[8]}
  %sharding_constraint.517 = bf16[1,4096,14336]{2,1,0} copy(%param.155)
  %dot.310 = bf16[1,8,1024,14336]{3,2,1,0} dot(%sharding_constraint.514, %sharding_constraint.517), lhs_batch_dims={0}, lhs_contracting_dims={3}, rhs_batch_dims={0}, rhs_contracting_dims={1}
  %sharding_constraint.518 = bf16[1,8,1024,14336]{3,2,1,0} copy(%dot.310)
  %mul.3335 = bf16[1,8,1024,14336]{3,2,1,0} multiply(%mul.3328, %sharding_constraint.518)
  %param.156 = bf16[1,14336,4096]{2,1,0} parameter(65), sharding={devices=[8,1,1]<=[8]}
  %sharding_constraint.519 = bf16[1,14336,4096]{2,1,0} copy(%param.156)
  %dot.311 = bf16[1,8,1024,4096]{3,2,1,0} dot(%mul.3335, %sharding_constraint.519), lhs_batch_dims={0}, lhs_contracting_dims={3}, rhs_batch_dims={0}, rhs_contracting_dims={1}
  %sharding_constraint.520 = bf16[1,8,1024,4096]{3,2,1,0} copy(%dot.311)
  %reshape.10015 = bf16[1,8,1,1024,4096]{4,3,2,1,0} reshape(%sharding_constraint.520)
  %all-to-all.29 = bf16[1,8,1,1024,4096]{4,3,2,1,0} all-to-all(%reshape.10015), channel_id=166, replica_groups=[1,8]<=[8], dimensions={1}
  %transpose.49 = bf16[8,1,1,1024,4096]{4,3,2,0,1} transpose(%all-to-all.29), dimensions={1,0,2,3,4}
  %reshape.10016 = bf16[8,1,1024,4096]{3,2,1,0} reshape(%transpose.49)
  %dot.312 = bf16[1,4096,4096]{2,1,0} dot(%sharding_constraint.512, %reshape.10016), lhs_batch_dims={0}, lhs_contracting_dims={3,2}, rhs_batch_dims={1}, rhs_contracting_dims={2,0}
  %sharding_constraint.521 = bf16[1,4096,4096]{2,1,0} copy(%dot.312)
  %add.1601 = bf16[1,4096,4096]{2,1,0} add(%sharding_constraint.521, %add.1591)
  %sharding_constraint.522 = bf16[1,4096,4096]{2,1,0} copy(%add.1601)
  %sharding_constraint.523 = bf16[1,4096,4096]{2,1,0} copy(%sharding_constraint.522)
  %convert_element_type.1555 = f32[1,4096,4096]{2,1,0} convert(%sharding_constraint.523)
  %square.33 = f32[1,4096,4096]{2,1,0} multiply(%convert_element_type.1555, %convert_element_type.1555)
  %reduce.327 = f32[1,4096]{1,0} reduce(%square.33, %constant.1360), dimensions={2}, to_apply=%region_180.5191
  %div.594 = f32[1,4096]{1,0} multiply(%reduce.327, %broadcast.3412)
  %add.1602 = f32[1,4096]{1,0} add(%div.594, %broadcast.3413)
  %rsqrt.94 = f32[1,4096]{1,0} rsqrt(%add.1602)
  %mul.3336 = f32[1,4096,4096]{2,1,0} broadcast(%rsqrt.94), dimensions={0,1}
  %mul.3337 = f32[1,4096,4096]{2,1,0} multiply(%convert_element_type.1555, %mul.3336)
  %convert_element_type.1556 = bf16[1,4096,4096]{2,1,0} convert(%mul.3337)
  %param.157 = bf16[4096]{0} parameter(77), sharding={replicated}
  %mul.3338 = bf16[1,4096,4096]{2,1,0} broadcast(%param.157), dimensions={2}
  %mul.3339 = bf16[1,4096,4096]{2,1,0} multiply(%convert_element_type.1556, %mul.3338)
  %sharding_constraint.524 = bf16[1,4096,4096]{2,1,0} copy(%mul.3339)
  %sharding_constraint.525 = bf16[1,4096,4096]{2,1,0} copy(%sharding_constraint.524)
  %param.158 = bf16[512,32,128]{2,1,0} parameter(80), sharding={devices=[8,1,1]<=[8]}
  %all-gather.106 = bf16[4096,32,128]{2,1,0} all-gather(%param.158), channel_id=167, replica_groups=[1,8]<=[8], dimensions={0}, use_global_device_ids=true
  %dot.313 = bf16[1,4096,32,128]{3,2,1,0} dot(%sharding_constraint.525, %all-gather.106), lhs_contracting_dims={2}, rhs_contracting_dims={0}
  %slice.250 = bf16[1,4096,32,64]{3,2,1,0} slice(%dot.313), slice={[0:1], [0:4096], [0:32], [0:64]}
  %mul.3343 = bf16[1,4096,32,64]{3,2,1,0} multiply(%slice.250, %mul.2435)
  %slice.251 = bf16[1,4096,32,64]{3,2,1,0} slice(%dot.313), slice={[0:1], [0:4096], [0:32], [64:128]}
  %mul.3347 = bf16[1,4096,32,64]{3,2,1,0} multiply(%slice.251, %mul.2438)
  %sub.142 = bf16[1,4096,32,64]{3,2,1,0} subtract(%mul.3343, %mul.3347)
  %mul.3350 = bf16[1,4096,32,64]{3,2,1,0} multiply(%slice.251, %mul.2435)
  %mul.3357 = bf16[1,4096,32,64]{3,2,1,0} multiply(%slice.250, %mul.2438)
  %add.1603 = bf16[1,4096,32,64]{3,2,1,0} add(%mul.3350, %mul.3357)
  %concatenate.123 = bf16[1,4096,32,128]{3,2,1,0} concatenate(%sub.142, %add.1603), dimensions={3}
  %sharding_constraint.526 = bf16[1,4096,32,128]{3,2,1,0} copy(%concatenate.123)
  %param.159 = bf16[512,8,128]{2,1,0} parameter(78), sharding={devices=[8,1,1]<=[8]}
  %all-gather.107 = bf16[4096,8,128]{2,1,0} all-gather(%param.159), channel_id=168, replica_groups=[1,8]<=[8], dimensions={0}, use_global_device_ids=true
  %dot.314 = bf16[1,4096,8,128]{3,2,1,0} dot(%sharding_constraint.525, %all-gather.107), lhs_contracting_dims={2}, rhs_contracting_dims={0}
  %slice.252 = bf16[1,4096,8,64]{3,2,1,0} slice(%dot.314), slice={[0:1], [0:4096], [0:8], [0:64]}
  %mul.3372 = bf16[1,4096,8,64]{3,2,1,0} multiply(%slice.252, %mul.2456)
  %slice.253 = bf16[1,4096,8,64]{3,2,1,0} slice(%dot.314), slice={[0:1], [0:4096], [0:8], [64:128]}
  %mul.3375 = bf16[1,4096,8,64]{3,2,1,0} multiply(%slice.253, %mul.2460)
  %sub.143 = bf16[1,4096,8,64]{3,2,1,0} subtract(%mul.3372, %mul.3375)
  %mul.3378 = bf16[1,4096,8,64]{3,2,1,0} multiply(%slice.253, %mul.2456)
  %mul.3381 = bf16[1,4096,8,64]{3,2,1,0} multiply(%slice.252, %mul.2460)
  %add.1604 = bf16[1,4096,8,64]{3,2,1,0} add(%mul.3378, %mul.3381)
  %concatenate.124 = bf16[1,4096,8,128]{3,2,1,0} concatenate(%sub.143, %add.1604), dimensions={3}
  %sharding_constraint.528 = bf16[1,4096,8,128]{3,2,1,0} copy(%concatenate.124)
  %param.160 = bf16[512,8,128]{2,1,0} parameter(81), sharding={devices=[8,1,1]<=[8]}
  %all-gather.108 = bf16[4096,8,128]{2,1,0} all-gather(%param.160), channel_id=169, replica_groups=[1,8]<=[8], dimensions={0}, use_global_device_ids=true
  %dot.315 = bf16[1,4096,8,128]{3,2,1,0} dot(%sharding_constraint.525, %all-gather.108), lhs_contracting_dims={2}, rhs_contracting_dims={0}
  %sharding_constraint.529 = bf16[1,4096,8,128]{3,2,1,0} copy(%dot.315)
  %te_fused_attn_forward_ffi.60 = (bf16[1,4096,32,128]{3,2,1,0}, f32[1,32,4096,1]{3,2,1,0}, u32[2,4]{1,0}, u8[48]{0}) custom-call(%sharding_constraint.526, %sharding_constraint.528, %sharding_constraint.529, %constant.1403, %dynamic-slice.38, /*index=5*/%concatenate.31, %concatenate.36, %constant.1416, %constant.1416, %constant.1416, /*index=10*/%constant.1416, %constant.1416, %constant.1416), custom_call_target="te_fused_attn_forward_ffi", operand_layout_constraints={bf16[1,4096,32,128]{3,2,1,0}, bf16[1,4096,8,128]{3,2,1,0}, bf16[1,4096,8,128]{3,2,1,0}, bf16[0]{0}, u32[2]{0}, s32[2]{0}, s32[2]{0}, f32[0]{0}, f32[0]{0}, f32[0]{0}, f32[0]{0}, f32[0]{0}, f32[0]{0}}, api_version=API_VERSION_TYPED_FFI, backend_config={attn_heads = 32 : i64, bias_batch = 0 : i64, bias_heads = 0 : i64, bias_type = 0 : i64, deterministic = false, dropout_probability = 0.000000e+00 : f64, input_batch = 1 : i64, is_training = true, kv_max_seqlen = 4096 : i64, mask_type = 3 : i64, max_segments_per_seq = 1 : i64, num_gqa_groups = 8 : i64, q_max_seqlen = 4096 : i64, qk_head_dim = 128 : i64, qkv_layout = 9 : i64, scaling_factor = 1.000000e+00 : f64, v_head_dim = 128 : i64, window_size_left = -1 : i64, window_size_right = -1 : i64}
  %get-tuple-element.409 = bf16[1,4096,32,128]{3,2,1,0} get-tuple-element(%te_fused_attn_forward_ffi.60), index=0
  %sharding_constraint.530 = bf16[1,4096,32,128]{3,2,1,0} copy(%get-tuple-element.409)
  %param.161 = bf16[32,128,512]{2,1,0} parameter(79), sharding={devices=[1,1,8]<=[8]}
  %all-gather.110 = bf16[32,128,4096]{2,1,0} all-gather(%param.161), channel_id=171, replica_groups=[1,8]<=[8], dimensions={2}, use_global_device_ids=true
  %dot.316 = bf16[1,4096,4096]{2,1,0} dot(%sharding_constraint.530, %all-gather.110), lhs_contracting_dims={2,3}, rhs_contracting_dims={0,1}
  %sharding_constraint.531 = bf16[1,4096,4096]{2,1,0} copy(%dot.316)
  %add.1605 = bf16[1,4096,4096]{2,1,0} add(%sharding_constraint.523, %sharding_constraint.531)
  %convert_element_type.1569 = f32[1,4096,4096]{2,1,0} convert(%add.1605)
  %square.34 = f32[1,4096,4096]{2,1,0} multiply(%convert_element_type.1569, %convert_element_type.1569)
  %reduce.331 = f32[1,4096]{1,0} reduce(%square.34, %constant.1360), dimensions={2}, to_apply=%region_184.5315
  %div.603 = f32[1,4096]{1,0} multiply(%reduce.331, %broadcast.3412)
  %add.1606 = f32[1,4096]{1,0} add(%div.603, %broadcast.3413)
  %rsqrt.95 = f32[1,4096]{1,0} rsqrt(%add.1606)
  %mul.3382 = f32[1,4096,4096]{2,1,0} broadcast(%rsqrt.95), dimensions={0,1}
  %mul.3383 = f32[1,4096,4096]{2,1,0} multiply(%convert_element_type.1569, %mul.3382)
  %convert_element_type.1570 = bf16[1,4096,4096]{2,1,0} convert(%mul.3383)
  %param.162 = bf16[4096]{0} parameter(76), sharding={replicated}
  %mul.3384 = bf16[1,4096,4096]{2,1,0} broadcast(%param.162), dimensions={2}
  %mul.3385 = bf16[1,4096,4096]{2,1,0} multiply(%convert_element_type.1570, %mul.3384)
  %sharding_constraint.532 = bf16[1,4096,4096]{2,1,0} copy(%mul.3385)
  %param.163 = bf16[512,8]{1,0} parameter(72), sharding={devices=[8,1]<=[8]}
  %all-gather.111 = bf16[4096,8]{1,0} all-gather(%param.163), channel_id=172, replica_groups=[1,8]<=[8], dimensions={0}, use_global_device_ids=true
  %dot.317 = bf16[1,4096,8]{2,1,0} dot(%sharding_constraint.532, %all-gather.111), lhs_contracting_dims={2}, rhs_contracting_dims={0}
  %sharding_constraint.533 = bf16[1,4096,8]{2,1,0} copy(%dot.317)
  %top_k.45 = bf16[4096,8]{1,0} reshape(%sharding_constraint.533)
  %top_k.46 = (bf16[4096,2]{1,0}, s32[4096,2]{1,0}) custom-call(%top_k.45), custom_call_target="TopK", called_computations={%compare_greater_than.15.5334.clone}
  %get-tuple-element.410 = bf16[4096,2]{1,0} get-tuple-element(%top_k.46), index=0
  %get-tuple-element.411 = s32[4096,2]{1,0} get-tuple-element(%top_k.46), index=1
  %add.1607 = s32[4096,2]{1,0} add(%get-tuple-element.411, %broadcast.3418)
  %sort.79 = (bf16[4096,2]{1,0}, s32[4096,2]{1,0}) sort(%get-tuple-element.410, %add.1607), dimensions={1}, is_stable=true, to_apply=%compare-value-and-index.15
  %get-tuple-element.413 = s32[4096,2]{1,0} get-tuple-element(%sort.79), index=1
  %slice.256 = s32[4096,2]{1,0} slice(%get-tuple-element.413), slice={[0:4096], [0:2]}
  %top_k.47 = s32[1,4096,2]{2,1,0} reshape(%slice.256)
  %lt.48 = pred[1,4096,2]{2,1,0} compare(%top_k.47, %broadcast.3419), direction=LT
  %add.1608 = s32[1,4096,2]{2,1,0} add(%top_k.47, %broadcast.3420)
  %select_n.331 = s32[1,4096,2]{2,1,0} select(%lt.48, %add.1608, %top_k.47)
  %broadcast_in_dim.565 = s32[1,4096,2,1]{3,2,1,0} reshape(%select_n.331)
  %concatenate.127 = s32[1,4096,2,3]{3,2,1,0} concatenate(%add.1356, %iota.1900, %broadcast_in_dim.565), dimensions={3}
  %subtract.47 = s32[1,4096,2,3]{3,2,1,0} subtract(%concatenate.127, %broadcast.3428)
  %scatter.159 = u32[1,4096,8]{2,1,0} scatter(%dynamic-slice.43, %subtract.47, %add.1401), update_window_dims={}, inserted_window_dims={0,1,2}, scatter_dims_to_operand_dims={0,1,2}, index_vector_dim=3, to_apply=%region_185.5362.clone
  %gather.15 = u32[1,4096,2]{2,1,0} gather(%scatter.159, %subtract.47), offset_dims={}, collapsed_slice_dims={0,1,2}, start_index_map={0,1,2}, index_vector_dim=3, slice_sizes={1,1,1}
  %eq.2006 = pred[1,4096,2]{2,1,0} compare(%add.1401, %gather.15), direction=EQ
  %get-tuple-element.412 = bf16[4096,2]{1,0} get-tuple-element(%sort.79), index=0
  %slice.255 = bf16[4096,2]{1,0} slice(%get-tuple-element.412), slice={[0:4096], [0:2]}
  %convert_element_type.1571 = f32[4096,2]{1,0} convert(%slice.255)
  %convert_element_type.1574 = f32[1,4096,2]{2,1,0} reshape(%convert_element_type.1571)
  %reduce.332 = f32[4096]{0} reduce(%convert_element_type.1571, %constant.1450), dimensions={1}, to_apply=%region_186.5371
  %sub.144 = f32[1,4096]{1,0} reshape(%reduce.332)
  %sub.145 = f32[1,4096,2]{2,1,0} broadcast(%sub.144), dimensions={0,1}
  %sub.146 = f32[1,4096,2]{2,1,0} subtract(%convert_element_type.1574, %sub.145)
  %exp.156 = f32[1,4096,2]{2,1,0} exponential(%sub.146)
  %reduce.333 = f32[1,4096]{1,0} reduce(%exp.156, %constant.1360), dimensions={2}, to_apply=%region_187.5380
  %div.604 = f32[1,4096,2]{2,1,0} broadcast(%reduce.333), dimensions={0,1}
  %div.605 = f32[1,4096,2]{2,1,0} divide(%exp.156, %div.604)
  %convert_element_type.1575 = bf16[1,4096,2]{2,1,0} convert(%div.605)
  %select_n.332 = bf16[1,4096,2]{2,1,0} select(%eq.2006, %convert_element_type.1575, %broadcast.3427)
  %scatter.160 = bf16[1,4096,8]{2,1,0} scatter(%broadcast.3379, %subtract.47, %select_n.332), update_window_dims={}, inserted_window_dims={0,1,2}, scatter_dims_to_operand_dims={0,1,2}, index_vector_dim=3, to_apply=%region_188.5389.clone
  %eq.2008 = s32[1,4096,2,8]{3,2,1,0} broadcast(%top_k.47), dimensions={0,1,2}
  %iota.2139 = s32[1,4096,2,8]{3,2,1,0} iota(), iota_dimension=3
  %eq.2009 = pred[1,4096,2,8]{3,2,1,0} compare(%eq.2008, %iota.2139), direction=EQ
  %convert_element_type.1576 = s32[1,4096,2,8]{3,2,1,0} convert(%eq.2009)
  %reshape.10056 = s32[1,8192,8]{2,1,0} reshape(%convert_element_type.1576)
  %sharding_constraint.534 = s32[1,8192,8]{2,1,0} copy(%reshape.10056)
  %reduce-window.15 = s32[1,8192,8]{2,1,0} reduce-window(%sharding_constraint.534, %constant.1181), window={size=1x8192x1 pad=0_0x8191_0x0_0}, to_apply=%region_189.5401
  %reshape.10058 = s32[1,4096,2,8]{3,2,1,0} reshape(%reduce-window.15)
  %sharding_constraint.535 = s32[1,4096,2,8]{3,2,1,0} copy(%reshape.10058)
  %le.32 = pred[1,4096,2,8]{3,2,1,0} compare(%sharding_constraint.535, %broadcast.3429), direction=LE
  %mul.3386 = s32[1,4096,2,8]{3,2,1,0} select(%le.32, %convert_element_type.1576, %broadcast.3430)
  %reduce.334 = s32[1,4096,8]{2,1,0} reduce(%mul.3386, %constant.1181), dimensions={2}, to_apply=%region_190.5410
  %convert_element_type.1577 = bf16[1,4096,8]{2,1,0} convert(%reduce.334)
  %mul.3387 = bf16[1,4096,8]{2,1,0} multiply(%scatter.160, %convert_element_type.1577)
  %mul.3388 = bf16[1,4096,8,1025]{3,2,1,0} broadcast(%mul.3387), dimensions={0,1,2}
  %mul.3397 = s32[1,8192,8]{2,1,0} multiply(%sharding_constraint.534, %reduce-window.15)
  %reshape.10059 = s32[1,4096,2,8]{3,2,1,0} reshape(%mul.3397)
  %reduce.335 = s32[1,4096,8]{2,1,0} reduce(%reshape.10059, %constant.1181), dimensions={2}, to_apply=%region_191.5420
  %mul.3406 = s32[1,4096,8]{2,1,0} multiply(%reduce.335, %reduce.334)
  %eq.2010 = s32[1,4096,8,1025]{3,2,1,0} broadcast(%mul.3406), dimensions={0,1,2}
  %iota.2140 = s32[1,4096,8,1025]{3,2,1,0} iota(), iota_dimension=3
  %eq.2011 = pred[1,4096,8,1025]{3,2,1,0} compare(%eq.2010, %iota.2140), direction=EQ
  %convert_element_type.1578 = s32[1,4096,8,1025]{3,2,1,0} convert(%eq.2011)
  %convert_element_type.1579 = bf16[1,4096,8,1025]{3,2,1,0} convert(%convert_element_type.1578)
  %mul.3407 = bf16[1,4096,8,1025]{3,2,1,0} multiply(%mul.3388, %convert_element_type.1579)
  %slice.257 = bf16[1,4096,8,1024]{3,2,1,0} slice(%mul.3407), slice={[0:1], [0:4096], [0:8], [1:1025]}
  %sharding_constraint.536 = bf16[1,4096,8,1024]{3,2,1,0} copy(%slice.257)
  %convert_element_type.1580 = pred[1,4096,8,1024]{3,2,1,0} compare(%slice.257, %broadcast.3431), direction=NE
  %sharding_constraint.537 = pred[1,4096,8,1024]{3,2,1,0} copy(%convert_element_type.1580)
  %dot_general.51 = bf16[1,4096,8,1024]{3,2,1,0} convert(%sharding_constraint.537)
  %dot.318 = bf16[1,8,1024,4096]{3,2,1,0} dot(%dot_general.51, %sharding_constraint.532), lhs_batch_dims={0}, lhs_contracting_dims={1}, rhs_batch_dims={0}, rhs_contracting_dims={1}
  %reshape.10062 = bf16[1,8,1,1024,4096]{4,3,2,1,0} reshape(%dot.318)
  %all-to-all.30 = bf16[1,8,1,1024,4096]{4,3,2,1,0} all-to-all(%reshape.10062), channel_id=176, replica_groups=[1,8]<=[8], dimensions={1}
  %transpose.50 = bf16[8,1,1,1024,4096]{4,3,2,0,1} transpose(%all-to-all.30), dimensions={1,0,2,3,4}
  %reshape.10063 = bf16[8,1,1024,4096]{3,2,1,0} reshape(%transpose.50)
  %transpose.51 = bf16[1,8,1024,4096]{3,2,0,1} transpose(%reshape.10063), dimensions={1,0,2,3}
  %sharding_constraint.538 = bf16[1,8,1024,4096]{3,2,0,1} copy(%transpose.51)
  %param.164 = bf16[1,4096,14336]{2,1,0} parameter(73), sharding={devices=[8,1,1]<=[8]}
  %sharding_constraint.539 = bf16[1,4096,14336]{2,1,0} copy(%param.164)
  %dot.319 = bf16[1,8,1024,14336]{3,2,1,0} dot(%sharding_constraint.538, %sharding_constraint.539), lhs_batch_dims={0}, lhs_contracting_dims={3}, rhs_batch_dims={0}, rhs_contracting_dims={1}
  %sharding_constraint.540 = bf16[1,8,1024,14336]{3,2,1,0} copy(%dot.319)
  %neg.173 = bf16[1,8,1024,14336]{3,2,1,0} negate(%sharding_constraint.540)
  %exp.157 = bf16[1,8,1024,14336]{3,2,1,0} exponential(%neg.173)
  %add.1613 = bf16[1,8,1024,14336]{3,2,1,0} add(%exp.157, %jit_silu_.0)
  %div.606 = bf16[1,8,1024,14336]{3,2,1,0} divide(%jit_silu_.0, %add.1613)
  %mul.3408 = bf16[1,8,1024,14336]{3,2,1,0} multiply(%sharding_constraint.540, %div.606)
  %param.165 = bf16[1,4096,14336]{2,1,0} parameter(74), sharding={devices=[8,1,1]<=[8]}
  %sharding_constraint.541 = bf16[1,4096,14336]{2,1,0} copy(%param.165)
  %dot.320 = bf16[1,8,1024,14336]{3,2,1,0} dot(%sharding_constraint.538, %sharding_constraint.541), lhs_batch_dims={0}, lhs_contracting_dims={3}, rhs_batch_dims={0}, rhs_contracting_dims={1}
  %sharding_constraint.542 = bf16[1,8,1024,14336]{3,2,1,0} copy(%dot.320)
  %mul.3409 = bf16[1,8,1024,14336]{3,2,1,0} multiply(%mul.3408, %sharding_constraint.542)
  %param.166 = bf16[1,14336,4096]{2,1,0} parameter(75), sharding={devices=[8,1,1]<=[8]}
  %sharding_constraint.543 = bf16[1,14336,4096]{2,1,0} copy(%param.166)
  %dot.321 = bf16[1,8,1024,4096]{3,2,1,0} dot(%mul.3409, %sharding_constraint.543), lhs_batch_dims={0}, lhs_contracting_dims={3}, rhs_batch_dims={0}, rhs_contracting_dims={1}
  %sharding_constraint.544 = bf16[1,8,1024,4096]{3,2,1,0} copy(%dot.321)
  %reshape.10066 = bf16[1,8,1,1024,4096]{4,3,2,1,0} reshape(%sharding_constraint.544)
  %all-to-all.31 = bf16[1,8,1,1024,4096]{4,3,2,1,0} all-to-all(%reshape.10066), channel_id=177, replica_groups=[1,8]<=[8], dimensions={1}
  %transpose.52 = bf16[8,1,1,1024,4096]{4,3,2,0,1} transpose(%all-to-all.31), dimensions={1,0,2,3,4}
  %reshape.10067 = bf16[8,1,1024,4096]{3,2,1,0} reshape(%transpose.52)
  %dot.322 = bf16[1,4096,4096]{2,1,0} dot(%sharding_constraint.536, %reshape.10067), lhs_batch_dims={0}, lhs_contracting_dims={3,2}, rhs_batch_dims={1}, rhs_contracting_dims={2,0}
  %sharding_constraint.545 = bf16[1,4096,4096]{2,1,0} copy(%dot.322)
  %add.1614 = bf16[1,4096,4096]{2,1,0} add(%sharding_constraint.545, %add.1605)
  %sharding_constraint.546 = bf16[1,4096,4096]{2,1,0} copy(%add.1614)
  %sharding_constraint.547 = bf16[1,4096,4096]{2,1,0} copy(%sharding_constraint.546)
  %convert_element_type.1581 = f32[1,4096,4096]{2,1,0} convert(%sharding_constraint.547)
  %square.35 = f32[1,4096,4096]{2,1,0} multiply(%convert_element_type.1581, %convert_element_type.1581)
  %reduce.336 = f32[1,4096]{1,0} reduce(%square.35, %constant.1360), dimensions={2}, to_apply=%region_192.5462
  %div.607 = f32[1,4096]{1,0} multiply(%reduce.336, %broadcast.3412)
  %add.1615 = f32[1,4096]{1,0} add(%div.607, %broadcast.3413)
  %rsqrt.96 = f32[1,4096]{1,0} rsqrt(%add.1615)
  %mul.3411 = f32[1,4096,4096]{2,1,0} broadcast(%rsqrt.96), dimensions={0,1}
  %mul.3412 = f32[1,4096,4096]{2,1,0} multiply(%convert_element_type.1581, %mul.3411)
  %convert_element_type.1582 = bf16[1,4096,4096]{2,1,0} convert(%mul.3412)
  %param.167 = bf16[4096]{0} parameter(87), sharding={replicated}
  %mul.3413 = bf16[1,4096,4096]{2,1,0} broadcast(%param.167), dimensions={2}
  %mul.3414 = bf16[1,4096,4096]{2,1,0} multiply(%convert_element_type.1582, %mul.3413)
  %sharding_constraint.548 = bf16[1,4096,4096]{2,1,0} copy(%mul.3414)
  %sharding_constraint.549 = bf16[1,4096,4096]{2,1,0} copy(%sharding_constraint.548)
  %param.168 = bf16[512,32,128]{2,1,0} parameter(90), sharding={devices=[8,1,1]<=[8]}
  %all-gather.113 = bf16[4096,32,128]{2,1,0} all-gather(%param.168), channel_id=178, replica_groups=[1,8]<=[8], dimensions={0}, use_global_device_ids=true
  %dot.323 = bf16[1,4096,32,128]{3,2,1,0} dot(%sharding_constraint.549, %all-gather.113), lhs_contracting_dims={2}, rhs_contracting_dims={0}
  %slice.258 = bf16[1,4096,32,64]{3,2,1,0} slice(%dot.323), slice={[0:1], [0:4096], [0:32], [0:64]}
  %mul.3418 = bf16[1,4096,32,64]{3,2,1,0} multiply(%slice.258, %mul.2435)
  %slice.259 = bf16[1,4096,32,64]{3,2,1,0} slice(%dot.323), slice={[0:1], [0:4096], [0:32], [64:128]}
  %mul.3421 = bf16[1,4096,32,64]{3,2,1,0} multiply(%slice.259, %mul.2438)
  %sub.147 = bf16[1,4096,32,64]{3,2,1,0} subtract(%mul.3418, %mul.3421)
  %mul.3428 = bf16[1,4096,32,64]{3,2,1,0} multiply(%slice.259, %mul.2435)
  %mul.3447 = bf16[1,4096,32,64]{3,2,1,0} multiply(%slice.258, %mul.2438)
  %add.1616 = bf16[1,4096,32,64]{3,2,1,0} add(%mul.3428, %mul.3447)
  %concatenate.131 = bf16[1,4096,32,128]{3,2,1,0} concatenate(%sub.147, %add.1616), dimensions={3}
  %sharding_constraint.550 = bf16[1,4096,32,128]{3,2,1,0} copy(%concatenate.131)
  %param.169 = bf16[512,8,128]{2,1,0} parameter(88), sharding={devices=[8,1,1]<=[8]}
  %all-gather.114 = bf16[4096,8,128]{2,1,0} all-gather(%param.169), channel_id=179, replica_groups=[1,8]<=[8], dimensions={0}, use_global_device_ids=true
  %dot.324 = bf16[1,4096,8,128]{3,2,1,0} dot(%sharding_constraint.549, %all-gather.114), lhs_contracting_dims={2}, rhs_contracting_dims={0}
  %slice.260 = bf16[1,4096,8,64]{3,2,1,0} slice(%dot.324), slice={[0:1], [0:4096], [0:8], [0:64]}
  %mul.3451 = bf16[1,4096,8,64]{3,2,1,0} multiply(%slice.260, %mul.2456)
  %slice.261 = bf16[1,4096,8,64]{3,2,1,0} slice(%dot.324), slice={[0:1], [0:4096], [0:8], [64:128]}
  %mul.3454 = bf16[1,4096,8,64]{3,2,1,0} multiply(%slice.261, %mul.2460)
  %sub.148 = bf16[1,4096,8,64]{3,2,1,0} subtract(%mul.3451, %mul.3454)
  %mul.3457 = bf16[1,4096,8,64]{3,2,1,0} multiply(%slice.261, %mul.2456)
  %mul.3460 = bf16[1,4096,8,64]{3,2,1,0} multiply(%slice.260, %mul.2460)
  %add.1617 = bf16[1,4096,8,64]{3,2,1,0} add(%mul.3457, %mul.3460)
  %concatenate.132 = bf16[1,4096,8,128]{3,2,1,0} concatenate(%sub.148, %add.1617), dimensions={3}
  %sharding_constraint.552 = bf16[1,4096,8,128]{3,2,1,0} copy(%concatenate.132)
  %param.170 = bf16[512,8,128]{2,1,0} parameter(91), sharding={devices=[8,1,1]<=[8]}
  %all-gather.115 = bf16[4096,8,128]{2,1,0} all-gather(%param.170), channel_id=180, replica_groups=[1,8]<=[8], dimensions={0}, use_global_device_ids=true
  %dot.325 = bf16[1,4096,8,128]{3,2,1,0} dot(%sharding_constraint.549, %all-gather.115), lhs_contracting_dims={2}, rhs_contracting_dims={0}
  %sharding_constraint.553 = bf16[1,4096,8,128]{3,2,1,0} copy(%dot.325)
  %te_fused_attn_forward_ffi.64 = (bf16[1,4096,32,128]{3,2,1,0}, f32[1,32,4096,1]{3,2,1,0}, u32[2,4]{1,0}, u8[48]{0}) custom-call(%sharding_constraint.550, %sharding_constraint.552, %sharding_constraint.553, %constant.1403, %dynamic-slice.38, /*index=5*/%concatenate.31, %concatenate.36, %constant.1416, %constant.1416, %constant.1416, /*index=10*/%constant.1416, %constant.1416, %constant.1416), custom_call_target="te_fused_attn_forward_ffi", operand_layout_constraints={bf16[1,4096,32,128]{3,2,1,0}, bf16[1,4096,8,128]{3,2,1,0}, bf16[1,4096,8,128]{3,2,1,0}, bf16[0]{0}, u32[2]{0}, s32[2]{0}, s32[2]{0}, f32[0]{0}, f32[0]{0}, f32[0]{0}, f32[0]{0}, f32[0]{0}, f32[0]{0}}, api_version=API_VERSION_TYPED_FFI, backend_config={attn_heads = 32 : i64, bias_batch = 0 : i64, bias_heads = 0 : i64, bias_type = 0 : i64, deterministic = false, dropout_probability = 0.000000e+00 : f64, input_batch = 1 : i64, is_training = true, kv_max_seqlen = 4096 : i64, mask_type = 3 : i64, max_segments_per_seq = 1 : i64, num_gqa_groups = 8 : i64, q_max_seqlen = 4096 : i64, qk_head_dim = 128 : i64, qkv_layout = 9 : i64, scaling_factor = 1.000000e+00 : f64, v_head_dim = 128 : i64, window_size_left = -1 : i64, window_size_right = -1 : i64}
  %get-tuple-element.419 = bf16[1,4096,32,128]{3,2,1,0} get-tuple-element(%te_fused_attn_forward_ffi.64), index=0
  %sharding_constraint.554 = bf16[1,4096,32,128]{3,2,1,0} copy(%get-tuple-element.419)
  %param.171 = bf16[32,128,512]{2,1,0} parameter(89), sharding={devices=[1,1,8]<=[8]}
  %all-gather.117 = bf16[32,128,4096]{2,1,0} all-gather(%param.171), channel_id=182, replica_groups=[1,8]<=[8], dimensions={2}, use_global_device_ids=true
  %dot.326 = bf16[1,4096,4096]{2,1,0} dot(%sharding_constraint.554, %all-gather.117), lhs_contracting_dims={2,3}, rhs_contracting_dims={0,1}
  %sharding_constraint.555 = bf16[1,4096,4096]{2,1,0} copy(%dot.326)
  %add.1618 = bf16[1,4096,4096]{2,1,0} add(%sharding_constraint.547, %sharding_constraint.555)
  %convert_element_type.1595 = f32[1,4096,4096]{2,1,0} convert(%add.1618)
  %square.36 = f32[1,4096,4096]{2,1,0} multiply(%convert_element_type.1595, %convert_element_type.1595)
  %reduce.340 = f32[1,4096]{1,0} reduce(%square.36, %constant.1360), dimensions={2}, to_apply=%region_196.5586
  %div.616 = f32[1,4096]{1,0} multiply(%reduce.340, %broadcast.3412)
  %add.1619 = f32[1,4096]{1,0} add(%div.616, %broadcast.3413)
  %rsqrt.97 = f32[1,4096]{1,0} rsqrt(%add.1619)
  %mul.3461 = f32[1,4096,4096]{2,1,0} broadcast(%rsqrt.97), dimensions={0,1}
  %mul.3462 = f32[1,4096,4096]{2,1,0} multiply(%convert_element_type.1595, %mul.3461)
  %convert_element_type.1596 = bf16[1,4096,4096]{2,1,0} convert(%mul.3462)
  %param.172 = bf16[4096]{0} parameter(86), sharding={replicated}
  %mul.3463 = bf16[1,4096,4096]{2,1,0} broadcast(%param.172), dimensions={2}
  %mul.3464 = bf16[1,4096,4096]{2,1,0} multiply(%convert_element_type.1596, %mul.3463)
  %sharding_constraint.556 = bf16[1,4096,4096]{2,1,0} copy(%mul.3464)
  %param.173 = bf16[512,8]{1,0} parameter(82), sharding={devices=[8,1]<=[8]}
  %all-gather.118 = bf16[4096,8]{1,0} all-gather(%param.173), channel_id=183, replica_groups=[1,8]<=[8], dimensions={0}, use_global_device_ids=true
  %dot.327 = bf16[1,4096,8]{2,1,0} dot(%sharding_constraint.556, %all-gather.118), lhs_contracting_dims={2}, rhs_contracting_dims={0}
  %sharding_constraint.557 = bf16[1,4096,8]{2,1,0} copy(%dot.327)
  %top_k.48 = bf16[4096,8]{1,0} reshape(%sharding_constraint.557)
  %top_k.49 = (bf16[4096,2]{1,0}, s32[4096,2]{1,0}) custom-call(%top_k.48), custom_call_target="TopK", called_computations={%compare_greater_than.16.5605.clone}
  %get-tuple-element.420 = bf16[4096,2]{1,0} get-tuple-element(%top_k.49), index=0
  %get-tuple-element.421 = s32[4096,2]{1,0} get-tuple-element(%top_k.49), index=1
  %add.1620 = s32[4096,2]{1,0} add(%get-tuple-element.421, %broadcast.3418)
  %sort.80 = (bf16[4096,2]{1,0}, s32[4096,2]{1,0}) sort(%get-tuple-element.420, %add.1620), dimensions={1}, is_stable=true, to_apply=%compare-value-and-index.16
  %get-tuple-element.423 = s32[4096,2]{1,0} get-tuple-element(%sort.80), index=1
  %slice.264 = s32[4096,2]{1,0} slice(%get-tuple-element.423), slice={[0:4096], [0:2]}
  %top_k.50 = s32[1,4096,2]{2,1,0} reshape(%slice.264)
  %lt.51 = pred[1,4096,2]{2,1,0} compare(%top_k.50, %broadcast.3419), direction=LT
  %add.1621 = s32[1,4096,2]{2,1,0} add(%top_k.50, %broadcast.3420)
  %select_n.336 = s32[1,4096,2]{2,1,0} select(%lt.51, %add.1621, %top_k.50)
  %broadcast_in_dim.568 = s32[1,4096,2,1]{3,2,1,0} reshape(%select_n.336)
  %concatenate.135 = s32[1,4096,2,3]{3,2,1,0} concatenate(%add.1356, %iota.1898, %broadcast_in_dim.568), dimensions={3}
  %subtract.50 = s32[1,4096,2,3]{3,2,1,0} subtract(%concatenate.135, %broadcast.3428)
  %scatter.161 = u32[1,4096,8]{2,1,0} scatter(%dynamic-slice.43, %subtract.50, %add.1401), update_window_dims={}, inserted_window_dims={0,1,2}, scatter_dims_to_operand_dims={0,1,2}, index_vector_dim=3, to_apply=%region_197.5633.clone
  %gather.16 = u32[1,4096,2]{2,1,0} gather(%scatter.161, %subtract.50), offset_dims={}, collapsed_slice_dims={0,1,2}, start_index_map={0,1,2}, index_vector_dim=3, slice_sizes={1,1,1}
  %eq.2015 = pred[1,4096,2]{2,1,0} compare(%add.1401, %gather.16), direction=EQ
  %get-tuple-element.422 = bf16[4096,2]{1,0} get-tuple-element(%sort.80), index=0
  %slice.263 = bf16[4096,2]{1,0} slice(%get-tuple-element.422), slice={[0:4096], [0:2]}
  %convert_element_type.1597 = f32[4096,2]{1,0} convert(%slice.263)
  %convert_element_type.1598 = f32[1,4096,2]{2,1,0} reshape(%convert_element_type.1597)
  %reduce.341 = f32[4096]{0} reduce(%convert_element_type.1597, %constant.1450), dimensions={1}, to_apply=%region_198.5642
  %sub.149 = f32[1,4096]{1,0} reshape(%reduce.341)
  %sub.150 = f32[1,4096,2]{2,1,0} broadcast(%sub.149), dimensions={0,1}
  %sub.151 = f32[1,4096,2]{2,1,0} subtract(%convert_element_type.1598, %sub.150)
  %exp.158 = f32[1,4096,2]{2,1,0} exponential(%sub.151)
  %reduce.342 = f32[1,4096]{1,0} reduce(%exp.158, %constant.1360), dimensions={2}, to_apply=%region_199.5651
  %div.617 = f32[1,4096,2]{2,1,0} broadcast(%reduce.342), dimensions={0,1}
  %div.618 = f32[1,4096,2]{2,1,0} divide(%exp.158, %div.617)
  %convert_element_type.1599 = bf16[1,4096,2]{2,1,0} convert(%div.618)
  %select_n.337 = bf16[1,4096,2]{2,1,0} select(%eq.2015, %convert_element_type.1599, %broadcast.3427)
  %scatter.162 = bf16[1,4096,8]{2,1,0} scatter(%broadcast.3379, %subtract.50, %select_n.337), update_window_dims={}, inserted_window_dims={0,1,2}, scatter_dims_to_operand_dims={0,1,2}, index_vector_dim=3, to_apply=%region_200.5660.clone
  %eq.2017 = s32[1,4096,2,8]{3,2,1,0} broadcast(%top_k.50), dimensions={0,1,2}
  %iota.2151 = s32[1,4096,2,8]{3,2,1,0} iota(), iota_dimension=3
  %eq.2021 = pred[1,4096,2,8]{3,2,1,0} compare(%eq.2017, %iota.2151), direction=EQ
  %convert_element_type.1603 = s32[1,4096,2,8]{3,2,1,0} convert(%eq.2021)
  %reshape.10119 = s32[1,8192,8]{2,1,0} reshape(%convert_element_type.1603)
  %sharding_constraint.558 = s32[1,8192,8]{2,1,0} copy(%reshape.10119)
  %reduce-window.16 = s32[1,8192,8]{2,1,0} reduce-window(%sharding_constraint.558, %constant.1181), window={size=1x8192x1 pad=0_0x8191_0x0_0}, to_apply=%region_201.5672
  %reshape.10121 = s32[1,4096,2,8]{3,2,1,0} reshape(%reduce-window.16)
  %sharding_constraint.559 = s32[1,4096,2,8]{3,2,1,0} copy(%reshape.10121)
  %le.34 = pred[1,4096,2,8]{3,2,1,0} compare(%sharding_constraint.559, %broadcast.3429), direction=LE
  %mul.3465 = s32[1,4096,2,8]{3,2,1,0} select(%le.34, %convert_element_type.1603, %broadcast.3430)
  %reduce.343 = s32[1,4096,8]{2,1,0} reduce(%mul.3465, %constant.1181), dimensions={2}, to_apply=%region_202.5681
  %convert_element_type.1604 = bf16[1,4096,8]{2,1,0} convert(%reduce.343)
  %mul.3466 = bf16[1,4096,8]{2,1,0} multiply(%scatter.162, %convert_element_type.1604)
  %mul.3467 = bf16[1,4096,8,1025]{3,2,1,0} broadcast(%mul.3466), dimensions={0,1,2}
  %mul.3468 = s32[1,8192,8]{2,1,0} multiply(%sharding_constraint.558, %reduce-window.16)
  %reshape.10122 = s32[1,4096,2,8]{3,2,1,0} reshape(%mul.3468)
  %reduce.344 = s32[1,4096,8]{2,1,0} reduce(%reshape.10122, %constant.1181), dimensions={2}, to_apply=%region_203.5691
  %mul.3469 = s32[1,4096,8]{2,1,0} multiply(%reduce.344, %reduce.343)
  %eq.2022 = s32[1,4096,8,1025]{3,2,1,0} broadcast(%mul.3469), dimensions={0,1,2}
  %iota.2152 = s32[1,4096,8,1025]{3,2,1,0} iota(), iota_dimension=3
  %eq.2023 = pred[1,4096,8,1025]{3,2,1,0} compare(%eq.2022, %iota.2152), direction=EQ
  %convert_element_type.1605 = s32[1,4096,8,1025]{3,2,1,0} convert(%eq.2023)
  %convert_element_type.1606 = bf16[1,4096,8,1025]{3,2,1,0} convert(%convert_element_type.1605)
  %mul.3470 = bf16[1,4096,8,1025]{3,2,1,0} multiply(%mul.3467, %convert_element_type.1606)
  %slice.265 = bf16[1,4096,8,1024]{3,2,1,0} slice(%mul.3470), slice={[0:1], [0:4096], [0:8], [1:1025]}
  %sharding_constraint.560 = bf16[1,4096,8,1024]{3,2,1,0} copy(%slice.265)
  %convert_element_type.1607 = pred[1,4096,8,1024]{3,2,1,0} compare(%slice.265, %broadcast.3431), direction=NE
  %sharding_constraint.561 = pred[1,4096,8,1024]{3,2,1,0} copy(%convert_element_type.1607)
  %dot_general.52 = bf16[1,4096,8,1024]{3,2,1,0} convert(%sharding_constraint.561)
  %dot.328 = bf16[1,8,1024,4096]{3,2,1,0} dot(%dot_general.52, %sharding_constraint.556), lhs_batch_dims={0}, lhs_contracting_dims={1}, rhs_batch_dims={0}, rhs_contracting_dims={1}
  %reshape.10125 = bf16[1,8,1,1024,4096]{4,3,2,1,0} reshape(%dot.328)
  %all-to-all.32 = bf16[1,8,1,1024,4096]{4,3,2,1,0} all-to-all(%reshape.10125), channel_id=187, replica_groups=[1,8]<=[8], dimensions={1}
  %transpose.53 = bf16[8,1,1,1024,4096]{4,3,2,0,1} transpose(%all-to-all.32), dimensions={1,0,2,3,4}
  %reshape.10126 = bf16[8,1,1024,4096]{3,2,1,0} reshape(%transpose.53)
  %transpose.54 = bf16[1,8,1024,4096]{3,2,0,1} transpose(%reshape.10126), dimensions={1,0,2,3}
  %sharding_constraint.562 = bf16[1,8,1024,4096]{3,2,0,1} copy(%transpose.54)
  %param.174 = bf16[1,4096,14336]{2,1,0} parameter(83), sharding={devices=[8,1,1]<=[8]}
  %sharding_constraint.563 = bf16[1,4096,14336]{2,1,0} copy(%param.174)
  %dot.329 = bf16[1,8,1024,14336]{3,2,1,0} dot(%sharding_constraint.562, %sharding_constraint.563), lhs_batch_dims={0}, lhs_contracting_dims={3}, rhs_batch_dims={0}, rhs_contracting_dims={1}
  %sharding_constraint.564 = bf16[1,8,1024,14336]{3,2,1,0} copy(%dot.329)
  %neg.174 = bf16[1,8,1024,14336]{3,2,1,0} negate(%sharding_constraint.564)
  %exp.159 = bf16[1,8,1024,14336]{3,2,1,0} exponential(%neg.174)
  %add.1627 = bf16[1,8,1024,14336]{3,2,1,0} add(%exp.159, %jit_silu_.0)
  %div.619 = bf16[1,8,1024,14336]{3,2,1,0} divide(%jit_silu_.0, %add.1627)
  %mul.3471 = bf16[1,8,1024,14336]{3,2,1,0} multiply(%sharding_constraint.564, %div.619)
  %param.175 = bf16[1,4096,14336]{2,1,0} parameter(84), sharding={devices=[8,1,1]<=[8]}
  %sharding_constraint.565 = bf16[1,4096,14336]{2,1,0} copy(%param.175)
  %dot.330 = bf16[1,8,1024,14336]{3,2,1,0} dot(%sharding_constraint.562, %sharding_constraint.565), lhs_batch_dims={0}, lhs_contracting_dims={3}, rhs_batch_dims={0}, rhs_contracting_dims={1}
  %sharding_constraint.566 = bf16[1,8,1024,14336]{3,2,1,0} copy(%dot.330)
  %mul.3472 = bf16[1,8,1024,14336]{3,2,1,0} multiply(%mul.3471, %sharding_constraint.566)
  %param.176 = bf16[1,14336,4096]{2,1,0} parameter(85), sharding={devices=[8,1,1]<=[8]}
  %sharding_constraint.567 = bf16[1,14336,4096]{2,1,0} copy(%param.176)
  %dot.331 = bf16[1,8,1024,4096]{3,2,1,0} dot(%mul.3472, %sharding_constraint.567), lhs_batch_dims={0}, lhs_contracting_dims={3}, rhs_batch_dims={0}, rhs_contracting_dims={1}
  %sharding_constraint.568 = bf16[1,8,1024,4096]{3,2,1,0} copy(%dot.331)
  %reshape.10129 = bf16[1,8,1,1024,4096]{4,3,2,1,0} reshape(%sharding_constraint.568)
  %all-to-all.33 = bf16[1,8,1,1024,4096]{4,3,2,1,0} all-to-all(%reshape.10129), channel_id=188, replica_groups=[1,8]<=[8], dimensions={1}
  %transpose.55 = bf16[8,1,1,1024,4096]{4,3,2,0,1} transpose(%all-to-all.33), dimensions={1,0,2,3,4}
  %reshape.10130 = bf16[8,1,1024,4096]{3,2,1,0} reshape(%transpose.55)
  %dot.332 = bf16[1,4096,4096]{2,1,0} dot(%sharding_constraint.560, %reshape.10130), lhs_batch_dims={0}, lhs_contracting_dims={3,2}, rhs_batch_dims={1}, rhs_contracting_dims={2,0}
  %sharding_constraint.569 = bf16[1,4096,4096]{2,1,0} copy(%dot.332)
  %add.1628 = bf16[1,4096,4096]{2,1,0} add(%sharding_constraint.569, %add.1618)
  %sharding_constraint.570 = bf16[1,4096,4096]{2,1,0} copy(%add.1628)
  %sharding_constraint.571 = bf16[1,4096,4096]{2,1,0} copy(%sharding_constraint.570)
  %convert_element_type.1608 = f32[1,4096,4096]{2,1,0} convert(%sharding_constraint.571)
  %square.37 = f32[1,4096,4096]{2,1,0} multiply(%convert_element_type.1608, %convert_element_type.1608)
  %reduce.345 = f32[1,4096]{1,0} reduce(%square.37, %constant.1360), dimensions={2}, to_apply=%region_204.5733
  %div.620 = f32[1,4096]{1,0} multiply(%reduce.345, %broadcast.3412)
  %add.1629 = f32[1,4096]{1,0} add(%div.620, %broadcast.3413)
  %rsqrt.98 = f32[1,4096]{1,0} rsqrt(%add.1629)
  %mul.3473 = f32[1,4096,4096]{2,1,0} broadcast(%rsqrt.98), dimensions={0,1}
  %mul.3474 = f32[1,4096,4096]{2,1,0} multiply(%convert_element_type.1608, %mul.3473)
  %convert_element_type.1609 = bf16[1,4096,4096]{2,1,0} convert(%mul.3474)
  %param.177 = bf16[4096]{0} parameter(97), sharding={replicated}
  %mul.3475 = bf16[1,4096,4096]{2,1,0} broadcast(%param.177), dimensions={2}
  %mul.3476 = bf16[1,4096,4096]{2,1,0} multiply(%convert_element_type.1609, %mul.3475)
  %sharding_constraint.572 = bf16[1,4096,4096]{2,1,0} copy(%mul.3476)
  %sharding_constraint.573 = bf16[1,4096,4096]{2,1,0} copy(%sharding_constraint.572)
  %param.178 = bf16[512,32,128]{2,1,0} parameter(100), sharding={devices=[8,1,1]<=[8]}
  %all-gather.120 = bf16[4096,32,128]{2,1,0} all-gather(%param.178), channel_id=189, replica_groups=[1,8]<=[8], dimensions={0}, use_global_device_ids=true
  %dot.333 = bf16[1,4096,32,128]{3,2,1,0} dot(%sharding_constraint.573, %all-gather.120), lhs_contracting_dims={2}, rhs_contracting_dims={0}
  %slice.266 = bf16[1,4096,32,64]{3,2,1,0} slice(%dot.333), slice={[0:1], [0:4096], [0:32], [0:64]}
  %mul.3480 = bf16[1,4096,32,64]{3,2,1,0} multiply(%slice.266, %mul.2435)
  %slice.267 = bf16[1,4096,32,64]{3,2,1,0} slice(%dot.333), slice={[0:1], [0:4096], [0:32], [64:128]}
  %mul.3483 = bf16[1,4096,32,64]{3,2,1,0} multiply(%slice.267, %mul.2438)
  %sub.152 = bf16[1,4096,32,64]{3,2,1,0} subtract(%mul.3480, %mul.3483)
  %mul.3486 = bf16[1,4096,32,64]{3,2,1,0} multiply(%slice.267, %mul.2435)
  %mul.3489 = bf16[1,4096,32,64]{3,2,1,0} multiply(%slice.266, %mul.2438)
  %add.1630 = bf16[1,4096,32,64]{3,2,1,0} add(%mul.3486, %mul.3489)
  %concatenate.139 = bf16[1,4096,32,128]{3,2,1,0} concatenate(%sub.152, %add.1630), dimensions={3}
  %sharding_constraint.574 = bf16[1,4096,32,128]{3,2,1,0} copy(%concatenate.139)
  %param.179 = bf16[512,8,128]{2,1,0} parameter(98), sharding={devices=[8,1,1]<=[8]}
  %all-gather.121 = bf16[4096,8,128]{2,1,0} all-gather(%param.179), channel_id=190, replica_groups=[1,8]<=[8], dimensions={0}, use_global_device_ids=true
  %dot.334 = bf16[1,4096,8,128]{3,2,1,0} dot(%sharding_constraint.573, %all-gather.121), lhs_contracting_dims={2}, rhs_contracting_dims={0}
  %slice.268 = bf16[1,4096,8,64]{3,2,1,0} slice(%dot.334), slice={[0:1], [0:4096], [0:8], [0:64]}
  %mul.3493 = bf16[1,4096,8,64]{3,2,1,0} multiply(%slice.268, %mul.2456)
  %slice.269 = bf16[1,4096,8,64]{3,2,1,0} slice(%dot.334), slice={[0:1], [0:4096], [0:8], [64:128]}
  %mul.3496 = bf16[1,4096,8,64]{3,2,1,0} multiply(%slice.269, %mul.2460)
  %sub.153 = bf16[1,4096,8,64]{3,2,1,0} subtract(%mul.3493, %mul.3496)
  %mul.3499 = bf16[1,4096,8,64]{3,2,1,0} multiply(%slice.269, %mul.2456)
  %mul.3502 = bf16[1,4096,8,64]{3,2,1,0} multiply(%slice.268, %mul.2460)
  %add.1631 = bf16[1,4096,8,64]{3,2,1,0} add(%mul.3499, %mul.3502)
  %concatenate.140 = bf16[1,4096,8,128]{3,2,1,0} concatenate(%sub.153, %add.1631), dimensions={3}
  %sharding_constraint.576 = bf16[1,4096,8,128]{3,2,1,0} copy(%concatenate.140)
  %param.180 = bf16[512,8,128]{2,1,0} parameter(101), sharding={devices=[8,1,1]<=[8]}
  %all-gather.122 = bf16[4096,8,128]{2,1,0} all-gather(%param.180), channel_id=191, replica_groups=[1,8]<=[8], dimensions={0}, use_global_device_ids=true
  %dot.335 = bf16[1,4096,8,128]{3,2,1,0} dot(%sharding_constraint.573, %all-gather.122), lhs_contracting_dims={2}, rhs_contracting_dims={0}
  %sharding_constraint.577 = bf16[1,4096,8,128]{3,2,1,0} copy(%dot.335)
  %te_fused_attn_forward_ffi.68 = (bf16[1,4096,32,128]{3,2,1,0}, f32[1,32,4096,1]{3,2,1,0}, u32[2,4]{1,0}, u8[48]{0}) custom-call(%sharding_constraint.574, %sharding_constraint.576, %sharding_constraint.577, %constant.1403, %dynamic-slice.38, /*index=5*/%concatenate.31, %concatenate.36, %constant.1416, %constant.1416, %constant.1416, /*index=10*/%constant.1416, %constant.1416, %constant.1416), custom_call_target="te_fused_attn_forward_ffi", operand_layout_constraints={bf16[1,4096,32,128]{3,2,1,0}, bf16[1,4096,8,128]{3,2,1,0}, bf16[1,4096,8,128]{3,2,1,0}, bf16[0]{0}, u32[2]{0}, s32[2]{0}, s32[2]{0}, f32[0]{0}, f32[0]{0}, f32[0]{0}, f32[0]{0}, f32[0]{0}, f32[0]{0}}, api_version=API_VERSION_TYPED_FFI, backend_config={attn_heads = 32 : i64, bias_batch = 0 : i64, bias_heads = 0 : i64, bias_type = 0 : i64, deterministic = false, dropout_probability = 0.000000e+00 : f64, input_batch = 1 : i64, is_training = true, kv_max_seqlen = 4096 : i64, mask_type = 3 : i64, max_segments_per_seq = 1 : i64, num_gqa_groups = 8 : i64, q_max_seqlen = 4096 : i64, qk_head_dim = 128 : i64, qkv_layout = 9 : i64, scaling_factor = 1.000000e+00 : f64, v_head_dim = 128 : i64, window_size_left = -1 : i64, window_size_right = -1 : i64}
  %get-tuple-element.429 = bf16[1,4096,32,128]{3,2,1,0} get-tuple-element(%te_fused_attn_forward_ffi.68), index=0
  %sharding_constraint.578 = bf16[1,4096,32,128]{3,2,1,0} copy(%get-tuple-element.429)
  %param.181 = bf16[32,128,512]{2,1,0} parameter(99), sharding={devices=[1,1,8]<=[8]}
  %all-gather.124 = bf16[32,128,4096]{2,1,0} all-gather(%param.181), channel_id=193, replica_groups=[1,8]<=[8], dimensions={2}, use_global_device_ids=true
  %dot.336 = bf16[1,4096,4096]{2,1,0} dot(%sharding_constraint.578, %all-gather.124), lhs_contracting_dims={2,3}, rhs_contracting_dims={0,1}
  %sharding_constraint.579 = bf16[1,4096,4096]{2,1,0} copy(%dot.336)
  %add.1632 = bf16[1,4096,4096]{2,1,0} add(%sharding_constraint.571, %sharding_constraint.579)
  %convert_element_type.1621 = f32[1,4096,4096]{2,1,0} convert(%add.1632)
  %square.38 = f32[1,4096,4096]{2,1,0} multiply(%convert_element_type.1621, %convert_element_type.1621)
  %reduce.349 = f32[1,4096]{1,0} reduce(%square.38, %constant.1360), dimensions={2}, to_apply=%region_208.5857
  %div.629 = f32[1,4096]{1,0} multiply(%reduce.349, %broadcast.3412)
  %add.1633 = f32[1,4096]{1,0} add(%div.629, %broadcast.3413)
  %rsqrt.99 = f32[1,4096]{1,0} rsqrt(%add.1633)
  %mul.3503 = f32[1,4096,4096]{2,1,0} broadcast(%rsqrt.99), dimensions={0,1}
  %mul.3504 = f32[1,4096,4096]{2,1,0} multiply(%convert_element_type.1621, %mul.3503)
  %convert_element_type.1622 = bf16[1,4096,4096]{2,1,0} convert(%mul.3504)
  %param.182 = bf16[4096]{0} parameter(96), sharding={replicated}
  %mul.3505 = bf16[1,4096,4096]{2,1,0} broadcast(%param.182), dimensions={2}
  %mul.3506 = bf16[1,4096,4096]{2,1,0} multiply(%convert_element_type.1622, %mul.3505)
  %sharding_constraint.580 = bf16[1,4096,4096]{2,1,0} copy(%mul.3506)
  %param.183 = bf16[512,8]{1,0} parameter(92), sharding={devices=[8,1]<=[8]}
  %all-gather.125 = bf16[4096,8]{1,0} all-gather(%param.183), channel_id=194, replica_groups=[1,8]<=[8], dimensions={0}, use_global_device_ids=true
  %dot.337 = bf16[1,4096,8]{2,1,0} dot(%sharding_constraint.580, %all-gather.125), lhs_contracting_dims={2}, rhs_contracting_dims={0}
  %sharding_constraint.581 = bf16[1,4096,8]{2,1,0} copy(%dot.337)
  %top_k.51 = bf16[4096,8]{1,0} reshape(%sharding_constraint.581)
  %top_k.52 = (bf16[4096,2]{1,0}, s32[4096,2]{1,0}) custom-call(%top_k.51), custom_call_target="TopK", called_computations={%compare_greater_than.17.5876.clone}
  %get-tuple-element.430 = bf16[4096,2]{1,0} get-tuple-element(%top_k.52), index=0
  %get-tuple-element.431 = s32[4096,2]{1,0} get-tuple-element(%top_k.52), index=1
  %add.1634 = s32[4096,2]{1,0} add(%get-tuple-element.431, %broadcast.3418)
  %sort.81 = (bf16[4096,2]{1,0}, s32[4096,2]{1,0}) sort(%get-tuple-element.430, %add.1634), dimensions={1}, is_stable=true, to_apply=%compare-value-and-index.17
  %get-tuple-element.433 = s32[4096,2]{1,0} get-tuple-element(%sort.81), index=1
  %slice.272 = s32[4096,2]{1,0} slice(%get-tuple-element.433), slice={[0:4096], [0:2]}
  %top_k.53 = s32[1,4096,2]{2,1,0} reshape(%slice.272)
  %lt.54 = pred[1,4096,2]{2,1,0} compare(%top_k.53, %broadcast.3419), direction=LT
  %add.1635 = s32[1,4096,2]{2,1,0} add(%top_k.53, %broadcast.3420)
  %select_n.341 = s32[1,4096,2]{2,1,0} select(%lt.54, %add.1635, %top_k.53)
  %broadcast_in_dim.571 = s32[1,4096,2,1]{3,2,1,0} reshape(%select_n.341)
  %concatenate.143 = s32[1,4096,2,3]{3,2,1,0} concatenate(%add.1356, %iota.1896, %broadcast_in_dim.571), dimensions={3}
  %subtract.53 = s32[1,4096,2,3]{3,2,1,0} subtract(%concatenate.143, %broadcast.3428)
  %scatter.163 = u32[1,4096,8]{2,1,0} scatter(%dynamic-slice.43, %subtract.53, %add.1401), update_window_dims={}, inserted_window_dims={0,1,2}, scatter_dims_to_operand_dims={0,1,2}, index_vector_dim=3, to_apply=%region_209.5904.clone
  %gather.17 = u32[1,4096,2]{2,1,0} gather(%scatter.163, %subtract.53), offset_dims={}, collapsed_slice_dims={0,1,2}, start_index_map={0,1,2}, index_vector_dim=3, slice_sizes={1,1,1}
  %eq.2027 = pred[1,4096,2]{2,1,0} compare(%add.1401, %gather.17), direction=EQ
  %get-tuple-element.432 = bf16[4096,2]{1,0} get-tuple-element(%sort.81), index=0
  %slice.271 = bf16[4096,2]{1,0} slice(%get-tuple-element.432), slice={[0:4096], [0:2]}
  %convert_element_type.1623 = f32[4096,2]{1,0} convert(%slice.271)
  %convert_element_type.1624 = f32[1,4096,2]{2,1,0} reshape(%convert_element_type.1623)
  %reduce.350 = f32[4096]{0} reduce(%convert_element_type.1623, %constant.1450), dimensions={1}, to_apply=%region_210.5913
  %sub.154 = f32[1,4096]{1,0} reshape(%reduce.350)
  %sub.155 = f32[1,4096,2]{2,1,0} broadcast(%sub.154), dimensions={0,1}
  %sub.156 = f32[1,4096,2]{2,1,0} subtract(%convert_element_type.1624, %sub.155)
  %exp.160 = f32[1,4096,2]{2,1,0} exponential(%sub.156)
  %reduce.351 = f32[1,4096]{1,0} reduce(%exp.160, %constant.1360), dimensions={2}, to_apply=%region_211.5922
  %div.630 = f32[1,4096,2]{2,1,0} broadcast(%reduce.351), dimensions={0,1}
  %div.631 = f32[1,4096,2]{2,1,0} divide(%exp.160, %div.630)
  %convert_element_type.1625 = bf16[1,4096,2]{2,1,0} convert(%div.631)
  %select_n.342 = bf16[1,4096,2]{2,1,0} select(%eq.2027, %convert_element_type.1625, %broadcast.3427)
  %scatter.164 = bf16[1,4096,8]{2,1,0} scatter(%broadcast.3379, %subtract.53, %select_n.342), update_window_dims={}, inserted_window_dims={0,1,2}, scatter_dims_to_operand_dims={0,1,2}, index_vector_dim=3, to_apply=%region_212.5931.clone
  %eq.2029 = s32[1,4096,2,8]{3,2,1,0} broadcast(%top_k.53), dimensions={0,1,2}
  %iota.2164 = s32[1,4096,2,8]{3,2,1,0} iota(), iota_dimension=3
  %eq.2030 = pred[1,4096,2,8]{3,2,1,0} compare(%eq.2029, %iota.2164), direction=EQ
  %convert_element_type.1626 = s32[1,4096,2,8]{3,2,1,0} convert(%eq.2030)
  %reshape.10173 = s32[1,8192,8]{2,1,0} reshape(%convert_element_type.1626)
  %sharding_constraint.582 = s32[1,8192,8]{2,1,0} copy(%reshape.10173)
  %reduce-window.17 = s32[1,8192,8]{2,1,0} reduce-window(%sharding_constraint.582, %constant.1181), window={size=1x8192x1 pad=0_0x8191_0x0_0}, to_apply=%region_213.5943
  %reshape.10175 = s32[1,4096,2,8]{3,2,1,0} reshape(%reduce-window.17)
  %sharding_constraint.583 = s32[1,4096,2,8]{3,2,1,0} copy(%reshape.10175)
  %le.36 = pred[1,4096,2,8]{3,2,1,0} compare(%sharding_constraint.583, %broadcast.3429), direction=LE
  %mul.3507 = s32[1,4096,2,8]{3,2,1,0} select(%le.36, %convert_element_type.1626, %broadcast.3430)
  %reduce.352 = s32[1,4096,8]{2,1,0} reduce(%mul.3507, %constant.1181), dimensions={2}, to_apply=%region_214.5952
  %convert_element_type.1627 = bf16[1,4096,8]{2,1,0} convert(%reduce.352)
  %mul.3508 = bf16[1,4096,8]{2,1,0} multiply(%scatter.164, %convert_element_type.1627)
  %mul.3510 = bf16[1,4096,8,1025]{3,2,1,0} broadcast(%mul.3508), dimensions={0,1,2}
  %mul.3511 = s32[1,8192,8]{2,1,0} multiply(%sharding_constraint.582, %reduce-window.17)
  %reshape.10176 = s32[1,4096,2,8]{3,2,1,0} reshape(%mul.3511)
  %reduce.353 = s32[1,4096,8]{2,1,0} reduce(%reshape.10176, %constant.1181), dimensions={2}, to_apply=%region_215.5962
  %mul.3522 = s32[1,4096,8]{2,1,0} multiply(%reduce.353, %reduce.352)
  %eq.2031 = s32[1,4096,8,1025]{3,2,1,0} broadcast(%mul.3522), dimensions={0,1,2}
  %iota.2165 = s32[1,4096,8,1025]{3,2,1,0} iota(), iota_dimension=3
  %eq.2032 = pred[1,4096,8,1025]{3,2,1,0} compare(%eq.2031, %iota.2165), direction=EQ
  %convert_element_type.1628 = s32[1,4096,8,1025]{3,2,1,0} convert(%eq.2032)
  %convert_element_type.1629 = bf16[1,4096,8,1025]{3,2,1,0} convert(%convert_element_type.1628)
  %mul.3523 = bf16[1,4096,8,1025]{3,2,1,0} multiply(%mul.3510, %convert_element_type.1629)
  %slice.273 = bf16[1,4096,8,1024]{3,2,1,0} slice(%mul.3523), slice={[0:1], [0:4096], [0:8], [1:1025]}
  %sharding_constraint.584 = bf16[1,4096,8,1024]{3,2,1,0} copy(%slice.273)
  %convert_element_type.1630 = pred[1,4096,8,1024]{3,2,1,0} compare(%slice.273, %broadcast.3431), direction=NE
  %sharding_constraint.585 = pred[1,4096,8,1024]{3,2,1,0} copy(%convert_element_type.1630)
  %dot_general.53 = bf16[1,4096,8,1024]{3,2,1,0} convert(%sharding_constraint.585)
  %dot.338 = bf16[1,8,1024,4096]{3,2,1,0} dot(%dot_general.53, %sharding_constraint.580), lhs_batch_dims={0}, lhs_contracting_dims={1}, rhs_batch_dims={0}, rhs_contracting_dims={1}
  %reshape.10179 = bf16[1,8,1,1024,4096]{4,3,2,1,0} reshape(%dot.338)
  %all-to-all.34 = bf16[1,8,1,1024,4096]{4,3,2,1,0} all-to-all(%reshape.10179), channel_id=198, replica_groups=[1,8]<=[8], dimensions={1}
  %transpose.56 = bf16[8,1,1,1024,4096]{4,3,2,0,1} transpose(%all-to-all.34), dimensions={1,0,2,3,4}
  %reshape.10180 = bf16[8,1,1024,4096]{3,2,1,0} reshape(%transpose.56)
  %transpose.57 = bf16[1,8,1024,4096]{3,2,0,1} transpose(%reshape.10180), dimensions={1,0,2,3}
  %sharding_constraint.586 = bf16[1,8,1024,4096]{3,2,0,1} copy(%transpose.57)
  %param.184 = bf16[1,4096,14336]{2,1,0} parameter(93), sharding={devices=[8,1,1]<=[8]}
  %sharding_constraint.587 = bf16[1,4096,14336]{2,1,0} copy(%param.184)
  %dot.339 = bf16[1,8,1024,14336]{3,2,1,0} dot(%sharding_constraint.586, %sharding_constraint.587), lhs_batch_dims={0}, lhs_contracting_dims={3}, rhs_batch_dims={0}, rhs_contracting_dims={1}
  %sharding_constraint.588 = bf16[1,8,1024,14336]{3,2,1,0} copy(%dot.339)
  %neg.175 = bf16[1,8,1024,14336]{3,2,1,0} negate(%sharding_constraint.588)
  %exp.161 = bf16[1,8,1024,14336]{3,2,1,0} exponential(%neg.175)
  %add.1640 = bf16[1,8,1024,14336]{3,2,1,0} add(%exp.161, %jit_silu_.0)
  %div.632 = bf16[1,8,1024,14336]{3,2,1,0} divide(%jit_silu_.0, %add.1640)
  %mul.3524 = bf16[1,8,1024,14336]{3,2,1,0} multiply(%sharding_constraint.588, %div.632)
  %param.185 = bf16[1,4096,14336]{2,1,0} parameter(94), sharding={devices=[8,1,1]<=[8]}
  %sharding_constraint.589 = bf16[1,4096,14336]{2,1,0} copy(%param.185)
  %dot.340 = bf16[1,8,1024,14336]{3,2,1,0} dot(%sharding_constraint.586, %sharding_constraint.589), lhs_batch_dims={0}, lhs_contracting_dims={3}, rhs_batch_dims={0}, rhs_contracting_dims={1}
  %sharding_constraint.590 = bf16[1,8,1024,14336]{3,2,1,0} copy(%dot.340)
  %mul.3526 = bf16[1,8,1024,14336]{3,2,1,0} multiply(%mul.3524, %sharding_constraint.590)
  %param.186 = bf16[1,14336,4096]{2,1,0} parameter(95), sharding={devices=[8,1,1]<=[8]}
  %sharding_constraint.591 = bf16[1,14336,4096]{2,1,0} copy(%param.186)
  %dot.341 = bf16[1,8,1024,4096]{3,2,1,0} dot(%mul.3526, %sharding_constraint.591), lhs_batch_dims={0}, lhs_contracting_dims={3}, rhs_batch_dims={0}, rhs_contracting_dims={1}
  %sharding_constraint.592 = bf16[1,8,1024,4096]{3,2,1,0} copy(%dot.341)
  %reshape.10183 = bf16[1,8,1,1024,4096]{4,3,2,1,0} reshape(%sharding_constraint.592)
  %all-to-all.35 = bf16[1,8,1,1024,4096]{4,3,2,1,0} all-to-all(%reshape.10183), channel_id=199, replica_groups=[1,8]<=[8], dimensions={1}
  %transpose.58 = bf16[8,1,1,1024,4096]{4,3,2,0,1} transpose(%all-to-all.35), dimensions={1,0,2,3,4}
  %reshape.10184 = bf16[8,1,1024,4096]{3,2,1,0} reshape(%transpose.58)
  %dot.342 = bf16[1,4096,4096]{2,1,0} dot(%sharding_constraint.584, %reshape.10184), lhs_batch_dims={0}, lhs_contracting_dims={3,2}, rhs_batch_dims={1}, rhs_contracting_dims={2,0}
  %sharding_constraint.593 = bf16[1,4096,4096]{2,1,0} copy(%dot.342)
  %add.1641 = bf16[1,4096,4096]{2,1,0} add(%sharding_constraint.593, %add.1632)
  %sharding_constraint.594 = bf16[1,4096,4096]{2,1,0} copy(%add.1641)
  %sharding_constraint.595 = bf16[1,4096,4096]{2,1,0} copy(%sharding_constraint.594)
  %convert_element_type.1631 = f32[1,4096,4096]{2,1,0} convert(%sharding_constraint.595)
  %square.39 = f32[1,4096,4096]{2,1,0} multiply(%convert_element_type.1631, %convert_element_type.1631)
  %reduce.354 = f32[1,4096]{1,0} reduce(%square.39, %constant.1360), dimensions={2}, to_apply=%region_216.6004
  %div.633 = f32[1,4096]{1,0} multiply(%reduce.354, %broadcast.3412)
  %add.1642 = f32[1,4096]{1,0} add(%div.633, %broadcast.3413)
  %rsqrt.100 = f32[1,4096]{1,0} rsqrt(%add.1642)
  %mul.3527 = f32[1,4096,4096]{2,1,0} broadcast(%rsqrt.100), dimensions={0,1}
  %mul.3528 = f32[1,4096,4096]{2,1,0} multiply(%convert_element_type.1631, %mul.3527)
  %convert_element_type.1634 = bf16[1,4096,4096]{2,1,0} convert(%mul.3528)
  %param.187 = bf16[4096]{0} parameter(107), sharding={replicated}
  %mul.3529 = bf16[1,4096,4096]{2,1,0} broadcast(%param.187), dimensions={2}
  %mul.3530 = bf16[1,4096,4096]{2,1,0} multiply(%convert_element_type.1634, %mul.3529)
  %sharding_constraint.596 = bf16[1,4096,4096]{2,1,0} copy(%mul.3530)
  %sharding_constraint.597 = bf16[1,4096,4096]{2,1,0} copy(%sharding_constraint.596)
  %param.188 = bf16[512,32,128]{2,1,0} parameter(110), sharding={devices=[8,1,1]<=[8]}
  %all-gather.127 = bf16[4096,32,128]{2,1,0} all-gather(%param.188), channel_id=200, replica_groups=[1,8]<=[8], dimensions={0}, use_global_device_ids=true
  %dot.343 = bf16[1,4096,32,128]{3,2,1,0} dot(%sharding_constraint.597, %all-gather.127), lhs_contracting_dims={2}, rhs_contracting_dims={0}
  %slice.274 = bf16[1,4096,32,64]{3,2,1,0} slice(%dot.343), slice={[0:1], [0:4096], [0:32], [0:64]}
  %mul.3535 = bf16[1,4096,32,64]{3,2,1,0} multiply(%slice.274, %mul.2435)
  %slice.275 = bf16[1,4096,32,64]{3,2,1,0} slice(%dot.343), slice={[0:1], [0:4096], [0:32], [64:128]}
  %mul.3538 = bf16[1,4096,32,64]{3,2,1,0} multiply(%slice.275, %mul.2438)
  %sub.157 = bf16[1,4096,32,64]{3,2,1,0} subtract(%mul.3535, %mul.3538)
  %mul.3541 = bf16[1,4096,32,64]{3,2,1,0} multiply(%slice.275, %mul.2435)
  %mul.3544 = bf16[1,4096,32,64]{3,2,1,0} multiply(%slice.274, %mul.2438)
  %add.1643 = bf16[1,4096,32,64]{3,2,1,0} add(%mul.3541, %mul.3544)
  %concatenate.147 = bf16[1,4096,32,128]{3,2,1,0} concatenate(%sub.157, %add.1643), dimensions={3}
  %sharding_constraint.598 = bf16[1,4096,32,128]{3,2,1,0} copy(%concatenate.147)
  %param.189 = bf16[512,8,128]{2,1,0} parameter(108), sharding={devices=[8,1,1]<=[8]}
  %all-gather.128 = bf16[4096,8,128]{2,1,0} all-gather(%param.189), channel_id=201, replica_groups=[1,8]<=[8], dimensions={0}, use_global_device_ids=true
  %dot.344 = bf16[1,4096,8,128]{3,2,1,0} dot(%sharding_constraint.597, %all-gather.128), lhs_contracting_dims={2}, rhs_contracting_dims={0}
  %slice.276 = bf16[1,4096,8,64]{3,2,1,0} slice(%dot.344), slice={[0:1], [0:4096], [0:8], [0:64]}
  %mul.3549 = bf16[1,4096,8,64]{3,2,1,0} multiply(%slice.276, %mul.2456)
  %slice.277 = bf16[1,4096,8,64]{3,2,1,0} slice(%dot.344), slice={[0:1], [0:4096], [0:8], [64:128]}
  %mul.3553 = bf16[1,4096,8,64]{3,2,1,0} multiply(%slice.277, %mul.2460)
  %sub.158 = bf16[1,4096,8,64]{3,2,1,0} subtract(%mul.3549, %mul.3553)
  %mul.3556 = bf16[1,4096,8,64]{3,2,1,0} multiply(%slice.277, %mul.2456)
  %mul.3559 = bf16[1,4096,8,64]{3,2,1,0} multiply(%slice.276, %mul.2460)
  %add.1644 = bf16[1,4096,8,64]{3,2,1,0} add(%mul.3556, %mul.3559)
  %concatenate.148 = bf16[1,4096,8,128]{3,2,1,0} concatenate(%sub.158, %add.1644), dimensions={3}
  %sharding_constraint.600 = bf16[1,4096,8,128]{3,2,1,0} copy(%concatenate.148)
  %param.190 = bf16[512,8,128]{2,1,0} parameter(111), sharding={devices=[8,1,1]<=[8]}
  %all-gather.129 = bf16[4096,8,128]{2,1,0} all-gather(%param.190), channel_id=202, replica_groups=[1,8]<=[8], dimensions={0}, use_global_device_ids=true
  %dot.345 = bf16[1,4096,8,128]{3,2,1,0} dot(%sharding_constraint.597, %all-gather.129), lhs_contracting_dims={2}, rhs_contracting_dims={0}
  %sharding_constraint.601 = bf16[1,4096,8,128]{3,2,1,0} copy(%dot.345)
  %te_fused_attn_forward_ffi.72 = (bf16[1,4096,32,128]{3,2,1,0}, f32[1,32,4096,1]{3,2,1,0}, u32[2,4]{1,0}, u8[48]{0}) custom-call(%sharding_constraint.598, %sharding_constraint.600, %sharding_constraint.601, %constant.1403, %dynamic-slice.38, /*index=5*/%concatenate.31, %concatenate.36, %constant.1416, %constant.1416, %constant.1416, /*index=10*/%constant.1416, %constant.1416, %constant.1416), custom_call_target="te_fused_attn_forward_ffi", operand_layout_constraints={bf16[1,4096,32,128]{3,2,1,0}, bf16[1,4096,8,128]{3,2,1,0}, bf16[1,4096,8,128]{3,2,1,0}, bf16[0]{0}, u32[2]{0}, s32[2]{0}, s32[2]{0}, f32[0]{0}, f32[0]{0}, f32[0]{0}, f32[0]{0}, f32[0]{0}, f32[0]{0}}, api_version=API_VERSION_TYPED_FFI, backend_config={attn_heads = 32 : i64, bias_batch = 0 : i64, bias_heads = 0 : i64, bias_type = 0 : i64, deterministic = false, dropout_probability = 0.000000e+00 : f64, input_batch = 1 : i64, is_training = true, kv_max_seqlen = 4096 : i64, mask_type = 3 : i64, max_segments_per_seq = 1 : i64, num_gqa_groups = 8 : i64, q_max_seqlen = 4096 : i64, qk_head_dim = 128 : i64, qkv_layout = 9 : i64, scaling_factor = 1.000000e+00 : f64, v_head_dim = 128 : i64, window_size_left = -1 : i64, window_size_right = -1 : i64}
  %get-tuple-element.439 = bf16[1,4096,32,128]{3,2,1,0} get-tuple-element(%te_fused_attn_forward_ffi.72), index=0
  %sharding_constraint.602 = bf16[1,4096,32,128]{3,2,1,0} copy(%get-tuple-element.439)
  %param.191 = bf16[32,128,512]{2,1,0} parameter(109), sharding={devices=[1,1,8]<=[8]}
  %all-gather.131 = bf16[32,128,4096]{2,1,0} all-gather(%param.191), channel_id=204, replica_groups=[1,8]<=[8], dimensions={2}, use_global_device_ids=true
  %dot.346 = bf16[1,4096,4096]{2,1,0} dot(%sharding_constraint.602, %all-gather.131), lhs_contracting_dims={2,3}, rhs_contracting_dims={0,1}
  %sharding_constraint.603 = bf16[1,4096,4096]{2,1,0} copy(%dot.346)
  %add.1645 = bf16[1,4096,4096]{2,1,0} add(%sharding_constraint.595, %sharding_constraint.603)
  %convert_element_type.1646 = f32[1,4096,4096]{2,1,0} convert(%add.1645)
  %square.40 = f32[1,4096,4096]{2,1,0} multiply(%convert_element_type.1646, %convert_element_type.1646)
  %reduce.358 = f32[1,4096]{1,0} reduce(%square.40, %constant.1360), dimensions={2}, to_apply=%region_220.6128
  %div.642 = f32[1,4096]{1,0} multiply(%reduce.358, %broadcast.3412)
  %add.1646 = f32[1,4096]{1,0} add(%div.642, %broadcast.3413)
  %rsqrt.101 = f32[1,4096]{1,0} rsqrt(%add.1646)
  %mul.3560 = f32[1,4096,4096]{2,1,0} broadcast(%rsqrt.101), dimensions={0,1}
  %mul.3561 = f32[1,4096,4096]{2,1,0} multiply(%convert_element_type.1646, %mul.3560)
  %convert_element_type.1647 = bf16[1,4096,4096]{2,1,0} convert(%mul.3561)
  %param.192 = bf16[4096]{0} parameter(106), sharding={replicated}
  %mul.3562 = bf16[1,4096,4096]{2,1,0} broadcast(%param.192), dimensions={2}
  %mul.3563 = bf16[1,4096,4096]{2,1,0} multiply(%convert_element_type.1647, %mul.3562)
  %sharding_constraint.604 = bf16[1,4096,4096]{2,1,0} copy(%mul.3563)
  %param.193 = bf16[512,8]{1,0} parameter(102), sharding={devices=[8,1]<=[8]}
  %all-gather.132 = bf16[4096,8]{1,0} all-gather(%param.193), channel_id=205, replica_groups=[1,8]<=[8], dimensions={0}, use_global_device_ids=true
  %dot.347 = bf16[1,4096,8]{2,1,0} dot(%sharding_constraint.604, %all-gather.132), lhs_contracting_dims={2}, rhs_contracting_dims={0}
  %sharding_constraint.605 = bf16[1,4096,8]{2,1,0} copy(%dot.347)
  %top_k.54 = bf16[4096,8]{1,0} reshape(%sharding_constraint.605)
  %top_k.55 = (bf16[4096,2]{1,0}, s32[4096,2]{1,0}) custom-call(%top_k.54), custom_call_target="TopK", called_computations={%compare_greater_than.18.6147.clone}
  %get-tuple-element.440 = bf16[4096,2]{1,0} get-tuple-element(%top_k.55), index=0
  %get-tuple-element.441 = s32[4096,2]{1,0} get-tuple-element(%top_k.55), index=1
  %add.1647 = s32[4096,2]{1,0} add(%get-tuple-element.441, %broadcast.3418)
  %sort.82 = (bf16[4096,2]{1,0}, s32[4096,2]{1,0}) sort(%get-tuple-element.440, %add.1647), dimensions={1}, is_stable=true, to_apply=%compare-value-and-index.18
  %get-tuple-element.443 = s32[4096,2]{1,0} get-tuple-element(%sort.82), index=1
  %slice.280 = s32[4096,2]{1,0} slice(%get-tuple-element.443), slice={[0:4096], [0:2]}
  %top_k.56 = s32[1,4096,2]{2,1,0} reshape(%slice.280)
  %lt.57 = pred[1,4096,2]{2,1,0} compare(%top_k.56, %broadcast.3419), direction=LT
  %add.1649 = s32[1,4096,2]{2,1,0} add(%top_k.56, %broadcast.3420)
  %select_n.346 = s32[1,4096,2]{2,1,0} select(%lt.57, %add.1649, %top_k.56)
  %broadcast_in_dim.574 = s32[1,4096,2,1]{3,2,1,0} reshape(%select_n.346)
  %concatenate.151 = s32[1,4096,2,3]{3,2,1,0} concatenate(%add.1356, %iota.1894, %broadcast_in_dim.574), dimensions={3}
  %subtract.56 = s32[1,4096,2,3]{3,2,1,0} subtract(%concatenate.151, %broadcast.3428)
  %scatter.165 = u32[1,4096,8]{2,1,0} scatter(%dynamic-slice.43, %subtract.56, %add.1401), update_window_dims={}, inserted_window_dims={0,1,2}, scatter_dims_to_operand_dims={0,1,2}, index_vector_dim=3, to_apply=%region_221.6175.clone
  %gather.18 = u32[1,4096,2]{2,1,0} gather(%scatter.165, %subtract.56), offset_dims={}, collapsed_slice_dims={0,1,2}, start_index_map={0,1,2}, index_vector_dim=3, slice_sizes={1,1,1}
  %eq.2036 = pred[1,4096,2]{2,1,0} compare(%add.1401, %gather.18), direction=EQ
  %get-tuple-element.442 = bf16[4096,2]{1,0} get-tuple-element(%sort.82), index=0
  %slice.279 = bf16[4096,2]{1,0} slice(%get-tuple-element.442), slice={[0:4096], [0:2]}
  %convert_element_type.1648 = f32[4096,2]{1,0} convert(%slice.279)
  %convert_element_type.1649 = f32[1,4096,2]{2,1,0} reshape(%convert_element_type.1648)
  %reduce.359 = f32[4096]{0} reduce(%convert_element_type.1648, %constant.1450), dimensions={1}, to_apply=%region_222.6184
  %sub.159 = f32[1,4096]{1,0} reshape(%reduce.359)
  %sub.160 = f32[1,4096,2]{2,1,0} broadcast(%sub.159), dimensions={0,1}
  %sub.161 = f32[1,4096,2]{2,1,0} subtract(%convert_element_type.1649, %sub.160)
  %exp.162 = f32[1,4096,2]{2,1,0} exponential(%sub.161)
  %reduce.360 = f32[1,4096]{1,0} reduce(%exp.162, %constant.1360), dimensions={2}, to_apply=%region_223.6193
  %div.643 = f32[1,4096,2]{2,1,0} broadcast(%reduce.360), dimensions={0,1}
  %div.644 = f32[1,4096,2]{2,1,0} divide(%exp.162, %div.643)
  %convert_element_type.1651 = bf16[1,4096,2]{2,1,0} convert(%div.644)
  %select_n.347 = bf16[1,4096,2]{2,1,0} select(%eq.2036, %convert_element_type.1651, %broadcast.3427)
  %scatter.166 = bf16[1,4096,8]{2,1,0} scatter(%broadcast.3379, %subtract.56, %select_n.347), update_window_dims={}, inserted_window_dims={0,1,2}, scatter_dims_to_operand_dims={0,1,2}, index_vector_dim=3, to_apply=%region_224.6202.clone
  %eq.2038 = s32[1,4096,2,8]{3,2,1,0} broadcast(%top_k.56), dimensions={0,1,2}
  %iota.2176 = s32[1,4096,2,8]{3,2,1,0} iota(), iota_dimension=3
  %eq.2039 = pred[1,4096,2,8]{3,2,1,0} compare(%eq.2038, %iota.2176), direction=EQ
  %convert_element_type.1652 = s32[1,4096,2,8]{3,2,1,0} convert(%eq.2039)
  %reshape.10225 = s32[1,8192,8]{2,1,0} reshape(%convert_element_type.1652)
  %sharding_constraint.606 = s32[1,8192,8]{2,1,0} copy(%reshape.10225)
  %reduce-window.18 = s32[1,8192,8]{2,1,0} reduce-window(%sharding_constraint.606, %constant.1181), window={size=1x8192x1 pad=0_0x8191_0x0_0}, to_apply=%region_225.6214
  %reshape.10227 = s32[1,4096,2,8]{3,2,1,0} reshape(%reduce-window.18)
  %sharding_constraint.607 = s32[1,4096,2,8]{3,2,1,0} copy(%reshape.10227)
  %le.38 = pred[1,4096,2,8]{3,2,1,0} compare(%sharding_constraint.607, %broadcast.3429), direction=LE
  %mul.3564 = s32[1,4096,2,8]{3,2,1,0} select(%le.38, %convert_element_type.1652, %broadcast.3430)
  %reduce.361 = s32[1,4096,8]{2,1,0} reduce(%mul.3564, %constant.1181), dimensions={2}, to_apply=%region_226.6223
  %convert_element_type.1653 = bf16[1,4096,8]{2,1,0} convert(%reduce.361)
  %mul.3565 = bf16[1,4096,8]{2,1,0} multiply(%scatter.166, %convert_element_type.1653)
  %mul.3566 = bf16[1,4096,8,1025]{3,2,1,0} broadcast(%mul.3565), dimensions={0,1,2}
  %mul.3567 = s32[1,8192,8]{2,1,0} multiply(%sharding_constraint.606, %reduce-window.18)
  %reshape.10228 = s32[1,4096,2,8]{3,2,1,0} reshape(%mul.3567)
  %reduce.362 = s32[1,4096,8]{2,1,0} reduce(%reshape.10228, %constant.1181), dimensions={2}, to_apply=%region_227.6233
  %mul.3568 = s32[1,4096,8]{2,1,0} multiply(%reduce.362, %reduce.361)
  %eq.2040 = s32[1,4096,8,1025]{3,2,1,0} broadcast(%mul.3568), dimensions={0,1,2}
  %iota.2177 = s32[1,4096,8,1025]{3,2,1,0} iota(), iota_dimension=3
  %eq.2041 = pred[1,4096,8,1025]{3,2,1,0} compare(%eq.2040, %iota.2177), direction=EQ
  %convert_element_type.1654 = s32[1,4096,8,1025]{3,2,1,0} convert(%eq.2041)
  %convert_element_type.1655 = bf16[1,4096,8,1025]{3,2,1,0} convert(%convert_element_type.1654)
  %mul.3569 = bf16[1,4096,8,1025]{3,2,1,0} multiply(%mul.3566, %convert_element_type.1655)
  %slice.281 = bf16[1,4096,8,1024]{3,2,1,0} slice(%mul.3569), slice={[0:1], [0:4096], [0:8], [1:1025]}
  %sharding_constraint.608 = bf16[1,4096,8,1024]{3,2,1,0} copy(%slice.281)
  %convert_element_type.1656 = pred[1,4096,8,1024]{3,2,1,0} compare(%slice.281, %broadcast.3431), direction=NE
  %sharding_constraint.609 = pred[1,4096,8,1024]{3,2,1,0} copy(%convert_element_type.1656)
  %dot_general.54 = bf16[1,4096,8,1024]{3,2,1,0} convert(%sharding_constraint.609)
  %dot.348 = bf16[1,8,1024,4096]{3,2,1,0} dot(%dot_general.54, %sharding_constraint.604), lhs_batch_dims={0}, lhs_contracting_dims={1}, rhs_batch_dims={0}, rhs_contracting_dims={1}
  %reshape.10231 = bf16[1,8,1,1024,4096]{4,3,2,1,0} reshape(%dot.348)
  %all-to-all.36 = bf16[1,8,1,1024,4096]{4,3,2,1,0} all-to-all(%reshape.10231), channel_id=209, replica_groups=[1,8]<=[8], dimensions={1}
  %transpose.59 = bf16[8,1,1,1024,4096]{4,3,2,0,1} transpose(%all-to-all.36), dimensions={1,0,2,3,4}
  %reshape.10232 = bf16[8,1,1024,4096]{3,2,1,0} reshape(%transpose.59)
  %transpose.60 = bf16[1,8,1024,4096]{3,2,0,1} transpose(%reshape.10232), dimensions={1,0,2,3}
  %sharding_constraint.610 = bf16[1,8,1024,4096]{3,2,0,1} copy(%transpose.60)
  %param.194 = bf16[1,4096,14336]{2,1,0} parameter(103), sharding={devices=[8,1,1]<=[8]}
  %sharding_constraint.611 = bf16[1,4096,14336]{2,1,0} copy(%param.194)
  %dot.349 = bf16[1,8,1024,14336]{3,2,1,0} dot(%sharding_constraint.610, %sharding_constraint.611), lhs_batch_dims={0}, lhs_contracting_dims={3}, rhs_batch_dims={0}, rhs_contracting_dims={1}
  %sharding_constraint.612 = bf16[1,8,1024,14336]{3,2,1,0} copy(%dot.349)
  %neg.176 = bf16[1,8,1024,14336]{3,2,1,0} negate(%sharding_constraint.612)
  %exp.163 = bf16[1,8,1024,14336]{3,2,1,0} exponential(%neg.176)
  %add.1654 = bf16[1,8,1024,14336]{3,2,1,0} add(%exp.163, %jit_silu_.0)
  %div.645 = bf16[1,8,1024,14336]{3,2,1,0} divide(%jit_silu_.0, %add.1654)
  %mul.3572 = bf16[1,8,1024,14336]{3,2,1,0} multiply(%sharding_constraint.612, %div.645)
  %param.195 = bf16[1,4096,14336]{2,1,0} parameter(104), sharding={devices=[8,1,1]<=[8]}
  %sharding_constraint.613 = bf16[1,4096,14336]{2,1,0} copy(%param.195)
  %dot.350 = bf16[1,8,1024,14336]{3,2,1,0} dot(%sharding_constraint.610, %sharding_constraint.613), lhs_batch_dims={0}, lhs_contracting_dims={3}, rhs_batch_dims={0}, rhs_contracting_dims={1}
  %sharding_constraint.614 = bf16[1,8,1024,14336]{3,2,1,0} copy(%dot.350)
  %mul.3575 = bf16[1,8,1024,14336]{3,2,1,0} multiply(%mul.3572, %sharding_constraint.614)
  %param.196 = bf16[1,14336,4096]{2,1,0} parameter(105), sharding={devices=[8,1,1]<=[8]}
  %sharding_constraint.615 = bf16[1,14336,4096]{2,1,0} copy(%param.196)
  %dot.351 = bf16[1,8,1024,4096]{3,2,1,0} dot(%mul.3575, %sharding_constraint.615), lhs_batch_dims={0}, lhs_contracting_dims={3}, rhs_batch_dims={0}, rhs_contracting_dims={1}
  %sharding_constraint.616 = bf16[1,8,1024,4096]{3,2,1,0} copy(%dot.351)
  %reshape.10235 = bf16[1,8,1,1024,4096]{4,3,2,1,0} reshape(%sharding_constraint.616)
  %all-to-all.37 = bf16[1,8,1,1024,4096]{4,3,2,1,0} all-to-all(%reshape.10235), channel_id=210, replica_groups=[1,8]<=[8], dimensions={1}
  %transpose.61 = bf16[8,1,1,1024,4096]{4,3,2,0,1} transpose(%all-to-all.37), dimensions={1,0,2,3,4}
  %reshape.10236 = bf16[8,1,1024,4096]{3,2,1,0} reshape(%transpose.61)
  %dot.352 = bf16[1,4096,4096]{2,1,0} dot(%sharding_constraint.608, %reshape.10236), lhs_batch_dims={0}, lhs_contracting_dims={3,2}, rhs_batch_dims={1}, rhs_contracting_dims={2,0}
  %sharding_constraint.617 = bf16[1,4096,4096]{2,1,0} copy(%dot.352)
  %add.1655 = bf16[1,4096,4096]{2,1,0} add(%sharding_constraint.617, %add.1645)
  %sharding_constraint.618 = bf16[1,4096,4096]{2,1,0} copy(%add.1655)
  %sharding_constraint.619 = bf16[1,4096,4096]{2,1,0} copy(%sharding_constraint.618)
  %convert_element_type.1657 = f32[1,4096,4096]{2,1,0} convert(%sharding_constraint.619)
  %square.41 = f32[1,4096,4096]{2,1,0} multiply(%convert_element_type.1657, %convert_element_type.1657)
  %reduce.363 = f32[1,4096]{1,0} reduce(%square.41, %constant.1360), dimensions={2}, to_apply=%region_228.6275
  %div.646 = f32[1,4096]{1,0} multiply(%reduce.363, %broadcast.3412)
  %add.1656 = f32[1,4096]{1,0} add(%div.646, %broadcast.3413)
  %rsqrt.102 = f32[1,4096]{1,0} rsqrt(%add.1656)
  %mul.3576 = f32[1,4096,4096]{2,1,0} broadcast(%rsqrt.102), dimensions={0,1}
  %mul.3577 = f32[1,4096,4096]{2,1,0} multiply(%convert_element_type.1657, %mul.3576)
  %convert_element_type.1659 = bf16[1,4096,4096]{2,1,0} convert(%mul.3577)
  %param.197 = bf16[4096]{0} parameter(117), sharding={replicated}
  %mul.3578 = bf16[1,4096,4096]{2,1,0} broadcast(%param.197), dimensions={2}
  %mul.3579 = bf16[1,4096,4096]{2,1,0} multiply(%convert_element_type.1659, %mul.3578)
  %sharding_constraint.620 = bf16[1,4096,4096]{2,1,0} copy(%mul.3579)
  %sharding_constraint.621 = bf16[1,4096,4096]{2,1,0} copy(%sharding_constraint.620)
  %param.198 = bf16[512,32,128]{2,1,0} parameter(120), sharding={devices=[8,1,1]<=[8]}
  %all-gather.134 = bf16[4096,32,128]{2,1,0} all-gather(%param.198), channel_id=211, replica_groups=[1,8]<=[8], dimensions={0}, use_global_device_ids=true
  %dot.353 = bf16[1,4096,32,128]{3,2,1,0} dot(%sharding_constraint.621, %all-gather.134), lhs_contracting_dims={2}, rhs_contracting_dims={0}
  %slice.282 = bf16[1,4096,32,64]{3,2,1,0} slice(%dot.353), slice={[0:1], [0:4096], [0:32], [0:64]}
  %mul.3584 = bf16[1,4096,32,64]{3,2,1,0} multiply(%slice.282, %mul.2435)
  %slice.283 = bf16[1,4096,32,64]{3,2,1,0} slice(%dot.353), slice={[0:1], [0:4096], [0:32], [64:128]}
  %mul.3587 = bf16[1,4096,32,64]{3,2,1,0} multiply(%slice.283, %mul.2438)
  %sub.162 = bf16[1,4096,32,64]{3,2,1,0} subtract(%mul.3584, %mul.3587)
  %mul.3593 = bf16[1,4096,32,64]{3,2,1,0} multiply(%slice.283, %mul.2435)
  %mul.3599 = bf16[1,4096,32,64]{3,2,1,0} multiply(%slice.282, %mul.2438)
  %add.1657 = bf16[1,4096,32,64]{3,2,1,0} add(%mul.3593, %mul.3599)
  %concatenate.155 = bf16[1,4096,32,128]{3,2,1,0} concatenate(%sub.162, %add.1657), dimensions={3}
  %sharding_constraint.622 = bf16[1,4096,32,128]{3,2,1,0} copy(%concatenate.155)
  %param.199 = bf16[512,8,128]{2,1,0} parameter(118), sharding={devices=[8,1,1]<=[8]}
  %all-gather.135 = bf16[4096,8,128]{2,1,0} all-gather(%param.199), channel_id=212, replica_groups=[1,8]<=[8], dimensions={0}, use_global_device_ids=true
  %dot.354 = bf16[1,4096,8,128]{3,2,1,0} dot(%sharding_constraint.621, %all-gather.135), lhs_contracting_dims={2}, rhs_contracting_dims={0}
  %slice.284 = bf16[1,4096,8,64]{3,2,1,0} slice(%dot.354), slice={[0:1], [0:4096], [0:8], [0:64]}
  %mul.3610 = bf16[1,4096,8,64]{3,2,1,0} multiply(%slice.284, %mul.2456)
  %slice.285 = bf16[1,4096,8,64]{3,2,1,0} slice(%dot.354), slice={[0:1], [0:4096], [0:8], [64:128]}
  %mul.3614 = bf16[1,4096,8,64]{3,2,1,0} multiply(%slice.285, %mul.2460)
  %sub.163 = bf16[1,4096,8,64]{3,2,1,0} subtract(%mul.3610, %mul.3614)
  %mul.3622 = bf16[1,4096,8,64]{3,2,1,0} multiply(%slice.285, %mul.2456)
  %mul.3628 = bf16[1,4096,8,64]{3,2,1,0} multiply(%slice.284, %mul.2460)
  %add.1658 = bf16[1,4096,8,64]{3,2,1,0} add(%mul.3622, %mul.3628)
  %concatenate.156 = bf16[1,4096,8,128]{3,2,1,0} concatenate(%sub.163, %add.1658), dimensions={3}
  %sharding_constraint.624 = bf16[1,4096,8,128]{3,2,1,0} copy(%concatenate.156)
  %param.200 = bf16[512,8,128]{2,1,0} parameter(121), sharding={devices=[8,1,1]<=[8]}
  %all-gather.136 = bf16[4096,8,128]{2,1,0} all-gather(%param.200), channel_id=213, replica_groups=[1,8]<=[8], dimensions={0}, use_global_device_ids=true
  %dot.355 = bf16[1,4096,8,128]{3,2,1,0} dot(%sharding_constraint.621, %all-gather.136), lhs_contracting_dims={2}, rhs_contracting_dims={0}
  %sharding_constraint.625 = bf16[1,4096,8,128]{3,2,1,0} copy(%dot.355)
  %te_fused_attn_forward_ffi.76 = (bf16[1,4096,32,128]{3,2,1,0}, f32[1,32,4096,1]{3,2,1,0}, u32[2,4]{1,0}, u8[48]{0}) custom-call(%sharding_constraint.622, %sharding_constraint.624, %sharding_constraint.625, %constant.1403, %dynamic-slice.38, /*index=5*/%concatenate.31, %concatenate.36, %constant.1416, %constant.1416, %constant.1416, /*index=10*/%constant.1416, %constant.1416, %constant.1416), custom_call_target="te_fused_attn_forward_ffi", operand_layout_constraints={bf16[1,4096,32,128]{3,2,1,0}, bf16[1,4096,8,128]{3,2,1,0}, bf16[1,4096,8,128]{3,2,1,0}, bf16[0]{0}, u32[2]{0}, s32[2]{0}, s32[2]{0}, f32[0]{0}, f32[0]{0}, f32[0]{0}, f32[0]{0}, f32[0]{0}, f32[0]{0}}, api_version=API_VERSION_TYPED_FFI, backend_config={attn_heads = 32 : i64, bias_batch = 0 : i64, bias_heads = 0 : i64, bias_type = 0 : i64, deterministic = false, dropout_probability = 0.000000e+00 : f64, input_batch = 1 : i64, is_training = true, kv_max_seqlen = 4096 : i64, mask_type = 3 : i64, max_segments_per_seq = 1 : i64, num_gqa_groups = 8 : i64, q_max_seqlen = 4096 : i64, qk_head_dim = 128 : i64, qkv_layout = 9 : i64, scaling_factor = 1.000000e+00 : f64, v_head_dim = 128 : i64, window_size_left = -1 : i64, window_size_right = -1 : i64}
  %get-tuple-element.449 = bf16[1,4096,32,128]{3,2,1,0} get-tuple-element(%te_fused_attn_forward_ffi.76), index=0
  %sharding_constraint.626 = bf16[1,4096,32,128]{3,2,1,0} copy(%get-tuple-element.449)
  %param.201 = bf16[32,128,512]{2,1,0} parameter(119), sharding={devices=[1,1,8]<=[8]}
  %all-gather.138 = bf16[32,128,4096]{2,1,0} all-gather(%param.201), channel_id=215, replica_groups=[1,8]<=[8], dimensions={2}, use_global_device_ids=true
  %dot.356 = bf16[1,4096,4096]{2,1,0} dot(%sharding_constraint.626, %all-gather.138), lhs_contracting_dims={2,3}, rhs_contracting_dims={0,1}
  %sharding_constraint.627 = bf16[1,4096,4096]{2,1,0} copy(%dot.356)
  %add.1659 = bf16[1,4096,4096]{2,1,0} add(%sharding_constraint.619, %sharding_constraint.627)
  %convert_element_type.1671 = f32[1,4096,4096]{2,1,0} convert(%add.1659)
  %square.42 = f32[1,4096,4096]{2,1,0} multiply(%convert_element_type.1671, %convert_element_type.1671)
  %reduce.367 = f32[1,4096]{1,0} reduce(%square.42, %constant.1360), dimensions={2}, to_apply=%region_232.6399
  %div.655 = f32[1,4096]{1,0} multiply(%reduce.367, %broadcast.3412)
  %add.1661 = f32[1,4096]{1,0} add(%div.655, %broadcast.3413)
  %rsqrt.103 = f32[1,4096]{1,0} rsqrt(%add.1661)
  %mul.3632 = f32[1,4096,4096]{2,1,0} broadcast(%rsqrt.103), dimensions={0,1}
  %mul.3639 = f32[1,4096,4096]{2,1,0} multiply(%convert_element_type.1671, %mul.3632)
  %convert_element_type.1672 = bf16[1,4096,4096]{2,1,0} convert(%mul.3639)
  %param.202 = bf16[4096]{0} parameter(116), sharding={replicated}
  %mul.3640 = bf16[1,4096,4096]{2,1,0} broadcast(%param.202), dimensions={2}
  %mul.3641 = bf16[1,4096,4096]{2,1,0} multiply(%convert_element_type.1672, %mul.3640)
  %sharding_constraint.628 = bf16[1,4096,4096]{2,1,0} copy(%mul.3641)
  %param.203 = bf16[512,8]{1,0} parameter(112), sharding={devices=[8,1]<=[8]}
  %all-gather.139 = bf16[4096,8]{1,0} all-gather(%param.203), channel_id=216, replica_groups=[1,8]<=[8], dimensions={0}, use_global_device_ids=true
  %dot.357 = bf16[1,4096,8]{2,1,0} dot(%sharding_constraint.628, %all-gather.139), lhs_contracting_dims={2}, rhs_contracting_dims={0}
  %sharding_constraint.629 = bf16[1,4096,8]{2,1,0} copy(%dot.357)
  %top_k.57 = bf16[4096,8]{1,0} reshape(%sharding_constraint.629)
  %top_k.58 = (bf16[4096,2]{1,0}, s32[4096,2]{1,0}) custom-call(%top_k.57), custom_call_target="TopK", called_computations={%compare_greater_than.19.6418.clone}
  %get-tuple-element.450 = bf16[4096,2]{1,0} get-tuple-element(%top_k.58), index=0
  %get-tuple-element.451 = s32[4096,2]{1,0} get-tuple-element(%top_k.58), index=1
  %add.1662 = s32[4096,2]{1,0} add(%get-tuple-element.451, %broadcast.3418)
  %sort.83 = (bf16[4096,2]{1,0}, s32[4096,2]{1,0}) sort(%get-tuple-element.450, %add.1662), dimensions={1}, is_stable=true, to_apply=%compare-value-and-index.19
  %get-tuple-element.453 = s32[4096,2]{1,0} get-tuple-element(%sort.83), index=1
  %slice.288 = s32[4096,2]{1,0} slice(%get-tuple-element.453), slice={[0:4096], [0:2]}
  %top_k.59 = s32[1,4096,2]{2,1,0} reshape(%slice.288)
  %lt.60 = pred[1,4096,2]{2,1,0} compare(%top_k.59, %broadcast.3419), direction=LT
  %add.1663 = s32[1,4096,2]{2,1,0} add(%top_k.59, %broadcast.3420)
  %select_n.351 = s32[1,4096,2]{2,1,0} select(%lt.60, %add.1663, %top_k.59)
  %broadcast_in_dim.577 = s32[1,4096,2,1]{3,2,1,0} reshape(%select_n.351)
  %concatenate.159 = s32[1,4096,2,3]{3,2,1,0} concatenate(%add.1356, %iota.1892, %broadcast_in_dim.577), dimensions={3}
  %subtract.59 = s32[1,4096,2,3]{3,2,1,0} subtract(%concatenate.159, %broadcast.3428)
  %scatter.167 = u32[1,4096,8]{2,1,0} scatter(%dynamic-slice.43, %subtract.59, %add.1401), update_window_dims={}, inserted_window_dims={0,1,2}, scatter_dims_to_operand_dims={0,1,2}, index_vector_dim=3, to_apply=%region_233.6446.clone
  %gather.19 = u32[1,4096,2]{2,1,0} gather(%scatter.167, %subtract.59), offset_dims={}, collapsed_slice_dims={0,1,2}, start_index_map={0,1,2}, index_vector_dim=3, slice_sizes={1,1,1}
  %eq.2045 = pred[1,4096,2]{2,1,0} compare(%add.1401, %gather.19), direction=EQ
  %get-tuple-element.452 = bf16[4096,2]{1,0} get-tuple-element(%sort.83), index=0
  %slice.287 = bf16[4096,2]{1,0} slice(%get-tuple-element.452), slice={[0:4096], [0:2]}
  %convert_element_type.1673 = f32[4096,2]{1,0} convert(%slice.287)
  %convert_element_type.1674 = f32[1,4096,2]{2,1,0} reshape(%convert_element_type.1673)
  %reduce.368 = f32[4096]{0} reduce(%convert_element_type.1673, %constant.1450), dimensions={1}, to_apply=%region_234.6455
  %sub.164 = f32[1,4096]{1,0} reshape(%reduce.368)
  %sub.165 = f32[1,4096,2]{2,1,0} broadcast(%sub.164), dimensions={0,1}
  %sub.166 = f32[1,4096,2]{2,1,0} subtract(%convert_element_type.1674, %sub.165)
  %exp.164 = f32[1,4096,2]{2,1,0} exponential(%sub.166)
  %reduce.369 = f32[1,4096]{1,0} reduce(%exp.164, %constant.1360), dimensions={2}, to_apply=%region_235.6464
  %div.656 = f32[1,4096,2]{2,1,0} broadcast(%reduce.369), dimensions={0,1}
  %div.657 = f32[1,4096,2]{2,1,0} divide(%exp.164, %div.656)
  %convert_element_type.1676 = bf16[1,4096,2]{2,1,0} convert(%div.657)
  %select_n.352 = bf16[1,4096,2]{2,1,0} select(%eq.2045, %convert_element_type.1676, %broadcast.3427)
  %scatter.168 = bf16[1,4096,8]{2,1,0} scatter(%broadcast.3379, %subtract.59, %select_n.352), update_window_dims={}, inserted_window_dims={0,1,2}, scatter_dims_to_operand_dims={0,1,2}, index_vector_dim=3, to_apply=%region_236.6473.clone
  %eq.2047 = s32[1,4096,2,8]{3,2,1,0} broadcast(%top_k.59), dimensions={0,1,2}
  %iota.2188 = s32[1,4096,2,8]{3,2,1,0} iota(), iota_dimension=3
  %eq.2048 = pred[1,4096,2,8]{3,2,1,0} compare(%eq.2047, %iota.2188), direction=EQ
  %convert_element_type.1678 = s32[1,4096,2,8]{3,2,1,0} convert(%eq.2048)
  %reshape.10277 = s32[1,8192,8]{2,1,0} reshape(%convert_element_type.1678)
  %sharding_constraint.630 = s32[1,8192,8]{2,1,0} copy(%reshape.10277)
  %reduce-window.19 = s32[1,8192,8]{2,1,0} reduce-window(%sharding_constraint.630, %constant.1181), window={size=1x8192x1 pad=0_0x8191_0x0_0}, to_apply=%region_237.6485
  %reshape.10280 = s32[1,4096,2,8]{3,2,1,0} reshape(%reduce-window.19)
  %sharding_constraint.631 = s32[1,4096,2,8]{3,2,1,0} copy(%reshape.10280)
  %le.40 = pred[1,4096,2,8]{3,2,1,0} compare(%sharding_constraint.631, %broadcast.3429), direction=LE
  %mul.3642 = s32[1,4096,2,8]{3,2,1,0} select(%le.40, %convert_element_type.1678, %broadcast.3430)
  %reduce.370 = s32[1,4096,8]{2,1,0} reduce(%mul.3642, %constant.1181), dimensions={2}, to_apply=%region_238.6494
  %convert_element_type.1679 = bf16[1,4096,8]{2,1,0} convert(%reduce.370)
  %mul.3643 = bf16[1,4096,8]{2,1,0} multiply(%scatter.168, %convert_element_type.1679)
  %mul.3644 = bf16[1,4096,8,1025]{3,2,1,0} broadcast(%mul.3643), dimensions={0,1,2}
  %mul.3645 = s32[1,8192,8]{2,1,0} multiply(%sharding_constraint.630, %reduce-window.19)
  %reshape.10281 = s32[1,4096,2,8]{3,2,1,0} reshape(%mul.3645)
  %reduce.371 = s32[1,4096,8]{2,1,0} reduce(%reshape.10281, %constant.1181), dimensions={2}, to_apply=%region_239.6504
  %mul.3646 = s32[1,4096,8]{2,1,0} multiply(%reduce.371, %reduce.370)
  %eq.2049 = s32[1,4096,8,1025]{3,2,1,0} broadcast(%mul.3646), dimensions={0,1,2}
  %iota.2189 = s32[1,4096,8,1025]{3,2,1,0} iota(), iota_dimension=3
  %eq.2050 = pred[1,4096,8,1025]{3,2,1,0} compare(%eq.2049, %iota.2189), direction=EQ
  %convert_element_type.1680 = s32[1,4096,8,1025]{3,2,1,0} convert(%eq.2050)
  %convert_element_type.1681 = bf16[1,4096,8,1025]{3,2,1,0} convert(%convert_element_type.1680)
  %mul.3647 = bf16[1,4096,8,1025]{3,2,1,0} multiply(%mul.3644, %convert_element_type.1681)
  %slice.289 = bf16[1,4096,8,1024]{3,2,1,0} slice(%mul.3647), slice={[0:1], [0:4096], [0:8], [1:1025]}
  %sharding_constraint.632 = bf16[1,4096,8,1024]{3,2,1,0} copy(%slice.289)
  %convert_element_type.1683 = pred[1,4096,8,1024]{3,2,1,0} compare(%slice.289, %broadcast.3431), direction=NE
  %sharding_constraint.633 = pred[1,4096,8,1024]{3,2,1,0} copy(%convert_element_type.1683)
  %dot_general.55 = bf16[1,4096,8,1024]{3,2,1,0} convert(%sharding_constraint.633)
  %dot.358 = bf16[1,8,1024,4096]{3,2,1,0} dot(%dot_general.55, %sharding_constraint.628), lhs_batch_dims={0}, lhs_contracting_dims={1}, rhs_batch_dims={0}, rhs_contracting_dims={1}
  %reshape.10285 = bf16[1,8,1,1024,4096]{4,3,2,1,0} reshape(%dot.358)
  %all-to-all.38 = bf16[1,8,1,1024,4096]{4,3,2,1,0} all-to-all(%reshape.10285), channel_id=220, replica_groups=[1,8]<=[8], dimensions={1}
  %transpose.62 = bf16[8,1,1,1024,4096]{4,3,2,0,1} transpose(%all-to-all.38), dimensions={1,0,2,3,4}
  %reshape.10286 = bf16[8,1,1024,4096]{3,2,1,0} reshape(%transpose.62)
  %transpose.63 = bf16[1,8,1024,4096]{3,2,0,1} transpose(%reshape.10286), dimensions={1,0,2,3}
  %sharding_constraint.634 = bf16[1,8,1024,4096]{3,2,0,1} copy(%transpose.63)
  %param.204 = bf16[1,4096,14336]{2,1,0} parameter(113), sharding={devices=[8,1,1]<=[8]}
  %sharding_constraint.635 = bf16[1,4096,14336]{2,1,0} copy(%param.204)
  %dot.359 = bf16[1,8,1024,14336]{3,2,1,0} dot(%sharding_constraint.634, %sharding_constraint.635), lhs_batch_dims={0}, lhs_contracting_dims={3}, rhs_batch_dims={0}, rhs_contracting_dims={1}
  %sharding_constraint.636 = bf16[1,8,1024,14336]{3,2,1,0} copy(%dot.359)
  %neg.177 = bf16[1,8,1024,14336]{3,2,1,0} negate(%sharding_constraint.636)
  %exp.165 = bf16[1,8,1024,14336]{3,2,1,0} exponential(%neg.177)
  %add.1668 = bf16[1,8,1024,14336]{3,2,1,0} add(%exp.165, %jit_silu_.0)
  %div.658 = bf16[1,8,1024,14336]{3,2,1,0} divide(%jit_silu_.0, %add.1668)
  %mul.3648 = bf16[1,8,1024,14336]{3,2,1,0} multiply(%sharding_constraint.636, %div.658)
  %param.205 = bf16[1,4096,14336]{2,1,0} parameter(114), sharding={devices=[8,1,1]<=[8]}
  %sharding_constraint.637 = bf16[1,4096,14336]{2,1,0} copy(%param.205)
  %dot.360 = bf16[1,8,1024,14336]{3,2,1,0} dot(%sharding_constraint.634, %sharding_constraint.637), lhs_batch_dims={0}, lhs_contracting_dims={3}, rhs_batch_dims={0}, rhs_contracting_dims={1}
  %sharding_constraint.638 = bf16[1,8,1024,14336]{3,2,1,0} copy(%dot.360)
  %mul.3649 = bf16[1,8,1024,14336]{3,2,1,0} multiply(%mul.3648, %sharding_constraint.638)
  %param.206 = bf16[1,14336,4096]{2,1,0} parameter(115), sharding={devices=[8,1,1]<=[8]}
  %sharding_constraint.639 = bf16[1,14336,4096]{2,1,0} copy(%param.206)
  %dot.361 = bf16[1,8,1024,4096]{3,2,1,0} dot(%mul.3649, %sharding_constraint.639), lhs_batch_dims={0}, lhs_contracting_dims={3}, rhs_batch_dims={0}, rhs_contracting_dims={1}
  %sharding_constraint.640 = bf16[1,8,1024,4096]{3,2,1,0} copy(%dot.361)
  %reshape.10290 = bf16[1,8,1,1024,4096]{4,3,2,1,0} reshape(%sharding_constraint.640)
  %all-to-all.39 = bf16[1,8,1,1024,4096]{4,3,2,1,0} all-to-all(%reshape.10290), channel_id=221, replica_groups=[1,8]<=[8], dimensions={1}
  %transpose.64 = bf16[8,1,1,1024,4096]{4,3,2,0,1} transpose(%all-to-all.39), dimensions={1,0,2,3,4}
  %reshape.10291 = bf16[8,1,1024,4096]{3,2,1,0} reshape(%transpose.64)
  %dot.362 = bf16[1,4096,4096]{2,1,0} dot(%sharding_constraint.632, %reshape.10291), lhs_batch_dims={0}, lhs_contracting_dims={3,2}, rhs_batch_dims={1}, rhs_contracting_dims={2,0}
  %sharding_constraint.641 = bf16[1,4096,4096]{2,1,0} copy(%dot.362)
  %add.1669 = bf16[1,4096,4096]{2,1,0} add(%sharding_constraint.641, %add.1659)
  %sharding_constraint.642 = bf16[1,4096,4096]{2,1,0} copy(%add.1669)
  %sharding_constraint.643 = bf16[1,4096,4096]{2,1,0} copy(%sharding_constraint.642)
  %convert_element_type.1684 = f32[1,4096,4096]{2,1,0} convert(%sharding_constraint.643)
  %square.43 = f32[1,4096,4096]{2,1,0} multiply(%convert_element_type.1684, %convert_element_type.1684)
  %reduce.372 = f32[1,4096]{1,0} reduce(%square.43, %constant.1360), dimensions={2}, to_apply=%region_240.6546
  %div.659 = f32[1,4096]{1,0} multiply(%reduce.372, %broadcast.3412)
  %add.1670 = f32[1,4096]{1,0} add(%div.659, %broadcast.3413)
  %rsqrt.104 = f32[1,4096]{1,0} rsqrt(%add.1670)
  %mul.3650 = f32[1,4096,4096]{2,1,0} broadcast(%rsqrt.104), dimensions={0,1}
  %mul.3651 = f32[1,4096,4096]{2,1,0} multiply(%convert_element_type.1684, %mul.3650)
  %convert_element_type.1685 = bf16[1,4096,4096]{2,1,0} convert(%mul.3651)
  %param.207 = bf16[4096]{0} parameter(137), sharding={replicated}
  %mul.3652 = bf16[1,4096,4096]{2,1,0} broadcast(%param.207), dimensions={2}
  %mul.3653 = bf16[1,4096,4096]{2,1,0} multiply(%convert_element_type.1685, %mul.3652)
  %sharding_constraint.644 = bf16[1,4096,4096]{2,1,0} copy(%mul.3653)
  %sharding_constraint.645 = bf16[1,4096,4096]{2,1,0} copy(%sharding_constraint.644)
  %param.208 = bf16[512,32,128]{2,1,0} parameter(140), sharding={devices=[8,1,1]<=[8]}
  %all-gather.141 = bf16[4096,32,128]{2,1,0} all-gather(%param.208), channel_id=222, replica_groups=[1,8]<=[8], dimensions={0}, use_global_device_ids=true
  %dot.363 = bf16[1,4096,32,128]{3,2,1,0} dot(%sharding_constraint.645, %all-gather.141), lhs_contracting_dims={2}, rhs_contracting_dims={0}
  %slice.290 = bf16[1,4096,32,64]{3,2,1,0} slice(%dot.363), slice={[0:1], [0:4096], [0:32], [0:64]}
  %mul.3661 = bf16[1,4096,32,64]{3,2,1,0} multiply(%slice.290, %mul.2435)
  %slice.291 = bf16[1,4096,32,64]{3,2,1,0} slice(%dot.363), slice={[0:1], [0:4096], [0:32], [64:128]}
  %mul.3668 = bf16[1,4096,32,64]{3,2,1,0} multiply(%slice.291, %mul.2438)
  %sub.167 = bf16[1,4096,32,64]{3,2,1,0} subtract(%mul.3661, %mul.3668)
  %mul.3671 = bf16[1,4096,32,64]{3,2,1,0} multiply(%slice.291, %mul.2435)
  %mul.3675 = bf16[1,4096,32,64]{3,2,1,0} multiply(%slice.290, %mul.2438)
  %add.1672 = bf16[1,4096,32,64]{3,2,1,0} add(%mul.3671, %mul.3675)
  %concatenate.163 = bf16[1,4096,32,128]{3,2,1,0} concatenate(%sub.167, %add.1672), dimensions={3}
  %sharding_constraint.646 = bf16[1,4096,32,128]{3,2,1,0} copy(%concatenate.163)
  %param.209 = bf16[512,8,128]{2,1,0} parameter(138), sharding={devices=[8,1,1]<=[8]}
  %all-gather.142 = bf16[4096,8,128]{2,1,0} all-gather(%param.209), channel_id=223, replica_groups=[1,8]<=[8], dimensions={0}, use_global_device_ids=true
  %dot.364 = bf16[1,4096,8,128]{3,2,1,0} dot(%sharding_constraint.645, %all-gather.142), lhs_contracting_dims={2}, rhs_contracting_dims={0}
  %slice.292 = bf16[1,4096,8,64]{3,2,1,0} slice(%dot.364), slice={[0:1], [0:4096], [0:8], [0:64]}
  %mul.3679 = bf16[1,4096,8,64]{3,2,1,0} multiply(%slice.292, %mul.2456)
  %slice.293 = bf16[1,4096,8,64]{3,2,1,0} slice(%dot.364), slice={[0:1], [0:4096], [0:8], [64:128]}
  %mul.3682 = bf16[1,4096,8,64]{3,2,1,0} multiply(%slice.293, %mul.2460)
  %sub.168 = bf16[1,4096,8,64]{3,2,1,0} subtract(%mul.3679, %mul.3682)
  %mul.3685 = bf16[1,4096,8,64]{3,2,1,0} multiply(%slice.293, %mul.2456)
  %mul.3688 = bf16[1,4096,8,64]{3,2,1,0} multiply(%slice.292, %mul.2460)
  %add.1673 = bf16[1,4096,8,64]{3,2,1,0} add(%mul.3685, %mul.3688)
  %concatenate.164 = bf16[1,4096,8,128]{3,2,1,0} concatenate(%sub.168, %add.1673), dimensions={3}
  %sharding_constraint.648 = bf16[1,4096,8,128]{3,2,1,0} copy(%concatenate.164)
  %param.210 = bf16[512,8,128]{2,1,0} parameter(141), sharding={devices=[8,1,1]<=[8]}
  %all-gather.143 = bf16[4096,8,128]{2,1,0} all-gather(%param.210), channel_id=224, replica_groups=[1,8]<=[8], dimensions={0}, use_global_device_ids=true
  %dot.365 = bf16[1,4096,8,128]{3,2,1,0} dot(%sharding_constraint.645, %all-gather.143), lhs_contracting_dims={2}, rhs_contracting_dims={0}
  %sharding_constraint.649 = bf16[1,4096,8,128]{3,2,1,0} copy(%dot.365)
  %te_fused_attn_forward_ffi.80 = (bf16[1,4096,32,128]{3,2,1,0}, f32[1,32,4096,1]{3,2,1,0}, u32[2,4]{1,0}, u8[48]{0}) custom-call(%sharding_constraint.646, %sharding_constraint.648, %sharding_constraint.649, %constant.1403, %dynamic-slice.38, /*index=5*/%concatenate.31, %concatenate.36, %constant.1416, %constant.1416, %constant.1416, /*index=10*/%constant.1416, %constant.1416, %constant.1416), custom_call_target="te_fused_attn_forward_ffi", operand_layout_constraints={bf16[1,4096,32,128]{3,2,1,0}, bf16[1,4096,8,128]{3,2,1,0}, bf16[1,4096,8,128]{3,2,1,0}, bf16[0]{0}, u32[2]{0}, s32[2]{0}, s32[2]{0}, f32[0]{0}, f32[0]{0}, f32[0]{0}, f32[0]{0}, f32[0]{0}, f32[0]{0}}, api_version=API_VERSION_TYPED_FFI, backend_config={attn_heads = 32 : i64, bias_batch = 0 : i64, bias_heads = 0 : i64, bias_type = 0 : i64, deterministic = false, dropout_probability = 0.000000e+00 : f64, input_batch = 1 : i64, is_training = true, kv_max_seqlen = 4096 : i64, mask_type = 3 : i64, max_segments_per_seq = 1 : i64, num_gqa_groups = 8 : i64, q_max_seqlen = 4096 : i64, qk_head_dim = 128 : i64, qkv_layout = 9 : i64, scaling_factor = 1.000000e+00 : f64, v_head_dim = 128 : i64, window_size_left = -1 : i64, window_size_right = -1 : i64}
  %get-tuple-element.459 = bf16[1,4096,32,128]{3,2,1,0} get-tuple-element(%te_fused_attn_forward_ffi.80), index=0
  %sharding_constraint.650 = bf16[1,4096,32,128]{3,2,1,0} copy(%get-tuple-element.459)
  %param.211 = bf16[32,128,512]{2,1,0} parameter(139), sharding={devices=[1,1,8]<=[8]}
  %all-gather.145 = bf16[32,128,4096]{2,1,0} all-gather(%param.211), channel_id=226, replica_groups=[1,8]<=[8], dimensions={2}, use_global_device_ids=true
  %dot.366 = bf16[1,4096,4096]{2,1,0} dot(%sharding_constraint.650, %all-gather.145), lhs_contracting_dims={2,3}, rhs_contracting_dims={0,1}
  %sharding_constraint.651 = bf16[1,4096,4096]{2,1,0} copy(%dot.366)
  %add.1674 = bf16[1,4096,4096]{2,1,0} add(%sharding_constraint.643, %sharding_constraint.651)
  %convert_element_type.1699 = f32[1,4096,4096]{2,1,0} convert(%add.1674)
  %square.44 = f32[1,4096,4096]{2,1,0} multiply(%convert_element_type.1699, %convert_element_type.1699)
  %reduce.376 = f32[1,4096]{1,0} reduce(%square.44, %constant.1360), dimensions={2}, to_apply=%region_244.6670
  %div.668 = f32[1,4096]{1,0} multiply(%reduce.376, %broadcast.3412)
  %add.1675 = f32[1,4096]{1,0} add(%div.668, %broadcast.3413)
  %rsqrt.105 = f32[1,4096]{1,0} rsqrt(%add.1675)
  %mul.3689 = f32[1,4096,4096]{2,1,0} broadcast(%rsqrt.105), dimensions={0,1}
  %mul.3690 = f32[1,4096,4096]{2,1,0} multiply(%convert_element_type.1699, %mul.3689)
  %convert_element_type.1700 = bf16[1,4096,4096]{2,1,0} convert(%mul.3690)
  %param.212 = bf16[4096]{0} parameter(136), sharding={replicated}
  %mul.3691 = bf16[1,4096,4096]{2,1,0} broadcast(%param.212), dimensions={2}
  %mul.3692 = bf16[1,4096,4096]{2,1,0} multiply(%convert_element_type.1700, %mul.3691)
  %sharding_constraint.652 = bf16[1,4096,4096]{2,1,0} copy(%mul.3692)
  %param.213 = bf16[512,8]{1,0} parameter(132), sharding={devices=[8,1]<=[8]}
  %all-gather.146 = bf16[4096,8]{1,0} all-gather(%param.213), channel_id=227, replica_groups=[1,8]<=[8], dimensions={0}, use_global_device_ids=true
  %dot.367 = bf16[1,4096,8]{2,1,0} dot(%sharding_constraint.652, %all-gather.146), lhs_contracting_dims={2}, rhs_contracting_dims={0}
  %sharding_constraint.653 = bf16[1,4096,8]{2,1,0} copy(%dot.367)
  %top_k.60 = bf16[4096,8]{1,0} reshape(%sharding_constraint.653)
  %top_k.61 = (bf16[4096,2]{1,0}, s32[4096,2]{1,0}) custom-call(%top_k.60), custom_call_target="TopK", called_computations={%compare_greater_than.20.6689.clone}
  %get-tuple-element.460 = bf16[4096,2]{1,0} get-tuple-element(%top_k.61), index=0
  %get-tuple-element.461 = s32[4096,2]{1,0} get-tuple-element(%top_k.61), index=1
  %add.1677 = s32[4096,2]{1,0} add(%get-tuple-element.461, %broadcast.3418)
  %sort.84 = (bf16[4096,2]{1,0}, s32[4096,2]{1,0}) sort(%get-tuple-element.460, %add.1677), dimensions={1}, is_stable=true, to_apply=%compare-value-and-index.20
  %get-tuple-element.463 = s32[4096,2]{1,0} get-tuple-element(%sort.84), index=1
  %slice.296 = s32[4096,2]{1,0} slice(%get-tuple-element.463), slice={[0:4096], [0:2]}
  %top_k.62 = s32[1,4096,2]{2,1,0} reshape(%slice.296)
  %lt.63 = pred[1,4096,2]{2,1,0} compare(%top_k.62, %broadcast.3419), direction=LT
  %add.1678 = s32[1,4096,2]{2,1,0} add(%top_k.62, %broadcast.3420)
  %select_n.356 = s32[1,4096,2]{2,1,0} select(%lt.63, %add.1678, %top_k.62)
  %broadcast_in_dim.580 = s32[1,4096,2,1]{3,2,1,0} reshape(%select_n.356)
  %concatenate.167 = s32[1,4096,2,3]{3,2,1,0} concatenate(%add.1356, %iota.1890, %broadcast_in_dim.580), dimensions={3}
  %subtract.62 = s32[1,4096,2,3]{3,2,1,0} subtract(%concatenate.167, %broadcast.3428)
  %scatter.169 = u32[1,4096,8]{2,1,0} scatter(%dynamic-slice.43, %subtract.62, %add.1401), update_window_dims={}, inserted_window_dims={0,1,2}, scatter_dims_to_operand_dims={0,1,2}, index_vector_dim=3, to_apply=%region_245.6717.clone
  %gather.20 = u32[1,4096,2]{2,1,0} gather(%scatter.169, %subtract.62), offset_dims={}, collapsed_slice_dims={0,1,2}, start_index_map={0,1,2}, index_vector_dim=3, slice_sizes={1,1,1}
  %eq.2054 = pred[1,4096,2]{2,1,0} compare(%add.1401, %gather.20), direction=EQ
  %get-tuple-element.462 = bf16[4096,2]{1,0} get-tuple-element(%sort.84), index=0
  %slice.295 = bf16[4096,2]{1,0} slice(%get-tuple-element.462), slice={[0:4096], [0:2]}
  %convert_element_type.1701 = f32[4096,2]{1,0} convert(%slice.295)
  %convert_element_type.1702 = f32[1,4096,2]{2,1,0} reshape(%convert_element_type.1701)
  %reduce.377 = f32[4096]{0} reduce(%convert_element_type.1701, %constant.1450), dimensions={1}, to_apply=%region_246.6726
  %sub.169 = f32[1,4096]{1,0} reshape(%reduce.377)
  %sub.170 = f32[1,4096,2]{2,1,0} broadcast(%sub.169), dimensions={0,1}
  %sub.171 = f32[1,4096,2]{2,1,0} subtract(%convert_element_type.1702, %sub.170)
  %exp.166 = f32[1,4096,2]{2,1,0} exponential(%sub.171)
  %reduce.378 = f32[1,4096]{1,0} reduce(%exp.166, %constant.1360), dimensions={2}, to_apply=%region_247.6735
  %div.669 = f32[1,4096,2]{2,1,0} broadcast(%reduce.378), dimensions={0,1}
  %div.670 = f32[1,4096,2]{2,1,0} divide(%exp.166, %div.669)
  %convert_element_type.1703 = bf16[1,4096,2]{2,1,0} convert(%div.670)
  %select_n.357 = bf16[1,4096,2]{2,1,0} select(%eq.2054, %convert_element_type.1703, %broadcast.3427)
  %scatter.170 = bf16[1,4096,8]{2,1,0} scatter(%broadcast.3379, %subtract.62, %select_n.357), update_window_dims={}, inserted_window_dims={0,1,2}, scatter_dims_to_operand_dims={0,1,2}, index_vector_dim=3, to_apply=%region_248.6744.clone
  %eq.2056 = s32[1,4096,2,8]{3,2,1,0} broadcast(%top_k.62), dimensions={0,1,2}
  %iota.2201 = s32[1,4096,2,8]{3,2,1,0} iota(), iota_dimension=3
  %eq.2057 = pred[1,4096,2,8]{3,2,1,0} compare(%eq.2056, %iota.2201), direction=EQ
  %convert_element_type.1705 = s32[1,4096,2,8]{3,2,1,0} convert(%eq.2057)
  %reshape.10332 = s32[1,8192,8]{2,1,0} reshape(%convert_element_type.1705)
  %sharding_constraint.654 = s32[1,8192,8]{2,1,0} copy(%reshape.10332)
  %reduce-window.20 = s32[1,8192,8]{2,1,0} reduce-window(%sharding_constraint.654, %constant.1181), window={size=1x8192x1 pad=0_0x8191_0x0_0}, to_apply=%region_249.6756
  %reshape.10334 = s32[1,4096,2,8]{3,2,1,0} reshape(%reduce-window.20)
  %sharding_constraint.655 = s32[1,4096,2,8]{3,2,1,0} copy(%reshape.10334)
  %le.42 = pred[1,4096,2,8]{3,2,1,0} compare(%sharding_constraint.655, %broadcast.3429), direction=LE
  %mul.3701 = s32[1,4096,2,8]{3,2,1,0} select(%le.42, %convert_element_type.1705, %broadcast.3430)
  %reduce.379 = s32[1,4096,8]{2,1,0} reduce(%mul.3701, %constant.1181), dimensions={2}, to_apply=%region_250.6765
  %convert_element_type.1706 = bf16[1,4096,8]{2,1,0} convert(%reduce.379)
  %mul.3710 = bf16[1,4096,8]{2,1,0} multiply(%scatter.170, %convert_element_type.1706)
  %mul.3711 = bf16[1,4096,8,1025]{3,2,1,0} broadcast(%mul.3710), dimensions={0,1,2}
  %mul.3712 = s32[1,8192,8]{2,1,0} multiply(%sharding_constraint.654, %reduce-window.20)
  %reshape.10335 = s32[1,4096,2,8]{3,2,1,0} reshape(%mul.3712)
  %reduce.380 = s32[1,4096,8]{2,1,0} reduce(%reshape.10335, %constant.1181), dimensions={2}, to_apply=%region_251.6775
  %mul.3713 = s32[1,4096,8]{2,1,0} multiply(%reduce.380, %reduce.379)
  %eq.2058 = s32[1,4096,8,1025]{3,2,1,0} broadcast(%mul.3713), dimensions={0,1,2}
  %iota.2202 = s32[1,4096,8,1025]{3,2,1,0} iota(), iota_dimension=3
  %eq.2059 = pred[1,4096,8,1025]{3,2,1,0} compare(%eq.2058, %iota.2202), direction=EQ
  %convert_element_type.1707 = s32[1,4096,8,1025]{3,2,1,0} convert(%eq.2059)
  %convert_element_type.1708 = bf16[1,4096,8,1025]{3,2,1,0} convert(%convert_element_type.1707)
  %mul.3715 = bf16[1,4096,8,1025]{3,2,1,0} multiply(%mul.3711, %convert_element_type.1708)
  %slice.297 = bf16[1,4096,8,1024]{3,2,1,0} slice(%mul.3715), slice={[0:1], [0:4096], [0:8], [1:1025]}
  %sharding_constraint.656 = bf16[1,4096,8,1024]{3,2,1,0} copy(%slice.297)
  %convert_element_type.1709 = pred[1,4096,8,1024]{3,2,1,0} compare(%slice.297, %broadcast.3431), direction=NE
  %sharding_constraint.657 = pred[1,4096,8,1024]{3,2,1,0} copy(%convert_element_type.1709)
  %dot_general.56 = bf16[1,4096,8,1024]{3,2,1,0} convert(%sharding_constraint.657)
  %dot.368 = bf16[1,8,1024,4096]{3,2,1,0} dot(%dot_general.56, %sharding_constraint.652), lhs_batch_dims={0}, lhs_contracting_dims={1}, rhs_batch_dims={0}, rhs_contracting_dims={1}
  %reshape.10338 = bf16[1,8,1,1024,4096]{4,3,2,1,0} reshape(%dot.368)
  %all-to-all.40 = bf16[1,8,1,1024,4096]{4,3,2,1,0} all-to-all(%reshape.10338), channel_id=231, replica_groups=[1,8]<=[8], dimensions={1}
  %transpose.65 = bf16[8,1,1,1024,4096]{4,3,2,0,1} transpose(%all-to-all.40), dimensions={1,0,2,3,4}
  %reshape.10339 = bf16[8,1,1024,4096]{3,2,1,0} reshape(%transpose.65)
  %transpose.66 = bf16[1,8,1024,4096]{3,2,0,1} transpose(%reshape.10339), dimensions={1,0,2,3}
  %sharding_constraint.658 = bf16[1,8,1024,4096]{3,2,0,1} copy(%transpose.66)
  %param.214 = bf16[1,4096,14336]{2,1,0} parameter(133), sharding={devices=[8,1,1]<=[8]}
  %sharding_constraint.659 = bf16[1,4096,14336]{2,1,0} copy(%param.214)
  %dot.369 = bf16[1,8,1024,14336]{3,2,1,0} dot(%sharding_constraint.658, %sharding_constraint.659), lhs_batch_dims={0}, lhs_contracting_dims={3}, rhs_batch_dims={0}, rhs_contracting_dims={1}
  %sharding_constraint.660 = bf16[1,8,1024,14336]{3,2,1,0} copy(%dot.369)
  %neg.178 = bf16[1,8,1024,14336]{3,2,1,0} negate(%sharding_constraint.660)
  %exp.167 = bf16[1,8,1024,14336]{3,2,1,0} exponential(%neg.178)
  %add.1683 = bf16[1,8,1024,14336]{3,2,1,0} add(%exp.167, %jit_silu_.0)
  %div.671 = bf16[1,8,1024,14336]{3,2,1,0} divide(%jit_silu_.0, %add.1683)
  %mul.3716 = bf16[1,8,1024,14336]{3,2,1,0} multiply(%sharding_constraint.660, %div.671)
  %param.215 = bf16[1,4096,14336]{2,1,0} parameter(134), sharding={devices=[8,1,1]<=[8]}
  %sharding_constraint.661 = bf16[1,4096,14336]{2,1,0} copy(%param.215)
  %dot.370 = bf16[1,8,1024,14336]{3,2,1,0} dot(%sharding_constraint.658, %sharding_constraint.661), lhs_batch_dims={0}, lhs_contracting_dims={3}, rhs_batch_dims={0}, rhs_contracting_dims={1}
  %sharding_constraint.662 = bf16[1,8,1024,14336]{3,2,1,0} copy(%dot.370)
  %mul.3717 = bf16[1,8,1024,14336]{3,2,1,0} multiply(%mul.3716, %sharding_constraint.662)
  %param.216 = bf16[1,14336,4096]{2,1,0} parameter(135), sharding={devices=[8,1,1]<=[8]}
  %sharding_constraint.663 = bf16[1,14336,4096]{2,1,0} copy(%param.216)
  %dot.371 = bf16[1,8,1024,4096]{3,2,1,0} dot(%mul.3717, %sharding_constraint.663), lhs_batch_dims={0}, lhs_contracting_dims={3}, rhs_batch_dims={0}, rhs_contracting_dims={1}
  %sharding_constraint.664 = bf16[1,8,1024,4096]{3,2,1,0} copy(%dot.371)
  %reshape.10342 = bf16[1,8,1,1024,4096]{4,3,2,1,0} reshape(%sharding_constraint.664)
  %all-to-all.41 = bf16[1,8,1,1024,4096]{4,3,2,1,0} all-to-all(%reshape.10342), channel_id=232, replica_groups=[1,8]<=[8], dimensions={1}
  %transpose.67 = bf16[8,1,1,1024,4096]{4,3,2,0,1} transpose(%all-to-all.41), dimensions={1,0,2,3,4}
  %reshape.10343 = bf16[8,1,1024,4096]{3,2,1,0} reshape(%transpose.67)
  %dot.372 = bf16[1,4096,4096]{2,1,0} dot(%sharding_constraint.656, %reshape.10343), lhs_batch_dims={0}, lhs_contracting_dims={3,2}, rhs_batch_dims={1}, rhs_contracting_dims={2,0}
  %sharding_constraint.665 = bf16[1,4096,4096]{2,1,0} copy(%dot.372)
  %add.1684 = bf16[1,4096,4096]{2,1,0} add(%sharding_constraint.665, %add.1674)
  %sharding_constraint.666 = bf16[1,4096,4096]{2,1,0} copy(%add.1684)
  %sharding_constraint.667 = bf16[1,4096,4096]{2,1,0} copy(%sharding_constraint.666)
  %convert_element_type.1710 = f32[1,4096,4096]{2,1,0} convert(%sharding_constraint.667)
  %square.45 = f32[1,4096,4096]{2,1,0} multiply(%convert_element_type.1710, %convert_element_type.1710)
  %reduce.381 = f32[1,4096]{1,0} reduce(%square.45, %constant.1360), dimensions={2}, to_apply=%region_252.6817
  %div.672 = f32[1,4096]{1,0} multiply(%reduce.381, %broadcast.3412)
  %add.1685 = f32[1,4096]{1,0} add(%div.672, %broadcast.3413)
  %rsqrt.106 = f32[1,4096]{1,0} rsqrt(%add.1685)
  %mul.3718 = f32[1,4096,4096]{2,1,0} broadcast(%rsqrt.106), dimensions={0,1}
  %mul.3719 = f32[1,4096,4096]{2,1,0} multiply(%convert_element_type.1710, %mul.3718)
  %convert_element_type.1711 = bf16[1,4096,4096]{2,1,0} convert(%mul.3719)
  %param.217 = bf16[4096]{0} parameter(147), sharding={replicated}
  %mul.3720 = bf16[1,4096,4096]{2,1,0} broadcast(%param.217), dimensions={2}
  %mul.3721 = bf16[1,4096,4096]{2,1,0} multiply(%convert_element_type.1711, %mul.3720)
  %sharding_constraint.668 = bf16[1,4096,4096]{2,1,0} copy(%mul.3721)
  %sharding_constraint.669 = bf16[1,4096,4096]{2,1,0} copy(%sharding_constraint.668)
  %param.218 = bf16[512,32,128]{2,1,0} parameter(150), sharding={devices=[8,1,1]<=[8]}
  %all-gather.148 = bf16[4096,32,128]{2,1,0} all-gather(%param.218), channel_id=233, replica_groups=[1,8]<=[8], dimensions={0}, use_global_device_ids=true
  %dot.373 = bf16[1,4096,32,128]{3,2,1,0} dot(%sharding_constraint.669, %all-gather.148), lhs_contracting_dims={2}, rhs_contracting_dims={0}
  %slice.298 = bf16[1,4096,32,64]{3,2,1,0} slice(%dot.373), slice={[0:1], [0:4096], [0:32], [0:64]}
  %mul.3725 = bf16[1,4096,32,64]{3,2,1,0} multiply(%slice.298, %mul.2435)
  %slice.299 = bf16[1,4096,32,64]{3,2,1,0} slice(%dot.373), slice={[0:1], [0:4096], [0:32], [64:128]}
  %mul.3728 = bf16[1,4096,32,64]{3,2,1,0} multiply(%slice.299, %mul.2438)
  %sub.172 = bf16[1,4096,32,64]{3,2,1,0} subtract(%mul.3725, %mul.3728)
  %mul.3731 = bf16[1,4096,32,64]{3,2,1,0} multiply(%slice.299, %mul.2435)
  %mul.3750 = bf16[1,4096,32,64]{3,2,1,0} multiply(%slice.298, %mul.2438)
  %add.1687 = bf16[1,4096,32,64]{3,2,1,0} add(%mul.3731, %mul.3750)
  %concatenate.171 = bf16[1,4096,32,128]{3,2,1,0} concatenate(%sub.172, %add.1687), dimensions={3}
  %sharding_constraint.670 = bf16[1,4096,32,128]{3,2,1,0} copy(%concatenate.171)
  %param.219 = bf16[512,8,128]{2,1,0} parameter(148), sharding={devices=[8,1,1]<=[8]}
  %all-gather.149 = bf16[4096,8,128]{2,1,0} all-gather(%param.219), channel_id=234, replica_groups=[1,8]<=[8], dimensions={0}, use_global_device_ids=true
  %dot.374 = bf16[1,4096,8,128]{3,2,1,0} dot(%sharding_constraint.669, %all-gather.149), lhs_contracting_dims={2}, rhs_contracting_dims={0}
  %slice.300 = bf16[1,4096,8,64]{3,2,1,0} slice(%dot.374), slice={[0:1], [0:4096], [0:8], [0:64]}
  %mul.3754 = bf16[1,4096,8,64]{3,2,1,0} multiply(%slice.300, %mul.2456)
  %slice.301 = bf16[1,4096,8,64]{3,2,1,0} slice(%dot.374), slice={[0:1], [0:4096], [0:8], [64:128]}
  %mul.3757 = bf16[1,4096,8,64]{3,2,1,0} multiply(%slice.301, %mul.2460)
  %sub.173 = bf16[1,4096,8,64]{3,2,1,0} subtract(%mul.3754, %mul.3757)
  %mul.3760 = bf16[1,4096,8,64]{3,2,1,0} multiply(%slice.301, %mul.2456)
  %mul.3763 = bf16[1,4096,8,64]{3,2,1,0} multiply(%slice.300, %mul.2460)
  %add.1688 = bf16[1,4096,8,64]{3,2,1,0} add(%mul.3760, %mul.3763)
  %concatenate.172 = bf16[1,4096,8,128]{3,2,1,0} concatenate(%sub.173, %add.1688), dimensions={3}
  %sharding_constraint.672 = bf16[1,4096,8,128]{3,2,1,0} copy(%concatenate.172)
  %param.220 = bf16[512,8,128]{2,1,0} parameter(151), sharding={devices=[8,1,1]<=[8]}
  %all-gather.150 = bf16[4096,8,128]{2,1,0} all-gather(%param.220), channel_id=235, replica_groups=[1,8]<=[8], dimensions={0}, use_global_device_ids=true
  %dot.375 = bf16[1,4096,8,128]{3,2,1,0} dot(%sharding_constraint.669, %all-gather.150), lhs_contracting_dims={2}, rhs_contracting_dims={0}
  %sharding_constraint.673 = bf16[1,4096,8,128]{3,2,1,0} copy(%dot.375)
  %te_fused_attn_forward_ffi.84 = (bf16[1,4096,32,128]{3,2,1,0}, f32[1,32,4096,1]{3,2,1,0}, u32[2,4]{1,0}, u8[48]{0}) custom-call(%sharding_constraint.670, %sharding_constraint.672, %sharding_constraint.673, %constant.1403, %dynamic-slice.38, /*index=5*/%concatenate.31, %concatenate.36, %constant.1416, %constant.1416, %constant.1416, /*index=10*/%constant.1416, %constant.1416, %constant.1416), custom_call_target="te_fused_attn_forward_ffi", operand_layout_constraints={bf16[1,4096,32,128]{3,2,1,0}, bf16[1,4096,8,128]{3,2,1,0}, bf16[1,4096,8,128]{3,2,1,0}, bf16[0]{0}, u32[2]{0}, s32[2]{0}, s32[2]{0}, f32[0]{0}, f32[0]{0}, f32[0]{0}, f32[0]{0}, f32[0]{0}, f32[0]{0}}, api_version=API_VERSION_TYPED_FFI, backend_config={attn_heads = 32 : i64, bias_batch = 0 : i64, bias_heads = 0 : i64, bias_type = 0 : i64, deterministic = false, dropout_probability = 0.000000e+00 : f64, input_batch = 1 : i64, is_training = true, kv_max_seqlen = 4096 : i64, mask_type = 3 : i64, max_segments_per_seq = 1 : i64, num_gqa_groups = 8 : i64, q_max_seqlen = 4096 : i64, qk_head_dim = 128 : i64, qkv_layout = 9 : i64, scaling_factor = 1.000000e+00 : f64, v_head_dim = 128 : i64, window_size_left = -1 : i64, window_size_right = -1 : i64}
  %get-tuple-element.469 = bf16[1,4096,32,128]{3,2,1,0} get-tuple-element(%te_fused_attn_forward_ffi.84), index=0
  %sharding_constraint.674 = bf16[1,4096,32,128]{3,2,1,0} copy(%get-tuple-element.469)
  %param.221 = bf16[32,128,512]{2,1,0} parameter(149), sharding={devices=[1,1,8]<=[8]}
  %all-gather.152 = bf16[32,128,4096]{2,1,0} all-gather(%param.221), channel_id=237, replica_groups=[1,8]<=[8], dimensions={2}, use_global_device_ids=true
  %dot.376 = bf16[1,4096,4096]{2,1,0} dot(%sharding_constraint.674, %all-gather.152), lhs_contracting_dims={2,3}, rhs_contracting_dims={0,1}
  %sharding_constraint.675 = bf16[1,4096,4096]{2,1,0} copy(%dot.376)
  %add.1689 = bf16[1,4096,4096]{2,1,0} add(%sharding_constraint.667, %sharding_constraint.675)
  %convert_element_type.1724 = f32[1,4096,4096]{2,1,0} convert(%add.1689)
  %square.46 = f32[1,4096,4096]{2,1,0} multiply(%convert_element_type.1724, %convert_element_type.1724)
  %reduce.385 = f32[1,4096]{1,0} reduce(%square.46, %constant.1360), dimensions={2}, to_apply=%region_256.6941
  %div.681 = f32[1,4096]{1,0} multiply(%reduce.385, %broadcast.3412)
  %add.1690 = f32[1,4096]{1,0} add(%div.681, %broadcast.3413)
  %rsqrt.107 = f32[1,4096]{1,0} rsqrt(%add.1690)
  %mul.3764 = f32[1,4096,4096]{2,1,0} broadcast(%rsqrt.107), dimensions={0,1}
  %mul.3765 = f32[1,4096,4096]{2,1,0} multiply(%convert_element_type.1724, %mul.3764)
  %convert_element_type.1726 = bf16[1,4096,4096]{2,1,0} convert(%mul.3765)
  %param.222 = bf16[4096]{0} parameter(146), sharding={replicated}
  %mul.3766 = bf16[1,4096,4096]{2,1,0} broadcast(%param.222), dimensions={2}
  %mul.3767 = bf16[1,4096,4096]{2,1,0} multiply(%convert_element_type.1726, %mul.3766)
  %sharding_constraint.676 = bf16[1,4096,4096]{2,1,0} copy(%mul.3767)
  %param.223 = bf16[512,8]{1,0} parameter(142), sharding={devices=[8,1]<=[8]}
  %all-gather.153 = bf16[4096,8]{1,0} all-gather(%param.223), channel_id=238, replica_groups=[1,8]<=[8], dimensions={0}, use_global_device_ids=true
  %dot.377 = bf16[1,4096,8]{2,1,0} dot(%sharding_constraint.676, %all-gather.153), lhs_contracting_dims={2}, rhs_contracting_dims={0}
  %sharding_constraint.677 = bf16[1,4096,8]{2,1,0} copy(%dot.377)
  %top_k.63 = bf16[4096,8]{1,0} reshape(%sharding_constraint.677)
  %top_k.64 = (bf16[4096,2]{1,0}, s32[4096,2]{1,0}) custom-call(%top_k.63), custom_call_target="TopK", called_computations={%compare_greater_than.21.6960.clone}
  %get-tuple-element.470 = bf16[4096,2]{1,0} get-tuple-element(%top_k.64), index=0
  %get-tuple-element.471 = s32[4096,2]{1,0} get-tuple-element(%top_k.64), index=1
  %add.1691 = s32[4096,2]{1,0} add(%get-tuple-element.471, %broadcast.3418)
  %sort.85 = (bf16[4096,2]{1,0}, s32[4096,2]{1,0}) sort(%get-tuple-element.470, %add.1691), dimensions={1}, is_stable=true, to_apply=%compare-value-and-index.21
  %get-tuple-element.473 = s32[4096,2]{1,0} get-tuple-element(%sort.85), index=1
  %slice.304 = s32[4096,2]{1,0} slice(%get-tuple-element.473), slice={[0:4096], [0:2]}
  %top_k.65 = s32[1,4096,2]{2,1,0} reshape(%slice.304)
  %lt.66 = pred[1,4096,2]{2,1,0} compare(%top_k.65, %broadcast.3419), direction=LT
  %add.1692 = s32[1,4096,2]{2,1,0} add(%top_k.65, %broadcast.3420)
  %select_n.361 = s32[1,4096,2]{2,1,0} select(%lt.66, %add.1692, %top_k.65)
  %broadcast_in_dim.583 = s32[1,4096,2,1]{3,2,1,0} reshape(%select_n.361)
  %concatenate.175 = s32[1,4096,2,3]{3,2,1,0} concatenate(%add.1356, %iota.1887, %broadcast_in_dim.583), dimensions={3}
  %subtract.65 = s32[1,4096,2,3]{3,2,1,0} subtract(%concatenate.175, %broadcast.3428)
  %scatter.171 = u32[1,4096,8]{2,1,0} scatter(%dynamic-slice.43, %subtract.65, %add.1401), update_window_dims={}, inserted_window_dims={0,1,2}, scatter_dims_to_operand_dims={0,1,2}, index_vector_dim=3, to_apply=%region_257.6988.clone
  %gather.21 = u32[1,4096,2]{2,1,0} gather(%scatter.171, %subtract.65), offset_dims={}, collapsed_slice_dims={0,1,2}, start_index_map={0,1,2}, index_vector_dim=3, slice_sizes={1,1,1}
  %eq.2064 = pred[1,4096,2]{2,1,0} compare(%add.1401, %gather.21), direction=EQ
  %get-tuple-element.472 = bf16[4096,2]{1,0} get-tuple-element(%sort.85), index=0
  %slice.303 = bf16[4096,2]{1,0} slice(%get-tuple-element.472), slice={[0:4096], [0:2]}
  %convert_element_type.1728 = f32[4096,2]{1,0} convert(%slice.303)
  %convert_element_type.1729 = f32[1,4096,2]{2,1,0} reshape(%convert_element_type.1728)
  %reduce.386 = f32[4096]{0} reduce(%convert_element_type.1728, %constant.1450), dimensions={1}, to_apply=%region_258.6997
  %sub.174 = f32[1,4096]{1,0} reshape(%reduce.386)
  %sub.175 = f32[1,4096,2]{2,1,0} broadcast(%sub.174), dimensions={0,1}
  %sub.176 = f32[1,4096,2]{2,1,0} subtract(%convert_element_type.1729, %sub.175)
  %exp.168 = f32[1,4096,2]{2,1,0} exponential(%sub.176)
  %reduce.387 = f32[1,4096]{1,0} reduce(%exp.168, %constant.1360), dimensions={2}, to_apply=%region_259.7006
  %div.682 = f32[1,4096,2]{2,1,0} broadcast(%reduce.387), dimensions={0,1}
  %div.683 = f32[1,4096,2]{2,1,0} divide(%exp.168, %div.682)
  %convert_element_type.1730 = bf16[1,4096,2]{2,1,0} convert(%div.683)
  %select_n.362 = bf16[1,4096,2]{2,1,0} select(%eq.2064, %convert_element_type.1730, %broadcast.3427)
  %scatter.172 = bf16[1,4096,8]{2,1,0} scatter(%broadcast.3379, %subtract.65, %select_n.362), update_window_dims={}, inserted_window_dims={0,1,2}, scatter_dims_to_operand_dims={0,1,2}, index_vector_dim=3, to_apply=%region_260.7015.clone
  %eq.2066 = s32[1,4096,2,8]{3,2,1,0} broadcast(%top_k.65), dimensions={0,1,2}
  %iota.2213 = s32[1,4096,2,8]{3,2,1,0} iota(), iota_dimension=3
  %eq.2067 = pred[1,4096,2,8]{3,2,1,0} compare(%eq.2066, %iota.2213), direction=EQ
  %convert_element_type.1732 = s32[1,4096,2,8]{3,2,1,0} convert(%eq.2067)
  %reshape.10384 = s32[1,8192,8]{2,1,0} reshape(%convert_element_type.1732)
  %sharding_constraint.678 = s32[1,8192,8]{2,1,0} copy(%reshape.10384)
  %reduce-window.21 = s32[1,8192,8]{2,1,0} reduce-window(%sharding_constraint.678, %constant.1181), window={size=1x8192x1 pad=0_0x8191_0x0_0}, to_apply=%region_261.7027
  %reshape.10386 = s32[1,4096,2,8]{3,2,1,0} reshape(%reduce-window.21)
  %sharding_constraint.679 = s32[1,4096,2,8]{3,2,1,0} copy(%reshape.10386)
  %le.44 = pred[1,4096,2,8]{3,2,1,0} compare(%sharding_constraint.679, %broadcast.3429), direction=LE
  %mul.3768 = s32[1,4096,2,8]{3,2,1,0} select(%le.44, %convert_element_type.1732, %broadcast.3430)
  %reduce.388 = s32[1,4096,8]{2,1,0} reduce(%mul.3768, %constant.1181), dimensions={2}, to_apply=%region_262.7036
  %convert_element_type.1733 = bf16[1,4096,8]{2,1,0} convert(%reduce.388)
  %mul.3769 = bf16[1,4096,8]{2,1,0} multiply(%scatter.172, %convert_element_type.1733)
  %mul.3770 = bf16[1,4096,8,1025]{3,2,1,0} broadcast(%mul.3769), dimensions={0,1,2}
  %mul.3771 = s32[1,8192,8]{2,1,0} multiply(%sharding_constraint.678, %reduce-window.21)
  %reshape.10387 = s32[1,4096,2,8]{3,2,1,0} reshape(%mul.3771)
  %reduce.389 = s32[1,4096,8]{2,1,0} reduce(%reshape.10387, %constant.1181), dimensions={2}, to_apply=%region_263.7046
  %mul.3772 = s32[1,4096,8]{2,1,0} multiply(%reduce.389, %reduce.388)
  %eq.2068 = s32[1,4096,8,1025]{3,2,1,0} broadcast(%mul.3772), dimensions={0,1,2}
  %iota.2214 = s32[1,4096,8,1025]{3,2,1,0} iota(), iota_dimension=3
  %eq.2069 = pred[1,4096,8,1025]{3,2,1,0} compare(%eq.2068, %iota.2214), direction=EQ
  %convert_element_type.1734 = s32[1,4096,8,1025]{3,2,1,0} convert(%eq.2069)
  %convert_element_type.1735 = bf16[1,4096,8,1025]{3,2,1,0} convert(%convert_element_type.1734)
  %mul.3773 = bf16[1,4096,8,1025]{3,2,1,0} multiply(%mul.3770, %convert_element_type.1735)
  %slice.305 = bf16[1,4096,8,1024]{3,2,1,0} slice(%mul.3773), slice={[0:1], [0:4096], [0:8], [1:1025]}
  %sharding_constraint.680 = bf16[1,4096,8,1024]{3,2,1,0} copy(%slice.305)
  %convert_element_type.1736 = pred[1,4096,8,1024]{3,2,1,0} compare(%slice.305, %broadcast.3431), direction=NE
  %sharding_constraint.681 = pred[1,4096,8,1024]{3,2,1,0} copy(%convert_element_type.1736)
  %dot_general.57 = bf16[1,4096,8,1024]{3,2,1,0} convert(%sharding_constraint.681)
  %dot.378 = bf16[1,8,1024,4096]{3,2,1,0} dot(%dot_general.57, %sharding_constraint.676), lhs_batch_dims={0}, lhs_contracting_dims={1}, rhs_batch_dims={0}, rhs_contracting_dims={1}
  %reshape.10390 = bf16[1,8,1,1024,4096]{4,3,2,1,0} reshape(%dot.378)
  %all-to-all.42 = bf16[1,8,1,1024,4096]{4,3,2,1,0} all-to-all(%reshape.10390), channel_id=242, replica_groups=[1,8]<=[8], dimensions={1}
  %transpose.68 = bf16[8,1,1,1024,4096]{4,3,2,0,1} transpose(%all-to-all.42), dimensions={1,0,2,3,4}
  %reshape.10391 = bf16[8,1,1024,4096]{3,2,1,0} reshape(%transpose.68)
  %transpose.69 = bf16[1,8,1024,4096]{3,2,0,1} transpose(%reshape.10391), dimensions={1,0,2,3}
  %sharding_constraint.682 = bf16[1,8,1024,4096]{3,2,0,1} copy(%transpose.69)
  %param.224 = bf16[1,4096,14336]{2,1,0} parameter(143), sharding={devices=[8,1,1]<=[8]}
  %sharding_constraint.683 = bf16[1,4096,14336]{2,1,0} copy(%param.224)
  %dot.379 = bf16[1,8,1024,14336]{3,2,1,0} dot(%sharding_constraint.682, %sharding_constraint.683), lhs_batch_dims={0}, lhs_contracting_dims={3}, rhs_batch_dims={0}, rhs_contracting_dims={1}
  %sharding_constraint.684 = bf16[1,8,1024,14336]{3,2,1,0} copy(%dot.379)
  %neg.179 = bf16[1,8,1024,14336]{3,2,1,0} negate(%sharding_constraint.684)
  %exp.169 = bf16[1,8,1024,14336]{3,2,1,0} exponential(%neg.179)
  %add.1697 = bf16[1,8,1024,14336]{3,2,1,0} add(%exp.169, %jit_silu_.0)
  %div.684 = bf16[1,8,1024,14336]{3,2,1,0} divide(%jit_silu_.0, %add.1697)
  %mul.3774 = bf16[1,8,1024,14336]{3,2,1,0} multiply(%sharding_constraint.684, %div.684)
  %param.225 = bf16[1,4096,14336]{2,1,0} parameter(144), sharding={devices=[8,1,1]<=[8]}
  %sharding_constraint.685 = bf16[1,4096,14336]{2,1,0} copy(%param.225)
  %dot.380 = bf16[1,8,1024,14336]{3,2,1,0} dot(%sharding_constraint.682, %sharding_constraint.685), lhs_batch_dims={0}, lhs_contracting_dims={3}, rhs_batch_dims={0}, rhs_contracting_dims={1}
  %sharding_constraint.686 = bf16[1,8,1024,14336]{3,2,1,0} copy(%dot.380)
  %mul.3775 = bf16[1,8,1024,14336]{3,2,1,0} multiply(%mul.3774, %sharding_constraint.686)
  %param.226 = bf16[1,14336,4096]{2,1,0} parameter(145), sharding={devices=[8,1,1]<=[8]}
  %sharding_constraint.687 = bf16[1,14336,4096]{2,1,0} copy(%param.226)
  %dot.381 = bf16[1,8,1024,4096]{3,2,1,0} dot(%mul.3775, %sharding_constraint.687), lhs_batch_dims={0}, lhs_contracting_dims={3}, rhs_batch_dims={0}, rhs_contracting_dims={1}
  %sharding_constraint.688 = bf16[1,8,1024,4096]{3,2,1,0} copy(%dot.381)
  %reshape.10394 = bf16[1,8,1,1024,4096]{4,3,2,1,0} reshape(%sharding_constraint.688)
  %all-to-all.43 = bf16[1,8,1,1024,4096]{4,3,2,1,0} all-to-all(%reshape.10394), channel_id=243, replica_groups=[1,8]<=[8], dimensions={1}
  %transpose.70 = bf16[8,1,1,1024,4096]{4,3,2,0,1} transpose(%all-to-all.43), dimensions={1,0,2,3,4}
  %reshape.10395 = bf16[8,1,1024,4096]{3,2,1,0} reshape(%transpose.70)
  %dot.382 = bf16[1,4096,4096]{2,1,0} dot(%sharding_constraint.680, %reshape.10395), lhs_batch_dims={0}, lhs_contracting_dims={3,2}, rhs_batch_dims={1}, rhs_contracting_dims={2,0}
  %sharding_constraint.689 = bf16[1,4096,4096]{2,1,0} copy(%dot.382)
  %add.1698 = bf16[1,4096,4096]{2,1,0} add(%sharding_constraint.689, %add.1689)
  %sharding_constraint.690 = bf16[1,4096,4096]{2,1,0} copy(%add.1698)
  %sharding_constraint.691 = bf16[1,4096,4096]{2,1,0} copy(%sharding_constraint.690)
  %convert_element_type.1737 = f32[1,4096,4096]{2,1,0} convert(%sharding_constraint.691)
  %square.47 = f32[1,4096,4096]{2,1,0} multiply(%convert_element_type.1737, %convert_element_type.1737)
  %reduce.390 = f32[1,4096]{1,0} reduce(%square.47, %constant.1360), dimensions={2}, to_apply=%region_264.7088
  %div.685 = f32[1,4096]{1,0} multiply(%reduce.390, %broadcast.3412)
  %add.1699 = f32[1,4096]{1,0} add(%div.685, %broadcast.3413)
  %rsqrt.108 = f32[1,4096]{1,0} rsqrt(%add.1699)
  %mul.3776 = f32[1,4096,4096]{2,1,0} broadcast(%rsqrt.108), dimensions={0,1}
  %mul.3777 = f32[1,4096,4096]{2,1,0} multiply(%convert_element_type.1737, %mul.3776)
  %convert_element_type.1738 = bf16[1,4096,4096]{2,1,0} convert(%mul.3777)
  %param.227 = bf16[4096]{0} parameter(157), sharding={replicated}
  %mul.3778 = bf16[1,4096,4096]{2,1,0} broadcast(%param.227), dimensions={2}
  %mul.3779 = bf16[1,4096,4096]{2,1,0} multiply(%convert_element_type.1738, %mul.3778)
  %sharding_constraint.692 = bf16[1,4096,4096]{2,1,0} copy(%mul.3779)
  %sharding_constraint.693 = bf16[1,4096,4096]{2,1,0} copy(%sharding_constraint.692)
  %param.228 = bf16[512,32,128]{2,1,0} parameter(160), sharding={devices=[8,1,1]<=[8]}
  %all-gather.155 = bf16[4096,32,128]{2,1,0} all-gather(%param.228), channel_id=244, replica_groups=[1,8]<=[8], dimensions={0}, use_global_device_ids=true
  %dot.383 = bf16[1,4096,32,128]{3,2,1,0} dot(%sharding_constraint.693, %all-gather.155), lhs_contracting_dims={2}, rhs_contracting_dims={0}
  %slice.306 = bf16[1,4096,32,64]{3,2,1,0} slice(%dot.383), slice={[0:1], [0:4096], [0:32], [0:64]}
  %mul.3784 = bf16[1,4096,32,64]{3,2,1,0} multiply(%slice.306, %mul.2435)
  %slice.307 = bf16[1,4096,32,64]{3,2,1,0} slice(%dot.383), slice={[0:1], [0:4096], [0:32], [64:128]}
  %mul.3790 = bf16[1,4096,32,64]{3,2,1,0} multiply(%slice.307, %mul.2438)
  %sub.177 = bf16[1,4096,32,64]{3,2,1,0} subtract(%mul.3784, %mul.3790)
  %mul.3793 = bf16[1,4096,32,64]{3,2,1,0} multiply(%slice.307, %mul.2435)
  %mul.3797 = bf16[1,4096,32,64]{3,2,1,0} multiply(%slice.306, %mul.2438)
  %add.1700 = bf16[1,4096,32,64]{3,2,1,0} add(%mul.3793, %mul.3797)
  %concatenate.179 = bf16[1,4096,32,128]{3,2,1,0} concatenate(%sub.177, %add.1700), dimensions={3}
  %sharding_constraint.694 = bf16[1,4096,32,128]{3,2,1,0} copy(%concatenate.179)
  %param.229 = bf16[512,8,128]{2,1,0} parameter(158), sharding={devices=[8,1,1]<=[8]}
  %all-gather.156 = bf16[4096,8,128]{2,1,0} all-gather(%param.229), channel_id=245, replica_groups=[1,8]<=[8], dimensions={0}, use_global_device_ids=true
  %dot.384 = bf16[1,4096,8,128]{3,2,1,0} dot(%sharding_constraint.693, %all-gather.156), lhs_contracting_dims={2}, rhs_contracting_dims={0}
  %slice.308 = bf16[1,4096,8,64]{3,2,1,0} slice(%dot.384), slice={[0:1], [0:4096], [0:8], [0:64]}
  %mul.3801 = bf16[1,4096,8,64]{3,2,1,0} multiply(%slice.308, %mul.2456)
  %slice.309 = bf16[1,4096,8,64]{3,2,1,0} slice(%dot.384), slice={[0:1], [0:4096], [0:8], [64:128]}
  %mul.3805 = bf16[1,4096,8,64]{3,2,1,0} multiply(%slice.309, %mul.2460)
  %sub.178 = bf16[1,4096,8,64]{3,2,1,0} subtract(%mul.3801, %mul.3805)
  %mul.3808 = bf16[1,4096,8,64]{3,2,1,0} multiply(%slice.309, %mul.2456)
  %mul.3811 = bf16[1,4096,8,64]{3,2,1,0} multiply(%slice.308, %mul.2460)
  %add.1701 = bf16[1,4096,8,64]{3,2,1,0} add(%mul.3808, %mul.3811)
  %concatenate.180 = bf16[1,4096,8,128]{3,2,1,0} concatenate(%sub.178, %add.1701), dimensions={3}
  %sharding_constraint.696 = bf16[1,4096,8,128]{3,2,1,0} copy(%concatenate.180)
  %param.230 = bf16[512,8,128]{2,1,0} parameter(161), sharding={devices=[8,1,1]<=[8]}
  %all-gather.157 = bf16[4096,8,128]{2,1,0} all-gather(%param.230), channel_id=246, replica_groups=[1,8]<=[8], dimensions={0}, use_global_device_ids=true
  %dot.385 = bf16[1,4096,8,128]{3,2,1,0} dot(%sharding_constraint.693, %all-gather.157), lhs_contracting_dims={2}, rhs_contracting_dims={0}
  %sharding_constraint.697 = bf16[1,4096,8,128]{3,2,1,0} copy(%dot.385)
  %te_fused_attn_forward_ffi.88 = (bf16[1,4096,32,128]{3,2,1,0}, f32[1,32,4096,1]{3,2,1,0}, u32[2,4]{1,0}, u8[48]{0}) custom-call(%sharding_constraint.694, %sharding_constraint.696, %sharding_constraint.697, %constant.1403, %dynamic-slice.38, /*index=5*/%concatenate.31, %concatenate.36, %constant.1416, %constant.1416, %constant.1416, /*index=10*/%constant.1416, %constant.1416, %constant.1416), custom_call_target="te_fused_attn_forward_ffi", operand_layout_constraints={bf16[1,4096,32,128]{3,2,1,0}, bf16[1,4096,8,128]{3,2,1,0}, bf16[1,4096,8,128]{3,2,1,0}, bf16[0]{0}, u32[2]{0}, s32[2]{0}, s32[2]{0}, f32[0]{0}, f32[0]{0}, f32[0]{0}, f32[0]{0}, f32[0]{0}, f32[0]{0}}, api_version=API_VERSION_TYPED_FFI, backend_config={attn_heads = 32 : i64, bias_batch = 0 : i64, bias_heads = 0 : i64, bias_type = 0 : i64, deterministic = false, dropout_probability = 0.000000e+00 : f64, input_batch = 1 : i64, is_training = true, kv_max_seqlen = 4096 : i64, mask_type = 3 : i64, max_segments_per_seq = 1 : i64, num_gqa_groups = 8 : i64, q_max_seqlen = 4096 : i64, qk_head_dim = 128 : i64, qkv_layout = 9 : i64, scaling_factor = 1.000000e+00 : f64, v_head_dim = 128 : i64, window_size_left = -1 : i64, window_size_right = -1 : i64}
  %get-tuple-element.479 = bf16[1,4096,32,128]{3,2,1,0} get-tuple-element(%te_fused_attn_forward_ffi.88), index=0
  %sharding_constraint.698 = bf16[1,4096,32,128]{3,2,1,0} copy(%get-tuple-element.479)
  %param.231 = bf16[32,128,512]{2,1,0} parameter(159), sharding={devices=[1,1,8]<=[8]}
  %all-gather.159 = bf16[32,128,4096]{2,1,0} all-gather(%param.231), channel_id=248, replica_groups=[1,8]<=[8], dimensions={2}, use_global_device_ids=true
  %dot.386 = bf16[1,4096,4096]{2,1,0} dot(%sharding_constraint.698, %all-gather.159), lhs_contracting_dims={2,3}, rhs_contracting_dims={0,1}
  %sharding_constraint.699 = bf16[1,4096,4096]{2,1,0} copy(%dot.386)
  %add.1702 = bf16[1,4096,4096]{2,1,0} add(%sharding_constraint.691, %sharding_constraint.699)
  %convert_element_type.1749 = f32[1,4096,4096]{2,1,0} convert(%add.1702)
  %square.48 = f32[1,4096,4096]{2,1,0} multiply(%convert_element_type.1749, %convert_element_type.1749)
  %reduce.394 = f32[1,4096]{1,0} reduce(%square.48, %constant.1360), dimensions={2}, to_apply=%region_268.7212
  %div.694 = f32[1,4096]{1,0} multiply(%reduce.394, %broadcast.3412)
  %add.1703 = f32[1,4096]{1,0} add(%div.694, %broadcast.3413)
  %rsqrt.109 = f32[1,4096]{1,0} rsqrt(%add.1703)
  %mul.3812 = f32[1,4096,4096]{2,1,0} broadcast(%rsqrt.109), dimensions={0,1}
  %mul.3813 = f32[1,4096,4096]{2,1,0} multiply(%convert_element_type.1749, %mul.3812)
  %convert_element_type.1750 = bf16[1,4096,4096]{2,1,0} convert(%mul.3813)
  %param.232 = bf16[4096]{0} parameter(156), sharding={replicated}
  %mul.3814 = bf16[1,4096,4096]{2,1,0} broadcast(%param.232), dimensions={2}
  %mul.3815 = bf16[1,4096,4096]{2,1,0} multiply(%convert_element_type.1750, %mul.3814)
  %sharding_constraint.700 = bf16[1,4096,4096]{2,1,0} copy(%mul.3815)
  %param.233 = bf16[512,8]{1,0} parameter(152), sharding={devices=[8,1]<=[8]}
  %all-gather.160 = bf16[4096,8]{1,0} all-gather(%param.233), channel_id=249, replica_groups=[1,8]<=[8], dimensions={0}, use_global_device_ids=true
  %dot.387 = bf16[1,4096,8]{2,1,0} dot(%sharding_constraint.700, %all-gather.160), lhs_contracting_dims={2}, rhs_contracting_dims={0}
  %sharding_constraint.701 = bf16[1,4096,8]{2,1,0} copy(%dot.387)
  %top_k.66 = bf16[4096,8]{1,0} reshape(%sharding_constraint.701)
  %top_k.67 = (bf16[4096,2]{1,0}, s32[4096,2]{1,0}) custom-call(%top_k.66), custom_call_target="TopK", called_computations={%compare_greater_than.22.7231.clone}
  %get-tuple-element.480 = bf16[4096,2]{1,0} get-tuple-element(%top_k.67), index=0
  %get-tuple-element.481 = s32[4096,2]{1,0} get-tuple-element(%top_k.67), index=1
  %add.1704 = s32[4096,2]{1,0} add(%get-tuple-element.481, %broadcast.3418)
  %sort.86 = (bf16[4096,2]{1,0}, s32[4096,2]{1,0}) sort(%get-tuple-element.480, %add.1704), dimensions={1}, is_stable=true, to_apply=%compare-value-and-index.22
  %get-tuple-element.483 = s32[4096,2]{1,0} get-tuple-element(%sort.86), index=1
  %slice.312 = s32[4096,2]{1,0} slice(%get-tuple-element.483), slice={[0:4096], [0:2]}
  %top_k.68 = s32[1,4096,2]{2,1,0} reshape(%slice.312)
  %lt.69 = pred[1,4096,2]{2,1,0} compare(%top_k.68, %broadcast.3419), direction=LT
  %add.1705 = s32[1,4096,2]{2,1,0} add(%top_k.68, %broadcast.3420)
  %select_n.366 = s32[1,4096,2]{2,1,0} select(%lt.69, %add.1705, %top_k.68)
  %broadcast_in_dim.586 = s32[1,4096,2,1]{3,2,1,0} reshape(%select_n.366)
  %concatenate.183 = s32[1,4096,2,3]{3,2,1,0} concatenate(%add.1356, %iota.1885, %broadcast_in_dim.586), dimensions={3}
  %subtract.68 = s32[1,4096,2,3]{3,2,1,0} subtract(%concatenate.183, %broadcast.3428)
  %scatter.173 = u32[1,4096,8]{2,1,0} scatter(%dynamic-slice.43, %subtract.68, %add.1401), update_window_dims={}, inserted_window_dims={0,1,2}, scatter_dims_to_operand_dims={0,1,2}, index_vector_dim=3, to_apply=%region_269.7259.clone
  %gather.22 = u32[1,4096,2]{2,1,0} gather(%scatter.173, %subtract.68), offset_dims={}, collapsed_slice_dims={0,1,2}, start_index_map={0,1,2}, index_vector_dim=3, slice_sizes={1,1,1}
  %eq.2073 = pred[1,4096,2]{2,1,0} compare(%add.1401, %gather.22), direction=EQ
  %get-tuple-element.482 = bf16[4096,2]{1,0} get-tuple-element(%sort.86), index=0
  %slice.311 = bf16[4096,2]{1,0} slice(%get-tuple-element.482), slice={[0:4096], [0:2]}
  %convert_element_type.1751 = f32[4096,2]{1,0} convert(%slice.311)
  %convert_element_type.1752 = f32[1,4096,2]{2,1,0} reshape(%convert_element_type.1751)
  %reduce.395 = f32[4096]{0} reduce(%convert_element_type.1751, %constant.1450), dimensions={1}, to_apply=%region_270.7268
  %sub.179 = f32[1,4096]{1,0} reshape(%reduce.395)
  %sub.180 = f32[1,4096,2]{2,1,0} broadcast(%sub.179), dimensions={0,1}
  %sub.181 = f32[1,4096,2]{2,1,0} subtract(%convert_element_type.1752, %sub.180)
  %exp.170 = f32[1,4096,2]{2,1,0} exponential(%sub.181)
  %reduce.396 = f32[1,4096]{1,0} reduce(%exp.170, %constant.1360), dimensions={2}, to_apply=%region_271.7277
  %div.695 = f32[1,4096,2]{2,1,0} broadcast(%reduce.396), dimensions={0,1}
  %div.696 = f32[1,4096,2]{2,1,0} divide(%exp.170, %div.695)
  %convert_element_type.1753 = bf16[1,4096,2]{2,1,0} convert(%div.696)
  %select_n.367 = bf16[1,4096,2]{2,1,0} select(%eq.2073, %convert_element_type.1753, %broadcast.3427)
  %scatter.174 = bf16[1,4096,8]{2,1,0} scatter(%broadcast.3379, %subtract.68, %select_n.367), update_window_dims={}, inserted_window_dims={0,1,2}, scatter_dims_to_operand_dims={0,1,2}, index_vector_dim=3, to_apply=%region_272.7286.clone
  %eq.2075 = s32[1,4096,2,8]{3,2,1,0} broadcast(%top_k.68), dimensions={0,1,2}
  %iota.2225 = s32[1,4096,2,8]{3,2,1,0} iota(), iota_dimension=3
  %eq.2076 = pred[1,4096,2,8]{3,2,1,0} compare(%eq.2075, %iota.2225), direction=EQ
  %convert_element_type.1754 = s32[1,4096,2,8]{3,2,1,0} convert(%eq.2076)
  %reshape.10435 = s32[1,8192,8]{2,1,0} reshape(%convert_element_type.1754)
  %sharding_constraint.702 = s32[1,8192,8]{2,1,0} copy(%reshape.10435)
  %reduce-window.22 = s32[1,8192,8]{2,1,0} reduce-window(%sharding_constraint.702, %constant.1181), window={size=1x8192x1 pad=0_0x8191_0x0_0}, to_apply=%region_273.7298
  %reshape.10437 = s32[1,4096,2,8]{3,2,1,0} reshape(%reduce-window.22)
  %sharding_constraint.703 = s32[1,4096,2,8]{3,2,1,0} copy(%reshape.10437)
  %le.46 = pred[1,4096,2,8]{3,2,1,0} compare(%sharding_constraint.703, %broadcast.3429), direction=LE
  %mul.3820 = s32[1,4096,2,8]{3,2,1,0} select(%le.46, %convert_element_type.1754, %broadcast.3430)
  %reduce.397 = s32[1,4096,8]{2,1,0} reduce(%mul.3820, %constant.1181), dimensions={2}, to_apply=%region_274.7307
  %convert_element_type.1755 = bf16[1,4096,8]{2,1,0} convert(%reduce.397)
  %mul.3821 = bf16[1,4096,8]{2,1,0} multiply(%scatter.174, %convert_element_type.1755)
  %mul.3826 = bf16[1,4096,8,1025]{3,2,1,0} broadcast(%mul.3821), dimensions={0,1,2}
  %mul.3827 = s32[1,8192,8]{2,1,0} multiply(%sharding_constraint.702, %reduce-window.22)
  %reshape.10438 = s32[1,4096,2,8]{3,2,1,0} reshape(%mul.3827)
  %reduce.398 = s32[1,4096,8]{2,1,0} reduce(%reshape.10438, %constant.1181), dimensions={2}, to_apply=%region_275.7317
  %mul.3828 = s32[1,4096,8]{2,1,0} multiply(%reduce.398, %reduce.397)
  %eq.2077 = s32[1,4096,8,1025]{3,2,1,0} broadcast(%mul.3828), dimensions={0,1,2}
  %iota.2227 = s32[1,4096,8,1025]{3,2,1,0} iota(), iota_dimension=3
  %eq.2078 = pred[1,4096,8,1025]{3,2,1,0} compare(%eq.2077, %iota.2227), direction=EQ
  %convert_element_type.1756 = s32[1,4096,8,1025]{3,2,1,0} convert(%eq.2078)
  %convert_element_type.1757 = bf16[1,4096,8,1025]{3,2,1,0} convert(%convert_element_type.1756)
  %mul.3829 = bf16[1,4096,8,1025]{3,2,1,0} multiply(%mul.3826, %convert_element_type.1757)
  %slice.313 = bf16[1,4096,8,1024]{3,2,1,0} slice(%mul.3829), slice={[0:1], [0:4096], [0:8], [1:1025]}
  %sharding_constraint.704 = bf16[1,4096,8,1024]{3,2,1,0} copy(%slice.313)
  %convert_element_type.1759 = pred[1,4096,8,1024]{3,2,1,0} compare(%slice.313, %broadcast.3431), direction=NE
  %sharding_constraint.705 = pred[1,4096,8,1024]{3,2,1,0} copy(%convert_element_type.1759)
  %dot_general.58 = bf16[1,4096,8,1024]{3,2,1,0} convert(%sharding_constraint.705)
  %dot.388 = bf16[1,8,1024,4096]{3,2,1,0} dot(%dot_general.58, %sharding_constraint.700), lhs_batch_dims={0}, lhs_contracting_dims={1}, rhs_batch_dims={0}, rhs_contracting_dims={1}
  %reshape.10441 = bf16[1,8,1,1024,4096]{4,3,2,1,0} reshape(%dot.388)
  %all-to-all.44 = bf16[1,8,1,1024,4096]{4,3,2,1,0} all-to-all(%reshape.10441), channel_id=253, replica_groups=[1,8]<=[8], dimensions={1}
  %transpose.71 = bf16[8,1,1,1024,4096]{4,3,2,0,1} transpose(%all-to-all.44), dimensions={1,0,2,3,4}
  %reshape.10442 = bf16[8,1,1024,4096]{3,2,1,0} reshape(%transpose.71)
  %transpose.72 = bf16[1,8,1024,4096]{3,2,0,1} transpose(%reshape.10442), dimensions={1,0,2,3}
  %sharding_constraint.706 = bf16[1,8,1024,4096]{3,2,0,1} copy(%transpose.72)
  %param.234 = bf16[1,4096,14336]{2,1,0} parameter(153), sharding={devices=[8,1,1]<=[8]}
  %sharding_constraint.707 = bf16[1,4096,14336]{2,1,0} copy(%param.234)
  %dot.389 = bf16[1,8,1024,14336]{3,2,1,0} dot(%sharding_constraint.706, %sharding_constraint.707), lhs_batch_dims={0}, lhs_contracting_dims={3}, rhs_batch_dims={0}, rhs_contracting_dims={1}
  %sharding_constraint.708 = bf16[1,8,1024,14336]{3,2,1,0} copy(%dot.389)
  %neg.180 = bf16[1,8,1024,14336]{3,2,1,0} negate(%sharding_constraint.708)
  %exp.171 = bf16[1,8,1024,14336]{3,2,1,0} exponential(%neg.180)
  %add.1711 = bf16[1,8,1024,14336]{3,2,1,0} add(%exp.171, %jit_silu_.0)
  %div.697 = bf16[1,8,1024,14336]{3,2,1,0} divide(%jit_silu_.0, %add.1711)
  %mul.3830 = bf16[1,8,1024,14336]{3,2,1,0} multiply(%sharding_constraint.708, %div.697)
  %param.235 = bf16[1,4096,14336]{2,1,0} parameter(154), sharding={devices=[8,1,1]<=[8]}
  %sharding_constraint.709 = bf16[1,4096,14336]{2,1,0} copy(%param.235)
  %dot.390 = bf16[1,8,1024,14336]{3,2,1,0} dot(%sharding_constraint.706, %sharding_constraint.709), lhs_batch_dims={0}, lhs_contracting_dims={3}, rhs_batch_dims={0}, rhs_contracting_dims={1}
  %sharding_constraint.710 = bf16[1,8,1024,14336]{3,2,1,0} copy(%dot.390)
  %mul.3831 = bf16[1,8,1024,14336]{3,2,1,0} multiply(%mul.3830, %sharding_constraint.710)
  %param.236 = bf16[1,14336,4096]{2,1,0} parameter(155), sharding={devices=[8,1,1]<=[8]}
  %sharding_constraint.711 = bf16[1,14336,4096]{2,1,0} copy(%param.236)
  %dot.391 = bf16[1,8,1024,4096]{3,2,1,0} dot(%mul.3831, %sharding_constraint.711), lhs_batch_dims={0}, lhs_contracting_dims={3}, rhs_batch_dims={0}, rhs_contracting_dims={1}
  %sharding_constraint.712 = bf16[1,8,1024,4096]{3,2,1,0} copy(%dot.391)
  %reshape.10445 = bf16[1,8,1,1024,4096]{4,3,2,1,0} reshape(%sharding_constraint.712)
  %all-to-all.45 = bf16[1,8,1,1024,4096]{4,3,2,1,0} all-to-all(%reshape.10445), channel_id=254, replica_groups=[1,8]<=[8], dimensions={1}
  %transpose.73 = bf16[8,1,1,1024,4096]{4,3,2,0,1} transpose(%all-to-all.45), dimensions={1,0,2,3,4}
  %reshape.10446 = bf16[8,1,1024,4096]{3,2,1,0} reshape(%transpose.73)
  %dot.392 = bf16[1,4096,4096]{2,1,0} dot(%sharding_constraint.704, %reshape.10446), lhs_batch_dims={0}, lhs_contracting_dims={3,2}, rhs_batch_dims={1}, rhs_contracting_dims={2,0}
  %sharding_constraint.713 = bf16[1,4096,4096]{2,1,0} copy(%dot.392)
  %add.1712 = bf16[1,4096,4096]{2,1,0} add(%sharding_constraint.713, %add.1702)
  %sharding_constraint.714 = bf16[1,4096,4096]{2,1,0} copy(%add.1712)
  %sharding_constraint.715 = bf16[1,4096,4096]{2,1,0} copy(%sharding_constraint.714)
  %convert_element_type.1760 = f32[1,4096,4096]{2,1,0} convert(%sharding_constraint.715)
  %square.49 = f32[1,4096,4096]{2,1,0} multiply(%convert_element_type.1760, %convert_element_type.1760)
  %reduce.399 = f32[1,4096]{1,0} reduce(%square.49, %constant.1360), dimensions={2}, to_apply=%region_276.7359
  %div.698 = f32[1,4096]{1,0} multiply(%reduce.399, %broadcast.3412)
  %add.1713 = f32[1,4096]{1,0} add(%div.698, %broadcast.3413)
  %rsqrt.110 = f32[1,4096]{1,0} rsqrt(%add.1713)
  %mul.3832 = f32[1,4096,4096]{2,1,0} broadcast(%rsqrt.110), dimensions={0,1}
  %mul.3833 = f32[1,4096,4096]{2,1,0} multiply(%convert_element_type.1760, %mul.3832)
  %convert_element_type.1761 = bf16[1,4096,4096]{2,1,0} convert(%mul.3833)
  %param.237 = bf16[4096]{0} parameter(167), sharding={replicated}
  %mul.3834 = bf16[1,4096,4096]{2,1,0} broadcast(%param.237), dimensions={2}
  %mul.3835 = bf16[1,4096,4096]{2,1,0} multiply(%convert_element_type.1761, %mul.3834)
  %sharding_constraint.716 = bf16[1,4096,4096]{2,1,0} copy(%mul.3835)
  %sharding_constraint.717 = bf16[1,4096,4096]{2,1,0} copy(%sharding_constraint.716)
  %param.238 = bf16[512,32,128]{2,1,0} parameter(170), sharding={devices=[8,1,1]<=[8]}
  %all-gather.162 = bf16[4096,32,128]{2,1,0} all-gather(%param.238), channel_id=255, replica_groups=[1,8]<=[8], dimensions={0}, use_global_device_ids=true
  %dot.393 = bf16[1,4096,32,128]{3,2,1,0} dot(%sharding_constraint.717, %all-gather.162), lhs_contracting_dims={2}, rhs_contracting_dims={0}
  %slice.314 = bf16[1,4096,32,64]{3,2,1,0} slice(%dot.393), slice={[0:1], [0:4096], [0:32], [0:64]}
  %mul.3839 = bf16[1,4096,32,64]{3,2,1,0} multiply(%slice.314, %mul.2435)
  %slice.315 = bf16[1,4096,32,64]{3,2,1,0} slice(%dot.393), slice={[0:1], [0:4096], [0:32], [64:128]}
  %mul.3846 = bf16[1,4096,32,64]{3,2,1,0} multiply(%slice.315, %mul.2438)
  %sub.182 = bf16[1,4096,32,64]{3,2,1,0} subtract(%mul.3839, %mul.3846)
  %mul.3849 = bf16[1,4096,32,64]{3,2,1,0} multiply(%slice.315, %mul.2435)
  %mul.3852 = bf16[1,4096,32,64]{3,2,1,0} multiply(%slice.314, %mul.2438)
  %add.1714 = bf16[1,4096,32,64]{3,2,1,0} add(%mul.3849, %mul.3852)
  %concatenate.187 = bf16[1,4096,32,128]{3,2,1,0} concatenate(%sub.182, %add.1714), dimensions={3}
  %sharding_constraint.718 = bf16[1,4096,32,128]{3,2,1,0} copy(%concatenate.187)
  %param.239 = bf16[512,8,128]{2,1,0} parameter(168), sharding={devices=[8,1,1]<=[8]}
  %all-gather.163 = bf16[4096,8,128]{2,1,0} all-gather(%param.239), channel_id=256, replica_groups=[1,8]<=[8], dimensions={0}, use_global_device_ids=true
  %dot.394 = bf16[1,4096,8,128]{3,2,1,0} dot(%sharding_constraint.717, %all-gather.163), lhs_contracting_dims={2}, rhs_contracting_dims={0}
  %slice.316 = bf16[1,4096,8,64]{3,2,1,0} slice(%dot.394), slice={[0:1], [0:4096], [0:8], [0:64]}
  %mul.3857 = bf16[1,4096,8,64]{3,2,1,0} multiply(%slice.316, %mul.2456)
  %slice.317 = bf16[1,4096,8,64]{3,2,1,0} slice(%dot.394), slice={[0:1], [0:4096], [0:8], [64:128]}
  %mul.3860 = bf16[1,4096,8,64]{3,2,1,0} multiply(%slice.317, %mul.2460)
  %sub.183 = bf16[1,4096,8,64]{3,2,1,0} subtract(%mul.3857, %mul.3860)
  %mul.3866 = bf16[1,4096,8,64]{3,2,1,0} multiply(%slice.317, %mul.2456)
  %mul.3878 = bf16[1,4096,8,64]{3,2,1,0} multiply(%slice.316, %mul.2460)
  %add.1715 = bf16[1,4096,8,64]{3,2,1,0} add(%mul.3866, %mul.3878)
  %concatenate.188 = bf16[1,4096,8,128]{3,2,1,0} concatenate(%sub.183, %add.1715), dimensions={3}
  %sharding_constraint.720 = bf16[1,4096,8,128]{3,2,1,0} copy(%concatenate.188)
  %param.240 = bf16[512,8,128]{2,1,0} parameter(171), sharding={devices=[8,1,1]<=[8]}
  %all-gather.164 = bf16[4096,8,128]{2,1,0} all-gather(%param.240), channel_id=257, replica_groups=[1,8]<=[8], dimensions={0}, use_global_device_ids=true
  %dot.395 = bf16[1,4096,8,128]{3,2,1,0} dot(%sharding_constraint.717, %all-gather.164), lhs_contracting_dims={2}, rhs_contracting_dims={0}
  %sharding_constraint.721 = bf16[1,4096,8,128]{3,2,1,0} copy(%dot.395)
  %te_fused_attn_forward_ffi.92 = (bf16[1,4096,32,128]{3,2,1,0}, f32[1,32,4096,1]{3,2,1,0}, u32[2,4]{1,0}, u8[48]{0}) custom-call(%sharding_constraint.718, %sharding_constraint.720, %sharding_constraint.721, %constant.1403, %dynamic-slice.38, /*index=5*/%concatenate.31, %concatenate.36, %constant.1416, %constant.1416, %constant.1416, /*index=10*/%constant.1416, %constant.1416, %constant.1416), custom_call_target="te_fused_attn_forward_ffi", operand_layout_constraints={bf16[1,4096,32,128]{3,2,1,0}, bf16[1,4096,8,128]{3,2,1,0}, bf16[1,4096,8,128]{3,2,1,0}, bf16[0]{0}, u32[2]{0}, s32[2]{0}, s32[2]{0}, f32[0]{0}, f32[0]{0}, f32[0]{0}, f32[0]{0}, f32[0]{0}, f32[0]{0}}, api_version=API_VERSION_TYPED_FFI, backend_config={attn_heads = 32 : i64, bias_batch = 0 : i64, bias_heads = 0 : i64, bias_type = 0 : i64, deterministic = false, dropout_probability = 0.000000e+00 : f64, input_batch = 1 : i64, is_training = true, kv_max_seqlen = 4096 : i64, mask_type = 3 : i64, max_segments_per_seq = 1 : i64, num_gqa_groups = 8 : i64, q_max_seqlen = 4096 : i64, qk_head_dim = 128 : i64, qkv_layout = 9 : i64, scaling_factor = 1.000000e+00 : f64, v_head_dim = 128 : i64, window_size_left = -1 : i64, window_size_right = -1 : i64}
  %get-tuple-element.489 = bf16[1,4096,32,128]{3,2,1,0} get-tuple-element(%te_fused_attn_forward_ffi.92), index=0
  %sharding_constraint.722 = bf16[1,4096,32,128]{3,2,1,0} copy(%get-tuple-element.489)
  %param.241 = bf16[32,128,512]{2,1,0} parameter(169), sharding={devices=[1,1,8]<=[8]}
  %all-gather.166 = bf16[32,128,4096]{2,1,0} all-gather(%param.241), channel_id=259, replica_groups=[1,8]<=[8], dimensions={2}, use_global_device_ids=true
  %dot.396 = bf16[1,4096,4096]{2,1,0} dot(%sharding_constraint.722, %all-gather.166), lhs_contracting_dims={2,3}, rhs_contracting_dims={0,1}
  %sharding_constraint.723 = bf16[1,4096,4096]{2,1,0} copy(%dot.396)
  %add.1716 = bf16[1,4096,4096]{2,1,0} add(%sharding_constraint.715, %sharding_constraint.723)
  %convert_element_type.1774 = f32[1,4096,4096]{2,1,0} convert(%add.1716)
  %square.50 = f32[1,4096,4096]{2,1,0} multiply(%convert_element_type.1774, %convert_element_type.1774)
  %reduce.403 = f32[1,4096]{1,0} reduce(%square.50, %constant.1360), dimensions={2}, to_apply=%region_280.7483
  %div.707 = f32[1,4096]{1,0} multiply(%reduce.403, %broadcast.3412)
  %add.1717 = f32[1,4096]{1,0} add(%div.707, %broadcast.3413)
  %rsqrt.111 = f32[1,4096]{1,0} rsqrt(%add.1717)
  %mul.3879 = f32[1,4096,4096]{2,1,0} broadcast(%rsqrt.111), dimensions={0,1}
  %mul.3880 = f32[1,4096,4096]{2,1,0} multiply(%convert_element_type.1774, %mul.3879)
  %convert_element_type.1775 = bf16[1,4096,4096]{2,1,0} convert(%mul.3880)
  %param.242 = bf16[4096]{0} parameter(166), sharding={replicated}
  %mul.3881 = bf16[1,4096,4096]{2,1,0} broadcast(%param.242), dimensions={2}
  %mul.3882 = bf16[1,4096,4096]{2,1,0} multiply(%convert_element_type.1775, %mul.3881)
  %sharding_constraint.724 = bf16[1,4096,4096]{2,1,0} copy(%mul.3882)
  %param.243 = bf16[512,8]{1,0} parameter(162), sharding={devices=[8,1]<=[8]}
  %all-gather.167 = bf16[4096,8]{1,0} all-gather(%param.243), channel_id=260, replica_groups=[1,8]<=[8], dimensions={0}, use_global_device_ids=true
  %dot.397 = bf16[1,4096,8]{2,1,0} dot(%sharding_constraint.724, %all-gather.167), lhs_contracting_dims={2}, rhs_contracting_dims={0}
  %sharding_constraint.725 = bf16[1,4096,8]{2,1,0} copy(%dot.397)
  %top_k.69 = bf16[4096,8]{1,0} reshape(%sharding_constraint.725)
  %top_k.70 = (bf16[4096,2]{1,0}, s32[4096,2]{1,0}) custom-call(%top_k.69), custom_call_target="TopK", called_computations={%compare_greater_than.23.7502.clone}
  %get-tuple-element.490 = bf16[4096,2]{1,0} get-tuple-element(%top_k.70), index=0
  %get-tuple-element.491 = s32[4096,2]{1,0} get-tuple-element(%top_k.70), index=1
  %add.1718 = s32[4096,2]{1,0} add(%get-tuple-element.491, %broadcast.3418)
  %sort.87 = (bf16[4096,2]{1,0}, s32[4096,2]{1,0}) sort(%get-tuple-element.490, %add.1718), dimensions={1}, is_stable=true, to_apply=%compare-value-and-index.23
  %get-tuple-element.493 = s32[4096,2]{1,0} get-tuple-element(%sort.87), index=1
  %slice.320 = s32[4096,2]{1,0} slice(%get-tuple-element.493), slice={[0:4096], [0:2]}
  %top_k.71 = s32[1,4096,2]{2,1,0} reshape(%slice.320)
  %lt.72 = pred[1,4096,2]{2,1,0} compare(%top_k.71, %broadcast.3419), direction=LT
  %add.1719 = s32[1,4096,2]{2,1,0} add(%top_k.71, %broadcast.3420)
  %select_n.371 = s32[1,4096,2]{2,1,0} select(%lt.72, %add.1719, %top_k.71)
  %broadcast_in_dim.589 = s32[1,4096,2,1]{3,2,1,0} reshape(%select_n.371)
  %concatenate.191 = s32[1,4096,2,3]{3,2,1,0} concatenate(%add.1356, %iota.1883, %broadcast_in_dim.589), dimensions={3}
  %subtract.71 = s32[1,4096,2,3]{3,2,1,0} subtract(%concatenate.191, %broadcast.3428)
  %scatter.175 = u32[1,4096,8]{2,1,0} scatter(%dynamic-slice.43, %subtract.71, %add.1401), update_window_dims={}, inserted_window_dims={0,1,2}, scatter_dims_to_operand_dims={0,1,2}, index_vector_dim=3, to_apply=%region_281.7530.clone
  %gather.23 = u32[1,4096,2]{2,1,0} gather(%scatter.175, %subtract.71), offset_dims={}, collapsed_slice_dims={0,1,2}, start_index_map={0,1,2}, index_vector_dim=3, slice_sizes={1,1,1}
  %eq.2082 = pred[1,4096,2]{2,1,0} compare(%add.1401, %gather.23), direction=EQ
  %get-tuple-element.492 = bf16[4096,2]{1,0} get-tuple-element(%sort.87), index=0
  %slice.319 = bf16[4096,2]{1,0} slice(%get-tuple-element.492), slice={[0:4096], [0:2]}
  %convert_element_type.1776 = f32[4096,2]{1,0} convert(%slice.319)
  %convert_element_type.1777 = f32[1,4096,2]{2,1,0} reshape(%convert_element_type.1776)
  %reduce.404 = f32[4096]{0} reduce(%convert_element_type.1776, %constant.1450), dimensions={1}, to_apply=%region_282.7539
  %sub.184 = f32[1,4096]{1,0} reshape(%reduce.404)
  %sub.185 = f32[1,4096,2]{2,1,0} broadcast(%sub.184), dimensions={0,1}
  %sub.186 = f32[1,4096,2]{2,1,0} subtract(%convert_element_type.1777, %sub.185)
  %exp.172 = f32[1,4096,2]{2,1,0} exponential(%sub.186)
  %reduce.405 = f32[1,4096]{1,0} reduce(%exp.172, %constant.1360), dimensions={2}, to_apply=%region_283.7548
  %div.708 = f32[1,4096,2]{2,1,0} broadcast(%reduce.405), dimensions={0,1}
  %div.709 = f32[1,4096,2]{2,1,0} divide(%exp.172, %div.708)
  %convert_element_type.1778 = bf16[1,4096,2]{2,1,0} convert(%div.709)
  %select_n.372 = bf16[1,4096,2]{2,1,0} select(%eq.2082, %convert_element_type.1778, %broadcast.3427)
  %scatter.176 = bf16[1,4096,8]{2,1,0} scatter(%broadcast.3379, %subtract.71, %select_n.372), update_window_dims={}, inserted_window_dims={0,1,2}, scatter_dims_to_operand_dims={0,1,2}, index_vector_dim=3, to_apply=%region_284.7557.clone
  %eq.2084 = s32[1,4096,2,8]{3,2,1,0} broadcast(%top_k.71), dimensions={0,1,2}
  %iota.2238 = s32[1,4096,2,8]{3,2,1,0} iota(), iota_dimension=3
  %eq.2085 = pred[1,4096,2,8]{3,2,1,0} compare(%eq.2084, %iota.2238), direction=EQ
  %convert_element_type.1779 = s32[1,4096,2,8]{3,2,1,0} convert(%eq.2085)
  %reshape.10486 = s32[1,8192,8]{2,1,0} reshape(%convert_element_type.1779)
  %sharding_constraint.726 = s32[1,8192,8]{2,1,0} copy(%reshape.10486)
  %reduce-window.23 = s32[1,8192,8]{2,1,0} reduce-window(%sharding_constraint.726, %constant.1181), window={size=1x8192x1 pad=0_0x8191_0x0_0}, to_apply=%region_285.7569
  %reshape.10488 = s32[1,4096,2,8]{3,2,1,0} reshape(%reduce-window.23)
  %sharding_constraint.727 = s32[1,4096,2,8]{3,2,1,0} copy(%reshape.10488)
  %le.48 = pred[1,4096,2,8]{3,2,1,0} compare(%sharding_constraint.727, %broadcast.3429), direction=LE
  %mul.3883 = s32[1,4096,2,8]{3,2,1,0} select(%le.48, %convert_element_type.1779, %broadcast.3430)
  %reduce.406 = s32[1,4096,8]{2,1,0} reduce(%mul.3883, %constant.1181), dimensions={2}, to_apply=%region_286.7578
  %convert_element_type.1781 = bf16[1,4096,8]{2,1,0} convert(%reduce.406)
  %mul.3884 = bf16[1,4096,8]{2,1,0} multiply(%scatter.176, %convert_element_type.1781)
  %mul.3885 = bf16[1,4096,8,1025]{3,2,1,0} broadcast(%mul.3884), dimensions={0,1,2}
  %mul.3887 = s32[1,8192,8]{2,1,0} multiply(%sharding_constraint.726, %reduce-window.23)
  %reshape.10489 = s32[1,4096,2,8]{3,2,1,0} reshape(%mul.3887)
  %reduce.407 = s32[1,4096,8]{2,1,0} reduce(%reshape.10489, %constant.1181), dimensions={2}, to_apply=%region_287.7588
  %mul.3888 = s32[1,4096,8]{2,1,0} multiply(%reduce.407, %reduce.406)
  %eq.2086 = s32[1,4096,8,1025]{3,2,1,0} broadcast(%mul.3888), dimensions={0,1,2}
  %iota.2239 = s32[1,4096,8,1025]{3,2,1,0} iota(), iota_dimension=3
  %eq.2087 = pred[1,4096,8,1025]{3,2,1,0} compare(%eq.2086, %iota.2239), direction=EQ
  %convert_element_type.1782 = s32[1,4096,8,1025]{3,2,1,0} convert(%eq.2087)
  %convert_element_type.1783 = bf16[1,4096,8,1025]{3,2,1,0} convert(%convert_element_type.1782)
  %mul.3889 = bf16[1,4096,8,1025]{3,2,1,0} multiply(%mul.3885, %convert_element_type.1783)
  %slice.321 = bf16[1,4096,8,1024]{3,2,1,0} slice(%mul.3889), slice={[0:1], [0:4096], [0:8], [1:1025]}
  %sharding_constraint.728 = bf16[1,4096,8,1024]{3,2,1,0} copy(%slice.321)
  %convert_element_type.1784 = pred[1,4096,8,1024]{3,2,1,0} compare(%slice.321, %broadcast.3431), direction=NE
  %sharding_constraint.729 = pred[1,4096,8,1024]{3,2,1,0} copy(%convert_element_type.1784)
  %dot_general.59 = bf16[1,4096,8,1024]{3,2,1,0} convert(%sharding_constraint.729)
  %dot.398 = bf16[1,8,1024,4096]{3,2,1,0} dot(%dot_general.59, %sharding_constraint.724), lhs_batch_dims={0}, lhs_contracting_dims={1}, rhs_batch_dims={0}, rhs_contracting_dims={1}
  %reshape.10492 = bf16[1,8,1,1024,4096]{4,3,2,1,0} reshape(%dot.398)
  %all-to-all.46 = bf16[1,8,1,1024,4096]{4,3,2,1,0} all-to-all(%reshape.10492), channel_id=264, replica_groups=[1,8]<=[8], dimensions={1}
  %transpose.74 = bf16[8,1,1,1024,4096]{4,3,2,0,1} transpose(%all-to-all.46), dimensions={1,0,2,3,4}
  %reshape.10493 = bf16[8,1,1024,4096]{3,2,1,0} reshape(%transpose.74)
  %transpose.75 = bf16[1,8,1024,4096]{3,2,0,1} transpose(%reshape.10493), dimensions={1,0,2,3}
  %sharding_constraint.730 = bf16[1,8,1024,4096]{3,2,0,1} copy(%transpose.75)
  %param.244 = bf16[1,4096,14336]{2,1,0} parameter(163), sharding={devices=[8,1,1]<=[8]}
  %sharding_constraint.731 = bf16[1,4096,14336]{2,1,0} copy(%param.244)
  %dot.399 = bf16[1,8,1024,14336]{3,2,1,0} dot(%sharding_constraint.730, %sharding_constraint.731), lhs_batch_dims={0}, lhs_contracting_dims={3}, rhs_batch_dims={0}, rhs_contracting_dims={1}
  %sharding_constraint.732 = bf16[1,8,1024,14336]{3,2,1,0} copy(%dot.399)
  %neg.181 = bf16[1,8,1024,14336]{3,2,1,0} negate(%sharding_constraint.732)
  %exp.173 = bf16[1,8,1024,14336]{3,2,1,0} exponential(%neg.181)
  %add.1724 = bf16[1,8,1024,14336]{3,2,1,0} add(%exp.173, %jit_silu_.0)
  %div.710 = bf16[1,8,1024,14336]{3,2,1,0} divide(%jit_silu_.0, %add.1724)
  %mul.3890 = bf16[1,8,1024,14336]{3,2,1,0} multiply(%sharding_constraint.732, %div.710)
  %param.245 = bf16[1,4096,14336]{2,1,0} parameter(164), sharding={devices=[8,1,1]<=[8]}
  %sharding_constraint.733 = bf16[1,4096,14336]{2,1,0} copy(%param.245)
  %dot.400 = bf16[1,8,1024,14336]{3,2,1,0} dot(%sharding_constraint.730, %sharding_constraint.733), lhs_batch_dims={0}, lhs_contracting_dims={3}, rhs_batch_dims={0}, rhs_contracting_dims={1}
  %sharding_constraint.734 = bf16[1,8,1024,14336]{3,2,1,0} copy(%dot.400)
  %mul.3891 = bf16[1,8,1024,14336]{3,2,1,0} multiply(%mul.3890, %sharding_constraint.734)
  %param.246 = bf16[1,14336,4096]{2,1,0} parameter(165), sharding={devices=[8,1,1]<=[8]}
  %sharding_constraint.735 = bf16[1,14336,4096]{2,1,0} copy(%param.246)
  %dot.401 = bf16[1,8,1024,4096]{3,2,1,0} dot(%mul.3891, %sharding_constraint.735), lhs_batch_dims={0}, lhs_contracting_dims={3}, rhs_batch_dims={0}, rhs_contracting_dims={1}
  %sharding_constraint.736 = bf16[1,8,1024,4096]{3,2,1,0} copy(%dot.401)
  %reshape.10496 = bf16[1,8,1,1024,4096]{4,3,2,1,0} reshape(%sharding_constraint.736)
  %all-to-all.47 = bf16[1,8,1,1024,4096]{4,3,2,1,0} all-to-all(%reshape.10496), channel_id=265, replica_groups=[1,8]<=[8], dimensions={1}
  %transpose.76 = bf16[8,1,1,1024,4096]{4,3,2,0,1} transpose(%all-to-all.47), dimensions={1,0,2,3,4}
  %reshape.10497 = bf16[8,1,1024,4096]{3,2,1,0} reshape(%transpose.76)
  %dot.402 = bf16[1,4096,4096]{2,1,0} dot(%sharding_constraint.728, %reshape.10497), lhs_batch_dims={0}, lhs_contracting_dims={3,2}, rhs_batch_dims={1}, rhs_contracting_dims={2,0}
  %sharding_constraint.737 = bf16[1,4096,4096]{2,1,0} copy(%dot.402)
  %add.1725 = bf16[1,4096,4096]{2,1,0} add(%sharding_constraint.737, %add.1716)
  %sharding_constraint.738 = bf16[1,4096,4096]{2,1,0} copy(%add.1725)
  %sharding_constraint.739 = bf16[1,4096,4096]{2,1,0} copy(%sharding_constraint.738)
  %convert_element_type.1785 = f32[1,4096,4096]{2,1,0} convert(%sharding_constraint.739)
  %square.51 = f32[1,4096,4096]{2,1,0} multiply(%convert_element_type.1785, %convert_element_type.1785)
  %reduce.408 = f32[1,4096]{1,0} reduce(%square.51, %constant.1360), dimensions={2}, to_apply=%region_288.7630
  %div.711 = f32[1,4096]{1,0} multiply(%reduce.408, %broadcast.3412)
  %add.1726 = f32[1,4096]{1,0} add(%div.711, %broadcast.3413)
  %rsqrt.112 = f32[1,4096]{1,0} rsqrt(%add.1726)
  %mul.3892 = f32[1,4096,4096]{2,1,0} broadcast(%rsqrt.112), dimensions={0,1}
  %mul.3893 = f32[1,4096,4096]{2,1,0} multiply(%convert_element_type.1785, %mul.3892)
  %convert_element_type.1786 = bf16[1,4096,4096]{2,1,0} convert(%mul.3893)
  %param.247 = bf16[4096]{0} parameter(177), sharding={replicated}
  %mul.3897 = bf16[1,4096,4096]{2,1,0} broadcast(%param.247), dimensions={2}
  %mul.3898 = bf16[1,4096,4096]{2,1,0} multiply(%convert_element_type.1786, %mul.3897)
  %sharding_constraint.740 = bf16[1,4096,4096]{2,1,0} copy(%mul.3898)
  %sharding_constraint.741 = bf16[1,4096,4096]{2,1,0} copy(%sharding_constraint.740)
  %param.248 = bf16[512,32,128]{2,1,0} parameter(180), sharding={devices=[8,1,1]<=[8]}
  %all-gather.169 = bf16[4096,32,128]{2,1,0} all-gather(%param.248), channel_id=266, replica_groups=[1,8]<=[8], dimensions={0}, use_global_device_ids=true
  %dot.403 = bf16[1,4096,32,128]{3,2,1,0} dot(%sharding_constraint.741, %all-gather.169), lhs_contracting_dims={2}, rhs_contracting_dims={0}
  %slice.322 = bf16[1,4096,32,64]{3,2,1,0} slice(%dot.403), slice={[0:1], [0:4096], [0:32], [0:64]}
  %mul.3912 = bf16[1,4096,32,64]{3,2,1,0} multiply(%slice.322, %mul.2435)
  %slice.323 = bf16[1,4096,32,64]{3,2,1,0} slice(%dot.403), slice={[0:1], [0:4096], [0:32], [64:128]}
  %mul.3915 = bf16[1,4096,32,64]{3,2,1,0} multiply(%slice.323, %mul.2438)
  %sub.187 = bf16[1,4096,32,64]{3,2,1,0} subtract(%mul.3912, %mul.3915)
  %mul.3919 = bf16[1,4096,32,64]{3,2,1,0} multiply(%slice.323, %mul.2435)
  %mul.3926 = bf16[1,4096,32,64]{3,2,1,0} multiply(%slice.322, %mul.2438)
  %add.1727 = bf16[1,4096,32,64]{3,2,1,0} add(%mul.3919, %mul.3926)
  %concatenate.195 = bf16[1,4096,32,128]{3,2,1,0} concatenate(%sub.187, %add.1727), dimensions={3}
  %sharding_constraint.742 = bf16[1,4096,32,128]{3,2,1,0} copy(%concatenate.195)
  %param.249 = bf16[512,8,128]{2,1,0} parameter(178), sharding={devices=[8,1,1]<=[8]}
  %all-gather.170 = bf16[4096,8,128]{2,1,0} all-gather(%param.249), channel_id=267, replica_groups=[1,8]<=[8], dimensions={0}, use_global_device_ids=true
  %dot.404 = bf16[1,4096,8,128]{3,2,1,0} dot(%sharding_constraint.741, %all-gather.170), lhs_contracting_dims={2}, rhs_contracting_dims={0}
  %slice.324 = bf16[1,4096,8,64]{3,2,1,0} slice(%dot.404), slice={[0:1], [0:4096], [0:8], [0:64]}
  %mul.3930 = bf16[1,4096,8,64]{3,2,1,0} multiply(%slice.324, %mul.2456)
  %slice.325 = bf16[1,4096,8,64]{3,2,1,0} slice(%dot.404), slice={[0:1], [0:4096], [0:8], [64:128]}
  %mul.3933 = bf16[1,4096,8,64]{3,2,1,0} multiply(%slice.325, %mul.2460)
  %sub.188 = bf16[1,4096,8,64]{3,2,1,0} subtract(%mul.3930, %mul.3933)
  %mul.3936 = bf16[1,4096,8,64]{3,2,1,0} multiply(%slice.325, %mul.2456)
  %mul.3939 = bf16[1,4096,8,64]{3,2,1,0} multiply(%slice.324, %mul.2460)
  %add.1728 = bf16[1,4096,8,64]{3,2,1,0} add(%mul.3936, %mul.3939)
  %concatenate.196 = bf16[1,4096,8,128]{3,2,1,0} concatenate(%sub.188, %add.1728), dimensions={3}
  %sharding_constraint.744 = bf16[1,4096,8,128]{3,2,1,0} copy(%concatenate.196)
  %param.250 = bf16[512,8,128]{2,1,0} parameter(181), sharding={devices=[8,1,1]<=[8]}
  %all-gather.171 = bf16[4096,8,128]{2,1,0} all-gather(%param.250), channel_id=268, replica_groups=[1,8]<=[8], dimensions={0}, use_global_device_ids=true
  %dot.405 = bf16[1,4096,8,128]{3,2,1,0} dot(%sharding_constraint.741, %all-gather.171), lhs_contracting_dims={2}, rhs_contracting_dims={0}
  %sharding_constraint.745 = bf16[1,4096,8,128]{3,2,1,0} copy(%dot.405)
  %te_fused_attn_forward_ffi.96 = (bf16[1,4096,32,128]{3,2,1,0}, f32[1,32,4096,1]{3,2,1,0}, u32[2,4]{1,0}, u8[48]{0}) custom-call(%sharding_constraint.742, %sharding_constraint.744, %sharding_constraint.745, %constant.1403, %dynamic-slice.38, /*index=5*/%concatenate.31, %concatenate.36, %constant.1416, %constant.1416, %constant.1416, /*index=10*/%constant.1416, %constant.1416, %constant.1416), custom_call_target="te_fused_attn_forward_ffi", operand_layout_constraints={bf16[1,4096,32,128]{3,2,1,0}, bf16[1,4096,8,128]{3,2,1,0}, bf16[1,4096,8,128]{3,2,1,0}, bf16[0]{0}, u32[2]{0}, s32[2]{0}, s32[2]{0}, f32[0]{0}, f32[0]{0}, f32[0]{0}, f32[0]{0}, f32[0]{0}, f32[0]{0}}, api_version=API_VERSION_TYPED_FFI, backend_config={attn_heads = 32 : i64, bias_batch = 0 : i64, bias_heads = 0 : i64, bias_type = 0 : i64, deterministic = false, dropout_probability = 0.000000e+00 : f64, input_batch = 1 : i64, is_training = true, kv_max_seqlen = 4096 : i64, mask_type = 3 : i64, max_segments_per_seq = 1 : i64, num_gqa_groups = 8 : i64, q_max_seqlen = 4096 : i64, qk_head_dim = 128 : i64, qkv_layout = 9 : i64, scaling_factor = 1.000000e+00 : f64, v_head_dim = 128 : i64, window_size_left = -1 : i64, window_size_right = -1 : i64}
  %get-tuple-element.499 = bf16[1,4096,32,128]{3,2,1,0} get-tuple-element(%te_fused_attn_forward_ffi.96), index=0
  %sharding_constraint.746 = bf16[1,4096,32,128]{3,2,1,0} copy(%get-tuple-element.499)
  %param.251 = bf16[32,128,512]{2,1,0} parameter(179), sharding={devices=[1,1,8]<=[8]}
  %all-gather.173 = bf16[32,128,4096]{2,1,0} all-gather(%param.251), channel_id=270, replica_groups=[1,8]<=[8], dimensions={2}, use_global_device_ids=true
  %dot.406 = bf16[1,4096,4096]{2,1,0} dot(%sharding_constraint.746, %all-gather.173), lhs_contracting_dims={2,3}, rhs_contracting_dims={0,1}
  %sharding_constraint.747 = bf16[1,4096,4096]{2,1,0} copy(%dot.406)
  %add.1729 = bf16[1,4096,4096]{2,1,0} add(%sharding_constraint.739, %sharding_constraint.747)
  %convert_element_type.1801 = f32[1,4096,4096]{2,1,0} convert(%add.1729)
  %square.52 = f32[1,4096,4096]{2,1,0} multiply(%convert_element_type.1801, %convert_element_type.1801)
  %reduce.412 = f32[1,4096]{1,0} reduce(%square.52, %constant.1360), dimensions={2}, to_apply=%region_292.7754
  %div.720 = f32[1,4096]{1,0} multiply(%reduce.412, %broadcast.3412)
  %add.1730 = f32[1,4096]{1,0} add(%div.720, %broadcast.3413)
  %rsqrt.113 = f32[1,4096]{1,0} rsqrt(%add.1730)
  %mul.3941 = f32[1,4096,4096]{2,1,0} broadcast(%rsqrt.113), dimensions={0,1}
  %mul.3942 = f32[1,4096,4096]{2,1,0} multiply(%convert_element_type.1801, %mul.3941)
  %convert_element_type.1802 = bf16[1,4096,4096]{2,1,0} convert(%mul.3942)
  %param.252 = bf16[4096]{0} parameter(176), sharding={replicated}
  %mul.3943 = bf16[1,4096,4096]{2,1,0} broadcast(%param.252), dimensions={2}
  %mul.3944 = bf16[1,4096,4096]{2,1,0} multiply(%convert_element_type.1802, %mul.3943)
  %sharding_constraint.748 = bf16[1,4096,4096]{2,1,0} copy(%mul.3944)
  %param.253 = bf16[512,8]{1,0} parameter(172), sharding={devices=[8,1]<=[8]}
  %all-gather.174 = bf16[4096,8]{1,0} all-gather(%param.253), channel_id=271, replica_groups=[1,8]<=[8], dimensions={0}, use_global_device_ids=true
  %dot.407 = bf16[1,4096,8]{2,1,0} dot(%sharding_constraint.748, %all-gather.174), lhs_contracting_dims={2}, rhs_contracting_dims={0}
  %sharding_constraint.749 = bf16[1,4096,8]{2,1,0} copy(%dot.407)
  %top_k.72 = bf16[4096,8]{1,0} reshape(%sharding_constraint.749)
  %top_k.73 = (bf16[4096,2]{1,0}, s32[4096,2]{1,0}) custom-call(%top_k.72), custom_call_target="TopK", called_computations={%compare_greater_than.24.7773.clone}
  %get-tuple-element.500 = bf16[4096,2]{1,0} get-tuple-element(%top_k.73), index=0
  %get-tuple-element.501 = s32[4096,2]{1,0} get-tuple-element(%top_k.73), index=1
  %add.1731 = s32[4096,2]{1,0} add(%get-tuple-element.501, %broadcast.3418)
  %sort.88 = (bf16[4096,2]{1,0}, s32[4096,2]{1,0}) sort(%get-tuple-element.500, %add.1731), dimensions={1}, is_stable=true, to_apply=%compare-value-and-index.24
  %get-tuple-element.503 = s32[4096,2]{1,0} get-tuple-element(%sort.88), index=1
  %slice.328 = s32[4096,2]{1,0} slice(%get-tuple-element.503), slice={[0:4096], [0:2]}
  %top_k.74 = s32[1,4096,2]{2,1,0} reshape(%slice.328)
  %lt.75 = pred[1,4096,2]{2,1,0} compare(%top_k.74, %broadcast.3419), direction=LT
  %add.1732 = s32[1,4096,2]{2,1,0} add(%top_k.74, %broadcast.3420)
  %select_n.376 = s32[1,4096,2]{2,1,0} select(%lt.75, %add.1732, %top_k.74)
  %broadcast_in_dim.592 = s32[1,4096,2,1]{3,2,1,0} reshape(%select_n.376)
  %concatenate.199 = s32[1,4096,2,3]{3,2,1,0} concatenate(%add.1356, %iota.1881, %broadcast_in_dim.592), dimensions={3}
  %subtract.74 = s32[1,4096,2,3]{3,2,1,0} subtract(%concatenate.199, %broadcast.3428)
  %scatter.177 = u32[1,4096,8]{2,1,0} scatter(%dynamic-slice.43, %subtract.74, %add.1401), update_window_dims={}, inserted_window_dims={0,1,2}, scatter_dims_to_operand_dims={0,1,2}, index_vector_dim=3, to_apply=%region_293.7801.clone
  %gather.24 = u32[1,4096,2]{2,1,0} gather(%scatter.177, %subtract.74), offset_dims={}, collapsed_slice_dims={0,1,2}, start_index_map={0,1,2}, index_vector_dim=3, slice_sizes={1,1,1}
  %eq.2091 = pred[1,4096,2]{2,1,0} compare(%add.1401, %gather.24), direction=EQ
  %get-tuple-element.502 = bf16[4096,2]{1,0} get-tuple-element(%sort.88), index=0
  %slice.327 = bf16[4096,2]{1,0} slice(%get-tuple-element.502), slice={[0:4096], [0:2]}
  %convert_element_type.1803 = f32[4096,2]{1,0} convert(%slice.327)
  %convert_element_type.1804 = f32[1,4096,2]{2,1,0} reshape(%convert_element_type.1803)
  %reduce.413 = f32[4096]{0} reduce(%convert_element_type.1803, %constant.1450), dimensions={1}, to_apply=%region_294.7810
  %sub.189 = f32[1,4096]{1,0} reshape(%reduce.413)
  %sub.190 = f32[1,4096,2]{2,1,0} broadcast(%sub.189), dimensions={0,1}
  %sub.191 = f32[1,4096,2]{2,1,0} subtract(%convert_element_type.1804, %sub.190)
  %exp.174 = f32[1,4096,2]{2,1,0} exponential(%sub.191)
  %reduce.414 = f32[1,4096]{1,0} reduce(%exp.174, %constant.1360), dimensions={2}, to_apply=%region_295.7819
  %div.721 = f32[1,4096,2]{2,1,0} broadcast(%reduce.414), dimensions={0,1}
  %div.722 = f32[1,4096,2]{2,1,0} divide(%exp.174, %div.721)
  %convert_element_type.1805 = bf16[1,4096,2]{2,1,0} convert(%div.722)
  %select_n.377 = bf16[1,4096,2]{2,1,0} select(%eq.2091, %convert_element_type.1805, %broadcast.3427)
  %scatter.178 = bf16[1,4096,8]{2,1,0} scatter(%broadcast.3379, %subtract.74, %select_n.377), update_window_dims={}, inserted_window_dims={0,1,2}, scatter_dims_to_operand_dims={0,1,2}, index_vector_dim=3, to_apply=%region_296.7828.clone
  %eq.2093 = s32[1,4096,2,8]{3,2,1,0} broadcast(%top_k.74), dimensions={0,1,2}
  %iota.2254 = s32[1,4096,2,8]{3,2,1,0} iota(), iota_dimension=3
  %eq.2094 = pred[1,4096,2,8]{3,2,1,0} compare(%eq.2093, %iota.2254), direction=EQ
  %convert_element_type.1806 = s32[1,4096,2,8]{3,2,1,0} convert(%eq.2094)
  %reshape.10537 = s32[1,8192,8]{2,1,0} reshape(%convert_element_type.1806)
  %sharding_constraint.750 = s32[1,8192,8]{2,1,0} copy(%reshape.10537)
  %reduce-window.24 = s32[1,8192,8]{2,1,0} reduce-window(%sharding_constraint.750, %constant.1181), window={size=1x8192x1 pad=0_0x8191_0x0_0}, to_apply=%region_297.7840
  %reshape.10539 = s32[1,4096,2,8]{3,2,1,0} reshape(%reduce-window.24)
  %sharding_constraint.751 = s32[1,4096,2,8]{3,2,1,0} copy(%reshape.10539)
  %le.50 = pred[1,4096,2,8]{3,2,1,0} compare(%sharding_constraint.751, %broadcast.3429), direction=LE
  %mul.3945 = s32[1,4096,2,8]{3,2,1,0} select(%le.50, %convert_element_type.1806, %broadcast.3430)
  %reduce.415 = s32[1,4096,8]{2,1,0} reduce(%mul.3945, %constant.1181), dimensions={2}, to_apply=%region_298.7849
  %convert_element_type.1807 = bf16[1,4096,8]{2,1,0} convert(%reduce.415)
  %mul.3946 = bf16[1,4096,8]{2,1,0} multiply(%scatter.178, %convert_element_type.1807)
  %mul.3947 = bf16[1,4096,8,1025]{3,2,1,0} broadcast(%mul.3946), dimensions={0,1,2}
  %mul.3948 = s32[1,8192,8]{2,1,0} multiply(%sharding_constraint.750, %reduce-window.24)
  %reshape.10540 = s32[1,4096,2,8]{3,2,1,0} reshape(%mul.3948)
  %reduce.416 = s32[1,4096,8]{2,1,0} reduce(%reshape.10540, %constant.1181), dimensions={2}, to_apply=%region_299.7859
  %mul.3949 = s32[1,4096,8]{2,1,0} multiply(%reduce.416, %reduce.415)
  %eq.2095 = s32[1,4096,8,1025]{3,2,1,0} broadcast(%mul.3949), dimensions={0,1,2}
  %iota.2255 = s32[1,4096,8,1025]{3,2,1,0} iota(), iota_dimension=3
  %eq.2096 = pred[1,4096,8,1025]{3,2,1,0} compare(%eq.2095, %iota.2255), direction=EQ
  %convert_element_type.1808 = s32[1,4096,8,1025]{3,2,1,0} convert(%eq.2096)
  %convert_element_type.1809 = bf16[1,4096,8,1025]{3,2,1,0} convert(%convert_element_type.1808)
  %mul.3950 = bf16[1,4096,8,1025]{3,2,1,0} multiply(%mul.3947, %convert_element_type.1809)
  %slice.329 = bf16[1,4096,8,1024]{3,2,1,0} slice(%mul.3950), slice={[0:1], [0:4096], [0:8], [1:1025]}
  %sharding_constraint.752 = bf16[1,4096,8,1024]{3,2,1,0} copy(%slice.329)
  %convert_element_type.1810 = pred[1,4096,8,1024]{3,2,1,0} compare(%slice.329, %broadcast.3431), direction=NE
  %sharding_constraint.753 = pred[1,4096,8,1024]{3,2,1,0} copy(%convert_element_type.1810)
  %dot_general.60 = bf16[1,4096,8,1024]{3,2,1,0} convert(%sharding_constraint.753)
  %dot.408 = bf16[1,8,1024,4096]{3,2,1,0} dot(%dot_general.60, %sharding_constraint.748), lhs_batch_dims={0}, lhs_contracting_dims={1}, rhs_batch_dims={0}, rhs_contracting_dims={1}
  %reshape.10543 = bf16[1,8,1,1024,4096]{4,3,2,1,0} reshape(%dot.408)
  %all-to-all.48 = bf16[1,8,1,1024,4096]{4,3,2,1,0} all-to-all(%reshape.10543), channel_id=275, replica_groups=[1,8]<=[8], dimensions={1}
  %transpose.77 = bf16[8,1,1,1024,4096]{4,3,2,0,1} transpose(%all-to-all.48), dimensions={1,0,2,3,4}
  %reshape.10544 = bf16[8,1,1024,4096]{3,2,1,0} reshape(%transpose.77)
  %transpose.78 = bf16[1,8,1024,4096]{3,2,0,1} transpose(%reshape.10544), dimensions={1,0,2,3}
  %sharding_constraint.754 = bf16[1,8,1024,4096]{3,2,0,1} copy(%transpose.78)
  %param.254 = bf16[1,4096,14336]{2,1,0} parameter(173), sharding={devices=[8,1,1]<=[8]}
  %sharding_constraint.755 = bf16[1,4096,14336]{2,1,0} copy(%param.254)
  %dot.409 = bf16[1,8,1024,14336]{3,2,1,0} dot(%sharding_constraint.754, %sharding_constraint.755), lhs_batch_dims={0}, lhs_contracting_dims={3}, rhs_batch_dims={0}, rhs_contracting_dims={1}
  %sharding_constraint.756 = bf16[1,8,1024,14336]{3,2,1,0} copy(%dot.409)
  %neg.182 = bf16[1,8,1024,14336]{3,2,1,0} negate(%sharding_constraint.756)
  %exp.175 = bf16[1,8,1024,14336]{3,2,1,0} exponential(%neg.182)
  %add.1740 = bf16[1,8,1024,14336]{3,2,1,0} add(%exp.175, %jit_silu_.0)
  %div.723 = bf16[1,8,1024,14336]{3,2,1,0} divide(%jit_silu_.0, %add.1740)
  %mul.3951 = bf16[1,8,1024,14336]{3,2,1,0} multiply(%sharding_constraint.756, %div.723)
  %param.255 = bf16[1,4096,14336]{2,1,0} parameter(174), sharding={devices=[8,1,1]<=[8]}
  %sharding_constraint.757 = bf16[1,4096,14336]{2,1,0} copy(%param.255)
  %dot.410 = bf16[1,8,1024,14336]{3,2,1,0} dot(%sharding_constraint.754, %sharding_constraint.757), lhs_batch_dims={0}, lhs_contracting_dims={3}, rhs_batch_dims={0}, rhs_contracting_dims={1}
  %sharding_constraint.758 = bf16[1,8,1024,14336]{3,2,1,0} copy(%dot.410)
  %mul.3952 = bf16[1,8,1024,14336]{3,2,1,0} multiply(%mul.3951, %sharding_constraint.758)
  %param.256 = bf16[1,14336,4096]{2,1,0} parameter(175), sharding={devices=[8,1,1]<=[8]}
  %sharding_constraint.759 = bf16[1,14336,4096]{2,1,0} copy(%param.256)
  %dot.411 = bf16[1,8,1024,4096]{3,2,1,0} dot(%mul.3952, %sharding_constraint.759), lhs_batch_dims={0}, lhs_contracting_dims={3}, rhs_batch_dims={0}, rhs_contracting_dims={1}
  %sharding_constraint.760 = bf16[1,8,1024,4096]{3,2,1,0} copy(%dot.411)
  %reshape.10547 = bf16[1,8,1,1024,4096]{4,3,2,1,0} reshape(%sharding_constraint.760)
  %all-to-all.49 = bf16[1,8,1,1024,4096]{4,3,2,1,0} all-to-all(%reshape.10547), channel_id=276, replica_groups=[1,8]<=[8], dimensions={1}
  %transpose.79 = bf16[8,1,1,1024,4096]{4,3,2,0,1} transpose(%all-to-all.49), dimensions={1,0,2,3,4}
  %reshape.10548 = bf16[8,1,1024,4096]{3,2,1,0} reshape(%transpose.79)
  %dot.412 = bf16[1,4096,4096]{2,1,0} dot(%sharding_constraint.752, %reshape.10548), lhs_batch_dims={0}, lhs_contracting_dims={3,2}, rhs_batch_dims={1}, rhs_contracting_dims={2,0}
  %sharding_constraint.761 = bf16[1,4096,4096]{2,1,0} copy(%dot.412)
  %add.1741 = bf16[1,4096,4096]{2,1,0} add(%sharding_constraint.761, %add.1729)
  %sharding_constraint.762 = bf16[1,4096,4096]{2,1,0} copy(%add.1741)
  %sharding_constraint.763 = bf16[1,4096,4096]{2,1,0} copy(%sharding_constraint.762)
  %convert_element_type.1811 = f32[1,4096,4096]{2,1,0} convert(%sharding_constraint.763)
  %square.53 = f32[1,4096,4096]{2,1,0} multiply(%convert_element_type.1811, %convert_element_type.1811)
  %reduce.417 = f32[1,4096]{1,0} reduce(%square.53, %constant.1360), dimensions={2}, to_apply=%region_300.7901
  %div.724 = f32[1,4096]{1,0} multiply(%reduce.417, %broadcast.3412)
  %add.1743 = f32[1,4096]{1,0} add(%div.724, %broadcast.3413)
  %rsqrt.114 = f32[1,4096]{1,0} rsqrt(%add.1743)
  %mul.3953 = f32[1,4096,4096]{2,1,0} broadcast(%rsqrt.114), dimensions={0,1}
  %mul.3954 = f32[1,4096,4096]{2,1,0} multiply(%convert_element_type.1811, %mul.3953)
  %convert_element_type.1812 = bf16[1,4096,4096]{2,1,0} convert(%mul.3954)
  %param.257 = bf16[4096]{0} parameter(187), sharding={replicated}
  %mul.3955 = bf16[1,4096,4096]{2,1,0} broadcast(%param.257), dimensions={2}
  %mul.3956 = bf16[1,4096,4096]{2,1,0} multiply(%convert_element_type.1812, %mul.3955)
  %sharding_constraint.764 = bf16[1,4096,4096]{2,1,0} copy(%mul.3956)
  %sharding_constraint.765 = bf16[1,4096,4096]{2,1,0} copy(%sharding_constraint.764)
  %param.258 = bf16[512,32,128]{2,1,0} parameter(190), sharding={devices=[8,1,1]<=[8]}
  %all-gather.176 = bf16[4096,32,128]{2,1,0} all-gather(%param.258), channel_id=277, replica_groups=[1,8]<=[8], dimensions={0}, use_global_device_ids=true
  %dot.413 = bf16[1,4096,32,128]{3,2,1,0} dot(%sharding_constraint.765, %all-gather.176), lhs_contracting_dims={2}, rhs_contracting_dims={0}
  %slice.330 = bf16[1,4096,32,64]{3,2,1,0} slice(%dot.413), slice={[0:1], [0:4096], [0:32], [0:64]}
  %mul.3964 = bf16[1,4096,32,64]{3,2,1,0} multiply(%slice.330, %mul.2435)
  %slice.331 = bf16[1,4096,32,64]{3,2,1,0} slice(%dot.413), slice={[0:1], [0:4096], [0:32], [64:128]}
  %mul.3972 = bf16[1,4096,32,64]{3,2,1,0} multiply(%slice.331, %mul.2438)
  %sub.192 = bf16[1,4096,32,64]{3,2,1,0} subtract(%mul.3964, %mul.3972)
  %mul.3975 = bf16[1,4096,32,64]{3,2,1,0} multiply(%slice.331, %mul.2435)
  %mul.3979 = bf16[1,4096,32,64]{3,2,1,0} multiply(%slice.330, %mul.2438)
  %add.1744 = bf16[1,4096,32,64]{3,2,1,0} add(%mul.3975, %mul.3979)
  %concatenate.203 = bf16[1,4096,32,128]{3,2,1,0} concatenate(%sub.192, %add.1744), dimensions={3}
  %sharding_constraint.766 = bf16[1,4096,32,128]{3,2,1,0} copy(%concatenate.203)
  %param.259 = bf16[512,8,128]{2,1,0} parameter(188), sharding={devices=[8,1,1]<=[8]}
  %all-gather.177 = bf16[4096,8,128]{2,1,0} all-gather(%param.259), channel_id=278, replica_groups=[1,8]<=[8], dimensions={0}, use_global_device_ids=true
  %dot.414 = bf16[1,4096,8,128]{3,2,1,0} dot(%sharding_constraint.765, %all-gather.177), lhs_contracting_dims={2}, rhs_contracting_dims={0}
  %slice.332 = bf16[1,4096,8,64]{3,2,1,0} slice(%dot.414), slice={[0:1], [0:4096], [0:8], [0:64]}
  %mul.3983 = bf16[1,4096,8,64]{3,2,1,0} multiply(%slice.332, %mul.2456)
  %slice.333 = bf16[1,4096,8,64]{3,2,1,0} slice(%dot.414), slice={[0:1], [0:4096], [0:8], [64:128]}
  %mul.3986 = bf16[1,4096,8,64]{3,2,1,0} multiply(%slice.333, %mul.2460)
  %sub.193 = bf16[1,4096,8,64]{3,2,1,0} subtract(%mul.3983, %mul.3986)
  %mul.3989 = bf16[1,4096,8,64]{3,2,1,0} multiply(%slice.333, %mul.2456)
  %mul.3992 = bf16[1,4096,8,64]{3,2,1,0} multiply(%slice.332, %mul.2460)
  %add.1745 = bf16[1,4096,8,64]{3,2,1,0} add(%mul.3989, %mul.3992)
  %concatenate.204 = bf16[1,4096,8,128]{3,2,1,0} concatenate(%sub.193, %add.1745), dimensions={3}
  %sharding_constraint.768 = bf16[1,4096,8,128]{3,2,1,0} copy(%concatenate.204)
  %param.260 = bf16[512,8,128]{2,1,0} parameter(191), sharding={devices=[8,1,1]<=[8]}
  %all-gather.178 = bf16[4096,8,128]{2,1,0} all-gather(%param.260), channel_id=279, replica_groups=[1,8]<=[8], dimensions={0}, use_global_device_ids=true
  %dot.415 = bf16[1,4096,8,128]{3,2,1,0} dot(%sharding_constraint.765, %all-gather.178), lhs_contracting_dims={2}, rhs_contracting_dims={0}
  %sharding_constraint.769 = bf16[1,4096,8,128]{3,2,1,0} copy(%dot.415)
  %te_fused_attn_forward_ffi.100 = (bf16[1,4096,32,128]{3,2,1,0}, f32[1,32,4096,1]{3,2,1,0}, u32[2,4]{1,0}, u8[48]{0}) custom-call(%sharding_constraint.766, %sharding_constraint.768, %sharding_constraint.769, %constant.1403, %dynamic-slice.38, /*index=5*/%concatenate.31, %concatenate.36, %constant.1416, %constant.1416, %constant.1416, /*index=10*/%constant.1416, %constant.1416, %constant.1416), custom_call_target="te_fused_attn_forward_ffi", operand_layout_constraints={bf16[1,4096,32,128]{3,2,1,0}, bf16[1,4096,8,128]{3,2,1,0}, bf16[1,4096,8,128]{3,2,1,0}, bf16[0]{0}, u32[2]{0}, s32[2]{0}, s32[2]{0}, f32[0]{0}, f32[0]{0}, f32[0]{0}, f32[0]{0}, f32[0]{0}, f32[0]{0}}, api_version=API_VERSION_TYPED_FFI, backend_config={attn_heads = 32 : i64, bias_batch = 0 : i64, bias_heads = 0 : i64, bias_type = 0 : i64, deterministic = false, dropout_probability = 0.000000e+00 : f64, input_batch = 1 : i64, is_training = true, kv_max_seqlen = 4096 : i64, mask_type = 3 : i64, max_segments_per_seq = 1 : i64, num_gqa_groups = 8 : i64, q_max_seqlen = 4096 : i64, qk_head_dim = 128 : i64, qkv_layout = 9 : i64, scaling_factor = 1.000000e+00 : f64, v_head_dim = 128 : i64, window_size_left = -1 : i64, window_size_right = -1 : i64}
  %get-tuple-element.509 = bf16[1,4096,32,128]{3,2,1,0} get-tuple-element(%te_fused_attn_forward_ffi.100), index=0
  %sharding_constraint.770 = bf16[1,4096,32,128]{3,2,1,0} copy(%get-tuple-element.509)
  %param.261 = bf16[32,128,512]{2,1,0} parameter(189), sharding={devices=[1,1,8]<=[8]}
  %all-gather.180 = bf16[32,128,4096]{2,1,0} all-gather(%param.261), channel_id=281, replica_groups=[1,8]<=[8], dimensions={2}, use_global_device_ids=true
  %dot.416 = bf16[1,4096,4096]{2,1,0} dot(%sharding_constraint.770, %all-gather.180), lhs_contracting_dims={2,3}, rhs_contracting_dims={0,1}
  %sharding_constraint.771 = bf16[1,4096,4096]{2,1,0} copy(%dot.416)
  %add.1746 = bf16[1,4096,4096]{2,1,0} add(%sharding_constraint.763, %sharding_constraint.771)
  %convert_element_type.1824 = f32[1,4096,4096]{2,1,0} convert(%add.1746)
  %square.54 = f32[1,4096,4096]{2,1,0} multiply(%convert_element_type.1824, %convert_element_type.1824)
  %reduce.421 = f32[1,4096]{1,0} reduce(%square.54, %constant.1360), dimensions={2}, to_apply=%region_304.8025
  %div.733 = f32[1,4096]{1,0} multiply(%reduce.421, %broadcast.3412)
  %add.1747 = f32[1,4096]{1,0} add(%div.733, %broadcast.3413)
  %rsqrt.115 = f32[1,4096]{1,0} rsqrt(%add.1747)
  %mul.3993 = f32[1,4096,4096]{2,1,0} broadcast(%rsqrt.115), dimensions={0,1}
  %mul.3994 = f32[1,4096,4096]{2,1,0} multiply(%convert_element_type.1824, %mul.3993)
  %convert_element_type.1825 = bf16[1,4096,4096]{2,1,0} convert(%mul.3994)
  %param.262 = bf16[4096]{0} parameter(186), sharding={replicated}
  %mul.3995 = bf16[1,4096,4096]{2,1,0} broadcast(%param.262), dimensions={2}
  %mul.3996 = bf16[1,4096,4096]{2,1,0} multiply(%convert_element_type.1825, %mul.3995)
  %sharding_constraint.772 = bf16[1,4096,4096]{2,1,0} copy(%mul.3996)
  %param.263 = bf16[512,8]{1,0} parameter(182), sharding={devices=[8,1]<=[8]}
  %all-gather.181 = bf16[4096,8]{1,0} all-gather(%param.263), channel_id=282, replica_groups=[1,8]<=[8], dimensions={0}, use_global_device_ids=true
  %dot.417 = bf16[1,4096,8]{2,1,0} dot(%sharding_constraint.772, %all-gather.181), lhs_contracting_dims={2}, rhs_contracting_dims={0}
  %sharding_constraint.773 = bf16[1,4096,8]{2,1,0} copy(%dot.417)
  %top_k.75 = bf16[4096,8]{1,0} reshape(%sharding_constraint.773)
  %top_k.76 = (bf16[4096,2]{1,0}, s32[4096,2]{1,0}) custom-call(%top_k.75), custom_call_target="TopK", called_computations={%compare_greater_than.25.8044.clone}
  %get-tuple-element.510 = bf16[4096,2]{1,0} get-tuple-element(%top_k.76), index=0
  %get-tuple-element.511 = s32[4096,2]{1,0} get-tuple-element(%top_k.76), index=1
  %add.1748 = s32[4096,2]{1,0} add(%get-tuple-element.511, %broadcast.3418)
  %sort.89 = (bf16[4096,2]{1,0}, s32[4096,2]{1,0}) sort(%get-tuple-element.510, %add.1748), dimensions={1}, is_stable=true, to_apply=%compare-value-and-index.25
  %get-tuple-element.513 = s32[4096,2]{1,0} get-tuple-element(%sort.89), index=1
  %slice.336 = s32[4096,2]{1,0} slice(%get-tuple-element.513), slice={[0:4096], [0:2]}
  %top_k.77 = s32[1,4096,2]{2,1,0} reshape(%slice.336)
  %lt.78 = pred[1,4096,2]{2,1,0} compare(%top_k.77, %broadcast.3419), direction=LT
  %add.1749 = s32[1,4096,2]{2,1,0} add(%top_k.77, %broadcast.3420)
  %select_n.381 = s32[1,4096,2]{2,1,0} select(%lt.78, %add.1749, %top_k.77)
  %broadcast_in_dim.595 = s32[1,4096,2,1]{3,2,1,0} reshape(%select_n.381)
  %concatenate.207 = s32[1,4096,2,3]{3,2,1,0} concatenate(%add.1356, %iota.1879, %broadcast_in_dim.595), dimensions={3}
  %subtract.77 = s32[1,4096,2,3]{3,2,1,0} subtract(%concatenate.207, %broadcast.3428)
  %scatter.179 = u32[1,4096,8]{2,1,0} scatter(%dynamic-slice.43, %subtract.77, %add.1401), update_window_dims={}, inserted_window_dims={0,1,2}, scatter_dims_to_operand_dims={0,1,2}, index_vector_dim=3, to_apply=%region_305.8072.clone
  %gather.25 = u32[1,4096,2]{2,1,0} gather(%scatter.179, %subtract.77), offset_dims={}, collapsed_slice_dims={0,1,2}, start_index_map={0,1,2}, index_vector_dim=3, slice_sizes={1,1,1}
  %eq.2100 = pred[1,4096,2]{2,1,0} compare(%add.1401, %gather.25), direction=EQ
  %get-tuple-element.512 = bf16[4096,2]{1,0} get-tuple-element(%sort.89), index=0
  %slice.335 = bf16[4096,2]{1,0} slice(%get-tuple-element.512), slice={[0:4096], [0:2]}
  %convert_element_type.1826 = f32[4096,2]{1,0} convert(%slice.335)
  %convert_element_type.1827 = f32[1,4096,2]{2,1,0} reshape(%convert_element_type.1826)
  %reduce.422 = f32[4096]{0} reduce(%convert_element_type.1826, %constant.1450), dimensions={1}, to_apply=%region_306.8081
  %sub.194 = f32[1,4096]{1,0} reshape(%reduce.422)
  %sub.195 = f32[1,4096,2]{2,1,0} broadcast(%sub.194), dimensions={0,1}
  %sub.196 = f32[1,4096,2]{2,1,0} subtract(%convert_element_type.1827, %sub.195)
  %exp.176 = f32[1,4096,2]{2,1,0} exponential(%sub.196)
  %reduce.423 = f32[1,4096]{1,0} reduce(%exp.176, %constant.1360), dimensions={2}, to_apply=%region_307.8090
  %div.734 = f32[1,4096,2]{2,1,0} broadcast(%reduce.423), dimensions={0,1}
  %div.735 = f32[1,4096,2]{2,1,0} divide(%exp.176, %div.734)
  %convert_element_type.1828 = bf16[1,4096,2]{2,1,0} convert(%div.735)
  %select_n.382 = bf16[1,4096,2]{2,1,0} select(%eq.2100, %convert_element_type.1828, %broadcast.3427)
  %scatter.180 = bf16[1,4096,8]{2,1,0} scatter(%broadcast.3379, %subtract.77, %select_n.382), update_window_dims={}, inserted_window_dims={0,1,2}, scatter_dims_to_operand_dims={0,1,2}, index_vector_dim=3, to_apply=%region_308.8099.clone
  %eq.2102 = s32[1,4096,2,8]{3,2,1,0} broadcast(%top_k.77), dimensions={0,1,2}
  %iota.2267 = s32[1,4096,2,8]{3,2,1,0} iota(), iota_dimension=3
  %eq.2103 = pred[1,4096,2,8]{3,2,1,0} compare(%eq.2102, %iota.2267), direction=EQ
  %convert_element_type.1829 = s32[1,4096,2,8]{3,2,1,0} convert(%eq.2103)
  %reshape.10603 = s32[1,8192,8]{2,1,0} reshape(%convert_element_type.1829)
  %sharding_constraint.774 = s32[1,8192,8]{2,1,0} copy(%reshape.10603)
  %reduce-window.25 = s32[1,8192,8]{2,1,0} reduce-window(%sharding_constraint.774, %constant.1181), window={size=1x8192x1 pad=0_0x8191_0x0_0}, to_apply=%region_309.8111
  %reshape.10605 = s32[1,4096,2,8]{3,2,1,0} reshape(%reduce-window.25)
  %sharding_constraint.775 = s32[1,4096,2,8]{3,2,1,0} copy(%reshape.10605)
  %le.52 = pred[1,4096,2,8]{3,2,1,0} compare(%sharding_constraint.775, %broadcast.3429), direction=LE
  %mul.4005 = s32[1,4096,2,8]{3,2,1,0} select(%le.52, %convert_element_type.1829, %broadcast.3430)
  %reduce.424 = s32[1,4096,8]{2,1,0} reduce(%mul.4005, %constant.1181), dimensions={2}, to_apply=%region_310.8120
  %convert_element_type.1830 = bf16[1,4096,8]{2,1,0} convert(%reduce.424)
  %mul.4014 = bf16[1,4096,8]{2,1,0} multiply(%scatter.180, %convert_element_type.1830)
  %mul.4015 = bf16[1,4096,8,1025]{3,2,1,0} broadcast(%mul.4014), dimensions={0,1,2}
  %mul.4016 = s32[1,8192,8]{2,1,0} multiply(%sharding_constraint.774, %reduce-window.25)
  %reshape.10606 = s32[1,4096,2,8]{3,2,1,0} reshape(%mul.4016)
  %reduce.425 = s32[1,4096,8]{2,1,0} reduce(%reshape.10606, %constant.1181), dimensions={2}, to_apply=%region_311.8130
  %mul.4017 = s32[1,4096,8]{2,1,0} multiply(%reduce.425, %reduce.424)
  %eq.2104 = s32[1,4096,8,1025]{3,2,1,0} broadcast(%mul.4017), dimensions={0,1,2}
  %iota.2268 = s32[1,4096,8,1025]{3,2,1,0} iota(), iota_dimension=3
  %eq.2105 = pred[1,4096,8,1025]{3,2,1,0} compare(%eq.2104, %iota.2268), direction=EQ
  %convert_element_type.1831 = s32[1,4096,8,1025]{3,2,1,0} convert(%eq.2105)
  %convert_element_type.1832 = bf16[1,4096,8,1025]{3,2,1,0} convert(%convert_element_type.1831)
  %mul.4019 = bf16[1,4096,8,1025]{3,2,1,0} multiply(%mul.4015, %convert_element_type.1832)
  %slice.337 = bf16[1,4096,8,1024]{3,2,1,0} slice(%mul.4019), slice={[0:1], [0:4096], [0:8], [1:1025]}
  %sharding_constraint.776 = bf16[1,4096,8,1024]{3,2,1,0} copy(%slice.337)
  %convert_element_type.1833 = pred[1,4096,8,1024]{3,2,1,0} compare(%slice.337, %broadcast.3431), direction=NE
  %sharding_constraint.777 = pred[1,4096,8,1024]{3,2,1,0} copy(%convert_element_type.1833)
  %dot_general.61 = bf16[1,4096,8,1024]{3,2,1,0} convert(%sharding_constraint.777)
  %dot.418 = bf16[1,8,1024,4096]{3,2,1,0} dot(%dot_general.61, %sharding_constraint.772), lhs_batch_dims={0}, lhs_contracting_dims={1}, rhs_batch_dims={0}, rhs_contracting_dims={1}
  %reshape.10609 = bf16[1,8,1,1024,4096]{4,3,2,1,0} reshape(%dot.418)
  %all-to-all.50 = bf16[1,8,1,1024,4096]{4,3,2,1,0} all-to-all(%reshape.10609), channel_id=286, replica_groups=[1,8]<=[8], dimensions={1}
  %transpose.80 = bf16[8,1,1,1024,4096]{4,3,2,0,1} transpose(%all-to-all.50), dimensions={1,0,2,3,4}
  %reshape.10610 = bf16[8,1,1024,4096]{3,2,1,0} reshape(%transpose.80)
  %transpose.81 = bf16[1,8,1024,4096]{3,2,0,1} transpose(%reshape.10610), dimensions={1,0,2,3}
  %sharding_constraint.778 = bf16[1,8,1024,4096]{3,2,0,1} copy(%transpose.81)
  %param.264 = bf16[1,4096,14336]{2,1,0} parameter(183), sharding={devices=[8,1,1]<=[8]}
  %sharding_constraint.779 = bf16[1,4096,14336]{2,1,0} copy(%param.264)
  %dot.419 = bf16[1,8,1024,14336]{3,2,1,0} dot(%sharding_constraint.778, %sharding_constraint.779), lhs_batch_dims={0}, lhs_contracting_dims={3}, rhs_batch_dims={0}, rhs_contracting_dims={1}
  %sharding_constraint.780 = bf16[1,8,1024,14336]{3,2,1,0} copy(%dot.419)
  %neg.183 = bf16[1,8,1024,14336]{3,2,1,0} negate(%sharding_constraint.780)
  %exp.177 = bf16[1,8,1024,14336]{3,2,1,0} exponential(%neg.183)
  %add.1755 = bf16[1,8,1024,14336]{3,2,1,0} add(%exp.177, %jit_silu_.0)
  %div.736 = bf16[1,8,1024,14336]{3,2,1,0} divide(%jit_silu_.0, %add.1755)
  %mul.4020 = bf16[1,8,1024,14336]{3,2,1,0} multiply(%sharding_constraint.780, %div.736)
  %param.265 = bf16[1,4096,14336]{2,1,0} parameter(184), sharding={devices=[8,1,1]<=[8]}
  %sharding_constraint.781 = bf16[1,4096,14336]{2,1,0} copy(%param.265)
  %dot.420 = bf16[1,8,1024,14336]{3,2,1,0} dot(%sharding_constraint.778, %sharding_constraint.781), lhs_batch_dims={0}, lhs_contracting_dims={3}, rhs_batch_dims={0}, rhs_contracting_dims={1}
  %sharding_constraint.782 = bf16[1,8,1024,14336]{3,2,1,0} copy(%dot.420)
  %mul.4021 = bf16[1,8,1024,14336]{3,2,1,0} multiply(%mul.4020, %sharding_constraint.782)
  %param.266 = bf16[1,14336,4096]{2,1,0} parameter(185), sharding={devices=[8,1,1]<=[8]}
  %sharding_constraint.783 = bf16[1,14336,4096]{2,1,0} copy(%param.266)
  %dot.421 = bf16[1,8,1024,4096]{3,2,1,0} dot(%mul.4021, %sharding_constraint.783), lhs_batch_dims={0}, lhs_contracting_dims={3}, rhs_batch_dims={0}, rhs_contracting_dims={1}
  %sharding_constraint.784 = bf16[1,8,1024,4096]{3,2,1,0} copy(%dot.421)
  %reshape.10613 = bf16[1,8,1,1024,4096]{4,3,2,1,0} reshape(%sharding_constraint.784)
  %all-to-all.51 = bf16[1,8,1,1024,4096]{4,3,2,1,0} all-to-all(%reshape.10613), channel_id=287, replica_groups=[1,8]<=[8], dimensions={1}
  %transpose.82 = bf16[8,1,1,1024,4096]{4,3,2,0,1} transpose(%all-to-all.51), dimensions={1,0,2,3,4}
  %reshape.10614 = bf16[8,1,1024,4096]{3,2,1,0} reshape(%transpose.82)
  %dot.422 = bf16[1,4096,4096]{2,1,0} dot(%sharding_constraint.776, %reshape.10614), lhs_batch_dims={0}, lhs_contracting_dims={3,2}, rhs_batch_dims={1}, rhs_contracting_dims={2,0}
  %sharding_constraint.785 = bf16[1,4096,4096]{2,1,0} copy(%dot.422)
  %add.1756 = bf16[1,4096,4096]{2,1,0} add(%sharding_constraint.785, %add.1746)
  %sharding_constraint.786 = bf16[1,4096,4096]{2,1,0} copy(%add.1756)
  %sharding_constraint.787 = bf16[1,4096,4096]{2,1,0} copy(%sharding_constraint.786)
  %convert_element_type.1834 = f32[1,4096,4096]{2,1,0} convert(%sharding_constraint.787)
  %square.55 = f32[1,4096,4096]{2,1,0} multiply(%convert_element_type.1834, %convert_element_type.1834)
  %reduce.426 = f32[1,4096]{1,0} reduce(%square.55, %constant.1360), dimensions={2}, to_apply=%region_312.8172
  %div.737 = f32[1,4096]{1,0} multiply(%reduce.426, %broadcast.3412)
  %add.1757 = f32[1,4096]{1,0} add(%div.737, %broadcast.3413)
  %rsqrt.116 = f32[1,4096]{1,0} rsqrt(%add.1757)
  %mul.4022 = f32[1,4096,4096]{2,1,0} broadcast(%rsqrt.116), dimensions={0,1}
  %mul.4023 = f32[1,4096,4096]{2,1,0} multiply(%convert_element_type.1834, %mul.4022)
  %convert_element_type.1835 = bf16[1,4096,4096]{2,1,0} convert(%mul.4023)
  %param.267 = bf16[4096]{0} parameter(197), sharding={replicated}
  %mul.4024 = bf16[1,4096,4096]{2,1,0} broadcast(%param.267), dimensions={2}
  %mul.4025 = bf16[1,4096,4096]{2,1,0} multiply(%convert_element_type.1835, %mul.4024)
  %sharding_constraint.788 = bf16[1,4096,4096]{2,1,0} copy(%mul.4025)
  %sharding_constraint.789 = bf16[1,4096,4096]{2,1,0} copy(%sharding_constraint.788)
  %param.268 = bf16[512,32,128]{2,1,0} parameter(200), sharding={devices=[8,1,1]<=[8]}
  %all-gather.183 = bf16[4096,32,128]{2,1,0} all-gather(%param.268), channel_id=288, replica_groups=[1,8]<=[8], dimensions={0}, use_global_device_ids=true
  %dot.423 = bf16[1,4096,32,128]{3,2,1,0} dot(%sharding_constraint.789, %all-gather.183), lhs_contracting_dims={2}, rhs_contracting_dims={0}
  %slice.338 = bf16[1,4096,32,64]{3,2,1,0} slice(%dot.423), slice={[0:1], [0:4096], [0:32], [0:64]}
  %mul.4029 = bf16[1,4096,32,64]{3,2,1,0} multiply(%slice.338, %mul.2435)
  %slice.339 = bf16[1,4096,32,64]{3,2,1,0} slice(%dot.423), slice={[0:1], [0:4096], [0:32], [64:128]}
  %mul.4032 = bf16[1,4096,32,64]{3,2,1,0} multiply(%slice.339, %mul.2438)
  %sub.197 = bf16[1,4096,32,64]{3,2,1,0} subtract(%mul.4029, %mul.4032)
  %mul.4035 = bf16[1,4096,32,64]{3,2,1,0} multiply(%slice.339, %mul.2435)
  %mul.4054 = bf16[1,4096,32,64]{3,2,1,0} multiply(%slice.338, %mul.2438)
  %add.1758 = bf16[1,4096,32,64]{3,2,1,0} add(%mul.4035, %mul.4054)
  %concatenate.211 = bf16[1,4096,32,128]{3,2,1,0} concatenate(%sub.197, %add.1758), dimensions={3}
  %sharding_constraint.790 = bf16[1,4096,32,128]{3,2,1,0} copy(%concatenate.211)
  %param.269 = bf16[512,8,128]{2,1,0} parameter(198), sharding={devices=[8,1,1]<=[8]}
  %all-gather.184 = bf16[4096,8,128]{2,1,0} all-gather(%param.269), channel_id=289, replica_groups=[1,8]<=[8], dimensions={0}, use_global_device_ids=true
  %dot.424 = bf16[1,4096,8,128]{3,2,1,0} dot(%sharding_constraint.789, %all-gather.184), lhs_contracting_dims={2}, rhs_contracting_dims={0}
  %slice.340 = bf16[1,4096,8,64]{3,2,1,0} slice(%dot.424), slice={[0:1], [0:4096], [0:8], [0:64]}
  %mul.4061 = bf16[1,4096,8,64]{3,2,1,0} multiply(%slice.340, %mul.2456)
  %slice.341 = bf16[1,4096,8,64]{3,2,1,0} slice(%dot.424), slice={[0:1], [0:4096], [0:8], [64:128]}
  %mul.4064 = bf16[1,4096,8,64]{3,2,1,0} multiply(%slice.341, %mul.2460)
  %sub.198 = bf16[1,4096,8,64]{3,2,1,0} subtract(%mul.4061, %mul.4064)
  %mul.4068 = bf16[1,4096,8,64]{3,2,1,0} multiply(%slice.341, %mul.2456)
  %mul.4071 = bf16[1,4096,8,64]{3,2,1,0} multiply(%slice.340, %mul.2460)
  %add.1759 = bf16[1,4096,8,64]{3,2,1,0} add(%mul.4068, %mul.4071)
  %concatenate.212 = bf16[1,4096,8,128]{3,2,1,0} concatenate(%sub.198, %add.1759), dimensions={3}
  %sharding_constraint.792 = bf16[1,4096,8,128]{3,2,1,0} copy(%concatenate.212)
  %param.270 = bf16[512,8,128]{2,1,0} parameter(201), sharding={devices=[8,1,1]<=[8]}
  %all-gather.185 = bf16[4096,8,128]{2,1,0} all-gather(%param.270), channel_id=290, replica_groups=[1,8]<=[8], dimensions={0}, use_global_device_ids=true
  %dot.425 = bf16[1,4096,8,128]{3,2,1,0} dot(%sharding_constraint.789, %all-gather.185), lhs_contracting_dims={2}, rhs_contracting_dims={0}
  %sharding_constraint.793 = bf16[1,4096,8,128]{3,2,1,0} copy(%dot.425)
  %te_fused_attn_forward_ffi.104 = (bf16[1,4096,32,128]{3,2,1,0}, f32[1,32,4096,1]{3,2,1,0}, u32[2,4]{1,0}, u8[48]{0}) custom-call(%sharding_constraint.790, %sharding_constraint.792, %sharding_constraint.793, %constant.1403, %dynamic-slice.38, /*index=5*/%concatenate.31, %concatenate.36, %constant.1416, %constant.1416, %constant.1416, /*index=10*/%constant.1416, %constant.1416, %constant.1416), custom_call_target="te_fused_attn_forward_ffi", operand_layout_constraints={bf16[1,4096,32,128]{3,2,1,0}, bf16[1,4096,8,128]{3,2,1,0}, bf16[1,4096,8,128]{3,2,1,0}, bf16[0]{0}, u32[2]{0}, s32[2]{0}, s32[2]{0}, f32[0]{0}, f32[0]{0}, f32[0]{0}, f32[0]{0}, f32[0]{0}, f32[0]{0}}, api_version=API_VERSION_TYPED_FFI, backend_config={attn_heads = 32 : i64, bias_batch = 0 : i64, bias_heads = 0 : i64, bias_type = 0 : i64, deterministic = false, dropout_probability = 0.000000e+00 : f64, input_batch = 1 : i64, is_training = true, kv_max_seqlen = 4096 : i64, mask_type = 3 : i64, max_segments_per_seq = 1 : i64, num_gqa_groups = 8 : i64, q_max_seqlen = 4096 : i64, qk_head_dim = 128 : i64, qkv_layout = 9 : i64, scaling_factor = 1.000000e+00 : f64, v_head_dim = 128 : i64, window_size_left = -1 : i64, window_size_right = -1 : i64}
  %get-tuple-element.519 = bf16[1,4096,32,128]{3,2,1,0} get-tuple-element(%te_fused_attn_forward_ffi.104), index=0
  %sharding_constraint.794 = bf16[1,4096,32,128]{3,2,1,0} copy(%get-tuple-element.519)
  %param.271 = bf16[32,128,512]{2,1,0} parameter(199), sharding={devices=[1,1,8]<=[8]}
  %all-gather.187 = bf16[32,128,4096]{2,1,0} all-gather(%param.271), channel_id=292, replica_groups=[1,8]<=[8], dimensions={2}, use_global_device_ids=true
  %dot.426 = bf16[1,4096,4096]{2,1,0} dot(%sharding_constraint.794, %all-gather.187), lhs_contracting_dims={2,3}, rhs_contracting_dims={0,1}
  %sharding_constraint.795 = bf16[1,4096,4096]{2,1,0} copy(%dot.426)
  %add.1760 = bf16[1,4096,4096]{2,1,0} add(%sharding_constraint.787, %sharding_constraint.795)
  %convert_element_type.1849 = f32[1,4096,4096]{2,1,0} convert(%add.1760)
  %square.56 = f32[1,4096,4096]{2,1,0} multiply(%convert_element_type.1849, %convert_element_type.1849)
  %reduce.430 = f32[1,4096]{1,0} reduce(%square.56, %constant.1360), dimensions={2}, to_apply=%region_316.8296
  %div.746 = f32[1,4096]{1,0} multiply(%reduce.430, %broadcast.3412)
  %add.1761 = f32[1,4096]{1,0} add(%div.746, %broadcast.3413)
  %rsqrt.117 = f32[1,4096]{1,0} rsqrt(%add.1761)
  %mul.4072 = f32[1,4096,4096]{2,1,0} broadcast(%rsqrt.117), dimensions={0,1}
  %mul.4074 = f32[1,4096,4096]{2,1,0} multiply(%convert_element_type.1849, %mul.4072)
  %convert_element_type.1850 = bf16[1,4096,4096]{2,1,0} convert(%mul.4074)
  %param.272 = bf16[4096]{0} parameter(196), sharding={replicated}
  %mul.4075 = bf16[1,4096,4096]{2,1,0} broadcast(%param.272), dimensions={2}
  %mul.4076 = bf16[1,4096,4096]{2,1,0} multiply(%convert_element_type.1850, %mul.4075)
  %sharding_constraint.796 = bf16[1,4096,4096]{2,1,0} copy(%mul.4076)
  %param.273 = bf16[512,8]{1,0} parameter(192), sharding={devices=[8,1]<=[8]}
  %all-gather.188 = bf16[4096,8]{1,0} all-gather(%param.273), channel_id=293, replica_groups=[1,8]<=[8], dimensions={0}, use_global_device_ids=true
  %dot.427 = bf16[1,4096,8]{2,1,0} dot(%sharding_constraint.796, %all-gather.188), lhs_contracting_dims={2}, rhs_contracting_dims={0}
  %sharding_constraint.797 = bf16[1,4096,8]{2,1,0} copy(%dot.427)
  %top_k.78 = bf16[4096,8]{1,0} reshape(%sharding_constraint.797)
  %top_k.79 = (bf16[4096,2]{1,0}, s32[4096,2]{1,0}) custom-call(%top_k.78), custom_call_target="TopK", called_computations={%compare_greater_than.26.8315.clone}
  %get-tuple-element.520 = bf16[4096,2]{1,0} get-tuple-element(%top_k.79), index=0
  %get-tuple-element.521 = s32[4096,2]{1,0} get-tuple-element(%top_k.79), index=1
  %add.1762 = s32[4096,2]{1,0} add(%get-tuple-element.521, %broadcast.3418)
  %sort.90 = (bf16[4096,2]{1,0}, s32[4096,2]{1,0}) sort(%get-tuple-element.520, %add.1762), dimensions={1}, is_stable=true, to_apply=%compare-value-and-index.26
  %get-tuple-element.523 = s32[4096,2]{1,0} get-tuple-element(%sort.90), index=1
  %slice.344 = s32[4096,2]{1,0} slice(%get-tuple-element.523), slice={[0:4096], [0:2]}
  %top_k.80 = s32[1,4096,2]{2,1,0} reshape(%slice.344)
  %lt.81 = pred[1,4096,2]{2,1,0} compare(%top_k.80, %broadcast.3419), direction=LT
  %add.1764 = s32[1,4096,2]{2,1,0} add(%top_k.80, %broadcast.3420)
  %select_n.386 = s32[1,4096,2]{2,1,0} select(%lt.81, %add.1764, %top_k.80)
  %broadcast_in_dim.598 = s32[1,4096,2,1]{3,2,1,0} reshape(%select_n.386)
  %concatenate.215 = s32[1,4096,2,3]{3,2,1,0} concatenate(%add.1356, %iota.1877, %broadcast_in_dim.598), dimensions={3}
  %subtract.80 = s32[1,4096,2,3]{3,2,1,0} subtract(%concatenate.215, %broadcast.3428)
  %scatter.181 = u32[1,4096,8]{2,1,0} scatter(%dynamic-slice.43, %subtract.80, %add.1401), update_window_dims={}, inserted_window_dims={0,1,2}, scatter_dims_to_operand_dims={0,1,2}, index_vector_dim=3, to_apply=%region_317.8343.clone
  %gather.26 = u32[1,4096,2]{2,1,0} gather(%scatter.181, %subtract.80), offset_dims={}, collapsed_slice_dims={0,1,2}, start_index_map={0,1,2}, index_vector_dim=3, slice_sizes={1,1,1}
  %eq.2109 = pred[1,4096,2]{2,1,0} compare(%add.1401, %gather.26), direction=EQ
  %get-tuple-element.522 = bf16[4096,2]{1,0} get-tuple-element(%sort.90), index=0
  %slice.343 = bf16[4096,2]{1,0} slice(%get-tuple-element.522), slice={[0:4096], [0:2]}
  %convert_element_type.1852 = f32[4096,2]{1,0} convert(%slice.343)
  %convert_element_type.1853 = f32[1,4096,2]{2,1,0} reshape(%convert_element_type.1852)
  %reduce.431 = f32[4096]{0} reduce(%convert_element_type.1852, %constant.1450), dimensions={1}, to_apply=%region_318.8352
  %sub.199 = f32[1,4096]{1,0} reshape(%reduce.431)
  %sub.200 = f32[1,4096,2]{2,1,0} broadcast(%sub.199), dimensions={0,1}
  %sub.201 = f32[1,4096,2]{2,1,0} subtract(%convert_element_type.1853, %sub.200)
  %exp.178 = f32[1,4096,2]{2,1,0} exponential(%sub.201)
  %reduce.432 = f32[1,4096]{1,0} reduce(%exp.178, %constant.1360), dimensions={2}, to_apply=%region_319.8361
  %div.747 = f32[1,4096,2]{2,1,0} broadcast(%reduce.432), dimensions={0,1}
  %div.748 = f32[1,4096,2]{2,1,0} divide(%exp.178, %div.747)
  %convert_element_type.1855 = bf16[1,4096,2]{2,1,0} convert(%div.748)
  %select_n.387 = bf16[1,4096,2]{2,1,0} select(%eq.2109, %convert_element_type.1855, %broadcast.3427)
  %scatter.182 = bf16[1,4096,8]{2,1,0} scatter(%broadcast.3379, %subtract.80, %select_n.387), update_window_dims={}, inserted_window_dims={0,1,2}, scatter_dims_to_operand_dims={0,1,2}, index_vector_dim=3, to_apply=%region_320.8370.clone
  %eq.2111 = s32[1,4096,2,8]{3,2,1,0} broadcast(%top_k.80), dimensions={0,1,2}
  %iota.2279 = s32[1,4096,2,8]{3,2,1,0} iota(), iota_dimension=3
  %eq.2112 = pred[1,4096,2,8]{3,2,1,0} compare(%eq.2111, %iota.2279), direction=EQ
  %convert_element_type.1856 = s32[1,4096,2,8]{3,2,1,0} convert(%eq.2112)
  %reshape.10657 = s32[1,8192,8]{2,1,0} reshape(%convert_element_type.1856)
  %sharding_constraint.798 = s32[1,8192,8]{2,1,0} copy(%reshape.10657)
  %reduce-window.26 = s32[1,8192,8]{2,1,0} reduce-window(%sharding_constraint.798, %constant.1181), window={size=1x8192x1 pad=0_0x8191_0x0_0}, to_apply=%region_321.8382
  %reshape.10659 = s32[1,4096,2,8]{3,2,1,0} reshape(%reduce-window.26)
  %sharding_constraint.799 = s32[1,4096,2,8]{3,2,1,0} copy(%reshape.10659)
  %le.54 = pred[1,4096,2,8]{3,2,1,0} compare(%sharding_constraint.799, %broadcast.3429), direction=LE
  %mul.4077 = s32[1,4096,2,8]{3,2,1,0} select(%le.54, %convert_element_type.1856, %broadcast.3430)
  %reduce.433 = s32[1,4096,8]{2,1,0} reduce(%mul.4077, %constant.1181), dimensions={2}, to_apply=%region_322.8391
  %convert_element_type.1857 = bf16[1,4096,8]{2,1,0} convert(%reduce.433)
  %mul.4078 = bf16[1,4096,8]{2,1,0} multiply(%scatter.182, %convert_element_type.1857)
  %mul.4079 = bf16[1,4096,8,1025]{3,2,1,0} broadcast(%mul.4078), dimensions={0,1,2}
  %mul.4080 = s32[1,8192,8]{2,1,0} multiply(%sharding_constraint.798, %reduce-window.26)
  %reshape.10660 = s32[1,4096,2,8]{3,2,1,0} reshape(%mul.4080)
  %reduce.434 = s32[1,4096,8]{2,1,0} reduce(%reshape.10660, %constant.1181), dimensions={2}, to_apply=%region_323.8401
  %mul.4081 = s32[1,4096,8]{2,1,0} multiply(%reduce.434, %reduce.433)
  %eq.2114 = s32[1,4096,8,1025]{3,2,1,0} broadcast(%mul.4081), dimensions={0,1,2}
  %iota.2280 = s32[1,4096,8,1025]{3,2,1,0} iota(), iota_dimension=3
  %eq.2115 = pred[1,4096,8,1025]{3,2,1,0} compare(%eq.2114, %iota.2280), direction=EQ
  %convert_element_type.1858 = s32[1,4096,8,1025]{3,2,1,0} convert(%eq.2115)
  %convert_element_type.1859 = bf16[1,4096,8,1025]{3,2,1,0} convert(%convert_element_type.1858)
  %mul.4082 = bf16[1,4096,8,1025]{3,2,1,0} multiply(%mul.4079, %convert_element_type.1859)
  %slice.345 = bf16[1,4096,8,1024]{3,2,1,0} slice(%mul.4082), slice={[0:1], [0:4096], [0:8], [1:1025]}
  %sharding_constraint.800 = bf16[1,4096,8,1024]{3,2,1,0} copy(%slice.345)
  %convert_element_type.1860 = pred[1,4096,8,1024]{3,2,1,0} compare(%slice.345, %broadcast.3431), direction=NE
  %sharding_constraint.801 = pred[1,4096,8,1024]{3,2,1,0} copy(%convert_element_type.1860)
  %dot_general.62 = bf16[1,4096,8,1024]{3,2,1,0} convert(%sharding_constraint.801)
  %dot.428 = bf16[1,8,1024,4096]{3,2,1,0} dot(%dot_general.62, %sharding_constraint.796), lhs_batch_dims={0}, lhs_contracting_dims={1}, rhs_batch_dims={0}, rhs_contracting_dims={1}
  %reshape.10663 = bf16[1,8,1,1024,4096]{4,3,2,1,0} reshape(%dot.428)
  %all-to-all.52 = bf16[1,8,1,1024,4096]{4,3,2,1,0} all-to-all(%reshape.10663), channel_id=297, replica_groups=[1,8]<=[8], dimensions={1}
  %transpose.83 = bf16[8,1,1,1024,4096]{4,3,2,0,1} transpose(%all-to-all.52), dimensions={1,0,2,3,4}
  %reshape.10664 = bf16[8,1,1024,4096]{3,2,1,0} reshape(%transpose.83)
  %transpose.84 = bf16[1,8,1024,4096]{3,2,0,1} transpose(%reshape.10664), dimensions={1,0,2,3}
  %sharding_constraint.802 = bf16[1,8,1024,4096]{3,2,0,1} copy(%transpose.84)
  %param.274 = bf16[1,4096,14336]{2,1,0} parameter(193), sharding={devices=[8,1,1]<=[8]}
  %sharding_constraint.803 = bf16[1,4096,14336]{2,1,0} copy(%param.274)
  %dot.429 = bf16[1,8,1024,14336]{3,2,1,0} dot(%sharding_constraint.802, %sharding_constraint.803), lhs_batch_dims={0}, lhs_contracting_dims={3}, rhs_batch_dims={0}, rhs_contracting_dims={1}
  %sharding_constraint.804 = bf16[1,8,1024,14336]{3,2,1,0} copy(%dot.429)
  %neg.184 = bf16[1,8,1024,14336]{3,2,1,0} negate(%sharding_constraint.804)
  %exp.179 = bf16[1,8,1024,14336]{3,2,1,0} exponential(%neg.184)
  %add.1769 = bf16[1,8,1024,14336]{3,2,1,0} add(%exp.179, %jit_silu_.0)
  %div.749 = bf16[1,8,1024,14336]{3,2,1,0} divide(%jit_silu_.0, %add.1769)
  %mul.4083 = bf16[1,8,1024,14336]{3,2,1,0} multiply(%sharding_constraint.804, %div.749)
  %param.275 = bf16[1,4096,14336]{2,1,0} parameter(194), sharding={devices=[8,1,1]<=[8]}
  %sharding_constraint.805 = bf16[1,4096,14336]{2,1,0} copy(%param.275)
  %dot.430 = bf16[1,8,1024,14336]{3,2,1,0} dot(%sharding_constraint.802, %sharding_constraint.805), lhs_batch_dims={0}, lhs_contracting_dims={3}, rhs_batch_dims={0}, rhs_contracting_dims={1}
  %sharding_constraint.806 = bf16[1,8,1024,14336]{3,2,1,0} copy(%dot.430)
  %mul.4084 = bf16[1,8,1024,14336]{3,2,1,0} multiply(%mul.4083, %sharding_constraint.806)
  %param.276 = bf16[1,14336,4096]{2,1,0} parameter(195), sharding={devices=[8,1,1]<=[8]}
  %sharding_constraint.807 = bf16[1,14336,4096]{2,1,0} copy(%param.276)
  %dot.431 = bf16[1,8,1024,4096]{3,2,1,0} dot(%mul.4084, %sharding_constraint.807), lhs_batch_dims={0}, lhs_contracting_dims={3}, rhs_batch_dims={0}, rhs_contracting_dims={1}
  %sharding_constraint.808 = bf16[1,8,1024,4096]{3,2,1,0} copy(%dot.431)
  %reshape.10667 = bf16[1,8,1,1024,4096]{4,3,2,1,0} reshape(%sharding_constraint.808)
  %all-to-all.53 = bf16[1,8,1,1024,4096]{4,3,2,1,0} all-to-all(%reshape.10667), channel_id=298, replica_groups=[1,8]<=[8], dimensions={1}
  %transpose.85 = bf16[8,1,1,1024,4096]{4,3,2,0,1} transpose(%all-to-all.53), dimensions={1,0,2,3,4}
  %reshape.10668 = bf16[8,1,1024,4096]{3,2,1,0} reshape(%transpose.85)
  %dot.432 = bf16[1,4096,4096]{2,1,0} dot(%sharding_constraint.800, %reshape.10668), lhs_batch_dims={0}, lhs_contracting_dims={3,2}, rhs_batch_dims={1}, rhs_contracting_dims={2,0}
  %sharding_constraint.809 = bf16[1,4096,4096]{2,1,0} copy(%dot.432)
  %add.1770 = bf16[1,4096,4096]{2,1,0} add(%sharding_constraint.809, %add.1760)
  %sharding_constraint.810 = bf16[1,4096,4096]{2,1,0} copy(%add.1770)
  %sharding_constraint.811 = bf16[1,4096,4096]{2,1,0} copy(%sharding_constraint.810)
  %convert_element_type.1862 = f32[1,4096,4096]{2,1,0} convert(%sharding_constraint.811)
  %square.57 = f32[1,4096,4096]{2,1,0} multiply(%convert_element_type.1862, %convert_element_type.1862)
  %reduce.435 = f32[1,4096]{1,0} reduce(%square.57, %constant.1360), dimensions={2}, to_apply=%region_324.8443
  %div.750 = f32[1,4096]{1,0} multiply(%reduce.435, %broadcast.3412)
  %add.1771 = f32[1,4096]{1,0} add(%div.750, %broadcast.3413)
  %rsqrt.118 = f32[1,4096]{1,0} rsqrt(%add.1771)
  %mul.4085 = f32[1,4096,4096]{2,1,0} broadcast(%rsqrt.118), dimensions={0,1}
  %mul.4086 = f32[1,4096,4096]{2,1,0} multiply(%convert_element_type.1862, %mul.4085)
  %convert_element_type.1863 = bf16[1,4096,4096]{2,1,0} convert(%mul.4086)
  %param.277 = bf16[4096]{0} parameter(207), sharding={replicated}
  %mul.4087 = bf16[1,4096,4096]{2,1,0} broadcast(%param.277), dimensions={2}
  %mul.4088 = bf16[1,4096,4096]{2,1,0} multiply(%convert_element_type.1863, %mul.4087)
  %sharding_constraint.812 = bf16[1,4096,4096]{2,1,0} copy(%mul.4088)
  %sharding_constraint.813 = bf16[1,4096,4096]{2,1,0} copy(%sharding_constraint.812)
  %param.278 = bf16[512,32,128]{2,1,0} parameter(210), sharding={devices=[8,1,1]<=[8]}
  %all-gather.190 = bf16[4096,32,128]{2,1,0} all-gather(%param.278), channel_id=299, replica_groups=[1,8]<=[8], dimensions={0}, use_global_device_ids=true
  %dot.433 = bf16[1,4096,32,128]{3,2,1,0} dot(%sharding_constraint.813, %all-gather.190), lhs_contracting_dims={2}, rhs_contracting_dims={0}
  %slice.346 = bf16[1,4096,32,64]{3,2,1,0} slice(%dot.433), slice={[0:1], [0:4096], [0:32], [0:64]}
  %mul.4094 = bf16[1,4096,32,64]{3,2,1,0} multiply(%slice.346, %mul.2435)
  %slice.347 = bf16[1,4096,32,64]{3,2,1,0} slice(%dot.433), slice={[0:1], [0:4096], [0:32], [64:128]}
  %mul.4097 = bf16[1,4096,32,64]{3,2,1,0} multiply(%slice.347, %mul.2438)
  %sub.202 = bf16[1,4096,32,64]{3,2,1,0} subtract(%mul.4094, %mul.4097)
  %mul.4100 = bf16[1,4096,32,64]{3,2,1,0} multiply(%slice.347, %mul.2435)
  %mul.4103 = bf16[1,4096,32,64]{3,2,1,0} multiply(%slice.346, %mul.2438)
  %add.1772 = bf16[1,4096,32,64]{3,2,1,0} add(%mul.4100, %mul.4103)
  %concatenate.219 = bf16[1,4096,32,128]{3,2,1,0} concatenate(%sub.202, %add.1772), dimensions={3}
  %sharding_constraint.814 = bf16[1,4096,32,128]{3,2,1,0} copy(%concatenate.219)
  %param.279 = bf16[512,8,128]{2,1,0} parameter(208), sharding={devices=[8,1,1]<=[8]}
  %all-gather.191 = bf16[4096,8,128]{2,1,0} all-gather(%param.279), channel_id=300, replica_groups=[1,8]<=[8], dimensions={0}, use_global_device_ids=true
  %dot.434 = bf16[1,4096,8,128]{3,2,1,0} dot(%sharding_constraint.813, %all-gather.191), lhs_contracting_dims={2}, rhs_contracting_dims={0}
  %slice.348 = bf16[1,4096,8,64]{3,2,1,0} slice(%dot.434), slice={[0:1], [0:4096], [0:8], [0:64]}
  %mul.4107 = bf16[1,4096,8,64]{3,2,1,0} multiply(%slice.348, %mul.2456)
  %slice.349 = bf16[1,4096,8,64]{3,2,1,0} slice(%dot.434), slice={[0:1], [0:4096], [0:8], [64:128]}
  %mul.4110 = bf16[1,4096,8,64]{3,2,1,0} multiply(%slice.349, %mul.2460)
  %sub.203 = bf16[1,4096,8,64]{3,2,1,0} subtract(%mul.4107, %mul.4110)
  %mul.4117 = bf16[1,4096,8,64]{3,2,1,0} multiply(%slice.349, %mul.2456)
  %mul.4125 = bf16[1,4096,8,64]{3,2,1,0} multiply(%slice.348, %mul.2460)
  %add.1773 = bf16[1,4096,8,64]{3,2,1,0} add(%mul.4117, %mul.4125)
  %concatenate.220 = bf16[1,4096,8,128]{3,2,1,0} concatenate(%sub.203, %add.1773), dimensions={3}
  %sharding_constraint.816 = bf16[1,4096,8,128]{3,2,1,0} copy(%concatenate.220)
  %param.280 = bf16[512,8,128]{2,1,0} parameter(211), sharding={devices=[8,1,1]<=[8]}
  %all-gather.192 = bf16[4096,8,128]{2,1,0} all-gather(%param.280), channel_id=301, replica_groups=[1,8]<=[8], dimensions={0}, use_global_device_ids=true
  %dot.435 = bf16[1,4096,8,128]{3,2,1,0} dot(%sharding_constraint.813, %all-gather.192), lhs_contracting_dims={2}, rhs_contracting_dims={0}
  %sharding_constraint.817 = bf16[1,4096,8,128]{3,2,1,0} copy(%dot.435)
  %te_fused_attn_forward_ffi.108 = (bf16[1,4096,32,128]{3,2,1,0}, f32[1,32,4096,1]{3,2,1,0}, u32[2,4]{1,0}, u8[48]{0}) custom-call(%sharding_constraint.814, %sharding_constraint.816, %sharding_constraint.817, %constant.1403, %dynamic-slice.38, /*index=5*/%concatenate.31, %concatenate.36, %constant.1416, %constant.1416, %constant.1416, /*index=10*/%constant.1416, %constant.1416, %constant.1416), custom_call_target="te_fused_attn_forward_ffi", operand_layout_constraints={bf16[1,4096,32,128]{3,2,1,0}, bf16[1,4096,8,128]{3,2,1,0}, bf16[1,4096,8,128]{3,2,1,0}, bf16[0]{0}, u32[2]{0}, s32[2]{0}, s32[2]{0}, f32[0]{0}, f32[0]{0}, f32[0]{0}, f32[0]{0}, f32[0]{0}, f32[0]{0}}, api_version=API_VERSION_TYPED_FFI, backend_config={attn_heads = 32 : i64, bias_batch = 0 : i64, bias_heads = 0 : i64, bias_type = 0 : i64, deterministic = false, dropout_probability = 0.000000e+00 : f64, input_batch = 1 : i64, is_training = true, kv_max_seqlen = 4096 : i64, mask_type = 3 : i64, max_segments_per_seq = 1 : i64, num_gqa_groups = 8 : i64, q_max_seqlen = 4096 : i64, qk_head_dim = 128 : i64, qkv_layout = 9 : i64, scaling_factor = 1.000000e+00 : f64, v_head_dim = 128 : i64, window_size_left = -1 : i64, window_size_right = -1 : i64}
  %get-tuple-element.529 = bf16[1,4096,32,128]{3,2,1,0} get-tuple-element(%te_fused_attn_forward_ffi.108), index=0
  %sharding_constraint.818 = bf16[1,4096,32,128]{3,2,1,0} copy(%get-tuple-element.529)
  %param.281 = bf16[32,128,512]{2,1,0} parameter(209), sharding={devices=[1,1,8]<=[8]}
  %all-gather.194 = bf16[32,128,4096]{2,1,0} all-gather(%param.281), channel_id=303, replica_groups=[1,8]<=[8], dimensions={2}, use_global_device_ids=true
  %dot.436 = bf16[1,4096,4096]{2,1,0} dot(%sharding_constraint.818, %all-gather.194), lhs_contracting_dims={2,3}, rhs_contracting_dims={0,1}
  %sharding_constraint.819 = bf16[1,4096,4096]{2,1,0} copy(%dot.436)
  %add.1774 = bf16[1,4096,4096]{2,1,0} add(%sharding_constraint.811, %sharding_constraint.819)
  %convert_element_type.1877 = f32[1,4096,4096]{2,1,0} convert(%add.1774)
  %square.58 = f32[1,4096,4096]{2,1,0} multiply(%convert_element_type.1877, %convert_element_type.1877)
  %reduce.439 = f32[1,4096]{1,0} reduce(%square.58, %constant.1360), dimensions={2}, to_apply=%region_328.8567
  %div.759 = f32[1,4096]{1,0} multiply(%reduce.439, %broadcast.3412)
  %add.1775 = f32[1,4096]{1,0} add(%div.759, %broadcast.3413)
  %rsqrt.119 = f32[1,4096]{1,0} rsqrt(%add.1775)
  %mul.4130 = f32[1,4096,4096]{2,1,0} broadcast(%rsqrt.119), dimensions={0,1}
  %mul.4131 = f32[1,4096,4096]{2,1,0} multiply(%convert_element_type.1877, %mul.4130)
  %convert_element_type.1878 = bf16[1,4096,4096]{2,1,0} convert(%mul.4131)
  %param.282 = bf16[4096]{0} parameter(206), sharding={replicated}
  %mul.4135 = bf16[1,4096,4096]{2,1,0} broadcast(%param.282), dimensions={2}
  %mul.4136 = bf16[1,4096,4096]{2,1,0} multiply(%convert_element_type.1878, %mul.4135)
  %sharding_constraint.820 = bf16[1,4096,4096]{2,1,0} copy(%mul.4136)
  %param.283 = bf16[512,8]{1,0} parameter(202), sharding={devices=[8,1]<=[8]}
  %all-gather.195 = bf16[4096,8]{1,0} all-gather(%param.283), channel_id=304, replica_groups=[1,8]<=[8], dimensions={0}, use_global_device_ids=true
  %dot.437 = bf16[1,4096,8]{2,1,0} dot(%sharding_constraint.820, %all-gather.195), lhs_contracting_dims={2}, rhs_contracting_dims={0}
  %sharding_constraint.821 = bf16[1,4096,8]{2,1,0} copy(%dot.437)
  %top_k.81 = bf16[4096,8]{1,0} reshape(%sharding_constraint.821)
  %top_k.82 = (bf16[4096,2]{1,0}, s32[4096,2]{1,0}) custom-call(%top_k.81), custom_call_target="TopK", called_computations={%compare_greater_than.27.8586.clone}
  %get-tuple-element.530 = bf16[4096,2]{1,0} get-tuple-element(%top_k.82), index=0
  %get-tuple-element.531 = s32[4096,2]{1,0} get-tuple-element(%top_k.82), index=1
  %add.1776 = s32[4096,2]{1,0} add(%get-tuple-element.531, %broadcast.3418)
  %sort.91 = (bf16[4096,2]{1,0}, s32[4096,2]{1,0}) sort(%get-tuple-element.530, %add.1776), dimensions={1}, is_stable=true, to_apply=%compare-value-and-index.27
  %get-tuple-element.533 = s32[4096,2]{1,0} get-tuple-element(%sort.91), index=1
  %slice.352 = s32[4096,2]{1,0} slice(%get-tuple-element.533), slice={[0:4096], [0:2]}
  %top_k.83 = s32[1,4096,2]{2,1,0} reshape(%slice.352)
  %lt.84 = pred[1,4096,2]{2,1,0} compare(%top_k.83, %broadcast.3419), direction=LT
  %add.1777 = s32[1,4096,2]{2,1,0} add(%top_k.83, %broadcast.3420)
  %select_n.391 = s32[1,4096,2]{2,1,0} select(%lt.84, %add.1777, %top_k.83)
  %broadcast_in_dim.601 = s32[1,4096,2,1]{3,2,1,0} reshape(%select_n.391)
  %concatenate.223 = s32[1,4096,2,3]{3,2,1,0} concatenate(%add.1356, %iota.1875, %broadcast_in_dim.601), dimensions={3}
  %subtract.83 = s32[1,4096,2,3]{3,2,1,0} subtract(%concatenate.223, %broadcast.3428)
  %scatter.183 = u32[1,4096,8]{2,1,0} scatter(%dynamic-slice.43, %subtract.83, %add.1401), update_window_dims={}, inserted_window_dims={0,1,2}, scatter_dims_to_operand_dims={0,1,2}, index_vector_dim=3, to_apply=%region_329.8614.clone
  %gather.27 = u32[1,4096,2]{2,1,0} gather(%scatter.183, %subtract.83), offset_dims={}, collapsed_slice_dims={0,1,2}, start_index_map={0,1,2}, index_vector_dim=3, slice_sizes={1,1,1}
  %eq.2119 = pred[1,4096,2]{2,1,0} compare(%add.1401, %gather.27), direction=EQ
  %get-tuple-element.532 = bf16[4096,2]{1,0} get-tuple-element(%sort.91), index=0
  %slice.351 = bf16[4096,2]{1,0} slice(%get-tuple-element.532), slice={[0:4096], [0:2]}
  %convert_element_type.1879 = f32[4096,2]{1,0} convert(%slice.351)
  %convert_element_type.1880 = f32[1,4096,2]{2,1,0} reshape(%convert_element_type.1879)
  %reduce.440 = f32[4096]{0} reduce(%convert_element_type.1879, %constant.1450), dimensions={1}, to_apply=%region_330.8623
  %sub.204 = f32[1,4096]{1,0} reshape(%reduce.440)
  %sub.205 = f32[1,4096,2]{2,1,0} broadcast(%sub.204), dimensions={0,1}
  %sub.206 = f32[1,4096,2]{2,1,0} subtract(%convert_element_type.1880, %sub.205)
  %exp.180 = f32[1,4096,2]{2,1,0} exponential(%sub.206)
  %reduce.441 = f32[1,4096]{1,0} reduce(%exp.180, %constant.1360), dimensions={2}, to_apply=%region_331.8632
  %div.760 = f32[1,4096,2]{2,1,0} broadcast(%reduce.441), dimensions={0,1}
  %div.761 = f32[1,4096,2]{2,1,0} divide(%exp.180, %div.760)
  %convert_element_type.1881 = bf16[1,4096,2]{2,1,0} convert(%div.761)
  %select_n.392 = bf16[1,4096,2]{2,1,0} select(%eq.2119, %convert_element_type.1881, %broadcast.3427)
  %scatter.184 = bf16[1,4096,8]{2,1,0} scatter(%broadcast.3379, %subtract.83, %select_n.392), update_window_dims={}, inserted_window_dims={0,1,2}, scatter_dims_to_operand_dims={0,1,2}, index_vector_dim=3, to_apply=%region_332.8641.clone
  %eq.2121 = s32[1,4096,2,8]{3,2,1,0} broadcast(%top_k.83), dimensions={0,1,2}
  %iota.2291 = s32[1,4096,2,8]{3,2,1,0} iota(), iota_dimension=3
  %eq.2122 = pred[1,4096,2,8]{3,2,1,0} compare(%eq.2121, %iota.2291), direction=EQ
  %convert_element_type.1882 = s32[1,4096,2,8]{3,2,1,0} convert(%eq.2122)
  %reshape.10709 = s32[1,8192,8]{2,1,0} reshape(%convert_element_type.1882)
  %sharding_constraint.822 = s32[1,8192,8]{2,1,0} copy(%reshape.10709)
  %reduce-window.27 = s32[1,8192,8]{2,1,0} reduce-window(%sharding_constraint.822, %constant.1181), window={size=1x8192x1 pad=0_0x8191_0x0_0}, to_apply=%region_333.8653
  %reshape.10711 = s32[1,4096,2,8]{3,2,1,0} reshape(%reduce-window.27)
  %sharding_constraint.823 = s32[1,4096,2,8]{3,2,1,0} copy(%reshape.10711)
  %le.56 = pred[1,4096,2,8]{3,2,1,0} compare(%sharding_constraint.823, %broadcast.3429), direction=LE
  %mul.4137 = s32[1,4096,2,8]{3,2,1,0} select(%le.56, %convert_element_type.1882, %broadcast.3430)
  %reduce.442 = s32[1,4096,8]{2,1,0} reduce(%mul.4137, %constant.1181), dimensions={2}, to_apply=%region_334.8662
  %convert_element_type.1883 = bf16[1,4096,8]{2,1,0} convert(%reduce.442)
  %mul.4141 = bf16[1,4096,8]{2,1,0} multiply(%scatter.184, %convert_element_type.1883)
  %mul.4148 = bf16[1,4096,8,1025]{3,2,1,0} broadcast(%mul.4141), dimensions={0,1,2}
  %mul.4149 = s32[1,8192,8]{2,1,0} multiply(%sharding_constraint.822, %reduce-window.27)
  %reshape.10712 = s32[1,4096,2,8]{3,2,1,0} reshape(%mul.4149)
  %reduce.443 = s32[1,4096,8]{2,1,0} reduce(%reshape.10712, %constant.1181), dimensions={2}, to_apply=%region_335.8672
  %mul.4150 = s32[1,4096,8]{2,1,0} multiply(%reduce.443, %reduce.442)
  %eq.2123 = s32[1,4096,8,1025]{3,2,1,0} broadcast(%mul.4150), dimensions={0,1,2}
  %iota.2294 = s32[1,4096,8,1025]{3,2,1,0} iota(), iota_dimension=3
  %eq.2124 = pred[1,4096,8,1025]{3,2,1,0} compare(%eq.2123, %iota.2294), direction=EQ
  %convert_element_type.1884 = s32[1,4096,8,1025]{3,2,1,0} convert(%eq.2124)
  %convert_element_type.1885 = bf16[1,4096,8,1025]{3,2,1,0} convert(%convert_element_type.1884)
  %mul.4151 = bf16[1,4096,8,1025]{3,2,1,0} multiply(%mul.4148, %convert_element_type.1885)
  %slice.353 = bf16[1,4096,8,1024]{3,2,1,0} slice(%mul.4151), slice={[0:1], [0:4096], [0:8], [1:1025]}
  %sharding_constraint.824 = bf16[1,4096,8,1024]{3,2,1,0} copy(%slice.353)
  %convert_element_type.1886 = pred[1,4096,8,1024]{3,2,1,0} compare(%slice.353, %broadcast.3431), direction=NE
  %sharding_constraint.825 = pred[1,4096,8,1024]{3,2,1,0} copy(%convert_element_type.1886)
  %dot_general.63 = bf16[1,4096,8,1024]{3,2,1,0} convert(%sharding_constraint.825)
  %dot.438 = bf16[1,8,1024,4096]{3,2,1,0} dot(%dot_general.63, %sharding_constraint.820), lhs_batch_dims={0}, lhs_contracting_dims={1}, rhs_batch_dims={0}, rhs_contracting_dims={1}
  %reshape.10715 = bf16[1,8,1,1024,4096]{4,3,2,1,0} reshape(%dot.438)
  %all-to-all.54 = bf16[1,8,1,1024,4096]{4,3,2,1,0} all-to-all(%reshape.10715), channel_id=308, replica_groups=[1,8]<=[8], dimensions={1}
  %transpose.86 = bf16[8,1,1,1024,4096]{4,3,2,0,1} transpose(%all-to-all.54), dimensions={1,0,2,3,4}
  %reshape.10716 = bf16[8,1,1024,4096]{3,2,1,0} reshape(%transpose.86)
  %transpose.87 = bf16[1,8,1024,4096]{3,2,0,1} transpose(%reshape.10716), dimensions={1,0,2,3}
  %sharding_constraint.826 = bf16[1,8,1024,4096]{3,2,0,1} copy(%transpose.87)
  %param.284 = bf16[1,4096,14336]{2,1,0} parameter(203), sharding={devices=[8,1,1]<=[8]}
  %sharding_constraint.827 = bf16[1,4096,14336]{2,1,0} copy(%param.284)
  %dot.439 = bf16[1,8,1024,14336]{3,2,1,0} dot(%sharding_constraint.826, %sharding_constraint.827), lhs_batch_dims={0}, lhs_contracting_dims={3}, rhs_batch_dims={0}, rhs_contracting_dims={1}
  %sharding_constraint.828 = bf16[1,8,1024,14336]{3,2,1,0} copy(%dot.439)
  %neg.185 = bf16[1,8,1024,14336]{3,2,1,0} negate(%sharding_constraint.828)
  %exp.181 = bf16[1,8,1024,14336]{3,2,1,0} exponential(%neg.185)
  %add.1782 = bf16[1,8,1024,14336]{3,2,1,0} add(%exp.181, %jit_silu_.0)
  %div.762 = bf16[1,8,1024,14336]{3,2,1,0} divide(%jit_silu_.0, %add.1782)
  %mul.4152 = bf16[1,8,1024,14336]{3,2,1,0} multiply(%sharding_constraint.828, %div.762)
  %param.285 = bf16[1,4096,14336]{2,1,0} parameter(204), sharding={devices=[8,1,1]<=[8]}
  %sharding_constraint.829 = bf16[1,4096,14336]{2,1,0} copy(%param.285)
  %dot.440 = bf16[1,8,1024,14336]{3,2,1,0} dot(%sharding_constraint.826, %sharding_constraint.829), lhs_batch_dims={0}, lhs_contracting_dims={3}, rhs_batch_dims={0}, rhs_contracting_dims={1}
  %sharding_constraint.830 = bf16[1,8,1024,14336]{3,2,1,0} copy(%dot.440)
  %mul.4153 = bf16[1,8,1024,14336]{3,2,1,0} multiply(%mul.4152, %sharding_constraint.830)
  %param.286 = bf16[1,14336,4096]{2,1,0} parameter(205), sharding={devices=[8,1,1]<=[8]}
  %sharding_constraint.831 = bf16[1,14336,4096]{2,1,0} copy(%param.286)
  %dot.441 = bf16[1,8,1024,4096]{3,2,1,0} dot(%mul.4153, %sharding_constraint.831), lhs_batch_dims={0}, lhs_contracting_dims={3}, rhs_batch_dims={0}, rhs_contracting_dims={1}
  %sharding_constraint.832 = bf16[1,8,1024,4096]{3,2,1,0} copy(%dot.441)
  %reshape.10719 = bf16[1,8,1,1024,4096]{4,3,2,1,0} reshape(%sharding_constraint.832)
  %all-to-all.55 = bf16[1,8,1,1024,4096]{4,3,2,1,0} all-to-all(%reshape.10719), channel_id=309, replica_groups=[1,8]<=[8], dimensions={1}
  %transpose.88 = bf16[8,1,1,1024,4096]{4,3,2,0,1} transpose(%all-to-all.55), dimensions={1,0,2,3,4}
  %reshape.10720 = bf16[8,1,1024,4096]{3,2,1,0} reshape(%transpose.88)
  %dot.442 = bf16[1,4096,4096]{2,1,0} dot(%sharding_constraint.824, %reshape.10720), lhs_batch_dims={0}, lhs_contracting_dims={3,2}, rhs_batch_dims={1}, rhs_contracting_dims={2,0}
  %sharding_constraint.833 = bf16[1,4096,4096]{2,1,0} copy(%dot.442)
  %add.1783 = bf16[1,4096,4096]{2,1,0} add(%sharding_constraint.833, %add.1774)
  %sharding_constraint.834 = bf16[1,4096,4096]{2,1,0} copy(%add.1783)
  %sharding_constraint.835 = bf16[1,4096,4096]{2,1,0} copy(%sharding_constraint.834)
  %convert_element_type.1887 = f32[1,4096,4096]{2,1,0} convert(%sharding_constraint.835)
  %square.59 = f32[1,4096,4096]{2,1,0} multiply(%convert_element_type.1887, %convert_element_type.1887)
  %reduce.444 = f32[1,4096]{1,0} reduce(%square.59, %constant.1360), dimensions={2}, to_apply=%region_336.8714
  %div.763 = f32[1,4096]{1,0} multiply(%reduce.444, %broadcast.3412)
  %add.1784 = f32[1,4096]{1,0} add(%div.763, %broadcast.3413)
  %rsqrt.120 = f32[1,4096]{1,0} rsqrt(%add.1784)
  %mul.4154 = f32[1,4096,4096]{2,1,0} broadcast(%rsqrt.120), dimensions={0,1}
  %mul.4155 = f32[1,4096,4096]{2,1,0} multiply(%convert_element_type.1887, %mul.4154)
  %convert_element_type.1888 = bf16[1,4096,4096]{2,1,0} convert(%mul.4155)
  %param.287 = bf16[4096]{0} parameter(217), sharding={replicated}
  %mul.4156 = bf16[1,4096,4096]{2,1,0} broadcast(%param.287), dimensions={2}
  %mul.4158 = bf16[1,4096,4096]{2,1,0} multiply(%convert_element_type.1888, %mul.4156)
  %sharding_constraint.836 = bf16[1,4096,4096]{2,1,0} copy(%mul.4158)
  %sharding_constraint.837 = bf16[1,4096,4096]{2,1,0} copy(%sharding_constraint.836)
  %param.288 = bf16[512,32,128]{2,1,0} parameter(220), sharding={devices=[8,1,1]<=[8]}
  %all-gather.197 = bf16[4096,32,128]{2,1,0} all-gather(%param.288), channel_id=310, replica_groups=[1,8]<=[8], dimensions={0}, use_global_device_ids=true
  %dot.443 = bf16[1,4096,32,128]{3,2,1,0} dot(%sharding_constraint.837, %all-gather.197), lhs_contracting_dims={2}, rhs_contracting_dims={0}
  %slice.354 = bf16[1,4096,32,64]{3,2,1,0} slice(%dot.443), slice={[0:1], [0:4096], [0:32], [0:64]}
  %mul.4162 = bf16[1,4096,32,64]{3,2,1,0} multiply(%slice.354, %mul.2435)
  %slice.355 = bf16[1,4096,32,64]{3,2,1,0} slice(%dot.443), slice={[0:1], [0:4096], [0:32], [64:128]}
  %mul.4168 = bf16[1,4096,32,64]{3,2,1,0} multiply(%slice.355, %mul.2438)
  %sub.207 = bf16[1,4096,32,64]{3,2,1,0} subtract(%mul.4162, %mul.4168)
  %mul.4174 = bf16[1,4096,32,64]{3,2,1,0} multiply(%slice.355, %mul.2435)
  %mul.4183 = bf16[1,4096,32,64]{3,2,1,0} multiply(%slice.354, %mul.2438)
  %add.1785 = bf16[1,4096,32,64]{3,2,1,0} add(%mul.4174, %mul.4183)
  %concatenate.227 = bf16[1,4096,32,128]{3,2,1,0} concatenate(%sub.207, %add.1785), dimensions={3}
  %sharding_constraint.838 = bf16[1,4096,32,128]{3,2,1,0} copy(%concatenate.227)
  %param.289 = bf16[512,8,128]{2,1,0} parameter(218), sharding={devices=[8,1,1]<=[8]}
  %all-gather.198 = bf16[4096,8,128]{2,1,0} all-gather(%param.289), channel_id=311, replica_groups=[1,8]<=[8], dimensions={0}, use_global_device_ids=true
  %dot.444 = bf16[1,4096,8,128]{3,2,1,0} dot(%sharding_constraint.837, %all-gather.198), lhs_contracting_dims={2}, rhs_contracting_dims={0}
  %slice.356 = bf16[1,4096,8,64]{3,2,1,0} slice(%dot.444), slice={[0:1], [0:4096], [0:8], [0:64]}
  %mul.4187 = bf16[1,4096,8,64]{3,2,1,0} multiply(%slice.356, %mul.2456)
  %slice.357 = bf16[1,4096,8,64]{3,2,1,0} slice(%dot.444), slice={[0:1], [0:4096], [0:8], [64:128]}
  %mul.4190 = bf16[1,4096,8,64]{3,2,1,0} multiply(%slice.357, %mul.2460)
  %sub.208 = bf16[1,4096,8,64]{3,2,1,0} subtract(%mul.4187, %mul.4190)
  %mul.4193 = bf16[1,4096,8,64]{3,2,1,0} multiply(%slice.357, %mul.2456)
  %mul.4196 = bf16[1,4096,8,64]{3,2,1,0} multiply(%slice.356, %mul.2460)
  %add.1787 = bf16[1,4096,8,64]{3,2,1,0} add(%mul.4193, %mul.4196)
  %concatenate.228 = bf16[1,4096,8,128]{3,2,1,0} concatenate(%sub.208, %add.1787), dimensions={3}
  %sharding_constraint.840 = bf16[1,4096,8,128]{3,2,1,0} copy(%concatenate.228)
  %param.290 = bf16[512,8,128]{2,1,0} parameter(221), sharding={devices=[8,1,1]<=[8]}
  %all-gather.199 = bf16[4096,8,128]{2,1,0} all-gather(%param.290), channel_id=312, replica_groups=[1,8]<=[8], dimensions={0}, use_global_device_ids=true
  %dot.445 = bf16[1,4096,8,128]{3,2,1,0} dot(%sharding_constraint.837, %all-gather.199), lhs_contracting_dims={2}, rhs_contracting_dims={0}
  %sharding_constraint.841 = bf16[1,4096,8,128]{3,2,1,0} copy(%dot.445)
  %te_fused_attn_forward_ffi.112 = (bf16[1,4096,32,128]{3,2,1,0}, f32[1,32,4096,1]{3,2,1,0}, u32[2,4]{1,0}, u8[48]{0}) custom-call(%sharding_constraint.838, %sharding_constraint.840, %sharding_constraint.841, %constant.1403, %dynamic-slice.38, /*index=5*/%concatenate.31, %concatenate.36, %constant.1416, %constant.1416, %constant.1416, /*index=10*/%constant.1416, %constant.1416, %constant.1416), custom_call_target="te_fused_attn_forward_ffi", operand_layout_constraints={bf16[1,4096,32,128]{3,2,1,0}, bf16[1,4096,8,128]{3,2,1,0}, bf16[1,4096,8,128]{3,2,1,0}, bf16[0]{0}, u32[2]{0}, s32[2]{0}, s32[2]{0}, f32[0]{0}, f32[0]{0}, f32[0]{0}, f32[0]{0}, f32[0]{0}, f32[0]{0}}, api_version=API_VERSION_TYPED_FFI, backend_config={attn_heads = 32 : i64, bias_batch = 0 : i64, bias_heads = 0 : i64, bias_type = 0 : i64, deterministic = false, dropout_probability = 0.000000e+00 : f64, input_batch = 1 : i64, is_training = true, kv_max_seqlen = 4096 : i64, mask_type = 3 : i64, max_segments_per_seq = 1 : i64, num_gqa_groups = 8 : i64, q_max_seqlen = 4096 : i64, qk_head_dim = 128 : i64, qkv_layout = 9 : i64, scaling_factor = 1.000000e+00 : f64, v_head_dim = 128 : i64, window_size_left = -1 : i64, window_size_right = -1 : i64}
  %get-tuple-element.539 = bf16[1,4096,32,128]{3,2,1,0} get-tuple-element(%te_fused_attn_forward_ffi.112), index=0
  %sharding_constraint.842 = bf16[1,4096,32,128]{3,2,1,0} copy(%get-tuple-element.539)
  %param.291 = bf16[32,128,512]{2,1,0} parameter(219), sharding={devices=[1,1,8]<=[8]}
  %all-gather.201 = bf16[32,128,4096]{2,1,0} all-gather(%param.291), channel_id=314, replica_groups=[1,8]<=[8], dimensions={2}, use_global_device_ids=true
  %dot.446 = bf16[1,4096,4096]{2,1,0} dot(%sharding_constraint.842, %all-gather.201), lhs_contracting_dims={2,3}, rhs_contracting_dims={0,1}
  %sharding_constraint.843 = bf16[1,4096,4096]{2,1,0} copy(%dot.446)
  %add.1788 = bf16[1,4096,4096]{2,1,0} add(%sharding_constraint.835, %sharding_constraint.843)
  %convert_element_type.1902 = f32[1,4096,4096]{2,1,0} convert(%add.1788)
  %square.60 = f32[1,4096,4096]{2,1,0} multiply(%convert_element_type.1902, %convert_element_type.1902)
  %reduce.448 = f32[1,4096]{1,0} reduce(%square.60, %constant.1360), dimensions={2}, to_apply=%region_340.8838
  %div.772 = f32[1,4096]{1,0} multiply(%reduce.448, %broadcast.3412)
  %add.1789 = f32[1,4096]{1,0} add(%div.772, %broadcast.3413)
  %rsqrt.121 = f32[1,4096]{1,0} rsqrt(%add.1789)
  %mul.4197 = f32[1,4096,4096]{2,1,0} broadcast(%rsqrt.121), dimensions={0,1}
  %mul.4198 = f32[1,4096,4096]{2,1,0} multiply(%convert_element_type.1902, %mul.4197)
  %convert_element_type.1905 = bf16[1,4096,4096]{2,1,0} convert(%mul.4198)
  %param.292 = bf16[4096]{0} parameter(216), sharding={replicated}
  %mul.4199 = bf16[1,4096,4096]{2,1,0} broadcast(%param.292), dimensions={2}
  %mul.4200 = bf16[1,4096,4096]{2,1,0} multiply(%convert_element_type.1905, %mul.4199)
  %sharding_constraint.844 = bf16[1,4096,4096]{2,1,0} copy(%mul.4200)
  %param.293 = bf16[512,8]{1,0} parameter(212), sharding={devices=[8,1]<=[8]}
  %all-gather.202 = bf16[4096,8]{1,0} all-gather(%param.293), channel_id=315, replica_groups=[1,8]<=[8], dimensions={0}, use_global_device_ids=true
  %dot.447 = bf16[1,4096,8]{2,1,0} dot(%sharding_constraint.844, %all-gather.202), lhs_contracting_dims={2}, rhs_contracting_dims={0}
  %sharding_constraint.845 = bf16[1,4096,8]{2,1,0} copy(%dot.447)
  %top_k.84 = bf16[4096,8]{1,0} reshape(%sharding_constraint.845)
  %top_k.85 = (bf16[4096,2]{1,0}, s32[4096,2]{1,0}) custom-call(%top_k.84), custom_call_target="TopK", called_computations={%compare_greater_than.28.8857.clone}
  %get-tuple-element.540 = bf16[4096,2]{1,0} get-tuple-element(%top_k.85), index=0
  %get-tuple-element.541 = s32[4096,2]{1,0} get-tuple-element(%top_k.85), index=1
  %add.1790 = s32[4096,2]{1,0} add(%get-tuple-element.541, %broadcast.3418)
  %sort.92 = (bf16[4096,2]{1,0}, s32[4096,2]{1,0}) sort(%get-tuple-element.540, %add.1790), dimensions={1}, is_stable=true, to_apply=%compare-value-and-index.28
  %get-tuple-element.543 = s32[4096,2]{1,0} get-tuple-element(%sort.92), index=1
  %slice.360 = s32[4096,2]{1,0} slice(%get-tuple-element.543), slice={[0:4096], [0:2]}
  %top_k.86 = s32[1,4096,2]{2,1,0} reshape(%slice.360)
  %lt.87 = pred[1,4096,2]{2,1,0} compare(%top_k.86, %broadcast.3419), direction=LT
  %add.1791 = s32[1,4096,2]{2,1,0} add(%top_k.86, %broadcast.3420)
  %select_n.396 = s32[1,4096,2]{2,1,0} select(%lt.87, %add.1791, %top_k.86)
  %broadcast_in_dim.604 = s32[1,4096,2,1]{3,2,1,0} reshape(%select_n.396)
  %concatenate.231 = s32[1,4096,2,3]{3,2,1,0} concatenate(%add.1356, %iota.1873, %broadcast_in_dim.604), dimensions={3}
  %subtract.86 = s32[1,4096,2,3]{3,2,1,0} subtract(%concatenate.231, %broadcast.3428)
  %scatter.185 = u32[1,4096,8]{2,1,0} scatter(%dynamic-slice.43, %subtract.86, %add.1401), update_window_dims={}, inserted_window_dims={0,1,2}, scatter_dims_to_operand_dims={0,1,2}, index_vector_dim=3, to_apply=%region_341.8885.clone
  %gather.28 = u32[1,4096,2]{2,1,0} gather(%scatter.185, %subtract.86), offset_dims={}, collapsed_slice_dims={0,1,2}, start_index_map={0,1,2}, index_vector_dim=3, slice_sizes={1,1,1}
  %eq.2128 = pred[1,4096,2]{2,1,0} compare(%add.1401, %gather.28), direction=EQ
  %get-tuple-element.542 = bf16[4096,2]{1,0} get-tuple-element(%sort.92), index=0
  %slice.359 = bf16[4096,2]{1,0} slice(%get-tuple-element.542), slice={[0:4096], [0:2]}
  %convert_element_type.1907 = f32[4096,2]{1,0} convert(%slice.359)
  %convert_element_type.1909 = f32[1,4096,2]{2,1,0} reshape(%convert_element_type.1907)
  %reduce.449 = f32[4096]{0} reduce(%convert_element_type.1907, %constant.1450), dimensions={1}, to_apply=%region_342.8894
  %sub.209 = f32[1,4096]{1,0} reshape(%reduce.449)
  %sub.210 = f32[1,4096,2]{2,1,0} broadcast(%sub.209), dimensions={0,1}
  %sub.211 = f32[1,4096,2]{2,1,0} subtract(%convert_element_type.1909, %sub.210)
  %exp.182 = f32[1,4096,2]{2,1,0} exponential(%sub.211)
  %reduce.450 = f32[1,4096]{1,0} reduce(%exp.182, %constant.1360), dimensions={2}, to_apply=%region_343.8903
  %div.773 = f32[1,4096,2]{2,1,0} broadcast(%reduce.450), dimensions={0,1}
  %div.774 = f32[1,4096,2]{2,1,0} divide(%exp.182, %div.773)
  %convert_element_type.1910 = bf16[1,4096,2]{2,1,0} convert(%div.774)
  %select_n.397 = bf16[1,4096,2]{2,1,0} select(%eq.2128, %convert_element_type.1910, %broadcast.3427)
  %scatter.186 = bf16[1,4096,8]{2,1,0} scatter(%broadcast.3379, %subtract.86, %select_n.397), update_window_dims={}, inserted_window_dims={0,1,2}, scatter_dims_to_operand_dims={0,1,2}, index_vector_dim=3, to_apply=%region_344.8912.clone
  %eq.2130 = s32[1,4096,2,8]{3,2,1,0} broadcast(%top_k.86), dimensions={0,1,2}
  %iota.2305 = s32[1,4096,2,8]{3,2,1,0} iota(), iota_dimension=3
  %eq.2131 = pred[1,4096,2,8]{3,2,1,0} compare(%eq.2130, %iota.2305), direction=EQ
  %convert_element_type.1911 = s32[1,4096,2,8]{3,2,1,0} convert(%eq.2131)
  %reshape.10760 = s32[1,8192,8]{2,1,0} reshape(%convert_element_type.1911)
  %sharding_constraint.846 = s32[1,8192,8]{2,1,0} copy(%reshape.10760)
  %reduce-window.28 = s32[1,8192,8]{2,1,0} reduce-window(%sharding_constraint.846, %constant.1181), window={size=1x8192x1 pad=0_0x8191_0x0_0}, to_apply=%region_345.8924
  %reshape.10763 = s32[1,4096,2,8]{3,2,1,0} reshape(%reduce-window.28)
  %sharding_constraint.847 = s32[1,4096,2,8]{3,2,1,0} copy(%reshape.10763)
  %le.58 = pred[1,4096,2,8]{3,2,1,0} compare(%sharding_constraint.847, %broadcast.3429), direction=LE
  %mul.4201 = s32[1,4096,2,8]{3,2,1,0} select(%le.58, %convert_element_type.1911, %broadcast.3430)
  %reduce.451 = s32[1,4096,8]{2,1,0} reduce(%mul.4201, %constant.1181), dimensions={2}, to_apply=%region_346.8933
  %convert_element_type.1912 = bf16[1,4096,8]{2,1,0} convert(%reduce.451)
  %mul.4202 = bf16[1,4096,8]{2,1,0} multiply(%scatter.186, %convert_element_type.1912)
  %mul.4203 = bf16[1,4096,8,1025]{3,2,1,0} broadcast(%mul.4202), dimensions={0,1,2}
  %mul.4204 = s32[1,8192,8]{2,1,0} multiply(%sharding_constraint.846, %reduce-window.28)
  %reshape.10764 = s32[1,4096,2,8]{3,2,1,0} reshape(%mul.4204)
  %reduce.452 = s32[1,4096,8]{2,1,0} reduce(%reshape.10764, %constant.1181), dimensions={2}, to_apply=%region_347.8943
  %mul.4205 = s32[1,4096,8]{2,1,0} multiply(%reduce.452, %reduce.451)
  %eq.2132 = s32[1,4096,8,1025]{3,2,1,0} broadcast(%mul.4205), dimensions={0,1,2}
  %iota.2306 = s32[1,4096,8,1025]{3,2,1,0} iota(), iota_dimension=3
  %eq.2133 = pred[1,4096,8,1025]{3,2,1,0} compare(%eq.2132, %iota.2306), direction=EQ
  %convert_element_type.1913 = s32[1,4096,8,1025]{3,2,1,0} convert(%eq.2133)
  %convert_element_type.1914 = bf16[1,4096,8,1025]{3,2,1,0} convert(%convert_element_type.1913)
  %mul.4207 = bf16[1,4096,8,1025]{3,2,1,0} multiply(%mul.4203, %convert_element_type.1914)
  %slice.361 = bf16[1,4096,8,1024]{3,2,1,0} slice(%mul.4207), slice={[0:1], [0:4096], [0:8], [1:1025]}
  %sharding_constraint.848 = bf16[1,4096,8,1024]{3,2,1,0} copy(%slice.361)
  %convert_element_type.1915 = pred[1,4096,8,1024]{3,2,1,0} compare(%slice.361, %broadcast.3431), direction=NE
  %sharding_constraint.849 = pred[1,4096,8,1024]{3,2,1,0} copy(%convert_element_type.1915)
  %dot_general.64 = bf16[1,4096,8,1024]{3,2,1,0} convert(%sharding_constraint.849)
  %dot.448 = bf16[1,8,1024,4096]{3,2,1,0} dot(%dot_general.64, %sharding_constraint.844), lhs_batch_dims={0}, lhs_contracting_dims={1}, rhs_batch_dims={0}, rhs_contracting_dims={1}
  %reshape.10767 = bf16[1,8,1,1024,4096]{4,3,2,1,0} reshape(%dot.448)
  %all-to-all.56 = bf16[1,8,1,1024,4096]{4,3,2,1,0} all-to-all(%reshape.10767), channel_id=319, replica_groups=[1,8]<=[8], dimensions={1}
  %transpose.89 = bf16[8,1,1,1024,4096]{4,3,2,0,1} transpose(%all-to-all.56), dimensions={1,0,2,3,4}
  %reshape.10768 = bf16[8,1,1024,4096]{3,2,1,0} reshape(%transpose.89)
  %transpose.90 = bf16[1,8,1024,4096]{3,2,0,1} transpose(%reshape.10768), dimensions={1,0,2,3}
  %sharding_constraint.850 = bf16[1,8,1024,4096]{3,2,0,1} copy(%transpose.90)
  %param.294 = bf16[1,4096,14336]{2,1,0} parameter(213), sharding={devices=[8,1,1]<=[8]}
  %sharding_constraint.851 = bf16[1,4096,14336]{2,1,0} copy(%param.294)
  %dot.449 = bf16[1,8,1024,14336]{3,2,1,0} dot(%sharding_constraint.850, %sharding_constraint.851), lhs_batch_dims={0}, lhs_contracting_dims={3}, rhs_batch_dims={0}, rhs_contracting_dims={1}
  %sharding_constraint.852 = bf16[1,8,1024,14336]{3,2,1,0} copy(%dot.449)
  %neg.186 = bf16[1,8,1024,14336]{3,2,1,0} negate(%sharding_constraint.852)
  %exp.183 = bf16[1,8,1024,14336]{3,2,1,0} exponential(%neg.186)
  %add.1797 = bf16[1,8,1024,14336]{3,2,1,0} add(%exp.183, %jit_silu_.0)
  %div.775 = bf16[1,8,1024,14336]{3,2,1,0} divide(%jit_silu_.0, %add.1797)
  %mul.4208 = bf16[1,8,1024,14336]{3,2,1,0} multiply(%sharding_constraint.852, %div.775)
  %param.295 = bf16[1,4096,14336]{2,1,0} parameter(214), sharding={devices=[8,1,1]<=[8]}
  %sharding_constraint.853 = bf16[1,4096,14336]{2,1,0} copy(%param.295)
  %dot.450 = bf16[1,8,1024,14336]{3,2,1,0} dot(%sharding_constraint.850, %sharding_constraint.853), lhs_batch_dims={0}, lhs_contracting_dims={3}, rhs_batch_dims={0}, rhs_contracting_dims={1}
  %sharding_constraint.854 = bf16[1,8,1024,14336]{3,2,1,0} copy(%dot.450)
  %mul.4209 = bf16[1,8,1024,14336]{3,2,1,0} multiply(%mul.4208, %sharding_constraint.854)
  %param.296 = bf16[1,14336,4096]{2,1,0} parameter(215), sharding={devices=[8,1,1]<=[8]}
  %sharding_constraint.855 = bf16[1,14336,4096]{2,1,0} copy(%param.296)
  %dot.451 = bf16[1,8,1024,4096]{3,2,1,0} dot(%mul.4209, %sharding_constraint.855), lhs_batch_dims={0}, lhs_contracting_dims={3}, rhs_batch_dims={0}, rhs_contracting_dims={1}
  %sharding_constraint.856 = bf16[1,8,1024,4096]{3,2,1,0} copy(%dot.451)
  %reshape.10771 = bf16[1,8,1,1024,4096]{4,3,2,1,0} reshape(%sharding_constraint.856)
  %all-to-all.57 = bf16[1,8,1,1024,4096]{4,3,2,1,0} all-to-all(%reshape.10771), channel_id=320, replica_groups=[1,8]<=[8], dimensions={1}
  %transpose.91 = bf16[8,1,1,1024,4096]{4,3,2,0,1} transpose(%all-to-all.57), dimensions={1,0,2,3,4}
  %reshape.10772 = bf16[8,1,1024,4096]{3,2,1,0} reshape(%transpose.91)
  %dot.452 = bf16[1,4096,4096]{2,1,0} dot(%sharding_constraint.848, %reshape.10772), lhs_batch_dims={0}, lhs_contracting_dims={3,2}, rhs_batch_dims={1}, rhs_contracting_dims={2,0}
  %sharding_constraint.857 = bf16[1,4096,4096]{2,1,0} copy(%dot.452)
  %add.1798 = bf16[1,4096,4096]{2,1,0} add(%sharding_constraint.857, %add.1788)
  %sharding_constraint.858 = bf16[1,4096,4096]{2,1,0} copy(%add.1798)
  %sharding_constraint.859 = bf16[1,4096,4096]{2,1,0} copy(%sharding_constraint.858)
  %convert_element_type.1916 = f32[1,4096,4096]{2,1,0} convert(%sharding_constraint.859)
  %square.61 = f32[1,4096,4096]{2,1,0} multiply(%convert_element_type.1916, %convert_element_type.1916)
  %reduce.453 = f32[1,4096]{1,0} reduce(%square.61, %constant.1360), dimensions={2}, to_apply=%region_348.8985
  %div.776 = f32[1,4096]{1,0} multiply(%reduce.453, %broadcast.3412)
  %add.1799 = f32[1,4096]{1,0} add(%div.776, %broadcast.3413)
  %rsqrt.122 = f32[1,4096]{1,0} rsqrt(%add.1799)
  %mul.4210 = f32[1,4096,4096]{2,1,0} broadcast(%rsqrt.122), dimensions={0,1}
  %mul.4211 = f32[1,4096,4096]{2,1,0} multiply(%convert_element_type.1916, %mul.4210)
  %convert_element_type.1917 = bf16[1,4096,4096]{2,1,0} convert(%mul.4211)
  %param.297 = bf16[4096]{0} parameter(227), sharding={replicated}
  %mul.4212 = bf16[1,4096,4096]{2,1,0} broadcast(%param.297), dimensions={2}
  %mul.4215 = bf16[1,4096,4096]{2,1,0} multiply(%convert_element_type.1917, %mul.4212)
  %sharding_constraint.860 = bf16[1,4096,4096]{2,1,0} copy(%mul.4215)
  %sharding_constraint.861 = bf16[1,4096,4096]{2,1,0} copy(%sharding_constraint.860)
  %param.298 = bf16[512,32,128]{2,1,0} parameter(230), sharding={devices=[8,1,1]<=[8]}
  %all-gather.204 = bf16[4096,32,128]{2,1,0} all-gather(%param.298), channel_id=321, replica_groups=[1,8]<=[8], dimensions={0}, use_global_device_ids=true
  %dot.453 = bf16[1,4096,32,128]{3,2,1,0} dot(%sharding_constraint.861, %all-gather.204), lhs_contracting_dims={2}, rhs_contracting_dims={0}
  %slice.362 = bf16[1,4096,32,64]{3,2,1,0} slice(%dot.453), slice={[0:1], [0:4096], [0:32], [0:64]}
  %mul.4219 = bf16[1,4096,32,64]{3,2,1,0} multiply(%slice.362, %mul.2435)
  %slice.363 = bf16[1,4096,32,64]{3,2,1,0} slice(%dot.453), slice={[0:1], [0:4096], [0:32], [64:128]}
  %mul.4223 = bf16[1,4096,32,64]{3,2,1,0} multiply(%slice.363, %mul.2438)
  %sub.212 = bf16[1,4096,32,64]{3,2,1,0} subtract(%mul.4219, %mul.4223)
  %mul.4230 = bf16[1,4096,32,64]{3,2,1,0} multiply(%slice.363, %mul.2435)
  %mul.4233 = bf16[1,4096,32,64]{3,2,1,0} multiply(%slice.362, %mul.2438)
  %add.1800 = bf16[1,4096,32,64]{3,2,1,0} add(%mul.4230, %mul.4233)
  %concatenate.235 = bf16[1,4096,32,128]{3,2,1,0} concatenate(%sub.212, %add.1800), dimensions={3}
  %sharding_constraint.862 = bf16[1,4096,32,128]{3,2,1,0} copy(%concatenate.235)
  %param.299 = bf16[512,8,128]{2,1,0} parameter(228), sharding={devices=[8,1,1]<=[8]}
  %all-gather.205 = bf16[4096,8,128]{2,1,0} all-gather(%param.299), channel_id=322, replica_groups=[1,8]<=[8], dimensions={0}, use_global_device_ids=true
  %dot.454 = bf16[1,4096,8,128]{3,2,1,0} dot(%sharding_constraint.861, %all-gather.205), lhs_contracting_dims={2}, rhs_contracting_dims={0}
  %slice.364 = bf16[1,4096,8,64]{3,2,1,0} slice(%dot.454), slice={[0:1], [0:4096], [0:8], [0:64]}
  %mul.4241 = bf16[1,4096,8,64]{3,2,1,0} multiply(%slice.364, %mul.2456)
  %slice.365 = bf16[1,4096,8,64]{3,2,1,0} slice(%dot.454), slice={[0:1], [0:4096], [0:8], [64:128]}
  %mul.4245 = bf16[1,4096,8,64]{3,2,1,0} multiply(%slice.365, %mul.2460)
  %sub.213 = bf16[1,4096,8,64]{3,2,1,0} subtract(%mul.4241, %mul.4245)
  %mul.4248 = bf16[1,4096,8,64]{3,2,1,0} multiply(%slice.365, %mul.2456)
  %mul.4251 = bf16[1,4096,8,64]{3,2,1,0} multiply(%slice.364, %mul.2460)
  %add.1801 = bf16[1,4096,8,64]{3,2,1,0} add(%mul.4248, %mul.4251)
  %concatenate.236 = bf16[1,4096,8,128]{3,2,1,0} concatenate(%sub.213, %add.1801), dimensions={3}
  %sharding_constraint.864 = bf16[1,4096,8,128]{3,2,1,0} copy(%concatenate.236)
  %param.300 = bf16[512,8,128]{2,1,0} parameter(231), sharding={devices=[8,1,1]<=[8]}
  %all-gather.206 = bf16[4096,8,128]{2,1,0} all-gather(%param.300), channel_id=323, replica_groups=[1,8]<=[8], dimensions={0}, use_global_device_ids=true
  %dot.455 = bf16[1,4096,8,128]{3,2,1,0} dot(%sharding_constraint.861, %all-gather.206), lhs_contracting_dims={2}, rhs_contracting_dims={0}
  %sharding_constraint.865 = bf16[1,4096,8,128]{3,2,1,0} copy(%dot.455)
  %te_fused_attn_forward_ffi.116 = (bf16[1,4096,32,128]{3,2,1,0}, f32[1,32,4096,1]{3,2,1,0}, u32[2,4]{1,0}, u8[48]{0}) custom-call(%sharding_constraint.862, %sharding_constraint.864, %sharding_constraint.865, %constant.1403, %dynamic-slice.38, /*index=5*/%concatenate.31, %concatenate.36, %constant.1416, %constant.1416, %constant.1416, /*index=10*/%constant.1416, %constant.1416, %constant.1416), custom_call_target="te_fused_attn_forward_ffi", operand_layout_constraints={bf16[1,4096,32,128]{3,2,1,0}, bf16[1,4096,8,128]{3,2,1,0}, bf16[1,4096,8,128]{3,2,1,0}, bf16[0]{0}, u32[2]{0}, s32[2]{0}, s32[2]{0}, f32[0]{0}, f32[0]{0}, f32[0]{0}, f32[0]{0}, f32[0]{0}, f32[0]{0}}, api_version=API_VERSION_TYPED_FFI, backend_config={attn_heads = 32 : i64, bias_batch = 0 : i64, bias_heads = 0 : i64, bias_type = 0 : i64, deterministic = false, dropout_probability = 0.000000e+00 : f64, input_batch = 1 : i64, is_training = true, kv_max_seqlen = 4096 : i64, mask_type = 3 : i64, max_segments_per_seq = 1 : i64, num_gqa_groups = 8 : i64, q_max_seqlen = 4096 : i64, qk_head_dim = 128 : i64, qkv_layout = 9 : i64, scaling_factor = 1.000000e+00 : f64, v_head_dim = 128 : i64, window_size_left = -1 : i64, window_size_right = -1 : i64}
  %get-tuple-element.549 = bf16[1,4096,32,128]{3,2,1,0} get-tuple-element(%te_fused_attn_forward_ffi.116), index=0
  %sharding_constraint.866 = bf16[1,4096,32,128]{3,2,1,0} copy(%get-tuple-element.549)
  %param.301 = bf16[32,128,512]{2,1,0} parameter(229), sharding={devices=[1,1,8]<=[8]}
  %all-gather.208 = bf16[32,128,4096]{2,1,0} all-gather(%param.301), channel_id=325, replica_groups=[1,8]<=[8], dimensions={2}, use_global_device_ids=true
  %dot.456 = bf16[1,4096,4096]{2,1,0} dot(%sharding_constraint.866, %all-gather.208), lhs_contracting_dims={2,3}, rhs_contracting_dims={0,1}
  %sharding_constraint.867 = bf16[1,4096,4096]{2,1,0} copy(%dot.456)
  %add.1802 = bf16[1,4096,4096]{2,1,0} add(%sharding_constraint.859, %sharding_constraint.867)
  %convert_element_type.1928 = f32[1,4096,4096]{2,1,0} convert(%add.1802)
  %square.62 = f32[1,4096,4096]{2,1,0} multiply(%convert_element_type.1928, %convert_element_type.1928)
  %reduce.457 = f32[1,4096]{1,0} reduce(%square.62, %constant.1360), dimensions={2}, to_apply=%region_352.9109
  %div.785 = f32[1,4096]{1,0} multiply(%reduce.457, %broadcast.3412)
  %add.1803 = f32[1,4096]{1,0} add(%div.785, %broadcast.3413)
  %rsqrt.123 = f32[1,4096]{1,0} rsqrt(%add.1803)
  %mul.4252 = f32[1,4096,4096]{2,1,0} broadcast(%rsqrt.123), dimensions={0,1}
  %mul.4253 = f32[1,4096,4096]{2,1,0} multiply(%convert_element_type.1928, %mul.4252)
  %convert_element_type.1929 = bf16[1,4096,4096]{2,1,0} convert(%mul.4253)
  %param.302 = bf16[4096]{0} parameter(226), sharding={replicated}
  %mul.4254 = bf16[1,4096,4096]{2,1,0} broadcast(%param.302), dimensions={2}
  %mul.4255 = bf16[1,4096,4096]{2,1,0} multiply(%convert_element_type.1929, %mul.4254)
  %sharding_constraint.868 = bf16[1,4096,4096]{2,1,0} copy(%mul.4255)
  %param.303 = bf16[512,8]{1,0} parameter(222), sharding={devices=[8,1]<=[8]}
  %all-gather.209 = bf16[4096,8]{1,0} all-gather(%param.303), channel_id=326, replica_groups=[1,8]<=[8], dimensions={0}, use_global_device_ids=true
  %dot.457 = bf16[1,4096,8]{2,1,0} dot(%sharding_constraint.868, %all-gather.209), lhs_contracting_dims={2}, rhs_contracting_dims={0}
  %sharding_constraint.869 = bf16[1,4096,8]{2,1,0} copy(%dot.457)
  %top_k.87 = bf16[4096,8]{1,0} reshape(%sharding_constraint.869)
  %top_k.88 = (bf16[4096,2]{1,0}, s32[4096,2]{1,0}) custom-call(%top_k.87), custom_call_target="TopK", called_computations={%compare_greater_than.29.9128.clone}
  %get-tuple-element.550 = bf16[4096,2]{1,0} get-tuple-element(%top_k.88), index=0
  %get-tuple-element.551 = s32[4096,2]{1,0} get-tuple-element(%top_k.88), index=1
  %add.1804 = s32[4096,2]{1,0} add(%get-tuple-element.551, %broadcast.3418)
  %sort.93 = (bf16[4096,2]{1,0}, s32[4096,2]{1,0}) sort(%get-tuple-element.550, %add.1804), dimensions={1}, is_stable=true, to_apply=%compare-value-and-index.29
  %get-tuple-element.553 = s32[4096,2]{1,0} get-tuple-element(%sort.93), index=1
  %slice.368 = s32[4096,2]{1,0} slice(%get-tuple-element.553), slice={[0:4096], [0:2]}
  %top_k.89 = s32[1,4096,2]{2,1,0} reshape(%slice.368)
  %lt.90 = pred[1,4096,2]{2,1,0} compare(%top_k.89, %broadcast.3419), direction=LT
  %add.1805 = s32[1,4096,2]{2,1,0} add(%top_k.89, %broadcast.3420)
  %select_n.401 = s32[1,4096,2]{2,1,0} select(%lt.90, %add.1805, %top_k.89)
  %broadcast_in_dim.607 = s32[1,4096,2,1]{3,2,1,0} reshape(%select_n.401)
  %concatenate.239 = s32[1,4096,2,3]{3,2,1,0} concatenate(%add.1356, %iota.1871, %broadcast_in_dim.607), dimensions={3}
  %subtract.89 = s32[1,4096,2,3]{3,2,1,0} subtract(%concatenate.239, %broadcast.3428)
  %scatter.187 = u32[1,4096,8]{2,1,0} scatter(%dynamic-slice.43, %subtract.89, %add.1401), update_window_dims={}, inserted_window_dims={0,1,2}, scatter_dims_to_operand_dims={0,1,2}, index_vector_dim=3, to_apply=%region_353.9156.clone
  %gather.29 = u32[1,4096,2]{2,1,0} gather(%scatter.187, %subtract.89), offset_dims={}, collapsed_slice_dims={0,1,2}, start_index_map={0,1,2}, index_vector_dim=3, slice_sizes={1,1,1}
  %eq.2137 = pred[1,4096,2]{2,1,0} compare(%add.1401, %gather.29), direction=EQ
  %get-tuple-element.552 = bf16[4096,2]{1,0} get-tuple-element(%sort.93), index=0
  %slice.367 = bf16[4096,2]{1,0} slice(%get-tuple-element.552), slice={[0:4096], [0:2]}
  %convert_element_type.1930 = f32[4096,2]{1,0} convert(%slice.367)
  %convert_element_type.1931 = f32[1,4096,2]{2,1,0} reshape(%convert_element_type.1930)
  %reduce.458 = f32[4096]{0} reduce(%convert_element_type.1930, %constant.1450), dimensions={1}, to_apply=%region_354.9165
  %sub.214 = f32[1,4096]{1,0} reshape(%reduce.458)
  %sub.215 = f32[1,4096,2]{2,1,0} broadcast(%sub.214), dimensions={0,1}
  %sub.216 = f32[1,4096,2]{2,1,0} subtract(%convert_element_type.1931, %sub.215)
  %exp.184 = f32[1,4096,2]{2,1,0} exponential(%sub.216)
  %reduce.459 = f32[1,4096]{1,0} reduce(%exp.184, %constant.1360), dimensions={2}, to_apply=%region_355.9174
  %div.786 = f32[1,4096,2]{2,1,0} broadcast(%reduce.459), dimensions={0,1}
  %div.787 = f32[1,4096,2]{2,1,0} divide(%exp.184, %div.786)
  %convert_element_type.1932 = bf16[1,4096,2]{2,1,0} convert(%div.787)
  %select_n.402 = bf16[1,4096,2]{2,1,0} select(%eq.2137, %convert_element_type.1932, %broadcast.3427)
  %scatter.188 = bf16[1,4096,8]{2,1,0} scatter(%broadcast.3379, %subtract.89, %select_n.402), update_window_dims={}, inserted_window_dims={0,1,2}, scatter_dims_to_operand_dims={0,1,2}, index_vector_dim=3, to_apply=%region_356.9183.clone
  %eq.2143 = s32[1,4096,2,8]{3,2,1,0} broadcast(%top_k.89), dimensions={0,1,2}
  %iota.2317 = s32[1,4096,2,8]{3,2,1,0} iota(), iota_dimension=3
  %eq.2144 = pred[1,4096,2,8]{3,2,1,0} compare(%eq.2143, %iota.2317), direction=EQ
  %convert_element_type.1933 = s32[1,4096,2,8]{3,2,1,0} convert(%eq.2144)
  %reshape.10812 = s32[1,8192,8]{2,1,0} reshape(%convert_element_type.1933)
  %sharding_constraint.870 = s32[1,8192,8]{2,1,0} copy(%reshape.10812)
  %reduce-window.29 = s32[1,8192,8]{2,1,0} reduce-window(%sharding_constraint.870, %constant.1181), window={size=1x8192x1 pad=0_0x8191_0x0_0}, to_apply=%region_357.9195
  %reshape.10814 = s32[1,4096,2,8]{3,2,1,0} reshape(%reduce-window.29)
  %sharding_constraint.871 = s32[1,4096,2,8]{3,2,1,0} copy(%reshape.10814)
  %le.60 = pred[1,4096,2,8]{3,2,1,0} compare(%sharding_constraint.871, %broadcast.3429), direction=LE
  %mul.4256 = s32[1,4096,2,8]{3,2,1,0} select(%le.60, %convert_element_type.1933, %broadcast.3430)
  %reduce.460 = s32[1,4096,8]{2,1,0} reduce(%mul.4256, %constant.1181), dimensions={2}, to_apply=%region_358.9204
  %convert_element_type.1935 = bf16[1,4096,8]{2,1,0} convert(%reduce.460)
  %mul.4257 = bf16[1,4096,8]{2,1,0} multiply(%scatter.188, %convert_element_type.1935)
  %mul.4258 = bf16[1,4096,8,1025]{3,2,1,0} broadcast(%mul.4257), dimensions={0,1,2}
  %mul.4259 = s32[1,8192,8]{2,1,0} multiply(%sharding_constraint.870, %reduce-window.29)
  %reshape.10815 = s32[1,4096,2,8]{3,2,1,0} reshape(%mul.4259)
  %reduce.461 = s32[1,4096,8]{2,1,0} reduce(%reshape.10815, %constant.1181), dimensions={2}, to_apply=%region_359.9214
  %mul.4260 = s32[1,4096,8]{2,1,0} multiply(%reduce.461, %reduce.460)
  %eq.2145 = s32[1,4096,8,1025]{3,2,1,0} broadcast(%mul.4260), dimensions={0,1,2}
  %iota.2318 = s32[1,4096,8,1025]{3,2,1,0} iota(), iota_dimension=3
  %eq.2146 = pred[1,4096,8,1025]{3,2,1,0} compare(%eq.2145, %iota.2318), direction=EQ
  %convert_element_type.1936 = s32[1,4096,8,1025]{3,2,1,0} convert(%eq.2146)
  %convert_element_type.1937 = bf16[1,4096,8,1025]{3,2,1,0} convert(%convert_element_type.1936)
  %mul.4261 = bf16[1,4096,8,1025]{3,2,1,0} multiply(%mul.4258, %convert_element_type.1937)
  %slice.369 = bf16[1,4096,8,1024]{3,2,1,0} slice(%mul.4261), slice={[0:1], [0:4096], [0:8], [1:1025]}
  %sharding_constraint.872 = bf16[1,4096,8,1024]{3,2,1,0} copy(%slice.369)
  %convert_element_type.1938 = pred[1,4096,8,1024]{3,2,1,0} compare(%slice.369, %broadcast.3431), direction=NE
  %sharding_constraint.873 = pred[1,4096,8,1024]{3,2,1,0} copy(%convert_element_type.1938)
  %dot_general.65 = bf16[1,4096,8,1024]{3,2,1,0} convert(%sharding_constraint.873)
  %dot.458 = bf16[1,8,1024,4096]{3,2,1,0} dot(%dot_general.65, %sharding_constraint.868), lhs_batch_dims={0}, lhs_contracting_dims={1}, rhs_batch_dims={0}, rhs_contracting_dims={1}
  %reshape.10818 = bf16[1,8,1,1024,4096]{4,3,2,1,0} reshape(%dot.458)
  %all-to-all.58 = bf16[1,8,1,1024,4096]{4,3,2,1,0} all-to-all(%reshape.10818), channel_id=330, replica_groups=[1,8]<=[8], dimensions={1}
  %transpose.92 = bf16[8,1,1,1024,4096]{4,3,2,0,1} transpose(%all-to-all.58), dimensions={1,0,2,3,4}
  %reshape.10819 = bf16[8,1,1024,4096]{3,2,1,0} reshape(%transpose.92)
  %transpose.93 = bf16[1,8,1024,4096]{3,2,0,1} transpose(%reshape.10819), dimensions={1,0,2,3}
  %sharding_constraint.874 = bf16[1,8,1024,4096]{3,2,0,1} copy(%transpose.93)
  %param.304 = bf16[1,4096,14336]{2,1,0} parameter(223), sharding={devices=[8,1,1]<=[8]}
  %sharding_constraint.875 = bf16[1,4096,14336]{2,1,0} copy(%param.304)
  %dot.459 = bf16[1,8,1024,14336]{3,2,1,0} dot(%sharding_constraint.874, %sharding_constraint.875), lhs_batch_dims={0}, lhs_contracting_dims={3}, rhs_batch_dims={0}, rhs_contracting_dims={1}
  %sharding_constraint.876 = bf16[1,8,1024,14336]{3,2,1,0} copy(%dot.459)
  %neg.187 = bf16[1,8,1024,14336]{3,2,1,0} negate(%sharding_constraint.876)
  %exp.185 = bf16[1,8,1024,14336]{3,2,1,0} exponential(%neg.187)
  %add.1810 = bf16[1,8,1024,14336]{3,2,1,0} add(%exp.185, %jit_silu_.0)
  %div.788 = bf16[1,8,1024,14336]{3,2,1,0} divide(%jit_silu_.0, %add.1810)
  %mul.4262 = bf16[1,8,1024,14336]{3,2,1,0} multiply(%sharding_constraint.876, %div.788)
  %param.305 = bf16[1,4096,14336]{2,1,0} parameter(224), sharding={devices=[8,1,1]<=[8]}
  %sharding_constraint.877 = bf16[1,4096,14336]{2,1,0} copy(%param.305)
  %dot.460 = bf16[1,8,1024,14336]{3,2,1,0} dot(%sharding_constraint.874, %sharding_constraint.877), lhs_batch_dims={0}, lhs_contracting_dims={3}, rhs_batch_dims={0}, rhs_contracting_dims={1}
  %sharding_constraint.878 = bf16[1,8,1024,14336]{3,2,1,0} copy(%dot.460)
  %mul.4263 = bf16[1,8,1024,14336]{3,2,1,0} multiply(%mul.4262, %sharding_constraint.878)
  %param.306 = bf16[1,14336,4096]{2,1,0} parameter(225), sharding={devices=[8,1,1]<=[8]}
  %sharding_constraint.879 = bf16[1,14336,4096]{2,1,0} copy(%param.306)
  %dot.461 = bf16[1,8,1024,4096]{3,2,1,0} dot(%mul.4263, %sharding_constraint.879), lhs_batch_dims={0}, lhs_contracting_dims={3}, rhs_batch_dims={0}, rhs_contracting_dims={1}
  %sharding_constraint.880 = bf16[1,8,1024,4096]{3,2,1,0} copy(%dot.461)
  %reshape.10822 = bf16[1,8,1,1024,4096]{4,3,2,1,0} reshape(%sharding_constraint.880)
  %all-to-all.59 = bf16[1,8,1,1024,4096]{4,3,2,1,0} all-to-all(%reshape.10822), channel_id=331, replica_groups=[1,8]<=[8], dimensions={1}
  %transpose.94 = bf16[8,1,1,1024,4096]{4,3,2,0,1} transpose(%all-to-all.59), dimensions={1,0,2,3,4}
  %reshape.10823 = bf16[8,1,1024,4096]{3,2,1,0} reshape(%transpose.94)
  %dot.462 = bf16[1,4096,4096]{2,1,0} dot(%sharding_constraint.872, %reshape.10823), lhs_batch_dims={0}, lhs_contracting_dims={3,2}, rhs_batch_dims={1}, rhs_contracting_dims={2,0}
  %sharding_constraint.881 = bf16[1,4096,4096]{2,1,0} copy(%dot.462)
  %add.1811 = bf16[1,4096,4096]{2,1,0} add(%sharding_constraint.881, %add.1802)
  %sharding_constraint.882 = bf16[1,4096,4096]{2,1,0} copy(%add.1811)
  %sharding_constraint.883 = bf16[1,4096,4096]{2,1,0} copy(%sharding_constraint.882)
  %convert_element_type.1939 = f32[1,4096,4096]{2,1,0} convert(%sharding_constraint.883)
  %square.63 = f32[1,4096,4096]{2,1,0} multiply(%convert_element_type.1939, %convert_element_type.1939)
  %reduce.462 = f32[1,4096]{1,0} reduce(%square.63, %constant.1360), dimensions={2}, to_apply=%region_360.9256
  %div.789 = f32[1,4096]{1,0} multiply(%reduce.462, %broadcast.3412)
  %add.1812 = f32[1,4096]{1,0} add(%div.789, %broadcast.3413)
  %rsqrt.124 = f32[1,4096]{1,0} rsqrt(%add.1812)
  %mul.4268 = f32[1,4096,4096]{2,1,0} broadcast(%rsqrt.124), dimensions={0,1}
  %mul.4269 = f32[1,4096,4096]{2,1,0} multiply(%convert_element_type.1939, %mul.4268)
  %convert_element_type.1940 = bf16[1,4096,4096]{2,1,0} convert(%mul.4269)
  %param.307 = bf16[4096]{0} parameter(247), sharding={replicated}
  %mul.4274 = bf16[1,4096,4096]{2,1,0} broadcast(%param.307), dimensions={2}
  %mul.4275 = bf16[1,4096,4096]{2,1,0} multiply(%convert_element_type.1940, %mul.4274)
  %sharding_constraint.884 = bf16[1,4096,4096]{2,1,0} copy(%mul.4275)
  %sharding_constraint.885 = bf16[1,4096,4096]{2,1,0} copy(%sharding_constraint.884)
  %param.308 = bf16[512,32,128]{2,1,0} parameter(250), sharding={devices=[8,1,1]<=[8]}
  %all-gather.211 = bf16[4096,32,128]{2,1,0} all-gather(%param.308), channel_id=332, replica_groups=[1,8]<=[8], dimensions={0}, use_global_device_ids=true
  %dot.463 = bf16[1,4096,32,128]{3,2,1,0} dot(%sharding_constraint.885, %all-gather.211), lhs_contracting_dims={2}, rhs_contracting_dims={0}
  %slice.370 = bf16[1,4096,32,64]{3,2,1,0} slice(%dot.463), slice={[0:1], [0:4096], [0:32], [0:64]}
  %mul.4279 = bf16[1,4096,32,64]{3,2,1,0} multiply(%slice.370, %mul.2435)
  %slice.371 = bf16[1,4096,32,64]{3,2,1,0} slice(%dot.463), slice={[0:1], [0:4096], [0:32], [64:128]}
  %mul.4283 = bf16[1,4096,32,64]{3,2,1,0} multiply(%slice.371, %mul.2438)
  %sub.217 = bf16[1,4096,32,64]{3,2,1,0} subtract(%mul.4279, %mul.4283)
  %mul.4286 = bf16[1,4096,32,64]{3,2,1,0} multiply(%slice.371, %mul.2435)
  %mul.4289 = bf16[1,4096,32,64]{3,2,1,0} multiply(%slice.370, %mul.2438)
  %add.1813 = bf16[1,4096,32,64]{3,2,1,0} add(%mul.4286, %mul.4289)
  %concatenate.243 = bf16[1,4096,32,128]{3,2,1,0} concatenate(%sub.217, %add.1813), dimensions={3}
  %sharding_constraint.886 = bf16[1,4096,32,128]{3,2,1,0} copy(%concatenate.243)
  %param.309 = bf16[512,8,128]{2,1,0} parameter(248), sharding={devices=[8,1,1]<=[8]}
  %all-gather.212 = bf16[4096,8,128]{2,1,0} all-gather(%param.309), channel_id=333, replica_groups=[1,8]<=[8], dimensions={0}, use_global_device_ids=true
  %dot.464 = bf16[1,4096,8,128]{3,2,1,0} dot(%sharding_constraint.885, %all-gather.212), lhs_contracting_dims={2}, rhs_contracting_dims={0}
  %slice.372 = bf16[1,4096,8,64]{3,2,1,0} slice(%dot.464), slice={[0:1], [0:4096], [0:8], [0:64]}
  %mul.4293 = bf16[1,4096,8,64]{3,2,1,0} multiply(%slice.372, %mul.2456)
  %slice.373 = bf16[1,4096,8,64]{3,2,1,0} slice(%dot.464), slice={[0:1], [0:4096], [0:8], [64:128]}
  %mul.4296 = bf16[1,4096,8,64]{3,2,1,0} multiply(%slice.373, %mul.2460)
  %sub.218 = bf16[1,4096,8,64]{3,2,1,0} subtract(%mul.4293, %mul.4296)
  %mul.4299 = bf16[1,4096,8,64]{3,2,1,0} multiply(%slice.373, %mul.2456)
  %mul.4318 = bf16[1,4096,8,64]{3,2,1,0} multiply(%slice.372, %mul.2460)
  %add.1814 = bf16[1,4096,8,64]{3,2,1,0} add(%mul.4299, %mul.4318)
  %concatenate.244 = bf16[1,4096,8,128]{3,2,1,0} concatenate(%sub.218, %add.1814), dimensions={3}
  %sharding_constraint.888 = bf16[1,4096,8,128]{3,2,1,0} copy(%concatenate.244)
  %param.310 = bf16[512,8,128]{2,1,0} parameter(251), sharding={devices=[8,1,1]<=[8]}
  %all-gather.213 = bf16[4096,8,128]{2,1,0} all-gather(%param.310), channel_id=334, replica_groups=[1,8]<=[8], dimensions={0}, use_global_device_ids=true
  %dot.465 = bf16[1,4096,8,128]{3,2,1,0} dot(%sharding_constraint.885, %all-gather.213), lhs_contracting_dims={2}, rhs_contracting_dims={0}
  %sharding_constraint.889 = bf16[1,4096,8,128]{3,2,1,0} copy(%dot.465)
  %te_fused_attn_forward_ffi.120 = (bf16[1,4096,32,128]{3,2,1,0}, f32[1,32,4096,1]{3,2,1,0}, u32[2,4]{1,0}, u8[48]{0}) custom-call(%sharding_constraint.886, %sharding_constraint.888, %sharding_constraint.889, %constant.1403, %dynamic-slice.38, /*index=5*/%concatenate.31, %concatenate.36, %constant.1416, %constant.1416, %constant.1416, /*index=10*/%constant.1416, %constant.1416, %constant.1416), custom_call_target="te_fused_attn_forward_ffi", operand_layout_constraints={bf16[1,4096,32,128]{3,2,1,0}, bf16[1,4096,8,128]{3,2,1,0}, bf16[1,4096,8,128]{3,2,1,0}, bf16[0]{0}, u32[2]{0}, s32[2]{0}, s32[2]{0}, f32[0]{0}, f32[0]{0}, f32[0]{0}, f32[0]{0}, f32[0]{0}, f32[0]{0}}, api_version=API_VERSION_TYPED_FFI, backend_config={attn_heads = 32 : i64, bias_batch = 0 : i64, bias_heads = 0 : i64, bias_type = 0 : i64, deterministic = false, dropout_probability = 0.000000e+00 : f64, input_batch = 1 : i64, is_training = true, kv_max_seqlen = 4096 : i64, mask_type = 3 : i64, max_segments_per_seq = 1 : i64, num_gqa_groups = 8 : i64, q_max_seqlen = 4096 : i64, qk_head_dim = 128 : i64, qkv_layout = 9 : i64, scaling_factor = 1.000000e+00 : f64, v_head_dim = 128 : i64, window_size_left = -1 : i64, window_size_right = -1 : i64}
  %get-tuple-element.559 = bf16[1,4096,32,128]{3,2,1,0} get-tuple-element(%te_fused_attn_forward_ffi.120), index=0
  %sharding_constraint.890 = bf16[1,4096,32,128]{3,2,1,0} copy(%get-tuple-element.559)
  %param.311 = bf16[32,128,512]{2,1,0} parameter(249), sharding={devices=[1,1,8]<=[8]}
  %all-gather.215 = bf16[32,128,4096]{2,1,0} all-gather(%param.311), channel_id=336, replica_groups=[1,8]<=[8], dimensions={2}, use_global_device_ids=true
  %dot.466 = bf16[1,4096,4096]{2,1,0} dot(%sharding_constraint.890, %all-gather.215), lhs_contracting_dims={2,3}, rhs_contracting_dims={0,1}
  %sharding_constraint.891 = bf16[1,4096,4096]{2,1,0} copy(%dot.466)
  %add.1815 = bf16[1,4096,4096]{2,1,0} add(%sharding_constraint.883, %sharding_constraint.891)
  %convert_element_type.1952 = f32[1,4096,4096]{2,1,0} convert(%add.1815)
  %square.64 = f32[1,4096,4096]{2,1,0} multiply(%convert_element_type.1952, %convert_element_type.1952)
  %reduce.466 = f32[1,4096]{1,0} reduce(%square.64, %constant.1360), dimensions={2}, to_apply=%region_364.9380
  %div.798 = f32[1,4096]{1,0} multiply(%reduce.466, %broadcast.3412)
  %add.1816 = f32[1,4096]{1,0} add(%div.798, %broadcast.3413)
  %rsqrt.125 = f32[1,4096]{1,0} rsqrt(%add.1816)
  %mul.4319 = f32[1,4096,4096]{2,1,0} broadcast(%rsqrt.125), dimensions={0,1}
  %mul.4320 = f32[1,4096,4096]{2,1,0} multiply(%convert_element_type.1952, %mul.4319)
  %convert_element_type.1955 = bf16[1,4096,4096]{2,1,0} convert(%mul.4320)
  %param.312 = bf16[4096]{0} parameter(246), sharding={replicated}
  %mul.4321 = bf16[1,4096,4096]{2,1,0} broadcast(%param.312), dimensions={2}
  %mul.4323 = bf16[1,4096,4096]{2,1,0} multiply(%convert_element_type.1955, %mul.4321)
  %sharding_constraint.892 = bf16[1,4096,4096]{2,1,0} copy(%mul.4323)
  %param.313 = bf16[512,8]{1,0} parameter(242), sharding={devices=[8,1]<=[8]}
  %all-gather.216 = bf16[4096,8]{1,0} all-gather(%param.313), channel_id=337, replica_groups=[1,8]<=[8], dimensions={0}, use_global_device_ids=true
  %dot.467 = bf16[1,4096,8]{2,1,0} dot(%sharding_constraint.892, %all-gather.216), lhs_contracting_dims={2}, rhs_contracting_dims={0}
  %sharding_constraint.893 = bf16[1,4096,8]{2,1,0} copy(%dot.467)
  %top_k.90 = bf16[4096,8]{1,0} reshape(%sharding_constraint.893)
  %top_k.91 = (bf16[4096,2]{1,0}, s32[4096,2]{1,0}) custom-call(%top_k.90), custom_call_target="TopK", called_computations={%compare_greater_than.30.9399.clone}
  %get-tuple-element.560 = bf16[4096,2]{1,0} get-tuple-element(%top_k.91), index=0
  %get-tuple-element.561 = s32[4096,2]{1,0} get-tuple-element(%top_k.91), index=1
  %add.1819 = s32[4096,2]{1,0} add(%get-tuple-element.561, %broadcast.3418)
  %sort.94 = (bf16[4096,2]{1,0}, s32[4096,2]{1,0}) sort(%get-tuple-element.560, %add.1819), dimensions={1}, is_stable=true, to_apply=%compare-value-and-index.30
  %get-tuple-element.563 = s32[4096,2]{1,0} get-tuple-element(%sort.94), index=1
  %slice.376 = s32[4096,2]{1,0} slice(%get-tuple-element.563), slice={[0:4096], [0:2]}
  %top_k.92 = s32[1,4096,2]{2,1,0} reshape(%slice.376)
  %lt.93 = pred[1,4096,2]{2,1,0} compare(%top_k.92, %broadcast.3419), direction=LT
  %add.1820 = s32[1,4096,2]{2,1,0} add(%top_k.92, %broadcast.3420)
  %select_n.406 = s32[1,4096,2]{2,1,0} select(%lt.93, %add.1820, %top_k.92)
  %broadcast_in_dim.610 = s32[1,4096,2,1]{3,2,1,0} reshape(%select_n.406)
  %concatenate.247 = s32[1,4096,2,3]{3,2,1,0} concatenate(%add.1356, %iota.1869, %broadcast_in_dim.610), dimensions={3}
  %subtract.92 = s32[1,4096,2,3]{3,2,1,0} subtract(%concatenate.247, %broadcast.3428)
  %scatter.189 = u32[1,4096,8]{2,1,0} scatter(%dynamic-slice.43, %subtract.92, %add.1401), update_window_dims={}, inserted_window_dims={0,1,2}, scatter_dims_to_operand_dims={0,1,2}, index_vector_dim=3, to_apply=%region_365.9427.clone
  %gather.30 = u32[1,4096,2]{2,1,0} gather(%scatter.189, %subtract.92), offset_dims={}, collapsed_slice_dims={0,1,2}, start_index_map={0,1,2}, index_vector_dim=3, slice_sizes={1,1,1}
  %eq.2150 = pred[1,4096,2]{2,1,0} compare(%add.1401, %gather.30), direction=EQ
  %get-tuple-element.562 = bf16[4096,2]{1,0} get-tuple-element(%sort.94), index=0
  %slice.375 = bf16[4096,2]{1,0} slice(%get-tuple-element.562), slice={[0:4096], [0:2]}
  %convert_element_type.1956 = f32[4096,2]{1,0} convert(%slice.375)
  %convert_element_type.1958 = f32[1,4096,2]{2,1,0} reshape(%convert_element_type.1956)
  %reduce.467 = f32[4096]{0} reduce(%convert_element_type.1956, %constant.1450), dimensions={1}, to_apply=%region_366.9436
  %sub.219 = f32[1,4096]{1,0} reshape(%reduce.467)
  %sub.220 = f32[1,4096,2]{2,1,0} broadcast(%sub.219), dimensions={0,1}
  %sub.221 = f32[1,4096,2]{2,1,0} subtract(%convert_element_type.1958, %sub.220)
  %exp.186 = f32[1,4096,2]{2,1,0} exponential(%sub.221)
  %reduce.468 = f32[1,4096]{1,0} reduce(%exp.186, %constant.1360), dimensions={2}, to_apply=%region_367.9445
  %div.799 = f32[1,4096,2]{2,1,0} broadcast(%reduce.468), dimensions={0,1}
  %div.800 = f32[1,4096,2]{2,1,0} divide(%exp.186, %div.799)
  %convert_element_type.1959 = bf16[1,4096,2]{2,1,0} convert(%div.800)
  %select_n.407 = bf16[1,4096,2]{2,1,0} select(%eq.2150, %convert_element_type.1959, %broadcast.3427)
  %scatter.190 = bf16[1,4096,8]{2,1,0} scatter(%broadcast.3379, %subtract.92, %select_n.407), update_window_dims={}, inserted_window_dims={0,1,2}, scatter_dims_to_operand_dims={0,1,2}, index_vector_dim=3, to_apply=%region_368.9454.clone
  %eq.2152 = s32[1,4096,2,8]{3,2,1,0} broadcast(%top_k.92), dimensions={0,1,2}
  %iota.2329 = s32[1,4096,2,8]{3,2,1,0} iota(), iota_dimension=3
  %eq.2153 = pred[1,4096,2,8]{3,2,1,0} compare(%eq.2152, %iota.2329), direction=EQ
  %convert_element_type.1960 = s32[1,4096,2,8]{3,2,1,0} convert(%eq.2153)
  %reshape.10864 = s32[1,8192,8]{2,1,0} reshape(%convert_element_type.1960)
  %sharding_constraint.894 = s32[1,8192,8]{2,1,0} copy(%reshape.10864)
  %reduce-window.30 = s32[1,8192,8]{2,1,0} reduce-window(%sharding_constraint.894, %constant.1181), window={size=1x8192x1 pad=0_0x8191_0x0_0}, to_apply=%region_369.9466
  %reshape.10866 = s32[1,4096,2,8]{3,2,1,0} reshape(%reduce-window.30)
  %sharding_constraint.895 = s32[1,4096,2,8]{3,2,1,0} copy(%reshape.10866)
  %le.62 = pred[1,4096,2,8]{3,2,1,0} compare(%sharding_constraint.895, %broadcast.3429), direction=LE
  %mul.4324 = s32[1,4096,2,8]{3,2,1,0} select(%le.62, %convert_element_type.1960, %broadcast.3430)
  %reduce.469 = s32[1,4096,8]{2,1,0} reduce(%mul.4324, %constant.1181), dimensions={2}, to_apply=%region_370.9475
  %convert_element_type.1961 = bf16[1,4096,8]{2,1,0} convert(%reduce.469)
  %mul.4325 = bf16[1,4096,8]{2,1,0} multiply(%scatter.190, %convert_element_type.1961)
  %mul.4326 = bf16[1,4096,8,1025]{3,2,1,0} broadcast(%mul.4325), dimensions={0,1,2}
  %mul.4327 = s32[1,8192,8]{2,1,0} multiply(%sharding_constraint.894, %reduce-window.30)
  %reshape.10867 = s32[1,4096,2,8]{3,2,1,0} reshape(%mul.4327)
  %reduce.470 = s32[1,4096,8]{2,1,0} reduce(%reshape.10867, %constant.1181), dimensions={2}, to_apply=%region_371.9485
  %mul.4328 = s32[1,4096,8]{2,1,0} multiply(%reduce.470, %reduce.469)
  %eq.2154 = s32[1,4096,8,1025]{3,2,1,0} broadcast(%mul.4328), dimensions={0,1,2}
  %iota.2330 = s32[1,4096,8,1025]{3,2,1,0} iota(), iota_dimension=3
  %eq.2155 = pred[1,4096,8,1025]{3,2,1,0} compare(%eq.2154, %iota.2330), direction=EQ
  %convert_element_type.1964 = s32[1,4096,8,1025]{3,2,1,0} convert(%eq.2155)
  %convert_element_type.1965 = bf16[1,4096,8,1025]{3,2,1,0} convert(%convert_element_type.1964)
  %mul.4332 = bf16[1,4096,8,1025]{3,2,1,0} multiply(%mul.4326, %convert_element_type.1965)
  %slice.377 = bf16[1,4096,8,1024]{3,2,1,0} slice(%mul.4332), slice={[0:1], [0:4096], [0:8], [1:1025]}
  %sharding_constraint.896 = bf16[1,4096,8,1024]{3,2,1,0} copy(%slice.377)
  %convert_element_type.1966 = pred[1,4096,8,1024]{3,2,1,0} compare(%slice.377, %broadcast.3431), direction=NE
  %sharding_constraint.897 = pred[1,4096,8,1024]{3,2,1,0} copy(%convert_element_type.1966)
  %dot_general.66 = bf16[1,4096,8,1024]{3,2,1,0} convert(%sharding_constraint.897)
  %dot.468 = bf16[1,8,1024,4096]{3,2,1,0} dot(%dot_general.66, %sharding_constraint.892), lhs_batch_dims={0}, lhs_contracting_dims={1}, rhs_batch_dims={0}, rhs_contracting_dims={1}
  %reshape.10870 = bf16[1,8,1,1024,4096]{4,3,2,1,0} reshape(%dot.468)
  %all-to-all.60 = bf16[1,8,1,1024,4096]{4,3,2,1,0} all-to-all(%reshape.10870), channel_id=341, replica_groups=[1,8]<=[8], dimensions={1}
  %transpose.95 = bf16[8,1,1,1024,4096]{4,3,2,0,1} transpose(%all-to-all.60), dimensions={1,0,2,3,4}
  %reshape.10871 = bf16[8,1,1024,4096]{3,2,1,0} reshape(%transpose.95)
  %transpose.96 = bf16[1,8,1024,4096]{3,2,0,1} transpose(%reshape.10871), dimensions={1,0,2,3}
  %sharding_constraint.898 = bf16[1,8,1024,4096]{3,2,0,1} copy(%transpose.96)
  %param.314 = bf16[1,4096,14336]{2,1,0} parameter(243), sharding={devices=[8,1,1]<=[8]}
  %sharding_constraint.899 = bf16[1,4096,14336]{2,1,0} copy(%param.314)
  %dot.469 = bf16[1,8,1024,14336]{3,2,1,0} dot(%sharding_constraint.898, %sharding_constraint.899), lhs_batch_dims={0}, lhs_contracting_dims={3}, rhs_batch_dims={0}, rhs_contracting_dims={1}
  %sharding_constraint.900 = bf16[1,8,1024,14336]{3,2,1,0} copy(%dot.469)
  %neg.188 = bf16[1,8,1024,14336]{3,2,1,0} negate(%sharding_constraint.900)
  %exp.187 = bf16[1,8,1024,14336]{3,2,1,0} exponential(%neg.188)
  %add.1825 = bf16[1,8,1024,14336]{3,2,1,0} add(%exp.187, %jit_silu_.0)
  %div.801 = bf16[1,8,1024,14336]{3,2,1,0} divide(%jit_silu_.0, %add.1825)
  %mul.4333 = bf16[1,8,1024,14336]{3,2,1,0} multiply(%sharding_constraint.900, %div.801)
  %param.315 = bf16[1,4096,14336]{2,1,0} parameter(244), sharding={devices=[8,1,1]<=[8]}
  %sharding_constraint.901 = bf16[1,4096,14336]{2,1,0} copy(%param.315)
  %dot.470 = bf16[1,8,1024,14336]{3,2,1,0} dot(%sharding_constraint.898, %sharding_constraint.901), lhs_batch_dims={0}, lhs_contracting_dims={3}, rhs_batch_dims={0}, rhs_contracting_dims={1}
  %sharding_constraint.902 = bf16[1,8,1024,14336]{3,2,1,0} copy(%dot.470)
  %mul.4334 = bf16[1,8,1024,14336]{3,2,1,0} multiply(%mul.4333, %sharding_constraint.902)
  %param.316 = bf16[1,14336,4096]{2,1,0} parameter(245), sharding={devices=[8,1,1]<=[8]}
  %sharding_constraint.903 = bf16[1,14336,4096]{2,1,0} copy(%param.316)
  %dot.471 = bf16[1,8,1024,4096]{3,2,1,0} dot(%mul.4334, %sharding_constraint.903), lhs_batch_dims={0}, lhs_contracting_dims={3}, rhs_batch_dims={0}, rhs_contracting_dims={1}
  %sharding_constraint.904 = bf16[1,8,1024,4096]{3,2,1,0} copy(%dot.471)
  %reshape.10875 = bf16[1,8,1,1024,4096]{4,3,2,1,0} reshape(%sharding_constraint.904)
  %all-to-all.61 = bf16[1,8,1,1024,4096]{4,3,2,1,0} all-to-all(%reshape.10875), channel_id=342, replica_groups=[1,8]<=[8], dimensions={1}
  %transpose.97 = bf16[8,1,1,1024,4096]{4,3,2,0,1} transpose(%all-to-all.61), dimensions={1,0,2,3,4}
  %reshape.10876 = bf16[8,1,1024,4096]{3,2,1,0} reshape(%transpose.97)
  %dot.472 = bf16[1,4096,4096]{2,1,0} dot(%sharding_constraint.896, %reshape.10876), lhs_batch_dims={0}, lhs_contracting_dims={3,2}, rhs_batch_dims={1}, rhs_contracting_dims={2,0}
  %sharding_constraint.905 = bf16[1,4096,4096]{2,1,0} copy(%dot.472)
  %add.1826 = bf16[1,4096,4096]{2,1,0} add(%sharding_constraint.905, %add.1815)
  %sharding_constraint.906 = bf16[1,4096,4096]{2,1,0} copy(%add.1826)
  %sharding_constraint.907 = bf16[1,4096,4096]{2,1,0} copy(%sharding_constraint.906)
  %convert_element_type.1967 = f32[1,4096,4096]{2,1,0} convert(%sharding_constraint.907)
  %square.65 = f32[1,4096,4096]{2,1,0} multiply(%convert_element_type.1967, %convert_element_type.1967)
  %reduce.471 = f32[1,4096]{1,0} reduce(%square.65, %constant.1360), dimensions={2}, to_apply=%region_372.9527
  %div.802 = f32[1,4096]{1,0} multiply(%reduce.471, %broadcast.3412)
  %add.1827 = f32[1,4096]{1,0} add(%div.802, %broadcast.3413)
  %rsqrt.126 = f32[1,4096]{1,0} rsqrt(%add.1827)
  %mul.4335 = f32[1,4096,4096]{2,1,0} broadcast(%rsqrt.126), dimensions={0,1}
  %mul.4336 = f32[1,4096,4096]{2,1,0} multiply(%convert_element_type.1967, %mul.4335)
  %convert_element_type.1968 = bf16[1,4096,4096]{2,1,0} convert(%mul.4336)
  %param.317 = bf16[4096]{0} parameter(257), sharding={replicated}
  %mul.4337 = bf16[1,4096,4096]{2,1,0} broadcast(%param.317), dimensions={2}
  %mul.4339 = bf16[1,4096,4096]{2,1,0} multiply(%convert_element_type.1968, %mul.4337)
  %sharding_constraint.908 = bf16[1,4096,4096]{2,1,0} copy(%mul.4339)
  %sharding_constraint.909 = bf16[1,4096,4096]{2,1,0} copy(%sharding_constraint.908)
  %param.318 = bf16[512,32,128]{2,1,0} parameter(260), sharding={devices=[8,1,1]<=[8]}
  %all-gather.218 = bf16[4096,32,128]{2,1,0} all-gather(%param.318), channel_id=343, replica_groups=[1,8]<=[8], dimensions={0}, use_global_device_ids=true
  %dot.473 = bf16[1,4096,32,128]{3,2,1,0} dot(%sharding_constraint.909, %all-gather.218), lhs_contracting_dims={2}, rhs_contracting_dims={0}
  %slice.378 = bf16[1,4096,32,64]{3,2,1,0} slice(%dot.473), slice={[0:1], [0:4096], [0:32], [0:64]}
  %mul.4359 = bf16[1,4096,32,64]{3,2,1,0} multiply(%slice.378, %mul.2435)
  %slice.379 = bf16[1,4096,32,64]{3,2,1,0} slice(%dot.473), slice={[0:1], [0:4096], [0:32], [64:128]}
  %mul.4363 = bf16[1,4096,32,64]{3,2,1,0} multiply(%slice.379, %mul.2438)
  %sub.222 = bf16[1,4096,32,64]{3,2,1,0} subtract(%mul.4359, %mul.4363)
  %mul.4367 = bf16[1,4096,32,64]{3,2,1,0} multiply(%slice.379, %mul.2435)
  %mul.4370 = bf16[1,4096,32,64]{3,2,1,0} multiply(%slice.378, %mul.2438)
  %add.1828 = bf16[1,4096,32,64]{3,2,1,0} add(%mul.4367, %mul.4370)
  %concatenate.251 = bf16[1,4096,32,128]{3,2,1,0} concatenate(%sub.222, %add.1828), dimensions={3}
  %sharding_constraint.910 = bf16[1,4096,32,128]{3,2,1,0} copy(%concatenate.251)
  %param.319 = bf16[512,8,128]{2,1,0} parameter(258), sharding={devices=[8,1,1]<=[8]}
  %all-gather.219 = bf16[4096,8,128]{2,1,0} all-gather(%param.319), channel_id=344, replica_groups=[1,8]<=[8], dimensions={0}, use_global_device_ids=true
  %dot.474 = bf16[1,4096,8,128]{3,2,1,0} dot(%sharding_constraint.909, %all-gather.219), lhs_contracting_dims={2}, rhs_contracting_dims={0}
  %slice.380 = bf16[1,4096,8,64]{3,2,1,0} slice(%dot.474), slice={[0:1], [0:4096], [0:8], [0:64]}
  %mul.4374 = bf16[1,4096,8,64]{3,2,1,0} multiply(%slice.380, %mul.2456)
  %slice.381 = bf16[1,4096,8,64]{3,2,1,0} slice(%dot.474), slice={[0:1], [0:4096], [0:8], [64:128]}
  %mul.4377 = bf16[1,4096,8,64]{3,2,1,0} multiply(%slice.381, %mul.2460)
  %sub.223 = bf16[1,4096,8,64]{3,2,1,0} subtract(%mul.4374, %mul.4377)
  %mul.4380 = bf16[1,4096,8,64]{3,2,1,0} multiply(%slice.381, %mul.2456)
  %mul.4385 = bf16[1,4096,8,64]{3,2,1,0} multiply(%slice.380, %mul.2460)
  %add.1829 = bf16[1,4096,8,64]{3,2,1,0} add(%mul.4380, %mul.4385)
  %concatenate.252 = bf16[1,4096,8,128]{3,2,1,0} concatenate(%sub.223, %add.1829), dimensions={3}
  %sharding_constraint.912 = bf16[1,4096,8,128]{3,2,1,0} copy(%concatenate.252)
  %param.320 = bf16[512,8,128]{2,1,0} parameter(261), sharding={devices=[8,1,1]<=[8]}
  %all-gather.220 = bf16[4096,8,128]{2,1,0} all-gather(%param.320), channel_id=345, replica_groups=[1,8]<=[8], dimensions={0}, use_global_device_ids=true
  %dot.475 = bf16[1,4096,8,128]{3,2,1,0} dot(%sharding_constraint.909, %all-gather.220), lhs_contracting_dims={2}, rhs_contracting_dims={0}
  %sharding_constraint.913 = bf16[1,4096,8,128]{3,2,1,0} copy(%dot.475)
  %te_fused_attn_forward_ffi.124 = (bf16[1,4096,32,128]{3,2,1,0}, f32[1,32,4096,1]{3,2,1,0}, u32[2,4]{1,0}, u8[48]{0}) custom-call(%sharding_constraint.910, %sharding_constraint.912, %sharding_constraint.913, %constant.1403, %dynamic-slice.38, /*index=5*/%concatenate.31, %concatenate.36, %constant.1416, %constant.1416, %constant.1416, /*index=10*/%constant.1416, %constant.1416, %constant.1416), custom_call_target="te_fused_attn_forward_ffi", operand_layout_constraints={bf16[1,4096,32,128]{3,2,1,0}, bf16[1,4096,8,128]{3,2,1,0}, bf16[1,4096,8,128]{3,2,1,0}, bf16[0]{0}, u32[2]{0}, s32[2]{0}, s32[2]{0}, f32[0]{0}, f32[0]{0}, f32[0]{0}, f32[0]{0}, f32[0]{0}, f32[0]{0}}, api_version=API_VERSION_TYPED_FFI, backend_config={attn_heads = 32 : i64, bias_batch = 0 : i64, bias_heads = 0 : i64, bias_type = 0 : i64, deterministic = false, dropout_probability = 0.000000e+00 : f64, input_batch = 1 : i64, is_training = true, kv_max_seqlen = 4096 : i64, mask_type = 3 : i64, max_segments_per_seq = 1 : i64, num_gqa_groups = 8 : i64, q_max_seqlen = 4096 : i64, qk_head_dim = 128 : i64, qkv_layout = 9 : i64, scaling_factor = 1.000000e+00 : f64, v_head_dim = 128 : i64, window_size_left = -1 : i64, window_size_right = -1 : i64}
  %get-tuple-element.569 = bf16[1,4096,32,128]{3,2,1,0} get-tuple-element(%te_fused_attn_forward_ffi.124), index=0
  %sharding_constraint.914 = bf16[1,4096,32,128]{3,2,1,0} copy(%get-tuple-element.569)
  %param.321 = bf16[32,128,512]{2,1,0} parameter(259), sharding={devices=[1,1,8]<=[8]}
  %all-gather.222 = bf16[32,128,4096]{2,1,0} all-gather(%param.321), channel_id=347, replica_groups=[1,8]<=[8], dimensions={2}, use_global_device_ids=true
  %dot.476 = bf16[1,4096,4096]{2,1,0} dot(%sharding_constraint.914, %all-gather.222), lhs_contracting_dims={2,3}, rhs_contracting_dims={0,1}
  %sharding_constraint.915 = bf16[1,4096,4096]{2,1,0} copy(%dot.476)
  %add.1831 = bf16[1,4096,4096]{2,1,0} add(%sharding_constraint.907, %sharding_constraint.915)
  %convert_element_type.1980 = f32[1,4096,4096]{2,1,0} convert(%add.1831)
  %square.66 = f32[1,4096,4096]{2,1,0} multiply(%convert_element_type.1980, %convert_element_type.1980)
  %reduce.475 = f32[1,4096]{1,0} reduce(%square.66, %constant.1360), dimensions={2}, to_apply=%region_376.9651
  %div.811 = f32[1,4096]{1,0} multiply(%reduce.475, %broadcast.3412)
  %add.1832 = f32[1,4096]{1,0} add(%div.811, %broadcast.3413)
  %rsqrt.127 = f32[1,4096]{1,0} rsqrt(%add.1832)
  %mul.4388 = f32[1,4096,4096]{2,1,0} broadcast(%rsqrt.127), dimensions={0,1}
  %mul.4389 = f32[1,4096,4096]{2,1,0} multiply(%convert_element_type.1980, %mul.4388)
  %convert_element_type.1982 = bf16[1,4096,4096]{2,1,0} convert(%mul.4389)
  %param.322 = bf16[4096]{0} parameter(256), sharding={replicated}
  %mul.4390 = bf16[1,4096,4096]{2,1,0} broadcast(%param.322), dimensions={2}
  %mul.4391 = bf16[1,4096,4096]{2,1,0} multiply(%convert_element_type.1982, %mul.4390)
  %sharding_constraint.916 = bf16[1,4096,4096]{2,1,0} copy(%mul.4391)
  %param.323 = bf16[512,8]{1,0} parameter(252), sharding={devices=[8,1]<=[8]}
  %all-gather.223 = bf16[4096,8]{1,0} all-gather(%param.323), channel_id=348, replica_groups=[1,8]<=[8], dimensions={0}, use_global_device_ids=true
  %dot.477 = bf16[1,4096,8]{2,1,0} dot(%sharding_constraint.916, %all-gather.223), lhs_contracting_dims={2}, rhs_contracting_dims={0}
  %sharding_constraint.917 = bf16[1,4096,8]{2,1,0} copy(%dot.477)
  %top_k.93 = bf16[4096,8]{1,0} reshape(%sharding_constraint.917)
  %top_k.94 = (bf16[4096,2]{1,0}, s32[4096,2]{1,0}) custom-call(%top_k.93), custom_call_target="TopK", called_computations={%compare_greater_than.31.9670.clone}
  %get-tuple-element.570 = bf16[4096,2]{1,0} get-tuple-element(%top_k.94), index=0
  %get-tuple-element.571 = s32[4096,2]{1,0} get-tuple-element(%top_k.94), index=1
  %add.1833 = s32[4096,2]{1,0} add(%get-tuple-element.571, %broadcast.3418)
  %sort.95 = (bf16[4096,2]{1,0}, s32[4096,2]{1,0}) sort(%get-tuple-element.570, %add.1833), dimensions={1}, is_stable=true, to_apply=%compare-value-and-index.31
  %get-tuple-element.573 = s32[4096,2]{1,0} get-tuple-element(%sort.95), index=1
  %slice.384 = s32[4096,2]{1,0} slice(%get-tuple-element.573), slice={[0:4096], [0:2]}
  %top_k.95 = s32[1,4096,2]{2,1,0} reshape(%slice.384)
  %lt.96 = pred[1,4096,2]{2,1,0} compare(%top_k.95, %broadcast.3419), direction=LT
  %add.1834 = s32[1,4096,2]{2,1,0} add(%top_k.95, %broadcast.3420)
  %select_n.411 = s32[1,4096,2]{2,1,0} select(%lt.96, %add.1834, %top_k.95)
  %broadcast_in_dim.613 = s32[1,4096,2,1]{3,2,1,0} reshape(%select_n.411)
  %concatenate.255 = s32[1,4096,2,3]{3,2,1,0} concatenate(%add.1356, %iota.1867, %broadcast_in_dim.613), dimensions={3}
  %subtract.95 = s32[1,4096,2,3]{3,2,1,0} subtract(%concatenate.255, %broadcast.3428)
  %scatter.191 = u32[1,4096,8]{2,1,0} scatter(%dynamic-slice.43, %subtract.95, %add.1401), update_window_dims={}, inserted_window_dims={0,1,2}, scatter_dims_to_operand_dims={0,1,2}, index_vector_dim=3, to_apply=%region_377.9698.clone
  %gather.31 = u32[1,4096,2]{2,1,0} gather(%scatter.191, %subtract.95), offset_dims={}, collapsed_slice_dims={0,1,2}, start_index_map={0,1,2}, index_vector_dim=3, slice_sizes={1,1,1}
  %eq.2159 = pred[1,4096,2]{2,1,0} compare(%add.1401, %gather.31), direction=EQ
  %get-tuple-element.572 = bf16[4096,2]{1,0} get-tuple-element(%sort.95), index=0
  %slice.383 = bf16[4096,2]{1,0} slice(%get-tuple-element.572), slice={[0:4096], [0:2]}
  %convert_element_type.1983 = f32[4096,2]{1,0} convert(%slice.383)
  %convert_element_type.1984 = f32[1,4096,2]{2,1,0} reshape(%convert_element_type.1983)
  %reduce.476 = f32[4096]{0} reduce(%convert_element_type.1983, %constant.1450), dimensions={1}, to_apply=%region_378.9707
  %sub.224 = f32[1,4096]{1,0} reshape(%reduce.476)
  %sub.225 = f32[1,4096,2]{2,1,0} broadcast(%sub.224), dimensions={0,1}
  %sub.226 = f32[1,4096,2]{2,1,0} subtract(%convert_element_type.1984, %sub.225)
  %exp.188 = f32[1,4096,2]{2,1,0} exponential(%sub.226)
  %reduce.477 = f32[1,4096]{1,0} reduce(%exp.188, %constant.1360), dimensions={2}, to_apply=%region_379.9716
  %div.812 = f32[1,4096,2]{2,1,0} broadcast(%reduce.477), dimensions={0,1}
  %div.813 = f32[1,4096,2]{2,1,0} divide(%exp.188, %div.812)
  %convert_element_type.1985 = bf16[1,4096,2]{2,1,0} convert(%div.813)
  %select_n.412 = bf16[1,4096,2]{2,1,0} select(%eq.2159, %convert_element_type.1985, %broadcast.3427)
  %scatter.192 = bf16[1,4096,8]{2,1,0} scatter(%broadcast.3379, %subtract.95, %select_n.412), update_window_dims={}, inserted_window_dims={0,1,2}, scatter_dims_to_operand_dims={0,1,2}, index_vector_dim=3, to_apply=%region_380.9725.clone
  %eq.2161 = s32[1,4096,2,8]{3,2,1,0} broadcast(%top_k.95), dimensions={0,1,2}
  %iota.2343 = s32[1,4096,2,8]{3,2,1,0} iota(), iota_dimension=3
  %eq.2162 = pred[1,4096,2,8]{3,2,1,0} compare(%eq.2161, %iota.2343), direction=EQ
  %convert_element_type.1987 = s32[1,4096,2,8]{3,2,1,0} convert(%eq.2162)
  %reshape.10919 = s32[1,8192,8]{2,1,0} reshape(%convert_element_type.1987)
  %sharding_constraint.918 = s32[1,8192,8]{2,1,0} copy(%reshape.10919)
  %reduce-window.31 = s32[1,8192,8]{2,1,0} reduce-window(%sharding_constraint.918, %constant.1181), window={size=1x8192x1 pad=0_0x8191_0x0_0}, to_apply=%region_381.9737
  %reshape.10921 = s32[1,4096,2,8]{3,2,1,0} reshape(%reduce-window.31)
  %sharding_constraint.919 = s32[1,4096,2,8]{3,2,1,0} copy(%reshape.10921)
  %le.64 = pred[1,4096,2,8]{3,2,1,0} compare(%sharding_constraint.919, %broadcast.3429), direction=LE
  %mul.4392 = s32[1,4096,2,8]{3,2,1,0} select(%le.64, %convert_element_type.1987, %broadcast.3430)
  %reduce.478 = s32[1,4096,8]{2,1,0} reduce(%mul.4392, %constant.1181), dimensions={2}, to_apply=%region_382.9746
  %convert_element_type.1988 = bf16[1,4096,8]{2,1,0} convert(%reduce.478)
  %mul.4393 = bf16[1,4096,8]{2,1,0} multiply(%scatter.192, %convert_element_type.1988)
  %mul.4394 = bf16[1,4096,8,1025]{3,2,1,0} broadcast(%mul.4393), dimensions={0,1,2}
  %mul.4396 = s32[1,8192,8]{2,1,0} multiply(%sharding_constraint.918, %reduce-window.31)
  %reshape.10922 = s32[1,4096,2,8]{3,2,1,0} reshape(%mul.4396)
  %reduce.479 = s32[1,4096,8]{2,1,0} reduce(%reshape.10922, %constant.1181), dimensions={2}, to_apply=%region_383.9756
  %mul.4397 = s32[1,4096,8]{2,1,0} multiply(%reduce.479, %reduce.478)
  %eq.2163 = s32[1,4096,8,1025]{3,2,1,0} broadcast(%mul.4397), dimensions={0,1,2}
  %iota.2344 = s32[1,4096,8,1025]{3,2,1,0} iota(), iota_dimension=3
  %eq.2164 = pred[1,4096,8,1025]{3,2,1,0} compare(%eq.2163, %iota.2344), direction=EQ
  %convert_element_type.1989 = s32[1,4096,8,1025]{3,2,1,0} convert(%eq.2164)
  %convert_element_type.1991 = bf16[1,4096,8,1025]{3,2,1,0} convert(%convert_element_type.1989)
  %mul.4398 = bf16[1,4096,8,1025]{3,2,1,0} multiply(%mul.4394, %convert_element_type.1991)
  %slice.385 = bf16[1,4096,8,1024]{3,2,1,0} slice(%mul.4398), slice={[0:1], [0:4096], [0:8], [1:1025]}
  %sharding_constraint.920 = bf16[1,4096,8,1024]{3,2,1,0} copy(%slice.385)
  %convert_element_type.1992 = pred[1,4096,8,1024]{3,2,1,0} compare(%slice.385, %broadcast.3431), direction=NE
  %sharding_constraint.921 = pred[1,4096,8,1024]{3,2,1,0} copy(%convert_element_type.1992)
  %dot_general.67 = bf16[1,4096,8,1024]{3,2,1,0} convert(%sharding_constraint.921)
  %dot.478 = bf16[1,8,1024,4096]{3,2,1,0} dot(%dot_general.67, %sharding_constraint.916), lhs_batch_dims={0}, lhs_contracting_dims={1}, rhs_batch_dims={0}, rhs_contracting_dims={1}
  %reshape.10925 = bf16[1,8,1,1024,4096]{4,3,2,1,0} reshape(%dot.478)
  %all-to-all.62 = bf16[1,8,1,1024,4096]{4,3,2,1,0} all-to-all(%reshape.10925), channel_id=352, replica_groups=[1,8]<=[8], dimensions={1}
  %transpose.98 = bf16[8,1,1,1024,4096]{4,3,2,0,1} transpose(%all-to-all.62), dimensions={1,0,2,3,4}
  %reshape.10926 = bf16[8,1,1024,4096]{3,2,1,0} reshape(%transpose.98)
  %transpose.99 = bf16[1,8,1024,4096]{3,2,0,1} transpose(%reshape.10926), dimensions={1,0,2,3}
  %sharding_constraint.922 = bf16[1,8,1024,4096]{3,2,0,1} copy(%transpose.99)
  %param.324 = bf16[1,4096,14336]{2,1,0} parameter(253), sharding={devices=[8,1,1]<=[8]}
  %sharding_constraint.923 = bf16[1,4096,14336]{2,1,0} copy(%param.324)
  %dot.479 = bf16[1,8,1024,14336]{3,2,1,0} dot(%sharding_constraint.922, %sharding_constraint.923), lhs_batch_dims={0}, lhs_contracting_dims={3}, rhs_batch_dims={0}, rhs_contracting_dims={1}
  %sharding_constraint.924 = bf16[1,8,1024,14336]{3,2,1,0} copy(%dot.479)
  %neg.189 = bf16[1,8,1024,14336]{3,2,1,0} negate(%sharding_constraint.924)
  %exp.189 = bf16[1,8,1024,14336]{3,2,1,0} exponential(%neg.189)
  %add.1841 = bf16[1,8,1024,14336]{3,2,1,0} add(%exp.189, %jit_silu_.0)
  %div.814 = bf16[1,8,1024,14336]{3,2,1,0} divide(%jit_silu_.0, %add.1841)
  %mul.4399 = bf16[1,8,1024,14336]{3,2,1,0} multiply(%sharding_constraint.924, %div.814)
  %param.325 = bf16[1,4096,14336]{2,1,0} parameter(254), sharding={devices=[8,1,1]<=[8]}
  %sharding_constraint.925 = bf16[1,4096,14336]{2,1,0} copy(%param.325)
  %dot.480 = bf16[1,8,1024,14336]{3,2,1,0} dot(%sharding_constraint.922, %sharding_constraint.925), lhs_batch_dims={0}, lhs_contracting_dims={3}, rhs_batch_dims={0}, rhs_contracting_dims={1}
  %sharding_constraint.926 = bf16[1,8,1024,14336]{3,2,1,0} copy(%dot.480)
  %mul.4400 = bf16[1,8,1024,14336]{3,2,1,0} multiply(%mul.4399, %sharding_constraint.926)
  %param.326 = bf16[1,14336,4096]{2,1,0} parameter(255), sharding={devices=[8,1,1]<=[8]}
  %sharding_constraint.927 = bf16[1,14336,4096]{2,1,0} copy(%param.326)
  %dot.481 = bf16[1,8,1024,4096]{3,2,1,0} dot(%mul.4400, %sharding_constraint.927), lhs_batch_dims={0}, lhs_contracting_dims={3}, rhs_batch_dims={0}, rhs_contracting_dims={1}
  %sharding_constraint.928 = bf16[1,8,1024,4096]{3,2,1,0} copy(%dot.481)
  %reshape.10929 = bf16[1,8,1,1024,4096]{4,3,2,1,0} reshape(%sharding_constraint.928)
  %all-to-all.63 = bf16[1,8,1,1024,4096]{4,3,2,1,0} all-to-all(%reshape.10929), channel_id=353, replica_groups=[1,8]<=[8], dimensions={1}
  %transpose.100 = bf16[8,1,1,1024,4096]{4,3,2,0,1} transpose(%all-to-all.63), dimensions={1,0,2,3,4}
  %reshape.10930 = bf16[8,1,1024,4096]{3,2,1,0} reshape(%transpose.100)
  %dot.482 = bf16[1,4096,4096]{2,1,0} dot(%sharding_constraint.920, %reshape.10930), lhs_batch_dims={0}, lhs_contracting_dims={3,2}, rhs_batch_dims={1}, rhs_contracting_dims={2,0}
  %sharding_constraint.929 = bf16[1,4096,4096]{2,1,0} copy(%dot.482)
  %add.1842 = bf16[1,4096,4096]{2,1,0} add(%sharding_constraint.929, %add.1831)
  %sharding_constraint.930 = bf16[1,4096,4096]{2,1,0} copy(%add.1842)
  %convert_element_type.1993 = f32[1,4096,4096]{2,1,0} convert(%sharding_constraint.930)
  %square.67 = f32[1,4096,4096]{2,1,0} multiply(%convert_element_type.1993, %convert_element_type.1993)
  %reduce.480 = f32[1,4096]{1,0} reduce(%square.67, %constant.1360), dimensions={2}, to_apply=%region_384.9797
  %div.815 = f32[1,4096]{1,0} multiply(%reduce.480, %broadcast.3412)
  %add.1843 = f32[1,4096]{1,0} add(%div.815, %broadcast.3413)
  %add.1844 = f32[1,4096,1]{2,1,0} reshape(%add.1843)
  %rsqrt.128 = f32[1,4096,1]{2,1,0} rsqrt(%add.1844)
  %mul.4401 = f32[1,4096]{1,0} reshape(%rsqrt.128)
  %mul.4402 = f32[1,4096,4096]{2,1,0} broadcast(%mul.4401), dimensions={0,1}
  %mul.4406 = f32[1,4096,4096]{2,1,0} multiply(%convert_element_type.1993, %mul.4402)
  %convert_element_type.1994 = bf16[1,4096,4096]{2,1,0} convert(%mul.4406)
  %param.327 = s32[1,4096]{1,0} parameter(976), sharding={devices=[8,1]<=[8]}
  %broadcast.3618 = s32[1,4096]{1,0} broadcast(%constant.1181), dimensions={}
  %ne.96 = pred[1,4096]{1,0} compare(%param.327, %broadcast.3618), direction=NE
  %convert_element_type.1995 = s32[1,4096]{1,0} convert(%ne.96)
  %reduce.481 = s32[] reduce(%convert_element_type.1995, %constant.1181), dimensions={0,1}, to_apply=%region_385.9814
  %all-reduce = s32[] all-reduce(%reduce.481), channel_id=354, replica_groups=[1,8]<=[8], use_global_device_ids=true, to_apply=%region_385.9814.clone
  %convert_element_type.1997 = f32[] convert(%all-reduce)
  %constant.5417 = f32[] constant(1e-08)
  %add.1845 = f32[] add(%convert_element_type.1997, %constant.5417)
  %div.816 = f32[] divide(%constant.1178, %add.1845)
  %broadcast_in_dim.614 = f32[1,4096]{1,0} broadcast(%div.816), dimensions={}
  %broadcast.3619 = f32[1,4096]{1,0} broadcast(%constant.1360), dimensions={}
  %mul.4407 = f32[1,4096]{1,0} select(%ne.96, %broadcast_in_dim.614, %broadcast.3619)
  %sharding_constraint.931 = f32[1,4096]{1,0} copy(%mul.4407)
  %mul.4408 = f32[1,4096,32000]{2,1,0} broadcast(%sharding_constraint.931), dimensions={0,1}
  %mul.4412 = bf16[1,4096,4096]{2,1,0} broadcast(%param.1), dimensions={2}
  %mul.4419 = bf16[1,4096,4096]{2,1,0} multiply(%convert_element_type.1994, %mul.4412)
  %param.328 = bf16[512,32000]{1,0} parameter(322), sharding={devices=[8,1]<=[8]}
  %all-gather.225 = bf16[4096,32000]{1,0} all-gather(%param.328), channel_id=355, replica_groups=[1,8]<=[8], dimensions={0}, use_global_device_ids=true
  %dot.483 = bf16[1,4096,32000]{2,1,0} dot(%mul.4419, %all-gather.225), lhs_contracting_dims={2}, rhs_contracting_dims={0}
  %sharding_constraint.932 = bf16[1,4096,32000]{2,1,0} copy(%dot.483)
  %convert_element_type.1998 = f32[1,4096,32000]{2,1,0} convert(%sharding_constraint.932)
  %reduce.482 = f32[1,4096]{1,0} reduce(%convert_element_type.1998, %constant.1450), dimensions={2}, to_apply=%region_386.9833
  %sub.227 = f32[1,4096,32000]{2,1,0} broadcast(%reduce.482), dimensions={0,1}
  %sub.228 = f32[1,4096,32000]{2,1,0} subtract(%convert_element_type.1998, %sub.227)
  %exp.190 = f32[1,4096,32000]{2,1,0} exponential(%sub.228)
  %reduce.483 = f32[1,4096]{1,0} reduce(%exp.190, %constant.1360), dimensions={2}, to_apply=%region_387.9841
  %log.2 = f32[1,4096]{1,0} log(%reduce.483)
  %add.1846 = f32[1,4096]{1,0} add(%log.2, %reduce.482)
  %mul.4420 = f32[1,4096]{1,0} multiply(%add.1846, %broadcast.3619)
  %add.1847 = f32[1,4096]{1,0} broadcast(%constant.1178), dimensions={}
  %add.1848 = f32[1,4096]{1,0} add(%mul.4420, %add.1847)
  %mul.4421 = f32[1,4096,32000]{2,1,0} broadcast(%add.1848), dimensions={0,1}
  %mul.4422 = f32[1,4096,32000]{2,1,0} multiply(%mul.4421, %exp.190)
  %div.817 = f32[1,4096,32000]{2,1,0} broadcast(%reduce.483), dimensions={0,1}
  %div.818 = f32[1,4096,32000]{2,1,0} divide(%mul.4422, %div.817)
  %param.329 = s32[1,4096]{1,0} parameter(975), sharding={devices=[8,1]<=[8]}
  %eq.2165 = s32[1,4096,32000]{2,1,0} broadcast(%param.329), dimensions={0,1}
  %iota.2345 = s32[1,4096,32000]{2,1,0} iota(), iota_dimension=2
  %eq.2166 = pred[1,4096,32000]{2,1,0} compare(%eq.2165, %iota.2345), direction=EQ
  %convert_element_type.1999 = f32[1,4096,32000]{2,1,0} convert(%eq.2166)
  %sub.229 = f32[1,4096,32000]{2,1,0} subtract(%div.818, %convert_element_type.1999)
  %mul.4423 = f32[1,4096,32000]{2,1,0} multiply(%mul.4408, %sub.229)
  %convert_element_type.2000 = bf16[1,4096,32000]{2,1,0} convert(%mul.4423)
  %sharding_constraint.933 = bf16[1,4096,32000]{2,1,0} copy(%convert_element_type.2000)
  %dot.484 = bf16[1,4096,4096]{2,1,0} dot(%sharding_constraint.933, %all-gather.225), lhs_contracting_dims={2}, rhs_contracting_dims={1}
  %mul.4429 = bf16[1,4096,4096]{2,1,0} multiply(%convert_element_type.1994, %dot.484)
  %reduce.484 = bf16[4096]{0} reduce(%mul.4429, %constant.1190), dimensions={0,1}, to_apply=%region_388.9865
  %all-reduce.1 = bf16[4096]{0} all-reduce(%reduce.484), channel_id=356, replica_groups=[1,8]<=[8], use_global_device_ids=true, to_apply=%region_388.9865.clone
  %mul.4434 = bf16[4096]{0} multiply(%all-reduce.1, %all-reduce.1)
  %convert_element_type.2001 = f32[4096]{0} convert(%mul.4434)
  %reduce.485 = f32[] reduce(%convert_element_type.2001, %constant.1360), dimensions={0}, to_apply=%region_389.9872
  %convert_element_type.2003 = bf16[] convert(%reduce.485)
  %mul.4439 = bf16[1,4096,4096]{2,1,0} multiply(%dot.484, %mul.4412)
  %convert_element_type.2004 = f32[1,4096,4096]{2,1,0} convert(%mul.4439)
  %mul.4445 = f32[1,4096,4096]{2,1,0} multiply(%convert_element_type.2004, %mul.4402)
  %mul.4452 = f32[1,4096,4096]{2,1,0} multiply(%convert_element_type.1993, %convert_element_type.2004)
  %reduce.486 = f32[1,4096]{1,0} reduce(%mul.4452, %constant.1360), dimensions={2}, to_apply=%region_390.9885
  %reshape.10932 = f32[1,4096,1]{2,1,0} reshape(%reduce.486)
  %div.819 = f32[1,4096,1]{2,1,0} divide(%rsqrt.128, %add.1844)
  %constant.5418 = f32[] constant(-0.5)
  %broadcast.3620 = f32[1,4096,1]{2,1,0} broadcast(%constant.5418), dimensions={}
  %mul.4453 = f32[1,4096,1]{2,1,0} multiply(%div.819, %broadcast.3620)
  %mul.4454 = f32[1,4096,1]{2,1,0} multiply(%reshape.10932, %mul.4453)
  %constant.5419 = f32[] constant(0.00048828125)
  %mul.4455 = f32[1,4096,1]{2,1,0} broadcast(%constant.5419), dimensions={}
  %mul.4456 = f32[1,4096,1]{2,1,0} multiply(%mul.4454, %mul.4455)
  %mul.4457 = f32[1,4096]{1,0} reshape(%mul.4456)
  %mul.4458 = f32[1,4096,4096]{2,1,0} broadcast(%mul.4457), dimensions={0,1}
  %mul.4459 = f32[1,4096,4096]{2,1,0} multiply(%convert_element_type.1993, %mul.4458)
  %add_any.66 = f32[1,4096,4096]{2,1,0} add(%mul.4445, %mul.4459)
  %convert_element_type.2005 = bf16[1,4096,4096]{2,1,0} convert(%add_any.66)
  %tuple.223 = (bf16[512,8]{1,0}, bf16[1,4096,14336]{2,1,0}, bf16[1,4096,14336]{2,1,0}, bf16[1,14336,4096]{2,1,0}, bf16[4096]{0}, /*index=5*/bf16[4096]{0}, bf16[512,8,128]{2,1,0}, bf16[32,128,512]{2,1,0}, bf16[512,32,128]{2,1,0}, bf16[512,8,128]{2,1,0}, /*index=10*/bf16[1,4096,4096]{2,1,0}, s32[1,4096]{1,0}, s32[1,4096]{1,0}, bf16[1,4096,4096]{2,1,0}) tuple(%param.323, %param.324, %param.325, %param.326, %param.322, /*index=5*/%param.317, %param.319, %param.321, %param.318, %param.320, /*index=10*/%sharding_constraint.906, %param.10, %param.7, %convert_element_type.2005)
  %remat2.11 = (bf16[512,8]{1,0}, bf16[1,4096,14336]{2,1,0}, bf16[1,4096,14336]{2,1,0}, bf16[1,14336,4096]{2,1,0}, bf16[4096]{0}, /*index=5*/bf16[4096]{0}, bf16[512,8,128]{2,1,0}, bf16[32,128,512]{2,1,0}, bf16[512,32,128]{2,1,0}, bf16[512,8,128]{2,1,0}, /*index=10*/bf16[1,4096,4096]{2,1,0}, s32[1,4096]{1,0}, s32[1,4096]{1,0}, bf16[1,4096,4096]{2,1,0}) opt-barrier(%tuple.223)
  %get-tuple-element.576 = bf16[1,4096,4096]{2,1,0} get-tuple-element(%remat2.11), index=13
  %sharding_constraint.934 = bf16[1,4096,4096]{2,1,0} copy(%get-tuple-element.576)
  %iota.2347 = s32[1,4096,2,1]{3,2,1,0} iota(), iota_dimension=1
  %get-tuple-element.577 = bf16[1,4096,4096]{2,1,0} get-tuple-element(%remat2.11), index=10
  %sharding_constraint.935 = bf16[1,4096,4096]{2,1,0} copy(%get-tuple-element.577)
  %convert_element_type.2006 = f32[1,4096,4096]{2,1,0} convert(%sharding_constraint.935)
  %square.68 = f32[1,4096,4096]{2,1,0} multiply(%convert_element_type.2006, %convert_element_type.2006)
  %reduce.487 = f32[1,4096]{1,0} reduce(%square.68, %constant.1360), dimensions={2}, to_apply=%region_391.9929
  %div.820 = f32[1,4096]{1,0} multiply(%reduce.487, %broadcast.3412)
  %add.1850 = f32[1,4096]{1,0} add(%div.820, %broadcast.3413)
  %add.1851 = f32[1,4096,1]{2,1,0} reshape(%add.1850)
  %rsqrt.129 = f32[1,4096,1]{2,1,0} rsqrt(%add.1851)
  %mul.4460 = f32[1,4096]{1,0} reshape(%rsqrt.129)
  %mul.4461 = f32[1,4096,4096]{2,1,0} broadcast(%mul.4460), dimensions={0,1}
  %mul.4462 = f32[1,4096,4096]{2,1,0} multiply(%convert_element_type.2006, %mul.4461)
  %convert_element_type.2007 = bf16[1,4096,4096]{2,1,0} convert(%mul.4462)
  %get-tuple-element.578 = bf16[4096]{0} get-tuple-element(%remat2.11), index=5
  %mul.4463 = bf16[1,4096,4096]{2,1,0} broadcast(%get-tuple-element.578), dimensions={2}
  %mul.4464 = bf16[1,4096,4096]{2,1,0} multiply(%convert_element_type.2007, %mul.4463)
  %sharding_constraint.936 = bf16[1,4096,4096]{2,1,0} copy(%mul.4464)
  %sharding_constraint.937 = bf16[1,4096,4096]{2,1,0} copy(%sharding_constraint.936)
  %get-tuple-element.579 = bf16[512,32,128]{2,1,0} get-tuple-element(%remat2.11), index=8
  %all-gather.226 = bf16[4096,32,128]{2,1,0} all-gather(%get-tuple-element.579), channel_id=357, replica_groups=[1,8]<=[8], dimensions={0}, use_global_device_ids=true
  %dot.485 = bf16[1,4096,32,128]{3,2,1,0} dot(%sharding_constraint.937, %all-gather.226), lhs_contracting_dims={2}, rhs_contracting_dims={0}
  %slice.386 = bf16[1,4096,32,64]{3,2,1,0} slice(%dot.485), slice={[0:1], [0:4096], [0:32], [0:64]}
  %get-tuple-element.580 = s32[1,4096]{1,0} get-tuple-element(%remat2.11), index=12
  %convert_element_type.2009 = f32[1,4096]{1,0} convert(%get-tuple-element.580)
  %div.821 = f32[1,4096,1,64]{3,2,1,0} broadcast(%convert_element_type.2009), dimensions={0,1}
  %div.824 = f32[1,4096,1,64]{3,2,1,0} divide(%div.821, %div.402)
  %cos.65 = f32[1,4096,1,64]{3,2,1,0} cosine(%div.824)
  %convert_element_type.2011 = bf16[1,4096,1,64]{3,2,1,0} convert(%cos.65)
  %mul.4466 = bf16[1,4096,64]{2,1,0} reshape(%convert_element_type.2011)
  %mul.4467 = bf16[1,4096,32,64]{3,2,1,0} broadcast(%mul.4466), dimensions={0,1,3}
  %mul.4468 = bf16[1,4096,32,64]{3,2,1,0} multiply(%slice.386, %mul.4467)
  %slice.387 = bf16[1,4096,32,64]{3,2,1,0} slice(%dot.485), slice={[0:1], [0:4096], [0:32], [64:128]}
  %sin.64 = f32[1,4096,1,64]{3,2,1,0} sine(%div.824)
  %convert_element_type.2012 = bf16[1,4096,1,64]{3,2,1,0} convert(%sin.64)
  %mul.4469 = bf16[1,4096,64]{2,1,0} reshape(%convert_element_type.2012)
  %mul.4470 = bf16[1,4096,32,64]{3,2,1,0} broadcast(%mul.4469), dimensions={0,1,3}
  %mul.4471 = bf16[1,4096,32,64]{3,2,1,0} multiply(%slice.387, %mul.4470)
  %sub.230 = bf16[1,4096,32,64]{3,2,1,0} subtract(%mul.4468, %mul.4471)
  %mul.4474 = bf16[1,4096,32,64]{3,2,1,0} multiply(%slice.387, %mul.4467)
  %mul.4477 = bf16[1,4096,32,64]{3,2,1,0} multiply(%slice.386, %mul.4470)
  %add.1852 = bf16[1,4096,32,64]{3,2,1,0} add(%mul.4474, %mul.4477)
  %concatenate.259 = bf16[1,4096,32,128]{3,2,1,0} concatenate(%sub.230, %add.1852), dimensions={3}
  %sharding_constraint.938 = bf16[1,4096,32,128]{3,2,1,0} copy(%concatenate.259)
  %get-tuple-element.581 = bf16[512,8,128]{2,1,0} get-tuple-element(%remat2.11), index=6
  %all-gather.227 = bf16[4096,8,128]{2,1,0} all-gather(%get-tuple-element.581), channel_id=358, replica_groups=[1,8]<=[8], dimensions={0}, use_global_device_ids=true
  %dot.486 = bf16[1,4096,8,128]{3,2,1,0} dot(%sharding_constraint.937, %all-gather.227), lhs_contracting_dims={2}, rhs_contracting_dims={0}
  %slice.388 = bf16[1,4096,8,64]{3,2,1,0} slice(%dot.486), slice={[0:1], [0:4096], [0:8], [0:64]}
  %mul.4480 = bf16[1,4096,8,64]{3,2,1,0} broadcast(%mul.4466), dimensions={0,1,3}
  %mul.4481 = bf16[1,4096,8,64]{3,2,1,0} multiply(%slice.388, %mul.4480)
  %slice.389 = bf16[1,4096,8,64]{3,2,1,0} slice(%dot.486), slice={[0:1], [0:4096], [0:8], [64:128]}
  %mul.4483 = bf16[1,4096,8,64]{3,2,1,0} broadcast(%mul.4469), dimensions={0,1,3}
  %mul.4484 = bf16[1,4096,8,64]{3,2,1,0} multiply(%slice.389, %mul.4483)
  %sub.231 = bf16[1,4096,8,64]{3,2,1,0} subtract(%mul.4481, %mul.4484)
  %mul.4487 = bf16[1,4096,8,64]{3,2,1,0} multiply(%slice.389, %mul.4480)
  %mul.4490 = bf16[1,4096,8,64]{3,2,1,0} multiply(%slice.388, %mul.4483)
  %add.1853 = bf16[1,4096,8,64]{3,2,1,0} add(%mul.4487, %mul.4490)
  %concatenate.260 = bf16[1,4096,8,128]{3,2,1,0} concatenate(%sub.231, %add.1853), dimensions={3}
  %sharding_constraint.940 = bf16[1,4096,8,128]{3,2,1,0} copy(%concatenate.260)
  %get-tuple-element.582 = bf16[512,8,128]{2,1,0} get-tuple-element(%remat2.11), index=9
  %all-gather.228 = bf16[4096,8,128]{2,1,0} all-gather(%get-tuple-element.582), channel_id=359, replica_groups=[1,8]<=[8], dimensions={0}, use_global_device_ids=true
  %dot.487 = bf16[1,4096,8,128]{3,2,1,0} dot(%sharding_constraint.937, %all-gather.228), lhs_contracting_dims={2}, rhs_contracting_dims={0}
  %sharding_constraint.941 = bf16[1,4096,8,128]{3,2,1,0} copy(%dot.487)
  %get-tuple-element.583 = s32[1,4096]{1,0} get-tuple-element(%remat2.11), index=11
  %eq.2167 = s32[1,4096,4096]{2,1,0} broadcast(%get-tuple-element.583), dimensions={0,1}
  %eq.2168 = s32[1,4096,4096]{2,1,0} broadcast(%get-tuple-element.583), dimensions={0,2}
  %eq.2169 = pred[1,4096,4096]{2,1,0} compare(%eq.2167, %eq.2168), direction=EQ
  %and.129 = pred[1,4096,4096]{2,1,0} and(%eq.2169, %and.64)
  %select_n.413 = f32[1,4096,4096]{2,1,0} select(%and.129, %broadcast_in_dim.516, %broadcast_in_dim.517)
  %ne.98 = pred[1,4096,4096]{2,1,0} compare(%select_n.413, %broadcast_in_dim.516), direction=NE
  %not.96 = pred[1,4096,4096]{2,1,0} not(%ne.98)
  %convert_element_type.2017 = s32[1,4096,4096]{2,1,0} convert(%not.96)
  %reduce.488 = s32[1,4096]{1,0} reduce(%convert_element_type.2017, %constant.1181), dimensions={1}, to_apply=%region_392.10025
  %reduce_sum.5691 = s32[1,1,1,4096]{3,2,1,0} reshape(%reduce.488)
  %slice.390 = s32[1,1,1,1]{3,2,1,0} slice(%reduce_sum.5691), slice={[0:1], [0:1], [0:1], [0:1]}
  %squeeze.32 = s32[1,1]{1,0} reshape(%slice.390)
  %reshape.10939 = s32[1]{0} reshape(%squeeze.32)
  %lt.97 = pred[1]{0} compare(%reshape.10939, %constant.1418), direction=LT
  %select_n.414 = s32[1]{0} select(%lt.97, %broadcast_in_dim.518, %reshape.10939)
  %concatenate.261 = s32[2]{0} concatenate(%constant.1418, %select_n.414), dimensions={0}
  %reduce.489 = s32[1,4096]{1,0} reduce(%convert_element_type.2017, %constant.1181), dimensions={2}, to_apply=%region_393.10034
  %reduce_sum.5693 = s32[1,1,1,4096]{3,2,1,0} reshape(%reduce.489)
  %reduce.490 = s32[1,1]{1,0} reduce(%reduce_sum.5693, %constant.1415), dimensions={3,2}, to_apply=%region_394.10040
  %reshape.10940 = s32[1]{0} reshape(%reduce.490)
  %lt.98 = pred[1]{0} compare(%reshape.10940, %constant.1418), direction=LT
  %select_n.415 = s32[1]{0} select(%lt.98, %broadcast_in_dim.518, %reshape.10940)
  %concatenate.262 = s32[2]{0} concatenate(%constant.1418, %select_n.415), dimensions={0}
  %te_fused_attn_forward_ffi.128 = (bf16[1,4096,32,128]{3,2,1,0}, f32[1,32,4096,1]{3,2,1,0}, u32[2,4]{1,0}, u8[48]{0}) custom-call(%sharding_constraint.938, %sharding_constraint.940, %sharding_constraint.941, %constant.1403, %dynamic-slice.38, /*index=5*/%concatenate.261, %concatenate.262, %constant.1416, %constant.1416, %constant.1416, /*index=10*/%constant.1416, %constant.1416, %constant.1416), custom_call_target="te_fused_attn_forward_ffi", operand_layout_constraints={bf16[1,4096,32,128]{3,2,1,0}, bf16[1,4096,8,128]{3,2,1,0}, bf16[1,4096,8,128]{3,2,1,0}, bf16[0]{0}, u32[2]{0}, s32[2]{0}, s32[2]{0}, f32[0]{0}, f32[0]{0}, f32[0]{0}, f32[0]{0}, f32[0]{0}, f32[0]{0}}, api_version=API_VERSION_TYPED_FFI, backend_config={attn_heads = 32 : i64, bias_batch = 0 : i64, bias_heads = 0 : i64, bias_type = 0 : i64, deterministic = false, dropout_probability = 0.000000e+00 : f64, input_batch = 1 : i64, is_training = true, kv_max_seqlen = 4096 : i64, mask_type = 3 : i64, max_segments_per_seq = 1 : i64, num_gqa_groups = 8 : i64, q_max_seqlen = 4096 : i64, qk_head_dim = 128 : i64, qkv_layout = 9 : i64, scaling_factor = 1.000000e+00 : f64, v_head_dim = 128 : i64, window_size_left = -1 : i64, window_size_right = -1 : i64}
  %get-tuple-element.584 = bf16[1,4096,32,128]{3,2,1,0} get-tuple-element(%te_fused_attn_forward_ffi.128), index=0
  %sharding_constraint.942 = bf16[1,4096,32,128]{3,2,1,0} copy(%get-tuple-element.584)
  %get-tuple-element.585 = bf16[32,128,512]{2,1,0} get-tuple-element(%remat2.11), index=7
  %all-gather.229 = bf16[32,128,4096]{2,1,0} all-gather(%get-tuple-element.585), channel_id=360, replica_groups=[1,8]<=[8], dimensions={2}, use_global_device_ids=true
  %dot.488 = bf16[1,4096,4096]{2,1,0} dot(%sharding_constraint.942, %all-gather.229), lhs_contracting_dims={2,3}, rhs_contracting_dims={0,1}
  %sharding_constraint.943 = bf16[1,4096,4096]{2,1,0} copy(%dot.488)
  %add.1854 = bf16[1,4096,4096]{2,1,0} add(%sharding_constraint.935, %sharding_constraint.943)
  %convert_element_type.2019 = f32[1,4096,4096]{2,1,0} convert(%add.1854)
  %square.69 = f32[1,4096,4096]{2,1,0} multiply(%convert_element_type.2019, %convert_element_type.2019)
  %reduce.491 = f32[1,4096]{1,0} reduce(%square.69, %constant.1360), dimensions={2}, to_apply=%region_395.10055
  %div.829 = f32[1,4096]{1,0} multiply(%reduce.491, %broadcast.3412)
  %add.1855 = f32[1,4096]{1,0} add(%div.829, %broadcast.3413)
  %add.1856 = f32[1,4096,1]{2,1,0} reshape(%add.1855)
  %rsqrt.130 = f32[1,4096,1]{2,1,0} rsqrt(%add.1856)
  %mul.4491 = f32[1,4096]{1,0} reshape(%rsqrt.130)
  %mul.4492 = f32[1,4096,4096]{2,1,0} broadcast(%mul.4491), dimensions={0,1}
  %mul.4493 = f32[1,4096,4096]{2,1,0} multiply(%convert_element_type.2019, %mul.4492)
  %convert_element_type.2020 = bf16[1,4096,4096]{2,1,0} convert(%mul.4493)
  %get-tuple-element.586 = bf16[4096]{0} get-tuple-element(%remat2.11), index=4
  %mul.4494 = bf16[1,4096,4096]{2,1,0} broadcast(%get-tuple-element.586), dimensions={2}
  %mul.4495 = bf16[1,4096,4096]{2,1,0} multiply(%convert_element_type.2020, %mul.4494)
  %sharding_constraint.944 = bf16[1,4096,4096]{2,1,0} copy(%mul.4495)
  %get-tuple-element.587 = bf16[512,8]{1,0} get-tuple-element(%remat2.11), index=0
  %all-gather.230 = bf16[4096,8]{1,0} all-gather(%get-tuple-element.587), channel_id=361, replica_groups=[1,8]<=[8], dimensions={0}, use_global_device_ids=true
  %dot.489 = bf16[1,4096,8]{2,1,0} dot(%sharding_constraint.944, %all-gather.230), lhs_contracting_dims={2}, rhs_contracting_dims={0}
  %sharding_constraint.945 = bf16[1,4096,8]{2,1,0} copy(%dot.489)
  %top_k.96 = bf16[4096,8]{1,0} reshape(%sharding_constraint.945)
  %top_k.97 = (bf16[4096,2]{1,0}, s32[4096,2]{1,0}) custom-call(%top_k.96), custom_call_target="TopK", called_computations={%compare_greater_than.32.10076.clone}
  %get-tuple-element.588 = bf16[4096,2]{1,0} get-tuple-element(%top_k.97), index=0
  %get-tuple-element.589 = s32[4096,2]{1,0} get-tuple-element(%top_k.97), index=1
  %add.1857 = s32[4096,2]{1,0} add(%get-tuple-element.589, %broadcast.3418)
  %sort.96 = (bf16[4096,2]{1,0}, s32[4096,2]{1,0}) sort(%get-tuple-element.588, %add.1857), dimensions={1}, is_stable=true, to_apply=%compare-value-and-index.32
  %get-tuple-element.591 = s32[4096,2]{1,0} get-tuple-element(%sort.96), index=1
  %slice.392 = s32[4096,2]{1,0} slice(%get-tuple-element.591), slice={[0:4096], [0:2]}
  %top_k.98 = s32[1,4096,2]{2,1,0} reshape(%slice.392)
  %lt.99 = pred[1,4096,2]{2,1,0} compare(%top_k.98, %broadcast.3419), direction=LT
  %add.1858 = s32[1,4096,2]{2,1,0} add(%top_k.98, %broadcast.3420)
  %select_n.416 = s32[1,4096,2]{2,1,0} select(%lt.99, %add.1858, %top_k.98)
  %broadcast_in_dim.617 = s32[1,4096,2,1]{3,2,1,0} reshape(%select_n.416)
  %concatenate.263 = s32[1,4096,2,3]{3,2,1,0} concatenate(%add.1356, %iota.2347, %broadcast_in_dim.617), dimensions={3}
  %subtract.98 = s32[1,4096,2,3]{3,2,1,0} subtract(%concatenate.263, %broadcast.3428)
  %scatter.193 = u32[1,4096,8]{2,1,0} scatter(%dynamic-slice.43, %subtract.98, %add.1401), update_window_dims={}, inserted_window_dims={0,1,2}, scatter_dims_to_operand_dims={0,1,2}, index_vector_dim=3, to_apply=%region_396.10112.clone
  %gather.32 = u32[1,4096,2]{2,1,0} gather(%scatter.193, %subtract.98), offset_dims={}, collapsed_slice_dims={0,1,2}, start_index_map={0,1,2}, index_vector_dim=3, slice_sizes={1,1,1}
  %eq.2170 = pred[1,4096,2]{2,1,0} compare(%add.1401, %gather.32), direction=EQ
  %get-tuple-element.590 = bf16[4096,2]{1,0} get-tuple-element(%sort.96), index=0
  %slice.391 = bf16[4096,2]{1,0} slice(%get-tuple-element.590), slice={[0:4096], [0:2]}
  %convert_element_type.2021 = f32[4096,2]{1,0} convert(%slice.391)
  %convert_element_type.2022 = f32[1,4096,2]{2,1,0} reshape(%convert_element_type.2021)
  %reduce.492 = f32[4096]{0} reduce(%convert_element_type.2021, %constant.1450), dimensions={1}, to_apply=%region_397.10121
  %sub.232 = f32[1,4096]{1,0} reshape(%reduce.492)
  %sub.233 = f32[1,4096,2]{2,1,0} broadcast(%sub.232), dimensions={0,1}
  %sub.234 = f32[1,4096,2]{2,1,0} subtract(%convert_element_type.2022, %sub.233)
  %exp.191 = f32[1,4096,2]{2,1,0} exponential(%sub.234)
  %reduce.493 = f32[1,4096]{1,0} reduce(%exp.191, %constant.1360), dimensions={2}, to_apply=%region_398.10130
  %div.830 = f32[1,4096,2]{2,1,0} broadcast(%reduce.493), dimensions={0,1}
  %div.831 = f32[1,4096,2]{2,1,0} divide(%exp.191, %div.830)
  %convert_element_type.2023 = bf16[1,4096,2]{2,1,0} convert(%div.831)
  %select_n.417 = bf16[1,4096,2]{2,1,0} select(%eq.2170, %convert_element_type.2023, %broadcast.3427)
  %scatter.194 = bf16[1,4096,8]{2,1,0} scatter(%broadcast.3379, %subtract.98, %select_n.417), update_window_dims={}, inserted_window_dims={0,1,2}, scatter_dims_to_operand_dims={0,1,2}, index_vector_dim=3, to_apply=%region_399.10139.clone
  %eq.2175 = s32[1,4096,2,8]{3,2,1,0} broadcast(%top_k.98), dimensions={0,1,2}
  %iota.2358 = s32[1,4096,2,8]{3,2,1,0} iota(), iota_dimension=3
  %eq.2176 = pred[1,4096,2,8]{3,2,1,0} compare(%eq.2175, %iota.2358), direction=EQ
  %convert_element_type.2024 = s32[1,4096,2,8]{3,2,1,0} convert(%eq.2176)
  %reshape.10972 = s32[1,8192,8]{2,1,0} reshape(%convert_element_type.2024)
  %sharding_constraint.946 = s32[1,8192,8]{2,1,0} copy(%reshape.10972)
  %reduce-window.32 = s32[1,8192,8]{2,1,0} reduce-window(%sharding_constraint.946, %constant.1181), window={size=1x8192x1 pad=0_0x8191_0x0_0}, to_apply=%region_400.10151
  %reshape.10974 = s32[1,4096,2,8]{3,2,1,0} reshape(%reduce-window.32)
  %sharding_constraint.947 = s32[1,4096,2,8]{3,2,1,0} copy(%reshape.10974)
  %le.66 = pred[1,4096,2,8]{3,2,1,0} compare(%sharding_constraint.947, %broadcast.3429), direction=LE
  %mul.4496 = s32[1,4096,2,8]{3,2,1,0} select(%le.66, %convert_element_type.2024, %broadcast.3430)
  %reduce.494 = s32[1,4096,8]{2,1,0} reduce(%mul.4496, %constant.1181), dimensions={2}, to_apply=%region_401.10160
  %convert_element_type.2025 = bf16[1,4096,8]{2,1,0} convert(%reduce.494)
  %mul.4497 = bf16[1,4096,8]{2,1,0} multiply(%scatter.194, %convert_element_type.2025)
  %mul.4498 = bf16[1,4096,8,1025]{3,2,1,0} broadcast(%mul.4497), dimensions={0,1,2}
  %mul.4499 = s32[1,8192,8]{2,1,0} multiply(%sharding_constraint.946, %reduce-window.32)
  %reshape.10975 = s32[1,4096,2,8]{3,2,1,0} reshape(%mul.4499)
  %reduce.495 = s32[1,4096,8]{2,1,0} reduce(%reshape.10975, %constant.1181), dimensions={2}, to_apply=%region_402.10170
  %mul.4500 = s32[1,4096,8]{2,1,0} multiply(%reduce.495, %reduce.494)
  %eq.2177 = s32[1,4096,8,1025]{3,2,1,0} broadcast(%mul.4500), dimensions={0,1,2}
  %iota.2360 = s32[1,4096,8,1025]{3,2,1,0} iota(), iota_dimension=3
  %eq.2178 = pred[1,4096,8,1025]{3,2,1,0} compare(%eq.2177, %iota.2360), direction=EQ
  %convert_element_type.2026 = s32[1,4096,8,1025]{3,2,1,0} convert(%eq.2178)
  %convert_element_type.2027 = bf16[1,4096,8,1025]{3,2,1,0} convert(%convert_element_type.2026)
  %mul.4501 = bf16[1,4096,8,1025]{3,2,1,0} multiply(%mul.4498, %convert_element_type.2027)
  %slice.393 = bf16[1,4096,8,1024]{3,2,1,0} slice(%mul.4501), slice={[0:1], [0:4096], [0:8], [1:1025]}
  %convert_element_type.2028 = pred[1,4096,8,1024]{3,2,1,0} compare(%slice.393, %broadcast.3431), direction=NE
  %sharding_constraint.948 = pred[1,4096,8,1024]{3,2,1,0} copy(%convert_element_type.2028)
  %dot_general.68 = bf16[1,4096,8,1024]{3,2,1,0} convert(%sharding_constraint.948)
  %dot.490 = bf16[1,8,1024,4096]{3,2,1,0} dot(%dot_general.68, %sharding_constraint.944), lhs_batch_dims={0}, lhs_contracting_dims={1}, rhs_batch_dims={0}, rhs_contracting_dims={1}
  %reshape.10978 = bf16[1,8,1,1024,4096]{4,3,2,1,0} reshape(%dot.490)
  %all-to-all.64 = bf16[1,8,1,1024,4096]{4,3,2,1,0} all-to-all(%reshape.10978), channel_id=365, replica_groups=[1,8]<=[8], dimensions={1}
  %transpose.101 = bf16[8,1,1,1024,4096]{4,3,2,0,1} transpose(%all-to-all.64), dimensions={1,0,2,3,4}
  %reshape.10979 = bf16[8,1,1024,4096]{3,2,1,0} reshape(%transpose.101)
  %transpose.102 = bf16[1,8,1024,4096]{3,2,0,1} transpose(%reshape.10979), dimensions={1,0,2,3}
  %sharding_constraint.949 = bf16[1,8,1024,4096]{3,2,0,1} copy(%transpose.102)
  %get-tuple-element.594 = bf16[1,4096,14336]{2,1,0} get-tuple-element(%remat2.11), index=1
  %sharding_constraint.950 = bf16[1,4096,14336]{2,1,0} copy(%get-tuple-element.594)
  %dot.491 = bf16[1,8,1024,14336]{3,2,1,0} dot(%sharding_constraint.949, %sharding_constraint.950), lhs_batch_dims={0}, lhs_contracting_dims={3}, rhs_batch_dims={0}, rhs_contracting_dims={1}
  %sharding_constraint.951 = bf16[1,8,1024,14336]{3,2,1,0} copy(%dot.491)
  %neg.190 = bf16[1,8,1024,14336]{3,2,1,0} negate(%sharding_constraint.951)
  %exp.192 = bf16[1,8,1024,14336]{3,2,1,0} exponential(%neg.190)
  %add.1863 = bf16[1,8,1024,14336]{3,2,1,0} add(%exp.192, %jit_silu_.0)
  %div.832 = bf16[1,8,1024,14336]{3,2,1,0} divide(%jit_silu_.0, %add.1863)
  %mul.4502 = bf16[1,8,1024,14336]{3,2,1,0} multiply(%sharding_constraint.951, %div.832)
  %sharding_constraint.952 = bf16[1,4096,4096]{2,1,0} copy(%sharding_constraint.934)
  %sharding_constraint.953 = bf16[1,4096,8,1024]{3,2,1,0} copy(%slice.393)
  %dot.492 = bf16[1,4096,8,1024]{3,2,1,0} dot(%sharding_constraint.952, %sharding_constraint.953), lhs_batch_dims={0}, lhs_contracting_dims={1}, rhs_batch_dims={0}, rhs_contracting_dims={1}
  %reshape.10982 = bf16[1,4096,8,1,1024]{4,3,2,1,0} reshape(%dot.492)
  %all-to-all.65 = bf16[1,4096,8,1,1024]{4,3,2,1,0} all-to-all(%reshape.10982), channel_id=366, replica_groups=[1,8]<=[8], dimensions={2}
  %transpose.103 = bf16[8,1,4096,1,1024]{4,3,0,2,1} transpose(%all-to-all.65), dimensions={2,0,1,3,4}
  %reshape.10983 = bf16[8,4096,1,1024]{3,2,1,0} reshape(%transpose.103)
  %transpose.104 = bf16[1,8,1024,4096]{2,0,3,1} transpose(%reshape.10983), dimensions={2,0,3,1}
  %sharding_constraint.954 = bf16[1,8,1024,4096]{2,0,3,1} copy(%transpose.104)
  %get-tuple-element.595 = bf16[1,14336,4096]{2,1,0} get-tuple-element(%remat2.11), index=3
  %sharding_constraint.955 = bf16[1,14336,4096]{2,1,0} copy(%get-tuple-element.595)
  %dot.493 = bf16[1,8,1024,14336]{3,2,1,0} dot(%sharding_constraint.954, %sharding_constraint.955), lhs_batch_dims={0}, lhs_contracting_dims={3}, rhs_batch_dims={0}, rhs_contracting_dims={2}
  %mul.4503 = bf16[1,8,1024,14336]{3,2,1,0} multiply(%mul.4502, %dot.493)
  %sharding_constraint.956 = bf16[1,8,1024,14336]{3,2,1,0} copy(%mul.4503)
  %get-tuple-element.596 = bf16[1,4096,14336]{2,1,0} get-tuple-element(%remat2.11), index=2
  %sharding_constraint.957 = bf16[1,4096,14336]{2,1,0} copy(%get-tuple-element.596)
  %dot.494 = bf16[1,8,1024,4096]{3,2,1,0} dot(%sharding_constraint.956, %sharding_constraint.957), lhs_batch_dims={0}, lhs_contracting_dims={3}, rhs_batch_dims={0}, rhs_contracting_dims={2}
  %dot.495 = bf16[1,8,1024,14336]{3,2,1,0} dot(%sharding_constraint.949, %sharding_constraint.957), lhs_batch_dims={0}, lhs_contracting_dims={3}, rhs_batch_dims={0}, rhs_contracting_dims={1}
  %sharding_constraint.958 = bf16[1,8,1024,14336]{3,2,1,0} copy(%dot.495)
  %mul.4504 = bf16[1,8,1024,14336]{3,2,1,0} multiply(%dot.493, %sharding_constraint.958)
  %mul.4505 = bf16[1,8,1024,14336]{3,2,1,0} multiply(%mul.4504, %div.832)
  %mul.4506 = bf16[1,8,1024,14336]{3,2,1,0} multiply(%sharding_constraint.951, %mul.4504)
  %sub.235 = bf16[1,8,1024,14336]{3,2,1,0} subtract(%jit_silu_.0, %div.832)
  %mul.4509 = bf16[1,8,1024,14336]{3,2,1,0} multiply(%div.832, %sub.235)
  %mul.4512 = bf16[1,8,1024,14336]{3,2,1,0} multiply(%mul.4506, %mul.4509)
  %add_any.67 = bf16[1,8,1024,14336]{3,2,1,0} add(%mul.4505, %mul.4512)
  %sharding_constraint.959 = bf16[1,8,1024,14336]{3,2,1,0} copy(%add_any.67)
  %dot.496 = bf16[1,8,1024,4096]{3,2,1,0} dot(%sharding_constraint.959, %sharding_constraint.950), lhs_batch_dims={0}, lhs_contracting_dims={3}, rhs_batch_dims={0}, rhs_contracting_dims={2}
  %add_any.68 = bf16[1,8,1024,4096]{3,2,1,0} add(%dot.494, %dot.496)
  %sharding_constraint.960 = bf16[1,8,1024,4096]{3,2,1,0} copy(%add_any.68)
  %transpose.105 = bf16[8,1,1024,4096]{3,2,0,1} transpose(%sharding_constraint.960), dimensions={1,0,2,3}
  %reshape.10986 = bf16[8,1,1,1024,4096]{4,3,2,1,0} reshape(%transpose.105)
  %all-to-all.66 = bf16[8,1,1,1024,4096]{4,3,2,1,0} all-to-all(%reshape.10986), channel_id=367, replica_groups=[1,8]<=[8], dimensions={0}
  %transpose.106 = bf16[1,8,1,1024,4096]{4,3,2,0,1} transpose(%all-to-all.66), dimensions={1,0,2,3,4}
  %reshape.10987 = bf16[1,8,1024,4096]{3,2,1,0} reshape(%transpose.106)
  %dot.497 = bf16[1,4096,4096]{2,1,0} dot(%dot_general.68, %reshape.10987), lhs_batch_dims={0}, lhs_contracting_dims={2,3}, rhs_batch_dims={0}, rhs_contracting_dims={1,2}
  %reshape.10989 = s32[1,4096,2,1]{3,2,1,0} reshape(%slice.392)
  %broadcast.3629 = s32[1,4096,2,3]{3,2,1,0} broadcast(%constant.1181), dimensions={}
  %ge.0 = pred[1,4096,2,3]{3,2,1,0} compare(%concatenate.263, %broadcast.3629), direction=GE
  %constant.5573 = s32[3]{0} constant({7, 4095, 7})
  %le.67 = s32[1,4096,2,3]{3,2,1,0} broadcast(%constant.5573), dimensions={3}
  %le.68 = pred[1,4096,2,3]{3,2,1,0} compare(%concatenate.263, %le.67), direction=LE
  %and.130 = pred[1,4096,2,3]{3,2,1,0} and(%ge.0, %le.68)
  %constant.5574 = pred[] constant(true)
  %reduce.496 = pred[1,4096,2]{2,1,0} reduce(%and.130, %constant.5574), dimensions={3}, to_apply=%region_403.10230
  %mul.4513 = bf16[1,8,1024,14336]{3,2,1,0} multiply(%mul.4502, %sharding_constraint.958)
  %dot.498 = bf16[1,8,1024,4096]{3,2,1,0} dot(%mul.4513, %sharding_constraint.955), lhs_batch_dims={0}, lhs_contracting_dims={3}, rhs_batch_dims={0}, rhs_contracting_dims={1}
  %sharding_constraint.961 = bf16[1,8,1024,4096]{3,2,1,0} copy(%dot.498)
  %reshape.10996 = bf16[1,8,1,1024,4096]{4,3,2,1,0} reshape(%sharding_constraint.961)
  %all-to-all.67 = bf16[1,8,1,1024,4096]{4,3,2,1,0} all-to-all(%reshape.10996), channel_id=368, replica_groups=[1,8]<=[8], dimensions={1}
  %transpose.107 = bf16[8,1,1,1024,4096]{4,3,2,0,1} transpose(%all-to-all.67), dimensions={1,0,2,3,4}
  %reshape.10997 = bf16[8,1,1024,4096]{3,2,1,0} reshape(%transpose.107)
  %dot.499 = bf16[1,4096,8,1024]{3,2,1,0} dot(%sharding_constraint.952, %reshape.10997), lhs_batch_dims={0}, lhs_contracting_dims={2}, rhs_batch_dims={1}, rhs_contracting_dims={3}
  %sharding_constraint.962 = bf16[1,4096,8,1024]{3,2,1,0} copy(%dot.499)
  %pad = bf16[1,4096,8,1025]{3,2,1,0} pad(%sharding_constraint.962, %constant.1190), padding=0_0x0_0x0_0x1_0
  %mul.4514 = bf16[1,4096,8,1025]{3,2,1,0} multiply(%pad, %convert_element_type.2027)
  %reduce.497 = bf16[1,4096,8]{2,1,0} reduce(%mul.4514, %constant.1190), dimensions={3}, to_apply=%region_404.10242
  %mul.4515 = bf16[1,4096,8]{2,1,0} multiply(%reduce.497, %convert_element_type.2025)
  %gather.33 = bf16[1,4096,2]{2,1,0} gather(%mul.4515, %subtract.98), offset_dims={}, collapsed_slice_dims={0,1,2}, start_index_map={0,1,2}, index_vector_dim=3, slice_sizes={1,1,1}
  %select_n.418 = bf16[1,4096,2]{2,1,0} select(%reduce.496, %gather.33, %broadcast.3427)
  %select_n.419 = bf16[1,4096,2]{2,1,0} select(%eq.2170, %select_n.418, %broadcast.3427)
  %convert_element_type.2030 = f32[1,4096,2]{2,1,0} convert(%select_n.419)
  %div.834 = f32[1,4096,2]{2,1,0} divide(%convert_element_type.2030, %div.830)
  %mul.4516 = f32[1,4096]{1,0} multiply(%reduce.493, %reduce.493)
  %div.835 = f32[1,4096]{1,0} divide(%add.1847, %mul.4516)
  %mul.4519 = f32[1,4096,2]{2,1,0} broadcast(%div.835), dimensions={0,1}
  %mul.4520 = f32[1,4096,2]{2,1,0} multiply(%convert_element_type.2030, %mul.4519)
  %mul.4521 = f32[1,4096,2]{2,1,0} multiply(%mul.4520, %exp.191)
  %reduce.498 = f32[1,4096]{1,0} reduce(%mul.4521, %constant.1360), dimensions={2}, to_apply=%region_405.10259
  %neg.191 = f32[1,4096]{1,0} negate(%reduce.498)
  %broadcast_in_dim.618 = f32[1,4096,2]{2,1,0} broadcast(%neg.191), dimensions={0,1}
  %add_any.69 = f32[1,4096,2]{2,1,0} add(%div.834, %broadcast_in_dim.618)
  %mul.4522 = f32[1,4096,2]{2,1,0} multiply(%add_any.69, %exp.191)
  %convert_element_type.2032 = bf16[1,4096,2]{2,1,0} convert(%mul.4522)
  %scatter.195 = bf16[1,4096,8]{2,1,0} scatter(%broadcast.3379, %reshape.10989, %convert_element_type.2032), update_window_dims={}, inserted_window_dims={2}, scatter_dims_to_operand_dims={2}, input_batching_dims={0,1}, scatter_indices_batching_dims={0,1}, index_vector_dim=3, to_apply=%region_406.10269.clone
  %sharding_constraint.963 = bf16[1,4096,8]{2,1,0} copy(%scatter.195)
  %dot.500 = bf16[1,4096,4096]{2,1,0} dot(%sharding_constraint.963, %all-gather.230), lhs_contracting_dims={2}, rhs_contracting_dims={1}
  %add_any.70 = bf16[1,4096,4096]{2,1,0} add(%dot.497, %dot.500)
  %sharding_constraint.964 = bf16[1,4096,4096]{2,1,0} copy(%add_any.70)
  %mul.4524 = bf16[1,4096,4096]{2,1,0} multiply(%sharding_constraint.964, %mul.4494)
  %convert_element_type.2033 = f32[1,4096,4096]{2,1,0} convert(%mul.4524)
  %mul.4528 = f32[1,4096,4096]{2,1,0} multiply(%convert_element_type.2033, %mul.4492)
  %mul.4533 = f32[1,4096,4096]{2,1,0} multiply(%convert_element_type.2019, %convert_element_type.2033)
  %reduce.499 = f32[1,4096]{1,0} reduce(%mul.4533, %constant.1360), dimensions={2}, to_apply=%region_407.10285
  %reshape.11009 = f32[1,4096,1]{2,1,0} reshape(%reduce.499)
  %div.836 = f32[1,4096,1]{2,1,0} divide(%rsqrt.130, %add.1856)
  %mul.4534 = f32[1,4096,1]{2,1,0} multiply(%div.836, %broadcast.3620)
  %mul.4535 = f32[1,4096,1]{2,1,0} multiply(%reshape.11009, %mul.4534)
  %mul.4536 = f32[1,4096,1]{2,1,0} multiply(%mul.4535, %mul.4455)
  %mul.4537 = f32[1,4096]{1,0} reshape(%mul.4536)
  %mul.4538 = f32[1,4096,4096]{2,1,0} broadcast(%mul.4537), dimensions={0,1}
  %mul.4539 = f32[1,4096,4096]{2,1,0} multiply(%convert_element_type.2019, %mul.4538)
  %add_any.71 = f32[1,4096,4096]{2,1,0} add(%mul.4528, %mul.4539)
  %convert_element_type.2034 = bf16[1,4096,4096]{2,1,0} convert(%add_any.71)
  %add_any.72 = bf16[1,4096,4096]{2,1,0} add(%sharding_constraint.934, %convert_element_type.2034)
  %get-tuple-element.597 = f32[1,32,4096,1]{3,2,1,0} get-tuple-element(%te_fused_attn_forward_ffi.128), index=1
  %get-tuple-element.598 = u32[2,4]{1,0} get-tuple-element(%te_fused_attn_forward_ffi.128), index=2
  %sharding_constraint.965 = u32[2,4]{1,0} copy(%get-tuple-element.598)
  %sharding_constraint.966 = bf16[1,4096,4096]{2,1,0} copy(%add_any.72)
  %dot.501 = bf16[1,4096,32,128]{3,2,1,0} dot(%sharding_constraint.966, %all-gather.229), lhs_contracting_dims={2}, rhs_contracting_dims={2}
  %sharding_constraint.967 = bf16[1,4096,32,128]{3,2,1,0} copy(%dot.501)
  %te_fused_attn_backward_ffi.40 = (bf16[1,4096,32,128]{3,2,1,0}, bf16[1,4096,8,128]{3,2,1,0}, bf16[1,4096,8,128]{3,2,1,0}, bf16[0]{0}, u8[134742064]{0}) custom-call(%sharding_constraint.938, %sharding_constraint.940, %sharding_constraint.941, %constant.1403, %get-tuple-element.597, /*index=5*/%sharding_constraint.965, %get-tuple-element.584, %sharding_constraint.967, %concatenate.261, %concatenate.262, /*index=10*/%constant.1416, %constant.1416, %constant.1416, %constant.1416, %constant.1416, /*index=15*/%constant.1416), custom_call_target="te_fused_attn_backward_ffi", operand_layout_constraints={bf16[1,4096,32,128]{3,2,1,0}, bf16[1,4096,8,128]{3,2,1,0}, bf16[1,4096,8,128]{3,2,1,0}, bf16[0]{0}, f32[1,32,4096,1]{3,2,1,0}, u32[2,4]{1,0}, bf16[1,4096,32,128]{3,2,1,0}, bf16[1,4096,32,128]{3,2,1,0}, s32[2]{0}, s32[2]{0}, f32[0]{0}, f32[0]{0}, f32[0]{0}, f32[0]{0}, f32[0]{0}, f32[0]{0}}, api_version=API_VERSION_TYPED_FFI, backend_config={attn_heads = 32 : i64, bias_batch = 0 : i64, bias_heads = 0 : i64, bias_type = 0 : i64, deterministic = false, dropout_probability = 0.000000e+00 : f64, input_batch = 1 : i64, is_training = true, kv_max_seqlen = 4096 : i64, mask_type = 3 : i64, max_segments_per_seq = 1 : i64, num_gqa_groups = 8 : i64, q_max_seqlen = 4096 : i64, qk_head_dim = 128 : i64, qkv_layout = 9 : i64, scaling_factor = 1.000000e+00 : f64, v_head_dim = 128 : i64, window_size_left = -1 : i64, window_size_right = -1 : i64}
  %get-tuple-element.599 = bf16[1,4096,8,128]{3,2,1,0} get-tuple-element(%te_fused_attn_backward_ffi.40), index=2
  %sharding_constraint.968 = bf16[1,4096,8,128]{3,2,1,0} copy(%get-tuple-element.599)
  %dot.502 = bf16[1,4096,4096]{2,1,0} dot(%sharding_constraint.968, %all-gather.228), lhs_contracting_dims={2,3}, rhs_contracting_dims={1,2}
  %get-tuple-element.600 = bf16[1,4096,8,128]{3,2,1,0} get-tuple-element(%te_fused_attn_backward_ffi.40), index=1
  %sharding_constraint.969 = bf16[1,4096,8,128]{3,2,1,0} copy(%get-tuple-element.600)
  %slice.394 = bf16[1,4096,8,64]{3,2,1,0} slice(%sharding_constraint.969), slice={[0:1], [0:4096], [0:8], [64:128]}
  %mul.4542 = bf16[1,4096,8,64]{3,2,1,0} multiply(%slice.394, %mul.4483)
  %slice.395 = bf16[1,4096,8,64]{3,2,1,0} slice(%sharding_constraint.969), slice={[0:1], [0:4096], [0:8], [0:64]}
  %mul.4545 = bf16[1,4096,8,64]{3,2,1,0} multiply(%slice.395, %mul.4480)
  %add_any.73 = bf16[1,4096,8,64]{3,2,1,0} add(%mul.4542, %mul.4545)
  %mul.4549 = bf16[1,4096,8,64]{3,2,1,0} multiply(%slice.394, %mul.4480)
  %neg.192 = bf16[1,4096,8,64]{3,2,1,0} negate(%slice.395)
  %mul.4552 = bf16[1,4096,8,64]{3,2,1,0} multiply(%neg.192, %mul.4483)
  %add_any.74 = bf16[1,4096,8,64]{3,2,1,0} add(%mul.4549, %mul.4552)
  %concatenate.270 = bf16[1,4096,8,128]{3,2,1,0} concatenate(%add_any.73, %add_any.74), dimensions={3}
  %dot.503 = bf16[1,4096,4096]{2,1,0} dot(%concatenate.270, %all-gather.227), lhs_contracting_dims={2,3}, rhs_contracting_dims={1,2}
  %add_any.75 = bf16[1,4096,4096]{2,1,0} add(%dot.502, %dot.503)
  %sharding_constraint.970 = bf16[1,4096,4096]{2,1,0} copy(%add_any.75)
  %get-tuple-element.601 = bf16[1,4096,32,128]{3,2,1,0} get-tuple-element(%te_fused_attn_backward_ffi.40), index=0
  %sharding_constraint.971 = bf16[1,4096,32,128]{3,2,1,0} copy(%get-tuple-element.601)
  %slice.396 = bf16[1,4096,32,64]{3,2,1,0} slice(%sharding_constraint.971), slice={[0:1], [0:4096], [0:32], [64:128]}
  %mul.4555 = bf16[1,4096,32,64]{3,2,1,0} multiply(%slice.396, %mul.4470)
  %slice.397 = bf16[1,4096,32,64]{3,2,1,0} slice(%sharding_constraint.971), slice={[0:1], [0:4096], [0:32], [0:64]}
  %mul.4558 = bf16[1,4096,32,64]{3,2,1,0} multiply(%slice.397, %mul.4467)
  %add_any.76 = bf16[1,4096,32,64]{3,2,1,0} add(%mul.4555, %mul.4558)
  %mul.4561 = bf16[1,4096,32,64]{3,2,1,0} multiply(%slice.396, %mul.4467)
  %neg.193 = bf16[1,4096,32,64]{3,2,1,0} negate(%slice.397)
  %mul.4564 = bf16[1,4096,32,64]{3,2,1,0} multiply(%neg.193, %mul.4470)
  %add_any.77 = bf16[1,4096,32,64]{3,2,1,0} add(%mul.4561, %mul.4564)
  %concatenate.271 = bf16[1,4096,32,128]{3,2,1,0} concatenate(%add_any.76, %add_any.77), dimensions={3}
  %dot.504 = bf16[1,4096,4096]{2,1,0} dot(%concatenate.271, %all-gather.226), lhs_contracting_dims={2,3}, rhs_contracting_dims={1,2}
  %sharding_constraint.972 = bf16[1,4096,4096]{2,1,0} copy(%dot.504)
  %add_any.78 = bf16[1,4096,4096]{2,1,0} add(%sharding_constraint.970, %sharding_constraint.972)
  %sharding_constraint.973 = bf16[1,4096,4096]{2,1,0} copy(%add_any.78)
  %mul.4566 = bf16[1,4096,4096]{2,1,0} multiply(%sharding_constraint.973, %mul.4463)
  %convert_element_type.2035 = f32[1,4096,4096]{2,1,0} convert(%mul.4566)
  %mul.4573 = f32[1,4096,4096]{2,1,0} multiply(%convert_element_type.2035, %mul.4461)
  %mul.4578 = f32[1,4096,4096]{2,1,0} multiply(%convert_element_type.2006, %convert_element_type.2035)
  %reduce.500 = f32[1,4096]{1,0} reduce(%mul.4578, %constant.1360), dimensions={2}, to_apply=%region_408.10364
  %reshape.11016 = f32[1,4096,1]{2,1,0} reshape(%reduce.500)
  %div.837 = f32[1,4096,1]{2,1,0} divide(%rsqrt.129, %add.1851)
  %mul.4579 = f32[1,4096,1]{2,1,0} multiply(%div.837, %broadcast.3620)
  %mul.4580 = f32[1,4096,1]{2,1,0} multiply(%reshape.11016, %mul.4579)
  %mul.4581 = f32[1,4096,1]{2,1,0} multiply(%mul.4580, %mul.4455)
  %mul.4582 = f32[1,4096]{1,0} reshape(%mul.4581)
  %mul.4583 = f32[1,4096,4096]{2,1,0} broadcast(%mul.4582), dimensions={0,1}
  %mul.4584 = f32[1,4096,4096]{2,1,0} multiply(%convert_element_type.2006, %mul.4583)
  %add_any.79 = f32[1,4096,4096]{2,1,0} add(%mul.4573, %mul.4584)
  %convert_element_type.2036 = bf16[1,4096,4096]{2,1,0} convert(%add_any.79)
  %add_any.80 = bf16[1,4096,4096]{2,1,0} add(%add_any.72, %convert_element_type.2036)
  %sharding_constraint.974 = bf16[1,4096,4096]{2,1,0} copy(%add_any.80)
  %tuple.227 = (bf16[512,8]{1,0}, bf16[1,4096,14336]{2,1,0}, bf16[1,4096,14336]{2,1,0}, bf16[1,14336,4096]{2,1,0}, bf16[4096]{0}, /*index=5*/bf16[4096]{0}, bf16[512,8,128]{2,1,0}, bf16[32,128,512]{2,1,0}, bf16[512,32,128]{2,1,0}, bf16[512,8,128]{2,1,0}, /*index=10*/bf16[1,4096,4096]{2,1,0}, s32[1,4096]{1,0}, s32[1,4096]{1,0}, bf16[1,4096,4096]{2,1,0}) tuple(%param.313, %param.314, %param.315, %param.316, %param.312, /*index=5*/%param.307, %param.309, %param.311, %param.308, %param.310, /*index=10*/%sharding_constraint.882, %param.10, %param.7, %sharding_constraint.974)
  %remat2.12 = (bf16[512,8]{1,0}, bf16[1,4096,14336]{2,1,0}, bf16[1,4096,14336]{2,1,0}, bf16[1,14336,4096]{2,1,0}, bf16[4096]{0}, /*index=5*/bf16[4096]{0}, bf16[512,8,128]{2,1,0}, bf16[32,128,512]{2,1,0}, bf16[512,32,128]{2,1,0}, bf16[512,8,128]{2,1,0}, /*index=10*/bf16[1,4096,4096]{2,1,0}, s32[1,4096]{1,0}, s32[1,4096]{1,0}, bf16[1,4096,4096]{2,1,0}) opt-barrier(%tuple.227)
  %get-tuple-element.602 = bf16[1,4096,4096]{2,1,0} get-tuple-element(%remat2.12), index=13
  %sharding_constraint.975 = bf16[1,4096,4096]{2,1,0} copy(%get-tuple-element.602)
  %iota.2369 = s32[1,4096,2,1]{3,2,1,0} iota(), iota_dimension=1
  %get-tuple-element.603 = bf16[1,4096,4096]{2,1,0} get-tuple-element(%remat2.12), index=10
  %sharding_constraint.976 = bf16[1,4096,4096]{2,1,0} copy(%get-tuple-element.603)
  %convert_element_type.2037 = f32[1,4096,4096]{2,1,0} convert(%sharding_constraint.976)
  %square.70 = f32[1,4096,4096]{2,1,0} multiply(%convert_element_type.2037, %convert_element_type.2037)
  %reduce.501 = f32[1,4096]{1,0} reduce(%square.70, %constant.1360), dimensions={2}, to_apply=%region_409.10406
  %div.838 = f32[1,4096]{1,0} multiply(%reduce.501, %broadcast.3412)
  %add.1868 = f32[1,4096]{1,0} add(%div.838, %broadcast.3413)
  %add.1869 = f32[1,4096,1]{2,1,0} reshape(%add.1868)
  %rsqrt.131 = f32[1,4096,1]{2,1,0} rsqrt(%add.1869)
  %mul.4585 = f32[1,4096]{1,0} reshape(%rsqrt.131)
  %mul.4587 = f32[1,4096,4096]{2,1,0} broadcast(%mul.4585), dimensions={0,1}
  %mul.4588 = f32[1,4096,4096]{2,1,0} multiply(%convert_element_type.2037, %mul.4587)
  %convert_element_type.2039 = bf16[1,4096,4096]{2,1,0} convert(%mul.4588)
  %get-tuple-element.604 = bf16[4096]{0} get-tuple-element(%remat2.12), index=5
  %mul.4589 = bf16[1,4096,4096]{2,1,0} broadcast(%get-tuple-element.604), dimensions={2}
  %mul.4590 = bf16[1,4096,4096]{2,1,0} multiply(%convert_element_type.2039, %mul.4589)
  %sharding_constraint.977 = bf16[1,4096,4096]{2,1,0} copy(%mul.4590)
  %sharding_constraint.978 = bf16[1,4096,4096]{2,1,0} copy(%sharding_constraint.977)
  %get-tuple-element.605 = bf16[512,32,128]{2,1,0} get-tuple-element(%remat2.12), index=8
  %all-gather.232 = bf16[4096,32,128]{2,1,0} all-gather(%get-tuple-element.605), channel_id=371, replica_groups=[1,8]<=[8], dimensions={0}, use_global_device_ids=true
  %dot.505 = bf16[1,4096,32,128]{3,2,1,0} dot(%sharding_constraint.978, %all-gather.232), lhs_contracting_dims={2}, rhs_contracting_dims={0}
  %slice.398 = bf16[1,4096,32,64]{3,2,1,0} slice(%dot.505), slice={[0:1], [0:4096], [0:32], [0:64]}
  %get-tuple-element.606 = s32[1,4096]{1,0} get-tuple-element(%remat2.12), index=12
  %convert_element_type.2040 = f32[1,4096]{1,0} convert(%get-tuple-element.606)
  %div.839 = f32[1,4096,1,64]{3,2,1,0} broadcast(%convert_element_type.2040), dimensions={0,1}
  %div.842 = f32[1,4096,1,64]{3,2,1,0} divide(%div.839, %div.402)
  %cos.67 = f32[1,4096,1,64]{3,2,1,0} cosine(%div.842)
  %convert_element_type.2042 = bf16[1,4096,1,64]{3,2,1,0} convert(%cos.67)
  %mul.4592 = bf16[1,4096,64]{2,1,0} reshape(%convert_element_type.2042)
  %mul.4594 = bf16[1,4096,32,64]{3,2,1,0} broadcast(%mul.4592), dimensions={0,1,3}
  %mul.4595 = bf16[1,4096,32,64]{3,2,1,0} multiply(%slice.398, %mul.4594)
  %slice.399 = bf16[1,4096,32,64]{3,2,1,0} slice(%dot.505), slice={[0:1], [0:4096], [0:32], [64:128]}
  %sin.66 = f32[1,4096,1,64]{3,2,1,0} sine(%div.842)
  %convert_element_type.2043 = bf16[1,4096,1,64]{3,2,1,0} convert(%sin.66)
  %mul.4596 = bf16[1,4096,64]{2,1,0} reshape(%convert_element_type.2043)
  %mul.4597 = bf16[1,4096,32,64]{3,2,1,0} broadcast(%mul.4596), dimensions={0,1,3}
  %mul.4598 = bf16[1,4096,32,64]{3,2,1,0} multiply(%slice.399, %mul.4597)
  %sub.236 = bf16[1,4096,32,64]{3,2,1,0} subtract(%mul.4595, %mul.4598)
  %mul.4604 = bf16[1,4096,32,64]{3,2,1,0} multiply(%slice.399, %mul.4594)
  %mul.4623 = bf16[1,4096,32,64]{3,2,1,0} multiply(%slice.398, %mul.4597)
  %add.1870 = bf16[1,4096,32,64]{3,2,1,0} add(%mul.4604, %mul.4623)
  %concatenate.272 = bf16[1,4096,32,128]{3,2,1,0} concatenate(%sub.236, %add.1870), dimensions={3}
  %sharding_constraint.979 = bf16[1,4096,32,128]{3,2,1,0} copy(%concatenate.272)
  %get-tuple-element.607 = bf16[512,8,128]{2,1,0} get-tuple-element(%remat2.12), index=6
  %all-gather.233 = bf16[4096,8,128]{2,1,0} all-gather(%get-tuple-element.607), channel_id=372, replica_groups=[1,8]<=[8], dimensions={0}, use_global_device_ids=true
  %dot.506 = bf16[1,4096,8,128]{3,2,1,0} dot(%sharding_constraint.978, %all-gather.233), lhs_contracting_dims={2}, rhs_contracting_dims={0}
  %slice.400 = bf16[1,4096,8,64]{3,2,1,0} slice(%dot.506), slice={[0:1], [0:4096], [0:8], [0:64]}
  %mul.4627 = bf16[1,4096,8,64]{3,2,1,0} broadcast(%mul.4592), dimensions={0,1,3}
  %mul.4628 = bf16[1,4096,8,64]{3,2,1,0} multiply(%slice.400, %mul.4627)
  %slice.401 = bf16[1,4096,8,64]{3,2,1,0} slice(%dot.506), slice={[0:1], [0:4096], [0:8], [64:128]}
  %mul.4630 = bf16[1,4096,8,64]{3,2,1,0} broadcast(%mul.4596), dimensions={0,1,3}
  %mul.4632 = bf16[1,4096,8,64]{3,2,1,0} multiply(%slice.401, %mul.4630)
  %sub.237 = bf16[1,4096,8,64]{3,2,1,0} subtract(%mul.4628, %mul.4632)
  %mul.4636 = bf16[1,4096,8,64]{3,2,1,0} multiply(%slice.401, %mul.4627)
  %mul.4639 = bf16[1,4096,8,64]{3,2,1,0} multiply(%slice.400, %mul.4630)
  %add.1871 = bf16[1,4096,8,64]{3,2,1,0} add(%mul.4636, %mul.4639)
  %concatenate.273 = bf16[1,4096,8,128]{3,2,1,0} concatenate(%sub.237, %add.1871), dimensions={3}
  %sharding_constraint.981 = bf16[1,4096,8,128]{3,2,1,0} copy(%concatenate.273)
  %get-tuple-element.608 = bf16[512,8,128]{2,1,0} get-tuple-element(%remat2.12), index=9
  %all-gather.234 = bf16[4096,8,128]{2,1,0} all-gather(%get-tuple-element.608), channel_id=373, replica_groups=[1,8]<=[8], dimensions={0}, use_global_device_ids=true
  %dot.507 = bf16[1,4096,8,128]{3,2,1,0} dot(%sharding_constraint.978, %all-gather.234), lhs_contracting_dims={2}, rhs_contracting_dims={0}
  %sharding_constraint.982 = bf16[1,4096,8,128]{3,2,1,0} copy(%dot.507)
  %get-tuple-element.609 = s32[1,4096]{1,0} get-tuple-element(%remat2.12), index=11
  %eq.2180 = s32[1,4096,4096]{2,1,0} broadcast(%get-tuple-element.609), dimensions={0,1}
  %eq.2181 = s32[1,4096,4096]{2,1,0} broadcast(%get-tuple-element.609), dimensions={0,2}
  %eq.2182 = pred[1,4096,4096]{2,1,0} compare(%eq.2180, %eq.2181), direction=EQ
  %and.132 = pred[1,4096,4096]{2,1,0} and(%eq.2182, %and.64)
  %select_n.422 = f32[1,4096,4096]{2,1,0} select(%and.132, %broadcast_in_dim.516, %broadcast_in_dim.517)
  %ne.99 = pred[1,4096,4096]{2,1,0} compare(%select_n.422, %broadcast_in_dim.516), direction=NE
  %not.97 = pred[1,4096,4096]{2,1,0} not(%ne.99)
  %convert_element_type.2048 = s32[1,4096,4096]{2,1,0} convert(%not.97)
  %reduce.502 = s32[1,4096]{1,0} reduce(%convert_element_type.2048, %constant.1181), dimensions={1}, to_apply=%region_410.10502
  %reduce_sum.5694 = s32[1,1,1,4096]{3,2,1,0} reshape(%reduce.502)
  %slice.402 = s32[1,1,1,1]{3,2,1,0} slice(%reduce_sum.5694), slice={[0:1], [0:1], [0:1], [0:1]}
  %squeeze.33 = s32[1,1]{1,0} reshape(%slice.402)
  %reshape.11023 = s32[1]{0} reshape(%squeeze.33)
  %lt.102 = pred[1]{0} compare(%reshape.11023, %constant.1418), direction=LT
  %select_n.423 = s32[1]{0} select(%lt.102, %broadcast_in_dim.518, %reshape.11023)
  %concatenate.274 = s32[2]{0} concatenate(%constant.1418, %select_n.423), dimensions={0}
  %reduce.503 = s32[1,4096]{1,0} reduce(%convert_element_type.2048, %constant.1181), dimensions={2}, to_apply=%region_411.10511
  %reduce_sum.5695 = s32[1,1,1,4096]{3,2,1,0} reshape(%reduce.503)
  %reduce.504 = s32[1,1]{1,0} reduce(%reduce_sum.5695, %constant.1415), dimensions={3,2}, to_apply=%region_412.10517
  %reshape.11024 = s32[1]{0} reshape(%reduce.504)
  %lt.103 = pred[1]{0} compare(%reshape.11024, %constant.1418), direction=LT
  %select_n.424 = s32[1]{0} select(%lt.103, %broadcast_in_dim.518, %reshape.11024)
  %concatenate.275 = s32[2]{0} concatenate(%constant.1418, %select_n.424), dimensions={0}
  %te_fused_attn_forward_ffi.132 = (bf16[1,4096,32,128]{3,2,1,0}, f32[1,32,4096,1]{3,2,1,0}, u32[2,4]{1,0}, u8[48]{0}) custom-call(%sharding_constraint.979, %sharding_constraint.981, %sharding_constraint.982, %constant.1403, %dynamic-slice.38, /*index=5*/%concatenate.274, %concatenate.275, %constant.1416, %constant.1416, %constant.1416, /*index=10*/%constant.1416, %constant.1416, %constant.1416), custom_call_target="te_fused_attn_forward_ffi", operand_layout_constraints={bf16[1,4096,32,128]{3,2,1,0}, bf16[1,4096,8,128]{3,2,1,0}, bf16[1,4096,8,128]{3,2,1,0}, bf16[0]{0}, u32[2]{0}, s32[2]{0}, s32[2]{0}, f32[0]{0}, f32[0]{0}, f32[0]{0}, f32[0]{0}, f32[0]{0}, f32[0]{0}}, api_version=API_VERSION_TYPED_FFI, backend_config={attn_heads = 32 : i64, bias_batch = 0 : i64, bias_heads = 0 : i64, bias_type = 0 : i64, deterministic = false, dropout_probability = 0.000000e+00 : f64, input_batch = 1 : i64, is_training = true, kv_max_seqlen = 4096 : i64, mask_type = 3 : i64, max_segments_per_seq = 1 : i64, num_gqa_groups = 8 : i64, q_max_seqlen = 4096 : i64, qk_head_dim = 128 : i64, qkv_layout = 9 : i64, scaling_factor = 1.000000e+00 : f64, v_head_dim = 128 : i64, window_size_left = -1 : i64, window_size_right = -1 : i64}
  %get-tuple-element.610 = bf16[1,4096,32,128]{3,2,1,0} get-tuple-element(%te_fused_attn_forward_ffi.132), index=0
  %sharding_constraint.983 = bf16[1,4096,32,128]{3,2,1,0} copy(%get-tuple-element.610)
  %get-tuple-element.611 = bf16[32,128,512]{2,1,0} get-tuple-element(%remat2.12), index=7
  %all-gather.235 = bf16[32,128,4096]{2,1,0} all-gather(%get-tuple-element.611), channel_id=374, replica_groups=[1,8]<=[8], dimensions={2}, use_global_device_ids=true
  %dot.508 = bf16[1,4096,4096]{2,1,0} dot(%sharding_constraint.983, %all-gather.235), lhs_contracting_dims={2,3}, rhs_contracting_dims={0,1}
  %sharding_constraint.984 = bf16[1,4096,4096]{2,1,0} copy(%dot.508)
  %add.1872 = bf16[1,4096,4096]{2,1,0} add(%sharding_constraint.976, %sharding_constraint.984)
  %convert_element_type.2050 = f32[1,4096,4096]{2,1,0} convert(%add.1872)
  %square.71 = f32[1,4096,4096]{2,1,0} multiply(%convert_element_type.2050, %convert_element_type.2050)
  %reduce.505 = f32[1,4096]{1,0} reduce(%square.71, %constant.1360), dimensions={2}, to_apply=%region_413.10532
  %div.847 = f32[1,4096]{1,0} multiply(%reduce.505, %broadcast.3412)
  %add.1873 = f32[1,4096]{1,0} add(%div.847, %broadcast.3413)
  %add.1874 = f32[1,4096,1]{2,1,0} reshape(%add.1873)
  %rsqrt.132 = f32[1,4096,1]{2,1,0} rsqrt(%add.1874)
  %mul.4640 = f32[1,4096]{1,0} reshape(%rsqrt.132)
  %mul.4641 = f32[1,4096,4096]{2,1,0} broadcast(%mul.4640), dimensions={0,1}
  %mul.4642 = f32[1,4096,4096]{2,1,0} multiply(%convert_element_type.2050, %mul.4641)
  %convert_element_type.2051 = bf16[1,4096,4096]{2,1,0} convert(%mul.4642)
  %get-tuple-element.612 = bf16[4096]{0} get-tuple-element(%remat2.12), index=4
  %mul.4643 = bf16[1,4096,4096]{2,1,0} broadcast(%get-tuple-element.612), dimensions={2}
  %mul.4644 = bf16[1,4096,4096]{2,1,0} multiply(%convert_element_type.2051, %mul.4643)
  %sharding_constraint.985 = bf16[1,4096,4096]{2,1,0} copy(%mul.4644)
  %get-tuple-element.613 = bf16[512,8]{1,0} get-tuple-element(%remat2.12), index=0
  %all-gather.236 = bf16[4096,8]{1,0} all-gather(%get-tuple-element.613), channel_id=375, replica_groups=[1,8]<=[8], dimensions={0}, use_global_device_ids=true
  %dot.509 = bf16[1,4096,8]{2,1,0} dot(%sharding_constraint.985, %all-gather.236), lhs_contracting_dims={2}, rhs_contracting_dims={0}
  %sharding_constraint.986 = bf16[1,4096,8]{2,1,0} copy(%dot.509)
  %top_k.99 = bf16[4096,8]{1,0} reshape(%sharding_constraint.986)
  %top_k.100 = (bf16[4096,2]{1,0}, s32[4096,2]{1,0}) custom-call(%top_k.99), custom_call_target="TopK", called_computations={%compare_greater_than.33.10553.clone}
  %get-tuple-element.614 = bf16[4096,2]{1,0} get-tuple-element(%top_k.100), index=0
  %get-tuple-element.615 = s32[4096,2]{1,0} get-tuple-element(%top_k.100), index=1
  %add.1875 = s32[4096,2]{1,0} add(%get-tuple-element.615, %broadcast.3418)
  %sort.97 = (bf16[4096,2]{1,0}, s32[4096,2]{1,0}) sort(%get-tuple-element.614, %add.1875), dimensions={1}, is_stable=true, to_apply=%compare-value-and-index.33
  %get-tuple-element.617 = s32[4096,2]{1,0} get-tuple-element(%sort.97), index=1
  %slice.404 = s32[4096,2]{1,0} slice(%get-tuple-element.617), slice={[0:4096], [0:2]}
  %top_k.101 = s32[1,4096,2]{2,1,0} reshape(%slice.404)
  %lt.104 = pred[1,4096,2]{2,1,0} compare(%top_k.101, %broadcast.3419), direction=LT
  %add.1876 = s32[1,4096,2]{2,1,0} add(%top_k.101, %broadcast.3420)
  %select_n.425 = s32[1,4096,2]{2,1,0} select(%lt.104, %add.1876, %top_k.101)
  %broadcast_in_dim.623 = s32[1,4096,2,1]{3,2,1,0} reshape(%select_n.425)
  %concatenate.276 = s32[1,4096,2,3]{3,2,1,0} concatenate(%add.1356, %iota.2369, %broadcast_in_dim.623), dimensions={3}
  %subtract.102 = s32[1,4096,2,3]{3,2,1,0} subtract(%concatenate.276, %broadcast.3428)
  %scatter.196 = u32[1,4096,8]{2,1,0} scatter(%dynamic-slice.43, %subtract.102, %add.1401), update_window_dims={}, inserted_window_dims={0,1,2}, scatter_dims_to_operand_dims={0,1,2}, index_vector_dim=3, to_apply=%region_414.10589.clone
  %gather.34 = u32[1,4096,2]{2,1,0} gather(%scatter.196, %subtract.102), offset_dims={}, collapsed_slice_dims={0,1,2}, start_index_map={0,1,2}, index_vector_dim=3, slice_sizes={1,1,1}
  %eq.2183 = pred[1,4096,2]{2,1,0} compare(%add.1401, %gather.34), direction=EQ
  %get-tuple-element.616 = bf16[4096,2]{1,0} get-tuple-element(%sort.97), index=0
  %slice.403 = bf16[4096,2]{1,0} slice(%get-tuple-element.616), slice={[0:4096], [0:2]}
  %convert_element_type.2052 = f32[4096,2]{1,0} convert(%slice.403)
  %convert_element_type.2053 = f32[1,4096,2]{2,1,0} reshape(%convert_element_type.2052)
  %reduce.506 = f32[4096]{0} reduce(%convert_element_type.2052, %constant.1450), dimensions={1}, to_apply=%region_415.10598
  %sub.238 = f32[1,4096]{1,0} reshape(%reduce.506)
  %sub.239 = f32[1,4096,2]{2,1,0} broadcast(%sub.238), dimensions={0,1}
  %sub.240 = f32[1,4096,2]{2,1,0} subtract(%convert_element_type.2053, %sub.239)
  %exp.193 = f32[1,4096,2]{2,1,0} exponential(%sub.240)
  %reduce.507 = f32[1,4096]{1,0} reduce(%exp.193, %constant.1360), dimensions={2}, to_apply=%region_416.10607
  %div.848 = f32[1,4096,2]{2,1,0} broadcast(%reduce.507), dimensions={0,1}
  %div.849 = f32[1,4096,2]{2,1,0} divide(%exp.193, %div.848)
  %convert_element_type.2054 = bf16[1,4096,2]{2,1,0} convert(%div.849)
  %select_n.426 = bf16[1,4096,2]{2,1,0} select(%eq.2183, %convert_element_type.2054, %broadcast.3427)
  %scatter.197 = bf16[1,4096,8]{2,1,0} scatter(%broadcast.3379, %subtract.102, %select_n.426), update_window_dims={}, inserted_window_dims={0,1,2}, scatter_dims_to_operand_dims={0,1,2}, index_vector_dim=3, to_apply=%region_417.10616.clone
  %eq.2185 = s32[1,4096,2,8]{3,2,1,0} broadcast(%top_k.101), dimensions={0,1,2}
  %iota.2382 = s32[1,4096,2,8]{3,2,1,0} iota(), iota_dimension=3
  %eq.2186 = pred[1,4096,2,8]{3,2,1,0} compare(%eq.2185, %iota.2382), direction=EQ
  %convert_element_type.2055 = s32[1,4096,2,8]{3,2,1,0} convert(%eq.2186)
  %reshape.11069 = s32[1,8192,8]{2,1,0} reshape(%convert_element_type.2055)
  %sharding_constraint.987 = s32[1,8192,8]{2,1,0} copy(%reshape.11069)
  %reduce-window.33 = s32[1,8192,8]{2,1,0} reduce-window(%sharding_constraint.987, %constant.1181), window={size=1x8192x1 pad=0_0x8191_0x0_0}, to_apply=%region_418.10628
  %reshape.11071 = s32[1,4096,2,8]{3,2,1,0} reshape(%reduce-window.33)
  %sharding_constraint.988 = s32[1,4096,2,8]{3,2,1,0} copy(%reshape.11071)
  %le.70 = pred[1,4096,2,8]{3,2,1,0} compare(%sharding_constraint.988, %broadcast.3429), direction=LE
  %mul.4653 = s32[1,4096,2,8]{3,2,1,0} select(%le.70, %convert_element_type.2055, %broadcast.3430)
  %reduce.508 = s32[1,4096,8]{2,1,0} reduce(%mul.4653, %constant.1181), dimensions={2}, to_apply=%region_419.10637
  %convert_element_type.2056 = bf16[1,4096,8]{2,1,0} convert(%reduce.508)
  %mul.4662 = bf16[1,4096,8]{2,1,0} multiply(%scatter.197, %convert_element_type.2056)
  %mul.4663 = bf16[1,4096,8,1025]{3,2,1,0} broadcast(%mul.4662), dimensions={0,1,2}
  %mul.4664 = s32[1,8192,8]{2,1,0} multiply(%sharding_constraint.987, %reduce-window.33)
  %reshape.11072 = s32[1,4096,2,8]{3,2,1,0} reshape(%mul.4664)
  %reduce.509 = s32[1,4096,8]{2,1,0} reduce(%reshape.11072, %constant.1181), dimensions={2}, to_apply=%region_420.10647
  %mul.4665 = s32[1,4096,8]{2,1,0} multiply(%reduce.509, %reduce.508)
  %eq.2187 = s32[1,4096,8,1025]{3,2,1,0} broadcast(%mul.4665), dimensions={0,1,2}
  %iota.2383 = s32[1,4096,8,1025]{3,2,1,0} iota(), iota_dimension=3
  %eq.2188 = pred[1,4096,8,1025]{3,2,1,0} compare(%eq.2187, %iota.2383), direction=EQ
  %convert_element_type.2057 = s32[1,4096,8,1025]{3,2,1,0} convert(%eq.2188)
  %convert_element_type.2059 = bf16[1,4096,8,1025]{3,2,1,0} convert(%convert_element_type.2057)
  %mul.4667 = bf16[1,4096,8,1025]{3,2,1,0} multiply(%mul.4663, %convert_element_type.2059)
  %slice.405 = bf16[1,4096,8,1024]{3,2,1,0} slice(%mul.4667), slice={[0:1], [0:4096], [0:8], [1:1025]}
  %convert_element_type.2060 = pred[1,4096,8,1024]{3,2,1,0} compare(%slice.405, %broadcast.3431), direction=NE
  %sharding_constraint.989 = pred[1,4096,8,1024]{3,2,1,0} copy(%convert_element_type.2060)
  %dot_general.70 = bf16[1,4096,8,1024]{3,2,1,0} convert(%sharding_constraint.989)
  %dot.510 = bf16[1,8,1024,4096]{3,2,1,0} dot(%dot_general.70, %sharding_constraint.985), lhs_batch_dims={0}, lhs_contracting_dims={1}, rhs_batch_dims={0}, rhs_contracting_dims={1}
  %reshape.11075 = bf16[1,8,1,1024,4096]{4,3,2,1,0} reshape(%dot.510)
  %all-to-all.68 = bf16[1,8,1,1024,4096]{4,3,2,1,0} all-to-all(%reshape.11075), channel_id=379, replica_groups=[1,8]<=[8], dimensions={1}
  %transpose.108 = bf16[8,1,1,1024,4096]{4,3,2,0,1} transpose(%all-to-all.68), dimensions={1,0,2,3,4}
  %reshape.11076 = bf16[8,1,1024,4096]{3,2,1,0} reshape(%transpose.108)
  %transpose.109 = bf16[1,8,1024,4096]{3,2,0,1} transpose(%reshape.11076), dimensions={1,0,2,3}
  %sharding_constraint.990 = bf16[1,8,1024,4096]{3,2,0,1} copy(%transpose.109)
  %get-tuple-element.620 = bf16[1,4096,14336]{2,1,0} get-tuple-element(%remat2.12), index=1
  %sharding_constraint.991 = bf16[1,4096,14336]{2,1,0} copy(%get-tuple-element.620)
  %dot.511 = bf16[1,8,1024,14336]{3,2,1,0} dot(%sharding_constraint.990, %sharding_constraint.991), lhs_batch_dims={0}, lhs_contracting_dims={3}, rhs_batch_dims={0}, rhs_contracting_dims={1}
  %sharding_constraint.992 = bf16[1,8,1024,14336]{3,2,1,0} copy(%dot.511)
  %neg.194 = bf16[1,8,1024,14336]{3,2,1,0} negate(%sharding_constraint.992)
  %exp.194 = bf16[1,8,1024,14336]{3,2,1,0} exponential(%neg.194)
  %add.1881 = bf16[1,8,1024,14336]{3,2,1,0} add(%exp.194, %jit_silu_.0)
  %div.850 = bf16[1,8,1024,14336]{3,2,1,0} divide(%jit_silu_.0, %add.1881)
  %mul.4668 = bf16[1,8,1024,14336]{3,2,1,0} multiply(%sharding_constraint.992, %div.850)
  %sharding_constraint.993 = bf16[1,4096,4096]{2,1,0} copy(%sharding_constraint.975)
  %sharding_constraint.994 = bf16[1,4096,8,1024]{3,2,1,0} copy(%slice.405)
  %dot.512 = bf16[1,4096,8,1024]{3,2,1,0} dot(%sharding_constraint.993, %sharding_constraint.994), lhs_batch_dims={0}, lhs_contracting_dims={1}, rhs_batch_dims={0}, rhs_contracting_dims={1}
  %reshape.11079 = bf16[1,4096,8,1,1024]{4,3,2,1,0} reshape(%dot.512)
  %all-to-all.69 = bf16[1,4096,8,1,1024]{4,3,2,1,0} all-to-all(%reshape.11079), channel_id=380, replica_groups=[1,8]<=[8], dimensions={2}
  %transpose.110 = bf16[8,1,4096,1,1024]{4,3,0,2,1} transpose(%all-to-all.69), dimensions={2,0,1,3,4}
  %reshape.11080 = bf16[8,4096,1,1024]{3,2,1,0} reshape(%transpose.110)
  %transpose.111 = bf16[1,8,1024,4096]{2,0,3,1} transpose(%reshape.11080), dimensions={2,0,3,1}
  %sharding_constraint.995 = bf16[1,8,1024,4096]{2,0,3,1} copy(%transpose.111)
  %get-tuple-element.621 = bf16[1,14336,4096]{2,1,0} get-tuple-element(%remat2.12), index=3
  %sharding_constraint.996 = bf16[1,14336,4096]{2,1,0} copy(%get-tuple-element.621)
  %dot.513 = bf16[1,8,1024,14336]{3,2,1,0} dot(%sharding_constraint.995, %sharding_constraint.996), lhs_batch_dims={0}, lhs_contracting_dims={3}, rhs_batch_dims={0}, rhs_contracting_dims={2}
  %mul.4669 = bf16[1,8,1024,14336]{3,2,1,0} multiply(%mul.4668, %dot.513)
  %sharding_constraint.997 = bf16[1,8,1024,14336]{3,2,1,0} copy(%mul.4669)
  %get-tuple-element.622 = bf16[1,4096,14336]{2,1,0} get-tuple-element(%remat2.12), index=2
  %sharding_constraint.998 = bf16[1,4096,14336]{2,1,0} copy(%get-tuple-element.622)
  %dot.514 = bf16[1,8,1024,4096]{3,2,1,0} dot(%sharding_constraint.997, %sharding_constraint.998), lhs_batch_dims={0}, lhs_contracting_dims={3}, rhs_batch_dims={0}, rhs_contracting_dims={2}
  %dot.515 = bf16[1,8,1024,14336]{3,2,1,0} dot(%sharding_constraint.990, %sharding_constraint.998), lhs_batch_dims={0}, lhs_contracting_dims={3}, rhs_batch_dims={0}, rhs_contracting_dims={1}
  %sharding_constraint.999 = bf16[1,8,1024,14336]{3,2,1,0} copy(%dot.515)
  %mul.4670 = bf16[1,8,1024,14336]{3,2,1,0} multiply(%dot.513, %sharding_constraint.999)
  %mul.4671 = bf16[1,8,1024,14336]{3,2,1,0} multiply(%mul.4670, %div.850)
  %mul.4672 = bf16[1,8,1024,14336]{3,2,1,0} multiply(%sharding_constraint.992, %mul.4670)
  %sub.241 = bf16[1,8,1024,14336]{3,2,1,0} subtract(%jit_silu_.0, %div.850)
  %mul.4673 = bf16[1,8,1024,14336]{3,2,1,0} multiply(%div.850, %sub.241)
  %mul.4677 = bf16[1,8,1024,14336]{3,2,1,0} multiply(%mul.4672, %mul.4673)
  %add_any.81 = bf16[1,8,1024,14336]{3,2,1,0} add(%mul.4671, %mul.4677)
  %sharding_constraint.1000 = bf16[1,8,1024,14336]{3,2,1,0} copy(%add_any.81)
  %dot.516 = bf16[1,8,1024,4096]{3,2,1,0} dot(%sharding_constraint.1000, %sharding_constraint.991), lhs_batch_dims={0}, lhs_contracting_dims={3}, rhs_batch_dims={0}, rhs_contracting_dims={2}
  %add_any.82 = bf16[1,8,1024,4096]{3,2,1,0} add(%dot.514, %dot.516)
  %sharding_constraint.1001 = bf16[1,8,1024,4096]{3,2,1,0} copy(%add_any.82)
  %transpose.112 = bf16[8,1,1024,4096]{3,2,0,1} transpose(%sharding_constraint.1001), dimensions={1,0,2,3}
  %reshape.11083 = bf16[8,1,1,1024,4096]{4,3,2,1,0} reshape(%transpose.112)
  %all-to-all.70 = bf16[8,1,1,1024,4096]{4,3,2,1,0} all-to-all(%reshape.11083), channel_id=381, replica_groups=[1,8]<=[8], dimensions={0}
  %transpose.113 = bf16[1,8,1,1024,4096]{4,3,2,0,1} transpose(%all-to-all.70), dimensions={1,0,2,3,4}
  %reshape.11085 = bf16[1,8,1024,4096]{3,2,1,0} reshape(%transpose.113)
  %dot.517 = bf16[1,4096,4096]{2,1,0} dot(%dot_general.70, %reshape.11085), lhs_batch_dims={0}, lhs_contracting_dims={2,3}, rhs_batch_dims={0}, rhs_contracting_dims={1,2}
  %reshape.11087 = s32[1,4096,2,1]{3,2,1,0} reshape(%slice.404)
  %ge.1 = pred[1,4096,2,3]{3,2,1,0} compare(%concatenate.276, %broadcast.3629), direction=GE
  %le.72 = pred[1,4096,2,3]{3,2,1,0} compare(%concatenate.276, %le.67), direction=LE
  %and.133 = pred[1,4096,2,3]{3,2,1,0} and(%ge.1, %le.72)
  %reduce.510 = pred[1,4096,2]{2,1,0} reduce(%and.133, %constant.5574), dimensions={3}, to_apply=%region_421.10704
  %mul.4678 = bf16[1,8,1024,14336]{3,2,1,0} multiply(%mul.4668, %sharding_constraint.999)
  %dot.518 = bf16[1,8,1024,4096]{3,2,1,0} dot(%mul.4678, %sharding_constraint.996), lhs_batch_dims={0}, lhs_contracting_dims={3}, rhs_batch_dims={0}, rhs_contracting_dims={1}
  %sharding_constraint.1002 = bf16[1,8,1024,4096]{3,2,1,0} copy(%dot.518)
  %reshape.11094 = bf16[1,8,1,1024,4096]{4,3,2,1,0} reshape(%sharding_constraint.1002)
  %all-to-all.71 = bf16[1,8,1,1024,4096]{4,3,2,1,0} all-to-all(%reshape.11094), channel_id=382, replica_groups=[1,8]<=[8], dimensions={1}
  %transpose.114 = bf16[8,1,1,1024,4096]{4,3,2,0,1} transpose(%all-to-all.71), dimensions={1,0,2,3,4}
  %reshape.11095 = bf16[8,1,1024,4096]{3,2,1,0} reshape(%transpose.114)
  %dot.519 = bf16[1,4096,8,1024]{3,2,1,0} dot(%sharding_constraint.993, %reshape.11095), lhs_batch_dims={0}, lhs_contracting_dims={2}, rhs_batch_dims={1}, rhs_contracting_dims={3}
  %sharding_constraint.1003 = bf16[1,4096,8,1024]{3,2,1,0} copy(%dot.519)
  %pad.1 = bf16[1,4096,8,1025]{3,2,1,0} pad(%sharding_constraint.1003, %constant.1190), padding=0_0x0_0x0_0x1_0
  %mul.4679 = bf16[1,4096,8,1025]{3,2,1,0} multiply(%pad.1, %convert_element_type.2059)
  %reduce.511 = bf16[1,4096,8]{2,1,0} reduce(%mul.4679, %constant.1190), dimensions={3}, to_apply=%region_422.10716
  %mul.4683 = bf16[1,4096,8]{2,1,0} multiply(%reduce.511, %convert_element_type.2056)
  %gather.35 = bf16[1,4096,2]{2,1,0} gather(%mul.4683, %subtract.102), offset_dims={}, collapsed_slice_dims={0,1,2}, start_index_map={0,1,2}, index_vector_dim=3, slice_sizes={1,1,1}
  %select_n.427 = bf16[1,4096,2]{2,1,0} select(%reduce.510, %gather.35, %broadcast.3427)
  %select_n.428 = bf16[1,4096,2]{2,1,0} select(%eq.2183, %select_n.427, %broadcast.3427)
  %convert_element_type.2061 = f32[1,4096,2]{2,1,0} convert(%select_n.428)
  %div.852 = f32[1,4096,2]{2,1,0} divide(%convert_element_type.2061, %div.848)
  %mul.4690 = f32[1,4096]{1,0} multiply(%reduce.507, %reduce.507)
  %div.853 = f32[1,4096]{1,0} divide(%add.1847, %mul.4690)
  %mul.4691 = f32[1,4096,2]{2,1,0} broadcast(%div.853), dimensions={0,1}
  %mul.4692 = f32[1,4096,2]{2,1,0} multiply(%convert_element_type.2061, %mul.4691)
  %mul.4693 = f32[1,4096,2]{2,1,0} multiply(%mul.4692, %exp.193)
  %reduce.512 = f32[1,4096]{1,0} reduce(%mul.4693, %constant.1360), dimensions={2}, to_apply=%region_423.10733
  %neg.195 = f32[1,4096]{1,0} negate(%reduce.512)
  %broadcast_in_dim.624 = f32[1,4096,2]{2,1,0} broadcast(%neg.195), dimensions={0,1}
  %add_any.83 = f32[1,4096,2]{2,1,0} add(%div.852, %broadcast_in_dim.624)
  %mul.4694 = f32[1,4096,2]{2,1,0} multiply(%add_any.83, %exp.193)
  %convert_element_type.2062 = bf16[1,4096,2]{2,1,0} convert(%mul.4694)
  %scatter.198 = bf16[1,4096,8]{2,1,0} scatter(%broadcast.3379, %reshape.11087, %convert_element_type.2062), update_window_dims={}, inserted_window_dims={2}, scatter_dims_to_operand_dims={2}, input_batching_dims={0,1}, scatter_indices_batching_dims={0,1}, index_vector_dim=3, to_apply=%region_424.10743.clone
  %sharding_constraint.1004 = bf16[1,4096,8]{2,1,0} copy(%scatter.198)
  %dot.520 = bf16[1,4096,4096]{2,1,0} dot(%sharding_constraint.1004, %all-gather.236), lhs_contracting_dims={2}, rhs_contracting_dims={1}
  %add_any.84 = bf16[1,4096,4096]{2,1,0} add(%dot.517, %dot.520)
  %sharding_constraint.1005 = bf16[1,4096,4096]{2,1,0} copy(%add_any.84)
  %mul.4696 = bf16[1,4096,4096]{2,1,0} multiply(%sharding_constraint.1005, %mul.4643)
  %convert_element_type.2063 = f32[1,4096,4096]{2,1,0} convert(%mul.4696)
  %mul.4700 = f32[1,4096,4096]{2,1,0} multiply(%convert_element_type.2063, %mul.4641)
  %mul.4701 = f32[1,4096,4096]{2,1,0} multiply(%convert_element_type.2050, %convert_element_type.2063)
  %reduce.513 = f32[1,4096]{1,0} reduce(%mul.4701, %constant.1360), dimensions={2}, to_apply=%region_425.10759
  %reshape.11109 = f32[1,4096,1]{2,1,0} reshape(%reduce.513)
  %div.854 = f32[1,4096,1]{2,1,0} divide(%rsqrt.132, %add.1874)
  %mul.4702 = f32[1,4096,1]{2,1,0} multiply(%div.854, %broadcast.3620)
  %mul.4703 = f32[1,4096,1]{2,1,0} multiply(%reshape.11109, %mul.4702)
  %mul.4704 = f32[1,4096,1]{2,1,0} multiply(%mul.4703, %mul.4455)
  %mul.4705 = f32[1,4096]{1,0} reshape(%mul.4704)
  %mul.4706 = f32[1,4096,4096]{2,1,0} broadcast(%mul.4705), dimensions={0,1}
  %mul.4710 = f32[1,4096,4096]{2,1,0} multiply(%convert_element_type.2050, %mul.4706)
  %add_any.85 = f32[1,4096,4096]{2,1,0} add(%mul.4700, %mul.4710)
  %convert_element_type.2064 = bf16[1,4096,4096]{2,1,0} convert(%add_any.85)
  %add_any.86 = bf16[1,4096,4096]{2,1,0} add(%sharding_constraint.975, %convert_element_type.2064)
  %get-tuple-element.623 = f32[1,32,4096,1]{3,2,1,0} get-tuple-element(%te_fused_attn_forward_ffi.132), index=1
  %get-tuple-element.624 = u32[2,4]{1,0} get-tuple-element(%te_fused_attn_forward_ffi.132), index=2
  %sharding_constraint.1006 = u32[2,4]{1,0} copy(%get-tuple-element.624)
  %sharding_constraint.1007 = bf16[1,4096,4096]{2,1,0} copy(%add_any.86)
  %dot.521 = bf16[1,4096,32,128]{3,2,1,0} dot(%sharding_constraint.1007, %all-gather.235), lhs_contracting_dims={2}, rhs_contracting_dims={2}
  %sharding_constraint.1008 = bf16[1,4096,32,128]{3,2,1,0} copy(%dot.521)
  %te_fused_attn_backward_ffi.0 = (bf16[1,4096,32,128]{3,2,1,0}, bf16[1,4096,8,128]{3,2,1,0}, bf16[1,4096,8,128]{3,2,1,0}, bf16[0]{0}, u8[134742064]{0}) custom-call(%sharding_constraint.979, %sharding_constraint.981, %sharding_constraint.982, %constant.1403, %get-tuple-element.623, /*index=5*/%sharding_constraint.1006, %get-tuple-element.610, %sharding_constraint.1008, %concatenate.274, %concatenate.275, /*index=10*/%constant.1416, %constant.1416, %constant.1416, %constant.1416, %constant.1416, /*index=15*/%constant.1416), custom_call_target="te_fused_attn_backward_ffi", operand_layout_constraints={bf16[1,4096,32,128]{3,2,1,0}, bf16[1,4096,8,128]{3,2,1,0}, bf16[1,4096,8,128]{3,2,1,0}, bf16[0]{0}, f32[1,32,4096,1]{3,2,1,0}, u32[2,4]{1,0}, bf16[1,4096,32,128]{3,2,1,0}, bf16[1,4096,32,128]{3,2,1,0}, s32[2]{0}, s32[2]{0}, f32[0]{0}, f32[0]{0}, f32[0]{0}, f32[0]{0}, f32[0]{0}, f32[0]{0}}, api_version=API_VERSION_TYPED_FFI, backend_config={attn_heads = 32 : i64, bias_batch = 0 : i64, bias_heads = 0 : i64, bias_type = 0 : i64, deterministic = false, dropout_probability = 0.000000e+00 : f64, input_batch = 1 : i64, is_training = true, kv_max_seqlen = 4096 : i64, mask_type = 3 : i64, max_segments_per_seq = 1 : i64, num_gqa_groups = 8 : i64, q_max_seqlen = 4096 : i64, qk_head_dim = 128 : i64, qkv_layout = 9 : i64, scaling_factor = 1.000000e+00 : f64, v_head_dim = 128 : i64, window_size_left = -1 : i64, window_size_right = -1 : i64}
  %get-tuple-element.625 = bf16[1,4096,8,128]{3,2,1,0} get-tuple-element(%te_fused_attn_backward_ffi.0), index=2
  %sharding_constraint.1009 = bf16[1,4096,8,128]{3,2,1,0} copy(%get-tuple-element.625)
  %dot.522 = bf16[1,4096,4096]{2,1,0} dot(%sharding_constraint.1009, %all-gather.234), lhs_contracting_dims={2,3}, rhs_contracting_dims={1,2}
  %get-tuple-element.626 = bf16[1,4096,8,128]{3,2,1,0} get-tuple-element(%te_fused_attn_backward_ffi.0), index=1
  %sharding_constraint.1010 = bf16[1,4096,8,128]{3,2,1,0} copy(%get-tuple-element.626)
  %slice.406 = bf16[1,4096,8,64]{3,2,1,0} slice(%sharding_constraint.1010), slice={[0:1], [0:4096], [0:8], [64:128]}
  %mul.4716 = bf16[1,4096,8,64]{3,2,1,0} multiply(%slice.406, %mul.4630)
  %slice.407 = bf16[1,4096,8,64]{3,2,1,0} slice(%sharding_constraint.1010), slice={[0:1], [0:4096], [0:8], [0:64]}
  %mul.4725 = bf16[1,4096,8,64]{3,2,1,0} multiply(%slice.407, %mul.4627)
  %add_any.87 = bf16[1,4096,8,64]{3,2,1,0} add(%mul.4716, %mul.4725)
  %mul.4732 = bf16[1,4096,8,64]{3,2,1,0} multiply(%slice.406, %mul.4627)
  %neg.196 = bf16[1,4096,8,64]{3,2,1,0} negate(%slice.407)
  %mul.4739 = bf16[1,4096,8,64]{3,2,1,0} multiply(%neg.196, %mul.4630)
  %add_any.88 = bf16[1,4096,8,64]{3,2,1,0} add(%mul.4732, %mul.4739)
  %concatenate.283 = bf16[1,4096,8,128]{3,2,1,0} concatenate(%add_any.87, %add_any.88), dimensions={3}
  %dot.523 = bf16[1,4096,4096]{2,1,0} dot(%concatenate.283, %all-gather.233), lhs_contracting_dims={2,3}, rhs_contracting_dims={1,2}
  %add_any.89 = bf16[1,4096,4096]{2,1,0} add(%dot.522, %dot.523)
  %sharding_constraint.1011 = bf16[1,4096,4096]{2,1,0} copy(%add_any.89)
  %get-tuple-element.627 = bf16[1,4096,32,128]{3,2,1,0} get-tuple-element(%te_fused_attn_backward_ffi.0), index=0
  %sharding_constraint.1012 = bf16[1,4096,32,128]{3,2,1,0} copy(%get-tuple-element.627)
  %slice.408 = bf16[1,4096,32,64]{3,2,1,0} slice(%sharding_constraint.1012), slice={[0:1], [0:4096], [0:32], [64:128]}
  %mul.4742 = bf16[1,4096,32,64]{3,2,1,0} multiply(%slice.408, %mul.4597)
  %slice.409 = bf16[1,4096,32,64]{3,2,1,0} slice(%sharding_constraint.1012), slice={[0:1], [0:4096], [0:32], [0:64]}
  %mul.4745 = bf16[1,4096,32,64]{3,2,1,0} multiply(%slice.409, %mul.4594)
  %add_any.90 = bf16[1,4096,32,64]{3,2,1,0} add(%mul.4742, %mul.4745)
  %mul.4748 = bf16[1,4096,32,64]{3,2,1,0} multiply(%slice.408, %mul.4594)
  %neg.197 = bf16[1,4096,32,64]{3,2,1,0} negate(%slice.409)
  %mul.4751 = bf16[1,4096,32,64]{3,2,1,0} multiply(%neg.197, %mul.4597)
  %add_any.91 = bf16[1,4096,32,64]{3,2,1,0} add(%mul.4748, %mul.4751)
  %concatenate.284 = bf16[1,4096,32,128]{3,2,1,0} concatenate(%add_any.90, %add_any.91), dimensions={3}
  %dot.524 = bf16[1,4096,4096]{2,1,0} dot(%concatenate.284, %all-gather.232), lhs_contracting_dims={2,3}, rhs_contracting_dims={1,2}
  %sharding_constraint.1013 = bf16[1,4096,4096]{2,1,0} copy(%dot.524)
  %add_any.92 = bf16[1,4096,4096]{2,1,0} add(%sharding_constraint.1011, %sharding_constraint.1013)
  %sharding_constraint.1014 = bf16[1,4096,4096]{2,1,0} copy(%add_any.92)
  %mul.4753 = bf16[1,4096,4096]{2,1,0} multiply(%sharding_constraint.1014, %mul.4589)
  %convert_element_type.2065 = f32[1,4096,4096]{2,1,0} convert(%mul.4753)
  %mul.4756 = f32[1,4096,4096]{2,1,0} multiply(%convert_element_type.2065, %mul.4587)
  %mul.4757 = f32[1,4096,4096]{2,1,0} multiply(%convert_element_type.2037, %convert_element_type.2065)
  %reduce.514 = f32[1,4096]{1,0} reduce(%mul.4757, %constant.1360), dimensions={2}, to_apply=%region_426.10838
  %reshape.11116 = f32[1,4096,1]{2,1,0} reshape(%reduce.514)
  %div.855 = f32[1,4096,1]{2,1,0} divide(%rsqrt.131, %add.1869)
  %mul.4758 = f32[1,4096,1]{2,1,0} multiply(%div.855, %broadcast.3620)
  %mul.4759 = f32[1,4096,1]{2,1,0} multiply(%reshape.11116, %mul.4758)
  %mul.4760 = f32[1,4096,1]{2,1,0} multiply(%mul.4759, %mul.4455)
  %mul.4761 = f32[1,4096]{1,0} reshape(%mul.4760)
  %mul.4762 = f32[1,4096,4096]{2,1,0} broadcast(%mul.4761), dimensions={0,1}
  %mul.4763 = f32[1,4096,4096]{2,1,0} multiply(%convert_element_type.2037, %mul.4762)
  %add_any.93 = f32[1,4096,4096]{2,1,0} add(%mul.4756, %mul.4763)
  %convert_element_type.2066 = bf16[1,4096,4096]{2,1,0} convert(%add_any.93)
  %add_any.94 = bf16[1,4096,4096]{2,1,0} add(%add_any.86, %convert_element_type.2066)
  %sharding_constraint.1015 = bf16[1,4096,4096]{2,1,0} copy(%add_any.94)
  %tuple.231 = (bf16[512,8]{1,0}, bf16[1,4096,14336]{2,1,0}, bf16[1,4096,14336]{2,1,0}, bf16[1,14336,4096]{2,1,0}, bf16[4096]{0}, /*index=5*/bf16[4096]{0}, bf16[512,8,128]{2,1,0}, bf16[32,128,512]{2,1,0}, bf16[512,32,128]{2,1,0}, bf16[512,8,128]{2,1,0}, /*index=10*/bf16[1,4096,4096]{2,1,0}, s32[1,4096]{1,0}, s32[1,4096]{1,0}, bf16[1,4096,4096]{2,1,0}) tuple(%param.303, %param.304, %param.305, %param.306, %param.302, /*index=5*/%param.297, %param.299, %param.301, %param.298, %param.300, /*index=10*/%sharding_constraint.858, %param.10, %param.7, %sharding_constraint.1015)
  %remat2.13 = (bf16[512,8]{1,0}, bf16[1,4096,14336]{2,1,0}, bf16[1,4096,14336]{2,1,0}, bf16[1,14336,4096]{2,1,0}, bf16[4096]{0}, /*index=5*/bf16[4096]{0}, bf16[512,8,128]{2,1,0}, bf16[32,128,512]{2,1,0}, bf16[512,32,128]{2,1,0}, bf16[512,8,128]{2,1,0}, /*index=10*/bf16[1,4096,4096]{2,1,0}, s32[1,4096]{1,0}, s32[1,4096]{1,0}, bf16[1,4096,4096]{2,1,0}) opt-barrier(%tuple.231)
  %get-tuple-element.628 = bf16[1,4096,4096]{2,1,0} get-tuple-element(%remat2.13), index=13
  %sharding_constraint.1016 = bf16[1,4096,4096]{2,1,0} copy(%get-tuple-element.628)
  %iota.2388 = s32[1,4096,2,1]{3,2,1,0} iota(), iota_dimension=1
  %get-tuple-element.629 = bf16[1,4096,4096]{2,1,0} get-tuple-element(%remat2.13), index=10
  %sharding_constraint.1017 = bf16[1,4096,4096]{2,1,0} copy(%get-tuple-element.629)
  %convert_element_type.2067 = f32[1,4096,4096]{2,1,0} convert(%sharding_constraint.1017)
  %square.72 = f32[1,4096,4096]{2,1,0} multiply(%convert_element_type.2067, %convert_element_type.2067)
  %reduce.515 = f32[1,4096]{1,0} reduce(%square.72, %constant.1360), dimensions={2}, to_apply=%region_427.10880
  %div.856 = f32[1,4096]{1,0} multiply(%reduce.515, %broadcast.3412)
  %add.1885 = f32[1,4096]{1,0} add(%div.856, %broadcast.3413)
  %add.1887 = f32[1,4096,1]{2,1,0} reshape(%add.1885)
  %rsqrt.133 = f32[1,4096,1]{2,1,0} rsqrt(%add.1887)
  %mul.4764 = f32[1,4096]{1,0} reshape(%rsqrt.133)
  %mul.4765 = f32[1,4096,4096]{2,1,0} broadcast(%mul.4764), dimensions={0,1}
  %mul.4766 = f32[1,4096,4096]{2,1,0} multiply(%convert_element_type.2067, %mul.4765)
  %convert_element_type.2068 = bf16[1,4096,4096]{2,1,0} convert(%mul.4766)
  %get-tuple-element.630 = bf16[4096]{0} get-tuple-element(%remat2.13), index=5
  %mul.4767 = bf16[1,4096,4096]{2,1,0} broadcast(%get-tuple-element.630), dimensions={2}
  %mul.4768 = bf16[1,4096,4096]{2,1,0} multiply(%convert_element_type.2068, %mul.4767)
  %sharding_constraint.1018 = bf16[1,4096,4096]{2,1,0} copy(%mul.4768)
  %sharding_constraint.1019 = bf16[1,4096,4096]{2,1,0} copy(%sharding_constraint.1018)
  %get-tuple-element.631 = bf16[512,32,128]{2,1,0} get-tuple-element(%remat2.13), index=8
  %all-gather.238 = bf16[4096,32,128]{2,1,0} all-gather(%get-tuple-element.631), channel_id=385, replica_groups=[1,8]<=[8], dimensions={0}, use_global_device_ids=true
  %dot.525 = bf16[1,4096,32,128]{3,2,1,0} dot(%sharding_constraint.1019, %all-gather.238), lhs_contracting_dims={2}, rhs_contracting_dims={0}
  %slice.410 = bf16[1,4096,32,64]{3,2,1,0} slice(%dot.525), slice={[0:1], [0:4096], [0:32], [0:64]}
  %get-tuple-element.632 = s32[1,4096]{1,0} get-tuple-element(%remat2.13), index=12
  %convert_element_type.2069 = f32[1,4096]{1,0} convert(%get-tuple-element.632)
  %div.857 = f32[1,4096,1,64]{3,2,1,0} broadcast(%convert_element_type.2069), dimensions={0,1}
  %div.860 = f32[1,4096,1,64]{3,2,1,0} divide(%div.857, %div.402)
  %cos.69 = f32[1,4096,1,64]{3,2,1,0} cosine(%div.860)
  %convert_element_type.2072 = bf16[1,4096,1,64]{3,2,1,0} convert(%cos.69)
  %mul.4770 = bf16[1,4096,64]{2,1,0} reshape(%convert_element_type.2072)
  %mul.4771 = bf16[1,4096,32,64]{3,2,1,0} broadcast(%mul.4770), dimensions={0,1,3}
  %mul.4772 = bf16[1,4096,32,64]{3,2,1,0} multiply(%slice.410, %mul.4771)
  %slice.411 = bf16[1,4096,32,64]{3,2,1,0} slice(%dot.525), slice={[0:1], [0:4096], [0:32], [64:128]}
  %sin.68 = f32[1,4096,1,64]{3,2,1,0} sine(%div.860)
  %convert_element_type.2073 = bf16[1,4096,1,64]{3,2,1,0} convert(%sin.68)
  %mul.4773 = bf16[1,4096,64]{2,1,0} reshape(%convert_element_type.2073)
  %mul.4774 = bf16[1,4096,32,64]{3,2,1,0} broadcast(%mul.4773), dimensions={0,1,3}
  %mul.4775 = bf16[1,4096,32,64]{3,2,1,0} multiply(%slice.411, %mul.4774)
  %sub.242 = bf16[1,4096,32,64]{3,2,1,0} subtract(%mul.4772, %mul.4775)
  %mul.4780 = bf16[1,4096,32,64]{3,2,1,0} multiply(%slice.411, %mul.4771)
  %mul.4785 = bf16[1,4096,32,64]{3,2,1,0} multiply(%slice.410, %mul.4774)
  %add.1888 = bf16[1,4096,32,64]{3,2,1,0} add(%mul.4780, %mul.4785)
  %concatenate.285 = bf16[1,4096,32,128]{3,2,1,0} concatenate(%sub.242, %add.1888), dimensions={3}
  %sharding_constraint.1020 = bf16[1,4096,32,128]{3,2,1,0} copy(%concatenate.285)
  %get-tuple-element.633 = bf16[512,8,128]{2,1,0} get-tuple-element(%remat2.13), index=6
  %all-gather.239 = bf16[4096,8,128]{2,1,0} all-gather(%get-tuple-element.633), channel_id=386, replica_groups=[1,8]<=[8], dimensions={0}, use_global_device_ids=true
  %dot.526 = bf16[1,4096,8,128]{3,2,1,0} dot(%sharding_constraint.1019, %all-gather.239), lhs_contracting_dims={2}, rhs_contracting_dims={0}
  %slice.412 = bf16[1,4096,8,64]{3,2,1,0} slice(%dot.526), slice={[0:1], [0:4096], [0:8], [0:64]}
  %mul.4788 = bf16[1,4096,8,64]{3,2,1,0} broadcast(%mul.4770), dimensions={0,1,3}
  %mul.4789 = bf16[1,4096,8,64]{3,2,1,0} multiply(%slice.412, %mul.4788)
  %slice.413 = bf16[1,4096,8,64]{3,2,1,0} slice(%dot.526), slice={[0:1], [0:4096], [0:8], [64:128]}
  %mul.4791 = bf16[1,4096,8,64]{3,2,1,0} broadcast(%mul.4773), dimensions={0,1,3}
  %mul.4792 = bf16[1,4096,8,64]{3,2,1,0} multiply(%slice.413, %mul.4791)
  %sub.243 = bf16[1,4096,8,64]{3,2,1,0} subtract(%mul.4789, %mul.4792)
  %mul.4795 = bf16[1,4096,8,64]{3,2,1,0} multiply(%slice.413, %mul.4788)
  %mul.4798 = bf16[1,4096,8,64]{3,2,1,0} multiply(%slice.412, %mul.4791)
  %add.1889 = bf16[1,4096,8,64]{3,2,1,0} add(%mul.4795, %mul.4798)
  %concatenate.286 = bf16[1,4096,8,128]{3,2,1,0} concatenate(%sub.243, %add.1889), dimensions={3}
  %sharding_constraint.1022 = bf16[1,4096,8,128]{3,2,1,0} copy(%concatenate.286)
  %get-tuple-element.634 = bf16[512,8,128]{2,1,0} get-tuple-element(%remat2.13), index=9
  %all-gather.240 = bf16[4096,8,128]{2,1,0} all-gather(%get-tuple-element.634), channel_id=387, replica_groups=[1,8]<=[8], dimensions={0}, use_global_device_ids=true
  %dot.527 = bf16[1,4096,8,128]{3,2,1,0} dot(%sharding_constraint.1019, %all-gather.240), lhs_contracting_dims={2}, rhs_contracting_dims={0}
  %sharding_constraint.1023 = bf16[1,4096,8,128]{3,2,1,0} copy(%dot.527)
  %get-tuple-element.635 = s32[1,4096]{1,0} get-tuple-element(%remat2.13), index=11
  %eq.2190 = s32[1,4096,4096]{2,1,0} broadcast(%get-tuple-element.635), dimensions={0,1}
  %eq.2191 = s32[1,4096,4096]{2,1,0} broadcast(%get-tuple-element.635), dimensions={0,2}
  %eq.2192 = pred[1,4096,4096]{2,1,0} compare(%eq.2190, %eq.2191), direction=EQ
  %and.135 = pred[1,4096,4096]{2,1,0} and(%eq.2192, %and.64)
  %select_n.431 = f32[1,4096,4096]{2,1,0} select(%and.135, %broadcast_in_dim.516, %broadcast_in_dim.517)
  %ne.100 = pred[1,4096,4096]{2,1,0} compare(%select_n.431, %broadcast_in_dim.516), direction=NE
  %not.98 = pred[1,4096,4096]{2,1,0} not(%ne.100)
  %convert_element_type.2079 = s32[1,4096,4096]{2,1,0} convert(%not.98)
  %reduce.516 = s32[1,4096]{1,0} reduce(%convert_element_type.2079, %constant.1181), dimensions={1}, to_apply=%region_428.10976
  %reduce_sum.5696 = s32[1,1,1,4096]{3,2,1,0} reshape(%reduce.516)
  %slice.414 = s32[1,1,1,1]{3,2,1,0} slice(%reduce_sum.5696), slice={[0:1], [0:1], [0:1], [0:1]}
  %squeeze.34 = s32[1,1]{1,0} reshape(%slice.414)
  %reshape.11124 = s32[1]{0} reshape(%squeeze.34)
  %lt.107 = pred[1]{0} compare(%reshape.11124, %constant.1418), direction=LT
  %select_n.432 = s32[1]{0} select(%lt.107, %broadcast_in_dim.518, %reshape.11124)
  %concatenate.287 = s32[2]{0} concatenate(%constant.1418, %select_n.432), dimensions={0}
  %reduce.517 = s32[1,4096]{1,0} reduce(%convert_element_type.2079, %constant.1181), dimensions={2}, to_apply=%region_429.10985
  %reduce_sum.5697 = s32[1,1,1,4096]{3,2,1,0} reshape(%reduce.517)
  %reduce.518 = s32[1,1]{1,0} reduce(%reduce_sum.5697, %constant.1415), dimensions={3,2}, to_apply=%region_430.10991
  %reshape.11125 = s32[1]{0} reshape(%reduce.518)
  %lt.108 = pred[1]{0} compare(%reshape.11125, %constant.1418), direction=LT
  %select_n.433 = s32[1]{0} select(%lt.108, %broadcast_in_dim.518, %reshape.11125)
  %concatenate.288 = s32[2]{0} concatenate(%constant.1418, %select_n.433), dimensions={0}
  %te_fused_attn_forward_ffi.136 = (bf16[1,4096,32,128]{3,2,1,0}, f32[1,32,4096,1]{3,2,1,0}, u32[2,4]{1,0}, u8[48]{0}) custom-call(%sharding_constraint.1020, %sharding_constraint.1022, %sharding_constraint.1023, %constant.1403, %dynamic-slice.38, /*index=5*/%concatenate.287, %concatenate.288, %constant.1416, %constant.1416, %constant.1416, /*index=10*/%constant.1416, %constant.1416, %constant.1416), custom_call_target="te_fused_attn_forward_ffi", operand_layout_constraints={bf16[1,4096,32,128]{3,2,1,0}, bf16[1,4096,8,128]{3,2,1,0}, bf16[1,4096,8,128]{3,2,1,0}, bf16[0]{0}, u32[2]{0}, s32[2]{0}, s32[2]{0}, f32[0]{0}, f32[0]{0}, f32[0]{0}, f32[0]{0}, f32[0]{0}, f32[0]{0}}, api_version=API_VERSION_TYPED_FFI, backend_config={attn_heads = 32 : i64, bias_batch = 0 : i64, bias_heads = 0 : i64, bias_type = 0 : i64, deterministic = false, dropout_probability = 0.000000e+00 : f64, input_batch = 1 : i64, is_training = true, kv_max_seqlen = 4096 : i64, mask_type = 3 : i64, max_segments_per_seq = 1 : i64, num_gqa_groups = 8 : i64, q_max_seqlen = 4096 : i64, qk_head_dim = 128 : i64, qkv_layout = 9 : i64, scaling_factor = 1.000000e+00 : f64, v_head_dim = 128 : i64, window_size_left = -1 : i64, window_size_right = -1 : i64}
  %get-tuple-element.636 = bf16[1,4096,32,128]{3,2,1,0} get-tuple-element(%te_fused_attn_forward_ffi.136), index=0
  %sharding_constraint.1024 = bf16[1,4096,32,128]{3,2,1,0} copy(%get-tuple-element.636)
  %get-tuple-element.637 = bf16[32,128,512]{2,1,0} get-tuple-element(%remat2.13), index=7
  %all-gather.241 = bf16[32,128,4096]{2,1,0} all-gather(%get-tuple-element.637), channel_id=388, replica_groups=[1,8]<=[8], dimensions={2}, use_global_device_ids=true
  %dot.528 = bf16[1,4096,4096]{2,1,0} dot(%sharding_constraint.1024, %all-gather.241), lhs_contracting_dims={2,3}, rhs_contracting_dims={0,1}
  %sharding_constraint.1025 = bf16[1,4096,4096]{2,1,0} copy(%dot.528)
  %add.1890 = bf16[1,4096,4096]{2,1,0} add(%sharding_constraint.1017, %sharding_constraint.1025)
  %convert_element_type.2081 = f32[1,4096,4096]{2,1,0} convert(%add.1890)
  %square.73 = f32[1,4096,4096]{2,1,0} multiply(%convert_element_type.2081, %convert_element_type.2081)
  %reduce.519 = f32[1,4096]{1,0} reduce(%square.73, %constant.1360), dimensions={2}, to_apply=%region_431.11006
  %div.865 = f32[1,4096]{1,0} multiply(%reduce.519, %broadcast.3412)
  %add.1891 = f32[1,4096]{1,0} add(%div.865, %broadcast.3413)
  %add.1892 = f32[1,4096,1]{2,1,0} reshape(%add.1891)
  %rsqrt.134 = f32[1,4096,1]{2,1,0} rsqrt(%add.1892)
  %mul.4799 = f32[1,4096]{1,0} reshape(%rsqrt.134)
  %mul.4800 = f32[1,4096,4096]{2,1,0} broadcast(%mul.4799), dimensions={0,1}
  %mul.4801 = f32[1,4096,4096]{2,1,0} multiply(%convert_element_type.2081, %mul.4800)
  %convert_element_type.2082 = bf16[1,4096,4096]{2,1,0} convert(%mul.4801)
  %get-tuple-element.638 = bf16[4096]{0} get-tuple-element(%remat2.13), index=4
  %mul.4802 = bf16[1,4096,4096]{2,1,0} broadcast(%get-tuple-element.638), dimensions={2}
  %mul.4803 = bf16[1,4096,4096]{2,1,0} multiply(%convert_element_type.2082, %mul.4802)
  %sharding_constraint.1026 = bf16[1,4096,4096]{2,1,0} copy(%mul.4803)
  %get-tuple-element.639 = bf16[512,8]{1,0} get-tuple-element(%remat2.13), index=0
  %all-gather.242 = bf16[4096,8]{1,0} all-gather(%get-tuple-element.639), channel_id=389, replica_groups=[1,8]<=[8], dimensions={0}, use_global_device_ids=true
  %dot.529 = bf16[1,4096,8]{2,1,0} dot(%sharding_constraint.1026, %all-gather.242), lhs_contracting_dims={2}, rhs_contracting_dims={0}
  %sharding_constraint.1027 = bf16[1,4096,8]{2,1,0} copy(%dot.529)
  %top_k.102 = bf16[4096,8]{1,0} reshape(%sharding_constraint.1027)
  %top_k.103 = (bf16[4096,2]{1,0}, s32[4096,2]{1,0}) custom-call(%top_k.102), custom_call_target="TopK", called_computations={%compare_greater_than.34.11027.clone}
  %get-tuple-element.640 = bf16[4096,2]{1,0} get-tuple-element(%top_k.103), index=0
  %get-tuple-element.641 = s32[4096,2]{1,0} get-tuple-element(%top_k.103), index=1
  %add.1893 = s32[4096,2]{1,0} add(%get-tuple-element.641, %broadcast.3418)
  %sort.98 = (bf16[4096,2]{1,0}, s32[4096,2]{1,0}) sort(%get-tuple-element.640, %add.1893), dimensions={1}, is_stable=true, to_apply=%compare-value-and-index.34
  %get-tuple-element.643 = s32[4096,2]{1,0} get-tuple-element(%sort.98), index=1
  %slice.416 = s32[4096,2]{1,0} slice(%get-tuple-element.643), slice={[0:4096], [0:2]}
  %top_k.104 = s32[1,4096,2]{2,1,0} reshape(%slice.416)
  %lt.109 = pred[1,4096,2]{2,1,0} compare(%top_k.104, %broadcast.3419), direction=LT
  %add.1894 = s32[1,4096,2]{2,1,0} add(%top_k.104, %broadcast.3420)
  %select_n.434 = s32[1,4096,2]{2,1,0} select(%lt.109, %add.1894, %top_k.104)
  %broadcast_in_dim.629 = s32[1,4096,2,1]{3,2,1,0} reshape(%select_n.434)
  %concatenate.289 = s32[1,4096,2,3]{3,2,1,0} concatenate(%add.1356, %iota.2388, %broadcast_in_dim.629), dimensions={3}
  %subtract.106 = s32[1,4096,2,3]{3,2,1,0} subtract(%concatenate.289, %broadcast.3428)
  %scatter.199 = u32[1,4096,8]{2,1,0} scatter(%dynamic-slice.43, %subtract.106, %add.1401), update_window_dims={}, inserted_window_dims={0,1,2}, scatter_dims_to_operand_dims={0,1,2}, index_vector_dim=3, to_apply=%region_432.11063.clone
  %gather.36 = u32[1,4096,2]{2,1,0} gather(%scatter.199, %subtract.106), offset_dims={}, collapsed_slice_dims={0,1,2}, start_index_map={0,1,2}, index_vector_dim=3, slice_sizes={1,1,1}
  %eq.2193 = pred[1,4096,2]{2,1,0} compare(%add.1401, %gather.36), direction=EQ
  %get-tuple-element.642 = bf16[4096,2]{1,0} get-tuple-element(%sort.98), index=0
  %slice.415 = bf16[4096,2]{1,0} slice(%get-tuple-element.642), slice={[0:4096], [0:2]}
  %convert_element_type.2083 = f32[4096,2]{1,0} convert(%slice.415)
  %convert_element_type.2085 = f32[1,4096,2]{2,1,0} reshape(%convert_element_type.2083)
  %reduce.520 = f32[4096]{0} reduce(%convert_element_type.2083, %constant.1450), dimensions={1}, to_apply=%region_433.11072
  %sub.244 = f32[1,4096]{1,0} reshape(%reduce.520)
  %sub.245 = f32[1,4096,2]{2,1,0} broadcast(%sub.244), dimensions={0,1}
  %sub.246 = f32[1,4096,2]{2,1,0} subtract(%convert_element_type.2085, %sub.245)
  %exp.195 = f32[1,4096,2]{2,1,0} exponential(%sub.246)
  %reduce.521 = f32[1,4096]{1,0} reduce(%exp.195, %constant.1360), dimensions={2}, to_apply=%region_434.11081
  %div.866 = f32[1,4096,2]{2,1,0} broadcast(%reduce.521), dimensions={0,1}
  %div.867 = f32[1,4096,2]{2,1,0} divide(%exp.195, %div.866)
  %convert_element_type.2086 = bf16[1,4096,2]{2,1,0} convert(%div.867)
  %select_n.435 = bf16[1,4096,2]{2,1,0} select(%eq.2193, %convert_element_type.2086, %broadcast.3427)
  %scatter.200 = bf16[1,4096,8]{2,1,0} scatter(%broadcast.3379, %subtract.106, %select_n.435), update_window_dims={}, inserted_window_dims={0,1,2}, scatter_dims_to_operand_dims={0,1,2}, index_vector_dim=3, to_apply=%region_435.11090.clone
  %eq.2195 = s32[1,4096,2,8]{3,2,1,0} broadcast(%top_k.104), dimensions={0,1,2}
  %iota.2399 = s32[1,4096,2,8]{3,2,1,0} iota(), iota_dimension=3
  %eq.2196 = pred[1,4096,2,8]{3,2,1,0} compare(%eq.2195, %iota.2399), direction=EQ
  %convert_element_type.2087 = s32[1,4096,2,8]{3,2,1,0} convert(%eq.2196)
  %reshape.11157 = s32[1,8192,8]{2,1,0} reshape(%convert_element_type.2087)
  %sharding_constraint.1028 = s32[1,8192,8]{2,1,0} copy(%reshape.11157)
  %reduce-window.34 = s32[1,8192,8]{2,1,0} reduce-window(%sharding_constraint.1028, %constant.1181), window={size=1x8192x1 pad=0_0x8191_0x0_0}, to_apply=%region_436.11102
  %reshape.11159 = s32[1,4096,2,8]{3,2,1,0} reshape(%reduce-window.34)
  %sharding_constraint.1029 = s32[1,4096,2,8]{3,2,1,0} copy(%reshape.11159)
  %le.74 = pred[1,4096,2,8]{3,2,1,0} compare(%sharding_constraint.1029, %broadcast.3429), direction=LE
  %mul.4804 = s32[1,4096,2,8]{3,2,1,0} select(%le.74, %convert_element_type.2087, %broadcast.3430)
  %reduce.522 = s32[1,4096,8]{2,1,0} reduce(%mul.4804, %constant.1181), dimensions={2}, to_apply=%region_437.11111
  %convert_element_type.2088 = bf16[1,4096,8]{2,1,0} convert(%reduce.522)
  %mul.4805 = bf16[1,4096,8]{2,1,0} multiply(%scatter.200, %convert_element_type.2088)
  %mul.4806 = bf16[1,4096,8,1025]{3,2,1,0} broadcast(%mul.4805), dimensions={0,1,2}
  %mul.4807 = s32[1,8192,8]{2,1,0} multiply(%sharding_constraint.1028, %reduce-window.34)
  %reshape.11160 = s32[1,4096,2,8]{3,2,1,0} reshape(%mul.4807)
  %reduce.523 = s32[1,4096,8]{2,1,0} reduce(%reshape.11160, %constant.1181), dimensions={2}, to_apply=%region_438.11121
  %mul.4808 = s32[1,4096,8]{2,1,0} multiply(%reduce.523, %reduce.522)
  %eq.2197 = s32[1,4096,8,1025]{3,2,1,0} broadcast(%mul.4808), dimensions={0,1,2}
  %iota.2400 = s32[1,4096,8,1025]{3,2,1,0} iota(), iota_dimension=3
  %eq.2198 = pred[1,4096,8,1025]{3,2,1,0} compare(%eq.2197, %iota.2400), direction=EQ
  %convert_element_type.2089 = s32[1,4096,8,1025]{3,2,1,0} convert(%eq.2198)
  %convert_element_type.2090 = bf16[1,4096,8,1025]{3,2,1,0} convert(%convert_element_type.2089)
  %mul.4809 = bf16[1,4096,8,1025]{3,2,1,0} multiply(%mul.4806, %convert_element_type.2090)
  %slice.417 = bf16[1,4096,8,1024]{3,2,1,0} slice(%mul.4809), slice={[0:1], [0:4096], [0:8], [1:1025]}
  %convert_element_type.2091 = pred[1,4096,8,1024]{3,2,1,0} compare(%slice.417, %broadcast.3431), direction=NE
  %sharding_constraint.1030 = pred[1,4096,8,1024]{3,2,1,0} copy(%convert_element_type.2091)
  %dot_general.72 = bf16[1,4096,8,1024]{3,2,1,0} convert(%sharding_constraint.1030)
  %dot.530 = bf16[1,8,1024,4096]{3,2,1,0} dot(%dot_general.72, %sharding_constraint.1026), lhs_batch_dims={0}, lhs_contracting_dims={1}, rhs_batch_dims={0}, rhs_contracting_dims={1}
  %reshape.11163 = bf16[1,8,1,1024,4096]{4,3,2,1,0} reshape(%dot.530)
  %all-to-all.72 = bf16[1,8,1,1024,4096]{4,3,2,1,0} all-to-all(%reshape.11163), channel_id=393, replica_groups=[1,8]<=[8], dimensions={1}
  %transpose.115 = bf16[8,1,1,1024,4096]{4,3,2,0,1} transpose(%all-to-all.72), dimensions={1,0,2,3,4}
  %reshape.11164 = bf16[8,1,1024,4096]{3,2,1,0} reshape(%transpose.115)
  %transpose.116 = bf16[1,8,1024,4096]{3,2,0,1} transpose(%reshape.11164), dimensions={1,0,2,3}
  %sharding_constraint.1031 = bf16[1,8,1024,4096]{3,2,0,1} copy(%transpose.116)
  %get-tuple-element.646 = bf16[1,4096,14336]{2,1,0} get-tuple-element(%remat2.13), index=1
  %sharding_constraint.1032 = bf16[1,4096,14336]{2,1,0} copy(%get-tuple-element.646)
  %dot.531 = bf16[1,8,1024,14336]{3,2,1,0} dot(%sharding_constraint.1031, %sharding_constraint.1032), lhs_batch_dims={0}, lhs_contracting_dims={3}, rhs_batch_dims={0}, rhs_contracting_dims={1}
  %sharding_constraint.1033 = bf16[1,8,1024,14336]{3,2,1,0} copy(%dot.531)
  %neg.198 = bf16[1,8,1024,14336]{3,2,1,0} negate(%sharding_constraint.1033)
  %exp.196 = bf16[1,8,1024,14336]{3,2,1,0} exponential(%neg.198)
  %add.1899 = bf16[1,8,1024,14336]{3,2,1,0} add(%exp.196, %jit_silu_.0)
  %div.868 = bf16[1,8,1024,14336]{3,2,1,0} divide(%jit_silu_.0, %add.1899)
  %mul.4810 = bf16[1,8,1024,14336]{3,2,1,0} multiply(%sharding_constraint.1033, %div.868)
  %sharding_constraint.1034 = bf16[1,4096,4096]{2,1,0} copy(%sharding_constraint.1016)
  %sharding_constraint.1035 = bf16[1,4096,8,1024]{3,2,1,0} copy(%slice.417)
  %dot.532 = bf16[1,4096,8,1024]{3,2,1,0} dot(%sharding_constraint.1034, %sharding_constraint.1035), lhs_batch_dims={0}, lhs_contracting_dims={1}, rhs_batch_dims={0}, rhs_contracting_dims={1}
  %reshape.11167 = bf16[1,4096,8,1,1024]{4,3,2,1,0} reshape(%dot.532)
  %all-to-all.73 = bf16[1,4096,8,1,1024]{4,3,2,1,0} all-to-all(%reshape.11167), channel_id=394, replica_groups=[1,8]<=[8], dimensions={2}
  %transpose.117 = bf16[8,1,4096,1,1024]{4,3,0,2,1} transpose(%all-to-all.73), dimensions={2,0,1,3,4}
  %reshape.11168 = bf16[8,4096,1,1024]{3,2,1,0} reshape(%transpose.117)
  %transpose.118 = bf16[1,8,1024,4096]{2,0,3,1} transpose(%reshape.11168), dimensions={2,0,3,1}
  %sharding_constraint.1036 = bf16[1,8,1024,4096]{2,0,3,1} copy(%transpose.118)
  %get-tuple-element.647 = bf16[1,14336,4096]{2,1,0} get-tuple-element(%remat2.13), index=3
  %sharding_constraint.1037 = bf16[1,14336,4096]{2,1,0} copy(%get-tuple-element.647)
  %dot.533 = bf16[1,8,1024,14336]{3,2,1,0} dot(%sharding_constraint.1036, %sharding_constraint.1037), lhs_batch_dims={0}, lhs_contracting_dims={3}, rhs_batch_dims={0}, rhs_contracting_dims={2}
  %mul.4811 = bf16[1,8,1024,14336]{3,2,1,0} multiply(%mul.4810, %dot.533)
  %sharding_constraint.1038 = bf16[1,8,1024,14336]{3,2,1,0} copy(%mul.4811)
  %get-tuple-element.648 = bf16[1,4096,14336]{2,1,0} get-tuple-element(%remat2.13), index=2
  %sharding_constraint.1039 = bf16[1,4096,14336]{2,1,0} copy(%get-tuple-element.648)
  %dot.534 = bf16[1,8,1024,4096]{3,2,1,0} dot(%sharding_constraint.1038, %sharding_constraint.1039), lhs_batch_dims={0}, lhs_contracting_dims={3}, rhs_batch_dims={0}, rhs_contracting_dims={2}
  %dot.535 = bf16[1,8,1024,14336]{3,2,1,0} dot(%sharding_constraint.1031, %sharding_constraint.1039), lhs_batch_dims={0}, lhs_contracting_dims={3}, rhs_batch_dims={0}, rhs_contracting_dims={1}
  %sharding_constraint.1040 = bf16[1,8,1024,14336]{3,2,1,0} copy(%dot.535)
  %mul.4812 = bf16[1,8,1024,14336]{3,2,1,0} multiply(%dot.533, %sharding_constraint.1040)
  %mul.4813 = bf16[1,8,1024,14336]{3,2,1,0} multiply(%mul.4812, %div.868)
  %mul.4815 = bf16[1,8,1024,14336]{3,2,1,0} multiply(%sharding_constraint.1033, %mul.4812)
  %sub.247 = bf16[1,8,1024,14336]{3,2,1,0} subtract(%jit_silu_.0, %div.868)
  %mul.4816 = bf16[1,8,1024,14336]{3,2,1,0} multiply(%div.868, %sub.247)
  %mul.4817 = bf16[1,8,1024,14336]{3,2,1,0} multiply(%mul.4815, %mul.4816)
  %add_any.95 = bf16[1,8,1024,14336]{3,2,1,0} add(%mul.4813, %mul.4817)
  %sharding_constraint.1041 = bf16[1,8,1024,14336]{3,2,1,0} copy(%add_any.95)
  %dot.536 = bf16[1,8,1024,4096]{3,2,1,0} dot(%sharding_constraint.1041, %sharding_constraint.1032), lhs_batch_dims={0}, lhs_contracting_dims={3}, rhs_batch_dims={0}, rhs_contracting_dims={2}
  %add_any.96 = bf16[1,8,1024,4096]{3,2,1,0} add(%dot.534, %dot.536)
  %sharding_constraint.1042 = bf16[1,8,1024,4096]{3,2,1,0} copy(%add_any.96)
  %transpose.119 = bf16[8,1,1024,4096]{3,2,0,1} transpose(%sharding_constraint.1042), dimensions={1,0,2,3}
  %reshape.11172 = bf16[8,1,1,1024,4096]{4,3,2,1,0} reshape(%transpose.119)
  %all-to-all.74 = bf16[8,1,1,1024,4096]{4,3,2,1,0} all-to-all(%reshape.11172), channel_id=395, replica_groups=[1,8]<=[8], dimensions={0}
  %transpose.120 = bf16[1,8,1,1024,4096]{4,3,2,0,1} transpose(%all-to-all.74), dimensions={1,0,2,3,4}
  %reshape.11173 = bf16[1,8,1024,4096]{3,2,1,0} reshape(%transpose.120)
  %dot.537 = bf16[1,4096,4096]{2,1,0} dot(%dot_general.72, %reshape.11173), lhs_batch_dims={0}, lhs_contracting_dims={2,3}, rhs_batch_dims={0}, rhs_contracting_dims={1,2}
  %reshape.11175 = s32[1,4096,2,1]{3,2,1,0} reshape(%slice.416)
  %ge.2 = pred[1,4096,2,3]{3,2,1,0} compare(%concatenate.289, %broadcast.3629), direction=GE
  %le.76 = pred[1,4096,2,3]{3,2,1,0} compare(%concatenate.289, %le.67), direction=LE
  %and.136 = pred[1,4096,2,3]{3,2,1,0} and(%ge.2, %le.76)
  %reduce.524 = pred[1,4096,2]{2,1,0} reduce(%and.136, %constant.5574), dimensions={3}, to_apply=%region_439.11178
  %mul.4818 = bf16[1,8,1024,14336]{3,2,1,0} multiply(%mul.4810, %sharding_constraint.1040)
  %dot.538 = bf16[1,8,1024,4096]{3,2,1,0} dot(%mul.4818, %sharding_constraint.1037), lhs_batch_dims={0}, lhs_contracting_dims={3}, rhs_batch_dims={0}, rhs_contracting_dims={1}
  %sharding_constraint.1043 = bf16[1,8,1024,4096]{3,2,1,0} copy(%dot.538)
  %reshape.11182 = bf16[1,8,1,1024,4096]{4,3,2,1,0} reshape(%sharding_constraint.1043)
  %all-to-all.75 = bf16[1,8,1,1024,4096]{4,3,2,1,0} all-to-all(%reshape.11182), channel_id=396, replica_groups=[1,8]<=[8], dimensions={1}
  %transpose.121 = bf16[8,1,1,1024,4096]{4,3,2,0,1} transpose(%all-to-all.75), dimensions={1,0,2,3,4}
  %reshape.11183 = bf16[8,1,1024,4096]{3,2,1,0} reshape(%transpose.121)
  %dot.539 = bf16[1,4096,8,1024]{3,2,1,0} dot(%sharding_constraint.1034, %reshape.11183), lhs_batch_dims={0}, lhs_contracting_dims={2}, rhs_batch_dims={1}, rhs_contracting_dims={3}
  %sharding_constraint.1044 = bf16[1,4096,8,1024]{3,2,1,0} copy(%dot.539)
  %pad.2 = bf16[1,4096,8,1025]{3,2,1,0} pad(%sharding_constraint.1044, %constant.1190), padding=0_0x0_0x0_0x1_0
  %mul.4819 = bf16[1,4096,8,1025]{3,2,1,0} multiply(%pad.2, %convert_element_type.2090)
  %reduce.525 = bf16[1,4096,8]{2,1,0} reduce(%mul.4819, %constant.1190), dimensions={3}, to_apply=%region_440.11190
  %mul.4820 = bf16[1,4096,8]{2,1,0} multiply(%reduce.525, %convert_element_type.2088)
  %gather.37 = bf16[1,4096,2]{2,1,0} gather(%mul.4820, %subtract.106), offset_dims={}, collapsed_slice_dims={0,1,2}, start_index_map={0,1,2}, index_vector_dim=3, slice_sizes={1,1,1}
  %select_n.436 = bf16[1,4096,2]{2,1,0} select(%reduce.524, %gather.37, %broadcast.3427)
  %select_n.437 = bf16[1,4096,2]{2,1,0} select(%eq.2193, %select_n.436, %broadcast.3427)
  %convert_element_type.2092 = f32[1,4096,2]{2,1,0} convert(%select_n.437)
  %div.870 = f32[1,4096,2]{2,1,0} divide(%convert_element_type.2092, %div.866)
  %mul.4823 = f32[1,4096]{1,0} multiply(%reduce.521, %reduce.521)
  %div.871 = f32[1,4096]{1,0} divide(%add.1847, %mul.4823)
  %mul.4824 = f32[1,4096,2]{2,1,0} broadcast(%div.871), dimensions={0,1}
  %mul.4825 = f32[1,4096,2]{2,1,0} multiply(%convert_element_type.2092, %mul.4824)
  %mul.4826 = f32[1,4096,2]{2,1,0} multiply(%mul.4825, %exp.195)
  %reduce.526 = f32[1,4096]{1,0} reduce(%mul.4826, %constant.1360), dimensions={2}, to_apply=%region_441.11207
  %neg.199 = f32[1,4096]{1,0} negate(%reduce.526)
  %broadcast_in_dim.630 = f32[1,4096,2]{2,1,0} broadcast(%neg.199), dimensions={0,1}
  %add_any.97 = f32[1,4096,2]{2,1,0} add(%div.870, %broadcast_in_dim.630)
  %mul.4827 = f32[1,4096,2]{2,1,0} multiply(%add_any.97, %exp.195)
  %convert_element_type.2093 = bf16[1,4096,2]{2,1,0} convert(%mul.4827)
  %scatter.201 = bf16[1,4096,8]{2,1,0} scatter(%broadcast.3379, %reshape.11175, %convert_element_type.2093), update_window_dims={}, inserted_window_dims={2}, scatter_dims_to_operand_dims={2}, input_batching_dims={0,1}, scatter_indices_batching_dims={0,1}, index_vector_dim=3, to_apply=%region_442.11217.clone
  %sharding_constraint.1045 = bf16[1,4096,8]{2,1,0} copy(%scatter.201)
  %dot.540 = bf16[1,4096,4096]{2,1,0} dot(%sharding_constraint.1045, %all-gather.242), lhs_contracting_dims={2}, rhs_contracting_dims={1}
  %add_any.98 = bf16[1,4096,4096]{2,1,0} add(%dot.537, %dot.540)
  %sharding_constraint.1046 = bf16[1,4096,4096]{2,1,0} copy(%add_any.98)
  %mul.4830 = bf16[1,4096,4096]{2,1,0} multiply(%sharding_constraint.1046, %mul.4802)
  %convert_element_type.2094 = f32[1,4096,4096]{2,1,0} convert(%mul.4830)
  %mul.4837 = f32[1,4096,4096]{2,1,0} multiply(%convert_element_type.2094, %mul.4800)
  %mul.4838 = f32[1,4096,4096]{2,1,0} multiply(%convert_element_type.2081, %convert_element_type.2094)
  %reduce.527 = f32[1,4096]{1,0} reduce(%mul.4838, %constant.1360), dimensions={2}, to_apply=%region_443.11233
  %reshape.11195 = f32[1,4096,1]{2,1,0} reshape(%reduce.527)
  %div.872 = f32[1,4096,1]{2,1,0} divide(%rsqrt.134, %add.1892)
  %mul.4839 = f32[1,4096,1]{2,1,0} multiply(%div.872, %broadcast.3620)
  %mul.4840 = f32[1,4096,1]{2,1,0} multiply(%reshape.11195, %mul.4839)
  %mul.4841 = f32[1,4096,1]{2,1,0} multiply(%mul.4840, %mul.4455)
  %mul.4842 = f32[1,4096]{1,0} reshape(%mul.4841)
  %mul.4843 = f32[1,4096,4096]{2,1,0} broadcast(%mul.4842), dimensions={0,1}
  %mul.4844 = f32[1,4096,4096]{2,1,0} multiply(%convert_element_type.2081, %mul.4843)
  %add_any.99 = f32[1,4096,4096]{2,1,0} add(%mul.4837, %mul.4844)
  %convert_element_type.2095 = bf16[1,4096,4096]{2,1,0} convert(%add_any.99)
  %add_any.100 = bf16[1,4096,4096]{2,1,0} add(%sharding_constraint.1016, %convert_element_type.2095)
  %get-tuple-element.649 = f32[1,32,4096,1]{3,2,1,0} get-tuple-element(%te_fused_attn_forward_ffi.136), index=1
  %get-tuple-element.650 = u32[2,4]{1,0} get-tuple-element(%te_fused_attn_forward_ffi.136), index=2
  %sharding_constraint.1047 = u32[2,4]{1,0} copy(%get-tuple-element.650)
  %sharding_constraint.1048 = bf16[1,4096,4096]{2,1,0} copy(%add_any.100)
  %dot.541 = bf16[1,4096,32,128]{3,2,1,0} dot(%sharding_constraint.1048, %all-gather.241), lhs_contracting_dims={2}, rhs_contracting_dims={2}
  %sharding_constraint.1049 = bf16[1,4096,32,128]{3,2,1,0} copy(%dot.541)
  %te_fused_attn_backward_ffi.5 = (bf16[1,4096,32,128]{3,2,1,0}, bf16[1,4096,8,128]{3,2,1,0}, bf16[1,4096,8,128]{3,2,1,0}, bf16[0]{0}, u8[134742064]{0}) custom-call(%sharding_constraint.1020, %sharding_constraint.1022, %sharding_constraint.1023, %constant.1403, %get-tuple-element.649, /*index=5*/%sharding_constraint.1047, %get-tuple-element.636, %sharding_constraint.1049, %concatenate.287, %concatenate.288, /*index=10*/%constant.1416, %constant.1416, %constant.1416, %constant.1416, %constant.1416, /*index=15*/%constant.1416), custom_call_target="te_fused_attn_backward_ffi", operand_layout_constraints={bf16[1,4096,32,128]{3,2,1,0}, bf16[1,4096,8,128]{3,2,1,0}, bf16[1,4096,8,128]{3,2,1,0}, bf16[0]{0}, f32[1,32,4096,1]{3,2,1,0}, u32[2,4]{1,0}, bf16[1,4096,32,128]{3,2,1,0}, bf16[1,4096,32,128]{3,2,1,0}, s32[2]{0}, s32[2]{0}, f32[0]{0}, f32[0]{0}, f32[0]{0}, f32[0]{0}, f32[0]{0}, f32[0]{0}}, api_version=API_VERSION_TYPED_FFI, backend_config={attn_heads = 32 : i64, bias_batch = 0 : i64, bias_heads = 0 : i64, bias_type = 0 : i64, deterministic = false, dropout_probability = 0.000000e+00 : f64, input_batch = 1 : i64, is_training = true, kv_max_seqlen = 4096 : i64, mask_type = 3 : i64, max_segments_per_seq = 1 : i64, num_gqa_groups = 8 : i64, q_max_seqlen = 4096 : i64, qk_head_dim = 128 : i64, qkv_layout = 9 : i64, scaling_factor = 1.000000e+00 : f64, v_head_dim = 128 : i64, window_size_left = -1 : i64, window_size_right = -1 : i64}
  %get-tuple-element.651 = bf16[1,4096,8,128]{3,2,1,0} get-tuple-element(%te_fused_attn_backward_ffi.5), index=2
  %sharding_constraint.1050 = bf16[1,4096,8,128]{3,2,1,0} copy(%get-tuple-element.651)
  %dot.542 = bf16[1,4096,4096]{2,1,0} dot(%sharding_constraint.1050, %all-gather.240), lhs_contracting_dims={2,3}, rhs_contracting_dims={1,2}
  %get-tuple-element.652 = bf16[1,4096,8,128]{3,2,1,0} get-tuple-element(%te_fused_attn_backward_ffi.5), index=1
  %sharding_constraint.1051 = bf16[1,4096,8,128]{3,2,1,0} copy(%get-tuple-element.652)
  %slice.418 = bf16[1,4096,8,64]{3,2,1,0} slice(%sharding_constraint.1051), slice={[0:1], [0:4096], [0:8], [64:128]}
  %mul.4847 = bf16[1,4096,8,64]{3,2,1,0} multiply(%slice.418, %mul.4791)
  %slice.419 = bf16[1,4096,8,64]{3,2,1,0} slice(%sharding_constraint.1051), slice={[0:1], [0:4096], [0:8], [0:64]}
  %mul.4850 = bf16[1,4096,8,64]{3,2,1,0} multiply(%slice.419, %mul.4788)
  %add_any.101 = bf16[1,4096,8,64]{3,2,1,0} add(%mul.4847, %mul.4850)
  %mul.4854 = bf16[1,4096,8,64]{3,2,1,0} multiply(%slice.418, %mul.4788)
  %neg.200 = bf16[1,4096,8,64]{3,2,1,0} negate(%slice.419)
  %mul.4857 = bf16[1,4096,8,64]{3,2,1,0} multiply(%neg.200, %mul.4791)
  %add_any.102 = bf16[1,4096,8,64]{3,2,1,0} add(%mul.4854, %mul.4857)
  %concatenate.296 = bf16[1,4096,8,128]{3,2,1,0} concatenate(%add_any.101, %add_any.102), dimensions={3}
  %dot.543 = bf16[1,4096,4096]{2,1,0} dot(%concatenate.296, %all-gather.239), lhs_contracting_dims={2,3}, rhs_contracting_dims={1,2}
  %add_any.103 = bf16[1,4096,4096]{2,1,0} add(%dot.542, %dot.543)
  %sharding_constraint.1052 = bf16[1,4096,4096]{2,1,0} copy(%add_any.103)
  %get-tuple-element.653 = bf16[1,4096,32,128]{3,2,1,0} get-tuple-element(%te_fused_attn_backward_ffi.5), index=0
  %sharding_constraint.1053 = bf16[1,4096,32,128]{3,2,1,0} copy(%get-tuple-element.653)
  %slice.420 = bf16[1,4096,32,64]{3,2,1,0} slice(%sharding_constraint.1053), slice={[0:1], [0:4096], [0:32], [64:128]}
  %mul.4860 = bf16[1,4096,32,64]{3,2,1,0} multiply(%slice.420, %mul.4774)
  %slice.421 = bf16[1,4096,32,64]{3,2,1,0} slice(%sharding_constraint.1053), slice={[0:1], [0:4096], [0:32], [0:64]}
  %mul.4863 = bf16[1,4096,32,64]{3,2,1,0} multiply(%slice.421, %mul.4771)
  %add_any.104 = bf16[1,4096,32,64]{3,2,1,0} add(%mul.4860, %mul.4863)
  %mul.4867 = bf16[1,4096,32,64]{3,2,1,0} multiply(%slice.420, %mul.4771)
  %neg.201 = bf16[1,4096,32,64]{3,2,1,0} negate(%slice.421)
  %mul.4870 = bf16[1,4096,32,64]{3,2,1,0} multiply(%neg.201, %mul.4774)
  %add_any.105 = bf16[1,4096,32,64]{3,2,1,0} add(%mul.4867, %mul.4870)
  %concatenate.297 = bf16[1,4096,32,128]{3,2,1,0} concatenate(%add_any.104, %add_any.105), dimensions={3}
  %dot.544 = bf16[1,4096,4096]{2,1,0} dot(%concatenate.297, %all-gather.238), lhs_contracting_dims={2,3}, rhs_contracting_dims={1,2}
  %sharding_constraint.1054 = bf16[1,4096,4096]{2,1,0} copy(%dot.544)
  %add_any.106 = bf16[1,4096,4096]{2,1,0} add(%sharding_constraint.1052, %sharding_constraint.1054)
  %sharding_constraint.1055 = bf16[1,4096,4096]{2,1,0} copy(%add_any.106)
  %mul.4877 = bf16[1,4096,4096]{2,1,0} multiply(%sharding_constraint.1055, %mul.4767)
  %convert_element_type.2097 = f32[1,4096,4096]{2,1,0} convert(%mul.4877)
  %mul.4884 = f32[1,4096,4096]{2,1,0} multiply(%convert_element_type.2097, %mul.4765)
  %mul.4885 = f32[1,4096,4096]{2,1,0} multiply(%convert_element_type.2067, %convert_element_type.2097)
  %reduce.528 = f32[1,4096]{1,0} reduce(%mul.4885, %constant.1360), dimensions={2}, to_apply=%region_444.11312
  %reshape.11202 = f32[1,4096,1]{2,1,0} reshape(%reduce.528)
  %div.873 = f32[1,4096,1]{2,1,0} divide(%rsqrt.133, %add.1887)
  %mul.4887 = f32[1,4096,1]{2,1,0} multiply(%div.873, %broadcast.3620)
  %mul.4888 = f32[1,4096,1]{2,1,0} multiply(%reshape.11202, %mul.4887)
  %mul.4889 = f32[1,4096,1]{2,1,0} multiply(%mul.4888, %mul.4455)
  %mul.4891 = f32[1,4096]{1,0} reshape(%mul.4889)
  %mul.4892 = f32[1,4096,4096]{2,1,0} broadcast(%mul.4891), dimensions={0,1}
  %mul.4893 = f32[1,4096,4096]{2,1,0} multiply(%convert_element_type.2067, %mul.4892)
  %add_any.107 = f32[1,4096,4096]{2,1,0} add(%mul.4884, %mul.4893)
  %convert_element_type.2098 = bf16[1,4096,4096]{2,1,0} convert(%add_any.107)
  %add_any.108 = bf16[1,4096,4096]{2,1,0} add(%add_any.100, %convert_element_type.2098)
  %sharding_constraint.1056 = bf16[1,4096,4096]{2,1,0} copy(%add_any.108)
  %tuple.235 = (bf16[512,8]{1,0}, bf16[1,4096,14336]{2,1,0}, bf16[1,4096,14336]{2,1,0}, bf16[1,14336,4096]{2,1,0}, bf16[4096]{0}, /*index=5*/bf16[4096]{0}, bf16[512,8,128]{2,1,0}, bf16[32,128,512]{2,1,0}, bf16[512,32,128]{2,1,0}, bf16[512,8,128]{2,1,0}, /*index=10*/bf16[1,4096,4096]{2,1,0}, s32[1,4096]{1,0}, s32[1,4096]{1,0}, bf16[1,4096,4096]{2,1,0}) tuple(%param.293, %param.294, %param.295, %param.296, %param.292, /*index=5*/%param.287, %param.289, %param.291, %param.288, %param.290, /*index=10*/%sharding_constraint.834, %param.10, %param.7, %sharding_constraint.1056)
  %remat2.14 = (bf16[512,8]{1,0}, bf16[1,4096,14336]{2,1,0}, bf16[1,4096,14336]{2,1,0}, bf16[1,14336,4096]{2,1,0}, bf16[4096]{0}, /*index=5*/bf16[4096]{0}, bf16[512,8,128]{2,1,0}, bf16[32,128,512]{2,1,0}, bf16[512,32,128]{2,1,0}, bf16[512,8,128]{2,1,0}, /*index=10*/bf16[1,4096,4096]{2,1,0}, s32[1,4096]{1,0}, s32[1,4096]{1,0}, bf16[1,4096,4096]{2,1,0}) opt-barrier(%tuple.235)
  %get-tuple-element.654 = bf16[1,4096,4096]{2,1,0} get-tuple-element(%remat2.14), index=13
  %sharding_constraint.1057 = bf16[1,4096,4096]{2,1,0} copy(%get-tuple-element.654)
  %iota.2405 = s32[1,4096,2,1]{3,2,1,0} iota(), iota_dimension=1
  %get-tuple-element.655 = bf16[1,4096,4096]{2,1,0} get-tuple-element(%remat2.14), index=10
  %sharding_constraint.1058 = bf16[1,4096,4096]{2,1,0} copy(%get-tuple-element.655)
  %convert_element_type.2099 = f32[1,4096,4096]{2,1,0} convert(%sharding_constraint.1058)
  %square.74 = f32[1,4096,4096]{2,1,0} multiply(%convert_element_type.2099, %convert_element_type.2099)
  %reduce.529 = f32[1,4096]{1,0} reduce(%square.74, %constant.1360), dimensions={2}, to_apply=%region_445.11354
  %div.874 = f32[1,4096]{1,0} multiply(%reduce.529, %broadcast.3412)
  %add.1903 = f32[1,4096]{1,0} add(%div.874, %broadcast.3413)
  %add.1904 = f32[1,4096,1]{2,1,0} reshape(%add.1903)
  %rsqrt.135 = f32[1,4096,1]{2,1,0} rsqrt(%add.1904)
  %mul.4894 = f32[1,4096]{1,0} reshape(%rsqrt.135)
  %mul.4895 = f32[1,4096,4096]{2,1,0} broadcast(%mul.4894), dimensions={0,1}
  %mul.4896 = f32[1,4096,4096]{2,1,0} multiply(%convert_element_type.2099, %mul.4895)
  %convert_element_type.2100 = bf16[1,4096,4096]{2,1,0} convert(%mul.4896)
  %get-tuple-element.656 = bf16[4096]{0} get-tuple-element(%remat2.14), index=5
  %mul.4897 = bf16[1,4096,4096]{2,1,0} broadcast(%get-tuple-element.656), dimensions={2}
  %mul.4898 = bf16[1,4096,4096]{2,1,0} multiply(%convert_element_type.2100, %mul.4897)
  %sharding_constraint.1059 = bf16[1,4096,4096]{2,1,0} copy(%mul.4898)
  %sharding_constraint.1060 = bf16[1,4096,4096]{2,1,0} copy(%sharding_constraint.1059)
  %get-tuple-element.657 = bf16[512,32,128]{2,1,0} get-tuple-element(%remat2.14), index=8
  %all-gather.244 = bf16[4096,32,128]{2,1,0} all-gather(%get-tuple-element.657), channel_id=399, replica_groups=[1,8]<=[8], dimensions={0}, use_global_device_ids=true
  %dot.545 = bf16[1,4096,32,128]{3,2,1,0} dot(%sharding_constraint.1060, %all-gather.244), lhs_contracting_dims={2}, rhs_contracting_dims={0}
  %slice.422 = bf16[1,4096,32,64]{3,2,1,0} slice(%dot.545), slice={[0:1], [0:4096], [0:32], [0:64]}
  %get-tuple-element.658 = s32[1,4096]{1,0} get-tuple-element(%remat2.14), index=12
  %convert_element_type.2101 = f32[1,4096]{1,0} convert(%get-tuple-element.658)
  %div.875 = f32[1,4096,1,64]{3,2,1,0} broadcast(%convert_element_type.2101), dimensions={0,1}
  %div.878 = f32[1,4096,1,64]{3,2,1,0} divide(%div.875, %div.402)
  %cos.71 = f32[1,4096,1,64]{3,2,1,0} cosine(%div.878)
  %convert_element_type.2104 = bf16[1,4096,1,64]{3,2,1,0} convert(%cos.71)
  %mul.4900 = bf16[1,4096,64]{2,1,0} reshape(%convert_element_type.2104)
  %mul.4901 = bf16[1,4096,32,64]{3,2,1,0} broadcast(%mul.4900), dimensions={0,1,3}
  %mul.4903 = bf16[1,4096,32,64]{3,2,1,0} multiply(%slice.422, %mul.4901)
  %slice.423 = bf16[1,4096,32,64]{3,2,1,0} slice(%dot.545), slice={[0:1], [0:4096], [0:32], [64:128]}
  %sin.70 = f32[1,4096,1,64]{3,2,1,0} sine(%div.878)
  %convert_element_type.2105 = bf16[1,4096,1,64]{3,2,1,0} convert(%sin.70)
  %mul.4904 = bf16[1,4096,64]{2,1,0} reshape(%convert_element_type.2105)
  %mul.4905 = bf16[1,4096,32,64]{3,2,1,0} broadcast(%mul.4904), dimensions={0,1,3}
  %mul.4907 = bf16[1,4096,32,64]{3,2,1,0} multiply(%slice.423, %mul.4905)
  %sub.248 = bf16[1,4096,32,64]{3,2,1,0} subtract(%mul.4903, %mul.4907)
  %mul.4927 = bf16[1,4096,32,64]{3,2,1,0} multiply(%slice.423, %mul.4901)
  %mul.4933 = bf16[1,4096,32,64]{3,2,1,0} multiply(%slice.422, %mul.4905)
  %add.1905 = bf16[1,4096,32,64]{3,2,1,0} add(%mul.4927, %mul.4933)
  %concatenate.298 = bf16[1,4096,32,128]{3,2,1,0} concatenate(%sub.248, %add.1905), dimensions={3}
  %sharding_constraint.1061 = bf16[1,4096,32,128]{3,2,1,0} copy(%concatenate.298)
  %get-tuple-element.659 = bf16[512,8,128]{2,1,0} get-tuple-element(%remat2.14), index=6
  %all-gather.245 = bf16[4096,8,128]{2,1,0} all-gather(%get-tuple-element.659), channel_id=400, replica_groups=[1,8]<=[8], dimensions={0}, use_global_device_ids=true
  %dot.546 = bf16[1,4096,8,128]{3,2,1,0} dot(%sharding_constraint.1060, %all-gather.245), lhs_contracting_dims={2}, rhs_contracting_dims={0}
  %slice.424 = bf16[1,4096,8,64]{3,2,1,0} slice(%dot.546), slice={[0:1], [0:4096], [0:8], [0:64]}
  %mul.4936 = bf16[1,4096,8,64]{3,2,1,0} broadcast(%mul.4900), dimensions={0,1,3}
  %mul.4938 = bf16[1,4096,8,64]{3,2,1,0} multiply(%slice.424, %mul.4936)
  %slice.425 = bf16[1,4096,8,64]{3,2,1,0} slice(%dot.546), slice={[0:1], [0:4096], [0:8], [64:128]}
  %mul.4940 = bf16[1,4096,8,64]{3,2,1,0} broadcast(%mul.4904), dimensions={0,1,3}
  %mul.4941 = bf16[1,4096,8,64]{3,2,1,0} multiply(%slice.425, %mul.4940)
  %sub.249 = bf16[1,4096,8,64]{3,2,1,0} subtract(%mul.4938, %mul.4941)
  %mul.4944 = bf16[1,4096,8,64]{3,2,1,0} multiply(%slice.425, %mul.4936)
  %mul.4967 = bf16[1,4096,8,64]{3,2,1,0} multiply(%slice.424, %mul.4940)
  %add.1906 = bf16[1,4096,8,64]{3,2,1,0} add(%mul.4944, %mul.4967)
  %concatenate.299 = bf16[1,4096,8,128]{3,2,1,0} concatenate(%sub.249, %add.1906), dimensions={3}
  %sharding_constraint.1063 = bf16[1,4096,8,128]{3,2,1,0} copy(%concatenate.299)
  %get-tuple-element.660 = bf16[512,8,128]{2,1,0} get-tuple-element(%remat2.14), index=9
  %all-gather.246 = bf16[4096,8,128]{2,1,0} all-gather(%get-tuple-element.660), channel_id=401, replica_groups=[1,8]<=[8], dimensions={0}, use_global_device_ids=true
  %dot.547 = bf16[1,4096,8,128]{3,2,1,0} dot(%sharding_constraint.1060, %all-gather.246), lhs_contracting_dims={2}, rhs_contracting_dims={0}
  %sharding_constraint.1064 = bf16[1,4096,8,128]{3,2,1,0} copy(%dot.547)
  %get-tuple-element.661 = s32[1,4096]{1,0} get-tuple-element(%remat2.14), index=11
  %eq.2200 = s32[1,4096,4096]{2,1,0} broadcast(%get-tuple-element.661), dimensions={0,1}
  %eq.2201 = s32[1,4096,4096]{2,1,0} broadcast(%get-tuple-element.661), dimensions={0,2}
  %eq.2202 = pred[1,4096,4096]{2,1,0} compare(%eq.2200, %eq.2201), direction=EQ
  %and.138 = pred[1,4096,4096]{2,1,0} and(%eq.2202, %and.64)
  %select_n.440 = f32[1,4096,4096]{2,1,0} select(%and.138, %broadcast_in_dim.516, %broadcast_in_dim.517)
  %ne.101 = pred[1,4096,4096]{2,1,0} compare(%select_n.440, %broadcast_in_dim.516), direction=NE
  %not.99 = pred[1,4096,4096]{2,1,0} not(%ne.101)
  %convert_element_type.2110 = s32[1,4096,4096]{2,1,0} convert(%not.99)
  %reduce.530 = s32[1,4096]{1,0} reduce(%convert_element_type.2110, %constant.1181), dimensions={1}, to_apply=%region_446.11450
  %reduce_sum.5698 = s32[1,1,1,4096]{3,2,1,0} reshape(%reduce.530)
  %slice.426 = s32[1,1,1,1]{3,2,1,0} slice(%reduce_sum.5698), slice={[0:1], [0:1], [0:1], [0:1]}
  %squeeze.35 = s32[1,1]{1,0} reshape(%slice.426)
  %reshape.11209 = s32[1]{0} reshape(%squeeze.35)
  %lt.112 = pred[1]{0} compare(%reshape.11209, %constant.1418), direction=LT
  %select_n.441 = s32[1]{0} select(%lt.112, %broadcast_in_dim.518, %reshape.11209)
  %concatenate.300 = s32[2]{0} concatenate(%constant.1418, %select_n.441), dimensions={0}
  %reduce.531 = s32[1,4096]{1,0} reduce(%convert_element_type.2110, %constant.1181), dimensions={2}, to_apply=%region_447.11459
  %reduce_sum.5699 = s32[1,1,1,4096]{3,2,1,0} reshape(%reduce.531)
  %reduce.532 = s32[1,1]{1,0} reduce(%reduce_sum.5699, %constant.1415), dimensions={3,2}, to_apply=%region_448.11465
  %reshape.11210 = s32[1]{0} reshape(%reduce.532)
  %lt.113 = pred[1]{0} compare(%reshape.11210, %constant.1418), direction=LT
  %select_n.442 = s32[1]{0} select(%lt.113, %broadcast_in_dim.518, %reshape.11210)
  %concatenate.301 = s32[2]{0} concatenate(%constant.1418, %select_n.442), dimensions={0}
  %te_fused_attn_forward_ffi.140 = (bf16[1,4096,32,128]{3,2,1,0}, f32[1,32,4096,1]{3,2,1,0}, u32[2,4]{1,0}, u8[48]{0}) custom-call(%sharding_constraint.1061, %sharding_constraint.1063, %sharding_constraint.1064, %constant.1403, %dynamic-slice.38, /*index=5*/%concatenate.300, %concatenate.301, %constant.1416, %constant.1416, %constant.1416, /*index=10*/%constant.1416, %constant.1416, %constant.1416), custom_call_target="te_fused_attn_forward_ffi", operand_layout_constraints={bf16[1,4096,32,128]{3,2,1,0}, bf16[1,4096,8,128]{3,2,1,0}, bf16[1,4096,8,128]{3,2,1,0}, bf16[0]{0}, u32[2]{0}, s32[2]{0}, s32[2]{0}, f32[0]{0}, f32[0]{0}, f32[0]{0}, f32[0]{0}, f32[0]{0}, f32[0]{0}}, api_version=API_VERSION_TYPED_FFI, backend_config={attn_heads = 32 : i64, bias_batch = 0 : i64, bias_heads = 0 : i64, bias_type = 0 : i64, deterministic = false, dropout_probability = 0.000000e+00 : f64, input_batch = 1 : i64, is_training = true, kv_max_seqlen = 4096 : i64, mask_type = 3 : i64, max_segments_per_seq = 1 : i64, num_gqa_groups = 8 : i64, q_max_seqlen = 4096 : i64, qk_head_dim = 128 : i64, qkv_layout = 9 : i64, scaling_factor = 1.000000e+00 : f64, v_head_dim = 128 : i64, window_size_left = -1 : i64, window_size_right = -1 : i64}
  %get-tuple-element.662 = bf16[1,4096,32,128]{3,2,1,0} get-tuple-element(%te_fused_attn_forward_ffi.140), index=0
  %sharding_constraint.1065 = bf16[1,4096,32,128]{3,2,1,0} copy(%get-tuple-element.662)
  %get-tuple-element.663 = bf16[32,128,512]{2,1,0} get-tuple-element(%remat2.14), index=7
  %all-gather.247 = bf16[32,128,4096]{2,1,0} all-gather(%get-tuple-element.663), channel_id=402, replica_groups=[1,8]<=[8], dimensions={2}, use_global_device_ids=true
  %dot.548 = bf16[1,4096,4096]{2,1,0} dot(%sharding_constraint.1065, %all-gather.247), lhs_contracting_dims={2,3}, rhs_contracting_dims={0,1}
  %sharding_constraint.1066 = bf16[1,4096,4096]{2,1,0} copy(%dot.548)
  %add.1907 = bf16[1,4096,4096]{2,1,0} add(%sharding_constraint.1058, %sharding_constraint.1066)
  %convert_element_type.2112 = f32[1,4096,4096]{2,1,0} convert(%add.1907)
  %square.75 = f32[1,4096,4096]{2,1,0} multiply(%convert_element_type.2112, %convert_element_type.2112)
  %reduce.533 = f32[1,4096]{1,0} reduce(%square.75, %constant.1360), dimensions={2}, to_apply=%region_449.11480
  %div.883 = f32[1,4096]{1,0} multiply(%reduce.533, %broadcast.3412)
  %add.1908 = f32[1,4096]{1,0} add(%div.883, %broadcast.3413)
  %add.1909 = f32[1,4096,1]{2,1,0} reshape(%add.1908)
  %rsqrt.136 = f32[1,4096,1]{2,1,0} rsqrt(%add.1909)
  %mul.4968 = f32[1,4096]{1,0} reshape(%rsqrt.136)
  %mul.4969 = f32[1,4096,4096]{2,1,0} broadcast(%mul.4968), dimensions={0,1}
  %mul.4971 = f32[1,4096,4096]{2,1,0} multiply(%convert_element_type.2112, %mul.4969)
  %convert_element_type.2113 = bf16[1,4096,4096]{2,1,0} convert(%mul.4971)
  %get-tuple-element.664 = bf16[4096]{0} get-tuple-element(%remat2.14), index=4
  %mul.4972 = bf16[1,4096,4096]{2,1,0} broadcast(%get-tuple-element.664), dimensions={2}
  %mul.4973 = bf16[1,4096,4096]{2,1,0} multiply(%convert_element_type.2113, %mul.4972)
  %sharding_constraint.1067 = bf16[1,4096,4096]{2,1,0} copy(%mul.4973)
  %get-tuple-element.665 = bf16[512,8]{1,0} get-tuple-element(%remat2.14), index=0
  %all-gather.248 = bf16[4096,8]{1,0} all-gather(%get-tuple-element.665), channel_id=403, replica_groups=[1,8]<=[8], dimensions={0}, use_global_device_ids=true
  %dot.549 = bf16[1,4096,8]{2,1,0} dot(%sharding_constraint.1067, %all-gather.248), lhs_contracting_dims={2}, rhs_contracting_dims={0}
  %sharding_constraint.1068 = bf16[1,4096,8]{2,1,0} copy(%dot.549)
  %top_k.105 = bf16[4096,8]{1,0} reshape(%sharding_constraint.1068)
  %top_k.106 = (bf16[4096,2]{1,0}, s32[4096,2]{1,0}) custom-call(%top_k.105), custom_call_target="TopK", called_computations={%compare_greater_than.35.11501.clone}
  %get-tuple-element.666 = bf16[4096,2]{1,0} get-tuple-element(%top_k.106), index=0
  %get-tuple-element.667 = s32[4096,2]{1,0} get-tuple-element(%top_k.106), index=1
  %add.1910 = s32[4096,2]{1,0} add(%get-tuple-element.667, %broadcast.3418)
  %sort.99 = (bf16[4096,2]{1,0}, s32[4096,2]{1,0}) sort(%get-tuple-element.666, %add.1910), dimensions={1}, is_stable=true, to_apply=%compare-value-and-index.35
  %get-tuple-element.669 = s32[4096,2]{1,0} get-tuple-element(%sort.99), index=1
  %slice.428 = s32[4096,2]{1,0} slice(%get-tuple-element.669), slice={[0:4096], [0:2]}
  %top_k.107 = s32[1,4096,2]{2,1,0} reshape(%slice.428)
  %lt.114 = pred[1,4096,2]{2,1,0} compare(%top_k.107, %broadcast.3419), direction=LT
  %add.1911 = s32[1,4096,2]{2,1,0} add(%top_k.107, %broadcast.3420)
  %select_n.443 = s32[1,4096,2]{2,1,0} select(%lt.114, %add.1911, %top_k.107)
  %broadcast_in_dim.635 = s32[1,4096,2,1]{3,2,1,0} reshape(%select_n.443)
  %concatenate.302 = s32[1,4096,2,3]{3,2,1,0} concatenate(%add.1356, %iota.2405, %broadcast_in_dim.635), dimensions={3}
  %subtract.110 = s32[1,4096,2,3]{3,2,1,0} subtract(%concatenate.302, %broadcast.3428)
  %scatter.202 = u32[1,4096,8]{2,1,0} scatter(%dynamic-slice.43, %subtract.110, %add.1401), update_window_dims={}, inserted_window_dims={0,1,2}, scatter_dims_to_operand_dims={0,1,2}, index_vector_dim=3, to_apply=%region_450.11537.clone
  %gather.38 = u32[1,4096,2]{2,1,0} gather(%scatter.202, %subtract.110), offset_dims={}, collapsed_slice_dims={0,1,2}, start_index_map={0,1,2}, index_vector_dim=3, slice_sizes={1,1,1}
  %eq.2203 = pred[1,4096,2]{2,1,0} compare(%add.1401, %gather.38), direction=EQ
  %get-tuple-element.668 = bf16[4096,2]{1,0} get-tuple-element(%sort.99), index=0
  %slice.427 = bf16[4096,2]{1,0} slice(%get-tuple-element.668), slice={[0:4096], [0:2]}
  %convert_element_type.2116 = f32[4096,2]{1,0} convert(%slice.427)
  %convert_element_type.2117 = f32[1,4096,2]{2,1,0} reshape(%convert_element_type.2116)
  %reduce.534 = f32[4096]{0} reduce(%convert_element_type.2116, %constant.1450), dimensions={1}, to_apply=%region_451.11546
  %sub.250 = f32[1,4096]{1,0} reshape(%reduce.534)
  %sub.251 = f32[1,4096,2]{2,1,0} broadcast(%sub.250), dimensions={0,1}
  %sub.252 = f32[1,4096,2]{2,1,0} subtract(%convert_element_type.2117, %sub.251)
  %exp.197 = f32[1,4096,2]{2,1,0} exponential(%sub.252)
  %reduce.535 = f32[1,4096]{1,0} reduce(%exp.197, %constant.1360), dimensions={2}, to_apply=%region_452.11555
  %div.884 = f32[1,4096,2]{2,1,0} broadcast(%reduce.535), dimensions={0,1}
  %div.885 = f32[1,4096,2]{2,1,0} divide(%exp.197, %div.884)
  %convert_element_type.2118 = bf16[1,4096,2]{2,1,0} convert(%div.885)
  %select_n.444 = bf16[1,4096,2]{2,1,0} select(%eq.2203, %convert_element_type.2118, %broadcast.3427)
  %scatter.203 = bf16[1,4096,8]{2,1,0} scatter(%broadcast.3379, %subtract.110, %select_n.444), update_window_dims={}, inserted_window_dims={0,1,2}, scatter_dims_to_operand_dims={0,1,2}, index_vector_dim=3, to_apply=%region_453.11564.clone
  %eq.2205 = s32[1,4096,2,8]{3,2,1,0} broadcast(%top_k.107), dimensions={0,1,2}
  %iota.2416 = s32[1,4096,2,8]{3,2,1,0} iota(), iota_dimension=3
  %eq.2206 = pred[1,4096,2,8]{3,2,1,0} compare(%eq.2205, %iota.2416), direction=EQ
  %convert_element_type.2119 = s32[1,4096,2,8]{3,2,1,0} convert(%eq.2206)
  %reshape.11243 = s32[1,8192,8]{2,1,0} reshape(%convert_element_type.2119)
  %sharding_constraint.1069 = s32[1,8192,8]{2,1,0} copy(%reshape.11243)
  %reduce-window.35 = s32[1,8192,8]{2,1,0} reduce-window(%sharding_constraint.1069, %constant.1181), window={size=1x8192x1 pad=0_0x8191_0x0_0}, to_apply=%region_454.11576
  %reshape.11245 = s32[1,4096,2,8]{3,2,1,0} reshape(%reduce-window.35)
  %sharding_constraint.1070 = s32[1,4096,2,8]{3,2,1,0} copy(%reshape.11245)
  %le.78 = pred[1,4096,2,8]{3,2,1,0} compare(%sharding_constraint.1070, %broadcast.3429), direction=LE
  %mul.4974 = s32[1,4096,2,8]{3,2,1,0} select(%le.78, %convert_element_type.2119, %broadcast.3430)
  %reduce.536 = s32[1,4096,8]{2,1,0} reduce(%mul.4974, %constant.1181), dimensions={2}, to_apply=%region_455.11585
  %convert_element_type.2120 = bf16[1,4096,8]{2,1,0} convert(%reduce.536)
  %mul.4975 = bf16[1,4096,8]{2,1,0} multiply(%scatter.203, %convert_element_type.2120)
  %mul.4976 = bf16[1,4096,8,1025]{3,2,1,0} broadcast(%mul.4975), dimensions={0,1,2}
  %mul.4977 = s32[1,8192,8]{2,1,0} multiply(%sharding_constraint.1069, %reduce-window.35)
  %reshape.11246 = s32[1,4096,2,8]{3,2,1,0} reshape(%mul.4977)
  %reduce.537 = s32[1,4096,8]{2,1,0} reduce(%reshape.11246, %constant.1181), dimensions={2}, to_apply=%region_456.11595
  %mul.4981 = s32[1,4096,8]{2,1,0} multiply(%reduce.537, %reduce.536)
  %eq.2207 = s32[1,4096,8,1025]{3,2,1,0} broadcast(%mul.4981), dimensions={0,1,2}
  %iota.2417 = s32[1,4096,8,1025]{3,2,1,0} iota(), iota_dimension=3
  %eq.2208 = pred[1,4096,8,1025]{3,2,1,0} compare(%eq.2207, %iota.2417), direction=EQ
  %convert_element_type.2121 = s32[1,4096,8,1025]{3,2,1,0} convert(%eq.2208)
  %convert_element_type.2122 = bf16[1,4096,8,1025]{3,2,1,0} convert(%convert_element_type.2121)
  %mul.4982 = bf16[1,4096,8,1025]{3,2,1,0} multiply(%mul.4976, %convert_element_type.2122)
  %slice.429 = bf16[1,4096,8,1024]{3,2,1,0} slice(%mul.4982), slice={[0:1], [0:4096], [0:8], [1:1025]}
  %convert_element_type.2123 = pred[1,4096,8,1024]{3,2,1,0} compare(%slice.429, %broadcast.3431), direction=NE
  %sharding_constraint.1071 = pred[1,4096,8,1024]{3,2,1,0} copy(%convert_element_type.2123)
  %dot_general.74 = bf16[1,4096,8,1024]{3,2,1,0} convert(%sharding_constraint.1071)
  %dot.550 = bf16[1,8,1024,4096]{3,2,1,0} dot(%dot_general.74, %sharding_constraint.1067), lhs_batch_dims={0}, lhs_contracting_dims={1}, rhs_batch_dims={0}, rhs_contracting_dims={1}
  %reshape.11249 = bf16[1,8,1,1024,4096]{4,3,2,1,0} reshape(%dot.550)
  %all-to-all.76 = bf16[1,8,1,1024,4096]{4,3,2,1,0} all-to-all(%reshape.11249), channel_id=407, replica_groups=[1,8]<=[8], dimensions={1}
  %transpose.122 = bf16[8,1,1,1024,4096]{4,3,2,0,1} transpose(%all-to-all.76), dimensions={1,0,2,3,4}
  %reshape.11250 = bf16[8,1,1024,4096]{3,2,1,0} reshape(%transpose.122)
  %transpose.123 = bf16[1,8,1024,4096]{3,2,0,1} transpose(%reshape.11250), dimensions={1,0,2,3}
  %sharding_constraint.1072 = bf16[1,8,1024,4096]{3,2,0,1} copy(%transpose.123)
  %get-tuple-element.672 = bf16[1,4096,14336]{2,1,0} get-tuple-element(%remat2.14), index=1
  %sharding_constraint.1073 = bf16[1,4096,14336]{2,1,0} copy(%get-tuple-element.672)
  %dot.551 = bf16[1,8,1024,14336]{3,2,1,0} dot(%sharding_constraint.1072, %sharding_constraint.1073), lhs_batch_dims={0}, lhs_contracting_dims={3}, rhs_batch_dims={0}, rhs_contracting_dims={1}
  %sharding_constraint.1074 = bf16[1,8,1024,14336]{3,2,1,0} copy(%dot.551)
  %neg.202 = bf16[1,8,1024,14336]{3,2,1,0} negate(%sharding_constraint.1074)
  %exp.198 = bf16[1,8,1024,14336]{3,2,1,0} exponential(%neg.202)
  %add.1916 = bf16[1,8,1024,14336]{3,2,1,0} add(%exp.198, %jit_silu_.0)
  %div.886 = bf16[1,8,1024,14336]{3,2,1,0} divide(%jit_silu_.0, %add.1916)
  %mul.4983 = bf16[1,8,1024,14336]{3,2,1,0} multiply(%sharding_constraint.1074, %div.886)
  %sharding_constraint.1075 = bf16[1,4096,4096]{2,1,0} copy(%sharding_constraint.1057)
  %sharding_constraint.1076 = bf16[1,4096,8,1024]{3,2,1,0} copy(%slice.429)
  %dot.552 = bf16[1,4096,8,1024]{3,2,1,0} dot(%sharding_constraint.1075, %sharding_constraint.1076), lhs_batch_dims={0}, lhs_contracting_dims={1}, rhs_batch_dims={0}, rhs_contracting_dims={1}
  %reshape.11253 = bf16[1,4096,8,1,1024]{4,3,2,1,0} reshape(%dot.552)
  %all-to-all.77 = bf16[1,4096,8,1,1024]{4,3,2,1,0} all-to-all(%reshape.11253), channel_id=408, replica_groups=[1,8]<=[8], dimensions={2}
  %transpose.124 = bf16[8,1,4096,1,1024]{4,3,0,2,1} transpose(%all-to-all.77), dimensions={2,0,1,3,4}
  %reshape.11254 = bf16[8,4096,1,1024]{3,2,1,0} reshape(%transpose.124)
  %transpose.125 = bf16[1,8,1024,4096]{2,0,3,1} transpose(%reshape.11254), dimensions={2,0,3,1}
  %sharding_constraint.1077 = bf16[1,8,1024,4096]{2,0,3,1} copy(%transpose.125)
  %get-tuple-element.673 = bf16[1,14336,4096]{2,1,0} get-tuple-element(%remat2.14), index=3
  %sharding_constraint.1078 = bf16[1,14336,4096]{2,1,0} copy(%get-tuple-element.673)
  %dot.553 = bf16[1,8,1024,14336]{3,2,1,0} dot(%sharding_constraint.1077, %sharding_constraint.1078), lhs_batch_dims={0}, lhs_contracting_dims={3}, rhs_batch_dims={0}, rhs_contracting_dims={2}
  %mul.4987 = bf16[1,8,1024,14336]{3,2,1,0} multiply(%mul.4983, %dot.553)
  %sharding_constraint.1079 = bf16[1,8,1024,14336]{3,2,1,0} copy(%mul.4987)
  %get-tuple-element.674 = bf16[1,4096,14336]{2,1,0} get-tuple-element(%remat2.14), index=2
  %sharding_constraint.1080 = bf16[1,4096,14336]{2,1,0} copy(%get-tuple-element.674)
  %dot.554 = bf16[1,8,1024,4096]{3,2,1,0} dot(%sharding_constraint.1079, %sharding_constraint.1080), lhs_batch_dims={0}, lhs_contracting_dims={3}, rhs_batch_dims={0}, rhs_contracting_dims={2}
  %dot.555 = bf16[1,8,1024,14336]{3,2,1,0} dot(%sharding_constraint.1072, %sharding_constraint.1080), lhs_batch_dims={0}, lhs_contracting_dims={3}, rhs_batch_dims={0}, rhs_contracting_dims={1}
  %sharding_constraint.1081 = bf16[1,8,1024,14336]{3,2,1,0} copy(%dot.555)
  %mul.4994 = bf16[1,8,1024,14336]{3,2,1,0} multiply(%dot.553, %sharding_constraint.1081)
  %mul.4995 = bf16[1,8,1024,14336]{3,2,1,0} multiply(%mul.4994, %div.886)
  %mul.4996 = bf16[1,8,1024,14336]{3,2,1,0} multiply(%sharding_constraint.1074, %mul.4994)
  %sub.253 = bf16[1,8,1024,14336]{3,2,1,0} subtract(%jit_silu_.0, %div.886)
  %mul.4997 = bf16[1,8,1024,14336]{3,2,1,0} multiply(%div.886, %sub.253)
  %mul.4998 = bf16[1,8,1024,14336]{3,2,1,0} multiply(%mul.4996, %mul.4997)
  %add_any.109 = bf16[1,8,1024,14336]{3,2,1,0} add(%mul.4995, %mul.4998)
  %sharding_constraint.1084 = bf16[1,8,1024,14336]{3,2,1,0} copy(%add_any.109)
  %dot.556 = bf16[1,8,1024,4096]{3,2,1,0} dot(%sharding_constraint.1084, %sharding_constraint.1073), lhs_batch_dims={0}, lhs_contracting_dims={3}, rhs_batch_dims={0}, rhs_contracting_dims={2}
  %add_any.110 = bf16[1,8,1024,4096]{3,2,1,0} add(%dot.554, %dot.556)
  %sharding_constraint.1085 = bf16[1,8,1024,4096]{3,2,1,0} copy(%add_any.110)
  %transpose.126 = bf16[8,1,1024,4096]{3,2,0,1} transpose(%sharding_constraint.1085), dimensions={1,0,2,3}
  %reshape.11257 = bf16[8,1,1,1024,4096]{4,3,2,1,0} reshape(%transpose.126)
  %all-to-all.78 = bf16[8,1,1,1024,4096]{4,3,2,1,0} all-to-all(%reshape.11257), channel_id=409, replica_groups=[1,8]<=[8], dimensions={0}
  %transpose.127 = bf16[1,8,1,1024,4096]{4,3,2,0,1} transpose(%all-to-all.78), dimensions={1,0,2,3,4}
  %reshape.11258 = bf16[1,8,1024,4096]{3,2,1,0} reshape(%transpose.127)
  %dot.557 = bf16[1,4096,4096]{2,1,0} dot(%dot_general.74, %reshape.11258), lhs_batch_dims={0}, lhs_contracting_dims={2,3}, rhs_batch_dims={0}, rhs_contracting_dims={1,2}
  %reshape.11260 = s32[1,4096,2,1]{3,2,1,0} reshape(%slice.428)
  %ge.3 = pred[1,4096,2,3]{3,2,1,0} compare(%concatenate.302, %broadcast.3629), direction=GE
  %le.80 = pred[1,4096,2,3]{3,2,1,0} compare(%concatenate.302, %le.67), direction=LE
  %and.139 = pred[1,4096,2,3]{3,2,1,0} and(%ge.3, %le.80)
  %reduce.538 = pred[1,4096,2]{2,1,0} reduce(%and.139, %constant.5574), dimensions={3}, to_apply=%region_457.11652
  %mul.4999 = bf16[1,8,1024,14336]{3,2,1,0} multiply(%mul.4983, %sharding_constraint.1081)
  %dot.558 = bf16[1,8,1024,4096]{3,2,1,0} dot(%mul.4999, %sharding_constraint.1078), lhs_batch_dims={0}, lhs_contracting_dims={3}, rhs_batch_dims={0}, rhs_contracting_dims={1}
  %sharding_constraint.1086 = bf16[1,8,1024,4096]{3,2,1,0} copy(%dot.558)
  %reshape.11267 = bf16[1,8,1,1024,4096]{4,3,2,1,0} reshape(%sharding_constraint.1086)
  %all-to-all.79 = bf16[1,8,1,1024,4096]{4,3,2,1,0} all-to-all(%reshape.11267), channel_id=410, replica_groups=[1,8]<=[8], dimensions={1}
  %transpose.128 = bf16[8,1,1,1024,4096]{4,3,2,0,1} transpose(%all-to-all.79), dimensions={1,0,2,3,4}
  %reshape.11268 = bf16[8,1,1024,4096]{3,2,1,0} reshape(%transpose.128)
  %dot.559 = bf16[1,4096,8,1024]{3,2,1,0} dot(%sharding_constraint.1075, %reshape.11268), lhs_batch_dims={0}, lhs_contracting_dims={2}, rhs_batch_dims={1}, rhs_contracting_dims={3}
  %sharding_constraint.1087 = bf16[1,4096,8,1024]{3,2,1,0} copy(%dot.559)
  %pad.3 = bf16[1,4096,8,1025]{3,2,1,0} pad(%sharding_constraint.1087, %constant.1190), padding=0_0x0_0x0_0x1_0
  %mul.5000 = bf16[1,4096,8,1025]{3,2,1,0} multiply(%pad.3, %convert_element_type.2122)
  %reduce.539 = bf16[1,4096,8]{2,1,0} reduce(%mul.5000, %constant.1190), dimensions={3}, to_apply=%region_458.11664
  %mul.5001 = bf16[1,4096,8]{2,1,0} multiply(%reduce.539, %convert_element_type.2120)
  %gather.39 = bf16[1,4096,2]{2,1,0} gather(%mul.5001, %subtract.110), offset_dims={}, collapsed_slice_dims={0,1,2}, start_index_map={0,1,2}, index_vector_dim=3, slice_sizes={1,1,1}
  %select_n.445 = bf16[1,4096,2]{2,1,0} select(%reduce.538, %gather.39, %broadcast.3427)
  %select_n.446 = bf16[1,4096,2]{2,1,0} select(%eq.2203, %select_n.445, %broadcast.3427)
  %convert_element_type.2124 = f32[1,4096,2]{2,1,0} convert(%select_n.446)
  %div.888 = f32[1,4096,2]{2,1,0} divide(%convert_element_type.2124, %div.884)
  %mul.5002 = f32[1,4096]{1,0} multiply(%reduce.535, %reduce.535)
  %div.889 = f32[1,4096]{1,0} divide(%add.1847, %mul.5002)
  %mul.5003 = f32[1,4096,2]{2,1,0} broadcast(%div.889), dimensions={0,1}
  %mul.5004 = f32[1,4096,2]{2,1,0} multiply(%convert_element_type.2124, %mul.5003)
  %mul.5005 = f32[1,4096,2]{2,1,0} multiply(%mul.5004, %exp.197)
  %reduce.540 = f32[1,4096]{1,0} reduce(%mul.5005, %constant.1360), dimensions={2}, to_apply=%region_459.11681
  %neg.203 = f32[1,4096]{1,0} negate(%reduce.540)
  %broadcast_in_dim.636 = f32[1,4096,2]{2,1,0} broadcast(%neg.203), dimensions={0,1}
  %add_any.111 = f32[1,4096,2]{2,1,0} add(%div.888, %broadcast_in_dim.636)
  %mul.5006 = f32[1,4096,2]{2,1,0} multiply(%add_any.111, %exp.197)
  %convert_element_type.2126 = bf16[1,4096,2]{2,1,0} convert(%mul.5006)
  %scatter.204 = bf16[1,4096,8]{2,1,0} scatter(%broadcast.3379, %reshape.11260, %convert_element_type.2126), update_window_dims={}, inserted_window_dims={2}, scatter_dims_to_operand_dims={2}, input_batching_dims={0,1}, scatter_indices_batching_dims={0,1}, index_vector_dim=3, to_apply=%region_460.11691.clone
  %sharding_constraint.1088 = bf16[1,4096,8]{2,1,0} copy(%scatter.204)
  %dot.560 = bf16[1,4096,4096]{2,1,0} dot(%sharding_constraint.1088, %all-gather.248), lhs_contracting_dims={2}, rhs_contracting_dims={1}
  %add_any.112 = bf16[1,4096,4096]{2,1,0} add(%dot.557, %dot.560)
  %sharding_constraint.1089 = bf16[1,4096,4096]{2,1,0} copy(%add_any.112)
  %mul.5008 = bf16[1,4096,4096]{2,1,0} multiply(%sharding_constraint.1089, %mul.4972)
  %convert_element_type.2127 = f32[1,4096,4096]{2,1,0} convert(%mul.5008)
  %mul.5011 = f32[1,4096,4096]{2,1,0} multiply(%convert_element_type.2127, %mul.4969)
  %mul.5012 = f32[1,4096,4096]{2,1,0} multiply(%convert_element_type.2112, %convert_element_type.2127)
  %reduce.541 = f32[1,4096]{1,0} reduce(%mul.5012, %constant.1360), dimensions={2}, to_apply=%region_461.11707
  %reshape.11280 = f32[1,4096,1]{2,1,0} reshape(%reduce.541)
  %div.890 = f32[1,4096,1]{2,1,0} divide(%rsqrt.136, %add.1909)
  %mul.5013 = f32[1,4096,1]{2,1,0} multiply(%div.890, %broadcast.3620)
  %mul.5014 = f32[1,4096,1]{2,1,0} multiply(%reshape.11280, %mul.5013)
  %mul.5015 = f32[1,4096,1]{2,1,0} multiply(%mul.5014, %mul.4455)
  %mul.5016 = f32[1,4096]{1,0} reshape(%mul.5015)
  %mul.5017 = f32[1,4096,4096]{2,1,0} broadcast(%mul.5016), dimensions={0,1}
  %mul.5018 = f32[1,4096,4096]{2,1,0} multiply(%convert_element_type.2112, %mul.5017)
  %add_any.113 = f32[1,4096,4096]{2,1,0} add(%mul.5011, %mul.5018)
  %convert_element_type.2128 = bf16[1,4096,4096]{2,1,0} convert(%add_any.113)
  %add_any.114 = bf16[1,4096,4096]{2,1,0} add(%sharding_constraint.1057, %convert_element_type.2128)
  %get-tuple-element.675 = f32[1,32,4096,1]{3,2,1,0} get-tuple-element(%te_fused_attn_forward_ffi.140), index=1
  %get-tuple-element.676 = u32[2,4]{1,0} get-tuple-element(%te_fused_attn_forward_ffi.140), index=2
  %sharding_constraint.1090 = u32[2,4]{1,0} copy(%get-tuple-element.676)
  %sharding_constraint.1091 = bf16[1,4096,4096]{2,1,0} copy(%add_any.114)
  %dot.561 = bf16[1,4096,32,128]{3,2,1,0} dot(%sharding_constraint.1091, %all-gather.247), lhs_contracting_dims={2}, rhs_contracting_dims={2}
  %sharding_constraint.1092 = bf16[1,4096,32,128]{3,2,1,0} copy(%dot.561)
  %te_fused_attn_backward_ffi.10 = (bf16[1,4096,32,128]{3,2,1,0}, bf16[1,4096,8,128]{3,2,1,0}, bf16[1,4096,8,128]{3,2,1,0}, bf16[0]{0}, u8[134742064]{0}) custom-call(%sharding_constraint.1061, %sharding_constraint.1063, %sharding_constraint.1064, %constant.1403, %get-tuple-element.675, /*index=5*/%sharding_constraint.1090, %get-tuple-element.662, %sharding_constraint.1092, %concatenate.300, %concatenate.301, /*index=10*/%constant.1416, %constant.1416, %constant.1416, %constant.1416, %constant.1416, /*index=15*/%constant.1416), custom_call_target="te_fused_attn_backward_ffi", operand_layout_constraints={bf16[1,4096,32,128]{3,2,1,0}, bf16[1,4096,8,128]{3,2,1,0}, bf16[1,4096,8,128]{3,2,1,0}, bf16[0]{0}, f32[1,32,4096,1]{3,2,1,0}, u32[2,4]{1,0}, bf16[1,4096,32,128]{3,2,1,0}, bf16[1,4096,32,128]{3,2,1,0}, s32[2]{0}, s32[2]{0}, f32[0]{0}, f32[0]{0}, f32[0]{0}, f32[0]{0}, f32[0]{0}, f32[0]{0}}, api_version=API_VERSION_TYPED_FFI, backend_config={attn_heads = 32 : i64, bias_batch = 0 : i64, bias_heads = 0 : i64, bias_type = 0 : i64, deterministic = false, dropout_probability = 0.000000e+00 : f64, input_batch = 1 : i64, is_training = true, kv_max_seqlen = 4096 : i64, mask_type = 3 : i64, max_segments_per_seq = 1 : i64, num_gqa_groups = 8 : i64, q_max_seqlen = 4096 : i64, qk_head_dim = 128 : i64, qkv_layout = 9 : i64, scaling_factor = 1.000000e+00 : f64, v_head_dim = 128 : i64, window_size_left = -1 : i64, window_size_right = -1 : i64}
  %get-tuple-element.677 = bf16[1,4096,8,128]{3,2,1,0} get-tuple-element(%te_fused_attn_backward_ffi.10), index=2
  %sharding_constraint.1093 = bf16[1,4096,8,128]{3,2,1,0} copy(%get-tuple-element.677)
  %dot.562 = bf16[1,4096,4096]{2,1,0} dot(%sharding_constraint.1093, %all-gather.246), lhs_contracting_dims={2,3}, rhs_contracting_dims={1,2}
  %get-tuple-element.678 = bf16[1,4096,8,128]{3,2,1,0} get-tuple-element(%te_fused_attn_backward_ffi.10), index=1
  %sharding_constraint.1094 = bf16[1,4096,8,128]{3,2,1,0} copy(%get-tuple-element.678)
  %slice.430 = bf16[1,4096,8,64]{3,2,1,0} slice(%sharding_constraint.1094), slice={[0:1], [0:4096], [0:8], [64:128]}
  %mul.5021 = bf16[1,4096,8,64]{3,2,1,0} multiply(%slice.430, %mul.4940)
  %slice.431 = bf16[1,4096,8,64]{3,2,1,0} slice(%sharding_constraint.1094), slice={[0:1], [0:4096], [0:8], [0:64]}
  %mul.5024 = bf16[1,4096,8,64]{3,2,1,0} multiply(%slice.431, %mul.4936)
  %add_any.115 = bf16[1,4096,8,64]{3,2,1,0} add(%mul.5021, %mul.5024)
  %mul.5027 = bf16[1,4096,8,64]{3,2,1,0} multiply(%slice.430, %mul.4936)
  %neg.204 = bf16[1,4096,8,64]{3,2,1,0} negate(%slice.431)
  %mul.5030 = bf16[1,4096,8,64]{3,2,1,0} multiply(%neg.204, %mul.4940)
  %add_any.116 = bf16[1,4096,8,64]{3,2,1,0} add(%mul.5027, %mul.5030)
  %concatenate.309 = bf16[1,4096,8,128]{3,2,1,0} concatenate(%add_any.115, %add_any.116), dimensions={3}
  %dot.563 = bf16[1,4096,4096]{2,1,0} dot(%concatenate.309, %all-gather.245), lhs_contracting_dims={2,3}, rhs_contracting_dims={1,2}
  %add_any.117 = bf16[1,4096,4096]{2,1,0} add(%dot.562, %dot.563)
  %sharding_constraint.1095 = bf16[1,4096,4096]{2,1,0} copy(%add_any.117)
  %get-tuple-element.679 = bf16[1,4096,32,128]{3,2,1,0} get-tuple-element(%te_fused_attn_backward_ffi.10), index=0
  %sharding_constraint.1096 = bf16[1,4096,32,128]{3,2,1,0} copy(%get-tuple-element.679)
  %slice.432 = bf16[1,4096,32,64]{3,2,1,0} slice(%sharding_constraint.1096), slice={[0:1], [0:4096], [0:32], [64:128]}
  %mul.5037 = bf16[1,4096,32,64]{3,2,1,0} multiply(%slice.432, %mul.4905)
  %slice.433 = bf16[1,4096,32,64]{3,2,1,0} slice(%sharding_constraint.1096), slice={[0:1], [0:4096], [0:32], [0:64]}
  %mul.5044 = bf16[1,4096,32,64]{3,2,1,0} multiply(%slice.433, %mul.4901)
  %add_any.118 = bf16[1,4096,32,64]{3,2,1,0} add(%mul.5037, %mul.5044)
  %mul.5047 = bf16[1,4096,32,64]{3,2,1,0} multiply(%slice.432, %mul.4901)
  %neg.205 = bf16[1,4096,32,64]{3,2,1,0} negate(%slice.433)
  %mul.5054 = bf16[1,4096,32,64]{3,2,1,0} multiply(%neg.205, %mul.4905)
  %add_any.119 = bf16[1,4096,32,64]{3,2,1,0} add(%mul.5047, %mul.5054)
  %concatenate.310 = bf16[1,4096,32,128]{3,2,1,0} concatenate(%add_any.118, %add_any.119), dimensions={3}
  %dot.564 = bf16[1,4096,4096]{2,1,0} dot(%concatenate.310, %all-gather.244), lhs_contracting_dims={2,3}, rhs_contracting_dims={1,2}
  %sharding_constraint.1097 = bf16[1,4096,4096]{2,1,0} copy(%dot.564)
  %add_any.120 = bf16[1,4096,4096]{2,1,0} add(%sharding_constraint.1095, %sharding_constraint.1097)
  %sharding_constraint.1098 = bf16[1,4096,4096]{2,1,0} copy(%add_any.120)
  %mul.5056 = bf16[1,4096,4096]{2,1,0} multiply(%sharding_constraint.1098, %mul.4897)
  %convert_element_type.2129 = f32[1,4096,4096]{2,1,0} convert(%mul.5056)
  %mul.5059 = f32[1,4096,4096]{2,1,0} multiply(%convert_element_type.2129, %mul.4895)
  %mul.5060 = f32[1,4096,4096]{2,1,0} multiply(%convert_element_type.2099, %convert_element_type.2129)
  %reduce.542 = f32[1,4096]{1,0} reduce(%mul.5060, %constant.1360), dimensions={2}, to_apply=%region_462.11786
  %reshape.11287 = f32[1,4096,1]{2,1,0} reshape(%reduce.542)
  %div.891 = f32[1,4096,1]{2,1,0} divide(%rsqrt.135, %add.1904)
  %mul.5061 = f32[1,4096,1]{2,1,0} multiply(%div.891, %broadcast.3620)
  %mul.5062 = f32[1,4096,1]{2,1,0} multiply(%reshape.11287, %mul.5061)
  %mul.5063 = f32[1,4096,1]{2,1,0} multiply(%mul.5062, %mul.4455)
  %mul.5064 = f32[1,4096]{1,0} reshape(%mul.5063)
  %mul.5065 = f32[1,4096,4096]{2,1,0} broadcast(%mul.5064), dimensions={0,1}
  %mul.5066 = f32[1,4096,4096]{2,1,0} multiply(%convert_element_type.2099, %mul.5065)
  %add_any.121 = f32[1,4096,4096]{2,1,0} add(%mul.5059, %mul.5066)
  %convert_element_type.2130 = bf16[1,4096,4096]{2,1,0} convert(%add_any.121)
  %add_any.122 = bf16[1,4096,4096]{2,1,0} add(%add_any.114, %convert_element_type.2130)
  %sharding_constraint.1099 = bf16[1,4096,4096]{2,1,0} copy(%add_any.122)
  %tuple.239 = (bf16[512,8]{1,0}, bf16[1,4096,14336]{2,1,0}, bf16[1,4096,14336]{2,1,0}, bf16[1,14336,4096]{2,1,0}, bf16[4096]{0}, /*index=5*/bf16[4096]{0}, bf16[512,8,128]{2,1,0}, bf16[32,128,512]{2,1,0}, bf16[512,32,128]{2,1,0}, bf16[512,8,128]{2,1,0}, /*index=10*/bf16[1,4096,4096]{2,1,0}, s32[1,4096]{1,0}, s32[1,4096]{1,0}, bf16[1,4096,4096]{2,1,0}) tuple(%param.283, %param.284, %param.285, %param.286, %param.282, /*index=5*/%param.277, %param.279, %param.281, %param.278, %param.280, /*index=10*/%sharding_constraint.810, %param.10, %param.7, %sharding_constraint.1099)
  %remat2.15 = (bf16[512,8]{1,0}, bf16[1,4096,14336]{2,1,0}, bf16[1,4096,14336]{2,1,0}, bf16[1,14336,4096]{2,1,0}, bf16[4096]{0}, /*index=5*/bf16[4096]{0}, bf16[512,8,128]{2,1,0}, bf16[32,128,512]{2,1,0}, bf16[512,32,128]{2,1,0}, bf16[512,8,128]{2,1,0}, /*index=10*/bf16[1,4096,4096]{2,1,0}, s32[1,4096]{1,0}, s32[1,4096]{1,0}, bf16[1,4096,4096]{2,1,0}) opt-barrier(%tuple.239)
  %get-tuple-element.680 = bf16[1,4096,4096]{2,1,0} get-tuple-element(%remat2.15), index=13
  %sharding_constraint.1100 = bf16[1,4096,4096]{2,1,0} copy(%get-tuple-element.680)
  %iota.2422 = s32[1,4096,2,1]{3,2,1,0} iota(), iota_dimension=1
  %get-tuple-element.681 = bf16[1,4096,4096]{2,1,0} get-tuple-element(%remat2.15), index=10
  %sharding_constraint.1101 = bf16[1,4096,4096]{2,1,0} copy(%get-tuple-element.681)
  %convert_element_type.2131 = f32[1,4096,4096]{2,1,0} convert(%sharding_constraint.1101)
  %square.76 = f32[1,4096,4096]{2,1,0} multiply(%convert_element_type.2131, %convert_element_type.2131)
  %reduce.543 = f32[1,4096]{1,0} reduce(%square.76, %constant.1360), dimensions={2}, to_apply=%region_463.11828
  %div.892 = f32[1,4096]{1,0} multiply(%reduce.543, %broadcast.3412)
  %add.1921 = f32[1,4096]{1,0} add(%div.892, %broadcast.3413)
  %add.1922 = f32[1,4096,1]{2,1,0} reshape(%add.1921)
  %rsqrt.137 = f32[1,4096,1]{2,1,0} rsqrt(%add.1922)
  %mul.5067 = f32[1,4096]{1,0} reshape(%rsqrt.137)
  %mul.5068 = f32[1,4096,4096]{2,1,0} broadcast(%mul.5067), dimensions={0,1}
  %mul.5069 = f32[1,4096,4096]{2,1,0} multiply(%convert_element_type.2131, %mul.5068)
  %convert_element_type.2133 = bf16[1,4096,4096]{2,1,0} convert(%mul.5069)
  %get-tuple-element.682 = bf16[4096]{0} get-tuple-element(%remat2.15), index=5
  %mul.5070 = bf16[1,4096,4096]{2,1,0} broadcast(%get-tuple-element.682), dimensions={2}
  %mul.5071 = bf16[1,4096,4096]{2,1,0} multiply(%convert_element_type.2133, %mul.5070)
  %sharding_constraint.1102 = bf16[1,4096,4096]{2,1,0} copy(%mul.5071)
  %sharding_constraint.1103 = bf16[1,4096,4096]{2,1,0} copy(%sharding_constraint.1102)
  %get-tuple-element.683 = bf16[512,32,128]{2,1,0} get-tuple-element(%remat2.15), index=8
  %all-gather.250 = bf16[4096,32,128]{2,1,0} all-gather(%get-tuple-element.683), channel_id=413, replica_groups=[1,8]<=[8], dimensions={0}, use_global_device_ids=true
  %dot.565 = bf16[1,4096,32,128]{3,2,1,0} dot(%sharding_constraint.1103, %all-gather.250), lhs_contracting_dims={2}, rhs_contracting_dims={0}
  %slice.434 = bf16[1,4096,32,64]{3,2,1,0} slice(%dot.565), slice={[0:1], [0:4096], [0:32], [0:64]}
  %get-tuple-element.684 = s32[1,4096]{1,0} get-tuple-element(%remat2.15), index=12
  %convert_element_type.2134 = f32[1,4096]{1,0} convert(%get-tuple-element.684)
  %div.893 = f32[1,4096,1,64]{3,2,1,0} broadcast(%convert_element_type.2134), dimensions={0,1}
  %div.896 = f32[1,4096,1,64]{3,2,1,0} divide(%div.893, %div.402)
  %cos.73 = f32[1,4096,1,64]{3,2,1,0} cosine(%div.896)
  %convert_element_type.2136 = bf16[1,4096,1,64]{3,2,1,0} convert(%cos.73)
  %mul.5073 = bf16[1,4096,64]{2,1,0} reshape(%convert_element_type.2136)
  %mul.5074 = bf16[1,4096,32,64]{3,2,1,0} broadcast(%mul.5073), dimensions={0,1,3}
  %mul.5075 = bf16[1,4096,32,64]{3,2,1,0} multiply(%slice.434, %mul.5074)
  %slice.435 = bf16[1,4096,32,64]{3,2,1,0} slice(%dot.565), slice={[0:1], [0:4096], [0:32], [64:128]}
  %sin.72 = f32[1,4096,1,64]{3,2,1,0} sine(%div.896)
  %convert_element_type.2137 = bf16[1,4096,1,64]{3,2,1,0} convert(%sin.72)
  %mul.5076 = bf16[1,4096,64]{2,1,0} reshape(%convert_element_type.2137)
  %mul.5077 = bf16[1,4096,32,64]{3,2,1,0} broadcast(%mul.5076), dimensions={0,1,3}
  %mul.5078 = bf16[1,4096,32,64]{3,2,1,0} multiply(%slice.435, %mul.5077)
  %sub.254 = bf16[1,4096,32,64]{3,2,1,0} subtract(%mul.5075, %mul.5078)
  %mul.5081 = bf16[1,4096,32,64]{3,2,1,0} multiply(%slice.435, %mul.5074)
  %mul.5084 = bf16[1,4096,32,64]{3,2,1,0} multiply(%slice.434, %mul.5077)
  %add.1923 = bf16[1,4096,32,64]{3,2,1,0} add(%mul.5081, %mul.5084)
  %concatenate.311 = bf16[1,4096,32,128]{3,2,1,0} concatenate(%sub.254, %add.1923), dimensions={3}
  %sharding_constraint.1106 = bf16[1,4096,32,128]{3,2,1,0} copy(%concatenate.311)
  %get-tuple-element.685 = bf16[512,8,128]{2,1,0} get-tuple-element(%remat2.15), index=6
  %all-gather.251 = bf16[4096,8,128]{2,1,0} all-gather(%get-tuple-element.685), channel_id=414, replica_groups=[1,8]<=[8], dimensions={0}, use_global_device_ids=true
  %dot.566 = bf16[1,4096,8,128]{3,2,1,0} dot(%sharding_constraint.1103, %all-gather.251), lhs_contracting_dims={2}, rhs_contracting_dims={0}
  %slice.436 = bf16[1,4096,8,64]{3,2,1,0} slice(%dot.566), slice={[0:1], [0:4096], [0:8], [0:64]}
  %mul.5087 = bf16[1,4096,8,64]{3,2,1,0} broadcast(%mul.5073), dimensions={0,1,3}
  %mul.5088 = bf16[1,4096,8,64]{3,2,1,0} multiply(%slice.436, %mul.5087)
  %slice.437 = bf16[1,4096,8,64]{3,2,1,0} slice(%dot.566), slice={[0:1], [0:4096], [0:8], [64:128]}
  %mul.5090 = bf16[1,4096,8,64]{3,2,1,0} broadcast(%mul.5076), dimensions={0,1,3}
  %mul.5091 = bf16[1,4096,8,64]{3,2,1,0} multiply(%slice.437, %mul.5090)
  %sub.255 = bf16[1,4096,8,64]{3,2,1,0} subtract(%mul.5088, %mul.5091)
  %mul.5094 = bf16[1,4096,8,64]{3,2,1,0} multiply(%slice.437, %mul.5087)
  %mul.5097 = bf16[1,4096,8,64]{3,2,1,0} multiply(%slice.436, %mul.5090)
  %add.1924 = bf16[1,4096,8,64]{3,2,1,0} add(%mul.5094, %mul.5097)
  %concatenate.312 = bf16[1,4096,8,128]{3,2,1,0} concatenate(%sub.255, %add.1924), dimensions={3}
  %sharding_constraint.1108 = bf16[1,4096,8,128]{3,2,1,0} copy(%concatenate.312)
  %get-tuple-element.686 = bf16[512,8,128]{2,1,0} get-tuple-element(%remat2.15), index=9
  %all-gather.252 = bf16[4096,8,128]{2,1,0} all-gather(%get-tuple-element.686), channel_id=415, replica_groups=[1,8]<=[8], dimensions={0}, use_global_device_ids=true
  %dot.567 = bf16[1,4096,8,128]{3,2,1,0} dot(%sharding_constraint.1103, %all-gather.252), lhs_contracting_dims={2}, rhs_contracting_dims={0}
  %sharding_constraint.1109 = bf16[1,4096,8,128]{3,2,1,0} copy(%dot.567)
  %get-tuple-element.687 = s32[1,4096]{1,0} get-tuple-element(%remat2.15), index=11
  %eq.2210 = s32[1,4096,4096]{2,1,0} broadcast(%get-tuple-element.687), dimensions={0,1}
  %eq.2211 = s32[1,4096,4096]{2,1,0} broadcast(%get-tuple-element.687), dimensions={0,2}
  %eq.2212 = pred[1,4096,4096]{2,1,0} compare(%eq.2210, %eq.2211), direction=EQ
  %and.141 = pred[1,4096,4096]{2,1,0} and(%eq.2212, %and.64)
  %select_n.449 = f32[1,4096,4096]{2,1,0} select(%and.141, %broadcast_in_dim.516, %broadcast_in_dim.517)
  %ne.102 = pred[1,4096,4096]{2,1,0} compare(%select_n.449, %broadcast_in_dim.516), direction=NE
  %not.100 = pred[1,4096,4096]{2,1,0} not(%ne.102)
  %convert_element_type.2144 = s32[1,4096,4096]{2,1,0} convert(%not.100)
  %reduce.544 = s32[1,4096]{1,0} reduce(%convert_element_type.2144, %constant.1181), dimensions={1}, to_apply=%region_464.11924
  %reduce_sum.5700 = s32[1,1,1,4096]{3,2,1,0} reshape(%reduce.544)
  %slice.438 = s32[1,1,1,1]{3,2,1,0} slice(%reduce_sum.5700), slice={[0:1], [0:1], [0:1], [0:1]}
  %squeeze.36 = s32[1,1]{1,0} reshape(%slice.438)
  %reshape.11294 = s32[1]{0} reshape(%squeeze.36)
  %lt.117 = pred[1]{0} compare(%reshape.11294, %constant.1418), direction=LT
  %select_n.450 = s32[1]{0} select(%lt.117, %broadcast_in_dim.518, %reshape.11294)
  %concatenate.313 = s32[2]{0} concatenate(%constant.1418, %select_n.450), dimensions={0}
  %reduce.545 = s32[1,4096]{1,0} reduce(%convert_element_type.2144, %constant.1181), dimensions={2}, to_apply=%region_465.11933
  %reduce_sum.5701 = s32[1,1,1,4096]{3,2,1,0} reshape(%reduce.545)
  %reduce.546 = s32[1,1]{1,0} reduce(%reduce_sum.5701, %constant.1415), dimensions={3,2}, to_apply=%region_466.11939
  %reshape.11295 = s32[1]{0} reshape(%reduce.546)
  %lt.118 = pred[1]{0} compare(%reshape.11295, %constant.1418), direction=LT
  %select_n.451 = s32[1]{0} select(%lt.118, %broadcast_in_dim.518, %reshape.11295)
  %concatenate.314 = s32[2]{0} concatenate(%constant.1418, %select_n.451), dimensions={0}
  %te_fused_attn_forward_ffi.144 = (bf16[1,4096,32,128]{3,2,1,0}, f32[1,32,4096,1]{3,2,1,0}, u32[2,4]{1,0}, u8[48]{0}) custom-call(%sharding_constraint.1106, %sharding_constraint.1108, %sharding_constraint.1109, %constant.1403, %dynamic-slice.38, /*index=5*/%concatenate.313, %concatenate.314, %constant.1416, %constant.1416, %constant.1416, /*index=10*/%constant.1416, %constant.1416, %constant.1416), custom_call_target="te_fused_attn_forward_ffi", operand_layout_constraints={bf16[1,4096,32,128]{3,2,1,0}, bf16[1,4096,8,128]{3,2,1,0}, bf16[1,4096,8,128]{3,2,1,0}, bf16[0]{0}, u32[2]{0}, s32[2]{0}, s32[2]{0}, f32[0]{0}, f32[0]{0}, f32[0]{0}, f32[0]{0}, f32[0]{0}, f32[0]{0}}, api_version=API_VERSION_TYPED_FFI, backend_config={attn_heads = 32 : i64, bias_batch = 0 : i64, bias_heads = 0 : i64, bias_type = 0 : i64, deterministic = false, dropout_probability = 0.000000e+00 : f64, input_batch = 1 : i64, is_training = true, kv_max_seqlen = 4096 : i64, mask_type = 3 : i64, max_segments_per_seq = 1 : i64, num_gqa_groups = 8 : i64, q_max_seqlen = 4096 : i64, qk_head_dim = 128 : i64, qkv_layout = 9 : i64, scaling_factor = 1.000000e+00 : f64, v_head_dim = 128 : i64, window_size_left = -1 : i64, window_size_right = -1 : i64}
  %get-tuple-element.688 = bf16[1,4096,32,128]{3,2,1,0} get-tuple-element(%te_fused_attn_forward_ffi.144), index=0
  %sharding_constraint.1110 = bf16[1,4096,32,128]{3,2,1,0} copy(%get-tuple-element.688)
  %get-tuple-element.689 = bf16[32,128,512]{2,1,0} get-tuple-element(%remat2.15), index=7
  %all-gather.253 = bf16[32,128,4096]{2,1,0} all-gather(%get-tuple-element.689), channel_id=416, replica_groups=[1,8]<=[8], dimensions={2}, use_global_device_ids=true
  %dot.568 = bf16[1,4096,4096]{2,1,0} dot(%sharding_constraint.1110, %all-gather.253), lhs_contracting_dims={2,3}, rhs_contracting_dims={0,1}
  %sharding_constraint.1111 = bf16[1,4096,4096]{2,1,0} copy(%dot.568)
  %add.1925 = bf16[1,4096,4096]{2,1,0} add(%sharding_constraint.1101, %sharding_constraint.1111)
  %convert_element_type.2146 = f32[1,4096,4096]{2,1,0} convert(%add.1925)
  %square.77 = f32[1,4096,4096]{2,1,0} multiply(%convert_element_type.2146, %convert_element_type.2146)
  %reduce.547 = f32[1,4096]{1,0} reduce(%square.77, %constant.1360), dimensions={2}, to_apply=%region_467.11954
  %div.901 = f32[1,4096]{1,0} multiply(%reduce.547, %broadcast.3412)
  %add.1927 = f32[1,4096]{1,0} add(%div.901, %broadcast.3413)
  %add.1928 = f32[1,4096,1]{2,1,0} reshape(%add.1927)
  %rsqrt.138 = f32[1,4096,1]{2,1,0} rsqrt(%add.1928)
  %mul.5098 = f32[1,4096]{1,0} reshape(%rsqrt.138)
  %mul.5099 = f32[1,4096,4096]{2,1,0} broadcast(%mul.5098), dimensions={0,1}
  %mul.5100 = f32[1,4096,4096]{2,1,0} multiply(%convert_element_type.2146, %mul.5099)
  %convert_element_type.2147 = bf16[1,4096,4096]{2,1,0} convert(%mul.5100)
  %get-tuple-element.690 = bf16[4096]{0} get-tuple-element(%remat2.15), index=4
  %mul.5101 = bf16[1,4096,4096]{2,1,0} broadcast(%get-tuple-element.690), dimensions={2}
  %mul.5102 = bf16[1,4096,4096]{2,1,0} multiply(%convert_element_type.2147, %mul.5101)
  %sharding_constraint.1112 = bf16[1,4096,4096]{2,1,0} copy(%mul.5102)
  %get-tuple-element.691 = bf16[512,8]{1,0} get-tuple-element(%remat2.15), index=0
  %all-gather.254 = bf16[4096,8]{1,0} all-gather(%get-tuple-element.691), channel_id=417, replica_groups=[1,8]<=[8], dimensions={0}, use_global_device_ids=true
  %dot.569 = bf16[1,4096,8]{2,1,0} dot(%sharding_constraint.1112, %all-gather.254), lhs_contracting_dims={2}, rhs_contracting_dims={0}
  %sharding_constraint.1113 = bf16[1,4096,8]{2,1,0} copy(%dot.569)
  %top_k.108 = bf16[4096,8]{1,0} reshape(%sharding_constraint.1113)
  %top_k.109 = (bf16[4096,2]{1,0}, s32[4096,2]{1,0}) custom-call(%top_k.108), custom_call_target="TopK", called_computations={%compare_greater_than.36.11975.clone}
  %get-tuple-element.692 = bf16[4096,2]{1,0} get-tuple-element(%top_k.109), index=0
  %get-tuple-element.693 = s32[4096,2]{1,0} get-tuple-element(%top_k.109), index=1
  %add.1929 = s32[4096,2]{1,0} add(%get-tuple-element.693, %broadcast.3418)
  %sort.100 = (bf16[4096,2]{1,0}, s32[4096,2]{1,0}) sort(%get-tuple-element.692, %add.1929), dimensions={1}, is_stable=true, to_apply=%compare-value-and-index.36
  %get-tuple-element.695 = s32[4096,2]{1,0} get-tuple-element(%sort.100), index=1
  %slice.440 = s32[4096,2]{1,0} slice(%get-tuple-element.695), slice={[0:4096], [0:2]}
  %top_k.110 = s32[1,4096,2]{2,1,0} reshape(%slice.440)
  %lt.119 = pred[1,4096,2]{2,1,0} compare(%top_k.110, %broadcast.3419), direction=LT
  %add.1930 = s32[1,4096,2]{2,1,0} add(%top_k.110, %broadcast.3420)
  %select_n.452 = s32[1,4096,2]{2,1,0} select(%lt.119, %add.1930, %top_k.110)
  %broadcast_in_dim.641 = s32[1,4096,2,1]{3,2,1,0} reshape(%select_n.452)
  %concatenate.315 = s32[1,4096,2,3]{3,2,1,0} concatenate(%add.1356, %iota.2422, %broadcast_in_dim.641), dimensions={3}
  %subtract.114 = s32[1,4096,2,3]{3,2,1,0} subtract(%concatenate.315, %broadcast.3428)
  %scatter.205 = u32[1,4096,8]{2,1,0} scatter(%dynamic-slice.43, %subtract.114, %add.1401), update_window_dims={}, inserted_window_dims={0,1,2}, scatter_dims_to_operand_dims={0,1,2}, index_vector_dim=3, to_apply=%region_468.12011.clone
  %gather.40 = u32[1,4096,2]{2,1,0} gather(%scatter.205, %subtract.114), offset_dims={}, collapsed_slice_dims={0,1,2}, start_index_map={0,1,2}, index_vector_dim=3, slice_sizes={1,1,1}
  %eq.2213 = pred[1,4096,2]{2,1,0} compare(%add.1401, %gather.40), direction=EQ
  %get-tuple-element.694 = bf16[4096,2]{1,0} get-tuple-element(%sort.100), index=0
  %slice.439 = bf16[4096,2]{1,0} slice(%get-tuple-element.694), slice={[0:4096], [0:2]}
  %convert_element_type.2148 = f32[4096,2]{1,0} convert(%slice.439)
  %convert_element_type.2149 = f32[1,4096,2]{2,1,0} reshape(%convert_element_type.2148)
  %reduce.548 = f32[4096]{0} reduce(%convert_element_type.2148, %constant.1450), dimensions={1}, to_apply=%region_469.12020
  %sub.256 = f32[1,4096]{1,0} reshape(%reduce.548)
  %sub.257 = f32[1,4096,2]{2,1,0} broadcast(%sub.256), dimensions={0,1}
  %sub.258 = f32[1,4096,2]{2,1,0} subtract(%convert_element_type.2149, %sub.257)
  %exp.199 = f32[1,4096,2]{2,1,0} exponential(%sub.258)
  %reduce.549 = f32[1,4096]{1,0} reduce(%exp.199, %constant.1360), dimensions={2}, to_apply=%region_470.12029
  %div.902 = f32[1,4096,2]{2,1,0} broadcast(%reduce.549), dimensions={0,1}
  %div.903 = f32[1,4096,2]{2,1,0} divide(%exp.199, %div.902)
  %convert_element_type.2150 = bf16[1,4096,2]{2,1,0} convert(%div.903)
  %select_n.453 = bf16[1,4096,2]{2,1,0} select(%eq.2213, %convert_element_type.2150, %broadcast.3427)
  %scatter.206 = bf16[1,4096,8]{2,1,0} scatter(%broadcast.3379, %subtract.114, %select_n.453), update_window_dims={}, inserted_window_dims={0,1,2}, scatter_dims_to_operand_dims={0,1,2}, index_vector_dim=3, to_apply=%region_471.12038.clone
  %eq.2215 = s32[1,4096,2,8]{3,2,1,0} broadcast(%top_k.110), dimensions={0,1,2}
  %iota.2433 = s32[1,4096,2,8]{3,2,1,0} iota(), iota_dimension=3
  %eq.2216 = pred[1,4096,2,8]{3,2,1,0} compare(%eq.2215, %iota.2433), direction=EQ
  %convert_element_type.2151 = s32[1,4096,2,8]{3,2,1,0} convert(%eq.2216)
  %reshape.11329 = s32[1,8192,8]{2,1,0} reshape(%convert_element_type.2151)
  %sharding_constraint.1114 = s32[1,8192,8]{2,1,0} copy(%reshape.11329)
  %reduce-window.36 = s32[1,8192,8]{2,1,0} reduce-window(%sharding_constraint.1114, %constant.1181), window={size=1x8192x1 pad=0_0x8191_0x0_0}, to_apply=%region_472.12050
  %reshape.11331 = s32[1,4096,2,8]{3,2,1,0} reshape(%reduce-window.36)
  %sharding_constraint.1115 = s32[1,4096,2,8]{3,2,1,0} copy(%reshape.11331)
  %le.82 = pred[1,4096,2,8]{3,2,1,0} compare(%sharding_constraint.1115, %broadcast.3429), direction=LE
  %mul.5103 = s32[1,4096,2,8]{3,2,1,0} select(%le.82, %convert_element_type.2151, %broadcast.3430)
  %reduce.550 = s32[1,4096,8]{2,1,0} reduce(%mul.5103, %constant.1181), dimensions={2}, to_apply=%region_473.12059
  %convert_element_type.2152 = bf16[1,4096,8]{2,1,0} convert(%reduce.550)
  %mul.5104 = bf16[1,4096,8]{2,1,0} multiply(%scatter.206, %convert_element_type.2152)
  %mul.5105 = bf16[1,4096,8,1025]{3,2,1,0} broadcast(%mul.5104), dimensions={0,1,2}
  %mul.5106 = s32[1,8192,8]{2,1,0} multiply(%sharding_constraint.1114, %reduce-window.36)
  %reshape.11332 = s32[1,4096,2,8]{3,2,1,0} reshape(%mul.5106)
  %reduce.551 = s32[1,4096,8]{2,1,0} reduce(%reshape.11332, %constant.1181), dimensions={2}, to_apply=%region_474.12069
  %mul.5107 = s32[1,4096,8]{2,1,0} multiply(%reduce.551, %reduce.550)
  %eq.2217 = s32[1,4096,8,1025]{3,2,1,0} broadcast(%mul.5107), dimensions={0,1,2}
  %iota.2434 = s32[1,4096,8,1025]{3,2,1,0} iota(), iota_dimension=3
  %eq.2218 = pred[1,4096,8,1025]{3,2,1,0} compare(%eq.2217, %iota.2434), direction=EQ
  %convert_element_type.2153 = s32[1,4096,8,1025]{3,2,1,0} convert(%eq.2218)
  %convert_element_type.2154 = bf16[1,4096,8,1025]{3,2,1,0} convert(%convert_element_type.2153)
  %mul.5108 = bf16[1,4096,8,1025]{3,2,1,0} multiply(%mul.5105, %convert_element_type.2154)
  %slice.441 = bf16[1,4096,8,1024]{3,2,1,0} slice(%mul.5108), slice={[0:1], [0:4096], [0:8], [1:1025]}
  %convert_element_type.2156 = pred[1,4096,8,1024]{3,2,1,0} compare(%slice.441, %broadcast.3431), direction=NE
  %sharding_constraint.1116 = pred[1,4096,8,1024]{3,2,1,0} copy(%convert_element_type.2156)
  %dot_general.76 = bf16[1,4096,8,1024]{3,2,1,0} convert(%sharding_constraint.1116)
  %dot.570 = bf16[1,8,1024,4096]{3,2,1,0} dot(%dot_general.76, %sharding_constraint.1112), lhs_batch_dims={0}, lhs_contracting_dims={1}, rhs_batch_dims={0}, rhs_contracting_dims={1}
  %reshape.11335 = bf16[1,8,1,1024,4096]{4,3,2,1,0} reshape(%dot.570)
  %all-to-all.80 = bf16[1,8,1,1024,4096]{4,3,2,1,0} all-to-all(%reshape.11335), channel_id=421, replica_groups=[1,8]<=[8], dimensions={1}
  %transpose.129 = bf16[8,1,1,1024,4096]{4,3,2,0,1} transpose(%all-to-all.80), dimensions={1,0,2,3,4}
  %reshape.11336 = bf16[8,1,1024,4096]{3,2,1,0} reshape(%transpose.129)
  %transpose.130 = bf16[1,8,1024,4096]{3,2,0,1} transpose(%reshape.11336), dimensions={1,0,2,3}
  %sharding_constraint.1117 = bf16[1,8,1024,4096]{3,2,0,1} copy(%transpose.130)
  %get-tuple-element.698 = bf16[1,4096,14336]{2,1,0} get-tuple-element(%remat2.15), index=1
  %sharding_constraint.1118 = bf16[1,4096,14336]{2,1,0} copy(%get-tuple-element.698)
  %dot.571 = bf16[1,8,1024,14336]{3,2,1,0} dot(%sharding_constraint.1117, %sharding_constraint.1118), lhs_batch_dims={0}, lhs_contracting_dims={3}, rhs_batch_dims={0}, rhs_contracting_dims={1}
  %sharding_constraint.1119 = bf16[1,8,1024,14336]{3,2,1,0} copy(%dot.571)
  %neg.206 = bf16[1,8,1024,14336]{3,2,1,0} negate(%sharding_constraint.1119)
  %exp.200 = bf16[1,8,1024,14336]{3,2,1,0} exponential(%neg.206)
  %add.1936 = bf16[1,8,1024,14336]{3,2,1,0} add(%exp.200, %jit_silu_.0)
  %div.904 = bf16[1,8,1024,14336]{3,2,1,0} divide(%jit_silu_.0, %add.1936)
  %mul.5109 = bf16[1,8,1024,14336]{3,2,1,0} multiply(%sharding_constraint.1119, %div.904)
  %sharding_constraint.1120 = bf16[1,4096,4096]{2,1,0} copy(%sharding_constraint.1100)
  %sharding_constraint.1121 = bf16[1,4096,8,1024]{3,2,1,0} copy(%slice.441)
  %dot.572 = bf16[1,4096,8,1024]{3,2,1,0} dot(%sharding_constraint.1120, %sharding_constraint.1121), lhs_batch_dims={0}, lhs_contracting_dims={1}, rhs_batch_dims={0}, rhs_contracting_dims={1}
  %reshape.11339 = bf16[1,4096,8,1,1024]{4,3,2,1,0} reshape(%dot.572)
  %all-to-all.81 = bf16[1,4096,8,1,1024]{4,3,2,1,0} all-to-all(%reshape.11339), channel_id=422, replica_groups=[1,8]<=[8], dimensions={2}
  %transpose.131 = bf16[8,1,4096,1,1024]{4,3,0,2,1} transpose(%all-to-all.81), dimensions={2,0,1,3,4}
  %reshape.11340 = bf16[8,4096,1,1024]{3,2,1,0} reshape(%transpose.131)
  %transpose.132 = bf16[1,8,1024,4096]{2,0,3,1} transpose(%reshape.11340), dimensions={2,0,3,1}
  %sharding_constraint.1122 = bf16[1,8,1024,4096]{2,0,3,1} copy(%transpose.132)
  %get-tuple-element.699 = bf16[1,14336,4096]{2,1,0} get-tuple-element(%remat2.15), index=3
  %sharding_constraint.1123 = bf16[1,14336,4096]{2,1,0} copy(%get-tuple-element.699)
  %dot.573 = bf16[1,8,1024,14336]{3,2,1,0} dot(%sharding_constraint.1122, %sharding_constraint.1123), lhs_batch_dims={0}, lhs_contracting_dims={3}, rhs_batch_dims={0}, rhs_contracting_dims={2}
  %mul.5110 = bf16[1,8,1024,14336]{3,2,1,0} multiply(%mul.5109, %dot.573)
  %sharding_constraint.1124 = bf16[1,8,1024,14336]{3,2,1,0} copy(%mul.5110)
  %get-tuple-element.700 = bf16[1,4096,14336]{2,1,0} get-tuple-element(%remat2.15), index=2
  %sharding_constraint.1125 = bf16[1,4096,14336]{2,1,0} copy(%get-tuple-element.700)
  %dot.574 = bf16[1,8,1024,4096]{3,2,1,0} dot(%sharding_constraint.1124, %sharding_constraint.1125), lhs_batch_dims={0}, lhs_contracting_dims={3}, rhs_batch_dims={0}, rhs_contracting_dims={2}
  %dot.575 = bf16[1,8,1024,14336]{3,2,1,0} dot(%sharding_constraint.1117, %sharding_constraint.1125), lhs_batch_dims={0}, lhs_contracting_dims={3}, rhs_batch_dims={0}, rhs_contracting_dims={1}
  %sharding_constraint.1126 = bf16[1,8,1024,14336]{3,2,1,0} copy(%dot.575)
  %mul.5111 = bf16[1,8,1024,14336]{3,2,1,0} multiply(%dot.573, %sharding_constraint.1126)
  %mul.5112 = bf16[1,8,1024,14336]{3,2,1,0} multiply(%mul.5111, %div.904)
  %mul.5113 = bf16[1,8,1024,14336]{3,2,1,0} multiply(%sharding_constraint.1119, %mul.5111)
  %sub.259 = bf16[1,8,1024,14336]{3,2,1,0} subtract(%jit_silu_.0, %div.904)
  %mul.5114 = bf16[1,8,1024,14336]{3,2,1,0} multiply(%div.904, %sub.259)
  %mul.5115 = bf16[1,8,1024,14336]{3,2,1,0} multiply(%mul.5113, %mul.5114)
  %add_any.123 = bf16[1,8,1024,14336]{3,2,1,0} add(%mul.5112, %mul.5115)
  %sharding_constraint.1127 = bf16[1,8,1024,14336]{3,2,1,0} copy(%add_any.123)
  %dot.576 = bf16[1,8,1024,4096]{3,2,1,0} dot(%sharding_constraint.1127, %sharding_constraint.1118), lhs_batch_dims={0}, lhs_contracting_dims={3}, rhs_batch_dims={0}, rhs_contracting_dims={2}
  %add_any.124 = bf16[1,8,1024,4096]{3,2,1,0} add(%dot.574, %dot.576)
  %sharding_constraint.1128 = bf16[1,8,1024,4096]{3,2,1,0} copy(%add_any.124)
  %transpose.133 = bf16[8,1,1024,4096]{3,2,0,1} transpose(%sharding_constraint.1128), dimensions={1,0,2,3}
  %reshape.11343 = bf16[8,1,1,1024,4096]{4,3,2,1,0} reshape(%transpose.133)
  %all-to-all.82 = bf16[8,1,1,1024,4096]{4,3,2,1,0} all-to-all(%reshape.11343), channel_id=423, replica_groups=[1,8]<=[8], dimensions={0}
  %transpose.134 = bf16[1,8,1,1024,4096]{4,3,2,0,1} transpose(%all-to-all.82), dimensions={1,0,2,3,4}
  %reshape.11344 = bf16[1,8,1024,4096]{3,2,1,0} reshape(%transpose.134)
  %dot.577 = bf16[1,4096,4096]{2,1,0} dot(%dot_general.76, %reshape.11344), lhs_batch_dims={0}, lhs_contracting_dims={2,3}, rhs_batch_dims={0}, rhs_contracting_dims={1,2}
  %reshape.11346 = s32[1,4096,2,1]{3,2,1,0} reshape(%slice.440)
  %ge.4 = pred[1,4096,2,3]{3,2,1,0} compare(%concatenate.315, %broadcast.3629), direction=GE
  %le.84 = pred[1,4096,2,3]{3,2,1,0} compare(%concatenate.315, %le.67), direction=LE
  %and.142 = pred[1,4096,2,3]{3,2,1,0} and(%ge.4, %le.84)
  %reduce.552 = pred[1,4096,2]{2,1,0} reduce(%and.142, %constant.5574), dimensions={3}, to_apply=%region_475.12126
  %mul.5116 = bf16[1,8,1024,14336]{3,2,1,0} multiply(%mul.5109, %sharding_constraint.1126)
  %dot.578 = bf16[1,8,1024,4096]{3,2,1,0} dot(%mul.5116, %sharding_constraint.1123), lhs_batch_dims={0}, lhs_contracting_dims={3}, rhs_batch_dims={0}, rhs_contracting_dims={1}
  %sharding_constraint.1129 = bf16[1,8,1024,4096]{3,2,1,0} copy(%dot.578)
  %reshape.11353 = bf16[1,8,1,1024,4096]{4,3,2,1,0} reshape(%sharding_constraint.1129)
  %all-to-all.83 = bf16[1,8,1,1024,4096]{4,3,2,1,0} all-to-all(%reshape.11353), channel_id=424, replica_groups=[1,8]<=[8], dimensions={1}
  %transpose.135 = bf16[8,1,1,1024,4096]{4,3,2,0,1} transpose(%all-to-all.83), dimensions={1,0,2,3,4}
  %reshape.11354 = bf16[8,1,1024,4096]{3,2,1,0} reshape(%transpose.135)
  %dot.579 = bf16[1,4096,8,1024]{3,2,1,0} dot(%sharding_constraint.1120, %reshape.11354), lhs_batch_dims={0}, lhs_contracting_dims={2}, rhs_batch_dims={1}, rhs_contracting_dims={3}
  %sharding_constraint.1130 = bf16[1,4096,8,1024]{3,2,1,0} copy(%dot.579)
  %pad.4 = bf16[1,4096,8,1025]{3,2,1,0} pad(%sharding_constraint.1130, %constant.1190), padding=0_0x0_0x0_0x1_0
  %mul.5117 = bf16[1,4096,8,1025]{3,2,1,0} multiply(%pad.4, %convert_element_type.2154)
  %reduce.553 = bf16[1,4096,8]{2,1,0} reduce(%mul.5117, %constant.1190), dimensions={3}, to_apply=%region_476.12138
  %mul.5119 = bf16[1,4096,8]{2,1,0} multiply(%reduce.553, %convert_element_type.2152)
  %gather.41 = bf16[1,4096,2]{2,1,0} gather(%mul.5119, %subtract.114), offset_dims={}, collapsed_slice_dims={0,1,2}, start_index_map={0,1,2}, index_vector_dim=3, slice_sizes={1,1,1}
  %select_n.454 = bf16[1,4096,2]{2,1,0} select(%reduce.552, %gather.41, %broadcast.3427)
  %select_n.455 = bf16[1,4096,2]{2,1,0} select(%eq.2213, %select_n.454, %broadcast.3427)
  %convert_element_type.2157 = f32[1,4096,2]{2,1,0} convert(%select_n.455)
  %div.906 = f32[1,4096,2]{2,1,0} divide(%convert_element_type.2157, %div.902)
  %mul.5120 = f32[1,4096]{1,0} multiply(%reduce.549, %reduce.549)
  %div.907 = f32[1,4096]{1,0} divide(%add.1847, %mul.5120)
  %mul.5121 = f32[1,4096,2]{2,1,0} broadcast(%div.907), dimensions={0,1}
  %mul.5122 = f32[1,4096,2]{2,1,0} multiply(%convert_element_type.2157, %mul.5121)
  %mul.5123 = f32[1,4096,2]{2,1,0} multiply(%mul.5122, %exp.199)
  %reduce.554 = f32[1,4096]{1,0} reduce(%mul.5123, %constant.1360), dimensions={2}, to_apply=%region_477.12155
  %neg.207 = f32[1,4096]{1,0} negate(%reduce.554)
  %broadcast_in_dim.642 = f32[1,4096,2]{2,1,0} broadcast(%neg.207), dimensions={0,1}
  %add_any.125 = f32[1,4096,2]{2,1,0} add(%div.906, %broadcast_in_dim.642)
  %mul.5124 = f32[1,4096,2]{2,1,0} multiply(%add_any.125, %exp.199)
  %convert_element_type.2159 = bf16[1,4096,2]{2,1,0} convert(%mul.5124)
  %scatter.207 = bf16[1,4096,8]{2,1,0} scatter(%broadcast.3379, %reshape.11346, %convert_element_type.2159), update_window_dims={}, inserted_window_dims={2}, scatter_dims_to_operand_dims={2}, input_batching_dims={0,1}, scatter_indices_batching_dims={0,1}, index_vector_dim=3, to_apply=%region_478.12165.clone
  %sharding_constraint.1131 = bf16[1,4096,8]{2,1,0} copy(%scatter.207)
  %dot.580 = bf16[1,4096,4096]{2,1,0} dot(%sharding_constraint.1131, %all-gather.254), lhs_contracting_dims={2}, rhs_contracting_dims={1}
  %add_any.126 = bf16[1,4096,4096]{2,1,0} add(%dot.577, %dot.580)
  %sharding_constraint.1132 = bf16[1,4096,4096]{2,1,0} copy(%add_any.126)
  %mul.5128 = bf16[1,4096,4096]{2,1,0} multiply(%sharding_constraint.1132, %mul.5101)
  %convert_element_type.2161 = f32[1,4096,4096]{2,1,0} convert(%mul.5128)
  %mul.5131 = f32[1,4096,4096]{2,1,0} multiply(%convert_element_type.2161, %mul.5099)
  %mul.5132 = f32[1,4096,4096]{2,1,0} multiply(%convert_element_type.2146, %convert_element_type.2161)
  %reduce.555 = f32[1,4096]{1,0} reduce(%mul.5132, %constant.1360), dimensions={2}, to_apply=%region_479.12181
  %reshape.11366 = f32[1,4096,1]{2,1,0} reshape(%reduce.555)
  %div.908 = f32[1,4096,1]{2,1,0} divide(%rsqrt.138, %add.1928)
  %mul.5134 = f32[1,4096,1]{2,1,0} multiply(%div.908, %broadcast.3620)
  %mul.5136 = f32[1,4096,1]{2,1,0} multiply(%reshape.11366, %mul.5134)
  %mul.5141 = f32[1,4096,1]{2,1,0} multiply(%mul.5136, %mul.4455)
  %mul.5145 = f32[1,4096]{1,0} reshape(%mul.5141)
  %mul.5146 = f32[1,4096,4096]{2,1,0} broadcast(%mul.5145), dimensions={0,1}
  %mul.5147 = f32[1,4096,4096]{2,1,0} multiply(%convert_element_type.2146, %mul.5146)
  %add_any.127 = f32[1,4096,4096]{2,1,0} add(%mul.5131, %mul.5147)
  %convert_element_type.2162 = bf16[1,4096,4096]{2,1,0} convert(%add_any.127)
  %add_any.128 = bf16[1,4096,4096]{2,1,0} add(%sharding_constraint.1100, %convert_element_type.2162)
  %get-tuple-element.701 = f32[1,32,4096,1]{3,2,1,0} get-tuple-element(%te_fused_attn_forward_ffi.144), index=1
  %get-tuple-element.702 = u32[2,4]{1,0} get-tuple-element(%te_fused_attn_forward_ffi.144), index=2
  %sharding_constraint.1133 = u32[2,4]{1,0} copy(%get-tuple-element.702)
  %sharding_constraint.1134 = bf16[1,4096,4096]{2,1,0} copy(%add_any.128)
  %dot.581 = bf16[1,4096,32,128]{3,2,1,0} dot(%sharding_constraint.1134, %all-gather.253), lhs_contracting_dims={2}, rhs_contracting_dims={2}
  %sharding_constraint.1135 = bf16[1,4096,32,128]{3,2,1,0} copy(%dot.581)
  %te_fused_attn_backward_ffi.15 = (bf16[1,4096,32,128]{3,2,1,0}, bf16[1,4096,8,128]{3,2,1,0}, bf16[1,4096,8,128]{3,2,1,0}, bf16[0]{0}, u8[134742064]{0}) custom-call(%sharding_constraint.1106, %sharding_constraint.1108, %sharding_constraint.1109, %constant.1403, %get-tuple-element.701, /*index=5*/%sharding_constraint.1133, %get-tuple-element.688, %sharding_constraint.1135, %concatenate.313, %concatenate.314, /*index=10*/%constant.1416, %constant.1416, %constant.1416, %constant.1416, %constant.1416, /*index=15*/%constant.1416), custom_call_target="te_fused_attn_backward_ffi", operand_layout_constraints={bf16[1,4096,32,128]{3,2,1,0}, bf16[1,4096,8,128]{3,2,1,0}, bf16[1,4096,8,128]{3,2,1,0}, bf16[0]{0}, f32[1,32,4096,1]{3,2,1,0}, u32[2,4]{1,0}, bf16[1,4096,32,128]{3,2,1,0}, bf16[1,4096,32,128]{3,2,1,0}, s32[2]{0}, s32[2]{0}, f32[0]{0}, f32[0]{0}, f32[0]{0}, f32[0]{0}, f32[0]{0}, f32[0]{0}}, api_version=API_VERSION_TYPED_FFI, backend_config={attn_heads = 32 : i64, bias_batch = 0 : i64, bias_heads = 0 : i64, bias_type = 0 : i64, deterministic = false, dropout_probability = 0.000000e+00 : f64, input_batch = 1 : i64, is_training = true, kv_max_seqlen = 4096 : i64, mask_type = 3 : i64, max_segments_per_seq = 1 : i64, num_gqa_groups = 8 : i64, q_max_seqlen = 4096 : i64, qk_head_dim = 128 : i64, qkv_layout = 9 : i64, scaling_factor = 1.000000e+00 : f64, v_head_dim = 128 : i64, window_size_left = -1 : i64, window_size_right = -1 : i64}
  %get-tuple-element.703 = bf16[1,4096,8,128]{3,2,1,0} get-tuple-element(%te_fused_attn_backward_ffi.15), index=2
  %sharding_constraint.1136 = bf16[1,4096,8,128]{3,2,1,0} copy(%get-tuple-element.703)
  %dot.582 = bf16[1,4096,4096]{2,1,0} dot(%sharding_constraint.1136, %all-gather.252), lhs_contracting_dims={2,3}, rhs_contracting_dims={1,2}
  %get-tuple-element.704 = bf16[1,4096,8,128]{3,2,1,0} get-tuple-element(%te_fused_attn_backward_ffi.15), index=1
  %sharding_constraint.1137 = bf16[1,4096,8,128]{3,2,1,0} copy(%get-tuple-element.704)
  %slice.442 = bf16[1,4096,8,64]{3,2,1,0} slice(%sharding_constraint.1137), slice={[0:1], [0:4096], [0:8], [64:128]}
  %mul.5150 = bf16[1,4096,8,64]{3,2,1,0} multiply(%slice.442, %mul.5090)
  %slice.443 = bf16[1,4096,8,64]{3,2,1,0} slice(%sharding_constraint.1137), slice={[0:1], [0:4096], [0:8], [0:64]}
  %mul.5154 = bf16[1,4096,8,64]{3,2,1,0} multiply(%slice.443, %mul.5087)
  %add_any.129 = bf16[1,4096,8,64]{3,2,1,0} add(%mul.5150, %mul.5154)
  %mul.5159 = bf16[1,4096,8,64]{3,2,1,0} multiply(%slice.442, %mul.5087)
  %neg.208 = bf16[1,4096,8,64]{3,2,1,0} negate(%slice.443)
  %mul.5162 = bf16[1,4096,8,64]{3,2,1,0} multiply(%neg.208, %mul.5090)
  %add_any.130 = bf16[1,4096,8,64]{3,2,1,0} add(%mul.5159, %mul.5162)
  %concatenate.322 = bf16[1,4096,8,128]{3,2,1,0} concatenate(%add_any.129, %add_any.130), dimensions={3}
  %dot.583 = bf16[1,4096,4096]{2,1,0} dot(%concatenate.322, %all-gather.251), lhs_contracting_dims={2,3}, rhs_contracting_dims={1,2}
  %add_any.131 = bf16[1,4096,4096]{2,1,0} add(%dot.582, %dot.583)
  %sharding_constraint.1138 = bf16[1,4096,4096]{2,1,0} copy(%add_any.131)
  %get-tuple-element.705 = bf16[1,4096,32,128]{3,2,1,0} get-tuple-element(%te_fused_attn_backward_ffi.15), index=0
  %sharding_constraint.1139 = bf16[1,4096,32,128]{3,2,1,0} copy(%get-tuple-element.705)
  %slice.444 = bf16[1,4096,32,64]{3,2,1,0} slice(%sharding_constraint.1139), slice={[0:1], [0:4096], [0:32], [64:128]}
  %mul.5165 = bf16[1,4096,32,64]{3,2,1,0} multiply(%slice.444, %mul.5077)
  %slice.445 = bf16[1,4096,32,64]{3,2,1,0} slice(%sharding_constraint.1139), slice={[0:1], [0:4096], [0:32], [0:64]}
  %mul.5168 = bf16[1,4096,32,64]{3,2,1,0} multiply(%slice.445, %mul.5074)
  %add_any.132 = bf16[1,4096,32,64]{3,2,1,0} add(%mul.5165, %mul.5168)
  %mul.5171 = bf16[1,4096,32,64]{3,2,1,0} multiply(%slice.444, %mul.5074)
  %neg.209 = bf16[1,4096,32,64]{3,2,1,0} negate(%slice.445)
  %mul.5175 = bf16[1,4096,32,64]{3,2,1,0} multiply(%neg.209, %mul.5077)
  %add_any.133 = bf16[1,4096,32,64]{3,2,1,0} add(%mul.5171, %mul.5175)
  %concatenate.323 = bf16[1,4096,32,128]{3,2,1,0} concatenate(%add_any.132, %add_any.133), dimensions={3}
  %dot.584 = bf16[1,4096,4096]{2,1,0} dot(%concatenate.323, %all-gather.250), lhs_contracting_dims={2,3}, rhs_contracting_dims={1,2}
  %sharding_constraint.1140 = bf16[1,4096,4096]{2,1,0} copy(%dot.584)
  %add_any.134 = bf16[1,4096,4096]{2,1,0} add(%sharding_constraint.1138, %sharding_constraint.1140)
  %sharding_constraint.1141 = bf16[1,4096,4096]{2,1,0} copy(%add_any.134)
  %mul.5181 = bf16[1,4096,4096]{2,1,0} multiply(%sharding_constraint.1141, %mul.5070)
  %convert_element_type.2163 = f32[1,4096,4096]{2,1,0} convert(%mul.5181)
  %mul.5188 = f32[1,4096,4096]{2,1,0} multiply(%convert_element_type.2163, %mul.5068)
  %mul.5189 = f32[1,4096,4096]{2,1,0} multiply(%convert_element_type.2131, %convert_element_type.2163)
  %reduce.556 = f32[1,4096]{1,0} reduce(%mul.5189, %constant.1360), dimensions={2}, to_apply=%region_480.12260
  %reshape.11374 = f32[1,4096,1]{2,1,0} reshape(%reduce.556)
  %div.909 = f32[1,4096,1]{2,1,0} divide(%rsqrt.137, %add.1922)
  %mul.5190 = f32[1,4096,1]{2,1,0} multiply(%div.909, %broadcast.3620)
  %mul.5191 = f32[1,4096,1]{2,1,0} multiply(%reshape.11374, %mul.5190)
  %mul.5192 = f32[1,4096,1]{2,1,0} multiply(%mul.5191, %mul.4455)
  %mul.5193 = f32[1,4096]{1,0} reshape(%mul.5192)
  %mul.5195 = f32[1,4096,4096]{2,1,0} broadcast(%mul.5193), dimensions={0,1}
  %mul.5198 = f32[1,4096,4096]{2,1,0} multiply(%convert_element_type.2131, %mul.5195)
  %add_any.135 = f32[1,4096,4096]{2,1,0} add(%mul.5188, %mul.5198)
  %convert_element_type.2164 = bf16[1,4096,4096]{2,1,0} convert(%add_any.135)
  %add_any.136 = bf16[1,4096,4096]{2,1,0} add(%add_any.128, %convert_element_type.2164)
  %sharding_constraint.1142 = bf16[1,4096,4096]{2,1,0} copy(%add_any.136)
  %tuple.243 = (bf16[512,8]{1,0}, bf16[1,4096,14336]{2,1,0}, bf16[1,4096,14336]{2,1,0}, bf16[1,14336,4096]{2,1,0}, bf16[4096]{0}, /*index=5*/bf16[4096]{0}, bf16[512,8,128]{2,1,0}, bf16[32,128,512]{2,1,0}, bf16[512,32,128]{2,1,0}, bf16[512,8,128]{2,1,0}, /*index=10*/bf16[1,4096,4096]{2,1,0}, s32[1,4096]{1,0}, s32[1,4096]{1,0}, bf16[1,4096,4096]{2,1,0}) tuple(%param.273, %param.274, %param.275, %param.276, %param.272, /*index=5*/%param.267, %param.269, %param.271, %param.268, %param.270, /*index=10*/%sharding_constraint.786, %param.10, %param.7, %sharding_constraint.1142)
  %remat2.16 = (bf16[512,8]{1,0}, bf16[1,4096,14336]{2,1,0}, bf16[1,4096,14336]{2,1,0}, bf16[1,14336,4096]{2,1,0}, bf16[4096]{0}, /*index=5*/bf16[4096]{0}, bf16[512,8,128]{2,1,0}, bf16[32,128,512]{2,1,0}, bf16[512,32,128]{2,1,0}, bf16[512,8,128]{2,1,0}, /*index=10*/bf16[1,4096,4096]{2,1,0}, s32[1,4096]{1,0}, s32[1,4096]{1,0}, bf16[1,4096,4096]{2,1,0}) opt-barrier(%tuple.243)
  %get-tuple-element.706 = bf16[1,4096,4096]{2,1,0} get-tuple-element(%remat2.16), index=13
  %sharding_constraint.1145 = bf16[1,4096,4096]{2,1,0} copy(%get-tuple-element.706)
  %iota.2439 = s32[1,4096,2,1]{3,2,1,0} iota(), iota_dimension=1
  %get-tuple-element.707 = bf16[1,4096,4096]{2,1,0} get-tuple-element(%remat2.16), index=10
  %sharding_constraint.1146 = bf16[1,4096,4096]{2,1,0} copy(%get-tuple-element.707)
  %convert_element_type.2165 = f32[1,4096,4096]{2,1,0} convert(%sharding_constraint.1146)
  %square.78 = f32[1,4096,4096]{2,1,0} multiply(%convert_element_type.2165, %convert_element_type.2165)
  %reduce.557 = f32[1,4096]{1,0} reduce(%square.78, %constant.1360), dimensions={2}, to_apply=%region_481.12302
  %div.910 = f32[1,4096]{1,0} multiply(%reduce.557, %broadcast.3412)
  %add.1940 = f32[1,4096]{1,0} add(%div.910, %broadcast.3413)
  %add.1941 = f32[1,4096,1]{2,1,0} reshape(%add.1940)
  %rsqrt.139 = f32[1,4096,1]{2,1,0} rsqrt(%add.1941)
  %mul.5201 = f32[1,4096]{1,0} reshape(%rsqrt.139)
  %mul.5202 = f32[1,4096,4096]{2,1,0} broadcast(%mul.5201), dimensions={0,1}
  %mul.5203 = f32[1,4096,4096]{2,1,0} multiply(%convert_element_type.2165, %mul.5202)
  %convert_element_type.2166 = bf16[1,4096,4096]{2,1,0} convert(%mul.5203)
  %get-tuple-element.708 = bf16[4096]{0} get-tuple-element(%remat2.16), index=5
  %mul.5204 = bf16[1,4096,4096]{2,1,0} broadcast(%get-tuple-element.708), dimensions={2}
  %mul.5205 = bf16[1,4096,4096]{2,1,0} multiply(%convert_element_type.2166, %mul.5204)
  %sharding_constraint.1147 = bf16[1,4096,4096]{2,1,0} copy(%mul.5205)
  %sharding_constraint.1148 = bf16[1,4096,4096]{2,1,0} copy(%sharding_constraint.1147)
  %get-tuple-element.709 = bf16[512,32,128]{2,1,0} get-tuple-element(%remat2.16), index=8
  %all-gather.256 = bf16[4096,32,128]{2,1,0} all-gather(%get-tuple-element.709), channel_id=427, replica_groups=[1,8]<=[8], dimensions={0}, use_global_device_ids=true
  %dot.585 = bf16[1,4096,32,128]{3,2,1,0} dot(%sharding_constraint.1148, %all-gather.256), lhs_contracting_dims={2}, rhs_contracting_dims={0}
  %slice.446 = bf16[1,4096,32,64]{3,2,1,0} slice(%dot.585), slice={[0:1], [0:4096], [0:32], [0:64]}
  %get-tuple-element.710 = s32[1,4096]{1,0} get-tuple-element(%remat2.16), index=12
  %convert_element_type.2167 = f32[1,4096]{1,0} convert(%get-tuple-element.710)
  %div.911 = f32[1,4096,1,64]{3,2,1,0} broadcast(%convert_element_type.2167), dimensions={0,1}
  %div.914 = f32[1,4096,1,64]{3,2,1,0} divide(%div.911, %div.402)
  %cos.75 = f32[1,4096,1,64]{3,2,1,0} cosine(%div.914)
  %convert_element_type.2171 = bf16[1,4096,1,64]{3,2,1,0} convert(%cos.75)
  %mul.5207 = bf16[1,4096,64]{2,1,0} reshape(%convert_element_type.2171)
  %mul.5209 = bf16[1,4096,32,64]{3,2,1,0} broadcast(%mul.5207), dimensions={0,1,3}
  %mul.5210 = bf16[1,4096,32,64]{3,2,1,0} multiply(%slice.446, %mul.5209)
  %slice.447 = bf16[1,4096,32,64]{3,2,1,0} slice(%dot.585), slice={[0:1], [0:4096], [0:32], [64:128]}
  %sin.74 = f32[1,4096,1,64]{3,2,1,0} sine(%div.914)
  %convert_element_type.2172 = bf16[1,4096,1,64]{3,2,1,0} convert(%sin.74)
  %mul.5211 = bf16[1,4096,64]{2,1,0} reshape(%convert_element_type.2172)
  %mul.5212 = bf16[1,4096,32,64]{3,2,1,0} broadcast(%mul.5211), dimensions={0,1,3}
  %mul.5221 = bf16[1,4096,32,64]{3,2,1,0} multiply(%slice.447, %mul.5212)
  %sub.260 = bf16[1,4096,32,64]{3,2,1,0} subtract(%mul.5210, %mul.5221)
  %mul.5235 = bf16[1,4096,32,64]{3,2,1,0} multiply(%slice.447, %mul.5209)
  %mul.5238 = bf16[1,4096,32,64]{3,2,1,0} multiply(%slice.446, %mul.5212)
  %add.1943 = bf16[1,4096,32,64]{3,2,1,0} add(%mul.5235, %mul.5238)
  %concatenate.324 = bf16[1,4096,32,128]{3,2,1,0} concatenate(%sub.260, %add.1943), dimensions={3}
  %sharding_constraint.1149 = bf16[1,4096,32,128]{3,2,1,0} copy(%concatenate.324)
  %get-tuple-element.711 = bf16[512,8,128]{2,1,0} get-tuple-element(%remat2.16), index=6
  %all-gather.257 = bf16[4096,8,128]{2,1,0} all-gather(%get-tuple-element.711), channel_id=428, replica_groups=[1,8]<=[8], dimensions={0}, use_global_device_ids=true
  %dot.586 = bf16[1,4096,8,128]{3,2,1,0} dot(%sharding_constraint.1148, %all-gather.257), lhs_contracting_dims={2}, rhs_contracting_dims={0}
  %slice.448 = bf16[1,4096,8,64]{3,2,1,0} slice(%dot.586), slice={[0:1], [0:4096], [0:8], [0:64]}
  %mul.5242 = bf16[1,4096,8,64]{3,2,1,0} broadcast(%mul.5207), dimensions={0,1,3}
  %mul.5243 = bf16[1,4096,8,64]{3,2,1,0} multiply(%slice.448, %mul.5242)
  %slice.449 = bf16[1,4096,8,64]{3,2,1,0} slice(%dot.586), slice={[0:1], [0:4096], [0:8], [64:128]}
  %mul.5245 = bf16[1,4096,8,64]{3,2,1,0} broadcast(%mul.5211), dimensions={0,1,3}
  %mul.5246 = bf16[1,4096,8,64]{3,2,1,0} multiply(%slice.449, %mul.5245)
  %sub.261 = bf16[1,4096,8,64]{3,2,1,0} subtract(%mul.5243, %mul.5246)
  %mul.5252 = bf16[1,4096,8,64]{3,2,1,0} multiply(%slice.449, %mul.5242)
  %mul.5272 = bf16[1,4096,8,64]{3,2,1,0} multiply(%slice.448, %mul.5245)
  %add.1944 = bf16[1,4096,8,64]{3,2,1,0} add(%mul.5252, %mul.5272)
  %concatenate.325 = bf16[1,4096,8,128]{3,2,1,0} concatenate(%sub.261, %add.1944), dimensions={3}
  %sharding_constraint.1151 = bf16[1,4096,8,128]{3,2,1,0} copy(%concatenate.325)
  %get-tuple-element.712 = bf16[512,8,128]{2,1,0} get-tuple-element(%remat2.16), index=9
  %all-gather.258 = bf16[4096,8,128]{2,1,0} all-gather(%get-tuple-element.712), channel_id=429, replica_groups=[1,8]<=[8], dimensions={0}, use_global_device_ids=true
  %dot.587 = bf16[1,4096,8,128]{3,2,1,0} dot(%sharding_constraint.1148, %all-gather.258), lhs_contracting_dims={2}, rhs_contracting_dims={0}
  %sharding_constraint.1152 = bf16[1,4096,8,128]{3,2,1,0} copy(%dot.587)
  %get-tuple-element.713 = s32[1,4096]{1,0} get-tuple-element(%remat2.16), index=11
  %eq.2220 = s32[1,4096,4096]{2,1,0} broadcast(%get-tuple-element.713), dimensions={0,1}
  %eq.2221 = s32[1,4096,4096]{2,1,0} broadcast(%get-tuple-element.713), dimensions={0,2}
  %eq.2222 = pred[1,4096,4096]{2,1,0} compare(%eq.2220, %eq.2221), direction=EQ
  %and.144 = pred[1,4096,4096]{2,1,0} and(%eq.2222, %and.64)
  %select_n.458 = f32[1,4096,4096]{2,1,0} select(%and.144, %broadcast_in_dim.516, %broadcast_in_dim.517)
  %ne.103 = pred[1,4096,4096]{2,1,0} compare(%select_n.458, %broadcast_in_dim.516), direction=NE
  %not.101 = pred[1,4096,4096]{2,1,0} not(%ne.103)
  %convert_element_type.2180 = s32[1,4096,4096]{2,1,0} convert(%not.101)
  %reduce.558 = s32[1,4096]{1,0} reduce(%convert_element_type.2180, %constant.1181), dimensions={1}, to_apply=%region_482.12398
  %reduce_sum.5702 = s32[1,1,1,4096]{3,2,1,0} reshape(%reduce.558)
  %slice.450 = s32[1,1,1,1]{3,2,1,0} slice(%reduce_sum.5702), slice={[0:1], [0:1], [0:1], [0:1]}
  %squeeze.37 = s32[1,1]{1,0} reshape(%slice.450)
  %reshape.11381 = s32[1]{0} reshape(%squeeze.37)
  %lt.122 = pred[1]{0} compare(%reshape.11381, %constant.1418), direction=LT
  %select_n.459 = s32[1]{0} select(%lt.122, %broadcast_in_dim.518, %reshape.11381)
  %concatenate.326 = s32[2]{0} concatenate(%constant.1418, %select_n.459), dimensions={0}
  %reduce.559 = s32[1,4096]{1,0} reduce(%convert_element_type.2180, %constant.1181), dimensions={2}, to_apply=%region_483.12407
  %reduce_sum.5703 = s32[1,1,1,4096]{3,2,1,0} reshape(%reduce.559)
  %reduce.560 = s32[1,1]{1,0} reduce(%reduce_sum.5703, %constant.1415), dimensions={3,2}, to_apply=%region_484.12413
  %reshape.11382 = s32[1]{0} reshape(%reduce.560)
  %lt.123 = pred[1]{0} compare(%reshape.11382, %constant.1418), direction=LT
  %select_n.460 = s32[1]{0} select(%lt.123, %broadcast_in_dim.518, %reshape.11382)
  %concatenate.327 = s32[2]{0} concatenate(%constant.1418, %select_n.460), dimensions={0}
  %te_fused_attn_forward_ffi.148 = (bf16[1,4096,32,128]{3,2,1,0}, f32[1,32,4096,1]{3,2,1,0}, u32[2,4]{1,0}, u8[48]{0}) custom-call(%sharding_constraint.1149, %sharding_constraint.1151, %sharding_constraint.1152, %constant.1403, %dynamic-slice.38, /*index=5*/%concatenate.326, %concatenate.327, %constant.1416, %constant.1416, %constant.1416, /*index=10*/%constant.1416, %constant.1416, %constant.1416), custom_call_target="te_fused_attn_forward_ffi", operand_layout_constraints={bf16[1,4096,32,128]{3,2,1,0}, bf16[1,4096,8,128]{3,2,1,0}, bf16[1,4096,8,128]{3,2,1,0}, bf16[0]{0}, u32[2]{0}, s32[2]{0}, s32[2]{0}, f32[0]{0}, f32[0]{0}, f32[0]{0}, f32[0]{0}, f32[0]{0}, f32[0]{0}}, api_version=API_VERSION_TYPED_FFI, backend_config={attn_heads = 32 : i64, bias_batch = 0 : i64, bias_heads = 0 : i64, bias_type = 0 : i64, deterministic = false, dropout_probability = 0.000000e+00 : f64, input_batch = 1 : i64, is_training = true, kv_max_seqlen = 4096 : i64, mask_type = 3 : i64, max_segments_per_seq = 1 : i64, num_gqa_groups = 8 : i64, q_max_seqlen = 4096 : i64, qk_head_dim = 128 : i64, qkv_layout = 9 : i64, scaling_factor = 1.000000e+00 : f64, v_head_dim = 128 : i64, window_size_left = -1 : i64, window_size_right = -1 : i64}
  %get-tuple-element.714 = bf16[1,4096,32,128]{3,2,1,0} get-tuple-element(%te_fused_attn_forward_ffi.148), index=0
  %sharding_constraint.1153 = bf16[1,4096,32,128]{3,2,1,0} copy(%get-tuple-element.714)
  %get-tuple-element.715 = bf16[32,128,512]{2,1,0} get-tuple-element(%remat2.16), index=7
  %all-gather.259 = bf16[32,128,4096]{2,1,0} all-gather(%get-tuple-element.715), channel_id=430, replica_groups=[1,8]<=[8], dimensions={2}, use_global_device_ids=true
  %dot.588 = bf16[1,4096,4096]{2,1,0} dot(%sharding_constraint.1153, %all-gather.259), lhs_contracting_dims={2,3}, rhs_contracting_dims={0,1}
  %sharding_constraint.1154 = bf16[1,4096,4096]{2,1,0} copy(%dot.588)
  %add.1945 = bf16[1,4096,4096]{2,1,0} add(%sharding_constraint.1146, %sharding_constraint.1154)
  %convert_element_type.2182 = f32[1,4096,4096]{2,1,0} convert(%add.1945)
  %square.79 = f32[1,4096,4096]{2,1,0} multiply(%convert_element_type.2182, %convert_element_type.2182)
  %reduce.561 = f32[1,4096]{1,0} reduce(%square.79, %constant.1360), dimensions={2}, to_apply=%region_485.12428
  %div.919 = f32[1,4096]{1,0} multiply(%reduce.561, %broadcast.3412)
  %add.1946 = f32[1,4096]{1,0} add(%div.919, %broadcast.3413)
  %add.1947 = f32[1,4096,1]{2,1,0} reshape(%add.1946)
  %rsqrt.140 = f32[1,4096,1]{2,1,0} rsqrt(%add.1947)
  %mul.5273 = f32[1,4096]{1,0} reshape(%rsqrt.140)
  %mul.5274 = f32[1,4096,4096]{2,1,0} broadcast(%mul.5273), dimensions={0,1}
  %mul.5275 = f32[1,4096,4096]{2,1,0} multiply(%convert_element_type.2182, %mul.5274)
  %convert_element_type.2183 = bf16[1,4096,4096]{2,1,0} convert(%mul.5275)
  %get-tuple-element.716 = bf16[4096]{0} get-tuple-element(%remat2.16), index=4
  %mul.5276 = bf16[1,4096,4096]{2,1,0} broadcast(%get-tuple-element.716), dimensions={2}
  %mul.5277 = bf16[1,4096,4096]{2,1,0} multiply(%convert_element_type.2183, %mul.5276)
  %sharding_constraint.1155 = bf16[1,4096,4096]{2,1,0} copy(%mul.5277)
  %get-tuple-element.717 = bf16[512,8]{1,0} get-tuple-element(%remat2.16), index=0
  %all-gather.260 = bf16[4096,8]{1,0} all-gather(%get-tuple-element.717), channel_id=431, replica_groups=[1,8]<=[8], dimensions={0}, use_global_device_ids=true
  %dot.589 = bf16[1,4096,8]{2,1,0} dot(%sharding_constraint.1155, %all-gather.260), lhs_contracting_dims={2}, rhs_contracting_dims={0}
  %sharding_constraint.1156 = bf16[1,4096,8]{2,1,0} copy(%dot.589)
  %top_k.111 = bf16[4096,8]{1,0} reshape(%sharding_constraint.1156)
  %top_k.112 = (bf16[4096,2]{1,0}, s32[4096,2]{1,0}) custom-call(%top_k.111), custom_call_target="TopK", called_computations={%compare_greater_than.37.12449.clone}
  %get-tuple-element.718 = bf16[4096,2]{1,0} get-tuple-element(%top_k.112), index=0
  %get-tuple-element.719 = s32[4096,2]{1,0} get-tuple-element(%top_k.112), index=1
  %add.1948 = s32[4096,2]{1,0} add(%get-tuple-element.719, %broadcast.3418)
  %sort.101 = (bf16[4096,2]{1,0}, s32[4096,2]{1,0}) sort(%get-tuple-element.718, %add.1948), dimensions={1}, is_stable=true, to_apply=%compare-value-and-index.37
  %get-tuple-element.721 = s32[4096,2]{1,0} get-tuple-element(%sort.101), index=1
  %slice.452 = s32[4096,2]{1,0} slice(%get-tuple-element.721), slice={[0:4096], [0:2]}
  %top_k.113 = s32[1,4096,2]{2,1,0} reshape(%slice.452)
  %lt.124 = pred[1,4096,2]{2,1,0} compare(%top_k.113, %broadcast.3419), direction=LT
  %add.1949 = s32[1,4096,2]{2,1,0} add(%top_k.113, %broadcast.3420)
  %select_n.461 = s32[1,4096,2]{2,1,0} select(%lt.124, %add.1949, %top_k.113)
  %broadcast_in_dim.647 = s32[1,4096,2,1]{3,2,1,0} reshape(%select_n.461)
  %concatenate.328 = s32[1,4096,2,3]{3,2,1,0} concatenate(%add.1356, %iota.2439, %broadcast_in_dim.647), dimensions={3}
  %subtract.118 = s32[1,4096,2,3]{3,2,1,0} subtract(%concatenate.328, %broadcast.3428)
  %scatter.208 = u32[1,4096,8]{2,1,0} scatter(%dynamic-slice.43, %subtract.118, %add.1401), update_window_dims={}, inserted_window_dims={0,1,2}, scatter_dims_to_operand_dims={0,1,2}, index_vector_dim=3, to_apply=%region_486.12485.clone
  %gather.42 = u32[1,4096,2]{2,1,0} gather(%scatter.208, %subtract.118), offset_dims={}, collapsed_slice_dims={0,1,2}, start_index_map={0,1,2}, index_vector_dim=3, slice_sizes={1,1,1}
  %eq.2223 = pred[1,4096,2]{2,1,0} compare(%add.1401, %gather.42), direction=EQ
  %get-tuple-element.720 = bf16[4096,2]{1,0} get-tuple-element(%sort.101), index=0
  %slice.451 = bf16[4096,2]{1,0} slice(%get-tuple-element.720), slice={[0:4096], [0:2]}
  %convert_element_type.2184 = f32[4096,2]{1,0} convert(%slice.451)
  %convert_element_type.2185 = f32[1,4096,2]{2,1,0} reshape(%convert_element_type.2184)
  %reduce.562 = f32[4096]{0} reduce(%convert_element_type.2184, %constant.1450), dimensions={1}, to_apply=%region_487.12494
  %sub.262 = f32[1,4096]{1,0} reshape(%reduce.562)
  %sub.263 = f32[1,4096,2]{2,1,0} broadcast(%sub.262), dimensions={0,1}
  %sub.264 = f32[1,4096,2]{2,1,0} subtract(%convert_element_type.2185, %sub.263)
  %exp.201 = f32[1,4096,2]{2,1,0} exponential(%sub.264)
  %reduce.563 = f32[1,4096]{1,0} reduce(%exp.201, %constant.1360), dimensions={2}, to_apply=%region_488.12503
  %div.920 = f32[1,4096,2]{2,1,0} broadcast(%reduce.563), dimensions={0,1}
  %div.921 = f32[1,4096,2]{2,1,0} divide(%exp.201, %div.920)
  %convert_element_type.2186 = bf16[1,4096,2]{2,1,0} convert(%div.921)
  %select_n.462 = bf16[1,4096,2]{2,1,0} select(%eq.2223, %convert_element_type.2186, %broadcast.3427)
  %scatter.209 = bf16[1,4096,8]{2,1,0} scatter(%broadcast.3379, %subtract.118, %select_n.462), update_window_dims={}, inserted_window_dims={0,1,2}, scatter_dims_to_operand_dims={0,1,2}, index_vector_dim=3, to_apply=%region_489.12512.clone
  %eq.2225 = s32[1,4096,2,8]{3,2,1,0} broadcast(%top_k.113), dimensions={0,1,2}
  %iota.2450 = s32[1,4096,2,8]{3,2,1,0} iota(), iota_dimension=3
  %eq.2226 = pred[1,4096,2,8]{3,2,1,0} compare(%eq.2225, %iota.2450), direction=EQ
  %convert_element_type.2187 = s32[1,4096,2,8]{3,2,1,0} convert(%eq.2226)
  %reshape.11416 = s32[1,8192,8]{2,1,0} reshape(%convert_element_type.2187)
  %sharding_constraint.1157 = s32[1,8192,8]{2,1,0} copy(%reshape.11416)
  %reduce-window.37 = s32[1,8192,8]{2,1,0} reduce-window(%sharding_constraint.1157, %constant.1181), window={size=1x8192x1 pad=0_0x8191_0x0_0}, to_apply=%region_490.12524
  %reshape.11419 = s32[1,4096,2,8]{3,2,1,0} reshape(%reduce-window.37)
  %sharding_constraint.1160 = s32[1,4096,2,8]{3,2,1,0} copy(%reshape.11419)
  %le.86 = pred[1,4096,2,8]{3,2,1,0} compare(%sharding_constraint.1160, %broadcast.3429), direction=LE
  %mul.5278 = s32[1,4096,2,8]{3,2,1,0} select(%le.86, %convert_element_type.2187, %broadcast.3430)
  %reduce.564 = s32[1,4096,8]{2,1,0} reduce(%mul.5278, %constant.1181), dimensions={2}, to_apply=%region_491.12533
  %convert_element_type.2188 = bf16[1,4096,8]{2,1,0} convert(%reduce.564)
  %mul.5279 = bf16[1,4096,8]{2,1,0} multiply(%scatter.209, %convert_element_type.2188)
  %mul.5280 = bf16[1,4096,8,1025]{3,2,1,0} broadcast(%mul.5279), dimensions={0,1,2}
  %mul.5281 = s32[1,8192,8]{2,1,0} multiply(%sharding_constraint.1157, %reduce-window.37)
  %reshape.11420 = s32[1,4096,2,8]{3,2,1,0} reshape(%mul.5281)
  %reduce.565 = s32[1,4096,8]{2,1,0} reduce(%reshape.11420, %constant.1181), dimensions={2}, to_apply=%region_492.12543
  %mul.5282 = s32[1,4096,8]{2,1,0} multiply(%reduce.565, %reduce.564)
  %eq.2227 = s32[1,4096,8,1025]{3,2,1,0} broadcast(%mul.5282), dimensions={0,1,2}
  %iota.2451 = s32[1,4096,8,1025]{3,2,1,0} iota(), iota_dimension=3
  %eq.2228 = pred[1,4096,8,1025]{3,2,1,0} compare(%eq.2227, %iota.2451), direction=EQ
  %convert_element_type.2189 = s32[1,4096,8,1025]{3,2,1,0} convert(%eq.2228)
  %convert_element_type.2190 = bf16[1,4096,8,1025]{3,2,1,0} convert(%convert_element_type.2189)
  %mul.5283 = bf16[1,4096,8,1025]{3,2,1,0} multiply(%mul.5280, %convert_element_type.2190)
  %slice.453 = bf16[1,4096,8,1024]{3,2,1,0} slice(%mul.5283), slice={[0:1], [0:4096], [0:8], [1:1025]}
  %convert_element_type.2191 = pred[1,4096,8,1024]{3,2,1,0} compare(%slice.453, %broadcast.3431), direction=NE
  %sharding_constraint.1161 = pred[1,4096,8,1024]{3,2,1,0} copy(%convert_element_type.2191)
  %dot_general.78 = bf16[1,4096,8,1024]{3,2,1,0} convert(%sharding_constraint.1161)
  %dot.590 = bf16[1,8,1024,4096]{3,2,1,0} dot(%dot_general.78, %sharding_constraint.1155), lhs_batch_dims={0}, lhs_contracting_dims={1}, rhs_batch_dims={0}, rhs_contracting_dims={1}
  %reshape.11423 = bf16[1,8,1,1024,4096]{4,3,2,1,0} reshape(%dot.590)
  %all-to-all.84 = bf16[1,8,1,1024,4096]{4,3,2,1,0} all-to-all(%reshape.11423), channel_id=435, replica_groups=[1,8]<=[8], dimensions={1}
  %transpose.136 = bf16[8,1,1,1024,4096]{4,3,2,0,1} transpose(%all-to-all.84), dimensions={1,0,2,3,4}
  %reshape.11424 = bf16[8,1,1024,4096]{3,2,1,0} reshape(%transpose.136)
  %transpose.137 = bf16[1,8,1024,4096]{3,2,0,1} transpose(%reshape.11424), dimensions={1,0,2,3}
  %sharding_constraint.1162 = bf16[1,8,1024,4096]{3,2,0,1} copy(%transpose.137)
  %get-tuple-element.724 = bf16[1,4096,14336]{2,1,0} get-tuple-element(%remat2.16), index=1
  %sharding_constraint.1163 = bf16[1,4096,14336]{2,1,0} copy(%get-tuple-element.724)
  %dot.591 = bf16[1,8,1024,14336]{3,2,1,0} dot(%sharding_constraint.1162, %sharding_constraint.1163), lhs_batch_dims={0}, lhs_contracting_dims={3}, rhs_batch_dims={0}, rhs_contracting_dims={1}
  %sharding_constraint.1164 = bf16[1,8,1024,14336]{3,2,1,0} copy(%dot.591)
  %neg.210 = bf16[1,8,1024,14336]{3,2,1,0} negate(%sharding_constraint.1164)
  %exp.202 = bf16[1,8,1024,14336]{3,2,1,0} exponential(%neg.210)
  %add.1954 = bf16[1,8,1024,14336]{3,2,1,0} add(%exp.202, %jit_silu_.0)
  %div.922 = bf16[1,8,1024,14336]{3,2,1,0} divide(%jit_silu_.0, %add.1954)
  %mul.5284 = bf16[1,8,1024,14336]{3,2,1,0} multiply(%sharding_constraint.1164, %div.922)
  %sharding_constraint.1165 = bf16[1,4096,4096]{2,1,0} copy(%sharding_constraint.1145)
  %sharding_constraint.1166 = bf16[1,4096,8,1024]{3,2,1,0} copy(%slice.453)
  %dot.592 = bf16[1,4096,8,1024]{3,2,1,0} dot(%sharding_constraint.1165, %sharding_constraint.1166), lhs_batch_dims={0}, lhs_contracting_dims={1}, rhs_batch_dims={0}, rhs_contracting_dims={1}
  %reshape.11427 = bf16[1,4096,8,1,1024]{4,3,2,1,0} reshape(%dot.592)
  %all-to-all.85 = bf16[1,4096,8,1,1024]{4,3,2,1,0} all-to-all(%reshape.11427), channel_id=436, replica_groups=[1,8]<=[8], dimensions={2}
  %transpose.138 = bf16[8,1,4096,1,1024]{4,3,0,2,1} transpose(%all-to-all.85), dimensions={2,0,1,3,4}
  %reshape.11428 = bf16[8,4096,1,1024]{3,2,1,0} reshape(%transpose.138)
  %transpose.139 = bf16[1,8,1024,4096]{2,0,3,1} transpose(%reshape.11428), dimensions={2,0,3,1}
  %sharding_constraint.1167 = bf16[1,8,1024,4096]{2,0,3,1} copy(%transpose.139)
  %get-tuple-element.725 = bf16[1,14336,4096]{2,1,0} get-tuple-element(%remat2.16), index=3
  %sharding_constraint.1168 = bf16[1,14336,4096]{2,1,0} copy(%get-tuple-element.725)
  %dot.593 = bf16[1,8,1024,14336]{3,2,1,0} dot(%sharding_constraint.1167, %sharding_constraint.1168), lhs_batch_dims={0}, lhs_contracting_dims={3}, rhs_batch_dims={0}, rhs_contracting_dims={2}
  %mul.5285 = bf16[1,8,1024,14336]{3,2,1,0} multiply(%mul.5284, %dot.593)
  %sharding_constraint.1169 = bf16[1,8,1024,14336]{3,2,1,0} copy(%mul.5285)
  %get-tuple-element.726 = bf16[1,4096,14336]{2,1,0} get-tuple-element(%remat2.16), index=2
  %sharding_constraint.1170 = bf16[1,4096,14336]{2,1,0} copy(%get-tuple-element.726)
  %dot.594 = bf16[1,8,1024,4096]{3,2,1,0} dot(%sharding_constraint.1169, %sharding_constraint.1170), lhs_batch_dims={0}, lhs_contracting_dims={3}, rhs_batch_dims={0}, rhs_contracting_dims={2}
  %dot.595 = bf16[1,8,1024,14336]{3,2,1,0} dot(%sharding_constraint.1162, %sharding_constraint.1170), lhs_batch_dims={0}, lhs_contracting_dims={3}, rhs_batch_dims={0}, rhs_contracting_dims={1}
  %sharding_constraint.1171 = bf16[1,8,1024,14336]{3,2,1,0} copy(%dot.595)
  %mul.5286 = bf16[1,8,1024,14336]{3,2,1,0} multiply(%dot.593, %sharding_constraint.1171)
  %mul.5287 = bf16[1,8,1024,14336]{3,2,1,0} multiply(%mul.5286, %div.922)
  %mul.5288 = bf16[1,8,1024,14336]{3,2,1,0} multiply(%sharding_constraint.1164, %mul.5286)
  %sub.265 = bf16[1,8,1024,14336]{3,2,1,0} subtract(%jit_silu_.0, %div.922)
  %mul.5289 = bf16[1,8,1024,14336]{3,2,1,0} multiply(%div.922, %sub.265)
  %mul.5290 = bf16[1,8,1024,14336]{3,2,1,0} multiply(%mul.5288, %mul.5289)
  %add_any.137 = bf16[1,8,1024,14336]{3,2,1,0} add(%mul.5287, %mul.5290)
  %sharding_constraint.1172 = bf16[1,8,1024,14336]{3,2,1,0} copy(%add_any.137)
  %dot.596 = bf16[1,8,1024,4096]{3,2,1,0} dot(%sharding_constraint.1172, %sharding_constraint.1163), lhs_batch_dims={0}, lhs_contracting_dims={3}, rhs_batch_dims={0}, rhs_contracting_dims={2}
  %add_any.138 = bf16[1,8,1024,4096]{3,2,1,0} add(%dot.594, %dot.596)
  %sharding_constraint.1173 = bf16[1,8,1024,4096]{3,2,1,0} copy(%add_any.138)
  %transpose.140 = bf16[8,1,1024,4096]{3,2,0,1} transpose(%sharding_constraint.1173), dimensions={1,0,2,3}
  %reshape.11431 = bf16[8,1,1,1024,4096]{4,3,2,1,0} reshape(%transpose.140)
  %all-to-all.86 = bf16[8,1,1,1024,4096]{4,3,2,1,0} all-to-all(%reshape.11431), channel_id=437, replica_groups=[1,8]<=[8], dimensions={0}
  %transpose.141 = bf16[1,8,1,1024,4096]{4,3,2,0,1} transpose(%all-to-all.86), dimensions={1,0,2,3,4}
  %reshape.11432 = bf16[1,8,1024,4096]{3,2,1,0} reshape(%transpose.141)
  %dot.597 = bf16[1,4096,4096]{2,1,0} dot(%dot_general.78, %reshape.11432), lhs_batch_dims={0}, lhs_contracting_dims={2,3}, rhs_batch_dims={0}, rhs_contracting_dims={1,2}
  %reshape.11434 = s32[1,4096,2,1]{3,2,1,0} reshape(%slice.452)
  %ge.5 = pred[1,4096,2,3]{3,2,1,0} compare(%concatenate.328, %broadcast.3629), direction=GE
  %le.88 = pred[1,4096,2,3]{3,2,1,0} compare(%concatenate.328, %le.67), direction=LE
  %and.145 = pred[1,4096,2,3]{3,2,1,0} and(%ge.5, %le.88)
  %reduce.566 = pred[1,4096,2]{2,1,0} reduce(%and.145, %constant.5574), dimensions={3}, to_apply=%region_493.12600
  %mul.5291 = bf16[1,8,1024,14336]{3,2,1,0} multiply(%mul.5284, %sharding_constraint.1171)
  %dot.598 = bf16[1,8,1024,4096]{3,2,1,0} dot(%mul.5291, %sharding_constraint.1168), lhs_batch_dims={0}, lhs_contracting_dims={3}, rhs_batch_dims={0}, rhs_contracting_dims={1}
  %sharding_constraint.1174 = bf16[1,8,1024,4096]{3,2,1,0} copy(%dot.598)
  %reshape.11441 = bf16[1,8,1,1024,4096]{4,3,2,1,0} reshape(%sharding_constraint.1174)
  %all-to-all.87 = bf16[1,8,1,1024,4096]{4,3,2,1,0} all-to-all(%reshape.11441), channel_id=438, replica_groups=[1,8]<=[8], dimensions={1}
  %transpose.142 = bf16[8,1,1,1024,4096]{4,3,2,0,1} transpose(%all-to-all.87), dimensions={1,0,2,3,4}
  %reshape.11442 = bf16[8,1,1024,4096]{3,2,1,0} reshape(%transpose.142)
  %dot.599 = bf16[1,4096,8,1024]{3,2,1,0} dot(%sharding_constraint.1165, %reshape.11442), lhs_batch_dims={0}, lhs_contracting_dims={2}, rhs_batch_dims={1}, rhs_contracting_dims={3}
  %sharding_constraint.1175 = bf16[1,4096,8,1024]{3,2,1,0} copy(%dot.599)
  %pad.5 = bf16[1,4096,8,1025]{3,2,1,0} pad(%sharding_constraint.1175, %constant.1190), padding=0_0x0_0x0_0x1_0
  %mul.5292 = bf16[1,4096,8,1025]{3,2,1,0} multiply(%pad.5, %convert_element_type.2190)
  %reduce.567 = bf16[1,4096,8]{2,1,0} reduce(%mul.5292, %constant.1190), dimensions={3}, to_apply=%region_494.12612
  %mul.5293 = bf16[1,4096,8]{2,1,0} multiply(%reduce.567, %convert_element_type.2188)
  %gather.43 = bf16[1,4096,2]{2,1,0} gather(%mul.5293, %subtract.118), offset_dims={}, collapsed_slice_dims={0,1,2}, start_index_map={0,1,2}, index_vector_dim=3, slice_sizes={1,1,1}
  %select_n.463 = bf16[1,4096,2]{2,1,0} select(%reduce.566, %gather.43, %broadcast.3427)
  %select_n.464 = bf16[1,4096,2]{2,1,0} select(%eq.2223, %select_n.463, %broadcast.3427)
  %convert_element_type.2192 = f32[1,4096,2]{2,1,0} convert(%select_n.464)
  %div.924 = f32[1,4096,2]{2,1,0} divide(%convert_element_type.2192, %div.920)
  %mul.5294 = f32[1,4096]{1,0} multiply(%reduce.563, %reduce.563)
  %div.925 = f32[1,4096]{1,0} divide(%add.1847, %mul.5294)
  %mul.5295 = f32[1,4096,2]{2,1,0} broadcast(%div.925), dimensions={0,1}
  %mul.5296 = f32[1,4096,2]{2,1,0} multiply(%convert_element_type.2192, %mul.5295)
  %mul.5297 = f32[1,4096,2]{2,1,0} multiply(%mul.5296, %exp.201)
  %reduce.568 = f32[1,4096]{1,0} reduce(%mul.5297, %constant.1360), dimensions={2}, to_apply=%region_495.12629
  %neg.211 = f32[1,4096]{1,0} negate(%reduce.568)
  %broadcast_in_dim.648 = f32[1,4096,2]{2,1,0} broadcast(%neg.211), dimensions={0,1}
  %add_any.139 = f32[1,4096,2]{2,1,0} add(%div.924, %broadcast_in_dim.648)
  %mul.5298 = f32[1,4096,2]{2,1,0} multiply(%add_any.139, %exp.201)
  %convert_element_type.2193 = bf16[1,4096,2]{2,1,0} convert(%mul.5298)
  %scatter.210 = bf16[1,4096,8]{2,1,0} scatter(%broadcast.3379, %reshape.11434, %convert_element_type.2193), update_window_dims={}, inserted_window_dims={2}, scatter_dims_to_operand_dims={2}, input_batching_dims={0,1}, scatter_indices_batching_dims={0,1}, index_vector_dim=3, to_apply=%region_496.12639.clone
  %sharding_constraint.1177 = bf16[1,4096,8]{2,1,0} copy(%scatter.210)
  %dot.600 = bf16[1,4096,4096]{2,1,0} dot(%sharding_constraint.1177, %all-gather.260), lhs_contracting_dims={2}, rhs_contracting_dims={1}
  %add_any.140 = bf16[1,4096,4096]{2,1,0} add(%dot.597, %dot.600)
  %sharding_constraint.1179 = bf16[1,4096,4096]{2,1,0} copy(%add_any.140)
  %mul.5300 = bf16[1,4096,4096]{2,1,0} multiply(%sharding_constraint.1179, %mul.5276)
  %convert_element_type.2194 = f32[1,4096,4096]{2,1,0} convert(%mul.5300)
  %mul.5303 = f32[1,4096,4096]{2,1,0} multiply(%convert_element_type.2194, %mul.5274)
  %mul.5304 = f32[1,4096,4096]{2,1,0} multiply(%convert_element_type.2182, %convert_element_type.2194)
  %reduce.569 = f32[1,4096]{1,0} reduce(%mul.5304, %constant.1360), dimensions={2}, to_apply=%region_497.12655
  %reshape.11454 = f32[1,4096,1]{2,1,0} reshape(%reduce.569)
  %div.926 = f32[1,4096,1]{2,1,0} divide(%rsqrt.140, %add.1947)
  %mul.5305 = f32[1,4096,1]{2,1,0} multiply(%div.926, %broadcast.3620)
  %mul.5306 = f32[1,4096,1]{2,1,0} multiply(%reshape.11454, %mul.5305)
  %mul.5307 = f32[1,4096,1]{2,1,0} multiply(%mul.5306, %mul.4455)
  %mul.5308 = f32[1,4096]{1,0} reshape(%mul.5307)
  %mul.5309 = f32[1,4096,4096]{2,1,0} broadcast(%mul.5308), dimensions={0,1}
  %mul.5310 = f32[1,4096,4096]{2,1,0} multiply(%convert_element_type.2182, %mul.5309)
  %add_any.141 = f32[1,4096,4096]{2,1,0} add(%mul.5303, %mul.5310)
  %convert_element_type.2196 = bf16[1,4096,4096]{2,1,0} convert(%add_any.141)
  %add_any.142 = bf16[1,4096,4096]{2,1,0} add(%sharding_constraint.1145, %convert_element_type.2196)
  %get-tuple-element.727 = f32[1,32,4096,1]{3,2,1,0} get-tuple-element(%te_fused_attn_forward_ffi.148), index=1
  %get-tuple-element.728 = u32[2,4]{1,0} get-tuple-element(%te_fused_attn_forward_ffi.148), index=2
  %sharding_constraint.1180 = u32[2,4]{1,0} copy(%get-tuple-element.728)
  %sharding_constraint.1184 = bf16[1,4096,4096]{2,1,0} copy(%add_any.142)
  %dot.601 = bf16[1,4096,32,128]{3,2,1,0} dot(%sharding_constraint.1184, %all-gather.259), lhs_contracting_dims={2}, rhs_contracting_dims={2}
  %sharding_constraint.1185 = bf16[1,4096,32,128]{3,2,1,0} copy(%dot.601)
  %te_fused_attn_backward_ffi.20 = (bf16[1,4096,32,128]{3,2,1,0}, bf16[1,4096,8,128]{3,2,1,0}, bf16[1,4096,8,128]{3,2,1,0}, bf16[0]{0}, u8[134742064]{0}) custom-call(%sharding_constraint.1149, %sharding_constraint.1151, %sharding_constraint.1152, %constant.1403, %get-tuple-element.727, /*index=5*/%sharding_constraint.1180, %get-tuple-element.714, %sharding_constraint.1185, %concatenate.326, %concatenate.327, /*index=10*/%constant.1416, %constant.1416, %constant.1416, %constant.1416, %constant.1416, /*index=15*/%constant.1416), custom_call_target="te_fused_attn_backward_ffi", operand_layout_constraints={bf16[1,4096,32,128]{3,2,1,0}, bf16[1,4096,8,128]{3,2,1,0}, bf16[1,4096,8,128]{3,2,1,0}, bf16[0]{0}, f32[1,32,4096,1]{3,2,1,0}, u32[2,4]{1,0}, bf16[1,4096,32,128]{3,2,1,0}, bf16[1,4096,32,128]{3,2,1,0}, s32[2]{0}, s32[2]{0}, f32[0]{0}, f32[0]{0}, f32[0]{0}, f32[0]{0}, f32[0]{0}, f32[0]{0}}, api_version=API_VERSION_TYPED_FFI, backend_config={attn_heads = 32 : i64, bias_batch = 0 : i64, bias_heads = 0 : i64, bias_type = 0 : i64, deterministic = false, dropout_probability = 0.000000e+00 : f64, input_batch = 1 : i64, is_training = true, kv_max_seqlen = 4096 : i64, mask_type = 3 : i64, max_segments_per_seq = 1 : i64, num_gqa_groups = 8 : i64, q_max_seqlen = 4096 : i64, qk_head_dim = 128 : i64, qkv_layout = 9 : i64, scaling_factor = 1.000000e+00 : f64, v_head_dim = 128 : i64, window_size_left = -1 : i64, window_size_right = -1 : i64}
  %get-tuple-element.729 = bf16[1,4096,8,128]{3,2,1,0} get-tuple-element(%te_fused_attn_backward_ffi.20), index=2
  %sharding_constraint.1186 = bf16[1,4096,8,128]{3,2,1,0} copy(%get-tuple-element.729)
  %dot.602 = bf16[1,4096,4096]{2,1,0} dot(%sharding_constraint.1186, %all-gather.258), lhs_contracting_dims={2,3}, rhs_contracting_dims={1,2}
  %get-tuple-element.730 = bf16[1,4096,8,128]{3,2,1,0} get-tuple-element(%te_fused_attn_backward_ffi.20), index=1
  %sharding_constraint.1187 = bf16[1,4096,8,128]{3,2,1,0} copy(%get-tuple-element.730)
  %slice.454 = bf16[1,4096,8,64]{3,2,1,0} slice(%sharding_constraint.1187), slice={[0:1], [0:4096], [0:8], [64:128]}
  %mul.5313 = bf16[1,4096,8,64]{3,2,1,0} multiply(%slice.454, %mul.5245)
  %slice.455 = bf16[1,4096,8,64]{3,2,1,0} slice(%sharding_constraint.1187), slice={[0:1], [0:4096], [0:8], [0:64]}
  %mul.5316 = bf16[1,4096,8,64]{3,2,1,0} multiply(%slice.455, %mul.5242)
  %add_any.143 = bf16[1,4096,8,64]{3,2,1,0} add(%mul.5313, %mul.5316)
  %mul.5319 = bf16[1,4096,8,64]{3,2,1,0} multiply(%slice.454, %mul.5242)
  %neg.212 = bf16[1,4096,8,64]{3,2,1,0} negate(%slice.455)
  %mul.5326 = bf16[1,4096,8,64]{3,2,1,0} multiply(%neg.212, %mul.5245)
  %add_any.144 = bf16[1,4096,8,64]{3,2,1,0} add(%mul.5319, %mul.5326)
  %concatenate.335 = bf16[1,4096,8,128]{3,2,1,0} concatenate(%add_any.143, %add_any.144), dimensions={3}
  %dot.603 = bf16[1,4096,4096]{2,1,0} dot(%concatenate.335, %all-gather.257), lhs_contracting_dims={2,3}, rhs_contracting_dims={1,2}
  %add_any.145 = bf16[1,4096,4096]{2,1,0} add(%dot.602, %dot.603)
  %sharding_constraint.1188 = bf16[1,4096,4096]{2,1,0} copy(%add_any.145)
  %get-tuple-element.731 = bf16[1,4096,32,128]{3,2,1,0} get-tuple-element(%te_fused_attn_backward_ffi.20), index=0
  %sharding_constraint.1189 = bf16[1,4096,32,128]{3,2,1,0} copy(%get-tuple-element.731)
  %slice.456 = bf16[1,4096,32,64]{3,2,1,0} slice(%sharding_constraint.1189), slice={[0:1], [0:4096], [0:32], [64:128]}
  %mul.5329 = bf16[1,4096,32,64]{3,2,1,0} multiply(%slice.456, %mul.5212)
  %slice.457 = bf16[1,4096,32,64]{3,2,1,0} slice(%sharding_constraint.1189), slice={[0:1], [0:4096], [0:32], [0:64]}
  %mul.5332 = bf16[1,4096,32,64]{3,2,1,0} multiply(%slice.457, %mul.5209)
  %add_any.146 = bf16[1,4096,32,64]{3,2,1,0} add(%mul.5329, %mul.5332)
  %mul.5335 = bf16[1,4096,32,64]{3,2,1,0} multiply(%slice.456, %mul.5209)
  %neg.213 = bf16[1,4096,32,64]{3,2,1,0} negate(%slice.457)
  %mul.5346 = bf16[1,4096,32,64]{3,2,1,0} multiply(%neg.213, %mul.5212)
  %add_any.147 = bf16[1,4096,32,64]{3,2,1,0} add(%mul.5335, %mul.5346)
  %concatenate.336 = bf16[1,4096,32,128]{3,2,1,0} concatenate(%add_any.146, %add_any.147), dimensions={3}
  %dot.604 = bf16[1,4096,4096]{2,1,0} dot(%concatenate.336, %all-gather.256), lhs_contracting_dims={2,3}, rhs_contracting_dims={1,2}
  %sharding_constraint.1190 = bf16[1,4096,4096]{2,1,0} copy(%dot.604)
  %add_any.148 = bf16[1,4096,4096]{2,1,0} add(%sharding_constraint.1188, %sharding_constraint.1190)
  %sharding_constraint.1191 = bf16[1,4096,4096]{2,1,0} copy(%add_any.148)
  %mul.5348 = bf16[1,4096,4096]{2,1,0} multiply(%sharding_constraint.1191, %mul.5204)
  %convert_element_type.2197 = f32[1,4096,4096]{2,1,0} convert(%mul.5348)
  %mul.5351 = f32[1,4096,4096]{2,1,0} multiply(%convert_element_type.2197, %mul.5202)
  %mul.5352 = f32[1,4096,4096]{2,1,0} multiply(%convert_element_type.2165, %convert_element_type.2197)
  %reduce.570 = f32[1,4096]{1,0} reduce(%mul.5352, %constant.1360), dimensions={2}, to_apply=%region_498.12734
  %reshape.11461 = f32[1,4096,1]{2,1,0} reshape(%reduce.570)
  %div.927 = f32[1,4096,1]{2,1,0} divide(%rsqrt.139, %add.1941)
  %mul.5353 = f32[1,4096,1]{2,1,0} multiply(%div.927, %broadcast.3620)
  %mul.5354 = f32[1,4096,1]{2,1,0} multiply(%reshape.11461, %mul.5353)
  %mul.5355 = f32[1,4096,1]{2,1,0} multiply(%mul.5354, %mul.4455)
  %mul.5356 = f32[1,4096]{1,0} reshape(%mul.5355)
  %mul.5357 = f32[1,4096,4096]{2,1,0} broadcast(%mul.5356), dimensions={0,1}
  %mul.5358 = f32[1,4096,4096]{2,1,0} multiply(%convert_element_type.2165, %mul.5357)
  %add_any.149 = f32[1,4096,4096]{2,1,0} add(%mul.5351, %mul.5358)
  %convert_element_type.2199 = bf16[1,4096,4096]{2,1,0} convert(%add_any.149)
  %add_any.150 = bf16[1,4096,4096]{2,1,0} add(%add_any.142, %convert_element_type.2199)
  %sharding_constraint.1192 = bf16[1,4096,4096]{2,1,0} copy(%add_any.150)
  %tuple.247 = (bf16[512,8]{1,0}, bf16[1,4096,14336]{2,1,0}, bf16[1,4096,14336]{2,1,0}, bf16[1,14336,4096]{2,1,0}, bf16[4096]{0}, /*index=5*/bf16[4096]{0}, bf16[512,8,128]{2,1,0}, bf16[32,128,512]{2,1,0}, bf16[512,32,128]{2,1,0}, bf16[512,8,128]{2,1,0}, /*index=10*/bf16[1,4096,4096]{2,1,0}, s32[1,4096]{1,0}, s32[1,4096]{1,0}, bf16[1,4096,4096]{2,1,0}) tuple(%param.263, %param.264, %param.265, %param.266, %param.262, /*index=5*/%param.257, %param.259, %param.261, %param.258, %param.260, /*index=10*/%sharding_constraint.762, %param.10, %param.7, %sharding_constraint.1192)
  %remat2.17 = (bf16[512,8]{1,0}, bf16[1,4096,14336]{2,1,0}, bf16[1,4096,14336]{2,1,0}, bf16[1,14336,4096]{2,1,0}, bf16[4096]{0}, /*index=5*/bf16[4096]{0}, bf16[512,8,128]{2,1,0}, bf16[32,128,512]{2,1,0}, bf16[512,32,128]{2,1,0}, bf16[512,8,128]{2,1,0}, /*index=10*/bf16[1,4096,4096]{2,1,0}, s32[1,4096]{1,0}, s32[1,4096]{1,0}, bf16[1,4096,4096]{2,1,0}) opt-barrier(%tuple.247)
  %get-tuple-element.732 = bf16[1,4096,4096]{2,1,0} get-tuple-element(%remat2.17), index=13
  %sharding_constraint.1193 = bf16[1,4096,4096]{2,1,0} copy(%get-tuple-element.732)
  %iota.2456 = s32[1,4096,2,1]{3,2,1,0} iota(), iota_dimension=1
  %get-tuple-element.733 = bf16[1,4096,4096]{2,1,0} get-tuple-element(%remat2.17), index=10
  %sharding_constraint.1194 = bf16[1,4096,4096]{2,1,0} copy(%get-tuple-element.733)
  %convert_element_type.2200 = f32[1,4096,4096]{2,1,0} convert(%sharding_constraint.1194)
  %square.80 = f32[1,4096,4096]{2,1,0} multiply(%convert_element_type.2200, %convert_element_type.2200)
  %reduce.571 = f32[1,4096]{1,0} reduce(%square.80, %constant.1360), dimensions={2}, to_apply=%region_499.12776
  %div.928 = f32[1,4096]{1,0} multiply(%reduce.571, %broadcast.3412)
  %add.1958 = f32[1,4096]{1,0} add(%div.928, %broadcast.3413)
  %add.1959 = f32[1,4096,1]{2,1,0} reshape(%add.1958)
  %rsqrt.141 = f32[1,4096,1]{2,1,0} rsqrt(%add.1959)
  %mul.5359 = f32[1,4096]{1,0} reshape(%rsqrt.141)
  %mul.5360 = f32[1,4096,4096]{2,1,0} broadcast(%mul.5359), dimensions={0,1}
  %mul.5361 = f32[1,4096,4096]{2,1,0} multiply(%convert_element_type.2200, %mul.5360)
  %convert_element_type.2201 = bf16[1,4096,4096]{2,1,0} convert(%mul.5361)
  %get-tuple-element.734 = bf16[4096]{0} get-tuple-element(%remat2.17), index=5
  %mul.5362 = bf16[1,4096,4096]{2,1,0} broadcast(%get-tuple-element.734), dimensions={2}
  %mul.5363 = bf16[1,4096,4096]{2,1,0} multiply(%convert_element_type.2201, %mul.5362)
  %sharding_constraint.1195 = bf16[1,4096,4096]{2,1,0} copy(%mul.5363)
  %sharding_constraint.1196 = bf16[1,4096,4096]{2,1,0} copy(%sharding_constraint.1195)
  %get-tuple-element.735 = bf16[512,32,128]{2,1,0} get-tuple-element(%remat2.17), index=8
  %all-gather.262 = bf16[4096,32,128]{2,1,0} all-gather(%get-tuple-element.735), channel_id=441, replica_groups=[1,8]<=[8], dimensions={0}, use_global_device_ids=true
  %dot.605 = bf16[1,4096,32,128]{3,2,1,0} dot(%sharding_constraint.1196, %all-gather.262), lhs_contracting_dims={2}, rhs_contracting_dims={0}
  %slice.458 = bf16[1,4096,32,64]{3,2,1,0} slice(%dot.605), slice={[0:1], [0:4096], [0:32], [0:64]}
  %get-tuple-element.736 = s32[1,4096]{1,0} get-tuple-element(%remat2.17), index=12
  %convert_element_type.2202 = f32[1,4096]{1,0} convert(%get-tuple-element.736)
  %div.929 = f32[1,4096,1,64]{3,2,1,0} broadcast(%convert_element_type.2202), dimensions={0,1}
  %div.932 = f32[1,4096,1,64]{3,2,1,0} divide(%div.929, %div.402)
  %cos.77 = f32[1,4096,1,64]{3,2,1,0} cosine(%div.932)
  %convert_element_type.2204 = bf16[1,4096,1,64]{3,2,1,0} convert(%cos.77)
  %mul.5365 = bf16[1,4096,64]{2,1,0} reshape(%convert_element_type.2204)
  %mul.5366 = bf16[1,4096,32,64]{3,2,1,0} broadcast(%mul.5365), dimensions={0,1,3}
  %mul.5367 = bf16[1,4096,32,64]{3,2,1,0} multiply(%slice.458, %mul.5366)
  %slice.459 = bf16[1,4096,32,64]{3,2,1,0} slice(%dot.605), slice={[0:1], [0:4096], [0:32], [64:128]}
  %sin.76 = f32[1,4096,1,64]{3,2,1,0} sine(%div.932)
  %convert_element_type.2206 = bf16[1,4096,1,64]{3,2,1,0} convert(%sin.76)
  %mul.5368 = bf16[1,4096,64]{2,1,0} reshape(%convert_element_type.2206)
  %mul.5369 = bf16[1,4096,32,64]{3,2,1,0} broadcast(%mul.5368), dimensions={0,1,3}
  %mul.5370 = bf16[1,4096,32,64]{3,2,1,0} multiply(%slice.459, %mul.5369)
  %sub.266 = bf16[1,4096,32,64]{3,2,1,0} subtract(%mul.5367, %mul.5370)
  %mul.5373 = bf16[1,4096,32,64]{3,2,1,0} multiply(%slice.459, %mul.5366)
  %mul.5376 = bf16[1,4096,32,64]{3,2,1,0} multiply(%slice.458, %mul.5369)
  %add.1960 = bf16[1,4096,32,64]{3,2,1,0} add(%mul.5373, %mul.5376)
  %concatenate.337 = bf16[1,4096,32,128]{3,2,1,0} concatenate(%sub.266, %add.1960), dimensions={3}
  %sharding_constraint.1197 = bf16[1,4096,32,128]{3,2,1,0} copy(%concatenate.337)
  %get-tuple-element.737 = bf16[512,8,128]{2,1,0} get-tuple-element(%remat2.17), index=6
  %all-gather.263 = bf16[4096,8,128]{2,1,0} all-gather(%get-tuple-element.737), channel_id=442, replica_groups=[1,8]<=[8], dimensions={0}, use_global_device_ids=true
  %dot.606 = bf16[1,4096,8,128]{3,2,1,0} dot(%sharding_constraint.1196, %all-gather.263), lhs_contracting_dims={2}, rhs_contracting_dims={0}
  %slice.460 = bf16[1,4096,8,64]{3,2,1,0} slice(%dot.606), slice={[0:1], [0:4096], [0:8], [0:64]}
  %mul.5379 = bf16[1,4096,8,64]{3,2,1,0} broadcast(%mul.5365), dimensions={0,1,3}
  %mul.5380 = bf16[1,4096,8,64]{3,2,1,0} multiply(%slice.460, %mul.5379)
  %slice.461 = bf16[1,4096,8,64]{3,2,1,0} slice(%dot.606), slice={[0:1], [0:4096], [0:8], [64:128]}
  %mul.5382 = bf16[1,4096,8,64]{3,2,1,0} broadcast(%mul.5368), dimensions={0,1,3}
  %mul.5383 = bf16[1,4096,8,64]{3,2,1,0} multiply(%slice.461, %mul.5382)
  %sub.267 = bf16[1,4096,8,64]{3,2,1,0} subtract(%mul.5380, %mul.5383)
  %mul.5386 = bf16[1,4096,8,64]{3,2,1,0} multiply(%slice.461, %mul.5379)
  %mul.5389 = bf16[1,4096,8,64]{3,2,1,0} multiply(%slice.460, %mul.5382)
  %add.1961 = bf16[1,4096,8,64]{3,2,1,0} add(%mul.5386, %mul.5389)
  %concatenate.338 = bf16[1,4096,8,128]{3,2,1,0} concatenate(%sub.267, %add.1961), dimensions={3}
  %sharding_constraint.1199 = bf16[1,4096,8,128]{3,2,1,0} copy(%concatenate.338)
  %get-tuple-element.738 = bf16[512,8,128]{2,1,0} get-tuple-element(%remat2.17), index=9
  %all-gather.264 = bf16[4096,8,128]{2,1,0} all-gather(%get-tuple-element.738), channel_id=443, replica_groups=[1,8]<=[8], dimensions={0}, use_global_device_ids=true
  %dot.607 = bf16[1,4096,8,128]{3,2,1,0} dot(%sharding_constraint.1196, %all-gather.264), lhs_contracting_dims={2}, rhs_contracting_dims={0}
  %sharding_constraint.1200 = bf16[1,4096,8,128]{3,2,1,0} copy(%dot.607)
  %get-tuple-element.739 = s32[1,4096]{1,0} get-tuple-element(%remat2.17), index=11
  %eq.2230 = s32[1,4096,4096]{2,1,0} broadcast(%get-tuple-element.739), dimensions={0,1}
  %eq.2231 = s32[1,4096,4096]{2,1,0} broadcast(%get-tuple-element.739), dimensions={0,2}
  %eq.2232 = pred[1,4096,4096]{2,1,0} compare(%eq.2230, %eq.2231), direction=EQ
  %and.147 = pred[1,4096,4096]{2,1,0} and(%eq.2232, %and.64)
  %select_n.467 = f32[1,4096,4096]{2,1,0} select(%and.147, %broadcast_in_dim.516, %broadcast_in_dim.517)
  %ne.104 = pred[1,4096,4096]{2,1,0} compare(%select_n.467, %broadcast_in_dim.516), direction=NE
  %not.102 = pred[1,4096,4096]{2,1,0} not(%ne.104)
  %convert_element_type.2213 = s32[1,4096,4096]{2,1,0} convert(%not.102)
  %reduce.572 = s32[1,4096]{1,0} reduce(%convert_element_type.2213, %constant.1181), dimensions={1}, to_apply=%region_500.12872
  %reduce_sum.5704 = s32[1,1,1,4096]{3,2,1,0} reshape(%reduce.572)
  %slice.462 = s32[1,1,1,1]{3,2,1,0} slice(%reduce_sum.5704), slice={[0:1], [0:1], [0:1], [0:1]}
  %squeeze.38 = s32[1,1]{1,0} reshape(%slice.462)
  %reshape.11468 = s32[1]{0} reshape(%squeeze.38)
  %lt.127 = pred[1]{0} compare(%reshape.11468, %constant.1418), direction=LT
  %select_n.468 = s32[1]{0} select(%lt.127, %broadcast_in_dim.518, %reshape.11468)
  %concatenate.339 = s32[2]{0} concatenate(%constant.1418, %select_n.468), dimensions={0}
  %reduce.573 = s32[1,4096]{1,0} reduce(%convert_element_type.2213, %constant.1181), dimensions={2}, to_apply=%region_501.12881
  %reduce_sum.5705 = s32[1,1,1,4096]{3,2,1,0} reshape(%reduce.573)
  %reduce.574 = s32[1,1]{1,0} reduce(%reduce_sum.5705, %constant.1415), dimensions={3,2}, to_apply=%region_502.12887
  %reshape.11469 = s32[1]{0} reshape(%reduce.574)
  %lt.128 = pred[1]{0} compare(%reshape.11469, %constant.1418), direction=LT
  %select_n.469 = s32[1]{0} select(%lt.128, %broadcast_in_dim.518, %reshape.11469)
  %concatenate.340 = s32[2]{0} concatenate(%constant.1418, %select_n.469), dimensions={0}
  %te_fused_attn_forward_ffi.152 = (bf16[1,4096,32,128]{3,2,1,0}, f32[1,32,4096,1]{3,2,1,0}, u32[2,4]{1,0}, u8[48]{0}) custom-call(%sharding_constraint.1197, %sharding_constraint.1199, %sharding_constraint.1200, %constant.1403, %dynamic-slice.38, /*index=5*/%concatenate.339, %concatenate.340, %constant.1416, %constant.1416, %constant.1416, /*index=10*/%constant.1416, %constant.1416, %constant.1416), custom_call_target="te_fused_attn_forward_ffi", operand_layout_constraints={bf16[1,4096,32,128]{3,2,1,0}, bf16[1,4096,8,128]{3,2,1,0}, bf16[1,4096,8,128]{3,2,1,0}, bf16[0]{0}, u32[2]{0}, s32[2]{0}, s32[2]{0}, f32[0]{0}, f32[0]{0}, f32[0]{0}, f32[0]{0}, f32[0]{0}, f32[0]{0}}, api_version=API_VERSION_TYPED_FFI, backend_config={attn_heads = 32 : i64, bias_batch = 0 : i64, bias_heads = 0 : i64, bias_type = 0 : i64, deterministic = false, dropout_probability = 0.000000e+00 : f64, input_batch = 1 : i64, is_training = true, kv_max_seqlen = 4096 : i64, mask_type = 3 : i64, max_segments_per_seq = 1 : i64, num_gqa_groups = 8 : i64, q_max_seqlen = 4096 : i64, qk_head_dim = 128 : i64, qkv_layout = 9 : i64, scaling_factor = 1.000000e+00 : f64, v_head_dim = 128 : i64, window_size_left = -1 : i64, window_size_right = -1 : i64}
  %get-tuple-element.740 = bf16[1,4096,32,128]{3,2,1,0} get-tuple-element(%te_fused_attn_forward_ffi.152), index=0
  %sharding_constraint.1201 = bf16[1,4096,32,128]{3,2,1,0} copy(%get-tuple-element.740)
  %get-tuple-element.741 = bf16[32,128,512]{2,1,0} get-tuple-element(%remat2.17), index=7
  %all-gather.265 = bf16[32,128,4096]{2,1,0} all-gather(%get-tuple-element.741), channel_id=444, replica_groups=[1,8]<=[8], dimensions={2}, use_global_device_ids=true
  %dot.608 = bf16[1,4096,4096]{2,1,0} dot(%sharding_constraint.1201, %all-gather.265), lhs_contracting_dims={2,3}, rhs_contracting_dims={0,1}
  %sharding_constraint.1202 = bf16[1,4096,4096]{2,1,0} copy(%dot.608)
  %add.1962 = bf16[1,4096,4096]{2,1,0} add(%sharding_constraint.1194, %sharding_constraint.1202)
  %convert_element_type.2215 = f32[1,4096,4096]{2,1,0} convert(%add.1962)
  %square.81 = f32[1,4096,4096]{2,1,0} multiply(%convert_element_type.2215, %convert_element_type.2215)
  %reduce.575 = f32[1,4096]{1,0} reduce(%square.81, %constant.1360), dimensions={2}, to_apply=%region_503.12902
  %div.937 = f32[1,4096]{1,0} multiply(%reduce.575, %broadcast.3412)
  %add.1963 = f32[1,4096]{1,0} add(%div.937, %broadcast.3413)
  %add.1964 = f32[1,4096,1]{2,1,0} reshape(%add.1963)
  %rsqrt.142 = f32[1,4096,1]{2,1,0} rsqrt(%add.1964)
  %mul.5390 = f32[1,4096]{1,0} reshape(%rsqrt.142)
  %mul.5391 = f32[1,4096,4096]{2,1,0} broadcast(%mul.5390), dimensions={0,1}
  %mul.5392 = f32[1,4096,4096]{2,1,0} multiply(%convert_element_type.2215, %mul.5391)
  %convert_element_type.2216 = bf16[1,4096,4096]{2,1,0} convert(%mul.5392)
  %get-tuple-element.742 = bf16[4096]{0} get-tuple-element(%remat2.17), index=4
  %mul.5393 = bf16[1,4096,4096]{2,1,0} broadcast(%get-tuple-element.742), dimensions={2}
  %mul.5394 = bf16[1,4096,4096]{2,1,0} multiply(%convert_element_type.2216, %mul.5393)
  %sharding_constraint.1203 = bf16[1,4096,4096]{2,1,0} copy(%mul.5394)
  %get-tuple-element.743 = bf16[512,8]{1,0} get-tuple-element(%remat2.17), index=0
  %all-gather.266 = bf16[4096,8]{1,0} all-gather(%get-tuple-element.743), channel_id=445, replica_groups=[1,8]<=[8], dimensions={0}, use_global_device_ids=true
  %dot.609 = bf16[1,4096,8]{2,1,0} dot(%sharding_constraint.1203, %all-gather.266), lhs_contracting_dims={2}, rhs_contracting_dims={0}
  %sharding_constraint.1204 = bf16[1,4096,8]{2,1,0} copy(%dot.609)
  %top_k.114 = bf16[4096,8]{1,0} reshape(%sharding_constraint.1204)
  %top_k.115 = (bf16[4096,2]{1,0}, s32[4096,2]{1,0}) custom-call(%top_k.114), custom_call_target="TopK", called_computations={%compare_greater_than.38.12923.clone}
  %get-tuple-element.744 = bf16[4096,2]{1,0} get-tuple-element(%top_k.115), index=0
  %get-tuple-element.745 = s32[4096,2]{1,0} get-tuple-element(%top_k.115), index=1
  %add.1965 = s32[4096,2]{1,0} add(%get-tuple-element.745, %broadcast.3418)
  %sort.102 = (bf16[4096,2]{1,0}, s32[4096,2]{1,0}) sort(%get-tuple-element.744, %add.1965), dimensions={1}, is_stable=true, to_apply=%compare-value-and-index.38
  %get-tuple-element.747 = s32[4096,2]{1,0} get-tuple-element(%sort.102), index=1
  %slice.464 = s32[4096,2]{1,0} slice(%get-tuple-element.747), slice={[0:4096], [0:2]}
  %top_k.116 = s32[1,4096,2]{2,1,0} reshape(%slice.464)
  %lt.129 = pred[1,4096,2]{2,1,0} compare(%top_k.116, %broadcast.3419), direction=LT
  %add.1966 = s32[1,4096,2]{2,1,0} add(%top_k.116, %broadcast.3420)
  %select_n.470 = s32[1,4096,2]{2,1,0} select(%lt.129, %add.1966, %top_k.116)
  %broadcast_in_dim.653 = s32[1,4096,2,1]{3,2,1,0} reshape(%select_n.470)
  %concatenate.341 = s32[1,4096,2,3]{3,2,1,0} concatenate(%add.1356, %iota.2456, %broadcast_in_dim.653), dimensions={3}
  %subtract.122 = s32[1,4096,2,3]{3,2,1,0} subtract(%concatenate.341, %broadcast.3428)
  %scatter.211 = u32[1,4096,8]{2,1,0} scatter(%dynamic-slice.43, %subtract.122, %add.1401), update_window_dims={}, inserted_window_dims={0,1,2}, scatter_dims_to_operand_dims={0,1,2}, index_vector_dim=3, to_apply=%region_504.12959.clone
  %gather.44 = u32[1,4096,2]{2,1,0} gather(%scatter.211, %subtract.122), offset_dims={}, collapsed_slice_dims={0,1,2}, start_index_map={0,1,2}, index_vector_dim=3, slice_sizes={1,1,1}
  %eq.2233 = pred[1,4096,2]{2,1,0} compare(%add.1401, %gather.44), direction=EQ
  %get-tuple-element.746 = bf16[4096,2]{1,0} get-tuple-element(%sort.102), index=0
  %slice.463 = bf16[4096,2]{1,0} slice(%get-tuple-element.746), slice={[0:4096], [0:2]}
  %convert_element_type.2218 = f32[4096,2]{1,0} convert(%slice.463)
  %convert_element_type.2219 = f32[1,4096,2]{2,1,0} reshape(%convert_element_type.2218)
  %reduce.576 = f32[4096]{0} reduce(%convert_element_type.2218, %constant.1450), dimensions={1}, to_apply=%region_505.12968
  %sub.268 = f32[1,4096]{1,0} reshape(%reduce.576)
  %sub.269 = f32[1,4096,2]{2,1,0} broadcast(%sub.268), dimensions={0,1}
  %sub.270 = f32[1,4096,2]{2,1,0} subtract(%convert_element_type.2219, %sub.269)
  %exp.203 = f32[1,4096,2]{2,1,0} exponential(%sub.270)
  %reduce.577 = f32[1,4096]{1,0} reduce(%exp.203, %constant.1360), dimensions={2}, to_apply=%region_506.12977
  %div.938 = f32[1,4096,2]{2,1,0} broadcast(%reduce.577), dimensions={0,1}
  %div.939 = f32[1,4096,2]{2,1,0} divide(%exp.203, %div.938)
  %convert_element_type.2220 = bf16[1,4096,2]{2,1,0} convert(%div.939)
  %select_n.471 = bf16[1,4096,2]{2,1,0} select(%eq.2233, %convert_element_type.2220, %broadcast.3427)
  %scatter.212 = bf16[1,4096,8]{2,1,0} scatter(%broadcast.3379, %subtract.122, %select_n.471), update_window_dims={}, inserted_window_dims={0,1,2}, scatter_dims_to_operand_dims={0,1,2}, index_vector_dim=3, to_apply=%region_507.12986.clone
  %eq.2235 = s32[1,4096,2,8]{3,2,1,0} broadcast(%top_k.116), dimensions={0,1,2}
  %iota.2468 = s32[1,4096,2,8]{3,2,1,0} iota(), iota_dimension=3
  %eq.2236 = pred[1,4096,2,8]{3,2,1,0} compare(%eq.2235, %iota.2468), direction=EQ
  %convert_element_type.2221 = s32[1,4096,2,8]{3,2,1,0} convert(%eq.2236)
  %reshape.11501 = s32[1,8192,8]{2,1,0} reshape(%convert_element_type.2221)
  %sharding_constraint.1205 = s32[1,8192,8]{2,1,0} copy(%reshape.11501)
  %reduce-window.38 = s32[1,8192,8]{2,1,0} reduce-window(%sharding_constraint.1205, %constant.1181), window={size=1x8192x1 pad=0_0x8191_0x0_0}, to_apply=%region_508.12998
  %reshape.11503 = s32[1,4096,2,8]{3,2,1,0} reshape(%reduce-window.38)
  %sharding_constraint.1206 = s32[1,4096,2,8]{3,2,1,0} copy(%reshape.11503)
  %le.90 = pred[1,4096,2,8]{3,2,1,0} compare(%sharding_constraint.1206, %broadcast.3429), direction=LE
  %mul.5395 = s32[1,4096,2,8]{3,2,1,0} select(%le.90, %convert_element_type.2221, %broadcast.3430)
  %reduce.578 = s32[1,4096,8]{2,1,0} reduce(%mul.5395, %constant.1181), dimensions={2}, to_apply=%region_509.13007
  %convert_element_type.2222 = bf16[1,4096,8]{2,1,0} convert(%reduce.578)
  %mul.5396 = bf16[1,4096,8]{2,1,0} multiply(%scatter.212, %convert_element_type.2222)
  %mul.5397 = bf16[1,4096,8,1025]{3,2,1,0} broadcast(%mul.5396), dimensions={0,1,2}
  %mul.5398 = s32[1,8192,8]{2,1,0} multiply(%sharding_constraint.1205, %reduce-window.38)
  %reshape.11504 = s32[1,4096,2,8]{3,2,1,0} reshape(%mul.5398)
  %reduce.579 = s32[1,4096,8]{2,1,0} reduce(%reshape.11504, %constant.1181), dimensions={2}, to_apply=%region_510.13017
  %mul.5399 = s32[1,4096,8]{2,1,0} multiply(%reduce.579, %reduce.578)
  %eq.2244 = s32[1,4096,8,1025]{3,2,1,0} broadcast(%mul.5399), dimensions={0,1,2}
  %iota.2469 = s32[1,4096,8,1025]{3,2,1,0} iota(), iota_dimension=3
  %eq.2245 = pred[1,4096,8,1025]{3,2,1,0} compare(%eq.2244, %iota.2469), direction=EQ
  %convert_element_type.2223 = s32[1,4096,8,1025]{3,2,1,0} convert(%eq.2245)
  %convert_element_type.2225 = bf16[1,4096,8,1025]{3,2,1,0} convert(%convert_element_type.2223)
  %mul.5400 = bf16[1,4096,8,1025]{3,2,1,0} multiply(%mul.5397, %convert_element_type.2225)
  %slice.465 = bf16[1,4096,8,1024]{3,2,1,0} slice(%mul.5400), slice={[0:1], [0:4096], [0:8], [1:1025]}
  %convert_element_type.2226 = pred[1,4096,8,1024]{3,2,1,0} compare(%slice.465, %broadcast.3431), direction=NE
  %sharding_constraint.1207 = pred[1,4096,8,1024]{3,2,1,0} copy(%convert_element_type.2226)
  %dot_general.80 = bf16[1,4096,8,1024]{3,2,1,0} convert(%sharding_constraint.1207)
  %dot.610 = bf16[1,8,1024,4096]{3,2,1,0} dot(%dot_general.80, %sharding_constraint.1203), lhs_batch_dims={0}, lhs_contracting_dims={1}, rhs_batch_dims={0}, rhs_contracting_dims={1}
  %reshape.11507 = bf16[1,8,1,1024,4096]{4,3,2,1,0} reshape(%dot.610)
  %all-to-all.88 = bf16[1,8,1,1024,4096]{4,3,2,1,0} all-to-all(%reshape.11507), channel_id=449, replica_groups=[1,8]<=[8], dimensions={1}
  %transpose.143 = bf16[8,1,1,1024,4096]{4,3,2,0,1} transpose(%all-to-all.88), dimensions={1,0,2,3,4}
  %reshape.11508 = bf16[8,1,1024,4096]{3,2,1,0} reshape(%transpose.143)
  %transpose.144 = bf16[1,8,1024,4096]{3,2,0,1} transpose(%reshape.11508), dimensions={1,0,2,3}
  %sharding_constraint.1208 = bf16[1,8,1024,4096]{3,2,0,1} copy(%transpose.144)
  %get-tuple-element.750 = bf16[1,4096,14336]{2,1,0} get-tuple-element(%remat2.17), index=1
  %sharding_constraint.1209 = bf16[1,4096,14336]{2,1,0} copy(%get-tuple-element.750)
  %dot.611 = bf16[1,8,1024,14336]{3,2,1,0} dot(%sharding_constraint.1208, %sharding_constraint.1209), lhs_batch_dims={0}, lhs_contracting_dims={3}, rhs_batch_dims={0}, rhs_contracting_dims={1}
  %sharding_constraint.1210 = bf16[1,8,1024,14336]{3,2,1,0} copy(%dot.611)
  %neg.214 = bf16[1,8,1024,14336]{3,2,1,0} negate(%sharding_constraint.1210)
  %exp.204 = bf16[1,8,1024,14336]{3,2,1,0} exponential(%neg.214)
  %add.1971 = bf16[1,8,1024,14336]{3,2,1,0} add(%exp.204, %jit_silu_.0)
  %div.940 = bf16[1,8,1024,14336]{3,2,1,0} divide(%jit_silu_.0, %add.1971)
  %mul.5401 = bf16[1,8,1024,14336]{3,2,1,0} multiply(%sharding_constraint.1210, %div.940)
  %sharding_constraint.1211 = bf16[1,4096,4096]{2,1,0} copy(%sharding_constraint.1193)
  %sharding_constraint.1212 = bf16[1,4096,8,1024]{3,2,1,0} copy(%slice.465)
  %dot.612 = bf16[1,4096,8,1024]{3,2,1,0} dot(%sharding_constraint.1211, %sharding_constraint.1212), lhs_batch_dims={0}, lhs_contracting_dims={1}, rhs_batch_dims={0}, rhs_contracting_dims={1}
  %reshape.11511 = bf16[1,4096,8,1,1024]{4,3,2,1,0} reshape(%dot.612)
  %all-to-all.89 = bf16[1,4096,8,1,1024]{4,3,2,1,0} all-to-all(%reshape.11511), channel_id=450, replica_groups=[1,8]<=[8], dimensions={2}
  %transpose.145 = bf16[8,1,4096,1,1024]{4,3,0,2,1} transpose(%all-to-all.89), dimensions={2,0,1,3,4}
  %reshape.11512 = bf16[8,4096,1,1024]{3,2,1,0} reshape(%transpose.145)
  %transpose.146 = bf16[1,8,1024,4096]{2,0,3,1} transpose(%reshape.11512), dimensions={2,0,3,1}
  %sharding_constraint.1213 = bf16[1,8,1024,4096]{2,0,3,1} copy(%transpose.146)
  %get-tuple-element.751 = bf16[1,14336,4096]{2,1,0} get-tuple-element(%remat2.17), index=3
  %sharding_constraint.1214 = bf16[1,14336,4096]{2,1,0} copy(%get-tuple-element.751)
  %dot.613 = bf16[1,8,1024,14336]{3,2,1,0} dot(%sharding_constraint.1213, %sharding_constraint.1214), lhs_batch_dims={0}, lhs_contracting_dims={3}, rhs_batch_dims={0}, rhs_contracting_dims={2}
  %mul.5402 = bf16[1,8,1024,14336]{3,2,1,0} multiply(%mul.5401, %dot.613)
  %sharding_constraint.1215 = bf16[1,8,1024,14336]{3,2,1,0} copy(%mul.5402)
  %get-tuple-element.752 = bf16[1,4096,14336]{2,1,0} get-tuple-element(%remat2.17), index=2
  %sharding_constraint.1216 = bf16[1,4096,14336]{2,1,0} copy(%get-tuple-element.752)
  %dot.614 = bf16[1,8,1024,4096]{3,2,1,0} dot(%sharding_constraint.1215, %sharding_constraint.1216), lhs_batch_dims={0}, lhs_contracting_dims={3}, rhs_batch_dims={0}, rhs_contracting_dims={2}
  %dot.615 = bf16[1,8,1024,14336]{3,2,1,0} dot(%sharding_constraint.1208, %sharding_constraint.1216), lhs_batch_dims={0}, lhs_contracting_dims={3}, rhs_batch_dims={0}, rhs_contracting_dims={1}
  %sharding_constraint.1217 = bf16[1,8,1024,14336]{3,2,1,0} copy(%dot.615)
  %mul.5403 = bf16[1,8,1024,14336]{3,2,1,0} multiply(%dot.613, %sharding_constraint.1217)
  %mul.5404 = bf16[1,8,1024,14336]{3,2,1,0} multiply(%mul.5403, %div.940)
  %mul.5405 = bf16[1,8,1024,14336]{3,2,1,0} multiply(%sharding_constraint.1210, %mul.5403)
  %sub.271 = bf16[1,8,1024,14336]{3,2,1,0} subtract(%jit_silu_.0, %div.940)
  %mul.5407 = bf16[1,8,1024,14336]{3,2,1,0} multiply(%div.940, %sub.271)
  %mul.5408 = bf16[1,8,1024,14336]{3,2,1,0} multiply(%mul.5405, %mul.5407)
  %add_any.151 = bf16[1,8,1024,14336]{3,2,1,0} add(%mul.5404, %mul.5408)
  %sharding_constraint.1218 = bf16[1,8,1024,14336]{3,2,1,0} copy(%add_any.151)
  %dot.616 = bf16[1,8,1024,4096]{3,2,1,0} dot(%sharding_constraint.1218, %sharding_constraint.1209), lhs_batch_dims={0}, lhs_contracting_dims={3}, rhs_batch_dims={0}, rhs_contracting_dims={2}
  %add_any.152 = bf16[1,8,1024,4096]{3,2,1,0} add(%dot.614, %dot.616)
  %sharding_constraint.1219 = bf16[1,8,1024,4096]{3,2,1,0} copy(%add_any.152)
  %transpose.147 = bf16[8,1,1024,4096]{3,2,0,1} transpose(%sharding_constraint.1219), dimensions={1,0,2,3}
  %reshape.11515 = bf16[8,1,1,1024,4096]{4,3,2,1,0} reshape(%transpose.147)
  %all-to-all.90 = bf16[8,1,1,1024,4096]{4,3,2,1,0} all-to-all(%reshape.11515), channel_id=451, replica_groups=[1,8]<=[8], dimensions={0}
  %transpose.148 = bf16[1,8,1,1024,4096]{4,3,2,0,1} transpose(%all-to-all.90), dimensions={1,0,2,3,4}
  %reshape.11516 = bf16[1,8,1024,4096]{3,2,1,0} reshape(%transpose.148)
  %dot.617 = bf16[1,4096,4096]{2,1,0} dot(%dot_general.80, %reshape.11516), lhs_batch_dims={0}, lhs_contracting_dims={2,3}, rhs_batch_dims={0}, rhs_contracting_dims={1,2}
  %reshape.11525 = s32[1,4096,2,1]{3,2,1,0} reshape(%slice.464)
  %ge.6 = pred[1,4096,2,3]{3,2,1,0} compare(%concatenate.341, %broadcast.3629), direction=GE
  %le.92 = pred[1,4096,2,3]{3,2,1,0} compare(%concatenate.341, %le.67), direction=LE
  %and.148 = pred[1,4096,2,3]{3,2,1,0} and(%ge.6, %le.92)
  %reduce.580 = pred[1,4096,2]{2,1,0} reduce(%and.148, %constant.5574), dimensions={3}, to_apply=%region_511.13074
  %mul.5409 = bf16[1,8,1024,14336]{3,2,1,0} multiply(%mul.5401, %sharding_constraint.1217)
  %dot.618 = bf16[1,8,1024,4096]{3,2,1,0} dot(%mul.5409, %sharding_constraint.1214), lhs_batch_dims={0}, lhs_contracting_dims={3}, rhs_batch_dims={0}, rhs_contracting_dims={1}
  %sharding_constraint.1220 = bf16[1,8,1024,4096]{3,2,1,0} copy(%dot.618)
  %reshape.11538 = bf16[1,8,1,1024,4096]{4,3,2,1,0} reshape(%sharding_constraint.1220)
  %all-to-all.91 = bf16[1,8,1,1024,4096]{4,3,2,1,0} all-to-all(%reshape.11538), channel_id=452, replica_groups=[1,8]<=[8], dimensions={1}
  %transpose.149 = bf16[8,1,1,1024,4096]{4,3,2,0,1} transpose(%all-to-all.91), dimensions={1,0,2,3,4}
  %reshape.11539 = bf16[8,1,1024,4096]{3,2,1,0} reshape(%transpose.149)
  %dot.619 = bf16[1,4096,8,1024]{3,2,1,0} dot(%sharding_constraint.1211, %reshape.11539), lhs_batch_dims={0}, lhs_contracting_dims={2}, rhs_batch_dims={1}, rhs_contracting_dims={3}
  %sharding_constraint.1221 = bf16[1,4096,8,1024]{3,2,1,0} copy(%dot.619)
  %pad.6 = bf16[1,4096,8,1025]{3,2,1,0} pad(%sharding_constraint.1221, %constant.1190), padding=0_0x0_0x0_0x1_0
  %mul.5410 = bf16[1,4096,8,1025]{3,2,1,0} multiply(%pad.6, %convert_element_type.2225)
  %reduce.581 = bf16[1,4096,8]{2,1,0} reduce(%mul.5410, %constant.1190), dimensions={3}, to_apply=%region_512.13086
  %mul.5411 = bf16[1,4096,8]{2,1,0} multiply(%reduce.581, %convert_element_type.2222)
  %gather.45 = bf16[1,4096,2]{2,1,0} gather(%mul.5411, %subtract.122), offset_dims={}, collapsed_slice_dims={0,1,2}, start_index_map={0,1,2}, index_vector_dim=3, slice_sizes={1,1,1}
  %select_n.472 = bf16[1,4096,2]{2,1,0} select(%reduce.580, %gather.45, %broadcast.3427)
  %select_n.473 = bf16[1,4096,2]{2,1,0} select(%eq.2233, %select_n.472, %broadcast.3427)
  %convert_element_type.2227 = f32[1,4096,2]{2,1,0} convert(%select_n.473)
  %div.942 = f32[1,4096,2]{2,1,0} divide(%convert_element_type.2227, %div.938)
  %mul.5412 = f32[1,4096]{1,0} multiply(%reduce.577, %reduce.577)
  %div.943 = f32[1,4096]{1,0} divide(%add.1847, %mul.5412)
  %mul.5416 = f32[1,4096,2]{2,1,0} broadcast(%div.943), dimensions={0,1}
  %mul.5417 = f32[1,4096,2]{2,1,0} multiply(%convert_element_type.2227, %mul.5416)
  %mul.5418 = f32[1,4096,2]{2,1,0} multiply(%mul.5417, %exp.203)
  %reduce.582 = f32[1,4096]{1,0} reduce(%mul.5418, %constant.1360), dimensions={2}, to_apply=%region_513.13103
  %neg.215 = f32[1,4096]{1,0} negate(%reduce.582)
  %broadcast_in_dim.654 = f32[1,4096,2]{2,1,0} broadcast(%neg.215), dimensions={0,1}
  %add_any.153 = f32[1,4096,2]{2,1,0} add(%div.942, %broadcast_in_dim.654)
  %mul.5419 = f32[1,4096,2]{2,1,0} multiply(%add_any.153, %exp.203)
  %convert_element_type.2229 = bf16[1,4096,2]{2,1,0} convert(%mul.5419)
  %scatter.213 = bf16[1,4096,8]{2,1,0} scatter(%broadcast.3379, %reshape.11525, %convert_element_type.2229), update_window_dims={}, inserted_window_dims={2}, scatter_dims_to_operand_dims={2}, input_batching_dims={0,1}, scatter_indices_batching_dims={0,1}, index_vector_dim=3, to_apply=%region_514.13113.clone
  %sharding_constraint.1222 = bf16[1,4096,8]{2,1,0} copy(%scatter.213)
  %dot.620 = bf16[1,4096,4096]{2,1,0} dot(%sharding_constraint.1222, %all-gather.266), lhs_contracting_dims={2}, rhs_contracting_dims={1}
  %add_any.154 = bf16[1,4096,4096]{2,1,0} add(%dot.617, %dot.620)
  %sharding_constraint.1224 = bf16[1,4096,4096]{2,1,0} copy(%add_any.154)
  %mul.5421 = bf16[1,4096,4096]{2,1,0} multiply(%sharding_constraint.1224, %mul.5393)
  %convert_element_type.2230 = f32[1,4096,4096]{2,1,0} convert(%mul.5421)
  %mul.5425 = f32[1,4096,4096]{2,1,0} multiply(%convert_element_type.2230, %mul.5391)
  %mul.5426 = f32[1,4096,4096]{2,1,0} multiply(%convert_element_type.2215, %convert_element_type.2230)
  %reduce.583 = f32[1,4096]{1,0} reduce(%mul.5426, %constant.1360), dimensions={2}, to_apply=%region_515.13129
  %reshape.11551 = f32[1,4096,1]{2,1,0} reshape(%reduce.583)
  %div.944 = f32[1,4096,1]{2,1,0} divide(%rsqrt.142, %add.1964)
  %mul.5427 = f32[1,4096,1]{2,1,0} multiply(%div.944, %broadcast.3620)
  %mul.5431 = f32[1,4096,1]{2,1,0} multiply(%reshape.11551, %mul.5427)
  %mul.5432 = f32[1,4096,1]{2,1,0} multiply(%mul.5431, %mul.4455)
  %mul.5433 = f32[1,4096]{1,0} reshape(%mul.5432)
  %mul.5434 = f32[1,4096,4096]{2,1,0} broadcast(%mul.5433), dimensions={0,1}
  %mul.5435 = f32[1,4096,4096]{2,1,0} multiply(%convert_element_type.2215, %mul.5434)
  %add_any.155 = f32[1,4096,4096]{2,1,0} add(%mul.5425, %mul.5435)
  %convert_element_type.2231 = bf16[1,4096,4096]{2,1,0} convert(%add_any.155)
  %add_any.156 = bf16[1,4096,4096]{2,1,0} add(%sharding_constraint.1193, %convert_element_type.2231)
  %get-tuple-element.753 = f32[1,32,4096,1]{3,2,1,0} get-tuple-element(%te_fused_attn_forward_ffi.152), index=1
  %get-tuple-element.754 = u32[2,4]{1,0} get-tuple-element(%te_fused_attn_forward_ffi.152), index=2
  %sharding_constraint.1226 = u32[2,4]{1,0} copy(%get-tuple-element.754)
  %sharding_constraint.1227 = bf16[1,4096,4096]{2,1,0} copy(%add_any.156)
  %dot.621 = bf16[1,4096,32,128]{3,2,1,0} dot(%sharding_constraint.1227, %all-gather.265), lhs_contracting_dims={2}, rhs_contracting_dims={2}
  %sharding_constraint.1228 = bf16[1,4096,32,128]{3,2,1,0} copy(%dot.621)
  %te_fused_attn_backward_ffi.25 = (bf16[1,4096,32,128]{3,2,1,0}, bf16[1,4096,8,128]{3,2,1,0}, bf16[1,4096,8,128]{3,2,1,0}, bf16[0]{0}, u8[134742064]{0}) custom-call(%sharding_constraint.1197, %sharding_constraint.1199, %sharding_constraint.1200, %constant.1403, %get-tuple-element.753, /*index=5*/%sharding_constraint.1226, %get-tuple-element.740, %sharding_constraint.1228, %concatenate.339, %concatenate.340, /*index=10*/%constant.1416, %constant.1416, %constant.1416, %constant.1416, %constant.1416, /*index=15*/%constant.1416), custom_call_target="te_fused_attn_backward_ffi", operand_layout_constraints={bf16[1,4096,32,128]{3,2,1,0}, bf16[1,4096,8,128]{3,2,1,0}, bf16[1,4096,8,128]{3,2,1,0}, bf16[0]{0}, f32[1,32,4096,1]{3,2,1,0}, u32[2,4]{1,0}, bf16[1,4096,32,128]{3,2,1,0}, bf16[1,4096,32,128]{3,2,1,0}, s32[2]{0}, s32[2]{0}, f32[0]{0}, f32[0]{0}, f32[0]{0}, f32[0]{0}, f32[0]{0}, f32[0]{0}}, api_version=API_VERSION_TYPED_FFI, backend_config={attn_heads = 32 : i64, bias_batch = 0 : i64, bias_heads = 0 : i64, bias_type = 0 : i64, deterministic = false, dropout_probability = 0.000000e+00 : f64, input_batch = 1 : i64, is_training = true, kv_max_seqlen = 4096 : i64, mask_type = 3 : i64, max_segments_per_seq = 1 : i64, num_gqa_groups = 8 : i64, q_max_seqlen = 4096 : i64, qk_head_dim = 128 : i64, qkv_layout = 9 : i64, scaling_factor = 1.000000e+00 : f64, v_head_dim = 128 : i64, window_size_left = -1 : i64, window_size_right = -1 : i64}
  %get-tuple-element.755 = bf16[1,4096,8,128]{3,2,1,0} get-tuple-element(%te_fused_attn_backward_ffi.25), index=2
  %sharding_constraint.1229 = bf16[1,4096,8,128]{3,2,1,0} copy(%get-tuple-element.755)
  %dot.622 = bf16[1,4096,4096]{2,1,0} dot(%sharding_constraint.1229, %all-gather.264), lhs_contracting_dims={2,3}, rhs_contracting_dims={1,2}
  %get-tuple-element.756 = bf16[1,4096,8,128]{3,2,1,0} get-tuple-element(%te_fused_attn_backward_ffi.25), index=1
  %sharding_constraint.1230 = bf16[1,4096,8,128]{3,2,1,0} copy(%get-tuple-element.756)
  %slice.466 = bf16[1,4096,8,64]{3,2,1,0} slice(%sharding_constraint.1230), slice={[0:1], [0:4096], [0:8], [64:128]}
  %mul.5439 = bf16[1,4096,8,64]{3,2,1,0} multiply(%slice.466, %mul.5382)
  %slice.467 = bf16[1,4096,8,64]{3,2,1,0} slice(%sharding_constraint.1230), slice={[0:1], [0:4096], [0:8], [0:64]}
  %mul.5446 = bf16[1,4096,8,64]{3,2,1,0} multiply(%slice.467, %mul.5379)
  %add_any.157 = bf16[1,4096,8,64]{3,2,1,0} add(%mul.5439, %mul.5446)
  %mul.5450 = bf16[1,4096,8,64]{3,2,1,0} multiply(%slice.466, %mul.5379)
  %neg.216 = bf16[1,4096,8,64]{3,2,1,0} negate(%slice.467)
  %mul.5453 = bf16[1,4096,8,64]{3,2,1,0} multiply(%neg.216, %mul.5382)
  %add_any.158 = bf16[1,4096,8,64]{3,2,1,0} add(%mul.5450, %mul.5453)
  %concatenate.348 = bf16[1,4096,8,128]{3,2,1,0} concatenate(%add_any.157, %add_any.158), dimensions={3}
  %dot.623 = bf16[1,4096,4096]{2,1,0} dot(%concatenate.348, %all-gather.263), lhs_contracting_dims={2,3}, rhs_contracting_dims={1,2}
  %add_any.159 = bf16[1,4096,4096]{2,1,0} add(%dot.622, %dot.623)
  %sharding_constraint.1231 = bf16[1,4096,4096]{2,1,0} copy(%add_any.159)
  %get-tuple-element.757 = bf16[1,4096,32,128]{3,2,1,0} get-tuple-element(%te_fused_attn_backward_ffi.25), index=0
  %sharding_constraint.1232 = bf16[1,4096,32,128]{3,2,1,0} copy(%get-tuple-element.757)
  %slice.468 = bf16[1,4096,32,64]{3,2,1,0} slice(%sharding_constraint.1232), slice={[0:1], [0:4096], [0:32], [64:128]}
  %mul.5456 = bf16[1,4096,32,64]{3,2,1,0} multiply(%slice.468, %mul.5369)
  %slice.469 = bf16[1,4096,32,64]{3,2,1,0} slice(%sharding_constraint.1232), slice={[0:1], [0:4096], [0:32], [0:64]}
  %mul.5459 = bf16[1,4096,32,64]{3,2,1,0} multiply(%slice.469, %mul.5366)
  %add_any.160 = bf16[1,4096,32,64]{3,2,1,0} add(%mul.5456, %mul.5459)
  %mul.5463 = bf16[1,4096,32,64]{3,2,1,0} multiply(%slice.468, %mul.5366)
  %neg.217 = bf16[1,4096,32,64]{3,2,1,0} negate(%slice.469)
  %mul.5466 = bf16[1,4096,32,64]{3,2,1,0} multiply(%neg.217, %mul.5369)
  %add_any.161 = bf16[1,4096,32,64]{3,2,1,0} add(%mul.5463, %mul.5466)
  %concatenate.349 = bf16[1,4096,32,128]{3,2,1,0} concatenate(%add_any.160, %add_any.161), dimensions={3}
  %dot.624 = bf16[1,4096,4096]{2,1,0} dot(%concatenate.349, %all-gather.262), lhs_contracting_dims={2,3}, rhs_contracting_dims={1,2}
  %sharding_constraint.1233 = bf16[1,4096,4096]{2,1,0} copy(%dot.624)
  %add_any.162 = bf16[1,4096,4096]{2,1,0} add(%sharding_constraint.1231, %sharding_constraint.1233)
  %sharding_constraint.1234 = bf16[1,4096,4096]{2,1,0} copy(%add_any.162)
  %mul.5472 = bf16[1,4096,4096]{2,1,0} multiply(%sharding_constraint.1234, %mul.5362)
  %convert_element_type.2232 = f32[1,4096,4096]{2,1,0} convert(%mul.5472)
  %mul.5475 = f32[1,4096,4096]{2,1,0} multiply(%convert_element_type.2232, %mul.5360)
  %mul.5476 = f32[1,4096,4096]{2,1,0} multiply(%convert_element_type.2200, %convert_element_type.2232)
  %reduce.584 = f32[1,4096]{1,0} reduce(%mul.5476, %constant.1360), dimensions={2}, to_apply=%region_516.13208
  %reshape.11559 = f32[1,4096,1]{2,1,0} reshape(%reduce.584)
  %div.945 = f32[1,4096,1]{2,1,0} divide(%rsqrt.141, %add.1959)
  %mul.5477 = f32[1,4096,1]{2,1,0} multiply(%div.945, %broadcast.3620)
  %mul.5478 = f32[1,4096,1]{2,1,0} multiply(%reshape.11559, %mul.5477)
  %mul.5484 = f32[1,4096,1]{2,1,0} multiply(%mul.5478, %mul.4455)
  %mul.5485 = f32[1,4096]{1,0} reshape(%mul.5484)
  %mul.5490 = f32[1,4096,4096]{2,1,0} broadcast(%mul.5485), dimensions={0,1}
  %mul.5491 = f32[1,4096,4096]{2,1,0} multiply(%convert_element_type.2200, %mul.5490)
  %add_any.163 = f32[1,4096,4096]{2,1,0} add(%mul.5475, %mul.5491)
  %convert_element_type.2233 = bf16[1,4096,4096]{2,1,0} convert(%add_any.163)
  %add_any.164 = bf16[1,4096,4096]{2,1,0} add(%add_any.156, %convert_element_type.2233)
  %sharding_constraint.1235 = bf16[1,4096,4096]{2,1,0} copy(%add_any.164)
  %tuple.251 = (bf16[512,8]{1,0}, bf16[1,4096,14336]{2,1,0}, bf16[1,4096,14336]{2,1,0}, bf16[1,14336,4096]{2,1,0}, bf16[4096]{0}, /*index=5*/bf16[4096]{0}, bf16[512,8,128]{2,1,0}, bf16[32,128,512]{2,1,0}, bf16[512,32,128]{2,1,0}, bf16[512,8,128]{2,1,0}, /*index=10*/bf16[1,4096,4096]{2,1,0}, s32[1,4096]{1,0}, s32[1,4096]{1,0}, bf16[1,4096,4096]{2,1,0}) tuple(%param.253, %param.254, %param.255, %param.256, %param.252, /*index=5*/%param.247, %param.249, %param.251, %param.248, %param.250, /*index=10*/%sharding_constraint.738, %param.10, %param.7, %sharding_constraint.1235)
  %remat2.18 = (bf16[512,8]{1,0}, bf16[1,4096,14336]{2,1,0}, bf16[1,4096,14336]{2,1,0}, bf16[1,14336,4096]{2,1,0}, bf16[4096]{0}, /*index=5*/bf16[4096]{0}, bf16[512,8,128]{2,1,0}, bf16[32,128,512]{2,1,0}, bf16[512,32,128]{2,1,0}, bf16[512,8,128]{2,1,0}, /*index=10*/bf16[1,4096,4096]{2,1,0}, s32[1,4096]{1,0}, s32[1,4096]{1,0}, bf16[1,4096,4096]{2,1,0}) opt-barrier(%tuple.251)
  %get-tuple-element.758 = bf16[1,4096,4096]{2,1,0} get-tuple-element(%remat2.18), index=13
  %sharding_constraint.1236 = bf16[1,4096,4096]{2,1,0} copy(%get-tuple-element.758)
  %iota.2474 = s32[1,4096,2,1]{3,2,1,0} iota(), iota_dimension=1
  %get-tuple-element.759 = bf16[1,4096,4096]{2,1,0} get-tuple-element(%remat2.18), index=10
  %sharding_constraint.1237 = bf16[1,4096,4096]{2,1,0} copy(%get-tuple-element.759)
  %convert_element_type.2235 = f32[1,4096,4096]{2,1,0} convert(%sharding_constraint.1237)
  %square.82 = f32[1,4096,4096]{2,1,0} multiply(%convert_element_type.2235, %convert_element_type.2235)
  %reduce.585 = f32[1,4096]{1,0} reduce(%square.82, %constant.1360), dimensions={2}, to_apply=%region_517.13250
  %div.946 = f32[1,4096]{1,0} multiply(%reduce.585, %broadcast.3412)
  %add.1975 = f32[1,4096]{1,0} add(%div.946, %broadcast.3413)
  %add.1976 = f32[1,4096,1]{2,1,0} reshape(%add.1975)
  %rsqrt.143 = f32[1,4096,1]{2,1,0} rsqrt(%add.1976)
  %mul.5492 = f32[1,4096]{1,0} reshape(%rsqrt.143)
  %mul.5496 = f32[1,4096,4096]{2,1,0} broadcast(%mul.5492), dimensions={0,1}
  %mul.5503 = f32[1,4096,4096]{2,1,0} multiply(%convert_element_type.2235, %mul.5496)
  %convert_element_type.2236 = bf16[1,4096,4096]{2,1,0} convert(%mul.5503)
  %get-tuple-element.760 = bf16[4096]{0} get-tuple-element(%remat2.18), index=5
  %mul.5504 = bf16[1,4096,4096]{2,1,0} broadcast(%get-tuple-element.760), dimensions={2}
  %mul.5505 = bf16[1,4096,4096]{2,1,0} multiply(%convert_element_type.2236, %mul.5504)
  %sharding_constraint.1238 = bf16[1,4096,4096]{2,1,0} copy(%mul.5505)
  %sharding_constraint.1239 = bf16[1,4096,4096]{2,1,0} copy(%sharding_constraint.1238)
  %get-tuple-element.761 = bf16[512,32,128]{2,1,0} get-tuple-element(%remat2.18), index=8
  %all-gather.268 = bf16[4096,32,128]{2,1,0} all-gather(%get-tuple-element.761), channel_id=455, replica_groups=[1,8]<=[8], dimensions={0}, use_global_device_ids=true
  %dot.625 = bf16[1,4096,32,128]{3,2,1,0} dot(%sharding_constraint.1239, %all-gather.268), lhs_contracting_dims={2}, rhs_contracting_dims={0}
  %slice.470 = bf16[1,4096,32,64]{3,2,1,0} slice(%dot.625), slice={[0:1], [0:4096], [0:32], [0:64]}
  %get-tuple-element.762 = s32[1,4096]{1,0} get-tuple-element(%remat2.18), index=12
  %convert_element_type.2237 = f32[1,4096]{1,0} convert(%get-tuple-element.762)
  %div.947 = f32[1,4096,1,64]{3,2,1,0} broadcast(%convert_element_type.2237), dimensions={0,1}
  %div.950 = f32[1,4096,1,64]{3,2,1,0} divide(%div.947, %div.402)
  %cos.79 = f32[1,4096,1,64]{3,2,1,0} cosine(%div.950)
  %convert_element_type.2239 = bf16[1,4096,1,64]{3,2,1,0} convert(%cos.79)
  %mul.5507 = bf16[1,4096,64]{2,1,0} reshape(%convert_element_type.2239)
  %mul.5508 = bf16[1,4096,32,64]{3,2,1,0} broadcast(%mul.5507), dimensions={0,1,3}
  %mul.5509 = bf16[1,4096,32,64]{3,2,1,0} multiply(%slice.470, %mul.5508)
  %slice.471 = bf16[1,4096,32,64]{3,2,1,0} slice(%dot.625), slice={[0:1], [0:4096], [0:32], [64:128]}
  %sin.78 = f32[1,4096,1,64]{3,2,1,0} sine(%div.950)
  %convert_element_type.2241 = bf16[1,4096,1,64]{3,2,1,0} convert(%sin.78)
  %mul.5510 = bf16[1,4096,64]{2,1,0} reshape(%convert_element_type.2241)
  %mul.5511 = bf16[1,4096,32,64]{3,2,1,0} broadcast(%mul.5510), dimensions={0,1,3}
  %mul.5513 = bf16[1,4096,32,64]{3,2,1,0} multiply(%slice.471, %mul.5511)
  %sub.272 = bf16[1,4096,32,64]{3,2,1,0} subtract(%mul.5509, %mul.5513)
  %mul.5516 = bf16[1,4096,32,64]{3,2,1,0} multiply(%slice.471, %mul.5508)
  %mul.5537 = bf16[1,4096,32,64]{3,2,1,0} multiply(%slice.470, %mul.5511)
  %add.1977 = bf16[1,4096,32,64]{3,2,1,0} add(%mul.5516, %mul.5537)
  %concatenate.350 = bf16[1,4096,32,128]{3,2,1,0} concatenate(%sub.272, %add.1977), dimensions={3}
  %sharding_constraint.1240 = bf16[1,4096,32,128]{3,2,1,0} copy(%concatenate.350)
  %get-tuple-element.763 = bf16[512,8,128]{2,1,0} get-tuple-element(%remat2.18), index=6
  %all-gather.269 = bf16[4096,8,128]{2,1,0} all-gather(%get-tuple-element.763), channel_id=456, replica_groups=[1,8]<=[8], dimensions={0}, use_global_device_ids=true
  %dot.626 = bf16[1,4096,8,128]{3,2,1,0} dot(%sharding_constraint.1239, %all-gather.269), lhs_contracting_dims={2}, rhs_contracting_dims={0}
  %slice.472 = bf16[1,4096,8,64]{3,2,1,0} slice(%dot.626), slice={[0:1], [0:4096], [0:8], [0:64]}
  %mul.5541 = bf16[1,4096,8,64]{3,2,1,0} broadcast(%mul.5507), dimensions={0,1,3}
  %mul.5542 = bf16[1,4096,8,64]{3,2,1,0} multiply(%slice.472, %mul.5541)
  %slice.473 = bf16[1,4096,8,64]{3,2,1,0} slice(%dot.626), slice={[0:1], [0:4096], [0:8], [64:128]}
  %mul.5544 = bf16[1,4096,8,64]{3,2,1,0} broadcast(%mul.5510), dimensions={0,1,3}
  %mul.5545 = bf16[1,4096,8,64]{3,2,1,0} multiply(%slice.473, %mul.5544)
  %sub.273 = bf16[1,4096,8,64]{3,2,1,0} subtract(%mul.5542, %mul.5545)
  %mul.5548 = bf16[1,4096,8,64]{3,2,1,0} multiply(%slice.473, %mul.5541)
  %mul.5551 = bf16[1,4096,8,64]{3,2,1,0} multiply(%slice.472, %mul.5544)
  %add.1978 = bf16[1,4096,8,64]{3,2,1,0} add(%mul.5548, %mul.5551)
  %concatenate.351 = bf16[1,4096,8,128]{3,2,1,0} concatenate(%sub.273, %add.1978), dimensions={3}
  %sharding_constraint.1243 = bf16[1,4096,8,128]{3,2,1,0} copy(%concatenate.351)
  %get-tuple-element.764 = bf16[512,8,128]{2,1,0} get-tuple-element(%remat2.18), index=9
  %all-gather.270 = bf16[4096,8,128]{2,1,0} all-gather(%get-tuple-element.764), channel_id=457, replica_groups=[1,8]<=[8], dimensions={0}, use_global_device_ids=true
  %dot.627 = bf16[1,4096,8,128]{3,2,1,0} dot(%sharding_constraint.1239, %all-gather.270), lhs_contracting_dims={2}, rhs_contracting_dims={0}
  %sharding_constraint.1245 = bf16[1,4096,8,128]{3,2,1,0} copy(%dot.627)
  %get-tuple-element.765 = s32[1,4096]{1,0} get-tuple-element(%remat2.18), index=11
  %eq.2247 = s32[1,4096,4096]{2,1,0} broadcast(%get-tuple-element.765), dimensions={0,1}
  %eq.2248 = s32[1,4096,4096]{2,1,0} broadcast(%get-tuple-element.765), dimensions={0,2}
  %eq.2249 = pred[1,4096,4096]{2,1,0} compare(%eq.2247, %eq.2248), direction=EQ
  %and.150 = pred[1,4096,4096]{2,1,0} and(%eq.2249, %and.64)
  %select_n.476 = f32[1,4096,4096]{2,1,0} select(%and.150, %broadcast_in_dim.516, %broadcast_in_dim.517)
  %ne.105 = pred[1,4096,4096]{2,1,0} compare(%select_n.476, %broadcast_in_dim.516), direction=NE
  %not.103 = pred[1,4096,4096]{2,1,0} not(%ne.105)
  %convert_element_type.2246 = s32[1,4096,4096]{2,1,0} convert(%not.103)
  %reduce.586 = s32[1,4096]{1,0} reduce(%convert_element_type.2246, %constant.1181), dimensions={1}, to_apply=%region_518.13346
  %reduce_sum.5706 = s32[1,1,1,4096]{3,2,1,0} reshape(%reduce.586)
  %slice.474 = s32[1,1,1,1]{3,2,1,0} slice(%reduce_sum.5706), slice={[0:1], [0:1], [0:1], [0:1]}
  %squeeze.39 = s32[1,1]{1,0} reshape(%slice.474)
  %reshape.11566 = s32[1]{0} reshape(%squeeze.39)
  %lt.132 = pred[1]{0} compare(%reshape.11566, %constant.1418), direction=LT
  %select_n.477 = s32[1]{0} select(%lt.132, %broadcast_in_dim.518, %reshape.11566)
  %concatenate.352 = s32[2]{0} concatenate(%constant.1418, %select_n.477), dimensions={0}
  %reduce.587 = s32[1,4096]{1,0} reduce(%convert_element_type.2246, %constant.1181), dimensions={2}, to_apply=%region_519.13355
  %reduce_sum.5707 = s32[1,1,1,4096]{3,2,1,0} reshape(%reduce.587)
  %reduce.588 = s32[1,1]{1,0} reduce(%reduce_sum.5707, %constant.1415), dimensions={3,2}, to_apply=%region_520.13361
  %reshape.11567 = s32[1]{0} reshape(%reduce.588)
  %lt.133 = pred[1]{0} compare(%reshape.11567, %constant.1418), direction=LT
  %select_n.478 = s32[1]{0} select(%lt.133, %broadcast_in_dim.518, %reshape.11567)
  %concatenate.353 = s32[2]{0} concatenate(%constant.1418, %select_n.478), dimensions={0}
  %te_fused_attn_forward_ffi.156 = (bf16[1,4096,32,128]{3,2,1,0}, f32[1,32,4096,1]{3,2,1,0}, u32[2,4]{1,0}, u8[48]{0}) custom-call(%sharding_constraint.1240, %sharding_constraint.1243, %sharding_constraint.1245, %constant.1403, %dynamic-slice.38, /*index=5*/%concatenate.352, %concatenate.353, %constant.1416, %constant.1416, %constant.1416, /*index=10*/%constant.1416, %constant.1416, %constant.1416), custom_call_target="te_fused_attn_forward_ffi", operand_layout_constraints={bf16[1,4096,32,128]{3,2,1,0}, bf16[1,4096,8,128]{3,2,1,0}, bf16[1,4096,8,128]{3,2,1,0}, bf16[0]{0}, u32[2]{0}, s32[2]{0}, s32[2]{0}, f32[0]{0}, f32[0]{0}, f32[0]{0}, f32[0]{0}, f32[0]{0}, f32[0]{0}}, api_version=API_VERSION_TYPED_FFI, backend_config={attn_heads = 32 : i64, bias_batch = 0 : i64, bias_heads = 0 : i64, bias_type = 0 : i64, deterministic = false, dropout_probability = 0.000000e+00 : f64, input_batch = 1 : i64, is_training = true, kv_max_seqlen = 4096 : i64, mask_type = 3 : i64, max_segments_per_seq = 1 : i64, num_gqa_groups = 8 : i64, q_max_seqlen = 4096 : i64, qk_head_dim = 128 : i64, qkv_layout = 9 : i64, scaling_factor = 1.000000e+00 : f64, v_head_dim = 128 : i64, window_size_left = -1 : i64, window_size_right = -1 : i64}
  %get-tuple-element.766 = bf16[1,4096,32,128]{3,2,1,0} get-tuple-element(%te_fused_attn_forward_ffi.156), index=0
  %sharding_constraint.1246 = bf16[1,4096,32,128]{3,2,1,0} copy(%get-tuple-element.766)
  %get-tuple-element.767 = bf16[32,128,512]{2,1,0} get-tuple-element(%remat2.18), index=7
  %all-gather.271 = bf16[32,128,4096]{2,1,0} all-gather(%get-tuple-element.767), channel_id=458, replica_groups=[1,8]<=[8], dimensions={2}, use_global_device_ids=true
  %dot.628 = bf16[1,4096,4096]{2,1,0} dot(%sharding_constraint.1246, %all-gather.271), lhs_contracting_dims={2,3}, rhs_contracting_dims={0,1}
  %sharding_constraint.1247 = bf16[1,4096,4096]{2,1,0} copy(%dot.628)
  %add.1979 = bf16[1,4096,4096]{2,1,0} add(%sharding_constraint.1237, %sharding_constraint.1247)
  %convert_element_type.2248 = f32[1,4096,4096]{2,1,0} convert(%add.1979)
  %square.83 = f32[1,4096,4096]{2,1,0} multiply(%convert_element_type.2248, %convert_element_type.2248)
  %reduce.589 = f32[1,4096]{1,0} reduce(%square.83, %constant.1360), dimensions={2}, to_apply=%region_521.13376
  %div.955 = f32[1,4096]{1,0} multiply(%reduce.589, %broadcast.3412)
  %add.1981 = f32[1,4096]{1,0} add(%div.955, %broadcast.3413)
  %add.1982 = f32[1,4096,1]{2,1,0} reshape(%add.1981)
  %rsqrt.144 = f32[1,4096,1]{2,1,0} rsqrt(%add.1982)
  %mul.5552 = f32[1,4096]{1,0} reshape(%rsqrt.144)
  %mul.5553 = f32[1,4096,4096]{2,1,0} broadcast(%mul.5552), dimensions={0,1}
  %mul.5554 = f32[1,4096,4096]{2,1,0} multiply(%convert_element_type.2248, %mul.5553)
  %convert_element_type.2249 = bf16[1,4096,4096]{2,1,0} convert(%mul.5554)
  %get-tuple-element.768 = bf16[4096]{0} get-tuple-element(%remat2.18), index=4
  %mul.5555 = bf16[1,4096,4096]{2,1,0} broadcast(%get-tuple-element.768), dimensions={2}
  %mul.5556 = bf16[1,4096,4096]{2,1,0} multiply(%convert_element_type.2249, %mul.5555)
  %sharding_constraint.1248 = bf16[1,4096,4096]{2,1,0} copy(%mul.5556)
  %get-tuple-element.769 = bf16[512,8]{1,0} get-tuple-element(%remat2.18), index=0
  %all-gather.272 = bf16[4096,8]{1,0} all-gather(%get-tuple-element.769), channel_id=459, replica_groups=[1,8]<=[8], dimensions={0}, use_global_device_ids=true
  %dot.629 = bf16[1,4096,8]{2,1,0} dot(%sharding_constraint.1248, %all-gather.272), lhs_contracting_dims={2}, rhs_contracting_dims={0}
  %sharding_constraint.1249 = bf16[1,4096,8]{2,1,0} copy(%dot.629)
  %top_k.117 = bf16[4096,8]{1,0} reshape(%sharding_constraint.1249)
  %top_k.118 = (bf16[4096,2]{1,0}, s32[4096,2]{1,0}) custom-call(%top_k.117), custom_call_target="TopK", called_computations={%compare_greater_than.39.13397.clone}
  %get-tuple-element.770 = bf16[4096,2]{1,0} get-tuple-element(%top_k.118), index=0
  %get-tuple-element.771 = s32[4096,2]{1,0} get-tuple-element(%top_k.118), index=1
  %add.1983 = s32[4096,2]{1,0} add(%get-tuple-element.771, %broadcast.3418)
  %sort.103 = (bf16[4096,2]{1,0}, s32[4096,2]{1,0}) sort(%get-tuple-element.770, %add.1983), dimensions={1}, is_stable=true, to_apply=%compare-value-and-index.39
  %get-tuple-element.773 = s32[4096,2]{1,0} get-tuple-element(%sort.103), index=1
  %slice.476 = s32[4096,2]{1,0} slice(%get-tuple-element.773), slice={[0:4096], [0:2]}
  %top_k.119 = s32[1,4096,2]{2,1,0} reshape(%slice.476)
  %lt.134 = pred[1,4096,2]{2,1,0} compare(%top_k.119, %broadcast.3419), direction=LT
  %add.1984 = s32[1,4096,2]{2,1,0} add(%top_k.119, %broadcast.3420)
  %select_n.479 = s32[1,4096,2]{2,1,0} select(%lt.134, %add.1984, %top_k.119)
  %broadcast_in_dim.659 = s32[1,4096,2,1]{3,2,1,0} reshape(%select_n.479)
  %concatenate.354 = s32[1,4096,2,3]{3,2,1,0} concatenate(%add.1356, %iota.2474, %broadcast_in_dim.659), dimensions={3}
  %subtract.126 = s32[1,4096,2,3]{3,2,1,0} subtract(%concatenate.354, %broadcast.3428)
  %scatter.214 = u32[1,4096,8]{2,1,0} scatter(%dynamic-slice.43, %subtract.126, %add.1401), update_window_dims={}, inserted_window_dims={0,1,2}, scatter_dims_to_operand_dims={0,1,2}, index_vector_dim=3, to_apply=%region_522.13433.clone
  %gather.46 = u32[1,4096,2]{2,1,0} gather(%scatter.214, %subtract.126), offset_dims={}, collapsed_slice_dims={0,1,2}, start_index_map={0,1,2}, index_vector_dim=3, slice_sizes={1,1,1}
  %eq.2250 = pred[1,4096,2]{2,1,0} compare(%add.1401, %gather.46), direction=EQ
  %get-tuple-element.772 = bf16[4096,2]{1,0} get-tuple-element(%sort.103), index=0
  %slice.475 = bf16[4096,2]{1,0} slice(%get-tuple-element.772), slice={[0:4096], [0:2]}
  %convert_element_type.2250 = f32[4096,2]{1,0} convert(%slice.475)
  %convert_element_type.2251 = f32[1,4096,2]{2,1,0} reshape(%convert_element_type.2250)
  %reduce.590 = f32[4096]{0} reduce(%convert_element_type.2250, %constant.1450), dimensions={1}, to_apply=%region_523.13442
  %sub.274 = f32[1,4096]{1,0} reshape(%reduce.590)
  %sub.275 = f32[1,4096,2]{2,1,0} broadcast(%sub.274), dimensions={0,1}
  %sub.276 = f32[1,4096,2]{2,1,0} subtract(%convert_element_type.2251, %sub.275)
  %exp.205 = f32[1,4096,2]{2,1,0} exponential(%sub.276)
  %reduce.591 = f32[1,4096]{1,0} reduce(%exp.205, %constant.1360), dimensions={2}, to_apply=%region_524.13451
  %div.956 = f32[1,4096,2]{2,1,0} broadcast(%reduce.591), dimensions={0,1}
  %div.957 = f32[1,4096,2]{2,1,0} divide(%exp.205, %div.956)
  %convert_element_type.2252 = bf16[1,4096,2]{2,1,0} convert(%div.957)
  %select_n.480 = bf16[1,4096,2]{2,1,0} select(%eq.2250, %convert_element_type.2252, %broadcast.3427)
  %scatter.215 = bf16[1,4096,8]{2,1,0} scatter(%broadcast.3379, %subtract.126, %select_n.480), update_window_dims={}, inserted_window_dims={0,1,2}, scatter_dims_to_operand_dims={0,1,2}, index_vector_dim=3, to_apply=%region_525.13460.clone
  %eq.2252 = s32[1,4096,2,8]{3,2,1,0} broadcast(%top_k.119), dimensions={0,1,2}
  %iota.2485 = s32[1,4096,2,8]{3,2,1,0} iota(), iota_dimension=3
  %eq.2253 = pred[1,4096,2,8]{3,2,1,0} compare(%eq.2252, %iota.2485), direction=EQ
  %convert_element_type.2253 = s32[1,4096,2,8]{3,2,1,0} convert(%eq.2253)
  %reshape.11603 = s32[1,8192,8]{2,1,0} reshape(%convert_element_type.2253)
  %sharding_constraint.1250 = s32[1,8192,8]{2,1,0} copy(%reshape.11603)
  %reduce-window.39 = s32[1,8192,8]{2,1,0} reduce-window(%sharding_constraint.1250, %constant.1181), window={size=1x8192x1 pad=0_0x8191_0x0_0}, to_apply=%region_526.13472
  %reshape.11606 = s32[1,4096,2,8]{3,2,1,0} reshape(%reduce-window.39)
  %sharding_constraint.1251 = s32[1,4096,2,8]{3,2,1,0} copy(%reshape.11606)
  %le.94 = pred[1,4096,2,8]{3,2,1,0} compare(%sharding_constraint.1251, %broadcast.3429), direction=LE
  %mul.5565 = s32[1,4096,2,8]{3,2,1,0} select(%le.94, %convert_element_type.2253, %broadcast.3430)
  %reduce.592 = s32[1,4096,8]{2,1,0} reduce(%mul.5565, %constant.1181), dimensions={2}, to_apply=%region_527.13481
  %convert_element_type.2254 = bf16[1,4096,8]{2,1,0} convert(%reduce.592)
  %mul.5574 = bf16[1,4096,8]{2,1,0} multiply(%scatter.215, %convert_element_type.2254)
  %mul.5575 = bf16[1,4096,8,1025]{3,2,1,0} broadcast(%mul.5574), dimensions={0,1,2}
  %mul.5576 = s32[1,8192,8]{2,1,0} multiply(%sharding_constraint.1250, %reduce-window.39)
  %reshape.11607 = s32[1,4096,2,8]{3,2,1,0} reshape(%mul.5576)
  %reduce.593 = s32[1,4096,8]{2,1,0} reduce(%reshape.11607, %constant.1181), dimensions={2}, to_apply=%region_528.13491
  %mul.5577 = s32[1,4096,8]{2,1,0} multiply(%reduce.593, %reduce.592)
  %eq.2254 = s32[1,4096,8,1025]{3,2,1,0} broadcast(%mul.5577), dimensions={0,1,2}
  %iota.2486 = s32[1,4096,8,1025]{3,2,1,0} iota(), iota_dimension=3
  %eq.2255 = pred[1,4096,8,1025]{3,2,1,0} compare(%eq.2254, %iota.2486), direction=EQ
  %convert_element_type.2255 = s32[1,4096,8,1025]{3,2,1,0} convert(%eq.2255)
  %convert_element_type.2256 = bf16[1,4096,8,1025]{3,2,1,0} convert(%convert_element_type.2255)
  %mul.5578 = bf16[1,4096,8,1025]{3,2,1,0} multiply(%mul.5575, %convert_element_type.2256)
  %slice.477 = bf16[1,4096,8,1024]{3,2,1,0} slice(%mul.5578), slice={[0:1], [0:4096], [0:8], [1:1025]}
  %convert_element_type.2259 = pred[1,4096,8,1024]{3,2,1,0} compare(%slice.477, %broadcast.3431), direction=NE
  %sharding_constraint.1252 = pred[1,4096,8,1024]{3,2,1,0} copy(%convert_element_type.2259)
  %dot_general.82 = bf16[1,4096,8,1024]{3,2,1,0} convert(%sharding_constraint.1252)
  %dot.630 = bf16[1,8,1024,4096]{3,2,1,0} dot(%dot_general.82, %sharding_constraint.1248), lhs_batch_dims={0}, lhs_contracting_dims={1}, rhs_batch_dims={0}, rhs_contracting_dims={1}
  %reshape.11610 = bf16[1,8,1,1024,4096]{4,3,2,1,0} reshape(%dot.630)
  %all-to-all.92 = bf16[1,8,1,1024,4096]{4,3,2,1,0} all-to-all(%reshape.11610), channel_id=463, replica_groups=[1,8]<=[8], dimensions={1}
  %transpose.150 = bf16[8,1,1,1024,4096]{4,3,2,0,1} transpose(%all-to-all.92), dimensions={1,0,2,3,4}
  %reshape.11611 = bf16[8,1,1024,4096]{3,2,1,0} reshape(%transpose.150)
  %transpose.151 = bf16[1,8,1024,4096]{3,2,0,1} transpose(%reshape.11611), dimensions={1,0,2,3}
  %sharding_constraint.1253 = bf16[1,8,1024,4096]{3,2,0,1} copy(%transpose.151)
  %get-tuple-element.776 = bf16[1,4096,14336]{2,1,0} get-tuple-element(%remat2.18), index=1
  %sharding_constraint.1254 = bf16[1,4096,14336]{2,1,0} copy(%get-tuple-element.776)
  %dot.631 = bf16[1,8,1024,14336]{3,2,1,0} dot(%sharding_constraint.1253, %sharding_constraint.1254), lhs_batch_dims={0}, lhs_contracting_dims={3}, rhs_batch_dims={0}, rhs_contracting_dims={1}
  %sharding_constraint.1255 = bf16[1,8,1024,14336]{3,2,1,0} copy(%dot.631)
  %neg.218 = bf16[1,8,1024,14336]{3,2,1,0} negate(%sharding_constraint.1255)
  %exp.206 = bf16[1,8,1024,14336]{3,2,1,0} exponential(%neg.218)
  %add.1989 = bf16[1,8,1024,14336]{3,2,1,0} add(%exp.206, %jit_silu_.0)
  %div.958 = bf16[1,8,1024,14336]{3,2,1,0} divide(%jit_silu_.0, %add.1989)
  %mul.5579 = bf16[1,8,1024,14336]{3,2,1,0} multiply(%sharding_constraint.1255, %div.958)
  %sharding_constraint.1256 = bf16[1,4096,4096]{2,1,0} copy(%sharding_constraint.1236)
  %sharding_constraint.1257 = bf16[1,4096,8,1024]{3,2,1,0} copy(%slice.477)
  %dot.632 = bf16[1,4096,8,1024]{3,2,1,0} dot(%sharding_constraint.1256, %sharding_constraint.1257), lhs_batch_dims={0}, lhs_contracting_dims={1}, rhs_batch_dims={0}, rhs_contracting_dims={1}
  %reshape.11614 = bf16[1,4096,8,1,1024]{4,3,2,1,0} reshape(%dot.632)
  %all-to-all.93 = bf16[1,4096,8,1,1024]{4,3,2,1,0} all-to-all(%reshape.11614), channel_id=464, replica_groups=[1,8]<=[8], dimensions={2}
  %transpose.152 = bf16[8,1,4096,1,1024]{4,3,0,2,1} transpose(%all-to-all.93), dimensions={2,0,1,3,4}
  %reshape.11615 = bf16[8,4096,1,1024]{3,2,1,0} reshape(%transpose.152)
  %transpose.153 = bf16[1,8,1024,4096]{2,0,3,1} transpose(%reshape.11615), dimensions={2,0,3,1}
  %sharding_constraint.1258 = bf16[1,8,1024,4096]{2,0,3,1} copy(%transpose.153)
  %get-tuple-element.777 = bf16[1,14336,4096]{2,1,0} get-tuple-element(%remat2.18), index=3
  %sharding_constraint.1259 = bf16[1,14336,4096]{2,1,0} copy(%get-tuple-element.777)
  %dot.633 = bf16[1,8,1024,14336]{3,2,1,0} dot(%sharding_constraint.1258, %sharding_constraint.1259), lhs_batch_dims={0}, lhs_contracting_dims={3}, rhs_batch_dims={0}, rhs_contracting_dims={2}
  %mul.5580 = bf16[1,8,1024,14336]{3,2,1,0} multiply(%mul.5579, %dot.633)
  %sharding_constraint.1260 = bf16[1,8,1024,14336]{3,2,1,0} copy(%mul.5580)
  %get-tuple-element.778 = bf16[1,4096,14336]{2,1,0} get-tuple-element(%remat2.18), index=2
  %sharding_constraint.1261 = bf16[1,4096,14336]{2,1,0} copy(%get-tuple-element.778)
  %dot.634 = bf16[1,8,1024,4096]{3,2,1,0} dot(%sharding_constraint.1260, %sharding_constraint.1261), lhs_batch_dims={0}, lhs_contracting_dims={3}, rhs_batch_dims={0}, rhs_contracting_dims={2}
  %dot.635 = bf16[1,8,1024,14336]{3,2,1,0} dot(%sharding_constraint.1253, %sharding_constraint.1261), lhs_batch_dims={0}, lhs_contracting_dims={3}, rhs_batch_dims={0}, rhs_contracting_dims={1}
  %sharding_constraint.1262 = bf16[1,8,1024,14336]{3,2,1,0} copy(%dot.635)
  %mul.5581 = bf16[1,8,1024,14336]{3,2,1,0} multiply(%dot.633, %sharding_constraint.1262)
  %mul.5582 = bf16[1,8,1024,14336]{3,2,1,0} multiply(%mul.5581, %div.958)
  %mul.5583 = bf16[1,8,1024,14336]{3,2,1,0} multiply(%sharding_constraint.1255, %mul.5581)
  %sub.277 = bf16[1,8,1024,14336]{3,2,1,0} subtract(%jit_silu_.0, %div.958)
  %mul.5584 = bf16[1,8,1024,14336]{3,2,1,0} multiply(%div.958, %sub.277)
  %mul.5585 = bf16[1,8,1024,14336]{3,2,1,0} multiply(%mul.5583, %mul.5584)
  %add_any.165 = bf16[1,8,1024,14336]{3,2,1,0} add(%mul.5582, %mul.5585)
  %sharding_constraint.1263 = bf16[1,8,1024,14336]{3,2,1,0} copy(%add_any.165)
  %dot.636 = bf16[1,8,1024,4096]{3,2,1,0} dot(%sharding_constraint.1263, %sharding_constraint.1254), lhs_batch_dims={0}, lhs_contracting_dims={3}, rhs_batch_dims={0}, rhs_contracting_dims={2}
  %add_any.166 = bf16[1,8,1024,4096]{3,2,1,0} add(%dot.634, %dot.636)
  %sharding_constraint.1264 = bf16[1,8,1024,4096]{3,2,1,0} copy(%add_any.166)
  %transpose.154 = bf16[8,1,1024,4096]{3,2,0,1} transpose(%sharding_constraint.1264), dimensions={1,0,2,3}
  %reshape.11618 = bf16[8,1,1,1024,4096]{4,3,2,1,0} reshape(%transpose.154)
  %all-to-all.94 = bf16[8,1,1,1024,4096]{4,3,2,1,0} all-to-all(%reshape.11618), channel_id=465, replica_groups=[1,8]<=[8], dimensions={0}
  %transpose.155 = bf16[1,8,1,1024,4096]{4,3,2,0,1} transpose(%all-to-all.94), dimensions={1,0,2,3,4}
  %reshape.11619 = bf16[1,8,1024,4096]{3,2,1,0} reshape(%transpose.155)
  %dot.637 = bf16[1,4096,4096]{2,1,0} dot(%dot_general.82, %reshape.11619), lhs_batch_dims={0}, lhs_contracting_dims={2,3}, rhs_batch_dims={0}, rhs_contracting_dims={1,2}
  %reshape.11621 = s32[1,4096,2,1]{3,2,1,0} reshape(%slice.476)
  %ge.7 = pred[1,4096,2,3]{3,2,1,0} compare(%concatenate.354, %broadcast.3629), direction=GE
  %le.96 = pred[1,4096,2,3]{3,2,1,0} compare(%concatenate.354, %le.67), direction=LE
  %and.151 = pred[1,4096,2,3]{3,2,1,0} and(%ge.7, %le.96)
  %reduce.594 = pred[1,4096,2]{2,1,0} reduce(%and.151, %constant.5574), dimensions={3}, to_apply=%region_529.13548
  %mul.5586 = bf16[1,8,1024,14336]{3,2,1,0} multiply(%mul.5579, %sharding_constraint.1262)
  %dot.638 = bf16[1,8,1024,4096]{3,2,1,0} dot(%mul.5586, %sharding_constraint.1259), lhs_batch_dims={0}, lhs_contracting_dims={3}, rhs_batch_dims={0}, rhs_contracting_dims={1}
  %sharding_constraint.1265 = bf16[1,8,1024,4096]{3,2,1,0} copy(%dot.638)
  %reshape.11628 = bf16[1,8,1,1024,4096]{4,3,2,1,0} reshape(%sharding_constraint.1265)
  %all-to-all.95 = bf16[1,8,1,1024,4096]{4,3,2,1,0} all-to-all(%reshape.11628), channel_id=466, replica_groups=[1,8]<=[8], dimensions={1}
  %transpose.156 = bf16[8,1,1,1024,4096]{4,3,2,0,1} transpose(%all-to-all.95), dimensions={1,0,2,3,4}
  %reshape.11629 = bf16[8,1,1024,4096]{3,2,1,0} reshape(%transpose.156)
  %dot.639 = bf16[1,4096,8,1024]{3,2,1,0} dot(%sharding_constraint.1256, %reshape.11629), lhs_batch_dims={0}, lhs_contracting_dims={2}, rhs_batch_dims={1}, rhs_contracting_dims={3}
  %sharding_constraint.1266 = bf16[1,4096,8,1024]{3,2,1,0} copy(%dot.639)
  %pad.7 = bf16[1,4096,8,1025]{3,2,1,0} pad(%sharding_constraint.1266, %constant.1190), padding=0_0x0_0x0_0x1_0
  %mul.5587 = bf16[1,4096,8,1025]{3,2,1,0} multiply(%pad.7, %convert_element_type.2256)
  %reduce.595 = bf16[1,4096,8]{2,1,0} reduce(%mul.5587, %constant.1190), dimensions={3}, to_apply=%region_530.13560
  %mul.5588 = bf16[1,4096,8]{2,1,0} multiply(%reduce.595, %convert_element_type.2254)
  %gather.47 = bf16[1,4096,2]{2,1,0} gather(%mul.5588, %subtract.126), offset_dims={}, collapsed_slice_dims={0,1,2}, start_index_map={0,1,2}, index_vector_dim=3, slice_sizes={1,1,1}
  %select_n.481 = bf16[1,4096,2]{2,1,0} select(%reduce.594, %gather.47, %broadcast.3427)
  %select_n.482 = bf16[1,4096,2]{2,1,0} select(%eq.2250, %select_n.481, %broadcast.3427)
  %convert_element_type.2260 = f32[1,4096,2]{2,1,0} convert(%select_n.482)
  %div.960 = f32[1,4096,2]{2,1,0} divide(%convert_element_type.2260, %div.956)
  %mul.5589 = f32[1,4096]{1,0} multiply(%reduce.591, %reduce.591)
  %div.961 = f32[1,4096]{1,0} divide(%add.1847, %mul.5589)
  %mul.5590 = f32[1,4096,2]{2,1,0} broadcast(%div.961), dimensions={0,1}
  %mul.5593 = f32[1,4096,2]{2,1,0} multiply(%convert_element_type.2260, %mul.5590)
  %mul.5596 = f32[1,4096,2]{2,1,0} multiply(%mul.5593, %exp.205)
  %reduce.596 = f32[1,4096]{1,0} reduce(%mul.5596, %constant.1360), dimensions={2}, to_apply=%region_531.13577
  %neg.219 = f32[1,4096]{1,0} negate(%reduce.596)
  %broadcast_in_dim.660 = f32[1,4096,2]{2,1,0} broadcast(%neg.219), dimensions={0,1}
  %add_any.167 = f32[1,4096,2]{2,1,0} add(%div.960, %broadcast_in_dim.660)
  %mul.5597 = f32[1,4096,2]{2,1,0} multiply(%add_any.167, %exp.205)
  %convert_element_type.2262 = bf16[1,4096,2]{2,1,0} convert(%mul.5597)
  %scatter.216 = bf16[1,4096,8]{2,1,0} scatter(%broadcast.3379, %reshape.11621, %convert_element_type.2262), update_window_dims={}, inserted_window_dims={2}, scatter_dims_to_operand_dims={2}, input_batching_dims={0,1}, scatter_indices_batching_dims={0,1}, index_vector_dim=3, to_apply=%region_532.13587.clone
  %sharding_constraint.1270 = bf16[1,4096,8]{2,1,0} copy(%scatter.216)
  %dot.640 = bf16[1,4096,4096]{2,1,0} dot(%sharding_constraint.1270, %all-gather.272), lhs_contracting_dims={2}, rhs_contracting_dims={1}
  %add_any.168 = bf16[1,4096,4096]{2,1,0} add(%dot.637, %dot.640)
  %sharding_constraint.1271 = bf16[1,4096,4096]{2,1,0} copy(%add_any.168)
  %mul.5599 = bf16[1,4096,4096]{2,1,0} multiply(%sharding_constraint.1271, %mul.5555)
  %convert_element_type.2263 = f32[1,4096,4096]{2,1,0} convert(%mul.5599)
  %mul.5602 = f32[1,4096,4096]{2,1,0} multiply(%convert_element_type.2263, %mul.5553)
  %mul.5603 = f32[1,4096,4096]{2,1,0} multiply(%convert_element_type.2248, %convert_element_type.2263)
  %reduce.597 = f32[1,4096]{1,0} reduce(%mul.5603, %constant.1360), dimensions={2}, to_apply=%region_533.13603
  %reshape.11641 = f32[1,4096,1]{2,1,0} reshape(%reduce.597)
  %div.962 = f32[1,4096,1]{2,1,0} divide(%rsqrt.144, %add.1982)
  %mul.5604 = f32[1,4096,1]{2,1,0} multiply(%div.962, %broadcast.3620)
  %mul.5605 = f32[1,4096,1]{2,1,0} multiply(%reshape.11641, %mul.5604)
  %mul.5606 = f32[1,4096,1]{2,1,0} multiply(%mul.5605, %mul.4455)
  %mul.5607 = f32[1,4096]{1,0} reshape(%mul.5606)
  %mul.5608 = f32[1,4096,4096]{2,1,0} broadcast(%mul.5607), dimensions={0,1}
  %mul.5609 = f32[1,4096,4096]{2,1,0} multiply(%convert_element_type.2248, %mul.5608)
  %add_any.169 = f32[1,4096,4096]{2,1,0} add(%mul.5602, %mul.5609)
  %convert_element_type.2264 = bf16[1,4096,4096]{2,1,0} convert(%add_any.169)
  %add_any.170 = bf16[1,4096,4096]{2,1,0} add(%sharding_constraint.1236, %convert_element_type.2264)
  %get-tuple-element.779 = f32[1,32,4096,1]{3,2,1,0} get-tuple-element(%te_fused_attn_forward_ffi.156), index=1
  %get-tuple-element.780 = u32[2,4]{1,0} get-tuple-element(%te_fused_attn_forward_ffi.156), index=2
  %sharding_constraint.1272 = u32[2,4]{1,0} copy(%get-tuple-element.780)
  %sharding_constraint.1273 = bf16[1,4096,4096]{2,1,0} copy(%add_any.170)
  %dot.641 = bf16[1,4096,32,128]{3,2,1,0} dot(%sharding_constraint.1273, %all-gather.271), lhs_contracting_dims={2}, rhs_contracting_dims={2}
  %sharding_constraint.1274 = bf16[1,4096,32,128]{3,2,1,0} copy(%dot.641)
  %te_fused_attn_backward_ffi.30 = (bf16[1,4096,32,128]{3,2,1,0}, bf16[1,4096,8,128]{3,2,1,0}, bf16[1,4096,8,128]{3,2,1,0}, bf16[0]{0}, u8[134742064]{0}) custom-call(%sharding_constraint.1240, %sharding_constraint.1243, %sharding_constraint.1245, %constant.1403, %get-tuple-element.779, /*index=5*/%sharding_constraint.1272, %get-tuple-element.766, %sharding_constraint.1274, %concatenate.352, %concatenate.353, /*index=10*/%constant.1416, %constant.1416, %constant.1416, %constant.1416, %constant.1416, /*index=15*/%constant.1416), custom_call_target="te_fused_attn_backward_ffi", operand_layout_constraints={bf16[1,4096,32,128]{3,2,1,0}, bf16[1,4096,8,128]{3,2,1,0}, bf16[1,4096,8,128]{3,2,1,0}, bf16[0]{0}, f32[1,32,4096,1]{3,2,1,0}, u32[2,4]{1,0}, bf16[1,4096,32,128]{3,2,1,0}, bf16[1,4096,32,128]{3,2,1,0}, s32[2]{0}, s32[2]{0}, f32[0]{0}, f32[0]{0}, f32[0]{0}, f32[0]{0}, f32[0]{0}, f32[0]{0}}, api_version=API_VERSION_TYPED_FFI, backend_config={attn_heads = 32 : i64, bias_batch = 0 : i64, bias_heads = 0 : i64, bias_type = 0 : i64, deterministic = false, dropout_probability = 0.000000e+00 : f64, input_batch = 1 : i64, is_training = true, kv_max_seqlen = 4096 : i64, mask_type = 3 : i64, max_segments_per_seq = 1 : i64, num_gqa_groups = 8 : i64, q_max_seqlen = 4096 : i64, qk_head_dim = 128 : i64, qkv_layout = 9 : i64, scaling_factor = 1.000000e+00 : f64, v_head_dim = 128 : i64, window_size_left = -1 : i64, window_size_right = -1 : i64}
  %get-tuple-element.781 = bf16[1,4096,8,128]{3,2,1,0} get-tuple-element(%te_fused_attn_backward_ffi.30), index=2
  %sharding_constraint.1275 = bf16[1,4096,8,128]{3,2,1,0} copy(%get-tuple-element.781)
  %dot.642 = bf16[1,4096,4096]{2,1,0} dot(%sharding_constraint.1275, %all-gather.270), lhs_contracting_dims={2,3}, rhs_contracting_dims={1,2}
  %get-tuple-element.782 = bf16[1,4096,8,128]{3,2,1,0} get-tuple-element(%te_fused_attn_backward_ffi.30), index=1
  %sharding_constraint.1276 = bf16[1,4096,8,128]{3,2,1,0} copy(%get-tuple-element.782)
  %slice.478 = bf16[1,4096,8,64]{3,2,1,0} slice(%sharding_constraint.1276), slice={[0:1], [0:4096], [0:8], [64:128]}
  %mul.5612 = bf16[1,4096,8,64]{3,2,1,0} multiply(%slice.478, %mul.5544)
  %slice.479 = bf16[1,4096,8,64]{3,2,1,0} slice(%sharding_constraint.1276), slice={[0:1], [0:4096], [0:8], [0:64]}
  %mul.5615 = bf16[1,4096,8,64]{3,2,1,0} multiply(%slice.479, %mul.5541)
  %add_any.171 = bf16[1,4096,8,64]{3,2,1,0} add(%mul.5612, %mul.5615)
  %mul.5618 = bf16[1,4096,8,64]{3,2,1,0} multiply(%slice.478, %mul.5541)
  %neg.220 = bf16[1,4096,8,64]{3,2,1,0} negate(%slice.479)
  %mul.5621 = bf16[1,4096,8,64]{3,2,1,0} multiply(%neg.220, %mul.5544)
  %add_any.172 = bf16[1,4096,8,64]{3,2,1,0} add(%mul.5618, %mul.5621)
  %concatenate.361 = bf16[1,4096,8,128]{3,2,1,0} concatenate(%add_any.171, %add_any.172), dimensions={3}
  %dot.643 = bf16[1,4096,4096]{2,1,0} dot(%concatenate.361, %all-gather.269), lhs_contracting_dims={2,3}, rhs_contracting_dims={1,2}
  %add_any.173 = bf16[1,4096,4096]{2,1,0} add(%dot.642, %dot.643)
  %sharding_constraint.1277 = bf16[1,4096,4096]{2,1,0} copy(%add_any.173)
  %get-tuple-element.783 = bf16[1,4096,32,128]{3,2,1,0} get-tuple-element(%te_fused_attn_backward_ffi.30), index=0
  %sharding_constraint.1278 = bf16[1,4096,32,128]{3,2,1,0} copy(%get-tuple-element.783)
  %slice.480 = bf16[1,4096,32,64]{3,2,1,0} slice(%sharding_constraint.1278), slice={[0:1], [0:4096], [0:32], [64:128]}
  %mul.5624 = bf16[1,4096,32,64]{3,2,1,0} multiply(%slice.480, %mul.5511)
  %slice.481 = bf16[1,4096,32,64]{3,2,1,0} slice(%sharding_constraint.1278), slice={[0:1], [0:4096], [0:32], [0:64]}
  %mul.5627 = bf16[1,4096,32,64]{3,2,1,0} multiply(%slice.481, %mul.5508)
  %add_any.174 = bf16[1,4096,32,64]{3,2,1,0} add(%mul.5624, %mul.5627)
  %mul.5630 = bf16[1,4096,32,64]{3,2,1,0} multiply(%slice.480, %mul.5508)
  %neg.221 = bf16[1,4096,32,64]{3,2,1,0} negate(%slice.481)
  %mul.5633 = bf16[1,4096,32,64]{3,2,1,0} multiply(%neg.221, %mul.5511)
  %add_any.175 = bf16[1,4096,32,64]{3,2,1,0} add(%mul.5630, %mul.5633)
  %concatenate.362 = bf16[1,4096,32,128]{3,2,1,0} concatenate(%add_any.174, %add_any.175), dimensions={3}
  %dot.644 = bf16[1,4096,4096]{2,1,0} dot(%concatenate.362, %all-gather.268), lhs_contracting_dims={2,3}, rhs_contracting_dims={1,2}
  %sharding_constraint.1279 = bf16[1,4096,4096]{2,1,0} copy(%dot.644)
  %add_any.176 = bf16[1,4096,4096]{2,1,0} add(%sharding_constraint.1277, %sharding_constraint.1279)
  %sharding_constraint.1280 = bf16[1,4096,4096]{2,1,0} copy(%add_any.176)
  %mul.5635 = bf16[1,4096,4096]{2,1,0} multiply(%sharding_constraint.1280, %mul.5504)
  %convert_element_type.2265 = f32[1,4096,4096]{2,1,0} convert(%mul.5635)
  %mul.5638 = f32[1,4096,4096]{2,1,0} multiply(%convert_element_type.2265, %mul.5496)
  %mul.5639 = f32[1,4096,4096]{2,1,0} multiply(%convert_element_type.2235, %convert_element_type.2265)
  %reduce.598 = f32[1,4096]{1,0} reduce(%mul.5639, %constant.1360), dimensions={2}, to_apply=%region_534.13682
  %reshape.11649 = f32[1,4096,1]{2,1,0} reshape(%reduce.598)
  %div.963 = f32[1,4096,1]{2,1,0} divide(%rsqrt.143, %add.1976)
  %mul.5644 = f32[1,4096,1]{2,1,0} multiply(%div.963, %broadcast.3620)
  %mul.5645 = f32[1,4096,1]{2,1,0} multiply(%reshape.11649, %mul.5644)
  %mul.5650 = f32[1,4096,1]{2,1,0} multiply(%mul.5645, %mul.4455)
  %mul.5651 = f32[1,4096]{1,0} reshape(%mul.5650)
  %mul.5652 = f32[1,4096,4096]{2,1,0} broadcast(%mul.5651), dimensions={0,1}
  %mul.5653 = f32[1,4096,4096]{2,1,0} multiply(%convert_element_type.2235, %mul.5652)
  %add_any.177 = f32[1,4096,4096]{2,1,0} add(%mul.5638, %mul.5653)
  %convert_element_type.2268 = bf16[1,4096,4096]{2,1,0} convert(%add_any.177)
  %add_any.178 = bf16[1,4096,4096]{2,1,0} add(%add_any.170, %convert_element_type.2268)
  %sharding_constraint.1281 = bf16[1,4096,4096]{2,1,0} copy(%add_any.178)
  %tuple.255 = (bf16[512,8]{1,0}, bf16[1,4096,14336]{2,1,0}, bf16[1,4096,14336]{2,1,0}, bf16[1,14336,4096]{2,1,0}, bf16[4096]{0}, /*index=5*/bf16[4096]{0}, bf16[512,8,128]{2,1,0}, bf16[32,128,512]{2,1,0}, bf16[512,32,128]{2,1,0}, bf16[512,8,128]{2,1,0}, /*index=10*/bf16[1,4096,4096]{2,1,0}, s32[1,4096]{1,0}, s32[1,4096]{1,0}, bf16[1,4096,4096]{2,1,0}) tuple(%param.243, %param.244, %param.245, %param.246, %param.242, /*index=5*/%param.237, %param.239, %param.241, %param.238, %param.240, /*index=10*/%sharding_constraint.714, %param.10, %param.7, %sharding_constraint.1281)
  %remat2.19 = (bf16[512,8]{1,0}, bf16[1,4096,14336]{2,1,0}, bf16[1,4096,14336]{2,1,0}, bf16[1,14336,4096]{2,1,0}, bf16[4096]{0}, /*index=5*/bf16[4096]{0}, bf16[512,8,128]{2,1,0}, bf16[32,128,512]{2,1,0}, bf16[512,32,128]{2,1,0}, bf16[512,8,128]{2,1,0}, /*index=10*/bf16[1,4096,4096]{2,1,0}, s32[1,4096]{1,0}, s32[1,4096]{1,0}, bf16[1,4096,4096]{2,1,0}) opt-barrier(%tuple.255)
  %get-tuple-element.784 = bf16[1,4096,4096]{2,1,0} get-tuple-element(%remat2.19), index=13
  %sharding_constraint.1282 = bf16[1,4096,4096]{2,1,0} copy(%get-tuple-element.784)
  %iota.2491 = s32[1,4096,2,1]{3,2,1,0} iota(), iota_dimension=1
  %get-tuple-element.785 = bf16[1,4096,4096]{2,1,0} get-tuple-element(%remat2.19), index=10
  %sharding_constraint.1283 = bf16[1,4096,4096]{2,1,0} copy(%get-tuple-element.785)
  %convert_element_type.2269 = f32[1,4096,4096]{2,1,0} convert(%sharding_constraint.1283)
  %square.84 = f32[1,4096,4096]{2,1,0} multiply(%convert_element_type.2269, %convert_element_type.2269)
  %reduce.599 = f32[1,4096]{1,0} reduce(%square.84, %constant.1360), dimensions={2}, to_apply=%region_535.13724
  %div.964 = f32[1,4096]{1,0} multiply(%reduce.599, %broadcast.3412)
  %add.1994 = f32[1,4096]{1,0} add(%div.964, %broadcast.3413)
  %add.1995 = f32[1,4096,1]{2,1,0} reshape(%add.1994)
  %rsqrt.145 = f32[1,4096,1]{2,1,0} rsqrt(%add.1995)
  %mul.5654 = f32[1,4096]{1,0} reshape(%rsqrt.145)
  %mul.5655 = f32[1,4096,4096]{2,1,0} broadcast(%mul.5654), dimensions={0,1}
  %mul.5656 = f32[1,4096,4096]{2,1,0} multiply(%convert_element_type.2269, %mul.5655)
  %convert_element_type.2270 = bf16[1,4096,4096]{2,1,0} convert(%mul.5656)
  %get-tuple-element.786 = bf16[4096]{0} get-tuple-element(%remat2.19), index=5
  %mul.5657 = bf16[1,4096,4096]{2,1,0} broadcast(%get-tuple-element.786), dimensions={2}
  %mul.5658 = bf16[1,4096,4096]{2,1,0} multiply(%convert_element_type.2270, %mul.5657)
  %sharding_constraint.1284 = bf16[1,4096,4096]{2,1,0} copy(%mul.5658)
  %sharding_constraint.1285 = bf16[1,4096,4096]{2,1,0} copy(%sharding_constraint.1284)
  %get-tuple-element.787 = bf16[512,32,128]{2,1,0} get-tuple-element(%remat2.19), index=8
  %all-gather.274 = bf16[4096,32,128]{2,1,0} all-gather(%get-tuple-element.787), channel_id=469, replica_groups=[1,8]<=[8], dimensions={0}, use_global_device_ids=true
  %dot.645 = bf16[1,4096,32,128]{3,2,1,0} dot(%sharding_constraint.1285, %all-gather.274), lhs_contracting_dims={2}, rhs_contracting_dims={0}
  %slice.482 = bf16[1,4096,32,64]{3,2,1,0} slice(%dot.645), slice={[0:1], [0:4096], [0:32], [0:64]}
  %get-tuple-element.788 = s32[1,4096]{1,0} get-tuple-element(%remat2.19), index=12
  %convert_element_type.2271 = f32[1,4096]{1,0} convert(%get-tuple-element.788)
  %div.965 = f32[1,4096,1,64]{3,2,1,0} broadcast(%convert_element_type.2271), dimensions={0,1}
  %div.968 = f32[1,4096,1,64]{3,2,1,0} divide(%div.965, %div.402)
  %cos.81 = f32[1,4096,1,64]{3,2,1,0} cosine(%div.968)
  %convert_element_type.2274 = bf16[1,4096,1,64]{3,2,1,0} convert(%cos.81)
  %mul.5660 = bf16[1,4096,64]{2,1,0} reshape(%convert_element_type.2274)
  %mul.5661 = bf16[1,4096,32,64]{3,2,1,0} broadcast(%mul.5660), dimensions={0,1,3}
  %mul.5662 = bf16[1,4096,32,64]{3,2,1,0} multiply(%slice.482, %mul.5661)
  %slice.483 = bf16[1,4096,32,64]{3,2,1,0} slice(%dot.645), slice={[0:1], [0:4096], [0:32], [64:128]}
  %sin.80 = f32[1,4096,1,64]{3,2,1,0} sine(%div.968)
  %convert_element_type.2275 = bf16[1,4096,1,64]{3,2,1,0} convert(%sin.80)
  %mul.5663 = bf16[1,4096,64]{2,1,0} reshape(%convert_element_type.2275)
  %mul.5664 = bf16[1,4096,32,64]{3,2,1,0} broadcast(%mul.5663), dimensions={0,1,3}
  %mul.5665 = bf16[1,4096,32,64]{3,2,1,0} multiply(%slice.483, %mul.5664)
  %sub.278 = bf16[1,4096,32,64]{3,2,1,0} subtract(%mul.5662, %mul.5665)
  %mul.5668 = bf16[1,4096,32,64]{3,2,1,0} multiply(%slice.483, %mul.5661)
  %mul.5671 = bf16[1,4096,32,64]{3,2,1,0} multiply(%slice.482, %mul.5664)
  %add.1996 = bf16[1,4096,32,64]{3,2,1,0} add(%mul.5668, %mul.5671)
  %concatenate.363 = bf16[1,4096,32,128]{3,2,1,0} concatenate(%sub.278, %add.1996), dimensions={3}
  %sharding_constraint.1286 = bf16[1,4096,32,128]{3,2,1,0} copy(%concatenate.363)
  %get-tuple-element.789 = bf16[512,8,128]{2,1,0} get-tuple-element(%remat2.19), index=6
  %all-gather.275 = bf16[4096,8,128]{2,1,0} all-gather(%get-tuple-element.789), channel_id=470, replica_groups=[1,8]<=[8], dimensions={0}, use_global_device_ids=true
  %dot.646 = bf16[1,4096,8,128]{3,2,1,0} dot(%sharding_constraint.1285, %all-gather.275), lhs_contracting_dims={2}, rhs_contracting_dims={0}
  %slice.484 = bf16[1,4096,8,64]{3,2,1,0} slice(%dot.646), slice={[0:1], [0:4096], [0:8], [0:64]}
  %mul.5674 = bf16[1,4096,8,64]{3,2,1,0} broadcast(%mul.5660), dimensions={0,1,3}
  %mul.5675 = bf16[1,4096,8,64]{3,2,1,0} multiply(%slice.484, %mul.5674)
  %slice.485 = bf16[1,4096,8,64]{3,2,1,0} slice(%dot.646), slice={[0:1], [0:4096], [0:8], [64:128]}
  %mul.5678 = bf16[1,4096,8,64]{3,2,1,0} broadcast(%mul.5663), dimensions={0,1,3}
  %mul.5679 = bf16[1,4096,8,64]{3,2,1,0} multiply(%slice.485, %mul.5678)
  %sub.279 = bf16[1,4096,8,64]{3,2,1,0} subtract(%mul.5675, %mul.5679)
  %mul.5682 = bf16[1,4096,8,64]{3,2,1,0} multiply(%slice.485, %mul.5674)
  %mul.5688 = bf16[1,4096,8,64]{3,2,1,0} multiply(%slice.484, %mul.5678)
  %add.1997 = bf16[1,4096,8,64]{3,2,1,0} add(%mul.5682, %mul.5688)
  %concatenate.364 = bf16[1,4096,8,128]{3,2,1,0} concatenate(%sub.279, %add.1997), dimensions={3}
  %sharding_constraint.1288 = bf16[1,4096,8,128]{3,2,1,0} copy(%concatenate.364)
  %get-tuple-element.790 = bf16[512,8,128]{2,1,0} get-tuple-element(%remat2.19), index=9
  %all-gather.276 = bf16[4096,8,128]{2,1,0} all-gather(%get-tuple-element.790), channel_id=471, replica_groups=[1,8]<=[8], dimensions={0}, use_global_device_ids=true
  %dot.647 = bf16[1,4096,8,128]{3,2,1,0} dot(%sharding_constraint.1285, %all-gather.276), lhs_contracting_dims={2}, rhs_contracting_dims={0}
  %sharding_constraint.1289 = bf16[1,4096,8,128]{3,2,1,0} copy(%dot.647)
  %get-tuple-element.791 = s32[1,4096]{1,0} get-tuple-element(%remat2.19), index=11
  %eq.2257 = s32[1,4096,4096]{2,1,0} broadcast(%get-tuple-element.791), dimensions={0,1}
  %eq.2258 = s32[1,4096,4096]{2,1,0} broadcast(%get-tuple-element.791), dimensions={0,2}
  %eq.2259 = pred[1,4096,4096]{2,1,0} compare(%eq.2257, %eq.2258), direction=EQ
  %and.153 = pred[1,4096,4096]{2,1,0} and(%eq.2259, %and.64)
  %select_n.485 = f32[1,4096,4096]{2,1,0} select(%and.153, %broadcast_in_dim.516, %broadcast_in_dim.517)
  %ne.106 = pred[1,4096,4096]{2,1,0} compare(%select_n.485, %broadcast_in_dim.516), direction=NE
  %not.104 = pred[1,4096,4096]{2,1,0} not(%ne.106)
  %convert_element_type.2280 = s32[1,4096,4096]{2,1,0} convert(%not.104)
  %reduce.600 = s32[1,4096]{1,0} reduce(%convert_element_type.2280, %constant.1181), dimensions={1}, to_apply=%region_536.13820
  %reduce_sum.5708 = s32[1,1,1,4096]{3,2,1,0} reshape(%reduce.600)
  %slice.486 = s32[1,1,1,1]{3,2,1,0} slice(%reduce_sum.5708), slice={[0:1], [0:1], [0:1], [0:1]}
  %squeeze.40 = s32[1,1]{1,0} reshape(%slice.486)
  %reshape.11656 = s32[1]{0} reshape(%squeeze.40)
  %lt.137 = pred[1]{0} compare(%reshape.11656, %constant.1418), direction=LT
  %select_n.486 = s32[1]{0} select(%lt.137, %broadcast_in_dim.518, %reshape.11656)
  %concatenate.365 = s32[2]{0} concatenate(%constant.1418, %select_n.486), dimensions={0}
  %reduce.601 = s32[1,4096]{1,0} reduce(%convert_element_type.2280, %constant.1181), dimensions={2}, to_apply=%region_537.13829
  %reduce_sum.5709 = s32[1,1,1,4096]{3,2,1,0} reshape(%reduce.601)
  %reduce.602 = s32[1,1]{1,0} reduce(%reduce_sum.5709, %constant.1415), dimensions={3,2}, to_apply=%region_538.13835
  %reshape.11657 = s32[1]{0} reshape(%reduce.602)
  %lt.138 = pred[1]{0} compare(%reshape.11657, %constant.1418), direction=LT
  %select_n.487 = s32[1]{0} select(%lt.138, %broadcast_in_dim.518, %reshape.11657)
  %concatenate.366 = s32[2]{0} concatenate(%constant.1418, %select_n.487), dimensions={0}
  %te_fused_attn_forward_ffi.160 = (bf16[1,4096,32,128]{3,2,1,0}, f32[1,32,4096,1]{3,2,1,0}, u32[2,4]{1,0}, u8[48]{0}) custom-call(%sharding_constraint.1286, %sharding_constraint.1288, %sharding_constraint.1289, %constant.1403, %dynamic-slice.38, /*index=5*/%concatenate.365, %concatenate.366, %constant.1416, %constant.1416, %constant.1416, /*index=10*/%constant.1416, %constant.1416, %constant.1416), custom_call_target="te_fused_attn_forward_ffi", operand_layout_constraints={bf16[1,4096,32,128]{3,2,1,0}, bf16[1,4096,8,128]{3,2,1,0}, bf16[1,4096,8,128]{3,2,1,0}, bf16[0]{0}, u32[2]{0}, s32[2]{0}, s32[2]{0}, f32[0]{0}, f32[0]{0}, f32[0]{0}, f32[0]{0}, f32[0]{0}, f32[0]{0}}, api_version=API_VERSION_TYPED_FFI, backend_config={attn_heads = 32 : i64, bias_batch = 0 : i64, bias_heads = 0 : i64, bias_type = 0 : i64, deterministic = false, dropout_probability = 0.000000e+00 : f64, input_batch = 1 : i64, is_training = true, kv_max_seqlen = 4096 : i64, mask_type = 3 : i64, max_segments_per_seq = 1 : i64, num_gqa_groups = 8 : i64, q_max_seqlen = 4096 : i64, qk_head_dim = 128 : i64, qkv_layout = 9 : i64, scaling_factor = 1.000000e+00 : f64, v_head_dim = 128 : i64, window_size_left = -1 : i64, window_size_right = -1 : i64}
  %get-tuple-element.792 = bf16[1,4096,32,128]{3,2,1,0} get-tuple-element(%te_fused_attn_forward_ffi.160), index=0
  %sharding_constraint.1290 = bf16[1,4096,32,128]{3,2,1,0} copy(%get-tuple-element.792)
  %get-tuple-element.793 = bf16[32,128,512]{2,1,0} get-tuple-element(%remat2.19), index=7
  %all-gather.277 = bf16[32,128,4096]{2,1,0} all-gather(%get-tuple-element.793), channel_id=472, replica_groups=[1,8]<=[8], dimensions={2}, use_global_device_ids=true
  %dot.648 = bf16[1,4096,4096]{2,1,0} dot(%sharding_constraint.1290, %all-gather.277), lhs_contracting_dims={2,3}, rhs_contracting_dims={0,1}
  %sharding_constraint.1291 = bf16[1,4096,4096]{2,1,0} copy(%dot.648)
  %add.1998 = bf16[1,4096,4096]{2,1,0} add(%sharding_constraint.1283, %sharding_constraint.1291)
  %convert_element_type.2282 = f32[1,4096,4096]{2,1,0} convert(%add.1998)
  %square.85 = f32[1,4096,4096]{2,1,0} multiply(%convert_element_type.2282, %convert_element_type.2282)
  %reduce.603 = f32[1,4096]{1,0} reduce(%square.85, %constant.1360), dimensions={2}, to_apply=%region_539.13850
  %div.973 = f32[1,4096]{1,0} multiply(%reduce.603, %broadcast.3412)
  %add.1999 = f32[1,4096]{1,0} add(%div.973, %broadcast.3413)
  %add.2000 = f32[1,4096,1]{2,1,0} reshape(%add.1999)
  %rsqrt.146 = f32[1,4096,1]{2,1,0} rsqrt(%add.2000)
  %mul.5689 = f32[1,4096]{1,0} reshape(%rsqrt.146)
  %mul.5690 = f32[1,4096,4096]{2,1,0} broadcast(%mul.5689), dimensions={0,1}
  %mul.5691 = f32[1,4096,4096]{2,1,0} multiply(%convert_element_type.2282, %mul.5690)
  %convert_element_type.2283 = bf16[1,4096,4096]{2,1,0} convert(%mul.5691)
  %get-tuple-element.794 = bf16[4096]{0} get-tuple-element(%remat2.19), index=4
  %mul.5692 = bf16[1,4096,4096]{2,1,0} broadcast(%get-tuple-element.794), dimensions={2}
  %mul.5694 = bf16[1,4096,4096]{2,1,0} multiply(%convert_element_type.2283, %mul.5692)
  %sharding_constraint.1292 = bf16[1,4096,4096]{2,1,0} copy(%mul.5694)
  %get-tuple-element.795 = bf16[512,8]{1,0} get-tuple-element(%remat2.19), index=0
  %all-gather.278 = bf16[4096,8]{1,0} all-gather(%get-tuple-element.795), channel_id=473, replica_groups=[1,8]<=[8], dimensions={0}, use_global_device_ids=true
  %dot.649 = bf16[1,4096,8]{2,1,0} dot(%sharding_constraint.1292, %all-gather.278), lhs_contracting_dims={2}, rhs_contracting_dims={0}
  %sharding_constraint.1293 = bf16[1,4096,8]{2,1,0} copy(%dot.649)
  %top_k.120 = bf16[4096,8]{1,0} reshape(%sharding_constraint.1293)
  %top_k.121 = (bf16[4096,2]{1,0}, s32[4096,2]{1,0}) custom-call(%top_k.120), custom_call_target="TopK", called_computations={%compare_greater_than.40.13871.clone}
  %get-tuple-element.796 = bf16[4096,2]{1,0} get-tuple-element(%top_k.121), index=0
  %get-tuple-element.797 = s32[4096,2]{1,0} get-tuple-element(%top_k.121), index=1
  %add.2001 = s32[4096,2]{1,0} add(%get-tuple-element.797, %broadcast.3418)
  %sort.104 = (bf16[4096,2]{1,0}, s32[4096,2]{1,0}) sort(%get-tuple-element.796, %add.2001), dimensions={1}, is_stable=true, to_apply=%compare-value-and-index.40
  %get-tuple-element.799 = s32[4096,2]{1,0} get-tuple-element(%sort.104), index=1
  %slice.488 = s32[4096,2]{1,0} slice(%get-tuple-element.799), slice={[0:4096], [0:2]}
  %top_k.122 = s32[1,4096,2]{2,1,0} reshape(%slice.488)
  %lt.139 = pred[1,4096,2]{2,1,0} compare(%top_k.122, %broadcast.3419), direction=LT
  %add.2002 = s32[1,4096,2]{2,1,0} add(%top_k.122, %broadcast.3420)
  %select_n.488 = s32[1,4096,2]{2,1,0} select(%lt.139, %add.2002, %top_k.122)
  %broadcast_in_dim.665 = s32[1,4096,2,1]{3,2,1,0} reshape(%select_n.488)
  %concatenate.367 = s32[1,4096,2,3]{3,2,1,0} concatenate(%add.1356, %iota.2491, %broadcast_in_dim.665), dimensions={3}
  %subtract.130 = s32[1,4096,2,3]{3,2,1,0} subtract(%concatenate.367, %broadcast.3428)
  %scatter.217 = u32[1,4096,8]{2,1,0} scatter(%dynamic-slice.43, %subtract.130, %add.1401), update_window_dims={}, inserted_window_dims={0,1,2}, scatter_dims_to_operand_dims={0,1,2}, index_vector_dim=3, to_apply=%region_540.13907.clone
  %gather.48 = u32[1,4096,2]{2,1,0} gather(%scatter.217, %subtract.130), offset_dims={}, collapsed_slice_dims={0,1,2}, start_index_map={0,1,2}, index_vector_dim=3, slice_sizes={1,1,1}
  %eq.2260 = pred[1,4096,2]{2,1,0} compare(%add.1401, %gather.48), direction=EQ
  %get-tuple-element.798 = bf16[4096,2]{1,0} get-tuple-element(%sort.104), index=0
  %slice.487 = bf16[4096,2]{1,0} slice(%get-tuple-element.798), slice={[0:4096], [0:2]}
  %convert_element_type.2284 = f32[4096,2]{1,0} convert(%slice.487)
  %convert_element_type.2286 = f32[1,4096,2]{2,1,0} reshape(%convert_element_type.2284)
  %reduce.604 = f32[4096]{0} reduce(%convert_element_type.2284, %constant.1450), dimensions={1}, to_apply=%region_541.13916
  %sub.280 = f32[1,4096]{1,0} reshape(%reduce.604)
  %sub.281 = f32[1,4096,2]{2,1,0} broadcast(%sub.280), dimensions={0,1}
  %sub.282 = f32[1,4096,2]{2,1,0} subtract(%convert_element_type.2286, %sub.281)
  %exp.207 = f32[1,4096,2]{2,1,0} exponential(%sub.282)
  %reduce.605 = f32[1,4096]{1,0} reduce(%exp.207, %constant.1360), dimensions={2}, to_apply=%region_542.13925
  %div.974 = f32[1,4096,2]{2,1,0} broadcast(%reduce.605), dimensions={0,1}
  %div.975 = f32[1,4096,2]{2,1,0} divide(%exp.207, %div.974)
  %convert_element_type.2287 = bf16[1,4096,2]{2,1,0} convert(%div.975)
  %select_n.489 = bf16[1,4096,2]{2,1,0} select(%eq.2260, %convert_element_type.2287, %broadcast.3427)
  %scatter.218 = bf16[1,4096,8]{2,1,0} scatter(%broadcast.3379, %subtract.130, %select_n.489), update_window_dims={}, inserted_window_dims={0,1,2}, scatter_dims_to_operand_dims={0,1,2}, index_vector_dim=3, to_apply=%region_543.13934.clone
  %eq.2262 = s32[1,4096,2,8]{3,2,1,0} broadcast(%top_k.122), dimensions={0,1,2}
  %iota.2503 = s32[1,4096,2,8]{3,2,1,0} iota(), iota_dimension=3
  %eq.2263 = pred[1,4096,2,8]{3,2,1,0} compare(%eq.2262, %iota.2503), direction=EQ
  %convert_element_type.2288 = s32[1,4096,2,8]{3,2,1,0} convert(%eq.2263)
  %reshape.11689 = s32[1,8192,8]{2,1,0} reshape(%convert_element_type.2288)
  %sharding_constraint.1294 = s32[1,8192,8]{2,1,0} copy(%reshape.11689)
  %reduce-window.40 = s32[1,8192,8]{2,1,0} reduce-window(%sharding_constraint.1294, %constant.1181), window={size=1x8192x1 pad=0_0x8191_0x0_0}, to_apply=%region_544.13946
  %reshape.11691 = s32[1,4096,2,8]{3,2,1,0} reshape(%reduce-window.40)
  %sharding_constraint.1295 = s32[1,4096,2,8]{3,2,1,0} copy(%reshape.11691)
  %le.98 = pred[1,4096,2,8]{3,2,1,0} compare(%sharding_constraint.1295, %broadcast.3429), direction=LE
  %mul.5695 = s32[1,4096,2,8]{3,2,1,0} select(%le.98, %convert_element_type.2288, %broadcast.3430)
  %reduce.606 = s32[1,4096,8]{2,1,0} reduce(%mul.5695, %constant.1181), dimensions={2}, to_apply=%region_545.13955
  %convert_element_type.2289 = bf16[1,4096,8]{2,1,0} convert(%reduce.606)
  %mul.5696 = bf16[1,4096,8]{2,1,0} multiply(%scatter.218, %convert_element_type.2289)
  %mul.5697 = bf16[1,4096,8,1025]{3,2,1,0} broadcast(%mul.5696), dimensions={0,1,2}
  %mul.5698 = s32[1,8192,8]{2,1,0} multiply(%sharding_constraint.1294, %reduce-window.40)
  %reshape.11692 = s32[1,4096,2,8]{3,2,1,0} reshape(%mul.5698)
  %reduce.607 = s32[1,4096,8]{2,1,0} reduce(%reshape.11692, %constant.1181), dimensions={2}, to_apply=%region_546.13965
  %mul.5700 = s32[1,4096,8]{2,1,0} multiply(%reduce.607, %reduce.606)
  %eq.2264 = s32[1,4096,8,1025]{3,2,1,0} broadcast(%mul.5700), dimensions={0,1,2}
  %iota.2504 = s32[1,4096,8,1025]{3,2,1,0} iota(), iota_dimension=3
  %eq.2265 = pred[1,4096,8,1025]{3,2,1,0} compare(%eq.2264, %iota.2504), direction=EQ
  %convert_element_type.2290 = s32[1,4096,8,1025]{3,2,1,0} convert(%eq.2265)
  %convert_element_type.2291 = bf16[1,4096,8,1025]{3,2,1,0} convert(%convert_element_type.2290)
  %mul.5701 = bf16[1,4096,8,1025]{3,2,1,0} multiply(%mul.5697, %convert_element_type.2291)
  %slice.489 = bf16[1,4096,8,1024]{3,2,1,0} slice(%mul.5701), slice={[0:1], [0:4096], [0:8], [1:1025]}
  %convert_element_type.2292 = pred[1,4096,8,1024]{3,2,1,0} compare(%slice.489, %broadcast.3431), direction=NE
  %sharding_constraint.1296 = pred[1,4096,8,1024]{3,2,1,0} copy(%convert_element_type.2292)
  %dot_general.84 = bf16[1,4096,8,1024]{3,2,1,0} convert(%sharding_constraint.1296)
  %dot.650 = bf16[1,8,1024,4096]{3,2,1,0} dot(%dot_general.84, %sharding_constraint.1292), lhs_batch_dims={0}, lhs_contracting_dims={1}, rhs_batch_dims={0}, rhs_contracting_dims={1}
  %reshape.11695 = bf16[1,8,1,1024,4096]{4,3,2,1,0} reshape(%dot.650)
  %all-to-all.96 = bf16[1,8,1,1024,4096]{4,3,2,1,0} all-to-all(%reshape.11695), channel_id=477, replica_groups=[1,8]<=[8], dimensions={1}
  %transpose.157 = bf16[8,1,1,1024,4096]{4,3,2,0,1} transpose(%all-to-all.96), dimensions={1,0,2,3,4}
  %reshape.11696 = bf16[8,1,1024,4096]{3,2,1,0} reshape(%transpose.157)
  %transpose.158 = bf16[1,8,1024,4096]{3,2,0,1} transpose(%reshape.11696), dimensions={1,0,2,3}
  %sharding_constraint.1297 = bf16[1,8,1024,4096]{3,2,0,1} copy(%transpose.158)
  %get-tuple-element.802 = bf16[1,4096,14336]{2,1,0} get-tuple-element(%remat2.19), index=1
  %sharding_constraint.1298 = bf16[1,4096,14336]{2,1,0} copy(%get-tuple-element.802)
  %dot.651 = bf16[1,8,1024,14336]{3,2,1,0} dot(%sharding_constraint.1297, %sharding_constraint.1298), lhs_batch_dims={0}, lhs_contracting_dims={3}, rhs_batch_dims={0}, rhs_contracting_dims={1}
  %sharding_constraint.1299 = bf16[1,8,1024,14336]{3,2,1,0} copy(%dot.651)
  %neg.222 = bf16[1,8,1024,14336]{3,2,1,0} negate(%sharding_constraint.1299)
  %exp.208 = bf16[1,8,1024,14336]{3,2,1,0} exponential(%neg.222)
  %add.2007 = bf16[1,8,1024,14336]{3,2,1,0} add(%exp.208, %jit_silu_.0)
  %div.976 = bf16[1,8,1024,14336]{3,2,1,0} divide(%jit_silu_.0, %add.2007)
  %mul.5702 = bf16[1,8,1024,14336]{3,2,1,0} multiply(%sharding_constraint.1299, %div.976)
  %sharding_constraint.1300 = bf16[1,4096,4096]{2,1,0} copy(%sharding_constraint.1282)
  %sharding_constraint.1301 = bf16[1,4096,8,1024]{3,2,1,0} copy(%slice.489)
  %dot.652 = bf16[1,4096,8,1024]{3,2,1,0} dot(%sharding_constraint.1300, %sharding_constraint.1301), lhs_batch_dims={0}, lhs_contracting_dims={1}, rhs_batch_dims={0}, rhs_contracting_dims={1}
  %reshape.11700 = bf16[1,4096,8,1,1024]{4,3,2,1,0} reshape(%dot.652)
  %all-to-all.97 = bf16[1,4096,8,1,1024]{4,3,2,1,0} all-to-all(%reshape.11700), channel_id=478, replica_groups=[1,8]<=[8], dimensions={2}
  %transpose.159 = bf16[8,1,4096,1,1024]{4,3,0,2,1} transpose(%all-to-all.97), dimensions={2,0,1,3,4}
  %reshape.11701 = bf16[8,4096,1,1024]{3,2,1,0} reshape(%transpose.159)
  %transpose.160 = bf16[1,8,1024,4096]{2,0,3,1} transpose(%reshape.11701), dimensions={2,0,3,1}
  %sharding_constraint.1302 = bf16[1,8,1024,4096]{2,0,3,1} copy(%transpose.160)
  %get-tuple-element.803 = bf16[1,14336,4096]{2,1,0} get-tuple-element(%remat2.19), index=3
  %sharding_constraint.1303 = bf16[1,14336,4096]{2,1,0} copy(%get-tuple-element.803)
  %dot.653 = bf16[1,8,1024,14336]{3,2,1,0} dot(%sharding_constraint.1302, %sharding_constraint.1303), lhs_batch_dims={0}, lhs_contracting_dims={3}, rhs_batch_dims={0}, rhs_contracting_dims={2}
  %mul.5703 = bf16[1,8,1024,14336]{3,2,1,0} multiply(%mul.5702, %dot.653)
  %sharding_constraint.1304 = bf16[1,8,1024,14336]{3,2,1,0} copy(%mul.5703)
  %get-tuple-element.804 = bf16[1,4096,14336]{2,1,0} get-tuple-element(%remat2.19), index=2
  %sharding_constraint.1305 = bf16[1,4096,14336]{2,1,0} copy(%get-tuple-element.804)
  %dot.654 = bf16[1,8,1024,4096]{3,2,1,0} dot(%sharding_constraint.1304, %sharding_constraint.1305), lhs_batch_dims={0}, lhs_contracting_dims={3}, rhs_batch_dims={0}, rhs_contracting_dims={2}
  %dot.655 = bf16[1,8,1024,14336]{3,2,1,0} dot(%sharding_constraint.1297, %sharding_constraint.1305), lhs_batch_dims={0}, lhs_contracting_dims={3}, rhs_batch_dims={0}, rhs_contracting_dims={1}
  %sharding_constraint.1306 = bf16[1,8,1024,14336]{3,2,1,0} copy(%dot.655)
  %mul.5704 = bf16[1,8,1024,14336]{3,2,1,0} multiply(%dot.653, %sharding_constraint.1306)
  %mul.5705 = bf16[1,8,1024,14336]{3,2,1,0} multiply(%mul.5704, %div.976)
  %mul.5706 = bf16[1,8,1024,14336]{3,2,1,0} multiply(%sharding_constraint.1299, %mul.5704)
  %sub.283 = bf16[1,8,1024,14336]{3,2,1,0} subtract(%jit_silu_.0, %div.976)
  %mul.5707 = bf16[1,8,1024,14336]{3,2,1,0} multiply(%div.976, %sub.283)
  %mul.5708 = bf16[1,8,1024,14336]{3,2,1,0} multiply(%mul.5706, %mul.5707)
  %add_any.179 = bf16[1,8,1024,14336]{3,2,1,0} add(%mul.5705, %mul.5708)
  %sharding_constraint.1307 = bf16[1,8,1024,14336]{3,2,1,0} copy(%add_any.179)
  %dot.656 = bf16[1,8,1024,4096]{3,2,1,0} dot(%sharding_constraint.1307, %sharding_constraint.1298), lhs_batch_dims={0}, lhs_contracting_dims={3}, rhs_batch_dims={0}, rhs_contracting_dims={2}
  %add_any.180 = bf16[1,8,1024,4096]{3,2,1,0} add(%dot.654, %dot.656)
  %sharding_constraint.1308 = bf16[1,8,1024,4096]{3,2,1,0} copy(%add_any.180)
  %transpose.161 = bf16[8,1,1024,4096]{3,2,0,1} transpose(%sharding_constraint.1308), dimensions={1,0,2,3}
  %reshape.11704 = bf16[8,1,1,1024,4096]{4,3,2,1,0} reshape(%transpose.161)
  %all-to-all.98 = bf16[8,1,1,1024,4096]{4,3,2,1,0} all-to-all(%reshape.11704), channel_id=479, replica_groups=[1,8]<=[8], dimensions={0}
  %transpose.162 = bf16[1,8,1,1024,4096]{4,3,2,0,1} transpose(%all-to-all.98), dimensions={1,0,2,3,4}
  %reshape.11705 = bf16[1,8,1024,4096]{3,2,1,0} reshape(%transpose.162)
  %dot.657 = bf16[1,4096,4096]{2,1,0} dot(%dot_general.84, %reshape.11705), lhs_batch_dims={0}, lhs_contracting_dims={2,3}, rhs_batch_dims={0}, rhs_contracting_dims={1,2}
  %reshape.11707 = s32[1,4096,2,1]{3,2,1,0} reshape(%slice.488)
  %ge.8 = pred[1,4096,2,3]{3,2,1,0} compare(%concatenate.367, %broadcast.3629), direction=GE
  %le.100 = pred[1,4096,2,3]{3,2,1,0} compare(%concatenate.367, %le.67), direction=LE
  %and.154 = pred[1,4096,2,3]{3,2,1,0} and(%ge.8, %le.100)
  %reduce.608 = pred[1,4096,2]{2,1,0} reduce(%and.154, %constant.5574), dimensions={3}, to_apply=%region_547.14022
  %mul.5709 = bf16[1,8,1024,14336]{3,2,1,0} multiply(%mul.5702, %sharding_constraint.1306)
  %dot.658 = bf16[1,8,1024,4096]{3,2,1,0} dot(%mul.5709, %sharding_constraint.1303), lhs_batch_dims={0}, lhs_contracting_dims={3}, rhs_batch_dims={0}, rhs_contracting_dims={1}
  %sharding_constraint.1309 = bf16[1,8,1024,4096]{3,2,1,0} copy(%dot.658)
  %reshape.11715 = bf16[1,8,1,1024,4096]{4,3,2,1,0} reshape(%sharding_constraint.1309)
  %all-to-all.99 = bf16[1,8,1,1024,4096]{4,3,2,1,0} all-to-all(%reshape.11715), channel_id=480, replica_groups=[1,8]<=[8], dimensions={1}
  %transpose.163 = bf16[8,1,1,1024,4096]{4,3,2,0,1} transpose(%all-to-all.99), dimensions={1,0,2,3,4}
  %reshape.11717 = bf16[8,1,1024,4096]{3,2,1,0} reshape(%transpose.163)
  %dot.659 = bf16[1,4096,8,1024]{3,2,1,0} dot(%sharding_constraint.1300, %reshape.11717), lhs_batch_dims={0}, lhs_contracting_dims={2}, rhs_batch_dims={1}, rhs_contracting_dims={3}
  %sharding_constraint.1310 = bf16[1,4096,8,1024]{3,2,1,0} copy(%dot.659)
  %pad.8 = bf16[1,4096,8,1025]{3,2,1,0} pad(%sharding_constraint.1310, %constant.1190), padding=0_0x0_0x0_0x1_0
  %mul.5710 = bf16[1,4096,8,1025]{3,2,1,0} multiply(%pad.8, %convert_element_type.2291)
  %reduce.609 = bf16[1,4096,8]{2,1,0} reduce(%mul.5710, %constant.1190), dimensions={3}, to_apply=%region_548.14034
  %mul.5711 = bf16[1,4096,8]{2,1,0} multiply(%reduce.609, %convert_element_type.2289)
  %gather.49 = bf16[1,4096,2]{2,1,0} gather(%mul.5711, %subtract.130), offset_dims={}, collapsed_slice_dims={0,1,2}, start_index_map={0,1,2}, index_vector_dim=3, slice_sizes={1,1,1}
  %select_n.490 = bf16[1,4096,2]{2,1,0} select(%reduce.608, %gather.49, %broadcast.3427)
  %select_n.491 = bf16[1,4096,2]{2,1,0} select(%eq.2260, %select_n.490, %broadcast.3427)
  %convert_element_type.2293 = f32[1,4096,2]{2,1,0} convert(%select_n.491)
  %div.978 = f32[1,4096,2]{2,1,0} divide(%convert_element_type.2293, %div.974)
  %mul.5712 = f32[1,4096]{1,0} multiply(%reduce.605, %reduce.605)
  %div.979 = f32[1,4096]{1,0} divide(%add.1847, %mul.5712)
  %mul.5713 = f32[1,4096,2]{2,1,0} broadcast(%div.979), dimensions={0,1}
  %mul.5714 = f32[1,4096,2]{2,1,0} multiply(%convert_element_type.2293, %mul.5713)
  %mul.5716 = f32[1,4096,2]{2,1,0} multiply(%mul.5714, %exp.207)
  %reduce.610 = f32[1,4096]{1,0} reduce(%mul.5716, %constant.1360), dimensions={2}, to_apply=%region_549.14051
  %neg.223 = f32[1,4096]{1,0} negate(%reduce.610)
  %broadcast_in_dim.666 = f32[1,4096,2]{2,1,0} broadcast(%neg.223), dimensions={0,1}
  %add_any.181 = f32[1,4096,2]{2,1,0} add(%div.978, %broadcast_in_dim.666)
  %mul.5717 = f32[1,4096,2]{2,1,0} multiply(%add_any.181, %exp.207)
  %convert_element_type.2294 = bf16[1,4096,2]{2,1,0} convert(%mul.5717)
  %scatter.219 = bf16[1,4096,8]{2,1,0} scatter(%broadcast.3379, %reshape.11707, %convert_element_type.2294), update_window_dims={}, inserted_window_dims={2}, scatter_dims_to_operand_dims={2}, input_batching_dims={0,1}, scatter_indices_batching_dims={0,1}, index_vector_dim=3, to_apply=%region_550.14061.clone
  %sharding_constraint.1311 = bf16[1,4096,8]{2,1,0} copy(%scatter.219)
  %dot.660 = bf16[1,4096,4096]{2,1,0} dot(%sharding_constraint.1311, %all-gather.278), lhs_contracting_dims={2}, rhs_contracting_dims={1}
  %add_any.182 = bf16[1,4096,4096]{2,1,0} add(%dot.657, %dot.660)
  %sharding_constraint.1312 = bf16[1,4096,4096]{2,1,0} copy(%add_any.182)
  %mul.5720 = bf16[1,4096,4096]{2,1,0} multiply(%sharding_constraint.1312, %mul.5692)
  %convert_element_type.2295 = f32[1,4096,4096]{2,1,0} convert(%mul.5720)
  %mul.5723 = f32[1,4096,4096]{2,1,0} multiply(%convert_element_type.2295, %mul.5690)
  %mul.5724 = f32[1,4096,4096]{2,1,0} multiply(%convert_element_type.2282, %convert_element_type.2295)
  %reduce.611 = f32[1,4096]{1,0} reduce(%mul.5724, %constant.1360), dimensions={2}, to_apply=%region_551.14077
  %reshape.11729 = f32[1,4096,1]{2,1,0} reshape(%reduce.611)
  %div.980 = f32[1,4096,1]{2,1,0} divide(%rsqrt.146, %add.2000)
  %mul.5725 = f32[1,4096,1]{2,1,0} multiply(%div.980, %broadcast.3620)
  %mul.5727 = f32[1,4096,1]{2,1,0} multiply(%reshape.11729, %mul.5725)
  %mul.5728 = f32[1,4096,1]{2,1,0} multiply(%mul.5727, %mul.4455)
  %mul.5729 = f32[1,4096]{1,0} reshape(%mul.5728)
  %mul.5730 = f32[1,4096,4096]{2,1,0} broadcast(%mul.5729), dimensions={0,1}
  %mul.5731 = f32[1,4096,4096]{2,1,0} multiply(%convert_element_type.2282, %mul.5730)
  %add_any.183 = f32[1,4096,4096]{2,1,0} add(%mul.5723, %mul.5731)
  %convert_element_type.2296 = bf16[1,4096,4096]{2,1,0} convert(%add_any.183)
  %add_any.184 = bf16[1,4096,4096]{2,1,0} add(%sharding_constraint.1282, %convert_element_type.2296)
  %get-tuple-element.805 = f32[1,32,4096,1]{3,2,1,0} get-tuple-element(%te_fused_attn_forward_ffi.160), index=1
  %get-tuple-element.806 = u32[2,4]{1,0} get-tuple-element(%te_fused_attn_forward_ffi.160), index=2
  %sharding_constraint.1313 = u32[2,4]{1,0} copy(%get-tuple-element.806)
  %sharding_constraint.1314 = bf16[1,4096,4096]{2,1,0} copy(%add_any.184)
  %dot.661 = bf16[1,4096,32,128]{3,2,1,0} dot(%sharding_constraint.1314, %all-gather.277), lhs_contracting_dims={2}, rhs_contracting_dims={2}
  %sharding_constraint.1315 = bf16[1,4096,32,128]{3,2,1,0} copy(%dot.661)
  %te_fused_attn_backward_ffi.35 = (bf16[1,4096,32,128]{3,2,1,0}, bf16[1,4096,8,128]{3,2,1,0}, bf16[1,4096,8,128]{3,2,1,0}, bf16[0]{0}, u8[134742064]{0}) custom-call(%sharding_constraint.1286, %sharding_constraint.1288, %sharding_constraint.1289, %constant.1403, %get-tuple-element.805, /*index=5*/%sharding_constraint.1313, %get-tuple-element.792, %sharding_constraint.1315, %concatenate.365, %concatenate.366, /*index=10*/%constant.1416, %constant.1416, %constant.1416, %constant.1416, %constant.1416, /*index=15*/%constant.1416), custom_call_target="te_fused_attn_backward_ffi", operand_layout_constraints={bf16[1,4096,32,128]{3,2,1,0}, bf16[1,4096,8,128]{3,2,1,0}, bf16[1,4096,8,128]{3,2,1,0}, bf16[0]{0}, f32[1,32,4096,1]{3,2,1,0}, u32[2,4]{1,0}, bf16[1,4096,32,128]{3,2,1,0}, bf16[1,4096,32,128]{3,2,1,0}, s32[2]{0}, s32[2]{0}, f32[0]{0}, f32[0]{0}, f32[0]{0}, f32[0]{0}, f32[0]{0}, f32[0]{0}}, api_version=API_VERSION_TYPED_FFI, backend_config={attn_heads = 32 : i64, bias_batch = 0 : i64, bias_heads = 0 : i64, bias_type = 0 : i64, deterministic = false, dropout_probability = 0.000000e+00 : f64, input_batch = 1 : i64, is_training = true, kv_max_seqlen = 4096 : i64, mask_type = 3 : i64, max_segments_per_seq = 1 : i64, num_gqa_groups = 8 : i64, q_max_seqlen = 4096 : i64, qk_head_dim = 128 : i64, qkv_layout = 9 : i64, scaling_factor = 1.000000e+00 : f64, v_head_dim = 128 : i64, window_size_left = -1 : i64, window_size_right = -1 : i64}
  %get-tuple-element.807 = bf16[1,4096,8,128]{3,2,1,0} get-tuple-element(%te_fused_attn_backward_ffi.35), index=2
  %sharding_constraint.1316 = bf16[1,4096,8,128]{3,2,1,0} copy(%get-tuple-element.807)
  %dot.662 = bf16[1,4096,4096]{2,1,0} dot(%sharding_constraint.1316, %all-gather.276), lhs_contracting_dims={2,3}, rhs_contracting_dims={1,2}
  %get-tuple-element.808 = bf16[1,4096,8,128]{3,2,1,0} get-tuple-element(%te_fused_attn_backward_ffi.35), index=1
  %sharding_constraint.1317 = bf16[1,4096,8,128]{3,2,1,0} copy(%get-tuple-element.808)
  %slice.490 = bf16[1,4096,8,64]{3,2,1,0} slice(%sharding_constraint.1317), slice={[0:1], [0:4096], [0:8], [64:128]}
  %mul.5736 = bf16[1,4096,8,64]{3,2,1,0} multiply(%slice.490, %mul.5678)
  %slice.491 = bf16[1,4096,8,64]{3,2,1,0} slice(%sharding_constraint.1317), slice={[0:1], [0:4096], [0:8], [0:64]}
  %mul.5743 = bf16[1,4096,8,64]{3,2,1,0} multiply(%slice.491, %mul.5674)
  %add_any.185 = bf16[1,4096,8,64]{3,2,1,0} add(%mul.5736, %mul.5743)
  %mul.5751 = bf16[1,4096,8,64]{3,2,1,0} multiply(%slice.490, %mul.5674)
  %neg.224 = bf16[1,4096,8,64]{3,2,1,0} negate(%slice.491)
  %mul.5754 = bf16[1,4096,8,64]{3,2,1,0} multiply(%neg.224, %mul.5678)
  %add_any.186 = bf16[1,4096,8,64]{3,2,1,0} add(%mul.5751, %mul.5754)
  %concatenate.374 = bf16[1,4096,8,128]{3,2,1,0} concatenate(%add_any.185, %add_any.186), dimensions={3}
  %dot.663 = bf16[1,4096,4096]{2,1,0} dot(%concatenate.374, %all-gather.275), lhs_contracting_dims={2,3}, rhs_contracting_dims={1,2}
  %add_any.187 = bf16[1,4096,4096]{2,1,0} add(%dot.662, %dot.663)
  %sharding_constraint.1318 = bf16[1,4096,4096]{2,1,0} copy(%add_any.187)
  %get-tuple-element.809 = bf16[1,4096,32,128]{3,2,1,0} get-tuple-element(%te_fused_attn_backward_ffi.35), index=0
  %sharding_constraint.1319 = bf16[1,4096,32,128]{3,2,1,0} copy(%get-tuple-element.809)
  %slice.492 = bf16[1,4096,32,64]{3,2,1,0} slice(%sharding_constraint.1319), slice={[0:1], [0:4096], [0:32], [64:128]}
  %mul.5757 = bf16[1,4096,32,64]{3,2,1,0} multiply(%slice.492, %mul.5664)
  %slice.493 = bf16[1,4096,32,64]{3,2,1,0} slice(%sharding_constraint.1319), slice={[0:1], [0:4096], [0:32], [0:64]}
  %mul.5763 = bf16[1,4096,32,64]{3,2,1,0} multiply(%slice.493, %mul.5661)
  %add_any.188 = bf16[1,4096,32,64]{3,2,1,0} add(%mul.5757, %mul.5763)
  %mul.5775 = bf16[1,4096,32,64]{3,2,1,0} multiply(%slice.492, %mul.5661)
  %neg.225 = bf16[1,4096,32,64]{3,2,1,0} negate(%slice.493)
  %mul.5778 = bf16[1,4096,32,64]{3,2,1,0} multiply(%neg.225, %mul.5664)
  %add_any.189 = bf16[1,4096,32,64]{3,2,1,0} add(%mul.5775, %mul.5778)
  %concatenate.375 = bf16[1,4096,32,128]{3,2,1,0} concatenate(%add_any.188, %add_any.189), dimensions={3}
  %dot.664 = bf16[1,4096,4096]{2,1,0} dot(%concatenate.375, %all-gather.274), lhs_contracting_dims={2,3}, rhs_contracting_dims={1,2}
  %sharding_constraint.1320 = bf16[1,4096,4096]{2,1,0} copy(%dot.664)
  %add_any.190 = bf16[1,4096,4096]{2,1,0} add(%sharding_constraint.1318, %sharding_constraint.1320)
  %sharding_constraint.1321 = bf16[1,4096,4096]{2,1,0} copy(%add_any.190)
  %mul.5780 = bf16[1,4096,4096]{2,1,0} multiply(%sharding_constraint.1321, %mul.5657)
  %convert_element_type.2297 = f32[1,4096,4096]{2,1,0} convert(%mul.5780)
  %mul.5788 = f32[1,4096,4096]{2,1,0} multiply(%convert_element_type.2297, %mul.5655)
  %mul.5789 = f32[1,4096,4096]{2,1,0} multiply(%convert_element_type.2269, %convert_element_type.2297)
  %reduce.612 = f32[1,4096]{1,0} reduce(%mul.5789, %constant.1360), dimensions={2}, to_apply=%region_552.14156
  %reshape.11736 = f32[1,4096,1]{2,1,0} reshape(%reduce.612)
  %div.981 = f32[1,4096,1]{2,1,0} divide(%rsqrt.145, %add.1995)
  %mul.5794 = f32[1,4096,1]{2,1,0} multiply(%div.981, %broadcast.3620)
  %mul.5795 = f32[1,4096,1]{2,1,0} multiply(%reshape.11736, %mul.5794)
  %mul.5796 = f32[1,4096,1]{2,1,0} multiply(%mul.5795, %mul.4455)
  %mul.5800 = f32[1,4096]{1,0} reshape(%mul.5796)
  %mul.5807 = f32[1,4096,4096]{2,1,0} broadcast(%mul.5800), dimensions={0,1}
  %mul.5808 = f32[1,4096,4096]{2,1,0} multiply(%convert_element_type.2269, %mul.5807)
  %add_any.191 = f32[1,4096,4096]{2,1,0} add(%mul.5788, %mul.5808)
  %convert_element_type.2298 = bf16[1,4096,4096]{2,1,0} convert(%add_any.191)
  %add_any.192 = bf16[1,4096,4096]{2,1,0} add(%add_any.184, %convert_element_type.2298)
  %sharding_constraint.1322 = bf16[1,4096,4096]{2,1,0} copy(%add_any.192)
  %tuple.259 = (bf16[512,8]{1,0}, bf16[1,4096,14336]{2,1,0}, bf16[1,4096,14336]{2,1,0}, bf16[1,14336,4096]{2,1,0}, bf16[4096]{0}, /*index=5*/bf16[4096]{0}, bf16[512,8,128]{2,1,0}, bf16[32,128,512]{2,1,0}, bf16[512,32,128]{2,1,0}, bf16[512,8,128]{2,1,0}, /*index=10*/bf16[1,4096,4096]{2,1,0}, s32[1,4096]{1,0}, s32[1,4096]{1,0}, bf16[1,4096,4096]{2,1,0}) tuple(%param.233, %param.234, %param.235, %param.236, %param.232, /*index=5*/%param.227, %param.229, %param.231, %param.228, %param.230, /*index=10*/%sharding_constraint.690, %param.10, %param.7, %sharding_constraint.1322)
  %remat2.20 = (bf16[512,8]{1,0}, bf16[1,4096,14336]{2,1,0}, bf16[1,4096,14336]{2,1,0}, bf16[1,14336,4096]{2,1,0}, bf16[4096]{0}, /*index=5*/bf16[4096]{0}, bf16[512,8,128]{2,1,0}, bf16[32,128,512]{2,1,0}, bf16[512,32,128]{2,1,0}, bf16[512,8,128]{2,1,0}, /*index=10*/bf16[1,4096,4096]{2,1,0}, s32[1,4096]{1,0}, s32[1,4096]{1,0}, bf16[1,4096,4096]{2,1,0}) opt-barrier(%tuple.259)
  %get-tuple-element.810 = bf16[1,4096,4096]{2,1,0} get-tuple-element(%remat2.20), index=13
  %sharding_constraint.1324 = bf16[1,4096,4096]{2,1,0} copy(%get-tuple-element.810)
  %iota.2509 = s32[1,4096,2,1]{3,2,1,0} iota(), iota_dimension=1
  %get-tuple-element.811 = bf16[1,4096,4096]{2,1,0} get-tuple-element(%remat2.20), index=10
  %sharding_constraint.1327 = bf16[1,4096,4096]{2,1,0} copy(%get-tuple-element.811)
  %convert_element_type.2299 = f32[1,4096,4096]{2,1,0} convert(%sharding_constraint.1327)
  %square.86 = f32[1,4096,4096]{2,1,0} multiply(%convert_element_type.2299, %convert_element_type.2299)
  %reduce.613 = f32[1,4096]{1,0} reduce(%square.86, %constant.1360), dimensions={2}, to_apply=%region_553.14198
  %div.982 = f32[1,4096]{1,0} multiply(%reduce.613, %broadcast.3412)
  %add.2011 = f32[1,4096]{1,0} add(%div.982, %broadcast.3413)
  %add.2012 = f32[1,4096,1]{2,1,0} reshape(%add.2011)
  %rsqrt.147 = f32[1,4096,1]{2,1,0} rsqrt(%add.2012)
  %mul.5809 = f32[1,4096]{1,0} reshape(%rsqrt.147)
  %mul.5810 = f32[1,4096,4096]{2,1,0} broadcast(%mul.5809), dimensions={0,1}
  %mul.5811 = f32[1,4096,4096]{2,1,0} multiply(%convert_element_type.2299, %mul.5810)
  %convert_element_type.2301 = bf16[1,4096,4096]{2,1,0} convert(%mul.5811)
  %get-tuple-element.812 = bf16[4096]{0} get-tuple-element(%remat2.20), index=5
  %mul.5812 = bf16[1,4096,4096]{2,1,0} broadcast(%get-tuple-element.812), dimensions={2}
  %mul.5813 = bf16[1,4096,4096]{2,1,0} multiply(%convert_element_type.2301, %mul.5812)
  %sharding_constraint.1328 = bf16[1,4096,4096]{2,1,0} copy(%mul.5813)
  %sharding_constraint.1329 = bf16[1,4096,4096]{2,1,0} copy(%sharding_constraint.1328)
  %get-tuple-element.813 = bf16[512,32,128]{2,1,0} get-tuple-element(%remat2.20), index=8
  %all-gather.280 = bf16[4096,32,128]{2,1,0} all-gather(%get-tuple-element.813), channel_id=483, replica_groups=[1,8]<=[8], dimensions={0}, use_global_device_ids=true
  %dot.665 = bf16[1,4096,32,128]{3,2,1,0} dot(%sharding_constraint.1329, %all-gather.280), lhs_contracting_dims={2}, rhs_contracting_dims={0}
  %slice.494 = bf16[1,4096,32,64]{3,2,1,0} slice(%dot.665), slice={[0:1], [0:4096], [0:32], [0:64]}
  %get-tuple-element.814 = s32[1,4096]{1,0} get-tuple-element(%remat2.20), index=12
  %convert_element_type.2302 = f32[1,4096]{1,0} convert(%get-tuple-element.814)
  %div.983 = f32[1,4096,1,64]{3,2,1,0} broadcast(%convert_element_type.2302), dimensions={0,1}
  %div.986 = f32[1,4096,1,64]{3,2,1,0} divide(%div.983, %div.402)
  %cos.83 = f32[1,4096,1,64]{3,2,1,0} cosine(%div.986)
  %convert_element_type.2304 = bf16[1,4096,1,64]{3,2,1,0} convert(%cos.83)
  %mul.5815 = bf16[1,4096,64]{2,1,0} reshape(%convert_element_type.2304)
  %mul.5816 = bf16[1,4096,32,64]{3,2,1,0} broadcast(%mul.5815), dimensions={0,1,3}
  %mul.5817 = bf16[1,4096,32,64]{3,2,1,0} multiply(%slice.494, %mul.5816)
  %slice.495 = bf16[1,4096,32,64]{3,2,1,0} slice(%dot.665), slice={[0:1], [0:4096], [0:32], [64:128]}
  %sin.82 = f32[1,4096,1,64]{3,2,1,0} sine(%div.986)
  %convert_element_type.2305 = bf16[1,4096,1,64]{3,2,1,0} convert(%sin.82)
  %mul.5818 = bf16[1,4096,64]{2,1,0} reshape(%convert_element_type.2305)
  %mul.5819 = bf16[1,4096,32,64]{3,2,1,0} broadcast(%mul.5818), dimensions={0,1,3}
  %mul.5820 = bf16[1,4096,32,64]{3,2,1,0} multiply(%slice.495, %mul.5819)
  %sub.284 = bf16[1,4096,32,64]{3,2,1,0} subtract(%mul.5817, %mul.5820)
  %mul.5839 = bf16[1,4096,32,64]{3,2,1,0} multiply(%slice.495, %mul.5816)
  %mul.5843 = bf16[1,4096,32,64]{3,2,1,0} multiply(%slice.494, %mul.5819)
  %add.2014 = bf16[1,4096,32,64]{3,2,1,0} add(%mul.5839, %mul.5843)
  %concatenate.376 = bf16[1,4096,32,128]{3,2,1,0} concatenate(%sub.284, %add.2014), dimensions={3}
  %sharding_constraint.1330 = bf16[1,4096,32,128]{3,2,1,0} copy(%concatenate.376)
  %get-tuple-element.815 = bf16[512,8,128]{2,1,0} get-tuple-element(%remat2.20), index=6
  %all-gather.281 = bf16[4096,8,128]{2,1,0} all-gather(%get-tuple-element.815), channel_id=484, replica_groups=[1,8]<=[8], dimensions={0}, use_global_device_ids=true
  %dot.666 = bf16[1,4096,8,128]{3,2,1,0} dot(%sharding_constraint.1329, %all-gather.281), lhs_contracting_dims={2}, rhs_contracting_dims={0}
  %slice.496 = bf16[1,4096,8,64]{3,2,1,0} slice(%dot.666), slice={[0:1], [0:4096], [0:8], [0:64]}
  %mul.5846 = bf16[1,4096,8,64]{3,2,1,0} broadcast(%mul.5815), dimensions={0,1,3}
  %mul.5847 = bf16[1,4096,8,64]{3,2,1,0} multiply(%slice.496, %mul.5846)
  %slice.497 = bf16[1,4096,8,64]{3,2,1,0} slice(%dot.666), slice={[0:1], [0:4096], [0:8], [64:128]}
  %mul.5849 = bf16[1,4096,8,64]{3,2,1,0} broadcast(%mul.5818), dimensions={0,1,3}
  %mul.5850 = bf16[1,4096,8,64]{3,2,1,0} multiply(%slice.497, %mul.5849)
  %sub.285 = bf16[1,4096,8,64]{3,2,1,0} subtract(%mul.5847, %mul.5850)
  %mul.5853 = bf16[1,4096,8,64]{3,2,1,0} multiply(%slice.497, %mul.5846)
  %mul.5856 = bf16[1,4096,8,64]{3,2,1,0} multiply(%slice.496, %mul.5849)
  %add.2015 = bf16[1,4096,8,64]{3,2,1,0} add(%mul.5853, %mul.5856)
  %concatenate.377 = bf16[1,4096,8,128]{3,2,1,0} concatenate(%sub.285, %add.2015), dimensions={3}
  %sharding_constraint.1332 = bf16[1,4096,8,128]{3,2,1,0} copy(%concatenate.377)
  %get-tuple-element.816 = bf16[512,8,128]{2,1,0} get-tuple-element(%remat2.20), index=9
  %all-gather.282 = bf16[4096,8,128]{2,1,0} all-gather(%get-tuple-element.816), channel_id=485, replica_groups=[1,8]<=[8], dimensions={0}, use_global_device_ids=true
  %dot.667 = bf16[1,4096,8,128]{3,2,1,0} dot(%sharding_constraint.1329, %all-gather.282), lhs_contracting_dims={2}, rhs_contracting_dims={0}
  %sharding_constraint.1334 = bf16[1,4096,8,128]{3,2,1,0} copy(%dot.667)
  %get-tuple-element.817 = s32[1,4096]{1,0} get-tuple-element(%remat2.20), index=11
  %eq.2267 = s32[1,4096,4096]{2,1,0} broadcast(%get-tuple-element.817), dimensions={0,1}
  %eq.2268 = s32[1,4096,4096]{2,1,0} broadcast(%get-tuple-element.817), dimensions={0,2}
  %eq.2269 = pred[1,4096,4096]{2,1,0} compare(%eq.2267, %eq.2268), direction=EQ
  %and.156 = pred[1,4096,4096]{2,1,0} and(%eq.2269, %and.64)
  %select_n.494 = f32[1,4096,4096]{2,1,0} select(%and.156, %broadcast_in_dim.516, %broadcast_in_dim.517)
  %ne.107 = pred[1,4096,4096]{2,1,0} compare(%select_n.494, %broadcast_in_dim.516), direction=NE
  %not.105 = pred[1,4096,4096]{2,1,0} not(%ne.107)
  %convert_element_type.2311 = s32[1,4096,4096]{2,1,0} convert(%not.105)
  %reduce.614 = s32[1,4096]{1,0} reduce(%convert_element_type.2311, %constant.1181), dimensions={1}, to_apply=%region_554.14294
  %reduce_sum.5710 = s32[1,1,1,4096]{3,2,1,0} reshape(%reduce.614)
  %slice.498 = s32[1,1,1,1]{3,2,1,0} slice(%reduce_sum.5710), slice={[0:1], [0:1], [0:1], [0:1]}
  %squeeze.41 = s32[1,1]{1,0} reshape(%slice.498)
  %reshape.11743 = s32[1]{0} reshape(%squeeze.41)
  %lt.142 = pred[1]{0} compare(%reshape.11743, %constant.1418), direction=LT
  %select_n.495 = s32[1]{0} select(%lt.142, %broadcast_in_dim.518, %reshape.11743)
  %concatenate.378 = s32[2]{0} concatenate(%constant.1418, %select_n.495), dimensions={0}
  %reduce.615 = s32[1,4096]{1,0} reduce(%convert_element_type.2311, %constant.1181), dimensions={2}, to_apply=%region_555.14303
  %reduce_sum.5711 = s32[1,1,1,4096]{3,2,1,0} reshape(%reduce.615)
  %reduce.616 = s32[1,1]{1,0} reduce(%reduce_sum.5711, %constant.1415), dimensions={3,2}, to_apply=%region_556.14309
  %reshape.11744 = s32[1]{0} reshape(%reduce.616)
  %lt.143 = pred[1]{0} compare(%reshape.11744, %constant.1418), direction=LT
  %select_n.496 = s32[1]{0} select(%lt.143, %broadcast_in_dim.518, %reshape.11744)
  %concatenate.379 = s32[2]{0} concatenate(%constant.1418, %select_n.496), dimensions={0}
  %te_fused_attn_forward_ffi.164 = (bf16[1,4096,32,128]{3,2,1,0}, f32[1,32,4096,1]{3,2,1,0}, u32[2,4]{1,0}, u8[48]{0}) custom-call(%sharding_constraint.1330, %sharding_constraint.1332, %sharding_constraint.1334, %constant.1403, %dynamic-slice.38, /*index=5*/%concatenate.378, %concatenate.379, %constant.1416, %constant.1416, %constant.1416, /*index=10*/%constant.1416, %constant.1416, %constant.1416), custom_call_target="te_fused_attn_forward_ffi", operand_layout_constraints={bf16[1,4096,32,128]{3,2,1,0}, bf16[1,4096,8,128]{3,2,1,0}, bf16[1,4096,8,128]{3,2,1,0}, bf16[0]{0}, u32[2]{0}, s32[2]{0}, s32[2]{0}, f32[0]{0}, f32[0]{0}, f32[0]{0}, f32[0]{0}, f32[0]{0}, f32[0]{0}}, api_version=API_VERSION_TYPED_FFI, backend_config={attn_heads = 32 : i64, bias_batch = 0 : i64, bias_heads = 0 : i64, bias_type = 0 : i64, deterministic = false, dropout_probability = 0.000000e+00 : f64, input_batch = 1 : i64, is_training = true, kv_max_seqlen = 4096 : i64, mask_type = 3 : i64, max_segments_per_seq = 1 : i64, num_gqa_groups = 8 : i64, q_max_seqlen = 4096 : i64, qk_head_dim = 128 : i64, qkv_layout = 9 : i64, scaling_factor = 1.000000e+00 : f64, v_head_dim = 128 : i64, window_size_left = -1 : i64, window_size_right = -1 : i64}
  %get-tuple-element.818 = bf16[1,4096,32,128]{3,2,1,0} get-tuple-element(%te_fused_attn_forward_ffi.164), index=0
  %sharding_constraint.1335 = bf16[1,4096,32,128]{3,2,1,0} copy(%get-tuple-element.818)
  %get-tuple-element.819 = bf16[32,128,512]{2,1,0} get-tuple-element(%remat2.20), index=7
  %all-gather.283 = bf16[32,128,4096]{2,1,0} all-gather(%get-tuple-element.819), channel_id=486, replica_groups=[1,8]<=[8], dimensions={2}, use_global_device_ids=true
  %dot.668 = bf16[1,4096,4096]{2,1,0} dot(%sharding_constraint.1335, %all-gather.283), lhs_contracting_dims={2,3}, rhs_contracting_dims={0,1}
  %sharding_constraint.1336 = bf16[1,4096,4096]{2,1,0} copy(%dot.668)
  %add.2016 = bf16[1,4096,4096]{2,1,0} add(%sharding_constraint.1327, %sharding_constraint.1336)
  %convert_element_type.2314 = f32[1,4096,4096]{2,1,0} convert(%add.2016)
  %square.87 = f32[1,4096,4096]{2,1,0} multiply(%convert_element_type.2314, %convert_element_type.2314)
  %reduce.617 = f32[1,4096]{1,0} reduce(%square.87, %constant.1360), dimensions={2}, to_apply=%region_557.14324
  %div.991 = f32[1,4096]{1,0} multiply(%reduce.617, %broadcast.3412)
  %add.2017 = f32[1,4096]{1,0} add(%div.991, %broadcast.3413)
  %add.2018 = f32[1,4096,1]{2,1,0} reshape(%add.2017)
  %rsqrt.148 = f32[1,4096,1]{2,1,0} rsqrt(%add.2018)
  %mul.5857 = f32[1,4096]{1,0} reshape(%rsqrt.148)
  %mul.5858 = f32[1,4096,4096]{2,1,0} broadcast(%mul.5857), dimensions={0,1}
  %mul.5859 = f32[1,4096,4096]{2,1,0} multiply(%convert_element_type.2314, %mul.5858)
  %convert_element_type.2315 = bf16[1,4096,4096]{2,1,0} convert(%mul.5859)
  %get-tuple-element.820 = bf16[4096]{0} get-tuple-element(%remat2.20), index=4
  %mul.5860 = bf16[1,4096,4096]{2,1,0} broadcast(%get-tuple-element.820), dimensions={2}
  %mul.5869 = bf16[1,4096,4096]{2,1,0} multiply(%convert_element_type.2315, %mul.5860)
  %sharding_constraint.1337 = bf16[1,4096,4096]{2,1,0} copy(%mul.5869)
  %get-tuple-element.821 = bf16[512,8]{1,0} get-tuple-element(%remat2.20), index=0
  %all-gather.284 = bf16[4096,8]{1,0} all-gather(%get-tuple-element.821), channel_id=487, replica_groups=[1,8]<=[8], dimensions={0}, use_global_device_ids=true
  %dot.669 = bf16[1,4096,8]{2,1,0} dot(%sharding_constraint.1337, %all-gather.284), lhs_contracting_dims={2}, rhs_contracting_dims={0}
  %sharding_constraint.1338 = bf16[1,4096,8]{2,1,0} copy(%dot.669)
  %top_k.123 = bf16[4096,8]{1,0} reshape(%sharding_constraint.1338)
  %top_k.124 = (bf16[4096,2]{1,0}, s32[4096,2]{1,0}) custom-call(%top_k.123), custom_call_target="TopK", called_computations={%compare_greater_than.41.14345.clone}
  %get-tuple-element.822 = bf16[4096,2]{1,0} get-tuple-element(%top_k.124), index=0
  %get-tuple-element.823 = s32[4096,2]{1,0} get-tuple-element(%top_k.124), index=1
  %add.2019 = s32[4096,2]{1,0} add(%get-tuple-element.823, %broadcast.3418)
  %sort.105 = (bf16[4096,2]{1,0}, s32[4096,2]{1,0}) sort(%get-tuple-element.822, %add.2019), dimensions={1}, is_stable=true, to_apply=%compare-value-and-index.41
  %get-tuple-element.825 = s32[4096,2]{1,0} get-tuple-element(%sort.105), index=1
  %slice.500 = s32[4096,2]{1,0} slice(%get-tuple-element.825), slice={[0:4096], [0:2]}
  %top_k.125 = s32[1,4096,2]{2,1,0} reshape(%slice.500)
  %lt.144 = pred[1,4096,2]{2,1,0} compare(%top_k.125, %broadcast.3419), direction=LT
  %add.2020 = s32[1,4096,2]{2,1,0} add(%top_k.125, %broadcast.3420)
  %select_n.497 = s32[1,4096,2]{2,1,0} select(%lt.144, %add.2020, %top_k.125)
  %broadcast_in_dim.671 = s32[1,4096,2,1]{3,2,1,0} reshape(%select_n.497)
  %concatenate.380 = s32[1,4096,2,3]{3,2,1,0} concatenate(%add.1356, %iota.2509, %broadcast_in_dim.671), dimensions={3}
  %subtract.134 = s32[1,4096,2,3]{3,2,1,0} subtract(%concatenate.380, %broadcast.3428)
  %scatter.220 = u32[1,4096,8]{2,1,0} scatter(%dynamic-slice.43, %subtract.134, %add.1401), update_window_dims={}, inserted_window_dims={0,1,2}, scatter_dims_to_operand_dims={0,1,2}, index_vector_dim=3, to_apply=%region_558.14381.clone
  %gather.50 = u32[1,4096,2]{2,1,0} gather(%scatter.220, %subtract.134), offset_dims={}, collapsed_slice_dims={0,1,2}, start_index_map={0,1,2}, index_vector_dim=3, slice_sizes={1,1,1}
  %eq.2270 = pred[1,4096,2]{2,1,0} compare(%add.1401, %gather.50), direction=EQ
  %get-tuple-element.824 = bf16[4096,2]{1,0} get-tuple-element(%sort.105), index=0
  %slice.499 = bf16[4096,2]{1,0} slice(%get-tuple-element.824), slice={[0:4096], [0:2]}
  %convert_element_type.2316 = f32[4096,2]{1,0} convert(%slice.499)
  %convert_element_type.2317 = f32[1,4096,2]{2,1,0} reshape(%convert_element_type.2316)
  %reduce.618 = f32[4096]{0} reduce(%convert_element_type.2316, %constant.1450), dimensions={1}, to_apply=%region_559.14390
  %sub.286 = f32[1,4096]{1,0} reshape(%reduce.618)
  %sub.287 = f32[1,4096,2]{2,1,0} broadcast(%sub.286), dimensions={0,1}
  %sub.288 = f32[1,4096,2]{2,1,0} subtract(%convert_element_type.2317, %sub.287)
  %exp.209 = f32[1,4096,2]{2,1,0} exponential(%sub.288)
  %reduce.619 = f32[1,4096]{1,0} reduce(%exp.209, %constant.1360), dimensions={2}, to_apply=%region_560.14399
  %div.992 = f32[1,4096,2]{2,1,0} broadcast(%reduce.619), dimensions={0,1}
  %div.993 = f32[1,4096,2]{2,1,0} divide(%exp.209, %div.992)
  %convert_element_type.2318 = bf16[1,4096,2]{2,1,0} convert(%div.993)
  %select_n.498 = bf16[1,4096,2]{2,1,0} select(%eq.2270, %convert_element_type.2318, %broadcast.3427)
  %scatter.221 = bf16[1,4096,8]{2,1,0} scatter(%broadcast.3379, %subtract.134, %select_n.498), update_window_dims={}, inserted_window_dims={0,1,2}, scatter_dims_to_operand_dims={0,1,2}, index_vector_dim=3, to_apply=%region_561.14408.clone
  %eq.2272 = s32[1,4096,2,8]{3,2,1,0} broadcast(%top_k.125), dimensions={0,1,2}
  %iota.2520 = s32[1,4096,2,8]{3,2,1,0} iota(), iota_dimension=3
  %eq.2273 = pred[1,4096,2,8]{3,2,1,0} compare(%eq.2272, %iota.2520), direction=EQ
  %convert_element_type.2319 = s32[1,4096,2,8]{3,2,1,0} convert(%eq.2273)
  %reshape.11776 = s32[1,8192,8]{2,1,0} reshape(%convert_element_type.2319)
  %sharding_constraint.1339 = s32[1,8192,8]{2,1,0} copy(%reshape.11776)
  %reduce-window.41 = s32[1,8192,8]{2,1,0} reduce-window(%sharding_constraint.1339, %constant.1181), window={size=1x8192x1 pad=0_0x8191_0x0_0}, to_apply=%region_562.14420
  %reshape.11778 = s32[1,4096,2,8]{3,2,1,0} reshape(%reduce-window.41)
  %sharding_constraint.1340 = s32[1,4096,2,8]{3,2,1,0} copy(%reshape.11778)
  %le.102 = pred[1,4096,2,8]{3,2,1,0} compare(%sharding_constraint.1340, %broadcast.3429), direction=LE
  %mul.5878 = s32[1,4096,2,8]{3,2,1,0} select(%le.102, %convert_element_type.2319, %broadcast.3430)
  %reduce.620 = s32[1,4096,8]{2,1,0} reduce(%mul.5878, %constant.1181), dimensions={2}, to_apply=%region_563.14429
  %convert_element_type.2320 = bf16[1,4096,8]{2,1,0} convert(%reduce.620)
  %mul.5879 = bf16[1,4096,8]{2,1,0} multiply(%scatter.221, %convert_element_type.2320)
  %mul.5880 = bf16[1,4096,8,1025]{3,2,1,0} broadcast(%mul.5879), dimensions={0,1,2}
  %mul.5881 = s32[1,8192,8]{2,1,0} multiply(%sharding_constraint.1339, %reduce-window.41)
  %reshape.11779 = s32[1,4096,2,8]{3,2,1,0} reshape(%mul.5881)
  %reduce.621 = s32[1,4096,8]{2,1,0} reduce(%reshape.11779, %constant.1181), dimensions={2}, to_apply=%region_564.14439
  %mul.5882 = s32[1,4096,8]{2,1,0} multiply(%reduce.621, %reduce.620)
  %eq.2274 = s32[1,4096,8,1025]{3,2,1,0} broadcast(%mul.5882), dimensions={0,1,2}
  %iota.2521 = s32[1,4096,8,1025]{3,2,1,0} iota(), iota_dimension=3
  %eq.2275 = pred[1,4096,8,1025]{3,2,1,0} compare(%eq.2274, %iota.2521), direction=EQ
  %convert_element_type.2321 = s32[1,4096,8,1025]{3,2,1,0} convert(%eq.2275)
  %convert_element_type.2322 = bf16[1,4096,8,1025]{3,2,1,0} convert(%convert_element_type.2321)
  %mul.5883 = bf16[1,4096,8,1025]{3,2,1,0} multiply(%mul.5880, %convert_element_type.2322)
  %slice.501 = bf16[1,4096,8,1024]{3,2,1,0} slice(%mul.5883), slice={[0:1], [0:4096], [0:8], [1:1025]}
  %convert_element_type.2323 = pred[1,4096,8,1024]{3,2,1,0} compare(%slice.501, %broadcast.3431), direction=NE
  %sharding_constraint.1341 = pred[1,4096,8,1024]{3,2,1,0} copy(%convert_element_type.2323)
  %dot_general.86 = bf16[1,4096,8,1024]{3,2,1,0} convert(%sharding_constraint.1341)
  %dot.670 = bf16[1,8,1024,4096]{3,2,1,0} dot(%dot_general.86, %sharding_constraint.1337), lhs_batch_dims={0}, lhs_contracting_dims={1}, rhs_batch_dims={0}, rhs_contracting_dims={1}
  %reshape.11782 = bf16[1,8,1,1024,4096]{4,3,2,1,0} reshape(%dot.670)
  %all-to-all.100 = bf16[1,8,1,1024,4096]{4,3,2,1,0} all-to-all(%reshape.11782), channel_id=491, replica_groups=[1,8]<=[8], dimensions={1}
  %transpose.164 = bf16[8,1,1,1024,4096]{4,3,2,0,1} transpose(%all-to-all.100), dimensions={1,0,2,3,4}
  %reshape.11783 = bf16[8,1,1024,4096]{3,2,1,0} reshape(%transpose.164)
  %transpose.165 = bf16[1,8,1024,4096]{3,2,0,1} transpose(%reshape.11783), dimensions={1,0,2,3}
  %sharding_constraint.1342 = bf16[1,8,1024,4096]{3,2,0,1} copy(%transpose.165)
  %get-tuple-element.828 = bf16[1,4096,14336]{2,1,0} get-tuple-element(%remat2.20), index=1
  %sharding_constraint.1343 = bf16[1,4096,14336]{2,1,0} copy(%get-tuple-element.828)
  %dot.671 = bf16[1,8,1024,14336]{3,2,1,0} dot(%sharding_constraint.1342, %sharding_constraint.1343), lhs_batch_dims={0}, lhs_contracting_dims={3}, rhs_batch_dims={0}, rhs_contracting_dims={1}
  %sharding_constraint.1344 = bf16[1,8,1024,14336]{3,2,1,0} copy(%dot.671)
  %neg.226 = bf16[1,8,1024,14336]{3,2,1,0} negate(%sharding_constraint.1344)
  %exp.210 = bf16[1,8,1024,14336]{3,2,1,0} exponential(%neg.226)
  %add.2025 = bf16[1,8,1024,14336]{3,2,1,0} add(%exp.210, %jit_silu_.0)
  %div.994 = bf16[1,8,1024,14336]{3,2,1,0} divide(%jit_silu_.0, %add.2025)
  %mul.5884 = bf16[1,8,1024,14336]{3,2,1,0} multiply(%sharding_constraint.1344, %div.994)
  %sharding_constraint.1345 = bf16[1,4096,4096]{2,1,0} copy(%sharding_constraint.1324)
  %sharding_constraint.1346 = bf16[1,4096,8,1024]{3,2,1,0} copy(%slice.501)
  %dot.672 = bf16[1,4096,8,1024]{3,2,1,0} dot(%sharding_constraint.1345, %sharding_constraint.1346), lhs_batch_dims={0}, lhs_contracting_dims={1}, rhs_batch_dims={0}, rhs_contracting_dims={1}
  %reshape.11786 = bf16[1,4096,8,1,1024]{4,3,2,1,0} reshape(%dot.672)
  %all-to-all.101 = bf16[1,4096,8,1,1024]{4,3,2,1,0} all-to-all(%reshape.11786), channel_id=492, replica_groups=[1,8]<=[8], dimensions={2}
  %transpose.166 = bf16[8,1,4096,1,1024]{4,3,0,2,1} transpose(%all-to-all.101), dimensions={2,0,1,3,4}
  %reshape.11787 = bf16[8,4096,1,1024]{3,2,1,0} reshape(%transpose.166)
  %transpose.167 = bf16[1,8,1024,4096]{2,0,3,1} transpose(%reshape.11787), dimensions={2,0,3,1}
  %sharding_constraint.1347 = bf16[1,8,1024,4096]{2,0,3,1} copy(%transpose.167)
  %get-tuple-element.829 = bf16[1,14336,4096]{2,1,0} get-tuple-element(%remat2.20), index=3
  %sharding_constraint.1349 = bf16[1,14336,4096]{2,1,0} copy(%get-tuple-element.829)
  %dot.673 = bf16[1,8,1024,14336]{3,2,1,0} dot(%sharding_constraint.1347, %sharding_constraint.1349), lhs_batch_dims={0}, lhs_contracting_dims={3}, rhs_batch_dims={0}, rhs_contracting_dims={2}
  %mul.5885 = bf16[1,8,1024,14336]{3,2,1,0} multiply(%mul.5884, %dot.673)
  %sharding_constraint.1351 = bf16[1,8,1024,14336]{3,2,1,0} copy(%mul.5885)
  %get-tuple-element.830 = bf16[1,4096,14336]{2,1,0} get-tuple-element(%remat2.20), index=2
  %sharding_constraint.1352 = bf16[1,4096,14336]{2,1,0} copy(%get-tuple-element.830)
  %dot.674 = bf16[1,8,1024,4096]{3,2,1,0} dot(%sharding_constraint.1351, %sharding_constraint.1352), lhs_batch_dims={0}, lhs_contracting_dims={3}, rhs_batch_dims={0}, rhs_contracting_dims={2}
  %dot.675 = bf16[1,8,1024,14336]{3,2,1,0} dot(%sharding_constraint.1342, %sharding_constraint.1352), lhs_batch_dims={0}, lhs_contracting_dims={3}, rhs_batch_dims={0}, rhs_contracting_dims={1}
  %sharding_constraint.1353 = bf16[1,8,1024,14336]{3,2,1,0} copy(%dot.675)
  %mul.5886 = bf16[1,8,1024,14336]{3,2,1,0} multiply(%dot.673, %sharding_constraint.1353)
  %mul.5887 = bf16[1,8,1024,14336]{3,2,1,0} multiply(%mul.5886, %div.994)
  %mul.5888 = bf16[1,8,1024,14336]{3,2,1,0} multiply(%sharding_constraint.1344, %mul.5886)
  %sub.289 = bf16[1,8,1024,14336]{3,2,1,0} subtract(%jit_silu_.0, %div.994)
  %mul.5889 = bf16[1,8,1024,14336]{3,2,1,0} multiply(%div.994, %sub.289)
  %mul.5890 = bf16[1,8,1024,14336]{3,2,1,0} multiply(%mul.5888, %mul.5889)
  %add_any.193 = bf16[1,8,1024,14336]{3,2,1,0} add(%mul.5887, %mul.5890)
  %sharding_constraint.1354 = bf16[1,8,1024,14336]{3,2,1,0} copy(%add_any.193)
  %dot.676 = bf16[1,8,1024,4096]{3,2,1,0} dot(%sharding_constraint.1354, %sharding_constraint.1343), lhs_batch_dims={0}, lhs_contracting_dims={3}, rhs_batch_dims={0}, rhs_contracting_dims={2}
  %add_any.194 = bf16[1,8,1024,4096]{3,2,1,0} add(%dot.674, %dot.676)
  %sharding_constraint.1355 = bf16[1,8,1024,4096]{3,2,1,0} copy(%add_any.194)
  %transpose.168 = bf16[8,1,1024,4096]{3,2,0,1} transpose(%sharding_constraint.1355), dimensions={1,0,2,3}
  %reshape.11791 = bf16[8,1,1,1024,4096]{4,3,2,1,0} reshape(%transpose.168)
  %all-to-all.102 = bf16[8,1,1,1024,4096]{4,3,2,1,0} all-to-all(%reshape.11791), channel_id=493, replica_groups=[1,8]<=[8], dimensions={0}
  %transpose.169 = bf16[1,8,1,1024,4096]{4,3,2,0,1} transpose(%all-to-all.102), dimensions={1,0,2,3,4}
  %reshape.11792 = bf16[1,8,1024,4096]{3,2,1,0} reshape(%transpose.169)
  %dot.677 = bf16[1,4096,4096]{2,1,0} dot(%dot_general.86, %reshape.11792), lhs_batch_dims={0}, lhs_contracting_dims={2,3}, rhs_batch_dims={0}, rhs_contracting_dims={1,2}
  %reshape.11794 = s32[1,4096,2,1]{3,2,1,0} reshape(%slice.500)
  %ge.9 = pred[1,4096,2,3]{3,2,1,0} compare(%concatenate.380, %broadcast.3629), direction=GE
  %le.104 = pred[1,4096,2,3]{3,2,1,0} compare(%concatenate.380, %le.67), direction=LE
  %and.157 = pred[1,4096,2,3]{3,2,1,0} and(%ge.9, %le.104)
  %reduce.622 = pred[1,4096,2]{2,1,0} reduce(%and.157, %constant.5574), dimensions={3}, to_apply=%region_565.14496
  %mul.5891 = bf16[1,8,1024,14336]{3,2,1,0} multiply(%mul.5884, %sharding_constraint.1353)
  %dot.678 = bf16[1,8,1024,4096]{3,2,1,0} dot(%mul.5891, %sharding_constraint.1349), lhs_batch_dims={0}, lhs_contracting_dims={3}, rhs_batch_dims={0}, rhs_contracting_dims={1}
  %sharding_constraint.1356 = bf16[1,8,1024,4096]{3,2,1,0} copy(%dot.678)
  %reshape.11801 = bf16[1,8,1,1024,4096]{4,3,2,1,0} reshape(%sharding_constraint.1356)
  %all-to-all.103 = bf16[1,8,1,1024,4096]{4,3,2,1,0} all-to-all(%reshape.11801), channel_id=494, replica_groups=[1,8]<=[8], dimensions={1}
  %transpose.170 = bf16[8,1,1,1024,4096]{4,3,2,0,1} transpose(%all-to-all.103), dimensions={1,0,2,3,4}
  %reshape.11802 = bf16[8,1,1024,4096]{3,2,1,0} reshape(%transpose.170)
  %dot.679 = bf16[1,4096,8,1024]{3,2,1,0} dot(%sharding_constraint.1345, %reshape.11802), lhs_batch_dims={0}, lhs_contracting_dims={2}, rhs_batch_dims={1}, rhs_contracting_dims={3}
  %sharding_constraint.1357 = bf16[1,4096,8,1024]{3,2,1,0} copy(%dot.679)
  %pad.9 = bf16[1,4096,8,1025]{3,2,1,0} pad(%sharding_constraint.1357, %constant.1190), padding=0_0x0_0x0_0x1_0
  %mul.5892 = bf16[1,4096,8,1025]{3,2,1,0} multiply(%pad.9, %convert_element_type.2322)
  %reduce.623 = bf16[1,4096,8]{2,1,0} reduce(%mul.5892, %constant.1190), dimensions={3}, to_apply=%region_566.14508
  %mul.5893 = bf16[1,4096,8]{2,1,0} multiply(%reduce.623, %convert_element_type.2320)
  %gather.51 = bf16[1,4096,2]{2,1,0} gather(%mul.5893, %subtract.134), offset_dims={}, collapsed_slice_dims={0,1,2}, start_index_map={0,1,2}, index_vector_dim=3, slice_sizes={1,1,1}
  %select_n.499 = bf16[1,4096,2]{2,1,0} select(%reduce.622, %gather.51, %broadcast.3427)
  %select_n.500 = bf16[1,4096,2]{2,1,0} select(%eq.2270, %select_n.499, %broadcast.3427)
  %convert_element_type.2324 = f32[1,4096,2]{2,1,0} convert(%select_n.500)
  %div.996 = f32[1,4096,2]{2,1,0} divide(%convert_element_type.2324, %div.992)
  %mul.5894 = f32[1,4096]{1,0} multiply(%reduce.619, %reduce.619)
  %div.997 = f32[1,4096]{1,0} divide(%add.1847, %mul.5894)
  %mul.5895 = f32[1,4096,2]{2,1,0} broadcast(%div.997), dimensions={0,1}
  %mul.5896 = f32[1,4096,2]{2,1,0} multiply(%convert_element_type.2324, %mul.5895)
  %mul.5897 = f32[1,4096,2]{2,1,0} multiply(%mul.5896, %exp.209)
  %reduce.624 = f32[1,4096]{1,0} reduce(%mul.5897, %constant.1360), dimensions={2}, to_apply=%region_567.14525
  %neg.227 = f32[1,4096]{1,0} negate(%reduce.624)
  %broadcast_in_dim.672 = f32[1,4096,2]{2,1,0} broadcast(%neg.227), dimensions={0,1}
  %add_any.195 = f32[1,4096,2]{2,1,0} add(%div.996, %broadcast_in_dim.672)
  %mul.5898 = f32[1,4096,2]{2,1,0} multiply(%add_any.195, %exp.209)
  %convert_element_type.2325 = bf16[1,4096,2]{2,1,0} convert(%mul.5898)
  %scatter.222 = bf16[1,4096,8]{2,1,0} scatter(%broadcast.3379, %reshape.11794, %convert_element_type.2325), update_window_dims={}, inserted_window_dims={2}, scatter_dims_to_operand_dims={2}, input_batching_dims={0,1}, scatter_indices_batching_dims={0,1}, index_vector_dim=3, to_apply=%region_568.14535.clone
  %sharding_constraint.1358 = bf16[1,4096,8]{2,1,0} copy(%scatter.222)
  %dot.680 = bf16[1,4096,4096]{2,1,0} dot(%sharding_constraint.1358, %all-gather.284), lhs_contracting_dims={2}, rhs_contracting_dims={1}
  %add_any.196 = bf16[1,4096,4096]{2,1,0} add(%dot.677, %dot.680)
  %sharding_constraint.1359 = bf16[1,4096,4096]{2,1,0} copy(%add_any.196)
  %mul.5900 = bf16[1,4096,4096]{2,1,0} multiply(%sharding_constraint.1359, %mul.5860)
  %convert_element_type.2326 = f32[1,4096,4096]{2,1,0} convert(%mul.5900)
  %mul.5903 = f32[1,4096,4096]{2,1,0} multiply(%convert_element_type.2326, %mul.5858)
  %mul.5904 = f32[1,4096,4096]{2,1,0} multiply(%convert_element_type.2314, %convert_element_type.2326)
  %reduce.625 = f32[1,4096]{1,0} reduce(%mul.5904, %constant.1360), dimensions={2}, to_apply=%region_569.14551
  %reshape.11814 = f32[1,4096,1]{2,1,0} reshape(%reduce.625)
  %div.998 = f32[1,4096,1]{2,1,0} divide(%rsqrt.148, %add.2018)
  %mul.5905 = f32[1,4096,1]{2,1,0} multiply(%div.998, %broadcast.3620)
  %mul.5906 = f32[1,4096,1]{2,1,0} multiply(%reshape.11814, %mul.5905)
  %mul.5907 = f32[1,4096,1]{2,1,0} multiply(%mul.5906, %mul.4455)
  %mul.5908 = f32[1,4096]{1,0} reshape(%mul.5907)
  %mul.5909 = f32[1,4096,4096]{2,1,0} broadcast(%mul.5908), dimensions={0,1}
  %mul.5910 = f32[1,4096,4096]{2,1,0} multiply(%convert_element_type.2314, %mul.5909)
  %add_any.197 = f32[1,4096,4096]{2,1,0} add(%mul.5903, %mul.5910)
  %convert_element_type.2327 = bf16[1,4096,4096]{2,1,0} convert(%add_any.197)
  %add_any.198 = bf16[1,4096,4096]{2,1,0} add(%sharding_constraint.1324, %convert_element_type.2327)
  %get-tuple-element.831 = f32[1,32,4096,1]{3,2,1,0} get-tuple-element(%te_fused_attn_forward_ffi.164), index=1
  %get-tuple-element.832 = u32[2,4]{1,0} get-tuple-element(%te_fused_attn_forward_ffi.164), index=2
  %sharding_constraint.1360 = u32[2,4]{1,0} copy(%get-tuple-element.832)
  %sharding_constraint.1361 = bf16[1,4096,4096]{2,1,0} copy(%add_any.198)
  %dot.681 = bf16[1,4096,32,128]{3,2,1,0} dot(%sharding_constraint.1361, %all-gather.283), lhs_contracting_dims={2}, rhs_contracting_dims={2}
  %sharding_constraint.1363 = bf16[1,4096,32,128]{3,2,1,0} copy(%dot.681)
  %te_fused_attn_backward_ffi.45 = (bf16[1,4096,32,128]{3,2,1,0}, bf16[1,4096,8,128]{3,2,1,0}, bf16[1,4096,8,128]{3,2,1,0}, bf16[0]{0}, u8[134742064]{0}) custom-call(%sharding_constraint.1330, %sharding_constraint.1332, %sharding_constraint.1334, %constant.1403, %get-tuple-element.831, /*index=5*/%sharding_constraint.1360, %get-tuple-element.818, %sharding_constraint.1363, %concatenate.378, %concatenate.379, /*index=10*/%constant.1416, %constant.1416, %constant.1416, %constant.1416, %constant.1416, /*index=15*/%constant.1416), custom_call_target="te_fused_attn_backward_ffi", operand_layout_constraints={bf16[1,4096,32,128]{3,2,1,0}, bf16[1,4096,8,128]{3,2,1,0}, bf16[1,4096,8,128]{3,2,1,0}, bf16[0]{0}, f32[1,32,4096,1]{3,2,1,0}, u32[2,4]{1,0}, bf16[1,4096,32,128]{3,2,1,0}, bf16[1,4096,32,128]{3,2,1,0}, s32[2]{0}, s32[2]{0}, f32[0]{0}, f32[0]{0}, f32[0]{0}, f32[0]{0}, f32[0]{0}, f32[0]{0}}, api_version=API_VERSION_TYPED_FFI, backend_config={attn_heads = 32 : i64, bias_batch = 0 : i64, bias_heads = 0 : i64, bias_type = 0 : i64, deterministic = false, dropout_probability = 0.000000e+00 : f64, input_batch = 1 : i64, is_training = true, kv_max_seqlen = 4096 : i64, mask_type = 3 : i64, max_segments_per_seq = 1 : i64, num_gqa_groups = 8 : i64, q_max_seqlen = 4096 : i64, qk_head_dim = 128 : i64, qkv_layout = 9 : i64, scaling_factor = 1.000000e+00 : f64, v_head_dim = 128 : i64, window_size_left = -1 : i64, window_size_right = -1 : i64}
  %get-tuple-element.833 = bf16[1,4096,8,128]{3,2,1,0} get-tuple-element(%te_fused_attn_backward_ffi.45), index=2
  %sharding_constraint.1364 = bf16[1,4096,8,128]{3,2,1,0} copy(%get-tuple-element.833)
  %dot.682 = bf16[1,4096,4096]{2,1,0} dot(%sharding_constraint.1364, %all-gather.282), lhs_contracting_dims={2,3}, rhs_contracting_dims={1,2}
  %get-tuple-element.834 = bf16[1,4096,8,128]{3,2,1,0} get-tuple-element(%te_fused_attn_backward_ffi.45), index=1
  %sharding_constraint.1366 = bf16[1,4096,8,128]{3,2,1,0} copy(%get-tuple-element.834)
  %slice.502 = bf16[1,4096,8,64]{3,2,1,0} slice(%sharding_constraint.1366), slice={[0:1], [0:4096], [0:8], [64:128]}
  %mul.5913 = bf16[1,4096,8,64]{3,2,1,0} multiply(%slice.502, %mul.5849)
  %slice.503 = bf16[1,4096,8,64]{3,2,1,0} slice(%sharding_constraint.1366), slice={[0:1], [0:4096], [0:8], [0:64]}
  %mul.5916 = bf16[1,4096,8,64]{3,2,1,0} multiply(%slice.503, %mul.5846)
  %add_any.199 = bf16[1,4096,8,64]{3,2,1,0} add(%mul.5913, %mul.5916)
  %mul.5919 = bf16[1,4096,8,64]{3,2,1,0} multiply(%slice.502, %mul.5846)
  %neg.228 = bf16[1,4096,8,64]{3,2,1,0} negate(%slice.503)
  %mul.5922 = bf16[1,4096,8,64]{3,2,1,0} multiply(%neg.228, %mul.5849)
  %add_any.200 = bf16[1,4096,8,64]{3,2,1,0} add(%mul.5919, %mul.5922)
  %concatenate.387 = bf16[1,4096,8,128]{3,2,1,0} concatenate(%add_any.199, %add_any.200), dimensions={3}
  %dot.683 = bf16[1,4096,4096]{2,1,0} dot(%concatenate.387, %all-gather.281), lhs_contracting_dims={2,3}, rhs_contracting_dims={1,2}
  %add_any.201 = bf16[1,4096,4096]{2,1,0} add(%dot.682, %dot.683)
  %sharding_constraint.1367 = bf16[1,4096,4096]{2,1,0} copy(%add_any.201)
  %get-tuple-element.835 = bf16[1,4096,32,128]{3,2,1,0} get-tuple-element(%te_fused_attn_backward_ffi.45), index=0
  %sharding_constraint.1368 = bf16[1,4096,32,128]{3,2,1,0} copy(%get-tuple-element.835)
  %slice.504 = bf16[1,4096,32,64]{3,2,1,0} slice(%sharding_constraint.1368), slice={[0:1], [0:4096], [0:32], [64:128]}
  %mul.5925 = bf16[1,4096,32,64]{3,2,1,0} multiply(%slice.504, %mul.5819)
  %slice.505 = bf16[1,4096,32,64]{3,2,1,0} slice(%sharding_constraint.1368), slice={[0:1], [0:4096], [0:32], [0:64]}
  %mul.5928 = bf16[1,4096,32,64]{3,2,1,0} multiply(%slice.505, %mul.5816)
  %add_any.202 = bf16[1,4096,32,64]{3,2,1,0} add(%mul.5925, %mul.5928)
  %mul.5931 = bf16[1,4096,32,64]{3,2,1,0} multiply(%slice.504, %mul.5816)
  %neg.229 = bf16[1,4096,32,64]{3,2,1,0} negate(%slice.505)
  %mul.5934 = bf16[1,4096,32,64]{3,2,1,0} multiply(%neg.229, %mul.5819)
  %add_any.203 = bf16[1,4096,32,64]{3,2,1,0} add(%mul.5931, %mul.5934)
  %concatenate.388 = bf16[1,4096,32,128]{3,2,1,0} concatenate(%add_any.202, %add_any.203), dimensions={3}
  %dot.684 = bf16[1,4096,4096]{2,1,0} dot(%concatenate.388, %all-gather.280), lhs_contracting_dims={2,3}, rhs_contracting_dims={1,2}
  %sharding_constraint.1371 = bf16[1,4096,4096]{2,1,0} copy(%dot.684)
  %add_any.204 = bf16[1,4096,4096]{2,1,0} add(%sharding_constraint.1367, %sharding_constraint.1371)
  %sharding_constraint.1373 = bf16[1,4096,4096]{2,1,0} copy(%add_any.204)
  %mul.5936 = bf16[1,4096,4096]{2,1,0} multiply(%sharding_constraint.1373, %mul.5812)
  %convert_element_type.2328 = f32[1,4096,4096]{2,1,0} convert(%mul.5936)
  %mul.5939 = f32[1,4096,4096]{2,1,0} multiply(%convert_element_type.2328, %mul.5810)
  %mul.5940 = f32[1,4096,4096]{2,1,0} multiply(%convert_element_type.2299, %convert_element_type.2328)
  %reduce.626 = f32[1,4096]{1,0} reduce(%mul.5940, %constant.1360), dimensions={2}, to_apply=%region_570.14630
  %reshape.11821 = f32[1,4096,1]{2,1,0} reshape(%reduce.626)
  %div.999 = f32[1,4096,1]{2,1,0} divide(%rsqrt.147, %add.2012)
  %mul.5941 = f32[1,4096,1]{2,1,0} multiply(%div.999, %broadcast.3620)
  %mul.5942 = f32[1,4096,1]{2,1,0} multiply(%reshape.11821, %mul.5941)
  %mul.5943 = f32[1,4096,1]{2,1,0} multiply(%mul.5942, %mul.4455)
  %mul.5949 = f32[1,4096]{1,0} reshape(%mul.5943)
  %mul.5954 = f32[1,4096,4096]{2,1,0} broadcast(%mul.5949), dimensions={0,1}
  %mul.5958 = f32[1,4096,4096]{2,1,0} multiply(%convert_element_type.2299, %mul.5954)
  %add_any.205 = f32[1,4096,4096]{2,1,0} add(%mul.5939, %mul.5958)
  %convert_element_type.2330 = bf16[1,4096,4096]{2,1,0} convert(%add_any.205)
  %add_any.206 = bf16[1,4096,4096]{2,1,0} add(%add_any.198, %convert_element_type.2330)
  %sharding_constraint.1374 = bf16[1,4096,4096]{2,1,0} copy(%add_any.206)
  %tuple.263 = (bf16[512,8]{1,0}, bf16[1,4096,14336]{2,1,0}, bf16[1,4096,14336]{2,1,0}, bf16[1,14336,4096]{2,1,0}, bf16[4096]{0}, /*index=5*/bf16[4096]{0}, bf16[512,8,128]{2,1,0}, bf16[32,128,512]{2,1,0}, bf16[512,32,128]{2,1,0}, bf16[512,8,128]{2,1,0}, /*index=10*/bf16[1,4096,4096]{2,1,0}, s32[1,4096]{1,0}, s32[1,4096]{1,0}, bf16[1,4096,4096]{2,1,0}) tuple(%param.223, %param.224, %param.225, %param.226, %param.222, /*index=5*/%param.217, %param.219, %param.221, %param.218, %param.220, /*index=10*/%sharding_constraint.666, %param.10, %param.7, %sharding_constraint.1374)
  %remat2.21 = (bf16[512,8]{1,0}, bf16[1,4096,14336]{2,1,0}, bf16[1,4096,14336]{2,1,0}, bf16[1,14336,4096]{2,1,0}, bf16[4096]{0}, /*index=5*/bf16[4096]{0}, bf16[512,8,128]{2,1,0}, bf16[32,128,512]{2,1,0}, bf16[512,32,128]{2,1,0}, bf16[512,8,128]{2,1,0}, /*index=10*/bf16[1,4096,4096]{2,1,0}, s32[1,4096]{1,0}, s32[1,4096]{1,0}, bf16[1,4096,4096]{2,1,0}) opt-barrier(%tuple.263)
  %get-tuple-element.836 = bf16[1,4096,4096]{2,1,0} get-tuple-element(%remat2.21), index=13
  %sharding_constraint.1375 = bf16[1,4096,4096]{2,1,0} copy(%get-tuple-element.836)
  %iota.2526 = s32[1,4096,2,1]{3,2,1,0} iota(), iota_dimension=1
  %get-tuple-element.837 = bf16[1,4096,4096]{2,1,0} get-tuple-element(%remat2.21), index=10
  %sharding_constraint.1376 = bf16[1,4096,4096]{2,1,0} copy(%get-tuple-element.837)
  %convert_element_type.2331 = f32[1,4096,4096]{2,1,0} convert(%sharding_constraint.1376)
  %square.88 = f32[1,4096,4096]{2,1,0} multiply(%convert_element_type.2331, %convert_element_type.2331)
  %reduce.627 = f32[1,4096]{1,0} reduce(%square.88, %constant.1360), dimensions={2}, to_apply=%region_571.14672
  %div.1000 = f32[1,4096]{1,0} multiply(%reduce.627, %broadcast.3412)
  %add.2029 = f32[1,4096]{1,0} add(%div.1000, %broadcast.3413)
  %add.2030 = f32[1,4096,1]{2,1,0} reshape(%add.2029)
  %rsqrt.149 = f32[1,4096,1]{2,1,0} rsqrt(%add.2030)
  %mul.5959 = f32[1,4096]{1,0} reshape(%rsqrt.149)
  %mul.5960 = f32[1,4096,4096]{2,1,0} broadcast(%mul.5959), dimensions={0,1}
  %mul.5961 = f32[1,4096,4096]{2,1,0} multiply(%convert_element_type.2331, %mul.5960)
  %convert_element_type.2332 = bf16[1,4096,4096]{2,1,0} convert(%mul.5961)
  %get-tuple-element.838 = bf16[4096]{0} get-tuple-element(%remat2.21), index=5
  %mul.5962 = bf16[1,4096,4096]{2,1,0} broadcast(%get-tuple-element.838), dimensions={2}
  %mul.5963 = bf16[1,4096,4096]{2,1,0} multiply(%convert_element_type.2332, %mul.5962)
  %sharding_constraint.1377 = bf16[1,4096,4096]{2,1,0} copy(%mul.5963)
  %sharding_constraint.1378 = bf16[1,4096,4096]{2,1,0} copy(%sharding_constraint.1377)
  %get-tuple-element.839 = bf16[512,32,128]{2,1,0} get-tuple-element(%remat2.21), index=8
  %all-gather.286 = bf16[4096,32,128]{2,1,0} all-gather(%get-tuple-element.839), channel_id=497, replica_groups=[1,8]<=[8], dimensions={0}, use_global_device_ids=true
  %dot.685 = bf16[1,4096,32,128]{3,2,1,0} dot(%sharding_constraint.1378, %all-gather.286), lhs_contracting_dims={2}, rhs_contracting_dims={0}
  %slice.506 = bf16[1,4096,32,64]{3,2,1,0} slice(%dot.685), slice={[0:1], [0:4096], [0:32], [0:64]}
  %get-tuple-element.840 = s32[1,4096]{1,0} get-tuple-element(%remat2.21), index=12
  %convert_element_type.2333 = f32[1,4096]{1,0} convert(%get-tuple-element.840)
  %div.1001 = f32[1,4096,1,64]{3,2,1,0} broadcast(%convert_element_type.2333), dimensions={0,1}
  %div.1004 = f32[1,4096,1,64]{3,2,1,0} divide(%div.1001, %div.402)
  %cos.85 = f32[1,4096,1,64]{3,2,1,0} cosine(%div.1004)
  %convert_element_type.2336 = bf16[1,4096,1,64]{3,2,1,0} convert(%cos.85)
  %mul.5966 = bf16[1,4096,64]{2,1,0} reshape(%convert_element_type.2336)
  %mul.5967 = bf16[1,4096,32,64]{3,2,1,0} broadcast(%mul.5966), dimensions={0,1,3}
  %mul.5968 = bf16[1,4096,32,64]{3,2,1,0} multiply(%slice.506, %mul.5967)
  %slice.507 = bf16[1,4096,32,64]{3,2,1,0} slice(%dot.685), slice={[0:1], [0:4096], [0:32], [64:128]}
  %sin.84 = f32[1,4096,1,64]{3,2,1,0} sine(%div.1004)
  %convert_element_type.2337 = bf16[1,4096,1,64]{3,2,1,0} convert(%sin.84)
  %mul.5969 = bf16[1,4096,64]{2,1,0} reshape(%convert_element_type.2337)
  %mul.5971 = bf16[1,4096,32,64]{3,2,1,0} broadcast(%mul.5969), dimensions={0,1,3}
  %mul.5972 = bf16[1,4096,32,64]{3,2,1,0} multiply(%slice.507, %mul.5971)
  %sub.290 = bf16[1,4096,32,64]{3,2,1,0} subtract(%mul.5968, %mul.5972)
  %mul.5975 = bf16[1,4096,32,64]{3,2,1,0} multiply(%slice.507, %mul.5967)
  %mul.5978 = bf16[1,4096,32,64]{3,2,1,0} multiply(%slice.506, %mul.5971)
  %add.2031 = bf16[1,4096,32,64]{3,2,1,0} add(%mul.5975, %mul.5978)
  %concatenate.389 = bf16[1,4096,32,128]{3,2,1,0} concatenate(%sub.290, %add.2031), dimensions={3}
  %sharding_constraint.1379 = bf16[1,4096,32,128]{3,2,1,0} copy(%concatenate.389)
  %get-tuple-element.841 = bf16[512,8,128]{2,1,0} get-tuple-element(%remat2.21), index=6
  %all-gather.287 = bf16[4096,8,128]{2,1,0} all-gather(%get-tuple-element.841), channel_id=498, replica_groups=[1,8]<=[8], dimensions={0}, use_global_device_ids=true
  %dot.686 = bf16[1,4096,8,128]{3,2,1,0} dot(%sharding_constraint.1378, %all-gather.287), lhs_contracting_dims={2}, rhs_contracting_dims={0}
  %slice.508 = bf16[1,4096,8,64]{3,2,1,0} slice(%dot.686), slice={[0:1], [0:4096], [0:8], [0:64]}
  %mul.5981 = bf16[1,4096,8,64]{3,2,1,0} broadcast(%mul.5966), dimensions={0,1,3}
  %mul.5982 = bf16[1,4096,8,64]{3,2,1,0} multiply(%slice.508, %mul.5981)
  %slice.509 = bf16[1,4096,8,64]{3,2,1,0} slice(%dot.686), slice={[0:1], [0:4096], [0:8], [64:128]}
  %mul.5984 = bf16[1,4096,8,64]{3,2,1,0} broadcast(%mul.5969), dimensions={0,1,3}
  %mul.5985 = bf16[1,4096,8,64]{3,2,1,0} multiply(%slice.509, %mul.5984)
  %sub.291 = bf16[1,4096,8,64]{3,2,1,0} subtract(%mul.5982, %mul.5985)
  %mul.5989 = bf16[1,4096,8,64]{3,2,1,0} multiply(%slice.509, %mul.5981)
  %mul.5993 = bf16[1,4096,8,64]{3,2,1,0} multiply(%slice.508, %mul.5984)
  %add.2032 = bf16[1,4096,8,64]{3,2,1,0} add(%mul.5989, %mul.5993)
  %concatenate.390 = bf16[1,4096,8,128]{3,2,1,0} concatenate(%sub.291, %add.2032), dimensions={3}
  %sharding_constraint.1383 = bf16[1,4096,8,128]{3,2,1,0} copy(%concatenate.390)
  %get-tuple-element.842 = bf16[512,8,128]{2,1,0} get-tuple-element(%remat2.21), index=9
  %all-gather.288 = bf16[4096,8,128]{2,1,0} all-gather(%get-tuple-element.842), channel_id=499, replica_groups=[1,8]<=[8], dimensions={0}, use_global_device_ids=true
  %dot.687 = bf16[1,4096,8,128]{3,2,1,0} dot(%sharding_constraint.1378, %all-gather.288), lhs_contracting_dims={2}, rhs_contracting_dims={0}
  %sharding_constraint.1385 = bf16[1,4096,8,128]{3,2,1,0} copy(%dot.687)
  %get-tuple-element.843 = s32[1,4096]{1,0} get-tuple-element(%remat2.21), index=11
  %eq.2277 = s32[1,4096,4096]{2,1,0} broadcast(%get-tuple-element.843), dimensions={0,1}
  %eq.2278 = s32[1,4096,4096]{2,1,0} broadcast(%get-tuple-element.843), dimensions={0,2}
  %eq.2279 = pred[1,4096,4096]{2,1,0} compare(%eq.2277, %eq.2278), direction=EQ
  %and.159 = pred[1,4096,4096]{2,1,0} and(%eq.2279, %and.64)
  %select_n.503 = f32[1,4096,4096]{2,1,0} select(%and.159, %broadcast_in_dim.516, %broadcast_in_dim.517)
  %ne.108 = pred[1,4096,4096]{2,1,0} compare(%select_n.503, %broadcast_in_dim.516), direction=NE
  %not.106 = pred[1,4096,4096]{2,1,0} not(%ne.108)
  %convert_element_type.2343 = s32[1,4096,4096]{2,1,0} convert(%not.106)
  %reduce.628 = s32[1,4096]{1,0} reduce(%convert_element_type.2343, %constant.1181), dimensions={1}, to_apply=%region_572.14768
  %reduce_sum.5712 = s32[1,1,1,4096]{3,2,1,0} reshape(%reduce.628)
  %slice.510 = s32[1,1,1,1]{3,2,1,0} slice(%reduce_sum.5712), slice={[0:1], [0:1], [0:1], [0:1]}
  %squeeze.42 = s32[1,1]{1,0} reshape(%slice.510)
  %reshape.11828 = s32[1]{0} reshape(%squeeze.42)
  %lt.147 = pred[1]{0} compare(%reshape.11828, %constant.1418), direction=LT
  %select_n.504 = s32[1]{0} select(%lt.147, %broadcast_in_dim.518, %reshape.11828)
  %concatenate.391 = s32[2]{0} concatenate(%constant.1418, %select_n.504), dimensions={0}
  %reduce.629 = s32[1,4096]{1,0} reduce(%convert_element_type.2343, %constant.1181), dimensions={2}, to_apply=%region_573.14777
  %reduce_sum.5713 = s32[1,1,1,4096]{3,2,1,0} reshape(%reduce.629)
  %reduce.630 = s32[1,1]{1,0} reduce(%reduce_sum.5713, %constant.1415), dimensions={3,2}, to_apply=%region_574.14783
  %reshape.11829 = s32[1]{0} reshape(%reduce.630)
  %lt.148 = pred[1]{0} compare(%reshape.11829, %constant.1418), direction=LT
  %select_n.505 = s32[1]{0} select(%lt.148, %broadcast_in_dim.518, %reshape.11829)
  %concatenate.392 = s32[2]{0} concatenate(%constant.1418, %select_n.505), dimensions={0}
  %te_fused_attn_forward_ffi.168 = (bf16[1,4096,32,128]{3,2,1,0}, f32[1,32,4096,1]{3,2,1,0}, u32[2,4]{1,0}, u8[48]{0}) custom-call(%sharding_constraint.1379, %sharding_constraint.1383, %sharding_constraint.1385, %constant.1403, %dynamic-slice.38, /*index=5*/%concatenate.391, %concatenate.392, %constant.1416, %constant.1416, %constant.1416, /*index=10*/%constant.1416, %constant.1416, %constant.1416), custom_call_target="te_fused_attn_forward_ffi", operand_layout_constraints={bf16[1,4096,32,128]{3,2,1,0}, bf16[1,4096,8,128]{3,2,1,0}, bf16[1,4096,8,128]{3,2,1,0}, bf16[0]{0}, u32[2]{0}, s32[2]{0}, s32[2]{0}, f32[0]{0}, f32[0]{0}, f32[0]{0}, f32[0]{0}, f32[0]{0}, f32[0]{0}}, api_version=API_VERSION_TYPED_FFI, backend_config={attn_heads = 32 : i64, bias_batch = 0 : i64, bias_heads = 0 : i64, bias_type = 0 : i64, deterministic = false, dropout_probability = 0.000000e+00 : f64, input_batch = 1 : i64, is_training = true, kv_max_seqlen = 4096 : i64, mask_type = 3 : i64, max_segments_per_seq = 1 : i64, num_gqa_groups = 8 : i64, q_max_seqlen = 4096 : i64, qk_head_dim = 128 : i64, qkv_layout = 9 : i64, scaling_factor = 1.000000e+00 : f64, v_head_dim = 128 : i64, window_size_left = -1 : i64, window_size_right = -1 : i64}
  %get-tuple-element.844 = bf16[1,4096,32,128]{3,2,1,0} get-tuple-element(%te_fused_attn_forward_ffi.168), index=0
  %sharding_constraint.1387 = bf16[1,4096,32,128]{3,2,1,0} copy(%get-tuple-element.844)
  %get-tuple-element.845 = bf16[32,128,512]{2,1,0} get-tuple-element(%remat2.21), index=7
  %all-gather.289 = bf16[32,128,4096]{2,1,0} all-gather(%get-tuple-element.845), channel_id=500, replica_groups=[1,8]<=[8], dimensions={2}, use_global_device_ids=true
  %dot.688 = bf16[1,4096,4096]{2,1,0} dot(%sharding_constraint.1387, %all-gather.289), lhs_contracting_dims={2,3}, rhs_contracting_dims={0,1}
  %sharding_constraint.1389 = bf16[1,4096,4096]{2,1,0} copy(%dot.688)
  %add.2033 = bf16[1,4096,4096]{2,1,0} add(%sharding_constraint.1376, %sharding_constraint.1389)
  %convert_element_type.2345 = f32[1,4096,4096]{2,1,0} convert(%add.2033)
  %square.89 = f32[1,4096,4096]{2,1,0} multiply(%convert_element_type.2345, %convert_element_type.2345)
  %reduce.631 = f32[1,4096]{1,0} reduce(%square.89, %constant.1360), dimensions={2}, to_apply=%region_575.14798
  %div.1009 = f32[1,4096]{1,0} multiply(%reduce.631, %broadcast.3412)
  %add.2034 = f32[1,4096]{1,0} add(%div.1009, %broadcast.3413)
  %add.2035 = f32[1,4096,1]{2,1,0} reshape(%add.2034)
  %rsqrt.150 = f32[1,4096,1]{2,1,0} rsqrt(%add.2035)
  %mul.5994 = f32[1,4096]{1,0} reshape(%rsqrt.150)
  %mul.5995 = f32[1,4096,4096]{2,1,0} broadcast(%mul.5994), dimensions={0,1}
  %mul.5996 = f32[1,4096,4096]{2,1,0} multiply(%convert_element_type.2345, %mul.5995)
  %convert_element_type.2346 = bf16[1,4096,4096]{2,1,0} convert(%mul.5996)
  %get-tuple-element.846 = bf16[4096]{0} get-tuple-element(%remat2.21), index=4
  %mul.5997 = bf16[1,4096,4096]{2,1,0} broadcast(%get-tuple-element.846), dimensions={2}
  %mul.5998 = bf16[1,4096,4096]{2,1,0} multiply(%convert_element_type.2346, %mul.5997)
  %sharding_constraint.1392 = bf16[1,4096,4096]{2,1,0} copy(%mul.5998)
  %get-tuple-element.847 = bf16[512,8]{1,0} get-tuple-element(%remat2.21), index=0
  %all-gather.290 = bf16[4096,8]{1,0} all-gather(%get-tuple-element.847), channel_id=501, replica_groups=[1,8]<=[8], dimensions={0}, use_global_device_ids=true
  %dot.689 = bf16[1,4096,8]{2,1,0} dot(%sharding_constraint.1392, %all-gather.290), lhs_contracting_dims={2}, rhs_contracting_dims={0}
  %sharding_constraint.1393 = bf16[1,4096,8]{2,1,0} copy(%dot.689)
  %top_k.126 = bf16[4096,8]{1,0} reshape(%sharding_constraint.1393)
  %top_k.127 = (bf16[4096,2]{1,0}, s32[4096,2]{1,0}) custom-call(%top_k.126), custom_call_target="TopK", called_computations={%compare_greater_than.42.14819.clone}
  %get-tuple-element.848 = bf16[4096,2]{1,0} get-tuple-element(%top_k.127), index=0
  %get-tuple-element.849 = s32[4096,2]{1,0} get-tuple-element(%top_k.127), index=1
  %add.2036 = s32[4096,2]{1,0} add(%get-tuple-element.849, %broadcast.3418)
  %sort.106 = (bf16[4096,2]{1,0}, s32[4096,2]{1,0}) sort(%get-tuple-element.848, %add.2036), dimensions={1}, is_stable=true, to_apply=%compare-value-and-index.42
  %get-tuple-element.851 = s32[4096,2]{1,0} get-tuple-element(%sort.106), index=1
  %slice.512 = s32[4096,2]{1,0} slice(%get-tuple-element.851), slice={[0:4096], [0:2]}
  %top_k.128 = s32[1,4096,2]{2,1,0} reshape(%slice.512)
  %lt.149 = pred[1,4096,2]{2,1,0} compare(%top_k.128, %broadcast.3419), direction=LT
  %add.2038 = s32[1,4096,2]{2,1,0} add(%top_k.128, %broadcast.3420)
  %select_n.506 = s32[1,4096,2]{2,1,0} select(%lt.149, %add.2038, %top_k.128)
  %broadcast_in_dim.677 = s32[1,4096,2,1]{3,2,1,0} reshape(%select_n.506)
  %concatenate.393 = s32[1,4096,2,3]{3,2,1,0} concatenate(%add.1356, %iota.2526, %broadcast_in_dim.677), dimensions={3}
  %subtract.138 = s32[1,4096,2,3]{3,2,1,0} subtract(%concatenate.393, %broadcast.3428)
  %scatter.223 = u32[1,4096,8]{2,1,0} scatter(%dynamic-slice.43, %subtract.138, %add.1401), update_window_dims={}, inserted_window_dims={0,1,2}, scatter_dims_to_operand_dims={0,1,2}, index_vector_dim=3, to_apply=%region_576.14855.clone
  %gather.52 = u32[1,4096,2]{2,1,0} gather(%scatter.223, %subtract.138), offset_dims={}, collapsed_slice_dims={0,1,2}, start_index_map={0,1,2}, index_vector_dim=3, slice_sizes={1,1,1}
  %eq.2280 = pred[1,4096,2]{2,1,0} compare(%add.1401, %gather.52), direction=EQ
  %get-tuple-element.850 = bf16[4096,2]{1,0} get-tuple-element(%sort.106), index=0
  %slice.511 = bf16[4096,2]{1,0} slice(%get-tuple-element.850), slice={[0:4096], [0:2]}
  %convert_element_type.2347 = f32[4096,2]{1,0} convert(%slice.511)
  %convert_element_type.2348 = f32[1,4096,2]{2,1,0} reshape(%convert_element_type.2347)
  %reduce.632 = f32[4096]{0} reduce(%convert_element_type.2347, %constant.1450), dimensions={1}, to_apply=%region_577.14864
  %sub.292 = f32[1,4096]{1,0} reshape(%reduce.632)
  %sub.293 = f32[1,4096,2]{2,1,0} broadcast(%sub.292), dimensions={0,1}
  %sub.294 = f32[1,4096,2]{2,1,0} subtract(%convert_element_type.2348, %sub.293)
  %exp.211 = f32[1,4096,2]{2,1,0} exponential(%sub.294)
  %reduce.633 = f32[1,4096]{1,0} reduce(%exp.211, %constant.1360), dimensions={2}, to_apply=%region_578.14873
  %div.1010 = f32[1,4096,2]{2,1,0} broadcast(%reduce.633), dimensions={0,1}
  %div.1011 = f32[1,4096,2]{2,1,0} divide(%exp.211, %div.1010)
  %convert_element_type.2349 = bf16[1,4096,2]{2,1,0} convert(%div.1011)
  %select_n.507 = bf16[1,4096,2]{2,1,0} select(%eq.2280, %convert_element_type.2349, %broadcast.3427)
  %scatter.224 = bf16[1,4096,8]{2,1,0} scatter(%broadcast.3379, %subtract.138, %select_n.507), update_window_dims={}, inserted_window_dims={0,1,2}, scatter_dims_to_operand_dims={0,1,2}, index_vector_dim=3, to_apply=%region_579.14882.clone
  %eq.2282 = s32[1,4096,2,8]{3,2,1,0} broadcast(%top_k.128), dimensions={0,1,2}
  %iota.2538 = s32[1,4096,2,8]{3,2,1,0} iota(), iota_dimension=3
  %eq.2283 = pred[1,4096,2,8]{3,2,1,0} compare(%eq.2282, %iota.2538), direction=EQ
  %convert_element_type.2350 = s32[1,4096,2,8]{3,2,1,0} convert(%eq.2283)
  %reshape.11861 = s32[1,8192,8]{2,1,0} reshape(%convert_element_type.2350)
  %sharding_constraint.1394 = s32[1,8192,8]{2,1,0} copy(%reshape.11861)
  %reduce-window.42 = s32[1,8192,8]{2,1,0} reduce-window(%sharding_constraint.1394, %constant.1181), window={size=1x8192x1 pad=0_0x8191_0x0_0}, to_apply=%region_580.14894
  %reshape.11863 = s32[1,4096,2,8]{3,2,1,0} reshape(%reduce-window.42)
  %sharding_constraint.1395 = s32[1,4096,2,8]{3,2,1,0} copy(%reshape.11863)
  %le.106 = pred[1,4096,2,8]{3,2,1,0} compare(%sharding_constraint.1395, %broadcast.3429), direction=LE
  %mul.5999 = s32[1,4096,2,8]{3,2,1,0} select(%le.106, %convert_element_type.2350, %broadcast.3430)
  %reduce.634 = s32[1,4096,8]{2,1,0} reduce(%mul.5999, %constant.1181), dimensions={2}, to_apply=%region_581.14903
  %convert_element_type.2351 = bf16[1,4096,8]{2,1,0} convert(%reduce.634)
  %mul.6000 = bf16[1,4096,8]{2,1,0} multiply(%scatter.224, %convert_element_type.2351)
  %mul.6001 = bf16[1,4096,8,1025]{3,2,1,0} broadcast(%mul.6000), dimensions={0,1,2}
  %mul.6002 = s32[1,8192,8]{2,1,0} multiply(%sharding_constraint.1394, %reduce-window.42)
  %reshape.11864 = s32[1,4096,2,8]{3,2,1,0} reshape(%mul.6002)
  %reduce.635 = s32[1,4096,8]{2,1,0} reduce(%reshape.11864, %constant.1181), dimensions={2}, to_apply=%region_582.14913
  %mul.6003 = s32[1,4096,8]{2,1,0} multiply(%reduce.635, %reduce.634)
  %eq.2284 = s32[1,4096,8,1025]{3,2,1,0} broadcast(%mul.6003), dimensions={0,1,2}
  %iota.2539 = s32[1,4096,8,1025]{3,2,1,0} iota(), iota_dimension=3
  %eq.2285 = pred[1,4096,8,1025]{3,2,1,0} compare(%eq.2284, %iota.2539), direction=EQ
  %convert_element_type.2352 = s32[1,4096,8,1025]{3,2,1,0} convert(%eq.2285)
  %convert_element_type.2353 = bf16[1,4096,8,1025]{3,2,1,0} convert(%convert_element_type.2352)
  %mul.6004 = bf16[1,4096,8,1025]{3,2,1,0} multiply(%mul.6001, %convert_element_type.2353)
  %slice.513 = bf16[1,4096,8,1024]{3,2,1,0} slice(%mul.6004), slice={[0:1], [0:4096], [0:8], [1:1025]}
  %convert_element_type.2354 = pred[1,4096,8,1024]{3,2,1,0} compare(%slice.513, %broadcast.3431), direction=NE
  %sharding_constraint.1396 = pred[1,4096,8,1024]{3,2,1,0} copy(%convert_element_type.2354)
  %dot_general.88 = bf16[1,4096,8,1024]{3,2,1,0} convert(%sharding_constraint.1396)
  %dot.690 = bf16[1,8,1024,4096]{3,2,1,0} dot(%dot_general.88, %sharding_constraint.1392), lhs_batch_dims={0}, lhs_contracting_dims={1}, rhs_batch_dims={0}, rhs_contracting_dims={1}
  %reshape.11867 = bf16[1,8,1,1024,4096]{4,3,2,1,0} reshape(%dot.690)
  %all-to-all.104 = bf16[1,8,1,1024,4096]{4,3,2,1,0} all-to-all(%reshape.11867), channel_id=505, replica_groups=[1,8]<=[8], dimensions={1}
  %transpose.171 = bf16[8,1,1,1024,4096]{4,3,2,0,1} transpose(%all-to-all.104), dimensions={1,0,2,3,4}
  %reshape.11868 = bf16[8,1,1024,4096]{3,2,1,0} reshape(%transpose.171)
  %transpose.172 = bf16[1,8,1024,4096]{3,2,0,1} transpose(%reshape.11868), dimensions={1,0,2,3}
  %sharding_constraint.1397 = bf16[1,8,1024,4096]{3,2,0,1} copy(%transpose.172)
  %get-tuple-element.854 = bf16[1,4096,14336]{2,1,0} get-tuple-element(%remat2.21), index=1
  %sharding_constraint.1398 = bf16[1,4096,14336]{2,1,0} copy(%get-tuple-element.854)
  %dot.691 = bf16[1,8,1024,14336]{3,2,1,0} dot(%sharding_constraint.1397, %sharding_constraint.1398), lhs_batch_dims={0}, lhs_contracting_dims={3}, rhs_batch_dims={0}, rhs_contracting_dims={1}
  %sharding_constraint.1399 = bf16[1,8,1024,14336]{3,2,1,0} copy(%dot.691)
  %neg.230 = bf16[1,8,1024,14336]{3,2,1,0} negate(%sharding_constraint.1399)
  %exp.212 = bf16[1,8,1024,14336]{3,2,1,0} exponential(%neg.230)
  %add.2045 = bf16[1,8,1024,14336]{3,2,1,0} add(%exp.212, %jit_silu_.0)
  %div.1012 = bf16[1,8,1024,14336]{3,2,1,0} divide(%jit_silu_.0, %add.2045)
  %mul.6005 = bf16[1,8,1024,14336]{3,2,1,0} multiply(%sharding_constraint.1399, %div.1012)
  %sharding_constraint.1400 = bf16[1,4096,4096]{2,1,0} copy(%sharding_constraint.1375)
  %sharding_constraint.1401 = bf16[1,4096,8,1024]{3,2,1,0} copy(%slice.513)
  %dot.692 = bf16[1,4096,8,1024]{3,2,1,0} dot(%sharding_constraint.1400, %sharding_constraint.1401), lhs_batch_dims={0}, lhs_contracting_dims={1}, rhs_batch_dims={0}, rhs_contracting_dims={1}
  %reshape.11871 = bf16[1,4096,8,1,1024]{4,3,2,1,0} reshape(%dot.692)
  %all-to-all.105 = bf16[1,4096,8,1,1024]{4,3,2,1,0} all-to-all(%reshape.11871), channel_id=506, replica_groups=[1,8]<=[8], dimensions={2}
  %transpose.173 = bf16[8,1,4096,1,1024]{4,3,0,2,1} transpose(%all-to-all.105), dimensions={2,0,1,3,4}
  %reshape.11872 = bf16[8,4096,1,1024]{3,2,1,0} reshape(%transpose.173)
  %transpose.174 = bf16[1,8,1024,4096]{2,0,3,1} transpose(%reshape.11872), dimensions={2,0,3,1}
  %sharding_constraint.1402 = bf16[1,8,1024,4096]{2,0,3,1} copy(%transpose.174)
  %get-tuple-element.855 = bf16[1,14336,4096]{2,1,0} get-tuple-element(%remat2.21), index=3
  %sharding_constraint.1403 = bf16[1,14336,4096]{2,1,0} copy(%get-tuple-element.855)
  %dot.693 = bf16[1,8,1024,14336]{3,2,1,0} dot(%sharding_constraint.1402, %sharding_constraint.1403), lhs_batch_dims={0}, lhs_contracting_dims={3}, rhs_batch_dims={0}, rhs_contracting_dims={2}
  %mul.6006 = bf16[1,8,1024,14336]{3,2,1,0} multiply(%mul.6005, %dot.693)
  %sharding_constraint.1404 = bf16[1,8,1024,14336]{3,2,1,0} copy(%mul.6006)
  %get-tuple-element.856 = bf16[1,4096,14336]{2,1,0} get-tuple-element(%remat2.21), index=2
  %sharding_constraint.1405 = bf16[1,4096,14336]{2,1,0} copy(%get-tuple-element.856)
  %dot.694 = bf16[1,8,1024,4096]{3,2,1,0} dot(%sharding_constraint.1404, %sharding_constraint.1405), lhs_batch_dims={0}, lhs_contracting_dims={3}, rhs_batch_dims={0}, rhs_contracting_dims={2}
  %dot.695 = bf16[1,8,1024,14336]{3,2,1,0} dot(%sharding_constraint.1397, %sharding_constraint.1405), lhs_batch_dims={0}, lhs_contracting_dims={3}, rhs_batch_dims={0}, rhs_contracting_dims={1}
  %sharding_constraint.1406 = bf16[1,8,1024,14336]{3,2,1,0} copy(%dot.695)
  %mul.6007 = bf16[1,8,1024,14336]{3,2,1,0} multiply(%dot.693, %sharding_constraint.1406)
  %mul.6008 = bf16[1,8,1024,14336]{3,2,1,0} multiply(%mul.6007, %div.1012)
  %mul.6011 = bf16[1,8,1024,14336]{3,2,1,0} multiply(%sharding_constraint.1399, %mul.6007)
  %sub.295 = bf16[1,8,1024,14336]{3,2,1,0} subtract(%jit_silu_.0, %div.1012)
  %mul.6014 = bf16[1,8,1024,14336]{3,2,1,0} multiply(%div.1012, %sub.295)
  %mul.6015 = bf16[1,8,1024,14336]{3,2,1,0} multiply(%mul.6011, %mul.6014)
  %add_any.207 = bf16[1,8,1024,14336]{3,2,1,0} add(%mul.6008, %mul.6015)
  %sharding_constraint.1409 = bf16[1,8,1024,14336]{3,2,1,0} copy(%add_any.207)
  %dot.696 = bf16[1,8,1024,4096]{3,2,1,0} dot(%sharding_constraint.1409, %sharding_constraint.1398), lhs_batch_dims={0}, lhs_contracting_dims={3}, rhs_batch_dims={0}, rhs_contracting_dims={2}
  %add_any.208 = bf16[1,8,1024,4096]{3,2,1,0} add(%dot.694, %dot.696)
  %sharding_constraint.1410 = bf16[1,8,1024,4096]{3,2,1,0} copy(%add_any.208)
  %transpose.175 = bf16[8,1,1024,4096]{3,2,0,1} transpose(%sharding_constraint.1410), dimensions={1,0,2,3}
  %reshape.11875 = bf16[8,1,1,1024,4096]{4,3,2,1,0} reshape(%transpose.175)
  %all-to-all.106 = bf16[8,1,1,1024,4096]{4,3,2,1,0} all-to-all(%reshape.11875), channel_id=507, replica_groups=[1,8]<=[8], dimensions={0}
  %transpose.176 = bf16[1,8,1,1024,4096]{4,3,2,0,1} transpose(%all-to-all.106), dimensions={1,0,2,3,4}
  %reshape.11876 = bf16[1,8,1024,4096]{3,2,1,0} reshape(%transpose.176)
  %dot.697 = bf16[1,4096,4096]{2,1,0} dot(%dot_general.88, %reshape.11876), lhs_batch_dims={0}, lhs_contracting_dims={2,3}, rhs_batch_dims={0}, rhs_contracting_dims={1,2}
  %reshape.11878 = s32[1,4096,2,1]{3,2,1,0} reshape(%slice.512)
  %ge.10 = pred[1,4096,2,3]{3,2,1,0} compare(%concatenate.393, %broadcast.3629), direction=GE
  %le.108 = pred[1,4096,2,3]{3,2,1,0} compare(%concatenate.393, %le.67), direction=LE
  %and.160 = pred[1,4096,2,3]{3,2,1,0} and(%ge.10, %le.108)
  %reduce.636 = pred[1,4096,2]{2,1,0} reduce(%and.160, %constant.5574), dimensions={3}, to_apply=%region_583.14970
  %mul.6016 = bf16[1,8,1024,14336]{3,2,1,0} multiply(%mul.6005, %sharding_constraint.1406)
  %dot.698 = bf16[1,8,1024,4096]{3,2,1,0} dot(%mul.6016, %sharding_constraint.1403), lhs_batch_dims={0}, lhs_contracting_dims={3}, rhs_batch_dims={0}, rhs_contracting_dims={1}
  %sharding_constraint.1411 = bf16[1,8,1024,4096]{3,2,1,0} copy(%dot.698)
  %reshape.11885 = bf16[1,8,1,1024,4096]{4,3,2,1,0} reshape(%sharding_constraint.1411)
  %all-to-all.107 = bf16[1,8,1,1024,4096]{4,3,2,1,0} all-to-all(%reshape.11885), channel_id=508, replica_groups=[1,8]<=[8], dimensions={1}
  %transpose.177 = bf16[8,1,1,1024,4096]{4,3,2,0,1} transpose(%all-to-all.107), dimensions={1,0,2,3,4}
  %reshape.11886 = bf16[8,1,1024,4096]{3,2,1,0} reshape(%transpose.177)
  %dot.699 = bf16[1,4096,8,1024]{3,2,1,0} dot(%sharding_constraint.1400, %reshape.11886), lhs_batch_dims={0}, lhs_contracting_dims={2}, rhs_batch_dims={1}, rhs_contracting_dims={3}
  %sharding_constraint.1412 = bf16[1,4096,8,1024]{3,2,1,0} copy(%dot.699)
  %pad.10 = bf16[1,4096,8,1025]{3,2,1,0} pad(%sharding_constraint.1412, %constant.1190), padding=0_0x0_0x0_0x1_0
  %mul.6017 = bf16[1,4096,8,1025]{3,2,1,0} multiply(%pad.10, %convert_element_type.2353)
  %reduce.637 = bf16[1,4096,8]{2,1,0} reduce(%mul.6017, %constant.1190), dimensions={3}, to_apply=%region_584.14982
  %mul.6018 = bf16[1,4096,8]{2,1,0} multiply(%reduce.637, %convert_element_type.2351)
  %gather.53 = bf16[1,4096,2]{2,1,0} gather(%mul.6018, %subtract.138), offset_dims={}, collapsed_slice_dims={0,1,2}, start_index_map={0,1,2}, index_vector_dim=3, slice_sizes={1,1,1}
  %select_n.508 = bf16[1,4096,2]{2,1,0} select(%reduce.636, %gather.53, %broadcast.3427)
  %select_n.509 = bf16[1,4096,2]{2,1,0} select(%eq.2280, %select_n.508, %broadcast.3427)
  %convert_element_type.2355 = f32[1,4096,2]{2,1,0} convert(%select_n.509)
  %div.1014 = f32[1,4096,2]{2,1,0} divide(%convert_element_type.2355, %div.1010)
  %mul.6019 = f32[1,4096]{1,0} multiply(%reduce.633, %reduce.633)
  %div.1015 = f32[1,4096]{1,0} divide(%add.1847, %mul.6019)
  %mul.6020 = f32[1,4096,2]{2,1,0} broadcast(%div.1015), dimensions={0,1}
  %mul.6022 = f32[1,4096,2]{2,1,0} multiply(%convert_element_type.2355, %mul.6020)
  %mul.6023 = f32[1,4096,2]{2,1,0} multiply(%mul.6022, %exp.211)
  %reduce.638 = f32[1,4096]{1,0} reduce(%mul.6023, %constant.1360), dimensions={2}, to_apply=%region_585.14999
  %neg.231 = f32[1,4096]{1,0} negate(%reduce.638)
  %broadcast_in_dim.678 = f32[1,4096,2]{2,1,0} broadcast(%neg.231), dimensions={0,1}
  %add_any.209 = f32[1,4096,2]{2,1,0} add(%div.1014, %broadcast_in_dim.678)
  %mul.6024 = f32[1,4096,2]{2,1,0} multiply(%add_any.209, %exp.211)
  %convert_element_type.2356 = bf16[1,4096,2]{2,1,0} convert(%mul.6024)
  %scatter.225 = bf16[1,4096,8]{2,1,0} scatter(%broadcast.3379, %reshape.11878, %convert_element_type.2356), update_window_dims={}, inserted_window_dims={2}, scatter_dims_to_operand_dims={2}, input_batching_dims={0,1}, scatter_indices_batching_dims={0,1}, index_vector_dim=3, to_apply=%region_586.15009.clone
  %sharding_constraint.1413 = bf16[1,4096,8]{2,1,0} copy(%scatter.225)
  %dot.700 = bf16[1,4096,4096]{2,1,0} dot(%sharding_constraint.1413, %all-gather.290), lhs_contracting_dims={2}, rhs_contracting_dims={1}
  %add_any.210 = bf16[1,4096,4096]{2,1,0} add(%dot.697, %dot.700)
  %sharding_constraint.1414 = bf16[1,4096,4096]{2,1,0} copy(%add_any.210)
  %mul.6026 = bf16[1,4096,4096]{2,1,0} multiply(%sharding_constraint.1414, %mul.5997)
  %convert_element_type.2357 = f32[1,4096,4096]{2,1,0} convert(%mul.6026)
  %mul.6032 = f32[1,4096,4096]{2,1,0} multiply(%convert_element_type.2357, %mul.5995)
  %mul.6033 = f32[1,4096,4096]{2,1,0} multiply(%convert_element_type.2345, %convert_element_type.2357)
  %reduce.639 = f32[1,4096]{1,0} reduce(%mul.6033, %constant.1360), dimensions={2}, to_apply=%region_587.15025
  %reshape.11898 = f32[1,4096,1]{2,1,0} reshape(%reduce.639)
  %div.1016 = f32[1,4096,1]{2,1,0} divide(%rsqrt.150, %add.2035)
  %mul.6034 = f32[1,4096,1]{2,1,0} multiply(%div.1016, %broadcast.3620)
  %mul.6046 = f32[1,4096,1]{2,1,0} multiply(%reshape.11898, %mul.6034)
  %mul.6047 = f32[1,4096,1]{2,1,0} multiply(%mul.6046, %mul.4455)
  %mul.6048 = f32[1,4096]{1,0} reshape(%mul.6047)
  %mul.6053 = f32[1,4096,4096]{2,1,0} broadcast(%mul.6048), dimensions={0,1}
  %mul.6055 = f32[1,4096,4096]{2,1,0} multiply(%convert_element_type.2345, %mul.6053)
  %add_any.211 = f32[1,4096,4096]{2,1,0} add(%mul.6032, %mul.6055)
  %convert_element_type.2358 = bf16[1,4096,4096]{2,1,0} convert(%add_any.211)
  %add_any.212 = bf16[1,4096,4096]{2,1,0} add(%sharding_constraint.1375, %convert_element_type.2358)
  %get-tuple-element.857 = f32[1,32,4096,1]{3,2,1,0} get-tuple-element(%te_fused_attn_forward_ffi.168), index=1
  %get-tuple-element.858 = u32[2,4]{1,0} get-tuple-element(%te_fused_attn_forward_ffi.168), index=2
  %sharding_constraint.1415 = u32[2,4]{1,0} copy(%get-tuple-element.858)
  %sharding_constraint.1416 = bf16[1,4096,4096]{2,1,0} copy(%add_any.212)
  %dot.701 = bf16[1,4096,32,128]{3,2,1,0} dot(%sharding_constraint.1416, %all-gather.289), lhs_contracting_dims={2}, rhs_contracting_dims={2}
  %sharding_constraint.1417 = bf16[1,4096,32,128]{3,2,1,0} copy(%dot.701)
  %te_fused_attn_backward_ffi.50 = (bf16[1,4096,32,128]{3,2,1,0}, bf16[1,4096,8,128]{3,2,1,0}, bf16[1,4096,8,128]{3,2,1,0}, bf16[0]{0}, u8[134742064]{0}) custom-call(%sharding_constraint.1379, %sharding_constraint.1383, %sharding_constraint.1385, %constant.1403, %get-tuple-element.857, /*index=5*/%sharding_constraint.1415, %get-tuple-element.844, %sharding_constraint.1417, %concatenate.391, %concatenate.392, /*index=10*/%constant.1416, %constant.1416, %constant.1416, %constant.1416, %constant.1416, /*index=15*/%constant.1416), custom_call_target="te_fused_attn_backward_ffi", operand_layout_constraints={bf16[1,4096,32,128]{3,2,1,0}, bf16[1,4096,8,128]{3,2,1,0}, bf16[1,4096,8,128]{3,2,1,0}, bf16[0]{0}, f32[1,32,4096,1]{3,2,1,0}, u32[2,4]{1,0}, bf16[1,4096,32,128]{3,2,1,0}, bf16[1,4096,32,128]{3,2,1,0}, s32[2]{0}, s32[2]{0}, f32[0]{0}, f32[0]{0}, f32[0]{0}, f32[0]{0}, f32[0]{0}, f32[0]{0}}, api_version=API_VERSION_TYPED_FFI, backend_config={attn_heads = 32 : i64, bias_batch = 0 : i64, bias_heads = 0 : i64, bias_type = 0 : i64, deterministic = false, dropout_probability = 0.000000e+00 : f64, input_batch = 1 : i64, is_training = true, kv_max_seqlen = 4096 : i64, mask_type = 3 : i64, max_segments_per_seq = 1 : i64, num_gqa_groups = 8 : i64, q_max_seqlen = 4096 : i64, qk_head_dim = 128 : i64, qkv_layout = 9 : i64, scaling_factor = 1.000000e+00 : f64, v_head_dim = 128 : i64, window_size_left = -1 : i64, window_size_right = -1 : i64}
  %get-tuple-element.859 = bf16[1,4096,8,128]{3,2,1,0} get-tuple-element(%te_fused_attn_backward_ffi.50), index=2
  %sharding_constraint.1418 = bf16[1,4096,8,128]{3,2,1,0} copy(%get-tuple-element.859)
  %dot.702 = bf16[1,4096,4096]{2,1,0} dot(%sharding_constraint.1418, %all-gather.288), lhs_contracting_dims={2,3}, rhs_contracting_dims={1,2}
  %get-tuple-element.860 = bf16[1,4096,8,128]{3,2,1,0} get-tuple-element(%te_fused_attn_backward_ffi.50), index=1
  %sharding_constraint.1419 = bf16[1,4096,8,128]{3,2,1,0} copy(%get-tuple-element.860)
  %slice.514 = bf16[1,4096,8,64]{3,2,1,0} slice(%sharding_constraint.1419), slice={[0:1], [0:4096], [0:8], [64:128]}
  %mul.6058 = bf16[1,4096,8,64]{3,2,1,0} multiply(%slice.514, %mul.5984)
  %slice.515 = bf16[1,4096,8,64]{3,2,1,0} slice(%sharding_constraint.1419), slice={[0:1], [0:4096], [0:8], [0:64]}
  %mul.6061 = bf16[1,4096,8,64]{3,2,1,0} multiply(%slice.515, %mul.5981)
  %add_any.213 = bf16[1,4096,8,64]{3,2,1,0} add(%mul.6058, %mul.6061)
  %mul.6067 = bf16[1,4096,8,64]{3,2,1,0} multiply(%slice.514, %mul.5981)
  %neg.232 = bf16[1,4096,8,64]{3,2,1,0} negate(%slice.515)
  %mul.6079 = bf16[1,4096,8,64]{3,2,1,0} multiply(%neg.232, %mul.5984)
  %add_any.214 = bf16[1,4096,8,64]{3,2,1,0} add(%mul.6067, %mul.6079)
  %concatenate.400 = bf16[1,4096,8,128]{3,2,1,0} concatenate(%add_any.213, %add_any.214), dimensions={3}
  %dot.703 = bf16[1,4096,4096]{2,1,0} dot(%concatenate.400, %all-gather.287), lhs_contracting_dims={2,3}, rhs_contracting_dims={1,2}
  %add_any.215 = bf16[1,4096,4096]{2,1,0} add(%dot.702, %dot.703)
  %sharding_constraint.1420 = bf16[1,4096,4096]{2,1,0} copy(%add_any.215)
  %get-tuple-element.861 = bf16[1,4096,32,128]{3,2,1,0} get-tuple-element(%te_fused_attn_backward_ffi.50), index=0
  %sharding_constraint.1421 = bf16[1,4096,32,128]{3,2,1,0} copy(%get-tuple-element.861)
  %slice.516 = bf16[1,4096,32,64]{3,2,1,0} slice(%sharding_constraint.1421), slice={[0:1], [0:4096], [0:32], [64:128]}
  %mul.6082 = bf16[1,4096,32,64]{3,2,1,0} multiply(%slice.516, %mul.5971)
  %slice.517 = bf16[1,4096,32,64]{3,2,1,0} slice(%sharding_constraint.1421), slice={[0:1], [0:4096], [0:32], [0:64]}
  %mul.6085 = bf16[1,4096,32,64]{3,2,1,0} multiply(%slice.517, %mul.5967)
  %add_any.216 = bf16[1,4096,32,64]{3,2,1,0} add(%mul.6082, %mul.6085)
  %mul.6092 = bf16[1,4096,32,64]{3,2,1,0} multiply(%slice.516, %mul.5967)
  %neg.233 = bf16[1,4096,32,64]{3,2,1,0} negate(%slice.517)
  %mul.6099 = bf16[1,4096,32,64]{3,2,1,0} multiply(%neg.233, %mul.5971)
  %add_any.217 = bf16[1,4096,32,64]{3,2,1,0} add(%mul.6092, %mul.6099)
  %concatenate.401 = bf16[1,4096,32,128]{3,2,1,0} concatenate(%add_any.216, %add_any.217), dimensions={3}
  %dot.704 = bf16[1,4096,4096]{2,1,0} dot(%concatenate.401, %all-gather.286), lhs_contracting_dims={2,3}, rhs_contracting_dims={1,2}
  %sharding_constraint.1422 = bf16[1,4096,4096]{2,1,0} copy(%dot.704)
  %add_any.218 = bf16[1,4096,4096]{2,1,0} add(%sharding_constraint.1420, %sharding_constraint.1422)
  %sharding_constraint.1423 = bf16[1,4096,4096]{2,1,0} copy(%add_any.218)
  %mul.6101 = bf16[1,4096,4096]{2,1,0} multiply(%sharding_constraint.1423, %mul.5962)
  %convert_element_type.2359 = f32[1,4096,4096]{2,1,0} convert(%mul.6101)
  %mul.6104 = f32[1,4096,4096]{2,1,0} multiply(%convert_element_type.2359, %mul.5960)
  %mul.6105 = f32[1,4096,4096]{2,1,0} multiply(%convert_element_type.2331, %convert_element_type.2359)
  %reduce.640 = f32[1,4096]{1,0} reduce(%mul.6105, %constant.1360), dimensions={2}, to_apply=%region_588.15104
  %reshape.11905 = f32[1,4096,1]{2,1,0} reshape(%reduce.640)
  %div.1017 = f32[1,4096,1]{2,1,0} divide(%rsqrt.149, %add.2030)
  %mul.6107 = f32[1,4096,1]{2,1,0} multiply(%div.1017, %broadcast.3620)
  %mul.6108 = f32[1,4096,1]{2,1,0} multiply(%reshape.11905, %mul.6107)
  %mul.6109 = f32[1,4096,1]{2,1,0} multiply(%mul.6108, %mul.4455)
  %mul.6110 = f32[1,4096]{1,0} reshape(%mul.6109)
  %mul.6111 = f32[1,4096,4096]{2,1,0} broadcast(%mul.6110), dimensions={0,1}
  %mul.6112 = f32[1,4096,4096]{2,1,0} multiply(%convert_element_type.2331, %mul.6111)
  %add_any.219 = f32[1,4096,4096]{2,1,0} add(%mul.6104, %mul.6112)
  %convert_element_type.2360 = bf16[1,4096,4096]{2,1,0} convert(%add_any.219)
  %add_any.220 = bf16[1,4096,4096]{2,1,0} add(%add_any.212, %convert_element_type.2360)
  %sharding_constraint.1424 = bf16[1,4096,4096]{2,1,0} copy(%add_any.220)
  %tuple.267 = (bf16[512,8]{1,0}, bf16[1,4096,14336]{2,1,0}, bf16[1,4096,14336]{2,1,0}, bf16[1,14336,4096]{2,1,0}, bf16[4096]{0}, /*index=5*/bf16[4096]{0}, bf16[512,8,128]{2,1,0}, bf16[32,128,512]{2,1,0}, bf16[512,32,128]{2,1,0}, bf16[512,8,128]{2,1,0}, /*index=10*/bf16[1,4096,4096]{2,1,0}, s32[1,4096]{1,0}, s32[1,4096]{1,0}, bf16[1,4096,4096]{2,1,0}) tuple(%param.213, %param.214, %param.215, %param.216, %param.212, /*index=5*/%param.207, %param.209, %param.211, %param.208, %param.210, /*index=10*/%sharding_constraint.642, %param.10, %param.7, %sharding_constraint.1424)
  %remat2.22 = (bf16[512,8]{1,0}, bf16[1,4096,14336]{2,1,0}, bf16[1,4096,14336]{2,1,0}, bf16[1,14336,4096]{2,1,0}, bf16[4096]{0}, /*index=5*/bf16[4096]{0}, bf16[512,8,128]{2,1,0}, bf16[32,128,512]{2,1,0}, bf16[512,32,128]{2,1,0}, bf16[512,8,128]{2,1,0}, /*index=10*/bf16[1,4096,4096]{2,1,0}, s32[1,4096]{1,0}, s32[1,4096]{1,0}, bf16[1,4096,4096]{2,1,0}) opt-barrier(%tuple.267)
  %get-tuple-element.862 = bf16[1,4096,4096]{2,1,0} get-tuple-element(%remat2.22), index=13
  %sharding_constraint.1425 = bf16[1,4096,4096]{2,1,0} copy(%get-tuple-element.862)
  %iota.2544 = s32[1,4096,2,1]{3,2,1,0} iota(), iota_dimension=1
  %get-tuple-element.863 = bf16[1,4096,4096]{2,1,0} get-tuple-element(%remat2.22), index=10
  %sharding_constraint.1426 = bf16[1,4096,4096]{2,1,0} copy(%get-tuple-element.863)
  %convert_element_type.2361 = f32[1,4096,4096]{2,1,0} convert(%sharding_constraint.1426)
  %square.90 = f32[1,4096,4096]{2,1,0} multiply(%convert_element_type.2361, %convert_element_type.2361)
  %reduce.641 = f32[1,4096]{1,0} reduce(%square.90, %constant.1360), dimensions={2}, to_apply=%region_589.15146
  %div.1018 = f32[1,4096]{1,0} multiply(%reduce.641, %broadcast.3412)
  %add.2049 = f32[1,4096]{1,0} add(%div.1018, %broadcast.3413)
  %add.2050 = f32[1,4096,1]{2,1,0} reshape(%add.2049)
  %rsqrt.151 = f32[1,4096,1]{2,1,0} rsqrt(%add.2050)
  %mul.6113 = f32[1,4096]{1,0} reshape(%rsqrt.151)
  %mul.6114 = f32[1,4096,4096]{2,1,0} broadcast(%mul.6113), dimensions={0,1}
  %mul.6115 = f32[1,4096,4096]{2,1,0} multiply(%convert_element_type.2361, %mul.6114)
  %convert_element_type.2362 = bf16[1,4096,4096]{2,1,0} convert(%mul.6115)
  %get-tuple-element.864 = bf16[4096]{0} get-tuple-element(%remat2.22), index=5
  %mul.6116 = bf16[1,4096,4096]{2,1,0} broadcast(%get-tuple-element.864), dimensions={2}
  %mul.6117 = bf16[1,4096,4096]{2,1,0} multiply(%convert_element_type.2362, %mul.6116)
  %sharding_constraint.1427 = bf16[1,4096,4096]{2,1,0} copy(%mul.6117)
  %sharding_constraint.1428 = bf16[1,4096,4096]{2,1,0} copy(%sharding_constraint.1427)
  %get-tuple-element.865 = bf16[512,32,128]{2,1,0} get-tuple-element(%remat2.22), index=8
  %all-gather.292 = bf16[4096,32,128]{2,1,0} all-gather(%get-tuple-element.865), channel_id=511, replica_groups=[1,8]<=[8], dimensions={0}, use_global_device_ids=true
  %dot.705 = bf16[1,4096,32,128]{3,2,1,0} dot(%sharding_constraint.1428, %all-gather.292), lhs_contracting_dims={2}, rhs_contracting_dims={0}
  %slice.518 = bf16[1,4096,32,64]{3,2,1,0} slice(%dot.705), slice={[0:1], [0:4096], [0:32], [0:64]}
  %get-tuple-element.866 = s32[1,4096]{1,0} get-tuple-element(%remat2.22), index=12
  %convert_element_type.2363 = f32[1,4096]{1,0} convert(%get-tuple-element.866)
  %div.1019 = f32[1,4096,1,64]{3,2,1,0} broadcast(%convert_element_type.2363), dimensions={0,1}
  %div.1022 = f32[1,4096,1,64]{3,2,1,0} divide(%div.1019, %div.402)
  %cos.87 = f32[1,4096,1,64]{3,2,1,0} cosine(%div.1022)
  %convert_element_type.2365 = bf16[1,4096,1,64]{3,2,1,0} convert(%cos.87)
  %mul.6119 = bf16[1,4096,64]{2,1,0} reshape(%convert_element_type.2365)
  %mul.6120 = bf16[1,4096,32,64]{3,2,1,0} broadcast(%mul.6119), dimensions={0,1,3}
  %mul.6121 = bf16[1,4096,32,64]{3,2,1,0} multiply(%slice.518, %mul.6120)
  %slice.519 = bf16[1,4096,32,64]{3,2,1,0} slice(%dot.705), slice={[0:1], [0:4096], [0:32], [64:128]}
  %sin.86 = f32[1,4096,1,64]{3,2,1,0} sine(%div.1022)
  %convert_element_type.2366 = bf16[1,4096,1,64]{3,2,1,0} convert(%sin.86)
  %mul.6122 = bf16[1,4096,64]{2,1,0} reshape(%convert_element_type.2366)
  %mul.6123 = bf16[1,4096,32,64]{3,2,1,0} broadcast(%mul.6122), dimensions={0,1,3}
  %mul.6124 = bf16[1,4096,32,64]{3,2,1,0} multiply(%slice.519, %mul.6123)
  %sub.296 = bf16[1,4096,32,64]{3,2,1,0} subtract(%mul.6121, %mul.6124)
  %mul.6144 = bf16[1,4096,32,64]{3,2,1,0} multiply(%slice.519, %mul.6120)
  %mul.6148 = bf16[1,4096,32,64]{3,2,1,0} multiply(%slice.518, %mul.6123)
  %add.2051 = bf16[1,4096,32,64]{3,2,1,0} add(%mul.6144, %mul.6148)
  %concatenate.402 = bf16[1,4096,32,128]{3,2,1,0} concatenate(%sub.296, %add.2051), dimensions={3}
  %sharding_constraint.1429 = bf16[1,4096,32,128]{3,2,1,0} copy(%concatenate.402)
  %get-tuple-element.867 = bf16[512,8,128]{2,1,0} get-tuple-element(%remat2.22), index=6
  %all-gather.293 = bf16[4096,8,128]{2,1,0} all-gather(%get-tuple-element.867), channel_id=512, replica_groups=[1,8]<=[8], dimensions={0}, use_global_device_ids=true
  %dot.706 = bf16[1,4096,8,128]{3,2,1,0} dot(%sharding_constraint.1428, %all-gather.293), lhs_contracting_dims={2}, rhs_contracting_dims={0}
  %slice.520 = bf16[1,4096,8,64]{3,2,1,0} slice(%dot.706), slice={[0:1], [0:4096], [0:8], [0:64]}
  %mul.6151 = bf16[1,4096,8,64]{3,2,1,0} broadcast(%mul.6119), dimensions={0,1,3}
  %mul.6152 = bf16[1,4096,8,64]{3,2,1,0} multiply(%slice.520, %mul.6151)
  %slice.521 = bf16[1,4096,8,64]{3,2,1,0} slice(%dot.706), slice={[0:1], [0:4096], [0:8], [64:128]}
  %mul.6154 = bf16[1,4096,8,64]{3,2,1,0} broadcast(%mul.6122), dimensions={0,1,3}
  %mul.6155 = bf16[1,4096,8,64]{3,2,1,0} multiply(%slice.521, %mul.6154)
  %sub.297 = bf16[1,4096,8,64]{3,2,1,0} subtract(%mul.6152, %mul.6155)
  %mul.6158 = bf16[1,4096,8,64]{3,2,1,0} multiply(%slice.521, %mul.6151)
  %mul.6161 = bf16[1,4096,8,64]{3,2,1,0} multiply(%slice.520, %mul.6154)
  %add.2052 = bf16[1,4096,8,64]{3,2,1,0} add(%mul.6158, %mul.6161)
  %concatenate.403 = bf16[1,4096,8,128]{3,2,1,0} concatenate(%sub.297, %add.2052), dimensions={3}
  %sharding_constraint.1432 = bf16[1,4096,8,128]{3,2,1,0} copy(%concatenate.403)
  %get-tuple-element.868 = bf16[512,8,128]{2,1,0} get-tuple-element(%remat2.22), index=9
  %all-gather.294 = bf16[4096,8,128]{2,1,0} all-gather(%get-tuple-element.868), channel_id=513, replica_groups=[1,8]<=[8], dimensions={0}, use_global_device_ids=true
  %dot.707 = bf16[1,4096,8,128]{3,2,1,0} dot(%sharding_constraint.1428, %all-gather.294), lhs_contracting_dims={2}, rhs_contracting_dims={0}
  %sharding_constraint.1433 = bf16[1,4096,8,128]{3,2,1,0} copy(%dot.707)
  %get-tuple-element.869 = s32[1,4096]{1,0} get-tuple-element(%remat2.22), index=11
  %eq.2287 = s32[1,4096,4096]{2,1,0} broadcast(%get-tuple-element.869), dimensions={0,1}
  %eq.2288 = s32[1,4096,4096]{2,1,0} broadcast(%get-tuple-element.869), dimensions={0,2}
  %eq.2292 = pred[1,4096,4096]{2,1,0} compare(%eq.2287, %eq.2288), direction=EQ
  %and.162 = pred[1,4096,4096]{2,1,0} and(%eq.2292, %and.64)
  %select_n.512 = f32[1,4096,4096]{2,1,0} select(%and.162, %broadcast_in_dim.516, %broadcast_in_dim.517)
  %ne.109 = pred[1,4096,4096]{2,1,0} compare(%select_n.512, %broadcast_in_dim.516), direction=NE
  %not.107 = pred[1,4096,4096]{2,1,0} not(%ne.109)
  %convert_element_type.2371 = s32[1,4096,4096]{2,1,0} convert(%not.107)
  %reduce.642 = s32[1,4096]{1,0} reduce(%convert_element_type.2371, %constant.1181), dimensions={1}, to_apply=%region_590.15242
  %reduce_sum.5714 = s32[1,1,1,4096]{3,2,1,0} reshape(%reduce.642)
  %slice.522 = s32[1,1,1,1]{3,2,1,0} slice(%reduce_sum.5714), slice={[0:1], [0:1], [0:1], [0:1]}
  %squeeze.43 = s32[1,1]{1,0} reshape(%slice.522)
  %reshape.11912 = s32[1]{0} reshape(%squeeze.43)
  %lt.152 = pred[1]{0} compare(%reshape.11912, %constant.1418), direction=LT
  %select_n.513 = s32[1]{0} select(%lt.152, %broadcast_in_dim.518, %reshape.11912)
  %concatenate.404 = s32[2]{0} concatenate(%constant.1418, %select_n.513), dimensions={0}
  %reduce.643 = s32[1,4096]{1,0} reduce(%convert_element_type.2371, %constant.1181), dimensions={2}, to_apply=%region_591.15251
  %reduce_sum.5715 = s32[1,1,1,4096]{3,2,1,0} reshape(%reduce.643)
  %reduce.644 = s32[1,1]{1,0} reduce(%reduce_sum.5715, %constant.1415), dimensions={3,2}, to_apply=%region_592.15257
  %reshape.11913 = s32[1]{0} reshape(%reduce.644)
  %lt.153 = pred[1]{0} compare(%reshape.11913, %constant.1418), direction=LT
  %select_n.514 = s32[1]{0} select(%lt.153, %broadcast_in_dim.518, %reshape.11913)
  %concatenate.405 = s32[2]{0} concatenate(%constant.1418, %select_n.514), dimensions={0}
  %te_fused_attn_forward_ffi.172 = (bf16[1,4096,32,128]{3,2,1,0}, f32[1,32,4096,1]{3,2,1,0}, u32[2,4]{1,0}, u8[48]{0}) custom-call(%sharding_constraint.1429, %sharding_constraint.1432, %sharding_constraint.1433, %constant.1403, %dynamic-slice.38, /*index=5*/%concatenate.404, %concatenate.405, %constant.1416, %constant.1416, %constant.1416, /*index=10*/%constant.1416, %constant.1416, %constant.1416), custom_call_target="te_fused_attn_forward_ffi", operand_layout_constraints={bf16[1,4096,32,128]{3,2,1,0}, bf16[1,4096,8,128]{3,2,1,0}, bf16[1,4096,8,128]{3,2,1,0}, bf16[0]{0}, u32[2]{0}, s32[2]{0}, s32[2]{0}, f32[0]{0}, f32[0]{0}, f32[0]{0}, f32[0]{0}, f32[0]{0}, f32[0]{0}}, api_version=API_VERSION_TYPED_FFI, backend_config={attn_heads = 32 : i64, bias_batch = 0 : i64, bias_heads = 0 : i64, bias_type = 0 : i64, deterministic = false, dropout_probability = 0.000000e+00 : f64, input_batch = 1 : i64, is_training = true, kv_max_seqlen = 4096 : i64, mask_type = 3 : i64, max_segments_per_seq = 1 : i64, num_gqa_groups = 8 : i64, q_max_seqlen = 4096 : i64, qk_head_dim = 128 : i64, qkv_layout = 9 : i64, scaling_factor = 1.000000e+00 : f64, v_head_dim = 128 : i64, window_size_left = -1 : i64, window_size_right = -1 : i64}
  %get-tuple-element.870 = bf16[1,4096,32,128]{3,2,1,0} get-tuple-element(%te_fused_attn_forward_ffi.172), index=0
  %sharding_constraint.1434 = bf16[1,4096,32,128]{3,2,1,0} copy(%get-tuple-element.870)
  %get-tuple-element.871 = bf16[32,128,512]{2,1,0} get-tuple-element(%remat2.22), index=7
  %all-gather.295 = bf16[32,128,4096]{2,1,0} all-gather(%get-tuple-element.871), channel_id=514, replica_groups=[1,8]<=[8], dimensions={2}, use_global_device_ids=true
  %dot.708 = bf16[1,4096,4096]{2,1,0} dot(%sharding_constraint.1434, %all-gather.295), lhs_contracting_dims={2,3}, rhs_contracting_dims={0,1}
  %sharding_constraint.1435 = bf16[1,4096,4096]{2,1,0} copy(%dot.708)
  %add.2053 = bf16[1,4096,4096]{2,1,0} add(%sharding_constraint.1426, %sharding_constraint.1435)
  %convert_element_type.2373 = f32[1,4096,4096]{2,1,0} convert(%add.2053)
  %square.91 = f32[1,4096,4096]{2,1,0} multiply(%convert_element_type.2373, %convert_element_type.2373)
  %reduce.645 = f32[1,4096]{1,0} reduce(%square.91, %constant.1360), dimensions={2}, to_apply=%region_593.15272
  %div.1027 = f32[1,4096]{1,0} multiply(%reduce.645, %broadcast.3412)
  %add.2054 = f32[1,4096]{1,0} add(%div.1027, %broadcast.3413)
  %add.2055 = f32[1,4096,1]{2,1,0} reshape(%add.2054)
  %rsqrt.152 = f32[1,4096,1]{2,1,0} rsqrt(%add.2055)
  %mul.6162 = f32[1,4096]{1,0} reshape(%rsqrt.152)
  %mul.6163 = f32[1,4096,4096]{2,1,0} broadcast(%mul.6162), dimensions={0,1}
  %mul.6164 = f32[1,4096,4096]{2,1,0} multiply(%convert_element_type.2373, %mul.6163)
  %convert_element_type.2374 = bf16[1,4096,4096]{2,1,0} convert(%mul.6164)
  %get-tuple-element.872 = bf16[4096]{0} get-tuple-element(%remat2.22), index=4
  %mul.6173 = bf16[1,4096,4096]{2,1,0} broadcast(%get-tuple-element.872), dimensions={2}
  %mul.6182 = bf16[1,4096,4096]{2,1,0} multiply(%convert_element_type.2374, %mul.6173)
  %sharding_constraint.1436 = bf16[1,4096,4096]{2,1,0} copy(%mul.6182)
  %get-tuple-element.873 = bf16[512,8]{1,0} get-tuple-element(%remat2.22), index=0
  %all-gather.296 = bf16[4096,8]{1,0} all-gather(%get-tuple-element.873), channel_id=515, replica_groups=[1,8]<=[8], dimensions={0}, use_global_device_ids=true
  %dot.709 = bf16[1,4096,8]{2,1,0} dot(%sharding_constraint.1436, %all-gather.296), lhs_contracting_dims={2}, rhs_contracting_dims={0}
  %sharding_constraint.1437 = bf16[1,4096,8]{2,1,0} copy(%dot.709)
  %top_k.129 = bf16[4096,8]{1,0} reshape(%sharding_constraint.1437)
  %top_k.130 = (bf16[4096,2]{1,0}, s32[4096,2]{1,0}) custom-call(%top_k.129), custom_call_target="TopK", called_computations={%compare_greater_than.43.15293.clone}
  %get-tuple-element.874 = bf16[4096,2]{1,0} get-tuple-element(%top_k.130), index=0
  %get-tuple-element.875 = s32[4096,2]{1,0} get-tuple-element(%top_k.130), index=1
  %add.2056 = s32[4096,2]{1,0} add(%get-tuple-element.875, %broadcast.3418)
  %sort.107 = (bf16[4096,2]{1,0}, s32[4096,2]{1,0}) sort(%get-tuple-element.874, %add.2056), dimensions={1}, is_stable=true, to_apply=%compare-value-and-index.43
  %get-tuple-element.877 = s32[4096,2]{1,0} get-tuple-element(%sort.107), index=1
  %slice.524 = s32[4096,2]{1,0} slice(%get-tuple-element.877), slice={[0:4096], [0:2]}
  %top_k.131 = s32[1,4096,2]{2,1,0} reshape(%slice.524)
  %lt.154 = pred[1,4096,2]{2,1,0} compare(%top_k.131, %broadcast.3419), direction=LT
  %add.2058 = s32[1,4096,2]{2,1,0} add(%top_k.131, %broadcast.3420)
  %select_n.515 = s32[1,4096,2]{2,1,0} select(%lt.154, %add.2058, %top_k.131)
  %broadcast_in_dim.683 = s32[1,4096,2,1]{3,2,1,0} reshape(%select_n.515)
  %concatenate.406 = s32[1,4096,2,3]{3,2,1,0} concatenate(%add.1356, %iota.2544, %broadcast_in_dim.683), dimensions={3}
  %subtract.142 = s32[1,4096,2,3]{3,2,1,0} subtract(%concatenate.406, %broadcast.3428)
  %scatter.226 = u32[1,4096,8]{2,1,0} scatter(%dynamic-slice.43, %subtract.142, %add.1401), update_window_dims={}, inserted_window_dims={0,1,2}, scatter_dims_to_operand_dims={0,1,2}, index_vector_dim=3, to_apply=%region_594.15329.clone
  %gather.54 = u32[1,4096,2]{2,1,0} gather(%scatter.226, %subtract.142), offset_dims={}, collapsed_slice_dims={0,1,2}, start_index_map={0,1,2}, index_vector_dim=3, slice_sizes={1,1,1}
  %eq.2293 = pred[1,4096,2]{2,1,0} compare(%add.1401, %gather.54), direction=EQ
  %get-tuple-element.876 = bf16[4096,2]{1,0} get-tuple-element(%sort.107), index=0
  %slice.523 = bf16[4096,2]{1,0} slice(%get-tuple-element.876), slice={[0:4096], [0:2]}
  %convert_element_type.2375 = f32[4096,2]{1,0} convert(%slice.523)
  %convert_element_type.2376 = f32[1,4096,2]{2,1,0} reshape(%convert_element_type.2375)
  %reduce.646 = f32[4096]{0} reduce(%convert_element_type.2375, %constant.1450), dimensions={1}, to_apply=%region_595.15338
  %sub.298 = f32[1,4096]{1,0} reshape(%reduce.646)
  %sub.299 = f32[1,4096,2]{2,1,0} broadcast(%sub.298), dimensions={0,1}
  %sub.300 = f32[1,4096,2]{2,1,0} subtract(%convert_element_type.2376, %sub.299)
  %exp.213 = f32[1,4096,2]{2,1,0} exponential(%sub.300)
  %reduce.647 = f32[1,4096]{1,0} reduce(%exp.213, %constant.1360), dimensions={2}, to_apply=%region_596.15347
  %div.1028 = f32[1,4096,2]{2,1,0} broadcast(%reduce.647), dimensions={0,1}
  %div.1029 = f32[1,4096,2]{2,1,0} divide(%exp.213, %div.1028)
  %convert_element_type.2377 = bf16[1,4096,2]{2,1,0} convert(%div.1029)
  %select_n.516 = bf16[1,4096,2]{2,1,0} select(%eq.2293, %convert_element_type.2377, %broadcast.3427)
  %scatter.227 = bf16[1,4096,8]{2,1,0} scatter(%broadcast.3379, %subtract.142, %select_n.516), update_window_dims={}, inserted_window_dims={0,1,2}, scatter_dims_to_operand_dims={0,1,2}, index_vector_dim=3, to_apply=%region_597.15356.clone
  %eq.2295 = s32[1,4096,2,8]{3,2,1,0} broadcast(%top_k.131), dimensions={0,1,2}
  %iota.2559 = s32[1,4096,2,8]{3,2,1,0} iota(), iota_dimension=3
  %eq.2296 = pred[1,4096,2,8]{3,2,1,0} compare(%eq.2295, %iota.2559), direction=EQ
  %convert_element_type.2378 = s32[1,4096,2,8]{3,2,1,0} convert(%eq.2296)
  %reshape.11946 = s32[1,8192,8]{2,1,0} reshape(%convert_element_type.2378)
  %sharding_constraint.1438 = s32[1,8192,8]{2,1,0} copy(%reshape.11946)
  %reduce-window.43 = s32[1,8192,8]{2,1,0} reduce-window(%sharding_constraint.1438, %constant.1181), window={size=1x8192x1 pad=0_0x8191_0x0_0}, to_apply=%region_598.15368
  %reshape.11948 = s32[1,4096,2,8]{3,2,1,0} reshape(%reduce-window.43)
  %sharding_constraint.1439 = s32[1,4096,2,8]{3,2,1,0} copy(%reshape.11948)
  %le.110 = pred[1,4096,2,8]{3,2,1,0} compare(%sharding_constraint.1439, %broadcast.3429), direction=LE
  %mul.6183 = s32[1,4096,2,8]{3,2,1,0} select(%le.110, %convert_element_type.2378, %broadcast.3430)
  %reduce.648 = s32[1,4096,8]{2,1,0} reduce(%mul.6183, %constant.1181), dimensions={2}, to_apply=%region_599.15377
  %convert_element_type.2379 = bf16[1,4096,8]{2,1,0} convert(%reduce.648)
  %mul.6184 = bf16[1,4096,8]{2,1,0} multiply(%scatter.227, %convert_element_type.2379)
  %mul.6185 = bf16[1,4096,8,1025]{3,2,1,0} broadcast(%mul.6184), dimensions={0,1,2}
  %mul.6186 = s32[1,8192,8]{2,1,0} multiply(%sharding_constraint.1438, %reduce-window.43)
  %reshape.11949 = s32[1,4096,2,8]{3,2,1,0} reshape(%mul.6186)
  %reduce.649 = s32[1,4096,8]{2,1,0} reduce(%reshape.11949, %constant.1181), dimensions={2}, to_apply=%region_600.15387
  %mul.6187 = s32[1,4096,8]{2,1,0} multiply(%reduce.649, %reduce.648)
  %eq.2297 = s32[1,4096,8,1025]{3,2,1,0} broadcast(%mul.6187), dimensions={0,1,2}
  %iota.2560 = s32[1,4096,8,1025]{3,2,1,0} iota(), iota_dimension=3
  %eq.2298 = pred[1,4096,8,1025]{3,2,1,0} compare(%eq.2297, %iota.2560), direction=EQ
  %convert_element_type.2380 = s32[1,4096,8,1025]{3,2,1,0} convert(%eq.2298)
  %convert_element_type.2382 = bf16[1,4096,8,1025]{3,2,1,0} convert(%convert_element_type.2380)
  %mul.6188 = bf16[1,4096,8,1025]{3,2,1,0} multiply(%mul.6185, %convert_element_type.2382)
  %slice.525 = bf16[1,4096,8,1024]{3,2,1,0} slice(%mul.6188), slice={[0:1], [0:4096], [0:8], [1:1025]}
  %convert_element_type.2383 = pred[1,4096,8,1024]{3,2,1,0} compare(%slice.525, %broadcast.3431), direction=NE
  %sharding_constraint.1442 = pred[1,4096,8,1024]{3,2,1,0} copy(%convert_element_type.2383)
  %dot_general.90 = bf16[1,4096,8,1024]{3,2,1,0} convert(%sharding_constraint.1442)
  %dot.710 = bf16[1,8,1024,4096]{3,2,1,0} dot(%dot_general.90, %sharding_constraint.1436), lhs_batch_dims={0}, lhs_contracting_dims={1}, rhs_batch_dims={0}, rhs_contracting_dims={1}
  %reshape.11952 = bf16[1,8,1,1024,4096]{4,3,2,1,0} reshape(%dot.710)
  %all-to-all.108 = bf16[1,8,1,1024,4096]{4,3,2,1,0} all-to-all(%reshape.11952), channel_id=519, replica_groups=[1,8]<=[8], dimensions={1}
  %transpose.178 = bf16[8,1,1,1024,4096]{4,3,2,0,1} transpose(%all-to-all.108), dimensions={1,0,2,3,4}
  %reshape.11953 = bf16[8,1,1024,4096]{3,2,1,0} reshape(%transpose.178)
  %transpose.179 = bf16[1,8,1024,4096]{3,2,0,1} transpose(%reshape.11953), dimensions={1,0,2,3}
  %sharding_constraint.1443 = bf16[1,8,1024,4096]{3,2,0,1} copy(%transpose.179)
  %get-tuple-element.880 = bf16[1,4096,14336]{2,1,0} get-tuple-element(%remat2.22), index=1
  %sharding_constraint.1444 = bf16[1,4096,14336]{2,1,0} copy(%get-tuple-element.880)
  %dot.711 = bf16[1,8,1024,14336]{3,2,1,0} dot(%sharding_constraint.1443, %sharding_constraint.1444), lhs_batch_dims={0}, lhs_contracting_dims={3}, rhs_batch_dims={0}, rhs_contracting_dims={1}
  %sharding_constraint.1446 = bf16[1,8,1024,14336]{3,2,1,0} copy(%dot.711)
  %neg.234 = bf16[1,8,1024,14336]{3,2,1,0} negate(%sharding_constraint.1446)
  %exp.214 = bf16[1,8,1024,14336]{3,2,1,0} exponential(%neg.234)
  %add.2063 = bf16[1,8,1024,14336]{3,2,1,0} add(%exp.214, %jit_silu_.0)
  %div.1030 = bf16[1,8,1024,14336]{3,2,1,0} divide(%jit_silu_.0, %add.2063)
  %mul.6189 = bf16[1,8,1024,14336]{3,2,1,0} multiply(%sharding_constraint.1446, %div.1030)
  %sharding_constraint.1447 = bf16[1,4096,4096]{2,1,0} copy(%sharding_constraint.1425)
  %sharding_constraint.1448 = bf16[1,4096,8,1024]{3,2,1,0} copy(%slice.525)
  %dot.712 = bf16[1,4096,8,1024]{3,2,1,0} dot(%sharding_constraint.1447, %sharding_constraint.1448), lhs_batch_dims={0}, lhs_contracting_dims={1}, rhs_batch_dims={0}, rhs_contracting_dims={1}
  %reshape.11956 = bf16[1,4096,8,1,1024]{4,3,2,1,0} reshape(%dot.712)
  %all-to-all.109 = bf16[1,4096,8,1,1024]{4,3,2,1,0} all-to-all(%reshape.11956), channel_id=520, replica_groups=[1,8]<=[8], dimensions={2}
  %transpose.180 = bf16[8,1,4096,1,1024]{4,3,0,2,1} transpose(%all-to-all.109), dimensions={2,0,1,3,4}
  %reshape.11957 = bf16[8,4096,1,1024]{3,2,1,0} reshape(%transpose.180)
  %transpose.181 = bf16[1,8,1024,4096]{2,0,3,1} transpose(%reshape.11957), dimensions={2,0,3,1}
  %sharding_constraint.1449 = bf16[1,8,1024,4096]{2,0,3,1} copy(%transpose.181)
  %get-tuple-element.881 = bf16[1,14336,4096]{2,1,0} get-tuple-element(%remat2.22), index=3
  %sharding_constraint.1450 = bf16[1,14336,4096]{2,1,0} copy(%get-tuple-element.881)
  %dot.713 = bf16[1,8,1024,14336]{3,2,1,0} dot(%sharding_constraint.1449, %sharding_constraint.1450), lhs_batch_dims={0}, lhs_contracting_dims={3}, rhs_batch_dims={0}, rhs_contracting_dims={2}
  %mul.6190 = bf16[1,8,1024,14336]{3,2,1,0} multiply(%mul.6189, %dot.713)
  %sharding_constraint.1451 = bf16[1,8,1024,14336]{3,2,1,0} copy(%mul.6190)
  %get-tuple-element.882 = bf16[1,4096,14336]{2,1,0} get-tuple-element(%remat2.22), index=2
  %sharding_constraint.1452 = bf16[1,4096,14336]{2,1,0} copy(%get-tuple-element.882)
  %dot.714 = bf16[1,8,1024,4096]{3,2,1,0} dot(%sharding_constraint.1451, %sharding_constraint.1452), lhs_batch_dims={0}, lhs_contracting_dims={3}, rhs_batch_dims={0}, rhs_contracting_dims={2}
  %dot.715 = bf16[1,8,1024,14336]{3,2,1,0} dot(%sharding_constraint.1443, %sharding_constraint.1452), lhs_batch_dims={0}, lhs_contracting_dims={3}, rhs_batch_dims={0}, rhs_contracting_dims={1}
  %sharding_constraint.1453 = bf16[1,8,1024,14336]{3,2,1,0} copy(%dot.715)
  %mul.6191 = bf16[1,8,1024,14336]{3,2,1,0} multiply(%dot.713, %sharding_constraint.1453)
  %mul.6192 = bf16[1,8,1024,14336]{3,2,1,0} multiply(%mul.6191, %div.1030)
  %mul.6193 = bf16[1,8,1024,14336]{3,2,1,0} multiply(%sharding_constraint.1446, %mul.6191)
  %sub.301 = bf16[1,8,1024,14336]{3,2,1,0} subtract(%jit_silu_.0, %div.1030)
  %mul.6194 = bf16[1,8,1024,14336]{3,2,1,0} multiply(%div.1030, %sub.301)
  %mul.6195 = bf16[1,8,1024,14336]{3,2,1,0} multiply(%mul.6193, %mul.6194)
  %add_any.221 = bf16[1,8,1024,14336]{3,2,1,0} add(%mul.6192, %mul.6195)
  %sharding_constraint.1454 = bf16[1,8,1024,14336]{3,2,1,0} copy(%add_any.221)
  %dot.716 = bf16[1,8,1024,4096]{3,2,1,0} dot(%sharding_constraint.1454, %sharding_constraint.1444), lhs_batch_dims={0}, lhs_contracting_dims={3}, rhs_batch_dims={0}, rhs_contracting_dims={2}
  %add_any.222 = bf16[1,8,1024,4096]{3,2,1,0} add(%dot.714, %dot.716)
  %sharding_constraint.1455 = bf16[1,8,1024,4096]{3,2,1,0} copy(%add_any.222)
  %transpose.182 = bf16[8,1,1024,4096]{3,2,0,1} transpose(%sharding_constraint.1455), dimensions={1,0,2,3}
  %reshape.11960 = bf16[8,1,1,1024,4096]{4,3,2,1,0} reshape(%transpose.182)
  %all-to-all.110 = bf16[8,1,1,1024,4096]{4,3,2,1,0} all-to-all(%reshape.11960), channel_id=521, replica_groups=[1,8]<=[8], dimensions={0}
  %transpose.183 = bf16[1,8,1,1024,4096]{4,3,2,0,1} transpose(%all-to-all.110), dimensions={1,0,2,3,4}
  %reshape.11961 = bf16[1,8,1024,4096]{3,2,1,0} reshape(%transpose.183)
  %dot.717 = bf16[1,4096,4096]{2,1,0} dot(%dot_general.90, %reshape.11961), lhs_batch_dims={0}, lhs_contracting_dims={2,3}, rhs_batch_dims={0}, rhs_contracting_dims={1,2}
  %reshape.11963 = s32[1,4096,2,1]{3,2,1,0} reshape(%slice.524)
  %ge.11 = pred[1,4096,2,3]{3,2,1,0} compare(%concatenate.406, %broadcast.3629), direction=GE
  %le.112 = pred[1,4096,2,3]{3,2,1,0} compare(%concatenate.406, %le.67), direction=LE
  %and.163 = pred[1,4096,2,3]{3,2,1,0} and(%ge.11, %le.112)
  %reduce.650 = pred[1,4096,2]{2,1,0} reduce(%and.163, %constant.5574), dimensions={3}, to_apply=%region_601.15444
  %mul.6196 = bf16[1,8,1024,14336]{3,2,1,0} multiply(%mul.6189, %sharding_constraint.1453)
  %dot.718 = bf16[1,8,1024,4096]{3,2,1,0} dot(%mul.6196, %sharding_constraint.1450), lhs_batch_dims={0}, lhs_contracting_dims={3}, rhs_batch_dims={0}, rhs_contracting_dims={1}
  %sharding_constraint.1456 = bf16[1,8,1024,4096]{3,2,1,0} copy(%dot.718)
  %reshape.11970 = bf16[1,8,1,1024,4096]{4,3,2,1,0} reshape(%sharding_constraint.1456)
  %all-to-all.111 = bf16[1,8,1,1024,4096]{4,3,2,1,0} all-to-all(%reshape.11970), channel_id=522, replica_groups=[1,8]<=[8], dimensions={1}
  %transpose.184 = bf16[8,1,1,1024,4096]{4,3,2,0,1} transpose(%all-to-all.111), dimensions={1,0,2,3,4}
  %reshape.11971 = bf16[8,1,1024,4096]{3,2,1,0} reshape(%transpose.184)
  %dot.719 = bf16[1,4096,8,1024]{3,2,1,0} dot(%sharding_constraint.1447, %reshape.11971), lhs_batch_dims={0}, lhs_contracting_dims={2}, rhs_batch_dims={1}, rhs_contracting_dims={3}
  %sharding_constraint.1457 = bf16[1,4096,8,1024]{3,2,1,0} copy(%dot.719)
  %pad.11 = bf16[1,4096,8,1025]{3,2,1,0} pad(%sharding_constraint.1457, %constant.1190), padding=0_0x0_0x0_0x1_0
  %mul.6197 = bf16[1,4096,8,1025]{3,2,1,0} multiply(%pad.11, %convert_element_type.2382)
  %reduce.651 = bf16[1,4096,8]{2,1,0} reduce(%mul.6197, %constant.1190), dimensions={3}, to_apply=%region_602.15456
  %mul.6198 = bf16[1,4096,8]{2,1,0} multiply(%reduce.651, %convert_element_type.2379)
  %gather.55 = bf16[1,4096,2]{2,1,0} gather(%mul.6198, %subtract.142), offset_dims={}, collapsed_slice_dims={0,1,2}, start_index_map={0,1,2}, index_vector_dim=3, slice_sizes={1,1,1}
  %select_n.517 = bf16[1,4096,2]{2,1,0} select(%reduce.650, %gather.55, %broadcast.3427)
  %select_n.518 = bf16[1,4096,2]{2,1,0} select(%eq.2293, %select_n.517, %broadcast.3427)
  %convert_element_type.2384 = f32[1,4096,2]{2,1,0} convert(%select_n.518)
  %div.1032 = f32[1,4096,2]{2,1,0} divide(%convert_element_type.2384, %div.1028)
  %mul.6199 = f32[1,4096]{1,0} multiply(%reduce.647, %reduce.647)
  %div.1033 = f32[1,4096]{1,0} divide(%add.1847, %mul.6199)
  %mul.6200 = f32[1,4096,2]{2,1,0} broadcast(%div.1033), dimensions={0,1}
  %mul.6201 = f32[1,4096,2]{2,1,0} multiply(%convert_element_type.2384, %mul.6200)
  %mul.6202 = f32[1,4096,2]{2,1,0} multiply(%mul.6201, %exp.213)
  %reduce.652 = f32[1,4096]{1,0} reduce(%mul.6202, %constant.1360), dimensions={2}, to_apply=%region_603.15473
  %neg.235 = f32[1,4096]{1,0} negate(%reduce.652)
  %broadcast_in_dim.684 = f32[1,4096,2]{2,1,0} broadcast(%neg.235), dimensions={0,1}
  %add_any.223 = f32[1,4096,2]{2,1,0} add(%div.1032, %broadcast_in_dim.684)
  %mul.6203 = f32[1,4096,2]{2,1,0} multiply(%add_any.223, %exp.213)
  %convert_element_type.2387 = bf16[1,4096,2]{2,1,0} convert(%mul.6203)
  %scatter.228 = bf16[1,4096,8]{2,1,0} scatter(%broadcast.3379, %reshape.11963, %convert_element_type.2387), update_window_dims={}, inserted_window_dims={2}, scatter_dims_to_operand_dims={2}, input_batching_dims={0,1}, scatter_indices_batching_dims={0,1}, index_vector_dim=3, to_apply=%region_604.15483.clone
  %sharding_constraint.1458 = bf16[1,4096,8]{2,1,0} copy(%scatter.228)
  %dot.720 = bf16[1,4096,4096]{2,1,0} dot(%sharding_constraint.1458, %all-gather.296), lhs_contracting_dims={2}, rhs_contracting_dims={1}
  %add_any.224 = bf16[1,4096,4096]{2,1,0} add(%dot.717, %dot.720)
  %sharding_constraint.1459 = bf16[1,4096,4096]{2,1,0} copy(%add_any.224)
  %mul.6205 = bf16[1,4096,4096]{2,1,0} multiply(%sharding_constraint.1459, %mul.6173)
  %convert_element_type.2389 = f32[1,4096,4096]{2,1,0} convert(%mul.6205)
  %mul.6208 = f32[1,4096,4096]{2,1,0} multiply(%convert_element_type.2389, %mul.6163)
  %mul.6209 = f32[1,4096,4096]{2,1,0} multiply(%convert_element_type.2373, %convert_element_type.2389)
  %reduce.653 = f32[1,4096]{1,0} reduce(%mul.6209, %constant.1360), dimensions={2}, to_apply=%region_605.15499
  %reshape.11983 = f32[1,4096,1]{2,1,0} reshape(%reduce.653)
  %div.1034 = f32[1,4096,1]{2,1,0} divide(%rsqrt.152, %add.2055)
  %mul.6210 = f32[1,4096,1]{2,1,0} multiply(%div.1034, %broadcast.3620)
  %mul.6211 = f32[1,4096,1]{2,1,0} multiply(%reshape.11983, %mul.6210)
  %mul.6212 = f32[1,4096,1]{2,1,0} multiply(%mul.6211, %mul.4455)
  %mul.6213 = f32[1,4096]{1,0} reshape(%mul.6212)
  %mul.6214 = f32[1,4096,4096]{2,1,0} broadcast(%mul.6213), dimensions={0,1}
  %mul.6215 = f32[1,4096,4096]{2,1,0} multiply(%convert_element_type.2373, %mul.6214)
  %add_any.225 = f32[1,4096,4096]{2,1,0} add(%mul.6208, %mul.6215)
  %convert_element_type.2390 = bf16[1,4096,4096]{2,1,0} convert(%add_any.225)
  %add_any.226 = bf16[1,4096,4096]{2,1,0} add(%sharding_constraint.1425, %convert_element_type.2390)
  %get-tuple-element.883 = f32[1,32,4096,1]{3,2,1,0} get-tuple-element(%te_fused_attn_forward_ffi.172), index=1
  %get-tuple-element.884 = u32[2,4]{1,0} get-tuple-element(%te_fused_attn_forward_ffi.172), index=2
  %sharding_constraint.1460 = u32[2,4]{1,0} copy(%get-tuple-element.884)
  %sharding_constraint.1461 = bf16[1,4096,4096]{2,1,0} copy(%add_any.226)
  %dot.721 = bf16[1,4096,32,128]{3,2,1,0} dot(%sharding_constraint.1461, %all-gather.295), lhs_contracting_dims={2}, rhs_contracting_dims={2}
  %sharding_constraint.1462 = bf16[1,4096,32,128]{3,2,1,0} copy(%dot.721)
  %te_fused_attn_backward_ffi.55 = (bf16[1,4096,32,128]{3,2,1,0}, bf16[1,4096,8,128]{3,2,1,0}, bf16[1,4096,8,128]{3,2,1,0}, bf16[0]{0}, u8[134742064]{0}) custom-call(%sharding_constraint.1429, %sharding_constraint.1432, %sharding_constraint.1433, %constant.1403, %get-tuple-element.883, /*index=5*/%sharding_constraint.1460, %get-tuple-element.870, %sharding_constraint.1462, %concatenate.404, %concatenate.405, /*index=10*/%constant.1416, %constant.1416, %constant.1416, %constant.1416, %constant.1416, /*index=15*/%constant.1416), custom_call_target="te_fused_attn_backward_ffi", operand_layout_constraints={bf16[1,4096,32,128]{3,2,1,0}, bf16[1,4096,8,128]{3,2,1,0}, bf16[1,4096,8,128]{3,2,1,0}, bf16[0]{0}, f32[1,32,4096,1]{3,2,1,0}, u32[2,4]{1,0}, bf16[1,4096,32,128]{3,2,1,0}, bf16[1,4096,32,128]{3,2,1,0}, s32[2]{0}, s32[2]{0}, f32[0]{0}, f32[0]{0}, f32[0]{0}, f32[0]{0}, f32[0]{0}, f32[0]{0}}, api_version=API_VERSION_TYPED_FFI, backend_config={attn_heads = 32 : i64, bias_batch = 0 : i64, bias_heads = 0 : i64, bias_type = 0 : i64, deterministic = false, dropout_probability = 0.000000e+00 : f64, input_batch = 1 : i64, is_training = true, kv_max_seqlen = 4096 : i64, mask_type = 3 : i64, max_segments_per_seq = 1 : i64, num_gqa_groups = 8 : i64, q_max_seqlen = 4096 : i64, qk_head_dim = 128 : i64, qkv_layout = 9 : i64, scaling_factor = 1.000000e+00 : f64, v_head_dim = 128 : i64, window_size_left = -1 : i64, window_size_right = -1 : i64}
  %get-tuple-element.885 = bf16[1,4096,8,128]{3,2,1,0} get-tuple-element(%te_fused_attn_backward_ffi.55), index=2
  %sharding_constraint.1463 = bf16[1,4096,8,128]{3,2,1,0} copy(%get-tuple-element.885)
  %dot.722 = bf16[1,4096,4096]{2,1,0} dot(%sharding_constraint.1463, %all-gather.294), lhs_contracting_dims={2,3}, rhs_contracting_dims={1,2}
  %get-tuple-element.886 = bf16[1,4096,8,128]{3,2,1,0} get-tuple-element(%te_fused_attn_backward_ffi.55), index=1
  %sharding_constraint.1464 = bf16[1,4096,8,128]{3,2,1,0} copy(%get-tuple-element.886)
  %slice.526 = bf16[1,4096,8,64]{3,2,1,0} slice(%sharding_constraint.1464), slice={[0:1], [0:4096], [0:8], [64:128]}
  %mul.6218 = bf16[1,4096,8,64]{3,2,1,0} multiply(%slice.526, %mul.6154)
  %slice.527 = bf16[1,4096,8,64]{3,2,1,0} slice(%sharding_constraint.1464), slice={[0:1], [0:4096], [0:8], [0:64]}
  %mul.6222 = bf16[1,4096,8,64]{3,2,1,0} multiply(%slice.527, %mul.6151)
  %add_any.227 = bf16[1,4096,8,64]{3,2,1,0} add(%mul.6218, %mul.6222)
  %mul.6225 = bf16[1,4096,8,64]{3,2,1,0} multiply(%slice.526, %mul.6151)
  %neg.236 = bf16[1,4096,8,64]{3,2,1,0} negate(%slice.527)
  %mul.6231 = bf16[1,4096,8,64]{3,2,1,0} multiply(%neg.236, %mul.6154)
  %add_any.228 = bf16[1,4096,8,64]{3,2,1,0} add(%mul.6225, %mul.6231)
  %concatenate.413 = bf16[1,4096,8,128]{3,2,1,0} concatenate(%add_any.227, %add_any.228), dimensions={3}
  %dot.723 = bf16[1,4096,4096]{2,1,0} dot(%concatenate.413, %all-gather.293), lhs_contracting_dims={2,3}, rhs_contracting_dims={1,2}
  %add_any.229 = bf16[1,4096,4096]{2,1,0} add(%dot.722, %dot.723)
  %sharding_constraint.1465 = bf16[1,4096,4096]{2,1,0} copy(%add_any.229)
  %get-tuple-element.887 = bf16[1,4096,32,128]{3,2,1,0} get-tuple-element(%te_fused_attn_backward_ffi.55), index=0
  %sharding_constraint.1466 = bf16[1,4096,32,128]{3,2,1,0} copy(%get-tuple-element.887)
  %slice.528 = bf16[1,4096,32,64]{3,2,1,0} slice(%sharding_constraint.1466), slice={[0:1], [0:4096], [0:32], [64:128]}
  %mul.6234 = bf16[1,4096,32,64]{3,2,1,0} multiply(%slice.528, %mul.6123)
  %slice.529 = bf16[1,4096,32,64]{3,2,1,0} slice(%sharding_constraint.1466), slice={[0:1], [0:4096], [0:32], [0:64]}
  %mul.6238 = bf16[1,4096,32,64]{3,2,1,0} multiply(%slice.529, %mul.6120)
  %add_any.230 = bf16[1,4096,32,64]{3,2,1,0} add(%mul.6234, %mul.6238)
  %mul.6242 = bf16[1,4096,32,64]{3,2,1,0} multiply(%slice.528, %mul.6120)
  %neg.237 = bf16[1,4096,32,64]{3,2,1,0} negate(%slice.529)
  %mul.6245 = bf16[1,4096,32,64]{3,2,1,0} multiply(%neg.237, %mul.6123)
  %add_any.231 = bf16[1,4096,32,64]{3,2,1,0} add(%mul.6242, %mul.6245)
  %concatenate.414 = bf16[1,4096,32,128]{3,2,1,0} concatenate(%add_any.230, %add_any.231), dimensions={3}
  %dot.724 = bf16[1,4096,4096]{2,1,0} dot(%concatenate.414, %all-gather.292), lhs_contracting_dims={2,3}, rhs_contracting_dims={1,2}
  %sharding_constraint.1467 = bf16[1,4096,4096]{2,1,0} copy(%dot.724)
  %add_any.232 = bf16[1,4096,4096]{2,1,0} add(%sharding_constraint.1465, %sharding_constraint.1467)
  %sharding_constraint.1468 = bf16[1,4096,4096]{2,1,0} copy(%add_any.232)
  %mul.6247 = bf16[1,4096,4096]{2,1,0} multiply(%sharding_constraint.1468, %mul.6116)
  %convert_element_type.2391 = f32[1,4096,4096]{2,1,0} convert(%mul.6247)
  %mul.6258 = f32[1,4096,4096]{2,1,0} multiply(%convert_element_type.2391, %mul.6114)
  %mul.6259 = f32[1,4096,4096]{2,1,0} multiply(%convert_element_type.2361, %convert_element_type.2391)
  %reduce.654 = f32[1,4096]{1,0} reduce(%mul.6259, %constant.1360), dimensions={2}, to_apply=%region_606.15578
  %reshape.11990 = f32[1,4096,1]{2,1,0} reshape(%reduce.654)
  %div.1035 = f32[1,4096,1]{2,1,0} divide(%rsqrt.151, %add.2050)
  %mul.6260 = f32[1,4096,1]{2,1,0} multiply(%div.1035, %broadcast.3620)
  %mul.6262 = f32[1,4096,1]{2,1,0} multiply(%reshape.11990, %mul.6260)
  %mul.6263 = f32[1,4096,1]{2,1,0} multiply(%mul.6262, %mul.4455)
  %mul.6264 = f32[1,4096]{1,0} reshape(%mul.6263)
  %mul.6265 = f32[1,4096,4096]{2,1,0} broadcast(%mul.6264), dimensions={0,1}
  %mul.6266 = f32[1,4096,4096]{2,1,0} multiply(%convert_element_type.2361, %mul.6265)
  %add_any.233 = f32[1,4096,4096]{2,1,0} add(%mul.6258, %mul.6266)
  %convert_element_type.2392 = bf16[1,4096,4096]{2,1,0} convert(%add_any.233)
  %add_any.234 = bf16[1,4096,4096]{2,1,0} add(%add_any.226, %convert_element_type.2392)
  %sharding_constraint.1469 = bf16[1,4096,4096]{2,1,0} copy(%add_any.234)
  %tuple.271 = (bf16[512,8]{1,0}, bf16[1,4096,14336]{2,1,0}, bf16[1,4096,14336]{2,1,0}, bf16[1,14336,4096]{2,1,0}, bf16[4096]{0}, /*index=5*/bf16[4096]{0}, bf16[512,8,128]{2,1,0}, bf16[32,128,512]{2,1,0}, bf16[512,32,128]{2,1,0}, bf16[512,8,128]{2,1,0}, /*index=10*/bf16[1,4096,4096]{2,1,0}, s32[1,4096]{1,0}, s32[1,4096]{1,0}, bf16[1,4096,4096]{2,1,0}) tuple(%param.203, %param.204, %param.205, %param.206, %param.202, /*index=5*/%param.197, %param.199, %param.201, %param.198, %param.200, /*index=10*/%sharding_constraint.618, %param.10, %param.7, %sharding_constraint.1469)
  %remat2.23 = (bf16[512,8]{1,0}, bf16[1,4096,14336]{2,1,0}, bf16[1,4096,14336]{2,1,0}, bf16[1,14336,4096]{2,1,0}, bf16[4096]{0}, /*index=5*/bf16[4096]{0}, bf16[512,8,128]{2,1,0}, bf16[32,128,512]{2,1,0}, bf16[512,32,128]{2,1,0}, bf16[512,8,128]{2,1,0}, /*index=10*/bf16[1,4096,4096]{2,1,0}, s32[1,4096]{1,0}, s32[1,4096]{1,0}, bf16[1,4096,4096]{2,1,0}) opt-barrier(%tuple.271)
  %get-tuple-element.888 = bf16[1,4096,4096]{2,1,0} get-tuple-element(%remat2.23), index=13
  %sharding_constraint.1470 = bf16[1,4096,4096]{2,1,0} copy(%get-tuple-element.888)
  %iota.2567 = s32[1,4096,2,1]{3,2,1,0} iota(), iota_dimension=1
  %get-tuple-element.889 = bf16[1,4096,4096]{2,1,0} get-tuple-element(%remat2.23), index=10
  %sharding_constraint.1471 = bf16[1,4096,4096]{2,1,0} copy(%get-tuple-element.889)
  %convert_element_type.2393 = f32[1,4096,4096]{2,1,0} convert(%sharding_constraint.1471)
  %square.92 = f32[1,4096,4096]{2,1,0} multiply(%convert_element_type.2393, %convert_element_type.2393)
  %reduce.655 = f32[1,4096]{1,0} reduce(%square.92, %constant.1360), dimensions={2}, to_apply=%region_607.15620
  %div.1036 = f32[1,4096]{1,0} multiply(%reduce.655, %broadcast.3412)
  %add.2069 = f32[1,4096]{1,0} add(%div.1036, %broadcast.3413)
  %add.2070 = f32[1,4096,1]{2,1,0} reshape(%add.2069)
  %rsqrt.153 = f32[1,4096,1]{2,1,0} rsqrt(%add.2070)
  %mul.6267 = f32[1,4096]{1,0} reshape(%rsqrt.153)
  %mul.6268 = f32[1,4096,4096]{2,1,0} broadcast(%mul.6267), dimensions={0,1}
  %mul.6269 = f32[1,4096,4096]{2,1,0} multiply(%convert_element_type.2393, %mul.6268)
  %convert_element_type.2394 = bf16[1,4096,4096]{2,1,0} convert(%mul.6269)
  %get-tuple-element.890 = bf16[4096]{0} get-tuple-element(%remat2.23), index=5
  %mul.6270 = bf16[1,4096,4096]{2,1,0} broadcast(%get-tuple-element.890), dimensions={2}
  %mul.6271 = bf16[1,4096,4096]{2,1,0} multiply(%convert_element_type.2394, %mul.6270)
  %sharding_constraint.1472 = bf16[1,4096,4096]{2,1,0} copy(%mul.6271)
  %sharding_constraint.1474 = bf16[1,4096,4096]{2,1,0} copy(%sharding_constraint.1472)
  %get-tuple-element.891 = bf16[512,32,128]{2,1,0} get-tuple-element(%remat2.23), index=8
  %all-gather.298 = bf16[4096,32,128]{2,1,0} all-gather(%get-tuple-element.891), channel_id=525, replica_groups=[1,8]<=[8], dimensions={0}, use_global_device_ids=true
  %dot.725 = bf16[1,4096,32,128]{3,2,1,0} dot(%sharding_constraint.1474, %all-gather.298), lhs_contracting_dims={2}, rhs_contracting_dims={0}
  %slice.530 = bf16[1,4096,32,64]{3,2,1,0} slice(%dot.725), slice={[0:1], [0:4096], [0:32], [0:64]}
  %get-tuple-element.892 = s32[1,4096]{1,0} get-tuple-element(%remat2.23), index=12
  %convert_element_type.2395 = f32[1,4096]{1,0} convert(%get-tuple-element.892)
  %div.1037 = f32[1,4096,1,64]{3,2,1,0} broadcast(%convert_element_type.2395), dimensions={0,1}
  %div.1040 = f32[1,4096,1,64]{3,2,1,0} divide(%div.1037, %div.402)
  %cos.89 = f32[1,4096,1,64]{3,2,1,0} cosine(%div.1040)
  %convert_element_type.2397 = bf16[1,4096,1,64]{3,2,1,0} convert(%cos.89)
  %mul.6273 = bf16[1,4096,64]{2,1,0} reshape(%convert_element_type.2397)
  %mul.6274 = bf16[1,4096,32,64]{3,2,1,0} broadcast(%mul.6273), dimensions={0,1,3}
  %mul.6275 = bf16[1,4096,32,64]{3,2,1,0} multiply(%slice.530, %mul.6274)
  %slice.531 = bf16[1,4096,32,64]{3,2,1,0} slice(%dot.725), slice={[0:1], [0:4096], [0:32], [64:128]}
  %sin.88 = f32[1,4096,1,64]{3,2,1,0} sine(%div.1040)
  %convert_element_type.2398 = bf16[1,4096,1,64]{3,2,1,0} convert(%sin.88)
  %mul.6276 = bf16[1,4096,64]{2,1,0} reshape(%convert_element_type.2398)
  %mul.6277 = bf16[1,4096,32,64]{3,2,1,0} broadcast(%mul.6276), dimensions={0,1,3}
  %mul.6278 = bf16[1,4096,32,64]{3,2,1,0} multiply(%slice.531, %mul.6277)
  %sub.302 = bf16[1,4096,32,64]{3,2,1,0} subtract(%mul.6275, %mul.6278)
  %mul.6285 = bf16[1,4096,32,64]{3,2,1,0} multiply(%slice.531, %mul.6274)
  %mul.6288 = bf16[1,4096,32,64]{3,2,1,0} multiply(%slice.530, %mul.6277)
  %add.2071 = bf16[1,4096,32,64]{3,2,1,0} add(%mul.6285, %mul.6288)
  %concatenate.415 = bf16[1,4096,32,128]{3,2,1,0} concatenate(%sub.302, %add.2071), dimensions={3}
  %sharding_constraint.1476 = bf16[1,4096,32,128]{3,2,1,0} copy(%concatenate.415)
  %get-tuple-element.893 = bf16[512,8,128]{2,1,0} get-tuple-element(%remat2.23), index=6
  %all-gather.299 = bf16[4096,8,128]{2,1,0} all-gather(%get-tuple-element.893), channel_id=526, replica_groups=[1,8]<=[8], dimensions={0}, use_global_device_ids=true
  %dot.726 = bf16[1,4096,8,128]{3,2,1,0} dot(%sharding_constraint.1474, %all-gather.299), lhs_contracting_dims={2}, rhs_contracting_dims={0}
  %slice.532 = bf16[1,4096,8,64]{3,2,1,0} slice(%dot.726), slice={[0:1], [0:4096], [0:8], [0:64]}
  %mul.6291 = bf16[1,4096,8,64]{3,2,1,0} broadcast(%mul.6273), dimensions={0,1,3}
  %mul.6293 = bf16[1,4096,8,64]{3,2,1,0} multiply(%slice.532, %mul.6291)
  %slice.533 = bf16[1,4096,8,64]{3,2,1,0} slice(%dot.726), slice={[0:1], [0:4096], [0:8], [64:128]}
  %mul.6295 = bf16[1,4096,8,64]{3,2,1,0} broadcast(%mul.6276), dimensions={0,1,3}
  %mul.6296 = bf16[1,4096,8,64]{3,2,1,0} multiply(%slice.533, %mul.6295)
  %sub.303 = bf16[1,4096,8,64]{3,2,1,0} subtract(%mul.6293, %mul.6296)
  %mul.6299 = bf16[1,4096,8,64]{3,2,1,0} multiply(%slice.533, %mul.6291)
  %mul.6305 = bf16[1,4096,8,64]{3,2,1,0} multiply(%slice.532, %mul.6295)
  %add.2072 = bf16[1,4096,8,64]{3,2,1,0} add(%mul.6299, %mul.6305)
  %concatenate.416 = bf16[1,4096,8,128]{3,2,1,0} concatenate(%sub.303, %add.2072), dimensions={3}
  %sharding_constraint.1478 = bf16[1,4096,8,128]{3,2,1,0} copy(%concatenate.416)
  %get-tuple-element.894 = bf16[512,8,128]{2,1,0} get-tuple-element(%remat2.23), index=9
  %all-gather.300 = bf16[4096,8,128]{2,1,0} all-gather(%get-tuple-element.894), channel_id=527, replica_groups=[1,8]<=[8], dimensions={0}, use_global_device_ids=true
  %dot.727 = bf16[1,4096,8,128]{3,2,1,0} dot(%sharding_constraint.1474, %all-gather.300), lhs_contracting_dims={2}, rhs_contracting_dims={0}
  %sharding_constraint.1479 = bf16[1,4096,8,128]{3,2,1,0} copy(%dot.727)
  %get-tuple-element.895 = s32[1,4096]{1,0} get-tuple-element(%remat2.23), index=11
  %eq.2300 = s32[1,4096,4096]{2,1,0} broadcast(%get-tuple-element.895), dimensions={0,1}
  %eq.2301 = s32[1,4096,4096]{2,1,0} broadcast(%get-tuple-element.895), dimensions={0,2}
  %eq.2302 = pred[1,4096,4096]{2,1,0} compare(%eq.2300, %eq.2301), direction=EQ
  %and.165 = pred[1,4096,4096]{2,1,0} and(%eq.2302, %and.64)
  %select_n.521 = f32[1,4096,4096]{2,1,0} select(%and.165, %broadcast_in_dim.516, %broadcast_in_dim.517)
  %ne.110 = pred[1,4096,4096]{2,1,0} compare(%select_n.521, %broadcast_in_dim.516), direction=NE
  %not.108 = pred[1,4096,4096]{2,1,0} not(%ne.110)
  %convert_element_type.2405 = s32[1,4096,4096]{2,1,0} convert(%not.108)
  %reduce.656 = s32[1,4096]{1,0} reduce(%convert_element_type.2405, %constant.1181), dimensions={1}, to_apply=%region_608.15716
  %reduce_sum.5716 = s32[1,1,1,4096]{3,2,1,0} reshape(%reduce.656)
  %slice.534 = s32[1,1,1,1]{3,2,1,0} slice(%reduce_sum.5716), slice={[0:1], [0:1], [0:1], [0:1]}
  %squeeze.44 = s32[1,1]{1,0} reshape(%slice.534)
  %reshape.12009 = s32[1]{0} reshape(%squeeze.44)
  %lt.157 = pred[1]{0} compare(%reshape.12009, %constant.1418), direction=LT
  %select_n.522 = s32[1]{0} select(%lt.157, %broadcast_in_dim.518, %reshape.12009)
  %concatenate.417 = s32[2]{0} concatenate(%constant.1418, %select_n.522), dimensions={0}
  %reduce.657 = s32[1,4096]{1,0} reduce(%convert_element_type.2405, %constant.1181), dimensions={2}, to_apply=%region_609.15725
  %reduce_sum.5717 = s32[1,1,1,4096]{3,2,1,0} reshape(%reduce.657)
  %reduce.658 = s32[1,1]{1,0} reduce(%reduce_sum.5717, %constant.1415), dimensions={3,2}, to_apply=%region_610.15731
  %reshape.12010 = s32[1]{0} reshape(%reduce.658)
  %lt.158 = pred[1]{0} compare(%reshape.12010, %constant.1418), direction=LT
  %select_n.523 = s32[1]{0} select(%lt.158, %broadcast_in_dim.518, %reshape.12010)
  %concatenate.418 = s32[2]{0} concatenate(%constant.1418, %select_n.523), dimensions={0}
  %te_fused_attn_forward_ffi.176 = (bf16[1,4096,32,128]{3,2,1,0}, f32[1,32,4096,1]{3,2,1,0}, u32[2,4]{1,0}, u8[48]{0}) custom-call(%sharding_constraint.1476, %sharding_constraint.1478, %sharding_constraint.1479, %constant.1403, %dynamic-slice.38, /*index=5*/%concatenate.417, %concatenate.418, %constant.1416, %constant.1416, %constant.1416, /*index=10*/%constant.1416, %constant.1416, %constant.1416), custom_call_target="te_fused_attn_forward_ffi", operand_layout_constraints={bf16[1,4096,32,128]{3,2,1,0}, bf16[1,4096,8,128]{3,2,1,0}, bf16[1,4096,8,128]{3,2,1,0}, bf16[0]{0}, u32[2]{0}, s32[2]{0}, s32[2]{0}, f32[0]{0}, f32[0]{0}, f32[0]{0}, f32[0]{0}, f32[0]{0}, f32[0]{0}}, api_version=API_VERSION_TYPED_FFI, backend_config={attn_heads = 32 : i64, bias_batch = 0 : i64, bias_heads = 0 : i64, bias_type = 0 : i64, deterministic = false, dropout_probability = 0.000000e+00 : f64, input_batch = 1 : i64, is_training = true, kv_max_seqlen = 4096 : i64, mask_type = 3 : i64, max_segments_per_seq = 1 : i64, num_gqa_groups = 8 : i64, q_max_seqlen = 4096 : i64, qk_head_dim = 128 : i64, qkv_layout = 9 : i64, scaling_factor = 1.000000e+00 : f64, v_head_dim = 128 : i64, window_size_left = -1 : i64, window_size_right = -1 : i64}
  %get-tuple-element.896 = bf16[1,4096,32,128]{3,2,1,0} get-tuple-element(%te_fused_attn_forward_ffi.176), index=0
  %sharding_constraint.1480 = bf16[1,4096,32,128]{3,2,1,0} copy(%get-tuple-element.896)
  %get-tuple-element.897 = bf16[32,128,512]{2,1,0} get-tuple-element(%remat2.23), index=7
  %all-gather.301 = bf16[32,128,4096]{2,1,0} all-gather(%get-tuple-element.897), channel_id=528, replica_groups=[1,8]<=[8], dimensions={2}, use_global_device_ids=true
  %dot.728 = bf16[1,4096,4096]{2,1,0} dot(%sharding_constraint.1480, %all-gather.301), lhs_contracting_dims={2,3}, rhs_contracting_dims={0,1}
  %sharding_constraint.1481 = bf16[1,4096,4096]{2,1,0} copy(%dot.728)
  %add.2073 = bf16[1,4096,4096]{2,1,0} add(%sharding_constraint.1471, %sharding_constraint.1481)
  %convert_element_type.2408 = f32[1,4096,4096]{2,1,0} convert(%add.2073)
  %square.93 = f32[1,4096,4096]{2,1,0} multiply(%convert_element_type.2408, %convert_element_type.2408)
  %reduce.659 = f32[1,4096]{1,0} reduce(%square.93, %constant.1360), dimensions={2}, to_apply=%region_611.15746
  %div.1045 = f32[1,4096]{1,0} multiply(%reduce.659, %broadcast.3412)
  %add.2074 = f32[1,4096]{1,0} add(%div.1045, %broadcast.3413)
  %add.2075 = f32[1,4096,1]{2,1,0} reshape(%add.2074)
  %rsqrt.154 = f32[1,4096,1]{2,1,0} rsqrt(%add.2075)
  %mul.6309 = f32[1,4096]{1,0} reshape(%rsqrt.154)
  %mul.6316 = f32[1,4096,4096]{2,1,0} broadcast(%mul.6309), dimensions={0,1}
  %mul.6317 = f32[1,4096,4096]{2,1,0} multiply(%convert_element_type.2408, %mul.6316)
  %convert_element_type.2409 = bf16[1,4096,4096]{2,1,0} convert(%mul.6317)
  %get-tuple-element.898 = bf16[4096]{0} get-tuple-element(%remat2.23), index=4
  %mul.6318 = bf16[1,4096,4096]{2,1,0} broadcast(%get-tuple-element.898), dimensions={2}
  %mul.6319 = bf16[1,4096,4096]{2,1,0} multiply(%convert_element_type.2409, %mul.6318)
  %sharding_constraint.1482 = bf16[1,4096,4096]{2,1,0} copy(%mul.6319)
  %get-tuple-element.899 = bf16[512,8]{1,0} get-tuple-element(%remat2.23), index=0
  %all-gather.302 = bf16[4096,8]{1,0} all-gather(%get-tuple-element.899), channel_id=529, replica_groups=[1,8]<=[8], dimensions={0}, use_global_device_ids=true
  %dot.729 = bf16[1,4096,8]{2,1,0} dot(%sharding_constraint.1482, %all-gather.302), lhs_contracting_dims={2}, rhs_contracting_dims={0}
  %sharding_constraint.1483 = bf16[1,4096,8]{2,1,0} copy(%dot.729)
  %top_k.132 = bf16[4096,8]{1,0} reshape(%sharding_constraint.1483)
  %top_k.133 = (bf16[4096,2]{1,0}, s32[4096,2]{1,0}) custom-call(%top_k.132), custom_call_target="TopK", called_computations={%compare_greater_than.44.15767.clone}
  %get-tuple-element.900 = bf16[4096,2]{1,0} get-tuple-element(%top_k.133), index=0
  %get-tuple-element.901 = s32[4096,2]{1,0} get-tuple-element(%top_k.133), index=1
  %add.2076 = s32[4096,2]{1,0} add(%get-tuple-element.901, %broadcast.3418)
  %sort.108 = (bf16[4096,2]{1,0}, s32[4096,2]{1,0}) sort(%get-tuple-element.900, %add.2076), dimensions={1}, is_stable=true, to_apply=%compare-value-and-index.44
  %get-tuple-element.903 = s32[4096,2]{1,0} get-tuple-element(%sort.108), index=1
  %slice.536 = s32[4096,2]{1,0} slice(%get-tuple-element.903), slice={[0:4096], [0:2]}
  %top_k.134 = s32[1,4096,2]{2,1,0} reshape(%slice.536)
  %lt.159 = pred[1,4096,2]{2,1,0} compare(%top_k.134, %broadcast.3419), direction=LT
  %add.2077 = s32[1,4096,2]{2,1,0} add(%top_k.134, %broadcast.3420)
  %select_n.524 = s32[1,4096,2]{2,1,0} select(%lt.159, %add.2077, %top_k.134)
  %broadcast_in_dim.689 = s32[1,4096,2,1]{3,2,1,0} reshape(%select_n.524)
  %concatenate.419 = s32[1,4096,2,3]{3,2,1,0} concatenate(%add.1356, %iota.2567, %broadcast_in_dim.689), dimensions={3}
  %subtract.146 = s32[1,4096,2,3]{3,2,1,0} subtract(%concatenate.419, %broadcast.3428)
  %scatter.229 = u32[1,4096,8]{2,1,0} scatter(%dynamic-slice.43, %subtract.146, %add.1401), update_window_dims={}, inserted_window_dims={0,1,2}, scatter_dims_to_operand_dims={0,1,2}, index_vector_dim=3, to_apply=%region_612.15803.clone
  %gather.56 = u32[1,4096,2]{2,1,0} gather(%scatter.229, %subtract.146), offset_dims={}, collapsed_slice_dims={0,1,2}, start_index_map={0,1,2}, index_vector_dim=3, slice_sizes={1,1,1}
  %eq.2303 = pred[1,4096,2]{2,1,0} compare(%add.1401, %gather.56), direction=EQ
  %get-tuple-element.902 = bf16[4096,2]{1,0} get-tuple-element(%sort.108), index=0
  %slice.535 = bf16[4096,2]{1,0} slice(%get-tuple-element.902), slice={[0:4096], [0:2]}
  %convert_element_type.2410 = f32[4096,2]{1,0} convert(%slice.535)
  %convert_element_type.2411 = f32[1,4096,2]{2,1,0} reshape(%convert_element_type.2410)
  %reduce.660 = f32[4096]{0} reduce(%convert_element_type.2410, %constant.1450), dimensions={1}, to_apply=%region_613.15812
  %sub.304 = f32[1,4096]{1,0} reshape(%reduce.660)
  %sub.305 = f32[1,4096,2]{2,1,0} broadcast(%sub.304), dimensions={0,1}
  %sub.306 = f32[1,4096,2]{2,1,0} subtract(%convert_element_type.2411, %sub.305)
  %exp.215 = f32[1,4096,2]{2,1,0} exponential(%sub.306)
  %reduce.661 = f32[1,4096]{1,0} reduce(%exp.215, %constant.1360), dimensions={2}, to_apply=%region_614.15821
  %div.1046 = f32[1,4096,2]{2,1,0} broadcast(%reduce.661), dimensions={0,1}
  %div.1047 = f32[1,4096,2]{2,1,0} divide(%exp.215, %div.1046)
  %convert_element_type.2412 = bf16[1,4096,2]{2,1,0} convert(%div.1047)
  %select_n.525 = bf16[1,4096,2]{2,1,0} select(%eq.2303, %convert_element_type.2412, %broadcast.3427)
  %scatter.230 = bf16[1,4096,8]{2,1,0} scatter(%broadcast.3379, %subtract.146, %select_n.525), update_window_dims={}, inserted_window_dims={0,1,2}, scatter_dims_to_operand_dims={0,1,2}, index_vector_dim=3, to_apply=%region_615.15830.clone
  %eq.2305 = s32[1,4096,2,8]{3,2,1,0} broadcast(%top_k.134), dimensions={0,1,2}
  %iota.2578 = s32[1,4096,2,8]{3,2,1,0} iota(), iota_dimension=3
  %eq.2306 = pred[1,4096,2,8]{3,2,1,0} compare(%eq.2305, %iota.2578), direction=EQ
  %convert_element_type.2413 = s32[1,4096,2,8]{3,2,1,0} convert(%eq.2306)
  %reshape.12046 = s32[1,8192,8]{2,1,0} reshape(%convert_element_type.2413)
  %sharding_constraint.1484 = s32[1,8192,8]{2,1,0} copy(%reshape.12046)
  %reduce-window.44 = s32[1,8192,8]{2,1,0} reduce-window(%sharding_constraint.1484, %constant.1181), window={size=1x8192x1 pad=0_0x8191_0x0_0}, to_apply=%region_616.15842
  %reshape.12048 = s32[1,4096,2,8]{3,2,1,0} reshape(%reduce-window.44)
  %sharding_constraint.1485 = s32[1,4096,2,8]{3,2,1,0} copy(%reshape.12048)
  %le.114 = pred[1,4096,2,8]{3,2,1,0} compare(%sharding_constraint.1485, %broadcast.3429), direction=LE
  %mul.6320 = s32[1,4096,2,8]{3,2,1,0} select(%le.114, %convert_element_type.2413, %broadcast.3430)
  %reduce.662 = s32[1,4096,8]{2,1,0} reduce(%mul.6320, %constant.1181), dimensions={2}, to_apply=%region_617.15851
  %convert_element_type.2415 = bf16[1,4096,8]{2,1,0} convert(%reduce.662)
  %mul.6321 = bf16[1,4096,8]{2,1,0} multiply(%scatter.230, %convert_element_type.2415)
  %mul.6322 = bf16[1,4096,8,1025]{3,2,1,0} broadcast(%mul.6321), dimensions={0,1,2}
  %mul.6323 = s32[1,8192,8]{2,1,0} multiply(%sharding_constraint.1484, %reduce-window.44)
  %reshape.12049 = s32[1,4096,2,8]{3,2,1,0} reshape(%mul.6323)
  %reduce.663 = s32[1,4096,8]{2,1,0} reduce(%reshape.12049, %constant.1181), dimensions={2}, to_apply=%region_618.15861
  %mul.6324 = s32[1,4096,8]{2,1,0} multiply(%reduce.663, %reduce.662)
  %eq.2307 = s32[1,4096,8,1025]{3,2,1,0} broadcast(%mul.6324), dimensions={0,1,2}
  %iota.2579 = s32[1,4096,8,1025]{3,2,1,0} iota(), iota_dimension=3
  %eq.2308 = pred[1,4096,8,1025]{3,2,1,0} compare(%eq.2307, %iota.2579), direction=EQ
  %convert_element_type.2416 = s32[1,4096,8,1025]{3,2,1,0} convert(%eq.2308)
  %convert_element_type.2417 = bf16[1,4096,8,1025]{3,2,1,0} convert(%convert_element_type.2416)
  %mul.6326 = bf16[1,4096,8,1025]{3,2,1,0} multiply(%mul.6322, %convert_element_type.2417)
  %slice.537 = bf16[1,4096,8,1024]{3,2,1,0} slice(%mul.6326), slice={[0:1], [0:4096], [0:8], [1:1025]}
  %convert_element_type.2418 = pred[1,4096,8,1024]{3,2,1,0} compare(%slice.537, %broadcast.3431), direction=NE
  %sharding_constraint.1488 = pred[1,4096,8,1024]{3,2,1,0} copy(%convert_element_type.2418)
  %dot_general.92 = bf16[1,4096,8,1024]{3,2,1,0} convert(%sharding_constraint.1488)
  %dot.730 = bf16[1,8,1024,4096]{3,2,1,0} dot(%dot_general.92, %sharding_constraint.1482), lhs_batch_dims={0}, lhs_contracting_dims={1}, rhs_batch_dims={0}, rhs_contracting_dims={1}
  %reshape.12053 = bf16[1,8,1,1024,4096]{4,3,2,1,0} reshape(%dot.730)
  %all-to-all.112 = bf16[1,8,1,1024,4096]{4,3,2,1,0} all-to-all(%reshape.12053), channel_id=533, replica_groups=[1,8]<=[8], dimensions={1}
  %transpose.185 = bf16[8,1,1,1024,4096]{4,3,2,0,1} transpose(%all-to-all.112), dimensions={1,0,2,3,4}
  %reshape.12054 = bf16[8,1,1024,4096]{3,2,1,0} reshape(%transpose.185)
  %transpose.186 = bf16[1,8,1024,4096]{3,2,0,1} transpose(%reshape.12054), dimensions={1,0,2,3}
  %sharding_constraint.1489 = bf16[1,8,1024,4096]{3,2,0,1} copy(%transpose.186)
  %get-tuple-element.906 = bf16[1,4096,14336]{2,1,0} get-tuple-element(%remat2.23), index=1
  %sharding_constraint.1490 = bf16[1,4096,14336]{2,1,0} copy(%get-tuple-element.906)
  %dot.731 = bf16[1,8,1024,14336]{3,2,1,0} dot(%sharding_constraint.1489, %sharding_constraint.1490), lhs_batch_dims={0}, lhs_contracting_dims={3}, rhs_batch_dims={0}, rhs_contracting_dims={1}
  %sharding_constraint.1493 = bf16[1,8,1024,14336]{3,2,1,0} copy(%dot.731)
  %neg.238 = bf16[1,8,1024,14336]{3,2,1,0} negate(%sharding_constraint.1493)
  %exp.216 = bf16[1,8,1024,14336]{3,2,1,0} exponential(%neg.238)
  %add.2082 = bf16[1,8,1024,14336]{3,2,1,0} add(%exp.216, %jit_silu_.0)
  %div.1048 = bf16[1,8,1024,14336]{3,2,1,0} divide(%jit_silu_.0, %add.2082)
  %mul.6327 = bf16[1,8,1024,14336]{3,2,1,0} multiply(%sharding_constraint.1493, %div.1048)
  %sharding_constraint.1496 = bf16[1,4096,4096]{2,1,0} copy(%sharding_constraint.1470)
  %sharding_constraint.1498 = bf16[1,4096,8,1024]{3,2,1,0} copy(%slice.537)
  %dot.732 = bf16[1,4096,8,1024]{3,2,1,0} dot(%sharding_constraint.1496, %sharding_constraint.1498), lhs_batch_dims={0}, lhs_contracting_dims={1}, rhs_batch_dims={0}, rhs_contracting_dims={1}
  %reshape.12057 = bf16[1,4096,8,1,1024]{4,3,2,1,0} reshape(%dot.732)
  %all-to-all.113 = bf16[1,4096,8,1,1024]{4,3,2,1,0} all-to-all(%reshape.12057), channel_id=534, replica_groups=[1,8]<=[8], dimensions={2}
  %transpose.187 = bf16[8,1,4096,1,1024]{4,3,0,2,1} transpose(%all-to-all.113), dimensions={2,0,1,3,4}
  %reshape.12058 = bf16[8,4096,1,1024]{3,2,1,0} reshape(%transpose.187)
  %transpose.188 = bf16[1,8,1024,4096]{2,0,3,1} transpose(%reshape.12058), dimensions={2,0,3,1}
  %sharding_constraint.1499 = bf16[1,8,1024,4096]{2,0,3,1} copy(%transpose.188)
  %get-tuple-element.907 = bf16[1,14336,4096]{2,1,0} get-tuple-element(%remat2.23), index=3
  %sharding_constraint.1500 = bf16[1,14336,4096]{2,1,0} copy(%get-tuple-element.907)
  %dot.733 = bf16[1,8,1024,14336]{3,2,1,0} dot(%sharding_constraint.1499, %sharding_constraint.1500), lhs_batch_dims={0}, lhs_contracting_dims={3}, rhs_batch_dims={0}, rhs_contracting_dims={2}
  %mul.6328 = bf16[1,8,1024,14336]{3,2,1,0} multiply(%mul.6327, %dot.733)
  %sharding_constraint.1501 = bf16[1,8,1024,14336]{3,2,1,0} copy(%mul.6328)
  %get-tuple-element.908 = bf16[1,4096,14336]{2,1,0} get-tuple-element(%remat2.23), index=2
  %sharding_constraint.1502 = bf16[1,4096,14336]{2,1,0} copy(%get-tuple-element.908)
  %dot.734 = bf16[1,8,1024,4096]{3,2,1,0} dot(%sharding_constraint.1501, %sharding_constraint.1502), lhs_batch_dims={0}, lhs_contracting_dims={3}, rhs_batch_dims={0}, rhs_contracting_dims={2}
  %dot.735 = bf16[1,8,1024,14336]{3,2,1,0} dot(%sharding_constraint.1489, %sharding_constraint.1502), lhs_batch_dims={0}, lhs_contracting_dims={3}, rhs_batch_dims={0}, rhs_contracting_dims={1}
  %sharding_constraint.1503 = bf16[1,8,1024,14336]{3,2,1,0} copy(%dot.735)
  %mul.6329 = bf16[1,8,1024,14336]{3,2,1,0} multiply(%dot.733, %sharding_constraint.1503)
  %mul.6330 = bf16[1,8,1024,14336]{3,2,1,0} multiply(%mul.6329, %div.1048)
  %mul.6331 = bf16[1,8,1024,14336]{3,2,1,0} multiply(%sharding_constraint.1493, %mul.6329)
  %sub.307 = bf16[1,8,1024,14336]{3,2,1,0} subtract(%jit_silu_.0, %div.1048)
  %mul.6332 = bf16[1,8,1024,14336]{3,2,1,0} multiply(%div.1048, %sub.307)
  %mul.6336 = bf16[1,8,1024,14336]{3,2,1,0} multiply(%mul.6331, %mul.6332)
  %add_any.235 = bf16[1,8,1024,14336]{3,2,1,0} add(%mul.6330, %mul.6336)
  %sharding_constraint.1504 = bf16[1,8,1024,14336]{3,2,1,0} copy(%add_any.235)
  %dot.736 = bf16[1,8,1024,4096]{3,2,1,0} dot(%sharding_constraint.1504, %sharding_constraint.1490), lhs_batch_dims={0}, lhs_contracting_dims={3}, rhs_batch_dims={0}, rhs_contracting_dims={2}
  %add_any.236 = bf16[1,8,1024,4096]{3,2,1,0} add(%dot.734, %dot.736)
  %sharding_constraint.1505 = bf16[1,8,1024,4096]{3,2,1,0} copy(%add_any.236)
  %transpose.189 = bf16[8,1,1024,4096]{3,2,0,1} transpose(%sharding_constraint.1505), dimensions={1,0,2,3}
  %reshape.12061 = bf16[8,1,1,1024,4096]{4,3,2,1,0} reshape(%transpose.189)
  %all-to-all.114 = bf16[8,1,1,1024,4096]{4,3,2,1,0} all-to-all(%reshape.12061), channel_id=535, replica_groups=[1,8]<=[8], dimensions={0}
  %transpose.190 = bf16[1,8,1,1024,4096]{4,3,2,0,1} transpose(%all-to-all.114), dimensions={1,0,2,3,4}
  %reshape.12062 = bf16[1,8,1024,4096]{3,2,1,0} reshape(%transpose.190)
  %dot.737 = bf16[1,4096,4096]{2,1,0} dot(%dot_general.92, %reshape.12062), lhs_batch_dims={0}, lhs_contracting_dims={2,3}, rhs_batch_dims={0}, rhs_contracting_dims={1,2}
  %reshape.12064 = s32[1,4096,2,1]{3,2,1,0} reshape(%slice.536)
  %ge.12 = pred[1,4096,2,3]{3,2,1,0} compare(%concatenate.419, %broadcast.3629), direction=GE
  %le.116 = pred[1,4096,2,3]{3,2,1,0} compare(%concatenate.419, %le.67), direction=LE
  %and.166 = pred[1,4096,2,3]{3,2,1,0} and(%ge.12, %le.116)
  %reduce.664 = pred[1,4096,2]{2,1,0} reduce(%and.166, %constant.5574), dimensions={3}, to_apply=%region_619.15918
  %mul.6337 = bf16[1,8,1024,14336]{3,2,1,0} multiply(%mul.6327, %sharding_constraint.1503)
  %dot.738 = bf16[1,8,1024,4096]{3,2,1,0} dot(%mul.6337, %sharding_constraint.1500), lhs_batch_dims={0}, lhs_contracting_dims={3}, rhs_batch_dims={0}, rhs_contracting_dims={1}
  %sharding_constraint.1506 = bf16[1,8,1024,4096]{3,2,1,0} copy(%dot.738)
  %reshape.12072 = bf16[1,8,1,1024,4096]{4,3,2,1,0} reshape(%sharding_constraint.1506)
  %all-to-all.115 = bf16[1,8,1,1024,4096]{4,3,2,1,0} all-to-all(%reshape.12072), channel_id=536, replica_groups=[1,8]<=[8], dimensions={1}
  %transpose.191 = bf16[8,1,1,1024,4096]{4,3,2,0,1} transpose(%all-to-all.115), dimensions={1,0,2,3,4}
  %reshape.12073 = bf16[8,1,1024,4096]{3,2,1,0} reshape(%transpose.191)
  %dot.739 = bf16[1,4096,8,1024]{3,2,1,0} dot(%sharding_constraint.1496, %reshape.12073), lhs_batch_dims={0}, lhs_contracting_dims={2}, rhs_batch_dims={1}, rhs_contracting_dims={3}
  %sharding_constraint.1507 = bf16[1,4096,8,1024]{3,2,1,0} copy(%dot.739)
  %pad.12 = bf16[1,4096,8,1025]{3,2,1,0} pad(%sharding_constraint.1507, %constant.1190), padding=0_0x0_0x0_0x1_0
  %mul.6338 = bf16[1,4096,8,1025]{3,2,1,0} multiply(%pad.12, %convert_element_type.2417)
  %reduce.665 = bf16[1,4096,8]{2,1,0} reduce(%mul.6338, %constant.1190), dimensions={3}, to_apply=%region_620.15930
  %mul.6350 = bf16[1,4096,8]{2,1,0} multiply(%reduce.665, %convert_element_type.2415)
  %gather.57 = bf16[1,4096,2]{2,1,0} gather(%mul.6350, %subtract.146), offset_dims={}, collapsed_slice_dims={0,1,2}, start_index_map={0,1,2}, index_vector_dim=3, slice_sizes={1,1,1}
  %select_n.526 = bf16[1,4096,2]{2,1,0} select(%reduce.664, %gather.57, %broadcast.3427)
  %select_n.527 = bf16[1,4096,2]{2,1,0} select(%eq.2303, %select_n.526, %broadcast.3427)
  %convert_element_type.2419 = f32[1,4096,2]{2,1,0} convert(%select_n.527)
  %div.1050 = f32[1,4096,2]{2,1,0} divide(%convert_element_type.2419, %div.1046)
  %mul.6351 = f32[1,4096]{1,0} multiply(%reduce.661, %reduce.661)
  %div.1051 = f32[1,4096]{1,0} divide(%add.1847, %mul.6351)
  %mul.6352 = f32[1,4096,2]{2,1,0} broadcast(%div.1051), dimensions={0,1}
  %mul.6357 = f32[1,4096,2]{2,1,0} multiply(%convert_element_type.2419, %mul.6352)
  %mul.6358 = f32[1,4096,2]{2,1,0} multiply(%mul.6357, %exp.215)
  %reduce.666 = f32[1,4096]{1,0} reduce(%mul.6358, %constant.1360), dimensions={2}, to_apply=%region_621.15947
  %neg.239 = f32[1,4096]{1,0} negate(%reduce.666)
  %broadcast_in_dim.690 = f32[1,4096,2]{2,1,0} broadcast(%neg.239), dimensions={0,1}
  %add_any.237 = f32[1,4096,2]{2,1,0} add(%div.1050, %broadcast_in_dim.690)
  %mul.6359 = f32[1,4096,2]{2,1,0} multiply(%add_any.237, %exp.215)
  %convert_element_type.2420 = bf16[1,4096,2]{2,1,0} convert(%mul.6359)
  %scatter.231 = bf16[1,4096,8]{2,1,0} scatter(%broadcast.3379, %reshape.12064, %convert_element_type.2420), update_window_dims={}, inserted_window_dims={2}, scatter_dims_to_operand_dims={2}, input_batching_dims={0,1}, scatter_indices_batching_dims={0,1}, index_vector_dim=3, to_apply=%region_622.15957.clone
  %sharding_constraint.1508 = bf16[1,4096,8]{2,1,0} copy(%scatter.231)
  %dot.740 = bf16[1,4096,4096]{2,1,0} dot(%sharding_constraint.1508, %all-gather.302), lhs_contracting_dims={2}, rhs_contracting_dims={1}
  %add_any.238 = bf16[1,4096,4096]{2,1,0} add(%dot.737, %dot.740)
  %sharding_constraint.1510 = bf16[1,4096,4096]{2,1,0} copy(%add_any.238)
  %mul.6361 = bf16[1,4096,4096]{2,1,0} multiply(%sharding_constraint.1510, %mul.6318)
  %convert_element_type.2421 = f32[1,4096,4096]{2,1,0} convert(%mul.6361)
  %mul.6364 = f32[1,4096,4096]{2,1,0} multiply(%convert_element_type.2421, %mul.6316)
  %mul.6365 = f32[1,4096,4096]{2,1,0} multiply(%convert_element_type.2408, %convert_element_type.2421)
  %reduce.667 = f32[1,4096]{1,0} reduce(%mul.6365, %constant.1360), dimensions={2}, to_apply=%region_623.15973
  %reshape.12085 = f32[1,4096,1]{2,1,0} reshape(%reduce.667)
  %div.1052 = f32[1,4096,1]{2,1,0} divide(%rsqrt.154, %add.2075)
  %mul.6366 = f32[1,4096,1]{2,1,0} multiply(%div.1052, %broadcast.3620)
  %mul.6367 = f32[1,4096,1]{2,1,0} multiply(%reshape.12085, %mul.6366)
  %mul.6368 = f32[1,4096,1]{2,1,0} multiply(%mul.6367, %mul.4455)
  %mul.6369 = f32[1,4096]{1,0} reshape(%mul.6368)
  %mul.6370 = f32[1,4096,4096]{2,1,0} broadcast(%mul.6369), dimensions={0,1}
  %mul.6371 = f32[1,4096,4096]{2,1,0} multiply(%convert_element_type.2408, %mul.6370)
  %add_any.239 = f32[1,4096,4096]{2,1,0} add(%mul.6364, %mul.6371)
  %convert_element_type.2422 = bf16[1,4096,4096]{2,1,0} convert(%add_any.239)
  %add_any.240 = bf16[1,4096,4096]{2,1,0} add(%sharding_constraint.1470, %convert_element_type.2422)
  %get-tuple-element.909 = f32[1,32,4096,1]{3,2,1,0} get-tuple-element(%te_fused_attn_forward_ffi.176), index=1
  %get-tuple-element.910 = u32[2,4]{1,0} get-tuple-element(%te_fused_attn_forward_ffi.176), index=2
  %sharding_constraint.1517 = u32[2,4]{1,0} copy(%get-tuple-element.910)
  %sharding_constraint.1518 = bf16[1,4096,4096]{2,1,0} copy(%add_any.240)
  %dot.741 = bf16[1,4096,32,128]{3,2,1,0} dot(%sharding_constraint.1518, %all-gather.301), lhs_contracting_dims={2}, rhs_contracting_dims={2}
  %sharding_constraint.1519 = bf16[1,4096,32,128]{3,2,1,0} copy(%dot.741)
  %te_fused_attn_backward_ffi.60 = (bf16[1,4096,32,128]{3,2,1,0}, bf16[1,4096,8,128]{3,2,1,0}, bf16[1,4096,8,128]{3,2,1,0}, bf16[0]{0}, u8[134742064]{0}) custom-call(%sharding_constraint.1476, %sharding_constraint.1478, %sharding_constraint.1479, %constant.1403, %get-tuple-element.909, /*index=5*/%sharding_constraint.1517, %get-tuple-element.896, %sharding_constraint.1519, %concatenate.417, %concatenate.418, /*index=10*/%constant.1416, %constant.1416, %constant.1416, %constant.1416, %constant.1416, /*index=15*/%constant.1416), custom_call_target="te_fused_attn_backward_ffi", operand_layout_constraints={bf16[1,4096,32,128]{3,2,1,0}, bf16[1,4096,8,128]{3,2,1,0}, bf16[1,4096,8,128]{3,2,1,0}, bf16[0]{0}, f32[1,32,4096,1]{3,2,1,0}, u32[2,4]{1,0}, bf16[1,4096,32,128]{3,2,1,0}, bf16[1,4096,32,128]{3,2,1,0}, s32[2]{0}, s32[2]{0}, f32[0]{0}, f32[0]{0}, f32[0]{0}, f32[0]{0}, f32[0]{0}, f32[0]{0}}, api_version=API_VERSION_TYPED_FFI, backend_config={attn_heads = 32 : i64, bias_batch = 0 : i64, bias_heads = 0 : i64, bias_type = 0 : i64, deterministic = false, dropout_probability = 0.000000e+00 : f64, input_batch = 1 : i64, is_training = true, kv_max_seqlen = 4096 : i64, mask_type = 3 : i64, max_segments_per_seq = 1 : i64, num_gqa_groups = 8 : i64, q_max_seqlen = 4096 : i64, qk_head_dim = 128 : i64, qkv_layout = 9 : i64, scaling_factor = 1.000000e+00 : f64, v_head_dim = 128 : i64, window_size_left = -1 : i64, window_size_right = -1 : i64}
  %get-tuple-element.911 = bf16[1,4096,8,128]{3,2,1,0} get-tuple-element(%te_fused_attn_backward_ffi.60), index=2
  %sharding_constraint.1520 = bf16[1,4096,8,128]{3,2,1,0} copy(%get-tuple-element.911)
  %dot.742 = bf16[1,4096,4096]{2,1,0} dot(%sharding_constraint.1520, %all-gather.300), lhs_contracting_dims={2,3}, rhs_contracting_dims={1,2}
  %get-tuple-element.912 = bf16[1,4096,8,128]{3,2,1,0} get-tuple-element(%te_fused_attn_backward_ffi.60), index=1
  %sharding_constraint.1521 = bf16[1,4096,8,128]{3,2,1,0} copy(%get-tuple-element.912)
  %slice.538 = bf16[1,4096,8,64]{3,2,1,0} slice(%sharding_constraint.1521), slice={[0:1], [0:4096], [0:8], [64:128]}
  %mul.6375 = bf16[1,4096,8,64]{3,2,1,0} multiply(%slice.538, %mul.6295)
  %slice.539 = bf16[1,4096,8,64]{3,2,1,0} slice(%sharding_constraint.1521), slice={[0:1], [0:4096], [0:8], [0:64]}
  %mul.6378 = bf16[1,4096,8,64]{3,2,1,0} multiply(%slice.539, %mul.6291)
  %add_any.241 = bf16[1,4096,8,64]{3,2,1,0} add(%mul.6375, %mul.6378)
  %mul.6381 = bf16[1,4096,8,64]{3,2,1,0} multiply(%slice.538, %mul.6291)
  %neg.240 = bf16[1,4096,8,64]{3,2,1,0} negate(%slice.539)
  %mul.6384 = bf16[1,4096,8,64]{3,2,1,0} multiply(%neg.240, %mul.6295)
  %add_any.242 = bf16[1,4096,8,64]{3,2,1,0} add(%mul.6381, %mul.6384)
  %concatenate.426 = bf16[1,4096,8,128]{3,2,1,0} concatenate(%add_any.241, %add_any.242), dimensions={3}
  %dot.743 = bf16[1,4096,4096]{2,1,0} dot(%concatenate.426, %all-gather.299), lhs_contracting_dims={2,3}, rhs_contracting_dims={1,2}
  %add_any.243 = bf16[1,4096,4096]{2,1,0} add(%dot.742, %dot.743)
  %sharding_constraint.1522 = bf16[1,4096,4096]{2,1,0} copy(%add_any.243)
  %get-tuple-element.913 = bf16[1,4096,32,128]{3,2,1,0} get-tuple-element(%te_fused_attn_backward_ffi.60), index=0
  %sharding_constraint.1523 = bf16[1,4096,32,128]{3,2,1,0} copy(%get-tuple-element.913)
  %slice.540 = bf16[1,4096,32,64]{3,2,1,0} slice(%sharding_constraint.1523), slice={[0:1], [0:4096], [0:32], [64:128]}
  %mul.6387 = bf16[1,4096,32,64]{3,2,1,0} multiply(%slice.540, %mul.6277)
  %slice.541 = bf16[1,4096,32,64]{3,2,1,0} slice(%sharding_constraint.1523), slice={[0:1], [0:4096], [0:32], [0:64]}
  %mul.6390 = bf16[1,4096,32,64]{3,2,1,0} multiply(%slice.541, %mul.6274)
  %add_any.244 = bf16[1,4096,32,64]{3,2,1,0} add(%mul.6387, %mul.6390)
  %mul.6397 = bf16[1,4096,32,64]{3,2,1,0} multiply(%slice.540, %mul.6274)
  %neg.241 = bf16[1,4096,32,64]{3,2,1,0} negate(%slice.541)
  %mul.6406 = bf16[1,4096,32,64]{3,2,1,0} multiply(%neg.241, %mul.6277)
  %add_any.245 = bf16[1,4096,32,64]{3,2,1,0} add(%mul.6397, %mul.6406)
  %concatenate.427 = bf16[1,4096,32,128]{3,2,1,0} concatenate(%add_any.244, %add_any.245), dimensions={3}
  %dot.744 = bf16[1,4096,4096]{2,1,0} dot(%concatenate.427, %all-gather.298), lhs_contracting_dims={2,3}, rhs_contracting_dims={1,2}
  %sharding_constraint.1524 = bf16[1,4096,4096]{2,1,0} copy(%dot.744)
  %add_any.246 = bf16[1,4096,4096]{2,1,0} add(%sharding_constraint.1522, %sharding_constraint.1524)
  %sharding_constraint.1525 = bf16[1,4096,4096]{2,1,0} copy(%add_any.246)
  %mul.6411 = bf16[1,4096,4096]{2,1,0} multiply(%sharding_constraint.1525, %mul.6270)
  %convert_element_type.2423 = f32[1,4096,4096]{2,1,0} convert(%mul.6411)
  %mul.6414 = f32[1,4096,4096]{2,1,0} multiply(%convert_element_type.2423, %mul.6268)
  %mul.6415 = f32[1,4096,4096]{2,1,0} multiply(%convert_element_type.2393, %convert_element_type.2423)
  %reduce.668 = f32[1,4096]{1,0} reduce(%mul.6415, %constant.1360), dimensions={2}, to_apply=%region_624.16052
  %reshape.12092 = f32[1,4096,1]{2,1,0} reshape(%reduce.668)
  %div.1053 = f32[1,4096,1]{2,1,0} divide(%rsqrt.153, %add.2070)
  %mul.6416 = f32[1,4096,1]{2,1,0} multiply(%div.1053, %broadcast.3620)
  %mul.6417 = f32[1,4096,1]{2,1,0} multiply(%reshape.12092, %mul.6416)
  %mul.6418 = f32[1,4096,1]{2,1,0} multiply(%mul.6417, %mul.4455)
  %mul.6419 = f32[1,4096]{1,0} reshape(%mul.6418)
  %mul.6420 = f32[1,4096,4096]{2,1,0} broadcast(%mul.6419), dimensions={0,1}
  %mul.6421 = f32[1,4096,4096]{2,1,0} multiply(%convert_element_type.2393, %mul.6420)
  %add_any.247 = f32[1,4096,4096]{2,1,0} add(%mul.6414, %mul.6421)
  %convert_element_type.2424 = bf16[1,4096,4096]{2,1,0} convert(%add_any.247)
  %add_any.248 = bf16[1,4096,4096]{2,1,0} add(%add_any.240, %convert_element_type.2424)
  %sharding_constraint.1526 = bf16[1,4096,4096]{2,1,0} copy(%add_any.248)
  %tuple.275 = (bf16[512,8]{1,0}, bf16[1,4096,14336]{2,1,0}, bf16[1,4096,14336]{2,1,0}, bf16[1,14336,4096]{2,1,0}, bf16[4096]{0}, /*index=5*/bf16[4096]{0}, bf16[512,8,128]{2,1,0}, bf16[32,128,512]{2,1,0}, bf16[512,32,128]{2,1,0}, bf16[512,8,128]{2,1,0}, /*index=10*/bf16[1,4096,4096]{2,1,0}, s32[1,4096]{1,0}, s32[1,4096]{1,0}, bf16[1,4096,4096]{2,1,0}) tuple(%param.193, %param.194, %param.195, %param.196, %param.192, /*index=5*/%param.187, %param.189, %param.191, %param.188, %param.190, /*index=10*/%sharding_constraint.594, %param.10, %param.7, %sharding_constraint.1526)
  %remat2.24 = (bf16[512,8]{1,0}, bf16[1,4096,14336]{2,1,0}, bf16[1,4096,14336]{2,1,0}, bf16[1,14336,4096]{2,1,0}, bf16[4096]{0}, /*index=5*/bf16[4096]{0}, bf16[512,8,128]{2,1,0}, bf16[32,128,512]{2,1,0}, bf16[512,32,128]{2,1,0}, bf16[512,8,128]{2,1,0}, /*index=10*/bf16[1,4096,4096]{2,1,0}, s32[1,4096]{1,0}, s32[1,4096]{1,0}, bf16[1,4096,4096]{2,1,0}) opt-barrier(%tuple.275)
  %get-tuple-element.914 = bf16[1,4096,4096]{2,1,0} get-tuple-element(%remat2.24), index=13
  %sharding_constraint.1527 = bf16[1,4096,4096]{2,1,0} copy(%get-tuple-element.914)
  %iota.2584 = s32[1,4096,2,1]{3,2,1,0} iota(), iota_dimension=1
  %get-tuple-element.915 = bf16[1,4096,4096]{2,1,0} get-tuple-element(%remat2.24), index=10
  %sharding_constraint.1528 = bf16[1,4096,4096]{2,1,0} copy(%get-tuple-element.915)
  %convert_element_type.2425 = f32[1,4096,4096]{2,1,0} convert(%sharding_constraint.1528)
  %square.94 = f32[1,4096,4096]{2,1,0} multiply(%convert_element_type.2425, %convert_element_type.2425)
  %reduce.669 = f32[1,4096]{1,0} reduce(%square.94, %constant.1360), dimensions={2}, to_apply=%region_625.16094
  %div.1054 = f32[1,4096]{1,0} multiply(%reduce.669, %broadcast.3412)
  %add.2086 = f32[1,4096]{1,0} add(%div.1054, %broadcast.3413)
  %add.2087 = f32[1,4096,1]{2,1,0} reshape(%add.2086)
  %rsqrt.155 = f32[1,4096,1]{2,1,0} rsqrt(%add.2087)
  %mul.6422 = f32[1,4096]{1,0} reshape(%rsqrt.155)
  %mul.6423 = f32[1,4096,4096]{2,1,0} broadcast(%mul.6422), dimensions={0,1}
  %mul.6424 = f32[1,4096,4096]{2,1,0} multiply(%convert_element_type.2425, %mul.6423)
  %convert_element_type.2426 = bf16[1,4096,4096]{2,1,0} convert(%mul.6424)
  %get-tuple-element.916 = bf16[4096]{0} get-tuple-element(%remat2.24), index=5
  %mul.6425 = bf16[1,4096,4096]{2,1,0} broadcast(%get-tuple-element.916), dimensions={2}
  %mul.6426 = bf16[1,4096,4096]{2,1,0} multiply(%convert_element_type.2426, %mul.6425)
  %sharding_constraint.1529 = bf16[1,4096,4096]{2,1,0} copy(%mul.6426)
  %sharding_constraint.1530 = bf16[1,4096,4096]{2,1,0} copy(%sharding_constraint.1529)
  %get-tuple-element.917 = bf16[512,32,128]{2,1,0} get-tuple-element(%remat2.24), index=8
  %all-gather.304 = bf16[4096,32,128]{2,1,0} all-gather(%get-tuple-element.917), channel_id=539, replica_groups=[1,8]<=[8], dimensions={0}, use_global_device_ids=true
  %dot.745 = bf16[1,4096,32,128]{3,2,1,0} dot(%sharding_constraint.1530, %all-gather.304), lhs_contracting_dims={2}, rhs_contracting_dims={0}
  %slice.542 = bf16[1,4096,32,64]{3,2,1,0} slice(%dot.745), slice={[0:1], [0:4096], [0:32], [0:64]}
  %get-tuple-element.918 = s32[1,4096]{1,0} get-tuple-element(%remat2.24), index=12
  %convert_element_type.2427 = f32[1,4096]{1,0} convert(%get-tuple-element.918)
  %div.1055 = f32[1,4096,1,64]{3,2,1,0} broadcast(%convert_element_type.2427), dimensions={0,1}
  %div.1058 = f32[1,4096,1,64]{3,2,1,0} divide(%div.1055, %div.402)
  %cos.91 = f32[1,4096,1,64]{3,2,1,0} cosine(%div.1058)
  %convert_element_type.2430 = bf16[1,4096,1,64]{3,2,1,0} convert(%cos.91)
  %mul.6428 = bf16[1,4096,64]{2,1,0} reshape(%convert_element_type.2430)
  %mul.6437 = bf16[1,4096,32,64]{3,2,1,0} broadcast(%mul.6428), dimensions={0,1,3}
  %mul.6446 = bf16[1,4096,32,64]{3,2,1,0} multiply(%slice.542, %mul.6437)
  %slice.543 = bf16[1,4096,32,64]{3,2,1,0} slice(%dot.745), slice={[0:1], [0:4096], [0:32], [64:128]}
  %sin.90 = f32[1,4096,1,64]{3,2,1,0} sine(%div.1058)
  %convert_element_type.2432 = bf16[1,4096,1,64]{3,2,1,0} convert(%sin.90)
  %mul.6447 = bf16[1,4096,64]{2,1,0} reshape(%convert_element_type.2432)
  %mul.6448 = bf16[1,4096,32,64]{3,2,1,0} broadcast(%mul.6447), dimensions={0,1,3}
  %mul.6449 = bf16[1,4096,32,64]{3,2,1,0} multiply(%slice.543, %mul.6448)
  %sub.308 = bf16[1,4096,32,64]{3,2,1,0} subtract(%mul.6446, %mul.6449)
  %mul.6453 = bf16[1,4096,32,64]{3,2,1,0} multiply(%slice.543, %mul.6437)
  %mul.6456 = bf16[1,4096,32,64]{3,2,1,0} multiply(%slice.542, %mul.6448)
  %add.2089 = bf16[1,4096,32,64]{3,2,1,0} add(%mul.6453, %mul.6456)
  %concatenate.428 = bf16[1,4096,32,128]{3,2,1,0} concatenate(%sub.308, %add.2089), dimensions={3}
  %sharding_constraint.1532 = bf16[1,4096,32,128]{3,2,1,0} copy(%concatenate.428)
  %get-tuple-element.919 = bf16[512,8,128]{2,1,0} get-tuple-element(%remat2.24), index=6
  %all-gather.305 = bf16[4096,8,128]{2,1,0} all-gather(%get-tuple-element.919), channel_id=540, replica_groups=[1,8]<=[8], dimensions={0}, use_global_device_ids=true
  %dot.746 = bf16[1,4096,8,128]{3,2,1,0} dot(%sharding_constraint.1530, %all-gather.305), lhs_contracting_dims={2}, rhs_contracting_dims={0}
  %slice.544 = bf16[1,4096,8,64]{3,2,1,0} slice(%dot.746), slice={[0:1], [0:4096], [0:8], [0:64]}
  %mul.6459 = bf16[1,4096,8,64]{3,2,1,0} broadcast(%mul.6428), dimensions={0,1,3}
  %mul.6460 = bf16[1,4096,8,64]{3,2,1,0} multiply(%slice.544, %mul.6459)
  %slice.545 = bf16[1,4096,8,64]{3,2,1,0} slice(%dot.746), slice={[0:1], [0:4096], [0:8], [64:128]}
  %mul.6462 = bf16[1,4096,8,64]{3,2,1,0} broadcast(%mul.6447), dimensions={0,1,3}
  %mul.6463 = bf16[1,4096,8,64]{3,2,1,0} multiply(%slice.545, %mul.6462)
  %sub.309 = bf16[1,4096,8,64]{3,2,1,0} subtract(%mul.6460, %mul.6463)
  %mul.6466 = bf16[1,4096,8,64]{3,2,1,0} multiply(%slice.545, %mul.6459)
  %mul.6477 = bf16[1,4096,8,64]{3,2,1,0} multiply(%slice.544, %mul.6462)
  %add.2090 = bf16[1,4096,8,64]{3,2,1,0} add(%mul.6466, %mul.6477)
  %concatenate.429 = bf16[1,4096,8,128]{3,2,1,0} concatenate(%sub.309, %add.2090), dimensions={3}
  %sharding_constraint.1535 = bf16[1,4096,8,128]{3,2,1,0} copy(%concatenate.429)
  %get-tuple-element.920 = bf16[512,8,128]{2,1,0} get-tuple-element(%remat2.24), index=9
  %all-gather.306 = bf16[4096,8,128]{2,1,0} all-gather(%get-tuple-element.920), channel_id=541, replica_groups=[1,8]<=[8], dimensions={0}, use_global_device_ids=true
  %dot.747 = bf16[1,4096,8,128]{3,2,1,0} dot(%sharding_constraint.1530, %all-gather.306), lhs_contracting_dims={2}, rhs_contracting_dims={0}
  %sharding_constraint.1536 = bf16[1,4096,8,128]{3,2,1,0} copy(%dot.747)
  %get-tuple-element.921 = s32[1,4096]{1,0} get-tuple-element(%remat2.24), index=11
  %eq.2310 = s32[1,4096,4096]{2,1,0} broadcast(%get-tuple-element.921), dimensions={0,1}
  %eq.2311 = s32[1,4096,4096]{2,1,0} broadcast(%get-tuple-element.921), dimensions={0,2}
  %eq.2312 = pred[1,4096,4096]{2,1,0} compare(%eq.2310, %eq.2311), direction=EQ
  %and.168 = pred[1,4096,4096]{2,1,0} and(%eq.2312, %and.64)
  %select_n.530 = f32[1,4096,4096]{2,1,0} select(%and.168, %broadcast_in_dim.516, %broadcast_in_dim.517)
  %ne.111 = pred[1,4096,4096]{2,1,0} compare(%select_n.530, %broadcast_in_dim.516), direction=NE
  %not.109 = pred[1,4096,4096]{2,1,0} not(%ne.111)
  %convert_element_type.2437 = s32[1,4096,4096]{2,1,0} convert(%not.109)
  %reduce.670 = s32[1,4096]{1,0} reduce(%convert_element_type.2437, %constant.1181), dimensions={1}, to_apply=%region_626.16190
  %reduce_sum.5718 = s32[1,1,1,4096]{3,2,1,0} reshape(%reduce.670)
  %slice.546 = s32[1,1,1,1]{3,2,1,0} slice(%reduce_sum.5718), slice={[0:1], [0:1], [0:1], [0:1]}
  %squeeze.45 = s32[1,1]{1,0} reshape(%slice.546)
  %reshape.12099 = s32[1]{0} reshape(%squeeze.45)
  %lt.162 = pred[1]{0} compare(%reshape.12099, %constant.1418), direction=LT
  %select_n.531 = s32[1]{0} select(%lt.162, %broadcast_in_dim.518, %reshape.12099)
  %concatenate.430 = s32[2]{0} concatenate(%constant.1418, %select_n.531), dimensions={0}
  %reduce.671 = s32[1,4096]{1,0} reduce(%convert_element_type.2437, %constant.1181), dimensions={2}, to_apply=%region_627.16199
  %reduce_sum.5719 = s32[1,1,1,4096]{3,2,1,0} reshape(%reduce.671)
  %reduce.672 = s32[1,1]{1,0} reduce(%reduce_sum.5719, %constant.1415), dimensions={3,2}, to_apply=%region_628.16205
  %reshape.12100 = s32[1]{0} reshape(%reduce.672)
  %lt.163 = pred[1]{0} compare(%reshape.12100, %constant.1418), direction=LT
  %select_n.532 = s32[1]{0} select(%lt.163, %broadcast_in_dim.518, %reshape.12100)
  %concatenate.431 = s32[2]{0} concatenate(%constant.1418, %select_n.532), dimensions={0}
  %te_fused_attn_forward_ffi.180 = (bf16[1,4096,32,128]{3,2,1,0}, f32[1,32,4096,1]{3,2,1,0}, u32[2,4]{1,0}, u8[48]{0}) custom-call(%sharding_constraint.1532, %sharding_constraint.1535, %sharding_constraint.1536, %constant.1403, %dynamic-slice.38, /*index=5*/%concatenate.430, %concatenate.431, %constant.1416, %constant.1416, %constant.1416, /*index=10*/%constant.1416, %constant.1416, %constant.1416), custom_call_target="te_fused_attn_forward_ffi", operand_layout_constraints={bf16[1,4096,32,128]{3,2,1,0}, bf16[1,4096,8,128]{3,2,1,0}, bf16[1,4096,8,128]{3,2,1,0}, bf16[0]{0}, u32[2]{0}, s32[2]{0}, s32[2]{0}, f32[0]{0}, f32[0]{0}, f32[0]{0}, f32[0]{0}, f32[0]{0}, f32[0]{0}}, api_version=API_VERSION_TYPED_FFI, backend_config={attn_heads = 32 : i64, bias_batch = 0 : i64, bias_heads = 0 : i64, bias_type = 0 : i64, deterministic = false, dropout_probability = 0.000000e+00 : f64, input_batch = 1 : i64, is_training = true, kv_max_seqlen = 4096 : i64, mask_type = 3 : i64, max_segments_per_seq = 1 : i64, num_gqa_groups = 8 : i64, q_max_seqlen = 4096 : i64, qk_head_dim = 128 : i64, qkv_layout = 9 : i64, scaling_factor = 1.000000e+00 : f64, v_head_dim = 128 : i64, window_size_left = -1 : i64, window_size_right = -1 : i64}
  %get-tuple-element.922 = bf16[1,4096,32,128]{3,2,1,0} get-tuple-element(%te_fused_attn_forward_ffi.180), index=0
  %sharding_constraint.1537 = bf16[1,4096,32,128]{3,2,1,0} copy(%get-tuple-element.922)
  %get-tuple-element.923 = bf16[32,128,512]{2,1,0} get-tuple-element(%remat2.24), index=7
  %all-gather.307 = bf16[32,128,4096]{2,1,0} all-gather(%get-tuple-element.923), channel_id=542, replica_groups=[1,8]<=[8], dimensions={2}, use_global_device_ids=true
  %dot.748 = bf16[1,4096,4096]{2,1,0} dot(%sharding_constraint.1537, %all-gather.307), lhs_contracting_dims={2,3}, rhs_contracting_dims={0,1}
  %sharding_constraint.1541 = bf16[1,4096,4096]{2,1,0} copy(%dot.748)
  %add.2091 = bf16[1,4096,4096]{2,1,0} add(%sharding_constraint.1528, %sharding_constraint.1541)
  %convert_element_type.2439 = f32[1,4096,4096]{2,1,0} convert(%add.2091)
  %square.95 = f32[1,4096,4096]{2,1,0} multiply(%convert_element_type.2439, %convert_element_type.2439)
  %reduce.673 = f32[1,4096]{1,0} reduce(%square.95, %constant.1360), dimensions={2}, to_apply=%region_629.16220
  %div.1063 = f32[1,4096]{1,0} multiply(%reduce.673, %broadcast.3412)
  %add.2092 = f32[1,4096]{1,0} add(%div.1063, %broadcast.3413)
  %add.2093 = f32[1,4096,1]{2,1,0} reshape(%add.2092)
  %rsqrt.156 = f32[1,4096,1]{2,1,0} rsqrt(%add.2093)
  %mul.6486 = f32[1,4096]{1,0} reshape(%rsqrt.156)
  %mul.6487 = f32[1,4096,4096]{2,1,0} broadcast(%mul.6486), dimensions={0,1}
  %mul.6488 = f32[1,4096,4096]{2,1,0} multiply(%convert_element_type.2439, %mul.6487)
  %convert_element_type.2440 = bf16[1,4096,4096]{2,1,0} convert(%mul.6488)
  %get-tuple-element.924 = bf16[4096]{0} get-tuple-element(%remat2.24), index=4
  %mul.6489 = bf16[1,4096,4096]{2,1,0} broadcast(%get-tuple-element.924), dimensions={2}
  %mul.6491 = bf16[1,4096,4096]{2,1,0} multiply(%convert_element_type.2440, %mul.6489)
  %sharding_constraint.1542 = bf16[1,4096,4096]{2,1,0} copy(%mul.6491)
  %get-tuple-element.925 = bf16[512,8]{1,0} get-tuple-element(%remat2.24), index=0
  %all-gather.308 = bf16[4096,8]{1,0} all-gather(%get-tuple-element.925), channel_id=543, replica_groups=[1,8]<=[8], dimensions={0}, use_global_device_ids=true
  %dot.749 = bf16[1,4096,8]{2,1,0} dot(%sharding_constraint.1542, %all-gather.308), lhs_contracting_dims={2}, rhs_contracting_dims={0}
  %sharding_constraint.1543 = bf16[1,4096,8]{2,1,0} copy(%dot.749)
  %top_k.135 = bf16[4096,8]{1,0} reshape(%sharding_constraint.1543)
  %top_k.136 = (bf16[4096,2]{1,0}, s32[4096,2]{1,0}) custom-call(%top_k.135), custom_call_target="TopK", called_computations={%compare_greater_than.45.16241.clone}
  %get-tuple-element.926 = bf16[4096,2]{1,0} get-tuple-element(%top_k.136), index=0
  %get-tuple-element.927 = s32[4096,2]{1,0} get-tuple-element(%top_k.136), index=1
  %add.2094 = s32[4096,2]{1,0} add(%get-tuple-element.927, %broadcast.3418)
  %sort.109 = (bf16[4096,2]{1,0}, s32[4096,2]{1,0}) sort(%get-tuple-element.926, %add.2094), dimensions={1}, is_stable=true, to_apply=%compare-value-and-index.45
  %get-tuple-element.929 = s32[4096,2]{1,0} get-tuple-element(%sort.109), index=1
  %slice.548 = s32[4096,2]{1,0} slice(%get-tuple-element.929), slice={[0:4096], [0:2]}
  %top_k.137 = s32[1,4096,2]{2,1,0} reshape(%slice.548)
  %lt.164 = pred[1,4096,2]{2,1,0} compare(%top_k.137, %broadcast.3419), direction=LT
  %add.2095 = s32[1,4096,2]{2,1,0} add(%top_k.137, %broadcast.3420)
  %select_n.533 = s32[1,4096,2]{2,1,0} select(%lt.164, %add.2095, %top_k.137)
  %broadcast_in_dim.695 = s32[1,4096,2,1]{3,2,1,0} reshape(%select_n.533)
  %concatenate.432 = s32[1,4096,2,3]{3,2,1,0} concatenate(%add.1356, %iota.2584, %broadcast_in_dim.695), dimensions={3}
  %subtract.150 = s32[1,4096,2,3]{3,2,1,0} subtract(%concatenate.432, %broadcast.3428)
  %scatter.232 = u32[1,4096,8]{2,1,0} scatter(%dynamic-slice.43, %subtract.150, %add.1401), update_window_dims={}, inserted_window_dims={0,1,2}, scatter_dims_to_operand_dims={0,1,2}, index_vector_dim=3, to_apply=%region_630.16277.clone
  %gather.58 = u32[1,4096,2]{2,1,0} gather(%scatter.232, %subtract.150), offset_dims={}, collapsed_slice_dims={0,1,2}, start_index_map={0,1,2}, index_vector_dim=3, slice_sizes={1,1,1}
  %eq.2313 = pred[1,4096,2]{2,1,0} compare(%add.1401, %gather.58), direction=EQ
  %get-tuple-element.928 = bf16[4096,2]{1,0} get-tuple-element(%sort.109), index=0
  %slice.547 = bf16[4096,2]{1,0} slice(%get-tuple-element.928), slice={[0:4096], [0:2]}
  %convert_element_type.2441 = f32[4096,2]{1,0} convert(%slice.547)
  %convert_element_type.2442 = f32[1,4096,2]{2,1,0} reshape(%convert_element_type.2441)
  %reduce.674 = f32[4096]{0} reduce(%convert_element_type.2441, %constant.1450), dimensions={1}, to_apply=%region_631.16286
  %sub.310 = f32[1,4096]{1,0} reshape(%reduce.674)
  %sub.311 = f32[1,4096,2]{2,1,0} broadcast(%sub.310), dimensions={0,1}
  %sub.312 = f32[1,4096,2]{2,1,0} subtract(%convert_element_type.2442, %sub.311)
  %exp.217 = f32[1,4096,2]{2,1,0} exponential(%sub.312)
  %reduce.675 = f32[1,4096]{1,0} reduce(%exp.217, %constant.1360), dimensions={2}, to_apply=%region_632.16295
  %div.1064 = f32[1,4096,2]{2,1,0} broadcast(%reduce.675), dimensions={0,1}
  %div.1065 = f32[1,4096,2]{2,1,0} divide(%exp.217, %div.1064)
  %convert_element_type.2443 = bf16[1,4096,2]{2,1,0} convert(%div.1065)
  %select_n.534 = bf16[1,4096,2]{2,1,0} select(%eq.2313, %convert_element_type.2443, %broadcast.3427)
  %scatter.233 = bf16[1,4096,8]{2,1,0} scatter(%broadcast.3379, %subtract.150, %select_n.534), update_window_dims={}, inserted_window_dims={0,1,2}, scatter_dims_to_operand_dims={0,1,2}, index_vector_dim=3, to_apply=%region_633.16304.clone
  %eq.2315 = s32[1,4096,2,8]{3,2,1,0} broadcast(%top_k.137), dimensions={0,1,2}
  %iota.2595 = s32[1,4096,2,8]{3,2,1,0} iota(), iota_dimension=3
  %eq.2316 = pred[1,4096,2,8]{3,2,1,0} compare(%eq.2315, %iota.2595), direction=EQ
  %convert_element_type.2447 = s32[1,4096,2,8]{3,2,1,0} convert(%eq.2316)
  %reshape.12135 = s32[1,8192,8]{2,1,0} reshape(%convert_element_type.2447)
  %sharding_constraint.1544 = s32[1,8192,8]{2,1,0} copy(%reshape.12135)
  %reduce-window.45 = s32[1,8192,8]{2,1,0} reduce-window(%sharding_constraint.1544, %constant.1181), window={size=1x8192x1 pad=0_0x8191_0x0_0}, to_apply=%region_634.16316
  %reshape.12137 = s32[1,4096,2,8]{3,2,1,0} reshape(%reduce-window.45)
  %sharding_constraint.1545 = s32[1,4096,2,8]{3,2,1,0} copy(%reshape.12137)
  %le.118 = pred[1,4096,2,8]{3,2,1,0} compare(%sharding_constraint.1545, %broadcast.3429), direction=LE
  %mul.6492 = s32[1,4096,2,8]{3,2,1,0} select(%le.118, %convert_element_type.2447, %broadcast.3430)
  %reduce.676 = s32[1,4096,8]{2,1,0} reduce(%mul.6492, %constant.1181), dimensions={2}, to_apply=%region_635.16325
  %convert_element_type.2448 = bf16[1,4096,8]{2,1,0} convert(%reduce.676)
  %mul.6493 = bf16[1,4096,8]{2,1,0} multiply(%scatter.233, %convert_element_type.2448)
  %mul.6494 = bf16[1,4096,8,1025]{3,2,1,0} broadcast(%mul.6493), dimensions={0,1,2}
  %mul.6495 = s32[1,8192,8]{2,1,0} multiply(%sharding_constraint.1544, %reduce-window.45)
  %reshape.12138 = s32[1,4096,2,8]{3,2,1,0} reshape(%mul.6495)
  %reduce.677 = s32[1,4096,8]{2,1,0} reduce(%reshape.12138, %constant.1181), dimensions={2}, to_apply=%region_636.16335
  %mul.6496 = s32[1,4096,8]{2,1,0} multiply(%reduce.677, %reduce.676)
  %eq.2317 = s32[1,4096,8,1025]{3,2,1,0} broadcast(%mul.6496), dimensions={0,1,2}
  %iota.2596 = s32[1,4096,8,1025]{3,2,1,0} iota(), iota_dimension=3
  %eq.2318 = pred[1,4096,8,1025]{3,2,1,0} compare(%eq.2317, %iota.2596), direction=EQ
  %convert_element_type.2449 = s32[1,4096,8,1025]{3,2,1,0} convert(%eq.2318)
  %convert_element_type.2451 = bf16[1,4096,8,1025]{3,2,1,0} convert(%convert_element_type.2449)
  %mul.6500 = bf16[1,4096,8,1025]{3,2,1,0} multiply(%mul.6494, %convert_element_type.2451)
  %slice.549 = bf16[1,4096,8,1024]{3,2,1,0} slice(%mul.6500), slice={[0:1], [0:4096], [0:8], [1:1025]}
  %convert_element_type.2452 = pred[1,4096,8,1024]{3,2,1,0} compare(%slice.549, %broadcast.3431), direction=NE
  %sharding_constraint.1546 = pred[1,4096,8,1024]{3,2,1,0} copy(%convert_element_type.2452)
  %dot_general.94 = bf16[1,4096,8,1024]{3,2,1,0} convert(%sharding_constraint.1546)
  %dot.750 = bf16[1,8,1024,4096]{3,2,1,0} dot(%dot_general.94, %sharding_constraint.1542), lhs_batch_dims={0}, lhs_contracting_dims={1}, rhs_batch_dims={0}, rhs_contracting_dims={1}
  %reshape.12141 = bf16[1,8,1,1024,4096]{4,3,2,1,0} reshape(%dot.750)
  %all-to-all.116 = bf16[1,8,1,1024,4096]{4,3,2,1,0} all-to-all(%reshape.12141), channel_id=547, replica_groups=[1,8]<=[8], dimensions={1}
  %transpose.192 = bf16[8,1,1,1024,4096]{4,3,2,0,1} transpose(%all-to-all.116), dimensions={1,0,2,3,4}
  %reshape.12142 = bf16[8,1,1024,4096]{3,2,1,0} reshape(%transpose.192)
  %transpose.193 = bf16[1,8,1024,4096]{3,2,0,1} transpose(%reshape.12142), dimensions={1,0,2,3}
  %sharding_constraint.1547 = bf16[1,8,1024,4096]{3,2,0,1} copy(%transpose.193)
  %get-tuple-element.932 = bf16[1,4096,14336]{2,1,0} get-tuple-element(%remat2.24), index=1
  %sharding_constraint.1548 = bf16[1,4096,14336]{2,1,0} copy(%get-tuple-element.932)
  %dot.751 = bf16[1,8,1024,14336]{3,2,1,0} dot(%sharding_constraint.1547, %sharding_constraint.1548), lhs_batch_dims={0}, lhs_contracting_dims={3}, rhs_batch_dims={0}, rhs_contracting_dims={1}
  %sharding_constraint.1549 = bf16[1,8,1024,14336]{3,2,1,0} copy(%dot.751)
  %neg.242 = bf16[1,8,1024,14336]{3,2,1,0} negate(%sharding_constraint.1549)
  %exp.218 = bf16[1,8,1024,14336]{3,2,1,0} exponential(%neg.242)
  %add.2100 = bf16[1,8,1024,14336]{3,2,1,0} add(%exp.218, %jit_silu_.0)
  %div.1066 = bf16[1,8,1024,14336]{3,2,1,0} divide(%jit_silu_.0, %add.2100)
  %mul.6501 = bf16[1,8,1024,14336]{3,2,1,0} multiply(%sharding_constraint.1549, %div.1066)
  %sharding_constraint.1550 = bf16[1,4096,4096]{2,1,0} copy(%sharding_constraint.1527)
  %sharding_constraint.1551 = bf16[1,4096,8,1024]{3,2,1,0} copy(%slice.549)
  %dot.752 = bf16[1,4096,8,1024]{3,2,1,0} dot(%sharding_constraint.1550, %sharding_constraint.1551), lhs_batch_dims={0}, lhs_contracting_dims={1}, rhs_batch_dims={0}, rhs_contracting_dims={1}
  %reshape.12145 = bf16[1,4096,8,1,1024]{4,3,2,1,0} reshape(%dot.752)
  %all-to-all.117 = bf16[1,4096,8,1,1024]{4,3,2,1,0} all-to-all(%reshape.12145), channel_id=548, replica_groups=[1,8]<=[8], dimensions={2}
  %transpose.194 = bf16[8,1,4096,1,1024]{4,3,0,2,1} transpose(%all-to-all.117), dimensions={2,0,1,3,4}
  %reshape.12146 = bf16[8,4096,1,1024]{3,2,1,0} reshape(%transpose.194)
  %transpose.195 = bf16[1,8,1024,4096]{2,0,3,1} transpose(%reshape.12146), dimensions={2,0,3,1}
  %sharding_constraint.1552 = bf16[1,8,1024,4096]{2,0,3,1} copy(%transpose.195)
  %get-tuple-element.933 = bf16[1,14336,4096]{2,1,0} get-tuple-element(%remat2.24), index=3
  %sharding_constraint.1553 = bf16[1,14336,4096]{2,1,0} copy(%get-tuple-element.933)
  %dot.753 = bf16[1,8,1024,14336]{3,2,1,0} dot(%sharding_constraint.1552, %sharding_constraint.1553), lhs_batch_dims={0}, lhs_contracting_dims={3}, rhs_batch_dims={0}, rhs_contracting_dims={2}
  %mul.6502 = bf16[1,8,1024,14336]{3,2,1,0} multiply(%mul.6501, %dot.753)
  %sharding_constraint.1554 = bf16[1,8,1024,14336]{3,2,1,0} copy(%mul.6502)
  %get-tuple-element.934 = bf16[1,4096,14336]{2,1,0} get-tuple-element(%remat2.24), index=2
  %sharding_constraint.1555 = bf16[1,4096,14336]{2,1,0} copy(%get-tuple-element.934)
  %dot.754 = bf16[1,8,1024,4096]{3,2,1,0} dot(%sharding_constraint.1554, %sharding_constraint.1555), lhs_batch_dims={0}, lhs_contracting_dims={3}, rhs_batch_dims={0}, rhs_contracting_dims={2}
  %dot.755 = bf16[1,8,1024,14336]{3,2,1,0} dot(%sharding_constraint.1547, %sharding_constraint.1555), lhs_batch_dims={0}, lhs_contracting_dims={3}, rhs_batch_dims={0}, rhs_contracting_dims={1}
  %sharding_constraint.1556 = bf16[1,8,1024,14336]{3,2,1,0} copy(%dot.755)
  %mul.6503 = bf16[1,8,1024,14336]{3,2,1,0} multiply(%dot.753, %sharding_constraint.1556)
  %mul.6504 = bf16[1,8,1024,14336]{3,2,1,0} multiply(%mul.6503, %div.1066)
  %mul.6505 = bf16[1,8,1024,14336]{3,2,1,0} multiply(%sharding_constraint.1549, %mul.6503)
  %sub.313 = bf16[1,8,1024,14336]{3,2,1,0} subtract(%jit_silu_.0, %div.1066)
  %mul.6507 = bf16[1,8,1024,14336]{3,2,1,0} multiply(%div.1066, %sub.313)
  %mul.6508 = bf16[1,8,1024,14336]{3,2,1,0} multiply(%mul.6505, %mul.6507)
  %add_any.249 = bf16[1,8,1024,14336]{3,2,1,0} add(%mul.6504, %mul.6508)
  %sharding_constraint.1557 = bf16[1,8,1024,14336]{3,2,1,0} copy(%add_any.249)
  %dot.756 = bf16[1,8,1024,4096]{3,2,1,0} dot(%sharding_constraint.1557, %sharding_constraint.1548), lhs_batch_dims={0}, lhs_contracting_dims={3}, rhs_batch_dims={0}, rhs_contracting_dims={2}
  %add_any.250 = bf16[1,8,1024,4096]{3,2,1,0} add(%dot.754, %dot.756)
  %sharding_constraint.1558 = bf16[1,8,1024,4096]{3,2,1,0} copy(%add_any.250)
  %transpose.196 = bf16[8,1,1024,4096]{3,2,0,1} transpose(%sharding_constraint.1558), dimensions={1,0,2,3}
  %reshape.12149 = bf16[8,1,1,1024,4096]{4,3,2,1,0} reshape(%transpose.196)
  %all-to-all.118 = bf16[8,1,1,1024,4096]{4,3,2,1,0} all-to-all(%reshape.12149), channel_id=549, replica_groups=[1,8]<=[8], dimensions={0}
  %transpose.197 = bf16[1,8,1,1024,4096]{4,3,2,0,1} transpose(%all-to-all.118), dimensions={1,0,2,3,4}
  %reshape.12150 = bf16[1,8,1024,4096]{3,2,1,0} reshape(%transpose.197)
  %dot.757 = bf16[1,4096,4096]{2,1,0} dot(%dot_general.94, %reshape.12150), lhs_batch_dims={0}, lhs_contracting_dims={2,3}, rhs_batch_dims={0}, rhs_contracting_dims={1,2}
  %reshape.12152 = s32[1,4096,2,1]{3,2,1,0} reshape(%slice.548)
  %ge.13 = pred[1,4096,2,3]{3,2,1,0} compare(%concatenate.432, %broadcast.3629), direction=GE
  %le.120 = pred[1,4096,2,3]{3,2,1,0} compare(%concatenate.432, %le.67), direction=LE
  %and.169 = pred[1,4096,2,3]{3,2,1,0} and(%ge.13, %le.120)
  %reduce.678 = pred[1,4096,2]{2,1,0} reduce(%and.169, %constant.5574), dimensions={3}, to_apply=%region_637.16392
  %mul.6509 = bf16[1,8,1024,14336]{3,2,1,0} multiply(%mul.6501, %sharding_constraint.1556)
  %dot.758 = bf16[1,8,1024,4096]{3,2,1,0} dot(%mul.6509, %sharding_constraint.1553), lhs_batch_dims={0}, lhs_contracting_dims={3}, rhs_batch_dims={0}, rhs_contracting_dims={1}
  %sharding_constraint.1559 = bf16[1,8,1024,4096]{3,2,1,0} copy(%dot.758)
  %reshape.12159 = bf16[1,8,1,1024,4096]{4,3,2,1,0} reshape(%sharding_constraint.1559)
  %all-to-all.119 = bf16[1,8,1,1024,4096]{4,3,2,1,0} all-to-all(%reshape.12159), channel_id=550, replica_groups=[1,8]<=[8], dimensions={1}
  %transpose.198 = bf16[8,1,1,1024,4096]{4,3,2,0,1} transpose(%all-to-all.119), dimensions={1,0,2,3,4}
  %reshape.12160 = bf16[8,1,1024,4096]{3,2,1,0} reshape(%transpose.198)
  %dot.759 = bf16[1,4096,8,1024]{3,2,1,0} dot(%sharding_constraint.1550, %reshape.12160), lhs_batch_dims={0}, lhs_contracting_dims={2}, rhs_batch_dims={1}, rhs_contracting_dims={3}
  %sharding_constraint.1560 = bf16[1,4096,8,1024]{3,2,1,0} copy(%dot.759)
  %pad.13 = bf16[1,4096,8,1025]{3,2,1,0} pad(%sharding_constraint.1560, %constant.1190), padding=0_0x0_0x0_0x1_0
  %mul.6510 = bf16[1,4096,8,1025]{3,2,1,0} multiply(%pad.13, %convert_element_type.2451)
  %reduce.679 = bf16[1,4096,8]{2,1,0} reduce(%mul.6510, %constant.1190), dimensions={3}, to_apply=%region_638.16404
  %mul.6511 = bf16[1,4096,8]{2,1,0} multiply(%reduce.679, %convert_element_type.2448)
  %gather.59 = bf16[1,4096,2]{2,1,0} gather(%mul.6511, %subtract.150), offset_dims={}, collapsed_slice_dims={0,1,2}, start_index_map={0,1,2}, index_vector_dim=3, slice_sizes={1,1,1}
  %select_n.535 = bf16[1,4096,2]{2,1,0} select(%reduce.678, %gather.59, %broadcast.3427)
  %select_n.536 = bf16[1,4096,2]{2,1,0} select(%eq.2313, %select_n.535, %broadcast.3427)
  %convert_element_type.2453 = f32[1,4096,2]{2,1,0} convert(%select_n.536)
  %div.1068 = f32[1,4096,2]{2,1,0} divide(%convert_element_type.2453, %div.1064)
  %mul.6513 = f32[1,4096]{1,0} multiply(%reduce.675, %reduce.675)
  %div.1069 = f32[1,4096]{1,0} divide(%add.1847, %mul.6513)
  %mul.6514 = f32[1,4096,2]{2,1,0} broadcast(%div.1069), dimensions={0,1}
  %mul.6515 = f32[1,4096,2]{2,1,0} multiply(%convert_element_type.2453, %mul.6514)
  %mul.6516 = f32[1,4096,2]{2,1,0} multiply(%mul.6515, %exp.217)
  %reduce.680 = f32[1,4096]{1,0} reduce(%mul.6516, %constant.1360), dimensions={2}, to_apply=%region_639.16421
  %neg.243 = f32[1,4096]{1,0} negate(%reduce.680)
  %broadcast_in_dim.696 = f32[1,4096,2]{2,1,0} broadcast(%neg.243), dimensions={0,1}
  %add_any.251 = f32[1,4096,2]{2,1,0} add(%div.1068, %broadcast_in_dim.696)
  %mul.6517 = f32[1,4096,2]{2,1,0} multiply(%add_any.251, %exp.217)
  %convert_element_type.2454 = bf16[1,4096,2]{2,1,0} convert(%mul.6517)
  %scatter.234 = bf16[1,4096,8]{2,1,0} scatter(%broadcast.3379, %reshape.12152, %convert_element_type.2454), update_window_dims={}, inserted_window_dims={2}, scatter_dims_to_operand_dims={2}, input_batching_dims={0,1}, scatter_indices_batching_dims={0,1}, index_vector_dim=3, to_apply=%region_640.16431.clone
  %sharding_constraint.1561 = bf16[1,4096,8]{2,1,0} copy(%scatter.234)
  %dot.760 = bf16[1,4096,4096]{2,1,0} dot(%sharding_constraint.1561, %all-gather.308), lhs_contracting_dims={2}, rhs_contracting_dims={1}
  %add_any.252 = bf16[1,4096,4096]{2,1,0} add(%dot.757, %dot.760)
  %sharding_constraint.1562 = bf16[1,4096,4096]{2,1,0} copy(%add_any.252)
  %mul.6519 = bf16[1,4096,4096]{2,1,0} multiply(%sharding_constraint.1562, %mul.6489)
  %convert_element_type.2455 = f32[1,4096,4096]{2,1,0} convert(%mul.6519)
  %mul.6522 = f32[1,4096,4096]{2,1,0} multiply(%convert_element_type.2455, %mul.6487)
  %mul.6523 = f32[1,4096,4096]{2,1,0} multiply(%convert_element_type.2439, %convert_element_type.2455)
  %reduce.681 = f32[1,4096]{1,0} reduce(%mul.6523, %constant.1360), dimensions={2}, to_apply=%region_641.16447
  %reshape.12173 = f32[1,4096,1]{2,1,0} reshape(%reduce.681)
  %div.1070 = f32[1,4096,1]{2,1,0} divide(%rsqrt.156, %add.2093)
  %mul.6524 = f32[1,4096,1]{2,1,0} multiply(%div.1070, %broadcast.3620)
  %mul.6525 = f32[1,4096,1]{2,1,0} multiply(%reshape.12173, %mul.6524)
  %mul.6526 = f32[1,4096,1]{2,1,0} multiply(%mul.6525, %mul.4455)
  %mul.6527 = f32[1,4096]{1,0} reshape(%mul.6526)
  %mul.6529 = f32[1,4096,4096]{2,1,0} broadcast(%mul.6527), dimensions={0,1}
  %mul.6530 = f32[1,4096,4096]{2,1,0} multiply(%convert_element_type.2439, %mul.6529)
  %add_any.253 = f32[1,4096,4096]{2,1,0} add(%mul.6522, %mul.6530)
  %convert_element_type.2456 = bf16[1,4096,4096]{2,1,0} convert(%add_any.253)
  %add_any.254 = bf16[1,4096,4096]{2,1,0} add(%sharding_constraint.1527, %convert_element_type.2456)
  %get-tuple-element.935 = f32[1,32,4096,1]{3,2,1,0} get-tuple-element(%te_fused_attn_forward_ffi.180), index=1
  %get-tuple-element.936 = u32[2,4]{1,0} get-tuple-element(%te_fused_attn_forward_ffi.180), index=2
  %sharding_constraint.1563 = u32[2,4]{1,0} copy(%get-tuple-element.936)
  %sharding_constraint.1564 = bf16[1,4096,4096]{2,1,0} copy(%add_any.254)
  %dot.761 = bf16[1,4096,32,128]{3,2,1,0} dot(%sharding_constraint.1564, %all-gather.307), lhs_contracting_dims={2}, rhs_contracting_dims={2}
  %sharding_constraint.1565 = bf16[1,4096,32,128]{3,2,1,0} copy(%dot.761)
  %te_fused_attn_backward_ffi.65 = (bf16[1,4096,32,128]{3,2,1,0}, bf16[1,4096,8,128]{3,2,1,0}, bf16[1,4096,8,128]{3,2,1,0}, bf16[0]{0}, u8[134742064]{0}) custom-call(%sharding_constraint.1532, %sharding_constraint.1535, %sharding_constraint.1536, %constant.1403, %get-tuple-element.935, /*index=5*/%sharding_constraint.1563, %get-tuple-element.922, %sharding_constraint.1565, %concatenate.430, %concatenate.431, /*index=10*/%constant.1416, %constant.1416, %constant.1416, %constant.1416, %constant.1416, /*index=15*/%constant.1416), custom_call_target="te_fused_attn_backward_ffi", operand_layout_constraints={bf16[1,4096,32,128]{3,2,1,0}, bf16[1,4096,8,128]{3,2,1,0}, bf16[1,4096,8,128]{3,2,1,0}, bf16[0]{0}, f32[1,32,4096,1]{3,2,1,0}, u32[2,4]{1,0}, bf16[1,4096,32,128]{3,2,1,0}, bf16[1,4096,32,128]{3,2,1,0}, s32[2]{0}, s32[2]{0}, f32[0]{0}, f32[0]{0}, f32[0]{0}, f32[0]{0}, f32[0]{0}, f32[0]{0}}, api_version=API_VERSION_TYPED_FFI, backend_config={attn_heads = 32 : i64, bias_batch = 0 : i64, bias_heads = 0 : i64, bias_type = 0 : i64, deterministic = false, dropout_probability = 0.000000e+00 : f64, input_batch = 1 : i64, is_training = true, kv_max_seqlen = 4096 : i64, mask_type = 3 : i64, max_segments_per_seq = 1 : i64, num_gqa_groups = 8 : i64, q_max_seqlen = 4096 : i64, qk_head_dim = 128 : i64, qkv_layout = 9 : i64, scaling_factor = 1.000000e+00 : f64, v_head_dim = 128 : i64, window_size_left = -1 : i64, window_size_right = -1 : i64}
  %get-tuple-element.937 = bf16[1,4096,8,128]{3,2,1,0} get-tuple-element(%te_fused_attn_backward_ffi.65), index=2
  %sharding_constraint.1566 = bf16[1,4096,8,128]{3,2,1,0} copy(%get-tuple-element.937)
  %dot.762 = bf16[1,4096,4096]{2,1,0} dot(%sharding_constraint.1566, %all-gather.306), lhs_contracting_dims={2,3}, rhs_contracting_dims={1,2}
  %get-tuple-element.938 = bf16[1,4096,8,128]{3,2,1,0} get-tuple-element(%te_fused_attn_backward_ffi.65), index=1
  %sharding_constraint.1567 = bf16[1,4096,8,128]{3,2,1,0} copy(%get-tuple-element.938)
  %slice.550 = bf16[1,4096,8,64]{3,2,1,0} slice(%sharding_constraint.1567), slice={[0:1], [0:4096], [0:8], [64:128]}
  %mul.6534 = bf16[1,4096,8,64]{3,2,1,0} multiply(%slice.550, %mul.6462)
  %slice.551 = bf16[1,4096,8,64]{3,2,1,0} slice(%sharding_constraint.1567), slice={[0:1], [0:4096], [0:8], [0:64]}
  %mul.6537 = bf16[1,4096,8,64]{3,2,1,0} multiply(%slice.551, %mul.6459)
  %add_any.255 = bf16[1,4096,8,64]{3,2,1,0} add(%mul.6534, %mul.6537)
  %mul.6540 = bf16[1,4096,8,64]{3,2,1,0} multiply(%slice.550, %mul.6459)
  %neg.244 = bf16[1,4096,8,64]{3,2,1,0} negate(%slice.551)
  %mul.6543 = bf16[1,4096,8,64]{3,2,1,0} multiply(%neg.244, %mul.6462)
  %add_any.256 = bf16[1,4096,8,64]{3,2,1,0} add(%mul.6540, %mul.6543)
  %concatenate.439 = bf16[1,4096,8,128]{3,2,1,0} concatenate(%add_any.255, %add_any.256), dimensions={3}
  %dot.763 = bf16[1,4096,4096]{2,1,0} dot(%concatenate.439, %all-gather.305), lhs_contracting_dims={2,3}, rhs_contracting_dims={1,2}
  %add_any.257 = bf16[1,4096,4096]{2,1,0} add(%dot.762, %dot.763)
  %sharding_constraint.1568 = bf16[1,4096,4096]{2,1,0} copy(%add_any.257)
  %get-tuple-element.939 = bf16[1,4096,32,128]{3,2,1,0} get-tuple-element(%te_fused_attn_backward_ffi.65), index=0
  %sharding_constraint.1569 = bf16[1,4096,32,128]{3,2,1,0} copy(%get-tuple-element.939)
  %slice.552 = bf16[1,4096,32,64]{3,2,1,0} slice(%sharding_constraint.1569), slice={[0:1], [0:4096], [0:32], [64:128]}
  %mul.6546 = bf16[1,4096,32,64]{3,2,1,0} multiply(%slice.552, %mul.6448)
  %slice.553 = bf16[1,4096,32,64]{3,2,1,0} slice(%sharding_constraint.1569), slice={[0:1], [0:4096], [0:32], [0:64]}
  %mul.6549 = bf16[1,4096,32,64]{3,2,1,0} multiply(%slice.553, %mul.6437)
  %add_any.258 = bf16[1,4096,32,64]{3,2,1,0} add(%mul.6546, %mul.6549)
  %mul.6557 = bf16[1,4096,32,64]{3,2,1,0} multiply(%slice.552, %mul.6437)
  %neg.245 = bf16[1,4096,32,64]{3,2,1,0} negate(%slice.553)
  %mul.6565 = bf16[1,4096,32,64]{3,2,1,0} multiply(%neg.245, %mul.6448)
  %add_any.259 = bf16[1,4096,32,64]{3,2,1,0} add(%mul.6557, %mul.6565)
  %concatenate.440 = bf16[1,4096,32,128]{3,2,1,0} concatenate(%add_any.258, %add_any.259), dimensions={3}
  %dot.764 = bf16[1,4096,4096]{2,1,0} dot(%concatenate.440, %all-gather.304), lhs_contracting_dims={2,3}, rhs_contracting_dims={1,2}
  %sharding_constraint.1570 = bf16[1,4096,4096]{2,1,0} copy(%dot.764)
  %add_any.260 = bf16[1,4096,4096]{2,1,0} add(%sharding_constraint.1568, %sharding_constraint.1570)
  %sharding_constraint.1571 = bf16[1,4096,4096]{2,1,0} copy(%add_any.260)
  %mul.6567 = bf16[1,4096,4096]{2,1,0} multiply(%sharding_constraint.1571, %mul.6425)
  %convert_element_type.2457 = f32[1,4096,4096]{2,1,0} convert(%mul.6567)
  %mul.6570 = f32[1,4096,4096]{2,1,0} multiply(%convert_element_type.2457, %mul.6423)
  %mul.6574 = f32[1,4096,4096]{2,1,0} multiply(%convert_element_type.2425, %convert_element_type.2457)
  %reduce.682 = f32[1,4096]{1,0} reduce(%mul.6574, %constant.1360), dimensions={2}, to_apply=%region_642.16526
  %reshape.12180 = f32[1,4096,1]{2,1,0} reshape(%reduce.682)
  %div.1071 = f32[1,4096,1]{2,1,0} divide(%rsqrt.155, %add.2087)
  %mul.6575 = f32[1,4096,1]{2,1,0} multiply(%div.1071, %broadcast.3620)
  %mul.6576 = f32[1,4096,1]{2,1,0} multiply(%reshape.12180, %mul.6575)
  %mul.6580 = f32[1,4096,1]{2,1,0} multiply(%mul.6576, %mul.4455)
  %mul.6587 = f32[1,4096]{1,0} reshape(%mul.6580)
  %mul.6588 = f32[1,4096,4096]{2,1,0} broadcast(%mul.6587), dimensions={0,1}
  %mul.6589 = f32[1,4096,4096]{2,1,0} multiply(%convert_element_type.2425, %mul.6588)
  %add_any.261 = f32[1,4096,4096]{2,1,0} add(%mul.6570, %mul.6589)
  %convert_element_type.2458 = bf16[1,4096,4096]{2,1,0} convert(%add_any.261)
  %add_any.262 = bf16[1,4096,4096]{2,1,0} add(%add_any.254, %convert_element_type.2458)
  %sharding_constraint.1572 = bf16[1,4096,4096]{2,1,0} copy(%add_any.262)
  %tuple.279 = (bf16[512,8]{1,0}, bf16[1,4096,14336]{2,1,0}, bf16[1,4096,14336]{2,1,0}, bf16[1,14336,4096]{2,1,0}, bf16[4096]{0}, /*index=5*/bf16[4096]{0}, bf16[512,8,128]{2,1,0}, bf16[32,128,512]{2,1,0}, bf16[512,32,128]{2,1,0}, bf16[512,8,128]{2,1,0}, /*index=10*/bf16[1,4096,4096]{2,1,0}, s32[1,4096]{1,0}, s32[1,4096]{1,0}, bf16[1,4096,4096]{2,1,0}) tuple(%param.183, %param.184, %param.185, %param.186, %param.182, /*index=5*/%param.177, %param.179, %param.181, %param.178, %param.180, /*index=10*/%sharding_constraint.570, %param.10, %param.7, %sharding_constraint.1572)
  %remat2.25 = (bf16[512,8]{1,0}, bf16[1,4096,14336]{2,1,0}, bf16[1,4096,14336]{2,1,0}, bf16[1,14336,4096]{2,1,0}, bf16[4096]{0}, /*index=5*/bf16[4096]{0}, bf16[512,8,128]{2,1,0}, bf16[32,128,512]{2,1,0}, bf16[512,32,128]{2,1,0}, bf16[512,8,128]{2,1,0}, /*index=10*/bf16[1,4096,4096]{2,1,0}, s32[1,4096]{1,0}, s32[1,4096]{1,0}, bf16[1,4096,4096]{2,1,0}) opt-barrier(%tuple.279)
  %get-tuple-element.940 = bf16[1,4096,4096]{2,1,0} get-tuple-element(%remat2.25), index=13
  %sharding_constraint.1573 = bf16[1,4096,4096]{2,1,0} copy(%get-tuple-element.940)
  %iota.2601 = s32[1,4096,2,1]{3,2,1,0} iota(), iota_dimension=1
  %get-tuple-element.941 = bf16[1,4096,4096]{2,1,0} get-tuple-element(%remat2.25), index=10
  %sharding_constraint.1574 = bf16[1,4096,4096]{2,1,0} copy(%get-tuple-element.941)
  %convert_element_type.2460 = f32[1,4096,4096]{2,1,0} convert(%sharding_constraint.1574)
  %square.96 = f32[1,4096,4096]{2,1,0} multiply(%convert_element_type.2460, %convert_element_type.2460)
  %reduce.683 = f32[1,4096]{1,0} reduce(%square.96, %constant.1360), dimensions={2}, to_apply=%region_643.16568
  %div.1072 = f32[1,4096]{1,0} multiply(%reduce.683, %broadcast.3412)
  %add.2104 = f32[1,4096]{1,0} add(%div.1072, %broadcast.3413)
  %add.2105 = f32[1,4096,1]{2,1,0} reshape(%add.2104)
  %rsqrt.157 = f32[1,4096,1]{2,1,0} rsqrt(%add.2105)
  %mul.6590 = f32[1,4096]{1,0} reshape(%rsqrt.157)
  %mul.6591 = f32[1,4096,4096]{2,1,0} broadcast(%mul.6590), dimensions={0,1}
  %mul.6592 = f32[1,4096,4096]{2,1,0} multiply(%convert_element_type.2460, %mul.6591)
  %convert_element_type.2461 = bf16[1,4096,4096]{2,1,0} convert(%mul.6592)
  %get-tuple-element.942 = bf16[4096]{0} get-tuple-element(%remat2.25), index=5
  %mul.6593 = bf16[1,4096,4096]{2,1,0} broadcast(%get-tuple-element.942), dimensions={2}
  %mul.6594 = bf16[1,4096,4096]{2,1,0} multiply(%convert_element_type.2461, %mul.6593)
  %sharding_constraint.1575 = bf16[1,4096,4096]{2,1,0} copy(%mul.6594)
  %sharding_constraint.1576 = bf16[1,4096,4096]{2,1,0} copy(%sharding_constraint.1575)
  %get-tuple-element.943 = bf16[512,32,128]{2,1,0} get-tuple-element(%remat2.25), index=8
  %all-gather.310 = bf16[4096,32,128]{2,1,0} all-gather(%get-tuple-element.943), channel_id=553, replica_groups=[1,8]<=[8], dimensions={0}, use_global_device_ids=true
  %dot.765 = bf16[1,4096,32,128]{3,2,1,0} dot(%sharding_constraint.1576, %all-gather.310), lhs_contracting_dims={2}, rhs_contracting_dims={0}
  %slice.554 = bf16[1,4096,32,64]{3,2,1,0} slice(%dot.765), slice={[0:1], [0:4096], [0:32], [0:64]}
  %get-tuple-element.944 = s32[1,4096]{1,0} get-tuple-element(%remat2.25), index=12
  %convert_element_type.2463 = f32[1,4096]{1,0} convert(%get-tuple-element.944)
  %div.1073 = f32[1,4096,1,64]{3,2,1,0} broadcast(%convert_element_type.2463), dimensions={0,1}
  %div.1076 = f32[1,4096,1,64]{3,2,1,0} divide(%div.1073, %div.402)
  %cos.93 = f32[1,4096,1,64]{3,2,1,0} cosine(%div.1076)
  %convert_element_type.2465 = bf16[1,4096,1,64]{3,2,1,0} convert(%cos.93)
  %mul.6597 = bf16[1,4096,64]{2,1,0} reshape(%convert_element_type.2465)
  %mul.6598 = bf16[1,4096,32,64]{3,2,1,0} broadcast(%mul.6597), dimensions={0,1,3}
  %mul.6599 = bf16[1,4096,32,64]{3,2,1,0} multiply(%slice.554, %mul.6598)
  %slice.555 = bf16[1,4096,32,64]{3,2,1,0} slice(%dot.765), slice={[0:1], [0:4096], [0:32], [64:128]}
  %sin.92 = f32[1,4096,1,64]{3,2,1,0} sine(%div.1076)
  %convert_element_type.2466 = bf16[1,4096,1,64]{3,2,1,0} convert(%sin.92)
  %mul.6600 = bf16[1,4096,64]{2,1,0} reshape(%convert_element_type.2466)
  %mul.6601 = bf16[1,4096,32,64]{3,2,1,0} broadcast(%mul.6600), dimensions={0,1,3}
  %mul.6602 = bf16[1,4096,32,64]{3,2,1,0} multiply(%slice.555, %mul.6601)
  %sub.314 = bf16[1,4096,32,64]{3,2,1,0} subtract(%mul.6599, %mul.6602)
  %mul.6608 = bf16[1,4096,32,64]{3,2,1,0} multiply(%slice.555, %mul.6598)
  %mul.6620 = bf16[1,4096,32,64]{3,2,1,0} multiply(%slice.554, %mul.6601)
  %add.2108 = bf16[1,4096,32,64]{3,2,1,0} add(%mul.6608, %mul.6620)
  %concatenate.441 = bf16[1,4096,32,128]{3,2,1,0} concatenate(%sub.314, %add.2108), dimensions={3}
  %sharding_constraint.1577 = bf16[1,4096,32,128]{3,2,1,0} copy(%concatenate.441)
  %get-tuple-element.945 = bf16[512,8,128]{2,1,0} get-tuple-element(%remat2.25), index=6
  %all-gather.311 = bf16[4096,8,128]{2,1,0} all-gather(%get-tuple-element.945), channel_id=554, replica_groups=[1,8]<=[8], dimensions={0}, use_global_device_ids=true
  %dot.766 = bf16[1,4096,8,128]{3,2,1,0} dot(%sharding_constraint.1576, %all-gather.311), lhs_contracting_dims={2}, rhs_contracting_dims={0}
  %slice.556 = bf16[1,4096,8,64]{3,2,1,0} slice(%dot.766), slice={[0:1], [0:4096], [0:8], [0:64]}
  %mul.6623 = bf16[1,4096,8,64]{3,2,1,0} broadcast(%mul.6597), dimensions={0,1,3}
  %mul.6624 = bf16[1,4096,8,64]{3,2,1,0} multiply(%slice.556, %mul.6623)
  %slice.557 = bf16[1,4096,8,64]{3,2,1,0} slice(%dot.766), slice={[0:1], [0:4096], [0:8], [64:128]}
  %mul.6626 = bf16[1,4096,8,64]{3,2,1,0} broadcast(%mul.6600), dimensions={0,1,3}
  %mul.6627 = bf16[1,4096,8,64]{3,2,1,0} multiply(%slice.557, %mul.6626)
  %sub.315 = bf16[1,4096,8,64]{3,2,1,0} subtract(%mul.6624, %mul.6627)
  %mul.6630 = bf16[1,4096,8,64]{3,2,1,0} multiply(%slice.557, %mul.6623)
  %mul.6633 = bf16[1,4096,8,64]{3,2,1,0} multiply(%slice.556, %mul.6626)
  %add.2109 = bf16[1,4096,8,64]{3,2,1,0} add(%mul.6630, %mul.6633)
  %concatenate.442 = bf16[1,4096,8,128]{3,2,1,0} concatenate(%sub.315, %add.2109), dimensions={3}
  %sharding_constraint.1579 = bf16[1,4096,8,128]{3,2,1,0} copy(%concatenate.442)
  %get-tuple-element.946 = bf16[512,8,128]{2,1,0} get-tuple-element(%remat2.25), index=9
  %all-gather.312 = bf16[4096,8,128]{2,1,0} all-gather(%get-tuple-element.946), channel_id=555, replica_groups=[1,8]<=[8], dimensions={0}, use_global_device_ids=true
  %dot.767 = bf16[1,4096,8,128]{3,2,1,0} dot(%sharding_constraint.1576, %all-gather.312), lhs_contracting_dims={2}, rhs_contracting_dims={0}
  %sharding_constraint.1580 = bf16[1,4096,8,128]{3,2,1,0} copy(%dot.767)
  %get-tuple-element.947 = s32[1,4096]{1,0} get-tuple-element(%remat2.25), index=11
  %eq.2320 = s32[1,4096,4096]{2,1,0} broadcast(%get-tuple-element.947), dimensions={0,1}
  %eq.2321 = s32[1,4096,4096]{2,1,0} broadcast(%get-tuple-element.947), dimensions={0,2}
  %eq.2322 = pred[1,4096,4096]{2,1,0} compare(%eq.2320, %eq.2321), direction=EQ
  %and.171 = pred[1,4096,4096]{2,1,0} and(%eq.2322, %and.64)
  %select_n.539 = f32[1,4096,4096]{2,1,0} select(%and.171, %broadcast_in_dim.516, %broadcast_in_dim.517)
  %ne.112 = pred[1,4096,4096]{2,1,0} compare(%select_n.539, %broadcast_in_dim.516), direction=NE
  %not.110 = pred[1,4096,4096]{2,1,0} not(%ne.112)
  %convert_element_type.2471 = s32[1,4096,4096]{2,1,0} convert(%not.110)
  %reduce.684 = s32[1,4096]{1,0} reduce(%convert_element_type.2471, %constant.1181), dimensions={1}, to_apply=%region_644.16664
  %reduce_sum.5720 = s32[1,1,1,4096]{3,2,1,0} reshape(%reduce.684)
  %slice.558 = s32[1,1,1,1]{3,2,1,0} slice(%reduce_sum.5720), slice={[0:1], [0:1], [0:1], [0:1]}
  %squeeze.46 = s32[1,1]{1,0} reshape(%slice.558)
  %reshape.12189 = s32[1]{0} reshape(%squeeze.46)
  %lt.167 = pred[1]{0} compare(%reshape.12189, %constant.1418), direction=LT
  %select_n.540 = s32[1]{0} select(%lt.167, %broadcast_in_dim.518, %reshape.12189)
  %concatenate.443 = s32[2]{0} concatenate(%constant.1418, %select_n.540), dimensions={0}
  %reduce.685 = s32[1,4096]{1,0} reduce(%convert_element_type.2471, %constant.1181), dimensions={2}, to_apply=%region_645.16673
  %reduce_sum.5721 = s32[1,1,1,4096]{3,2,1,0} reshape(%reduce.685)
  %reduce.686 = s32[1,1]{1,0} reduce(%reduce_sum.5721, %constant.1415), dimensions={3,2}, to_apply=%region_646.16679
  %reshape.12190 = s32[1]{0} reshape(%reduce.686)
  %lt.168 = pred[1]{0} compare(%reshape.12190, %constant.1418), direction=LT
  %select_n.541 = s32[1]{0} select(%lt.168, %broadcast_in_dim.518, %reshape.12190)
  %concatenate.444 = s32[2]{0} concatenate(%constant.1418, %select_n.541), dimensions={0}
  %te_fused_attn_forward_ffi.184 = (bf16[1,4096,32,128]{3,2,1,0}, f32[1,32,4096,1]{3,2,1,0}, u32[2,4]{1,0}, u8[48]{0}) custom-call(%sharding_constraint.1577, %sharding_constraint.1579, %sharding_constraint.1580, %constant.1403, %dynamic-slice.38, /*index=5*/%concatenate.443, %concatenate.444, %constant.1416, %constant.1416, %constant.1416, /*index=10*/%constant.1416, %constant.1416, %constant.1416), custom_call_target="te_fused_attn_forward_ffi", operand_layout_constraints={bf16[1,4096,32,128]{3,2,1,0}, bf16[1,4096,8,128]{3,2,1,0}, bf16[1,4096,8,128]{3,2,1,0}, bf16[0]{0}, u32[2]{0}, s32[2]{0}, s32[2]{0}, f32[0]{0}, f32[0]{0}, f32[0]{0}, f32[0]{0}, f32[0]{0}, f32[0]{0}}, api_version=API_VERSION_TYPED_FFI, backend_config={attn_heads = 32 : i64, bias_batch = 0 : i64, bias_heads = 0 : i64, bias_type = 0 : i64, deterministic = false, dropout_probability = 0.000000e+00 : f64, input_batch = 1 : i64, is_training = true, kv_max_seqlen = 4096 : i64, mask_type = 3 : i64, max_segments_per_seq = 1 : i64, num_gqa_groups = 8 : i64, q_max_seqlen = 4096 : i64, qk_head_dim = 128 : i64, qkv_layout = 9 : i64, scaling_factor = 1.000000e+00 : f64, v_head_dim = 128 : i64, window_size_left = -1 : i64, window_size_right = -1 : i64}
  %get-tuple-element.948 = bf16[1,4096,32,128]{3,2,1,0} get-tuple-element(%te_fused_attn_forward_ffi.184), index=0
  %sharding_constraint.1581 = bf16[1,4096,32,128]{3,2,1,0} copy(%get-tuple-element.948)
  %get-tuple-element.949 = bf16[32,128,512]{2,1,0} get-tuple-element(%remat2.25), index=7
  %all-gather.313 = bf16[32,128,4096]{2,1,0} all-gather(%get-tuple-element.949), channel_id=556, replica_groups=[1,8]<=[8], dimensions={2}, use_global_device_ids=true
  %dot.768 = bf16[1,4096,4096]{2,1,0} dot(%sharding_constraint.1581, %all-gather.313), lhs_contracting_dims={2,3}, rhs_contracting_dims={0,1}
  %sharding_constraint.1582 = bf16[1,4096,4096]{2,1,0} copy(%dot.768)
  %add.2110 = bf16[1,4096,4096]{2,1,0} add(%sharding_constraint.1574, %sharding_constraint.1582)
  %convert_element_type.2475 = f32[1,4096,4096]{2,1,0} convert(%add.2110)
  %square.97 = f32[1,4096,4096]{2,1,0} multiply(%convert_element_type.2475, %convert_element_type.2475)
  %reduce.687 = f32[1,4096]{1,0} reduce(%square.97, %constant.1360), dimensions={2}, to_apply=%region_647.16694
  %div.1081 = f32[1,4096]{1,0} multiply(%reduce.687, %broadcast.3412)
  %add.2111 = f32[1,4096]{1,0} add(%div.1081, %broadcast.3413)
  %add.2112 = f32[1,4096,1]{2,1,0} reshape(%add.2111)
  %rsqrt.158 = f32[1,4096,1]{2,1,0} rsqrt(%add.2112)
  %mul.6634 = f32[1,4096]{1,0} reshape(%rsqrt.158)
  %mul.6635 = f32[1,4096,4096]{2,1,0} broadcast(%mul.6634), dimensions={0,1}
  %mul.6636 = f32[1,4096,4096]{2,1,0} multiply(%convert_element_type.2475, %mul.6635)
  %convert_element_type.2477 = bf16[1,4096,4096]{2,1,0} convert(%mul.6636)
  %get-tuple-element.950 = bf16[4096]{0} get-tuple-element(%remat2.25), index=4
  %mul.6637 = bf16[1,4096,4096]{2,1,0} broadcast(%get-tuple-element.950), dimensions={2}
  %mul.6639 = bf16[1,4096,4096]{2,1,0} multiply(%convert_element_type.2477, %mul.6637)
  %sharding_constraint.1583 = bf16[1,4096,4096]{2,1,0} copy(%mul.6639)
  %get-tuple-element.951 = bf16[512,8]{1,0} get-tuple-element(%remat2.25), index=0
  %all-gather.314 = bf16[4096,8]{1,0} all-gather(%get-tuple-element.951), channel_id=557, replica_groups=[1,8]<=[8], dimensions={0}, use_global_device_ids=true
  %dot.769 = bf16[1,4096,8]{2,1,0} dot(%sharding_constraint.1583, %all-gather.314), lhs_contracting_dims={2}, rhs_contracting_dims={0}
  %sharding_constraint.1584 = bf16[1,4096,8]{2,1,0} copy(%dot.769)
  %top_k.138 = bf16[4096,8]{1,0} reshape(%sharding_constraint.1584)
  %top_k.139 = (bf16[4096,2]{1,0}, s32[4096,2]{1,0}) custom-call(%top_k.138), custom_call_target="TopK", called_computations={%compare_greater_than.46.16715.clone}
  %get-tuple-element.952 = bf16[4096,2]{1,0} get-tuple-element(%top_k.139), index=0
  %get-tuple-element.953 = s32[4096,2]{1,0} get-tuple-element(%top_k.139), index=1
  %add.2113 = s32[4096,2]{1,0} add(%get-tuple-element.953, %broadcast.3418)
  %sort.110 = (bf16[4096,2]{1,0}, s32[4096,2]{1,0}) sort(%get-tuple-element.952, %add.2113), dimensions={1}, is_stable=true, to_apply=%compare-value-and-index.46
  %get-tuple-element.955 = s32[4096,2]{1,0} get-tuple-element(%sort.110), index=1
  %slice.560 = s32[4096,2]{1,0} slice(%get-tuple-element.955), slice={[0:4096], [0:2]}
  %top_k.140 = s32[1,4096,2]{2,1,0} reshape(%slice.560)
  %lt.169 = pred[1,4096,2]{2,1,0} compare(%top_k.140, %broadcast.3419), direction=LT
  %add.2114 = s32[1,4096,2]{2,1,0} add(%top_k.140, %broadcast.3420)
  %select_n.542 = s32[1,4096,2]{2,1,0} select(%lt.169, %add.2114, %top_k.140)
  %broadcast_in_dim.701 = s32[1,4096,2,1]{3,2,1,0} reshape(%select_n.542)
  %concatenate.445 = s32[1,4096,2,3]{3,2,1,0} concatenate(%add.1356, %iota.2601, %broadcast_in_dim.701), dimensions={3}
  %subtract.154 = s32[1,4096,2,3]{3,2,1,0} subtract(%concatenate.445, %broadcast.3428)
  %scatter.235 = u32[1,4096,8]{2,1,0} scatter(%dynamic-slice.43, %subtract.154, %add.1401), update_window_dims={}, inserted_window_dims={0,1,2}, scatter_dims_to_operand_dims={0,1,2}, index_vector_dim=3, to_apply=%region_648.16751.clone
  %gather.60 = u32[1,4096,2]{2,1,0} gather(%scatter.235, %subtract.154), offset_dims={}, collapsed_slice_dims={0,1,2}, start_index_map={0,1,2}, index_vector_dim=3, slice_sizes={1,1,1}
  %eq.2323 = pred[1,4096,2]{2,1,0} compare(%add.1401, %gather.60), direction=EQ
  %get-tuple-element.954 = bf16[4096,2]{1,0} get-tuple-element(%sort.110), index=0
  %slice.559 = bf16[4096,2]{1,0} slice(%get-tuple-element.954), slice={[0:4096], [0:2]}
  %convert_element_type.2478 = f32[4096,2]{1,0} convert(%slice.559)
  %convert_element_type.2479 = f32[1,4096,2]{2,1,0} reshape(%convert_element_type.2478)
  %reduce.688 = f32[4096]{0} reduce(%convert_element_type.2478, %constant.1450), dimensions={1}, to_apply=%region_649.16760
  %sub.316 = f32[1,4096]{1,0} reshape(%reduce.688)
  %sub.317 = f32[1,4096,2]{2,1,0} broadcast(%sub.316), dimensions={0,1}
  %sub.318 = f32[1,4096,2]{2,1,0} subtract(%convert_element_type.2479, %sub.317)
  %exp.219 = f32[1,4096,2]{2,1,0} exponential(%sub.318)
  %reduce.689 = f32[1,4096]{1,0} reduce(%exp.219, %constant.1360), dimensions={2}, to_apply=%region_650.16769
  %div.1082 = f32[1,4096,2]{2,1,0} broadcast(%reduce.689), dimensions={0,1}
  %div.1083 = f32[1,4096,2]{2,1,0} divide(%exp.219, %div.1082)
  %convert_element_type.2480 = bf16[1,4096,2]{2,1,0} convert(%div.1083)
  %select_n.543 = bf16[1,4096,2]{2,1,0} select(%eq.2323, %convert_element_type.2480, %broadcast.3427)
  %scatter.236 = bf16[1,4096,8]{2,1,0} scatter(%broadcast.3379, %subtract.154, %select_n.543), update_window_dims={}, inserted_window_dims={0,1,2}, scatter_dims_to_operand_dims={0,1,2}, index_vector_dim=3, to_apply=%region_651.16778.clone
  %eq.2325 = s32[1,4096,2,8]{3,2,1,0} broadcast(%top_k.140), dimensions={0,1,2}
  %iota.2612 = s32[1,4096,2,8]{3,2,1,0} iota(), iota_dimension=3
  %eq.2326 = pred[1,4096,2,8]{3,2,1,0} compare(%eq.2325, %iota.2612), direction=EQ
  %convert_element_type.2481 = s32[1,4096,2,8]{3,2,1,0} convert(%eq.2326)
  %reshape.12222 = s32[1,8192,8]{2,1,0} reshape(%convert_element_type.2481)
  %sharding_constraint.1585 = s32[1,8192,8]{2,1,0} copy(%reshape.12222)
  %reduce-window.46 = s32[1,8192,8]{2,1,0} reduce-window(%sharding_constraint.1585, %constant.1181), window={size=1x8192x1 pad=0_0x8191_0x0_0}, to_apply=%region_652.16790
  %reshape.12224 = s32[1,4096,2,8]{3,2,1,0} reshape(%reduce-window.46)
  %sharding_constraint.1586 = s32[1,4096,2,8]{3,2,1,0} copy(%reshape.12224)
  %le.122 = pred[1,4096,2,8]{3,2,1,0} compare(%sharding_constraint.1586, %broadcast.3429), direction=LE
  %mul.6640 = s32[1,4096,2,8]{3,2,1,0} select(%le.122, %convert_element_type.2481, %broadcast.3430)
  %reduce.690 = s32[1,4096,8]{2,1,0} reduce(%mul.6640, %constant.1181), dimensions={2}, to_apply=%region_653.16799
  %convert_element_type.2482 = bf16[1,4096,8]{2,1,0} convert(%reduce.690)
  %mul.6641 = bf16[1,4096,8]{2,1,0} multiply(%scatter.236, %convert_element_type.2482)
  %mul.6642 = bf16[1,4096,8,1025]{3,2,1,0} broadcast(%mul.6641), dimensions={0,1,2}
  %mul.6643 = s32[1,8192,8]{2,1,0} multiply(%sharding_constraint.1585, %reduce-window.46)
  %reshape.12225 = s32[1,4096,2,8]{3,2,1,0} reshape(%mul.6643)
  %reduce.691 = s32[1,4096,8]{2,1,0} reduce(%reshape.12225, %constant.1181), dimensions={2}, to_apply=%region_654.16809
  %mul.6644 = s32[1,4096,8]{2,1,0} multiply(%reduce.691, %reduce.690)
  %eq.2327 = s32[1,4096,8,1025]{3,2,1,0} broadcast(%mul.6644), dimensions={0,1,2}
  %iota.2613 = s32[1,4096,8,1025]{3,2,1,0} iota(), iota_dimension=3
  %eq.2328 = pred[1,4096,8,1025]{3,2,1,0} compare(%eq.2327, %iota.2613), direction=EQ
  %convert_element_type.2483 = s32[1,4096,8,1025]{3,2,1,0} convert(%eq.2328)
  %convert_element_type.2484 = bf16[1,4096,8,1025]{3,2,1,0} convert(%convert_element_type.2483)
  %mul.6647 = bf16[1,4096,8,1025]{3,2,1,0} multiply(%mul.6642, %convert_element_type.2484)
  %slice.561 = bf16[1,4096,8,1024]{3,2,1,0} slice(%mul.6647), slice={[0:1], [0:4096], [0:8], [1:1025]}
  %convert_element_type.2485 = pred[1,4096,8,1024]{3,2,1,0} compare(%slice.561, %broadcast.3431), direction=NE
  %sharding_constraint.1587 = pred[1,4096,8,1024]{3,2,1,0} copy(%convert_element_type.2485)
  %dot_general.96 = bf16[1,4096,8,1024]{3,2,1,0} convert(%sharding_constraint.1587)
  %dot.770 = bf16[1,8,1024,4096]{3,2,1,0} dot(%dot_general.96, %sharding_constraint.1583), lhs_batch_dims={0}, lhs_contracting_dims={1}, rhs_batch_dims={0}, rhs_contracting_dims={1}
  %reshape.12228 = bf16[1,8,1,1024,4096]{4,3,2,1,0} reshape(%dot.770)
  %all-to-all.120 = bf16[1,8,1,1024,4096]{4,3,2,1,0} all-to-all(%reshape.12228), channel_id=561, replica_groups=[1,8]<=[8], dimensions={1}
  %transpose.199 = bf16[8,1,1,1024,4096]{4,3,2,0,1} transpose(%all-to-all.120), dimensions={1,0,2,3,4}
  %reshape.12229 = bf16[8,1,1024,4096]{3,2,1,0} reshape(%transpose.199)
  %transpose.200 = bf16[1,8,1024,4096]{3,2,0,1} transpose(%reshape.12229), dimensions={1,0,2,3}
  %sharding_constraint.1588 = bf16[1,8,1024,4096]{3,2,0,1} copy(%transpose.200)
  %get-tuple-element.958 = bf16[1,4096,14336]{2,1,0} get-tuple-element(%remat2.25), index=1
  %sharding_constraint.1589 = bf16[1,4096,14336]{2,1,0} copy(%get-tuple-element.958)
  %dot.771 = bf16[1,8,1024,14336]{3,2,1,0} dot(%sharding_constraint.1588, %sharding_constraint.1589), lhs_batch_dims={0}, lhs_contracting_dims={3}, rhs_batch_dims={0}, rhs_contracting_dims={1}
  %sharding_constraint.1590 = bf16[1,8,1024,14336]{3,2,1,0} copy(%dot.771)
  %neg.246 = bf16[1,8,1024,14336]{3,2,1,0} negate(%sharding_constraint.1590)
  %exp.220 = bf16[1,8,1024,14336]{3,2,1,0} exponential(%neg.246)
  %add.2119 = bf16[1,8,1024,14336]{3,2,1,0} add(%exp.220, %jit_silu_.0)
  %div.1084 = bf16[1,8,1024,14336]{3,2,1,0} divide(%jit_silu_.0, %add.2119)
  %mul.6648 = bf16[1,8,1024,14336]{3,2,1,0} multiply(%sharding_constraint.1590, %div.1084)
  %sharding_constraint.1591 = bf16[1,4096,4096]{2,1,0} copy(%sharding_constraint.1573)
  %sharding_constraint.1592 = bf16[1,4096,8,1024]{3,2,1,0} copy(%slice.561)
  %dot.772 = bf16[1,4096,8,1024]{3,2,1,0} dot(%sharding_constraint.1591, %sharding_constraint.1592), lhs_batch_dims={0}, lhs_contracting_dims={1}, rhs_batch_dims={0}, rhs_contracting_dims={1}
  %reshape.12232 = bf16[1,4096,8,1,1024]{4,3,2,1,0} reshape(%dot.772)
  %all-to-all.121 = bf16[1,4096,8,1,1024]{4,3,2,1,0} all-to-all(%reshape.12232), channel_id=562, replica_groups=[1,8]<=[8], dimensions={2}
  %transpose.201 = bf16[8,1,4096,1,1024]{4,3,0,2,1} transpose(%all-to-all.121), dimensions={2,0,1,3,4}
  %reshape.12233 = bf16[8,4096,1,1024]{3,2,1,0} reshape(%transpose.201)
  %transpose.202 = bf16[1,8,1024,4096]{2,0,3,1} transpose(%reshape.12233), dimensions={2,0,3,1}
  %sharding_constraint.1593 = bf16[1,8,1024,4096]{2,0,3,1} copy(%transpose.202)
  %get-tuple-element.959 = bf16[1,14336,4096]{2,1,0} get-tuple-element(%remat2.25), index=3
  %sharding_constraint.1594 = bf16[1,14336,4096]{2,1,0} copy(%get-tuple-element.959)
  %dot.773 = bf16[1,8,1024,14336]{3,2,1,0} dot(%sharding_constraint.1593, %sharding_constraint.1594), lhs_batch_dims={0}, lhs_contracting_dims={3}, rhs_batch_dims={0}, rhs_contracting_dims={2}
  %mul.6649 = bf16[1,8,1024,14336]{3,2,1,0} multiply(%mul.6648, %dot.773)
  %sharding_constraint.1595 = bf16[1,8,1024,14336]{3,2,1,0} copy(%mul.6649)
  %get-tuple-element.960 = bf16[1,4096,14336]{2,1,0} get-tuple-element(%remat2.25), index=2
  %sharding_constraint.1596 = bf16[1,4096,14336]{2,1,0} copy(%get-tuple-element.960)
  %dot.774 = bf16[1,8,1024,4096]{3,2,1,0} dot(%sharding_constraint.1595, %sharding_constraint.1596), lhs_batch_dims={0}, lhs_contracting_dims={3}, rhs_batch_dims={0}, rhs_contracting_dims={2}
  %dot.775 = bf16[1,8,1024,14336]{3,2,1,0} dot(%sharding_constraint.1588, %sharding_constraint.1596), lhs_batch_dims={0}, lhs_contracting_dims={3}, rhs_batch_dims={0}, rhs_contracting_dims={1}
  %sharding_constraint.1597 = bf16[1,8,1024,14336]{3,2,1,0} copy(%dot.775)
  %mul.6650 = bf16[1,8,1024,14336]{3,2,1,0} multiply(%dot.773, %sharding_constraint.1597)
  %mul.6651 = bf16[1,8,1024,14336]{3,2,1,0} multiply(%mul.6650, %div.1084)
  %mul.6652 = bf16[1,8,1024,14336]{3,2,1,0} multiply(%sharding_constraint.1590, %mul.6650)
  %sub.319 = bf16[1,8,1024,14336]{3,2,1,0} subtract(%jit_silu_.0, %div.1084)
  %mul.6654 = bf16[1,8,1024,14336]{3,2,1,0} multiply(%div.1084, %sub.319)
  %mul.6655 = bf16[1,8,1024,14336]{3,2,1,0} multiply(%mul.6652, %mul.6654)
  %add_any.263 = bf16[1,8,1024,14336]{3,2,1,0} add(%mul.6651, %mul.6655)
  %sharding_constraint.1598 = bf16[1,8,1024,14336]{3,2,1,0} copy(%add_any.263)
  %dot.776 = bf16[1,8,1024,4096]{3,2,1,0} dot(%sharding_constraint.1598, %sharding_constraint.1589), lhs_batch_dims={0}, lhs_contracting_dims={3}, rhs_batch_dims={0}, rhs_contracting_dims={2}
  %add_any.264 = bf16[1,8,1024,4096]{3,2,1,0} add(%dot.774, %dot.776)
  %sharding_constraint.1599 = bf16[1,8,1024,4096]{3,2,1,0} copy(%add_any.264)
  %transpose.203 = bf16[8,1,1024,4096]{3,2,0,1} transpose(%sharding_constraint.1599), dimensions={1,0,2,3}
  %reshape.12236 = bf16[8,1,1,1024,4096]{4,3,2,1,0} reshape(%transpose.203)
  %all-to-all.122 = bf16[8,1,1,1024,4096]{4,3,2,1,0} all-to-all(%reshape.12236), channel_id=563, replica_groups=[1,8]<=[8], dimensions={0}
  %transpose.204 = bf16[1,8,1,1024,4096]{4,3,2,0,1} transpose(%all-to-all.122), dimensions={1,0,2,3,4}
  %reshape.12237 = bf16[1,8,1024,4096]{3,2,1,0} reshape(%transpose.204)
  %dot.777 = bf16[1,4096,4096]{2,1,0} dot(%dot_general.96, %reshape.12237), lhs_batch_dims={0}, lhs_contracting_dims={2,3}, rhs_batch_dims={0}, rhs_contracting_dims={1,2}
  %reshape.12239 = s32[1,4096,2,1]{3,2,1,0} reshape(%slice.560)
  %ge.14 = pred[1,4096,2,3]{3,2,1,0} compare(%concatenate.445, %broadcast.3629), direction=GE
  %le.124 = pred[1,4096,2,3]{3,2,1,0} compare(%concatenate.445, %le.67), direction=LE
  %and.172 = pred[1,4096,2,3]{3,2,1,0} and(%ge.14, %le.124)
  %reduce.692 = pred[1,4096,2]{2,1,0} reduce(%and.172, %constant.5574), dimensions={3}, to_apply=%region_655.16866
  %mul.6656 = bf16[1,8,1024,14336]{3,2,1,0} multiply(%mul.6648, %sharding_constraint.1597)
  %dot.778 = bf16[1,8,1024,4096]{3,2,1,0} dot(%mul.6656, %sharding_constraint.1594), lhs_batch_dims={0}, lhs_contracting_dims={3}, rhs_batch_dims={0}, rhs_contracting_dims={1}
  %sharding_constraint.1600 = bf16[1,8,1024,4096]{3,2,1,0} copy(%dot.778)
  %reshape.12246 = bf16[1,8,1,1024,4096]{4,3,2,1,0} reshape(%sharding_constraint.1600)
  %all-to-all.123 = bf16[1,8,1,1024,4096]{4,3,2,1,0} all-to-all(%reshape.12246), channel_id=564, replica_groups=[1,8]<=[8], dimensions={1}
  %transpose.205 = bf16[8,1,1,1024,4096]{4,3,2,0,1} transpose(%all-to-all.123), dimensions={1,0,2,3,4}
  %reshape.12247 = bf16[8,1,1024,4096]{3,2,1,0} reshape(%transpose.205)
  %dot.779 = bf16[1,4096,8,1024]{3,2,1,0} dot(%sharding_constraint.1591, %reshape.12247), lhs_batch_dims={0}, lhs_contracting_dims={2}, rhs_batch_dims={1}, rhs_contracting_dims={3}
  %sharding_constraint.1601 = bf16[1,4096,8,1024]{3,2,1,0} copy(%dot.779)
  %pad.14 = bf16[1,4096,8,1025]{3,2,1,0} pad(%sharding_constraint.1601, %constant.1190), padding=0_0x0_0x0_0x1_0
  %mul.6661 = bf16[1,4096,8,1025]{3,2,1,0} multiply(%pad.14, %convert_element_type.2484)
  %reduce.693 = bf16[1,4096,8]{2,1,0} reduce(%mul.6661, %constant.1190), dimensions={3}, to_apply=%region_656.16878
  %mul.6662 = bf16[1,4096,8]{2,1,0} multiply(%reduce.693, %convert_element_type.2482)
  %gather.61 = bf16[1,4096,2]{2,1,0} gather(%mul.6662, %subtract.154), offset_dims={}, collapsed_slice_dims={0,1,2}, start_index_map={0,1,2}, index_vector_dim=3, slice_sizes={1,1,1}
  %select_n.544 = bf16[1,4096,2]{2,1,0} select(%reduce.692, %gather.61, %broadcast.3427)
  %select_n.545 = bf16[1,4096,2]{2,1,0} select(%eq.2323, %select_n.544, %broadcast.3427)
  %convert_element_type.2486 = f32[1,4096,2]{2,1,0} convert(%select_n.545)
  %div.1086 = f32[1,4096,2]{2,1,0} divide(%convert_element_type.2486, %div.1082)
  %mul.6663 = f32[1,4096]{1,0} multiply(%reduce.689, %reduce.689)
  %div.1087 = f32[1,4096]{1,0} divide(%add.1847, %mul.6663)
  %mul.6664 = f32[1,4096,2]{2,1,0} broadcast(%div.1087), dimensions={0,1}
  %mul.6665 = f32[1,4096,2]{2,1,0} multiply(%convert_element_type.2486, %mul.6664)
  %mul.6666 = f32[1,4096,2]{2,1,0} multiply(%mul.6665, %exp.219)
  %reduce.694 = f32[1,4096]{1,0} reduce(%mul.6666, %constant.1360), dimensions={2}, to_apply=%region_657.16895
  %neg.247 = f32[1,4096]{1,0} negate(%reduce.694)
  %broadcast_in_dim.702 = f32[1,4096,2]{2,1,0} broadcast(%neg.247), dimensions={0,1}
  %add_any.265 = f32[1,4096,2]{2,1,0} add(%div.1086, %broadcast_in_dim.702)
  %mul.6667 = f32[1,4096,2]{2,1,0} multiply(%add_any.265, %exp.219)
  %convert_element_type.2487 = bf16[1,4096,2]{2,1,0} convert(%mul.6667)
  %scatter.237 = bf16[1,4096,8]{2,1,0} scatter(%broadcast.3379, %reshape.12239, %convert_element_type.2487), update_window_dims={}, inserted_window_dims={2}, scatter_dims_to_operand_dims={2}, input_batching_dims={0,1}, scatter_indices_batching_dims={0,1}, index_vector_dim=3, to_apply=%region_658.16905.clone
  %sharding_constraint.1602 = bf16[1,4096,8]{2,1,0} copy(%scatter.237)
  %dot.780 = bf16[1,4096,4096]{2,1,0} dot(%sharding_constraint.1602, %all-gather.314), lhs_contracting_dims={2}, rhs_contracting_dims={1}
  %add_any.266 = bf16[1,4096,4096]{2,1,0} add(%dot.777, %dot.780)
  %sharding_constraint.1604 = bf16[1,4096,4096]{2,1,0} copy(%add_any.266)
  %mul.6669 = bf16[1,4096,4096]{2,1,0} multiply(%sharding_constraint.1604, %mul.6637)
  %convert_element_type.2489 = f32[1,4096,4096]{2,1,0} convert(%mul.6669)
  %mul.6672 = f32[1,4096,4096]{2,1,0} multiply(%convert_element_type.2489, %mul.6635)
  %mul.6673 = f32[1,4096,4096]{2,1,0} multiply(%convert_element_type.2475, %convert_element_type.2489)
  %reduce.695 = f32[1,4096]{1,0} reduce(%mul.6673, %constant.1360), dimensions={2}, to_apply=%region_659.16921
  %reshape.12259 = f32[1,4096,1]{2,1,0} reshape(%reduce.695)
  %div.1088 = f32[1,4096,1]{2,1,0} divide(%rsqrt.158, %add.2112)
  %mul.6674 = f32[1,4096,1]{2,1,0} multiply(%div.1088, %broadcast.3620)
  %mul.6677 = f32[1,4096,1]{2,1,0} multiply(%reshape.12259, %mul.6674)
  %mul.6680 = f32[1,4096,1]{2,1,0} multiply(%mul.6677, %mul.4455)
  %mul.6681 = f32[1,4096]{1,0} reshape(%mul.6680)
  %mul.6682 = f32[1,4096,4096]{2,1,0} broadcast(%mul.6681), dimensions={0,1}
  %mul.6683 = f32[1,4096,4096]{2,1,0} multiply(%convert_element_type.2475, %mul.6682)
  %add_any.267 = f32[1,4096,4096]{2,1,0} add(%mul.6672, %mul.6683)
  %convert_element_type.2490 = bf16[1,4096,4096]{2,1,0} convert(%add_any.267)
  %add_any.268 = bf16[1,4096,4096]{2,1,0} add(%sharding_constraint.1573, %convert_element_type.2490)
  %get-tuple-element.961 = f32[1,32,4096,1]{3,2,1,0} get-tuple-element(%te_fused_attn_forward_ffi.184), index=1
  %get-tuple-element.962 = u32[2,4]{1,0} get-tuple-element(%te_fused_attn_forward_ffi.184), index=2
  %sharding_constraint.1605 = u32[2,4]{1,0} copy(%get-tuple-element.962)
  %sharding_constraint.1606 = bf16[1,4096,4096]{2,1,0} copy(%add_any.268)
  %dot.781 = bf16[1,4096,32,128]{3,2,1,0} dot(%sharding_constraint.1606, %all-gather.313), lhs_contracting_dims={2}, rhs_contracting_dims={2}
  %sharding_constraint.1607 = bf16[1,4096,32,128]{3,2,1,0} copy(%dot.781)
  %te_fused_attn_backward_ffi.70 = (bf16[1,4096,32,128]{3,2,1,0}, bf16[1,4096,8,128]{3,2,1,0}, bf16[1,4096,8,128]{3,2,1,0}, bf16[0]{0}, u8[134742064]{0}) custom-call(%sharding_constraint.1577, %sharding_constraint.1579, %sharding_constraint.1580, %constant.1403, %get-tuple-element.961, /*index=5*/%sharding_constraint.1605, %get-tuple-element.948, %sharding_constraint.1607, %concatenate.443, %concatenate.444, /*index=10*/%constant.1416, %constant.1416, %constant.1416, %constant.1416, %constant.1416, /*index=15*/%constant.1416), custom_call_target="te_fused_attn_backward_ffi", operand_layout_constraints={bf16[1,4096,32,128]{3,2,1,0}, bf16[1,4096,8,128]{3,2,1,0}, bf16[1,4096,8,128]{3,2,1,0}, bf16[0]{0}, f32[1,32,4096,1]{3,2,1,0}, u32[2,4]{1,0}, bf16[1,4096,32,128]{3,2,1,0}, bf16[1,4096,32,128]{3,2,1,0}, s32[2]{0}, s32[2]{0}, f32[0]{0}, f32[0]{0}, f32[0]{0}, f32[0]{0}, f32[0]{0}, f32[0]{0}}, api_version=API_VERSION_TYPED_FFI, backend_config={attn_heads = 32 : i64, bias_batch = 0 : i64, bias_heads = 0 : i64, bias_type = 0 : i64, deterministic = false, dropout_probability = 0.000000e+00 : f64, input_batch = 1 : i64, is_training = true, kv_max_seqlen = 4096 : i64, mask_type = 3 : i64, max_segments_per_seq = 1 : i64, num_gqa_groups = 8 : i64, q_max_seqlen = 4096 : i64, qk_head_dim = 128 : i64, qkv_layout = 9 : i64, scaling_factor = 1.000000e+00 : f64, v_head_dim = 128 : i64, window_size_left = -1 : i64, window_size_right = -1 : i64}
  %get-tuple-element.963 = bf16[1,4096,8,128]{3,2,1,0} get-tuple-element(%te_fused_attn_backward_ffi.70), index=2
  %sharding_constraint.1608 = bf16[1,4096,8,128]{3,2,1,0} copy(%get-tuple-element.963)
  %dot.782 = bf16[1,4096,4096]{2,1,0} dot(%sharding_constraint.1608, %all-gather.312), lhs_contracting_dims={2,3}, rhs_contracting_dims={1,2}
  %get-tuple-element.964 = bf16[1,4096,8,128]{3,2,1,0} get-tuple-element(%te_fused_attn_backward_ffi.70), index=1
  %sharding_constraint.1609 = bf16[1,4096,8,128]{3,2,1,0} copy(%get-tuple-element.964)
  %slice.562 = bf16[1,4096,8,64]{3,2,1,0} slice(%sharding_constraint.1609), slice={[0:1], [0:4096], [0:8], [64:128]}
  %mul.6686 = bf16[1,4096,8,64]{3,2,1,0} multiply(%slice.562, %mul.6626)
  %slice.563 = bf16[1,4096,8,64]{3,2,1,0} slice(%sharding_constraint.1609), slice={[0:1], [0:4096], [0:8], [0:64]}
  %mul.6689 = bf16[1,4096,8,64]{3,2,1,0} multiply(%slice.563, %mul.6623)
  %add_any.269 = bf16[1,4096,8,64]{3,2,1,0} add(%mul.6686, %mul.6689)
  %mul.6692 = bf16[1,4096,8,64]{3,2,1,0} multiply(%slice.562, %mul.6623)
  %neg.248 = bf16[1,4096,8,64]{3,2,1,0} negate(%slice.563)
  %mul.6695 = bf16[1,4096,8,64]{3,2,1,0} multiply(%neg.248, %mul.6626)
  %add_any.270 = bf16[1,4096,8,64]{3,2,1,0} add(%mul.6692, %mul.6695)
  %concatenate.452 = bf16[1,4096,8,128]{3,2,1,0} concatenate(%add_any.269, %add_any.270), dimensions={3}
  %dot.783 = bf16[1,4096,4096]{2,1,0} dot(%concatenate.452, %all-gather.311), lhs_contracting_dims={2,3}, rhs_contracting_dims={1,2}
  %add_any.271 = bf16[1,4096,4096]{2,1,0} add(%dot.782, %dot.783)
  %sharding_constraint.1611 = bf16[1,4096,4096]{2,1,0} copy(%add_any.271)
  %get-tuple-element.965 = bf16[1,4096,32,128]{3,2,1,0} get-tuple-element(%te_fused_attn_backward_ffi.70), index=0
  %sharding_constraint.1612 = bf16[1,4096,32,128]{3,2,1,0} copy(%get-tuple-element.965)
  %slice.564 = bf16[1,4096,32,64]{3,2,1,0} slice(%sharding_constraint.1612), slice={[0:1], [0:4096], [0:32], [64:128]}
  %mul.6706 = bf16[1,4096,32,64]{3,2,1,0} multiply(%slice.564, %mul.6601)
  %slice.565 = bf16[1,4096,32,64]{3,2,1,0} slice(%sharding_constraint.1612), slice={[0:1], [0:4096], [0:32], [0:64]}
  %mul.6709 = bf16[1,4096,32,64]{3,2,1,0} multiply(%slice.565, %mul.6598)
  %add_any.272 = bf16[1,4096,32,64]{3,2,1,0} add(%mul.6706, %mul.6709)
  %mul.6712 = bf16[1,4096,32,64]{3,2,1,0} multiply(%slice.564, %mul.6598)
  %neg.249 = bf16[1,4096,32,64]{3,2,1,0} negate(%slice.565)
  %mul.6716 = bf16[1,4096,32,64]{3,2,1,0} multiply(%neg.249, %mul.6601)
  %add_any.273 = bf16[1,4096,32,64]{3,2,1,0} add(%mul.6712, %mul.6716)
  %concatenate.453 = bf16[1,4096,32,128]{3,2,1,0} concatenate(%add_any.272, %add_any.273), dimensions={3}
  %dot.784 = bf16[1,4096,4096]{2,1,0} dot(%concatenate.453, %all-gather.310), lhs_contracting_dims={2,3}, rhs_contracting_dims={1,2}
  %sharding_constraint.1613 = bf16[1,4096,4096]{2,1,0} copy(%dot.784)
  %add_any.274 = bf16[1,4096,4096]{2,1,0} add(%sharding_constraint.1611, %sharding_constraint.1613)
  %sharding_constraint.1614 = bf16[1,4096,4096]{2,1,0} copy(%add_any.274)
  %mul.6718 = bf16[1,4096,4096]{2,1,0} multiply(%sharding_constraint.1614, %mul.6593)
  %convert_element_type.2491 = f32[1,4096,4096]{2,1,0} convert(%mul.6718)
  %mul.6721 = f32[1,4096,4096]{2,1,0} multiply(%convert_element_type.2491, %mul.6591)
  %mul.6722 = f32[1,4096,4096]{2,1,0} multiply(%convert_element_type.2460, %convert_element_type.2491)
  %reduce.696 = f32[1,4096]{1,0} reduce(%mul.6722, %constant.1360), dimensions={2}, to_apply=%region_660.17000
  %reshape.12267 = f32[1,4096,1]{2,1,0} reshape(%reduce.696)
  %div.1089 = f32[1,4096,1]{2,1,0} divide(%rsqrt.157, %add.2105)
  %mul.6723 = f32[1,4096,1]{2,1,0} multiply(%div.1089, %broadcast.3620)
  %mul.6724 = f32[1,4096,1]{2,1,0} multiply(%reshape.12267, %mul.6723)
  %mul.6725 = f32[1,4096,1]{2,1,0} multiply(%mul.6724, %mul.4455)
  %mul.6726 = f32[1,4096]{1,0} reshape(%mul.6725)
  %mul.6727 = f32[1,4096,4096]{2,1,0} broadcast(%mul.6726), dimensions={0,1}
  %mul.6728 = f32[1,4096,4096]{2,1,0} multiply(%convert_element_type.2460, %mul.6727)
  %add_any.275 = f32[1,4096,4096]{2,1,0} add(%mul.6721, %mul.6728)
  %convert_element_type.2492 = bf16[1,4096,4096]{2,1,0} convert(%add_any.275)
  %add_any.276 = bf16[1,4096,4096]{2,1,0} add(%add_any.268, %convert_element_type.2492)
  %sharding_constraint.1615 = bf16[1,4096,4096]{2,1,0} copy(%add_any.276)
  %tuple.283 = (bf16[512,8]{1,0}, bf16[1,4096,14336]{2,1,0}, bf16[1,4096,14336]{2,1,0}, bf16[1,14336,4096]{2,1,0}, bf16[4096]{0}, /*index=5*/bf16[4096]{0}, bf16[512,8,128]{2,1,0}, bf16[32,128,512]{2,1,0}, bf16[512,32,128]{2,1,0}, bf16[512,8,128]{2,1,0}, /*index=10*/bf16[1,4096,4096]{2,1,0}, s32[1,4096]{1,0}, s32[1,4096]{1,0}, bf16[1,4096,4096]{2,1,0}) tuple(%param.173, %param.174, %param.175, %param.176, %param.172, /*index=5*/%param.167, %param.169, %param.171, %param.168, %param.170, /*index=10*/%sharding_constraint.546, %param.10, %param.7, %sharding_constraint.1615)
  %remat2.26 = (bf16[512,8]{1,0}, bf16[1,4096,14336]{2,1,0}, bf16[1,4096,14336]{2,1,0}, bf16[1,14336,4096]{2,1,0}, bf16[4096]{0}, /*index=5*/bf16[4096]{0}, bf16[512,8,128]{2,1,0}, bf16[32,128,512]{2,1,0}, bf16[512,32,128]{2,1,0}, bf16[512,8,128]{2,1,0}, /*index=10*/bf16[1,4096,4096]{2,1,0}, s32[1,4096]{1,0}, s32[1,4096]{1,0}, bf16[1,4096,4096]{2,1,0}) opt-barrier(%tuple.283)
  %get-tuple-element.966 = bf16[1,4096,4096]{2,1,0} get-tuple-element(%remat2.26), index=13
  %sharding_constraint.1616 = bf16[1,4096,4096]{2,1,0} copy(%get-tuple-element.966)
  %iota.2618 = s32[1,4096,2,1]{3,2,1,0} iota(), iota_dimension=1
  %get-tuple-element.967 = bf16[1,4096,4096]{2,1,0} get-tuple-element(%remat2.26), index=10
  %sharding_constraint.1617 = bf16[1,4096,4096]{2,1,0} copy(%get-tuple-element.967)
  %convert_element_type.2493 = f32[1,4096,4096]{2,1,0} convert(%sharding_constraint.1617)
  %square.98 = f32[1,4096,4096]{2,1,0} multiply(%convert_element_type.2493, %convert_element_type.2493)
  %reduce.697 = f32[1,4096]{1,0} reduce(%square.98, %constant.1360), dimensions={2}, to_apply=%region_661.17042
  %div.1090 = f32[1,4096]{1,0} multiply(%reduce.697, %broadcast.3412)
  %add.2124 = f32[1,4096]{1,0} add(%div.1090, %broadcast.3413)
  %add.2125 = f32[1,4096,1]{2,1,0} reshape(%add.2124)
  %rsqrt.159 = f32[1,4096,1]{2,1,0} rsqrt(%add.2125)
  %mul.6729 = f32[1,4096]{1,0} reshape(%rsqrt.159)
  %mul.6730 = f32[1,4096,4096]{2,1,0} broadcast(%mul.6729), dimensions={0,1}
  %mul.6731 = f32[1,4096,4096]{2,1,0} multiply(%convert_element_type.2493, %mul.6730)
  %convert_element_type.2494 = bf16[1,4096,4096]{2,1,0} convert(%mul.6731)
  %get-tuple-element.968 = bf16[4096]{0} get-tuple-element(%remat2.26), index=5
  %mul.6732 = bf16[1,4096,4096]{2,1,0} broadcast(%get-tuple-element.968), dimensions={2}
  %mul.6741 = bf16[1,4096,4096]{2,1,0} multiply(%convert_element_type.2494, %mul.6732)
  %sharding_constraint.1618 = bf16[1,4096,4096]{2,1,0} copy(%mul.6741)
  %sharding_constraint.1619 = bf16[1,4096,4096]{2,1,0} copy(%sharding_constraint.1618)
  %get-tuple-element.969 = bf16[512,32,128]{2,1,0} get-tuple-element(%remat2.26), index=8
  %all-gather.316 = bf16[4096,32,128]{2,1,0} all-gather(%get-tuple-element.969), channel_id=567, replica_groups=[1,8]<=[8], dimensions={0}, use_global_device_ids=true
  %dot.785 = bf16[1,4096,32,128]{3,2,1,0} dot(%sharding_constraint.1619, %all-gather.316), lhs_contracting_dims={2}, rhs_contracting_dims={0}
  %slice.566 = bf16[1,4096,32,64]{3,2,1,0} slice(%dot.785), slice={[0:1], [0:4096], [0:32], [0:64]}
  %get-tuple-element.970 = s32[1,4096]{1,0} get-tuple-element(%remat2.26), index=12
  %convert_element_type.2496 = f32[1,4096]{1,0} convert(%get-tuple-element.970)
  %div.1091 = f32[1,4096,1,64]{3,2,1,0} broadcast(%convert_element_type.2496), dimensions={0,1}
  %div.1095 = f32[1,4096,1,64]{3,2,1,0} divide(%div.1091, %div.402)
  %cos.95 = f32[1,4096,1,64]{3,2,1,0} cosine(%div.1095)
  %convert_element_type.2498 = bf16[1,4096,1,64]{3,2,1,0} convert(%cos.95)
  %mul.6751 = bf16[1,4096,64]{2,1,0} reshape(%convert_element_type.2498)
  %mul.6752 = bf16[1,4096,32,64]{3,2,1,0} broadcast(%mul.6751), dimensions={0,1,3}
  %mul.6753 = bf16[1,4096,32,64]{3,2,1,0} multiply(%slice.566, %mul.6752)
  %slice.567 = bf16[1,4096,32,64]{3,2,1,0} slice(%dot.785), slice={[0:1], [0:4096], [0:32], [64:128]}
  %sin.94 = f32[1,4096,1,64]{3,2,1,0} sine(%div.1095)
  %convert_element_type.2500 = bf16[1,4096,1,64]{3,2,1,0} convert(%sin.94)
  %mul.6755 = bf16[1,4096,64]{2,1,0} reshape(%convert_element_type.2500)
  %mul.6756 = bf16[1,4096,32,64]{3,2,1,0} broadcast(%mul.6755), dimensions={0,1,3}
  %mul.6757 = bf16[1,4096,32,64]{3,2,1,0} multiply(%slice.567, %mul.6756)
  %sub.320 = bf16[1,4096,32,64]{3,2,1,0} subtract(%mul.6753, %mul.6757)
  %mul.6760 = bf16[1,4096,32,64]{3,2,1,0} multiply(%slice.567, %mul.6752)
  %mul.6764 = bf16[1,4096,32,64]{3,2,1,0} multiply(%slice.566, %mul.6756)
  %add.2126 = bf16[1,4096,32,64]{3,2,1,0} add(%mul.6760, %mul.6764)
  %concatenate.454 = bf16[1,4096,32,128]{3,2,1,0} concatenate(%sub.320, %add.2126), dimensions={3}
  %sharding_constraint.1620 = bf16[1,4096,32,128]{3,2,1,0} copy(%concatenate.454)
  %get-tuple-element.971 = bf16[512,8,128]{2,1,0} get-tuple-element(%remat2.26), index=6
  %all-gather.317 = bf16[4096,8,128]{2,1,0} all-gather(%get-tuple-element.971), channel_id=568, replica_groups=[1,8]<=[8], dimensions={0}, use_global_device_ids=true
  %dot.786 = bf16[1,4096,8,128]{3,2,1,0} dot(%sharding_constraint.1619, %all-gather.317), lhs_contracting_dims={2}, rhs_contracting_dims={0}
  %slice.568 = bf16[1,4096,8,64]{3,2,1,0} slice(%dot.786), slice={[0:1], [0:4096], [0:8], [0:64]}
  %mul.6767 = bf16[1,4096,8,64]{3,2,1,0} broadcast(%mul.6751), dimensions={0,1,3}
  %mul.6771 = bf16[1,4096,8,64]{3,2,1,0} multiply(%slice.568, %mul.6767)
  %slice.569 = bf16[1,4096,8,64]{3,2,1,0} slice(%dot.786), slice={[0:1], [0:4096], [0:8], [64:128]}
  %mul.6781 = bf16[1,4096,8,64]{3,2,1,0} broadcast(%mul.6755), dimensions={0,1,3}
  %mul.6790 = bf16[1,4096,8,64]{3,2,1,0} multiply(%slice.569, %mul.6781)
  %sub.321 = bf16[1,4096,8,64]{3,2,1,0} subtract(%mul.6771, %mul.6790)
  %mul.6793 = bf16[1,4096,8,64]{3,2,1,0} multiply(%slice.569, %mul.6767)
  %mul.6796 = bf16[1,4096,8,64]{3,2,1,0} multiply(%slice.568, %mul.6781)
  %add.2127 = bf16[1,4096,8,64]{3,2,1,0} add(%mul.6793, %mul.6796)
  %concatenate.455 = bf16[1,4096,8,128]{3,2,1,0} concatenate(%sub.321, %add.2127), dimensions={3}
  %sharding_constraint.1622 = bf16[1,4096,8,128]{3,2,1,0} copy(%concatenate.455)
  %get-tuple-element.972 = bf16[512,8,128]{2,1,0} get-tuple-element(%remat2.26), index=9
  %all-gather.318 = bf16[4096,8,128]{2,1,0} all-gather(%get-tuple-element.972), channel_id=569, replica_groups=[1,8]<=[8], dimensions={0}, use_global_device_ids=true
  %dot.787 = bf16[1,4096,8,128]{3,2,1,0} dot(%sharding_constraint.1619, %all-gather.318), lhs_contracting_dims={2}, rhs_contracting_dims={0}
  %sharding_constraint.1623 = bf16[1,4096,8,128]{3,2,1,0} copy(%dot.787)
  %get-tuple-element.973 = s32[1,4096]{1,0} get-tuple-element(%remat2.26), index=11
  %eq.2330 = s32[1,4096,4096]{2,1,0} broadcast(%get-tuple-element.973), dimensions={0,1}
  %eq.2331 = s32[1,4096,4096]{2,1,0} broadcast(%get-tuple-element.973), dimensions={0,2}
  %eq.2332 = pred[1,4096,4096]{2,1,0} compare(%eq.2330, %eq.2331), direction=EQ
  %and.174 = pred[1,4096,4096]{2,1,0} and(%eq.2332, %and.64)
  %select_n.548 = f32[1,4096,4096]{2,1,0} select(%and.174, %broadcast_in_dim.516, %broadcast_in_dim.517)
  %ne.113 = pred[1,4096,4096]{2,1,0} compare(%select_n.548, %broadcast_in_dim.516), direction=NE
  %not.111 = pred[1,4096,4096]{2,1,0} not(%ne.113)
  %convert_element_type.2507 = s32[1,4096,4096]{2,1,0} convert(%not.111)
  %reduce.698 = s32[1,4096]{1,0} reduce(%convert_element_type.2507, %constant.1181), dimensions={1}, to_apply=%region_662.17138
  %reduce_sum.5722 = s32[1,1,1,4096]{3,2,1,0} reshape(%reduce.698)
  %slice.570 = s32[1,1,1,1]{3,2,1,0} slice(%reduce_sum.5722), slice={[0:1], [0:1], [0:1], [0:1]}
  %squeeze.47 = s32[1,1]{1,0} reshape(%slice.570)
  %reshape.12274 = s32[1]{0} reshape(%squeeze.47)
  %lt.172 = pred[1]{0} compare(%reshape.12274, %constant.1418), direction=LT
  %select_n.549 = s32[1]{0} select(%lt.172, %broadcast_in_dim.518, %reshape.12274)
  %concatenate.456 = s32[2]{0} concatenate(%constant.1418, %select_n.549), dimensions={0}
  %reduce.699 = s32[1,4096]{1,0} reduce(%convert_element_type.2507, %constant.1181), dimensions={2}, to_apply=%region_663.17147
  %reduce_sum.5723 = s32[1,1,1,4096]{3,2,1,0} reshape(%reduce.699)
  %reduce.700 = s32[1,1]{1,0} reduce(%reduce_sum.5723, %constant.1415), dimensions={3,2}, to_apply=%region_664.17153
  %reshape.12275 = s32[1]{0} reshape(%reduce.700)
  %lt.173 = pred[1]{0} compare(%reshape.12275, %constant.1418), direction=LT
  %select_n.550 = s32[1]{0} select(%lt.173, %broadcast_in_dim.518, %reshape.12275)
  %concatenate.457 = s32[2]{0} concatenate(%constant.1418, %select_n.550), dimensions={0}
  %te_fused_attn_forward_ffi.188 = (bf16[1,4096,32,128]{3,2,1,0}, f32[1,32,4096,1]{3,2,1,0}, u32[2,4]{1,0}, u8[48]{0}) custom-call(%sharding_constraint.1620, %sharding_constraint.1622, %sharding_constraint.1623, %constant.1403, %dynamic-slice.38, /*index=5*/%concatenate.456, %concatenate.457, %constant.1416, %constant.1416, %constant.1416, /*index=10*/%constant.1416, %constant.1416, %constant.1416), custom_call_target="te_fused_attn_forward_ffi", operand_layout_constraints={bf16[1,4096,32,128]{3,2,1,0}, bf16[1,4096,8,128]{3,2,1,0}, bf16[1,4096,8,128]{3,2,1,0}, bf16[0]{0}, u32[2]{0}, s32[2]{0}, s32[2]{0}, f32[0]{0}, f32[0]{0}, f32[0]{0}, f32[0]{0}, f32[0]{0}, f32[0]{0}}, api_version=API_VERSION_TYPED_FFI, backend_config={attn_heads = 32 : i64, bias_batch = 0 : i64, bias_heads = 0 : i64, bias_type = 0 : i64, deterministic = false, dropout_probability = 0.000000e+00 : f64, input_batch = 1 : i64, is_training = true, kv_max_seqlen = 4096 : i64, mask_type = 3 : i64, max_segments_per_seq = 1 : i64, num_gqa_groups = 8 : i64, q_max_seqlen = 4096 : i64, qk_head_dim = 128 : i64, qkv_layout = 9 : i64, scaling_factor = 1.000000e+00 : f64, v_head_dim = 128 : i64, window_size_left = -1 : i64, window_size_right = -1 : i64}
  %get-tuple-element.974 = bf16[1,4096,32,128]{3,2,1,0} get-tuple-element(%te_fused_attn_forward_ffi.188), index=0
  %sharding_constraint.1627 = bf16[1,4096,32,128]{3,2,1,0} copy(%get-tuple-element.974)
  %get-tuple-element.975 = bf16[32,128,512]{2,1,0} get-tuple-element(%remat2.26), index=7
  %all-gather.319 = bf16[32,128,4096]{2,1,0} all-gather(%get-tuple-element.975), channel_id=570, replica_groups=[1,8]<=[8], dimensions={2}, use_global_device_ids=true
  %dot.788 = bf16[1,4096,4096]{2,1,0} dot(%sharding_constraint.1627, %all-gather.319), lhs_contracting_dims={2,3}, rhs_contracting_dims={0,1}
  %sharding_constraint.1628 = bf16[1,4096,4096]{2,1,0} copy(%dot.788)
  %add.2128 = bf16[1,4096,4096]{2,1,0} add(%sharding_constraint.1617, %sharding_constraint.1628)
  %convert_element_type.2509 = f32[1,4096,4096]{2,1,0} convert(%add.2128)
  %square.99 = f32[1,4096,4096]{2,1,0} multiply(%convert_element_type.2509, %convert_element_type.2509)
  %reduce.701 = f32[1,4096]{1,0} reduce(%square.99, %constant.1360), dimensions={2}, to_apply=%region_665.17168
  %div.1100 = f32[1,4096]{1,0} multiply(%reduce.701, %broadcast.3412)
  %add.2129 = f32[1,4096]{1,0} add(%div.1100, %broadcast.3413)
  %add.2130 = f32[1,4096,1]{2,1,0} reshape(%add.2129)
  %rsqrt.160 = f32[1,4096,1]{2,1,0} rsqrt(%add.2130)
  %mul.6797 = f32[1,4096]{1,0} reshape(%rsqrt.160)
  %mul.6798 = f32[1,4096,4096]{2,1,0} broadcast(%mul.6797), dimensions={0,1}
  %mul.6800 = f32[1,4096,4096]{2,1,0} multiply(%convert_element_type.2509, %mul.6798)
  %convert_element_type.2510 = bf16[1,4096,4096]{2,1,0} convert(%mul.6800)
  %get-tuple-element.976 = bf16[4096]{0} get-tuple-element(%remat2.26), index=4
  %mul.6801 = bf16[1,4096,4096]{2,1,0} broadcast(%get-tuple-element.976), dimensions={2}
  %mul.6802 = bf16[1,4096,4096]{2,1,0} multiply(%convert_element_type.2510, %mul.6801)
  %sharding_constraint.1629 = bf16[1,4096,4096]{2,1,0} copy(%mul.6802)
  %get-tuple-element.977 = bf16[512,8]{1,0} get-tuple-element(%remat2.26), index=0
  %all-gather.320 = bf16[4096,8]{1,0} all-gather(%get-tuple-element.977), channel_id=571, replica_groups=[1,8]<=[8], dimensions={0}, use_global_device_ids=true
  %dot.789 = bf16[1,4096,8]{2,1,0} dot(%sharding_constraint.1629, %all-gather.320), lhs_contracting_dims={2}, rhs_contracting_dims={0}
  %sharding_constraint.1630 = bf16[1,4096,8]{2,1,0} copy(%dot.789)
  %top_k.141 = bf16[4096,8]{1,0} reshape(%sharding_constraint.1630)
  %top_k.142 = (bf16[4096,2]{1,0}, s32[4096,2]{1,0}) custom-call(%top_k.141), custom_call_target="TopK", called_computations={%compare_greater_than.47.17189.clone}
  %get-tuple-element.978 = bf16[4096,2]{1,0} get-tuple-element(%top_k.142), index=0
  %get-tuple-element.979 = s32[4096,2]{1,0} get-tuple-element(%top_k.142), index=1
  %add.2131 = s32[4096,2]{1,0} add(%get-tuple-element.979, %broadcast.3418)
  %sort.111 = (bf16[4096,2]{1,0}, s32[4096,2]{1,0}) sort(%get-tuple-element.978, %add.2131), dimensions={1}, is_stable=true, to_apply=%compare-value-and-index.47
  %get-tuple-element.981 = s32[4096,2]{1,0} get-tuple-element(%sort.111), index=1
  %slice.572 = s32[4096,2]{1,0} slice(%get-tuple-element.981), slice={[0:4096], [0:2]}
  %top_k.143 = s32[1,4096,2]{2,1,0} reshape(%slice.572)
  %lt.174 = pred[1,4096,2]{2,1,0} compare(%top_k.143, %broadcast.3419), direction=LT
  %add.2132 = s32[1,4096,2]{2,1,0} add(%top_k.143, %broadcast.3420)
  %select_n.551 = s32[1,4096,2]{2,1,0} select(%lt.174, %add.2132, %top_k.143)
  %broadcast_in_dim.707 = s32[1,4096,2,1]{3,2,1,0} reshape(%select_n.551)
  %concatenate.458 = s32[1,4096,2,3]{3,2,1,0} concatenate(%add.1356, %iota.2618, %broadcast_in_dim.707), dimensions={3}
  %subtract.158 = s32[1,4096,2,3]{3,2,1,0} subtract(%concatenate.458, %broadcast.3428)
  %scatter.238 = u32[1,4096,8]{2,1,0} scatter(%dynamic-slice.43, %subtract.158, %add.1401), update_window_dims={}, inserted_window_dims={0,1,2}, scatter_dims_to_operand_dims={0,1,2}, index_vector_dim=3, to_apply=%region_666.17225.clone
  %gather.62 = u32[1,4096,2]{2,1,0} gather(%scatter.238, %subtract.158), offset_dims={}, collapsed_slice_dims={0,1,2}, start_index_map={0,1,2}, index_vector_dim=3, slice_sizes={1,1,1}
  %eq.2333 = pred[1,4096,2]{2,1,0} compare(%add.1401, %gather.62), direction=EQ
  %get-tuple-element.980 = bf16[4096,2]{1,0} get-tuple-element(%sort.111), index=0
  %slice.571 = bf16[4096,2]{1,0} slice(%get-tuple-element.980), slice={[0:4096], [0:2]}
  %convert_element_type.2513 = f32[4096,2]{1,0} convert(%slice.571)
  %convert_element_type.2515 = f32[1,4096,2]{2,1,0} reshape(%convert_element_type.2513)
  %reduce.702 = f32[4096]{0} reduce(%convert_element_type.2513, %constant.1450), dimensions={1}, to_apply=%region_667.17234
  %sub.322 = f32[1,4096]{1,0} reshape(%reduce.702)
  %sub.323 = f32[1,4096,2]{2,1,0} broadcast(%sub.322), dimensions={0,1}
  %sub.324 = f32[1,4096,2]{2,1,0} subtract(%convert_element_type.2515, %sub.323)
  %exp.221 = f32[1,4096,2]{2,1,0} exponential(%sub.324)
  %reduce.703 = f32[1,4096]{1,0} reduce(%exp.221, %constant.1360), dimensions={2}, to_apply=%region_668.17243
  %div.1101 = f32[1,4096,2]{2,1,0} broadcast(%reduce.703), dimensions={0,1}
  %div.1102 = f32[1,4096,2]{2,1,0} divide(%exp.221, %div.1101)
  %convert_element_type.2516 = bf16[1,4096,2]{2,1,0} convert(%div.1102)
  %select_n.552 = bf16[1,4096,2]{2,1,0} select(%eq.2333, %convert_element_type.2516, %broadcast.3427)
  %scatter.239 = bf16[1,4096,8]{2,1,0} scatter(%broadcast.3379, %subtract.158, %select_n.552), update_window_dims={}, inserted_window_dims={0,1,2}, scatter_dims_to_operand_dims={0,1,2}, index_vector_dim=3, to_apply=%region_669.17252.clone
  %eq.2335 = s32[1,4096,2,8]{3,2,1,0} broadcast(%top_k.143), dimensions={0,1,2}
  %iota.2629 = s32[1,4096,2,8]{3,2,1,0} iota(), iota_dimension=3
  %eq.2336 = pred[1,4096,2,8]{3,2,1,0} compare(%eq.2335, %iota.2629), direction=EQ
  %convert_element_type.2517 = s32[1,4096,2,8]{3,2,1,0} convert(%eq.2336)
  %reshape.12309 = s32[1,8192,8]{2,1,0} reshape(%convert_element_type.2517)
  %sharding_constraint.1631 = s32[1,8192,8]{2,1,0} copy(%reshape.12309)
  %reduce-window.47 = s32[1,8192,8]{2,1,0} reduce-window(%sharding_constraint.1631, %constant.1181), window={size=1x8192x1 pad=0_0x8191_0x0_0}, to_apply=%region_670.17264
  %reshape.12311 = s32[1,4096,2,8]{3,2,1,0} reshape(%reduce-window.47)
  %sharding_constraint.1632 = s32[1,4096,2,8]{3,2,1,0} copy(%reshape.12311)
  %le.126 = pred[1,4096,2,8]{3,2,1,0} compare(%sharding_constraint.1632, %broadcast.3429), direction=LE
  %mul.6804 = s32[1,4096,2,8]{3,2,1,0} select(%le.126, %convert_element_type.2517, %broadcast.3430)
  %reduce.704 = s32[1,4096,8]{2,1,0} reduce(%mul.6804, %constant.1181), dimensions={2}, to_apply=%region_671.17273
  %convert_element_type.2518 = bf16[1,4096,8]{2,1,0} convert(%reduce.704)
  %mul.6805 = bf16[1,4096,8]{2,1,0} multiply(%scatter.239, %convert_element_type.2518)
  %mul.6806 = bf16[1,4096,8,1025]{3,2,1,0} broadcast(%mul.6805), dimensions={0,1,2}
  %mul.6807 = s32[1,8192,8]{2,1,0} multiply(%sharding_constraint.1631, %reduce-window.47)
  %reshape.12312 = s32[1,4096,2,8]{3,2,1,0} reshape(%mul.6807)
  %reduce.705 = s32[1,4096,8]{2,1,0} reduce(%reshape.12312, %constant.1181), dimensions={2}, to_apply=%region_672.17283
  %mul.6808 = s32[1,4096,8]{2,1,0} multiply(%reduce.705, %reduce.704)
  %eq.2337 = s32[1,4096,8,1025]{3,2,1,0} broadcast(%mul.6808), dimensions={0,1,2}
  %iota.2630 = s32[1,4096,8,1025]{3,2,1,0} iota(), iota_dimension=3
  %eq.2338 = pred[1,4096,8,1025]{3,2,1,0} compare(%eq.2337, %iota.2630), direction=EQ
  %convert_element_type.2519 = s32[1,4096,8,1025]{3,2,1,0} convert(%eq.2338)
  %convert_element_type.2520 = bf16[1,4096,8,1025]{3,2,1,0} convert(%convert_element_type.2519)
  %mul.6809 = bf16[1,4096,8,1025]{3,2,1,0} multiply(%mul.6806, %convert_element_type.2520)
  %slice.573 = bf16[1,4096,8,1024]{3,2,1,0} slice(%mul.6809), slice={[0:1], [0:4096], [0:8], [1:1025]}
  %convert_element_type.2521 = pred[1,4096,8,1024]{3,2,1,0} compare(%slice.573, %broadcast.3431), direction=NE
  %sharding_constraint.1633 = pred[1,4096,8,1024]{3,2,1,0} copy(%convert_element_type.2521)
  %dot_general.98 = bf16[1,4096,8,1024]{3,2,1,0} convert(%sharding_constraint.1633)
  %dot.790 = bf16[1,8,1024,4096]{3,2,1,0} dot(%dot_general.98, %sharding_constraint.1629), lhs_batch_dims={0}, lhs_contracting_dims={1}, rhs_batch_dims={0}, rhs_contracting_dims={1}
  %reshape.12315 = bf16[1,8,1,1024,4096]{4,3,2,1,0} reshape(%dot.790)
  %all-to-all.124 = bf16[1,8,1,1024,4096]{4,3,2,1,0} all-to-all(%reshape.12315), channel_id=575, replica_groups=[1,8]<=[8], dimensions={1}
  %transpose.206 = bf16[8,1,1,1024,4096]{4,3,2,0,1} transpose(%all-to-all.124), dimensions={1,0,2,3,4}
  %reshape.12316 = bf16[8,1,1024,4096]{3,2,1,0} reshape(%transpose.206)
  %transpose.207 = bf16[1,8,1024,4096]{3,2,0,1} transpose(%reshape.12316), dimensions={1,0,2,3}
  %sharding_constraint.1634 = bf16[1,8,1024,4096]{3,2,0,1} copy(%transpose.207)
  %get-tuple-element.984 = bf16[1,4096,14336]{2,1,0} get-tuple-element(%remat2.26), index=1
  %sharding_constraint.1635 = bf16[1,4096,14336]{2,1,0} copy(%get-tuple-element.984)
  %dot.791 = bf16[1,8,1024,14336]{3,2,1,0} dot(%sharding_constraint.1634, %sharding_constraint.1635), lhs_batch_dims={0}, lhs_contracting_dims={3}, rhs_batch_dims={0}, rhs_contracting_dims={1}
  %sharding_constraint.1637 = bf16[1,8,1024,14336]{3,2,1,0} copy(%dot.791)
  %neg.250 = bf16[1,8,1024,14336]{3,2,1,0} negate(%sharding_constraint.1637)
  %exp.222 = bf16[1,8,1024,14336]{3,2,1,0} exponential(%neg.250)
  %add.2139 = bf16[1,8,1024,14336]{3,2,1,0} add(%exp.222, %jit_silu_.0)
  %div.1103 = bf16[1,8,1024,14336]{3,2,1,0} divide(%jit_silu_.0, %add.2139)
  %mul.6810 = bf16[1,8,1024,14336]{3,2,1,0} multiply(%sharding_constraint.1637, %div.1103)
  %sharding_constraint.1639 = bf16[1,4096,4096]{2,1,0} copy(%sharding_constraint.1616)
  %sharding_constraint.1640 = bf16[1,4096,8,1024]{3,2,1,0} copy(%slice.573)
  %dot.792 = bf16[1,4096,8,1024]{3,2,1,0} dot(%sharding_constraint.1639, %sharding_constraint.1640), lhs_batch_dims={0}, lhs_contracting_dims={1}, rhs_batch_dims={0}, rhs_contracting_dims={1}
  %reshape.12319 = bf16[1,4096,8,1,1024]{4,3,2,1,0} reshape(%dot.792)
  %all-to-all.125 = bf16[1,4096,8,1,1024]{4,3,2,1,0} all-to-all(%reshape.12319), channel_id=576, replica_groups=[1,8]<=[8], dimensions={2}
  %transpose.208 = bf16[8,1,4096,1,1024]{4,3,0,2,1} transpose(%all-to-all.125), dimensions={2,0,1,3,4}
  %reshape.12320 = bf16[8,4096,1,1024]{3,2,1,0} reshape(%transpose.208)
  %transpose.209 = bf16[1,8,1024,4096]{2,0,3,1} transpose(%reshape.12320), dimensions={2,0,3,1}
  %sharding_constraint.1641 = bf16[1,8,1024,4096]{2,0,3,1} copy(%transpose.209)
  %get-tuple-element.985 = bf16[1,14336,4096]{2,1,0} get-tuple-element(%remat2.26), index=3
  %sharding_constraint.1644 = bf16[1,14336,4096]{2,1,0} copy(%get-tuple-element.985)
  %dot.793 = bf16[1,8,1024,14336]{3,2,1,0} dot(%sharding_constraint.1641, %sharding_constraint.1644), lhs_batch_dims={0}, lhs_contracting_dims={3}, rhs_batch_dims={0}, rhs_contracting_dims={2}
  %mul.6811 = bf16[1,8,1024,14336]{3,2,1,0} multiply(%mul.6810, %dot.793)
  %sharding_constraint.1646 = bf16[1,8,1024,14336]{3,2,1,0} copy(%mul.6811)
  %get-tuple-element.986 = bf16[1,4096,14336]{2,1,0} get-tuple-element(%remat2.26), index=2
  %sharding_constraint.1647 = bf16[1,4096,14336]{2,1,0} copy(%get-tuple-element.986)
  %dot.794 = bf16[1,8,1024,4096]{3,2,1,0} dot(%sharding_constraint.1646, %sharding_constraint.1647), lhs_batch_dims={0}, lhs_contracting_dims={3}, rhs_batch_dims={0}, rhs_contracting_dims={2}
  %dot.795 = bf16[1,8,1024,14336]{3,2,1,0} dot(%sharding_constraint.1634, %sharding_constraint.1647), lhs_batch_dims={0}, lhs_contracting_dims={3}, rhs_batch_dims={0}, rhs_contracting_dims={1}
  %sharding_constraint.1648 = bf16[1,8,1024,14336]{3,2,1,0} copy(%dot.795)
  %mul.6812 = bf16[1,8,1024,14336]{3,2,1,0} multiply(%dot.793, %sharding_constraint.1648)
  %mul.6813 = bf16[1,8,1024,14336]{3,2,1,0} multiply(%mul.6812, %div.1103)
  %mul.6814 = bf16[1,8,1024,14336]{3,2,1,0} multiply(%sharding_constraint.1637, %mul.6812)
  %sub.325 = bf16[1,8,1024,14336]{3,2,1,0} subtract(%jit_silu_.0, %div.1103)
  %mul.6815 = bf16[1,8,1024,14336]{3,2,1,0} multiply(%div.1103, %sub.325)
  %mul.6816 = bf16[1,8,1024,14336]{3,2,1,0} multiply(%mul.6814, %mul.6815)
  %add_any.277 = bf16[1,8,1024,14336]{3,2,1,0} add(%mul.6813, %mul.6816)
  %sharding_constraint.1649 = bf16[1,8,1024,14336]{3,2,1,0} copy(%add_any.277)
  %dot.796 = bf16[1,8,1024,4096]{3,2,1,0} dot(%sharding_constraint.1649, %sharding_constraint.1635), lhs_batch_dims={0}, lhs_contracting_dims={3}, rhs_batch_dims={0}, rhs_contracting_dims={2}
  %add_any.278 = bf16[1,8,1024,4096]{3,2,1,0} add(%dot.794, %dot.796)
  %sharding_constraint.1650 = bf16[1,8,1024,4096]{3,2,1,0} copy(%add_any.278)
  %transpose.210 = bf16[8,1,1024,4096]{3,2,0,1} transpose(%sharding_constraint.1650), dimensions={1,0,2,3}
  %reshape.12323 = bf16[8,1,1,1024,4096]{4,3,2,1,0} reshape(%transpose.210)
  %all-to-all.126 = bf16[8,1,1,1024,4096]{4,3,2,1,0} all-to-all(%reshape.12323), channel_id=577, replica_groups=[1,8]<=[8], dimensions={0}
  %transpose.211 = bf16[1,8,1,1024,4096]{4,3,2,0,1} transpose(%all-to-all.126), dimensions={1,0,2,3,4}
  %reshape.12324 = bf16[1,8,1024,4096]{3,2,1,0} reshape(%transpose.211)
  %dot.797 = bf16[1,4096,4096]{2,1,0} dot(%dot_general.98, %reshape.12324), lhs_batch_dims={0}, lhs_contracting_dims={2,3}, rhs_batch_dims={0}, rhs_contracting_dims={1,2}
  %reshape.12326 = s32[1,4096,2,1]{3,2,1,0} reshape(%slice.572)
  %ge.15 = pred[1,4096,2,3]{3,2,1,0} compare(%concatenate.458, %broadcast.3629), direction=GE
  %le.128 = pred[1,4096,2,3]{3,2,1,0} compare(%concatenate.458, %le.67), direction=LE
  %and.175 = pred[1,4096,2,3]{3,2,1,0} and(%ge.15, %le.128)
  %reduce.706 = pred[1,4096,2]{2,1,0} reduce(%and.175, %constant.5574), dimensions={3}, to_apply=%region_673.17340
  %mul.6817 = bf16[1,8,1024,14336]{3,2,1,0} multiply(%mul.6810, %sharding_constraint.1648)
  %dot.798 = bf16[1,8,1024,4096]{3,2,1,0} dot(%mul.6817, %sharding_constraint.1644), lhs_batch_dims={0}, lhs_contracting_dims={3}, rhs_batch_dims={0}, rhs_contracting_dims={1}
  %sharding_constraint.1652 = bf16[1,8,1024,4096]{3,2,1,0} copy(%dot.798)
  %reshape.12333 = bf16[1,8,1,1024,4096]{4,3,2,1,0} reshape(%sharding_constraint.1652)
  %all-to-all.127 = bf16[1,8,1,1024,4096]{4,3,2,1,0} all-to-all(%reshape.12333), channel_id=578, replica_groups=[1,8]<=[8], dimensions={1}
  %transpose.212 = bf16[8,1,1,1024,4096]{4,3,2,0,1} transpose(%all-to-all.127), dimensions={1,0,2,3,4}
  %reshape.12334 = bf16[8,1,1024,4096]{3,2,1,0} reshape(%transpose.212)
  %dot.799 = bf16[1,4096,8,1024]{3,2,1,0} dot(%sharding_constraint.1639, %reshape.12334), lhs_batch_dims={0}, lhs_contracting_dims={2}, rhs_batch_dims={1}, rhs_contracting_dims={3}
  %sharding_constraint.1654 = bf16[1,4096,8,1024]{3,2,1,0} copy(%dot.799)
  %pad.15 = bf16[1,4096,8,1025]{3,2,1,0} pad(%sharding_constraint.1654, %constant.1190), padding=0_0x0_0x0_0x1_0
  %mul.6818 = bf16[1,4096,8,1025]{3,2,1,0} multiply(%pad.15, %convert_element_type.2520)
  %reduce.707 = bf16[1,4096,8]{2,1,0} reduce(%mul.6818, %constant.1190), dimensions={3}, to_apply=%region_674.17352
  %mul.6819 = bf16[1,4096,8]{2,1,0} multiply(%reduce.707, %convert_element_type.2518)
  %gather.63 = bf16[1,4096,2]{2,1,0} gather(%mul.6819, %subtract.158), offset_dims={}, collapsed_slice_dims={0,1,2}, start_index_map={0,1,2}, index_vector_dim=3, slice_sizes={1,1,1}
  %select_n.553 = bf16[1,4096,2]{2,1,0} select(%reduce.706, %gather.63, %broadcast.3427)
  %select_n.554 = bf16[1,4096,2]{2,1,0} select(%eq.2333, %select_n.553, %broadcast.3427)
  %convert_element_type.2522 = f32[1,4096,2]{2,1,0} convert(%select_n.554)
  %div.1105 = f32[1,4096,2]{2,1,0} divide(%convert_element_type.2522, %div.1101)
  %mul.6820 = f32[1,4096]{1,0} multiply(%reduce.703, %reduce.703)
  %div.1106 = f32[1,4096]{1,0} divide(%add.1847, %mul.6820)
  %mul.6821 = f32[1,4096,2]{2,1,0} broadcast(%div.1106), dimensions={0,1}
  %mul.6824 = f32[1,4096,2]{2,1,0} multiply(%convert_element_type.2522, %mul.6821)
  %mul.6827 = f32[1,4096,2]{2,1,0} multiply(%mul.6824, %exp.221)
  %reduce.708 = f32[1,4096]{1,0} reduce(%mul.6827, %constant.1360), dimensions={2}, to_apply=%region_675.17369
  %neg.251 = f32[1,4096]{1,0} negate(%reduce.708)
  %broadcast_in_dim.708 = f32[1,4096,2]{2,1,0} broadcast(%neg.251), dimensions={0,1}
  %add_any.279 = f32[1,4096,2]{2,1,0} add(%div.1105, %broadcast_in_dim.708)
  %mul.6828 = f32[1,4096,2]{2,1,0} multiply(%add_any.279, %exp.221)
  %convert_element_type.2523 = bf16[1,4096,2]{2,1,0} convert(%mul.6828)
  %scatter.240 = bf16[1,4096,8]{2,1,0} scatter(%broadcast.3379, %reshape.12326, %convert_element_type.2523), update_window_dims={}, inserted_window_dims={2}, scatter_dims_to_operand_dims={2}, input_batching_dims={0,1}, scatter_indices_batching_dims={0,1}, index_vector_dim=3, to_apply=%region_676.17379.clone
  %sharding_constraint.1656 = bf16[1,4096,8]{2,1,0} copy(%scatter.240)
  %dot.800 = bf16[1,4096,4096]{2,1,0} dot(%sharding_constraint.1656, %all-gather.320), lhs_contracting_dims={2}, rhs_contracting_dims={1}
  %add_any.280 = bf16[1,4096,4096]{2,1,0} add(%dot.797, %dot.800)
  %sharding_constraint.1658 = bf16[1,4096,4096]{2,1,0} copy(%add_any.280)
  %mul.6830 = bf16[1,4096,4096]{2,1,0} multiply(%sharding_constraint.1658, %mul.6801)
  %convert_element_type.2524 = f32[1,4096,4096]{2,1,0} convert(%mul.6830)
  %mul.6833 = f32[1,4096,4096]{2,1,0} multiply(%convert_element_type.2524, %mul.6798)
  %mul.6835 = f32[1,4096,4096]{2,1,0} multiply(%convert_element_type.2509, %convert_element_type.2524)
  %reduce.709 = f32[1,4096]{1,0} reduce(%mul.6835, %constant.1360), dimensions={2}, to_apply=%region_677.17395
  %reshape.12346 = f32[1,4096,1]{2,1,0} reshape(%reduce.709)
  %div.1107 = f32[1,4096,1]{2,1,0} divide(%rsqrt.160, %add.2130)
  %mul.6836 = f32[1,4096,1]{2,1,0} multiply(%div.1107, %broadcast.3620)
  %mul.6837 = f32[1,4096,1]{2,1,0} multiply(%reshape.12346, %mul.6836)
  %mul.6838 = f32[1,4096,1]{2,1,0} multiply(%mul.6837, %mul.4455)
  %mul.6839 = f32[1,4096]{1,0} reshape(%mul.6838)
  %mul.6840 = f32[1,4096,4096]{2,1,0} broadcast(%mul.6839), dimensions={0,1}
  %mul.6841 = f32[1,4096,4096]{2,1,0} multiply(%convert_element_type.2509, %mul.6840)
  %add_any.281 = f32[1,4096,4096]{2,1,0} add(%mul.6833, %mul.6841)
  %convert_element_type.2525 = bf16[1,4096,4096]{2,1,0} convert(%add_any.281)
  %add_any.282 = bf16[1,4096,4096]{2,1,0} add(%sharding_constraint.1616, %convert_element_type.2525)
  %get-tuple-element.987 = f32[1,32,4096,1]{3,2,1,0} get-tuple-element(%te_fused_attn_forward_ffi.188), index=1
  %get-tuple-element.988 = u32[2,4]{1,0} get-tuple-element(%te_fused_attn_forward_ffi.188), index=2
  %sharding_constraint.1660 = u32[2,4]{1,0} copy(%get-tuple-element.988)
  %sharding_constraint.1663 = bf16[1,4096,4096]{2,1,0} copy(%add_any.282)
  %dot.801 = bf16[1,4096,32,128]{3,2,1,0} dot(%sharding_constraint.1663, %all-gather.319), lhs_contracting_dims={2}, rhs_contracting_dims={2}
  %sharding_constraint.1664 = bf16[1,4096,32,128]{3,2,1,0} copy(%dot.801)
  %te_fused_attn_backward_ffi.75 = (bf16[1,4096,32,128]{3,2,1,0}, bf16[1,4096,8,128]{3,2,1,0}, bf16[1,4096,8,128]{3,2,1,0}, bf16[0]{0}, u8[134742064]{0}) custom-call(%sharding_constraint.1620, %sharding_constraint.1622, %sharding_constraint.1623, %constant.1403, %get-tuple-element.987, /*index=5*/%sharding_constraint.1660, %get-tuple-element.974, %sharding_constraint.1664, %concatenate.456, %concatenate.457, /*index=10*/%constant.1416, %constant.1416, %constant.1416, %constant.1416, %constant.1416, /*index=15*/%constant.1416), custom_call_target="te_fused_attn_backward_ffi", operand_layout_constraints={bf16[1,4096,32,128]{3,2,1,0}, bf16[1,4096,8,128]{3,2,1,0}, bf16[1,4096,8,128]{3,2,1,0}, bf16[0]{0}, f32[1,32,4096,1]{3,2,1,0}, u32[2,4]{1,0}, bf16[1,4096,32,128]{3,2,1,0}, bf16[1,4096,32,128]{3,2,1,0}, s32[2]{0}, s32[2]{0}, f32[0]{0}, f32[0]{0}, f32[0]{0}, f32[0]{0}, f32[0]{0}, f32[0]{0}}, api_version=API_VERSION_TYPED_FFI, backend_config={attn_heads = 32 : i64, bias_batch = 0 : i64, bias_heads = 0 : i64, bias_type = 0 : i64, deterministic = false, dropout_probability = 0.000000e+00 : f64, input_batch = 1 : i64, is_training = true, kv_max_seqlen = 4096 : i64, mask_type = 3 : i64, max_segments_per_seq = 1 : i64, num_gqa_groups = 8 : i64, q_max_seqlen = 4096 : i64, qk_head_dim = 128 : i64, qkv_layout = 9 : i64, scaling_factor = 1.000000e+00 : f64, v_head_dim = 128 : i64, window_size_left = -1 : i64, window_size_right = -1 : i64}
  %get-tuple-element.989 = bf16[1,4096,8,128]{3,2,1,0} get-tuple-element(%te_fused_attn_backward_ffi.75), index=2
  %sharding_constraint.1665 = bf16[1,4096,8,128]{3,2,1,0} copy(%get-tuple-element.989)
  %dot.802 = bf16[1,4096,4096]{2,1,0} dot(%sharding_constraint.1665, %all-gather.318), lhs_contracting_dims={2,3}, rhs_contracting_dims={1,2}
  %get-tuple-element.990 = bf16[1,4096,8,128]{3,2,1,0} get-tuple-element(%te_fused_attn_backward_ffi.75), index=1
  %sharding_constraint.1666 = bf16[1,4096,8,128]{3,2,1,0} copy(%get-tuple-element.990)
  %slice.574 = bf16[1,4096,8,64]{3,2,1,0} slice(%sharding_constraint.1666), slice={[0:1], [0:4096], [0:8], [64:128]}
  %mul.6847 = bf16[1,4096,8,64]{3,2,1,0} multiply(%slice.574, %mul.6781)
  %slice.575 = bf16[1,4096,8,64]{3,2,1,0} slice(%sharding_constraint.1666), slice={[0:1], [0:4096], [0:8], [0:64]}
  %mul.6861 = bf16[1,4096,8,64]{3,2,1,0} multiply(%slice.575, %mul.6767)
  %add_any.283 = bf16[1,4096,8,64]{3,2,1,0} add(%mul.6847, %mul.6861)
  %mul.6869 = bf16[1,4096,8,64]{3,2,1,0} multiply(%slice.574, %mul.6767)
  %neg.252 = bf16[1,4096,8,64]{3,2,1,0} negate(%slice.575)
  %mul.6872 = bf16[1,4096,8,64]{3,2,1,0} multiply(%neg.252, %mul.6781)
  %add_any.284 = bf16[1,4096,8,64]{3,2,1,0} add(%mul.6869, %mul.6872)
  %concatenate.465 = bf16[1,4096,8,128]{3,2,1,0} concatenate(%add_any.283, %add_any.284), dimensions={3}
  %dot.803 = bf16[1,4096,4096]{2,1,0} dot(%concatenate.465, %all-gather.317), lhs_contracting_dims={2,3}, rhs_contracting_dims={1,2}
  %add_any.285 = bf16[1,4096,4096]{2,1,0} add(%dot.802, %dot.803)
  %sharding_constraint.1667 = bf16[1,4096,4096]{2,1,0} copy(%add_any.285)
  %get-tuple-element.991 = bf16[1,4096,32,128]{3,2,1,0} get-tuple-element(%te_fused_attn_backward_ffi.75), index=0
  %sharding_constraint.1668 = bf16[1,4096,32,128]{3,2,1,0} copy(%get-tuple-element.991)
  %slice.576 = bf16[1,4096,32,64]{3,2,1,0} slice(%sharding_constraint.1668), slice={[0:1], [0:4096], [0:32], [64:128]}
  %mul.6878 = bf16[1,4096,32,64]{3,2,1,0} multiply(%slice.576, %mul.6756)
  %slice.577 = bf16[1,4096,32,64]{3,2,1,0} slice(%sharding_constraint.1668), slice={[0:1], [0:4096], [0:32], [0:64]}
  %mul.6884 = bf16[1,4096,32,64]{3,2,1,0} multiply(%slice.577, %mul.6752)
  %add_any.286 = bf16[1,4096,32,64]{3,2,1,0} add(%mul.6878, %mul.6884)
  %mul.6893 = bf16[1,4096,32,64]{3,2,1,0} multiply(%slice.576, %mul.6752)
  %neg.253 = bf16[1,4096,32,64]{3,2,1,0} negate(%slice.577)
  %mul.6896 = bf16[1,4096,32,64]{3,2,1,0} multiply(%neg.253, %mul.6756)
  %add_any.287 = bf16[1,4096,32,64]{3,2,1,0} add(%mul.6893, %mul.6896)
  %concatenate.466 = bf16[1,4096,32,128]{3,2,1,0} concatenate(%add_any.286, %add_any.287), dimensions={3}
  %dot.804 = bf16[1,4096,4096]{2,1,0} dot(%concatenate.466, %all-gather.316), lhs_contracting_dims={2,3}, rhs_contracting_dims={1,2}
  %sharding_constraint.1669 = bf16[1,4096,4096]{2,1,0} copy(%dot.804)
  %add_any.288 = bf16[1,4096,4096]{2,1,0} add(%sharding_constraint.1667, %sharding_constraint.1669)
  %sharding_constraint.1670 = bf16[1,4096,4096]{2,1,0} copy(%add_any.288)
  %mul.6898 = bf16[1,4096,4096]{2,1,0} multiply(%sharding_constraint.1670, %mul.6732)
  %convert_element_type.2526 = f32[1,4096,4096]{2,1,0} convert(%mul.6898)
  %mul.6901 = f32[1,4096,4096]{2,1,0} multiply(%convert_element_type.2526, %mul.6730)
  %mul.6902 = f32[1,4096,4096]{2,1,0} multiply(%convert_element_type.2493, %convert_element_type.2526)
  %reduce.710 = f32[1,4096]{1,0} reduce(%mul.6902, %constant.1360), dimensions={2}, to_apply=%region_678.17474
  %reshape.12353 = f32[1,4096,1]{2,1,0} reshape(%reduce.710)
  %div.1108 = f32[1,4096,1]{2,1,0} divide(%rsqrt.159, %add.2125)
  %mul.6903 = f32[1,4096,1]{2,1,0} multiply(%div.1108, %broadcast.3620)
  %mul.6904 = f32[1,4096,1]{2,1,0} multiply(%reshape.12353, %mul.6903)
  %mul.6905 = f32[1,4096,1]{2,1,0} multiply(%mul.6904, %mul.4455)
  %mul.6906 = f32[1,4096]{1,0} reshape(%mul.6905)
  %mul.6907 = f32[1,4096,4096]{2,1,0} broadcast(%mul.6906), dimensions={0,1}
  %mul.6908 = f32[1,4096,4096]{2,1,0} multiply(%convert_element_type.2493, %mul.6907)
  %add_any.289 = f32[1,4096,4096]{2,1,0} add(%mul.6901, %mul.6908)
  %convert_element_type.2527 = bf16[1,4096,4096]{2,1,0} convert(%add_any.289)
  %add_any.290 = bf16[1,4096,4096]{2,1,0} add(%add_any.282, %convert_element_type.2527)
  %sharding_constraint.1671 = bf16[1,4096,4096]{2,1,0} copy(%add_any.290)
  %tuple.287 = (bf16[512,8]{1,0}, bf16[1,4096,14336]{2,1,0}, bf16[1,4096,14336]{2,1,0}, bf16[1,14336,4096]{2,1,0}, bf16[4096]{0}, /*index=5*/bf16[4096]{0}, bf16[512,8,128]{2,1,0}, bf16[32,128,512]{2,1,0}, bf16[512,32,128]{2,1,0}, bf16[512,8,128]{2,1,0}, /*index=10*/bf16[1,4096,4096]{2,1,0}, s32[1,4096]{1,0}, s32[1,4096]{1,0}, bf16[1,4096,4096]{2,1,0}) tuple(%param.163, %param.164, %param.165, %param.166, %param.162, /*index=5*/%param.157, %param.159, %param.161, %param.158, %param.160, /*index=10*/%sharding_constraint.522, %param.10, %param.7, %sharding_constraint.1671)
  %remat2.27 = (bf16[512,8]{1,0}, bf16[1,4096,14336]{2,1,0}, bf16[1,4096,14336]{2,1,0}, bf16[1,14336,4096]{2,1,0}, bf16[4096]{0}, /*index=5*/bf16[4096]{0}, bf16[512,8,128]{2,1,0}, bf16[32,128,512]{2,1,0}, bf16[512,32,128]{2,1,0}, bf16[512,8,128]{2,1,0}, /*index=10*/bf16[1,4096,4096]{2,1,0}, s32[1,4096]{1,0}, s32[1,4096]{1,0}, bf16[1,4096,4096]{2,1,0}) opt-barrier(%tuple.287)
  %get-tuple-element.992 = bf16[1,4096,4096]{2,1,0} get-tuple-element(%remat2.27), index=13
  %sharding_constraint.1672 = bf16[1,4096,4096]{2,1,0} copy(%get-tuple-element.992)
  %iota.2639 = s32[1,4096,2,1]{3,2,1,0} iota(), iota_dimension=1
  %get-tuple-element.993 = bf16[1,4096,4096]{2,1,0} get-tuple-element(%remat2.27), index=10
  %sharding_constraint.1674 = bf16[1,4096,4096]{2,1,0} copy(%get-tuple-element.993)
  %convert_element_type.2529 = f32[1,4096,4096]{2,1,0} convert(%sharding_constraint.1674)
  %square.100 = f32[1,4096,4096]{2,1,0} multiply(%convert_element_type.2529, %convert_element_type.2529)
  %reduce.711 = f32[1,4096]{1,0} reduce(%square.100, %constant.1360), dimensions={2}, to_apply=%region_679.17516
  %div.1110 = f32[1,4096]{1,0} multiply(%reduce.711, %broadcast.3412)
  %add.2143 = f32[1,4096]{1,0} add(%div.1110, %broadcast.3413)
  %add.2144 = f32[1,4096,1]{2,1,0} reshape(%add.2143)
  %rsqrt.161 = f32[1,4096,1]{2,1,0} rsqrt(%add.2144)
  %mul.6909 = f32[1,4096]{1,0} reshape(%rsqrt.161)
  %mul.6910 = f32[1,4096,4096]{2,1,0} broadcast(%mul.6909), dimensions={0,1}
  %mul.6911 = f32[1,4096,4096]{2,1,0} multiply(%convert_element_type.2529, %mul.6910)
  %convert_element_type.2530 = bf16[1,4096,4096]{2,1,0} convert(%mul.6911)
  %get-tuple-element.994 = bf16[4096]{0} get-tuple-element(%remat2.27), index=5
  %mul.6912 = bf16[1,4096,4096]{2,1,0} broadcast(%get-tuple-element.994), dimensions={2}
  %mul.6913 = bf16[1,4096,4096]{2,1,0} multiply(%convert_element_type.2530, %mul.6912)
  %sharding_constraint.1676 = bf16[1,4096,4096]{2,1,0} copy(%mul.6913)
  %sharding_constraint.1677 = bf16[1,4096,4096]{2,1,0} copy(%sharding_constraint.1676)
  %get-tuple-element.995 = bf16[512,32,128]{2,1,0} get-tuple-element(%remat2.27), index=8
  %all-gather.322 = bf16[4096,32,128]{2,1,0} all-gather(%get-tuple-element.995), channel_id=581, replica_groups=[1,8]<=[8], dimensions={0}, use_global_device_ids=true
  %dot.805 = bf16[1,4096,32,128]{3,2,1,0} dot(%sharding_constraint.1677, %all-gather.322), lhs_contracting_dims={2}, rhs_contracting_dims={0}
  %slice.578 = bf16[1,4096,32,64]{3,2,1,0} slice(%dot.805), slice={[0:1], [0:4096], [0:32], [0:64]}
  %get-tuple-element.996 = s32[1,4096]{1,0} get-tuple-element(%remat2.27), index=12
  %convert_element_type.2531 = f32[1,4096]{1,0} convert(%get-tuple-element.996)
  %div.1111 = f32[1,4096,1,64]{3,2,1,0} broadcast(%convert_element_type.2531), dimensions={0,1}
  %div.1114 = f32[1,4096,1,64]{3,2,1,0} divide(%div.1111, %div.402)
  %cos.97 = f32[1,4096,1,64]{3,2,1,0} cosine(%div.1114)
  %convert_element_type.2534 = bf16[1,4096,1,64]{3,2,1,0} convert(%cos.97)
  %mul.6915 = bf16[1,4096,64]{2,1,0} reshape(%convert_element_type.2534)
  %mul.6916 = bf16[1,4096,32,64]{3,2,1,0} broadcast(%mul.6915), dimensions={0,1,3}
  %mul.6917 = bf16[1,4096,32,64]{3,2,1,0} multiply(%slice.578, %mul.6916)
  %slice.579 = bf16[1,4096,32,64]{3,2,1,0} slice(%dot.805), slice={[0:1], [0:4096], [0:32], [64:128]}
  %sin.96 = f32[1,4096,1,64]{3,2,1,0} sine(%div.1114)
  %convert_element_type.2535 = bf16[1,4096,1,64]{3,2,1,0} convert(%sin.96)
  %mul.6918 = bf16[1,4096,64]{2,1,0} reshape(%convert_element_type.2535)
  %mul.6919 = bf16[1,4096,32,64]{3,2,1,0} broadcast(%mul.6918), dimensions={0,1,3}
  %mul.6920 = bf16[1,4096,32,64]{3,2,1,0} multiply(%slice.579, %mul.6919)
  %sub.326 = bf16[1,4096,32,64]{3,2,1,0} subtract(%mul.6917, %mul.6920)
  %mul.6923 = bf16[1,4096,32,64]{3,2,1,0} multiply(%slice.579, %mul.6916)
  %mul.6926 = bf16[1,4096,32,64]{3,2,1,0} multiply(%slice.578, %mul.6919)
  %add.2145 = bf16[1,4096,32,64]{3,2,1,0} add(%mul.6923, %mul.6926)
  %concatenate.467 = bf16[1,4096,32,128]{3,2,1,0} concatenate(%sub.326, %add.2145), dimensions={3}
  %sharding_constraint.1680 = bf16[1,4096,32,128]{3,2,1,0} copy(%concatenate.467)
  %get-tuple-element.997 = bf16[512,8,128]{2,1,0} get-tuple-element(%remat2.27), index=6
  %all-gather.323 = bf16[4096,8,128]{2,1,0} all-gather(%get-tuple-element.997), channel_id=582, replica_groups=[1,8]<=[8], dimensions={0}, use_global_device_ids=true
  %dot.806 = bf16[1,4096,8,128]{3,2,1,0} dot(%sharding_constraint.1677, %all-gather.323), lhs_contracting_dims={2}, rhs_contracting_dims={0}
  %slice.580 = bf16[1,4096,8,64]{3,2,1,0} slice(%dot.806), slice={[0:1], [0:4096], [0:8], [0:64]}
  %mul.6929 = bf16[1,4096,8,64]{3,2,1,0} broadcast(%mul.6915), dimensions={0,1,3}
  %mul.6930 = bf16[1,4096,8,64]{3,2,1,0} multiply(%slice.580, %mul.6929)
  %slice.581 = bf16[1,4096,8,64]{3,2,1,0} slice(%dot.806), slice={[0:1], [0:4096], [0:8], [64:128]}
  %mul.6932 = bf16[1,4096,8,64]{3,2,1,0} broadcast(%mul.6918), dimensions={0,1,3}
  %mul.6933 = bf16[1,4096,8,64]{3,2,1,0} multiply(%slice.581, %mul.6932)
  %sub.327 = bf16[1,4096,8,64]{3,2,1,0} subtract(%mul.6930, %mul.6933)
  %mul.6936 = bf16[1,4096,8,64]{3,2,1,0} multiply(%slice.581, %mul.6929)
  %mul.6939 = bf16[1,4096,8,64]{3,2,1,0} multiply(%slice.580, %mul.6932)
  %add.2146 = bf16[1,4096,8,64]{3,2,1,0} add(%mul.6936, %mul.6939)
  %concatenate.468 = bf16[1,4096,8,128]{3,2,1,0} concatenate(%sub.327, %add.2146), dimensions={3}
  %sharding_constraint.1682 = bf16[1,4096,8,128]{3,2,1,0} copy(%concatenate.468)
  %get-tuple-element.998 = bf16[512,8,128]{2,1,0} get-tuple-element(%remat2.27), index=9
  %all-gather.324 = bf16[4096,8,128]{2,1,0} all-gather(%get-tuple-element.998), channel_id=583, replica_groups=[1,8]<=[8], dimensions={0}, use_global_device_ids=true
  %dot.807 = bf16[1,4096,8,128]{3,2,1,0} dot(%sharding_constraint.1677, %all-gather.324), lhs_contracting_dims={2}, rhs_contracting_dims={0}
  %sharding_constraint.1683 = bf16[1,4096,8,128]{3,2,1,0} copy(%dot.807)
  %get-tuple-element.999 = s32[1,4096]{1,0} get-tuple-element(%remat2.27), index=11
  %eq.2340 = s32[1,4096,4096]{2,1,0} broadcast(%get-tuple-element.999), dimensions={0,1}
  %eq.2341 = s32[1,4096,4096]{2,1,0} broadcast(%get-tuple-element.999), dimensions={0,2}
  %eq.2342 = pred[1,4096,4096]{2,1,0} compare(%eq.2340, %eq.2341), direction=EQ
  %and.177 = pred[1,4096,4096]{2,1,0} and(%eq.2342, %and.64)
  %select_n.557 = f32[1,4096,4096]{2,1,0} select(%and.177, %broadcast_in_dim.516, %broadcast_in_dim.517)
  %ne.114 = pred[1,4096,4096]{2,1,0} compare(%select_n.557, %broadcast_in_dim.516), direction=NE
  %not.112 = pred[1,4096,4096]{2,1,0} not(%ne.114)
  %convert_element_type.2541 = s32[1,4096,4096]{2,1,0} convert(%not.112)
  %reduce.712 = s32[1,4096]{1,0} reduce(%convert_element_type.2541, %constant.1181), dimensions={1}, to_apply=%region_680.17612
  %reduce_sum.5724 = s32[1,1,1,4096]{3,2,1,0} reshape(%reduce.712)
  %slice.582 = s32[1,1,1,1]{3,2,1,0} slice(%reduce_sum.5724), slice={[0:1], [0:1], [0:1], [0:1]}
  %squeeze.48 = s32[1,1]{1,0} reshape(%slice.582)
  %reshape.12360 = s32[1]{0} reshape(%squeeze.48)
  %lt.177 = pred[1]{0} compare(%reshape.12360, %constant.1418), direction=LT
  %select_n.558 = s32[1]{0} select(%lt.177, %broadcast_in_dim.518, %reshape.12360)
  %concatenate.469 = s32[2]{0} concatenate(%constant.1418, %select_n.558), dimensions={0}
  %reduce.713 = s32[1,4096]{1,0} reduce(%convert_element_type.2541, %constant.1181), dimensions={2}, to_apply=%region_681.17621
  %reduce_sum.5725 = s32[1,1,1,4096]{3,2,1,0} reshape(%reduce.713)
  %reduce.714 = s32[1,1]{1,0} reduce(%reduce_sum.5725, %constant.1415), dimensions={3,2}, to_apply=%region_682.17627
  %reshape.12361 = s32[1]{0} reshape(%reduce.714)
  %lt.178 = pred[1]{0} compare(%reshape.12361, %constant.1418), direction=LT
  %select_n.559 = s32[1]{0} select(%lt.178, %broadcast_in_dim.518, %reshape.12361)
  %concatenate.470 = s32[2]{0} concatenate(%constant.1418, %select_n.559), dimensions={0}
  %te_fused_attn_forward_ffi.192 = (bf16[1,4096,32,128]{3,2,1,0}, f32[1,32,4096,1]{3,2,1,0}, u32[2,4]{1,0}, u8[48]{0}) custom-call(%sharding_constraint.1680, %sharding_constraint.1682, %sharding_constraint.1683, %constant.1403, %dynamic-slice.38, /*index=5*/%concatenate.469, %concatenate.470, %constant.1416, %constant.1416, %constant.1416, /*index=10*/%constant.1416, %constant.1416, %constant.1416), custom_call_target="te_fused_attn_forward_ffi", operand_layout_constraints={bf16[1,4096,32,128]{3,2,1,0}, bf16[1,4096,8,128]{3,2,1,0}, bf16[1,4096,8,128]{3,2,1,0}, bf16[0]{0}, u32[2]{0}, s32[2]{0}, s32[2]{0}, f32[0]{0}, f32[0]{0}, f32[0]{0}, f32[0]{0}, f32[0]{0}, f32[0]{0}}, api_version=API_VERSION_TYPED_FFI, backend_config={attn_heads = 32 : i64, bias_batch = 0 : i64, bias_heads = 0 : i64, bias_type = 0 : i64, deterministic = false, dropout_probability = 0.000000e+00 : f64, input_batch = 1 : i64, is_training = true, kv_max_seqlen = 4096 : i64, mask_type = 3 : i64, max_segments_per_seq = 1 : i64, num_gqa_groups = 8 : i64, q_max_seqlen = 4096 : i64, qk_head_dim = 128 : i64, qkv_layout = 9 : i64, scaling_factor = 1.000000e+00 : f64, v_head_dim = 128 : i64, window_size_left = -1 : i64, window_size_right = -1 : i64}
  %get-tuple-element.1000 = bf16[1,4096,32,128]{3,2,1,0} get-tuple-element(%te_fused_attn_forward_ffi.192), index=0
  %sharding_constraint.1684 = bf16[1,4096,32,128]{3,2,1,0} copy(%get-tuple-element.1000)
  %get-tuple-element.1001 = bf16[32,128,512]{2,1,0} get-tuple-element(%remat2.27), index=7
  %all-gather.325 = bf16[32,128,4096]{2,1,0} all-gather(%get-tuple-element.1001), channel_id=584, replica_groups=[1,8]<=[8], dimensions={2}, use_global_device_ids=true
  %dot.808 = bf16[1,4096,4096]{2,1,0} dot(%sharding_constraint.1684, %all-gather.325), lhs_contracting_dims={2,3}, rhs_contracting_dims={0,1}
  %sharding_constraint.1685 = bf16[1,4096,4096]{2,1,0} copy(%dot.808)
  %add.2147 = bf16[1,4096,4096]{2,1,0} add(%sharding_constraint.1674, %sharding_constraint.1685)
  %convert_element_type.2543 = f32[1,4096,4096]{2,1,0} convert(%add.2147)
  %square.101 = f32[1,4096,4096]{2,1,0} multiply(%convert_element_type.2543, %convert_element_type.2543)
  %reduce.715 = f32[1,4096]{1,0} reduce(%square.101, %constant.1360), dimensions={2}, to_apply=%region_683.17642
  %div.1120 = f32[1,4096]{1,0} multiply(%reduce.715, %broadcast.3412)
  %add.2148 = f32[1,4096]{1,0} add(%div.1120, %broadcast.3413)
  %add.2149 = f32[1,4096,1]{2,1,0} reshape(%add.2148)
  %rsqrt.162 = f32[1,4096,1]{2,1,0} rsqrt(%add.2149)
  %mul.6940 = f32[1,4096]{1,0} reshape(%rsqrt.162)
  %mul.6941 = f32[1,4096,4096]{2,1,0} broadcast(%mul.6940), dimensions={0,1}
  %mul.6943 = f32[1,4096,4096]{2,1,0} multiply(%convert_element_type.2543, %mul.6941)
  %convert_element_type.2545 = bf16[1,4096,4096]{2,1,0} convert(%mul.6943)
  %get-tuple-element.1002 = bf16[4096]{0} get-tuple-element(%remat2.27), index=4
  %mul.6944 = bf16[1,4096,4096]{2,1,0} broadcast(%get-tuple-element.1002), dimensions={2}
  %mul.6945 = bf16[1,4096,4096]{2,1,0} multiply(%convert_element_type.2545, %mul.6944)
  %sharding_constraint.1686 = bf16[1,4096,4096]{2,1,0} copy(%mul.6945)
  %get-tuple-element.1003 = bf16[512,8]{1,0} get-tuple-element(%remat2.27), index=0
  %all-gather.326 = bf16[4096,8]{1,0} all-gather(%get-tuple-element.1003), channel_id=585, replica_groups=[1,8]<=[8], dimensions={0}, use_global_device_ids=true
  %dot.809 = bf16[1,4096,8]{2,1,0} dot(%sharding_constraint.1686, %all-gather.326), lhs_contracting_dims={2}, rhs_contracting_dims={0}
  %sharding_constraint.1687 = bf16[1,4096,8]{2,1,0} copy(%dot.809)
  %top_k.144 = bf16[4096,8]{1,0} reshape(%sharding_constraint.1687)
  %top_k.145 = (bf16[4096,2]{1,0}, s32[4096,2]{1,0}) custom-call(%top_k.144), custom_call_target="TopK", called_computations={%compare_greater_than.48.17663.clone}
  %get-tuple-element.1004 = bf16[4096,2]{1,0} get-tuple-element(%top_k.145), index=0
  %get-tuple-element.1005 = s32[4096,2]{1,0} get-tuple-element(%top_k.145), index=1
  %add.2150 = s32[4096,2]{1,0} add(%get-tuple-element.1005, %broadcast.3418)
  %sort.112 = (bf16[4096,2]{1,0}, s32[4096,2]{1,0}) sort(%get-tuple-element.1004, %add.2150), dimensions={1}, is_stable=true, to_apply=%compare-value-and-index.48
  %get-tuple-element.1007 = s32[4096,2]{1,0} get-tuple-element(%sort.112), index=1
  %slice.584 = s32[4096,2]{1,0} slice(%get-tuple-element.1007), slice={[0:4096], [0:2]}
  %top_k.146 = s32[1,4096,2]{2,1,0} reshape(%slice.584)
  %lt.179 = pred[1,4096,2]{2,1,0} compare(%top_k.146, %broadcast.3419), direction=LT
  %add.2151 = s32[1,4096,2]{2,1,0} add(%top_k.146, %broadcast.3420)
  %select_n.560 = s32[1,4096,2]{2,1,0} select(%lt.179, %add.2151, %top_k.146)
  %broadcast_in_dim.713 = s32[1,4096,2,1]{3,2,1,0} reshape(%select_n.560)
  %concatenate.471 = s32[1,4096,2,3]{3,2,1,0} concatenate(%add.1356, %iota.2639, %broadcast_in_dim.713), dimensions={3}
  %subtract.162 = s32[1,4096,2,3]{3,2,1,0} subtract(%concatenate.471, %broadcast.3428)
  %scatter.241 = u32[1,4096,8]{2,1,0} scatter(%dynamic-slice.43, %subtract.162, %add.1401), update_window_dims={}, inserted_window_dims={0,1,2}, scatter_dims_to_operand_dims={0,1,2}, index_vector_dim=3, to_apply=%region_684.17699.clone
  %gather.64 = u32[1,4096,2]{2,1,0} gather(%scatter.241, %subtract.162), offset_dims={}, collapsed_slice_dims={0,1,2}, start_index_map={0,1,2}, index_vector_dim=3, slice_sizes={1,1,1}
  %eq.2343 = pred[1,4096,2]{2,1,0} compare(%add.1401, %gather.64), direction=EQ
  %get-tuple-element.1006 = bf16[4096,2]{1,0} get-tuple-element(%sort.112), index=0
  %slice.583 = bf16[4096,2]{1,0} slice(%get-tuple-element.1006), slice={[0:4096], [0:2]}
  %convert_element_type.2546 = f32[4096,2]{1,0} convert(%slice.583)
  %convert_element_type.2547 = f32[1,4096,2]{2,1,0} reshape(%convert_element_type.2546)
  %reduce.716 = f32[4096]{0} reduce(%convert_element_type.2546, %constant.1450), dimensions={1}, to_apply=%region_685.17708
  %sub.328 = f32[1,4096]{1,0} reshape(%reduce.716)
  %sub.329 = f32[1,4096,2]{2,1,0} broadcast(%sub.328), dimensions={0,1}
  %sub.330 = f32[1,4096,2]{2,1,0} subtract(%convert_element_type.2547, %sub.329)
  %exp.223 = f32[1,4096,2]{2,1,0} exponential(%sub.330)
  %reduce.717 = f32[1,4096]{1,0} reduce(%exp.223, %constant.1360), dimensions={2}, to_apply=%region_686.17717
  %div.1123 = f32[1,4096,2]{2,1,0} broadcast(%reduce.717), dimensions={0,1}
  %div.1124 = f32[1,4096,2]{2,1,0} divide(%exp.223, %div.1123)
  %convert_element_type.2548 = bf16[1,4096,2]{2,1,0} convert(%div.1124)
  %select_n.561 = bf16[1,4096,2]{2,1,0} select(%eq.2343, %convert_element_type.2548, %broadcast.3427)
  %scatter.242 = bf16[1,4096,8]{2,1,0} scatter(%broadcast.3379, %subtract.162, %select_n.561), update_window_dims={}, inserted_window_dims={0,1,2}, scatter_dims_to_operand_dims={0,1,2}, index_vector_dim=3, to_apply=%region_687.17726.clone
  %eq.2345 = s32[1,4096,2,8]{3,2,1,0} broadcast(%top_k.146), dimensions={0,1,2}
  %iota.2653 = s32[1,4096,2,8]{3,2,1,0} iota(), iota_dimension=3
  %eq.2346 = pred[1,4096,2,8]{3,2,1,0} compare(%eq.2345, %iota.2653), direction=EQ
  %convert_element_type.2549 = s32[1,4096,2,8]{3,2,1,0} convert(%eq.2346)
  %reshape.12393 = s32[1,8192,8]{2,1,0} reshape(%convert_element_type.2549)
  %sharding_constraint.1688 = s32[1,8192,8]{2,1,0} copy(%reshape.12393)
  %reduce-window.48 = s32[1,8192,8]{2,1,0} reduce-window(%sharding_constraint.1688, %constant.1181), window={size=1x8192x1 pad=0_0x8191_0x0_0}, to_apply=%region_688.17738
  %reshape.12395 = s32[1,4096,2,8]{3,2,1,0} reshape(%reduce-window.48)
  %sharding_constraint.1689 = s32[1,4096,2,8]{3,2,1,0} copy(%reshape.12395)
  %le.130 = pred[1,4096,2,8]{3,2,1,0} compare(%sharding_constraint.1689, %broadcast.3429), direction=LE
  %mul.6948 = s32[1,4096,2,8]{3,2,1,0} select(%le.130, %convert_element_type.2549, %broadcast.3430)
  %reduce.718 = s32[1,4096,8]{2,1,0} reduce(%mul.6948, %constant.1181), dimensions={2}, to_apply=%region_689.17747
  %convert_element_type.2550 = bf16[1,4096,8]{2,1,0} convert(%reduce.718)
  %mul.6951 = bf16[1,4096,8]{2,1,0} multiply(%scatter.242, %convert_element_type.2550)
  %mul.6952 = bf16[1,4096,8,1025]{3,2,1,0} broadcast(%mul.6951), dimensions={0,1,2}
  %mul.6953 = s32[1,8192,8]{2,1,0} multiply(%sharding_constraint.1688, %reduce-window.48)
  %reshape.12396 = s32[1,4096,2,8]{3,2,1,0} reshape(%mul.6953)
  %reduce.719 = s32[1,4096,8]{2,1,0} reduce(%reshape.12396, %constant.1181), dimensions={2}, to_apply=%region_690.17757
  %mul.6954 = s32[1,4096,8]{2,1,0} multiply(%reduce.719, %reduce.718)
  %eq.2347 = s32[1,4096,8,1025]{3,2,1,0} broadcast(%mul.6954), dimensions={0,1,2}
  %iota.2654 = s32[1,4096,8,1025]{3,2,1,0} iota(), iota_dimension=3
  %eq.2348 = pred[1,4096,8,1025]{3,2,1,0} compare(%eq.2347, %iota.2654), direction=EQ
  %convert_element_type.2551 = s32[1,4096,8,1025]{3,2,1,0} convert(%eq.2348)
  %convert_element_type.2552 = bf16[1,4096,8,1025]{3,2,1,0} convert(%convert_element_type.2551)
  %mul.6955 = bf16[1,4096,8,1025]{3,2,1,0} multiply(%mul.6952, %convert_element_type.2552)
  %slice.585 = bf16[1,4096,8,1024]{3,2,1,0} slice(%mul.6955), slice={[0:1], [0:4096], [0:8], [1:1025]}
  %convert_element_type.2553 = pred[1,4096,8,1024]{3,2,1,0} compare(%slice.585, %broadcast.3431), direction=NE
  %sharding_constraint.1690 = pred[1,4096,8,1024]{3,2,1,0} copy(%convert_element_type.2553)
  %dot_general.100 = bf16[1,4096,8,1024]{3,2,1,0} convert(%sharding_constraint.1690)
  %dot.810 = bf16[1,8,1024,4096]{3,2,1,0} dot(%dot_general.100, %sharding_constraint.1686), lhs_batch_dims={0}, lhs_contracting_dims={1}, rhs_batch_dims={0}, rhs_contracting_dims={1}
  %reshape.12399 = bf16[1,8,1,1024,4096]{4,3,2,1,0} reshape(%dot.810)
  %all-to-all.128 = bf16[1,8,1,1024,4096]{4,3,2,1,0} all-to-all(%reshape.12399), channel_id=589, replica_groups=[1,8]<=[8], dimensions={1}
  %transpose.213 = bf16[8,1,1,1024,4096]{4,3,2,0,1} transpose(%all-to-all.128), dimensions={1,0,2,3,4}
  %reshape.12400 = bf16[8,1,1024,4096]{3,2,1,0} reshape(%transpose.213)
  %transpose.214 = bf16[1,8,1024,4096]{3,2,0,1} transpose(%reshape.12400), dimensions={1,0,2,3}
  %sharding_constraint.1691 = bf16[1,8,1024,4096]{3,2,0,1} copy(%transpose.214)
  %get-tuple-element.1010 = bf16[1,4096,14336]{2,1,0} get-tuple-element(%remat2.27), index=1
  %sharding_constraint.1692 = bf16[1,4096,14336]{2,1,0} copy(%get-tuple-element.1010)
  %dot.811 = bf16[1,8,1024,14336]{3,2,1,0} dot(%sharding_constraint.1691, %sharding_constraint.1692), lhs_batch_dims={0}, lhs_contracting_dims={3}, rhs_batch_dims={0}, rhs_contracting_dims={1}
  %sharding_constraint.1693 = bf16[1,8,1024,14336]{3,2,1,0} copy(%dot.811)
  %neg.254 = bf16[1,8,1024,14336]{3,2,1,0} negate(%sharding_constraint.1693)
  %exp.224 = bf16[1,8,1024,14336]{3,2,1,0} exponential(%neg.254)
  %add.2156 = bf16[1,8,1024,14336]{3,2,1,0} add(%exp.224, %jit_silu_.0)
  %div.1125 = bf16[1,8,1024,14336]{3,2,1,0} divide(%jit_silu_.0, %add.2156)
  %mul.6956 = bf16[1,8,1024,14336]{3,2,1,0} multiply(%sharding_constraint.1693, %div.1125)
  %sharding_constraint.1694 = bf16[1,4096,4096]{2,1,0} copy(%sharding_constraint.1672)
  %sharding_constraint.1695 = bf16[1,4096,8,1024]{3,2,1,0} copy(%slice.585)
  %dot.812 = bf16[1,4096,8,1024]{3,2,1,0} dot(%sharding_constraint.1694, %sharding_constraint.1695), lhs_batch_dims={0}, lhs_contracting_dims={1}, rhs_batch_dims={0}, rhs_contracting_dims={1}
  %reshape.12403 = bf16[1,4096,8,1,1024]{4,3,2,1,0} reshape(%dot.812)
  %all-to-all.129 = bf16[1,4096,8,1,1024]{4,3,2,1,0} all-to-all(%reshape.12403), channel_id=590, replica_groups=[1,8]<=[8], dimensions={2}
  %transpose.215 = bf16[8,1,4096,1,1024]{4,3,0,2,1} transpose(%all-to-all.129), dimensions={2,0,1,3,4}
  %reshape.12404 = bf16[8,4096,1,1024]{3,2,1,0} reshape(%transpose.215)
  %transpose.216 = bf16[1,8,1024,4096]{2,0,3,1} transpose(%reshape.12404), dimensions={2,0,3,1}
  %sharding_constraint.1696 = bf16[1,8,1024,4096]{2,0,3,1} copy(%transpose.216)
  %get-tuple-element.1011 = bf16[1,14336,4096]{2,1,0} get-tuple-element(%remat2.27), index=3
  %sharding_constraint.1697 = bf16[1,14336,4096]{2,1,0} copy(%get-tuple-element.1011)
  %dot.813 = bf16[1,8,1024,14336]{3,2,1,0} dot(%sharding_constraint.1696, %sharding_constraint.1697), lhs_batch_dims={0}, lhs_contracting_dims={3}, rhs_batch_dims={0}, rhs_contracting_dims={2}
  %mul.6958 = bf16[1,8,1024,14336]{3,2,1,0} multiply(%mul.6956, %dot.813)
  %sharding_constraint.1699 = bf16[1,8,1024,14336]{3,2,1,0} copy(%mul.6958)
  %get-tuple-element.1012 = bf16[1,4096,14336]{2,1,0} get-tuple-element(%remat2.27), index=2
  %sharding_constraint.1701 = bf16[1,4096,14336]{2,1,0} copy(%get-tuple-element.1012)
  %dot.814 = bf16[1,8,1024,4096]{3,2,1,0} dot(%sharding_constraint.1699, %sharding_constraint.1701), lhs_batch_dims={0}, lhs_contracting_dims={3}, rhs_batch_dims={0}, rhs_contracting_dims={2}
  %dot.815 = bf16[1,8,1024,14336]{3,2,1,0} dot(%sharding_constraint.1691, %sharding_constraint.1701), lhs_batch_dims={0}, lhs_contracting_dims={3}, rhs_batch_dims={0}, rhs_contracting_dims={1}
  %sharding_constraint.1702 = bf16[1,8,1024,14336]{3,2,1,0} copy(%dot.815)
  %mul.6959 = bf16[1,8,1024,14336]{3,2,1,0} multiply(%dot.813, %sharding_constraint.1702)
  %mul.6960 = bf16[1,8,1024,14336]{3,2,1,0} multiply(%mul.6959, %div.1125)
  %mul.6965 = bf16[1,8,1024,14336]{3,2,1,0} multiply(%sharding_constraint.1693, %mul.6959)
  %sub.331 = bf16[1,8,1024,14336]{3,2,1,0} subtract(%jit_silu_.0, %div.1125)
  %mul.6966 = bf16[1,8,1024,14336]{3,2,1,0} multiply(%div.1125, %sub.331)
  %mul.6967 = bf16[1,8,1024,14336]{3,2,1,0} multiply(%mul.6965, %mul.6966)
  %add_any.291 = bf16[1,8,1024,14336]{3,2,1,0} add(%mul.6960, %mul.6967)
  %sharding_constraint.1703 = bf16[1,8,1024,14336]{3,2,1,0} copy(%add_any.291)
  %dot.816 = bf16[1,8,1024,4096]{3,2,1,0} dot(%sharding_constraint.1703, %sharding_constraint.1692), lhs_batch_dims={0}, lhs_contracting_dims={3}, rhs_batch_dims={0}, rhs_contracting_dims={2}
  %add_any.292 = bf16[1,8,1024,4096]{3,2,1,0} add(%dot.814, %dot.816)
  %sharding_constraint.1704 = bf16[1,8,1024,4096]{3,2,1,0} copy(%add_any.292)
  %transpose.217 = bf16[8,1,1024,4096]{3,2,0,1} transpose(%sharding_constraint.1704), dimensions={1,0,2,3}
  %reshape.12407 = bf16[8,1,1,1024,4096]{4,3,2,1,0} reshape(%transpose.217)
  %all-to-all.130 = bf16[8,1,1,1024,4096]{4,3,2,1,0} all-to-all(%reshape.12407), channel_id=591, replica_groups=[1,8]<=[8], dimensions={0}
  %transpose.218 = bf16[1,8,1,1024,4096]{4,3,2,0,1} transpose(%all-to-all.130), dimensions={1,0,2,3,4}
  %reshape.12408 = bf16[1,8,1024,4096]{3,2,1,0} reshape(%transpose.218)
  %dot.817 = bf16[1,4096,4096]{2,1,0} dot(%dot_general.100, %reshape.12408), lhs_batch_dims={0}, lhs_contracting_dims={2,3}, rhs_batch_dims={0}, rhs_contracting_dims={1,2}
  %reshape.12410 = s32[1,4096,2,1]{3,2,1,0} reshape(%slice.584)
  %ge.16 = pred[1,4096,2,3]{3,2,1,0} compare(%concatenate.471, %broadcast.3629), direction=GE
  %le.132 = pred[1,4096,2,3]{3,2,1,0} compare(%concatenate.471, %le.67), direction=LE
  %and.178 = pred[1,4096,2,3]{3,2,1,0} and(%ge.16, %le.132)
  %reduce.720 = pred[1,4096,2]{2,1,0} reduce(%and.178, %constant.5574), dimensions={3}, to_apply=%region_691.17814
  %mul.6968 = bf16[1,8,1024,14336]{3,2,1,0} multiply(%mul.6956, %sharding_constraint.1702)
  %dot.818 = bf16[1,8,1024,4096]{3,2,1,0} dot(%mul.6968, %sharding_constraint.1697), lhs_batch_dims={0}, lhs_contracting_dims={3}, rhs_batch_dims={0}, rhs_contracting_dims={1}
  %sharding_constraint.1705 = bf16[1,8,1024,4096]{3,2,1,0} copy(%dot.818)
  %reshape.12417 = bf16[1,8,1,1024,4096]{4,3,2,1,0} reshape(%sharding_constraint.1705)
  %all-to-all.131 = bf16[1,8,1,1024,4096]{4,3,2,1,0} all-to-all(%reshape.12417), channel_id=592, replica_groups=[1,8]<=[8], dimensions={1}
  %transpose.219 = bf16[8,1,1,1024,4096]{4,3,2,0,1} transpose(%all-to-all.131), dimensions={1,0,2,3,4}
  %reshape.12418 = bf16[8,1,1024,4096]{3,2,1,0} reshape(%transpose.219)
  %dot.819 = bf16[1,4096,8,1024]{3,2,1,0} dot(%sharding_constraint.1694, %reshape.12418), lhs_batch_dims={0}, lhs_contracting_dims={2}, rhs_batch_dims={1}, rhs_contracting_dims={3}
  %sharding_constraint.1706 = bf16[1,4096,8,1024]{3,2,1,0} copy(%dot.819)
  %pad.16 = bf16[1,4096,8,1025]{3,2,1,0} pad(%sharding_constraint.1706, %constant.1190), padding=0_0x0_0x0_0x1_0
  %mul.6969 = bf16[1,4096,8,1025]{3,2,1,0} multiply(%pad.16, %convert_element_type.2552)
  %reduce.721 = bf16[1,4096,8]{2,1,0} reduce(%mul.6969, %constant.1190), dimensions={3}, to_apply=%region_692.17826
  %mul.6970 = bf16[1,4096,8]{2,1,0} multiply(%reduce.721, %convert_element_type.2550)
  %gather.65 = bf16[1,4096,2]{2,1,0} gather(%mul.6970, %subtract.162), offset_dims={}, collapsed_slice_dims={0,1,2}, start_index_map={0,1,2}, index_vector_dim=3, slice_sizes={1,1,1}
  %select_n.562 = bf16[1,4096,2]{2,1,0} select(%reduce.720, %gather.65, %broadcast.3427)
  %select_n.563 = bf16[1,4096,2]{2,1,0} select(%eq.2343, %select_n.562, %broadcast.3427)
  %convert_element_type.2554 = f32[1,4096,2]{2,1,0} convert(%select_n.563)
  %div.1127 = f32[1,4096,2]{2,1,0} divide(%convert_element_type.2554, %div.1123)
  %mul.6971 = f32[1,4096]{1,0} multiply(%reduce.717, %reduce.717)
  %div.1128 = f32[1,4096]{1,0} divide(%add.1847, %mul.6971)
  %mul.6972 = f32[1,4096,2]{2,1,0} broadcast(%div.1128), dimensions={0,1}
  %mul.6973 = f32[1,4096,2]{2,1,0} multiply(%convert_element_type.2554, %mul.6972)
  %mul.6974 = f32[1,4096,2]{2,1,0} multiply(%mul.6973, %exp.223)
  %reduce.722 = f32[1,4096]{1,0} reduce(%mul.6974, %constant.1360), dimensions={2}, to_apply=%region_693.17843
  %neg.255 = f32[1,4096]{1,0} negate(%reduce.722)
  %broadcast_in_dim.714 = f32[1,4096,2]{2,1,0} broadcast(%neg.255), dimensions={0,1}
  %add_any.293 = f32[1,4096,2]{2,1,0} add(%div.1127, %broadcast_in_dim.714)
  %mul.6975 = f32[1,4096,2]{2,1,0} multiply(%add_any.293, %exp.223)
  %convert_element_type.2555 = bf16[1,4096,2]{2,1,0} convert(%mul.6975)
  %scatter.243 = bf16[1,4096,8]{2,1,0} scatter(%broadcast.3379, %reshape.12410, %convert_element_type.2555), update_window_dims={}, inserted_window_dims={2}, scatter_dims_to_operand_dims={2}, input_batching_dims={0,1}, scatter_indices_batching_dims={0,1}, index_vector_dim=3, to_apply=%region_694.17853.clone
  %sharding_constraint.1707 = bf16[1,4096,8]{2,1,0} copy(%scatter.243)
  %dot.820 = bf16[1,4096,4096]{2,1,0} dot(%sharding_constraint.1707, %all-gather.326), lhs_contracting_dims={2}, rhs_contracting_dims={1}
  %add_any.294 = bf16[1,4096,4096]{2,1,0} add(%dot.817, %dot.820)
  %sharding_constraint.1708 = bf16[1,4096,4096]{2,1,0} copy(%add_any.294)
  %mul.6977 = bf16[1,4096,4096]{2,1,0} multiply(%sharding_constraint.1708, %mul.6944)
  %convert_element_type.2556 = f32[1,4096,4096]{2,1,0} convert(%mul.6977)
  %mul.6981 = f32[1,4096,4096]{2,1,0} multiply(%convert_element_type.2556, %mul.6941)
  %mul.6982 = f32[1,4096,4096]{2,1,0} multiply(%convert_element_type.2543, %convert_element_type.2556)
  %reduce.723 = f32[1,4096]{1,0} reduce(%mul.6982, %constant.1360), dimensions={2}, to_apply=%region_695.17869
  %reshape.12430 = f32[1,4096,1]{2,1,0} reshape(%reduce.723)
  %div.1129 = f32[1,4096,1]{2,1,0} divide(%rsqrt.162, %add.2149)
  %mul.6983 = f32[1,4096,1]{2,1,0} multiply(%div.1129, %broadcast.3620)
  %mul.6984 = f32[1,4096,1]{2,1,0} multiply(%reshape.12430, %mul.6983)
  %mul.6985 = f32[1,4096,1]{2,1,0} multiply(%mul.6984, %mul.4455)
  %mul.6986 = f32[1,4096]{1,0} reshape(%mul.6985)
  %mul.6987 = f32[1,4096,4096]{2,1,0} broadcast(%mul.6986), dimensions={0,1}
  %mul.6988 = f32[1,4096,4096]{2,1,0} multiply(%convert_element_type.2543, %mul.6987)
  %add_any.295 = f32[1,4096,4096]{2,1,0} add(%mul.6981, %mul.6988)
  %convert_element_type.2557 = bf16[1,4096,4096]{2,1,0} convert(%add_any.295)
  %add_any.296 = bf16[1,4096,4096]{2,1,0} add(%sharding_constraint.1672, %convert_element_type.2557)
  %get-tuple-element.1013 = f32[1,32,4096,1]{3,2,1,0} get-tuple-element(%te_fused_attn_forward_ffi.192), index=1
  %get-tuple-element.1014 = u32[2,4]{1,0} get-tuple-element(%te_fused_attn_forward_ffi.192), index=2
  %sharding_constraint.1709 = u32[2,4]{1,0} copy(%get-tuple-element.1014)
  %sharding_constraint.1710 = bf16[1,4096,4096]{2,1,0} copy(%add_any.296)
  %dot.821 = bf16[1,4096,32,128]{3,2,1,0} dot(%sharding_constraint.1710, %all-gather.325), lhs_contracting_dims={2}, rhs_contracting_dims={2}
  %sharding_constraint.1713 = bf16[1,4096,32,128]{3,2,1,0} copy(%dot.821)
  %te_fused_attn_backward_ffi.80 = (bf16[1,4096,32,128]{3,2,1,0}, bf16[1,4096,8,128]{3,2,1,0}, bf16[1,4096,8,128]{3,2,1,0}, bf16[0]{0}, u8[134742064]{0}) custom-call(%sharding_constraint.1680, %sharding_constraint.1682, %sharding_constraint.1683, %constant.1403, %get-tuple-element.1013, /*index=5*/%sharding_constraint.1709, %get-tuple-element.1000, %sharding_constraint.1713, %concatenate.469, %concatenate.470, /*index=10*/%constant.1416, %constant.1416, %constant.1416, %constant.1416, %constant.1416, /*index=15*/%constant.1416), custom_call_target="te_fused_attn_backward_ffi", operand_layout_constraints={bf16[1,4096,32,128]{3,2,1,0}, bf16[1,4096,8,128]{3,2,1,0}, bf16[1,4096,8,128]{3,2,1,0}, bf16[0]{0}, f32[1,32,4096,1]{3,2,1,0}, u32[2,4]{1,0}, bf16[1,4096,32,128]{3,2,1,0}, bf16[1,4096,32,128]{3,2,1,0}, s32[2]{0}, s32[2]{0}, f32[0]{0}, f32[0]{0}, f32[0]{0}, f32[0]{0}, f32[0]{0}, f32[0]{0}}, api_version=API_VERSION_TYPED_FFI, backend_config={attn_heads = 32 : i64, bias_batch = 0 : i64, bias_heads = 0 : i64, bias_type = 0 : i64, deterministic = false, dropout_probability = 0.000000e+00 : f64, input_batch = 1 : i64, is_training = true, kv_max_seqlen = 4096 : i64, mask_type = 3 : i64, max_segments_per_seq = 1 : i64, num_gqa_groups = 8 : i64, q_max_seqlen = 4096 : i64, qk_head_dim = 128 : i64, qkv_layout = 9 : i64, scaling_factor = 1.000000e+00 : f64, v_head_dim = 128 : i64, window_size_left = -1 : i64, window_size_right = -1 : i64}
  %get-tuple-element.1015 = bf16[1,4096,8,128]{3,2,1,0} get-tuple-element(%te_fused_attn_backward_ffi.80), index=2
  %sharding_constraint.1714 = bf16[1,4096,8,128]{3,2,1,0} copy(%get-tuple-element.1015)
  %dot.822 = bf16[1,4096,4096]{2,1,0} dot(%sharding_constraint.1714, %all-gather.324), lhs_contracting_dims={2,3}, rhs_contracting_dims={1,2}
  %get-tuple-element.1016 = bf16[1,4096,8,128]{3,2,1,0} get-tuple-element(%te_fused_attn_backward_ffi.80), index=1
  %sharding_constraint.1715 = bf16[1,4096,8,128]{3,2,1,0} copy(%get-tuple-element.1016)
  %slice.586 = bf16[1,4096,8,64]{3,2,1,0} slice(%sharding_constraint.1715), slice={[0:1], [0:4096], [0:8], [64:128]}
  %mul.6991 = bf16[1,4096,8,64]{3,2,1,0} multiply(%slice.586, %mul.6932)
  %slice.587 = bf16[1,4096,8,64]{3,2,1,0} slice(%sharding_constraint.1715), slice={[0:1], [0:4096], [0:8], [0:64]}
  %mul.6994 = bf16[1,4096,8,64]{3,2,1,0} multiply(%slice.587, %mul.6929)
  %add_any.297 = bf16[1,4096,8,64]{3,2,1,0} add(%mul.6991, %mul.6994)
  %mul.6997 = bf16[1,4096,8,64]{3,2,1,0} multiply(%slice.586, %mul.6929)
  %neg.256 = bf16[1,4096,8,64]{3,2,1,0} negate(%slice.587)
  %mul.7004 = bf16[1,4096,8,64]{3,2,1,0} multiply(%neg.256, %mul.6932)
  %add_any.298 = bf16[1,4096,8,64]{3,2,1,0} add(%mul.6997, %mul.7004)
  %concatenate.478 = bf16[1,4096,8,128]{3,2,1,0} concatenate(%add_any.297, %add_any.298), dimensions={3}
  %dot.823 = bf16[1,4096,4096]{2,1,0} dot(%concatenate.478, %all-gather.323), lhs_contracting_dims={2,3}, rhs_contracting_dims={1,2}
  %add_any.299 = bf16[1,4096,4096]{2,1,0} add(%dot.822, %dot.823)
  %sharding_constraint.1716 = bf16[1,4096,4096]{2,1,0} copy(%add_any.299)
  %get-tuple-element.1017 = bf16[1,4096,32,128]{3,2,1,0} get-tuple-element(%te_fused_attn_backward_ffi.80), index=0
  %sharding_constraint.1717 = bf16[1,4096,32,128]{3,2,1,0} copy(%get-tuple-element.1017)
  %slice.588 = bf16[1,4096,32,64]{3,2,1,0} slice(%sharding_constraint.1717), slice={[0:1], [0:4096], [0:32], [64:128]}
  %mul.7011 = bf16[1,4096,32,64]{3,2,1,0} multiply(%slice.588, %mul.6919)
  %slice.589 = bf16[1,4096,32,64]{3,2,1,0} slice(%sharding_constraint.1717), slice={[0:1], [0:4096], [0:32], [0:64]}
  %mul.7014 = bf16[1,4096,32,64]{3,2,1,0} multiply(%slice.589, %mul.6916)
  %add_any.300 = bf16[1,4096,32,64]{3,2,1,0} add(%mul.7011, %mul.7014)
  %mul.7017 = bf16[1,4096,32,64]{3,2,1,0} multiply(%slice.588, %mul.6916)
  %neg.257 = bf16[1,4096,32,64]{3,2,1,0} negate(%slice.589)
  %mul.7021 = bf16[1,4096,32,64]{3,2,1,0} multiply(%neg.257, %mul.6919)
  %add_any.301 = bf16[1,4096,32,64]{3,2,1,0} add(%mul.7017, %mul.7021)
  %concatenate.479 = bf16[1,4096,32,128]{3,2,1,0} concatenate(%add_any.300, %add_any.301), dimensions={3}
  %dot.824 = bf16[1,4096,4096]{2,1,0} dot(%concatenate.479, %all-gather.322), lhs_contracting_dims={2,3}, rhs_contracting_dims={1,2}
  %sharding_constraint.1718 = bf16[1,4096,4096]{2,1,0} copy(%dot.824)
  %add_any.302 = bf16[1,4096,4096]{2,1,0} add(%sharding_constraint.1716, %sharding_constraint.1718)
  %sharding_constraint.1719 = bf16[1,4096,4096]{2,1,0} copy(%add_any.302)
  %mul.7023 = bf16[1,4096,4096]{2,1,0} multiply(%sharding_constraint.1719, %mul.6912)
  %convert_element_type.2558 = f32[1,4096,4096]{2,1,0} convert(%mul.7023)
  %mul.7026 = f32[1,4096,4096]{2,1,0} multiply(%convert_element_type.2558, %mul.6910)
  %mul.7027 = f32[1,4096,4096]{2,1,0} multiply(%convert_element_type.2529, %convert_element_type.2558)
  %reduce.724 = f32[1,4096]{1,0} reduce(%mul.7027, %constant.1360), dimensions={2}, to_apply=%region_696.17948
  %reshape.12437 = f32[1,4096,1]{2,1,0} reshape(%reduce.724)
  %div.1130 = f32[1,4096,1]{2,1,0} divide(%rsqrt.161, %add.2144)
  %mul.7028 = f32[1,4096,1]{2,1,0} multiply(%div.1130, %broadcast.3620)
  %mul.7029 = f32[1,4096,1]{2,1,0} multiply(%reshape.12437, %mul.7028)
  %mul.7030 = f32[1,4096,1]{2,1,0} multiply(%mul.7029, %mul.4455)
  %mul.7031 = f32[1,4096]{1,0} reshape(%mul.7030)
  %mul.7033 = f32[1,4096,4096]{2,1,0} broadcast(%mul.7031), dimensions={0,1}
  %mul.7034 = f32[1,4096,4096]{2,1,0} multiply(%convert_element_type.2529, %mul.7033)
  %add_any.303 = f32[1,4096,4096]{2,1,0} add(%mul.7026, %mul.7034)
  %convert_element_type.2559 = bf16[1,4096,4096]{2,1,0} convert(%add_any.303)
  %add_any.304 = bf16[1,4096,4096]{2,1,0} add(%add_any.296, %convert_element_type.2559)
  %sharding_constraint.1720 = bf16[1,4096,4096]{2,1,0} copy(%add_any.304)
  %tuple.291 = (bf16[512,8]{1,0}, bf16[1,4096,14336]{2,1,0}, bf16[1,4096,14336]{2,1,0}, bf16[1,14336,4096]{2,1,0}, bf16[4096]{0}, /*index=5*/bf16[4096]{0}, bf16[512,8,128]{2,1,0}, bf16[32,128,512]{2,1,0}, bf16[512,32,128]{2,1,0}, bf16[512,8,128]{2,1,0}, /*index=10*/bf16[1,4096,4096]{2,1,0}, s32[1,4096]{1,0}, s32[1,4096]{1,0}, bf16[1,4096,4096]{2,1,0}) tuple(%param.153, %param.154, %param.155, %param.156, %param.152, /*index=5*/%param.147, %param.149, %param.151, %param.148, %param.150, /*index=10*/%sharding_constraint.498, %param.10, %param.7, %sharding_constraint.1720)
  %remat2.28 = (bf16[512,8]{1,0}, bf16[1,4096,14336]{2,1,0}, bf16[1,4096,14336]{2,1,0}, bf16[1,14336,4096]{2,1,0}, bf16[4096]{0}, /*index=5*/bf16[4096]{0}, bf16[512,8,128]{2,1,0}, bf16[32,128,512]{2,1,0}, bf16[512,32,128]{2,1,0}, bf16[512,8,128]{2,1,0}, /*index=10*/bf16[1,4096,4096]{2,1,0}, s32[1,4096]{1,0}, s32[1,4096]{1,0}, bf16[1,4096,4096]{2,1,0}) opt-barrier(%tuple.291)
  %get-tuple-element.1018 = bf16[1,4096,4096]{2,1,0} get-tuple-element(%remat2.28), index=13
  %sharding_constraint.1721 = bf16[1,4096,4096]{2,1,0} copy(%get-tuple-element.1018)
  %iota.2659 = s32[1,4096,2,1]{3,2,1,0} iota(), iota_dimension=1
  %get-tuple-element.1019 = bf16[1,4096,4096]{2,1,0} get-tuple-element(%remat2.28), index=10
  %sharding_constraint.1722 = bf16[1,4096,4096]{2,1,0} copy(%get-tuple-element.1019)
  %convert_element_type.2560 = f32[1,4096,4096]{2,1,0} convert(%sharding_constraint.1722)
  %square.102 = f32[1,4096,4096]{2,1,0} multiply(%convert_element_type.2560, %convert_element_type.2560)
  %reduce.725 = f32[1,4096]{1,0} reduce(%square.102, %constant.1360), dimensions={2}, to_apply=%region_697.17990
  %div.1131 = f32[1,4096]{1,0} multiply(%reduce.725, %broadcast.3412)
  %add.2160 = f32[1,4096]{1,0} add(%div.1131, %broadcast.3413)
  %add.2161 = f32[1,4096,1]{2,1,0} reshape(%add.2160)
  %rsqrt.163 = f32[1,4096,1]{2,1,0} rsqrt(%add.2161)
  %mul.7035 = f32[1,4096]{1,0} reshape(%rsqrt.163)
  %mul.7036 = f32[1,4096,4096]{2,1,0} broadcast(%mul.7035), dimensions={0,1}
  %mul.7045 = f32[1,4096,4096]{2,1,0} multiply(%convert_element_type.2560, %mul.7036)
  %convert_element_type.2561 = bf16[1,4096,4096]{2,1,0} convert(%mul.7045)
  %get-tuple-element.1020 = bf16[4096]{0} get-tuple-element(%remat2.28), index=5
  %mul.7055 = bf16[1,4096,4096]{2,1,0} broadcast(%get-tuple-element.1020), dimensions={2}
  %mul.7056 = bf16[1,4096,4096]{2,1,0} multiply(%convert_element_type.2561, %mul.7055)
  %sharding_constraint.1723 = bf16[1,4096,4096]{2,1,0} copy(%mul.7056)
  %sharding_constraint.1724 = bf16[1,4096,4096]{2,1,0} copy(%sharding_constraint.1723)
  %get-tuple-element.1021 = bf16[512,32,128]{2,1,0} get-tuple-element(%remat2.28), index=8
  %all-gather.328 = bf16[4096,32,128]{2,1,0} all-gather(%get-tuple-element.1021), channel_id=595, replica_groups=[1,8]<=[8], dimensions={0}, use_global_device_ids=true
  %dot.825 = bf16[1,4096,32,128]{3,2,1,0} dot(%sharding_constraint.1724, %all-gather.328), lhs_contracting_dims={2}, rhs_contracting_dims={0}
  %slice.590 = bf16[1,4096,32,64]{3,2,1,0} slice(%dot.825), slice={[0:1], [0:4096], [0:32], [0:64]}
  %get-tuple-element.1022 = s32[1,4096]{1,0} get-tuple-element(%remat2.28), index=12
  %convert_element_type.2563 = f32[1,4096]{1,0} convert(%get-tuple-element.1022)
  %div.1132 = f32[1,4096,1,64]{3,2,1,0} broadcast(%convert_element_type.2563), dimensions={0,1}
  %div.1135 = f32[1,4096,1,64]{3,2,1,0} divide(%div.1132, %div.402)
  %cos.99 = f32[1,4096,1,64]{3,2,1,0} cosine(%div.1135)
  %convert_element_type.2565 = bf16[1,4096,1,64]{3,2,1,0} convert(%cos.99)
  %mul.7059 = bf16[1,4096,64]{2,1,0} reshape(%convert_element_type.2565)
  %mul.7060 = bf16[1,4096,32,64]{3,2,1,0} broadcast(%mul.7059), dimensions={0,1,3}
  %mul.7061 = bf16[1,4096,32,64]{3,2,1,0} multiply(%slice.590, %mul.7060)
  %slice.591 = bf16[1,4096,32,64]{3,2,1,0} slice(%dot.825), slice={[0:1], [0:4096], [0:32], [64:128]}
  %sin.98 = f32[1,4096,1,64]{3,2,1,0} sine(%div.1135)
  %convert_element_type.2566 = bf16[1,4096,1,64]{3,2,1,0} convert(%sin.98)
  %mul.7062 = bf16[1,4096,64]{2,1,0} reshape(%convert_element_type.2566)
  %mul.7063 = bf16[1,4096,32,64]{3,2,1,0} broadcast(%mul.7062), dimensions={0,1,3}
  %mul.7064 = bf16[1,4096,32,64]{3,2,1,0} multiply(%slice.591, %mul.7063)
  %sub.332 = bf16[1,4096,32,64]{3,2,1,0} subtract(%mul.7061, %mul.7064)
  %mul.7067 = bf16[1,4096,32,64]{3,2,1,0} multiply(%slice.591, %mul.7060)
  %mul.7071 = bf16[1,4096,32,64]{3,2,1,0} multiply(%slice.590, %mul.7063)
  %add.2162 = bf16[1,4096,32,64]{3,2,1,0} add(%mul.7067, %mul.7071)
  %concatenate.480 = bf16[1,4096,32,128]{3,2,1,0} concatenate(%sub.332, %add.2162), dimensions={3}
  %sharding_constraint.1725 = bf16[1,4096,32,128]{3,2,1,0} copy(%concatenate.480)
  %get-tuple-element.1023 = bf16[512,8,128]{2,1,0} get-tuple-element(%remat2.28), index=6
  %all-gather.329 = bf16[4096,8,128]{2,1,0} all-gather(%get-tuple-element.1023), channel_id=596, replica_groups=[1,8]<=[8], dimensions={0}, use_global_device_ids=true
  %dot.826 = bf16[1,4096,8,128]{3,2,1,0} dot(%sharding_constraint.1724, %all-gather.329), lhs_contracting_dims={2}, rhs_contracting_dims={0}
  %slice.592 = bf16[1,4096,8,64]{3,2,1,0} slice(%dot.826), slice={[0:1], [0:4096], [0:8], [0:64]}
  %mul.7075 = bf16[1,4096,8,64]{3,2,1,0} broadcast(%mul.7059), dimensions={0,1,3}
  %mul.7076 = bf16[1,4096,8,64]{3,2,1,0} multiply(%slice.592, %mul.7075)
  %slice.593 = bf16[1,4096,8,64]{3,2,1,0} slice(%dot.826), slice={[0:1], [0:4096], [0:8], [64:128]}
  %mul.7095 = bf16[1,4096,8,64]{3,2,1,0} broadcast(%mul.7062), dimensions={0,1,3}
  %mul.7098 = bf16[1,4096,8,64]{3,2,1,0} multiply(%slice.593, %mul.7095)
  %sub.333 = bf16[1,4096,8,64]{3,2,1,0} subtract(%mul.7076, %mul.7098)
  %mul.7101 = bf16[1,4096,8,64]{3,2,1,0} multiply(%slice.593, %mul.7075)
  %mul.7104 = bf16[1,4096,8,64]{3,2,1,0} multiply(%slice.592, %mul.7095)
  %add.2163 = bf16[1,4096,8,64]{3,2,1,0} add(%mul.7101, %mul.7104)
  %concatenate.481 = bf16[1,4096,8,128]{3,2,1,0} concatenate(%sub.333, %add.2163), dimensions={3}
  %sharding_constraint.1727 = bf16[1,4096,8,128]{3,2,1,0} copy(%concatenate.481)
  %get-tuple-element.1024 = bf16[512,8,128]{2,1,0} get-tuple-element(%remat2.28), index=9
  %all-gather.330 = bf16[4096,8,128]{2,1,0} all-gather(%get-tuple-element.1024), channel_id=597, replica_groups=[1,8]<=[8], dimensions={0}, use_global_device_ids=true
  %dot.827 = bf16[1,4096,8,128]{3,2,1,0} dot(%sharding_constraint.1724, %all-gather.330), lhs_contracting_dims={2}, rhs_contracting_dims={0}
  %sharding_constraint.1728 = bf16[1,4096,8,128]{3,2,1,0} copy(%dot.827)
  %get-tuple-element.1025 = s32[1,4096]{1,0} get-tuple-element(%remat2.28), index=11
  %eq.2350 = s32[1,4096,4096]{2,1,0} broadcast(%get-tuple-element.1025), dimensions={0,1}
  %eq.2351 = s32[1,4096,4096]{2,1,0} broadcast(%get-tuple-element.1025), dimensions={0,2}
  %eq.2352 = pred[1,4096,4096]{2,1,0} compare(%eq.2350, %eq.2351), direction=EQ
  %and.180 = pred[1,4096,4096]{2,1,0} and(%eq.2352, %and.64)
  %select_n.566 = f32[1,4096,4096]{2,1,0} select(%and.180, %broadcast_in_dim.516, %broadcast_in_dim.517)
  %ne.115 = pred[1,4096,4096]{2,1,0} compare(%select_n.566, %broadcast_in_dim.516), direction=NE
  %not.113 = pred[1,4096,4096]{2,1,0} not(%ne.115)
  %convert_element_type.2573 = s32[1,4096,4096]{2,1,0} convert(%not.113)
  %reduce.726 = s32[1,4096]{1,0} reduce(%convert_element_type.2573, %constant.1181), dimensions={1}, to_apply=%region_698.18086
  %reduce_sum.5726 = s32[1,1,1,4096]{3,2,1,0} reshape(%reduce.726)
  %slice.594 = s32[1,1,1,1]{3,2,1,0} slice(%reduce_sum.5726), slice={[0:1], [0:1], [0:1], [0:1]}
  %squeeze.49 = s32[1,1]{1,0} reshape(%slice.594)
  %reshape.12444 = s32[1]{0} reshape(%squeeze.49)
  %lt.182 = pred[1]{0} compare(%reshape.12444, %constant.1418), direction=LT
  %select_n.567 = s32[1]{0} select(%lt.182, %broadcast_in_dim.518, %reshape.12444)
  %concatenate.482 = s32[2]{0} concatenate(%constant.1418, %select_n.567), dimensions={0}
  %reduce.727 = s32[1,4096]{1,0} reduce(%convert_element_type.2573, %constant.1181), dimensions={2}, to_apply=%region_699.18095
  %reduce_sum.5733 = s32[1,1,1,4096]{3,2,1,0} reshape(%reduce.727)
  %reduce.728 = s32[1,1]{1,0} reduce(%reduce_sum.5733, %constant.1415), dimensions={3,2}, to_apply=%region_700.18101
  %reshape.12445 = s32[1]{0} reshape(%reduce.728)
  %lt.183 = pred[1]{0} compare(%reshape.12445, %constant.1418), direction=LT
  %select_n.568 = s32[1]{0} select(%lt.183, %broadcast_in_dim.518, %reshape.12445)
  %concatenate.483 = s32[2]{0} concatenate(%constant.1418, %select_n.568), dimensions={0}
  %te_fused_attn_forward_ffi.196 = (bf16[1,4096,32,128]{3,2,1,0}, f32[1,32,4096,1]{3,2,1,0}, u32[2,4]{1,0}, u8[48]{0}) custom-call(%sharding_constraint.1725, %sharding_constraint.1727, %sharding_constraint.1728, %constant.1403, %dynamic-slice.38, /*index=5*/%concatenate.482, %concatenate.483, %constant.1416, %constant.1416, %constant.1416, /*index=10*/%constant.1416, %constant.1416, %constant.1416), custom_call_target="te_fused_attn_forward_ffi", operand_layout_constraints={bf16[1,4096,32,128]{3,2,1,0}, bf16[1,4096,8,128]{3,2,1,0}, bf16[1,4096,8,128]{3,2,1,0}, bf16[0]{0}, u32[2]{0}, s32[2]{0}, s32[2]{0}, f32[0]{0}, f32[0]{0}, f32[0]{0}, f32[0]{0}, f32[0]{0}, f32[0]{0}}, api_version=API_VERSION_TYPED_FFI, backend_config={attn_heads = 32 : i64, bias_batch = 0 : i64, bias_heads = 0 : i64, bias_type = 0 : i64, deterministic = false, dropout_probability = 0.000000e+00 : f64, input_batch = 1 : i64, is_training = true, kv_max_seqlen = 4096 : i64, mask_type = 3 : i64, max_segments_per_seq = 1 : i64, num_gqa_groups = 8 : i64, q_max_seqlen = 4096 : i64, qk_head_dim = 128 : i64, qkv_layout = 9 : i64, scaling_factor = 1.000000e+00 : f64, v_head_dim = 128 : i64, window_size_left = -1 : i64, window_size_right = -1 : i64}
  %get-tuple-element.1026 = bf16[1,4096,32,128]{3,2,1,0} get-tuple-element(%te_fused_attn_forward_ffi.196), index=0
  %sharding_constraint.1729 = bf16[1,4096,32,128]{3,2,1,0} copy(%get-tuple-element.1026)
  %get-tuple-element.1027 = bf16[32,128,512]{2,1,0} get-tuple-element(%remat2.28), index=7
  %all-gather.331 = bf16[32,128,4096]{2,1,0} all-gather(%get-tuple-element.1027), channel_id=598, replica_groups=[1,8]<=[8], dimensions={2}, use_global_device_ids=true
  %dot.828 = bf16[1,4096,4096]{2,1,0} dot(%sharding_constraint.1729, %all-gather.331), lhs_contracting_dims={2,3}, rhs_contracting_dims={0,1}
  %sharding_constraint.1730 = bf16[1,4096,4096]{2,1,0} copy(%dot.828)
  %add.2164 = bf16[1,4096,4096]{2,1,0} add(%sharding_constraint.1722, %sharding_constraint.1730)
  %convert_element_type.2575 = f32[1,4096,4096]{2,1,0} convert(%add.2164)
  %square.103 = f32[1,4096,4096]{2,1,0} multiply(%convert_element_type.2575, %convert_element_type.2575)
  %reduce.729 = f32[1,4096]{1,0} reduce(%square.103, %constant.1360), dimensions={2}, to_apply=%region_701.18116
  %div.1140 = f32[1,4096]{1,0} multiply(%reduce.729, %broadcast.3412)
  %add.2165 = f32[1,4096]{1,0} add(%div.1140, %broadcast.3413)
  %add.2166 = f32[1,4096,1]{2,1,0} reshape(%add.2165)
  %rsqrt.164 = f32[1,4096,1]{2,1,0} rsqrt(%add.2166)
  %mul.7106 = f32[1,4096]{1,0} reshape(%rsqrt.164)
  %mul.7107 = f32[1,4096,4096]{2,1,0} broadcast(%mul.7106), dimensions={0,1}
  %mul.7108 = f32[1,4096,4096]{2,1,0} multiply(%convert_element_type.2575, %mul.7107)
  %convert_element_type.2576 = bf16[1,4096,4096]{2,1,0} convert(%mul.7108)
  %get-tuple-element.1028 = bf16[4096]{0} get-tuple-element(%remat2.28), index=4
  %mul.7109 = bf16[1,4096,4096]{2,1,0} broadcast(%get-tuple-element.1028), dimensions={2}
  %mul.7110 = bf16[1,4096,4096]{2,1,0} multiply(%convert_element_type.2576, %mul.7109)
  %sharding_constraint.1731 = bf16[1,4096,4096]{2,1,0} copy(%mul.7110)
  %get-tuple-element.1029 = bf16[512,8]{1,0} get-tuple-element(%remat2.28), index=0
  %all-gather.332 = bf16[4096,8]{1,0} all-gather(%get-tuple-element.1029), channel_id=599, replica_groups=[1,8]<=[8], dimensions={0}, use_global_device_ids=true
  %dot.829 = bf16[1,4096,8]{2,1,0} dot(%sharding_constraint.1731, %all-gather.332), lhs_contracting_dims={2}, rhs_contracting_dims={0}
  %sharding_constraint.1732 = bf16[1,4096,8]{2,1,0} copy(%dot.829)
  %top_k.147 = bf16[4096,8]{1,0} reshape(%sharding_constraint.1732)
  %top_k.148 = (bf16[4096,2]{1,0}, s32[4096,2]{1,0}) custom-call(%top_k.147), custom_call_target="TopK", called_computations={%compare_greater_than.49.18137.clone}
  %get-tuple-element.1030 = bf16[4096,2]{1,0} get-tuple-element(%top_k.148), index=0
  %get-tuple-element.1031 = s32[4096,2]{1,0} get-tuple-element(%top_k.148), index=1
  %add.2167 = s32[4096,2]{1,0} add(%get-tuple-element.1031, %broadcast.3418)
  %sort.113 = (bf16[4096,2]{1,0}, s32[4096,2]{1,0}) sort(%get-tuple-element.1030, %add.2167), dimensions={1}, is_stable=true, to_apply=%compare-value-and-index.49
  %get-tuple-element.1033 = s32[4096,2]{1,0} get-tuple-element(%sort.113), index=1
  %slice.596 = s32[4096,2]{1,0} slice(%get-tuple-element.1033), slice={[0:4096], [0:2]}
  %top_k.149 = s32[1,4096,2]{2,1,0} reshape(%slice.596)
  %lt.184 = pred[1,4096,2]{2,1,0} compare(%top_k.149, %broadcast.3419), direction=LT
  %add.2168 = s32[1,4096,2]{2,1,0} add(%top_k.149, %broadcast.3420)
  %select_n.569 = s32[1,4096,2]{2,1,0} select(%lt.184, %add.2168, %top_k.149)
  %broadcast_in_dim.719 = s32[1,4096,2,1]{3,2,1,0} reshape(%select_n.569)
  %concatenate.484 = s32[1,4096,2,3]{3,2,1,0} concatenate(%add.1356, %iota.2659, %broadcast_in_dim.719), dimensions={3}
  %subtract.166 = s32[1,4096,2,3]{3,2,1,0} subtract(%concatenate.484, %broadcast.3428)
  %scatter.244 = u32[1,4096,8]{2,1,0} scatter(%dynamic-slice.43, %subtract.166, %add.1401), update_window_dims={}, inserted_window_dims={0,1,2}, scatter_dims_to_operand_dims={0,1,2}, index_vector_dim=3, to_apply=%region_702.18173.clone
  %gather.66 = u32[1,4096,2]{2,1,0} gather(%scatter.244, %subtract.166), offset_dims={}, collapsed_slice_dims={0,1,2}, start_index_map={0,1,2}, index_vector_dim=3, slice_sizes={1,1,1}
  %eq.2353 = pred[1,4096,2]{2,1,0} compare(%add.1401, %gather.66), direction=EQ
  %get-tuple-element.1032 = bf16[4096,2]{1,0} get-tuple-element(%sort.113), index=0
  %slice.595 = bf16[4096,2]{1,0} slice(%get-tuple-element.1032), slice={[0:4096], [0:2]}
  %convert_element_type.2577 = f32[4096,2]{1,0} convert(%slice.595)
  %convert_element_type.2578 = f32[1,4096,2]{2,1,0} reshape(%convert_element_type.2577)
  %reduce.730 = f32[4096]{0} reduce(%convert_element_type.2577, %constant.1450), dimensions={1}, to_apply=%region_703.18182
  %sub.334 = f32[1,4096]{1,0} reshape(%reduce.730)
  %sub.335 = f32[1,4096,2]{2,1,0} broadcast(%sub.334), dimensions={0,1}
  %sub.336 = f32[1,4096,2]{2,1,0} subtract(%convert_element_type.2578, %sub.335)
  %exp.225 = f32[1,4096,2]{2,1,0} exponential(%sub.336)
  %reduce.731 = f32[1,4096]{1,0} reduce(%exp.225, %constant.1360), dimensions={2}, to_apply=%region_704.18191
  %div.1141 = f32[1,4096,2]{2,1,0} broadcast(%reduce.731), dimensions={0,1}
  %div.1142 = f32[1,4096,2]{2,1,0} divide(%exp.225, %div.1141)
  %convert_element_type.2579 = bf16[1,4096,2]{2,1,0} convert(%div.1142)
  %select_n.570 = bf16[1,4096,2]{2,1,0} select(%eq.2353, %convert_element_type.2579, %broadcast.3427)
  %scatter.245 = bf16[1,4096,8]{2,1,0} scatter(%broadcast.3379, %subtract.166, %select_n.570), update_window_dims={}, inserted_window_dims={0,1,2}, scatter_dims_to_operand_dims={0,1,2}, index_vector_dim=3, to_apply=%region_705.18200.clone
  %eq.2355 = s32[1,4096,2,8]{3,2,1,0} broadcast(%top_k.149), dimensions={0,1,2}
  %iota.2671 = s32[1,4096,2,8]{3,2,1,0} iota(), iota_dimension=3
  %eq.2356 = pred[1,4096,2,8]{3,2,1,0} compare(%eq.2355, %iota.2671), direction=EQ
  %convert_element_type.2581 = s32[1,4096,2,8]{3,2,1,0} convert(%eq.2356)
  %reshape.12489 = s32[1,8192,8]{2,1,0} reshape(%convert_element_type.2581)
  %sharding_constraint.1733 = s32[1,8192,8]{2,1,0} copy(%reshape.12489)
  %reduce-window.49 = s32[1,8192,8]{2,1,0} reduce-window(%sharding_constraint.1733, %constant.1181), window={size=1x8192x1 pad=0_0x8191_0x0_0}, to_apply=%region_706.18212
  %reshape.12491 = s32[1,4096,2,8]{3,2,1,0} reshape(%reduce-window.49)
  %sharding_constraint.1734 = s32[1,4096,2,8]{3,2,1,0} copy(%reshape.12491)
  %le.134 = pred[1,4096,2,8]{3,2,1,0} compare(%sharding_constraint.1734, %broadcast.3429), direction=LE
  %mul.7111 = s32[1,4096,2,8]{3,2,1,0} select(%le.134, %convert_element_type.2581, %broadcast.3430)
  %reduce.732 = s32[1,4096,8]{2,1,0} reduce(%mul.7111, %constant.1181), dimensions={2}, to_apply=%region_707.18221
  %convert_element_type.2582 = bf16[1,4096,8]{2,1,0} convert(%reduce.732)
  %mul.7112 = bf16[1,4096,8]{2,1,0} multiply(%scatter.245, %convert_element_type.2582)
  %mul.7116 = bf16[1,4096,8,1025]{3,2,1,0} broadcast(%mul.7112), dimensions={0,1,2}
  %mul.7117 = s32[1,8192,8]{2,1,0} multiply(%sharding_constraint.1733, %reduce-window.49)
  %reshape.12492 = s32[1,4096,2,8]{3,2,1,0} reshape(%mul.7117)
  %reduce.733 = s32[1,4096,8]{2,1,0} reduce(%reshape.12492, %constant.1181), dimensions={2}, to_apply=%region_708.18231
  %mul.7118 = s32[1,4096,8]{2,1,0} multiply(%reduce.733, %reduce.732)
  %eq.2357 = s32[1,4096,8,1025]{3,2,1,0} broadcast(%mul.7118), dimensions={0,1,2}
  %iota.2672 = s32[1,4096,8,1025]{3,2,1,0} iota(), iota_dimension=3
  %eq.2358 = pred[1,4096,8,1025]{3,2,1,0} compare(%eq.2357, %iota.2672), direction=EQ
  %convert_element_type.2583 = s32[1,4096,8,1025]{3,2,1,0} convert(%eq.2358)
  %convert_element_type.2584 = bf16[1,4096,8,1025]{3,2,1,0} convert(%convert_element_type.2583)
  %mul.7122 = bf16[1,4096,8,1025]{3,2,1,0} multiply(%mul.7116, %convert_element_type.2584)
  %slice.597 = bf16[1,4096,8,1024]{3,2,1,0} slice(%mul.7122), slice={[0:1], [0:4096], [0:8], [1:1025]}
  %convert_element_type.2585 = pred[1,4096,8,1024]{3,2,1,0} compare(%slice.597, %broadcast.3431), direction=NE
  %sharding_constraint.1735 = pred[1,4096,8,1024]{3,2,1,0} copy(%convert_element_type.2585)
  %dot_general.102 = bf16[1,4096,8,1024]{3,2,1,0} convert(%sharding_constraint.1735)
  %dot.830 = bf16[1,8,1024,4096]{3,2,1,0} dot(%dot_general.102, %sharding_constraint.1731), lhs_batch_dims={0}, lhs_contracting_dims={1}, rhs_batch_dims={0}, rhs_contracting_dims={1}
  %reshape.12495 = bf16[1,8,1,1024,4096]{4,3,2,1,0} reshape(%dot.830)
  %all-to-all.132 = bf16[1,8,1,1024,4096]{4,3,2,1,0} all-to-all(%reshape.12495), channel_id=603, replica_groups=[1,8]<=[8], dimensions={1}
  %transpose.220 = bf16[8,1,1,1024,4096]{4,3,2,0,1} transpose(%all-to-all.132), dimensions={1,0,2,3,4}
  %reshape.12496 = bf16[8,1,1024,4096]{3,2,1,0} reshape(%transpose.220)
  %transpose.221 = bf16[1,8,1024,4096]{3,2,0,1} transpose(%reshape.12496), dimensions={1,0,2,3}
  %sharding_constraint.1736 = bf16[1,8,1024,4096]{3,2,0,1} copy(%transpose.221)
  %get-tuple-element.1036 = bf16[1,4096,14336]{2,1,0} get-tuple-element(%remat2.28), index=1
  %sharding_constraint.1737 = bf16[1,4096,14336]{2,1,0} copy(%get-tuple-element.1036)
  %dot.831 = bf16[1,8,1024,14336]{3,2,1,0} dot(%sharding_constraint.1736, %sharding_constraint.1737), lhs_batch_dims={0}, lhs_contracting_dims={3}, rhs_batch_dims={0}, rhs_contracting_dims={1}
  %sharding_constraint.1738 = bf16[1,8,1024,14336]{3,2,1,0} copy(%dot.831)
  %neg.258 = bf16[1,8,1024,14336]{3,2,1,0} negate(%sharding_constraint.1738)
  %exp.226 = bf16[1,8,1024,14336]{3,2,1,0} exponential(%neg.258)
  %add.2173 = bf16[1,8,1024,14336]{3,2,1,0} add(%exp.226, %jit_silu_.0)
  %div.1143 = bf16[1,8,1024,14336]{3,2,1,0} divide(%jit_silu_.0, %add.2173)
  %mul.7129 = bf16[1,8,1024,14336]{3,2,1,0} multiply(%sharding_constraint.1738, %div.1143)
  %sharding_constraint.1739 = bf16[1,4096,4096]{2,1,0} copy(%sharding_constraint.1721)
  %sharding_constraint.1740 = bf16[1,4096,8,1024]{3,2,1,0} copy(%slice.597)
  %dot.832 = bf16[1,4096,8,1024]{3,2,1,0} dot(%sharding_constraint.1739, %sharding_constraint.1740), lhs_batch_dims={0}, lhs_contracting_dims={1}, rhs_batch_dims={0}, rhs_contracting_dims={1}
  %reshape.12499 = bf16[1,4096,8,1,1024]{4,3,2,1,0} reshape(%dot.832)
  %all-to-all.133 = bf16[1,4096,8,1,1024]{4,3,2,1,0} all-to-all(%reshape.12499), channel_id=604, replica_groups=[1,8]<=[8], dimensions={2}
  %transpose.222 = bf16[8,1,4096,1,1024]{4,3,0,2,1} transpose(%all-to-all.133), dimensions={2,0,1,3,4}
  %reshape.12500 = bf16[8,4096,1,1024]{3,2,1,0} reshape(%transpose.222)
  %transpose.223 = bf16[1,8,1024,4096]{2,0,3,1} transpose(%reshape.12500), dimensions={2,0,3,1}
  %sharding_constraint.1741 = bf16[1,8,1024,4096]{2,0,3,1} copy(%transpose.223)
  %get-tuple-element.1037 = bf16[1,14336,4096]{2,1,0} get-tuple-element(%remat2.28), index=3
  %sharding_constraint.1742 = bf16[1,14336,4096]{2,1,0} copy(%get-tuple-element.1037)
  %dot.833 = bf16[1,8,1024,14336]{3,2,1,0} dot(%sharding_constraint.1741, %sharding_constraint.1742), lhs_batch_dims={0}, lhs_contracting_dims={3}, rhs_batch_dims={0}, rhs_contracting_dims={2}
  %mul.7130 = bf16[1,8,1024,14336]{3,2,1,0} multiply(%mul.7129, %dot.833)
  %sharding_constraint.1743 = bf16[1,8,1024,14336]{3,2,1,0} copy(%mul.7130)
  %get-tuple-element.1038 = bf16[1,4096,14336]{2,1,0} get-tuple-element(%remat2.28), index=2
  %sharding_constraint.1745 = bf16[1,4096,14336]{2,1,0} copy(%get-tuple-element.1038)
  %dot.834 = bf16[1,8,1024,4096]{3,2,1,0} dot(%sharding_constraint.1743, %sharding_constraint.1745), lhs_batch_dims={0}, lhs_contracting_dims={3}, rhs_batch_dims={0}, rhs_contracting_dims={2}
  %dot.835 = bf16[1,8,1024,14336]{3,2,1,0} dot(%sharding_constraint.1736, %sharding_constraint.1745), lhs_batch_dims={0}, lhs_contracting_dims={3}, rhs_batch_dims={0}, rhs_contracting_dims={1}
  %sharding_constraint.1747 = bf16[1,8,1024,14336]{3,2,1,0} copy(%dot.835)
  %mul.7131 = bf16[1,8,1024,14336]{3,2,1,0} multiply(%dot.833, %sharding_constraint.1747)
  %mul.7132 = bf16[1,8,1024,14336]{3,2,1,0} multiply(%mul.7131, %div.1143)
  %mul.7133 = bf16[1,8,1024,14336]{3,2,1,0} multiply(%sharding_constraint.1738, %mul.7131)
  %sub.337 = bf16[1,8,1024,14336]{3,2,1,0} subtract(%jit_silu_.0, %div.1143)
  %mul.7134 = bf16[1,8,1024,14336]{3,2,1,0} multiply(%div.1143, %sub.337)
  %mul.7135 = bf16[1,8,1024,14336]{3,2,1,0} multiply(%mul.7133, %mul.7134)
  %add_any.305 = bf16[1,8,1024,14336]{3,2,1,0} add(%mul.7132, %mul.7135)
  %sharding_constraint.1748 = bf16[1,8,1024,14336]{3,2,1,0} copy(%add_any.305)
  %dot.836 = bf16[1,8,1024,4096]{3,2,1,0} dot(%sharding_constraint.1748, %sharding_constraint.1737), lhs_batch_dims={0}, lhs_contracting_dims={3}, rhs_batch_dims={0}, rhs_contracting_dims={2}
  %add_any.306 = bf16[1,8,1024,4096]{3,2,1,0} add(%dot.834, %dot.836)
  %sharding_constraint.1749 = bf16[1,8,1024,4096]{3,2,1,0} copy(%add_any.306)
  %transpose.224 = bf16[8,1,1024,4096]{3,2,0,1} transpose(%sharding_constraint.1749), dimensions={1,0,2,3}
  %reshape.12503 = bf16[8,1,1,1024,4096]{4,3,2,1,0} reshape(%transpose.224)
  %all-to-all.134 = bf16[8,1,1,1024,4096]{4,3,2,1,0} all-to-all(%reshape.12503), channel_id=605, replica_groups=[1,8]<=[8], dimensions={0}
  %transpose.225 = bf16[1,8,1,1024,4096]{4,3,2,0,1} transpose(%all-to-all.134), dimensions={1,0,2,3,4}
  %reshape.12504 = bf16[1,8,1024,4096]{3,2,1,0} reshape(%transpose.225)
  %dot.837 = bf16[1,4096,4096]{2,1,0} dot(%dot_general.102, %reshape.12504), lhs_batch_dims={0}, lhs_contracting_dims={2,3}, rhs_batch_dims={0}, rhs_contracting_dims={1,2}
  %reshape.12506 = s32[1,4096,2,1]{3,2,1,0} reshape(%slice.596)
  %ge.17 = pred[1,4096,2,3]{3,2,1,0} compare(%concatenate.484, %broadcast.3629), direction=GE
  %le.136 = pred[1,4096,2,3]{3,2,1,0} compare(%concatenate.484, %le.67), direction=LE
  %and.181 = pred[1,4096,2,3]{3,2,1,0} and(%ge.17, %le.136)
  %reduce.734 = pred[1,4096,2]{2,1,0} reduce(%and.181, %constant.5574), dimensions={3}, to_apply=%region_709.18288
  %mul.7136 = bf16[1,8,1024,14336]{3,2,1,0} multiply(%mul.7129, %sharding_constraint.1747)
  %dot.838 = bf16[1,8,1024,4096]{3,2,1,0} dot(%mul.7136, %sharding_constraint.1742), lhs_batch_dims={0}, lhs_contracting_dims={3}, rhs_batch_dims={0}, rhs_contracting_dims={1}
  %sharding_constraint.1750 = bf16[1,8,1024,4096]{3,2,1,0} copy(%dot.838)
  %reshape.12513 = bf16[1,8,1,1024,4096]{4,3,2,1,0} reshape(%sharding_constraint.1750)
  %all-to-all.135 = bf16[1,8,1,1024,4096]{4,3,2,1,0} all-to-all(%reshape.12513), channel_id=606, replica_groups=[1,8]<=[8], dimensions={1}
  %transpose.226 = bf16[8,1,1,1024,4096]{4,3,2,0,1} transpose(%all-to-all.135), dimensions={1,0,2,3,4}
  %reshape.12514 = bf16[8,1,1024,4096]{3,2,1,0} reshape(%transpose.226)
  %dot.839 = bf16[1,4096,8,1024]{3,2,1,0} dot(%sharding_constraint.1739, %reshape.12514), lhs_batch_dims={0}, lhs_contracting_dims={2}, rhs_batch_dims={1}, rhs_contracting_dims={3}
  %sharding_constraint.1751 = bf16[1,4096,8,1024]{3,2,1,0} copy(%dot.839)
  %pad.17 = bf16[1,4096,8,1025]{3,2,1,0} pad(%sharding_constraint.1751, %constant.1190), padding=0_0x0_0x0_0x1_0
  %mul.7137 = bf16[1,4096,8,1025]{3,2,1,0} multiply(%pad.17, %convert_element_type.2584)
  %reduce.735 = bf16[1,4096,8]{2,1,0} reduce(%mul.7137, %constant.1190), dimensions={3}, to_apply=%region_710.18300
  %mul.7139 = bf16[1,4096,8]{2,1,0} multiply(%reduce.735, %convert_element_type.2582)
  %gather.67 = bf16[1,4096,2]{2,1,0} gather(%mul.7139, %subtract.166), offset_dims={}, collapsed_slice_dims={0,1,2}, start_index_map={0,1,2}, index_vector_dim=3, slice_sizes={1,1,1}
  %select_n.571 = bf16[1,4096,2]{2,1,0} select(%reduce.734, %gather.67, %broadcast.3427)
  %select_n.572 = bf16[1,4096,2]{2,1,0} select(%eq.2353, %select_n.571, %broadcast.3427)
  %convert_element_type.2586 = f32[1,4096,2]{2,1,0} convert(%select_n.572)
  %div.1145 = f32[1,4096,2]{2,1,0} divide(%convert_element_type.2586, %div.1141)
  %mul.7140 = f32[1,4096]{1,0} multiply(%reduce.731, %reduce.731)
  %div.1146 = f32[1,4096]{1,0} divide(%add.1847, %mul.7140)
  %mul.7141 = f32[1,4096,2]{2,1,0} broadcast(%div.1146), dimensions={0,1}
  %mul.7142 = f32[1,4096,2]{2,1,0} multiply(%convert_element_type.2586, %mul.7141)
  %mul.7143 = f32[1,4096,2]{2,1,0} multiply(%mul.7142, %exp.225)
  %reduce.736 = f32[1,4096]{1,0} reduce(%mul.7143, %constant.1360), dimensions={2}, to_apply=%region_711.18317
  %neg.259 = f32[1,4096]{1,0} negate(%reduce.736)
  %broadcast_in_dim.720 = f32[1,4096,2]{2,1,0} broadcast(%neg.259), dimensions={0,1}
  %add_any.307 = f32[1,4096,2]{2,1,0} add(%div.1145, %broadcast_in_dim.720)
  %mul.7144 = f32[1,4096,2]{2,1,0} multiply(%add_any.307, %exp.225)
  %convert_element_type.2587 = bf16[1,4096,2]{2,1,0} convert(%mul.7144)
  %scatter.246 = bf16[1,4096,8]{2,1,0} scatter(%broadcast.3379, %reshape.12506, %convert_element_type.2587), update_window_dims={}, inserted_window_dims={2}, scatter_dims_to_operand_dims={2}, input_batching_dims={0,1}, scatter_indices_batching_dims={0,1}, index_vector_dim=3, to_apply=%region_712.18327.clone
  %sharding_constraint.1752 = bf16[1,4096,8]{2,1,0} copy(%scatter.246)
  %dot.840 = bf16[1,4096,4096]{2,1,0} dot(%sharding_constraint.1752, %all-gather.332), lhs_contracting_dims={2}, rhs_contracting_dims={1}
  %add_any.308 = bf16[1,4096,4096]{2,1,0} add(%dot.837, %dot.840)
  %sharding_constraint.1753 = bf16[1,4096,4096]{2,1,0} copy(%add_any.308)
  %mul.7149 = bf16[1,4096,4096]{2,1,0} multiply(%sharding_constraint.1753, %mul.7109)
  %convert_element_type.2588 = f32[1,4096,4096]{2,1,0} convert(%mul.7149)
  %mul.7155 = f32[1,4096,4096]{2,1,0} multiply(%convert_element_type.2588, %mul.7107)
  %mul.7164 = f32[1,4096,4096]{2,1,0} multiply(%convert_element_type.2575, %convert_element_type.2588)
  %reduce.737 = f32[1,4096]{1,0} reduce(%mul.7164, %constant.1360), dimensions={2}, to_apply=%region_713.18343
  %reshape.12529 = f32[1,4096,1]{2,1,0} reshape(%reduce.737)
  %div.1147 = f32[1,4096,1]{2,1,0} divide(%rsqrt.164, %add.2166)
  %mul.7165 = f32[1,4096,1]{2,1,0} multiply(%div.1147, %broadcast.3620)
  %mul.7170 = f32[1,4096,1]{2,1,0} multiply(%reshape.12529, %mul.7165)
  %mul.7171 = f32[1,4096,1]{2,1,0} multiply(%mul.7170, %mul.4455)
  %mul.7172 = f32[1,4096]{1,0} reshape(%mul.7171)
  %mul.7173 = f32[1,4096,4096]{2,1,0} broadcast(%mul.7172), dimensions={0,1}
  %mul.7174 = f32[1,4096,4096]{2,1,0} multiply(%convert_element_type.2575, %mul.7173)
  %add_any.309 = f32[1,4096,4096]{2,1,0} add(%mul.7155, %mul.7174)
  %convert_element_type.2590 = bf16[1,4096,4096]{2,1,0} convert(%add_any.309)
  %add_any.310 = bf16[1,4096,4096]{2,1,0} add(%sharding_constraint.1721, %convert_element_type.2590)
  %get-tuple-element.1039 = f32[1,32,4096,1]{3,2,1,0} get-tuple-element(%te_fused_attn_forward_ffi.196), index=1
  %get-tuple-element.1040 = u32[2,4]{1,0} get-tuple-element(%te_fused_attn_forward_ffi.196), index=2
  %sharding_constraint.1754 = u32[2,4]{1,0} copy(%get-tuple-element.1040)
  %sharding_constraint.1755 = bf16[1,4096,4096]{2,1,0} copy(%add_any.310)
  %dot.841 = bf16[1,4096,32,128]{3,2,1,0} dot(%sharding_constraint.1755, %all-gather.331), lhs_contracting_dims={2}, rhs_contracting_dims={2}
  %sharding_constraint.1756 = bf16[1,4096,32,128]{3,2,1,0} copy(%dot.841)
  %te_fused_attn_backward_ffi.85 = (bf16[1,4096,32,128]{3,2,1,0}, bf16[1,4096,8,128]{3,2,1,0}, bf16[1,4096,8,128]{3,2,1,0}, bf16[0]{0}, u8[134742064]{0}) custom-call(%sharding_constraint.1725, %sharding_constraint.1727, %sharding_constraint.1728, %constant.1403, %get-tuple-element.1039, /*index=5*/%sharding_constraint.1754, %get-tuple-element.1026, %sharding_constraint.1756, %concatenate.482, %concatenate.483, /*index=10*/%constant.1416, %constant.1416, %constant.1416, %constant.1416, %constant.1416, /*index=15*/%constant.1416), custom_call_target="te_fused_attn_backward_ffi", operand_layout_constraints={bf16[1,4096,32,128]{3,2,1,0}, bf16[1,4096,8,128]{3,2,1,0}, bf16[1,4096,8,128]{3,2,1,0}, bf16[0]{0}, f32[1,32,4096,1]{3,2,1,0}, u32[2,4]{1,0}, bf16[1,4096,32,128]{3,2,1,0}, bf16[1,4096,32,128]{3,2,1,0}, s32[2]{0}, s32[2]{0}, f32[0]{0}, f32[0]{0}, f32[0]{0}, f32[0]{0}, f32[0]{0}, f32[0]{0}}, api_version=API_VERSION_TYPED_FFI, backend_config={attn_heads = 32 : i64, bias_batch = 0 : i64, bias_heads = 0 : i64, bias_type = 0 : i64, deterministic = false, dropout_probability = 0.000000e+00 : f64, input_batch = 1 : i64, is_training = true, kv_max_seqlen = 4096 : i64, mask_type = 3 : i64, max_segments_per_seq = 1 : i64, num_gqa_groups = 8 : i64, q_max_seqlen = 4096 : i64, qk_head_dim = 128 : i64, qkv_layout = 9 : i64, scaling_factor = 1.000000e+00 : f64, v_head_dim = 128 : i64, window_size_left = -1 : i64, window_size_right = -1 : i64}
  %get-tuple-element.1041 = bf16[1,4096,8,128]{3,2,1,0} get-tuple-element(%te_fused_attn_backward_ffi.85), index=2
  %sharding_constraint.1757 = bf16[1,4096,8,128]{3,2,1,0} copy(%get-tuple-element.1041)
  %dot.842 = bf16[1,4096,4096]{2,1,0} dot(%sharding_constraint.1757, %all-gather.330), lhs_contracting_dims={2,3}, rhs_contracting_dims={1,2}
  %get-tuple-element.1042 = bf16[1,4096,8,128]{3,2,1,0} get-tuple-element(%te_fused_attn_backward_ffi.85), index=1
  %sharding_constraint.1758 = bf16[1,4096,8,128]{3,2,1,0} copy(%get-tuple-element.1042)
  %slice.598 = bf16[1,4096,8,64]{3,2,1,0} slice(%sharding_constraint.1758), slice={[0:1], [0:4096], [0:8], [64:128]}
  %mul.7177 = bf16[1,4096,8,64]{3,2,1,0} multiply(%slice.598, %mul.7095)
  %slice.599 = bf16[1,4096,8,64]{3,2,1,0} slice(%sharding_constraint.1758), slice={[0:1], [0:4096], [0:8], [0:64]}
  %mul.7180 = bf16[1,4096,8,64]{3,2,1,0} multiply(%slice.599, %mul.7075)
  %add_any.311 = bf16[1,4096,8,64]{3,2,1,0} add(%mul.7177, %mul.7180)
  %mul.7183 = bf16[1,4096,8,64]{3,2,1,0} multiply(%slice.598, %mul.7075)
  %neg.260 = bf16[1,4096,8,64]{3,2,1,0} negate(%slice.599)
  %mul.7186 = bf16[1,4096,8,64]{3,2,1,0} multiply(%neg.260, %mul.7095)
  %add_any.312 = bf16[1,4096,8,64]{3,2,1,0} add(%mul.7183, %mul.7186)
  %concatenate.491 = bf16[1,4096,8,128]{3,2,1,0} concatenate(%add_any.311, %add_any.312), dimensions={3}
  %dot.843 = bf16[1,4096,4096]{2,1,0} dot(%concatenate.491, %all-gather.329), lhs_contracting_dims={2,3}, rhs_contracting_dims={1,2}
  %add_any.313 = bf16[1,4096,4096]{2,1,0} add(%dot.842, %dot.843)
  %sharding_constraint.1759 = bf16[1,4096,4096]{2,1,0} copy(%add_any.313)
  %get-tuple-element.1043 = bf16[1,4096,32,128]{3,2,1,0} get-tuple-element(%te_fused_attn_backward_ffi.85), index=0
  %sharding_constraint.1760 = bf16[1,4096,32,128]{3,2,1,0} copy(%get-tuple-element.1043)
  %slice.600 = bf16[1,4096,32,64]{3,2,1,0} slice(%sharding_constraint.1760), slice={[0:1], [0:4096], [0:32], [64:128]}
  %mul.7189 = bf16[1,4096,32,64]{3,2,1,0} multiply(%slice.600, %mul.7063)
  %slice.601 = bf16[1,4096,32,64]{3,2,1,0} slice(%sharding_constraint.1760), slice={[0:1], [0:4096], [0:32], [0:64]}
  %mul.7192 = bf16[1,4096,32,64]{3,2,1,0} multiply(%slice.601, %mul.7060)
  %add_any.314 = bf16[1,4096,32,64]{3,2,1,0} add(%mul.7189, %mul.7192)
  %mul.7195 = bf16[1,4096,32,64]{3,2,1,0} multiply(%slice.600, %mul.7060)
  %neg.261 = bf16[1,4096,32,64]{3,2,1,0} negate(%slice.601)
  %mul.7198 = bf16[1,4096,32,64]{3,2,1,0} multiply(%neg.261, %mul.7063)
  %add_any.315 = bf16[1,4096,32,64]{3,2,1,0} add(%mul.7195, %mul.7198)
  %concatenate.492 = bf16[1,4096,32,128]{3,2,1,0} concatenate(%add_any.314, %add_any.315), dimensions={3}
  %dot.844 = bf16[1,4096,4096]{2,1,0} dot(%concatenate.492, %all-gather.328), lhs_contracting_dims={2,3}, rhs_contracting_dims={1,2}
  %sharding_constraint.1761 = bf16[1,4096,4096]{2,1,0} copy(%dot.844)
  %add_any.316 = bf16[1,4096,4096]{2,1,0} add(%sharding_constraint.1759, %sharding_constraint.1761)
  %sharding_constraint.1762 = bf16[1,4096,4096]{2,1,0} copy(%add_any.316)
  %mul.7200 = bf16[1,4096,4096]{2,1,0} multiply(%sharding_constraint.1762, %mul.7055)
  %convert_element_type.2591 = f32[1,4096,4096]{2,1,0} convert(%mul.7200)
  %mul.7203 = f32[1,4096,4096]{2,1,0} multiply(%convert_element_type.2591, %mul.7036)
  %mul.7204 = f32[1,4096,4096]{2,1,0} multiply(%convert_element_type.2560, %convert_element_type.2591)
  %reduce.738 = f32[1,4096]{1,0} reduce(%mul.7204, %constant.1360), dimensions={2}, to_apply=%region_714.18422
  %reshape.12536 = f32[1,4096,1]{2,1,0} reshape(%reduce.738)
  %div.1149 = f32[1,4096,1]{2,1,0} divide(%rsqrt.163, %add.2161)
  %mul.7205 = f32[1,4096,1]{2,1,0} multiply(%div.1149, %broadcast.3620)
  %mul.7206 = f32[1,4096,1]{2,1,0} multiply(%reshape.12536, %mul.7205)
  %mul.7207 = f32[1,4096,1]{2,1,0} multiply(%mul.7206, %mul.4455)
  %mul.7208 = f32[1,4096]{1,0} reshape(%mul.7207)
  %mul.7209 = f32[1,4096,4096]{2,1,0} broadcast(%mul.7208), dimensions={0,1}
  %mul.7210 = f32[1,4096,4096]{2,1,0} multiply(%convert_element_type.2560, %mul.7209)
  %add_any.317 = f32[1,4096,4096]{2,1,0} add(%mul.7203, %mul.7210)
  %convert_element_type.2592 = bf16[1,4096,4096]{2,1,0} convert(%add_any.317)
  %add_any.318 = bf16[1,4096,4096]{2,1,0} add(%add_any.310, %convert_element_type.2592)
  %sharding_constraint.1763 = bf16[1,4096,4096]{2,1,0} copy(%add_any.318)
  %tuple.295 = (bf16[512,8]{1,0}, bf16[1,4096,14336]{2,1,0}, bf16[1,4096,14336]{2,1,0}, bf16[1,14336,4096]{2,1,0}, bf16[4096]{0}, /*index=5*/bf16[4096]{0}, bf16[512,8,128]{2,1,0}, bf16[32,128,512]{2,1,0}, bf16[512,32,128]{2,1,0}, bf16[512,8,128]{2,1,0}, /*index=10*/bf16[1,4096,4096]{2,1,0}, s32[1,4096]{1,0}, s32[1,4096]{1,0}, bf16[1,4096,4096]{2,1,0}) tuple(%param.143, %param.144, %param.145, %param.146, %param.142, /*index=5*/%param.137, %param.139, %param.141, %param.138, %param.140, /*index=10*/%sharding_constraint.474, %param.10, %param.7, %sharding_constraint.1763)
  %remat2.29 = (bf16[512,8]{1,0}, bf16[1,4096,14336]{2,1,0}, bf16[1,4096,14336]{2,1,0}, bf16[1,14336,4096]{2,1,0}, bf16[4096]{0}, /*index=5*/bf16[4096]{0}, bf16[512,8,128]{2,1,0}, bf16[32,128,512]{2,1,0}, bf16[512,32,128]{2,1,0}, bf16[512,8,128]{2,1,0}, /*index=10*/bf16[1,4096,4096]{2,1,0}, s32[1,4096]{1,0}, s32[1,4096]{1,0}, bf16[1,4096,4096]{2,1,0}) opt-barrier(%tuple.295)
  %get-tuple-element.1044 = bf16[1,4096,4096]{2,1,0} get-tuple-element(%remat2.29), index=13
  %sharding_constraint.1764 = bf16[1,4096,4096]{2,1,0} copy(%get-tuple-element.1044)
  %iota.2677 = s32[1,4096,2,1]{3,2,1,0} iota(), iota_dimension=1
  %get-tuple-element.1045 = bf16[1,4096,4096]{2,1,0} get-tuple-element(%remat2.29), index=10
  %sharding_constraint.1765 = bf16[1,4096,4096]{2,1,0} copy(%get-tuple-element.1045)
  %convert_element_type.2593 = f32[1,4096,4096]{2,1,0} convert(%sharding_constraint.1765)
  %square.104 = f32[1,4096,4096]{2,1,0} multiply(%convert_element_type.2593, %convert_element_type.2593)
  %reduce.739 = f32[1,4096]{1,0} reduce(%square.104, %constant.1360), dimensions={2}, to_apply=%region_715.18464
  %div.1150 = f32[1,4096]{1,0} multiply(%reduce.739, %broadcast.3412)
  %add.2177 = f32[1,4096]{1,0} add(%div.1150, %broadcast.3413)
  %add.2178 = f32[1,4096,1]{2,1,0} reshape(%add.2177)
  %rsqrt.165 = f32[1,4096,1]{2,1,0} rsqrt(%add.2178)
  %mul.7211 = f32[1,4096]{1,0} reshape(%rsqrt.165)
  %mul.7212 = f32[1,4096,4096]{2,1,0} broadcast(%mul.7211), dimensions={0,1}
  %mul.7213 = f32[1,4096,4096]{2,1,0} multiply(%convert_element_type.2593, %mul.7212)
  %convert_element_type.2594 = bf16[1,4096,4096]{2,1,0} convert(%mul.7213)
  %get-tuple-element.1046 = bf16[4096]{0} get-tuple-element(%remat2.29), index=5
  %mul.7214 = bf16[1,4096,4096]{2,1,0} broadcast(%get-tuple-element.1046), dimensions={2}
  %mul.7215 = bf16[1,4096,4096]{2,1,0} multiply(%convert_element_type.2594, %mul.7214)
  %sharding_constraint.1766 = bf16[1,4096,4096]{2,1,0} copy(%mul.7215)
  %sharding_constraint.1767 = bf16[1,4096,4096]{2,1,0} copy(%sharding_constraint.1766)
  %get-tuple-element.1047 = bf16[512,32,128]{2,1,0} get-tuple-element(%remat2.29), index=8
  %all-gather.334 = bf16[4096,32,128]{2,1,0} all-gather(%get-tuple-element.1047), channel_id=609, replica_groups=[1,8]<=[8], dimensions={0}, use_global_device_ids=true
  %dot.845 = bf16[1,4096,32,128]{3,2,1,0} dot(%sharding_constraint.1767, %all-gather.334), lhs_contracting_dims={2}, rhs_contracting_dims={0}
  %slice.602 = bf16[1,4096,32,64]{3,2,1,0} slice(%dot.845), slice={[0:1], [0:4096], [0:32], [0:64]}
  %get-tuple-element.1048 = s32[1,4096]{1,0} get-tuple-element(%remat2.29), index=12
  %convert_element_type.2595 = f32[1,4096]{1,0} convert(%get-tuple-element.1048)
  %div.1151 = f32[1,4096,1,64]{3,2,1,0} broadcast(%convert_element_type.2595), dimensions={0,1}
  %div.1157 = f32[1,4096,1,64]{3,2,1,0} divide(%div.1151, %div.402)
  %cos.101 = f32[1,4096,1,64]{3,2,1,0} cosine(%div.1157)
  %convert_element_type.2597 = bf16[1,4096,1,64]{3,2,1,0} convert(%cos.101)
  %mul.7219 = bf16[1,4096,64]{2,1,0} reshape(%convert_element_type.2597)
  %mul.7222 = bf16[1,4096,32,64]{3,2,1,0} broadcast(%mul.7219), dimensions={0,1,3}
  %mul.7223 = bf16[1,4096,32,64]{3,2,1,0} multiply(%slice.602, %mul.7222)
  %slice.603 = bf16[1,4096,32,64]{3,2,1,0} slice(%dot.845), slice={[0:1], [0:4096], [0:32], [64:128]}
  %sin.100 = f32[1,4096,1,64]{3,2,1,0} sine(%div.1157)
  %convert_element_type.2598 = bf16[1,4096,1,64]{3,2,1,0} convert(%sin.100)
  %mul.7224 = bf16[1,4096,64]{2,1,0} reshape(%convert_element_type.2598)
  %mul.7225 = bf16[1,4096,32,64]{3,2,1,0} broadcast(%mul.7224), dimensions={0,1,3}
  %mul.7226 = bf16[1,4096,32,64]{3,2,1,0} multiply(%slice.603, %mul.7225)
  %sub.338 = bf16[1,4096,32,64]{3,2,1,0} subtract(%mul.7223, %mul.7226)
  %mul.7229 = bf16[1,4096,32,64]{3,2,1,0} multiply(%slice.603, %mul.7222)
  %mul.7232 = bf16[1,4096,32,64]{3,2,1,0} multiply(%slice.602, %mul.7225)
  %add.2179 = bf16[1,4096,32,64]{3,2,1,0} add(%mul.7229, %mul.7232)
  %concatenate.493 = bf16[1,4096,32,128]{3,2,1,0} concatenate(%sub.338, %add.2179), dimensions={3}
  %sharding_constraint.1769 = bf16[1,4096,32,128]{3,2,1,0} copy(%concatenate.493)
  %get-tuple-element.1049 = bf16[512,8,128]{2,1,0} get-tuple-element(%remat2.29), index=6
  %all-gather.335 = bf16[4096,8,128]{2,1,0} all-gather(%get-tuple-element.1049), channel_id=610, replica_groups=[1,8]<=[8], dimensions={0}, use_global_device_ids=true
  %dot.846 = bf16[1,4096,8,128]{3,2,1,0} dot(%sharding_constraint.1767, %all-gather.335), lhs_contracting_dims={2}, rhs_contracting_dims={0}
  %slice.604 = bf16[1,4096,8,64]{3,2,1,0} slice(%dot.846), slice={[0:1], [0:4096], [0:8], [0:64]}
  %mul.7235 = bf16[1,4096,8,64]{3,2,1,0} broadcast(%mul.7219), dimensions={0,1,3}
  %mul.7236 = bf16[1,4096,8,64]{3,2,1,0} multiply(%slice.604, %mul.7235)
  %slice.605 = bf16[1,4096,8,64]{3,2,1,0} slice(%dot.846), slice={[0:1], [0:4096], [0:8], [64:128]}
  %mul.7238 = bf16[1,4096,8,64]{3,2,1,0} broadcast(%mul.7224), dimensions={0,1,3}
  %mul.7239 = bf16[1,4096,8,64]{3,2,1,0} multiply(%slice.605, %mul.7238)
  %sub.339 = bf16[1,4096,8,64]{3,2,1,0} subtract(%mul.7236, %mul.7239)
  %mul.7242 = bf16[1,4096,8,64]{3,2,1,0} multiply(%slice.605, %mul.7235)
  %mul.7245 = bf16[1,4096,8,64]{3,2,1,0} multiply(%slice.604, %mul.7238)
  %add.2180 = bf16[1,4096,8,64]{3,2,1,0} add(%mul.7242, %mul.7245)
  %concatenate.494 = bf16[1,4096,8,128]{3,2,1,0} concatenate(%sub.339, %add.2180), dimensions={3}
  %sharding_constraint.1772 = bf16[1,4096,8,128]{3,2,1,0} copy(%concatenate.494)
  %get-tuple-element.1050 = bf16[512,8,128]{2,1,0} get-tuple-element(%remat2.29), index=9
  %all-gather.336 = bf16[4096,8,128]{2,1,0} all-gather(%get-tuple-element.1050), channel_id=611, replica_groups=[1,8]<=[8], dimensions={0}, use_global_device_ids=true
  %dot.847 = bf16[1,4096,8,128]{3,2,1,0} dot(%sharding_constraint.1767, %all-gather.336), lhs_contracting_dims={2}, rhs_contracting_dims={0}
  %sharding_constraint.1773 = bf16[1,4096,8,128]{3,2,1,0} copy(%dot.847)
  %get-tuple-element.1051 = s32[1,4096]{1,0} get-tuple-element(%remat2.29), index=11
  %eq.2360 = s32[1,4096,4096]{2,1,0} broadcast(%get-tuple-element.1051), dimensions={0,1}
  %eq.2361 = s32[1,4096,4096]{2,1,0} broadcast(%get-tuple-element.1051), dimensions={0,2}
  %eq.2362 = pred[1,4096,4096]{2,1,0} compare(%eq.2360, %eq.2361), direction=EQ
  %and.183 = pred[1,4096,4096]{2,1,0} and(%eq.2362, %and.64)
  %select_n.575 = f32[1,4096,4096]{2,1,0} select(%and.183, %broadcast_in_dim.516, %broadcast_in_dim.517)
  %ne.116 = pred[1,4096,4096]{2,1,0} compare(%select_n.575, %broadcast_in_dim.516), direction=NE
  %not.114 = pred[1,4096,4096]{2,1,0} not(%ne.116)
  %convert_element_type.2605 = s32[1,4096,4096]{2,1,0} convert(%not.114)
  %reduce.740 = s32[1,4096]{1,0} reduce(%convert_element_type.2605, %constant.1181), dimensions={1}, to_apply=%region_716.18560
  %reduce_sum.5735 = s32[1,1,1,4096]{3,2,1,0} reshape(%reduce.740)
  %slice.606 = s32[1,1,1,1]{3,2,1,0} slice(%reduce_sum.5735), slice={[0:1], [0:1], [0:1], [0:1]}
  %squeeze.50 = s32[1,1]{1,0} reshape(%slice.606)
  %reshape.12544 = s32[1]{0} reshape(%squeeze.50)
  %lt.187 = pred[1]{0} compare(%reshape.12544, %constant.1418), direction=LT
  %select_n.576 = s32[1]{0} select(%lt.187, %broadcast_in_dim.518, %reshape.12544)
  %concatenate.495 = s32[2]{0} concatenate(%constant.1418, %select_n.576), dimensions={0}
  %reduce.741 = s32[1,4096]{1,0} reduce(%convert_element_type.2605, %constant.1181), dimensions={2}, to_apply=%region_717.18569
  %reduce_sum.5739 = s32[1,1,1,4096]{3,2,1,0} reshape(%reduce.741)
  %reduce.742 = s32[1,1]{1,0} reduce(%reduce_sum.5739, %constant.1415), dimensions={3,2}, to_apply=%region_718.18575
  %reshape.12545 = s32[1]{0} reshape(%reduce.742)
  %lt.188 = pred[1]{0} compare(%reshape.12545, %constant.1418), direction=LT
  %select_n.577 = s32[1]{0} select(%lt.188, %broadcast_in_dim.518, %reshape.12545)
  %concatenate.496 = s32[2]{0} concatenate(%constant.1418, %select_n.577), dimensions={0}
  %te_fused_attn_forward_ffi.200 = (bf16[1,4096,32,128]{3,2,1,0}, f32[1,32,4096,1]{3,2,1,0}, u32[2,4]{1,0}, u8[48]{0}) custom-call(%sharding_constraint.1769, %sharding_constraint.1772, %sharding_constraint.1773, %constant.1403, %dynamic-slice.38, /*index=5*/%concatenate.495, %concatenate.496, %constant.1416, %constant.1416, %constant.1416, /*index=10*/%constant.1416, %constant.1416, %constant.1416), custom_call_target="te_fused_attn_forward_ffi", operand_layout_constraints={bf16[1,4096,32,128]{3,2,1,0}, bf16[1,4096,8,128]{3,2,1,0}, bf16[1,4096,8,128]{3,2,1,0}, bf16[0]{0}, u32[2]{0}, s32[2]{0}, s32[2]{0}, f32[0]{0}, f32[0]{0}, f32[0]{0}, f32[0]{0}, f32[0]{0}, f32[0]{0}}, api_version=API_VERSION_TYPED_FFI, backend_config={attn_heads = 32 : i64, bias_batch = 0 : i64, bias_heads = 0 : i64, bias_type = 0 : i64, deterministic = false, dropout_probability = 0.000000e+00 : f64, input_batch = 1 : i64, is_training = true, kv_max_seqlen = 4096 : i64, mask_type = 3 : i64, max_segments_per_seq = 1 : i64, num_gqa_groups = 8 : i64, q_max_seqlen = 4096 : i64, qk_head_dim = 128 : i64, qkv_layout = 9 : i64, scaling_factor = 1.000000e+00 : f64, v_head_dim = 128 : i64, window_size_left = -1 : i64, window_size_right = -1 : i64}
  %get-tuple-element.1052 = bf16[1,4096,32,128]{3,2,1,0} get-tuple-element(%te_fused_attn_forward_ffi.200), index=0
  %sharding_constraint.1774 = bf16[1,4096,32,128]{3,2,1,0} copy(%get-tuple-element.1052)
  %get-tuple-element.1053 = bf16[32,128,512]{2,1,0} get-tuple-element(%remat2.29), index=7
  %all-gather.337 = bf16[32,128,4096]{2,1,0} all-gather(%get-tuple-element.1053), channel_id=612, replica_groups=[1,8]<=[8], dimensions={2}, use_global_device_ids=true
  %dot.848 = bf16[1,4096,4096]{2,1,0} dot(%sharding_constraint.1774, %all-gather.337), lhs_contracting_dims={2,3}, rhs_contracting_dims={0,1}
  %sharding_constraint.1775 = bf16[1,4096,4096]{2,1,0} copy(%dot.848)
  %add.2181 = bf16[1,4096,4096]{2,1,0} add(%sharding_constraint.1765, %sharding_constraint.1775)
  %convert_element_type.2607 = f32[1,4096,4096]{2,1,0} convert(%add.2181)
  %square.105 = f32[1,4096,4096]{2,1,0} multiply(%convert_element_type.2607, %convert_element_type.2607)
  %reduce.743 = f32[1,4096]{1,0} reduce(%square.105, %constant.1360), dimensions={2}, to_apply=%region_719.18590
  %div.1162 = f32[1,4096]{1,0} multiply(%reduce.743, %broadcast.3412)
  %add.2182 = f32[1,4096]{1,0} add(%div.1162, %broadcast.3413)
  %add.2183 = f32[1,4096,1]{2,1,0} reshape(%add.2182)
  %rsqrt.166 = f32[1,4096,1]{2,1,0} rsqrt(%add.2183)
  %mul.7247 = f32[1,4096]{1,0} reshape(%rsqrt.166)
  %mul.7248 = f32[1,4096,4096]{2,1,0} broadcast(%mul.7247), dimensions={0,1}
  %mul.7249 = f32[1,4096,4096]{2,1,0} multiply(%convert_element_type.2607, %mul.7248)
  %convert_element_type.2608 = bf16[1,4096,4096]{2,1,0} convert(%mul.7249)
  %get-tuple-element.1054 = bf16[4096]{0} get-tuple-element(%remat2.29), index=4
  %mul.7250 = bf16[1,4096,4096]{2,1,0} broadcast(%get-tuple-element.1054), dimensions={2}
  %mul.7251 = bf16[1,4096,4096]{2,1,0} multiply(%convert_element_type.2608, %mul.7250)
  %sharding_constraint.1776 = bf16[1,4096,4096]{2,1,0} copy(%mul.7251)
  %get-tuple-element.1055 = bf16[512,8]{1,0} get-tuple-element(%remat2.29), index=0
  %all-gather.338 = bf16[4096,8]{1,0} all-gather(%get-tuple-element.1055), channel_id=613, replica_groups=[1,8]<=[8], dimensions={0}, use_global_device_ids=true
  %dot.849 = bf16[1,4096,8]{2,1,0} dot(%sharding_constraint.1776, %all-gather.338), lhs_contracting_dims={2}, rhs_contracting_dims={0}
  %sharding_constraint.1777 = bf16[1,4096,8]{2,1,0} copy(%dot.849)
  %top_k.150 = bf16[4096,8]{1,0} reshape(%sharding_constraint.1777)
  %top_k.151 = (bf16[4096,2]{1,0}, s32[4096,2]{1,0}) custom-call(%top_k.150), custom_call_target="TopK", called_computations={%compare_greater_than.50.18611.clone}
  %get-tuple-element.1056 = bf16[4096,2]{1,0} get-tuple-element(%top_k.151), index=0
  %get-tuple-element.1057 = s32[4096,2]{1,0} get-tuple-element(%top_k.151), index=1
  %add.2184 = s32[4096,2]{1,0} add(%get-tuple-element.1057, %broadcast.3418)
  %sort.114 = (bf16[4096,2]{1,0}, s32[4096,2]{1,0}) sort(%get-tuple-element.1056, %add.2184), dimensions={1}, is_stable=true, to_apply=%compare-value-and-index.50
  %get-tuple-element.1059 = s32[4096,2]{1,0} get-tuple-element(%sort.114), index=1
  %slice.608 = s32[4096,2]{1,0} slice(%get-tuple-element.1059), slice={[0:4096], [0:2]}
  %top_k.152 = s32[1,4096,2]{2,1,0} reshape(%slice.608)
  %lt.189 = pred[1,4096,2]{2,1,0} compare(%top_k.152, %broadcast.3419), direction=LT
  %add.2185 = s32[1,4096,2]{2,1,0} add(%top_k.152, %broadcast.3420)
  %select_n.578 = s32[1,4096,2]{2,1,0} select(%lt.189, %add.2185, %top_k.152)
  %broadcast_in_dim.725 = s32[1,4096,2,1]{3,2,1,0} reshape(%select_n.578)
  %concatenate.497 = s32[1,4096,2,3]{3,2,1,0} concatenate(%add.1356, %iota.2677, %broadcast_in_dim.725), dimensions={3}
  %subtract.170 = s32[1,4096,2,3]{3,2,1,0} subtract(%concatenate.497, %broadcast.3428)
  %scatter.247 = u32[1,4096,8]{2,1,0} scatter(%dynamic-slice.43, %subtract.170, %add.1401), update_window_dims={}, inserted_window_dims={0,1,2}, scatter_dims_to_operand_dims={0,1,2}, index_vector_dim=3, to_apply=%region_720.18647.clone
  %gather.68 = u32[1,4096,2]{2,1,0} gather(%scatter.247, %subtract.170), offset_dims={}, collapsed_slice_dims={0,1,2}, start_index_map={0,1,2}, index_vector_dim=3, slice_sizes={1,1,1}
  %eq.2363 = pred[1,4096,2]{2,1,0} compare(%add.1401, %gather.68), direction=EQ
  %get-tuple-element.1058 = bf16[4096,2]{1,0} get-tuple-element(%sort.114), index=0
  %slice.607 = bf16[4096,2]{1,0} slice(%get-tuple-element.1058), slice={[0:4096], [0:2]}
  %convert_element_type.2609 = f32[4096,2]{1,0} convert(%slice.607)
  %convert_element_type.2610 = f32[1,4096,2]{2,1,0} reshape(%convert_element_type.2609)
  %reduce.744 = f32[4096]{0} reduce(%convert_element_type.2609, %constant.1450), dimensions={1}, to_apply=%region_721.18656
  %sub.340 = f32[1,4096]{1,0} reshape(%reduce.744)
  %sub.341 = f32[1,4096,2]{2,1,0} broadcast(%sub.340), dimensions={0,1}
  %sub.342 = f32[1,4096,2]{2,1,0} subtract(%convert_element_type.2610, %sub.341)
  %exp.227 = f32[1,4096,2]{2,1,0} exponential(%sub.342)
  %reduce.745 = f32[1,4096]{1,0} reduce(%exp.227, %constant.1360), dimensions={2}, to_apply=%region_722.18665
  %div.1163 = f32[1,4096,2]{2,1,0} broadcast(%reduce.745), dimensions={0,1}
  %div.1164 = f32[1,4096,2]{2,1,0} divide(%exp.227, %div.1163)
  %convert_element_type.2611 = bf16[1,4096,2]{2,1,0} convert(%div.1164)
  %select_n.579 = bf16[1,4096,2]{2,1,0} select(%eq.2363, %convert_element_type.2611, %broadcast.3427)
  %scatter.248 = bf16[1,4096,8]{2,1,0} scatter(%broadcast.3379, %subtract.170, %select_n.579), update_window_dims={}, inserted_window_dims={0,1,2}, scatter_dims_to_operand_dims={0,1,2}, index_vector_dim=3, to_apply=%region_723.18674.clone
  %eq.2365 = s32[1,4096,2,8]{3,2,1,0} broadcast(%top_k.152), dimensions={0,1,2}
  %iota.2688 = s32[1,4096,2,8]{3,2,1,0} iota(), iota_dimension=3
  %eq.2366 = pred[1,4096,2,8]{3,2,1,0} compare(%eq.2365, %iota.2688), direction=EQ
  %convert_element_type.2613 = s32[1,4096,2,8]{3,2,1,0} convert(%eq.2366)
  %reshape.12578 = s32[1,8192,8]{2,1,0} reshape(%convert_element_type.2613)
  %sharding_constraint.1778 = s32[1,8192,8]{2,1,0} copy(%reshape.12578)
  %reduce-window.50 = s32[1,8192,8]{2,1,0} reduce-window(%sharding_constraint.1778, %constant.1181), window={size=1x8192x1 pad=0_0x8191_0x0_0}, to_apply=%region_724.18686
  %reshape.12580 = s32[1,4096,2,8]{3,2,1,0} reshape(%reduce-window.50)
  %sharding_constraint.1779 = s32[1,4096,2,8]{3,2,1,0} copy(%reshape.12580)
  %le.138 = pred[1,4096,2,8]{3,2,1,0} compare(%sharding_constraint.1779, %broadcast.3429), direction=LE
  %mul.7252 = s32[1,4096,2,8]{3,2,1,0} select(%le.138, %convert_element_type.2613, %broadcast.3430)
  %reduce.746 = s32[1,4096,8]{2,1,0} reduce(%mul.7252, %constant.1181), dimensions={2}, to_apply=%region_725.18695
  %convert_element_type.2614 = bf16[1,4096,8]{2,1,0} convert(%reduce.746)
  %mul.7255 = bf16[1,4096,8]{2,1,0} multiply(%scatter.248, %convert_element_type.2614)
  %mul.7256 = bf16[1,4096,8,1025]{3,2,1,0} broadcast(%mul.7255), dimensions={0,1,2}
  %mul.7257 = s32[1,8192,8]{2,1,0} multiply(%sharding_constraint.1778, %reduce-window.50)
  %reshape.12581 = s32[1,4096,2,8]{3,2,1,0} reshape(%mul.7257)
  %reduce.747 = s32[1,4096,8]{2,1,0} reduce(%reshape.12581, %constant.1181), dimensions={2}, to_apply=%region_726.18705
  %mul.7258 = s32[1,4096,8]{2,1,0} multiply(%reduce.747, %reduce.746)
  %eq.2368 = s32[1,4096,8,1025]{3,2,1,0} broadcast(%mul.7258), dimensions={0,1,2}
  %iota.2689 = s32[1,4096,8,1025]{3,2,1,0} iota(), iota_dimension=3
  %eq.2369 = pred[1,4096,8,1025]{3,2,1,0} compare(%eq.2368, %iota.2689), direction=EQ
  %convert_element_type.2615 = s32[1,4096,8,1025]{3,2,1,0} convert(%eq.2369)
  %convert_element_type.2617 = bf16[1,4096,8,1025]{3,2,1,0} convert(%convert_element_type.2615)
  %mul.7259 = bf16[1,4096,8,1025]{3,2,1,0} multiply(%mul.7256, %convert_element_type.2617)
  %slice.609 = bf16[1,4096,8,1024]{3,2,1,0} slice(%mul.7259), slice={[0:1], [0:4096], [0:8], [1:1025]}
  %convert_element_type.2618 = pred[1,4096,8,1024]{3,2,1,0} compare(%slice.609, %broadcast.3431), direction=NE
  %sharding_constraint.1780 = pred[1,4096,8,1024]{3,2,1,0} copy(%convert_element_type.2618)
  %dot_general.104 = bf16[1,4096,8,1024]{3,2,1,0} convert(%sharding_constraint.1780)
  %dot.850 = bf16[1,8,1024,4096]{3,2,1,0} dot(%dot_general.104, %sharding_constraint.1776), lhs_batch_dims={0}, lhs_contracting_dims={1}, rhs_batch_dims={0}, rhs_contracting_dims={1}
  %reshape.12584 = bf16[1,8,1,1024,4096]{4,3,2,1,0} reshape(%dot.850)
  %all-to-all.136 = bf16[1,8,1,1024,4096]{4,3,2,1,0} all-to-all(%reshape.12584), channel_id=617, replica_groups=[1,8]<=[8], dimensions={1}
  %transpose.227 = bf16[8,1,1,1024,4096]{4,3,2,0,1} transpose(%all-to-all.136), dimensions={1,0,2,3,4}
  %reshape.12585 = bf16[8,1,1024,4096]{3,2,1,0} reshape(%transpose.227)
  %transpose.228 = bf16[1,8,1024,4096]{3,2,0,1} transpose(%reshape.12585), dimensions={1,0,2,3}
  %sharding_constraint.1781 = bf16[1,8,1024,4096]{3,2,0,1} copy(%transpose.228)
  %get-tuple-element.1062 = bf16[1,4096,14336]{2,1,0} get-tuple-element(%remat2.29), index=1
  %sharding_constraint.1782 = bf16[1,4096,14336]{2,1,0} copy(%get-tuple-element.1062)
  %dot.851 = bf16[1,8,1024,14336]{3,2,1,0} dot(%sharding_constraint.1781, %sharding_constraint.1782), lhs_batch_dims={0}, lhs_contracting_dims={3}, rhs_batch_dims={0}, rhs_contracting_dims={1}
  %sharding_constraint.1784 = bf16[1,8,1024,14336]{3,2,1,0} copy(%dot.851)
  %neg.262 = bf16[1,8,1024,14336]{3,2,1,0} negate(%sharding_constraint.1784)
  %exp.228 = bf16[1,8,1024,14336]{3,2,1,0} exponential(%neg.262)
  %add.2191 = bf16[1,8,1024,14336]{3,2,1,0} add(%exp.228, %jit_silu_.0)
  %div.1165 = bf16[1,8,1024,14336]{3,2,1,0} divide(%jit_silu_.0, %add.2191)
  %mul.7260 = bf16[1,8,1024,14336]{3,2,1,0} multiply(%sharding_constraint.1784, %div.1165)
  %sharding_constraint.1786 = bf16[1,4096,4096]{2,1,0} copy(%sharding_constraint.1764)
  %sharding_constraint.1787 = bf16[1,4096,8,1024]{3,2,1,0} copy(%slice.609)
  %dot.852 = bf16[1,4096,8,1024]{3,2,1,0} dot(%sharding_constraint.1786, %sharding_constraint.1787), lhs_batch_dims={0}, lhs_contracting_dims={1}, rhs_batch_dims={0}, rhs_contracting_dims={1}
  %reshape.12588 = bf16[1,4096,8,1,1024]{4,3,2,1,0} reshape(%dot.852)
  %all-to-all.137 = bf16[1,4096,8,1,1024]{4,3,2,1,0} all-to-all(%reshape.12588), channel_id=618, replica_groups=[1,8]<=[8], dimensions={2}
  %transpose.229 = bf16[8,1,4096,1,1024]{4,3,0,2,1} transpose(%all-to-all.137), dimensions={2,0,1,3,4}
  %reshape.12590 = bf16[8,4096,1,1024]{3,2,1,0} reshape(%transpose.229)
  %transpose.230 = bf16[1,8,1024,4096]{2,0,3,1} transpose(%reshape.12590), dimensions={2,0,3,1}
  %sharding_constraint.1788 = bf16[1,8,1024,4096]{2,0,3,1} copy(%transpose.230)
  %get-tuple-element.1063 = bf16[1,14336,4096]{2,1,0} get-tuple-element(%remat2.29), index=3
  %sharding_constraint.1789 = bf16[1,14336,4096]{2,1,0} copy(%get-tuple-element.1063)
  %dot.853 = bf16[1,8,1024,14336]{3,2,1,0} dot(%sharding_constraint.1788, %sharding_constraint.1789), lhs_batch_dims={0}, lhs_contracting_dims={3}, rhs_batch_dims={0}, rhs_contracting_dims={2}
  %mul.7262 = bf16[1,8,1024,14336]{3,2,1,0} multiply(%mul.7260, %dot.853)
  %sharding_constraint.1790 = bf16[1,8,1024,14336]{3,2,1,0} copy(%mul.7262)
  %get-tuple-element.1064 = bf16[1,4096,14336]{2,1,0} get-tuple-element(%remat2.29), index=2
  %sharding_constraint.1791 = bf16[1,4096,14336]{2,1,0} copy(%get-tuple-element.1064)
  %dot.854 = bf16[1,8,1024,4096]{3,2,1,0} dot(%sharding_constraint.1790, %sharding_constraint.1791), lhs_batch_dims={0}, lhs_contracting_dims={3}, rhs_batch_dims={0}, rhs_contracting_dims={2}
  %dot.855 = bf16[1,8,1024,14336]{3,2,1,0} dot(%sharding_constraint.1781, %sharding_constraint.1791), lhs_batch_dims={0}, lhs_contracting_dims={3}, rhs_batch_dims={0}, rhs_contracting_dims={1}
  %sharding_constraint.1792 = bf16[1,8,1024,14336]{3,2,1,0} copy(%dot.855)
  %mul.7263 = bf16[1,8,1024,14336]{3,2,1,0} multiply(%dot.853, %sharding_constraint.1792)
  %mul.7264 = bf16[1,8,1024,14336]{3,2,1,0} multiply(%mul.7263, %div.1165)
  %mul.7269 = bf16[1,8,1024,14336]{3,2,1,0} multiply(%sharding_constraint.1784, %mul.7263)
  %sub.343 = bf16[1,8,1024,14336]{3,2,1,0} subtract(%jit_silu_.0, %div.1165)
  %mul.7270 = bf16[1,8,1024,14336]{3,2,1,0} multiply(%div.1165, %sub.343)
  %mul.7271 = bf16[1,8,1024,14336]{3,2,1,0} multiply(%mul.7269, %mul.7270)
  %add_any.319 = bf16[1,8,1024,14336]{3,2,1,0} add(%mul.7264, %mul.7271)
  %sharding_constraint.1793 = bf16[1,8,1024,14336]{3,2,1,0} copy(%add_any.319)
  %dot.856 = bf16[1,8,1024,4096]{3,2,1,0} dot(%sharding_constraint.1793, %sharding_constraint.1782), lhs_batch_dims={0}, lhs_contracting_dims={3}, rhs_batch_dims={0}, rhs_contracting_dims={2}
  %add_any.320 = bf16[1,8,1024,4096]{3,2,1,0} add(%dot.854, %dot.856)
  %sharding_constraint.1794 = bf16[1,8,1024,4096]{3,2,1,0} copy(%add_any.320)
  %transpose.231 = bf16[8,1,1024,4096]{3,2,0,1} transpose(%sharding_constraint.1794), dimensions={1,0,2,3}
  %reshape.12595 = bf16[8,1,1,1024,4096]{4,3,2,1,0} reshape(%transpose.231)
  %all-to-all.138 = bf16[8,1,1,1024,4096]{4,3,2,1,0} all-to-all(%reshape.12595), channel_id=619, replica_groups=[1,8]<=[8], dimensions={0}
  %transpose.232 = bf16[1,8,1,1024,4096]{4,3,2,0,1} transpose(%all-to-all.138), dimensions={1,0,2,3,4}
  %reshape.12596 = bf16[1,8,1024,4096]{3,2,1,0} reshape(%transpose.232)
  %dot.857 = bf16[1,4096,4096]{2,1,0} dot(%dot_general.104, %reshape.12596), lhs_batch_dims={0}, lhs_contracting_dims={2,3}, rhs_batch_dims={0}, rhs_contracting_dims={1,2}
  %reshape.12598 = s32[1,4096,2,1]{3,2,1,0} reshape(%slice.608)
  %ge.18 = pred[1,4096,2,3]{3,2,1,0} compare(%concatenate.497, %broadcast.3629), direction=GE
  %le.140 = pred[1,4096,2,3]{3,2,1,0} compare(%concatenate.497, %le.67), direction=LE
  %and.184 = pred[1,4096,2,3]{3,2,1,0} and(%ge.18, %le.140)
  %reduce.748 = pred[1,4096,2]{2,1,0} reduce(%and.184, %constant.5574), dimensions={3}, to_apply=%region_727.18762
  %mul.7272 = bf16[1,8,1024,14336]{3,2,1,0} multiply(%mul.7260, %sharding_constraint.1792)
  %dot.858 = bf16[1,8,1024,4096]{3,2,1,0} dot(%mul.7272, %sharding_constraint.1789), lhs_batch_dims={0}, lhs_contracting_dims={3}, rhs_batch_dims={0}, rhs_contracting_dims={1}
  %sharding_constraint.1795 = bf16[1,8,1024,4096]{3,2,1,0} copy(%dot.858)
  %reshape.12606 = bf16[1,8,1,1024,4096]{4,3,2,1,0} reshape(%sharding_constraint.1795)
  %all-to-all.139 = bf16[1,8,1,1024,4096]{4,3,2,1,0} all-to-all(%reshape.12606), channel_id=620, replica_groups=[1,8]<=[8], dimensions={1}
  %transpose.233 = bf16[8,1,1,1024,4096]{4,3,2,0,1} transpose(%all-to-all.139), dimensions={1,0,2,3,4}
  %reshape.12607 = bf16[8,1,1024,4096]{3,2,1,0} reshape(%transpose.233)
  %dot.859 = bf16[1,4096,8,1024]{3,2,1,0} dot(%sharding_constraint.1786, %reshape.12607), lhs_batch_dims={0}, lhs_contracting_dims={2}, rhs_batch_dims={1}, rhs_contracting_dims={3}
  %sharding_constraint.1796 = bf16[1,4096,8,1024]{3,2,1,0} copy(%dot.859)
  %pad.18 = bf16[1,4096,8,1025]{3,2,1,0} pad(%sharding_constraint.1796, %constant.1190), padding=0_0x0_0x0_0x1_0
  %mul.7273 = bf16[1,4096,8,1025]{3,2,1,0} multiply(%pad.18, %convert_element_type.2617)
  %reduce.749 = bf16[1,4096,8]{2,1,0} reduce(%mul.7273, %constant.1190), dimensions={3}, to_apply=%region_728.18774
  %mul.7274 = bf16[1,4096,8]{2,1,0} multiply(%reduce.749, %convert_element_type.2614)
  %gather.69 = bf16[1,4096,2]{2,1,0} gather(%mul.7274, %subtract.170), offset_dims={}, collapsed_slice_dims={0,1,2}, start_index_map={0,1,2}, index_vector_dim=3, slice_sizes={1,1,1}
  %select_n.580 = bf16[1,4096,2]{2,1,0} select(%reduce.748, %gather.69, %broadcast.3427)
  %select_n.581 = bf16[1,4096,2]{2,1,0} select(%eq.2363, %select_n.580, %broadcast.3427)
  %convert_element_type.2619 = f32[1,4096,2]{2,1,0} convert(%select_n.581)
  %div.1167 = f32[1,4096,2]{2,1,0} divide(%convert_element_type.2619, %div.1163)
  %mul.7275 = f32[1,4096]{1,0} multiply(%reduce.745, %reduce.745)
  %div.1169 = f32[1,4096]{1,0} divide(%add.1847, %mul.7275)
  %mul.7276 = f32[1,4096,2]{2,1,0} broadcast(%div.1169), dimensions={0,1}
  %mul.7277 = f32[1,4096,2]{2,1,0} multiply(%convert_element_type.2619, %mul.7276)
  %mul.7278 = f32[1,4096,2]{2,1,0} multiply(%mul.7277, %exp.227)
  %reduce.750 = f32[1,4096]{1,0} reduce(%mul.7278, %constant.1360), dimensions={2}, to_apply=%region_729.18791
  %neg.263 = f32[1,4096]{1,0} negate(%reduce.750)
  %broadcast_in_dim.726 = f32[1,4096,2]{2,1,0} broadcast(%neg.263), dimensions={0,1}
  %add_any.321 = f32[1,4096,2]{2,1,0} add(%div.1167, %broadcast_in_dim.726)
  %mul.7279 = f32[1,4096,2]{2,1,0} multiply(%add_any.321, %exp.227)
  %convert_element_type.2620 = bf16[1,4096,2]{2,1,0} convert(%mul.7279)
  %scatter.249 = bf16[1,4096,8]{2,1,0} scatter(%broadcast.3379, %reshape.12598, %convert_element_type.2620), update_window_dims={}, inserted_window_dims={2}, scatter_dims_to_operand_dims={2}, input_batching_dims={0,1}, scatter_indices_batching_dims={0,1}, index_vector_dim=3, to_apply=%region_730.18801.clone
  %sharding_constraint.1797 = bf16[1,4096,8]{2,1,0} copy(%scatter.249)
  %dot.860 = bf16[1,4096,4096]{2,1,0} dot(%sharding_constraint.1797, %all-gather.338), lhs_contracting_dims={2}, rhs_contracting_dims={1}
  %add_any.322 = bf16[1,4096,4096]{2,1,0} add(%dot.857, %dot.860)
  %sharding_constraint.1798 = bf16[1,4096,4096]{2,1,0} copy(%add_any.322)
  %mul.7281 = bf16[1,4096,4096]{2,1,0} multiply(%sharding_constraint.1798, %mul.7250)
  %convert_element_type.2621 = f32[1,4096,4096]{2,1,0} convert(%mul.7281)
  %mul.7285 = f32[1,4096,4096]{2,1,0} multiply(%convert_element_type.2621, %mul.7248)
  %mul.7286 = f32[1,4096,4096]{2,1,0} multiply(%convert_element_type.2607, %convert_element_type.2621)
  %reduce.751 = f32[1,4096]{1,0} reduce(%mul.7286, %constant.1360), dimensions={2}, to_apply=%region_731.18817
  %reshape.12619 = f32[1,4096,1]{2,1,0} reshape(%reduce.751)
  %div.1170 = f32[1,4096,1]{2,1,0} divide(%rsqrt.166, %add.2183)
  %mul.7287 = f32[1,4096,1]{2,1,0} multiply(%div.1170, %broadcast.3620)
  %mul.7288 = f32[1,4096,1]{2,1,0} multiply(%reshape.12619, %mul.7287)
  %mul.7289 = f32[1,4096,1]{2,1,0} multiply(%mul.7288, %mul.4455)
  %mul.7290 = f32[1,4096]{1,0} reshape(%mul.7289)
  %mul.7291 = f32[1,4096,4096]{2,1,0} broadcast(%mul.7290), dimensions={0,1}
  %mul.7292 = f32[1,4096,4096]{2,1,0} multiply(%convert_element_type.2607, %mul.7291)
  %add_any.323 = f32[1,4096,4096]{2,1,0} add(%mul.7285, %mul.7292)
  %convert_element_type.2622 = bf16[1,4096,4096]{2,1,0} convert(%add_any.323)
  %add_any.324 = bf16[1,4096,4096]{2,1,0} add(%sharding_constraint.1764, %convert_element_type.2622)
  %get-tuple-element.1065 = f32[1,32,4096,1]{3,2,1,0} get-tuple-element(%te_fused_attn_forward_ffi.200), index=1
  %get-tuple-element.1066 = u32[2,4]{1,0} get-tuple-element(%te_fused_attn_forward_ffi.200), index=2
  %sharding_constraint.1801 = u32[2,4]{1,0} copy(%get-tuple-element.1066)
  %sharding_constraint.1803 = bf16[1,4096,4096]{2,1,0} copy(%add_any.324)
  %dot.861 = bf16[1,4096,32,128]{3,2,1,0} dot(%sharding_constraint.1803, %all-gather.337), lhs_contracting_dims={2}, rhs_contracting_dims={2}
  %sharding_constraint.1806 = bf16[1,4096,32,128]{3,2,1,0} copy(%dot.861)
  %te_fused_attn_backward_ffi.90 = (bf16[1,4096,32,128]{3,2,1,0}, bf16[1,4096,8,128]{3,2,1,0}, bf16[1,4096,8,128]{3,2,1,0}, bf16[0]{0}, u8[134742064]{0}) custom-call(%sharding_constraint.1769, %sharding_constraint.1772, %sharding_constraint.1773, %constant.1403, %get-tuple-element.1065, /*index=5*/%sharding_constraint.1801, %get-tuple-element.1052, %sharding_constraint.1806, %concatenate.495, %concatenate.496, /*index=10*/%constant.1416, %constant.1416, %constant.1416, %constant.1416, %constant.1416, /*index=15*/%constant.1416), custom_call_target="te_fused_attn_backward_ffi", operand_layout_constraints={bf16[1,4096,32,128]{3,2,1,0}, bf16[1,4096,8,128]{3,2,1,0}, bf16[1,4096,8,128]{3,2,1,0}, bf16[0]{0}, f32[1,32,4096,1]{3,2,1,0}, u32[2,4]{1,0}, bf16[1,4096,32,128]{3,2,1,0}, bf16[1,4096,32,128]{3,2,1,0}, s32[2]{0}, s32[2]{0}, f32[0]{0}, f32[0]{0}, f32[0]{0}, f32[0]{0}, f32[0]{0}, f32[0]{0}}, api_version=API_VERSION_TYPED_FFI, backend_config={attn_heads = 32 : i64, bias_batch = 0 : i64, bias_heads = 0 : i64, bias_type = 0 : i64, deterministic = false, dropout_probability = 0.000000e+00 : f64, input_batch = 1 : i64, is_training = true, kv_max_seqlen = 4096 : i64, mask_type = 3 : i64, max_segments_per_seq = 1 : i64, num_gqa_groups = 8 : i64, q_max_seqlen = 4096 : i64, qk_head_dim = 128 : i64, qkv_layout = 9 : i64, scaling_factor = 1.000000e+00 : f64, v_head_dim = 128 : i64, window_size_left = -1 : i64, window_size_right = -1 : i64}
  %get-tuple-element.1067 = bf16[1,4096,8,128]{3,2,1,0} get-tuple-element(%te_fused_attn_backward_ffi.90), index=2
  %sharding_constraint.1809 = bf16[1,4096,8,128]{3,2,1,0} copy(%get-tuple-element.1067)
  %dot.862 = bf16[1,4096,4096]{2,1,0} dot(%sharding_constraint.1809, %all-gather.336), lhs_contracting_dims={2,3}, rhs_contracting_dims={1,2}
  %get-tuple-element.1068 = bf16[1,4096,8,128]{3,2,1,0} get-tuple-element(%te_fused_attn_backward_ffi.90), index=1
  %sharding_constraint.1811 = bf16[1,4096,8,128]{3,2,1,0} copy(%get-tuple-element.1068)
  %slice.610 = bf16[1,4096,8,64]{3,2,1,0} slice(%sharding_constraint.1811), slice={[0:1], [0:4096], [0:8], [64:128]}
  %mul.7295 = bf16[1,4096,8,64]{3,2,1,0} multiply(%slice.610, %mul.7238)
  %slice.611 = bf16[1,4096,8,64]{3,2,1,0} slice(%sharding_constraint.1811), slice={[0:1], [0:4096], [0:8], [0:64]}
  %mul.7298 = bf16[1,4096,8,64]{3,2,1,0} multiply(%slice.611, %mul.7235)
  %add_any.325 = bf16[1,4096,8,64]{3,2,1,0} add(%mul.7295, %mul.7298)
  %mul.7301 = bf16[1,4096,8,64]{3,2,1,0} multiply(%slice.610, %mul.7235)
  %neg.264 = bf16[1,4096,8,64]{3,2,1,0} negate(%slice.611)
  %mul.7309 = bf16[1,4096,8,64]{3,2,1,0} multiply(%neg.264, %mul.7238)
  %add_any.326 = bf16[1,4096,8,64]{3,2,1,0} add(%mul.7301, %mul.7309)
  %concatenate.504 = bf16[1,4096,8,128]{3,2,1,0} concatenate(%add_any.325, %add_any.326), dimensions={3}
  %dot.863 = bf16[1,4096,4096]{2,1,0} dot(%concatenate.504, %all-gather.335), lhs_contracting_dims={2,3}, rhs_contracting_dims={1,2}
  %add_any.327 = bf16[1,4096,4096]{2,1,0} add(%dot.862, %dot.863)
  %sharding_constraint.1812 = bf16[1,4096,4096]{2,1,0} copy(%add_any.327)
  %get-tuple-element.1069 = bf16[1,4096,32,128]{3,2,1,0} get-tuple-element(%te_fused_attn_backward_ffi.90), index=0
  %sharding_constraint.1814 = bf16[1,4096,32,128]{3,2,1,0} copy(%get-tuple-element.1069)
  %slice.612 = bf16[1,4096,32,64]{3,2,1,0} slice(%sharding_constraint.1814), slice={[0:1], [0:4096], [0:32], [64:128]}
  %mul.7316 = bf16[1,4096,32,64]{3,2,1,0} multiply(%slice.612, %mul.7225)
  %slice.613 = bf16[1,4096,32,64]{3,2,1,0} slice(%sharding_constraint.1814), slice={[0:1], [0:4096], [0:32], [0:64]}
  %mul.7320 = bf16[1,4096,32,64]{3,2,1,0} multiply(%slice.613, %mul.7222)
  %add_any.328 = bf16[1,4096,32,64]{3,2,1,0} add(%mul.7316, %mul.7320)
  %mul.7324 = bf16[1,4096,32,64]{3,2,1,0} multiply(%slice.612, %mul.7222)
  %neg.265 = bf16[1,4096,32,64]{3,2,1,0} negate(%slice.613)
  %mul.7328 = bf16[1,4096,32,64]{3,2,1,0} multiply(%neg.265, %mul.7225)
  %add_any.329 = bf16[1,4096,32,64]{3,2,1,0} add(%mul.7324, %mul.7328)
  %concatenate.505 = bf16[1,4096,32,128]{3,2,1,0} concatenate(%add_any.328, %add_any.329), dimensions={3}
  %dot.864 = bf16[1,4096,4096]{2,1,0} dot(%concatenate.505, %all-gather.334), lhs_contracting_dims={2,3}, rhs_contracting_dims={1,2}
  %sharding_constraint.1816 = bf16[1,4096,4096]{2,1,0} copy(%dot.864)
  %add_any.330 = bf16[1,4096,4096]{2,1,0} add(%sharding_constraint.1812, %sharding_constraint.1816)
  %sharding_constraint.1818 = bf16[1,4096,4096]{2,1,0} copy(%add_any.330)
  %mul.7330 = bf16[1,4096,4096]{2,1,0} multiply(%sharding_constraint.1818, %mul.7214)
  %convert_element_type.2623 = f32[1,4096,4096]{2,1,0} convert(%mul.7330)
  %mul.7333 = f32[1,4096,4096]{2,1,0} multiply(%convert_element_type.2623, %mul.7212)
  %mul.7334 = f32[1,4096,4096]{2,1,0} multiply(%convert_element_type.2593, %convert_element_type.2623)
  %reduce.752 = f32[1,4096]{1,0} reduce(%mul.7334, %constant.1360), dimensions={2}, to_apply=%region_732.18896
  %reshape.12626 = f32[1,4096,1]{2,1,0} reshape(%reduce.752)
  %div.1171 = f32[1,4096,1]{2,1,0} divide(%rsqrt.165, %add.2178)
  %mul.7335 = f32[1,4096,1]{2,1,0} multiply(%div.1171, %broadcast.3620)
  %mul.7336 = f32[1,4096,1]{2,1,0} multiply(%reshape.12626, %mul.7335)
  %mul.7337 = f32[1,4096,1]{2,1,0} multiply(%mul.7336, %mul.4455)
  %mul.7338 = f32[1,4096]{1,0} reshape(%mul.7337)
  %mul.7339 = f32[1,4096,4096]{2,1,0} broadcast(%mul.7338), dimensions={0,1}
  %mul.7340 = f32[1,4096,4096]{2,1,0} multiply(%convert_element_type.2593, %mul.7339)
  %add_any.331 = f32[1,4096,4096]{2,1,0} add(%mul.7333, %mul.7340)
  %convert_element_type.2624 = bf16[1,4096,4096]{2,1,0} convert(%add_any.331)
  %add_any.332 = bf16[1,4096,4096]{2,1,0} add(%add_any.324, %convert_element_type.2624)
  %sharding_constraint.1821 = bf16[1,4096,4096]{2,1,0} copy(%add_any.332)
  %tuple.299 = (bf16[512,8]{1,0}, bf16[1,4096,14336]{2,1,0}, bf16[1,4096,14336]{2,1,0}, bf16[1,14336,4096]{2,1,0}, bf16[4096]{0}, /*index=5*/bf16[4096]{0}, bf16[512,8,128]{2,1,0}, bf16[32,128,512]{2,1,0}, bf16[512,32,128]{2,1,0}, bf16[512,8,128]{2,1,0}, /*index=10*/bf16[1,4096,4096]{2,1,0}, s32[1,4096]{1,0}, s32[1,4096]{1,0}, bf16[1,4096,4096]{2,1,0}) tuple(%param.133, %param.134, %param.135, %param.136, %param.132, /*index=5*/%param.127, %param.129, %param.131, %param.128, %param.130, /*index=10*/%sharding_constraint.450, %param.10, %param.7, %sharding_constraint.1821)
  %remat2.30 = (bf16[512,8]{1,0}, bf16[1,4096,14336]{2,1,0}, bf16[1,4096,14336]{2,1,0}, bf16[1,14336,4096]{2,1,0}, bf16[4096]{0}, /*index=5*/bf16[4096]{0}, bf16[512,8,128]{2,1,0}, bf16[32,128,512]{2,1,0}, bf16[512,32,128]{2,1,0}, bf16[512,8,128]{2,1,0}, /*index=10*/bf16[1,4096,4096]{2,1,0}, s32[1,4096]{1,0}, s32[1,4096]{1,0}, bf16[1,4096,4096]{2,1,0}) opt-barrier(%tuple.299)
  %get-tuple-element.1070 = bf16[1,4096,4096]{2,1,0} get-tuple-element(%remat2.30), index=13
  %sharding_constraint.1822 = bf16[1,4096,4096]{2,1,0} copy(%get-tuple-element.1070)
  %iota.2694 = s32[1,4096,2,1]{3,2,1,0} iota(), iota_dimension=1
  %get-tuple-element.1071 = bf16[1,4096,4096]{2,1,0} get-tuple-element(%remat2.30), index=10
  %sharding_constraint.1823 = bf16[1,4096,4096]{2,1,0} copy(%get-tuple-element.1071)
  %convert_element_type.2625 = f32[1,4096,4096]{2,1,0} convert(%sharding_constraint.1823)
  %square.106 = f32[1,4096,4096]{2,1,0} multiply(%convert_element_type.2625, %convert_element_type.2625)
  %reduce.753 = f32[1,4096]{1,0} reduce(%square.106, %constant.1360), dimensions={2}, to_apply=%region_733.18938
  %div.1172 = f32[1,4096]{1,0} multiply(%reduce.753, %broadcast.3412)
  %add.2195 = f32[1,4096]{1,0} add(%div.1172, %broadcast.3413)
  %add.2196 = f32[1,4096,1]{2,1,0} reshape(%add.2195)
  %rsqrt.167 = f32[1,4096,1]{2,1,0} rsqrt(%add.2196)
  %mul.7349 = f32[1,4096]{1,0} reshape(%rsqrt.167)
  %mul.7358 = f32[1,4096,4096]{2,1,0} broadcast(%mul.7349), dimensions={0,1}
  %mul.7359 = f32[1,4096,4096]{2,1,0} multiply(%convert_element_type.2625, %mul.7358)
  %convert_element_type.2626 = bf16[1,4096,4096]{2,1,0} convert(%mul.7359)
  %get-tuple-element.1072 = bf16[4096]{0} get-tuple-element(%remat2.30), index=5
  %mul.7360 = bf16[1,4096,4096]{2,1,0} broadcast(%get-tuple-element.1072), dimensions={2}
  %mul.7361 = bf16[1,4096,4096]{2,1,0} multiply(%convert_element_type.2626, %mul.7360)
  %sharding_constraint.1824 = bf16[1,4096,4096]{2,1,0} copy(%mul.7361)
  %sharding_constraint.1825 = bf16[1,4096,4096]{2,1,0} copy(%sharding_constraint.1824)
  %get-tuple-element.1073 = bf16[512,32,128]{2,1,0} get-tuple-element(%remat2.30), index=8
  %all-gather.340 = bf16[4096,32,128]{2,1,0} all-gather(%get-tuple-element.1073), channel_id=623, replica_groups=[1,8]<=[8], dimensions={0}, use_global_device_ids=true
  %dot.865 = bf16[1,4096,32,128]{3,2,1,0} dot(%sharding_constraint.1825, %all-gather.340), lhs_contracting_dims={2}, rhs_contracting_dims={0}
  %slice.614 = bf16[1,4096,32,64]{3,2,1,0} slice(%dot.865), slice={[0:1], [0:4096], [0:32], [0:64]}
  %get-tuple-element.1074 = s32[1,4096]{1,0} get-tuple-element(%remat2.30), index=12
  %convert_element_type.2627 = f32[1,4096]{1,0} convert(%get-tuple-element.1074)
  %div.1173 = f32[1,4096,1,64]{3,2,1,0} broadcast(%convert_element_type.2627), dimensions={0,1}
  %div.1176 = f32[1,4096,1,64]{3,2,1,0} divide(%div.1173, %div.402)
  %cos.103 = f32[1,4096,1,64]{3,2,1,0} cosine(%div.1176)
  %convert_element_type.2629 = bf16[1,4096,1,64]{3,2,1,0} convert(%cos.103)
  %mul.7366 = bf16[1,4096,64]{2,1,0} reshape(%convert_element_type.2629)
  %mul.7369 = bf16[1,4096,32,64]{3,2,1,0} broadcast(%mul.7366), dimensions={0,1,3}
  %mul.7370 = bf16[1,4096,32,64]{3,2,1,0} multiply(%slice.614, %mul.7369)
  %slice.615 = bf16[1,4096,32,64]{3,2,1,0} slice(%dot.865), slice={[0:1], [0:4096], [0:32], [64:128]}
  %sin.102 = f32[1,4096,1,64]{3,2,1,0} sine(%div.1176)
  %convert_element_type.2630 = bf16[1,4096,1,64]{3,2,1,0} convert(%sin.102)
  %mul.7371 = bf16[1,4096,64]{2,1,0} reshape(%convert_element_type.2630)
  %mul.7372 = bf16[1,4096,32,64]{3,2,1,0} broadcast(%mul.7371), dimensions={0,1,3}
  %mul.7373 = bf16[1,4096,32,64]{3,2,1,0} multiply(%slice.615, %mul.7372)
  %sub.344 = bf16[1,4096,32,64]{3,2,1,0} subtract(%mul.7370, %mul.7373)
  %mul.7377 = bf16[1,4096,32,64]{3,2,1,0} multiply(%slice.615, %mul.7369)
  %mul.7380 = bf16[1,4096,32,64]{3,2,1,0} multiply(%slice.614, %mul.7372)
  %add.2197 = bf16[1,4096,32,64]{3,2,1,0} add(%mul.7377, %mul.7380)
  %concatenate.506 = bf16[1,4096,32,128]{3,2,1,0} concatenate(%sub.344, %add.2197), dimensions={3}
  %sharding_constraint.1826 = bf16[1,4096,32,128]{3,2,1,0} copy(%concatenate.506)
  %get-tuple-element.1075 = bf16[512,8,128]{2,1,0} get-tuple-element(%remat2.30), index=6
  %all-gather.341 = bf16[4096,8,128]{2,1,0} all-gather(%get-tuple-element.1075), channel_id=624, replica_groups=[1,8]<=[8], dimensions={0}, use_global_device_ids=true
  %dot.866 = bf16[1,4096,8,128]{3,2,1,0} dot(%sharding_constraint.1825, %all-gather.341), lhs_contracting_dims={2}, rhs_contracting_dims={0}
  %slice.616 = bf16[1,4096,8,64]{3,2,1,0} slice(%dot.866), slice={[0:1], [0:4096], [0:8], [0:64]}
  %mul.7401 = bf16[1,4096,8,64]{3,2,1,0} broadcast(%mul.7366), dimensions={0,1,3}
  %mul.7402 = bf16[1,4096,8,64]{3,2,1,0} multiply(%slice.616, %mul.7401)
  %slice.617 = bf16[1,4096,8,64]{3,2,1,0} slice(%dot.866), slice={[0:1], [0:4096], [0:8], [64:128]}
  %mul.7404 = bf16[1,4096,8,64]{3,2,1,0} broadcast(%mul.7371), dimensions={0,1,3}
  %mul.7405 = bf16[1,4096,8,64]{3,2,1,0} multiply(%slice.617, %mul.7404)
  %sub.345 = bf16[1,4096,8,64]{3,2,1,0} subtract(%mul.7402, %mul.7405)
  %mul.7408 = bf16[1,4096,8,64]{3,2,1,0} multiply(%slice.617, %mul.7401)
  %mul.7412 = bf16[1,4096,8,64]{3,2,1,0} multiply(%slice.616, %mul.7404)
  %add.2198 = bf16[1,4096,8,64]{3,2,1,0} add(%mul.7408, %mul.7412)
  %concatenate.507 = bf16[1,4096,8,128]{3,2,1,0} concatenate(%sub.345, %add.2198), dimensions={3}
  %sharding_constraint.1828 = bf16[1,4096,8,128]{3,2,1,0} copy(%concatenate.507)
  %get-tuple-element.1076 = bf16[512,8,128]{2,1,0} get-tuple-element(%remat2.30), index=9
  %all-gather.342 = bf16[4096,8,128]{2,1,0} all-gather(%get-tuple-element.1076), channel_id=625, replica_groups=[1,8]<=[8], dimensions={0}, use_global_device_ids=true
  %dot.867 = bf16[1,4096,8,128]{3,2,1,0} dot(%sharding_constraint.1825, %all-gather.342), lhs_contracting_dims={2}, rhs_contracting_dims={0}
  %sharding_constraint.1829 = bf16[1,4096,8,128]{3,2,1,0} copy(%dot.867)
  %get-tuple-element.1077 = s32[1,4096]{1,0} get-tuple-element(%remat2.30), index=11
  %eq.2371 = s32[1,4096,4096]{2,1,0} broadcast(%get-tuple-element.1077), dimensions={0,1}
  %eq.2372 = s32[1,4096,4096]{2,1,0} broadcast(%get-tuple-element.1077), dimensions={0,2}
  %eq.2373 = pred[1,4096,4096]{2,1,0} compare(%eq.2371, %eq.2372), direction=EQ
  %and.186 = pred[1,4096,4096]{2,1,0} and(%eq.2373, %and.64)
  %select_n.584 = f32[1,4096,4096]{2,1,0} select(%and.186, %broadcast_in_dim.516, %broadcast_in_dim.517)
  %ne.117 = pred[1,4096,4096]{2,1,0} compare(%select_n.584, %broadcast_in_dim.516), direction=NE
  %not.115 = pred[1,4096,4096]{2,1,0} not(%ne.117)
  %convert_element_type.2635 = s32[1,4096,4096]{2,1,0} convert(%not.115)
  %reduce.754 = s32[1,4096]{1,0} reduce(%convert_element_type.2635, %constant.1181), dimensions={1}, to_apply=%region_734.19034
  %reduce_sum.5741 = s32[1,1,1,4096]{3,2,1,0} reshape(%reduce.754)
  %slice.618 = s32[1,1,1,1]{3,2,1,0} slice(%reduce_sum.5741), slice={[0:1], [0:1], [0:1], [0:1]}
  %squeeze.51 = s32[1,1]{1,0} reshape(%slice.618)
  %reshape.12633 = s32[1]{0} reshape(%squeeze.51)
  %lt.192 = pred[1]{0} compare(%reshape.12633, %constant.1418), direction=LT
  %select_n.585 = s32[1]{0} select(%lt.192, %broadcast_in_dim.518, %reshape.12633)
  %concatenate.508 = s32[2]{0} concatenate(%constant.1418, %select_n.585), dimensions={0}
  %reduce.755 = s32[1,4096]{1,0} reduce(%convert_element_type.2635, %constant.1181), dimensions={2}, to_apply=%region_735.19043
  %reduce_sum.5742 = s32[1,1,1,4096]{3,2,1,0} reshape(%reduce.755)
  %reduce.756 = s32[1,1]{1,0} reduce(%reduce_sum.5742, %constant.1415), dimensions={3,2}, to_apply=%region_736.19049
  %reshape.12634 = s32[1]{0} reshape(%reduce.756)
  %lt.193 = pred[1]{0} compare(%reshape.12634, %constant.1418), direction=LT
  %select_n.586 = s32[1]{0} select(%lt.193, %broadcast_in_dim.518, %reshape.12634)
  %concatenate.509 = s32[2]{0} concatenate(%constant.1418, %select_n.586), dimensions={0}
  %te_fused_attn_forward_ffi.204 = (bf16[1,4096,32,128]{3,2,1,0}, f32[1,32,4096,1]{3,2,1,0}, u32[2,4]{1,0}, u8[48]{0}) custom-call(%sharding_constraint.1826, %sharding_constraint.1828, %sharding_constraint.1829, %constant.1403, %dynamic-slice.38, /*index=5*/%concatenate.508, %concatenate.509, %constant.1416, %constant.1416, %constant.1416, /*index=10*/%constant.1416, %constant.1416, %constant.1416), custom_call_target="te_fused_attn_forward_ffi", operand_layout_constraints={bf16[1,4096,32,128]{3,2,1,0}, bf16[1,4096,8,128]{3,2,1,0}, bf16[1,4096,8,128]{3,2,1,0}, bf16[0]{0}, u32[2]{0}, s32[2]{0}, s32[2]{0}, f32[0]{0}, f32[0]{0}, f32[0]{0}, f32[0]{0}, f32[0]{0}, f32[0]{0}}, api_version=API_VERSION_TYPED_FFI, backend_config={attn_heads = 32 : i64, bias_batch = 0 : i64, bias_heads = 0 : i64, bias_type = 0 : i64, deterministic = false, dropout_probability = 0.000000e+00 : f64, input_batch = 1 : i64, is_training = true, kv_max_seqlen = 4096 : i64, mask_type = 3 : i64, max_segments_per_seq = 1 : i64, num_gqa_groups = 8 : i64, q_max_seqlen = 4096 : i64, qk_head_dim = 128 : i64, qkv_layout = 9 : i64, scaling_factor = 1.000000e+00 : f64, v_head_dim = 128 : i64, window_size_left = -1 : i64, window_size_right = -1 : i64}
  %get-tuple-element.1078 = bf16[1,4096,32,128]{3,2,1,0} get-tuple-element(%te_fused_attn_forward_ffi.204), index=0
  %sharding_constraint.1830 = bf16[1,4096,32,128]{3,2,1,0} copy(%get-tuple-element.1078)
  %get-tuple-element.1079 = bf16[32,128,512]{2,1,0} get-tuple-element(%remat2.30), index=7
  %all-gather.343 = bf16[32,128,4096]{2,1,0} all-gather(%get-tuple-element.1079), channel_id=626, replica_groups=[1,8]<=[8], dimensions={2}, use_global_device_ids=true
  %dot.868 = bf16[1,4096,4096]{2,1,0} dot(%sharding_constraint.1830, %all-gather.343), lhs_contracting_dims={2,3}, rhs_contracting_dims={0,1}
  %sharding_constraint.1831 = bf16[1,4096,4096]{2,1,0} copy(%dot.868)
  %add.2199 = bf16[1,4096,4096]{2,1,0} add(%sharding_constraint.1823, %sharding_constraint.1831)
  %convert_element_type.2637 = f32[1,4096,4096]{2,1,0} convert(%add.2199)
  %square.107 = f32[1,4096,4096]{2,1,0} multiply(%convert_element_type.2637, %convert_element_type.2637)
  %reduce.757 = f32[1,4096]{1,0} reduce(%square.107, %constant.1360), dimensions={2}, to_apply=%region_737.19064
  %div.1181 = f32[1,4096]{1,0} multiply(%reduce.757, %broadcast.3412)
  %add.2200 = f32[1,4096]{1,0} add(%div.1181, %broadcast.3413)
  %add.2201 = f32[1,4096,1]{2,1,0} reshape(%add.2200)
  %rsqrt.168 = f32[1,4096,1]{2,1,0} rsqrt(%add.2201)
  %mul.7413 = f32[1,4096]{1,0} reshape(%rsqrt.168)
  %mul.7414 = f32[1,4096,4096]{2,1,0} broadcast(%mul.7413), dimensions={0,1}
  %mul.7415 = f32[1,4096,4096]{2,1,0} multiply(%convert_element_type.2637, %mul.7414)
  %convert_element_type.2638 = bf16[1,4096,4096]{2,1,0} convert(%mul.7415)
  %get-tuple-element.1080 = bf16[4096]{0} get-tuple-element(%remat2.30), index=4
  %mul.7416 = bf16[1,4096,4096]{2,1,0} broadcast(%get-tuple-element.1080), dimensions={2}
  %mul.7420 = bf16[1,4096,4096]{2,1,0} multiply(%convert_element_type.2638, %mul.7416)
  %sharding_constraint.1832 = bf16[1,4096,4096]{2,1,0} copy(%mul.7420)
  %get-tuple-element.1081 = bf16[512,8]{1,0} get-tuple-element(%remat2.30), index=0
  %all-gather.344 = bf16[4096,8]{1,0} all-gather(%get-tuple-element.1081), channel_id=627, replica_groups=[1,8]<=[8], dimensions={0}, use_global_device_ids=true
  %dot.869 = bf16[1,4096,8]{2,1,0} dot(%sharding_constraint.1832, %all-gather.344), lhs_contracting_dims={2}, rhs_contracting_dims={0}
  %sharding_constraint.1833 = bf16[1,4096,8]{2,1,0} copy(%dot.869)
  %top_k.153 = bf16[4096,8]{1,0} reshape(%sharding_constraint.1833)
  %top_k.154 = (bf16[4096,2]{1,0}, s32[4096,2]{1,0}) custom-call(%top_k.153), custom_call_target="TopK", called_computations={%compare_greater_than.51.19085.clone}
  %get-tuple-element.1082 = bf16[4096,2]{1,0} get-tuple-element(%top_k.154), index=0
  %get-tuple-element.1083 = s32[4096,2]{1,0} get-tuple-element(%top_k.154), index=1
  %add.2203 = s32[4096,2]{1,0} add(%get-tuple-element.1083, %broadcast.3418)
  %sort.115 = (bf16[4096,2]{1,0}, s32[4096,2]{1,0}) sort(%get-tuple-element.1082, %add.2203), dimensions={1}, is_stable=true, to_apply=%compare-value-and-index.51
  %get-tuple-element.1085 = s32[4096,2]{1,0} get-tuple-element(%sort.115), index=1
  %slice.620 = s32[4096,2]{1,0} slice(%get-tuple-element.1085), slice={[0:4096], [0:2]}
  %top_k.155 = s32[1,4096,2]{2,1,0} reshape(%slice.620)
  %lt.194 = pred[1,4096,2]{2,1,0} compare(%top_k.155, %broadcast.3419), direction=LT
  %add.2204 = s32[1,4096,2]{2,1,0} add(%top_k.155, %broadcast.3420)
  %select_n.587 = s32[1,4096,2]{2,1,0} select(%lt.194, %add.2204, %top_k.155)
  %broadcast_in_dim.731 = s32[1,4096,2,1]{3,2,1,0} reshape(%select_n.587)
  %concatenate.510 = s32[1,4096,2,3]{3,2,1,0} concatenate(%add.1356, %iota.2694, %broadcast_in_dim.731), dimensions={3}
  %subtract.174 = s32[1,4096,2,3]{3,2,1,0} subtract(%concatenate.510, %broadcast.3428)
  %scatter.250 = u32[1,4096,8]{2,1,0} scatter(%dynamic-slice.43, %subtract.174, %add.1401), update_window_dims={}, inserted_window_dims={0,1,2}, scatter_dims_to_operand_dims={0,1,2}, index_vector_dim=3, to_apply=%region_738.19121.clone
  %gather.70 = u32[1,4096,2]{2,1,0} gather(%scatter.250, %subtract.174), offset_dims={}, collapsed_slice_dims={0,1,2}, start_index_map={0,1,2}, index_vector_dim=3, slice_sizes={1,1,1}
  %eq.2374 = pred[1,4096,2]{2,1,0} compare(%add.1401, %gather.70), direction=EQ
  %get-tuple-element.1084 = bf16[4096,2]{1,0} get-tuple-element(%sort.115), index=0
  %slice.619 = bf16[4096,2]{1,0} slice(%get-tuple-element.1084), slice={[0:4096], [0:2]}
  %convert_element_type.2640 = f32[4096,2]{1,0} convert(%slice.619)
  %convert_element_type.2641 = f32[1,4096,2]{2,1,0} reshape(%convert_element_type.2640)
  %reduce.758 = f32[4096]{0} reduce(%convert_element_type.2640, %constant.1450), dimensions={1}, to_apply=%region_739.19130
  %sub.346 = f32[1,4096]{1,0} reshape(%reduce.758)
  %sub.347 = f32[1,4096,2]{2,1,0} broadcast(%sub.346), dimensions={0,1}
  %sub.348 = f32[1,4096,2]{2,1,0} subtract(%convert_element_type.2641, %sub.347)
  %exp.229 = f32[1,4096,2]{2,1,0} exponential(%sub.348)
  %reduce.759 = f32[1,4096]{1,0} reduce(%exp.229, %constant.1360), dimensions={2}, to_apply=%region_740.19139
  %div.1182 = f32[1,4096,2]{2,1,0} broadcast(%reduce.759), dimensions={0,1}
  %div.1183 = f32[1,4096,2]{2,1,0} divide(%exp.229, %div.1182)
  %convert_element_type.2642 = bf16[1,4096,2]{2,1,0} convert(%div.1183)
  %select_n.588 = bf16[1,4096,2]{2,1,0} select(%eq.2374, %convert_element_type.2642, %broadcast.3427)
  %scatter.251 = bf16[1,4096,8]{2,1,0} scatter(%broadcast.3379, %subtract.174, %select_n.588), update_window_dims={}, inserted_window_dims={0,1,2}, scatter_dims_to_operand_dims={0,1,2}, index_vector_dim=3, to_apply=%region_741.19148.clone
  %eq.2376 = s32[1,4096,2,8]{3,2,1,0} broadcast(%top_k.155), dimensions={0,1,2}
  %iota.2705 = s32[1,4096,2,8]{3,2,1,0} iota(), iota_dimension=3
  %eq.2377 = pred[1,4096,2,8]{3,2,1,0} compare(%eq.2376, %iota.2705), direction=EQ
  %convert_element_type.2643 = s32[1,4096,2,8]{3,2,1,0} convert(%eq.2377)
  %reshape.12667 = s32[1,8192,8]{2,1,0} reshape(%convert_element_type.2643)
  %sharding_constraint.1834 = s32[1,8192,8]{2,1,0} copy(%reshape.12667)
  %reduce-window.51 = s32[1,8192,8]{2,1,0} reduce-window(%sharding_constraint.1834, %constant.1181), window={size=1x8192x1 pad=0_0x8191_0x0_0}, to_apply=%region_742.19160
  %reshape.12669 = s32[1,4096,2,8]{3,2,1,0} reshape(%reduce-window.51)
  %sharding_constraint.1835 = s32[1,4096,2,8]{3,2,1,0} copy(%reshape.12669)
  %le.142 = pred[1,4096,2,8]{3,2,1,0} compare(%sharding_constraint.1835, %broadcast.3429), direction=LE
  %mul.7421 = s32[1,4096,2,8]{3,2,1,0} select(%le.142, %convert_element_type.2643, %broadcast.3430)
  %reduce.760 = s32[1,4096,8]{2,1,0} reduce(%mul.7421, %constant.1181), dimensions={2}, to_apply=%region_743.19169
  %convert_element_type.2644 = bf16[1,4096,8]{2,1,0} convert(%reduce.760)
  %mul.7422 = bf16[1,4096,8]{2,1,0} multiply(%scatter.251, %convert_element_type.2644)
  %mul.7426 = bf16[1,4096,8,1025]{3,2,1,0} broadcast(%mul.7422), dimensions={0,1,2}
  %mul.7433 = s32[1,8192,8]{2,1,0} multiply(%sharding_constraint.1834, %reduce-window.51)
  %reshape.12670 = s32[1,4096,2,8]{3,2,1,0} reshape(%mul.7433)
  %reduce.761 = s32[1,4096,8]{2,1,0} reduce(%reshape.12670, %constant.1181), dimensions={2}, to_apply=%region_744.19179
  %mul.7434 = s32[1,4096,8]{2,1,0} multiply(%reduce.761, %reduce.760)
  %eq.2378 = s32[1,4096,8,1025]{3,2,1,0} broadcast(%mul.7434), dimensions={0,1,2}
  %iota.2706 = s32[1,4096,8,1025]{3,2,1,0} iota(), iota_dimension=3
  %eq.2379 = pred[1,4096,8,1025]{3,2,1,0} compare(%eq.2378, %iota.2706), direction=EQ
  %convert_element_type.2645 = s32[1,4096,8,1025]{3,2,1,0} convert(%eq.2379)
  %convert_element_type.2646 = bf16[1,4096,8,1025]{3,2,1,0} convert(%convert_element_type.2645)
  %mul.7435 = bf16[1,4096,8,1025]{3,2,1,0} multiply(%mul.7426, %convert_element_type.2646)
  %slice.621 = bf16[1,4096,8,1024]{3,2,1,0} slice(%mul.7435), slice={[0:1], [0:4096], [0:8], [1:1025]}
  %convert_element_type.2647 = pred[1,4096,8,1024]{3,2,1,0} compare(%slice.621, %broadcast.3431), direction=NE
  %sharding_constraint.1836 = pred[1,4096,8,1024]{3,2,1,0} copy(%convert_element_type.2647)
  %dot_general.106 = bf16[1,4096,8,1024]{3,2,1,0} convert(%sharding_constraint.1836)
  %dot.870 = bf16[1,8,1024,4096]{3,2,1,0} dot(%dot_general.106, %sharding_constraint.1832), lhs_batch_dims={0}, lhs_contracting_dims={1}, rhs_batch_dims={0}, rhs_contracting_dims={1}
  %reshape.12673 = bf16[1,8,1,1024,4096]{4,3,2,1,0} reshape(%dot.870)
  %all-to-all.140 = bf16[1,8,1,1024,4096]{4,3,2,1,0} all-to-all(%reshape.12673), channel_id=631, replica_groups=[1,8]<=[8], dimensions={1}
  %transpose.234 = bf16[8,1,1,1024,4096]{4,3,2,0,1} transpose(%all-to-all.140), dimensions={1,0,2,3,4}
  %reshape.12674 = bf16[8,1,1024,4096]{3,2,1,0} reshape(%transpose.234)
  %transpose.235 = bf16[1,8,1024,4096]{3,2,0,1} transpose(%reshape.12674), dimensions={1,0,2,3}
  %sharding_constraint.1837 = bf16[1,8,1024,4096]{3,2,0,1} copy(%transpose.235)
  %get-tuple-element.1088 = bf16[1,4096,14336]{2,1,0} get-tuple-element(%remat2.30), index=1
  %sharding_constraint.1838 = bf16[1,4096,14336]{2,1,0} copy(%get-tuple-element.1088)
  %dot.871 = bf16[1,8,1024,14336]{3,2,1,0} dot(%sharding_constraint.1837, %sharding_constraint.1838), lhs_batch_dims={0}, lhs_contracting_dims={3}, rhs_batch_dims={0}, rhs_contracting_dims={1}
  %sharding_constraint.1839 = bf16[1,8,1024,14336]{3,2,1,0} copy(%dot.871)
  %neg.266 = bf16[1,8,1024,14336]{3,2,1,0} negate(%sharding_constraint.1839)
  %exp.230 = bf16[1,8,1024,14336]{3,2,1,0} exponential(%neg.266)
  %add.2209 = bf16[1,8,1024,14336]{3,2,1,0} add(%exp.230, %jit_silu_.0)
  %div.1184 = bf16[1,8,1024,14336]{3,2,1,0} divide(%jit_silu_.0, %add.2209)
  %mul.7436 = bf16[1,8,1024,14336]{3,2,1,0} multiply(%sharding_constraint.1839, %div.1184)
  %sharding_constraint.1840 = bf16[1,4096,4096]{2,1,0} copy(%sharding_constraint.1822)
  %sharding_constraint.1841 = bf16[1,4096,8,1024]{3,2,1,0} copy(%slice.621)
  %dot.872 = bf16[1,4096,8,1024]{3,2,1,0} dot(%sharding_constraint.1840, %sharding_constraint.1841), lhs_batch_dims={0}, lhs_contracting_dims={1}, rhs_batch_dims={0}, rhs_contracting_dims={1}
  %reshape.12677 = bf16[1,4096,8,1,1024]{4,3,2,1,0} reshape(%dot.872)
  %all-to-all.141 = bf16[1,4096,8,1,1024]{4,3,2,1,0} all-to-all(%reshape.12677), channel_id=632, replica_groups=[1,8]<=[8], dimensions={2}
  %transpose.236 = bf16[8,1,4096,1,1024]{4,3,0,2,1} transpose(%all-to-all.141), dimensions={2,0,1,3,4}
  %reshape.12679 = bf16[8,4096,1,1024]{3,2,1,0} reshape(%transpose.236)
  %transpose.237 = bf16[1,8,1024,4096]{2,0,3,1} transpose(%reshape.12679), dimensions={2,0,3,1}
  %sharding_constraint.1845 = bf16[1,8,1024,4096]{2,0,3,1} copy(%transpose.237)
  %get-tuple-element.1089 = bf16[1,14336,4096]{2,1,0} get-tuple-element(%remat2.30), index=3
  %sharding_constraint.1846 = bf16[1,14336,4096]{2,1,0} copy(%get-tuple-element.1089)
  %dot.873 = bf16[1,8,1024,14336]{3,2,1,0} dot(%sharding_constraint.1845, %sharding_constraint.1846), lhs_batch_dims={0}, lhs_contracting_dims={3}, rhs_batch_dims={0}, rhs_contracting_dims={2}
  %mul.7437 = bf16[1,8,1024,14336]{3,2,1,0} multiply(%mul.7436, %dot.873)
  %sharding_constraint.1847 = bf16[1,8,1024,14336]{3,2,1,0} copy(%mul.7437)
  %get-tuple-element.1090 = bf16[1,4096,14336]{2,1,0} get-tuple-element(%remat2.30), index=2
  %sharding_constraint.1848 = bf16[1,4096,14336]{2,1,0} copy(%get-tuple-element.1090)
  %dot.874 = bf16[1,8,1024,4096]{3,2,1,0} dot(%sharding_constraint.1847, %sharding_constraint.1848), lhs_batch_dims={0}, lhs_contracting_dims={3}, rhs_batch_dims={0}, rhs_contracting_dims={2}
  %dot.875 = bf16[1,8,1024,14336]{3,2,1,0} dot(%sharding_constraint.1837, %sharding_constraint.1848), lhs_batch_dims={0}, lhs_contracting_dims={3}, rhs_batch_dims={0}, rhs_contracting_dims={1}
  %sharding_constraint.1849 = bf16[1,8,1024,14336]{3,2,1,0} copy(%dot.875)
  %mul.7438 = bf16[1,8,1024,14336]{3,2,1,0} multiply(%dot.873, %sharding_constraint.1849)
  %mul.7439 = bf16[1,8,1024,14336]{3,2,1,0} multiply(%mul.7438, %div.1184)
  %mul.7440 = bf16[1,8,1024,14336]{3,2,1,0} multiply(%sharding_constraint.1839, %mul.7438)
  %sub.349 = bf16[1,8,1024,14336]{3,2,1,0} subtract(%jit_silu_.0, %div.1184)
  %mul.7441 = bf16[1,8,1024,14336]{3,2,1,0} multiply(%div.1184, %sub.349)
  %mul.7442 = bf16[1,8,1024,14336]{3,2,1,0} multiply(%mul.7440, %mul.7441)
  %add_any.333 = bf16[1,8,1024,14336]{3,2,1,0} add(%mul.7439, %mul.7442)
  %sharding_constraint.1850 = bf16[1,8,1024,14336]{3,2,1,0} copy(%add_any.333)
  %dot.876 = bf16[1,8,1024,4096]{3,2,1,0} dot(%sharding_constraint.1850, %sharding_constraint.1838), lhs_batch_dims={0}, lhs_contracting_dims={3}, rhs_batch_dims={0}, rhs_contracting_dims={2}
  %add_any.334 = bf16[1,8,1024,4096]{3,2,1,0} add(%dot.874, %dot.876)
  %sharding_constraint.1851 = bf16[1,8,1024,4096]{3,2,1,0} copy(%add_any.334)
  %transpose.238 = bf16[8,1,1024,4096]{3,2,0,1} transpose(%sharding_constraint.1851), dimensions={1,0,2,3}
  %reshape.12682 = bf16[8,1,1,1024,4096]{4,3,2,1,0} reshape(%transpose.238)
  %all-to-all.142 = bf16[8,1,1,1024,4096]{4,3,2,1,0} all-to-all(%reshape.12682), channel_id=633, replica_groups=[1,8]<=[8], dimensions={0}
  %transpose.239 = bf16[1,8,1,1024,4096]{4,3,2,0,1} transpose(%all-to-all.142), dimensions={1,0,2,3,4}
  %reshape.12683 = bf16[1,8,1024,4096]{3,2,1,0} reshape(%transpose.239)
  %dot.877 = bf16[1,4096,4096]{2,1,0} dot(%dot_general.106, %reshape.12683), lhs_batch_dims={0}, lhs_contracting_dims={2,3}, rhs_batch_dims={0}, rhs_contracting_dims={1,2}
  %reshape.12685 = s32[1,4096,2,1]{3,2,1,0} reshape(%slice.620)
  %ge.19 = pred[1,4096,2,3]{3,2,1,0} compare(%concatenate.510, %broadcast.3629), direction=GE
  %le.144 = pred[1,4096,2,3]{3,2,1,0} compare(%concatenate.510, %le.67), direction=LE
  %and.187 = pred[1,4096,2,3]{3,2,1,0} and(%ge.19, %le.144)
  %reduce.762 = pred[1,4096,2]{2,1,0} reduce(%and.187, %constant.5574), dimensions={3}, to_apply=%region_745.19236
  %mul.7443 = bf16[1,8,1024,14336]{3,2,1,0} multiply(%mul.7436, %sharding_constraint.1849)
  %dot.878 = bf16[1,8,1024,4096]{3,2,1,0} dot(%mul.7443, %sharding_constraint.1846), lhs_batch_dims={0}, lhs_contracting_dims={3}, rhs_batch_dims={0}, rhs_contracting_dims={1}
  %sharding_constraint.1852 = bf16[1,8,1024,4096]{3,2,1,0} copy(%dot.878)
  %reshape.12692 = bf16[1,8,1,1024,4096]{4,3,2,1,0} reshape(%sharding_constraint.1852)
  %all-to-all.143 = bf16[1,8,1,1024,4096]{4,3,2,1,0} all-to-all(%reshape.12692), channel_id=634, replica_groups=[1,8]<=[8], dimensions={1}
  %transpose.240 = bf16[8,1,1,1024,4096]{4,3,2,0,1} transpose(%all-to-all.143), dimensions={1,0,2,3,4}
  %reshape.12693 = bf16[8,1,1024,4096]{3,2,1,0} reshape(%transpose.240)
  %dot.879 = bf16[1,4096,8,1024]{3,2,1,0} dot(%sharding_constraint.1840, %reshape.12693), lhs_batch_dims={0}, lhs_contracting_dims={2}, rhs_batch_dims={1}, rhs_contracting_dims={3}
  %sharding_constraint.1853 = bf16[1,4096,8,1024]{3,2,1,0} copy(%dot.879)
  %pad.19 = bf16[1,4096,8,1025]{3,2,1,0} pad(%sharding_constraint.1853, %constant.1190), padding=0_0x0_0x0_0x1_0
  %mul.7444 = bf16[1,4096,8,1025]{3,2,1,0} multiply(%pad.19, %convert_element_type.2646)
  %reduce.763 = bf16[1,4096,8]{2,1,0} reduce(%mul.7444, %constant.1190), dimensions={3}, to_apply=%region_746.19248
  %mul.7445 = bf16[1,4096,8]{2,1,0} multiply(%reduce.763, %convert_element_type.2644)
  %gather.71 = bf16[1,4096,2]{2,1,0} gather(%mul.7445, %subtract.174), offset_dims={}, collapsed_slice_dims={0,1,2}, start_index_map={0,1,2}, index_vector_dim=3, slice_sizes={1,1,1}
  %select_n.589 = bf16[1,4096,2]{2,1,0} select(%reduce.762, %gather.71, %broadcast.3427)
  %select_n.590 = bf16[1,4096,2]{2,1,0} select(%eq.2374, %select_n.589, %broadcast.3427)
  %convert_element_type.2648 = f32[1,4096,2]{2,1,0} convert(%select_n.590)
  %div.1186 = f32[1,4096,2]{2,1,0} divide(%convert_element_type.2648, %div.1182)
  %mul.7446 = f32[1,4096]{1,0} multiply(%reduce.759, %reduce.759)
  %div.1187 = f32[1,4096]{1,0} divide(%add.1847, %mul.7446)
  %mul.7447 = f32[1,4096,2]{2,1,0} broadcast(%div.1187), dimensions={0,1}
  %mul.7448 = f32[1,4096,2]{2,1,0} multiply(%convert_element_type.2648, %mul.7447)
  %mul.7449 = f32[1,4096,2]{2,1,0} multiply(%mul.7448, %exp.229)
  %reduce.764 = f32[1,4096]{1,0} reduce(%mul.7449, %constant.1360), dimensions={2}, to_apply=%region_747.19265
  %neg.267 = f32[1,4096]{1,0} negate(%reduce.764)
  %broadcast_in_dim.732 = f32[1,4096,2]{2,1,0} broadcast(%neg.267), dimensions={0,1}
  %add_any.335 = f32[1,4096,2]{2,1,0} add(%div.1186, %broadcast_in_dim.732)
  %mul.7450 = f32[1,4096,2]{2,1,0} multiply(%add_any.335, %exp.229)
  %convert_element_type.2649 = bf16[1,4096,2]{2,1,0} convert(%mul.7450)
  %scatter.252 = bf16[1,4096,8]{2,1,0} scatter(%broadcast.3379, %reshape.12685, %convert_element_type.2649), update_window_dims={}, inserted_window_dims={2}, scatter_dims_to_operand_dims={2}, input_batching_dims={0,1}, scatter_indices_batching_dims={0,1}, index_vector_dim=3, to_apply=%region_748.19275.clone
  %sharding_constraint.1854 = bf16[1,4096,8]{2,1,0} copy(%scatter.252)
  %dot.880 = bf16[1,4096,4096]{2,1,0} dot(%sharding_constraint.1854, %all-gather.344), lhs_contracting_dims={2}, rhs_contracting_dims={1}
  %add_any.336 = bf16[1,4096,4096]{2,1,0} add(%dot.877, %dot.880)
  %sharding_constraint.1855 = bf16[1,4096,4096]{2,1,0} copy(%add_any.336)
  %mul.7452 = bf16[1,4096,4096]{2,1,0} multiply(%sharding_constraint.1855, %mul.7416)
  %convert_element_type.2650 = f32[1,4096,4096]{2,1,0} convert(%mul.7452)
  %mul.7455 = f32[1,4096,4096]{2,1,0} multiply(%convert_element_type.2650, %mul.7414)
  %mul.7456 = f32[1,4096,4096]{2,1,0} multiply(%convert_element_type.2637, %convert_element_type.2650)
  %reduce.765 = f32[1,4096]{1,0} reduce(%mul.7456, %constant.1360), dimensions={2}, to_apply=%region_749.19291
  %reshape.12705 = f32[1,4096,1]{2,1,0} reshape(%reduce.765)
  %div.1188 = f32[1,4096,1]{2,1,0} divide(%rsqrt.168, %add.2201)
  %mul.7457 = f32[1,4096,1]{2,1,0} multiply(%div.1188, %broadcast.3620)
  %mul.7458 = f32[1,4096,1]{2,1,0} multiply(%reshape.12705, %mul.7457)
  %mul.7459 = f32[1,4096,1]{2,1,0} multiply(%mul.7458, %mul.4455)
  %mul.7460 = f32[1,4096]{1,0} reshape(%mul.7459)
  %mul.7461 = f32[1,4096,4096]{2,1,0} broadcast(%mul.7460), dimensions={0,1}
  %mul.7462 = f32[1,4096,4096]{2,1,0} multiply(%convert_element_type.2637, %mul.7461)
  %add_any.337 = f32[1,4096,4096]{2,1,0} add(%mul.7455, %mul.7462)
  %convert_element_type.2651 = bf16[1,4096,4096]{2,1,0} convert(%add_any.337)
  %add_any.338 = bf16[1,4096,4096]{2,1,0} add(%sharding_constraint.1822, %convert_element_type.2651)
  %get-tuple-element.1091 = f32[1,32,4096,1]{3,2,1,0} get-tuple-element(%te_fused_attn_forward_ffi.204), index=1
  %get-tuple-element.1092 = u32[2,4]{1,0} get-tuple-element(%te_fused_attn_forward_ffi.204), index=2
  %sharding_constraint.1856 = u32[2,4]{1,0} copy(%get-tuple-element.1092)
  %sharding_constraint.1857 = bf16[1,4096,4096]{2,1,0} copy(%add_any.338)
  %dot.881 = bf16[1,4096,32,128]{3,2,1,0} dot(%sharding_constraint.1857, %all-gather.343), lhs_contracting_dims={2}, rhs_contracting_dims={2}
  %sharding_constraint.1858 = bf16[1,4096,32,128]{3,2,1,0} copy(%dot.881)
  %te_fused_attn_backward_ffi.95 = (bf16[1,4096,32,128]{3,2,1,0}, bf16[1,4096,8,128]{3,2,1,0}, bf16[1,4096,8,128]{3,2,1,0}, bf16[0]{0}, u8[134742064]{0}) custom-call(%sharding_constraint.1826, %sharding_constraint.1828, %sharding_constraint.1829, %constant.1403, %get-tuple-element.1091, /*index=5*/%sharding_constraint.1856, %get-tuple-element.1078, %sharding_constraint.1858, %concatenate.508, %concatenate.509, /*index=10*/%constant.1416, %constant.1416, %constant.1416, %constant.1416, %constant.1416, /*index=15*/%constant.1416), custom_call_target="te_fused_attn_backward_ffi", operand_layout_constraints={bf16[1,4096,32,128]{3,2,1,0}, bf16[1,4096,8,128]{3,2,1,0}, bf16[1,4096,8,128]{3,2,1,0}, bf16[0]{0}, f32[1,32,4096,1]{3,2,1,0}, u32[2,4]{1,0}, bf16[1,4096,32,128]{3,2,1,0}, bf16[1,4096,32,128]{3,2,1,0}, s32[2]{0}, s32[2]{0}, f32[0]{0}, f32[0]{0}, f32[0]{0}, f32[0]{0}, f32[0]{0}, f32[0]{0}}, api_version=API_VERSION_TYPED_FFI, backend_config={attn_heads = 32 : i64, bias_batch = 0 : i64, bias_heads = 0 : i64, bias_type = 0 : i64, deterministic = false, dropout_probability = 0.000000e+00 : f64, input_batch = 1 : i64, is_training = true, kv_max_seqlen = 4096 : i64, mask_type = 3 : i64, max_segments_per_seq = 1 : i64, num_gqa_groups = 8 : i64, q_max_seqlen = 4096 : i64, qk_head_dim = 128 : i64, qkv_layout = 9 : i64, scaling_factor = 1.000000e+00 : f64, v_head_dim = 128 : i64, window_size_left = -1 : i64, window_size_right = -1 : i64}
  %get-tuple-element.1093 = bf16[1,4096,8,128]{3,2,1,0} get-tuple-element(%te_fused_attn_backward_ffi.95), index=2
  %sharding_constraint.1859 = bf16[1,4096,8,128]{3,2,1,0} copy(%get-tuple-element.1093)
  %dot.882 = bf16[1,4096,4096]{2,1,0} dot(%sharding_constraint.1859, %all-gather.342), lhs_contracting_dims={2,3}, rhs_contracting_dims={1,2}
  %get-tuple-element.1094 = bf16[1,4096,8,128]{3,2,1,0} get-tuple-element(%te_fused_attn_backward_ffi.95), index=1
  %sharding_constraint.1860 = bf16[1,4096,8,128]{3,2,1,0} copy(%get-tuple-element.1094)
  %slice.622 = bf16[1,4096,8,64]{3,2,1,0} slice(%sharding_constraint.1860), slice={[0:1], [0:4096], [0:8], [64:128]}
  %mul.7469 = bf16[1,4096,8,64]{3,2,1,0} multiply(%slice.622, %mul.7404)
  %slice.623 = bf16[1,4096,8,64]{3,2,1,0} slice(%sharding_constraint.1860), slice={[0:1], [0:4096], [0:8], [0:64]}
  %mul.7476 = bf16[1,4096,8,64]{3,2,1,0} multiply(%slice.623, %mul.7401)
  %add_any.339 = bf16[1,4096,8,64]{3,2,1,0} add(%mul.7469, %mul.7476)
  %mul.7479 = bf16[1,4096,8,64]{3,2,1,0} multiply(%slice.622, %mul.7401)
  %neg.268 = bf16[1,4096,8,64]{3,2,1,0} negate(%slice.623)
  %mul.7482 = bf16[1,4096,8,64]{3,2,1,0} multiply(%neg.268, %mul.7404)
  %add_any.340 = bf16[1,4096,8,64]{3,2,1,0} add(%mul.7479, %mul.7482)
  %concatenate.517 = bf16[1,4096,8,128]{3,2,1,0} concatenate(%add_any.339, %add_any.340), dimensions={3}
  %dot.883 = bf16[1,4096,4096]{2,1,0} dot(%concatenate.517, %all-gather.341), lhs_contracting_dims={2,3}, rhs_contracting_dims={1,2}
  %add_any.341 = bf16[1,4096,4096]{2,1,0} add(%dot.882, %dot.883)
  %sharding_constraint.1861 = bf16[1,4096,4096]{2,1,0} copy(%add_any.341)
  %get-tuple-element.1095 = bf16[1,4096,32,128]{3,2,1,0} get-tuple-element(%te_fused_attn_backward_ffi.95), index=0
  %sharding_constraint.1862 = bf16[1,4096,32,128]{3,2,1,0} copy(%get-tuple-element.1095)
  %slice.624 = bf16[1,4096,32,64]{3,2,1,0} slice(%sharding_constraint.1862), slice={[0:1], [0:4096], [0:32], [64:128]}
  %mul.7485 = bf16[1,4096,32,64]{3,2,1,0} multiply(%slice.624, %mul.7372)
  %slice.625 = bf16[1,4096,32,64]{3,2,1,0} slice(%sharding_constraint.1862), slice={[0:1], [0:4096], [0:32], [0:64]}
  %mul.7490 = bf16[1,4096,32,64]{3,2,1,0} multiply(%slice.625, %mul.7369)
  %add_any.342 = bf16[1,4096,32,64]{3,2,1,0} add(%mul.7485, %mul.7490)
  %mul.7495 = bf16[1,4096,32,64]{3,2,1,0} multiply(%slice.624, %mul.7369)
  %neg.269 = bf16[1,4096,32,64]{3,2,1,0} negate(%slice.625)
  %mul.7498 = bf16[1,4096,32,64]{3,2,1,0} multiply(%neg.269, %mul.7372)
  %add_any.343 = bf16[1,4096,32,64]{3,2,1,0} add(%mul.7495, %mul.7498)
  %concatenate.518 = bf16[1,4096,32,128]{3,2,1,0} concatenate(%add_any.342, %add_any.343), dimensions={3}
  %dot.884 = bf16[1,4096,4096]{2,1,0} dot(%concatenate.518, %all-gather.340), lhs_contracting_dims={2,3}, rhs_contracting_dims={1,2}
  %sharding_constraint.1863 = bf16[1,4096,4096]{2,1,0} copy(%dot.884)
  %add_any.344 = bf16[1,4096,4096]{2,1,0} add(%sharding_constraint.1861, %sharding_constraint.1863)
  %sharding_constraint.1864 = bf16[1,4096,4096]{2,1,0} copy(%add_any.344)
  %mul.7500 = bf16[1,4096,4096]{2,1,0} multiply(%sharding_constraint.1864, %mul.7360)
  %convert_element_type.2652 = f32[1,4096,4096]{2,1,0} convert(%mul.7500)
  %mul.7503 = f32[1,4096,4096]{2,1,0} multiply(%convert_element_type.2652, %mul.7358)
  %mul.7504 = f32[1,4096,4096]{2,1,0} multiply(%convert_element_type.2625, %convert_element_type.2652)
  %reduce.766 = f32[1,4096]{1,0} reduce(%mul.7504, %constant.1360), dimensions={2}, to_apply=%region_750.19370
  %reshape.12713 = f32[1,4096,1]{2,1,0} reshape(%reduce.766)
  %div.1189 = f32[1,4096,1]{2,1,0} divide(%rsqrt.167, %add.2196)
  %mul.7505 = f32[1,4096,1]{2,1,0} multiply(%div.1189, %broadcast.3620)
  %mul.7506 = f32[1,4096,1]{2,1,0} multiply(%reshape.12713, %mul.7505)
  %mul.7507 = f32[1,4096,1]{2,1,0} multiply(%mul.7506, %mul.4455)
  %mul.7508 = f32[1,4096]{1,0} reshape(%mul.7507)
  %mul.7509 = f32[1,4096,4096]{2,1,0} broadcast(%mul.7508), dimensions={0,1}
  %mul.7510 = f32[1,4096,4096]{2,1,0} multiply(%convert_element_type.2625, %mul.7509)
  %add_any.345 = f32[1,4096,4096]{2,1,0} add(%mul.7503, %mul.7510)
  %convert_element_type.2653 = bf16[1,4096,4096]{2,1,0} convert(%add_any.345)
  %add_any.346 = bf16[1,4096,4096]{2,1,0} add(%add_any.338, %convert_element_type.2653)
  %sharding_constraint.1865 = bf16[1,4096,4096]{2,1,0} copy(%add_any.346)
  %tuple.303 = (bf16[512,8]{1,0}, bf16[1,4096,14336]{2,1,0}, bf16[1,4096,14336]{2,1,0}, bf16[1,14336,4096]{2,1,0}, bf16[4096]{0}, /*index=5*/bf16[4096]{0}, bf16[512,8,128]{2,1,0}, bf16[32,128,512]{2,1,0}, bf16[512,32,128]{2,1,0}, bf16[512,8,128]{2,1,0}, /*index=10*/bf16[1,4096,4096]{2,1,0}, s32[1,4096]{1,0}, s32[1,4096]{1,0}, bf16[1,4096,4096]{2,1,0}) tuple(%param.123, %param.124, %param.125, %param.126, %param.122, /*index=5*/%param.117, %param.119, %param.121, %param.118, %param.120, /*index=10*/%sharding_constraint.426, %param.10, %param.7, %sharding_constraint.1865)
  %remat2.31 = (bf16[512,8]{1,0}, bf16[1,4096,14336]{2,1,0}, bf16[1,4096,14336]{2,1,0}, bf16[1,14336,4096]{2,1,0}, bf16[4096]{0}, /*index=5*/bf16[4096]{0}, bf16[512,8,128]{2,1,0}, bf16[32,128,512]{2,1,0}, bf16[512,32,128]{2,1,0}, bf16[512,8,128]{2,1,0}, /*index=10*/bf16[1,4096,4096]{2,1,0}, s32[1,4096]{1,0}, s32[1,4096]{1,0}, bf16[1,4096,4096]{2,1,0}) opt-barrier(%tuple.303)
  %get-tuple-element.1096 = bf16[1,4096,4096]{2,1,0} get-tuple-element(%remat2.31), index=13
  %sharding_constraint.1866 = bf16[1,4096,4096]{2,1,0} copy(%get-tuple-element.1096)
  %iota.2711 = s32[1,4096,2,1]{3,2,1,0} iota(), iota_dimension=1
  %get-tuple-element.1097 = bf16[1,4096,4096]{2,1,0} get-tuple-element(%remat2.31), index=10
  %sharding_constraint.1867 = bf16[1,4096,4096]{2,1,0} copy(%get-tuple-element.1097)
  %convert_element_type.2654 = f32[1,4096,4096]{2,1,0} convert(%sharding_constraint.1867)
  %square.108 = f32[1,4096,4096]{2,1,0} multiply(%convert_element_type.2654, %convert_element_type.2654)
  %reduce.767 = f32[1,4096]{1,0} reduce(%square.108, %constant.1360), dimensions={2}, to_apply=%region_751.19412
  %div.1190 = f32[1,4096]{1,0} multiply(%reduce.767, %broadcast.3412)
  %add.2214 = f32[1,4096]{1,0} add(%div.1190, %broadcast.3413)
  %add.2215 = f32[1,4096,1]{2,1,0} reshape(%add.2214)
  %rsqrt.169 = f32[1,4096,1]{2,1,0} rsqrt(%add.2215)
  %mul.7511 = f32[1,4096]{1,0} reshape(%rsqrt.169)
  %mul.7512 = f32[1,4096,4096]{2,1,0} broadcast(%mul.7511), dimensions={0,1}
  %mul.7513 = f32[1,4096,4096]{2,1,0} multiply(%convert_element_type.2654, %mul.7512)
  %convert_element_type.2655 = bf16[1,4096,4096]{2,1,0} convert(%mul.7513)
  %get-tuple-element.1098 = bf16[4096]{0} get-tuple-element(%remat2.31), index=5
  %mul.7514 = bf16[1,4096,4096]{2,1,0} broadcast(%get-tuple-element.1098), dimensions={2}
  %mul.7515 = bf16[1,4096,4096]{2,1,0} multiply(%convert_element_type.2655, %mul.7514)
  %sharding_constraint.1868 = bf16[1,4096,4096]{2,1,0} copy(%mul.7515)
  %sharding_constraint.1869 = bf16[1,4096,4096]{2,1,0} copy(%sharding_constraint.1868)
  %get-tuple-element.1099 = bf16[512,32,128]{2,1,0} get-tuple-element(%remat2.31), index=8
  %all-gather.346 = bf16[4096,32,128]{2,1,0} all-gather(%get-tuple-element.1099), channel_id=637, replica_groups=[1,8]<=[8], dimensions={0}, use_global_device_ids=true
  %dot.885 = bf16[1,4096,32,128]{3,2,1,0} dot(%sharding_constraint.1869, %all-gather.346), lhs_contracting_dims={2}, rhs_contracting_dims={0}
  %slice.626 = bf16[1,4096,32,64]{3,2,1,0} slice(%dot.885), slice={[0:1], [0:4096], [0:32], [0:64]}
  %get-tuple-element.1100 = s32[1,4096]{1,0} get-tuple-element(%remat2.31), index=12
  %convert_element_type.2658 = f32[1,4096]{1,0} convert(%get-tuple-element.1100)
  %div.1192 = f32[1,4096,1,64]{3,2,1,0} broadcast(%convert_element_type.2658), dimensions={0,1}
  %div.1202 = f32[1,4096,1,64]{3,2,1,0} divide(%div.1192, %div.402)
  %cos.105 = f32[1,4096,1,64]{3,2,1,0} cosine(%div.1202)
  %convert_element_type.2660 = bf16[1,4096,1,64]{3,2,1,0} convert(%cos.105)
  %mul.7517 = bf16[1,4096,64]{2,1,0} reshape(%convert_element_type.2660)
  %mul.7518 = bf16[1,4096,32,64]{3,2,1,0} broadcast(%mul.7517), dimensions={0,1,3}
  %mul.7519 = bf16[1,4096,32,64]{3,2,1,0} multiply(%slice.626, %mul.7518)
  %slice.627 = bf16[1,4096,32,64]{3,2,1,0} slice(%dot.885), slice={[0:1], [0:4096], [0:32], [64:128]}
  %sin.104 = f32[1,4096,1,64]{3,2,1,0} sine(%div.1202)
  %convert_element_type.2661 = bf16[1,4096,1,64]{3,2,1,0} convert(%sin.104)
  %mul.7520 = bf16[1,4096,64]{2,1,0} reshape(%convert_element_type.2661)
  %mul.7521 = bf16[1,4096,32,64]{3,2,1,0} broadcast(%mul.7520), dimensions={0,1,3}
  %mul.7522 = bf16[1,4096,32,64]{3,2,1,0} multiply(%slice.627, %mul.7521)
  %sub.350 = bf16[1,4096,32,64]{3,2,1,0} subtract(%mul.7519, %mul.7522)
  %mul.7525 = bf16[1,4096,32,64]{3,2,1,0} multiply(%slice.627, %mul.7518)
  %mul.7528 = bf16[1,4096,32,64]{3,2,1,0} multiply(%slice.626, %mul.7521)
  %add.2216 = bf16[1,4096,32,64]{3,2,1,0} add(%mul.7525, %mul.7528)
  %concatenate.519 = bf16[1,4096,32,128]{3,2,1,0} concatenate(%sub.350, %add.2216), dimensions={3}
  %sharding_constraint.1870 = bf16[1,4096,32,128]{3,2,1,0} copy(%concatenate.519)
  %get-tuple-element.1101 = bf16[512,8,128]{2,1,0} get-tuple-element(%remat2.31), index=6
  %all-gather.347 = bf16[4096,8,128]{2,1,0} all-gather(%get-tuple-element.1101), channel_id=638, replica_groups=[1,8]<=[8], dimensions={0}, use_global_device_ids=true
  %dot.886 = bf16[1,4096,8,128]{3,2,1,0} dot(%sharding_constraint.1869, %all-gather.347), lhs_contracting_dims={2}, rhs_contracting_dims={0}
  %slice.628 = bf16[1,4096,8,64]{3,2,1,0} slice(%dot.886), slice={[0:1], [0:4096], [0:8], [0:64]}
  %mul.7531 = bf16[1,4096,8,64]{3,2,1,0} broadcast(%mul.7517), dimensions={0,1,3}
  %mul.7532 = bf16[1,4096,8,64]{3,2,1,0} multiply(%slice.628, %mul.7531)
  %slice.629 = bf16[1,4096,8,64]{3,2,1,0} slice(%dot.886), slice={[0:1], [0:4096], [0:8], [64:128]}
  %mul.7534 = bf16[1,4096,8,64]{3,2,1,0} broadcast(%mul.7520), dimensions={0,1,3}
  %mul.7535 = bf16[1,4096,8,64]{3,2,1,0} multiply(%slice.629, %mul.7534)
  %sub.351 = bf16[1,4096,8,64]{3,2,1,0} subtract(%mul.7532, %mul.7535)
  %mul.7538 = bf16[1,4096,8,64]{3,2,1,0} multiply(%slice.629, %mul.7531)
  %mul.7541 = bf16[1,4096,8,64]{3,2,1,0} multiply(%slice.628, %mul.7534)
  %add.2217 = bf16[1,4096,8,64]{3,2,1,0} add(%mul.7538, %mul.7541)
  %concatenate.520 = bf16[1,4096,8,128]{3,2,1,0} concatenate(%sub.351, %add.2217), dimensions={3}
  %sharding_constraint.1872 = bf16[1,4096,8,128]{3,2,1,0} copy(%concatenate.520)
  %get-tuple-element.1102 = bf16[512,8,128]{2,1,0} get-tuple-element(%remat2.31), index=9
  %all-gather.348 = bf16[4096,8,128]{2,1,0} all-gather(%get-tuple-element.1102), channel_id=639, replica_groups=[1,8]<=[8], dimensions={0}, use_global_device_ids=true
  %dot.887 = bf16[1,4096,8,128]{3,2,1,0} dot(%sharding_constraint.1869, %all-gather.348), lhs_contracting_dims={2}, rhs_contracting_dims={0}
  %sharding_constraint.1873 = bf16[1,4096,8,128]{3,2,1,0} copy(%dot.887)
  %get-tuple-element.1103 = s32[1,4096]{1,0} get-tuple-element(%remat2.31), index=11
  %eq.2381 = s32[1,4096,4096]{2,1,0} broadcast(%get-tuple-element.1103), dimensions={0,1}
  %eq.2382 = s32[1,4096,4096]{2,1,0} broadcast(%get-tuple-element.1103), dimensions={0,2}
  %eq.2383 = pred[1,4096,4096]{2,1,0} compare(%eq.2381, %eq.2382), direction=EQ
  %and.189 = pred[1,4096,4096]{2,1,0} and(%eq.2383, %and.64)
  %select_n.593 = f32[1,4096,4096]{2,1,0} select(%and.189, %broadcast_in_dim.516, %broadcast_in_dim.517)
  %ne.118 = pred[1,4096,4096]{2,1,0} compare(%select_n.593, %broadcast_in_dim.516), direction=NE
  %not.116 = pred[1,4096,4096]{2,1,0} not(%ne.118)
  %convert_element_type.2666 = s32[1,4096,4096]{2,1,0} convert(%not.116)
  %reduce.768 = s32[1,4096]{1,0} reduce(%convert_element_type.2666, %constant.1181), dimensions={1}, to_apply=%region_752.19508
  %reduce_sum.5743 = s32[1,1,1,4096]{3,2,1,0} reshape(%reduce.768)
  %slice.630 = s32[1,1,1,1]{3,2,1,0} slice(%reduce_sum.5743), slice={[0:1], [0:1], [0:1], [0:1]}
  %squeeze.52 = s32[1,1]{1,0} reshape(%slice.630)
  %reshape.12720 = s32[1]{0} reshape(%squeeze.52)
  %lt.197 = pred[1]{0} compare(%reshape.12720, %constant.1418), direction=LT
  %select_n.594 = s32[1]{0} select(%lt.197, %broadcast_in_dim.518, %reshape.12720)
  %concatenate.521 = s32[2]{0} concatenate(%constant.1418, %select_n.594), dimensions={0}
  %reduce.769 = s32[1,4096]{1,0} reduce(%convert_element_type.2666, %constant.1181), dimensions={2}, to_apply=%region_753.19517
  %reduce_sum.5744 = s32[1,1,1,4096]{3,2,1,0} reshape(%reduce.769)
  %reduce.770 = s32[1,1]{1,0} reduce(%reduce_sum.5744, %constant.1415), dimensions={3,2}, to_apply=%region_754.19523
  %reshape.12721 = s32[1]{0} reshape(%reduce.770)
  %lt.198 = pred[1]{0} compare(%reshape.12721, %constant.1418), direction=LT
  %select_n.595 = s32[1]{0} select(%lt.198, %broadcast_in_dim.518, %reshape.12721)
  %concatenate.522 = s32[2]{0} concatenate(%constant.1418, %select_n.595), dimensions={0}
  %te_fused_attn_forward_ffi.208 = (bf16[1,4096,32,128]{3,2,1,0}, f32[1,32,4096,1]{3,2,1,0}, u32[2,4]{1,0}, u8[48]{0}) custom-call(%sharding_constraint.1870, %sharding_constraint.1872, %sharding_constraint.1873, %constant.1403, %dynamic-slice.38, /*index=5*/%concatenate.521, %concatenate.522, %constant.1416, %constant.1416, %constant.1416, /*index=10*/%constant.1416, %constant.1416, %constant.1416), custom_call_target="te_fused_attn_forward_ffi", operand_layout_constraints={bf16[1,4096,32,128]{3,2,1,0}, bf16[1,4096,8,128]{3,2,1,0}, bf16[1,4096,8,128]{3,2,1,0}, bf16[0]{0}, u32[2]{0}, s32[2]{0}, s32[2]{0}, f32[0]{0}, f32[0]{0}, f32[0]{0}, f32[0]{0}, f32[0]{0}, f32[0]{0}}, api_version=API_VERSION_TYPED_FFI, backend_config={attn_heads = 32 : i64, bias_batch = 0 : i64, bias_heads = 0 : i64, bias_type = 0 : i64, deterministic = false, dropout_probability = 0.000000e+00 : f64, input_batch = 1 : i64, is_training = true, kv_max_seqlen = 4096 : i64, mask_type = 3 : i64, max_segments_per_seq = 1 : i64, num_gqa_groups = 8 : i64, q_max_seqlen = 4096 : i64, qk_head_dim = 128 : i64, qkv_layout = 9 : i64, scaling_factor = 1.000000e+00 : f64, v_head_dim = 128 : i64, window_size_left = -1 : i64, window_size_right = -1 : i64}
  %get-tuple-element.1104 = bf16[1,4096,32,128]{3,2,1,0} get-tuple-element(%te_fused_attn_forward_ffi.208), index=0
  %sharding_constraint.1875 = bf16[1,4096,32,128]{3,2,1,0} copy(%get-tuple-element.1104)
  %get-tuple-element.1105 = bf16[32,128,512]{2,1,0} get-tuple-element(%remat2.31), index=7
  %all-gather.349 = bf16[32,128,4096]{2,1,0} all-gather(%get-tuple-element.1105), channel_id=640, replica_groups=[1,8]<=[8], dimensions={2}, use_global_device_ids=true
  %dot.888 = bf16[1,4096,4096]{2,1,0} dot(%sharding_constraint.1875, %all-gather.349), lhs_contracting_dims={2,3}, rhs_contracting_dims={0,1}
  %sharding_constraint.1876 = bf16[1,4096,4096]{2,1,0} copy(%dot.888)
  %add.2218 = bf16[1,4096,4096]{2,1,0} add(%sharding_constraint.1867, %sharding_constraint.1876)
  %convert_element_type.2668 = f32[1,4096,4096]{2,1,0} convert(%add.2218)
  %square.109 = f32[1,4096,4096]{2,1,0} multiply(%convert_element_type.2668, %convert_element_type.2668)
  %reduce.771 = f32[1,4096]{1,0} reduce(%square.109, %constant.1360), dimensions={2}, to_apply=%region_755.19538
  %div.1207 = f32[1,4096]{1,0} multiply(%reduce.771, %broadcast.3412)
  %add.2219 = f32[1,4096]{1,0} add(%div.1207, %broadcast.3413)
  %add.2220 = f32[1,4096,1]{2,1,0} reshape(%add.2219)
  %rsqrt.170 = f32[1,4096,1]{2,1,0} rsqrt(%add.2220)
  %mul.7542 = f32[1,4096]{1,0} reshape(%rsqrt.170)
  %mul.7543 = f32[1,4096,4096]{2,1,0} broadcast(%mul.7542), dimensions={0,1}
  %mul.7544 = f32[1,4096,4096]{2,1,0} multiply(%convert_element_type.2668, %mul.7543)
  %convert_element_type.2669 = bf16[1,4096,4096]{2,1,0} convert(%mul.7544)
  %get-tuple-element.1106 = bf16[4096]{0} get-tuple-element(%remat2.31), index=4
  %mul.7545 = bf16[1,4096,4096]{2,1,0} broadcast(%get-tuple-element.1106), dimensions={2}
  %mul.7546 = bf16[1,4096,4096]{2,1,0} multiply(%convert_element_type.2669, %mul.7545)
  %sharding_constraint.1877 = bf16[1,4096,4096]{2,1,0} copy(%mul.7546)
  %get-tuple-element.1107 = bf16[512,8]{1,0} get-tuple-element(%remat2.31), index=0
  %all-gather.350 = bf16[4096,8]{1,0} all-gather(%get-tuple-element.1107), channel_id=641, replica_groups=[1,8]<=[8], dimensions={0}, use_global_device_ids=true
  %dot.889 = bf16[1,4096,8]{2,1,0} dot(%sharding_constraint.1877, %all-gather.350), lhs_contracting_dims={2}, rhs_contracting_dims={0}
  %sharding_constraint.1878 = bf16[1,4096,8]{2,1,0} copy(%dot.889)
  %top_k.156 = bf16[4096,8]{1,0} reshape(%sharding_constraint.1878)
  %top_k.157 = (bf16[4096,2]{1,0}, s32[4096,2]{1,0}) custom-call(%top_k.156), custom_call_target="TopK", called_computations={%compare_greater_than.52.19559.clone}
  %get-tuple-element.1108 = bf16[4096,2]{1,0} get-tuple-element(%top_k.157), index=0
  %get-tuple-element.1109 = s32[4096,2]{1,0} get-tuple-element(%top_k.157), index=1
  %add.2221 = s32[4096,2]{1,0} add(%get-tuple-element.1109, %broadcast.3418)
  %sort.116 = (bf16[4096,2]{1,0}, s32[4096,2]{1,0}) sort(%get-tuple-element.1108, %add.2221), dimensions={1}, is_stable=true, to_apply=%compare-value-and-index.52
  %get-tuple-element.1111 = s32[4096,2]{1,0} get-tuple-element(%sort.116), index=1
  %slice.632 = s32[4096,2]{1,0} slice(%get-tuple-element.1111), slice={[0:4096], [0:2]}
  %top_k.158 = s32[1,4096,2]{2,1,0} reshape(%slice.632)
  %lt.199 = pred[1,4096,2]{2,1,0} compare(%top_k.158, %broadcast.3419), direction=LT
  %add.2222 = s32[1,4096,2]{2,1,0} add(%top_k.158, %broadcast.3420)
  %select_n.596 = s32[1,4096,2]{2,1,0} select(%lt.199, %add.2222, %top_k.158)
  %broadcast_in_dim.737 = s32[1,4096,2,1]{3,2,1,0} reshape(%select_n.596)
  %concatenate.523 = s32[1,4096,2,3]{3,2,1,0} concatenate(%add.1356, %iota.2711, %broadcast_in_dim.737), dimensions={3}
  %subtract.178 = s32[1,4096,2,3]{3,2,1,0} subtract(%concatenate.523, %broadcast.3428)
  %scatter.253 = u32[1,4096,8]{2,1,0} scatter(%dynamic-slice.43, %subtract.178, %add.1401), update_window_dims={}, inserted_window_dims={0,1,2}, scatter_dims_to_operand_dims={0,1,2}, index_vector_dim=3, to_apply=%region_756.19595.clone
  %gather.72 = u32[1,4096,2]{2,1,0} gather(%scatter.253, %subtract.178), offset_dims={}, collapsed_slice_dims={0,1,2}, start_index_map={0,1,2}, index_vector_dim=3, slice_sizes={1,1,1}
  %eq.2385 = pred[1,4096,2]{2,1,0} compare(%add.1401, %gather.72), direction=EQ
  %get-tuple-element.1110 = bf16[4096,2]{1,0} get-tuple-element(%sort.116), index=0
  %slice.631 = bf16[4096,2]{1,0} slice(%get-tuple-element.1110), slice={[0:4096], [0:2]}
  %convert_element_type.2670 = f32[4096,2]{1,0} convert(%slice.631)
  %convert_element_type.2671 = f32[1,4096,2]{2,1,0} reshape(%convert_element_type.2670)
  %reduce.772 = f32[4096]{0} reduce(%convert_element_type.2670, %constant.1450), dimensions={1}, to_apply=%region_757.19604
  %sub.352 = f32[1,4096]{1,0} reshape(%reduce.772)
  %sub.353 = f32[1,4096,2]{2,1,0} broadcast(%sub.352), dimensions={0,1}
  %sub.354 = f32[1,4096,2]{2,1,0} subtract(%convert_element_type.2671, %sub.353)
  %exp.231 = f32[1,4096,2]{2,1,0} exponential(%sub.354)
  %reduce.773 = f32[1,4096]{1,0} reduce(%exp.231, %constant.1360), dimensions={2}, to_apply=%region_758.19613
  %div.1208 = f32[1,4096,2]{2,1,0} broadcast(%reduce.773), dimensions={0,1}
  %div.1209 = f32[1,4096,2]{2,1,0} divide(%exp.231, %div.1208)
  %convert_element_type.2672 = bf16[1,4096,2]{2,1,0} convert(%div.1209)
  %select_n.597 = bf16[1,4096,2]{2,1,0} select(%eq.2385, %convert_element_type.2672, %broadcast.3427)
  %scatter.254 = bf16[1,4096,8]{2,1,0} scatter(%broadcast.3379, %subtract.178, %select_n.597), update_window_dims={}, inserted_window_dims={0,1,2}, scatter_dims_to_operand_dims={0,1,2}, index_vector_dim=3, to_apply=%region_759.19622.clone
  %eq.2387 = s32[1,4096,2,8]{3,2,1,0} broadcast(%top_k.158), dimensions={0,1,2}
  %iota.2722 = s32[1,4096,2,8]{3,2,1,0} iota(), iota_dimension=3
  %eq.2388 = pred[1,4096,2,8]{3,2,1,0} compare(%eq.2387, %iota.2722), direction=EQ
  %convert_element_type.2673 = s32[1,4096,2,8]{3,2,1,0} convert(%eq.2388)
  %reshape.12755 = s32[1,8192,8]{2,1,0} reshape(%convert_element_type.2673)
  %sharding_constraint.1879 = s32[1,8192,8]{2,1,0} copy(%reshape.12755)
  %reduce-window.52 = s32[1,8192,8]{2,1,0} reduce-window(%sharding_constraint.1879, %constant.1181), window={size=1x8192x1 pad=0_0x8191_0x0_0}, to_apply=%region_760.19634
  %reshape.12757 = s32[1,4096,2,8]{3,2,1,0} reshape(%reduce-window.52)
  %sharding_constraint.1880 = s32[1,4096,2,8]{3,2,1,0} copy(%reshape.12757)
  %le.146 = pred[1,4096,2,8]{3,2,1,0} compare(%sharding_constraint.1880, %broadcast.3429), direction=LE
  %mul.7547 = s32[1,4096,2,8]{3,2,1,0} select(%le.146, %convert_element_type.2673, %broadcast.3430)
  %reduce.774 = s32[1,4096,8]{2,1,0} reduce(%mul.7547, %constant.1181), dimensions={2}, to_apply=%region_761.19643
  %convert_element_type.2675 = bf16[1,4096,8]{2,1,0} convert(%reduce.774)
  %mul.7548 = bf16[1,4096,8]{2,1,0} multiply(%scatter.254, %convert_element_type.2675)
  %mul.7549 = bf16[1,4096,8,1025]{3,2,1,0} broadcast(%mul.7548), dimensions={0,1,2}
  %mul.7551 = s32[1,8192,8]{2,1,0} multiply(%sharding_constraint.1879, %reduce-window.52)
  %reshape.12758 = s32[1,4096,2,8]{3,2,1,0} reshape(%mul.7551)
  %reduce.775 = s32[1,4096,8]{2,1,0} reduce(%reshape.12758, %constant.1181), dimensions={2}, to_apply=%region_762.19653
  %mul.7552 = s32[1,4096,8]{2,1,0} multiply(%reduce.775, %reduce.774)
  %eq.2389 = s32[1,4096,8,1025]{3,2,1,0} broadcast(%mul.7552), dimensions={0,1,2}
  %iota.2723 = s32[1,4096,8,1025]{3,2,1,0} iota(), iota_dimension=3
  %eq.2390 = pred[1,4096,8,1025]{3,2,1,0} compare(%eq.2389, %iota.2723), direction=EQ
  %convert_element_type.2676 = s32[1,4096,8,1025]{3,2,1,0} convert(%eq.2390)
  %convert_element_type.2677 = bf16[1,4096,8,1025]{3,2,1,0} convert(%convert_element_type.2676)
  %mul.7553 = bf16[1,4096,8,1025]{3,2,1,0} multiply(%mul.7549, %convert_element_type.2677)
  %slice.633 = bf16[1,4096,8,1024]{3,2,1,0} slice(%mul.7553), slice={[0:1], [0:4096], [0:8], [1:1025]}
  %convert_element_type.2678 = pred[1,4096,8,1024]{3,2,1,0} compare(%slice.633, %broadcast.3431), direction=NE
  %sharding_constraint.1882 = pred[1,4096,8,1024]{3,2,1,0} copy(%convert_element_type.2678)
  %dot_general.108 = bf16[1,4096,8,1024]{3,2,1,0} convert(%sharding_constraint.1882)
  %dot.890 = bf16[1,8,1024,4096]{3,2,1,0} dot(%dot_general.108, %sharding_constraint.1877), lhs_batch_dims={0}, lhs_contracting_dims={1}, rhs_batch_dims={0}, rhs_contracting_dims={1}
  %reshape.12762 = bf16[1,8,1,1024,4096]{4,3,2,1,0} reshape(%dot.890)
  %all-to-all.144 = bf16[1,8,1,1024,4096]{4,3,2,1,0} all-to-all(%reshape.12762), channel_id=645, replica_groups=[1,8]<=[8], dimensions={1}
  %transpose.241 = bf16[8,1,1,1024,4096]{4,3,2,0,1} transpose(%all-to-all.144), dimensions={1,0,2,3,4}
  %reshape.12763 = bf16[8,1,1024,4096]{3,2,1,0} reshape(%transpose.241)
  %transpose.242 = bf16[1,8,1024,4096]{3,2,0,1} transpose(%reshape.12763), dimensions={1,0,2,3}
  %sharding_constraint.1883 = bf16[1,8,1024,4096]{3,2,0,1} copy(%transpose.242)
  %get-tuple-element.1114 = bf16[1,4096,14336]{2,1,0} get-tuple-element(%remat2.31), index=1
  %sharding_constraint.1884 = bf16[1,4096,14336]{2,1,0} copy(%get-tuple-element.1114)
  %dot.891 = bf16[1,8,1024,14336]{3,2,1,0} dot(%sharding_constraint.1883, %sharding_constraint.1884), lhs_batch_dims={0}, lhs_contracting_dims={3}, rhs_batch_dims={0}, rhs_contracting_dims={1}
  %sharding_constraint.1885 = bf16[1,8,1024,14336]{3,2,1,0} copy(%dot.891)
  %neg.270 = bf16[1,8,1024,14336]{3,2,1,0} negate(%sharding_constraint.1885)
  %exp.232 = bf16[1,8,1024,14336]{3,2,1,0} exponential(%neg.270)
  %add.2227 = bf16[1,8,1024,14336]{3,2,1,0} add(%exp.232, %jit_silu_.0)
  %div.1210 = bf16[1,8,1024,14336]{3,2,1,0} divide(%jit_silu_.0, %add.2227)
  %mul.7554 = bf16[1,8,1024,14336]{3,2,1,0} multiply(%sharding_constraint.1885, %div.1210)
  %sharding_constraint.1886 = bf16[1,4096,4096]{2,1,0} copy(%sharding_constraint.1866)
  %sharding_constraint.1887 = bf16[1,4096,8,1024]{3,2,1,0} copy(%slice.633)
  %dot.892 = bf16[1,4096,8,1024]{3,2,1,0} dot(%sharding_constraint.1886, %sharding_constraint.1887), lhs_batch_dims={0}, lhs_contracting_dims={1}, rhs_batch_dims={0}, rhs_contracting_dims={1}
  %reshape.12766 = bf16[1,4096,8,1,1024]{4,3,2,1,0} reshape(%dot.892)
  %all-to-all.145 = bf16[1,4096,8,1,1024]{4,3,2,1,0} all-to-all(%reshape.12766), channel_id=646, replica_groups=[1,8]<=[8], dimensions={2}
  %transpose.243 = bf16[8,1,4096,1,1024]{4,3,0,2,1} transpose(%all-to-all.145), dimensions={2,0,1,3,4}
  %reshape.12767 = bf16[8,4096,1,1024]{3,2,1,0} reshape(%transpose.243)
  %transpose.244 = bf16[1,8,1024,4096]{2,0,3,1} transpose(%reshape.12767), dimensions={2,0,3,1}
  %sharding_constraint.1888 = bf16[1,8,1024,4096]{2,0,3,1} copy(%transpose.244)
  %get-tuple-element.1115 = bf16[1,14336,4096]{2,1,0} get-tuple-element(%remat2.31), index=3
  %sharding_constraint.1889 = bf16[1,14336,4096]{2,1,0} copy(%get-tuple-element.1115)
  %dot.893 = bf16[1,8,1024,14336]{3,2,1,0} dot(%sharding_constraint.1888, %sharding_constraint.1889), lhs_batch_dims={0}, lhs_contracting_dims={3}, rhs_batch_dims={0}, rhs_contracting_dims={2}
  %mul.7555 = bf16[1,8,1024,14336]{3,2,1,0} multiply(%mul.7554, %dot.893)
  %sharding_constraint.1890 = bf16[1,8,1024,14336]{3,2,1,0} copy(%mul.7555)
  %get-tuple-element.1116 = bf16[1,4096,14336]{2,1,0} get-tuple-element(%remat2.31), index=2
  %sharding_constraint.1891 = bf16[1,4096,14336]{2,1,0} copy(%get-tuple-element.1116)
  %dot.894 = bf16[1,8,1024,4096]{3,2,1,0} dot(%sharding_constraint.1890, %sharding_constraint.1891), lhs_batch_dims={0}, lhs_contracting_dims={3}, rhs_batch_dims={0}, rhs_contracting_dims={2}
  %dot.895 = bf16[1,8,1024,14336]{3,2,1,0} dot(%sharding_constraint.1883, %sharding_constraint.1891), lhs_batch_dims={0}, lhs_contracting_dims={3}, rhs_batch_dims={0}, rhs_contracting_dims={1}
  %sharding_constraint.1892 = bf16[1,8,1024,14336]{3,2,1,0} copy(%dot.895)
  %mul.7556 = bf16[1,8,1024,14336]{3,2,1,0} multiply(%dot.893, %sharding_constraint.1892)
  %mul.7559 = bf16[1,8,1024,14336]{3,2,1,0} multiply(%mul.7556, %div.1210)
  %mul.7560 = bf16[1,8,1024,14336]{3,2,1,0} multiply(%sharding_constraint.1885, %mul.7556)
  %sub.355 = bf16[1,8,1024,14336]{3,2,1,0} subtract(%jit_silu_.0, %div.1210)
  %mul.7561 = bf16[1,8,1024,14336]{3,2,1,0} multiply(%div.1210, %sub.355)
  %mul.7562 = bf16[1,8,1024,14336]{3,2,1,0} multiply(%mul.7560, %mul.7561)
  %add_any.347 = bf16[1,8,1024,14336]{3,2,1,0} add(%mul.7559, %mul.7562)
  %sharding_constraint.1893 = bf16[1,8,1024,14336]{3,2,1,0} copy(%add_any.347)
  %dot.896 = bf16[1,8,1024,4096]{3,2,1,0} dot(%sharding_constraint.1893, %sharding_constraint.1884), lhs_batch_dims={0}, lhs_contracting_dims={3}, rhs_batch_dims={0}, rhs_contracting_dims={2}
  %add_any.348 = bf16[1,8,1024,4096]{3,2,1,0} add(%dot.894, %dot.896)
  %sharding_constraint.1894 = bf16[1,8,1024,4096]{3,2,1,0} copy(%add_any.348)
  %transpose.245 = bf16[8,1,1024,4096]{3,2,0,1} transpose(%sharding_constraint.1894), dimensions={1,0,2,3}
  %reshape.12770 = bf16[8,1,1,1024,4096]{4,3,2,1,0} reshape(%transpose.245)
  %all-to-all.146 = bf16[8,1,1,1024,4096]{4,3,2,1,0} all-to-all(%reshape.12770), channel_id=647, replica_groups=[1,8]<=[8], dimensions={0}
  %transpose.246 = bf16[1,8,1,1024,4096]{4,3,2,0,1} transpose(%all-to-all.146), dimensions={1,0,2,3,4}
  %reshape.12771 = bf16[1,8,1024,4096]{3,2,1,0} reshape(%transpose.246)
  %dot.897 = bf16[1,4096,4096]{2,1,0} dot(%dot_general.108, %reshape.12771), lhs_batch_dims={0}, lhs_contracting_dims={2,3}, rhs_batch_dims={0}, rhs_contracting_dims={1,2}
  %reshape.12773 = s32[1,4096,2,1]{3,2,1,0} reshape(%slice.632)
  %ge.20 = pred[1,4096,2,3]{3,2,1,0} compare(%concatenate.523, %broadcast.3629), direction=GE
  %le.148 = pred[1,4096,2,3]{3,2,1,0} compare(%concatenate.523, %le.67), direction=LE
  %and.190 = pred[1,4096,2,3]{3,2,1,0} and(%ge.20, %le.148)
  %reduce.776 = pred[1,4096,2]{2,1,0} reduce(%and.190, %constant.5574), dimensions={3}, to_apply=%region_763.19710
  %mul.7563 = bf16[1,8,1024,14336]{3,2,1,0} multiply(%mul.7554, %sharding_constraint.1892)
  %dot.898 = bf16[1,8,1024,4096]{3,2,1,0} dot(%mul.7563, %sharding_constraint.1889), lhs_batch_dims={0}, lhs_contracting_dims={3}, rhs_batch_dims={0}, rhs_contracting_dims={1}
  %sharding_constraint.1895 = bf16[1,8,1024,4096]{3,2,1,0} copy(%dot.898)
  %reshape.12780 = bf16[1,8,1,1024,4096]{4,3,2,1,0} reshape(%sharding_constraint.1895)
  %all-to-all.147 = bf16[1,8,1,1024,4096]{4,3,2,1,0} all-to-all(%reshape.12780), channel_id=648, replica_groups=[1,8]<=[8], dimensions={1}
  %transpose.247 = bf16[8,1,1,1024,4096]{4,3,2,0,1} transpose(%all-to-all.147), dimensions={1,0,2,3,4}
  %reshape.12781 = bf16[8,1,1024,4096]{3,2,1,0} reshape(%transpose.247)
  %dot.899 = bf16[1,4096,8,1024]{3,2,1,0} dot(%sharding_constraint.1886, %reshape.12781), lhs_batch_dims={0}, lhs_contracting_dims={2}, rhs_batch_dims={1}, rhs_contracting_dims={3}
  %sharding_constraint.1896 = bf16[1,4096,8,1024]{3,2,1,0} copy(%dot.899)
  %pad.20 = bf16[1,4096,8,1025]{3,2,1,0} pad(%sharding_constraint.1896, %constant.1190), padding=0_0x0_0x0_0x1_0
  %mul.7564 = bf16[1,4096,8,1025]{3,2,1,0} multiply(%pad.20, %convert_element_type.2677)
  %reduce.777 = bf16[1,4096,8]{2,1,0} reduce(%mul.7564, %constant.1190), dimensions={3}, to_apply=%region_764.19722
  %mul.7566 = bf16[1,4096,8]{2,1,0} multiply(%reduce.777, %convert_element_type.2675)
  %gather.73 = bf16[1,4096,2]{2,1,0} gather(%mul.7566, %subtract.178), offset_dims={}, collapsed_slice_dims={0,1,2}, start_index_map={0,1,2}, index_vector_dim=3, slice_sizes={1,1,1}
  %select_n.598 = bf16[1,4096,2]{2,1,0} select(%reduce.776, %gather.73, %broadcast.3427)
  %select_n.599 = bf16[1,4096,2]{2,1,0} select(%eq.2385, %select_n.598, %broadcast.3427)
  %convert_element_type.2679 = f32[1,4096,2]{2,1,0} convert(%select_n.599)
  %div.1212 = f32[1,4096,2]{2,1,0} divide(%convert_element_type.2679, %div.1208)
  %mul.7567 = f32[1,4096]{1,0} multiply(%reduce.773, %reduce.773)
  %div.1213 = f32[1,4096]{1,0} divide(%add.1847, %mul.7567)
  %mul.7568 = f32[1,4096,2]{2,1,0} broadcast(%div.1213), dimensions={0,1}
  %mul.7573 = f32[1,4096,2]{2,1,0} multiply(%convert_element_type.2679, %mul.7568)
  %mul.7575 = f32[1,4096,2]{2,1,0} multiply(%mul.7573, %exp.231)
  %reduce.778 = f32[1,4096]{1,0} reduce(%mul.7575, %constant.1360), dimensions={2}, to_apply=%region_765.19739
  %neg.271 = f32[1,4096]{1,0} negate(%reduce.778)
  %broadcast_in_dim.738 = f32[1,4096,2]{2,1,0} broadcast(%neg.271), dimensions={0,1}
  %add_any.349 = f32[1,4096,2]{2,1,0} add(%div.1212, %broadcast_in_dim.738)
  %mul.7576 = f32[1,4096,2]{2,1,0} multiply(%add_any.349, %exp.231)
  %convert_element_type.2680 = bf16[1,4096,2]{2,1,0} convert(%mul.7576)
  %scatter.255 = bf16[1,4096,8]{2,1,0} scatter(%broadcast.3379, %reshape.12773, %convert_element_type.2680), update_window_dims={}, inserted_window_dims={2}, scatter_dims_to_operand_dims={2}, input_batching_dims={0,1}, scatter_indices_batching_dims={0,1}, index_vector_dim=3, to_apply=%region_766.19749.clone
  %sharding_constraint.1897 = bf16[1,4096,8]{2,1,0} copy(%scatter.255)
  %dot.900 = bf16[1,4096,4096]{2,1,0} dot(%sharding_constraint.1897, %all-gather.350), lhs_contracting_dims={2}, rhs_contracting_dims={1}
  %add_any.350 = bf16[1,4096,4096]{2,1,0} add(%dot.897, %dot.900)
  %sharding_constraint.1898 = bf16[1,4096,4096]{2,1,0} copy(%add_any.350)
  %mul.7578 = bf16[1,4096,4096]{2,1,0} multiply(%sharding_constraint.1898, %mul.7545)
  %convert_element_type.2681 = f32[1,4096,4096]{2,1,0} convert(%mul.7578)
  %mul.7584 = f32[1,4096,4096]{2,1,0} multiply(%convert_element_type.2681, %mul.7543)
  %mul.7585 = f32[1,4096,4096]{2,1,0} multiply(%convert_element_type.2668, %convert_element_type.2681)
  %reduce.779 = f32[1,4096]{1,0} reduce(%mul.7585, %constant.1360), dimensions={2}, to_apply=%region_767.19765
  %reshape.12793 = f32[1,4096,1]{2,1,0} reshape(%reduce.779)
  %div.1214 = f32[1,4096,1]{2,1,0} divide(%rsqrt.170, %add.2220)
  %mul.7586 = f32[1,4096,1]{2,1,0} multiply(%div.1214, %broadcast.3620)
  %mul.7587 = f32[1,4096,1]{2,1,0} multiply(%reshape.12793, %mul.7586)
  %mul.7589 = f32[1,4096,1]{2,1,0} multiply(%mul.7587, %mul.4455)
  %mul.7591 = f32[1,4096]{1,0} reshape(%mul.7589)
  %mul.7592 = f32[1,4096,4096]{2,1,0} broadcast(%mul.7591), dimensions={0,1}
  %mul.7593 = f32[1,4096,4096]{2,1,0} multiply(%convert_element_type.2668, %mul.7592)
  %add_any.351 = f32[1,4096,4096]{2,1,0} add(%mul.7584, %mul.7593)
  %convert_element_type.2682 = bf16[1,4096,4096]{2,1,0} convert(%add_any.351)
  %add_any.352 = bf16[1,4096,4096]{2,1,0} add(%sharding_constraint.1866, %convert_element_type.2682)
  %get-tuple-element.1117 = f32[1,32,4096,1]{3,2,1,0} get-tuple-element(%te_fused_attn_forward_ffi.208), index=1
  %get-tuple-element.1118 = u32[2,4]{1,0} get-tuple-element(%te_fused_attn_forward_ffi.208), index=2
  %sharding_constraint.1899 = u32[2,4]{1,0} copy(%get-tuple-element.1118)
  %sharding_constraint.1900 = bf16[1,4096,4096]{2,1,0} copy(%add_any.352)
  %dot.901 = bf16[1,4096,32,128]{3,2,1,0} dot(%sharding_constraint.1900, %all-gather.349), lhs_contracting_dims={2}, rhs_contracting_dims={2}
  %sharding_constraint.1901 = bf16[1,4096,32,128]{3,2,1,0} copy(%dot.901)
  %te_fused_attn_backward_ffi.100 = (bf16[1,4096,32,128]{3,2,1,0}, bf16[1,4096,8,128]{3,2,1,0}, bf16[1,4096,8,128]{3,2,1,0}, bf16[0]{0}, u8[134742064]{0}) custom-call(%sharding_constraint.1870, %sharding_constraint.1872, %sharding_constraint.1873, %constant.1403, %get-tuple-element.1117, /*index=5*/%sharding_constraint.1899, %get-tuple-element.1104, %sharding_constraint.1901, %concatenate.521, %concatenate.522, /*index=10*/%constant.1416, %constant.1416, %constant.1416, %constant.1416, %constant.1416, /*index=15*/%constant.1416), custom_call_target="te_fused_attn_backward_ffi", operand_layout_constraints={bf16[1,4096,32,128]{3,2,1,0}, bf16[1,4096,8,128]{3,2,1,0}, bf16[1,4096,8,128]{3,2,1,0}, bf16[0]{0}, f32[1,32,4096,1]{3,2,1,0}, u32[2,4]{1,0}, bf16[1,4096,32,128]{3,2,1,0}, bf16[1,4096,32,128]{3,2,1,0}, s32[2]{0}, s32[2]{0}, f32[0]{0}, f32[0]{0}, f32[0]{0}, f32[0]{0}, f32[0]{0}, f32[0]{0}}, api_version=API_VERSION_TYPED_FFI, backend_config={attn_heads = 32 : i64, bias_batch = 0 : i64, bias_heads = 0 : i64, bias_type = 0 : i64, deterministic = false, dropout_probability = 0.000000e+00 : f64, input_batch = 1 : i64, is_training = true, kv_max_seqlen = 4096 : i64, mask_type = 3 : i64, max_segments_per_seq = 1 : i64, num_gqa_groups = 8 : i64, q_max_seqlen = 4096 : i64, qk_head_dim = 128 : i64, qkv_layout = 9 : i64, scaling_factor = 1.000000e+00 : f64, v_head_dim = 128 : i64, window_size_left = -1 : i64, window_size_right = -1 : i64}
  %get-tuple-element.1119 = bf16[1,4096,8,128]{3,2,1,0} get-tuple-element(%te_fused_attn_backward_ffi.100), index=2
  %sharding_constraint.1902 = bf16[1,4096,8,128]{3,2,1,0} copy(%get-tuple-element.1119)
  %dot.902 = bf16[1,4096,4096]{2,1,0} dot(%sharding_constraint.1902, %all-gather.348), lhs_contracting_dims={2,3}, rhs_contracting_dims={1,2}
  %get-tuple-element.1120 = bf16[1,4096,8,128]{3,2,1,0} get-tuple-element(%te_fused_attn_backward_ffi.100), index=1
  %sharding_constraint.1903 = bf16[1,4096,8,128]{3,2,1,0} copy(%get-tuple-element.1120)
  %slice.634 = bf16[1,4096,8,64]{3,2,1,0} slice(%sharding_constraint.1903), slice={[0:1], [0:4096], [0:8], [64:128]}
  %mul.7597 = bf16[1,4096,8,64]{3,2,1,0} multiply(%slice.634, %mul.7534)
  %slice.635 = bf16[1,4096,8,64]{3,2,1,0} slice(%sharding_constraint.1903), slice={[0:1], [0:4096], [0:8], [0:64]}
  %mul.7600 = bf16[1,4096,8,64]{3,2,1,0} multiply(%slice.635, %mul.7531)
  %add_any.353 = bf16[1,4096,8,64]{3,2,1,0} add(%mul.7597, %mul.7600)
  %mul.7603 = bf16[1,4096,8,64]{3,2,1,0} multiply(%slice.634, %mul.7531)
  %neg.272 = bf16[1,4096,8,64]{3,2,1,0} negate(%slice.635)
  %mul.7606 = bf16[1,4096,8,64]{3,2,1,0} multiply(%neg.272, %mul.7534)
  %add_any.354 = bf16[1,4096,8,64]{3,2,1,0} add(%mul.7603, %mul.7606)
  %concatenate.530 = bf16[1,4096,8,128]{3,2,1,0} concatenate(%add_any.353, %add_any.354), dimensions={3}
  %dot.903 = bf16[1,4096,4096]{2,1,0} dot(%concatenate.530, %all-gather.347), lhs_contracting_dims={2,3}, rhs_contracting_dims={1,2}
  %add_any.355 = bf16[1,4096,4096]{2,1,0} add(%dot.902, %dot.903)
  %sharding_constraint.1904 = bf16[1,4096,4096]{2,1,0} copy(%add_any.355)
  %get-tuple-element.1121 = bf16[1,4096,32,128]{3,2,1,0} get-tuple-element(%te_fused_attn_backward_ffi.100), index=0
  %sharding_constraint.1905 = bf16[1,4096,32,128]{3,2,1,0} copy(%get-tuple-element.1121)
  %slice.636 = bf16[1,4096,32,64]{3,2,1,0} slice(%sharding_constraint.1905), slice={[0:1], [0:4096], [0:32], [64:128]}
  %mul.7618 = bf16[1,4096,32,64]{3,2,1,0} multiply(%slice.636, %mul.7521)
  %slice.637 = bf16[1,4096,32,64]{3,2,1,0} slice(%sharding_constraint.1905), slice={[0:1], [0:4096], [0:32], [0:64]}
  %mul.7621 = bf16[1,4096,32,64]{3,2,1,0} multiply(%slice.637, %mul.7518)
  %add_any.356 = bf16[1,4096,32,64]{3,2,1,0} add(%mul.7618, %mul.7621)
  %mul.7624 = bf16[1,4096,32,64]{3,2,1,0} multiply(%slice.636, %mul.7518)
  %neg.273 = bf16[1,4096,32,64]{3,2,1,0} negate(%slice.637)
  %mul.7628 = bf16[1,4096,32,64]{3,2,1,0} multiply(%neg.273, %mul.7521)
  %add_any.357 = bf16[1,4096,32,64]{3,2,1,0} add(%mul.7624, %mul.7628)
  %concatenate.531 = bf16[1,4096,32,128]{3,2,1,0} concatenate(%add_any.356, %add_any.357), dimensions={3}
  %dot.904 = bf16[1,4096,4096]{2,1,0} dot(%concatenate.531, %all-gather.346), lhs_contracting_dims={2,3}, rhs_contracting_dims={1,2}
  %sharding_constraint.1906 = bf16[1,4096,4096]{2,1,0} copy(%dot.904)
  %add_any.358 = bf16[1,4096,4096]{2,1,0} add(%sharding_constraint.1904, %sharding_constraint.1906)
  %sharding_constraint.1908 = bf16[1,4096,4096]{2,1,0} copy(%add_any.358)
  %mul.7630 = bf16[1,4096,4096]{2,1,0} multiply(%sharding_constraint.1908, %mul.7514)
  %convert_element_type.2683 = f32[1,4096,4096]{2,1,0} convert(%mul.7630)
  %mul.7633 = f32[1,4096,4096]{2,1,0} multiply(%convert_element_type.2683, %mul.7512)
  %mul.7634 = f32[1,4096,4096]{2,1,0} multiply(%convert_element_type.2654, %convert_element_type.2683)
  %reduce.780 = f32[1,4096]{1,0} reduce(%mul.7634, %constant.1360), dimensions={2}, to_apply=%region_768.19844
  %reshape.12800 = f32[1,4096,1]{2,1,0} reshape(%reduce.780)
  %div.1215 = f32[1,4096,1]{2,1,0} divide(%rsqrt.169, %add.2215)
  %mul.7637 = f32[1,4096,1]{2,1,0} multiply(%div.1215, %broadcast.3620)
  %mul.7640 = f32[1,4096,1]{2,1,0} multiply(%reshape.12800, %mul.7637)
  %mul.7641 = f32[1,4096,1]{2,1,0} multiply(%mul.7640, %mul.4455)
  %mul.7642 = f32[1,4096]{1,0} reshape(%mul.7641)
  %mul.7643 = f32[1,4096,4096]{2,1,0} broadcast(%mul.7642), dimensions={0,1}
  %mul.7644 = f32[1,4096,4096]{2,1,0} multiply(%convert_element_type.2654, %mul.7643)
  %add_any.359 = f32[1,4096,4096]{2,1,0} add(%mul.7633, %mul.7644)
  %convert_element_type.2684 = bf16[1,4096,4096]{2,1,0} convert(%add_any.359)
  %add_any.360 = bf16[1,4096,4096]{2,1,0} add(%add_any.352, %convert_element_type.2684)
  %sharding_constraint.1910 = bf16[1,4096,4096]{2,1,0} copy(%add_any.360)
  %tuple.307 = (bf16[512,8]{1,0}, bf16[1,4096,14336]{2,1,0}, bf16[1,4096,14336]{2,1,0}, bf16[1,14336,4096]{2,1,0}, bf16[4096]{0}, /*index=5*/bf16[4096]{0}, bf16[512,8,128]{2,1,0}, bf16[32,128,512]{2,1,0}, bf16[512,32,128]{2,1,0}, bf16[512,8,128]{2,1,0}, /*index=10*/bf16[1,4096,4096]{2,1,0}, s32[1,4096]{1,0}, s32[1,4096]{1,0}, bf16[1,4096,4096]{2,1,0}) tuple(%param.113, %param.114, %param.115, %param.116, %param.112, /*index=5*/%param.107, %param.109, %param.111, %param.108, %param.110, /*index=10*/%sharding_constraint.402, %param.10, %param.7, %sharding_constraint.1910)
  %remat2.32 = (bf16[512,8]{1,0}, bf16[1,4096,14336]{2,1,0}, bf16[1,4096,14336]{2,1,0}, bf16[1,14336,4096]{2,1,0}, bf16[4096]{0}, /*index=5*/bf16[4096]{0}, bf16[512,8,128]{2,1,0}, bf16[32,128,512]{2,1,0}, bf16[512,32,128]{2,1,0}, bf16[512,8,128]{2,1,0}, /*index=10*/bf16[1,4096,4096]{2,1,0}, s32[1,4096]{1,0}, s32[1,4096]{1,0}, bf16[1,4096,4096]{2,1,0}) opt-barrier(%tuple.307)
  %get-tuple-element.1122 = bf16[1,4096,4096]{2,1,0} get-tuple-element(%remat2.32), index=13
  %sharding_constraint.1911 = bf16[1,4096,4096]{2,1,0} copy(%get-tuple-element.1122)
  %iota.2728 = s32[1,4096,2,1]{3,2,1,0} iota(), iota_dimension=1
  %get-tuple-element.1123 = bf16[1,4096,4096]{2,1,0} get-tuple-element(%remat2.32), index=10
  %sharding_constraint.1912 = bf16[1,4096,4096]{2,1,0} copy(%get-tuple-element.1123)
  %convert_element_type.2686 = f32[1,4096,4096]{2,1,0} convert(%sharding_constraint.1912)
  %square.110 = f32[1,4096,4096]{2,1,0} multiply(%convert_element_type.2686, %convert_element_type.2686)
  %reduce.781 = f32[1,4096]{1,0} reduce(%square.110, %constant.1360), dimensions={2}, to_apply=%region_769.19886
  %div.1216 = f32[1,4096]{1,0} multiply(%reduce.781, %broadcast.3412)
  %add.2232 = f32[1,4096]{1,0} add(%div.1216, %broadcast.3413)
  %add.2233 = f32[1,4096,1]{2,1,0} reshape(%add.2232)
  %rsqrt.171 = f32[1,4096,1]{2,1,0} rsqrt(%add.2233)
  %mul.7653 = f32[1,4096]{1,0} reshape(%rsqrt.171)
  %mul.7664 = f32[1,4096,4096]{2,1,0} broadcast(%mul.7653), dimensions={0,1}
  %mul.7671 = f32[1,4096,4096]{2,1,0} multiply(%convert_element_type.2686, %mul.7664)
  %convert_element_type.2687 = bf16[1,4096,4096]{2,1,0} convert(%mul.7671)
  %get-tuple-element.1124 = bf16[4096]{0} get-tuple-element(%remat2.32), index=5
  %mul.7672 = bf16[1,4096,4096]{2,1,0} broadcast(%get-tuple-element.1124), dimensions={2}
  %mul.7673 = bf16[1,4096,4096]{2,1,0} multiply(%convert_element_type.2687, %mul.7672)
  %sharding_constraint.1915 = bf16[1,4096,4096]{2,1,0} copy(%mul.7673)
  %sharding_constraint.1917 = bf16[1,4096,4096]{2,1,0} copy(%sharding_constraint.1915)
  %get-tuple-element.1125 = bf16[512,32,128]{2,1,0} get-tuple-element(%remat2.32), index=8
  %all-gather.352 = bf16[4096,32,128]{2,1,0} all-gather(%get-tuple-element.1125), channel_id=651, replica_groups=[1,8]<=[8], dimensions={0}, use_global_device_ids=true
  %dot.905 = bf16[1,4096,32,128]{3,2,1,0} dot(%sharding_constraint.1917, %all-gather.352), lhs_contracting_dims={2}, rhs_contracting_dims={0}
  %slice.638 = bf16[1,4096,32,64]{3,2,1,0} slice(%dot.905), slice={[0:1], [0:4096], [0:32], [0:64]}
  %get-tuple-element.1126 = s32[1,4096]{1,0} get-tuple-element(%remat2.32), index=12
  %convert_element_type.2688 = f32[1,4096]{1,0} convert(%get-tuple-element.1126)
  %div.1217 = f32[1,4096,1,64]{3,2,1,0} broadcast(%convert_element_type.2688), dimensions={0,1}
  %div.1220 = f32[1,4096,1,64]{3,2,1,0} divide(%div.1217, %div.402)
  %cos.107 = f32[1,4096,1,64]{3,2,1,0} cosine(%div.1220)
  %convert_element_type.2690 = bf16[1,4096,1,64]{3,2,1,0} convert(%cos.107)
  %mul.7675 = bf16[1,4096,64]{2,1,0} reshape(%convert_element_type.2690)
  %mul.7676 = bf16[1,4096,32,64]{3,2,1,0} broadcast(%mul.7675), dimensions={0,1,3}
  %mul.7677 = bf16[1,4096,32,64]{3,2,1,0} multiply(%slice.638, %mul.7676)
  %slice.639 = bf16[1,4096,32,64]{3,2,1,0} slice(%dot.905), slice={[0:1], [0:4096], [0:32], [64:128]}
  %sin.106 = f32[1,4096,1,64]{3,2,1,0} sine(%div.1220)
  %convert_element_type.2691 = bf16[1,4096,1,64]{3,2,1,0} convert(%sin.106)
  %mul.7678 = bf16[1,4096,64]{2,1,0} reshape(%convert_element_type.2691)
  %mul.7679 = bf16[1,4096,32,64]{3,2,1,0} broadcast(%mul.7678), dimensions={0,1,3}
  %mul.7681 = bf16[1,4096,32,64]{3,2,1,0} multiply(%slice.639, %mul.7679)
  %sub.356 = bf16[1,4096,32,64]{3,2,1,0} subtract(%mul.7677, %mul.7681)
  %mul.7684 = bf16[1,4096,32,64]{3,2,1,0} multiply(%slice.639, %mul.7676)
  %mul.7705 = bf16[1,4096,32,64]{3,2,1,0} multiply(%slice.638, %mul.7679)
  %add.2234 = bf16[1,4096,32,64]{3,2,1,0} add(%mul.7684, %mul.7705)
  %concatenate.532 = bf16[1,4096,32,128]{3,2,1,0} concatenate(%sub.356, %add.2234), dimensions={3}
  %sharding_constraint.1918 = bf16[1,4096,32,128]{3,2,1,0} copy(%concatenate.532)
  %get-tuple-element.1127 = bf16[512,8,128]{2,1,0} get-tuple-element(%remat2.32), index=6
  %all-gather.353 = bf16[4096,8,128]{2,1,0} all-gather(%get-tuple-element.1127), channel_id=652, replica_groups=[1,8]<=[8], dimensions={0}, use_global_device_ids=true
  %dot.906 = bf16[1,4096,8,128]{3,2,1,0} dot(%sharding_constraint.1917, %all-gather.353), lhs_contracting_dims={2}, rhs_contracting_dims={0}
  %slice.640 = bf16[1,4096,8,64]{3,2,1,0} slice(%dot.906), slice={[0:1], [0:4096], [0:8], [0:64]}
  %mul.7708 = bf16[1,4096,8,64]{3,2,1,0} broadcast(%mul.7675), dimensions={0,1,3}
  %mul.7709 = bf16[1,4096,8,64]{3,2,1,0} multiply(%slice.640, %mul.7708)
  %slice.641 = bf16[1,4096,8,64]{3,2,1,0} slice(%dot.906), slice={[0:1], [0:4096], [0:8], [64:128]}
  %mul.7711 = bf16[1,4096,8,64]{3,2,1,0} broadcast(%mul.7678), dimensions={0,1,3}
  %mul.7712 = bf16[1,4096,8,64]{3,2,1,0} multiply(%slice.641, %mul.7711)
  %sub.357 = bf16[1,4096,8,64]{3,2,1,0} subtract(%mul.7709, %mul.7712)
  %mul.7715 = bf16[1,4096,8,64]{3,2,1,0} multiply(%slice.641, %mul.7708)
  %mul.7718 = bf16[1,4096,8,64]{3,2,1,0} multiply(%slice.640, %mul.7711)
  %add.2235 = bf16[1,4096,8,64]{3,2,1,0} add(%mul.7715, %mul.7718)
  %concatenate.533 = bf16[1,4096,8,128]{3,2,1,0} concatenate(%sub.357, %add.2235), dimensions={3}
  %sharding_constraint.1920 = bf16[1,4096,8,128]{3,2,1,0} copy(%concatenate.533)
  %get-tuple-element.1128 = bf16[512,8,128]{2,1,0} get-tuple-element(%remat2.32), index=9
  %all-gather.354 = bf16[4096,8,128]{2,1,0} all-gather(%get-tuple-element.1128), channel_id=653, replica_groups=[1,8]<=[8], dimensions={0}, use_global_device_ids=true
  %dot.907 = bf16[1,4096,8,128]{3,2,1,0} dot(%sharding_constraint.1917, %all-gather.354), lhs_contracting_dims={2}, rhs_contracting_dims={0}
  %sharding_constraint.1921 = bf16[1,4096,8,128]{3,2,1,0} copy(%dot.907)
  %get-tuple-element.1129 = s32[1,4096]{1,0} get-tuple-element(%remat2.32), index=11
  %eq.2392 = s32[1,4096,4096]{2,1,0} broadcast(%get-tuple-element.1129), dimensions={0,1}
  %eq.2393 = s32[1,4096,4096]{2,1,0} broadcast(%get-tuple-element.1129), dimensions={0,2}
  %eq.2394 = pred[1,4096,4096]{2,1,0} compare(%eq.2392, %eq.2393), direction=EQ
  %and.192 = pred[1,4096,4096]{2,1,0} and(%eq.2394, %and.64)
  %select_n.602 = f32[1,4096,4096]{2,1,0} select(%and.192, %broadcast_in_dim.516, %broadcast_in_dim.517)
  %ne.119 = pred[1,4096,4096]{2,1,0} compare(%select_n.602, %broadcast_in_dim.516), direction=NE
  %not.117 = pred[1,4096,4096]{2,1,0} not(%ne.119)
  %convert_element_type.2697 = s32[1,4096,4096]{2,1,0} convert(%not.117)
  %reduce.782 = s32[1,4096]{1,0} reduce(%convert_element_type.2697, %constant.1181), dimensions={1}, to_apply=%region_770.19982
  %reduce_sum.5745 = s32[1,1,1,4096]{3,2,1,0} reshape(%reduce.782)
  %slice.642 = s32[1,1,1,1]{3,2,1,0} slice(%reduce_sum.5745), slice={[0:1], [0:1], [0:1], [0:1]}
  %squeeze.53 = s32[1,1]{1,0} reshape(%slice.642)
  %reshape.12807 = s32[1]{0} reshape(%squeeze.53)
  %lt.202 = pred[1]{0} compare(%reshape.12807, %constant.1418), direction=LT
  %select_n.603 = s32[1]{0} select(%lt.202, %broadcast_in_dim.518, %reshape.12807)
  %concatenate.534 = s32[2]{0} concatenate(%constant.1418, %select_n.603), dimensions={0}
  %reduce.783 = s32[1,4096]{1,0} reduce(%convert_element_type.2697, %constant.1181), dimensions={2}, to_apply=%region_771.19991
  %reduce_sum.5746 = s32[1,1,1,4096]{3,2,1,0} reshape(%reduce.783)
  %reduce.784 = s32[1,1]{1,0} reduce(%reduce_sum.5746, %constant.1415), dimensions={3,2}, to_apply=%region_772.19997
  %reshape.12808 = s32[1]{0} reshape(%reduce.784)
  %lt.203 = pred[1]{0} compare(%reshape.12808, %constant.1418), direction=LT
  %select_n.604 = s32[1]{0} select(%lt.203, %broadcast_in_dim.518, %reshape.12808)
  %concatenate.535 = s32[2]{0} concatenate(%constant.1418, %select_n.604), dimensions={0}
  %te_fused_attn_forward_ffi.212 = (bf16[1,4096,32,128]{3,2,1,0}, f32[1,32,4096,1]{3,2,1,0}, u32[2,4]{1,0}, u8[48]{0}) custom-call(%sharding_constraint.1918, %sharding_constraint.1920, %sharding_constraint.1921, %constant.1403, %dynamic-slice.38, /*index=5*/%concatenate.534, %concatenate.535, %constant.1416, %constant.1416, %constant.1416, /*index=10*/%constant.1416, %constant.1416, %constant.1416), custom_call_target="te_fused_attn_forward_ffi", operand_layout_constraints={bf16[1,4096,32,128]{3,2,1,0}, bf16[1,4096,8,128]{3,2,1,0}, bf16[1,4096,8,128]{3,2,1,0}, bf16[0]{0}, u32[2]{0}, s32[2]{0}, s32[2]{0}, f32[0]{0}, f32[0]{0}, f32[0]{0}, f32[0]{0}, f32[0]{0}, f32[0]{0}}, api_version=API_VERSION_TYPED_FFI, backend_config={attn_heads = 32 : i64, bias_batch = 0 : i64, bias_heads = 0 : i64, bias_type = 0 : i64, deterministic = false, dropout_probability = 0.000000e+00 : f64, input_batch = 1 : i64, is_training = true, kv_max_seqlen = 4096 : i64, mask_type = 3 : i64, max_segments_per_seq = 1 : i64, num_gqa_groups = 8 : i64, q_max_seqlen = 4096 : i64, qk_head_dim = 128 : i64, qkv_layout = 9 : i64, scaling_factor = 1.000000e+00 : f64, v_head_dim = 128 : i64, window_size_left = -1 : i64, window_size_right = -1 : i64}
  %get-tuple-element.1130 = bf16[1,4096,32,128]{3,2,1,0} get-tuple-element(%te_fused_attn_forward_ffi.212), index=0
  %sharding_constraint.1923 = bf16[1,4096,32,128]{3,2,1,0} copy(%get-tuple-element.1130)
  %get-tuple-element.1131 = bf16[32,128,512]{2,1,0} get-tuple-element(%remat2.32), index=7
  %all-gather.355 = bf16[32,128,4096]{2,1,0} all-gather(%get-tuple-element.1131), channel_id=654, replica_groups=[1,8]<=[8], dimensions={2}, use_global_device_ids=true
  %dot.908 = bf16[1,4096,4096]{2,1,0} dot(%sharding_constraint.1923, %all-gather.355), lhs_contracting_dims={2,3}, rhs_contracting_dims={0,1}
  %sharding_constraint.1925 = bf16[1,4096,4096]{2,1,0} copy(%dot.908)
  %add.2236 = bf16[1,4096,4096]{2,1,0} add(%sharding_constraint.1912, %sharding_constraint.1925)
  %convert_element_type.2699 = f32[1,4096,4096]{2,1,0} convert(%add.2236)
  %square.111 = f32[1,4096,4096]{2,1,0} multiply(%convert_element_type.2699, %convert_element_type.2699)
  %reduce.785 = f32[1,4096]{1,0} reduce(%square.111, %constant.1360), dimensions={2}, to_apply=%region_773.20012
  %div.1225 = f32[1,4096]{1,0} multiply(%reduce.785, %broadcast.3412)
  %add.2237 = f32[1,4096]{1,0} add(%div.1225, %broadcast.3413)
  %add.2238 = f32[1,4096,1]{2,1,0} reshape(%add.2237)
  %rsqrt.172 = f32[1,4096,1]{2,1,0} rsqrt(%add.2238)
  %mul.7719 = f32[1,4096]{1,0} reshape(%rsqrt.172)
  %mul.7720 = f32[1,4096,4096]{2,1,0} broadcast(%mul.7719), dimensions={0,1}
  %mul.7721 = f32[1,4096,4096]{2,1,0} multiply(%convert_element_type.2699, %mul.7720)
  %convert_element_type.2700 = bf16[1,4096,4096]{2,1,0} convert(%mul.7721)
  %get-tuple-element.1132 = bf16[4096]{0} get-tuple-element(%remat2.32), index=4
  %mul.7722 = bf16[1,4096,4096]{2,1,0} broadcast(%get-tuple-element.1132), dimensions={2}
  %mul.7723 = bf16[1,4096,4096]{2,1,0} multiply(%convert_element_type.2700, %mul.7722)
  %sharding_constraint.1927 = bf16[1,4096,4096]{2,1,0} copy(%mul.7723)
  %get-tuple-element.1133 = bf16[512,8]{1,0} get-tuple-element(%remat2.32), index=0
  %all-gather.356 = bf16[4096,8]{1,0} all-gather(%get-tuple-element.1133), channel_id=655, replica_groups=[1,8]<=[8], dimensions={0}, use_global_device_ids=true
  %dot.909 = bf16[1,4096,8]{2,1,0} dot(%sharding_constraint.1927, %all-gather.356), lhs_contracting_dims={2}, rhs_contracting_dims={0}
  %sharding_constraint.1931 = bf16[1,4096,8]{2,1,0} copy(%dot.909)
  %top_k.159 = bf16[4096,8]{1,0} reshape(%sharding_constraint.1931)
  %top_k.160 = (bf16[4096,2]{1,0}, s32[4096,2]{1,0}) custom-call(%top_k.159), custom_call_target="TopK", called_computations={%compare_greater_than.53.20033.clone}
  %get-tuple-element.1134 = bf16[4096,2]{1,0} get-tuple-element(%top_k.160), index=0
  %get-tuple-element.1135 = s32[4096,2]{1,0} get-tuple-element(%top_k.160), index=1
  %add.2239 = s32[4096,2]{1,0} add(%get-tuple-element.1135, %broadcast.3418)
  %sort.117 = (bf16[4096,2]{1,0}, s32[4096,2]{1,0}) sort(%get-tuple-element.1134, %add.2239), dimensions={1}, is_stable=true, to_apply=%compare-value-and-index.53
  %get-tuple-element.1137 = s32[4096,2]{1,0} get-tuple-element(%sort.117), index=1
  %slice.644 = s32[4096,2]{1,0} slice(%get-tuple-element.1137), slice={[0:4096], [0:2]}
  %top_k.161 = s32[1,4096,2]{2,1,0} reshape(%slice.644)
  %lt.204 = pred[1,4096,2]{2,1,0} compare(%top_k.161, %broadcast.3419), direction=LT
  %add.2240 = s32[1,4096,2]{2,1,0} add(%top_k.161, %broadcast.3420)
  %select_n.605 = s32[1,4096,2]{2,1,0} select(%lt.204, %add.2240, %top_k.161)
  %broadcast_in_dim.743 = s32[1,4096,2,1]{3,2,1,0} reshape(%select_n.605)
  %concatenate.536 = s32[1,4096,2,3]{3,2,1,0} concatenate(%add.1356, %iota.2728, %broadcast_in_dim.743), dimensions={3}
  %subtract.182 = s32[1,4096,2,3]{3,2,1,0} subtract(%concatenate.536, %broadcast.3428)
  %scatter.256 = u32[1,4096,8]{2,1,0} scatter(%dynamic-slice.43, %subtract.182, %add.1401), update_window_dims={}, inserted_window_dims={0,1,2}, scatter_dims_to_operand_dims={0,1,2}, index_vector_dim=3, to_apply=%region_774.20069.clone
  %gather.74 = u32[1,4096,2]{2,1,0} gather(%scatter.256, %subtract.182), offset_dims={}, collapsed_slice_dims={0,1,2}, start_index_map={0,1,2}, index_vector_dim=3, slice_sizes={1,1,1}
  %eq.2395 = pred[1,4096,2]{2,1,0} compare(%add.1401, %gather.74), direction=EQ
  %get-tuple-element.1136 = bf16[4096,2]{1,0} get-tuple-element(%sort.117), index=0
  %slice.643 = bf16[4096,2]{1,0} slice(%get-tuple-element.1136), slice={[0:4096], [0:2]}
  %convert_element_type.2701 = f32[4096,2]{1,0} convert(%slice.643)
  %convert_element_type.2703 = f32[1,4096,2]{2,1,0} reshape(%convert_element_type.2701)
  %reduce.786 = f32[4096]{0} reduce(%convert_element_type.2701, %constant.1450), dimensions={1}, to_apply=%region_775.20078
  %sub.358 = f32[1,4096]{1,0} reshape(%reduce.786)
  %sub.359 = f32[1,4096,2]{2,1,0} broadcast(%sub.358), dimensions={0,1}
  %sub.360 = f32[1,4096,2]{2,1,0} subtract(%convert_element_type.2703, %sub.359)
  %exp.233 = f32[1,4096,2]{2,1,0} exponential(%sub.360)
  %reduce.787 = f32[1,4096]{1,0} reduce(%exp.233, %constant.1360), dimensions={2}, to_apply=%region_776.20087
  %div.1226 = f32[1,4096,2]{2,1,0} broadcast(%reduce.787), dimensions={0,1}
  %div.1227 = f32[1,4096,2]{2,1,0} divide(%exp.233, %div.1226)
  %convert_element_type.2705 = bf16[1,4096,2]{2,1,0} convert(%div.1227)
  %select_n.606 = bf16[1,4096,2]{2,1,0} select(%eq.2395, %convert_element_type.2705, %broadcast.3427)
  %scatter.257 = bf16[1,4096,8]{2,1,0} scatter(%broadcast.3379, %subtract.182, %select_n.606), update_window_dims={}, inserted_window_dims={0,1,2}, scatter_dims_to_operand_dims={0,1,2}, index_vector_dim=3, to_apply=%region_777.20096.clone
  %eq.2397 = s32[1,4096,2,8]{3,2,1,0} broadcast(%top_k.161), dimensions={0,1,2}
  %iota.2739 = s32[1,4096,2,8]{3,2,1,0} iota(), iota_dimension=3
  %eq.2398 = pred[1,4096,2,8]{3,2,1,0} compare(%eq.2397, %iota.2739), direction=EQ
  %convert_element_type.2706 = s32[1,4096,2,8]{3,2,1,0} convert(%eq.2398)
  %reshape.12840 = s32[1,8192,8]{2,1,0} reshape(%convert_element_type.2706)
  %sharding_constraint.1934 = s32[1,8192,8]{2,1,0} copy(%reshape.12840)
  %reduce-window.53 = s32[1,8192,8]{2,1,0} reduce-window(%sharding_constraint.1934, %constant.1181), window={size=1x8192x1 pad=0_0x8191_0x0_0}, to_apply=%region_778.20108
  %reshape.12842 = s32[1,4096,2,8]{3,2,1,0} reshape(%reduce-window.53)
  %sharding_constraint.1935 = s32[1,4096,2,8]{3,2,1,0} copy(%reshape.12842)
  %le.150 = pred[1,4096,2,8]{3,2,1,0} compare(%sharding_constraint.1935, %broadcast.3429), direction=LE
  %mul.7724 = s32[1,4096,2,8]{3,2,1,0} select(%le.150, %convert_element_type.2706, %broadcast.3430)
  %reduce.788 = s32[1,4096,8]{2,1,0} reduce(%mul.7724, %constant.1181), dimensions={2}, to_apply=%region_779.20117
  %convert_element_type.2707 = bf16[1,4096,8]{2,1,0} convert(%reduce.788)
  %mul.7725 = bf16[1,4096,8]{2,1,0} multiply(%scatter.257, %convert_element_type.2707)
  %mul.7726 = bf16[1,4096,8,1025]{3,2,1,0} broadcast(%mul.7725), dimensions={0,1,2}
  %mul.7727 = s32[1,8192,8]{2,1,0} multiply(%sharding_constraint.1934, %reduce-window.53)
  %reshape.12843 = s32[1,4096,2,8]{3,2,1,0} reshape(%mul.7727)
  %reduce.789 = s32[1,4096,8]{2,1,0} reduce(%reshape.12843, %constant.1181), dimensions={2}, to_apply=%region_780.20127
  %mul.7728 = s32[1,4096,8]{2,1,0} multiply(%reduce.789, %reduce.788)
  %eq.2399 = s32[1,4096,8,1025]{3,2,1,0} broadcast(%mul.7728), dimensions={0,1,2}
  %iota.2740 = s32[1,4096,8,1025]{3,2,1,0} iota(), iota_dimension=3
  %eq.2400 = pred[1,4096,8,1025]{3,2,1,0} compare(%eq.2399, %iota.2740), direction=EQ
  %convert_element_type.2708 = s32[1,4096,8,1025]{3,2,1,0} convert(%eq.2400)
  %convert_element_type.2709 = bf16[1,4096,8,1025]{3,2,1,0} convert(%convert_element_type.2708)
  %mul.7729 = bf16[1,4096,8,1025]{3,2,1,0} multiply(%mul.7726, %convert_element_type.2709)
  %slice.645 = bf16[1,4096,8,1024]{3,2,1,0} slice(%mul.7729), slice={[0:1], [0:4096], [0:8], [1:1025]}
  %convert_element_type.2711 = pred[1,4096,8,1024]{3,2,1,0} compare(%slice.645, %broadcast.3431), direction=NE
  %sharding_constraint.1936 = pred[1,4096,8,1024]{3,2,1,0} copy(%convert_element_type.2711)
  %dot_general.110 = bf16[1,4096,8,1024]{3,2,1,0} convert(%sharding_constraint.1936)
  %dot.910 = bf16[1,8,1024,4096]{3,2,1,0} dot(%dot_general.110, %sharding_constraint.1927), lhs_batch_dims={0}, lhs_contracting_dims={1}, rhs_batch_dims={0}, rhs_contracting_dims={1}
  %reshape.12846 = bf16[1,8,1,1024,4096]{4,3,2,1,0} reshape(%dot.910)
  %all-to-all.148 = bf16[1,8,1,1024,4096]{4,3,2,1,0} all-to-all(%reshape.12846), channel_id=659, replica_groups=[1,8]<=[8], dimensions={1}
  %transpose.248 = bf16[8,1,1,1024,4096]{4,3,2,0,1} transpose(%all-to-all.148), dimensions={1,0,2,3,4}
  %reshape.12847 = bf16[8,1,1024,4096]{3,2,1,0} reshape(%transpose.248)
  %transpose.249 = bf16[1,8,1024,4096]{3,2,0,1} transpose(%reshape.12847), dimensions={1,0,2,3}
  %sharding_constraint.1937 = bf16[1,8,1024,4096]{3,2,0,1} copy(%transpose.249)
  %get-tuple-element.1140 = bf16[1,4096,14336]{2,1,0} get-tuple-element(%remat2.32), index=1
  %sharding_constraint.1938 = bf16[1,4096,14336]{2,1,0} copy(%get-tuple-element.1140)
  %dot.911 = bf16[1,8,1024,14336]{3,2,1,0} dot(%sharding_constraint.1937, %sharding_constraint.1938), lhs_batch_dims={0}, lhs_contracting_dims={3}, rhs_batch_dims={0}, rhs_contracting_dims={1}
  %sharding_constraint.1939 = bf16[1,8,1024,14336]{3,2,1,0} copy(%dot.911)
  %neg.274 = bf16[1,8,1024,14336]{3,2,1,0} negate(%sharding_constraint.1939)
  %exp.234 = bf16[1,8,1024,14336]{3,2,1,0} exponential(%neg.274)
  %add.2245 = bf16[1,8,1024,14336]{3,2,1,0} add(%exp.234, %jit_silu_.0)
  %div.1228 = bf16[1,8,1024,14336]{3,2,1,0} divide(%jit_silu_.0, %add.2245)
  %mul.7730 = bf16[1,8,1024,14336]{3,2,1,0} multiply(%sharding_constraint.1939, %div.1228)
  %sharding_constraint.1940 = bf16[1,4096,4096]{2,1,0} copy(%sharding_constraint.1911)
  %sharding_constraint.1941 = bf16[1,4096,8,1024]{3,2,1,0} copy(%slice.645)
  %dot.912 = bf16[1,4096,8,1024]{3,2,1,0} dot(%sharding_constraint.1940, %sharding_constraint.1941), lhs_batch_dims={0}, lhs_contracting_dims={1}, rhs_batch_dims={0}, rhs_contracting_dims={1}
  %reshape.12850 = bf16[1,4096,8,1,1024]{4,3,2,1,0} reshape(%dot.912)
  %all-to-all.149 = bf16[1,4096,8,1,1024]{4,3,2,1,0} all-to-all(%reshape.12850), channel_id=660, replica_groups=[1,8]<=[8], dimensions={2}
  %transpose.250 = bf16[8,1,4096,1,1024]{4,3,0,2,1} transpose(%all-to-all.149), dimensions={2,0,1,3,4}
  %reshape.12851 = bf16[8,4096,1,1024]{3,2,1,0} reshape(%transpose.250)
  %transpose.251 = bf16[1,8,1024,4096]{2,0,3,1} transpose(%reshape.12851), dimensions={2,0,3,1}
  %sharding_constraint.1942 = bf16[1,8,1024,4096]{2,0,3,1} copy(%transpose.251)
  %get-tuple-element.1141 = bf16[1,14336,4096]{2,1,0} get-tuple-element(%remat2.32), index=3
  %sharding_constraint.1943 = bf16[1,14336,4096]{2,1,0} copy(%get-tuple-element.1141)
  %dot.913 = bf16[1,8,1024,14336]{3,2,1,0} dot(%sharding_constraint.1942, %sharding_constraint.1943), lhs_batch_dims={0}, lhs_contracting_dims={3}, rhs_batch_dims={0}, rhs_contracting_dims={2}
  %mul.7731 = bf16[1,8,1024,14336]{3,2,1,0} multiply(%mul.7730, %dot.913)
  %sharding_constraint.1944 = bf16[1,8,1024,14336]{3,2,1,0} copy(%mul.7731)
  %get-tuple-element.1142 = bf16[1,4096,14336]{2,1,0} get-tuple-element(%remat2.32), index=2
  %sharding_constraint.1945 = bf16[1,4096,14336]{2,1,0} copy(%get-tuple-element.1142)
  %dot.914 = bf16[1,8,1024,4096]{3,2,1,0} dot(%sharding_constraint.1944, %sharding_constraint.1945), lhs_batch_dims={0}, lhs_contracting_dims={3}, rhs_batch_dims={0}, rhs_contracting_dims={2}
  %dot.915 = bf16[1,8,1024,14336]{3,2,1,0} dot(%sharding_constraint.1937, %sharding_constraint.1945), lhs_batch_dims={0}, lhs_contracting_dims={3}, rhs_batch_dims={0}, rhs_contracting_dims={1}
  %sharding_constraint.1946 = bf16[1,8,1024,14336]{3,2,1,0} copy(%dot.915)
  %mul.7732 = bf16[1,8,1024,14336]{3,2,1,0} multiply(%dot.913, %sharding_constraint.1946)
  %mul.7733 = bf16[1,8,1024,14336]{3,2,1,0} multiply(%mul.7732, %div.1228)
  %mul.7734 = bf16[1,8,1024,14336]{3,2,1,0} multiply(%sharding_constraint.1939, %mul.7732)
  %sub.361 = bf16[1,8,1024,14336]{3,2,1,0} subtract(%jit_silu_.0, %div.1228)
  %mul.7735 = bf16[1,8,1024,14336]{3,2,1,0} multiply(%div.1228, %sub.361)
  %mul.7736 = bf16[1,8,1024,14336]{3,2,1,0} multiply(%mul.7734, %mul.7735)
  %add_any.361 = bf16[1,8,1024,14336]{3,2,1,0} add(%mul.7733, %mul.7736)
  %sharding_constraint.1947 = bf16[1,8,1024,14336]{3,2,1,0} copy(%add_any.361)
  %dot.916 = bf16[1,8,1024,4096]{3,2,1,0} dot(%sharding_constraint.1947, %sharding_constraint.1938), lhs_batch_dims={0}, lhs_contracting_dims={3}, rhs_batch_dims={0}, rhs_contracting_dims={2}
  %add_any.362 = bf16[1,8,1024,4096]{3,2,1,0} add(%dot.914, %dot.916)
  %sharding_constraint.1948 = bf16[1,8,1024,4096]{3,2,1,0} copy(%add_any.362)
  %transpose.252 = bf16[8,1,1024,4096]{3,2,0,1} transpose(%sharding_constraint.1948), dimensions={1,0,2,3}
  %reshape.12855 = bf16[8,1,1,1024,4096]{4,3,2,1,0} reshape(%transpose.252)
  %all-to-all.150 = bf16[8,1,1,1024,4096]{4,3,2,1,0} all-to-all(%reshape.12855), channel_id=661, replica_groups=[1,8]<=[8], dimensions={0}
  %transpose.253 = bf16[1,8,1,1024,4096]{4,3,2,0,1} transpose(%all-to-all.150), dimensions={1,0,2,3,4}
  %reshape.12856 = bf16[1,8,1024,4096]{3,2,1,0} reshape(%transpose.253)
  %dot.917 = bf16[1,4096,4096]{2,1,0} dot(%dot_general.110, %reshape.12856), lhs_batch_dims={0}, lhs_contracting_dims={2,3}, rhs_batch_dims={0}, rhs_contracting_dims={1,2}
  %reshape.12858 = s32[1,4096,2,1]{3,2,1,0} reshape(%slice.644)
  %ge.21 = pred[1,4096,2,3]{3,2,1,0} compare(%concatenate.536, %broadcast.3629), direction=GE
  %le.152 = pred[1,4096,2,3]{3,2,1,0} compare(%concatenate.536, %le.67), direction=LE
  %and.193 = pred[1,4096,2,3]{3,2,1,0} and(%ge.21, %le.152)
  %reduce.790 = pred[1,4096,2]{2,1,0} reduce(%and.193, %constant.5574), dimensions={3}, to_apply=%region_781.20184
  %mul.7737 = bf16[1,8,1024,14336]{3,2,1,0} multiply(%mul.7730, %sharding_constraint.1946)
  %dot.918 = bf16[1,8,1024,4096]{3,2,1,0} dot(%mul.7737, %sharding_constraint.1943), lhs_batch_dims={0}, lhs_contracting_dims={3}, rhs_batch_dims={0}, rhs_contracting_dims={1}
  %sharding_constraint.1951 = bf16[1,8,1024,4096]{3,2,1,0} copy(%dot.918)
  %reshape.12865 = bf16[1,8,1,1024,4096]{4,3,2,1,0} reshape(%sharding_constraint.1951)
  %all-to-all.151 = bf16[1,8,1,1024,4096]{4,3,2,1,0} all-to-all(%reshape.12865), channel_id=662, replica_groups=[1,8]<=[8], dimensions={1}
  %transpose.254 = bf16[8,1,1,1024,4096]{4,3,2,0,1} transpose(%all-to-all.151), dimensions={1,0,2,3,4}
  %reshape.12866 = bf16[8,1,1024,4096]{3,2,1,0} reshape(%transpose.254)
  %dot.919 = bf16[1,4096,8,1024]{3,2,1,0} dot(%sharding_constraint.1940, %reshape.12866), lhs_batch_dims={0}, lhs_contracting_dims={2}, rhs_batch_dims={1}, rhs_contracting_dims={3}
  %sharding_constraint.1952 = bf16[1,4096,8,1024]{3,2,1,0} copy(%dot.919)
  %pad.21 = bf16[1,4096,8,1025]{3,2,1,0} pad(%sharding_constraint.1952, %constant.1190), padding=0_0x0_0x0_0x1_0
  %mul.7738 = bf16[1,4096,8,1025]{3,2,1,0} multiply(%pad.21, %convert_element_type.2709)
  %reduce.791 = bf16[1,4096,8]{2,1,0} reduce(%mul.7738, %constant.1190), dimensions={3}, to_apply=%region_782.20196
  %mul.7739 = bf16[1,4096,8]{2,1,0} multiply(%reduce.791, %convert_element_type.2707)
  %gather.75 = bf16[1,4096,2]{2,1,0} gather(%mul.7739, %subtract.182), offset_dims={}, collapsed_slice_dims={0,1,2}, start_index_map={0,1,2}, index_vector_dim=3, slice_sizes={1,1,1}
  %select_n.607 = bf16[1,4096,2]{2,1,0} select(%reduce.790, %gather.75, %broadcast.3427)
  %select_n.608 = bf16[1,4096,2]{2,1,0} select(%eq.2395, %select_n.607, %broadcast.3427)
  %convert_element_type.2712 = f32[1,4096,2]{2,1,0} convert(%select_n.608)
  %div.1230 = f32[1,4096,2]{2,1,0} divide(%convert_element_type.2712, %div.1226)
  %mul.7740 = f32[1,4096]{1,0} multiply(%reduce.787, %reduce.787)
  %div.1232 = f32[1,4096]{1,0} divide(%add.1847, %mul.7740)
  %mul.7741 = f32[1,4096,2]{2,1,0} broadcast(%div.1232), dimensions={0,1}
  %mul.7742 = f32[1,4096,2]{2,1,0} multiply(%convert_element_type.2712, %mul.7741)
  %mul.7743 = f32[1,4096,2]{2,1,0} multiply(%mul.7742, %exp.233)
  %reduce.792 = f32[1,4096]{1,0} reduce(%mul.7743, %constant.1360), dimensions={2}, to_apply=%region_783.20213
  %neg.275 = f32[1,4096]{1,0} negate(%reduce.792)
  %broadcast_in_dim.744 = f32[1,4096,2]{2,1,0} broadcast(%neg.275), dimensions={0,1}
  %add_any.363 = f32[1,4096,2]{2,1,0} add(%div.1230, %broadcast_in_dim.744)
  %mul.7744 = f32[1,4096,2]{2,1,0} multiply(%add_any.363, %exp.233)
  %convert_element_type.2713 = bf16[1,4096,2]{2,1,0} convert(%mul.7744)
  %scatter.258 = bf16[1,4096,8]{2,1,0} scatter(%broadcast.3379, %reshape.12858, %convert_element_type.2713), update_window_dims={}, inserted_window_dims={2}, scatter_dims_to_operand_dims={2}, input_batching_dims={0,1}, scatter_indices_batching_dims={0,1}, index_vector_dim=3, to_apply=%region_784.20223.clone
  %sharding_constraint.1953 = bf16[1,4096,8]{2,1,0} copy(%scatter.258)
  %dot.920 = bf16[1,4096,4096]{2,1,0} dot(%sharding_constraint.1953, %all-gather.356), lhs_contracting_dims={2}, rhs_contracting_dims={1}
  %add_any.364 = bf16[1,4096,4096]{2,1,0} add(%dot.917, %dot.920)
  %sharding_constraint.1954 = bf16[1,4096,4096]{2,1,0} copy(%add_any.364)
  %mul.7746 = bf16[1,4096,4096]{2,1,0} multiply(%sharding_constraint.1954, %mul.7722)
  %convert_element_type.2714 = f32[1,4096,4096]{2,1,0} convert(%mul.7746)
  %mul.7749 = f32[1,4096,4096]{2,1,0} multiply(%convert_element_type.2714, %mul.7720)
  %mul.7750 = f32[1,4096,4096]{2,1,0} multiply(%convert_element_type.2699, %convert_element_type.2714)
  %reduce.793 = f32[1,4096]{1,0} reduce(%mul.7750, %constant.1360), dimensions={2}, to_apply=%region_785.20239
  %reshape.12879 = f32[1,4096,1]{2,1,0} reshape(%reduce.793)
  %div.1233 = f32[1,4096,1]{2,1,0} divide(%rsqrt.172, %add.2238)
  %mul.7751 = f32[1,4096,1]{2,1,0} multiply(%div.1233, %broadcast.3620)
  %mul.7752 = f32[1,4096,1]{2,1,0} multiply(%reshape.12879, %mul.7751)
  %mul.7753 = f32[1,4096,1]{2,1,0} multiply(%mul.7752, %mul.4455)
  %mul.7754 = f32[1,4096]{1,0} reshape(%mul.7753)
  %mul.7755 = f32[1,4096,4096]{2,1,0} broadcast(%mul.7754), dimensions={0,1}
  %mul.7756 = f32[1,4096,4096]{2,1,0} multiply(%convert_element_type.2699, %mul.7755)
  %add_any.365 = f32[1,4096,4096]{2,1,0} add(%mul.7749, %mul.7756)
  %convert_element_type.2715 = bf16[1,4096,4096]{2,1,0} convert(%add_any.365)
  %add_any.366 = bf16[1,4096,4096]{2,1,0} add(%sharding_constraint.1911, %convert_element_type.2715)
  %get-tuple-element.1143 = f32[1,32,4096,1]{3,2,1,0} get-tuple-element(%te_fused_attn_forward_ffi.212), index=1
  %get-tuple-element.1144 = u32[2,4]{1,0} get-tuple-element(%te_fused_attn_forward_ffi.212), index=2
  %sharding_constraint.1955 = u32[2,4]{1,0} copy(%get-tuple-element.1144)
  %sharding_constraint.1956 = bf16[1,4096,4096]{2,1,0} copy(%add_any.366)
  %dot.921 = bf16[1,4096,32,128]{3,2,1,0} dot(%sharding_constraint.1956, %all-gather.355), lhs_contracting_dims={2}, rhs_contracting_dims={2}
  %sharding_constraint.1957 = bf16[1,4096,32,128]{3,2,1,0} copy(%dot.921)
  %te_fused_attn_backward_ffi.105 = (bf16[1,4096,32,128]{3,2,1,0}, bf16[1,4096,8,128]{3,2,1,0}, bf16[1,4096,8,128]{3,2,1,0}, bf16[0]{0}, u8[134742064]{0}) custom-call(%sharding_constraint.1918, %sharding_constraint.1920, %sharding_constraint.1921, %constant.1403, %get-tuple-element.1143, /*index=5*/%sharding_constraint.1955, %get-tuple-element.1130, %sharding_constraint.1957, %concatenate.534, %concatenate.535, /*index=10*/%constant.1416, %constant.1416, %constant.1416, %constant.1416, %constant.1416, /*index=15*/%constant.1416), custom_call_target="te_fused_attn_backward_ffi", operand_layout_constraints={bf16[1,4096,32,128]{3,2,1,0}, bf16[1,4096,8,128]{3,2,1,0}, bf16[1,4096,8,128]{3,2,1,0}, bf16[0]{0}, f32[1,32,4096,1]{3,2,1,0}, u32[2,4]{1,0}, bf16[1,4096,32,128]{3,2,1,0}, bf16[1,4096,32,128]{3,2,1,0}, s32[2]{0}, s32[2]{0}, f32[0]{0}, f32[0]{0}, f32[0]{0}, f32[0]{0}, f32[0]{0}, f32[0]{0}}, api_version=API_VERSION_TYPED_FFI, backend_config={attn_heads = 32 : i64, bias_batch = 0 : i64, bias_heads = 0 : i64, bias_type = 0 : i64, deterministic = false, dropout_probability = 0.000000e+00 : f64, input_batch = 1 : i64, is_training = true, kv_max_seqlen = 4096 : i64, mask_type = 3 : i64, max_segments_per_seq = 1 : i64, num_gqa_groups = 8 : i64, q_max_seqlen = 4096 : i64, qk_head_dim = 128 : i64, qkv_layout = 9 : i64, scaling_factor = 1.000000e+00 : f64, v_head_dim = 128 : i64, window_size_left = -1 : i64, window_size_right = -1 : i64}
  %get-tuple-element.1145 = bf16[1,4096,8,128]{3,2,1,0} get-tuple-element(%te_fused_attn_backward_ffi.105), index=2
  %sharding_constraint.1958 = bf16[1,4096,8,128]{3,2,1,0} copy(%get-tuple-element.1145)
  %dot.922 = bf16[1,4096,4096]{2,1,0} dot(%sharding_constraint.1958, %all-gather.354), lhs_contracting_dims={2,3}, rhs_contracting_dims={1,2}
  %get-tuple-element.1146 = bf16[1,4096,8,128]{3,2,1,0} get-tuple-element(%te_fused_attn_backward_ffi.105), index=1
  %sharding_constraint.1959 = bf16[1,4096,8,128]{3,2,1,0} copy(%get-tuple-element.1146)
  %slice.646 = bf16[1,4096,8,64]{3,2,1,0} slice(%sharding_constraint.1959), slice={[0:1], [0:4096], [0:8], [64:128]}
  %mul.7761 = bf16[1,4096,8,64]{3,2,1,0} multiply(%slice.646, %mul.7711)
  %slice.647 = bf16[1,4096,8,64]{3,2,1,0} slice(%sharding_constraint.1959), slice={[0:1], [0:4096], [0:8], [0:64]}
  %mul.7766 = bf16[1,4096,8,64]{3,2,1,0} multiply(%slice.647, %mul.7708)
  %add_any.367 = bf16[1,4096,8,64]{3,2,1,0} add(%mul.7761, %mul.7766)
  %mul.7773 = bf16[1,4096,8,64]{3,2,1,0} multiply(%slice.646, %mul.7708)
  %neg.276 = bf16[1,4096,8,64]{3,2,1,0} negate(%slice.647)
  %mul.7780 = bf16[1,4096,8,64]{3,2,1,0} multiply(%neg.276, %mul.7711)
  %add_any.368 = bf16[1,4096,8,64]{3,2,1,0} add(%mul.7773, %mul.7780)
  %concatenate.543 = bf16[1,4096,8,128]{3,2,1,0} concatenate(%add_any.367, %add_any.368), dimensions={3}
  %dot.923 = bf16[1,4096,4096]{2,1,0} dot(%concatenate.543, %all-gather.353), lhs_contracting_dims={2,3}, rhs_contracting_dims={1,2}
  %add_any.369 = bf16[1,4096,4096]{2,1,0} add(%dot.922, %dot.923)
  %sharding_constraint.1960 = bf16[1,4096,4096]{2,1,0} copy(%add_any.369)
  %get-tuple-element.1147 = bf16[1,4096,32,128]{3,2,1,0} get-tuple-element(%te_fused_attn_backward_ffi.105), index=0
  %sharding_constraint.1961 = bf16[1,4096,32,128]{3,2,1,0} copy(%get-tuple-element.1147)
  %slice.648 = bf16[1,4096,32,64]{3,2,1,0} slice(%sharding_constraint.1961), slice={[0:1], [0:4096], [0:32], [64:128]}
  %mul.7783 = bf16[1,4096,32,64]{3,2,1,0} multiply(%slice.648, %mul.7679)
  %slice.649 = bf16[1,4096,32,64]{3,2,1,0} slice(%sharding_constraint.1961), slice={[0:1], [0:4096], [0:32], [0:64]}
  %mul.7786 = bf16[1,4096,32,64]{3,2,1,0} multiply(%slice.649, %mul.7676)
  %add_any.370 = bf16[1,4096,32,64]{3,2,1,0} add(%mul.7783, %mul.7786)
  %mul.7789 = bf16[1,4096,32,64]{3,2,1,0} multiply(%slice.648, %mul.7676)
  %neg.277 = bf16[1,4096,32,64]{3,2,1,0} negate(%slice.649)
  %mul.7792 = bf16[1,4096,32,64]{3,2,1,0} multiply(%neg.277, %mul.7679)
  %add_any.371 = bf16[1,4096,32,64]{3,2,1,0} add(%mul.7789, %mul.7792)
  %concatenate.544 = bf16[1,4096,32,128]{3,2,1,0} concatenate(%add_any.370, %add_any.371), dimensions={3}
  %dot.924 = bf16[1,4096,4096]{2,1,0} dot(%concatenate.544, %all-gather.352), lhs_contracting_dims={2,3}, rhs_contracting_dims={1,2}
  %sharding_constraint.1962 = bf16[1,4096,4096]{2,1,0} copy(%dot.924)
  %add_any.372 = bf16[1,4096,4096]{2,1,0} add(%sharding_constraint.1960, %sharding_constraint.1962)
  %sharding_constraint.1963 = bf16[1,4096,4096]{2,1,0} copy(%add_any.372)
  %mul.7794 = bf16[1,4096,4096]{2,1,0} multiply(%sharding_constraint.1963, %mul.7672)
  %convert_element_type.2718 = f32[1,4096,4096]{2,1,0} convert(%mul.7794)
  %mul.7797 = f32[1,4096,4096]{2,1,0} multiply(%convert_element_type.2718, %mul.7664)
  %mul.7798 = f32[1,4096,4096]{2,1,0} multiply(%convert_element_type.2686, %convert_element_type.2718)
  %reduce.794 = f32[1,4096]{1,0} reduce(%mul.7798, %constant.1360), dimensions={2}, to_apply=%region_786.20318
  %reshape.12886 = f32[1,4096,1]{2,1,0} reshape(%reduce.794)
  %div.1242 = f32[1,4096,1]{2,1,0} divide(%rsqrt.171, %add.2233)
  %mul.7799 = f32[1,4096,1]{2,1,0} multiply(%div.1242, %broadcast.3620)
  %mul.7800 = f32[1,4096,1]{2,1,0} multiply(%reshape.12886, %mul.7799)
  %mul.7801 = f32[1,4096,1]{2,1,0} multiply(%mul.7800, %mul.4455)
  %mul.7802 = f32[1,4096]{1,0} reshape(%mul.7801)
  %mul.7803 = f32[1,4096,4096]{2,1,0} broadcast(%mul.7802), dimensions={0,1}
  %mul.7804 = f32[1,4096,4096]{2,1,0} multiply(%convert_element_type.2686, %mul.7803)
  %add_any.373 = f32[1,4096,4096]{2,1,0} add(%mul.7797, %mul.7804)
  %convert_element_type.2719 = bf16[1,4096,4096]{2,1,0} convert(%add_any.373)
  %add_any.374 = bf16[1,4096,4096]{2,1,0} add(%add_any.366, %convert_element_type.2719)
  %sharding_constraint.1964 = bf16[1,4096,4096]{2,1,0} copy(%add_any.374)
  %tuple.311 = (bf16[512,8]{1,0}, bf16[1,4096,14336]{2,1,0}, bf16[1,4096,14336]{2,1,0}, bf16[1,14336,4096]{2,1,0}, bf16[4096]{0}, /*index=5*/bf16[4096]{0}, bf16[512,8,128]{2,1,0}, bf16[32,128,512]{2,1,0}, bf16[512,32,128]{2,1,0}, bf16[512,8,128]{2,1,0}, /*index=10*/bf16[1,4096,4096]{2,1,0}, s32[1,4096]{1,0}, s32[1,4096]{1,0}, bf16[1,4096,4096]{2,1,0}) tuple(%param.103, %param.104, %param.105, %param.106, %param.102, /*index=5*/%param.97, %param.99, %param.101, %param.98, %param.100, /*index=10*/%sharding_constraint.378, %param.10, %param.7, %sharding_constraint.1964)
  %remat2.33 = (bf16[512,8]{1,0}, bf16[1,4096,14336]{2,1,0}, bf16[1,4096,14336]{2,1,0}, bf16[1,14336,4096]{2,1,0}, bf16[4096]{0}, /*index=5*/bf16[4096]{0}, bf16[512,8,128]{2,1,0}, bf16[32,128,512]{2,1,0}, bf16[512,32,128]{2,1,0}, bf16[512,8,128]{2,1,0}, /*index=10*/bf16[1,4096,4096]{2,1,0}, s32[1,4096]{1,0}, s32[1,4096]{1,0}, bf16[1,4096,4096]{2,1,0}) opt-barrier(%tuple.311)
  %get-tuple-element.1148 = bf16[1,4096,4096]{2,1,0} get-tuple-element(%remat2.33), index=13
  %sharding_constraint.1965 = bf16[1,4096,4096]{2,1,0} copy(%get-tuple-element.1148)
  %iota.2745 = s32[1,4096,2,1]{3,2,1,0} iota(), iota_dimension=1
  %get-tuple-element.1149 = bf16[1,4096,4096]{2,1,0} get-tuple-element(%remat2.33), index=10
  %sharding_constraint.1966 = bf16[1,4096,4096]{2,1,0} copy(%get-tuple-element.1149)
  %convert_element_type.2720 = f32[1,4096,4096]{2,1,0} convert(%sharding_constraint.1966)
  %square.112 = f32[1,4096,4096]{2,1,0} multiply(%convert_element_type.2720, %convert_element_type.2720)
  %reduce.795 = f32[1,4096]{1,0} reduce(%square.112, %constant.1360), dimensions={2}, to_apply=%region_787.20360
  %div.1243 = f32[1,4096]{1,0} multiply(%reduce.795, %broadcast.3412)
  %add.2249 = f32[1,4096]{1,0} add(%div.1243, %broadcast.3413)
  %add.2250 = f32[1,4096,1]{2,1,0} reshape(%add.2249)
  %rsqrt.173 = f32[1,4096,1]{2,1,0} rsqrt(%add.2250)
  %mul.7805 = f32[1,4096]{1,0} reshape(%rsqrt.173)
  %mul.7806 = f32[1,4096,4096]{2,1,0} broadcast(%mul.7805), dimensions={0,1}
  %mul.7807 = f32[1,4096,4096]{2,1,0} multiply(%convert_element_type.2720, %mul.7806)
  %convert_element_type.2722 = bf16[1,4096,4096]{2,1,0} convert(%mul.7807)
  %get-tuple-element.1150 = bf16[4096]{0} get-tuple-element(%remat2.33), index=5
  %mul.7808 = bf16[1,4096,4096]{2,1,0} broadcast(%get-tuple-element.1150), dimensions={2}
  %mul.7809 = bf16[1,4096,4096]{2,1,0} multiply(%convert_element_type.2722, %mul.7808)
  %sharding_constraint.1967 = bf16[1,4096,4096]{2,1,0} copy(%mul.7809)
  %sharding_constraint.1968 = bf16[1,4096,4096]{2,1,0} copy(%sharding_constraint.1967)
  %get-tuple-element.1151 = bf16[512,32,128]{2,1,0} get-tuple-element(%remat2.33), index=8
  %all-gather.358 = bf16[4096,32,128]{2,1,0} all-gather(%get-tuple-element.1151), channel_id=665, replica_groups=[1,8]<=[8], dimensions={0}, use_global_device_ids=true
  %dot.925 = bf16[1,4096,32,128]{3,2,1,0} dot(%sharding_constraint.1968, %all-gather.358), lhs_contracting_dims={2}, rhs_contracting_dims={0}
  %slice.650 = bf16[1,4096,32,64]{3,2,1,0} slice(%dot.925), slice={[0:1], [0:4096], [0:32], [0:64]}
  %get-tuple-element.1152 = s32[1,4096]{1,0} get-tuple-element(%remat2.33), index=12
  %convert_element_type.2723 = f32[1,4096]{1,0} convert(%get-tuple-element.1152)
  %div.1244 = f32[1,4096,1,64]{3,2,1,0} broadcast(%convert_element_type.2723), dimensions={0,1}
  %div.1247 = f32[1,4096,1,64]{3,2,1,0} divide(%div.1244, %div.402)
  %cos.109 = f32[1,4096,1,64]{3,2,1,0} cosine(%div.1247)
  %convert_element_type.2725 = bf16[1,4096,1,64]{3,2,1,0} convert(%cos.109)
  %mul.7811 = bf16[1,4096,64]{2,1,0} reshape(%convert_element_type.2725)
  %mul.7812 = bf16[1,4096,32,64]{3,2,1,0} broadcast(%mul.7811), dimensions={0,1,3}
  %mul.7813 = bf16[1,4096,32,64]{3,2,1,0} multiply(%slice.650, %mul.7812)
  %slice.651 = bf16[1,4096,32,64]{3,2,1,0} slice(%dot.925), slice={[0:1], [0:4096], [0:32], [64:128]}
  %sin.108 = f32[1,4096,1,64]{3,2,1,0} sine(%div.1247)
  %convert_element_type.2726 = bf16[1,4096,1,64]{3,2,1,0} convert(%sin.108)
  %mul.7814 = bf16[1,4096,64]{2,1,0} reshape(%convert_element_type.2726)
  %mul.7815 = bf16[1,4096,32,64]{3,2,1,0} broadcast(%mul.7814), dimensions={0,1,3}
  %mul.7816 = bf16[1,4096,32,64]{3,2,1,0} multiply(%slice.651, %mul.7815)
  %sub.362 = bf16[1,4096,32,64]{3,2,1,0} subtract(%mul.7813, %mul.7816)
  %mul.7819 = bf16[1,4096,32,64]{3,2,1,0} multiply(%slice.651, %mul.7812)
  %mul.7822 = bf16[1,4096,32,64]{3,2,1,0} multiply(%slice.650, %mul.7815)
  %add.2252 = bf16[1,4096,32,64]{3,2,1,0} add(%mul.7819, %mul.7822)
  %concatenate.545 = bf16[1,4096,32,128]{3,2,1,0} concatenate(%sub.362, %add.2252), dimensions={3}
  %sharding_constraint.1969 = bf16[1,4096,32,128]{3,2,1,0} copy(%concatenate.545)
  %get-tuple-element.1153 = bf16[512,8,128]{2,1,0} get-tuple-element(%remat2.33), index=6
  %all-gather.359 = bf16[4096,8,128]{2,1,0} all-gather(%get-tuple-element.1153), channel_id=666, replica_groups=[1,8]<=[8], dimensions={0}, use_global_device_ids=true
  %dot.926 = bf16[1,4096,8,128]{3,2,1,0} dot(%sharding_constraint.1968, %all-gather.359), lhs_contracting_dims={2}, rhs_contracting_dims={0}
  %slice.652 = bf16[1,4096,8,64]{3,2,1,0} slice(%dot.926), slice={[0:1], [0:4096], [0:8], [0:64]}
  %mul.7825 = bf16[1,4096,8,64]{3,2,1,0} broadcast(%mul.7811), dimensions={0,1,3}
  %mul.7826 = bf16[1,4096,8,64]{3,2,1,0} multiply(%slice.652, %mul.7825)
  %slice.653 = bf16[1,4096,8,64]{3,2,1,0} slice(%dot.926), slice={[0:1], [0:4096], [0:8], [64:128]}
  %mul.7828 = bf16[1,4096,8,64]{3,2,1,0} broadcast(%mul.7814), dimensions={0,1,3}
  %mul.7829 = bf16[1,4096,8,64]{3,2,1,0} multiply(%slice.653, %mul.7828)
  %sub.363 = bf16[1,4096,8,64]{3,2,1,0} subtract(%mul.7826, %mul.7829)
  %mul.7832 = bf16[1,4096,8,64]{3,2,1,0} multiply(%slice.653, %mul.7825)
  %mul.7835 = bf16[1,4096,8,64]{3,2,1,0} multiply(%slice.652, %mul.7828)
  %add.2253 = bf16[1,4096,8,64]{3,2,1,0} add(%mul.7832, %mul.7835)
  %concatenate.546 = bf16[1,4096,8,128]{3,2,1,0} concatenate(%sub.363, %add.2253), dimensions={3}
  %sharding_constraint.1971 = bf16[1,4096,8,128]{3,2,1,0} copy(%concatenate.546)
  %get-tuple-element.1154 = bf16[512,8,128]{2,1,0} get-tuple-element(%remat2.33), index=9
  %all-gather.360 = bf16[4096,8,128]{2,1,0} all-gather(%get-tuple-element.1154), channel_id=667, replica_groups=[1,8]<=[8], dimensions={0}, use_global_device_ids=true
  %dot.927 = bf16[1,4096,8,128]{3,2,1,0} dot(%sharding_constraint.1968, %all-gather.360), lhs_contracting_dims={2}, rhs_contracting_dims={0}
  %sharding_constraint.1972 = bf16[1,4096,8,128]{3,2,1,0} copy(%dot.927)
  %get-tuple-element.1155 = s32[1,4096]{1,0} get-tuple-element(%remat2.33), index=11
  %eq.2402 = s32[1,4096,4096]{2,1,0} broadcast(%get-tuple-element.1155), dimensions={0,1}
  %eq.2403 = s32[1,4096,4096]{2,1,0} broadcast(%get-tuple-element.1155), dimensions={0,2}
  %eq.2404 = pred[1,4096,4096]{2,1,0} compare(%eq.2402, %eq.2403), direction=EQ
  %and.195 = pred[1,4096,4096]{2,1,0} and(%eq.2404, %and.64)
  %select_n.611 = f32[1,4096,4096]{2,1,0} select(%and.195, %broadcast_in_dim.516, %broadcast_in_dim.517)
  %ne.120 = pred[1,4096,4096]{2,1,0} compare(%select_n.611, %broadcast_in_dim.516), direction=NE
  %not.118 = pred[1,4096,4096]{2,1,0} not(%ne.120)
  %convert_element_type.2731 = s32[1,4096,4096]{2,1,0} convert(%not.118)
  %reduce.796 = s32[1,4096]{1,0} reduce(%convert_element_type.2731, %constant.1181), dimensions={1}, to_apply=%region_788.20456
  %reduce_sum.5747 = s32[1,1,1,4096]{3,2,1,0} reshape(%reduce.796)
  %slice.654 = s32[1,1,1,1]{3,2,1,0} slice(%reduce_sum.5747), slice={[0:1], [0:1], [0:1], [0:1]}
  %squeeze.54 = s32[1,1]{1,0} reshape(%slice.654)
  %reshape.12893 = s32[1]{0} reshape(%squeeze.54)
  %lt.207 = pred[1]{0} compare(%reshape.12893, %constant.1418), direction=LT
  %select_n.612 = s32[1]{0} select(%lt.207, %broadcast_in_dim.518, %reshape.12893)
  %concatenate.547 = s32[2]{0} concatenate(%constant.1418, %select_n.612), dimensions={0}
  %reduce.797 = s32[1,4096]{1,0} reduce(%convert_element_type.2731, %constant.1181), dimensions={2}, to_apply=%region_789.20465
  %reduce_sum.5748 = s32[1,1,1,4096]{3,2,1,0} reshape(%reduce.797)
  %reduce.798 = s32[1,1]{1,0} reduce(%reduce_sum.5748, %constant.1415), dimensions={3,2}, to_apply=%region_790.20471
  %reshape.12894 = s32[1]{0} reshape(%reduce.798)
  %lt.208 = pred[1]{0} compare(%reshape.12894, %constant.1418), direction=LT
  %select_n.613 = s32[1]{0} select(%lt.208, %broadcast_in_dim.518, %reshape.12894)
  %concatenate.548 = s32[2]{0} concatenate(%constant.1418, %select_n.613), dimensions={0}
  %te_fused_attn_forward_ffi.216 = (bf16[1,4096,32,128]{3,2,1,0}, f32[1,32,4096,1]{3,2,1,0}, u32[2,4]{1,0}, u8[48]{0}) custom-call(%sharding_constraint.1969, %sharding_constraint.1971, %sharding_constraint.1972, %constant.1403, %dynamic-slice.38, /*index=5*/%concatenate.547, %concatenate.548, %constant.1416, %constant.1416, %constant.1416, /*index=10*/%constant.1416, %constant.1416, %constant.1416), custom_call_target="te_fused_attn_forward_ffi", operand_layout_constraints={bf16[1,4096,32,128]{3,2,1,0}, bf16[1,4096,8,128]{3,2,1,0}, bf16[1,4096,8,128]{3,2,1,0}, bf16[0]{0}, u32[2]{0}, s32[2]{0}, s32[2]{0}, f32[0]{0}, f32[0]{0}, f32[0]{0}, f32[0]{0}, f32[0]{0}, f32[0]{0}}, api_version=API_VERSION_TYPED_FFI, backend_config={attn_heads = 32 : i64, bias_batch = 0 : i64, bias_heads = 0 : i64, bias_type = 0 : i64, deterministic = false, dropout_probability = 0.000000e+00 : f64, input_batch = 1 : i64, is_training = true, kv_max_seqlen = 4096 : i64, mask_type = 3 : i64, max_segments_per_seq = 1 : i64, num_gqa_groups = 8 : i64, q_max_seqlen = 4096 : i64, qk_head_dim = 128 : i64, qkv_layout = 9 : i64, scaling_factor = 1.000000e+00 : f64, v_head_dim = 128 : i64, window_size_left = -1 : i64, window_size_right = -1 : i64}
  %get-tuple-element.1156 = bf16[1,4096,32,128]{3,2,1,0} get-tuple-element(%te_fused_attn_forward_ffi.216), index=0
  %sharding_constraint.1973 = bf16[1,4096,32,128]{3,2,1,0} copy(%get-tuple-element.1156)
  %get-tuple-element.1157 = bf16[32,128,512]{2,1,0} get-tuple-element(%remat2.33), index=7
  %all-gather.361 = bf16[32,128,4096]{2,1,0} all-gather(%get-tuple-element.1157), channel_id=668, replica_groups=[1,8]<=[8], dimensions={2}, use_global_device_ids=true
  %dot.928 = bf16[1,4096,4096]{2,1,0} dot(%sharding_constraint.1973, %all-gather.361), lhs_contracting_dims={2,3}, rhs_contracting_dims={0,1}
  %sharding_constraint.1974 = bf16[1,4096,4096]{2,1,0} copy(%dot.928)
  %add.2254 = bf16[1,4096,4096]{2,1,0} add(%sharding_constraint.1966, %sharding_constraint.1974)
  %convert_element_type.2734 = f32[1,4096,4096]{2,1,0} convert(%add.2254)
  %square.113 = f32[1,4096,4096]{2,1,0} multiply(%convert_element_type.2734, %convert_element_type.2734)
  %reduce.799 = f32[1,4096]{1,0} reduce(%square.113, %constant.1360), dimensions={2}, to_apply=%region_791.20486
  %div.1252 = f32[1,4096]{1,0} multiply(%reduce.799, %broadcast.3412)
  %add.2255 = f32[1,4096]{1,0} add(%div.1252, %broadcast.3413)
  %add.2256 = f32[1,4096,1]{2,1,0} reshape(%add.2255)
  %rsqrt.174 = f32[1,4096,1]{2,1,0} rsqrt(%add.2256)
  %mul.7836 = f32[1,4096]{1,0} reshape(%rsqrt.174)
  %mul.7837 = f32[1,4096,4096]{2,1,0} broadcast(%mul.7836), dimensions={0,1}
  %mul.7838 = f32[1,4096,4096]{2,1,0} multiply(%convert_element_type.2734, %mul.7837)
  %convert_element_type.2735 = bf16[1,4096,4096]{2,1,0} convert(%mul.7838)
  %get-tuple-element.1158 = bf16[4096]{0} get-tuple-element(%remat2.33), index=4
  %mul.7839 = bf16[1,4096,4096]{2,1,0} broadcast(%get-tuple-element.1158), dimensions={2}
  %mul.7840 = bf16[1,4096,4096]{2,1,0} multiply(%convert_element_type.2735, %mul.7839)
  %sharding_constraint.1975 = bf16[1,4096,4096]{2,1,0} copy(%mul.7840)
  %get-tuple-element.1159 = bf16[512,8]{1,0} get-tuple-element(%remat2.33), index=0
  %all-gather.362 = bf16[4096,8]{1,0} all-gather(%get-tuple-element.1159), channel_id=669, replica_groups=[1,8]<=[8], dimensions={0}, use_global_device_ids=true
  %dot.929 = bf16[1,4096,8]{2,1,0} dot(%sharding_constraint.1975, %all-gather.362), lhs_contracting_dims={2}, rhs_contracting_dims={0}
  %sharding_constraint.1976 = bf16[1,4096,8]{2,1,0} copy(%dot.929)
  %top_k.162 = bf16[4096,8]{1,0} reshape(%sharding_constraint.1976)
  %top_k.163 = (bf16[4096,2]{1,0}, s32[4096,2]{1,0}) custom-call(%top_k.162), custom_call_target="TopK", called_computations={%compare_greater_than.54.20507.clone}
  %get-tuple-element.1160 = bf16[4096,2]{1,0} get-tuple-element(%top_k.163), index=0
  %get-tuple-element.1161 = s32[4096,2]{1,0} get-tuple-element(%top_k.163), index=1
  %add.2257 = s32[4096,2]{1,0} add(%get-tuple-element.1161, %broadcast.3418)
  %sort.118 = (bf16[4096,2]{1,0}, s32[4096,2]{1,0}) sort(%get-tuple-element.1160, %add.2257), dimensions={1}, is_stable=true, to_apply=%compare-value-and-index.54
  %get-tuple-element.1163 = s32[4096,2]{1,0} get-tuple-element(%sort.118), index=1
  %slice.656 = s32[4096,2]{1,0} slice(%get-tuple-element.1163), slice={[0:4096], [0:2]}
  %top_k.164 = s32[1,4096,2]{2,1,0} reshape(%slice.656)
  %lt.209 = pred[1,4096,2]{2,1,0} compare(%top_k.164, %broadcast.3419), direction=LT
  %add.2258 = s32[1,4096,2]{2,1,0} add(%top_k.164, %broadcast.3420)
  %select_n.614 = s32[1,4096,2]{2,1,0} select(%lt.209, %add.2258, %top_k.164)
  %broadcast_in_dim.749 = s32[1,4096,2,1]{3,2,1,0} reshape(%select_n.614)
  %concatenate.549 = s32[1,4096,2,3]{3,2,1,0} concatenate(%add.1356, %iota.2745, %broadcast_in_dim.749), dimensions={3}
  %subtract.186 = s32[1,4096,2,3]{3,2,1,0} subtract(%concatenate.549, %broadcast.3428)
  %scatter.259 = u32[1,4096,8]{2,1,0} scatter(%dynamic-slice.43, %subtract.186, %add.1401), update_window_dims={}, inserted_window_dims={0,1,2}, scatter_dims_to_operand_dims={0,1,2}, index_vector_dim=3, to_apply=%region_792.20543.clone
  %gather.76 = u32[1,4096,2]{2,1,0} gather(%scatter.259, %subtract.186), offset_dims={}, collapsed_slice_dims={0,1,2}, start_index_map={0,1,2}, index_vector_dim=3, slice_sizes={1,1,1}
  %eq.2405 = pred[1,4096,2]{2,1,0} compare(%add.1401, %gather.76), direction=EQ
  %get-tuple-element.1162 = bf16[4096,2]{1,0} get-tuple-element(%sort.118), index=0
  %slice.655 = bf16[4096,2]{1,0} slice(%get-tuple-element.1162), slice={[0:4096], [0:2]}
  %convert_element_type.2736 = f32[4096,2]{1,0} convert(%slice.655)
  %convert_element_type.2737 = f32[1,4096,2]{2,1,0} reshape(%convert_element_type.2736)
  %reduce.800 = f32[4096]{0} reduce(%convert_element_type.2736, %constant.1450), dimensions={1}, to_apply=%region_793.20552
  %sub.364 = f32[1,4096]{1,0} reshape(%reduce.800)
  %sub.365 = f32[1,4096,2]{2,1,0} broadcast(%sub.364), dimensions={0,1}
  %sub.366 = f32[1,4096,2]{2,1,0} subtract(%convert_element_type.2737, %sub.365)
  %exp.235 = f32[1,4096,2]{2,1,0} exponential(%sub.366)
  %reduce.801 = f32[1,4096]{1,0} reduce(%exp.235, %constant.1360), dimensions={2}, to_apply=%region_794.20561
  %div.1253 = f32[1,4096,2]{2,1,0} broadcast(%reduce.801), dimensions={0,1}
  %div.1254 = f32[1,4096,2]{2,1,0} divide(%exp.235, %div.1253)
  %convert_element_type.2738 = bf16[1,4096,2]{2,1,0} convert(%div.1254)
  %select_n.615 = bf16[1,4096,2]{2,1,0} select(%eq.2405, %convert_element_type.2738, %broadcast.3427)
  %scatter.260 = bf16[1,4096,8]{2,1,0} scatter(%broadcast.3379, %subtract.186, %select_n.615), update_window_dims={}, inserted_window_dims={0,1,2}, scatter_dims_to_operand_dims={0,1,2}, index_vector_dim=3, to_apply=%region_795.20570.clone
  %eq.2407 = s32[1,4096,2,8]{3,2,1,0} broadcast(%top_k.164), dimensions={0,1,2}
  %iota.2756 = s32[1,4096,2,8]{3,2,1,0} iota(), iota_dimension=3
  %eq.2408 = pred[1,4096,2,8]{3,2,1,0} compare(%eq.2407, %iota.2756), direction=EQ
  %convert_element_type.2739 = s32[1,4096,2,8]{3,2,1,0} convert(%eq.2408)
  %reshape.12926 = s32[1,8192,8]{2,1,0} reshape(%convert_element_type.2739)
  %sharding_constraint.1978 = s32[1,8192,8]{2,1,0} copy(%reshape.12926)
  %reduce-window.54 = s32[1,8192,8]{2,1,0} reduce-window(%sharding_constraint.1978, %constant.1181), window={size=1x8192x1 pad=0_0x8191_0x0_0}, to_apply=%region_796.20582
  %reshape.12928 = s32[1,4096,2,8]{3,2,1,0} reshape(%reduce-window.54)
  %sharding_constraint.1980 = s32[1,4096,2,8]{3,2,1,0} copy(%reshape.12928)
  %le.154 = pred[1,4096,2,8]{3,2,1,0} compare(%sharding_constraint.1980, %broadcast.3429), direction=LE
  %mul.7841 = s32[1,4096,2,8]{3,2,1,0} select(%le.154, %convert_element_type.2739, %broadcast.3430)
  %reduce.802 = s32[1,4096,8]{2,1,0} reduce(%mul.7841, %constant.1181), dimensions={2}, to_apply=%region_797.20591
  %convert_element_type.2740 = bf16[1,4096,8]{2,1,0} convert(%reduce.802)
  %mul.7842 = bf16[1,4096,8]{2,1,0} multiply(%scatter.260, %convert_element_type.2740)
  %mul.7843 = bf16[1,4096,8,1025]{3,2,1,0} broadcast(%mul.7842), dimensions={0,1,2}
  %mul.7844 = s32[1,8192,8]{2,1,0} multiply(%sharding_constraint.1978, %reduce-window.54)
  %reshape.12929 = s32[1,4096,2,8]{3,2,1,0} reshape(%mul.7844)
  %reduce.803 = s32[1,4096,8]{2,1,0} reduce(%reshape.12929, %constant.1181), dimensions={2}, to_apply=%region_798.20601
  %mul.7846 = s32[1,4096,8]{2,1,0} multiply(%reduce.803, %reduce.802)
  %eq.2409 = s32[1,4096,8,1025]{3,2,1,0} broadcast(%mul.7846), dimensions={0,1,2}
  %iota.2757 = s32[1,4096,8,1025]{3,2,1,0} iota(), iota_dimension=3
  %eq.2414 = pred[1,4096,8,1025]{3,2,1,0} compare(%eq.2409, %iota.2757), direction=EQ
  %convert_element_type.2741 = s32[1,4096,8,1025]{3,2,1,0} convert(%eq.2414)
  %convert_element_type.2742 = bf16[1,4096,8,1025]{3,2,1,0} convert(%convert_element_type.2741)
  %mul.7847 = bf16[1,4096,8,1025]{3,2,1,0} multiply(%mul.7843, %convert_element_type.2742)
  %slice.657 = bf16[1,4096,8,1024]{3,2,1,0} slice(%mul.7847), slice={[0:1], [0:4096], [0:8], [1:1025]}
  %convert_element_type.2743 = pred[1,4096,8,1024]{3,2,1,0} compare(%slice.657, %broadcast.3431), direction=NE
  %sharding_constraint.1981 = pred[1,4096,8,1024]{3,2,1,0} copy(%convert_element_type.2743)
  %dot_general.112 = bf16[1,4096,8,1024]{3,2,1,0} convert(%sharding_constraint.1981)
  %dot.930 = bf16[1,8,1024,4096]{3,2,1,0} dot(%dot_general.112, %sharding_constraint.1975), lhs_batch_dims={0}, lhs_contracting_dims={1}, rhs_batch_dims={0}, rhs_contracting_dims={1}
  %reshape.12932 = bf16[1,8,1,1024,4096]{4,3,2,1,0} reshape(%dot.930)
  %all-to-all.152 = bf16[1,8,1,1024,4096]{4,3,2,1,0} all-to-all(%reshape.12932), channel_id=673, replica_groups=[1,8]<=[8], dimensions={1}
  %transpose.255 = bf16[8,1,1,1024,4096]{4,3,2,0,1} transpose(%all-to-all.152), dimensions={1,0,2,3,4}
  %reshape.12933 = bf16[8,1,1024,4096]{3,2,1,0} reshape(%transpose.255)
  %transpose.256 = bf16[1,8,1024,4096]{3,2,0,1} transpose(%reshape.12933), dimensions={1,0,2,3}
  %sharding_constraint.1984 = bf16[1,8,1024,4096]{3,2,0,1} copy(%transpose.256)
  %get-tuple-element.1166 = bf16[1,4096,14336]{2,1,0} get-tuple-element(%remat2.33), index=1
  %sharding_constraint.1985 = bf16[1,4096,14336]{2,1,0} copy(%get-tuple-element.1166)
  %dot.931 = bf16[1,8,1024,14336]{3,2,1,0} dot(%sharding_constraint.1984, %sharding_constraint.1985), lhs_batch_dims={0}, lhs_contracting_dims={3}, rhs_batch_dims={0}, rhs_contracting_dims={1}
  %sharding_constraint.1986 = bf16[1,8,1024,14336]{3,2,1,0} copy(%dot.931)
  %neg.278 = bf16[1,8,1024,14336]{3,2,1,0} negate(%sharding_constraint.1986)
  %exp.236 = bf16[1,8,1024,14336]{3,2,1,0} exponential(%neg.278)
  %add.2263 = bf16[1,8,1024,14336]{3,2,1,0} add(%exp.236, %jit_silu_.0)
  %div.1255 = bf16[1,8,1024,14336]{3,2,1,0} divide(%jit_silu_.0, %add.2263)
  %mul.7848 = bf16[1,8,1024,14336]{3,2,1,0} multiply(%sharding_constraint.1986, %div.1255)
  %sharding_constraint.1987 = bf16[1,4096,4096]{2,1,0} copy(%sharding_constraint.1965)
  %sharding_constraint.1988 = bf16[1,4096,8,1024]{3,2,1,0} copy(%slice.657)
  %dot.932 = bf16[1,4096,8,1024]{3,2,1,0} dot(%sharding_constraint.1987, %sharding_constraint.1988), lhs_batch_dims={0}, lhs_contracting_dims={1}, rhs_batch_dims={0}, rhs_contracting_dims={1}
  %reshape.12936 = bf16[1,4096,8,1,1024]{4,3,2,1,0} reshape(%dot.932)
  %all-to-all.153 = bf16[1,4096,8,1,1024]{4,3,2,1,0} all-to-all(%reshape.12936), channel_id=674, replica_groups=[1,8]<=[8], dimensions={2}
  %transpose.257 = bf16[8,1,4096,1,1024]{4,3,0,2,1} transpose(%all-to-all.153), dimensions={2,0,1,3,4}
  %reshape.12937 = bf16[8,4096,1,1024]{3,2,1,0} reshape(%transpose.257)
  %transpose.258 = bf16[1,8,1024,4096]{2,0,3,1} transpose(%reshape.12937), dimensions={2,0,3,1}
  %sharding_constraint.1989 = bf16[1,8,1024,4096]{2,0,3,1} copy(%transpose.258)
  %get-tuple-element.1167 = bf16[1,14336,4096]{2,1,0} get-tuple-element(%remat2.33), index=3
  %sharding_constraint.1990 = bf16[1,14336,4096]{2,1,0} copy(%get-tuple-element.1167)
  %dot.933 = bf16[1,8,1024,14336]{3,2,1,0} dot(%sharding_constraint.1989, %sharding_constraint.1990), lhs_batch_dims={0}, lhs_contracting_dims={3}, rhs_batch_dims={0}, rhs_contracting_dims={2}
  %mul.7849 = bf16[1,8,1024,14336]{3,2,1,0} multiply(%mul.7848, %dot.933)
  %sharding_constraint.1991 = bf16[1,8,1024,14336]{3,2,1,0} copy(%mul.7849)
  %get-tuple-element.1168 = bf16[1,4096,14336]{2,1,0} get-tuple-element(%remat2.33), index=2
  %sharding_constraint.1992 = bf16[1,4096,14336]{2,1,0} copy(%get-tuple-element.1168)
  %dot.934 = bf16[1,8,1024,4096]{3,2,1,0} dot(%sharding_constraint.1991, %sharding_constraint.1992), lhs_batch_dims={0}, lhs_contracting_dims={3}, rhs_batch_dims={0}, rhs_contracting_dims={2}
  %dot.935 = bf16[1,8,1024,14336]{3,2,1,0} dot(%sharding_constraint.1984, %sharding_constraint.1992), lhs_batch_dims={0}, lhs_contracting_dims={3}, rhs_batch_dims={0}, rhs_contracting_dims={1}
  %sharding_constraint.1993 = bf16[1,8,1024,14336]{3,2,1,0} copy(%dot.935)
  %mul.7850 = bf16[1,8,1024,14336]{3,2,1,0} multiply(%dot.933, %sharding_constraint.1993)
  %mul.7851 = bf16[1,8,1024,14336]{3,2,1,0} multiply(%mul.7850, %div.1255)
  %mul.7855 = bf16[1,8,1024,14336]{3,2,1,0} multiply(%sharding_constraint.1986, %mul.7850)
  %sub.367 = bf16[1,8,1024,14336]{3,2,1,0} subtract(%jit_silu_.0, %div.1255)
  %mul.7856 = bf16[1,8,1024,14336]{3,2,1,0} multiply(%div.1255, %sub.367)
  %mul.7857 = bf16[1,8,1024,14336]{3,2,1,0} multiply(%mul.7855, %mul.7856)
  %add_any.375 = bf16[1,8,1024,14336]{3,2,1,0} add(%mul.7851, %mul.7857)
  %sharding_constraint.1994 = bf16[1,8,1024,14336]{3,2,1,0} copy(%add_any.375)
  %dot.936 = bf16[1,8,1024,4096]{3,2,1,0} dot(%sharding_constraint.1994, %sharding_constraint.1985), lhs_batch_dims={0}, lhs_contracting_dims={3}, rhs_batch_dims={0}, rhs_contracting_dims={2}
  %add_any.376 = bf16[1,8,1024,4096]{3,2,1,0} add(%dot.934, %dot.936)
  %sharding_constraint.1995 = bf16[1,8,1024,4096]{3,2,1,0} copy(%add_any.376)
  %transpose.259 = bf16[8,1,1024,4096]{3,2,0,1} transpose(%sharding_constraint.1995), dimensions={1,0,2,3}
  %reshape.12946 = bf16[8,1,1,1024,4096]{4,3,2,1,0} reshape(%transpose.259)
  %all-to-all.154 = bf16[8,1,1,1024,4096]{4,3,2,1,0} all-to-all(%reshape.12946), channel_id=675, replica_groups=[1,8]<=[8], dimensions={0}
  %transpose.260 = bf16[1,8,1,1024,4096]{4,3,2,0,1} transpose(%all-to-all.154), dimensions={1,0,2,3,4}
  %reshape.12947 = bf16[1,8,1024,4096]{3,2,1,0} reshape(%transpose.260)
  %dot.937 = bf16[1,4096,4096]{2,1,0} dot(%dot_general.112, %reshape.12947), lhs_batch_dims={0}, lhs_contracting_dims={2,3}, rhs_batch_dims={0}, rhs_contracting_dims={1,2}
  %reshape.12955 = s32[1,4096,2,1]{3,2,1,0} reshape(%slice.656)
  %ge.22 = pred[1,4096,2,3]{3,2,1,0} compare(%concatenate.549, %broadcast.3629), direction=GE
  %le.156 = pred[1,4096,2,3]{3,2,1,0} compare(%concatenate.549, %le.67), direction=LE
  %and.196 = pred[1,4096,2,3]{3,2,1,0} and(%ge.22, %le.156)
  %reduce.804 = pred[1,4096,2]{2,1,0} reduce(%and.196, %constant.5574), dimensions={3}, to_apply=%region_799.20658
  %mul.7858 = bf16[1,8,1024,14336]{3,2,1,0} multiply(%mul.7848, %sharding_constraint.1993)
  %dot.938 = bf16[1,8,1024,4096]{3,2,1,0} dot(%mul.7858, %sharding_constraint.1990), lhs_batch_dims={0}, lhs_contracting_dims={3}, rhs_batch_dims={0}, rhs_contracting_dims={1}
  %sharding_constraint.1996 = bf16[1,8,1024,4096]{3,2,1,0} copy(%dot.938)
  %reshape.12962 = bf16[1,8,1,1024,4096]{4,3,2,1,0} reshape(%sharding_constraint.1996)
  %all-to-all.155 = bf16[1,8,1,1024,4096]{4,3,2,1,0} all-to-all(%reshape.12962), channel_id=676, replica_groups=[1,8]<=[8], dimensions={1}
  %transpose.261 = bf16[8,1,1,1024,4096]{4,3,2,0,1} transpose(%all-to-all.155), dimensions={1,0,2,3,4}
  %reshape.12963 = bf16[8,1,1024,4096]{3,2,1,0} reshape(%transpose.261)
  %dot.939 = bf16[1,4096,8,1024]{3,2,1,0} dot(%sharding_constraint.1987, %reshape.12963), lhs_batch_dims={0}, lhs_contracting_dims={2}, rhs_batch_dims={1}, rhs_contracting_dims={3}
  %sharding_constraint.1997 = bf16[1,4096,8,1024]{3,2,1,0} copy(%dot.939)
  %pad.22 = bf16[1,4096,8,1025]{3,2,1,0} pad(%sharding_constraint.1997, %constant.1190), padding=0_0x0_0x0_0x1_0
  %mul.7859 = bf16[1,4096,8,1025]{3,2,1,0} multiply(%pad.22, %convert_element_type.2742)
  %reduce.805 = bf16[1,4096,8]{2,1,0} reduce(%mul.7859, %constant.1190), dimensions={3}, to_apply=%region_800.20670
  %mul.7860 = bf16[1,4096,8]{2,1,0} multiply(%reduce.805, %convert_element_type.2740)
  %gather.77 = bf16[1,4096,2]{2,1,0} gather(%mul.7860, %subtract.186), offset_dims={}, collapsed_slice_dims={0,1,2}, start_index_map={0,1,2}, index_vector_dim=3, slice_sizes={1,1,1}
  %select_n.616 = bf16[1,4096,2]{2,1,0} select(%reduce.804, %gather.77, %broadcast.3427)
  %select_n.617 = bf16[1,4096,2]{2,1,0} select(%eq.2405, %select_n.616, %broadcast.3427)
  %convert_element_type.2744 = f32[1,4096,2]{2,1,0} convert(%select_n.617)
  %div.1257 = f32[1,4096,2]{2,1,0} divide(%convert_element_type.2744, %div.1253)
  %mul.7863 = f32[1,4096]{1,0} multiply(%reduce.801, %reduce.801)
  %div.1258 = f32[1,4096]{1,0} divide(%add.1847, %mul.7863)
  %mul.7864 = f32[1,4096,2]{2,1,0} broadcast(%div.1258), dimensions={0,1}
  %mul.7865 = f32[1,4096,2]{2,1,0} multiply(%convert_element_type.2744, %mul.7864)
  %mul.7866 = f32[1,4096,2]{2,1,0} multiply(%mul.7865, %exp.235)
  %reduce.806 = f32[1,4096]{1,0} reduce(%mul.7866, %constant.1360), dimensions={2}, to_apply=%region_801.20687
  %neg.279 = f32[1,4096]{1,0} negate(%reduce.806)
  %broadcast_in_dim.750 = f32[1,4096,2]{2,1,0} broadcast(%neg.279), dimensions={0,1}
  %add_any.377 = f32[1,4096,2]{2,1,0} add(%div.1257, %broadcast_in_dim.750)
  %mul.7868 = f32[1,4096,2]{2,1,0} multiply(%add_any.377, %exp.235)
  %convert_element_type.2745 = bf16[1,4096,2]{2,1,0} convert(%mul.7868)
  %scatter.261 = bf16[1,4096,8]{2,1,0} scatter(%broadcast.3379, %reshape.12955, %convert_element_type.2745), update_window_dims={}, inserted_window_dims={2}, scatter_dims_to_operand_dims={2}, input_batching_dims={0,1}, scatter_indices_batching_dims={0,1}, index_vector_dim=3, to_apply=%region_802.20697.clone
  %sharding_constraint.1998 = bf16[1,4096,8]{2,1,0} copy(%scatter.261)
  %dot.940 = bf16[1,4096,4096]{2,1,0} dot(%sharding_constraint.1998, %all-gather.362), lhs_contracting_dims={2}, rhs_contracting_dims={1}
  %add_any.378 = bf16[1,4096,4096]{2,1,0} add(%dot.937, %dot.940)
  %sharding_constraint.1999 = bf16[1,4096,4096]{2,1,0} copy(%add_any.378)
  %mul.7871 = bf16[1,4096,4096]{2,1,0} multiply(%sharding_constraint.1999, %mul.7839)
  %convert_element_type.2746 = f32[1,4096,4096]{2,1,0} convert(%mul.7871)
  %mul.7878 = f32[1,4096,4096]{2,1,0} multiply(%convert_element_type.2746, %mul.7837)
  %mul.7879 = f32[1,4096,4096]{2,1,0} multiply(%convert_element_type.2734, %convert_element_type.2746)
  %reduce.807 = f32[1,4096]{1,0} reduce(%mul.7879, %constant.1360), dimensions={2}, to_apply=%region_803.20713
  %reshape.12975 = f32[1,4096,1]{2,1,0} reshape(%reduce.807)
  %div.1259 = f32[1,4096,1]{2,1,0} divide(%rsqrt.174, %add.2256)
  %mul.7880 = f32[1,4096,1]{2,1,0} multiply(%div.1259, %broadcast.3620)
  %mul.7881 = f32[1,4096,1]{2,1,0} multiply(%reshape.12975, %mul.7880)
  %mul.7882 = f32[1,4096,1]{2,1,0} multiply(%mul.7881, %mul.4455)
  %mul.7884 = f32[1,4096]{1,0} reshape(%mul.7882)
  %mul.7885 = f32[1,4096,4096]{2,1,0} broadcast(%mul.7884), dimensions={0,1}
  %mul.7886 = f32[1,4096,4096]{2,1,0} multiply(%convert_element_type.2734, %mul.7885)
  %add_any.379 = f32[1,4096,4096]{2,1,0} add(%mul.7878, %mul.7886)
  %convert_element_type.2749 = bf16[1,4096,4096]{2,1,0} convert(%add_any.379)
  %add_any.380 = bf16[1,4096,4096]{2,1,0} add(%sharding_constraint.1965, %convert_element_type.2749)
  %get-tuple-element.1169 = f32[1,32,4096,1]{3,2,1,0} get-tuple-element(%te_fused_attn_forward_ffi.216), index=1
  %get-tuple-element.1170 = u32[2,4]{1,0} get-tuple-element(%te_fused_attn_forward_ffi.216), index=2
  %sharding_constraint.2000 = u32[2,4]{1,0} copy(%get-tuple-element.1170)
  %sharding_constraint.2001 = bf16[1,4096,4096]{2,1,0} copy(%add_any.380)
  %dot.941 = bf16[1,4096,32,128]{3,2,1,0} dot(%sharding_constraint.2001, %all-gather.361), lhs_contracting_dims={2}, rhs_contracting_dims={2}
  %sharding_constraint.2003 = bf16[1,4096,32,128]{3,2,1,0} copy(%dot.941)
  %te_fused_attn_backward_ffi.110 = (bf16[1,4096,32,128]{3,2,1,0}, bf16[1,4096,8,128]{3,2,1,0}, bf16[1,4096,8,128]{3,2,1,0}, bf16[0]{0}, u8[134742064]{0}) custom-call(%sharding_constraint.1969, %sharding_constraint.1971, %sharding_constraint.1972, %constant.1403, %get-tuple-element.1169, /*index=5*/%sharding_constraint.2000, %get-tuple-element.1156, %sharding_constraint.2003, %concatenate.547, %concatenate.548, /*index=10*/%constant.1416, %constant.1416, %constant.1416, %constant.1416, %constant.1416, /*index=15*/%constant.1416), custom_call_target="te_fused_attn_backward_ffi", operand_layout_constraints={bf16[1,4096,32,128]{3,2,1,0}, bf16[1,4096,8,128]{3,2,1,0}, bf16[1,4096,8,128]{3,2,1,0}, bf16[0]{0}, f32[1,32,4096,1]{3,2,1,0}, u32[2,4]{1,0}, bf16[1,4096,32,128]{3,2,1,0}, bf16[1,4096,32,128]{3,2,1,0}, s32[2]{0}, s32[2]{0}, f32[0]{0}, f32[0]{0}, f32[0]{0}, f32[0]{0}, f32[0]{0}, f32[0]{0}}, api_version=API_VERSION_TYPED_FFI, backend_config={attn_heads = 32 : i64, bias_batch = 0 : i64, bias_heads = 0 : i64, bias_type = 0 : i64, deterministic = false, dropout_probability = 0.000000e+00 : f64, input_batch = 1 : i64, is_training = true, kv_max_seqlen = 4096 : i64, mask_type = 3 : i64, max_segments_per_seq = 1 : i64, num_gqa_groups = 8 : i64, q_max_seqlen = 4096 : i64, qk_head_dim = 128 : i64, qkv_layout = 9 : i64, scaling_factor = 1.000000e+00 : f64, v_head_dim = 128 : i64, window_size_left = -1 : i64, window_size_right = -1 : i64}
  %get-tuple-element.1171 = bf16[1,4096,8,128]{3,2,1,0} get-tuple-element(%te_fused_attn_backward_ffi.110), index=2
  %sharding_constraint.2005 = bf16[1,4096,8,128]{3,2,1,0} copy(%get-tuple-element.1171)
  %dot.942 = bf16[1,4096,4096]{2,1,0} dot(%sharding_constraint.2005, %all-gather.360), lhs_contracting_dims={2,3}, rhs_contracting_dims={1,2}
  %get-tuple-element.1172 = bf16[1,4096,8,128]{3,2,1,0} get-tuple-element(%te_fused_attn_backward_ffi.110), index=1
  %sharding_constraint.2006 = bf16[1,4096,8,128]{3,2,1,0} copy(%get-tuple-element.1172)
  %slice.658 = bf16[1,4096,8,64]{3,2,1,0} slice(%sharding_constraint.2006), slice={[0:1], [0:4096], [0:8], [64:128]}
  %mul.7890 = bf16[1,4096,8,64]{3,2,1,0} multiply(%slice.658, %mul.7828)
  %slice.659 = bf16[1,4096,8,64]{3,2,1,0} slice(%sharding_constraint.2006), slice={[0:1], [0:4096], [0:8], [0:64]}
  %mul.7894 = bf16[1,4096,8,64]{3,2,1,0} multiply(%slice.659, %mul.7825)
  %add_any.381 = bf16[1,4096,8,64]{3,2,1,0} add(%mul.7890, %mul.7894)
  %mul.7897 = bf16[1,4096,8,64]{3,2,1,0} multiply(%slice.658, %mul.7825)
  %neg.280 = bf16[1,4096,8,64]{3,2,1,0} negate(%slice.659)
  %mul.7900 = bf16[1,4096,8,64]{3,2,1,0} multiply(%neg.280, %mul.7828)
  %add_any.382 = bf16[1,4096,8,64]{3,2,1,0} add(%mul.7897, %mul.7900)
  %concatenate.556 = bf16[1,4096,8,128]{3,2,1,0} concatenate(%add_any.381, %add_any.382), dimensions={3}
  %dot.943 = bf16[1,4096,4096]{2,1,0} dot(%concatenate.556, %all-gather.359), lhs_contracting_dims={2,3}, rhs_contracting_dims={1,2}
  %add_any.383 = bf16[1,4096,4096]{2,1,0} add(%dot.942, %dot.943)
  %sharding_constraint.2007 = bf16[1,4096,4096]{2,1,0} copy(%add_any.383)
  %get-tuple-element.1173 = bf16[1,4096,32,128]{3,2,1,0} get-tuple-element(%te_fused_attn_backward_ffi.110), index=0
  %sharding_constraint.2008 = bf16[1,4096,32,128]{3,2,1,0} copy(%get-tuple-element.1173)
  %slice.660 = bf16[1,4096,32,64]{3,2,1,0} slice(%sharding_constraint.2008), slice={[0:1], [0:4096], [0:32], [64:128]}
  %mul.7903 = bf16[1,4096,32,64]{3,2,1,0} multiply(%slice.660, %mul.7815)
  %slice.661 = bf16[1,4096,32,64]{3,2,1,0} slice(%sharding_constraint.2008), slice={[0:1], [0:4096], [0:32], [0:64]}
  %mul.7908 = bf16[1,4096,32,64]{3,2,1,0} multiply(%slice.661, %mul.7812)
  %add_any.384 = bf16[1,4096,32,64]{3,2,1,0} add(%mul.7903, %mul.7908)
  %mul.7917 = bf16[1,4096,32,64]{3,2,1,0} multiply(%slice.660, %mul.7812)
  %neg.281 = bf16[1,4096,32,64]{3,2,1,0} negate(%slice.661)
  %mul.7924 = bf16[1,4096,32,64]{3,2,1,0} multiply(%neg.281, %mul.7815)
  %add_any.385 = bf16[1,4096,32,64]{3,2,1,0} add(%mul.7917, %mul.7924)
  %concatenate.557 = bf16[1,4096,32,128]{3,2,1,0} concatenate(%add_any.384, %add_any.385), dimensions={3}
  %dot.944 = bf16[1,4096,4096]{2,1,0} dot(%concatenate.557, %all-gather.358), lhs_contracting_dims={2,3}, rhs_contracting_dims={1,2}
  %sharding_constraint.2009 = bf16[1,4096,4096]{2,1,0} copy(%dot.944)
  %add_any.386 = bf16[1,4096,4096]{2,1,0} add(%sharding_constraint.2007, %sharding_constraint.2009)
  %sharding_constraint.2010 = bf16[1,4096,4096]{2,1,0} copy(%add_any.386)
  %mul.7929 = bf16[1,4096,4096]{2,1,0} multiply(%sharding_constraint.2010, %mul.7808)
  %convert_element_type.2750 = f32[1,4096,4096]{2,1,0} convert(%mul.7929)
  %mul.7942 = f32[1,4096,4096]{2,1,0} multiply(%convert_element_type.2750, %mul.7806)
  %mul.7943 = f32[1,4096,4096]{2,1,0} multiply(%convert_element_type.2720, %convert_element_type.2750)
  %reduce.808 = f32[1,4096]{1,0} reduce(%mul.7943, %constant.1360), dimensions={2}, to_apply=%region_804.20792
  %reshape.12982 = f32[1,4096,1]{2,1,0} reshape(%reduce.808)
  %div.1260 = f32[1,4096,1]{2,1,0} divide(%rsqrt.173, %add.2250)
  %mul.7944 = f32[1,4096,1]{2,1,0} multiply(%div.1260, %broadcast.3620)
  %mul.7945 = f32[1,4096,1]{2,1,0} multiply(%reshape.12982, %mul.7944)
  %mul.7946 = f32[1,4096,1]{2,1,0} multiply(%mul.7945, %mul.4455)
  %mul.7947 = f32[1,4096]{1,0} reshape(%mul.7946)
  %mul.7948 = f32[1,4096,4096]{2,1,0} broadcast(%mul.7947), dimensions={0,1}
  %mul.7957 = f32[1,4096,4096]{2,1,0} multiply(%convert_element_type.2720, %mul.7948)
  %add_any.387 = f32[1,4096,4096]{2,1,0} add(%mul.7942, %mul.7957)
  %convert_element_type.2751 = bf16[1,4096,4096]{2,1,0} convert(%add_any.387)
  %add_any.388 = bf16[1,4096,4096]{2,1,0} add(%add_any.380, %convert_element_type.2751)
  %sharding_constraint.2011 = bf16[1,4096,4096]{2,1,0} copy(%add_any.388)
  %tuple.315 = (bf16[512,8]{1,0}, bf16[1,4096,14336]{2,1,0}, bf16[1,4096,14336]{2,1,0}, bf16[1,14336,4096]{2,1,0}, bf16[4096]{0}, /*index=5*/bf16[4096]{0}, bf16[512,8,128]{2,1,0}, bf16[32,128,512]{2,1,0}, bf16[512,32,128]{2,1,0}, bf16[512,8,128]{2,1,0}, /*index=10*/bf16[1,4096,4096]{2,1,0}, s32[1,4096]{1,0}, s32[1,4096]{1,0}, bf16[1,4096,4096]{2,1,0}) tuple(%param.93, %param.94, %param.95, %param.96, %param.92, /*index=5*/%param.87, %param.89, %param.91, %param.88, %param.90, /*index=10*/%sharding_constraint.354, %param.10, %param.7, %sharding_constraint.2011)
  %remat2.34 = (bf16[512,8]{1,0}, bf16[1,4096,14336]{2,1,0}, bf16[1,4096,14336]{2,1,0}, bf16[1,14336,4096]{2,1,0}, bf16[4096]{0}, /*index=5*/bf16[4096]{0}, bf16[512,8,128]{2,1,0}, bf16[32,128,512]{2,1,0}, bf16[512,32,128]{2,1,0}, bf16[512,8,128]{2,1,0}, /*index=10*/bf16[1,4096,4096]{2,1,0}, s32[1,4096]{1,0}, s32[1,4096]{1,0}, bf16[1,4096,4096]{2,1,0}) opt-barrier(%tuple.315)
  %get-tuple-element.1174 = bf16[1,4096,4096]{2,1,0} get-tuple-element(%remat2.34), index=13
  %sharding_constraint.2012 = bf16[1,4096,4096]{2,1,0} copy(%get-tuple-element.1174)
  %iota.2763 = s32[1,4096,2,1]{3,2,1,0} iota(), iota_dimension=1
  %get-tuple-element.1175 = bf16[1,4096,4096]{2,1,0} get-tuple-element(%remat2.34), index=10
  %sharding_constraint.2013 = bf16[1,4096,4096]{2,1,0} copy(%get-tuple-element.1175)
  %convert_element_type.2752 = f32[1,4096,4096]{2,1,0} convert(%sharding_constraint.2013)
  %square.114 = f32[1,4096,4096]{2,1,0} multiply(%convert_element_type.2752, %convert_element_type.2752)
  %reduce.809 = f32[1,4096]{1,0} reduce(%square.114, %constant.1360), dimensions={2}, to_apply=%region_805.20834
  %div.1261 = f32[1,4096]{1,0} multiply(%reduce.809, %broadcast.3412)
  %add.2267 = f32[1,4096]{1,0} add(%div.1261, %broadcast.3413)
  %add.2268 = f32[1,4096,1]{2,1,0} reshape(%add.2267)
  %rsqrt.175 = f32[1,4096,1]{2,1,0} rsqrt(%add.2268)
  %mul.7968 = f32[1,4096]{1,0} reshape(%rsqrt.175)
  %mul.7975 = f32[1,4096,4096]{2,1,0} broadcast(%mul.7968), dimensions={0,1}
  %mul.7976 = f32[1,4096,4096]{2,1,0} multiply(%convert_element_type.2752, %mul.7975)
  %convert_element_type.2753 = bf16[1,4096,4096]{2,1,0} convert(%mul.7976)
  %get-tuple-element.1176 = bf16[4096]{0} get-tuple-element(%remat2.34), index=5
  %mul.7977 = bf16[1,4096,4096]{2,1,0} broadcast(%get-tuple-element.1176), dimensions={2}
  %mul.7978 = bf16[1,4096,4096]{2,1,0} multiply(%convert_element_type.2753, %mul.7977)
  %sharding_constraint.2014 = bf16[1,4096,4096]{2,1,0} copy(%mul.7978)
  %sharding_constraint.2016 = bf16[1,4096,4096]{2,1,0} copy(%sharding_constraint.2014)
  %get-tuple-element.1177 = bf16[512,32,128]{2,1,0} get-tuple-element(%remat2.34), index=8
  %all-gather.364 = bf16[4096,32,128]{2,1,0} all-gather(%get-tuple-element.1177), channel_id=679, replica_groups=[1,8]<=[8], dimensions={0}, use_global_device_ids=true
  %dot.945 = bf16[1,4096,32,128]{3,2,1,0} dot(%sharding_constraint.2016, %all-gather.364), lhs_contracting_dims={2}, rhs_contracting_dims={0}
  %slice.662 = bf16[1,4096,32,64]{3,2,1,0} slice(%dot.945), slice={[0:1], [0:4096], [0:32], [0:64]}
  %get-tuple-element.1178 = s32[1,4096]{1,0} get-tuple-element(%remat2.34), index=12
  %convert_element_type.2754 = f32[1,4096]{1,0} convert(%get-tuple-element.1178)
  %div.1262 = f32[1,4096,1,64]{3,2,1,0} broadcast(%convert_element_type.2754), dimensions={0,1}
  %div.1265 = f32[1,4096,1,64]{3,2,1,0} divide(%div.1262, %div.402)
  %cos.111 = f32[1,4096,1,64]{3,2,1,0} cosine(%div.1265)
  %convert_element_type.2756 = bf16[1,4096,1,64]{3,2,1,0} convert(%cos.111)
  %mul.7980 = bf16[1,4096,64]{2,1,0} reshape(%convert_element_type.2756)
  %mul.7981 = bf16[1,4096,32,64]{3,2,1,0} broadcast(%mul.7980), dimensions={0,1,3}
  %mul.7982 = bf16[1,4096,32,64]{3,2,1,0} multiply(%slice.662, %mul.7981)
  %slice.663 = bf16[1,4096,32,64]{3,2,1,0} slice(%dot.945), slice={[0:1], [0:4096], [0:32], [64:128]}
  %sin.110 = f32[1,4096,1,64]{3,2,1,0} sine(%div.1265)
  %convert_element_type.2757 = bf16[1,4096,1,64]{3,2,1,0} convert(%sin.110)
  %mul.7983 = bf16[1,4096,64]{2,1,0} reshape(%convert_element_type.2757)
  %mul.7984 = bf16[1,4096,32,64]{3,2,1,0} broadcast(%mul.7983), dimensions={0,1,3}
  %mul.7985 = bf16[1,4096,32,64]{3,2,1,0} multiply(%slice.663, %mul.7984)
  %sub.368 = bf16[1,4096,32,64]{3,2,1,0} subtract(%mul.7982, %mul.7985)
  %mul.7988 = bf16[1,4096,32,64]{3,2,1,0} multiply(%slice.663, %mul.7981)
  %mul.8007 = bf16[1,4096,32,64]{3,2,1,0} multiply(%slice.662, %mul.7984)
  %add.2269 = bf16[1,4096,32,64]{3,2,1,0} add(%mul.7988, %mul.8007)
  %concatenate.558 = bf16[1,4096,32,128]{3,2,1,0} concatenate(%sub.368, %add.2269), dimensions={3}
  %sharding_constraint.2018 = bf16[1,4096,32,128]{3,2,1,0} copy(%concatenate.558)
  %get-tuple-element.1179 = bf16[512,8,128]{2,1,0} get-tuple-element(%remat2.34), index=6
  %all-gather.365 = bf16[4096,8,128]{2,1,0} all-gather(%get-tuple-element.1179), channel_id=680, replica_groups=[1,8]<=[8], dimensions={0}, use_global_device_ids=true
  %dot.946 = bf16[1,4096,8,128]{3,2,1,0} dot(%sharding_constraint.2016, %all-gather.365), lhs_contracting_dims={2}, rhs_contracting_dims={0}
  %slice.664 = bf16[1,4096,8,64]{3,2,1,0} slice(%dot.946), slice={[0:1], [0:4096], [0:8], [0:64]}
  %mul.8010 = bf16[1,4096,8,64]{3,2,1,0} broadcast(%mul.7980), dimensions={0,1,3}
  %mul.8011 = bf16[1,4096,8,64]{3,2,1,0} multiply(%slice.664, %mul.8010)
  %slice.665 = bf16[1,4096,8,64]{3,2,1,0} slice(%dot.946), slice={[0:1], [0:4096], [0:8], [64:128]}
  %mul.8013 = bf16[1,4096,8,64]{3,2,1,0} broadcast(%mul.7983), dimensions={0,1,3}
  %mul.8014 = bf16[1,4096,8,64]{3,2,1,0} multiply(%slice.665, %mul.8013)
  %sub.369 = bf16[1,4096,8,64]{3,2,1,0} subtract(%mul.8011, %mul.8014)
  %mul.8017 = bf16[1,4096,8,64]{3,2,1,0} multiply(%slice.665, %mul.8010)
  %mul.8020 = bf16[1,4096,8,64]{3,2,1,0} multiply(%slice.664, %mul.8013)
  %add.2270 = bf16[1,4096,8,64]{3,2,1,0} add(%mul.8017, %mul.8020)
  %concatenate.559 = bf16[1,4096,8,128]{3,2,1,0} concatenate(%sub.369, %add.2270), dimensions={3}
  %sharding_constraint.2020 = bf16[1,4096,8,128]{3,2,1,0} copy(%concatenate.559)
  %get-tuple-element.1180 = bf16[512,8,128]{2,1,0} get-tuple-element(%remat2.34), index=9
  %all-gather.366 = bf16[4096,8,128]{2,1,0} all-gather(%get-tuple-element.1180), channel_id=681, replica_groups=[1,8]<=[8], dimensions={0}, use_global_device_ids=true
  %dot.947 = bf16[1,4096,8,128]{3,2,1,0} dot(%sharding_constraint.2016, %all-gather.366), lhs_contracting_dims={2}, rhs_contracting_dims={0}
  %sharding_constraint.2021 = bf16[1,4096,8,128]{3,2,1,0} copy(%dot.947)
  %get-tuple-element.1181 = s32[1,4096]{1,0} get-tuple-element(%remat2.34), index=11
  %eq.2416 = s32[1,4096,4096]{2,1,0} broadcast(%get-tuple-element.1181), dimensions={0,1}
  %eq.2417 = s32[1,4096,4096]{2,1,0} broadcast(%get-tuple-element.1181), dimensions={0,2}
  %eq.2418 = pred[1,4096,4096]{2,1,0} compare(%eq.2416, %eq.2417), direction=EQ
  %and.198 = pred[1,4096,4096]{2,1,0} and(%eq.2418, %and.64)
  %select_n.620 = f32[1,4096,4096]{2,1,0} select(%and.198, %broadcast_in_dim.516, %broadcast_in_dim.517)
  %ne.121 = pred[1,4096,4096]{2,1,0} compare(%select_n.620, %broadcast_in_dim.516), direction=NE
  %not.119 = pred[1,4096,4096]{2,1,0} not(%ne.121)
  %convert_element_type.2764 = s32[1,4096,4096]{2,1,0} convert(%not.119)
  %reduce.810 = s32[1,4096]{1,0} reduce(%convert_element_type.2764, %constant.1181), dimensions={1}, to_apply=%region_806.20930
  %reduce_sum.5749 = s32[1,1,1,4096]{3,2,1,0} reshape(%reduce.810)
  %slice.666 = s32[1,1,1,1]{3,2,1,0} slice(%reduce_sum.5749), slice={[0:1], [0:1], [0:1], [0:1]}
  %squeeze.55 = s32[1,1]{1,0} reshape(%slice.666)
  %reshape.12989 = s32[1]{0} reshape(%squeeze.55)
  %lt.212 = pred[1]{0} compare(%reshape.12989, %constant.1418), direction=LT
  %select_n.621 = s32[1]{0} select(%lt.212, %broadcast_in_dim.518, %reshape.12989)
  %concatenate.560 = s32[2]{0} concatenate(%constant.1418, %select_n.621), dimensions={0}
  %reduce.811 = s32[1,4096]{1,0} reduce(%convert_element_type.2764, %constant.1181), dimensions={2}, to_apply=%region_807.20939
  %reduce_sum.5750 = s32[1,1,1,4096]{3,2,1,0} reshape(%reduce.811)
  %reduce.812 = s32[1,1]{1,0} reduce(%reduce_sum.5750, %constant.1415), dimensions={3,2}, to_apply=%region_808.20945
  %reshape.12990 = s32[1]{0} reshape(%reduce.812)
  %lt.213 = pred[1]{0} compare(%reshape.12990, %constant.1418), direction=LT
  %select_n.622 = s32[1]{0} select(%lt.213, %broadcast_in_dim.518, %reshape.12990)
  %concatenate.561 = s32[2]{0} concatenate(%constant.1418, %select_n.622), dimensions={0}
  %te_fused_attn_forward_ffi.220 = (bf16[1,4096,32,128]{3,2,1,0}, f32[1,32,4096,1]{3,2,1,0}, u32[2,4]{1,0}, u8[48]{0}) custom-call(%sharding_constraint.2018, %sharding_constraint.2020, %sharding_constraint.2021, %constant.1403, %dynamic-slice.38, /*index=5*/%concatenate.560, %concatenate.561, %constant.1416, %constant.1416, %constant.1416, /*index=10*/%constant.1416, %constant.1416, %constant.1416), custom_call_target="te_fused_attn_forward_ffi", operand_layout_constraints={bf16[1,4096,32,128]{3,2,1,0}, bf16[1,4096,8,128]{3,2,1,0}, bf16[1,4096,8,128]{3,2,1,0}, bf16[0]{0}, u32[2]{0}, s32[2]{0}, s32[2]{0}, f32[0]{0}, f32[0]{0}, f32[0]{0}, f32[0]{0}, f32[0]{0}, f32[0]{0}}, api_version=API_VERSION_TYPED_FFI, backend_config={attn_heads = 32 : i64, bias_batch = 0 : i64, bias_heads = 0 : i64, bias_type = 0 : i64, deterministic = false, dropout_probability = 0.000000e+00 : f64, input_batch = 1 : i64, is_training = true, kv_max_seqlen = 4096 : i64, mask_type = 3 : i64, max_segments_per_seq = 1 : i64, num_gqa_groups = 8 : i64, q_max_seqlen = 4096 : i64, qk_head_dim = 128 : i64, qkv_layout = 9 : i64, scaling_factor = 1.000000e+00 : f64, v_head_dim = 128 : i64, window_size_left = -1 : i64, window_size_right = -1 : i64}
  %get-tuple-element.1182 = bf16[1,4096,32,128]{3,2,1,0} get-tuple-element(%te_fused_attn_forward_ffi.220), index=0
  %sharding_constraint.2022 = bf16[1,4096,32,128]{3,2,1,0} copy(%get-tuple-element.1182)
  %get-tuple-element.1183 = bf16[32,128,512]{2,1,0} get-tuple-element(%remat2.34), index=7
  %all-gather.367 = bf16[32,128,4096]{2,1,0} all-gather(%get-tuple-element.1183), channel_id=682, replica_groups=[1,8]<=[8], dimensions={2}, use_global_device_ids=true
  %dot.948 = bf16[1,4096,4096]{2,1,0} dot(%sharding_constraint.2022, %all-gather.367), lhs_contracting_dims={2,3}, rhs_contracting_dims={0,1}
  %sharding_constraint.2023 = bf16[1,4096,4096]{2,1,0} copy(%dot.948)
  %add.2271 = bf16[1,4096,4096]{2,1,0} add(%sharding_constraint.2013, %sharding_constraint.2023)
  %convert_element_type.2767 = f32[1,4096,4096]{2,1,0} convert(%add.2271)
  %square.115 = f32[1,4096,4096]{2,1,0} multiply(%convert_element_type.2767, %convert_element_type.2767)
  %reduce.813 = f32[1,4096]{1,0} reduce(%square.115, %constant.1360), dimensions={2}, to_apply=%region_809.20960
  %div.1270 = f32[1,4096]{1,0} multiply(%reduce.813, %broadcast.3412)
  %add.2272 = f32[1,4096]{1,0} add(%div.1270, %broadcast.3413)
  %add.2273 = f32[1,4096,1]{2,1,0} reshape(%add.2272)
  %rsqrt.176 = f32[1,4096,1]{2,1,0} rsqrt(%add.2273)
  %mul.8021 = f32[1,4096]{1,0} reshape(%rsqrt.176)
  %mul.8022 = f32[1,4096,4096]{2,1,0} broadcast(%mul.8021), dimensions={0,1}
  %mul.8023 = f32[1,4096,4096]{2,1,0} multiply(%convert_element_type.2767, %mul.8022)
  %convert_element_type.2768 = bf16[1,4096,4096]{2,1,0} convert(%mul.8023)
  %get-tuple-element.1184 = bf16[4096]{0} get-tuple-element(%remat2.34), index=4
  %mul.8024 = bf16[1,4096,4096]{2,1,0} broadcast(%get-tuple-element.1184), dimensions={2}
  %mul.8025 = bf16[1,4096,4096]{2,1,0} multiply(%convert_element_type.2768, %mul.8024)
  %sharding_constraint.2024 = bf16[1,4096,4096]{2,1,0} copy(%mul.8025)
  %get-tuple-element.1185 = bf16[512,8]{1,0} get-tuple-element(%remat2.34), index=0
  %all-gather.368 = bf16[4096,8]{1,0} all-gather(%get-tuple-element.1185), channel_id=683, replica_groups=[1,8]<=[8], dimensions={0}, use_global_device_ids=true
  %dot.949 = bf16[1,4096,8]{2,1,0} dot(%sharding_constraint.2024, %all-gather.368), lhs_contracting_dims={2}, rhs_contracting_dims={0}
  %sharding_constraint.2025 = bf16[1,4096,8]{2,1,0} copy(%dot.949)
  %top_k.165 = bf16[4096,8]{1,0} reshape(%sharding_constraint.2025)
  %top_k.166 = (bf16[4096,2]{1,0}, s32[4096,2]{1,0}) custom-call(%top_k.165), custom_call_target="TopK", called_computations={%compare_greater_than.55.20981.clone}
  %get-tuple-element.1186 = bf16[4096,2]{1,0} get-tuple-element(%top_k.166), index=0
  %get-tuple-element.1187 = s32[4096,2]{1,0} get-tuple-element(%top_k.166), index=1
  %add.2274 = s32[4096,2]{1,0} add(%get-tuple-element.1187, %broadcast.3418)
  %sort.119 = (bf16[4096,2]{1,0}, s32[4096,2]{1,0}) sort(%get-tuple-element.1186, %add.2274), dimensions={1}, is_stable=true, to_apply=%compare-value-and-index.55
  %get-tuple-element.1189 = s32[4096,2]{1,0} get-tuple-element(%sort.119), index=1
  %slice.668 = s32[4096,2]{1,0} slice(%get-tuple-element.1189), slice={[0:4096], [0:2]}
  %top_k.167 = s32[1,4096,2]{2,1,0} reshape(%slice.668)
  %lt.214 = pred[1,4096,2]{2,1,0} compare(%top_k.167, %broadcast.3419), direction=LT
  %add.2275 = s32[1,4096,2]{2,1,0} add(%top_k.167, %broadcast.3420)
  %select_n.623 = s32[1,4096,2]{2,1,0} select(%lt.214, %add.2275, %top_k.167)
  %broadcast_in_dim.755 = s32[1,4096,2,1]{3,2,1,0} reshape(%select_n.623)
  %concatenate.562 = s32[1,4096,2,3]{3,2,1,0} concatenate(%add.1356, %iota.2763, %broadcast_in_dim.755), dimensions={3}
  %subtract.190 = s32[1,4096,2,3]{3,2,1,0} subtract(%concatenate.562, %broadcast.3428)
  %scatter.262 = u32[1,4096,8]{2,1,0} scatter(%dynamic-slice.43, %subtract.190, %add.1401), update_window_dims={}, inserted_window_dims={0,1,2}, scatter_dims_to_operand_dims={0,1,2}, index_vector_dim=3, to_apply=%region_810.21017.clone
  %gather.78 = u32[1,4096,2]{2,1,0} gather(%scatter.262, %subtract.190), offset_dims={}, collapsed_slice_dims={0,1,2}, start_index_map={0,1,2}, index_vector_dim=3, slice_sizes={1,1,1}
  %eq.2419 = pred[1,4096,2]{2,1,0} compare(%add.1401, %gather.78), direction=EQ
  %get-tuple-element.1188 = bf16[4096,2]{1,0} get-tuple-element(%sort.119), index=0
  %slice.667 = bf16[4096,2]{1,0} slice(%get-tuple-element.1188), slice={[0:4096], [0:2]}
  %convert_element_type.2769 = f32[4096,2]{1,0} convert(%slice.667)
  %convert_element_type.2771 = f32[1,4096,2]{2,1,0} reshape(%convert_element_type.2769)
  %reduce.814 = f32[4096]{0} reduce(%convert_element_type.2769, %constant.1450), dimensions={1}, to_apply=%region_811.21026
  %sub.370 = f32[1,4096]{1,0} reshape(%reduce.814)
  %sub.371 = f32[1,4096,2]{2,1,0} broadcast(%sub.370), dimensions={0,1}
  %sub.372 = f32[1,4096,2]{2,1,0} subtract(%convert_element_type.2771, %sub.371)
  %exp.237 = f32[1,4096,2]{2,1,0} exponential(%sub.372)
  %reduce.815 = f32[1,4096]{1,0} reduce(%exp.237, %constant.1360), dimensions={2}, to_apply=%region_812.21035
  %div.1271 = f32[1,4096,2]{2,1,0} broadcast(%reduce.815), dimensions={0,1}
  %div.1272 = f32[1,4096,2]{2,1,0} divide(%exp.237, %div.1271)
  %convert_element_type.2772 = bf16[1,4096,2]{2,1,0} convert(%div.1272)
  %select_n.624 = bf16[1,4096,2]{2,1,0} select(%eq.2419, %convert_element_type.2772, %broadcast.3427)
  %scatter.263 = bf16[1,4096,8]{2,1,0} scatter(%broadcast.3379, %subtract.190, %select_n.624), update_window_dims={}, inserted_window_dims={0,1,2}, scatter_dims_to_operand_dims={0,1,2}, index_vector_dim=3, to_apply=%region_813.21044.clone
  %eq.2421 = s32[1,4096,2,8]{3,2,1,0} broadcast(%top_k.167), dimensions={0,1,2}
  %iota.2775 = s32[1,4096,2,8]{3,2,1,0} iota(), iota_dimension=3
  %eq.2422 = pred[1,4096,2,8]{3,2,1,0} compare(%eq.2421, %iota.2775), direction=EQ
  %convert_element_type.2773 = s32[1,4096,2,8]{3,2,1,0} convert(%eq.2422)
  %reshape.13025 = s32[1,8192,8]{2,1,0} reshape(%convert_element_type.2773)
  %sharding_constraint.2026 = s32[1,8192,8]{2,1,0} copy(%reshape.13025)
  %reduce-window.55 = s32[1,8192,8]{2,1,0} reduce-window(%sharding_constraint.2026, %constant.1181), window={size=1x8192x1 pad=0_0x8191_0x0_0}, to_apply=%region_814.21056
  %reshape.13027 = s32[1,4096,2,8]{3,2,1,0} reshape(%reduce-window.55)
  %sharding_constraint.2027 = s32[1,4096,2,8]{3,2,1,0} copy(%reshape.13027)
  %le.158 = pred[1,4096,2,8]{3,2,1,0} compare(%sharding_constraint.2027, %broadcast.3429), direction=LE
  %mul.8026 = s32[1,4096,2,8]{3,2,1,0} select(%le.158, %convert_element_type.2773, %broadcast.3430)
  %reduce.816 = s32[1,4096,8]{2,1,0} reduce(%mul.8026, %constant.1181), dimensions={2}, to_apply=%region_815.21065
  %convert_element_type.2774 = bf16[1,4096,8]{2,1,0} convert(%reduce.816)
  %mul.8027 = bf16[1,4096,8]{2,1,0} multiply(%scatter.263, %convert_element_type.2774)
  %mul.8028 = bf16[1,4096,8,1025]{3,2,1,0} broadcast(%mul.8027), dimensions={0,1,2}
  %mul.8029 = s32[1,8192,8]{2,1,0} multiply(%sharding_constraint.2026, %reduce-window.55)
  %reshape.13028 = s32[1,4096,2,8]{3,2,1,0} reshape(%mul.8029)
  %reduce.817 = s32[1,4096,8]{2,1,0} reduce(%reshape.13028, %constant.1181), dimensions={2}, to_apply=%region_816.21075
  %mul.8032 = s32[1,4096,8]{2,1,0} multiply(%reduce.817, %reduce.816)
  %eq.2423 = s32[1,4096,8,1025]{3,2,1,0} broadcast(%mul.8032), dimensions={0,1,2}
  %iota.2776 = s32[1,4096,8,1025]{3,2,1,0} iota(), iota_dimension=3
  %eq.2424 = pred[1,4096,8,1025]{3,2,1,0} compare(%eq.2423, %iota.2776), direction=EQ
  %convert_element_type.2775 = s32[1,4096,8,1025]{3,2,1,0} convert(%eq.2424)
  %convert_element_type.2777 = bf16[1,4096,8,1025]{3,2,1,0} convert(%convert_element_type.2775)
  %mul.8035 = bf16[1,4096,8,1025]{3,2,1,0} multiply(%mul.8028, %convert_element_type.2777)
  %slice.669 = bf16[1,4096,8,1024]{3,2,1,0} slice(%mul.8035), slice={[0:1], [0:4096], [0:8], [1:1025]}
  %convert_element_type.2779 = pred[1,4096,8,1024]{3,2,1,0} compare(%slice.669, %broadcast.3431), direction=NE
  %sharding_constraint.2028 = pred[1,4096,8,1024]{3,2,1,0} copy(%convert_element_type.2779)
  %dot_general.114 = bf16[1,4096,8,1024]{3,2,1,0} convert(%sharding_constraint.2028)
  %dot.950 = bf16[1,8,1024,4096]{3,2,1,0} dot(%dot_general.114, %sharding_constraint.2024), lhs_batch_dims={0}, lhs_contracting_dims={1}, rhs_batch_dims={0}, rhs_contracting_dims={1}
  %reshape.13031 = bf16[1,8,1,1024,4096]{4,3,2,1,0} reshape(%dot.950)
  %all-to-all.156 = bf16[1,8,1,1024,4096]{4,3,2,1,0} all-to-all(%reshape.13031), channel_id=687, replica_groups=[1,8]<=[8], dimensions={1}
  %transpose.262 = bf16[8,1,1,1024,4096]{4,3,2,0,1} transpose(%all-to-all.156), dimensions={1,0,2,3,4}
  %reshape.13032 = bf16[8,1,1024,4096]{3,2,1,0} reshape(%transpose.262)
  %transpose.263 = bf16[1,8,1024,4096]{3,2,0,1} transpose(%reshape.13032), dimensions={1,0,2,3}
  %sharding_constraint.2029 = bf16[1,8,1024,4096]{3,2,0,1} copy(%transpose.263)
  %get-tuple-element.1192 = bf16[1,4096,14336]{2,1,0} get-tuple-element(%remat2.34), index=1
  %sharding_constraint.2030 = bf16[1,4096,14336]{2,1,0} copy(%get-tuple-element.1192)
  %dot.951 = bf16[1,8,1024,14336]{3,2,1,0} dot(%sharding_constraint.2029, %sharding_constraint.2030), lhs_batch_dims={0}, lhs_contracting_dims={3}, rhs_batch_dims={0}, rhs_contracting_dims={1}
  %sharding_constraint.2031 = bf16[1,8,1024,14336]{3,2,1,0} copy(%dot.951)
  %neg.282 = bf16[1,8,1024,14336]{3,2,1,0} negate(%sharding_constraint.2031)
  %exp.238 = bf16[1,8,1024,14336]{3,2,1,0} exponential(%neg.282)
  %add.2280 = bf16[1,8,1024,14336]{3,2,1,0} add(%exp.238, %jit_silu_.0)
  %div.1273 = bf16[1,8,1024,14336]{3,2,1,0} divide(%jit_silu_.0, %add.2280)
  %mul.8036 = bf16[1,8,1024,14336]{3,2,1,0} multiply(%sharding_constraint.2031, %div.1273)
  %sharding_constraint.2032 = bf16[1,4096,4096]{2,1,0} copy(%sharding_constraint.2012)
  %sharding_constraint.2033 = bf16[1,4096,8,1024]{3,2,1,0} copy(%slice.669)
  %dot.952 = bf16[1,4096,8,1024]{3,2,1,0} dot(%sharding_constraint.2032, %sharding_constraint.2033), lhs_batch_dims={0}, lhs_contracting_dims={1}, rhs_batch_dims={0}, rhs_contracting_dims={1}
  %reshape.13035 = bf16[1,4096,8,1,1024]{4,3,2,1,0} reshape(%dot.952)
  %all-to-all.157 = bf16[1,4096,8,1,1024]{4,3,2,1,0} all-to-all(%reshape.13035), channel_id=688, replica_groups=[1,8]<=[8], dimensions={2}
  %transpose.264 = bf16[8,1,4096,1,1024]{4,3,0,2,1} transpose(%all-to-all.157), dimensions={2,0,1,3,4}
  %reshape.13036 = bf16[8,4096,1,1024]{3,2,1,0} reshape(%transpose.264)
  %transpose.265 = bf16[1,8,1024,4096]{2,0,3,1} transpose(%reshape.13036), dimensions={2,0,3,1}
  %sharding_constraint.2034 = bf16[1,8,1024,4096]{2,0,3,1} copy(%transpose.265)
  %get-tuple-element.1193 = bf16[1,14336,4096]{2,1,0} get-tuple-element(%remat2.34), index=3
  %sharding_constraint.2035 = bf16[1,14336,4096]{2,1,0} copy(%get-tuple-element.1193)
  %dot.953 = bf16[1,8,1024,14336]{3,2,1,0} dot(%sharding_constraint.2034, %sharding_constraint.2035), lhs_batch_dims={0}, lhs_contracting_dims={3}, rhs_batch_dims={0}, rhs_contracting_dims={2}
  %mul.8037 = bf16[1,8,1024,14336]{3,2,1,0} multiply(%mul.8036, %dot.953)
  %sharding_constraint.2036 = bf16[1,8,1024,14336]{3,2,1,0} copy(%mul.8037)
  %get-tuple-element.1194 = bf16[1,4096,14336]{2,1,0} get-tuple-element(%remat2.34), index=2
  %sharding_constraint.2037 = bf16[1,4096,14336]{2,1,0} copy(%get-tuple-element.1194)
  %dot.954 = bf16[1,8,1024,4096]{3,2,1,0} dot(%sharding_constraint.2036, %sharding_constraint.2037), lhs_batch_dims={0}, lhs_contracting_dims={3}, rhs_batch_dims={0}, rhs_contracting_dims={2}
  %dot.955 = bf16[1,8,1024,14336]{3,2,1,0} dot(%sharding_constraint.2029, %sharding_constraint.2037), lhs_batch_dims={0}, lhs_contracting_dims={3}, rhs_batch_dims={0}, rhs_contracting_dims={1}
  %sharding_constraint.2038 = bf16[1,8,1024,14336]{3,2,1,0} copy(%dot.955)
  %mul.8038 = bf16[1,8,1024,14336]{3,2,1,0} multiply(%dot.953, %sharding_constraint.2038)
  %mul.8039 = bf16[1,8,1024,14336]{3,2,1,0} multiply(%mul.8038, %div.1273)
  %mul.8040 = bf16[1,8,1024,14336]{3,2,1,0} multiply(%sharding_constraint.2031, %mul.8038)
  %sub.373 = bf16[1,8,1024,14336]{3,2,1,0} subtract(%jit_silu_.0, %div.1273)
  %mul.8041 = bf16[1,8,1024,14336]{3,2,1,0} multiply(%div.1273, %sub.373)
  %mul.8042 = bf16[1,8,1024,14336]{3,2,1,0} multiply(%mul.8040, %mul.8041)
  %add_any.389 = bf16[1,8,1024,14336]{3,2,1,0} add(%mul.8039, %mul.8042)
  %sharding_constraint.2039 = bf16[1,8,1024,14336]{3,2,1,0} copy(%add_any.389)
  %dot.956 = bf16[1,8,1024,4096]{3,2,1,0} dot(%sharding_constraint.2039, %sharding_constraint.2030), lhs_batch_dims={0}, lhs_contracting_dims={3}, rhs_batch_dims={0}, rhs_contracting_dims={2}
  %add_any.390 = bf16[1,8,1024,4096]{3,2,1,0} add(%dot.954, %dot.956)
  %sharding_constraint.2040 = bf16[1,8,1024,4096]{3,2,1,0} copy(%add_any.390)
  %transpose.266 = bf16[8,1,1024,4096]{3,2,0,1} transpose(%sharding_constraint.2040), dimensions={1,0,2,3}
  %reshape.13039 = bf16[8,1,1,1024,4096]{4,3,2,1,0} reshape(%transpose.266)
  %all-to-all.158 = bf16[8,1,1,1024,4096]{4,3,2,1,0} all-to-all(%reshape.13039), channel_id=689, replica_groups=[1,8]<=[8], dimensions={0}
  %transpose.267 = bf16[1,8,1,1024,4096]{4,3,2,0,1} transpose(%all-to-all.158), dimensions={1,0,2,3,4}
  %reshape.13040 = bf16[1,8,1024,4096]{3,2,1,0} reshape(%transpose.267)
  %dot.957 = bf16[1,4096,4096]{2,1,0} dot(%dot_general.114, %reshape.13040), lhs_batch_dims={0}, lhs_contracting_dims={2,3}, rhs_batch_dims={0}, rhs_contracting_dims={1,2}
  %reshape.13042 = s32[1,4096,2,1]{3,2,1,0} reshape(%slice.668)
  %ge.23 = pred[1,4096,2,3]{3,2,1,0} compare(%concatenate.562, %broadcast.3629), direction=GE
  %le.160 = pred[1,4096,2,3]{3,2,1,0} compare(%concatenate.562, %le.67), direction=LE
  %and.199 = pred[1,4096,2,3]{3,2,1,0} and(%ge.23, %le.160)
  %reduce.818 = pred[1,4096,2]{2,1,0} reduce(%and.199, %constant.5574), dimensions={3}, to_apply=%region_817.21132
  %mul.8043 = bf16[1,8,1024,14336]{3,2,1,0} multiply(%mul.8036, %sharding_constraint.2038)
  %dot.958 = bf16[1,8,1024,4096]{3,2,1,0} dot(%mul.8043, %sharding_constraint.2035), lhs_batch_dims={0}, lhs_contracting_dims={3}, rhs_batch_dims={0}, rhs_contracting_dims={1}
  %sharding_constraint.2041 = bf16[1,8,1024,4096]{3,2,1,0} copy(%dot.958)
  %reshape.13049 = bf16[1,8,1,1024,4096]{4,3,2,1,0} reshape(%sharding_constraint.2041)
  %all-to-all.159 = bf16[1,8,1,1024,4096]{4,3,2,1,0} all-to-all(%reshape.13049), channel_id=690, replica_groups=[1,8]<=[8], dimensions={1}
  %transpose.268 = bf16[8,1,1,1024,4096]{4,3,2,0,1} transpose(%all-to-all.159), dimensions={1,0,2,3,4}
  %reshape.13050 = bf16[8,1,1024,4096]{3,2,1,0} reshape(%transpose.268)
  %dot.959 = bf16[1,4096,8,1024]{3,2,1,0} dot(%sharding_constraint.2032, %reshape.13050), lhs_batch_dims={0}, lhs_contracting_dims={2}, rhs_batch_dims={1}, rhs_contracting_dims={3}
  %sharding_constraint.2042 = bf16[1,4096,8,1024]{3,2,1,0} copy(%dot.959)
  %pad.23 = bf16[1,4096,8,1025]{3,2,1,0} pad(%sharding_constraint.2042, %constant.1190), padding=0_0x0_0x0_0x1_0
  %mul.8044 = bf16[1,4096,8,1025]{3,2,1,0} multiply(%pad.23, %convert_element_type.2777)
  %reduce.819 = bf16[1,4096,8]{2,1,0} reduce(%mul.8044, %constant.1190), dimensions={3}, to_apply=%region_818.21144
  %mul.8045 = bf16[1,4096,8]{2,1,0} multiply(%reduce.819, %convert_element_type.2774)
  %gather.79 = bf16[1,4096,2]{2,1,0} gather(%mul.8045, %subtract.190), offset_dims={}, collapsed_slice_dims={0,1,2}, start_index_map={0,1,2}, index_vector_dim=3, slice_sizes={1,1,1}
  %select_n.625 = bf16[1,4096,2]{2,1,0} select(%reduce.818, %gather.79, %broadcast.3427)
  %select_n.626 = bf16[1,4096,2]{2,1,0} select(%eq.2419, %select_n.625, %broadcast.3427)
  %convert_element_type.2780 = f32[1,4096,2]{2,1,0} convert(%select_n.626)
  %div.1275 = f32[1,4096,2]{2,1,0} divide(%convert_element_type.2780, %div.1271)
  %mul.8046 = f32[1,4096]{1,0} multiply(%reduce.815, %reduce.815)
  %div.1276 = f32[1,4096]{1,0} divide(%add.1847, %mul.8046)
  %mul.8047 = f32[1,4096,2]{2,1,0} broadcast(%div.1276), dimensions={0,1}
  %mul.8048 = f32[1,4096,2]{2,1,0} multiply(%convert_element_type.2780, %mul.8047)
  %mul.8049 = f32[1,4096,2]{2,1,0} multiply(%mul.8048, %exp.237)
  %reduce.820 = f32[1,4096]{1,0} reduce(%mul.8049, %constant.1360), dimensions={2}, to_apply=%region_819.21161
  %neg.283 = f32[1,4096]{1,0} negate(%reduce.820)
  %broadcast_in_dim.756 = f32[1,4096,2]{2,1,0} broadcast(%neg.283), dimensions={0,1}
  %add_any.391 = f32[1,4096,2]{2,1,0} add(%div.1275, %broadcast_in_dim.756)
  %mul.8050 = f32[1,4096,2]{2,1,0} multiply(%add_any.391, %exp.237)
  %convert_element_type.2781 = bf16[1,4096,2]{2,1,0} convert(%mul.8050)
  %scatter.264 = bf16[1,4096,8]{2,1,0} scatter(%broadcast.3379, %reshape.13042, %convert_element_type.2781), update_window_dims={}, inserted_window_dims={2}, scatter_dims_to_operand_dims={2}, input_batching_dims={0,1}, scatter_indices_batching_dims={0,1}, index_vector_dim=3, to_apply=%region_820.21171.clone
  %sharding_constraint.2043 = bf16[1,4096,8]{2,1,0} copy(%scatter.264)
  %dot.960 = bf16[1,4096,4096]{2,1,0} dot(%sharding_constraint.2043, %all-gather.368), lhs_contracting_dims={2}, rhs_contracting_dims={1}
  %add_any.392 = bf16[1,4096,4096]{2,1,0} add(%dot.957, %dot.960)
  %sharding_constraint.2044 = bf16[1,4096,4096]{2,1,0} copy(%add_any.392)
  %mul.8052 = bf16[1,4096,4096]{2,1,0} multiply(%sharding_constraint.2044, %mul.8024)
  %convert_element_type.2783 = f32[1,4096,4096]{2,1,0} convert(%mul.8052)
  %mul.8055 = f32[1,4096,4096]{2,1,0} multiply(%convert_element_type.2783, %mul.8022)
  %mul.8056 = f32[1,4096,4096]{2,1,0} multiply(%convert_element_type.2767, %convert_element_type.2783)
  %reduce.821 = f32[1,4096]{1,0} reduce(%mul.8056, %constant.1360), dimensions={2}, to_apply=%region_821.21187
  %reshape.13062 = f32[1,4096,1]{2,1,0} reshape(%reduce.821)
  %div.1277 = f32[1,4096,1]{2,1,0} divide(%rsqrt.176, %add.2273)
  %mul.8057 = f32[1,4096,1]{2,1,0} multiply(%div.1277, %broadcast.3620)
  %mul.8058 = f32[1,4096,1]{2,1,0} multiply(%reshape.13062, %mul.8057)
  %mul.8059 = f32[1,4096,1]{2,1,0} multiply(%mul.8058, %mul.4455)
  %mul.8060 = f32[1,4096]{1,0} reshape(%mul.8059)
  %mul.8061 = f32[1,4096,4096]{2,1,0} broadcast(%mul.8060), dimensions={0,1}
  %mul.8062 = f32[1,4096,4096]{2,1,0} multiply(%convert_element_type.2767, %mul.8061)
  %add_any.393 = f32[1,4096,4096]{2,1,0} add(%mul.8055, %mul.8062)
  %convert_element_type.2784 = bf16[1,4096,4096]{2,1,0} convert(%add_any.393)
  %add_any.394 = bf16[1,4096,4096]{2,1,0} add(%sharding_constraint.2012, %convert_element_type.2784)
  %get-tuple-element.1195 = f32[1,32,4096,1]{3,2,1,0} get-tuple-element(%te_fused_attn_forward_ffi.220), index=1
  %get-tuple-element.1196 = u32[2,4]{1,0} get-tuple-element(%te_fused_attn_forward_ffi.220), index=2
  %sharding_constraint.2045 = u32[2,4]{1,0} copy(%get-tuple-element.1196)
  %sharding_constraint.2046 = bf16[1,4096,4096]{2,1,0} copy(%add_any.394)
  %dot.961 = bf16[1,4096,32,128]{3,2,1,0} dot(%sharding_constraint.2046, %all-gather.367), lhs_contracting_dims={2}, rhs_contracting_dims={2}
  %sharding_constraint.2047 = bf16[1,4096,32,128]{3,2,1,0} copy(%dot.961)
  %te_fused_attn_backward_ffi.115 = (bf16[1,4096,32,128]{3,2,1,0}, bf16[1,4096,8,128]{3,2,1,0}, bf16[1,4096,8,128]{3,2,1,0}, bf16[0]{0}, u8[134742064]{0}) custom-call(%sharding_constraint.2018, %sharding_constraint.2020, %sharding_constraint.2021, %constant.1403, %get-tuple-element.1195, /*index=5*/%sharding_constraint.2045, %get-tuple-element.1182, %sharding_constraint.2047, %concatenate.560, %concatenate.561, /*index=10*/%constant.1416, %constant.1416, %constant.1416, %constant.1416, %constant.1416, /*index=15*/%constant.1416), custom_call_target="te_fused_attn_backward_ffi", operand_layout_constraints={bf16[1,4096,32,128]{3,2,1,0}, bf16[1,4096,8,128]{3,2,1,0}, bf16[1,4096,8,128]{3,2,1,0}, bf16[0]{0}, f32[1,32,4096,1]{3,2,1,0}, u32[2,4]{1,0}, bf16[1,4096,32,128]{3,2,1,0}, bf16[1,4096,32,128]{3,2,1,0}, s32[2]{0}, s32[2]{0}, f32[0]{0}, f32[0]{0}, f32[0]{0}, f32[0]{0}, f32[0]{0}, f32[0]{0}}, api_version=API_VERSION_TYPED_FFI, backend_config={attn_heads = 32 : i64, bias_batch = 0 : i64, bias_heads = 0 : i64, bias_type = 0 : i64, deterministic = false, dropout_probability = 0.000000e+00 : f64, input_batch = 1 : i64, is_training = true, kv_max_seqlen = 4096 : i64, mask_type = 3 : i64, max_segments_per_seq = 1 : i64, num_gqa_groups = 8 : i64, q_max_seqlen = 4096 : i64, qk_head_dim = 128 : i64, qkv_layout = 9 : i64, scaling_factor = 1.000000e+00 : f64, v_head_dim = 128 : i64, window_size_left = -1 : i64, window_size_right = -1 : i64}
  %get-tuple-element.1197 = bf16[1,4096,8,128]{3,2,1,0} get-tuple-element(%te_fused_attn_backward_ffi.115), index=2
  %sharding_constraint.2048 = bf16[1,4096,8,128]{3,2,1,0} copy(%get-tuple-element.1197)
  %dot.962 = bf16[1,4096,4096]{2,1,0} dot(%sharding_constraint.2048, %all-gather.366), lhs_contracting_dims={2,3}, rhs_contracting_dims={1,2}
  %get-tuple-element.1198 = bf16[1,4096,8,128]{3,2,1,0} get-tuple-element(%te_fused_attn_backward_ffi.115), index=1
  %sharding_constraint.2049 = bf16[1,4096,8,128]{3,2,1,0} copy(%get-tuple-element.1198)
  %slice.670 = bf16[1,4096,8,64]{3,2,1,0} slice(%sharding_constraint.2049), slice={[0:1], [0:4096], [0:8], [64:128]}
  %mul.8065 = bf16[1,4096,8,64]{3,2,1,0} multiply(%slice.670, %mul.8013)
  %slice.671 = bf16[1,4096,8,64]{3,2,1,0} slice(%sharding_constraint.2049), slice={[0:1], [0:4096], [0:8], [0:64]}
  %mul.8068 = bf16[1,4096,8,64]{3,2,1,0} multiply(%slice.671, %mul.8010)
  %add_any.395 = bf16[1,4096,8,64]{3,2,1,0} add(%mul.8065, %mul.8068)
  %mul.8071 = bf16[1,4096,8,64]{3,2,1,0} multiply(%slice.670, %mul.8010)
  %neg.284 = bf16[1,4096,8,64]{3,2,1,0} negate(%slice.671)
  %mul.8082 = bf16[1,4096,8,64]{3,2,1,0} multiply(%neg.284, %mul.8013)
  %add_any.396 = bf16[1,4096,8,64]{3,2,1,0} add(%mul.8071, %mul.8082)
  %concatenate.569 = bf16[1,4096,8,128]{3,2,1,0} concatenate(%add_any.395, %add_any.396), dimensions={3}
  %dot.963 = bf16[1,4096,4096]{2,1,0} dot(%concatenate.569, %all-gather.365), lhs_contracting_dims={2,3}, rhs_contracting_dims={1,2}
  %add_any.397 = bf16[1,4096,4096]{2,1,0} add(%dot.962, %dot.963)
  %sharding_constraint.2050 = bf16[1,4096,4096]{2,1,0} copy(%add_any.397)
  %get-tuple-element.1199 = bf16[1,4096,32,128]{3,2,1,0} get-tuple-element(%te_fused_attn_backward_ffi.115), index=0
  %sharding_constraint.2051 = bf16[1,4096,32,128]{3,2,1,0} copy(%get-tuple-element.1199)
  %slice.672 = bf16[1,4096,32,64]{3,2,1,0} slice(%sharding_constraint.2051), slice={[0:1], [0:4096], [0:32], [64:128]}
  %mul.8085 = bf16[1,4096,32,64]{3,2,1,0} multiply(%slice.672, %mul.7984)
  %slice.673 = bf16[1,4096,32,64]{3,2,1,0} slice(%sharding_constraint.2051), slice={[0:1], [0:4096], [0:32], [0:64]}
  %mul.8088 = bf16[1,4096,32,64]{3,2,1,0} multiply(%slice.673, %mul.7981)
  %add_any.398 = bf16[1,4096,32,64]{3,2,1,0} add(%mul.8085, %mul.8088)
  %mul.8091 = bf16[1,4096,32,64]{3,2,1,0} multiply(%slice.672, %mul.7981)
  %neg.285 = bf16[1,4096,32,64]{3,2,1,0} negate(%slice.673)
  %mul.8094 = bf16[1,4096,32,64]{3,2,1,0} multiply(%neg.285, %mul.7984)
  %add_any.399 = bf16[1,4096,32,64]{3,2,1,0} add(%mul.8091, %mul.8094)
  %concatenate.570 = bf16[1,4096,32,128]{3,2,1,0} concatenate(%add_any.398, %add_any.399), dimensions={3}
  %dot.964 = bf16[1,4096,4096]{2,1,0} dot(%concatenate.570, %all-gather.364), lhs_contracting_dims={2,3}, rhs_contracting_dims={1,2}
  %sharding_constraint.2052 = bf16[1,4096,4096]{2,1,0} copy(%dot.964)
  %add_any.400 = bf16[1,4096,4096]{2,1,0} add(%sharding_constraint.2050, %sharding_constraint.2052)
  %sharding_constraint.2053 = bf16[1,4096,4096]{2,1,0} copy(%add_any.400)
  %mul.8096 = bf16[1,4096,4096]{2,1,0} multiply(%sharding_constraint.2053, %mul.7977)
  %convert_element_type.2785 = f32[1,4096,4096]{2,1,0} convert(%mul.8096)
  %mul.8099 = f32[1,4096,4096]{2,1,0} multiply(%convert_element_type.2785, %mul.7975)
  %mul.8100 = f32[1,4096,4096]{2,1,0} multiply(%convert_element_type.2752, %convert_element_type.2785)
  %reduce.822 = f32[1,4096]{1,0} reduce(%mul.8100, %constant.1360), dimensions={2}, to_apply=%region_822.21266
  %reshape.13070 = f32[1,4096,1]{2,1,0} reshape(%reduce.822)
  %div.1278 = f32[1,4096,1]{2,1,0} divide(%rsqrt.175, %add.2268)
  %mul.8101 = f32[1,4096,1]{2,1,0} multiply(%div.1278, %broadcast.3620)
  %mul.8102 = f32[1,4096,1]{2,1,0} multiply(%reshape.13070, %mul.8101)
  %mul.8103 = f32[1,4096,1]{2,1,0} multiply(%mul.8102, %mul.4455)
  %mul.8104 = f32[1,4096]{1,0} reshape(%mul.8103)
  %mul.8105 = f32[1,4096,4096]{2,1,0} broadcast(%mul.8104), dimensions={0,1}
  %mul.8106 = f32[1,4096,4096]{2,1,0} multiply(%convert_element_type.2752, %mul.8105)
  %add_any.401 = f32[1,4096,4096]{2,1,0} add(%mul.8099, %mul.8106)
  %convert_element_type.2786 = bf16[1,4096,4096]{2,1,0} convert(%add_any.401)
  %add_any.402 = bf16[1,4096,4096]{2,1,0} add(%add_any.394, %convert_element_type.2786)
  %sharding_constraint.2055 = bf16[1,4096,4096]{2,1,0} copy(%add_any.402)
  %tuple.319 = (bf16[512,8]{1,0}, bf16[1,4096,14336]{2,1,0}, bf16[1,4096,14336]{2,1,0}, bf16[1,14336,4096]{2,1,0}, bf16[4096]{0}, /*index=5*/bf16[4096]{0}, bf16[512,8,128]{2,1,0}, bf16[32,128,512]{2,1,0}, bf16[512,32,128]{2,1,0}, bf16[512,8,128]{2,1,0}, /*index=10*/bf16[1,4096,4096]{2,1,0}, s32[1,4096]{1,0}, s32[1,4096]{1,0}, bf16[1,4096,4096]{2,1,0}) tuple(%param.83, %param.84, %param.85, %param.86, %param.82, /*index=5*/%param.77, %param.79, %param.81, %param.78, %param.80, /*index=10*/%sharding_constraint.330, %param.10, %param.7, %sharding_constraint.2055)
  %remat2.35 = (bf16[512,8]{1,0}, bf16[1,4096,14336]{2,1,0}, bf16[1,4096,14336]{2,1,0}, bf16[1,14336,4096]{2,1,0}, bf16[4096]{0}, /*index=5*/bf16[4096]{0}, bf16[512,8,128]{2,1,0}, bf16[32,128,512]{2,1,0}, bf16[512,32,128]{2,1,0}, bf16[512,8,128]{2,1,0}, /*index=10*/bf16[1,4096,4096]{2,1,0}, s32[1,4096]{1,0}, s32[1,4096]{1,0}, bf16[1,4096,4096]{2,1,0}) opt-barrier(%tuple.319)
  %get-tuple-element.1200 = bf16[1,4096,4096]{2,1,0} get-tuple-element(%remat2.35), index=13
  %sharding_constraint.2057 = bf16[1,4096,4096]{2,1,0} copy(%get-tuple-element.1200)
  %iota.2781 = s32[1,4096,2,1]{3,2,1,0} iota(), iota_dimension=1
  %get-tuple-element.1201 = bf16[1,4096,4096]{2,1,0} get-tuple-element(%remat2.35), index=10
  %sharding_constraint.2058 = bf16[1,4096,4096]{2,1,0} copy(%get-tuple-element.1201)
  %convert_element_type.2787 = f32[1,4096,4096]{2,1,0} convert(%sharding_constraint.2058)
  %square.116 = f32[1,4096,4096]{2,1,0} multiply(%convert_element_type.2787, %convert_element_type.2787)
  %reduce.823 = f32[1,4096]{1,0} reduce(%square.116, %constant.1360), dimensions={2}, to_apply=%region_823.21308
  %div.1279 = f32[1,4096]{1,0} multiply(%reduce.823, %broadcast.3412)
  %add.2285 = f32[1,4096]{1,0} add(%div.1279, %broadcast.3413)
  %add.2286 = f32[1,4096,1]{2,1,0} reshape(%add.2285)
  %rsqrt.177 = f32[1,4096,1]{2,1,0} rsqrt(%add.2286)
  %mul.8107 = f32[1,4096]{1,0} reshape(%rsqrt.177)
  %mul.8108 = f32[1,4096,4096]{2,1,0} broadcast(%mul.8107), dimensions={0,1}
  %mul.8109 = f32[1,4096,4096]{2,1,0} multiply(%convert_element_type.2787, %mul.8108)
  %convert_element_type.2788 = bf16[1,4096,4096]{2,1,0} convert(%mul.8109)
  %get-tuple-element.1202 = bf16[4096]{0} get-tuple-element(%remat2.35), index=5
  %mul.8110 = bf16[1,4096,4096]{2,1,0} broadcast(%get-tuple-element.1202), dimensions={2}
  %mul.8111 = bf16[1,4096,4096]{2,1,0} multiply(%convert_element_type.2788, %mul.8110)
  %sharding_constraint.2059 = bf16[1,4096,4096]{2,1,0} copy(%mul.8111)
  %sharding_constraint.2060 = bf16[1,4096,4096]{2,1,0} copy(%sharding_constraint.2059)
  %get-tuple-element.1203 = bf16[512,32,128]{2,1,0} get-tuple-element(%remat2.35), index=8
  %all-gather.370 = bf16[4096,32,128]{2,1,0} all-gather(%get-tuple-element.1203), channel_id=693, replica_groups=[1,8]<=[8], dimensions={0}, use_global_device_ids=true
  %dot.965 = bf16[1,4096,32,128]{3,2,1,0} dot(%sharding_constraint.2060, %all-gather.370), lhs_contracting_dims={2}, rhs_contracting_dims={0}
  %slice.674 = bf16[1,4096,32,64]{3,2,1,0} slice(%dot.965), slice={[0:1], [0:4096], [0:32], [0:64]}
  %get-tuple-element.1204 = s32[1,4096]{1,0} get-tuple-element(%remat2.35), index=12
  %convert_element_type.2789 = f32[1,4096]{1,0} convert(%get-tuple-element.1204)
  %div.1280 = f32[1,4096,1,64]{3,2,1,0} broadcast(%convert_element_type.2789), dimensions={0,1}
  %div.1283 = f32[1,4096,1,64]{3,2,1,0} divide(%div.1280, %div.402)
  %cos.113 = f32[1,4096,1,64]{3,2,1,0} cosine(%div.1283)
  %convert_element_type.2791 = bf16[1,4096,1,64]{3,2,1,0} convert(%cos.113)
  %mul.8113 = bf16[1,4096,64]{2,1,0} reshape(%convert_element_type.2791)
  %mul.8114 = bf16[1,4096,32,64]{3,2,1,0} broadcast(%mul.8113), dimensions={0,1,3}
  %mul.8115 = bf16[1,4096,32,64]{3,2,1,0} multiply(%slice.674, %mul.8114)
  %slice.675 = bf16[1,4096,32,64]{3,2,1,0} slice(%dot.965), slice={[0:1], [0:4096], [0:32], [64:128]}
  %sin.112 = f32[1,4096,1,64]{3,2,1,0} sine(%div.1283)
  %convert_element_type.2792 = bf16[1,4096,1,64]{3,2,1,0} convert(%sin.112)
  %mul.8117 = bf16[1,4096,64]{2,1,0} reshape(%convert_element_type.2792)
  %mul.8118 = bf16[1,4096,32,64]{3,2,1,0} broadcast(%mul.8117), dimensions={0,1,3}
  %mul.8119 = bf16[1,4096,32,64]{3,2,1,0} multiply(%slice.675, %mul.8118)
  %sub.374 = bf16[1,4096,32,64]{3,2,1,0} subtract(%mul.8115, %mul.8119)
  %mul.8122 = bf16[1,4096,32,64]{3,2,1,0} multiply(%slice.675, %mul.8114)
  %mul.8128 = bf16[1,4096,32,64]{3,2,1,0} multiply(%slice.674, %mul.8118)
  %add.2287 = bf16[1,4096,32,64]{3,2,1,0} add(%mul.8122, %mul.8128)
  %concatenate.571 = bf16[1,4096,32,128]{3,2,1,0} concatenate(%sub.374, %add.2287), dimensions={3}
  %sharding_constraint.2061 = bf16[1,4096,32,128]{3,2,1,0} copy(%concatenate.571)
  %get-tuple-element.1205 = bf16[512,8,128]{2,1,0} get-tuple-element(%remat2.35), index=6
  %all-gather.371 = bf16[4096,8,128]{2,1,0} all-gather(%get-tuple-element.1205), channel_id=694, replica_groups=[1,8]<=[8], dimensions={0}, use_global_device_ids=true
  %dot.966 = bf16[1,4096,8,128]{3,2,1,0} dot(%sharding_constraint.2060, %all-gather.371), lhs_contracting_dims={2}, rhs_contracting_dims={0}
  %slice.676 = bf16[1,4096,8,64]{3,2,1,0} slice(%dot.966), slice={[0:1], [0:4096], [0:8], [0:64]}
  %mul.8131 = bf16[1,4096,8,64]{3,2,1,0} broadcast(%mul.8113), dimensions={0,1,3}
  %mul.8133 = bf16[1,4096,8,64]{3,2,1,0} multiply(%slice.676, %mul.8131)
  %slice.677 = bf16[1,4096,8,64]{3,2,1,0} slice(%dot.966), slice={[0:1], [0:4096], [0:8], [64:128]}
  %mul.8135 = bf16[1,4096,8,64]{3,2,1,0} broadcast(%mul.8117), dimensions={0,1,3}
  %mul.8136 = bf16[1,4096,8,64]{3,2,1,0} multiply(%slice.677, %mul.8135)
  %sub.375 = bf16[1,4096,8,64]{3,2,1,0} subtract(%mul.8133, %mul.8136)
  %mul.8140 = bf16[1,4096,8,64]{3,2,1,0} multiply(%slice.677, %mul.8131)
  %mul.8143 = bf16[1,4096,8,64]{3,2,1,0} multiply(%slice.676, %mul.8135)
  %add.2288 = bf16[1,4096,8,64]{3,2,1,0} add(%mul.8140, %mul.8143)
  %concatenate.572 = bf16[1,4096,8,128]{3,2,1,0} concatenate(%sub.375, %add.2288), dimensions={3}
  %sharding_constraint.2063 = bf16[1,4096,8,128]{3,2,1,0} copy(%concatenate.572)
  %get-tuple-element.1206 = bf16[512,8,128]{2,1,0} get-tuple-element(%remat2.35), index=9
  %all-gather.372 = bf16[4096,8,128]{2,1,0} all-gather(%get-tuple-element.1206), channel_id=695, replica_groups=[1,8]<=[8], dimensions={0}, use_global_device_ids=true
  %dot.967 = bf16[1,4096,8,128]{3,2,1,0} dot(%sharding_constraint.2060, %all-gather.372), lhs_contracting_dims={2}, rhs_contracting_dims={0}
  %sharding_constraint.2064 = bf16[1,4096,8,128]{3,2,1,0} copy(%dot.967)
  %get-tuple-element.1207 = s32[1,4096]{1,0} get-tuple-element(%remat2.35), index=11
  %eq.2426 = s32[1,4096,4096]{2,1,0} broadcast(%get-tuple-element.1207), dimensions={0,1}
  %eq.2427 = s32[1,4096,4096]{2,1,0} broadcast(%get-tuple-element.1207), dimensions={0,2}
  %eq.2428 = pred[1,4096,4096]{2,1,0} compare(%eq.2426, %eq.2427), direction=EQ
  %and.201 = pred[1,4096,4096]{2,1,0} and(%eq.2428, %and.64)
  %select_n.629 = f32[1,4096,4096]{2,1,0} select(%and.201, %broadcast_in_dim.516, %broadcast_in_dim.517)
  %ne.122 = pred[1,4096,4096]{2,1,0} compare(%select_n.629, %broadcast_in_dim.516), direction=NE
  %not.120 = pred[1,4096,4096]{2,1,0} not(%ne.122)
  %convert_element_type.2797 = s32[1,4096,4096]{2,1,0} convert(%not.120)
  %reduce.824 = s32[1,4096]{1,0} reduce(%convert_element_type.2797, %constant.1181), dimensions={1}, to_apply=%region_824.21404
  %reduce_sum.5751 = s32[1,1,1,4096]{3,2,1,0} reshape(%reduce.824)
  %slice.678 = s32[1,1,1,1]{3,2,1,0} slice(%reduce_sum.5751), slice={[0:1], [0:1], [0:1], [0:1]}
  %squeeze.56 = s32[1,1]{1,0} reshape(%slice.678)
  %reshape.13077 = s32[1]{0} reshape(%squeeze.56)
  %lt.217 = pred[1]{0} compare(%reshape.13077, %constant.1418), direction=LT
  %select_n.630 = s32[1]{0} select(%lt.217, %broadcast_in_dim.518, %reshape.13077)
  %concatenate.573 = s32[2]{0} concatenate(%constant.1418, %select_n.630), dimensions={0}
  %reduce.825 = s32[1,4096]{1,0} reduce(%convert_element_type.2797, %constant.1181), dimensions={2}, to_apply=%region_825.21413
  %reduce_sum.5752 = s32[1,1,1,4096]{3,2,1,0} reshape(%reduce.825)
  %reduce.826 = s32[1,1]{1,0} reduce(%reduce_sum.5752, %constant.1415), dimensions={3,2}, to_apply=%region_826.21419
  %reshape.13078 = s32[1]{0} reshape(%reduce.826)
  %lt.218 = pred[1]{0} compare(%reshape.13078, %constant.1418), direction=LT
  %select_n.631 = s32[1]{0} select(%lt.218, %broadcast_in_dim.518, %reshape.13078)
  %concatenate.574 = s32[2]{0} concatenate(%constant.1418, %select_n.631), dimensions={0}
  %te_fused_attn_forward_ffi.224 = (bf16[1,4096,32,128]{3,2,1,0}, f32[1,32,4096,1]{3,2,1,0}, u32[2,4]{1,0}, u8[48]{0}) custom-call(%sharding_constraint.2061, %sharding_constraint.2063, %sharding_constraint.2064, %constant.1403, %dynamic-slice.38, /*index=5*/%concatenate.573, %concatenate.574, %constant.1416, %constant.1416, %constant.1416, /*index=10*/%constant.1416, %constant.1416, %constant.1416), custom_call_target="te_fused_attn_forward_ffi", operand_layout_constraints={bf16[1,4096,32,128]{3,2,1,0}, bf16[1,4096,8,128]{3,2,1,0}, bf16[1,4096,8,128]{3,2,1,0}, bf16[0]{0}, u32[2]{0}, s32[2]{0}, s32[2]{0}, f32[0]{0}, f32[0]{0}, f32[0]{0}, f32[0]{0}, f32[0]{0}, f32[0]{0}}, api_version=API_VERSION_TYPED_FFI, backend_config={attn_heads = 32 : i64, bias_batch = 0 : i64, bias_heads = 0 : i64, bias_type = 0 : i64, deterministic = false, dropout_probability = 0.000000e+00 : f64, input_batch = 1 : i64, is_training = true, kv_max_seqlen = 4096 : i64, mask_type = 3 : i64, max_segments_per_seq = 1 : i64, num_gqa_groups = 8 : i64, q_max_seqlen = 4096 : i64, qk_head_dim = 128 : i64, qkv_layout = 9 : i64, scaling_factor = 1.000000e+00 : f64, v_head_dim = 128 : i64, window_size_left = -1 : i64, window_size_right = -1 : i64}
  %get-tuple-element.1208 = bf16[1,4096,32,128]{3,2,1,0} get-tuple-element(%te_fused_attn_forward_ffi.224), index=0
  %sharding_constraint.2065 = bf16[1,4096,32,128]{3,2,1,0} copy(%get-tuple-element.1208)
  %get-tuple-element.1209 = bf16[32,128,512]{2,1,0} get-tuple-element(%remat2.35), index=7
  %all-gather.373 = bf16[32,128,4096]{2,1,0} all-gather(%get-tuple-element.1209), channel_id=696, replica_groups=[1,8]<=[8], dimensions={2}, use_global_device_ids=true
  %dot.968 = bf16[1,4096,4096]{2,1,0} dot(%sharding_constraint.2065, %all-gather.373), lhs_contracting_dims={2,3}, rhs_contracting_dims={0,1}
  %sharding_constraint.2066 = bf16[1,4096,4096]{2,1,0} copy(%dot.968)
  %add.2289 = bf16[1,4096,4096]{2,1,0} add(%sharding_constraint.2058, %sharding_constraint.2066)
  %convert_element_type.2800 = f32[1,4096,4096]{2,1,0} convert(%add.2289)
  %square.117 = f32[1,4096,4096]{2,1,0} multiply(%convert_element_type.2800, %convert_element_type.2800)
  %reduce.827 = f32[1,4096]{1,0} reduce(%square.117, %constant.1360), dimensions={2}, to_apply=%region_827.21434
  %div.1288 = f32[1,4096]{1,0} multiply(%reduce.827, %broadcast.3412)
  %add.2290 = f32[1,4096]{1,0} add(%div.1288, %broadcast.3413)
  %add.2291 = f32[1,4096,1]{2,1,0} reshape(%add.2290)
  %rsqrt.178 = f32[1,4096,1]{2,1,0} rsqrt(%add.2291)
  %mul.8144 = f32[1,4096]{1,0} reshape(%rsqrt.178)
  %mul.8145 = f32[1,4096,4096]{2,1,0} broadcast(%mul.8144), dimensions={0,1}
  %mul.8146 = f32[1,4096,4096]{2,1,0} multiply(%convert_element_type.2800, %mul.8145)
  %convert_element_type.2801 = bf16[1,4096,4096]{2,1,0} convert(%mul.8146)
  %get-tuple-element.1210 = bf16[4096]{0} get-tuple-element(%remat2.35), index=4
  %mul.8147 = bf16[1,4096,4096]{2,1,0} broadcast(%get-tuple-element.1210), dimensions={2}
  %mul.8148 = bf16[1,4096,4096]{2,1,0} multiply(%convert_element_type.2801, %mul.8147)
  %sharding_constraint.2067 = bf16[1,4096,4096]{2,1,0} copy(%mul.8148)
  %get-tuple-element.1211 = bf16[512,8]{1,0} get-tuple-element(%remat2.35), index=0
  %all-gather.374 = bf16[4096,8]{1,0} all-gather(%get-tuple-element.1211), channel_id=697, replica_groups=[1,8]<=[8], dimensions={0}, use_global_device_ids=true
  %dot.969 = bf16[1,4096,8]{2,1,0} dot(%sharding_constraint.2067, %all-gather.374), lhs_contracting_dims={2}, rhs_contracting_dims={0}
  %sharding_constraint.2068 = bf16[1,4096,8]{2,1,0} copy(%dot.969)
  %top_k.168 = bf16[4096,8]{1,0} reshape(%sharding_constraint.2068)
  %top_k.169 = (bf16[4096,2]{1,0}, s32[4096,2]{1,0}) custom-call(%top_k.168), custom_call_target="TopK", called_computations={%compare_greater_than.56.21455.clone}
  %get-tuple-element.1212 = bf16[4096,2]{1,0} get-tuple-element(%top_k.169), index=0
  %get-tuple-element.1213 = s32[4096,2]{1,0} get-tuple-element(%top_k.169), index=1
  %add.2292 = s32[4096,2]{1,0} add(%get-tuple-element.1213, %broadcast.3418)
  %sort.120 = (bf16[4096,2]{1,0}, s32[4096,2]{1,0}) sort(%get-tuple-element.1212, %add.2292), dimensions={1}, is_stable=true, to_apply=%compare-value-and-index.56
  %get-tuple-element.1215 = s32[4096,2]{1,0} get-tuple-element(%sort.120), index=1
  %slice.680 = s32[4096,2]{1,0} slice(%get-tuple-element.1215), slice={[0:4096], [0:2]}
  %top_k.170 = s32[1,4096,2]{2,1,0} reshape(%slice.680)
  %lt.219 = pred[1,4096,2]{2,1,0} compare(%top_k.170, %broadcast.3419), direction=LT
  %add.2293 = s32[1,4096,2]{2,1,0} add(%top_k.170, %broadcast.3420)
  %select_n.632 = s32[1,4096,2]{2,1,0} select(%lt.219, %add.2293, %top_k.170)
  %broadcast_in_dim.761 = s32[1,4096,2,1]{3,2,1,0} reshape(%select_n.632)
  %concatenate.575 = s32[1,4096,2,3]{3,2,1,0} concatenate(%add.1356, %iota.2781, %broadcast_in_dim.761), dimensions={3}
  %subtract.194 = s32[1,4096,2,3]{3,2,1,0} subtract(%concatenate.575, %broadcast.3428)
  %scatter.265 = u32[1,4096,8]{2,1,0} scatter(%dynamic-slice.43, %subtract.194, %add.1401), update_window_dims={}, inserted_window_dims={0,1,2}, scatter_dims_to_operand_dims={0,1,2}, index_vector_dim=3, to_apply=%region_828.21491.clone
  %gather.80 = u32[1,4096,2]{2,1,0} gather(%scatter.265, %subtract.194), offset_dims={}, collapsed_slice_dims={0,1,2}, start_index_map={0,1,2}, index_vector_dim=3, slice_sizes={1,1,1}
  %eq.2429 = pred[1,4096,2]{2,1,0} compare(%add.1401, %gather.80), direction=EQ
  %get-tuple-element.1214 = bf16[4096,2]{1,0} get-tuple-element(%sort.120), index=0
  %slice.679 = bf16[4096,2]{1,0} slice(%get-tuple-element.1214), slice={[0:4096], [0:2]}
  %convert_element_type.2802 = f32[4096,2]{1,0} convert(%slice.679)
  %convert_element_type.2804 = f32[1,4096,2]{2,1,0} reshape(%convert_element_type.2802)
  %reduce.828 = f32[4096]{0} reduce(%convert_element_type.2802, %constant.1450), dimensions={1}, to_apply=%region_829.21500
  %sub.376 = f32[1,4096]{1,0} reshape(%reduce.828)
  %sub.377 = f32[1,4096,2]{2,1,0} broadcast(%sub.376), dimensions={0,1}
  %sub.378 = f32[1,4096,2]{2,1,0} subtract(%convert_element_type.2804, %sub.377)
  %exp.239 = f32[1,4096,2]{2,1,0} exponential(%sub.378)
  %reduce.829 = f32[1,4096]{1,0} reduce(%exp.239, %constant.1360), dimensions={2}, to_apply=%region_830.21509
  %div.1289 = f32[1,4096,2]{2,1,0} broadcast(%reduce.829), dimensions={0,1}
  %div.1290 = f32[1,4096,2]{2,1,0} divide(%exp.239, %div.1289)
  %convert_element_type.2805 = bf16[1,4096,2]{2,1,0} convert(%div.1290)
  %select_n.633 = bf16[1,4096,2]{2,1,0} select(%eq.2429, %convert_element_type.2805, %broadcast.3427)
  %scatter.266 = bf16[1,4096,8]{2,1,0} scatter(%broadcast.3379, %subtract.194, %select_n.633), update_window_dims={}, inserted_window_dims={0,1,2}, scatter_dims_to_operand_dims={0,1,2}, index_vector_dim=3, to_apply=%region_831.21518.clone
  %eq.2431 = s32[1,4096,2,8]{3,2,1,0} broadcast(%top_k.170), dimensions={0,1,2}
  %iota.2792 = s32[1,4096,2,8]{3,2,1,0} iota(), iota_dimension=3
  %eq.2432 = pred[1,4096,2,8]{3,2,1,0} compare(%eq.2431, %iota.2792), direction=EQ
  %convert_element_type.2807 = s32[1,4096,2,8]{3,2,1,0} convert(%eq.2432)
  %reshape.13111 = s32[1,8192,8]{2,1,0} reshape(%convert_element_type.2807)
  %sharding_constraint.2069 = s32[1,8192,8]{2,1,0} copy(%reshape.13111)
  %reduce-window.56 = s32[1,8192,8]{2,1,0} reduce-window(%sharding_constraint.2069, %constant.1181), window={size=1x8192x1 pad=0_0x8191_0x0_0}, to_apply=%region_832.21530
  %reshape.13113 = s32[1,4096,2,8]{3,2,1,0} reshape(%reduce-window.56)
  %sharding_constraint.2070 = s32[1,4096,2,8]{3,2,1,0} copy(%reshape.13113)
  %le.162 = pred[1,4096,2,8]{3,2,1,0} compare(%sharding_constraint.2070, %broadcast.3429), direction=LE
  %mul.8149 = s32[1,4096,2,8]{3,2,1,0} select(%le.162, %convert_element_type.2807, %broadcast.3430)
  %reduce.830 = s32[1,4096,8]{2,1,0} reduce(%mul.8149, %constant.1181), dimensions={2}, to_apply=%region_833.21539
  %convert_element_type.2808 = bf16[1,4096,8]{2,1,0} convert(%reduce.830)
  %mul.8150 = bf16[1,4096,8]{2,1,0} multiply(%scatter.266, %convert_element_type.2808)
  %mul.8151 = bf16[1,4096,8,1025]{3,2,1,0} broadcast(%mul.8150), dimensions={0,1,2}
  %mul.8152 = s32[1,8192,8]{2,1,0} multiply(%sharding_constraint.2069, %reduce-window.56)
  %reshape.13114 = s32[1,4096,2,8]{3,2,1,0} reshape(%mul.8152)
  %reduce.831 = s32[1,4096,8]{2,1,0} reduce(%reshape.13114, %constant.1181), dimensions={2}, to_apply=%region_834.21549
  %mul.8153 = s32[1,4096,8]{2,1,0} multiply(%reduce.831, %reduce.830)
  %eq.2433 = s32[1,4096,8,1025]{3,2,1,0} broadcast(%mul.8153), dimensions={0,1,2}
  %iota.2793 = s32[1,4096,8,1025]{3,2,1,0} iota(), iota_dimension=3
  %eq.2434 = pred[1,4096,8,1025]{3,2,1,0} compare(%eq.2433, %iota.2793), direction=EQ
  %convert_element_type.2810 = s32[1,4096,8,1025]{3,2,1,0} convert(%eq.2434)
  %convert_element_type.2811 = bf16[1,4096,8,1025]{3,2,1,0} convert(%convert_element_type.2810)
  %mul.8155 = bf16[1,4096,8,1025]{3,2,1,0} multiply(%mul.8151, %convert_element_type.2811)
  %slice.681 = bf16[1,4096,8,1024]{3,2,1,0} slice(%mul.8155), slice={[0:1], [0:4096], [0:8], [1:1025]}
  %convert_element_type.2812 = pred[1,4096,8,1024]{3,2,1,0} compare(%slice.681, %broadcast.3431), direction=NE
  %sharding_constraint.2071 = pred[1,4096,8,1024]{3,2,1,0} copy(%convert_element_type.2812)
  %dot_general.116 = bf16[1,4096,8,1024]{3,2,1,0} convert(%sharding_constraint.2071)
  %dot.970 = bf16[1,8,1024,4096]{3,2,1,0} dot(%dot_general.116, %sharding_constraint.2067), lhs_batch_dims={0}, lhs_contracting_dims={1}, rhs_batch_dims={0}, rhs_contracting_dims={1}
  %reshape.13117 = bf16[1,8,1,1024,4096]{4,3,2,1,0} reshape(%dot.970)
  %all-to-all.160 = bf16[1,8,1,1024,4096]{4,3,2,1,0} all-to-all(%reshape.13117), channel_id=701, replica_groups=[1,8]<=[8], dimensions={1}
  %transpose.269 = bf16[8,1,1,1024,4096]{4,3,2,0,1} transpose(%all-to-all.160), dimensions={1,0,2,3,4}
  %reshape.13118 = bf16[8,1,1024,4096]{3,2,1,0} reshape(%transpose.269)
  %transpose.270 = bf16[1,8,1024,4096]{3,2,0,1} transpose(%reshape.13118), dimensions={1,0,2,3}
  %sharding_constraint.2074 = bf16[1,8,1024,4096]{3,2,0,1} copy(%transpose.270)
  %get-tuple-element.1218 = bf16[1,4096,14336]{2,1,0} get-tuple-element(%remat2.35), index=1
  %sharding_constraint.2076 = bf16[1,4096,14336]{2,1,0} copy(%get-tuple-element.1218)
  %dot.971 = bf16[1,8,1024,14336]{3,2,1,0} dot(%sharding_constraint.2074, %sharding_constraint.2076), lhs_batch_dims={0}, lhs_contracting_dims={3}, rhs_batch_dims={0}, rhs_contracting_dims={1}
  %sharding_constraint.2077 = bf16[1,8,1024,14336]{3,2,1,0} copy(%dot.971)
  %neg.286 = bf16[1,8,1024,14336]{3,2,1,0} negate(%sharding_constraint.2077)
  %exp.240 = bf16[1,8,1024,14336]{3,2,1,0} exponential(%neg.286)
  %add.2299 = bf16[1,8,1024,14336]{3,2,1,0} add(%exp.240, %jit_silu_.0)
  %div.1291 = bf16[1,8,1024,14336]{3,2,1,0} divide(%jit_silu_.0, %add.2299)
  %mul.8156 = bf16[1,8,1024,14336]{3,2,1,0} multiply(%sharding_constraint.2077, %div.1291)
  %sharding_constraint.2078 = bf16[1,4096,4096]{2,1,0} copy(%sharding_constraint.2057)
  %sharding_constraint.2079 = bf16[1,4096,8,1024]{3,2,1,0} copy(%slice.681)
  %dot.972 = bf16[1,4096,8,1024]{3,2,1,0} dot(%sharding_constraint.2078, %sharding_constraint.2079), lhs_batch_dims={0}, lhs_contracting_dims={1}, rhs_batch_dims={0}, rhs_contracting_dims={1}
  %reshape.13121 = bf16[1,4096,8,1,1024]{4,3,2,1,0} reshape(%dot.972)
  %all-to-all.161 = bf16[1,4096,8,1,1024]{4,3,2,1,0} all-to-all(%reshape.13121), channel_id=702, replica_groups=[1,8]<=[8], dimensions={2}
  %transpose.271 = bf16[8,1,4096,1,1024]{4,3,0,2,1} transpose(%all-to-all.161), dimensions={2,0,1,3,4}
  %reshape.13122 = bf16[8,4096,1,1024]{3,2,1,0} reshape(%transpose.271)
  %transpose.272 = bf16[1,8,1024,4096]{2,0,3,1} transpose(%reshape.13122), dimensions={2,0,3,1}
  %sharding_constraint.2080 = bf16[1,8,1024,4096]{2,0,3,1} copy(%transpose.272)
  %get-tuple-element.1219 = bf16[1,14336,4096]{2,1,0} get-tuple-element(%remat2.35), index=3
  %sharding_constraint.2081 = bf16[1,14336,4096]{2,1,0} copy(%get-tuple-element.1219)
  %dot.973 = bf16[1,8,1024,14336]{3,2,1,0} dot(%sharding_constraint.2080, %sharding_constraint.2081), lhs_batch_dims={0}, lhs_contracting_dims={3}, rhs_batch_dims={0}, rhs_contracting_dims={2}
  %mul.8157 = bf16[1,8,1024,14336]{3,2,1,0} multiply(%mul.8156, %dot.973)
  %sharding_constraint.2082 = bf16[1,8,1024,14336]{3,2,1,0} copy(%mul.8157)
  %get-tuple-element.1220 = bf16[1,4096,14336]{2,1,0} get-tuple-element(%remat2.35), index=2
  %sharding_constraint.2083 = bf16[1,4096,14336]{2,1,0} copy(%get-tuple-element.1220)
  %dot.974 = bf16[1,8,1024,4096]{3,2,1,0} dot(%sharding_constraint.2082, %sharding_constraint.2083), lhs_batch_dims={0}, lhs_contracting_dims={3}, rhs_batch_dims={0}, rhs_contracting_dims={2}
  %dot.975 = bf16[1,8,1024,14336]{3,2,1,0} dot(%sharding_constraint.2074, %sharding_constraint.2083), lhs_batch_dims={0}, lhs_contracting_dims={3}, rhs_batch_dims={0}, rhs_contracting_dims={1}
  %sharding_constraint.2084 = bf16[1,8,1024,14336]{3,2,1,0} copy(%dot.975)
  %mul.8159 = bf16[1,8,1024,14336]{3,2,1,0} multiply(%dot.973, %sharding_constraint.2084)
  %mul.8160 = bf16[1,8,1024,14336]{3,2,1,0} multiply(%mul.8159, %div.1291)
  %mul.8161 = bf16[1,8,1024,14336]{3,2,1,0} multiply(%sharding_constraint.2077, %mul.8159)
  %sub.379 = bf16[1,8,1024,14336]{3,2,1,0} subtract(%jit_silu_.0, %div.1291)
  %mul.8162 = bf16[1,8,1024,14336]{3,2,1,0} multiply(%div.1291, %sub.379)
  %mul.8163 = bf16[1,8,1024,14336]{3,2,1,0} multiply(%mul.8161, %mul.8162)
  %add_any.403 = bf16[1,8,1024,14336]{3,2,1,0} add(%mul.8160, %mul.8163)
  %sharding_constraint.2085 = bf16[1,8,1024,14336]{3,2,1,0} copy(%add_any.403)
  %dot.976 = bf16[1,8,1024,4096]{3,2,1,0} dot(%sharding_constraint.2085, %sharding_constraint.2076), lhs_batch_dims={0}, lhs_contracting_dims={3}, rhs_batch_dims={0}, rhs_contracting_dims={2}
  %add_any.404 = bf16[1,8,1024,4096]{3,2,1,0} add(%dot.974, %dot.976)
  %sharding_constraint.2086 = bf16[1,8,1024,4096]{3,2,1,0} copy(%add_any.404)
  %transpose.273 = bf16[8,1,1024,4096]{3,2,0,1} transpose(%sharding_constraint.2086), dimensions={1,0,2,3}
  %reshape.13125 = bf16[8,1,1,1024,4096]{4,3,2,1,0} reshape(%transpose.273)
  %all-to-all.162 = bf16[8,1,1,1024,4096]{4,3,2,1,0} all-to-all(%reshape.13125), channel_id=703, replica_groups=[1,8]<=[8], dimensions={0}
  %transpose.274 = bf16[1,8,1,1024,4096]{4,3,2,0,1} transpose(%all-to-all.162), dimensions={1,0,2,3,4}
  %reshape.13126 = bf16[1,8,1024,4096]{3,2,1,0} reshape(%transpose.274)
  %dot.977 = bf16[1,4096,4096]{2,1,0} dot(%dot_general.116, %reshape.13126), lhs_batch_dims={0}, lhs_contracting_dims={2,3}, rhs_batch_dims={0}, rhs_contracting_dims={1,2}
  %reshape.13128 = s32[1,4096,2,1]{3,2,1,0} reshape(%slice.680)
  %ge.24 = pred[1,4096,2,3]{3,2,1,0} compare(%concatenate.575, %broadcast.3629), direction=GE
  %le.164 = pred[1,4096,2,3]{3,2,1,0} compare(%concatenate.575, %le.67), direction=LE
  %and.202 = pred[1,4096,2,3]{3,2,1,0} and(%ge.24, %le.164)
  %reduce.832 = pred[1,4096,2]{2,1,0} reduce(%and.202, %constant.5574), dimensions={3}, to_apply=%region_835.21606
  %mul.8164 = bf16[1,8,1024,14336]{3,2,1,0} multiply(%mul.8156, %sharding_constraint.2084)
  %dot.978 = bf16[1,8,1024,4096]{3,2,1,0} dot(%mul.8164, %sharding_constraint.2081), lhs_batch_dims={0}, lhs_contracting_dims={3}, rhs_batch_dims={0}, rhs_contracting_dims={1}
  %sharding_constraint.2087 = bf16[1,8,1024,4096]{3,2,1,0} copy(%dot.978)
  %reshape.13136 = bf16[1,8,1,1024,4096]{4,3,2,1,0} reshape(%sharding_constraint.2087)
  %all-to-all.163 = bf16[1,8,1,1024,4096]{4,3,2,1,0} all-to-all(%reshape.13136), channel_id=704, replica_groups=[1,8]<=[8], dimensions={1}
  %transpose.275 = bf16[8,1,1,1024,4096]{4,3,2,0,1} transpose(%all-to-all.163), dimensions={1,0,2,3,4}
  %reshape.13137 = bf16[8,1,1024,4096]{3,2,1,0} reshape(%transpose.275)
  %dot.979 = bf16[1,4096,8,1024]{3,2,1,0} dot(%sharding_constraint.2078, %reshape.13137), lhs_batch_dims={0}, lhs_contracting_dims={2}, rhs_batch_dims={1}, rhs_contracting_dims={3}
  %sharding_constraint.2088 = bf16[1,4096,8,1024]{3,2,1,0} copy(%dot.979)
  %pad.24 = bf16[1,4096,8,1025]{3,2,1,0} pad(%sharding_constraint.2088, %constant.1190), padding=0_0x0_0x0_0x1_0
  %mul.8167 = bf16[1,4096,8,1025]{3,2,1,0} multiply(%pad.24, %convert_element_type.2811)
  %reduce.833 = bf16[1,4096,8]{2,1,0} reduce(%mul.8167, %constant.1190), dimensions={3}, to_apply=%region_836.21618
  %mul.8168 = bf16[1,4096,8]{2,1,0} multiply(%reduce.833, %convert_element_type.2808)
  %gather.81 = bf16[1,4096,2]{2,1,0} gather(%mul.8168, %subtract.194), offset_dims={}, collapsed_slice_dims={0,1,2}, start_index_map={0,1,2}, index_vector_dim=3, slice_sizes={1,1,1}
  %select_n.634 = bf16[1,4096,2]{2,1,0} select(%reduce.832, %gather.81, %broadcast.3427)
  %select_n.635 = bf16[1,4096,2]{2,1,0} select(%eq.2429, %select_n.634, %broadcast.3427)
  %convert_element_type.2813 = f32[1,4096,2]{2,1,0} convert(%select_n.635)
  %div.1293 = f32[1,4096,2]{2,1,0} divide(%convert_element_type.2813, %div.1289)
  %mul.8169 = f32[1,4096]{1,0} multiply(%reduce.829, %reduce.829)
  %div.1294 = f32[1,4096]{1,0} divide(%add.1847, %mul.8169)
  %mul.8170 = f32[1,4096,2]{2,1,0} broadcast(%div.1294), dimensions={0,1}
  %mul.8171 = f32[1,4096,2]{2,1,0} multiply(%convert_element_type.2813, %mul.8170)
  %mul.8172 = f32[1,4096,2]{2,1,0} multiply(%mul.8171, %exp.239)
  %reduce.834 = f32[1,4096]{1,0} reduce(%mul.8172, %constant.1360), dimensions={2}, to_apply=%region_837.21635
  %neg.287 = f32[1,4096]{1,0} negate(%reduce.834)
  %broadcast_in_dim.762 = f32[1,4096,2]{2,1,0} broadcast(%neg.287), dimensions={0,1}
  %add_any.405 = f32[1,4096,2]{2,1,0} add(%div.1293, %broadcast_in_dim.762)
  %mul.8174 = f32[1,4096,2]{2,1,0} multiply(%add_any.405, %exp.239)
  %convert_element_type.2814 = bf16[1,4096,2]{2,1,0} convert(%mul.8174)
  %scatter.267 = bf16[1,4096,8]{2,1,0} scatter(%broadcast.3379, %reshape.13128, %convert_element_type.2814), update_window_dims={}, inserted_window_dims={2}, scatter_dims_to_operand_dims={2}, input_batching_dims={0,1}, scatter_indices_batching_dims={0,1}, index_vector_dim=3, to_apply=%region_838.21645.clone
  %sharding_constraint.2089 = bf16[1,4096,8]{2,1,0} copy(%scatter.267)
  %dot.980 = bf16[1,4096,4096]{2,1,0} dot(%sharding_constraint.2089, %all-gather.374), lhs_contracting_dims={2}, rhs_contracting_dims={1}
  %add_any.406 = bf16[1,4096,4096]{2,1,0} add(%dot.977, %dot.980)
  %sharding_constraint.2090 = bf16[1,4096,4096]{2,1,0} copy(%add_any.406)
  %mul.8176 = bf16[1,4096,4096]{2,1,0} multiply(%sharding_constraint.2090, %mul.8147)
  %convert_element_type.2817 = f32[1,4096,4096]{2,1,0} convert(%mul.8176)
  %mul.8184 = f32[1,4096,4096]{2,1,0} multiply(%convert_element_type.2817, %mul.8145)
  %mul.8185 = f32[1,4096,4096]{2,1,0} multiply(%convert_element_type.2800, %convert_element_type.2817)
  %reduce.835 = f32[1,4096]{1,0} reduce(%mul.8185, %constant.1360), dimensions={2}, to_apply=%region_839.21661
  %reshape.13149 = f32[1,4096,1]{2,1,0} reshape(%reduce.835)
  %div.1295 = f32[1,4096,1]{2,1,0} divide(%rsqrt.178, %add.2291)
  %mul.8186 = f32[1,4096,1]{2,1,0} multiply(%div.1295, %broadcast.3620)
  %mul.8187 = f32[1,4096,1]{2,1,0} multiply(%reshape.13149, %mul.8186)
  %mul.8188 = f32[1,4096,1]{2,1,0} multiply(%mul.8187, %mul.4455)
  %mul.8190 = f32[1,4096]{1,0} reshape(%mul.8188)
  %mul.8191 = f32[1,4096,4096]{2,1,0} broadcast(%mul.8190), dimensions={0,1}
  %mul.8192 = f32[1,4096,4096]{2,1,0} multiply(%convert_element_type.2800, %mul.8191)
  %add_any.407 = f32[1,4096,4096]{2,1,0} add(%mul.8184, %mul.8192)
  %convert_element_type.2819 = bf16[1,4096,4096]{2,1,0} convert(%add_any.407)
  %add_any.408 = bf16[1,4096,4096]{2,1,0} add(%sharding_constraint.2057, %convert_element_type.2819)
  %get-tuple-element.1221 = f32[1,32,4096,1]{3,2,1,0} get-tuple-element(%te_fused_attn_forward_ffi.224), index=1
  %get-tuple-element.1222 = u32[2,4]{1,0} get-tuple-element(%te_fused_attn_forward_ffi.224), index=2
  %sharding_constraint.2091 = u32[2,4]{1,0} copy(%get-tuple-element.1222)
  %sharding_constraint.2092 = bf16[1,4096,4096]{2,1,0} copy(%add_any.408)
  %dot.981 = bf16[1,4096,32,128]{3,2,1,0} dot(%sharding_constraint.2092, %all-gather.373), lhs_contracting_dims={2}, rhs_contracting_dims={2}
  %sharding_constraint.2093 = bf16[1,4096,32,128]{3,2,1,0} copy(%dot.981)
  %te_fused_attn_backward_ffi.120 = (bf16[1,4096,32,128]{3,2,1,0}, bf16[1,4096,8,128]{3,2,1,0}, bf16[1,4096,8,128]{3,2,1,0}, bf16[0]{0}, u8[134742064]{0}) custom-call(%sharding_constraint.2061, %sharding_constraint.2063, %sharding_constraint.2064, %constant.1403, %get-tuple-element.1221, /*index=5*/%sharding_constraint.2091, %get-tuple-element.1208, %sharding_constraint.2093, %concatenate.573, %concatenate.574, /*index=10*/%constant.1416, %constant.1416, %constant.1416, %constant.1416, %constant.1416, /*index=15*/%constant.1416), custom_call_target="te_fused_attn_backward_ffi", operand_layout_constraints={bf16[1,4096,32,128]{3,2,1,0}, bf16[1,4096,8,128]{3,2,1,0}, bf16[1,4096,8,128]{3,2,1,0}, bf16[0]{0}, f32[1,32,4096,1]{3,2,1,0}, u32[2,4]{1,0}, bf16[1,4096,32,128]{3,2,1,0}, bf16[1,4096,32,128]{3,2,1,0}, s32[2]{0}, s32[2]{0}, f32[0]{0}, f32[0]{0}, f32[0]{0}, f32[0]{0}, f32[0]{0}, f32[0]{0}}, api_version=API_VERSION_TYPED_FFI, backend_config={attn_heads = 32 : i64, bias_batch = 0 : i64, bias_heads = 0 : i64, bias_type = 0 : i64, deterministic = false, dropout_probability = 0.000000e+00 : f64, input_batch = 1 : i64, is_training = true, kv_max_seqlen = 4096 : i64, mask_type = 3 : i64, max_segments_per_seq = 1 : i64, num_gqa_groups = 8 : i64, q_max_seqlen = 4096 : i64, qk_head_dim = 128 : i64, qkv_layout = 9 : i64, scaling_factor = 1.000000e+00 : f64, v_head_dim = 128 : i64, window_size_left = -1 : i64, window_size_right = -1 : i64}
  %get-tuple-element.1223 = bf16[1,4096,8,128]{3,2,1,0} get-tuple-element(%te_fused_attn_backward_ffi.120), index=2
  %sharding_constraint.2094 = bf16[1,4096,8,128]{3,2,1,0} copy(%get-tuple-element.1223)
  %dot.982 = bf16[1,4096,4096]{2,1,0} dot(%sharding_constraint.2094, %all-gather.372), lhs_contracting_dims={2,3}, rhs_contracting_dims={1,2}
  %get-tuple-element.1224 = bf16[1,4096,8,128]{3,2,1,0} get-tuple-element(%te_fused_attn_backward_ffi.120), index=1
  %sharding_constraint.2095 = bf16[1,4096,8,128]{3,2,1,0} copy(%get-tuple-element.1224)
  %slice.682 = bf16[1,4096,8,64]{3,2,1,0} slice(%sharding_constraint.2095), slice={[0:1], [0:4096], [0:8], [64:128]}
  %mul.8195 = bf16[1,4096,8,64]{3,2,1,0} multiply(%slice.682, %mul.8135)
  %slice.683 = bf16[1,4096,8,64]{3,2,1,0} slice(%sharding_constraint.2095), slice={[0:1], [0:4096], [0:8], [0:64]}
  %mul.8202 = bf16[1,4096,8,64]{3,2,1,0} multiply(%slice.683, %mul.8131)
  %add_any.409 = bf16[1,4096,8,64]{3,2,1,0} add(%mul.8195, %mul.8202)
  %mul.8214 = bf16[1,4096,8,64]{3,2,1,0} multiply(%slice.682, %mul.8131)
  %neg.288 = bf16[1,4096,8,64]{3,2,1,0} negate(%slice.683)
  %mul.8221 = bf16[1,4096,8,64]{3,2,1,0} multiply(%neg.288, %mul.8135)
  %add_any.410 = bf16[1,4096,8,64]{3,2,1,0} add(%mul.8214, %mul.8221)
  %concatenate.582 = bf16[1,4096,8,128]{3,2,1,0} concatenate(%add_any.409, %add_any.410), dimensions={3}
  %dot.983 = bf16[1,4096,4096]{2,1,0} dot(%concatenate.582, %all-gather.371), lhs_contracting_dims={2,3}, rhs_contracting_dims={1,2}
  %add_any.411 = bf16[1,4096,4096]{2,1,0} add(%dot.982, %dot.983)
  %sharding_constraint.2096 = bf16[1,4096,4096]{2,1,0} copy(%add_any.411)
  %get-tuple-element.1225 = bf16[1,4096,32,128]{3,2,1,0} get-tuple-element(%te_fused_attn_backward_ffi.120), index=0
  %sharding_constraint.2097 = bf16[1,4096,32,128]{3,2,1,0} copy(%get-tuple-element.1225)
  %slice.684 = bf16[1,4096,32,64]{3,2,1,0} slice(%sharding_constraint.2097), slice={[0:1], [0:4096], [0:32], [64:128]}
  %mul.8228 = bf16[1,4096,32,64]{3,2,1,0} multiply(%slice.684, %mul.8118)
  %slice.685 = bf16[1,4096,32,64]{3,2,1,0} slice(%sharding_constraint.2097), slice={[0:1], [0:4096], [0:32], [0:64]}
  %mul.8235 = bf16[1,4096,32,64]{3,2,1,0} multiply(%slice.685, %mul.8114)
  %add_any.412 = bf16[1,4096,32,64]{3,2,1,0} add(%mul.8228, %mul.8235)
  %mul.8247 = bf16[1,4096,32,64]{3,2,1,0} multiply(%slice.684, %mul.8114)
  %neg.289 = bf16[1,4096,32,64]{3,2,1,0} negate(%slice.685)
  %mul.8250 = bf16[1,4096,32,64]{3,2,1,0} multiply(%neg.289, %mul.8118)
  %add_any.413 = bf16[1,4096,32,64]{3,2,1,0} add(%mul.8247, %mul.8250)
  %concatenate.583 = bf16[1,4096,32,128]{3,2,1,0} concatenate(%add_any.412, %add_any.413), dimensions={3}
  %dot.984 = bf16[1,4096,4096]{2,1,0} dot(%concatenate.583, %all-gather.370), lhs_contracting_dims={2,3}, rhs_contracting_dims={1,2}
  %sharding_constraint.2098 = bf16[1,4096,4096]{2,1,0} copy(%dot.984)
  %add_any.414 = bf16[1,4096,4096]{2,1,0} add(%sharding_constraint.2096, %sharding_constraint.2098)
  %sharding_constraint.2099 = bf16[1,4096,4096]{2,1,0} copy(%add_any.414)
  %mul.8252 = bf16[1,4096,4096]{2,1,0} multiply(%sharding_constraint.2099, %mul.8110)
  %convert_element_type.2820 = f32[1,4096,4096]{2,1,0} convert(%mul.8252)
  %mul.8271 = f32[1,4096,4096]{2,1,0} multiply(%convert_element_type.2820, %mul.8108)
  %mul.8272 = f32[1,4096,4096]{2,1,0} multiply(%convert_element_type.2787, %convert_element_type.2820)
  %reduce.836 = f32[1,4096]{1,0} reduce(%mul.8272, %constant.1360), dimensions={2}, to_apply=%region_840.21740
  %reshape.13157 = f32[1,4096,1]{2,1,0} reshape(%reduce.836)
  %div.1296 = f32[1,4096,1]{2,1,0} divide(%rsqrt.177, %add.2286)
  %mul.8273 = f32[1,4096,1]{2,1,0} multiply(%div.1296, %broadcast.3620)
  %mul.8275 = f32[1,4096,1]{2,1,0} multiply(%reshape.13157, %mul.8273)
  %mul.8276 = f32[1,4096,1]{2,1,0} multiply(%mul.8275, %mul.4455)
  %mul.8277 = f32[1,4096]{1,0} reshape(%mul.8276)
  %mul.8278 = f32[1,4096,4096]{2,1,0} broadcast(%mul.8277), dimensions={0,1}
  %mul.8279 = f32[1,4096,4096]{2,1,0} multiply(%convert_element_type.2787, %mul.8278)
  %add_any.415 = f32[1,4096,4096]{2,1,0} add(%mul.8271, %mul.8279)
  %convert_element_type.2821 = bf16[1,4096,4096]{2,1,0} convert(%add_any.415)
  %add_any.416 = bf16[1,4096,4096]{2,1,0} add(%add_any.408, %convert_element_type.2821)
  %sharding_constraint.2100 = bf16[1,4096,4096]{2,1,0} copy(%add_any.416)
  %tuple.323 = (bf16[512,8]{1,0}, bf16[1,4096,14336]{2,1,0}, bf16[1,4096,14336]{2,1,0}, bf16[1,14336,4096]{2,1,0}, bf16[4096]{0}, /*index=5*/bf16[4096]{0}, bf16[512,8,128]{2,1,0}, bf16[32,128,512]{2,1,0}, bf16[512,32,128]{2,1,0}, bf16[512,8,128]{2,1,0}, /*index=10*/bf16[1,4096,4096]{2,1,0}, s32[1,4096]{1,0}, s32[1,4096]{1,0}, bf16[1,4096,4096]{2,1,0}) tuple(%param.73, %param.74, %param.75, %param.76, %param.72, /*index=5*/%param.67, %param.69, %param.71, %param.68, %param.70, /*index=10*/%sharding_constraint.306, %param.10, %param.7, %sharding_constraint.2100)
  %remat2.36 = (bf16[512,8]{1,0}, bf16[1,4096,14336]{2,1,0}, bf16[1,4096,14336]{2,1,0}, bf16[1,14336,4096]{2,1,0}, bf16[4096]{0}, /*index=5*/bf16[4096]{0}, bf16[512,8,128]{2,1,0}, bf16[32,128,512]{2,1,0}, bf16[512,32,128]{2,1,0}, bf16[512,8,128]{2,1,0}, /*index=10*/bf16[1,4096,4096]{2,1,0}, s32[1,4096]{1,0}, s32[1,4096]{1,0}, bf16[1,4096,4096]{2,1,0}) opt-barrier(%tuple.323)
  %get-tuple-element.1226 = bf16[1,4096,4096]{2,1,0} get-tuple-element(%remat2.36), index=13
  %sharding_constraint.2101 = bf16[1,4096,4096]{2,1,0} copy(%get-tuple-element.1226)
  %iota.2798 = s32[1,4096,2,1]{3,2,1,0} iota(), iota_dimension=1
  %get-tuple-element.1227 = bf16[1,4096,4096]{2,1,0} get-tuple-element(%remat2.36), index=10
  %sharding_constraint.2102 = bf16[1,4096,4096]{2,1,0} copy(%get-tuple-element.1227)
  %convert_element_type.2822 = f32[1,4096,4096]{2,1,0} convert(%sharding_constraint.2102)
  %square.118 = f32[1,4096,4096]{2,1,0} multiply(%convert_element_type.2822, %convert_element_type.2822)
  %reduce.837 = f32[1,4096]{1,0} reduce(%square.118, %constant.1360), dimensions={2}, to_apply=%region_841.21782
  %div.1297 = f32[1,4096]{1,0} multiply(%reduce.837, %broadcast.3412)
  %add.2303 = f32[1,4096]{1,0} add(%div.1297, %broadcast.3413)
  %add.2304 = f32[1,4096,1]{2,1,0} reshape(%add.2303)
  %rsqrt.179 = f32[1,4096,1]{2,1,0} rsqrt(%add.2304)
  %mul.8280 = f32[1,4096]{1,0} reshape(%rsqrt.179)
  %mul.8281 = f32[1,4096,4096]{2,1,0} broadcast(%mul.8280), dimensions={0,1}
  %mul.8282 = f32[1,4096,4096]{2,1,0} multiply(%convert_element_type.2822, %mul.8281)
  %convert_element_type.2823 = bf16[1,4096,4096]{2,1,0} convert(%mul.8282)
  %get-tuple-element.1228 = bf16[4096]{0} get-tuple-element(%remat2.36), index=5
  %mul.8283 = bf16[1,4096,4096]{2,1,0} broadcast(%get-tuple-element.1228), dimensions={2}
  %mul.8284 = bf16[1,4096,4096]{2,1,0} multiply(%convert_element_type.2823, %mul.8283)
  %sharding_constraint.2105 = bf16[1,4096,4096]{2,1,0} copy(%mul.8284)
  %sharding_constraint.2106 = bf16[1,4096,4096]{2,1,0} copy(%sharding_constraint.2105)
  %get-tuple-element.1229 = bf16[512,32,128]{2,1,0} get-tuple-element(%remat2.36), index=8
  %all-gather.376 = bf16[4096,32,128]{2,1,0} all-gather(%get-tuple-element.1229), channel_id=707, replica_groups=[1,8]<=[8], dimensions={0}, use_global_device_ids=true
  %dot.985 = bf16[1,4096,32,128]{3,2,1,0} dot(%sharding_constraint.2106, %all-gather.376), lhs_contracting_dims={2}, rhs_contracting_dims={0}
  %slice.686 = bf16[1,4096,32,64]{3,2,1,0} slice(%dot.985), slice={[0:1], [0:4096], [0:32], [0:64]}
  %get-tuple-element.1230 = s32[1,4096]{1,0} get-tuple-element(%remat2.36), index=12
  %convert_element_type.2824 = f32[1,4096]{1,0} convert(%get-tuple-element.1230)
  %div.1298 = f32[1,4096,1,64]{3,2,1,0} broadcast(%convert_element_type.2824), dimensions={0,1}
  %div.1301 = f32[1,4096,1,64]{3,2,1,0} divide(%div.1298, %div.402)
  %cos.115 = f32[1,4096,1,64]{3,2,1,0} cosine(%div.1301)
  %convert_element_type.2826 = bf16[1,4096,1,64]{3,2,1,0} convert(%cos.115)
  %mul.8286 = bf16[1,4096,64]{2,1,0} reshape(%convert_element_type.2826)
  %mul.8287 = bf16[1,4096,32,64]{3,2,1,0} broadcast(%mul.8286), dimensions={0,1,3}
  %mul.8288 = bf16[1,4096,32,64]{3,2,1,0} multiply(%slice.686, %mul.8287)
  %slice.687 = bf16[1,4096,32,64]{3,2,1,0} slice(%dot.985), slice={[0:1], [0:4096], [0:32], [64:128]}
  %sin.114 = f32[1,4096,1,64]{3,2,1,0} sine(%div.1301)
  %convert_element_type.2827 = bf16[1,4096,1,64]{3,2,1,0} convert(%sin.114)
  %mul.8289 = bf16[1,4096,64]{2,1,0} reshape(%convert_element_type.2827)
  %mul.8290 = bf16[1,4096,32,64]{3,2,1,0} broadcast(%mul.8289), dimensions={0,1,3}
  %mul.8291 = bf16[1,4096,32,64]{3,2,1,0} multiply(%slice.687, %mul.8290)
  %sub.380 = bf16[1,4096,32,64]{3,2,1,0} subtract(%mul.8288, %mul.8291)
  %mul.8311 = bf16[1,4096,32,64]{3,2,1,0} multiply(%slice.687, %mul.8287)
  %mul.8314 = bf16[1,4096,32,64]{3,2,1,0} multiply(%slice.686, %mul.8290)
  %add.2305 = bf16[1,4096,32,64]{3,2,1,0} add(%mul.8311, %mul.8314)
  %concatenate.584 = bf16[1,4096,32,128]{3,2,1,0} concatenate(%sub.380, %add.2305), dimensions={3}
  %sharding_constraint.2107 = bf16[1,4096,32,128]{3,2,1,0} copy(%concatenate.584)
  %get-tuple-element.1231 = bf16[512,8,128]{2,1,0} get-tuple-element(%remat2.36), index=6
  %all-gather.377 = bf16[4096,8,128]{2,1,0} all-gather(%get-tuple-element.1231), channel_id=708, replica_groups=[1,8]<=[8], dimensions={0}, use_global_device_ids=true
  %dot.986 = bf16[1,4096,8,128]{3,2,1,0} dot(%sharding_constraint.2106, %all-gather.377), lhs_contracting_dims={2}, rhs_contracting_dims={0}
  %slice.688 = bf16[1,4096,8,64]{3,2,1,0} slice(%dot.986), slice={[0:1], [0:4096], [0:8], [0:64]}
  %mul.8317 = bf16[1,4096,8,64]{3,2,1,0} broadcast(%mul.8286), dimensions={0,1,3}
  %mul.8318 = bf16[1,4096,8,64]{3,2,1,0} multiply(%slice.688, %mul.8317)
  %slice.689 = bf16[1,4096,8,64]{3,2,1,0} slice(%dot.986), slice={[0:1], [0:4096], [0:8], [64:128]}
  %mul.8320 = bf16[1,4096,8,64]{3,2,1,0} broadcast(%mul.8289), dimensions={0,1,3}
  %mul.8321 = bf16[1,4096,8,64]{3,2,1,0} multiply(%slice.689, %mul.8320)
  %sub.381 = bf16[1,4096,8,64]{3,2,1,0} subtract(%mul.8318, %mul.8321)
  %mul.8324 = bf16[1,4096,8,64]{3,2,1,0} multiply(%slice.689, %mul.8317)
  %mul.8327 = bf16[1,4096,8,64]{3,2,1,0} multiply(%slice.688, %mul.8320)
  %add.2306 = bf16[1,4096,8,64]{3,2,1,0} add(%mul.8324, %mul.8327)
  %concatenate.585 = bf16[1,4096,8,128]{3,2,1,0} concatenate(%sub.381, %add.2306), dimensions={3}
  %sharding_constraint.2113 = bf16[1,4096,8,128]{3,2,1,0} copy(%concatenate.585)
  %get-tuple-element.1232 = bf16[512,8,128]{2,1,0} get-tuple-element(%remat2.36), index=9
  %all-gather.378 = bf16[4096,8,128]{2,1,0} all-gather(%get-tuple-element.1232), channel_id=709, replica_groups=[1,8]<=[8], dimensions={0}, use_global_device_ids=true
  %dot.987 = bf16[1,4096,8,128]{3,2,1,0} dot(%sharding_constraint.2106, %all-gather.378), lhs_contracting_dims={2}, rhs_contracting_dims={0}
  %sharding_constraint.2115 = bf16[1,4096,8,128]{3,2,1,0} copy(%dot.987)
  %get-tuple-element.1233 = s32[1,4096]{1,0} get-tuple-element(%remat2.36), index=11
  %eq.2436 = s32[1,4096,4096]{2,1,0} broadcast(%get-tuple-element.1233), dimensions={0,1}
  %eq.2437 = s32[1,4096,4096]{2,1,0} broadcast(%get-tuple-element.1233), dimensions={0,2}
  %eq.2438 = pred[1,4096,4096]{2,1,0} compare(%eq.2436, %eq.2437), direction=EQ
  %and.204 = pred[1,4096,4096]{2,1,0} and(%eq.2438, %and.64)
  %select_n.638 = f32[1,4096,4096]{2,1,0} select(%and.204, %broadcast_in_dim.516, %broadcast_in_dim.517)
  %ne.123 = pred[1,4096,4096]{2,1,0} compare(%select_n.638, %broadcast_in_dim.516), direction=NE
  %not.121 = pred[1,4096,4096]{2,1,0} not(%ne.123)
  %convert_element_type.2832 = s32[1,4096,4096]{2,1,0} convert(%not.121)
  %reduce.838 = s32[1,4096]{1,0} reduce(%convert_element_type.2832, %constant.1181), dimensions={1}, to_apply=%region_842.21878
  %reduce_sum.5753 = s32[1,1,1,4096]{3,2,1,0} reshape(%reduce.838)
  %slice.690 = s32[1,1,1,1]{3,2,1,0} slice(%reduce_sum.5753), slice={[0:1], [0:1], [0:1], [0:1]}
  %squeeze.57 = s32[1,1]{1,0} reshape(%slice.690)
  %reshape.13164 = s32[1]{0} reshape(%squeeze.57)
  %lt.222 = pred[1]{0} compare(%reshape.13164, %constant.1418), direction=LT
  %select_n.639 = s32[1]{0} select(%lt.222, %broadcast_in_dim.518, %reshape.13164)
  %concatenate.586 = s32[2]{0} concatenate(%constant.1418, %select_n.639), dimensions={0}
  %reduce.839 = s32[1,4096]{1,0} reduce(%convert_element_type.2832, %constant.1181), dimensions={2}, to_apply=%region_843.21887
  %reduce_sum.5754 = s32[1,1,1,4096]{3,2,1,0} reshape(%reduce.839)
  %reduce.840 = s32[1,1]{1,0} reduce(%reduce_sum.5754, %constant.1415), dimensions={3,2}, to_apply=%region_844.21893
  %reshape.13165 = s32[1]{0} reshape(%reduce.840)
  %lt.223 = pred[1]{0} compare(%reshape.13165, %constant.1418), direction=LT
  %select_n.640 = s32[1]{0} select(%lt.223, %broadcast_in_dim.518, %reshape.13165)
  %concatenate.587 = s32[2]{0} concatenate(%constant.1418, %select_n.640), dimensions={0}
  %te_fused_attn_forward_ffi.228 = (bf16[1,4096,32,128]{3,2,1,0}, f32[1,32,4096,1]{3,2,1,0}, u32[2,4]{1,0}, u8[48]{0}) custom-call(%sharding_constraint.2107, %sharding_constraint.2113, %sharding_constraint.2115, %constant.1403, %dynamic-slice.38, /*index=5*/%concatenate.586, %concatenate.587, %constant.1416, %constant.1416, %constant.1416, /*index=10*/%constant.1416, %constant.1416, %constant.1416), custom_call_target="te_fused_attn_forward_ffi", operand_layout_constraints={bf16[1,4096,32,128]{3,2,1,0}, bf16[1,4096,8,128]{3,2,1,0}, bf16[1,4096,8,128]{3,2,1,0}, bf16[0]{0}, u32[2]{0}, s32[2]{0}, s32[2]{0}, f32[0]{0}, f32[0]{0}, f32[0]{0}, f32[0]{0}, f32[0]{0}, f32[0]{0}}, api_version=API_VERSION_TYPED_FFI, backend_config={attn_heads = 32 : i64, bias_batch = 0 : i64, bias_heads = 0 : i64, bias_type = 0 : i64, deterministic = false, dropout_probability = 0.000000e+00 : f64, input_batch = 1 : i64, is_training = true, kv_max_seqlen = 4096 : i64, mask_type = 3 : i64, max_segments_per_seq = 1 : i64, num_gqa_groups = 8 : i64, q_max_seqlen = 4096 : i64, qk_head_dim = 128 : i64, qkv_layout = 9 : i64, scaling_factor = 1.000000e+00 : f64, v_head_dim = 128 : i64, window_size_left = -1 : i64, window_size_right = -1 : i64}
  %get-tuple-element.1234 = bf16[1,4096,32,128]{3,2,1,0} get-tuple-element(%te_fused_attn_forward_ffi.228), index=0
  %sharding_constraint.2116 = bf16[1,4096,32,128]{3,2,1,0} copy(%get-tuple-element.1234)
  %get-tuple-element.1235 = bf16[32,128,512]{2,1,0} get-tuple-element(%remat2.36), index=7
  %all-gather.379 = bf16[32,128,4096]{2,1,0} all-gather(%get-tuple-element.1235), channel_id=710, replica_groups=[1,8]<=[8], dimensions={2}, use_global_device_ids=true
  %dot.988 = bf16[1,4096,4096]{2,1,0} dot(%sharding_constraint.2116, %all-gather.379), lhs_contracting_dims={2,3}, rhs_contracting_dims={0,1}
  %sharding_constraint.2118 = bf16[1,4096,4096]{2,1,0} copy(%dot.988)
  %add.2307 = bf16[1,4096,4096]{2,1,0} add(%sharding_constraint.2102, %sharding_constraint.2118)
  %convert_element_type.2834 = f32[1,4096,4096]{2,1,0} convert(%add.2307)
  %square.119 = f32[1,4096,4096]{2,1,0} multiply(%convert_element_type.2834, %convert_element_type.2834)
  %reduce.841 = f32[1,4096]{1,0} reduce(%square.119, %constant.1360), dimensions={2}, to_apply=%region_845.21908
  %div.1306 = f32[1,4096]{1,0} multiply(%reduce.841, %broadcast.3412)
  %add.2308 = f32[1,4096]{1,0} add(%div.1306, %broadcast.3413)
  %add.2309 = f32[1,4096,1]{2,1,0} reshape(%add.2308)
  %rsqrt.180 = f32[1,4096,1]{2,1,0} rsqrt(%add.2309)
  %mul.8328 = f32[1,4096]{1,0} reshape(%rsqrt.180)
  %mul.8329 = f32[1,4096,4096]{2,1,0} broadcast(%mul.8328), dimensions={0,1}
  %mul.8330 = f32[1,4096,4096]{2,1,0} multiply(%convert_element_type.2834, %mul.8329)
  %convert_element_type.2835 = bf16[1,4096,4096]{2,1,0} convert(%mul.8330)
  %get-tuple-element.1236 = bf16[4096]{0} get-tuple-element(%remat2.36), index=4
  %mul.8331 = bf16[1,4096,4096]{2,1,0} broadcast(%get-tuple-element.1236), dimensions={2}
  %mul.8332 = bf16[1,4096,4096]{2,1,0} multiply(%convert_element_type.2835, %mul.8331)
  %sharding_constraint.2120 = bf16[1,4096,4096]{2,1,0} copy(%mul.8332)
  %get-tuple-element.1237 = bf16[512,8]{1,0} get-tuple-element(%remat2.36), index=0
  %all-gather.380 = bf16[4096,8]{1,0} all-gather(%get-tuple-element.1237), channel_id=711, replica_groups=[1,8]<=[8], dimensions={0}, use_global_device_ids=true
  %dot.989 = bf16[1,4096,8]{2,1,0} dot(%sharding_constraint.2120, %all-gather.380), lhs_contracting_dims={2}, rhs_contracting_dims={0}
  %sharding_constraint.2122 = bf16[1,4096,8]{2,1,0} copy(%dot.989)
  %top_k.171 = bf16[4096,8]{1,0} reshape(%sharding_constraint.2122)
  %top_k.172 = (bf16[4096,2]{1,0}, s32[4096,2]{1,0}) custom-call(%top_k.171), custom_call_target="TopK", called_computations={%compare_greater_than.57.21929.clone}
  %get-tuple-element.1238 = bf16[4096,2]{1,0} get-tuple-element(%top_k.172), index=0
  %get-tuple-element.1239 = s32[4096,2]{1,0} get-tuple-element(%top_k.172), index=1
  %add.2310 = s32[4096,2]{1,0} add(%get-tuple-element.1239, %broadcast.3418)
  %sort.121 = (bf16[4096,2]{1,0}, s32[4096,2]{1,0}) sort(%get-tuple-element.1238, %add.2310), dimensions={1}, is_stable=true, to_apply=%compare-value-and-index.57
  %get-tuple-element.1241 = s32[4096,2]{1,0} get-tuple-element(%sort.121), index=1
  %slice.692 = s32[4096,2]{1,0} slice(%get-tuple-element.1241), slice={[0:4096], [0:2]}
  %top_k.173 = s32[1,4096,2]{2,1,0} reshape(%slice.692)
  %lt.224 = pred[1,4096,2]{2,1,0} compare(%top_k.173, %broadcast.3419), direction=LT
  %add.2311 = s32[1,4096,2]{2,1,0} add(%top_k.173, %broadcast.3420)
  %select_n.641 = s32[1,4096,2]{2,1,0} select(%lt.224, %add.2311, %top_k.173)
  %broadcast_in_dim.767 = s32[1,4096,2,1]{3,2,1,0} reshape(%select_n.641)
  %concatenate.588 = s32[1,4096,2,3]{3,2,1,0} concatenate(%add.1356, %iota.2798, %broadcast_in_dim.767), dimensions={3}
  %subtract.198 = s32[1,4096,2,3]{3,2,1,0} subtract(%concatenate.588, %broadcast.3428)
  %scatter.268 = u32[1,4096,8]{2,1,0} scatter(%dynamic-slice.43, %subtract.198, %add.1401), update_window_dims={}, inserted_window_dims={0,1,2}, scatter_dims_to_operand_dims={0,1,2}, index_vector_dim=3, to_apply=%region_846.21965.clone
  %gather.82 = u32[1,4096,2]{2,1,0} gather(%scatter.268, %subtract.198), offset_dims={}, collapsed_slice_dims={0,1,2}, start_index_map={0,1,2}, index_vector_dim=3, slice_sizes={1,1,1}
  %eq.2439 = pred[1,4096,2]{2,1,0} compare(%add.1401, %gather.82), direction=EQ
  %get-tuple-element.1240 = bf16[4096,2]{1,0} get-tuple-element(%sort.121), index=0
  %slice.691 = bf16[4096,2]{1,0} slice(%get-tuple-element.1240), slice={[0:4096], [0:2]}
  %convert_element_type.2836 = f32[4096,2]{1,0} convert(%slice.691)
  %convert_element_type.2837 = f32[1,4096,2]{2,1,0} reshape(%convert_element_type.2836)
  %reduce.842 = f32[4096]{0} reduce(%convert_element_type.2836, %constant.1450), dimensions={1}, to_apply=%region_847.21974
  %sub.382 = f32[1,4096]{1,0} reshape(%reduce.842)
  %sub.383 = f32[1,4096,2]{2,1,0} broadcast(%sub.382), dimensions={0,1}
  %sub.384 = f32[1,4096,2]{2,1,0} subtract(%convert_element_type.2837, %sub.383)
  %exp.241 = f32[1,4096,2]{2,1,0} exponential(%sub.384)
  %reduce.843 = f32[1,4096]{1,0} reduce(%exp.241, %constant.1360), dimensions={2}, to_apply=%region_848.21983
  %div.1307 = f32[1,4096,2]{2,1,0} broadcast(%reduce.843), dimensions={0,1}
  %div.1308 = f32[1,4096,2]{2,1,0} divide(%exp.241, %div.1307)
  %convert_element_type.2838 = bf16[1,4096,2]{2,1,0} convert(%div.1308)
  %select_n.642 = bf16[1,4096,2]{2,1,0} select(%eq.2439, %convert_element_type.2838, %broadcast.3427)
  %scatter.269 = bf16[1,4096,8]{2,1,0} scatter(%broadcast.3379, %subtract.198, %select_n.642), update_window_dims={}, inserted_window_dims={0,1,2}, scatter_dims_to_operand_dims={0,1,2}, index_vector_dim=3, to_apply=%region_849.21992.clone
  %eq.2441 = s32[1,4096,2,8]{3,2,1,0} broadcast(%top_k.173), dimensions={0,1,2}
  %iota.2810 = s32[1,4096,2,8]{3,2,1,0} iota(), iota_dimension=3
  %eq.2445 = pred[1,4096,2,8]{3,2,1,0} compare(%eq.2441, %iota.2810), direction=EQ
  %convert_element_type.2839 = s32[1,4096,2,8]{3,2,1,0} convert(%eq.2445)
  %reshape.13200 = s32[1,8192,8]{2,1,0} reshape(%convert_element_type.2839)
  %sharding_constraint.2125 = s32[1,8192,8]{2,1,0} copy(%reshape.13200)
  %reduce-window.57 = s32[1,8192,8]{2,1,0} reduce-window(%sharding_constraint.2125, %constant.1181), window={size=1x8192x1 pad=0_0x8191_0x0_0}, to_apply=%region_850.22004
  %reshape.13202 = s32[1,4096,2,8]{3,2,1,0} reshape(%reduce-window.57)
  %sharding_constraint.2126 = s32[1,4096,2,8]{3,2,1,0} copy(%reshape.13202)
  %le.166 = pred[1,4096,2,8]{3,2,1,0} compare(%sharding_constraint.2126, %broadcast.3429), direction=LE
  %mul.8333 = s32[1,4096,2,8]{3,2,1,0} select(%le.166, %convert_element_type.2839, %broadcast.3430)
  %reduce.844 = s32[1,4096,8]{2,1,0} reduce(%mul.8333, %constant.1181), dimensions={2}, to_apply=%region_851.22013
  %convert_element_type.2840 = bf16[1,4096,8]{2,1,0} convert(%reduce.844)
  %mul.8334 = bf16[1,4096,8]{2,1,0} multiply(%scatter.269, %convert_element_type.2840)
  %mul.8335 = bf16[1,4096,8,1025]{3,2,1,0} broadcast(%mul.8334), dimensions={0,1,2}
  %mul.8336 = s32[1,8192,8]{2,1,0} multiply(%sharding_constraint.2125, %reduce-window.57)
  %reshape.13203 = s32[1,4096,2,8]{3,2,1,0} reshape(%mul.8336)
  %reduce.845 = s32[1,4096,8]{2,1,0} reduce(%reshape.13203, %constant.1181), dimensions={2}, to_apply=%region_852.22023
  %mul.8337 = s32[1,4096,8]{2,1,0} multiply(%reduce.845, %reduce.844)
  %eq.2446 = s32[1,4096,8,1025]{3,2,1,0} broadcast(%mul.8337), dimensions={0,1,2}
  %iota.2811 = s32[1,4096,8,1025]{3,2,1,0} iota(), iota_dimension=3
  %eq.2447 = pred[1,4096,8,1025]{3,2,1,0} compare(%eq.2446, %iota.2811), direction=EQ
  %convert_element_type.2841 = s32[1,4096,8,1025]{3,2,1,0} convert(%eq.2447)
  %convert_element_type.2843 = bf16[1,4096,8,1025]{3,2,1,0} convert(%convert_element_type.2841)
  %mul.8338 = bf16[1,4096,8,1025]{3,2,1,0} multiply(%mul.8335, %convert_element_type.2843)
  %slice.693 = bf16[1,4096,8,1024]{3,2,1,0} slice(%mul.8338), slice={[0:1], [0:4096], [0:8], [1:1025]}
  %convert_element_type.2844 = pred[1,4096,8,1024]{3,2,1,0} compare(%slice.693, %broadcast.3431), direction=NE
  %sharding_constraint.2127 = pred[1,4096,8,1024]{3,2,1,0} copy(%convert_element_type.2844)
  %dot_general.118 = bf16[1,4096,8,1024]{3,2,1,0} convert(%sharding_constraint.2127)
  %dot.990 = bf16[1,8,1024,4096]{3,2,1,0} dot(%dot_general.118, %sharding_constraint.2120), lhs_batch_dims={0}, lhs_contracting_dims={1}, rhs_batch_dims={0}, rhs_contracting_dims={1}
  %reshape.13206 = bf16[1,8,1,1024,4096]{4,3,2,1,0} reshape(%dot.990)
  %all-to-all.164 = bf16[1,8,1,1024,4096]{4,3,2,1,0} all-to-all(%reshape.13206), channel_id=715, replica_groups=[1,8]<=[8], dimensions={1}
  %transpose.276 = bf16[8,1,1,1024,4096]{4,3,2,0,1} transpose(%all-to-all.164), dimensions={1,0,2,3,4}
  %reshape.13207 = bf16[8,1,1024,4096]{3,2,1,0} reshape(%transpose.276)
  %transpose.277 = bf16[1,8,1024,4096]{3,2,0,1} transpose(%reshape.13207), dimensions={1,0,2,3}
  %sharding_constraint.2128 = bf16[1,8,1024,4096]{3,2,0,1} copy(%transpose.277)
  %get-tuple-element.1244 = bf16[1,4096,14336]{2,1,0} get-tuple-element(%remat2.36), index=1
  %sharding_constraint.2129 = bf16[1,4096,14336]{2,1,0} copy(%get-tuple-element.1244)
  %dot.991 = bf16[1,8,1024,14336]{3,2,1,0} dot(%sharding_constraint.2128, %sharding_constraint.2129), lhs_batch_dims={0}, lhs_contracting_dims={3}, rhs_batch_dims={0}, rhs_contracting_dims={1}
  %sharding_constraint.2130 = bf16[1,8,1024,14336]{3,2,1,0} copy(%dot.991)
  %neg.290 = bf16[1,8,1024,14336]{3,2,1,0} negate(%sharding_constraint.2130)
  %exp.242 = bf16[1,8,1024,14336]{3,2,1,0} exponential(%neg.290)
  %add.2316 = bf16[1,8,1024,14336]{3,2,1,0} add(%exp.242, %jit_silu_.0)
  %div.1309 = bf16[1,8,1024,14336]{3,2,1,0} divide(%jit_silu_.0, %add.2316)
  %mul.8339 = bf16[1,8,1024,14336]{3,2,1,0} multiply(%sharding_constraint.2130, %div.1309)
  %sharding_constraint.2131 = bf16[1,4096,4096]{2,1,0} copy(%sharding_constraint.2101)
  %sharding_constraint.2132 = bf16[1,4096,8,1024]{3,2,1,0} copy(%slice.693)
  %dot.992 = bf16[1,4096,8,1024]{3,2,1,0} dot(%sharding_constraint.2131, %sharding_constraint.2132), lhs_batch_dims={0}, lhs_contracting_dims={1}, rhs_batch_dims={0}, rhs_contracting_dims={1}
  %reshape.13211 = bf16[1,4096,8,1,1024]{4,3,2,1,0} reshape(%dot.992)
  %all-to-all.165 = bf16[1,4096,8,1,1024]{4,3,2,1,0} all-to-all(%reshape.13211), channel_id=716, replica_groups=[1,8]<=[8], dimensions={2}
  %transpose.278 = bf16[8,1,4096,1,1024]{4,3,0,2,1} transpose(%all-to-all.165), dimensions={2,0,1,3,4}
  %reshape.13212 = bf16[8,4096,1,1024]{3,2,1,0} reshape(%transpose.278)
  %transpose.279 = bf16[1,8,1024,4096]{2,0,3,1} transpose(%reshape.13212), dimensions={2,0,3,1}
  %sharding_constraint.2133 = bf16[1,8,1024,4096]{2,0,3,1} copy(%transpose.279)
  %get-tuple-element.1245 = bf16[1,14336,4096]{2,1,0} get-tuple-element(%remat2.36), index=3
  %sharding_constraint.2134 = bf16[1,14336,4096]{2,1,0} copy(%get-tuple-element.1245)
  %dot.993 = bf16[1,8,1024,14336]{3,2,1,0} dot(%sharding_constraint.2133, %sharding_constraint.2134), lhs_batch_dims={0}, lhs_contracting_dims={3}, rhs_batch_dims={0}, rhs_contracting_dims={2}
  %mul.8340 = bf16[1,8,1024,14336]{3,2,1,0} multiply(%mul.8339, %dot.993)
  %sharding_constraint.2135 = bf16[1,8,1024,14336]{3,2,1,0} copy(%mul.8340)
  %get-tuple-element.1246 = bf16[1,4096,14336]{2,1,0} get-tuple-element(%remat2.36), index=2
  %sharding_constraint.2136 = bf16[1,4096,14336]{2,1,0} copy(%get-tuple-element.1246)
  %dot.994 = bf16[1,8,1024,4096]{3,2,1,0} dot(%sharding_constraint.2135, %sharding_constraint.2136), lhs_batch_dims={0}, lhs_contracting_dims={3}, rhs_batch_dims={0}, rhs_contracting_dims={2}
  %dot.995 = bf16[1,8,1024,14336]{3,2,1,0} dot(%sharding_constraint.2128, %sharding_constraint.2136), lhs_batch_dims={0}, lhs_contracting_dims={3}, rhs_batch_dims={0}, rhs_contracting_dims={1}
  %sharding_constraint.2137 = bf16[1,8,1024,14336]{3,2,1,0} copy(%dot.995)
  %mul.8341 = bf16[1,8,1024,14336]{3,2,1,0} multiply(%dot.993, %sharding_constraint.2137)
  %mul.8342 = bf16[1,8,1024,14336]{3,2,1,0} multiply(%mul.8341, %div.1309)
  %mul.8343 = bf16[1,8,1024,14336]{3,2,1,0} multiply(%sharding_constraint.2130, %mul.8341)
  %sub.385 = bf16[1,8,1024,14336]{3,2,1,0} subtract(%jit_silu_.0, %div.1309)
  %mul.8344 = bf16[1,8,1024,14336]{3,2,1,0} multiply(%div.1309, %sub.385)
  %mul.8345 = bf16[1,8,1024,14336]{3,2,1,0} multiply(%mul.8343, %mul.8344)
  %add_any.417 = bf16[1,8,1024,14336]{3,2,1,0} add(%mul.8342, %mul.8345)
  %sharding_constraint.2138 = bf16[1,8,1024,14336]{3,2,1,0} copy(%add_any.417)
  %dot.996 = bf16[1,8,1024,4096]{3,2,1,0} dot(%sharding_constraint.2138, %sharding_constraint.2129), lhs_batch_dims={0}, lhs_contracting_dims={3}, rhs_batch_dims={0}, rhs_contracting_dims={2}
  %add_any.418 = bf16[1,8,1024,4096]{3,2,1,0} add(%dot.994, %dot.996)
  %sharding_constraint.2139 = bf16[1,8,1024,4096]{3,2,1,0} copy(%add_any.418)
  %transpose.280 = bf16[8,1,1024,4096]{3,2,0,1} transpose(%sharding_constraint.2139), dimensions={1,0,2,3}
  %reshape.13215 = bf16[8,1,1,1024,4096]{4,3,2,1,0} reshape(%transpose.280)
  %all-to-all.166 = bf16[8,1,1,1024,4096]{4,3,2,1,0} all-to-all(%reshape.13215), channel_id=717, replica_groups=[1,8]<=[8], dimensions={0}
  %transpose.281 = bf16[1,8,1,1024,4096]{4,3,2,0,1} transpose(%all-to-all.166), dimensions={1,0,2,3,4}
  %reshape.13216 = bf16[1,8,1024,4096]{3,2,1,0} reshape(%transpose.281)
  %dot.997 = bf16[1,4096,4096]{2,1,0} dot(%dot_general.118, %reshape.13216), lhs_batch_dims={0}, lhs_contracting_dims={2,3}, rhs_batch_dims={0}, rhs_contracting_dims={1,2}
  %reshape.13218 = s32[1,4096,2,1]{3,2,1,0} reshape(%slice.692)
  %ge.25 = pred[1,4096,2,3]{3,2,1,0} compare(%concatenate.588, %broadcast.3629), direction=GE
  %le.168 = pred[1,4096,2,3]{3,2,1,0} compare(%concatenate.588, %le.67), direction=LE
  %and.205 = pred[1,4096,2,3]{3,2,1,0} and(%ge.25, %le.168)
  %reduce.846 = pred[1,4096,2]{2,1,0} reduce(%and.205, %constant.5574), dimensions={3}, to_apply=%region_853.22080
  %mul.8346 = bf16[1,8,1024,14336]{3,2,1,0} multiply(%mul.8339, %sharding_constraint.2137)
  %dot.998 = bf16[1,8,1024,4096]{3,2,1,0} dot(%mul.8346, %sharding_constraint.2134), lhs_batch_dims={0}, lhs_contracting_dims={3}, rhs_batch_dims={0}, rhs_contracting_dims={1}
  %sharding_constraint.2140 = bf16[1,8,1024,4096]{3,2,1,0} copy(%dot.998)
  %reshape.13225 = bf16[1,8,1,1024,4096]{4,3,2,1,0} reshape(%sharding_constraint.2140)
  %all-to-all.167 = bf16[1,8,1,1024,4096]{4,3,2,1,0} all-to-all(%reshape.13225), channel_id=718, replica_groups=[1,8]<=[8], dimensions={1}
  %transpose.282 = bf16[8,1,1,1024,4096]{4,3,2,0,1} transpose(%all-to-all.167), dimensions={1,0,2,3,4}
  %reshape.13226 = bf16[8,1,1024,4096]{3,2,1,0} reshape(%transpose.282)
  %dot.999 = bf16[1,4096,8,1024]{3,2,1,0} dot(%sharding_constraint.2131, %reshape.13226), lhs_batch_dims={0}, lhs_contracting_dims={2}, rhs_batch_dims={1}, rhs_contracting_dims={3}
  %sharding_constraint.2141 = bf16[1,4096,8,1024]{3,2,1,0} copy(%dot.999)
  %pad.25 = bf16[1,4096,8,1025]{3,2,1,0} pad(%sharding_constraint.2141, %constant.1190), padding=0_0x0_0x0_0x1_0
  %mul.8347 = bf16[1,4096,8,1025]{3,2,1,0} multiply(%pad.25, %convert_element_type.2843)
  %reduce.847 = bf16[1,4096,8]{2,1,0} reduce(%mul.8347, %constant.1190), dimensions={3}, to_apply=%region_854.22092
  %mul.8348 = bf16[1,4096,8]{2,1,0} multiply(%reduce.847, %convert_element_type.2840)
  %gather.83 = bf16[1,4096,2]{2,1,0} gather(%mul.8348, %subtract.198), offset_dims={}, collapsed_slice_dims={0,1,2}, start_index_map={0,1,2}, index_vector_dim=3, slice_sizes={1,1,1}
  %select_n.643 = bf16[1,4096,2]{2,1,0} select(%reduce.846, %gather.83, %broadcast.3427)
  %select_n.644 = bf16[1,4096,2]{2,1,0} select(%eq.2439, %select_n.643, %broadcast.3427)
  %convert_element_type.2845 = f32[1,4096,2]{2,1,0} convert(%select_n.644)
  %div.1313 = f32[1,4096,2]{2,1,0} divide(%convert_element_type.2845, %div.1307)
  %mul.8349 = f32[1,4096]{1,0} multiply(%reduce.843, %reduce.843)
  %div.1314 = f32[1,4096]{1,0} divide(%add.1847, %mul.8349)
  %mul.8350 = f32[1,4096,2]{2,1,0} broadcast(%div.1314), dimensions={0,1}
  %mul.8351 = f32[1,4096,2]{2,1,0} multiply(%convert_element_type.2845, %mul.8350)
  %mul.8352 = f32[1,4096,2]{2,1,0} multiply(%mul.8351, %exp.241)
  %reduce.848 = f32[1,4096]{1,0} reduce(%mul.8352, %constant.1360), dimensions={2}, to_apply=%region_855.22109
  %neg.291 = f32[1,4096]{1,0} negate(%reduce.848)
  %broadcast_in_dim.768 = f32[1,4096,2]{2,1,0} broadcast(%neg.291), dimensions={0,1}
  %add_any.419 = f32[1,4096,2]{2,1,0} add(%div.1313, %broadcast_in_dim.768)
  %mul.8353 = f32[1,4096,2]{2,1,0} multiply(%add_any.419, %exp.241)
  %convert_element_type.2846 = bf16[1,4096,2]{2,1,0} convert(%mul.8353)
  %scatter.270 = bf16[1,4096,8]{2,1,0} scatter(%broadcast.3379, %reshape.13218, %convert_element_type.2846), update_window_dims={}, inserted_window_dims={2}, scatter_dims_to_operand_dims={2}, input_batching_dims={0,1}, scatter_indices_batching_dims={0,1}, index_vector_dim=3, to_apply=%region_856.22119.clone
  %sharding_constraint.2142 = bf16[1,4096,8]{2,1,0} copy(%scatter.270)
  %dot.1000 = bf16[1,4096,4096]{2,1,0} dot(%sharding_constraint.2142, %all-gather.380), lhs_contracting_dims={2}, rhs_contracting_dims={1}
  %add_any.420 = bf16[1,4096,4096]{2,1,0} add(%dot.997, %dot.1000)
  %sharding_constraint.2143 = bf16[1,4096,4096]{2,1,0} copy(%add_any.420)
  %mul.8355 = bf16[1,4096,4096]{2,1,0} multiply(%sharding_constraint.2143, %mul.8331)
  %convert_element_type.2847 = f32[1,4096,4096]{2,1,0} convert(%mul.8355)
  %mul.8358 = f32[1,4096,4096]{2,1,0} multiply(%convert_element_type.2847, %mul.8329)
  %mul.8359 = f32[1,4096,4096]{2,1,0} multiply(%convert_element_type.2834, %convert_element_type.2847)
  %reduce.849 = f32[1,4096]{1,0} reduce(%mul.8359, %constant.1360), dimensions={2}, to_apply=%region_857.22135
  %reshape.13238 = f32[1,4096,1]{2,1,0} reshape(%reduce.849)
  %div.1315 = f32[1,4096,1]{2,1,0} divide(%rsqrt.180, %add.2309)
  %mul.8360 = f32[1,4096,1]{2,1,0} multiply(%div.1315, %broadcast.3620)
  %mul.8361 = f32[1,4096,1]{2,1,0} multiply(%reshape.13238, %mul.8360)
  %mul.8362 = f32[1,4096,1]{2,1,0} multiply(%mul.8361, %mul.4455)
  %mul.8363 = f32[1,4096]{1,0} reshape(%mul.8362)
  %mul.8364 = f32[1,4096,4096]{2,1,0} broadcast(%mul.8363), dimensions={0,1}
  %mul.8365 = f32[1,4096,4096]{2,1,0} multiply(%convert_element_type.2834, %mul.8364)
  %add_any.421 = f32[1,4096,4096]{2,1,0} add(%mul.8358, %mul.8365)
  %convert_element_type.2848 = bf16[1,4096,4096]{2,1,0} convert(%add_any.421)
  %add_any.422 = bf16[1,4096,4096]{2,1,0} add(%sharding_constraint.2101, %convert_element_type.2848)
  %get-tuple-element.1247 = f32[1,32,4096,1]{3,2,1,0} get-tuple-element(%te_fused_attn_forward_ffi.228), index=1
  %get-tuple-element.1248 = u32[2,4]{1,0} get-tuple-element(%te_fused_attn_forward_ffi.228), index=2
  %sharding_constraint.2144 = u32[2,4]{1,0} copy(%get-tuple-element.1248)
  %sharding_constraint.2149 = bf16[1,4096,4096]{2,1,0} copy(%add_any.422)
  %dot.1001 = bf16[1,4096,32,128]{3,2,1,0} dot(%sharding_constraint.2149, %all-gather.379), lhs_contracting_dims={2}, rhs_contracting_dims={2}
  %sharding_constraint.2150 = bf16[1,4096,32,128]{3,2,1,0} copy(%dot.1001)
  %te_fused_attn_backward_ffi.125 = (bf16[1,4096,32,128]{3,2,1,0}, bf16[1,4096,8,128]{3,2,1,0}, bf16[1,4096,8,128]{3,2,1,0}, bf16[0]{0}, u8[134742064]{0}) custom-call(%sharding_constraint.2107, %sharding_constraint.2113, %sharding_constraint.2115, %constant.1403, %get-tuple-element.1247, /*index=5*/%sharding_constraint.2144, %get-tuple-element.1234, %sharding_constraint.2150, %concatenate.586, %concatenate.587, /*index=10*/%constant.1416, %constant.1416, %constant.1416, %constant.1416, %constant.1416, /*index=15*/%constant.1416), custom_call_target="te_fused_attn_backward_ffi", operand_layout_constraints={bf16[1,4096,32,128]{3,2,1,0}, bf16[1,4096,8,128]{3,2,1,0}, bf16[1,4096,8,128]{3,2,1,0}, bf16[0]{0}, f32[1,32,4096,1]{3,2,1,0}, u32[2,4]{1,0}, bf16[1,4096,32,128]{3,2,1,0}, bf16[1,4096,32,128]{3,2,1,0}, s32[2]{0}, s32[2]{0}, f32[0]{0}, f32[0]{0}, f32[0]{0}, f32[0]{0}, f32[0]{0}, f32[0]{0}}, api_version=API_VERSION_TYPED_FFI, backend_config={attn_heads = 32 : i64, bias_batch = 0 : i64, bias_heads = 0 : i64, bias_type = 0 : i64, deterministic = false, dropout_probability = 0.000000e+00 : f64, input_batch = 1 : i64, is_training = true, kv_max_seqlen = 4096 : i64, mask_type = 3 : i64, max_segments_per_seq = 1 : i64, num_gqa_groups = 8 : i64, q_max_seqlen = 4096 : i64, qk_head_dim = 128 : i64, qkv_layout = 9 : i64, scaling_factor = 1.000000e+00 : f64, v_head_dim = 128 : i64, window_size_left = -1 : i64, window_size_right = -1 : i64}
  %get-tuple-element.1249 = bf16[1,4096,8,128]{3,2,1,0} get-tuple-element(%te_fused_attn_backward_ffi.125), index=2
  %sharding_constraint.2151 = bf16[1,4096,8,128]{3,2,1,0} copy(%get-tuple-element.1249)
  %dot.1002 = bf16[1,4096,4096]{2,1,0} dot(%sharding_constraint.2151, %all-gather.378), lhs_contracting_dims={2,3}, rhs_contracting_dims={1,2}
  %get-tuple-element.1250 = bf16[1,4096,8,128]{3,2,1,0} get-tuple-element(%te_fused_attn_backward_ffi.125), index=1
  %sharding_constraint.2153 = bf16[1,4096,8,128]{3,2,1,0} copy(%get-tuple-element.1250)
  %slice.694 = bf16[1,4096,8,64]{3,2,1,0} slice(%sharding_constraint.2153), slice={[0:1], [0:4096], [0:8], [64:128]}
  %mul.8368 = bf16[1,4096,8,64]{3,2,1,0} multiply(%slice.694, %mul.8320)
  %slice.695 = bf16[1,4096,8,64]{3,2,1,0} slice(%sharding_constraint.2153), slice={[0:1], [0:4096], [0:8], [0:64]}
  %mul.8371 = bf16[1,4096,8,64]{3,2,1,0} multiply(%slice.695, %mul.8317)
  %add_any.423 = bf16[1,4096,8,64]{3,2,1,0} add(%mul.8368, %mul.8371)
  %mul.8374 = bf16[1,4096,8,64]{3,2,1,0} multiply(%slice.694, %mul.8317)
  %neg.292 = bf16[1,4096,8,64]{3,2,1,0} negate(%slice.695)
  %mul.8381 = bf16[1,4096,8,64]{3,2,1,0} multiply(%neg.292, %mul.8320)
  %add_any.424 = bf16[1,4096,8,64]{3,2,1,0} add(%mul.8374, %mul.8381)
  %concatenate.595 = bf16[1,4096,8,128]{3,2,1,0} concatenate(%add_any.423, %add_any.424), dimensions={3}
  %dot.1003 = bf16[1,4096,4096]{2,1,0} dot(%concatenate.595, %all-gather.377), lhs_contracting_dims={2,3}, rhs_contracting_dims={1,2}
  %add_any.425 = bf16[1,4096,4096]{2,1,0} add(%dot.1002, %dot.1003)
  %sharding_constraint.2154 = bf16[1,4096,4096]{2,1,0} copy(%add_any.425)
  %get-tuple-element.1251 = bf16[1,4096,32,128]{3,2,1,0} get-tuple-element(%te_fused_attn_backward_ffi.125), index=0
  %sharding_constraint.2155 = bf16[1,4096,32,128]{3,2,1,0} copy(%get-tuple-element.1251)
  %slice.696 = bf16[1,4096,32,64]{3,2,1,0} slice(%sharding_constraint.2155), slice={[0:1], [0:4096], [0:32], [64:128]}
  %mul.8389 = bf16[1,4096,32,64]{3,2,1,0} multiply(%slice.696, %mul.8290)
  %slice.697 = bf16[1,4096,32,64]{3,2,1,0} slice(%sharding_constraint.2155), slice={[0:1], [0:4096], [0:32], [0:64]}
  %mul.8392 = bf16[1,4096,32,64]{3,2,1,0} multiply(%slice.697, %mul.8287)
  %add_any.426 = bf16[1,4096,32,64]{3,2,1,0} add(%mul.8389, %mul.8392)
  %mul.8398 = bf16[1,4096,32,64]{3,2,1,0} multiply(%slice.696, %mul.8287)
  %neg.293 = bf16[1,4096,32,64]{3,2,1,0} negate(%slice.697)
  %mul.8401 = bf16[1,4096,32,64]{3,2,1,0} multiply(%neg.293, %mul.8290)
  %add_any.427 = bf16[1,4096,32,64]{3,2,1,0} add(%mul.8398, %mul.8401)
  %concatenate.596 = bf16[1,4096,32,128]{3,2,1,0} concatenate(%add_any.426, %add_any.427), dimensions={3}
  %dot.1004 = bf16[1,4096,4096]{2,1,0} dot(%concatenate.596, %all-gather.376), lhs_contracting_dims={2,3}, rhs_contracting_dims={1,2}
  %sharding_constraint.2156 = bf16[1,4096,4096]{2,1,0} copy(%dot.1004)
  %add_any.428 = bf16[1,4096,4096]{2,1,0} add(%sharding_constraint.2154, %sharding_constraint.2156)
  %sharding_constraint.2157 = bf16[1,4096,4096]{2,1,0} copy(%add_any.428)
  %mul.8404 = bf16[1,4096,4096]{2,1,0} multiply(%sharding_constraint.2157, %mul.8283)
  %convert_element_type.2849 = f32[1,4096,4096]{2,1,0} convert(%mul.8404)
  %mul.8407 = f32[1,4096,4096]{2,1,0} multiply(%convert_element_type.2849, %mul.8281)
  %mul.8408 = f32[1,4096,4096]{2,1,0} multiply(%convert_element_type.2822, %convert_element_type.2849)
  %reduce.850 = f32[1,4096]{1,0} reduce(%mul.8408, %constant.1360), dimensions={2}, to_apply=%region_858.22214
  %reshape.13245 = f32[1,4096,1]{2,1,0} reshape(%reduce.850)
  %div.1316 = f32[1,4096,1]{2,1,0} divide(%rsqrt.179, %add.2304)
  %mul.8410 = f32[1,4096,1]{2,1,0} multiply(%div.1316, %broadcast.3620)
  %mul.8411 = f32[1,4096,1]{2,1,0} multiply(%reshape.13245, %mul.8410)
  %mul.8412 = f32[1,4096,1]{2,1,0} multiply(%mul.8411, %mul.4455)
  %mul.8413 = f32[1,4096]{1,0} reshape(%mul.8412)
  %mul.8414 = f32[1,4096,4096]{2,1,0} broadcast(%mul.8413), dimensions={0,1}
  %mul.8415 = f32[1,4096,4096]{2,1,0} multiply(%convert_element_type.2822, %mul.8414)
  %add_any.429 = f32[1,4096,4096]{2,1,0} add(%mul.8407, %mul.8415)
  %convert_element_type.2850 = bf16[1,4096,4096]{2,1,0} convert(%add_any.429)
  %add_any.430 = bf16[1,4096,4096]{2,1,0} add(%add_any.422, %convert_element_type.2850)
  %sharding_constraint.2158 = bf16[1,4096,4096]{2,1,0} copy(%add_any.430)
  %tuple.327 = (bf16[512,8]{1,0}, bf16[1,4096,14336]{2,1,0}, bf16[1,4096,14336]{2,1,0}, bf16[1,14336,4096]{2,1,0}, bf16[4096]{0}, /*index=5*/bf16[4096]{0}, bf16[512,8,128]{2,1,0}, bf16[32,128,512]{2,1,0}, bf16[512,32,128]{2,1,0}, bf16[512,8,128]{2,1,0}, /*index=10*/bf16[1,4096,4096]{2,1,0}, s32[1,4096]{1,0}, s32[1,4096]{1,0}, bf16[1,4096,4096]{2,1,0}) tuple(%param.63, %param.64, %param.65, %param.66, %param.62, /*index=5*/%param.57, %param.59, %param.61, %param.58, %param.60, /*index=10*/%sharding_constraint.282, %param.10, %param.7, %sharding_constraint.2158)
  %remat2.37 = (bf16[512,8]{1,0}, bf16[1,4096,14336]{2,1,0}, bf16[1,4096,14336]{2,1,0}, bf16[1,14336,4096]{2,1,0}, bf16[4096]{0}, /*index=5*/bf16[4096]{0}, bf16[512,8,128]{2,1,0}, bf16[32,128,512]{2,1,0}, bf16[512,32,128]{2,1,0}, bf16[512,8,128]{2,1,0}, /*index=10*/bf16[1,4096,4096]{2,1,0}, s32[1,4096]{1,0}, s32[1,4096]{1,0}, bf16[1,4096,4096]{2,1,0}) opt-barrier(%tuple.327)
  %get-tuple-element.1252 = bf16[1,4096,4096]{2,1,0} get-tuple-element(%remat2.37), index=13
  %sharding_constraint.2159 = bf16[1,4096,4096]{2,1,0} copy(%get-tuple-element.1252)
  %iota.2816 = s32[1,4096,2,1]{3,2,1,0} iota(), iota_dimension=1
  %get-tuple-element.1253 = bf16[1,4096,4096]{2,1,0} get-tuple-element(%remat2.37), index=10
  %sharding_constraint.2160 = bf16[1,4096,4096]{2,1,0} copy(%get-tuple-element.1253)
  %convert_element_type.2852 = f32[1,4096,4096]{2,1,0} convert(%sharding_constraint.2160)
  %square.120 = f32[1,4096,4096]{2,1,0} multiply(%convert_element_type.2852, %convert_element_type.2852)
  %reduce.851 = f32[1,4096]{1,0} reduce(%square.120, %constant.1360), dimensions={2}, to_apply=%region_859.22256
  %div.1317 = f32[1,4096]{1,0} multiply(%reduce.851, %broadcast.3412)
  %add.2320 = f32[1,4096]{1,0} add(%div.1317, %broadcast.3413)
  %add.2321 = f32[1,4096,1]{2,1,0} reshape(%add.2320)
  %rsqrt.181 = f32[1,4096,1]{2,1,0} rsqrt(%add.2321)
  %mul.8416 = f32[1,4096]{1,0} reshape(%rsqrt.181)
  %mul.8417 = f32[1,4096,4096]{2,1,0} broadcast(%mul.8416), dimensions={0,1}
  %mul.8418 = f32[1,4096,4096]{2,1,0} multiply(%convert_element_type.2852, %mul.8417)
  %convert_element_type.2853 = bf16[1,4096,4096]{2,1,0} convert(%mul.8418)
  %get-tuple-element.1254 = bf16[4096]{0} get-tuple-element(%remat2.37), index=5
  %mul.8419 = bf16[1,4096,4096]{2,1,0} broadcast(%get-tuple-element.1254), dimensions={2}
  %mul.8420 = bf16[1,4096,4096]{2,1,0} multiply(%convert_element_type.2853, %mul.8419)
  %sharding_constraint.2161 = bf16[1,4096,4096]{2,1,0} copy(%mul.8420)
  %sharding_constraint.2162 = bf16[1,4096,4096]{2,1,0} copy(%sharding_constraint.2161)
  %get-tuple-element.1255 = bf16[512,32,128]{2,1,0} get-tuple-element(%remat2.37), index=8
  %all-gather.382 = bf16[4096,32,128]{2,1,0} all-gather(%get-tuple-element.1255), channel_id=721, replica_groups=[1,8]<=[8], dimensions={0}, use_global_device_ids=true
  %dot.1005 = bf16[1,4096,32,128]{3,2,1,0} dot(%sharding_constraint.2162, %all-gather.382), lhs_contracting_dims={2}, rhs_contracting_dims={0}
  %slice.698 = bf16[1,4096,32,64]{3,2,1,0} slice(%dot.1005), slice={[0:1], [0:4096], [0:32], [0:64]}
  %get-tuple-element.1256 = s32[1,4096]{1,0} get-tuple-element(%remat2.37), index=12
  %convert_element_type.2854 = f32[1,4096]{1,0} convert(%get-tuple-element.1256)
  %div.1318 = f32[1,4096,1,64]{3,2,1,0} broadcast(%convert_element_type.2854), dimensions={0,1}
  %div.1321 = f32[1,4096,1,64]{3,2,1,0} divide(%div.1318, %div.402)
  %cos.117 = f32[1,4096,1,64]{3,2,1,0} cosine(%div.1321)
  %convert_element_type.2856 = bf16[1,4096,1,64]{3,2,1,0} convert(%cos.117)
  %mul.8422 = bf16[1,4096,64]{2,1,0} reshape(%convert_element_type.2856)
  %mul.8423 = bf16[1,4096,32,64]{3,2,1,0} broadcast(%mul.8422), dimensions={0,1,3}
  %mul.8424 = bf16[1,4096,32,64]{3,2,1,0} multiply(%slice.698, %mul.8423)
  %slice.699 = bf16[1,4096,32,64]{3,2,1,0} slice(%dot.1005), slice={[0:1], [0:4096], [0:32], [64:128]}
  %sin.116 = f32[1,4096,1,64]{3,2,1,0} sine(%div.1321)
  %convert_element_type.2857 = bf16[1,4096,1,64]{3,2,1,0} convert(%sin.116)
  %mul.8426 = bf16[1,4096,64]{2,1,0} reshape(%convert_element_type.2857)
  %mul.8427 = bf16[1,4096,32,64]{3,2,1,0} broadcast(%mul.8426), dimensions={0,1,3}
  %mul.8428 = bf16[1,4096,32,64]{3,2,1,0} multiply(%slice.699, %mul.8427)
  %sub.386 = bf16[1,4096,32,64]{3,2,1,0} subtract(%mul.8424, %mul.8428)
  %mul.8432 = bf16[1,4096,32,64]{3,2,1,0} multiply(%slice.699, %mul.8423)
  %mul.8435 = bf16[1,4096,32,64]{3,2,1,0} multiply(%slice.698, %mul.8427)
  %add.2322 = bf16[1,4096,32,64]{3,2,1,0} add(%mul.8432, %mul.8435)
  %concatenate.597 = bf16[1,4096,32,128]{3,2,1,0} concatenate(%sub.386, %add.2322), dimensions={3}
  %sharding_constraint.2163 = bf16[1,4096,32,128]{3,2,1,0} copy(%concatenate.597)
  %get-tuple-element.1257 = bf16[512,8,128]{2,1,0} get-tuple-element(%remat2.37), index=6
  %all-gather.383 = bf16[4096,8,128]{2,1,0} all-gather(%get-tuple-element.1257), channel_id=722, replica_groups=[1,8]<=[8], dimensions={0}, use_global_device_ids=true
  %dot.1006 = bf16[1,4096,8,128]{3,2,1,0} dot(%sharding_constraint.2162, %all-gather.383), lhs_contracting_dims={2}, rhs_contracting_dims={0}
  %slice.700 = bf16[1,4096,8,64]{3,2,1,0} slice(%dot.1006), slice={[0:1], [0:4096], [0:8], [0:64]}
  %mul.8438 = bf16[1,4096,8,64]{3,2,1,0} broadcast(%mul.8422), dimensions={0,1,3}
  %mul.8439 = bf16[1,4096,8,64]{3,2,1,0} multiply(%slice.700, %mul.8438)
  %slice.701 = bf16[1,4096,8,64]{3,2,1,0} slice(%dot.1006), slice={[0:1], [0:4096], [0:8], [64:128]}
  %mul.8441 = bf16[1,4096,8,64]{3,2,1,0} broadcast(%mul.8426), dimensions={0,1,3}
  %mul.8442 = bf16[1,4096,8,64]{3,2,1,0} multiply(%slice.701, %mul.8441)
  %sub.387 = bf16[1,4096,8,64]{3,2,1,0} subtract(%mul.8439, %mul.8442)
  %mul.8445 = bf16[1,4096,8,64]{3,2,1,0} multiply(%slice.701, %mul.8438)
  %mul.8450 = bf16[1,4096,8,64]{3,2,1,0} multiply(%slice.700, %mul.8441)
  %add.2323 = bf16[1,4096,8,64]{3,2,1,0} add(%mul.8445, %mul.8450)
  %concatenate.598 = bf16[1,4096,8,128]{3,2,1,0} concatenate(%sub.387, %add.2323), dimensions={3}
  %sharding_constraint.2165 = bf16[1,4096,8,128]{3,2,1,0} copy(%concatenate.598)
  %get-tuple-element.1258 = bf16[512,8,128]{2,1,0} get-tuple-element(%remat2.37), index=9
  %all-gather.384 = bf16[4096,8,128]{2,1,0} all-gather(%get-tuple-element.1258), channel_id=723, replica_groups=[1,8]<=[8], dimensions={0}, use_global_device_ids=true
  %dot.1007 = bf16[1,4096,8,128]{3,2,1,0} dot(%sharding_constraint.2162, %all-gather.384), lhs_contracting_dims={2}, rhs_contracting_dims={0}
  %sharding_constraint.2166 = bf16[1,4096,8,128]{3,2,1,0} copy(%dot.1007)
  %get-tuple-element.1259 = s32[1,4096]{1,0} get-tuple-element(%remat2.37), index=11
  %eq.2449 = s32[1,4096,4096]{2,1,0} broadcast(%get-tuple-element.1259), dimensions={0,1}
  %eq.2450 = s32[1,4096,4096]{2,1,0} broadcast(%get-tuple-element.1259), dimensions={0,2}
  %eq.2451 = pred[1,4096,4096]{2,1,0} compare(%eq.2449, %eq.2450), direction=EQ
  %and.207 = pred[1,4096,4096]{2,1,0} and(%eq.2451, %and.64)
  %select_n.647 = f32[1,4096,4096]{2,1,0} select(%and.207, %broadcast_in_dim.516, %broadcast_in_dim.517)
  %ne.124 = pred[1,4096,4096]{2,1,0} compare(%select_n.647, %broadcast_in_dim.516), direction=NE
  %not.122 = pred[1,4096,4096]{2,1,0} not(%ne.124)
  %convert_element_type.2862 = s32[1,4096,4096]{2,1,0} convert(%not.122)
  %reduce.852 = s32[1,4096]{1,0} reduce(%convert_element_type.2862, %constant.1181), dimensions={1}, to_apply=%region_860.22352
  %reduce_sum.5755 = s32[1,1,1,4096]{3,2,1,0} reshape(%reduce.852)
  %slice.702 = s32[1,1,1,1]{3,2,1,0} slice(%reduce_sum.5755), slice={[0:1], [0:1], [0:1], [0:1]}
  %squeeze.58 = s32[1,1]{1,0} reshape(%slice.702)
  %reshape.13252 = s32[1]{0} reshape(%squeeze.58)
  %lt.227 = pred[1]{0} compare(%reshape.13252, %constant.1418), direction=LT
  %select_n.648 = s32[1]{0} select(%lt.227, %broadcast_in_dim.518, %reshape.13252)
  %concatenate.599 = s32[2]{0} concatenate(%constant.1418, %select_n.648), dimensions={0}
  %reduce.853 = s32[1,4096]{1,0} reduce(%convert_element_type.2862, %constant.1181), dimensions={2}, to_apply=%region_861.22361
  %reduce_sum.5756 = s32[1,1,1,4096]{3,2,1,0} reshape(%reduce.853)
  %reduce.854 = s32[1,1]{1,0} reduce(%reduce_sum.5756, %constant.1415), dimensions={3,2}, to_apply=%region_862.22367
  %reshape.13253 = s32[1]{0} reshape(%reduce.854)
  %lt.228 = pred[1]{0} compare(%reshape.13253, %constant.1418), direction=LT
  %select_n.649 = s32[1]{0} select(%lt.228, %broadcast_in_dim.518, %reshape.13253)
  %concatenate.600 = s32[2]{0} concatenate(%constant.1418, %select_n.649), dimensions={0}
  %te_fused_attn_forward_ffi.232 = (bf16[1,4096,32,128]{3,2,1,0}, f32[1,32,4096,1]{3,2,1,0}, u32[2,4]{1,0}, u8[48]{0}) custom-call(%sharding_constraint.2163, %sharding_constraint.2165, %sharding_constraint.2166, %constant.1403, %dynamic-slice.38, /*index=5*/%concatenate.599, %concatenate.600, %constant.1416, %constant.1416, %constant.1416, /*index=10*/%constant.1416, %constant.1416, %constant.1416), custom_call_target="te_fused_attn_forward_ffi", operand_layout_constraints={bf16[1,4096,32,128]{3,2,1,0}, bf16[1,4096,8,128]{3,2,1,0}, bf16[1,4096,8,128]{3,2,1,0}, bf16[0]{0}, u32[2]{0}, s32[2]{0}, s32[2]{0}, f32[0]{0}, f32[0]{0}, f32[0]{0}, f32[0]{0}, f32[0]{0}, f32[0]{0}}, api_version=API_VERSION_TYPED_FFI, backend_config={attn_heads = 32 : i64, bias_batch = 0 : i64, bias_heads = 0 : i64, bias_type = 0 : i64, deterministic = false, dropout_probability = 0.000000e+00 : f64, input_batch = 1 : i64, is_training = true, kv_max_seqlen = 4096 : i64, mask_type = 3 : i64, max_segments_per_seq = 1 : i64, num_gqa_groups = 8 : i64, q_max_seqlen = 4096 : i64, qk_head_dim = 128 : i64, qkv_layout = 9 : i64, scaling_factor = 1.000000e+00 : f64, v_head_dim = 128 : i64, window_size_left = -1 : i64, window_size_right = -1 : i64}
  %get-tuple-element.1260 = bf16[1,4096,32,128]{3,2,1,0} get-tuple-element(%te_fused_attn_forward_ffi.232), index=0
  %sharding_constraint.2167 = bf16[1,4096,32,128]{3,2,1,0} copy(%get-tuple-element.1260)
  %get-tuple-element.1261 = bf16[32,128,512]{2,1,0} get-tuple-element(%remat2.37), index=7
  %all-gather.385 = bf16[32,128,4096]{2,1,0} all-gather(%get-tuple-element.1261), channel_id=724, replica_groups=[1,8]<=[8], dimensions={2}, use_global_device_ids=true
  %dot.1008 = bf16[1,4096,4096]{2,1,0} dot(%sharding_constraint.2167, %all-gather.385), lhs_contracting_dims={2,3}, rhs_contracting_dims={0,1}
  %sharding_constraint.2168 = bf16[1,4096,4096]{2,1,0} copy(%dot.1008)
  %add.2324 = bf16[1,4096,4096]{2,1,0} add(%sharding_constraint.2160, %sharding_constraint.2168)
  %convert_element_type.2864 = f32[1,4096,4096]{2,1,0} convert(%add.2324)
  %square.121 = f32[1,4096,4096]{2,1,0} multiply(%convert_element_type.2864, %convert_element_type.2864)
  %reduce.855 = f32[1,4096]{1,0} reduce(%square.121, %constant.1360), dimensions={2}, to_apply=%region_863.22382
  %div.1326 = f32[1,4096]{1,0} multiply(%reduce.855, %broadcast.3412)
  %add.2325 = f32[1,4096]{1,0} add(%div.1326, %broadcast.3413)
  %add.2326 = f32[1,4096,1]{2,1,0} reshape(%add.2325)
  %rsqrt.182 = f32[1,4096,1]{2,1,0} rsqrt(%add.2326)
  %mul.8453 = f32[1,4096]{1,0} reshape(%rsqrt.182)
  %mul.8454 = f32[1,4096,4096]{2,1,0} broadcast(%mul.8453), dimensions={0,1}
  %mul.8455 = f32[1,4096,4096]{2,1,0} multiply(%convert_element_type.2864, %mul.8454)
  %convert_element_type.2865 = bf16[1,4096,4096]{2,1,0} convert(%mul.8455)
  %get-tuple-element.1262 = bf16[4096]{0} get-tuple-element(%remat2.37), index=4
  %mul.8456 = bf16[1,4096,4096]{2,1,0} broadcast(%get-tuple-element.1262), dimensions={2}
  %mul.8457 = bf16[1,4096,4096]{2,1,0} multiply(%convert_element_type.2865, %mul.8456)
  %sharding_constraint.2169 = bf16[1,4096,4096]{2,1,0} copy(%mul.8457)
  %get-tuple-element.1263 = bf16[512,8]{1,0} get-tuple-element(%remat2.37), index=0
  %all-gather.386 = bf16[4096,8]{1,0} all-gather(%get-tuple-element.1263), channel_id=725, replica_groups=[1,8]<=[8], dimensions={0}, use_global_device_ids=true
  %dot.1009 = bf16[1,4096,8]{2,1,0} dot(%sharding_constraint.2169, %all-gather.386), lhs_contracting_dims={2}, rhs_contracting_dims={0}
  %sharding_constraint.2170 = bf16[1,4096,8]{2,1,0} copy(%dot.1009)
  %top_k.174 = bf16[4096,8]{1,0} reshape(%sharding_constraint.2170)
  %top_k.175 = (bf16[4096,2]{1,0}, s32[4096,2]{1,0}) custom-call(%top_k.174), custom_call_target="TopK", called_computations={%compare_greater_than.58.22403.clone}
  %get-tuple-element.1264 = bf16[4096,2]{1,0} get-tuple-element(%top_k.175), index=0
  %get-tuple-element.1265 = s32[4096,2]{1,0} get-tuple-element(%top_k.175), index=1
  %add.2327 = s32[4096,2]{1,0} add(%get-tuple-element.1265, %broadcast.3418)
  %sort.122 = (bf16[4096,2]{1,0}, s32[4096,2]{1,0}) sort(%get-tuple-element.1264, %add.2327), dimensions={1}, is_stable=true, to_apply=%compare-value-and-index.58
  %get-tuple-element.1267 = s32[4096,2]{1,0} get-tuple-element(%sort.122), index=1
  %slice.704 = s32[4096,2]{1,0} slice(%get-tuple-element.1267), slice={[0:4096], [0:2]}
  %top_k.176 = s32[1,4096,2]{2,1,0} reshape(%slice.704)
  %lt.229 = pred[1,4096,2]{2,1,0} compare(%top_k.176, %broadcast.3419), direction=LT
  %add.2329 = s32[1,4096,2]{2,1,0} add(%top_k.176, %broadcast.3420)
  %select_n.650 = s32[1,4096,2]{2,1,0} select(%lt.229, %add.2329, %top_k.176)
  %broadcast_in_dim.773 = s32[1,4096,2,1]{3,2,1,0} reshape(%select_n.650)
  %concatenate.601 = s32[1,4096,2,3]{3,2,1,0} concatenate(%add.1356, %iota.2816, %broadcast_in_dim.773), dimensions={3}
  %subtract.202 = s32[1,4096,2,3]{3,2,1,0} subtract(%concatenate.601, %broadcast.3428)
  %scatter.271 = u32[1,4096,8]{2,1,0} scatter(%dynamic-slice.43, %subtract.202, %add.1401), update_window_dims={}, inserted_window_dims={0,1,2}, scatter_dims_to_operand_dims={0,1,2}, index_vector_dim=3, to_apply=%region_864.22439.clone
  %gather.84 = u32[1,4096,2]{2,1,0} gather(%scatter.271, %subtract.202), offset_dims={}, collapsed_slice_dims={0,1,2}, start_index_map={0,1,2}, index_vector_dim=3, slice_sizes={1,1,1}
  %eq.2452 = pred[1,4096,2]{2,1,0} compare(%add.1401, %gather.84), direction=EQ
  %get-tuple-element.1266 = bf16[4096,2]{1,0} get-tuple-element(%sort.122), index=0
  %slice.703 = bf16[4096,2]{1,0} slice(%get-tuple-element.1266), slice={[0:4096], [0:2]}
  %convert_element_type.2867 = f32[4096,2]{1,0} convert(%slice.703)
  %convert_element_type.2868 = f32[1,4096,2]{2,1,0} reshape(%convert_element_type.2867)
  %reduce.856 = f32[4096]{0} reduce(%convert_element_type.2867, %constant.1450), dimensions={1}, to_apply=%region_865.22448
  %sub.388 = f32[1,4096]{1,0} reshape(%reduce.856)
  %sub.389 = f32[1,4096,2]{2,1,0} broadcast(%sub.388), dimensions={0,1}
  %sub.390 = f32[1,4096,2]{2,1,0} subtract(%convert_element_type.2868, %sub.389)
  %exp.243 = f32[1,4096,2]{2,1,0} exponential(%sub.390)
  %reduce.857 = f32[1,4096]{1,0} reduce(%exp.243, %constant.1360), dimensions={2}, to_apply=%region_866.22457
  %div.1327 = f32[1,4096,2]{2,1,0} broadcast(%reduce.857), dimensions={0,1}
  %div.1328 = f32[1,4096,2]{2,1,0} divide(%exp.243, %div.1327)
  %convert_element_type.2869 = bf16[1,4096,2]{2,1,0} convert(%div.1328)
  %select_n.651 = bf16[1,4096,2]{2,1,0} select(%eq.2452, %convert_element_type.2869, %broadcast.3427)
  %scatter.272 = bf16[1,4096,8]{2,1,0} scatter(%broadcast.3379, %subtract.202, %select_n.651), update_window_dims={}, inserted_window_dims={0,1,2}, scatter_dims_to_operand_dims={0,1,2}, index_vector_dim=3, to_apply=%region_867.22466.clone
  %eq.2454 = s32[1,4096,2,8]{3,2,1,0} broadcast(%top_k.176), dimensions={0,1,2}
  %iota.2827 = s32[1,4096,2,8]{3,2,1,0} iota(), iota_dimension=3
  %eq.2455 = pred[1,4096,2,8]{3,2,1,0} compare(%eq.2454, %iota.2827), direction=EQ
  %convert_element_type.2870 = s32[1,4096,2,8]{3,2,1,0} convert(%eq.2455)
  %reshape.13286 = s32[1,8192,8]{2,1,0} reshape(%convert_element_type.2870)
  %sharding_constraint.2171 = s32[1,8192,8]{2,1,0} copy(%reshape.13286)
  %reduce-window.58 = s32[1,8192,8]{2,1,0} reduce-window(%sharding_constraint.2171, %constant.1181), window={size=1x8192x1 pad=0_0x8191_0x0_0}, to_apply=%region_868.22478
  %reshape.13289 = s32[1,4096,2,8]{3,2,1,0} reshape(%reduce-window.58)
  %sharding_constraint.2172 = s32[1,4096,2,8]{3,2,1,0} copy(%reshape.13289)
  %le.170 = pred[1,4096,2,8]{3,2,1,0} compare(%sharding_constraint.2172, %broadcast.3429), direction=LE
  %mul.8458 = s32[1,4096,2,8]{3,2,1,0} select(%le.170, %convert_element_type.2870, %broadcast.3430)
  %reduce.858 = s32[1,4096,8]{2,1,0} reduce(%mul.8458, %constant.1181), dimensions={2}, to_apply=%region_869.22487
  %convert_element_type.2872 = bf16[1,4096,8]{2,1,0} convert(%reduce.858)
  %mul.8459 = bf16[1,4096,8]{2,1,0} multiply(%scatter.272, %convert_element_type.2872)
  %mul.8461 = bf16[1,4096,8,1025]{3,2,1,0} broadcast(%mul.8459), dimensions={0,1,2}
  %mul.8463 = s32[1,8192,8]{2,1,0} multiply(%sharding_constraint.2171, %reduce-window.58)
  %reshape.13290 = s32[1,4096,2,8]{3,2,1,0} reshape(%mul.8463)
  %reduce.859 = s32[1,4096,8]{2,1,0} reduce(%reshape.13290, %constant.1181), dimensions={2}, to_apply=%region_870.22497
  %mul.8464 = s32[1,4096,8]{2,1,0} multiply(%reduce.859, %reduce.858)
  %eq.2456 = s32[1,4096,8,1025]{3,2,1,0} broadcast(%mul.8464), dimensions={0,1,2}
  %iota.2828 = s32[1,4096,8,1025]{3,2,1,0} iota(), iota_dimension=3
  %eq.2457 = pred[1,4096,8,1025]{3,2,1,0} compare(%eq.2456, %iota.2828), direction=EQ
  %convert_element_type.2873 = s32[1,4096,8,1025]{3,2,1,0} convert(%eq.2457)
  %convert_element_type.2875 = bf16[1,4096,8,1025]{3,2,1,0} convert(%convert_element_type.2873)
  %mul.8465 = bf16[1,4096,8,1025]{3,2,1,0} multiply(%mul.8461, %convert_element_type.2875)
  %slice.705 = bf16[1,4096,8,1024]{3,2,1,0} slice(%mul.8465), slice={[0:1], [0:4096], [0:8], [1:1025]}
  %convert_element_type.2876 = pred[1,4096,8,1024]{3,2,1,0} compare(%slice.705, %broadcast.3431), direction=NE
  %sharding_constraint.2173 = pred[1,4096,8,1024]{3,2,1,0} copy(%convert_element_type.2876)
  %dot_general.120 = bf16[1,4096,8,1024]{3,2,1,0} convert(%sharding_constraint.2173)
  %dot.1010 = bf16[1,8,1024,4096]{3,2,1,0} dot(%dot_general.120, %sharding_constraint.2169), lhs_batch_dims={0}, lhs_contracting_dims={1}, rhs_batch_dims={0}, rhs_contracting_dims={1}
  %reshape.13293 = bf16[1,8,1,1024,4096]{4,3,2,1,0} reshape(%dot.1010)
  %all-to-all.168 = bf16[1,8,1,1024,4096]{4,3,2,1,0} all-to-all(%reshape.13293), channel_id=729, replica_groups=[1,8]<=[8], dimensions={1}
  %transpose.283 = bf16[8,1,1,1024,4096]{4,3,2,0,1} transpose(%all-to-all.168), dimensions={1,0,2,3,4}
  %reshape.13294 = bf16[8,1,1024,4096]{3,2,1,0} reshape(%transpose.283)
  %transpose.284 = bf16[1,8,1024,4096]{3,2,0,1} transpose(%reshape.13294), dimensions={1,0,2,3}
  %sharding_constraint.2174 = bf16[1,8,1024,4096]{3,2,0,1} copy(%transpose.284)
  %get-tuple-element.1270 = bf16[1,4096,14336]{2,1,0} get-tuple-element(%remat2.37), index=1
  %sharding_constraint.2175 = bf16[1,4096,14336]{2,1,0} copy(%get-tuple-element.1270)
  %dot.1011 = bf16[1,8,1024,14336]{3,2,1,0} dot(%sharding_constraint.2174, %sharding_constraint.2175), lhs_batch_dims={0}, lhs_contracting_dims={3}, rhs_batch_dims={0}, rhs_contracting_dims={1}
  %sharding_constraint.2176 = bf16[1,8,1024,14336]{3,2,1,0} copy(%dot.1011)
  %neg.294 = bf16[1,8,1024,14336]{3,2,1,0} negate(%sharding_constraint.2176)
  %exp.244 = bf16[1,8,1024,14336]{3,2,1,0} exponential(%neg.294)
  %add.2334 = bf16[1,8,1024,14336]{3,2,1,0} add(%exp.244, %jit_silu_.0)
  %div.1329 = bf16[1,8,1024,14336]{3,2,1,0} divide(%jit_silu_.0, %add.2334)
  %mul.8466 = bf16[1,8,1024,14336]{3,2,1,0} multiply(%sharding_constraint.2176, %div.1329)
  %sharding_constraint.2177 = bf16[1,4096,4096]{2,1,0} copy(%sharding_constraint.2159)
  %sharding_constraint.2179 = bf16[1,4096,8,1024]{3,2,1,0} copy(%slice.705)
  %dot.1012 = bf16[1,4096,8,1024]{3,2,1,0} dot(%sharding_constraint.2177, %sharding_constraint.2179), lhs_batch_dims={0}, lhs_contracting_dims={1}, rhs_batch_dims={0}, rhs_contracting_dims={1}
  %reshape.13297 = bf16[1,4096,8,1,1024]{4,3,2,1,0} reshape(%dot.1012)
  %all-to-all.169 = bf16[1,4096,8,1,1024]{4,3,2,1,0} all-to-all(%reshape.13297), channel_id=730, replica_groups=[1,8]<=[8], dimensions={2}
  %transpose.285 = bf16[8,1,4096,1,1024]{4,3,0,2,1} transpose(%all-to-all.169), dimensions={2,0,1,3,4}
  %reshape.13298 = bf16[8,4096,1,1024]{3,2,1,0} reshape(%transpose.285)
  %transpose.286 = bf16[1,8,1024,4096]{2,0,3,1} transpose(%reshape.13298), dimensions={2,0,3,1}
  %sharding_constraint.2181 = bf16[1,8,1024,4096]{2,0,3,1} copy(%transpose.286)
  %get-tuple-element.1271 = bf16[1,14336,4096]{2,1,0} get-tuple-element(%remat2.37), index=3
  %sharding_constraint.2182 = bf16[1,14336,4096]{2,1,0} copy(%get-tuple-element.1271)
  %dot.1013 = bf16[1,8,1024,14336]{3,2,1,0} dot(%sharding_constraint.2181, %sharding_constraint.2182), lhs_batch_dims={0}, lhs_contracting_dims={3}, rhs_batch_dims={0}, rhs_contracting_dims={2}
  %mul.8467 = bf16[1,8,1024,14336]{3,2,1,0} multiply(%mul.8466, %dot.1013)
  %sharding_constraint.2183 = bf16[1,8,1024,14336]{3,2,1,0} copy(%mul.8467)
  %get-tuple-element.1272 = bf16[1,4096,14336]{2,1,0} get-tuple-element(%remat2.37), index=2
  %sharding_constraint.2186 = bf16[1,4096,14336]{2,1,0} copy(%get-tuple-element.1272)
  %dot.1014 = bf16[1,8,1024,4096]{3,2,1,0} dot(%sharding_constraint.2183, %sharding_constraint.2186), lhs_batch_dims={0}, lhs_contracting_dims={3}, rhs_batch_dims={0}, rhs_contracting_dims={2}
  %dot.1015 = bf16[1,8,1024,14336]{3,2,1,0} dot(%sharding_constraint.2174, %sharding_constraint.2186), lhs_batch_dims={0}, lhs_contracting_dims={3}, rhs_batch_dims={0}, rhs_contracting_dims={1}
  %sharding_constraint.2188 = bf16[1,8,1024,14336]{3,2,1,0} copy(%dot.1015)
  %mul.8471 = bf16[1,8,1024,14336]{3,2,1,0} multiply(%dot.1013, %sharding_constraint.2188)
  %mul.8472 = bf16[1,8,1024,14336]{3,2,1,0} multiply(%mul.8471, %div.1329)
  %mul.8473 = bf16[1,8,1024,14336]{3,2,1,0} multiply(%sharding_constraint.2176, %mul.8471)
  %sub.391 = bf16[1,8,1024,14336]{3,2,1,0} subtract(%jit_silu_.0, %div.1329)
  %mul.8485 = bf16[1,8,1024,14336]{3,2,1,0} multiply(%div.1329, %sub.391)
  %mul.8486 = bf16[1,8,1024,14336]{3,2,1,0} multiply(%mul.8473, %mul.8485)
  %add_any.431 = bf16[1,8,1024,14336]{3,2,1,0} add(%mul.8472, %mul.8486)
  %sharding_constraint.2189 = bf16[1,8,1024,14336]{3,2,1,0} copy(%add_any.431)
  %dot.1016 = bf16[1,8,1024,4096]{3,2,1,0} dot(%sharding_constraint.2189, %sharding_constraint.2175), lhs_batch_dims={0}, lhs_contracting_dims={3}, rhs_batch_dims={0}, rhs_contracting_dims={2}
  %add_any.432 = bf16[1,8,1024,4096]{3,2,1,0} add(%dot.1014, %dot.1016)
  %sharding_constraint.2190 = bf16[1,8,1024,4096]{3,2,1,0} copy(%add_any.432)
  %transpose.287 = bf16[8,1,1024,4096]{3,2,0,1} transpose(%sharding_constraint.2190), dimensions={1,0,2,3}
  %reshape.13301 = bf16[8,1,1,1024,4096]{4,3,2,1,0} reshape(%transpose.287)
  %all-to-all.170 = bf16[8,1,1,1024,4096]{4,3,2,1,0} all-to-all(%reshape.13301), channel_id=731, replica_groups=[1,8]<=[8], dimensions={0}
  %transpose.288 = bf16[1,8,1,1024,4096]{4,3,2,0,1} transpose(%all-to-all.170), dimensions={1,0,2,3,4}
  %reshape.13302 = bf16[1,8,1024,4096]{3,2,1,0} reshape(%transpose.288)
  %dot.1017 = bf16[1,4096,4096]{2,1,0} dot(%dot_general.120, %reshape.13302), lhs_batch_dims={0}, lhs_contracting_dims={2,3}, rhs_batch_dims={0}, rhs_contracting_dims={1,2}
  %reshape.13304 = s32[1,4096,2,1]{3,2,1,0} reshape(%slice.704)
  %ge.26 = pred[1,4096,2,3]{3,2,1,0} compare(%concatenate.601, %broadcast.3629), direction=GE
  %le.172 = pred[1,4096,2,3]{3,2,1,0} compare(%concatenate.601, %le.67), direction=LE
  %and.208 = pred[1,4096,2,3]{3,2,1,0} and(%ge.26, %le.172)
  %reduce.860 = pred[1,4096,2]{2,1,0} reduce(%and.208, %constant.5574), dimensions={3}, to_apply=%region_871.22554
  %mul.8487 = bf16[1,8,1024,14336]{3,2,1,0} multiply(%mul.8466, %sharding_constraint.2188)
  %dot.1018 = bf16[1,8,1024,4096]{3,2,1,0} dot(%mul.8487, %sharding_constraint.2182), lhs_batch_dims={0}, lhs_contracting_dims={3}, rhs_batch_dims={0}, rhs_contracting_dims={1}
  %sharding_constraint.2191 = bf16[1,8,1024,4096]{3,2,1,0} copy(%dot.1018)
  %reshape.13311 = bf16[1,8,1,1024,4096]{4,3,2,1,0} reshape(%sharding_constraint.2191)
  %all-to-all.171 = bf16[1,8,1,1024,4096]{4,3,2,1,0} all-to-all(%reshape.13311), channel_id=732, replica_groups=[1,8]<=[8], dimensions={1}
  %transpose.289 = bf16[8,1,1,1024,4096]{4,3,2,0,1} transpose(%all-to-all.171), dimensions={1,0,2,3,4}
  %reshape.13312 = bf16[8,1,1024,4096]{3,2,1,0} reshape(%transpose.289)
  %dot.1019 = bf16[1,4096,8,1024]{3,2,1,0} dot(%sharding_constraint.2177, %reshape.13312), lhs_batch_dims={0}, lhs_contracting_dims={2}, rhs_batch_dims={1}, rhs_contracting_dims={3}
  %sharding_constraint.2192 = bf16[1,4096,8,1024]{3,2,1,0} copy(%dot.1019)
  %pad.26 = bf16[1,4096,8,1025]{3,2,1,0} pad(%sharding_constraint.2192, %constant.1190), padding=0_0x0_0x0_0x1_0
  %mul.8488 = bf16[1,4096,8,1025]{3,2,1,0} multiply(%pad.26, %convert_element_type.2875)
  %reduce.861 = bf16[1,4096,8]{2,1,0} reduce(%mul.8488, %constant.1190), dimensions={3}, to_apply=%region_872.22566
  %mul.8489 = bf16[1,4096,8]{2,1,0} multiply(%reduce.861, %convert_element_type.2872)
  %gather.85 = bf16[1,4096,2]{2,1,0} gather(%mul.8489, %subtract.202), offset_dims={}, collapsed_slice_dims={0,1,2}, start_index_map={0,1,2}, index_vector_dim=3, slice_sizes={1,1,1}
  %select_n.652 = bf16[1,4096,2]{2,1,0} select(%reduce.860, %gather.85, %broadcast.3427)
  %select_n.653 = bf16[1,4096,2]{2,1,0} select(%eq.2452, %select_n.652, %broadcast.3427)
  %convert_element_type.2877 = f32[1,4096,2]{2,1,0} convert(%select_n.653)
  %div.1331 = f32[1,4096,2]{2,1,0} divide(%convert_element_type.2877, %div.1327)
  %mul.8490 = f32[1,4096]{1,0} multiply(%reduce.857, %reduce.857)
  %div.1332 = f32[1,4096]{1,0} divide(%add.1847, %mul.8490)
  %mul.8491 = f32[1,4096,2]{2,1,0} broadcast(%div.1332), dimensions={0,1}
  %mul.8492 = f32[1,4096,2]{2,1,0} multiply(%convert_element_type.2877, %mul.8491)
  %mul.8494 = f32[1,4096,2]{2,1,0} multiply(%mul.8492, %exp.243)
  %reduce.862 = f32[1,4096]{1,0} reduce(%mul.8494, %constant.1360), dimensions={2}, to_apply=%region_873.22583
  %neg.295 = f32[1,4096]{1,0} negate(%reduce.862)
  %broadcast_in_dim.774 = f32[1,4096,2]{2,1,0} broadcast(%neg.295), dimensions={0,1}
  %add_any.433 = f32[1,4096,2]{2,1,0} add(%div.1331, %broadcast_in_dim.774)
  %mul.8495 = f32[1,4096,2]{2,1,0} multiply(%add_any.433, %exp.243)
  %convert_element_type.2878 = bf16[1,4096,2]{2,1,0} convert(%mul.8495)
  %scatter.273 = bf16[1,4096,8]{2,1,0} scatter(%broadcast.3379, %reshape.13304, %convert_element_type.2878), update_window_dims={}, inserted_window_dims={2}, scatter_dims_to_operand_dims={2}, input_batching_dims={0,1}, scatter_indices_batching_dims={0,1}, index_vector_dim=3, to_apply=%region_874.22593.clone
  %sharding_constraint.2194 = bf16[1,4096,8]{2,1,0} copy(%scatter.273)
  %dot.1020 = bf16[1,4096,4096]{2,1,0} dot(%sharding_constraint.2194, %all-gather.386), lhs_contracting_dims={2}, rhs_contracting_dims={1}
  %add_any.434 = bf16[1,4096,4096]{2,1,0} add(%dot.1017, %dot.1020)
  %sharding_constraint.2196 = bf16[1,4096,4096]{2,1,0} copy(%add_any.434)
  %mul.8497 = bf16[1,4096,4096]{2,1,0} multiply(%sharding_constraint.2196, %mul.8456)
  %convert_element_type.2879 = f32[1,4096,4096]{2,1,0} convert(%mul.8497)
  %mul.8504 = f32[1,4096,4096]{2,1,0} multiply(%convert_element_type.2879, %mul.8454)
  %mul.8505 = f32[1,4096,4096]{2,1,0} multiply(%convert_element_type.2864, %convert_element_type.2879)
  %reduce.863 = f32[1,4096]{1,0} reduce(%mul.8505, %constant.1360), dimensions={2}, to_apply=%region_875.22609
  %reshape.13325 = f32[1,4096,1]{2,1,0} reshape(%reduce.863)
  %div.1333 = f32[1,4096,1]{2,1,0} divide(%rsqrt.182, %add.2326)
  %mul.8506 = f32[1,4096,1]{2,1,0} multiply(%div.1333, %broadcast.3620)
  %mul.8510 = f32[1,4096,1]{2,1,0} multiply(%reshape.13325, %mul.8506)
  %mul.8517 = f32[1,4096,1]{2,1,0} multiply(%mul.8510, %mul.4455)
  %mul.8518 = f32[1,4096]{1,0} reshape(%mul.8517)
  %mul.8519 = f32[1,4096,4096]{2,1,0} broadcast(%mul.8518), dimensions={0,1}
  %mul.8524 = f32[1,4096,4096]{2,1,0} multiply(%convert_element_type.2864, %mul.8519)
  %add_any.435 = f32[1,4096,4096]{2,1,0} add(%mul.8504, %mul.8524)
  %convert_element_type.2880 = bf16[1,4096,4096]{2,1,0} convert(%add_any.435)
  %add_any.436 = bf16[1,4096,4096]{2,1,0} add(%sharding_constraint.2159, %convert_element_type.2880)
  %get-tuple-element.1273 = f32[1,32,4096,1]{3,2,1,0} get-tuple-element(%te_fused_attn_forward_ffi.232), index=1
  %get-tuple-element.1274 = u32[2,4]{1,0} get-tuple-element(%te_fused_attn_forward_ffi.232), index=2
  %sharding_constraint.2198 = u32[2,4]{1,0} copy(%get-tuple-element.1274)
  %sharding_constraint.2200 = bf16[1,4096,4096]{2,1,0} copy(%add_any.436)
  %dot.1021 = bf16[1,4096,32,128]{3,2,1,0} dot(%sharding_constraint.2200, %all-gather.385), lhs_contracting_dims={2}, rhs_contracting_dims={2}
  %sharding_constraint.2202 = bf16[1,4096,32,128]{3,2,1,0} copy(%dot.1021)
  %te_fused_attn_backward_ffi.130 = (bf16[1,4096,32,128]{3,2,1,0}, bf16[1,4096,8,128]{3,2,1,0}, bf16[1,4096,8,128]{3,2,1,0}, bf16[0]{0}, u8[134742064]{0}) custom-call(%sharding_constraint.2163, %sharding_constraint.2165, %sharding_constraint.2166, %constant.1403, %get-tuple-element.1273, /*index=5*/%sharding_constraint.2198, %get-tuple-element.1260, %sharding_constraint.2202, %concatenate.599, %concatenate.600, /*index=10*/%constant.1416, %constant.1416, %constant.1416, %constant.1416, %constant.1416, /*index=15*/%constant.1416), custom_call_target="te_fused_attn_backward_ffi", operand_layout_constraints={bf16[1,4096,32,128]{3,2,1,0}, bf16[1,4096,8,128]{3,2,1,0}, bf16[1,4096,8,128]{3,2,1,0}, bf16[0]{0}, f32[1,32,4096,1]{3,2,1,0}, u32[2,4]{1,0}, bf16[1,4096,32,128]{3,2,1,0}, bf16[1,4096,32,128]{3,2,1,0}, s32[2]{0}, s32[2]{0}, f32[0]{0}, f32[0]{0}, f32[0]{0}, f32[0]{0}, f32[0]{0}, f32[0]{0}}, api_version=API_VERSION_TYPED_FFI, backend_config={attn_heads = 32 : i64, bias_batch = 0 : i64, bias_heads = 0 : i64, bias_type = 0 : i64, deterministic = false, dropout_probability = 0.000000e+00 : f64, input_batch = 1 : i64, is_training = true, kv_max_seqlen = 4096 : i64, mask_type = 3 : i64, max_segments_per_seq = 1 : i64, num_gqa_groups = 8 : i64, q_max_seqlen = 4096 : i64, qk_head_dim = 128 : i64, qkv_layout = 9 : i64, scaling_factor = 1.000000e+00 : f64, v_head_dim = 128 : i64, window_size_left = -1 : i64, window_size_right = -1 : i64}
  %get-tuple-element.1275 = bf16[1,4096,8,128]{3,2,1,0} get-tuple-element(%te_fused_attn_backward_ffi.130), index=2
  %sharding_constraint.2205 = bf16[1,4096,8,128]{3,2,1,0} copy(%get-tuple-element.1275)
  %dot.1022 = bf16[1,4096,4096]{2,1,0} dot(%sharding_constraint.2205, %all-gather.384), lhs_contracting_dims={2,3}, rhs_contracting_dims={1,2}
  %get-tuple-element.1276 = bf16[1,4096,8,128]{3,2,1,0} get-tuple-element(%te_fused_attn_backward_ffi.130), index=1
  %sharding_constraint.2206 = bf16[1,4096,8,128]{3,2,1,0} copy(%get-tuple-element.1276)
  %slice.706 = bf16[1,4096,8,64]{3,2,1,0} slice(%sharding_constraint.2206), slice={[0:1], [0:4096], [0:8], [64:128]}
  %mul.8531 = bf16[1,4096,8,64]{3,2,1,0} multiply(%slice.706, %mul.8441)
  %slice.707 = bf16[1,4096,8,64]{3,2,1,0} slice(%sharding_constraint.2206), slice={[0:1], [0:4096], [0:8], [0:64]}
  %mul.8534 = bf16[1,4096,8,64]{3,2,1,0} multiply(%slice.707, %mul.8438)
  %add_any.437 = bf16[1,4096,8,64]{3,2,1,0} add(%mul.8531, %mul.8534)
  %mul.8537 = bf16[1,4096,8,64]{3,2,1,0} multiply(%slice.706, %mul.8438)
  %neg.296 = bf16[1,4096,8,64]{3,2,1,0} negate(%slice.707)
  %mul.8541 = bf16[1,4096,8,64]{3,2,1,0} multiply(%neg.296, %mul.8441)
  %add_any.438 = bf16[1,4096,8,64]{3,2,1,0} add(%mul.8537, %mul.8541)
  %concatenate.608 = bf16[1,4096,8,128]{3,2,1,0} concatenate(%add_any.437, %add_any.438), dimensions={3}
  %dot.1023 = bf16[1,4096,4096]{2,1,0} dot(%concatenate.608, %all-gather.383), lhs_contracting_dims={2,3}, rhs_contracting_dims={1,2}
  %add_any.439 = bf16[1,4096,4096]{2,1,0} add(%dot.1022, %dot.1023)
  %sharding_constraint.2207 = bf16[1,4096,4096]{2,1,0} copy(%add_any.439)
  %get-tuple-element.1277 = bf16[1,4096,32,128]{3,2,1,0} get-tuple-element(%te_fused_attn_backward_ffi.130), index=0
  %sharding_constraint.2208 = bf16[1,4096,32,128]{3,2,1,0} copy(%get-tuple-element.1277)
  %slice.708 = bf16[1,4096,32,64]{3,2,1,0} slice(%sharding_constraint.2208), slice={[0:1], [0:4096], [0:32], [64:128]}
  %mul.8544 = bf16[1,4096,32,64]{3,2,1,0} multiply(%slice.708, %mul.8427)
  %slice.709 = bf16[1,4096,32,64]{3,2,1,0} slice(%sharding_constraint.2208), slice={[0:1], [0:4096], [0:32], [0:64]}
  %mul.8547 = bf16[1,4096,32,64]{3,2,1,0} multiply(%slice.709, %mul.8423)
  %add_any.440 = bf16[1,4096,32,64]{3,2,1,0} add(%mul.8544, %mul.8547)
  %mul.8550 = bf16[1,4096,32,64]{3,2,1,0} multiply(%slice.708, %mul.8423)
  %neg.297 = bf16[1,4096,32,64]{3,2,1,0} negate(%slice.709)
  %mul.8553 = bf16[1,4096,32,64]{3,2,1,0} multiply(%neg.297, %mul.8427)
  %add_any.441 = bf16[1,4096,32,64]{3,2,1,0} add(%mul.8550, %mul.8553)
  %concatenate.609 = bf16[1,4096,32,128]{3,2,1,0} concatenate(%add_any.440, %add_any.441), dimensions={3}
  %dot.1024 = bf16[1,4096,4096]{2,1,0} dot(%concatenate.609, %all-gather.382), lhs_contracting_dims={2,3}, rhs_contracting_dims={1,2}
  %sharding_constraint.2209 = bf16[1,4096,4096]{2,1,0} copy(%dot.1024)
  %add_any.442 = bf16[1,4096,4096]{2,1,0} add(%sharding_constraint.2207, %sharding_constraint.2209)
  %sharding_constraint.2210 = bf16[1,4096,4096]{2,1,0} copy(%add_any.442)
  %mul.8555 = bf16[1,4096,4096]{2,1,0} multiply(%sharding_constraint.2210, %mul.8419)
  %convert_element_type.2881 = f32[1,4096,4096]{2,1,0} convert(%mul.8555)
  %mul.8574 = f32[1,4096,4096]{2,1,0} multiply(%convert_element_type.2881, %mul.8417)
  %mul.8577 = f32[1,4096,4096]{2,1,0} multiply(%convert_element_type.2852, %convert_element_type.2881)
  %reduce.864 = f32[1,4096]{1,0} reduce(%mul.8577, %constant.1360), dimensions={2}, to_apply=%region_876.22688
  %reshape.13332 = f32[1,4096,1]{2,1,0} reshape(%reduce.864)
  %div.1334 = f32[1,4096,1]{2,1,0} divide(%rsqrt.181, %add.2321)
  %mul.8579 = f32[1,4096,1]{2,1,0} multiply(%div.1334, %broadcast.3620)
  %mul.8580 = f32[1,4096,1]{2,1,0} multiply(%reshape.13332, %mul.8579)
  %mul.8581 = f32[1,4096,1]{2,1,0} multiply(%mul.8580, %mul.4455)
  %mul.8582 = f32[1,4096]{1,0} reshape(%mul.8581)
  %mul.8583 = f32[1,4096,4096]{2,1,0} broadcast(%mul.8582), dimensions={0,1}
  %mul.8584 = f32[1,4096,4096]{2,1,0} multiply(%convert_element_type.2852, %mul.8583)
  %add_any.443 = f32[1,4096,4096]{2,1,0} add(%mul.8574, %mul.8584)
  %convert_element_type.2882 = bf16[1,4096,4096]{2,1,0} convert(%add_any.443)
  %add_any.444 = bf16[1,4096,4096]{2,1,0} add(%add_any.436, %convert_element_type.2882)
  %sharding_constraint.2211 = bf16[1,4096,4096]{2,1,0} copy(%add_any.444)
  %tuple.331 = (bf16[512,8]{1,0}, bf16[1,4096,14336]{2,1,0}, bf16[1,4096,14336]{2,1,0}, bf16[1,14336,4096]{2,1,0}, bf16[4096]{0}, /*index=5*/bf16[4096]{0}, bf16[512,8,128]{2,1,0}, bf16[32,128,512]{2,1,0}, bf16[512,32,128]{2,1,0}, bf16[512,8,128]{2,1,0}, /*index=10*/bf16[1,4096,4096]{2,1,0}, s32[1,4096]{1,0}, s32[1,4096]{1,0}, bf16[1,4096,4096]{2,1,0}) tuple(%param.53, %param.54, %param.55, %param.56, %param.52, /*index=5*/%param.47, %param.49, %param.51, %param.48, %param.50, /*index=10*/%sharding_constraint.258, %param.10, %param.7, %sharding_constraint.2211)
  %remat2.38 = (bf16[512,8]{1,0}, bf16[1,4096,14336]{2,1,0}, bf16[1,4096,14336]{2,1,0}, bf16[1,14336,4096]{2,1,0}, bf16[4096]{0}, /*index=5*/bf16[4096]{0}, bf16[512,8,128]{2,1,0}, bf16[32,128,512]{2,1,0}, bf16[512,32,128]{2,1,0}, bf16[512,8,128]{2,1,0}, /*index=10*/bf16[1,4096,4096]{2,1,0}, s32[1,4096]{1,0}, s32[1,4096]{1,0}, bf16[1,4096,4096]{2,1,0}) opt-barrier(%tuple.331)
  %get-tuple-element.1278 = bf16[1,4096,4096]{2,1,0} get-tuple-element(%remat2.38), index=13
  %sharding_constraint.2212 = bf16[1,4096,4096]{2,1,0} copy(%get-tuple-element.1278)
  %iota.2833 = s32[1,4096,2,1]{3,2,1,0} iota(), iota_dimension=1
  %get-tuple-element.1279 = bf16[1,4096,4096]{2,1,0} get-tuple-element(%remat2.38), index=10
  %sharding_constraint.2213 = bf16[1,4096,4096]{2,1,0} copy(%get-tuple-element.1279)
  %convert_element_type.2884 = f32[1,4096,4096]{2,1,0} convert(%sharding_constraint.2213)
  %square.122 = f32[1,4096,4096]{2,1,0} multiply(%convert_element_type.2884, %convert_element_type.2884)
  %reduce.865 = f32[1,4096]{1,0} reduce(%square.122, %constant.1360), dimensions={2}, to_apply=%region_877.22730
  %div.1336 = f32[1,4096]{1,0} multiply(%reduce.865, %broadcast.3412)
  %add.2339 = f32[1,4096]{1,0} add(%div.1336, %broadcast.3413)
  %add.2340 = f32[1,4096,1]{2,1,0} reshape(%add.2339)
  %rsqrt.183 = f32[1,4096,1]{2,1,0} rsqrt(%add.2340)
  %mul.8585 = f32[1,4096]{1,0} reshape(%rsqrt.183)
  %mul.8586 = f32[1,4096,4096]{2,1,0} broadcast(%mul.8585), dimensions={0,1}
  %mul.8587 = f32[1,4096,4096]{2,1,0} multiply(%convert_element_type.2884, %mul.8586)
  %convert_element_type.2885 = bf16[1,4096,4096]{2,1,0} convert(%mul.8587)
  %get-tuple-element.1280 = bf16[4096]{0} get-tuple-element(%remat2.38), index=5
  %mul.8588 = bf16[1,4096,4096]{2,1,0} broadcast(%get-tuple-element.1280), dimensions={2}
  %mul.8589 = bf16[1,4096,4096]{2,1,0} multiply(%convert_element_type.2885, %mul.8588)
  %sharding_constraint.2214 = bf16[1,4096,4096]{2,1,0} copy(%mul.8589)
  %sharding_constraint.2215 = bf16[1,4096,4096]{2,1,0} copy(%sharding_constraint.2214)
  %get-tuple-element.1281 = bf16[512,32,128]{2,1,0} get-tuple-element(%remat2.38), index=8
  %all-gather.388 = bf16[4096,32,128]{2,1,0} all-gather(%get-tuple-element.1281), channel_id=735, replica_groups=[1,8]<=[8], dimensions={0}, use_global_device_ids=true
  %dot.1025 = bf16[1,4096,32,128]{3,2,1,0} dot(%sharding_constraint.2215, %all-gather.388), lhs_contracting_dims={2}, rhs_contracting_dims={0}
  %slice.710 = bf16[1,4096,32,64]{3,2,1,0} slice(%dot.1025), slice={[0:1], [0:4096], [0:32], [0:64]}
  %get-tuple-element.1282 = s32[1,4096]{1,0} get-tuple-element(%remat2.38), index=12
  %convert_element_type.2886 = f32[1,4096]{1,0} convert(%get-tuple-element.1282)
  %div.1337 = f32[1,4096,1,64]{3,2,1,0} broadcast(%convert_element_type.2886), dimensions={0,1}
  %div.1340 = f32[1,4096,1,64]{3,2,1,0} divide(%div.1337, %div.402)
  %cos.119 = f32[1,4096,1,64]{3,2,1,0} cosine(%div.1340)
  %convert_element_type.2888 = bf16[1,4096,1,64]{3,2,1,0} convert(%cos.119)
  %mul.8591 = bf16[1,4096,64]{2,1,0} reshape(%convert_element_type.2888)
  %mul.8592 = bf16[1,4096,32,64]{3,2,1,0} broadcast(%mul.8591), dimensions={0,1,3}
  %mul.8593 = bf16[1,4096,32,64]{3,2,1,0} multiply(%slice.710, %mul.8592)
  %slice.711 = bf16[1,4096,32,64]{3,2,1,0} slice(%dot.1025), slice={[0:1], [0:4096], [0:32], [64:128]}
  %sin.118 = f32[1,4096,1,64]{3,2,1,0} sine(%div.1340)
  %convert_element_type.2889 = bf16[1,4096,1,64]{3,2,1,0} convert(%sin.118)
  %mul.8594 = bf16[1,4096,64]{2,1,0} reshape(%convert_element_type.2889)
  %mul.8595 = bf16[1,4096,32,64]{3,2,1,0} broadcast(%mul.8594), dimensions={0,1,3}
  %mul.8596 = bf16[1,4096,32,64]{3,2,1,0} multiply(%slice.711, %mul.8595)
  %sub.392 = bf16[1,4096,32,64]{3,2,1,0} subtract(%mul.8593, %mul.8596)
  %mul.8615 = bf16[1,4096,32,64]{3,2,1,0} multiply(%slice.711, %mul.8592)
  %mul.8618 = bf16[1,4096,32,64]{3,2,1,0} multiply(%slice.710, %mul.8595)
  %add.2342 = bf16[1,4096,32,64]{3,2,1,0} add(%mul.8615, %mul.8618)
  %concatenate.610 = bf16[1,4096,32,128]{3,2,1,0} concatenate(%sub.392, %add.2342), dimensions={3}
  %sharding_constraint.2216 = bf16[1,4096,32,128]{3,2,1,0} copy(%concatenate.610)
  %get-tuple-element.1283 = bf16[512,8,128]{2,1,0} get-tuple-element(%remat2.38), index=6
  %all-gather.389 = bf16[4096,8,128]{2,1,0} all-gather(%get-tuple-element.1283), channel_id=736, replica_groups=[1,8]<=[8], dimensions={0}, use_global_device_ids=true
  %dot.1026 = bf16[1,4096,8,128]{3,2,1,0} dot(%sharding_constraint.2215, %all-gather.389), lhs_contracting_dims={2}, rhs_contracting_dims={0}
  %slice.712 = bf16[1,4096,8,64]{3,2,1,0} slice(%dot.1026), slice={[0:1], [0:4096], [0:8], [0:64]}
  %mul.8621 = bf16[1,4096,8,64]{3,2,1,0} broadcast(%mul.8591), dimensions={0,1,3}
  %mul.8622 = bf16[1,4096,8,64]{3,2,1,0} multiply(%slice.712, %mul.8621)
  %slice.713 = bf16[1,4096,8,64]{3,2,1,0} slice(%dot.1026), slice={[0:1], [0:4096], [0:8], [64:128]}
  %mul.8624 = bf16[1,4096,8,64]{3,2,1,0} broadcast(%mul.8594), dimensions={0,1,3}
  %mul.8625 = bf16[1,4096,8,64]{3,2,1,0} multiply(%slice.713, %mul.8624)
  %sub.393 = bf16[1,4096,8,64]{3,2,1,0} subtract(%mul.8622, %mul.8625)
  %mul.8628 = bf16[1,4096,8,64]{3,2,1,0} multiply(%slice.713, %mul.8621)
  %mul.8631 = bf16[1,4096,8,64]{3,2,1,0} multiply(%slice.712, %mul.8624)
  %add.2343 = bf16[1,4096,8,64]{3,2,1,0} add(%mul.8628, %mul.8631)
  %concatenate.611 = bf16[1,4096,8,128]{3,2,1,0} concatenate(%sub.393, %add.2343), dimensions={3}
  %sharding_constraint.2218 = bf16[1,4096,8,128]{3,2,1,0} copy(%concatenate.611)
  %get-tuple-element.1284 = bf16[512,8,128]{2,1,0} get-tuple-element(%remat2.38), index=9
  %all-gather.390 = bf16[4096,8,128]{2,1,0} all-gather(%get-tuple-element.1284), channel_id=737, replica_groups=[1,8]<=[8], dimensions={0}, use_global_device_ids=true
  %dot.1027 = bf16[1,4096,8,128]{3,2,1,0} dot(%sharding_constraint.2215, %all-gather.390), lhs_contracting_dims={2}, rhs_contracting_dims={0}
  %sharding_constraint.2219 = bf16[1,4096,8,128]{3,2,1,0} copy(%dot.1027)
  %get-tuple-element.1285 = s32[1,4096]{1,0} get-tuple-element(%remat2.38), index=11
  %eq.2459 = s32[1,4096,4096]{2,1,0} broadcast(%get-tuple-element.1285), dimensions={0,1}
  %eq.2460 = s32[1,4096,4096]{2,1,0} broadcast(%get-tuple-element.1285), dimensions={0,2}
  %eq.2461 = pred[1,4096,4096]{2,1,0} compare(%eq.2459, %eq.2460), direction=EQ
  %and.210 = pred[1,4096,4096]{2,1,0} and(%eq.2461, %and.64)
  %select_n.656 = f32[1,4096,4096]{2,1,0} select(%and.210, %broadcast_in_dim.516, %broadcast_in_dim.517)
  %ne.125 = pred[1,4096,4096]{2,1,0} compare(%select_n.656, %broadcast_in_dim.516), direction=NE
  %not.123 = pred[1,4096,4096]{2,1,0} not(%ne.125)
  %convert_element_type.2895 = s32[1,4096,4096]{2,1,0} convert(%not.123)
  %reduce.866 = s32[1,4096]{1,0} reduce(%convert_element_type.2895, %constant.1181), dimensions={1}, to_apply=%region_878.22826
  %reduce_sum.5757 = s32[1,1,1,4096]{3,2,1,0} reshape(%reduce.866)
  %slice.714 = s32[1,1,1,1]{3,2,1,0} slice(%reduce_sum.5757), slice={[0:1], [0:1], [0:1], [0:1]}
  %squeeze.59 = s32[1,1]{1,0} reshape(%slice.714)
  %reshape.13340 = s32[1]{0} reshape(%squeeze.59)
  %lt.232 = pred[1]{0} compare(%reshape.13340, %constant.1418), direction=LT
  %select_n.657 = s32[1]{0} select(%lt.232, %broadcast_in_dim.518, %reshape.13340)
  %concatenate.612 = s32[2]{0} concatenate(%constant.1418, %select_n.657), dimensions={0}
  %reduce.867 = s32[1,4096]{1,0} reduce(%convert_element_type.2895, %constant.1181), dimensions={2}, to_apply=%region_879.22835
  %reduce_sum.5758 = s32[1,1,1,4096]{3,2,1,0} reshape(%reduce.867)
  %reduce.868 = s32[1,1]{1,0} reduce(%reduce_sum.5758, %constant.1415), dimensions={3,2}, to_apply=%region_880.22841
  %reshape.13341 = s32[1]{0} reshape(%reduce.868)
  %lt.233 = pred[1]{0} compare(%reshape.13341, %constant.1418), direction=LT
  %select_n.658 = s32[1]{0} select(%lt.233, %broadcast_in_dim.518, %reshape.13341)
  %concatenate.613 = s32[2]{0} concatenate(%constant.1418, %select_n.658), dimensions={0}
  %te_fused_attn_forward_ffi.236 = (bf16[1,4096,32,128]{3,2,1,0}, f32[1,32,4096,1]{3,2,1,0}, u32[2,4]{1,0}, u8[48]{0}) custom-call(%sharding_constraint.2216, %sharding_constraint.2218, %sharding_constraint.2219, %constant.1403, %dynamic-slice.38, /*index=5*/%concatenate.612, %concatenate.613, %constant.1416, %constant.1416, %constant.1416, /*index=10*/%constant.1416, %constant.1416, %constant.1416), custom_call_target="te_fused_attn_forward_ffi", operand_layout_constraints={bf16[1,4096,32,128]{3,2,1,0}, bf16[1,4096,8,128]{3,2,1,0}, bf16[1,4096,8,128]{3,2,1,0}, bf16[0]{0}, u32[2]{0}, s32[2]{0}, s32[2]{0}, f32[0]{0}, f32[0]{0}, f32[0]{0}, f32[0]{0}, f32[0]{0}, f32[0]{0}}, api_version=API_VERSION_TYPED_FFI, backend_config={attn_heads = 32 : i64, bias_batch = 0 : i64, bias_heads = 0 : i64, bias_type = 0 : i64, deterministic = false, dropout_probability = 0.000000e+00 : f64, input_batch = 1 : i64, is_training = true, kv_max_seqlen = 4096 : i64, mask_type = 3 : i64, max_segments_per_seq = 1 : i64, num_gqa_groups = 8 : i64, q_max_seqlen = 4096 : i64, qk_head_dim = 128 : i64, qkv_layout = 9 : i64, scaling_factor = 1.000000e+00 : f64, v_head_dim = 128 : i64, window_size_left = -1 : i64, window_size_right = -1 : i64}
  %get-tuple-element.1286 = bf16[1,4096,32,128]{3,2,1,0} get-tuple-element(%te_fused_attn_forward_ffi.236), index=0
  %sharding_constraint.2222 = bf16[1,4096,32,128]{3,2,1,0} copy(%get-tuple-element.1286)
  %get-tuple-element.1287 = bf16[32,128,512]{2,1,0} get-tuple-element(%remat2.38), index=7
  %all-gather.391 = bf16[32,128,4096]{2,1,0} all-gather(%get-tuple-element.1287), channel_id=738, replica_groups=[1,8]<=[8], dimensions={2}, use_global_device_ids=true
  %dot.1028 = bf16[1,4096,4096]{2,1,0} dot(%sharding_constraint.2222, %all-gather.391), lhs_contracting_dims={2,3}, rhs_contracting_dims={0,1}
  %sharding_constraint.2223 = bf16[1,4096,4096]{2,1,0} copy(%dot.1028)
  %add.2345 = bf16[1,4096,4096]{2,1,0} add(%sharding_constraint.2213, %sharding_constraint.2223)
  %convert_element_type.2897 = f32[1,4096,4096]{2,1,0} convert(%add.2345)
  %square.123 = f32[1,4096,4096]{2,1,0} multiply(%convert_element_type.2897, %convert_element_type.2897)
  %reduce.869 = f32[1,4096]{1,0} reduce(%square.123, %constant.1360), dimensions={2}, to_apply=%region_881.22856
  %div.1345 = f32[1,4096]{1,0} multiply(%reduce.869, %broadcast.3412)
  %add.2346 = f32[1,4096]{1,0} add(%div.1345, %broadcast.3413)
  %add.2348 = f32[1,4096,1]{2,1,0} reshape(%add.2346)
  %rsqrt.184 = f32[1,4096,1]{2,1,0} rsqrt(%add.2348)
  %mul.8632 = f32[1,4096]{1,0} reshape(%rsqrt.184)
  %mul.8633 = f32[1,4096,4096]{2,1,0} broadcast(%mul.8632), dimensions={0,1}
  %mul.8634 = f32[1,4096,4096]{2,1,0} multiply(%convert_element_type.2897, %mul.8633)
  %convert_element_type.2898 = bf16[1,4096,4096]{2,1,0} convert(%mul.8634)
  %get-tuple-element.1288 = bf16[4096]{0} get-tuple-element(%remat2.38), index=4
  %mul.8635 = bf16[1,4096,4096]{2,1,0} broadcast(%get-tuple-element.1288), dimensions={2}
  %mul.8636 = bf16[1,4096,4096]{2,1,0} multiply(%convert_element_type.2898, %mul.8635)
  %sharding_constraint.2224 = bf16[1,4096,4096]{2,1,0} copy(%mul.8636)
  %get-tuple-element.1289 = bf16[512,8]{1,0} get-tuple-element(%remat2.38), index=0
  %all-gather.392 = bf16[4096,8]{1,0} all-gather(%get-tuple-element.1289), channel_id=739, replica_groups=[1,8]<=[8], dimensions={0}, use_global_device_ids=true
  %dot.1029 = bf16[1,4096,8]{2,1,0} dot(%sharding_constraint.2224, %all-gather.392), lhs_contracting_dims={2}, rhs_contracting_dims={0}
  %sharding_constraint.2225 = bf16[1,4096,8]{2,1,0} copy(%dot.1029)
  %top_k.177 = bf16[4096,8]{1,0} reshape(%sharding_constraint.2225)
  %top_k.178 = (bf16[4096,2]{1,0}, s32[4096,2]{1,0}) custom-call(%top_k.177), custom_call_target="TopK", called_computations={%compare_greater_than.59.22877.clone}
  %get-tuple-element.1290 = bf16[4096,2]{1,0} get-tuple-element(%top_k.178), index=0
  %get-tuple-element.1291 = s32[4096,2]{1,0} get-tuple-element(%top_k.178), index=1
  %add.2349 = s32[4096,2]{1,0} add(%get-tuple-element.1291, %broadcast.3418)
  %sort.123 = (bf16[4096,2]{1,0}, s32[4096,2]{1,0}) sort(%get-tuple-element.1290, %add.2349), dimensions={1}, is_stable=true, to_apply=%compare-value-and-index.59
  %get-tuple-element.1293 = s32[4096,2]{1,0} get-tuple-element(%sort.123), index=1
  %slice.716 = s32[4096,2]{1,0} slice(%get-tuple-element.1293), slice={[0:4096], [0:2]}
  %top_k.179 = s32[1,4096,2]{2,1,0} reshape(%slice.716)
  %lt.234 = pred[1,4096,2]{2,1,0} compare(%top_k.179, %broadcast.3419), direction=LT
  %add.2350 = s32[1,4096,2]{2,1,0} add(%top_k.179, %broadcast.3420)
  %select_n.659 = s32[1,4096,2]{2,1,0} select(%lt.234, %add.2350, %top_k.179)
  %broadcast_in_dim.779 = s32[1,4096,2,1]{3,2,1,0} reshape(%select_n.659)
  %concatenate.614 = s32[1,4096,2,3]{3,2,1,0} concatenate(%add.1356, %iota.2833, %broadcast_in_dim.779), dimensions={3}
  %subtract.206 = s32[1,4096,2,3]{3,2,1,0} subtract(%concatenate.614, %broadcast.3428)
  %scatter.274 = u32[1,4096,8]{2,1,0} scatter(%dynamic-slice.43, %subtract.206, %add.1401), update_window_dims={}, inserted_window_dims={0,1,2}, scatter_dims_to_operand_dims={0,1,2}, index_vector_dim=3, to_apply=%region_882.22913.clone
  %gather.86 = u32[1,4096,2]{2,1,0} gather(%scatter.274, %subtract.206), offset_dims={}, collapsed_slice_dims={0,1,2}, start_index_map={0,1,2}, index_vector_dim=3, slice_sizes={1,1,1}
  %eq.2462 = pred[1,4096,2]{2,1,0} compare(%add.1401, %gather.86), direction=EQ
  %get-tuple-element.1292 = bf16[4096,2]{1,0} get-tuple-element(%sort.123), index=0
  %slice.715 = bf16[4096,2]{1,0} slice(%get-tuple-element.1292), slice={[0:4096], [0:2]}
  %convert_element_type.2899 = f32[4096,2]{1,0} convert(%slice.715)
  %convert_element_type.2900 = f32[1,4096,2]{2,1,0} reshape(%convert_element_type.2899)
  %reduce.870 = f32[4096]{0} reduce(%convert_element_type.2899, %constant.1450), dimensions={1}, to_apply=%region_883.22922
  %sub.394 = f32[1,4096]{1,0} reshape(%reduce.870)
  %sub.395 = f32[1,4096,2]{2,1,0} broadcast(%sub.394), dimensions={0,1}
  %sub.396 = f32[1,4096,2]{2,1,0} subtract(%convert_element_type.2900, %sub.395)
  %exp.245 = f32[1,4096,2]{2,1,0} exponential(%sub.396)
  %reduce.871 = f32[1,4096]{1,0} reduce(%exp.245, %constant.1360), dimensions={2}, to_apply=%region_884.22931
  %div.1346 = f32[1,4096,2]{2,1,0} broadcast(%reduce.871), dimensions={0,1}
  %div.1347 = f32[1,4096,2]{2,1,0} divide(%exp.245, %div.1346)
  %convert_element_type.2901 = bf16[1,4096,2]{2,1,0} convert(%div.1347)
  %select_n.660 = bf16[1,4096,2]{2,1,0} select(%eq.2462, %convert_element_type.2901, %broadcast.3427)
  %scatter.275 = bf16[1,4096,8]{2,1,0} scatter(%broadcast.3379, %subtract.206, %select_n.660), update_window_dims={}, inserted_window_dims={0,1,2}, scatter_dims_to_operand_dims={0,1,2}, index_vector_dim=3, to_apply=%region_885.22940.clone
  %eq.2464 = s32[1,4096,2,8]{3,2,1,0} broadcast(%top_k.179), dimensions={0,1,2}
  %iota.2846 = s32[1,4096,2,8]{3,2,1,0} iota(), iota_dimension=3
  %eq.2465 = pred[1,4096,2,8]{3,2,1,0} compare(%eq.2464, %iota.2846), direction=EQ
  %convert_element_type.2902 = s32[1,4096,2,8]{3,2,1,0} convert(%eq.2465)
  %reshape.13373 = s32[1,8192,8]{2,1,0} reshape(%convert_element_type.2902)
  %sharding_constraint.2226 = s32[1,8192,8]{2,1,0} copy(%reshape.13373)
  %reduce-window.59 = s32[1,8192,8]{2,1,0} reduce-window(%sharding_constraint.2226, %constant.1181), window={size=1x8192x1 pad=0_0x8191_0x0_0}, to_apply=%region_886.22952
  %reshape.13375 = s32[1,4096,2,8]{3,2,1,0} reshape(%reduce-window.59)
  %sharding_constraint.2227 = s32[1,4096,2,8]{3,2,1,0} copy(%reshape.13375)
  %le.174 = pred[1,4096,2,8]{3,2,1,0} compare(%sharding_constraint.2227, %broadcast.3429), direction=LE
  %mul.8637 = s32[1,4096,2,8]{3,2,1,0} select(%le.174, %convert_element_type.2902, %broadcast.3430)
  %reduce.872 = s32[1,4096,8]{2,1,0} reduce(%mul.8637, %constant.1181), dimensions={2}, to_apply=%region_887.22961
  %convert_element_type.2903 = bf16[1,4096,8]{2,1,0} convert(%reduce.872)
  %mul.8638 = bf16[1,4096,8]{2,1,0} multiply(%scatter.275, %convert_element_type.2903)
  %mul.8639 = bf16[1,4096,8,1025]{3,2,1,0} broadcast(%mul.8638), dimensions={0,1,2}
  %mul.8640 = s32[1,8192,8]{2,1,0} multiply(%sharding_constraint.2226, %reduce-window.59)
  %reshape.13376 = s32[1,4096,2,8]{3,2,1,0} reshape(%mul.8640)
  %reduce.873 = s32[1,4096,8]{2,1,0} reduce(%reshape.13376, %constant.1181), dimensions={2}, to_apply=%region_888.22971
  %mul.8641 = s32[1,4096,8]{2,1,0} multiply(%reduce.873, %reduce.872)
  %eq.2466 = s32[1,4096,8,1025]{3,2,1,0} broadcast(%mul.8641), dimensions={0,1,2}
  %iota.2847 = s32[1,4096,8,1025]{3,2,1,0} iota(), iota_dimension=3
  %eq.2467 = pred[1,4096,8,1025]{3,2,1,0} compare(%eq.2466, %iota.2847), direction=EQ
  %convert_element_type.2904 = s32[1,4096,8,1025]{3,2,1,0} convert(%eq.2467)
  %convert_element_type.2905 = bf16[1,4096,8,1025]{3,2,1,0} convert(%convert_element_type.2904)
  %mul.8642 = bf16[1,4096,8,1025]{3,2,1,0} multiply(%mul.8639, %convert_element_type.2905)
  %slice.717 = bf16[1,4096,8,1024]{3,2,1,0} slice(%mul.8642), slice={[0:1], [0:4096], [0:8], [1:1025]}
  %convert_element_type.2906 = pred[1,4096,8,1024]{3,2,1,0} compare(%slice.717, %broadcast.3431), direction=NE
  %sharding_constraint.2228 = pred[1,4096,8,1024]{3,2,1,0} copy(%convert_element_type.2906)
  %dot_general.122 = bf16[1,4096,8,1024]{3,2,1,0} convert(%sharding_constraint.2228)
  %dot.1030 = bf16[1,8,1024,4096]{3,2,1,0} dot(%dot_general.122, %sharding_constraint.2224), lhs_batch_dims={0}, lhs_contracting_dims={1}, rhs_batch_dims={0}, rhs_contracting_dims={1}
  %reshape.13379 = bf16[1,8,1,1024,4096]{4,3,2,1,0} reshape(%dot.1030)
  %all-to-all.172 = bf16[1,8,1,1024,4096]{4,3,2,1,0} all-to-all(%reshape.13379), channel_id=743, replica_groups=[1,8]<=[8], dimensions={1}
  %transpose.290 = bf16[8,1,1,1024,4096]{4,3,2,0,1} transpose(%all-to-all.172), dimensions={1,0,2,3,4}
  %reshape.13380 = bf16[8,1,1024,4096]{3,2,1,0} reshape(%transpose.290)
  %transpose.291 = bf16[1,8,1024,4096]{3,2,0,1} transpose(%reshape.13380), dimensions={1,0,2,3}
  %sharding_constraint.2229 = bf16[1,8,1024,4096]{3,2,0,1} copy(%transpose.291)
  %get-tuple-element.1296 = bf16[1,4096,14336]{2,1,0} get-tuple-element(%remat2.38), index=1
  %sharding_constraint.2230 = bf16[1,4096,14336]{2,1,0} copy(%get-tuple-element.1296)
  %dot.1031 = bf16[1,8,1024,14336]{3,2,1,0} dot(%sharding_constraint.2229, %sharding_constraint.2230), lhs_batch_dims={0}, lhs_contracting_dims={3}, rhs_batch_dims={0}, rhs_contracting_dims={1}
  %sharding_constraint.2231 = bf16[1,8,1024,14336]{3,2,1,0} copy(%dot.1031)
  %neg.298 = bf16[1,8,1024,14336]{3,2,1,0} negate(%sharding_constraint.2231)
  %exp.246 = bf16[1,8,1024,14336]{3,2,1,0} exponential(%neg.298)
  %add.2355 = bf16[1,8,1024,14336]{3,2,1,0} add(%exp.246, %jit_silu_.0)
  %div.1348 = bf16[1,8,1024,14336]{3,2,1,0} divide(%jit_silu_.0, %add.2355)
  %mul.8643 = bf16[1,8,1024,14336]{3,2,1,0} multiply(%sharding_constraint.2231, %div.1348)
  %sharding_constraint.2235 = bf16[1,4096,4096]{2,1,0} copy(%sharding_constraint.2212)
  %sharding_constraint.2236 = bf16[1,4096,8,1024]{3,2,1,0} copy(%slice.717)
  %dot.1032 = bf16[1,4096,8,1024]{3,2,1,0} dot(%sharding_constraint.2235, %sharding_constraint.2236), lhs_batch_dims={0}, lhs_contracting_dims={1}, rhs_batch_dims={0}, rhs_contracting_dims={1}
  %reshape.13383 = bf16[1,4096,8,1,1024]{4,3,2,1,0} reshape(%dot.1032)
  %all-to-all.173 = bf16[1,4096,8,1,1024]{4,3,2,1,0} all-to-all(%reshape.13383), channel_id=744, replica_groups=[1,8]<=[8], dimensions={2}
  %transpose.292 = bf16[8,1,4096,1,1024]{4,3,0,2,1} transpose(%all-to-all.173), dimensions={2,0,1,3,4}
  %reshape.13384 = bf16[8,4096,1,1024]{3,2,1,0} reshape(%transpose.292)
  %transpose.293 = bf16[1,8,1024,4096]{2,0,3,1} transpose(%reshape.13384), dimensions={2,0,3,1}
  %sharding_constraint.2237 = bf16[1,8,1024,4096]{2,0,3,1} copy(%transpose.293)
  %get-tuple-element.1297 = bf16[1,14336,4096]{2,1,0} get-tuple-element(%remat2.38), index=3
  %sharding_constraint.2238 = bf16[1,14336,4096]{2,1,0} copy(%get-tuple-element.1297)
  %dot.1033 = bf16[1,8,1024,14336]{3,2,1,0} dot(%sharding_constraint.2237, %sharding_constraint.2238), lhs_batch_dims={0}, lhs_contracting_dims={3}, rhs_batch_dims={0}, rhs_contracting_dims={2}
  %mul.8644 = bf16[1,8,1024,14336]{3,2,1,0} multiply(%mul.8643, %dot.1033)
  %sharding_constraint.2239 = bf16[1,8,1024,14336]{3,2,1,0} copy(%mul.8644)
  %get-tuple-element.1298 = bf16[1,4096,14336]{2,1,0} get-tuple-element(%remat2.38), index=2
  %sharding_constraint.2240 = bf16[1,4096,14336]{2,1,0} copy(%get-tuple-element.1298)
  %dot.1034 = bf16[1,8,1024,4096]{3,2,1,0} dot(%sharding_constraint.2239, %sharding_constraint.2240), lhs_batch_dims={0}, lhs_contracting_dims={3}, rhs_batch_dims={0}, rhs_contracting_dims={2}
  %dot.1035 = bf16[1,8,1024,14336]{3,2,1,0} dot(%sharding_constraint.2229, %sharding_constraint.2240), lhs_batch_dims={0}, lhs_contracting_dims={3}, rhs_batch_dims={0}, rhs_contracting_dims={1}
  %sharding_constraint.2241 = bf16[1,8,1024,14336]{3,2,1,0} copy(%dot.1035)
  %mul.8645 = bf16[1,8,1024,14336]{3,2,1,0} multiply(%dot.1033, %sharding_constraint.2241)
  %mul.8646 = bf16[1,8,1024,14336]{3,2,1,0} multiply(%mul.8645, %div.1348)
  %mul.8647 = bf16[1,8,1024,14336]{3,2,1,0} multiply(%sharding_constraint.2231, %mul.8645)
  %sub.397 = bf16[1,8,1024,14336]{3,2,1,0} subtract(%jit_silu_.0, %div.1348)
  %mul.8648 = bf16[1,8,1024,14336]{3,2,1,0} multiply(%div.1348, %sub.397)
  %mul.8649 = bf16[1,8,1024,14336]{3,2,1,0} multiply(%mul.8647, %mul.8648)
  %add_any.445 = bf16[1,8,1024,14336]{3,2,1,0} add(%mul.8646, %mul.8649)
  %sharding_constraint.2242 = bf16[1,8,1024,14336]{3,2,1,0} copy(%add_any.445)
  %dot.1036 = bf16[1,8,1024,4096]{3,2,1,0} dot(%sharding_constraint.2242, %sharding_constraint.2230), lhs_batch_dims={0}, lhs_contracting_dims={3}, rhs_batch_dims={0}, rhs_contracting_dims={2}
  %add_any.446 = bf16[1,8,1024,4096]{3,2,1,0} add(%dot.1034, %dot.1036)
  %sharding_constraint.2243 = bf16[1,8,1024,4096]{3,2,1,0} copy(%add_any.446)
  %transpose.294 = bf16[8,1,1024,4096]{3,2,0,1} transpose(%sharding_constraint.2243), dimensions={1,0,2,3}
  %reshape.13387 = bf16[8,1,1,1024,4096]{4,3,2,1,0} reshape(%transpose.294)
  %all-to-all.174 = bf16[8,1,1,1024,4096]{4,3,2,1,0} all-to-all(%reshape.13387), channel_id=745, replica_groups=[1,8]<=[8], dimensions={0}
  %transpose.295 = bf16[1,8,1,1024,4096]{4,3,2,0,1} transpose(%all-to-all.174), dimensions={1,0,2,3,4}
  %reshape.13388 = bf16[1,8,1024,4096]{3,2,1,0} reshape(%transpose.295)
  %dot.1037 = bf16[1,4096,4096]{2,1,0} dot(%dot_general.122, %reshape.13388), lhs_batch_dims={0}, lhs_contracting_dims={2,3}, rhs_batch_dims={0}, rhs_contracting_dims={1,2}
  %reshape.13390 = s32[1,4096,2,1]{3,2,1,0} reshape(%slice.716)
  %ge.27 = pred[1,4096,2,3]{3,2,1,0} compare(%concatenate.614, %broadcast.3629), direction=GE
  %le.176 = pred[1,4096,2,3]{3,2,1,0} compare(%concatenate.614, %le.67), direction=LE
  %and.211 = pred[1,4096,2,3]{3,2,1,0} and(%ge.27, %le.176)
  %reduce.874 = pred[1,4096,2]{2,1,0} reduce(%and.211, %constant.5574), dimensions={3}, to_apply=%region_889.23028
  %mul.8650 = bf16[1,8,1024,14336]{3,2,1,0} multiply(%mul.8643, %sharding_constraint.2241)
  %dot.1038 = bf16[1,8,1024,4096]{3,2,1,0} dot(%mul.8650, %sharding_constraint.2238), lhs_batch_dims={0}, lhs_contracting_dims={3}, rhs_batch_dims={0}, rhs_contracting_dims={1}
  %sharding_constraint.2244 = bf16[1,8,1024,4096]{3,2,1,0} copy(%dot.1038)
  %reshape.13397 = bf16[1,8,1,1024,4096]{4,3,2,1,0} reshape(%sharding_constraint.2244)
  %all-to-all.175 = bf16[1,8,1,1024,4096]{4,3,2,1,0} all-to-all(%reshape.13397), channel_id=746, replica_groups=[1,8]<=[8], dimensions={1}
  %transpose.296 = bf16[8,1,1,1024,4096]{4,3,2,0,1} transpose(%all-to-all.175), dimensions={1,0,2,3,4}
  %reshape.13398 = bf16[8,1,1024,4096]{3,2,1,0} reshape(%transpose.296)
  %dot.1039 = bf16[1,4096,8,1024]{3,2,1,0} dot(%sharding_constraint.2235, %reshape.13398), lhs_batch_dims={0}, lhs_contracting_dims={2}, rhs_batch_dims={1}, rhs_contracting_dims={3}
  %sharding_constraint.2245 = bf16[1,4096,8,1024]{3,2,1,0} copy(%dot.1039)
  %pad.27 = bf16[1,4096,8,1025]{3,2,1,0} pad(%sharding_constraint.2245, %constant.1190), padding=0_0x0_0x0_0x1_0
  %mul.8651 = bf16[1,4096,8,1025]{3,2,1,0} multiply(%pad.27, %convert_element_type.2905)
  %reduce.875 = bf16[1,4096,8]{2,1,0} reduce(%mul.8651, %constant.1190), dimensions={3}, to_apply=%region_890.23040
  %mul.8652 = bf16[1,4096,8]{2,1,0} multiply(%reduce.875, %convert_element_type.2903)
  %gather.87 = bf16[1,4096,2]{2,1,0} gather(%mul.8652, %subtract.206), offset_dims={}, collapsed_slice_dims={0,1,2}, start_index_map={0,1,2}, index_vector_dim=3, slice_sizes={1,1,1}
  %select_n.661 = bf16[1,4096,2]{2,1,0} select(%reduce.874, %gather.87, %broadcast.3427)
  %select_n.662 = bf16[1,4096,2]{2,1,0} select(%eq.2462, %select_n.661, %broadcast.3427)
  %convert_element_type.2907 = f32[1,4096,2]{2,1,0} convert(%select_n.662)
  %div.1350 = f32[1,4096,2]{2,1,0} divide(%convert_element_type.2907, %div.1346)
  %mul.8653 = f32[1,4096]{1,0} multiply(%reduce.871, %reduce.871)
  %div.1351 = f32[1,4096]{1,0} divide(%add.1847, %mul.8653)
  %mul.8654 = f32[1,4096,2]{2,1,0} broadcast(%div.1351), dimensions={0,1}
  %mul.8655 = f32[1,4096,2]{2,1,0} multiply(%convert_element_type.2907, %mul.8654)
  %mul.8656 = f32[1,4096,2]{2,1,0} multiply(%mul.8655, %exp.245)
  %reduce.876 = f32[1,4096]{1,0} reduce(%mul.8656, %constant.1360), dimensions={2}, to_apply=%region_891.23057
  %neg.299 = f32[1,4096]{1,0} negate(%reduce.876)
  %broadcast_in_dim.780 = f32[1,4096,2]{2,1,0} broadcast(%neg.299), dimensions={0,1}
  %add_any.447 = f32[1,4096,2]{2,1,0} add(%div.1350, %broadcast_in_dim.780)
  %mul.8657 = f32[1,4096,2]{2,1,0} multiply(%add_any.447, %exp.245)
  %convert_element_type.2909 = bf16[1,4096,2]{2,1,0} convert(%mul.8657)
  %scatter.276 = bf16[1,4096,8]{2,1,0} scatter(%broadcast.3379, %reshape.13390, %convert_element_type.2909), update_window_dims={}, inserted_window_dims={2}, scatter_dims_to_operand_dims={2}, input_batching_dims={0,1}, scatter_indices_batching_dims={0,1}, index_vector_dim=3, to_apply=%region_892.23067.clone
  %sharding_constraint.2246 = bf16[1,4096,8]{2,1,0} copy(%scatter.276)
  %dot.1040 = bf16[1,4096,4096]{2,1,0} dot(%sharding_constraint.2246, %all-gather.392), lhs_contracting_dims={2}, rhs_contracting_dims={1}
  %add_any.448 = bf16[1,4096,4096]{2,1,0} add(%dot.1037, %dot.1040)
  %sharding_constraint.2247 = bf16[1,4096,4096]{2,1,0} copy(%add_any.448)
  %mul.8660 = bf16[1,4096,4096]{2,1,0} multiply(%sharding_constraint.2247, %mul.8635)
  %convert_element_type.2910 = f32[1,4096,4096]{2,1,0} convert(%mul.8660)
  %mul.8663 = f32[1,4096,4096]{2,1,0} multiply(%convert_element_type.2910, %mul.8633)
  %mul.8664 = f32[1,4096,4096]{2,1,0} multiply(%convert_element_type.2897, %convert_element_type.2910)
  %reduce.877 = f32[1,4096]{1,0} reduce(%mul.8664, %constant.1360), dimensions={2}, to_apply=%region_893.23083
  %reshape.13410 = f32[1,4096,1]{2,1,0} reshape(%reduce.877)
  %div.1352 = f32[1,4096,1]{2,1,0} divide(%rsqrt.184, %add.2348)
  %mul.8668 = f32[1,4096,1]{2,1,0} multiply(%div.1352, %broadcast.3620)
  %mul.8669 = f32[1,4096,1]{2,1,0} multiply(%reshape.13410, %mul.8668)
  %mul.8670 = f32[1,4096,1]{2,1,0} multiply(%mul.8669, %mul.4455)
  %mul.8671 = f32[1,4096]{1,0} reshape(%mul.8670)
  %mul.8672 = f32[1,4096,4096]{2,1,0} broadcast(%mul.8671), dimensions={0,1}
  %mul.8673 = f32[1,4096,4096]{2,1,0} multiply(%convert_element_type.2897, %mul.8672)
  %add_any.449 = f32[1,4096,4096]{2,1,0} add(%mul.8663, %mul.8673)
  %convert_element_type.2911 = bf16[1,4096,4096]{2,1,0} convert(%add_any.449)
  %add_any.450 = bf16[1,4096,4096]{2,1,0} add(%sharding_constraint.2212, %convert_element_type.2911)
  %get-tuple-element.1299 = f32[1,32,4096,1]{3,2,1,0} get-tuple-element(%te_fused_attn_forward_ffi.236), index=1
  %get-tuple-element.1300 = u32[2,4]{1,0} get-tuple-element(%te_fused_attn_forward_ffi.236), index=2
  %sharding_constraint.2248 = u32[2,4]{1,0} copy(%get-tuple-element.1300)
  %sharding_constraint.2249 = bf16[1,4096,4096]{2,1,0} copy(%add_any.450)
  %dot.1041 = bf16[1,4096,32,128]{3,2,1,0} dot(%sharding_constraint.2249, %all-gather.391), lhs_contracting_dims={2}, rhs_contracting_dims={2}
  %sharding_constraint.2250 = bf16[1,4096,32,128]{3,2,1,0} copy(%dot.1041)
  %te_fused_attn_backward_ffi.135 = (bf16[1,4096,32,128]{3,2,1,0}, bf16[1,4096,8,128]{3,2,1,0}, bf16[1,4096,8,128]{3,2,1,0}, bf16[0]{0}, u8[134742064]{0}) custom-call(%sharding_constraint.2216, %sharding_constraint.2218, %sharding_constraint.2219, %constant.1403, %get-tuple-element.1299, /*index=5*/%sharding_constraint.2248, %get-tuple-element.1286, %sharding_constraint.2250, %concatenate.612, %concatenate.613, /*index=10*/%constant.1416, %constant.1416, %constant.1416, %constant.1416, %constant.1416, /*index=15*/%constant.1416), custom_call_target="te_fused_attn_backward_ffi", operand_layout_constraints={bf16[1,4096,32,128]{3,2,1,0}, bf16[1,4096,8,128]{3,2,1,0}, bf16[1,4096,8,128]{3,2,1,0}, bf16[0]{0}, f32[1,32,4096,1]{3,2,1,0}, u32[2,4]{1,0}, bf16[1,4096,32,128]{3,2,1,0}, bf16[1,4096,32,128]{3,2,1,0}, s32[2]{0}, s32[2]{0}, f32[0]{0}, f32[0]{0}, f32[0]{0}, f32[0]{0}, f32[0]{0}, f32[0]{0}}, api_version=API_VERSION_TYPED_FFI, backend_config={attn_heads = 32 : i64, bias_batch = 0 : i64, bias_heads = 0 : i64, bias_type = 0 : i64, deterministic = false, dropout_probability = 0.000000e+00 : f64, input_batch = 1 : i64, is_training = true, kv_max_seqlen = 4096 : i64, mask_type = 3 : i64, max_segments_per_seq = 1 : i64, num_gqa_groups = 8 : i64, q_max_seqlen = 4096 : i64, qk_head_dim = 128 : i64, qkv_layout = 9 : i64, scaling_factor = 1.000000e+00 : f64, v_head_dim = 128 : i64, window_size_left = -1 : i64, window_size_right = -1 : i64}
  %get-tuple-element.1301 = bf16[1,4096,8,128]{3,2,1,0} get-tuple-element(%te_fused_attn_backward_ffi.135), index=2
  %sharding_constraint.2251 = bf16[1,4096,8,128]{3,2,1,0} copy(%get-tuple-element.1301)
  %dot.1042 = bf16[1,4096,4096]{2,1,0} dot(%sharding_constraint.2251, %all-gather.390), lhs_contracting_dims={2,3}, rhs_contracting_dims={1,2}
  %get-tuple-element.1302 = bf16[1,4096,8,128]{3,2,1,0} get-tuple-element(%te_fused_attn_backward_ffi.135), index=1
  %sharding_constraint.2252 = bf16[1,4096,8,128]{3,2,1,0} copy(%get-tuple-element.1302)
  %slice.718 = bf16[1,4096,8,64]{3,2,1,0} slice(%sharding_constraint.2252), slice={[0:1], [0:4096], [0:8], [64:128]}
  %mul.8677 = bf16[1,4096,8,64]{3,2,1,0} multiply(%slice.718, %mul.8624)
  %slice.719 = bf16[1,4096,8,64]{3,2,1,0} slice(%sharding_constraint.2252), slice={[0:1], [0:4096], [0:8], [0:64]}
  %mul.8684 = bf16[1,4096,8,64]{3,2,1,0} multiply(%slice.719, %mul.8621)
  %add_any.451 = bf16[1,4096,8,64]{3,2,1,0} add(%mul.8677, %mul.8684)
  %mul.8691 = bf16[1,4096,8,64]{3,2,1,0} multiply(%slice.718, %mul.8621)
  %neg.300 = bf16[1,4096,8,64]{3,2,1,0} negate(%slice.719)
  %mul.8694 = bf16[1,4096,8,64]{3,2,1,0} multiply(%neg.300, %mul.8624)
  %add_any.452 = bf16[1,4096,8,64]{3,2,1,0} add(%mul.8691, %mul.8694)
  %concatenate.621 = bf16[1,4096,8,128]{3,2,1,0} concatenate(%add_any.451, %add_any.452), dimensions={3}
  %dot.1043 = bf16[1,4096,4096]{2,1,0} dot(%concatenate.621, %all-gather.389), lhs_contracting_dims={2,3}, rhs_contracting_dims={1,2}
  %add_any.453 = bf16[1,4096,4096]{2,1,0} add(%dot.1042, %dot.1043)
  %sharding_constraint.2255 = bf16[1,4096,4096]{2,1,0} copy(%add_any.453)
  %get-tuple-element.1303 = bf16[1,4096,32,128]{3,2,1,0} get-tuple-element(%te_fused_attn_backward_ffi.135), index=0
  %sharding_constraint.2256 = bf16[1,4096,32,128]{3,2,1,0} copy(%get-tuple-element.1303)
  %slice.720 = bf16[1,4096,32,64]{3,2,1,0} slice(%sharding_constraint.2256), slice={[0:1], [0:4096], [0:32], [64:128]}
  %mul.8698 = bf16[1,4096,32,64]{3,2,1,0} multiply(%slice.720, %mul.8595)
  %slice.721 = bf16[1,4096,32,64]{3,2,1,0} slice(%sharding_constraint.2256), slice={[0:1], [0:4096], [0:32], [0:64]}
  %mul.8702 = bf16[1,4096,32,64]{3,2,1,0} multiply(%slice.721, %mul.8592)
  %add_any.454 = bf16[1,4096,32,64]{3,2,1,0} add(%mul.8698, %mul.8702)
  %mul.8705 = bf16[1,4096,32,64]{3,2,1,0} multiply(%slice.720, %mul.8592)
  %neg.301 = bf16[1,4096,32,64]{3,2,1,0} negate(%slice.721)
  %mul.8708 = bf16[1,4096,32,64]{3,2,1,0} multiply(%neg.301, %mul.8595)
  %add_any.455 = bf16[1,4096,32,64]{3,2,1,0} add(%mul.8705, %mul.8708)
  %concatenate.622 = bf16[1,4096,32,128]{3,2,1,0} concatenate(%add_any.454, %add_any.455), dimensions={3}
  %dot.1044 = bf16[1,4096,4096]{2,1,0} dot(%concatenate.622, %all-gather.388), lhs_contracting_dims={2,3}, rhs_contracting_dims={1,2}
  %sharding_constraint.2257 = bf16[1,4096,4096]{2,1,0} copy(%dot.1044)
  %add_any.456 = bf16[1,4096,4096]{2,1,0} add(%sharding_constraint.2255, %sharding_constraint.2257)
  %sharding_constraint.2258 = bf16[1,4096,4096]{2,1,0} copy(%add_any.456)
  %mul.8710 = bf16[1,4096,4096]{2,1,0} multiply(%sharding_constraint.2258, %mul.8588)
  %convert_element_type.2912 = f32[1,4096,4096]{2,1,0} convert(%mul.8710)
  %mul.8713 = f32[1,4096,4096]{2,1,0} multiply(%convert_element_type.2912, %mul.8586)
  %mul.8714 = f32[1,4096,4096]{2,1,0} multiply(%convert_element_type.2884, %convert_element_type.2912)
  %reduce.878 = f32[1,4096]{1,0} reduce(%mul.8714, %constant.1360), dimensions={2}, to_apply=%region_894.23162
  %reshape.13429 = f32[1,4096,1]{2,1,0} reshape(%reduce.878)
  %div.1353 = f32[1,4096,1]{2,1,0} divide(%rsqrt.183, %add.2340)
  %mul.8715 = f32[1,4096,1]{2,1,0} multiply(%div.1353, %broadcast.3620)
  %mul.8716 = f32[1,4096,1]{2,1,0} multiply(%reshape.13429, %mul.8715)
  %mul.8717 = f32[1,4096,1]{2,1,0} multiply(%mul.8716, %mul.4455)
  %mul.8718 = f32[1,4096]{1,0} reshape(%mul.8717)
  %mul.8721 = f32[1,4096,4096]{2,1,0} broadcast(%mul.8718), dimensions={0,1}
  %mul.8724 = f32[1,4096,4096]{2,1,0} multiply(%convert_element_type.2884, %mul.8721)
  %add_any.457 = f32[1,4096,4096]{2,1,0} add(%mul.8713, %mul.8724)
  %convert_element_type.2913 = bf16[1,4096,4096]{2,1,0} convert(%add_any.457)
  %add_any.458 = bf16[1,4096,4096]{2,1,0} add(%add_any.450, %convert_element_type.2913)
  %sharding_constraint.2259 = bf16[1,4096,4096]{2,1,0} copy(%add_any.458)
  %tuple.335 = (bf16[512,8]{1,0}, bf16[1,4096,14336]{2,1,0}, bf16[1,4096,14336]{2,1,0}, bf16[1,14336,4096]{2,1,0}, bf16[4096]{0}, /*index=5*/bf16[4096]{0}, bf16[512,8,128]{2,1,0}, bf16[32,128,512]{2,1,0}, bf16[512,32,128]{2,1,0}, bf16[512,8,128]{2,1,0}, /*index=10*/bf16[1,4096,4096]{2,1,0}, s32[1,4096]{1,0}, s32[1,4096]{1,0}, bf16[1,4096,4096]{2,1,0}) tuple(%param.43, %param.44, %param.45, %param.46, %param.42, /*index=5*/%param.37, %param.39, %param.41, %param.38, %param.40, /*index=10*/%sharding_constraint.234, %param.10, %param.7, %sharding_constraint.2259)
  %remat2.39 = (bf16[512,8]{1,0}, bf16[1,4096,14336]{2,1,0}, bf16[1,4096,14336]{2,1,0}, bf16[1,14336,4096]{2,1,0}, bf16[4096]{0}, /*index=5*/bf16[4096]{0}, bf16[512,8,128]{2,1,0}, bf16[32,128,512]{2,1,0}, bf16[512,32,128]{2,1,0}, bf16[512,8,128]{2,1,0}, /*index=10*/bf16[1,4096,4096]{2,1,0}, s32[1,4096]{1,0}, s32[1,4096]{1,0}, bf16[1,4096,4096]{2,1,0}) opt-barrier(%tuple.335)
  %get-tuple-element.1304 = bf16[1,4096,4096]{2,1,0} get-tuple-element(%remat2.39), index=13
  %sharding_constraint.2260 = bf16[1,4096,4096]{2,1,0} copy(%get-tuple-element.1304)
  %iota.2852 = s32[1,4096,2,1]{3,2,1,0} iota(), iota_dimension=1
  %get-tuple-element.1305 = bf16[1,4096,4096]{2,1,0} get-tuple-element(%remat2.39), index=10
  %sharding_constraint.2261 = bf16[1,4096,4096]{2,1,0} copy(%get-tuple-element.1305)
  %convert_element_type.2914 = f32[1,4096,4096]{2,1,0} convert(%sharding_constraint.2261)
  %square.124 = f32[1,4096,4096]{2,1,0} multiply(%convert_element_type.2914, %convert_element_type.2914)
  %reduce.879 = f32[1,4096]{1,0} reduce(%square.124, %constant.1360), dimensions={2}, to_apply=%region_895.23204
  %div.1354 = f32[1,4096]{1,0} multiply(%reduce.879, %broadcast.3412)
  %add.2360 = f32[1,4096]{1,0} add(%div.1354, %broadcast.3413)
  %add.2362 = f32[1,4096,1]{2,1,0} reshape(%add.2360)
  %rsqrt.185 = f32[1,4096,1]{2,1,0} rsqrt(%add.2362)
  %mul.8725 = f32[1,4096]{1,0} reshape(%rsqrt.185)
  %mul.8726 = f32[1,4096,4096]{2,1,0} broadcast(%mul.8725), dimensions={0,1}
  %mul.8727 = f32[1,4096,4096]{2,1,0} multiply(%convert_element_type.2914, %mul.8726)
  %convert_element_type.2915 = bf16[1,4096,4096]{2,1,0} convert(%mul.8727)
  %get-tuple-element.1306 = bf16[4096]{0} get-tuple-element(%remat2.39), index=5
  %mul.8728 = bf16[1,4096,4096]{2,1,0} broadcast(%get-tuple-element.1306), dimensions={2}
  %mul.8729 = bf16[1,4096,4096]{2,1,0} multiply(%convert_element_type.2915, %mul.8728)
  %sharding_constraint.2262 = bf16[1,4096,4096]{2,1,0} copy(%mul.8729)
  %sharding_constraint.2263 = bf16[1,4096,4096]{2,1,0} copy(%sharding_constraint.2262)
  %get-tuple-element.1307 = bf16[512,32,128]{2,1,0} get-tuple-element(%remat2.39), index=8
  %all-gather.394 = bf16[4096,32,128]{2,1,0} all-gather(%get-tuple-element.1307), channel_id=749, replica_groups=[1,8]<=[8], dimensions={0}, use_global_device_ids=true
  %dot.1045 = bf16[1,4096,32,128]{3,2,1,0} dot(%sharding_constraint.2263, %all-gather.394), lhs_contracting_dims={2}, rhs_contracting_dims={0}
  %slice.722 = bf16[1,4096,32,64]{3,2,1,0} slice(%dot.1045), slice={[0:1], [0:4096], [0:32], [0:64]}
  %get-tuple-element.1308 = s32[1,4096]{1,0} get-tuple-element(%remat2.39), index=12
  %convert_element_type.2916 = f32[1,4096]{1,0} convert(%get-tuple-element.1308)
  %div.1355 = f32[1,4096,1,64]{3,2,1,0} broadcast(%convert_element_type.2916), dimensions={0,1}
  %div.1358 = f32[1,4096,1,64]{3,2,1,0} divide(%div.1355, %div.402)
  %cos.121 = f32[1,4096,1,64]{3,2,1,0} cosine(%div.1358)
  %convert_element_type.2918 = bf16[1,4096,1,64]{3,2,1,0} convert(%cos.121)
  %mul.8732 = bf16[1,4096,64]{2,1,0} reshape(%convert_element_type.2918)
  %mul.8733 = bf16[1,4096,32,64]{3,2,1,0} broadcast(%mul.8732), dimensions={0,1,3}
  %mul.8734 = bf16[1,4096,32,64]{3,2,1,0} multiply(%slice.722, %mul.8733)
  %slice.723 = bf16[1,4096,32,64]{3,2,1,0} slice(%dot.1045), slice={[0:1], [0:4096], [0:32], [64:128]}
  %sin.120 = f32[1,4096,1,64]{3,2,1,0} sine(%div.1358)
  %convert_element_type.2919 = bf16[1,4096,1,64]{3,2,1,0} convert(%sin.120)
  %mul.8735 = bf16[1,4096,64]{2,1,0} reshape(%convert_element_type.2919)
  %mul.8736 = bf16[1,4096,32,64]{3,2,1,0} broadcast(%mul.8735), dimensions={0,1,3}
  %mul.8737 = bf16[1,4096,32,64]{3,2,1,0} multiply(%slice.723, %mul.8736)
  %sub.398 = bf16[1,4096,32,64]{3,2,1,0} subtract(%mul.8734, %mul.8737)
  %mul.8743 = bf16[1,4096,32,64]{3,2,1,0} multiply(%slice.723, %mul.8733)
  %mul.8755 = bf16[1,4096,32,64]{3,2,1,0} multiply(%slice.722, %mul.8736)
  %add.2363 = bf16[1,4096,32,64]{3,2,1,0} add(%mul.8743, %mul.8755)
  %concatenate.623 = bf16[1,4096,32,128]{3,2,1,0} concatenate(%sub.398, %add.2363), dimensions={3}
  %sharding_constraint.2264 = bf16[1,4096,32,128]{3,2,1,0} copy(%concatenate.623)
  %get-tuple-element.1309 = bf16[512,8,128]{2,1,0} get-tuple-element(%remat2.39), index=6
  %all-gather.395 = bf16[4096,8,128]{2,1,0} all-gather(%get-tuple-element.1309), channel_id=750, replica_groups=[1,8]<=[8], dimensions={0}, use_global_device_ids=true
  %dot.1046 = bf16[1,4096,8,128]{3,2,1,0} dot(%sharding_constraint.2263, %all-gather.395), lhs_contracting_dims={2}, rhs_contracting_dims={0}
  %slice.724 = bf16[1,4096,8,64]{3,2,1,0} slice(%dot.1046), slice={[0:1], [0:4096], [0:8], [0:64]}
  %mul.8758 = bf16[1,4096,8,64]{3,2,1,0} broadcast(%mul.8732), dimensions={0,1,3}
  %mul.8759 = bf16[1,4096,8,64]{3,2,1,0} multiply(%slice.724, %mul.8758)
  %slice.725 = bf16[1,4096,8,64]{3,2,1,0} slice(%dot.1046), slice={[0:1], [0:4096], [0:8], [64:128]}
  %mul.8761 = bf16[1,4096,8,64]{3,2,1,0} broadcast(%mul.8735), dimensions={0,1,3}
  %mul.8762 = bf16[1,4096,8,64]{3,2,1,0} multiply(%slice.725, %mul.8761)
  %sub.399 = bf16[1,4096,8,64]{3,2,1,0} subtract(%mul.8759, %mul.8762)
  %mul.8767 = bf16[1,4096,8,64]{3,2,1,0} multiply(%slice.725, %mul.8758)
  %mul.8770 = bf16[1,4096,8,64]{3,2,1,0} multiply(%slice.724, %mul.8761)
  %add.2364 = bf16[1,4096,8,64]{3,2,1,0} add(%mul.8767, %mul.8770)
  %concatenate.624 = bf16[1,4096,8,128]{3,2,1,0} concatenate(%sub.399, %add.2364), dimensions={3}
  %sharding_constraint.2266 = bf16[1,4096,8,128]{3,2,1,0} copy(%concatenate.624)
  %get-tuple-element.1310 = bf16[512,8,128]{2,1,0} get-tuple-element(%remat2.39), index=9
  %all-gather.396 = bf16[4096,8,128]{2,1,0} all-gather(%get-tuple-element.1310), channel_id=751, replica_groups=[1,8]<=[8], dimensions={0}, use_global_device_ids=true
  %dot.1047 = bf16[1,4096,8,128]{3,2,1,0} dot(%sharding_constraint.2263, %all-gather.396), lhs_contracting_dims={2}, rhs_contracting_dims={0}
  %sharding_constraint.2267 = bf16[1,4096,8,128]{3,2,1,0} copy(%dot.1047)
  %get-tuple-element.1311 = s32[1,4096]{1,0} get-tuple-element(%remat2.39), index=11
  %eq.2469 = s32[1,4096,4096]{2,1,0} broadcast(%get-tuple-element.1311), dimensions={0,1}
  %eq.2470 = s32[1,4096,4096]{2,1,0} broadcast(%get-tuple-element.1311), dimensions={0,2}
  %eq.2471 = pred[1,4096,4096]{2,1,0} compare(%eq.2469, %eq.2470), direction=EQ
  %and.213 = pred[1,4096,4096]{2,1,0} and(%eq.2471, %and.64)
  %select_n.665 = f32[1,4096,4096]{2,1,0} select(%and.213, %broadcast_in_dim.516, %broadcast_in_dim.517)
  %ne.126 = pred[1,4096,4096]{2,1,0} compare(%select_n.665, %broadcast_in_dim.516), direction=NE
  %not.124 = pred[1,4096,4096]{2,1,0} not(%ne.126)
  %convert_element_type.2925 = s32[1,4096,4096]{2,1,0} convert(%not.124)
  %reduce.880 = s32[1,4096]{1,0} reduce(%convert_element_type.2925, %constant.1181), dimensions={1}, to_apply=%region_896.23300
  %reduce_sum.5759 = s32[1,1,1,4096]{3,2,1,0} reshape(%reduce.880)
  %slice.726 = s32[1,1,1,1]{3,2,1,0} slice(%reduce_sum.5759), slice={[0:1], [0:1], [0:1], [0:1]}
  %squeeze.60 = s32[1,1]{1,0} reshape(%slice.726)
  %reshape.13437 = s32[1]{0} reshape(%squeeze.60)
  %lt.237 = pred[1]{0} compare(%reshape.13437, %constant.1418), direction=LT
  %select_n.666 = s32[1]{0} select(%lt.237, %broadcast_in_dim.518, %reshape.13437)
  %concatenate.625 = s32[2]{0} concatenate(%constant.1418, %select_n.666), dimensions={0}
  %reduce.881 = s32[1,4096]{1,0} reduce(%convert_element_type.2925, %constant.1181), dimensions={2}, to_apply=%region_897.23309
  %reduce_sum.5760 = s32[1,1,1,4096]{3,2,1,0} reshape(%reduce.881)
  %reduce.882 = s32[1,1]{1,0} reduce(%reduce_sum.5760, %constant.1415), dimensions={3,2}, to_apply=%region_898.23315
  %reshape.13438 = s32[1]{0} reshape(%reduce.882)
  %lt.238 = pred[1]{0} compare(%reshape.13438, %constant.1418), direction=LT
  %select_n.667 = s32[1]{0} select(%lt.238, %broadcast_in_dim.518, %reshape.13438)
  %concatenate.626 = s32[2]{0} concatenate(%constant.1418, %select_n.667), dimensions={0}
  %te_fused_attn_forward_ffi.240 = (bf16[1,4096,32,128]{3,2,1,0}, f32[1,32,4096,1]{3,2,1,0}, u32[2,4]{1,0}, u8[48]{0}) custom-call(%sharding_constraint.2264, %sharding_constraint.2266, %sharding_constraint.2267, %constant.1403, %dynamic-slice.38, /*index=5*/%concatenate.625, %concatenate.626, %constant.1416, %constant.1416, %constant.1416, /*index=10*/%constant.1416, %constant.1416, %constant.1416), custom_call_target="te_fused_attn_forward_ffi", operand_layout_constraints={bf16[1,4096,32,128]{3,2,1,0}, bf16[1,4096,8,128]{3,2,1,0}, bf16[1,4096,8,128]{3,2,1,0}, bf16[0]{0}, u32[2]{0}, s32[2]{0}, s32[2]{0}, f32[0]{0}, f32[0]{0}, f32[0]{0}, f32[0]{0}, f32[0]{0}, f32[0]{0}}, api_version=API_VERSION_TYPED_FFI, backend_config={attn_heads = 32 : i64, bias_batch = 0 : i64, bias_heads = 0 : i64, bias_type = 0 : i64, deterministic = false, dropout_probability = 0.000000e+00 : f64, input_batch = 1 : i64, is_training = true, kv_max_seqlen = 4096 : i64, mask_type = 3 : i64, max_segments_per_seq = 1 : i64, num_gqa_groups = 8 : i64, q_max_seqlen = 4096 : i64, qk_head_dim = 128 : i64, qkv_layout = 9 : i64, scaling_factor = 1.000000e+00 : f64, v_head_dim = 128 : i64, window_size_left = -1 : i64, window_size_right = -1 : i64}
  %get-tuple-element.1312 = bf16[1,4096,32,128]{3,2,1,0} get-tuple-element(%te_fused_attn_forward_ffi.240), index=0
  %sharding_constraint.2268 = bf16[1,4096,32,128]{3,2,1,0} copy(%get-tuple-element.1312)
  %get-tuple-element.1313 = bf16[32,128,512]{2,1,0} get-tuple-element(%remat2.39), index=7
  %all-gather.397 = bf16[32,128,4096]{2,1,0} all-gather(%get-tuple-element.1313), channel_id=752, replica_groups=[1,8]<=[8], dimensions={2}, use_global_device_ids=true
  %dot.1048 = bf16[1,4096,4096]{2,1,0} dot(%sharding_constraint.2268, %all-gather.397), lhs_contracting_dims={2,3}, rhs_contracting_dims={0,1}
  %sharding_constraint.2269 = bf16[1,4096,4096]{2,1,0} copy(%dot.1048)
  %add.2365 = bf16[1,4096,4096]{2,1,0} add(%sharding_constraint.2261, %sharding_constraint.2269)
  %convert_element_type.2929 = f32[1,4096,4096]{2,1,0} convert(%add.2365)
  %square.125 = f32[1,4096,4096]{2,1,0} multiply(%convert_element_type.2929, %convert_element_type.2929)
  %reduce.883 = f32[1,4096]{1,0} reduce(%square.125, %constant.1360), dimensions={2}, to_apply=%region_899.23330
  %div.1363 = f32[1,4096]{1,0} multiply(%reduce.883, %broadcast.3412)
  %add.2366 = f32[1,4096]{1,0} add(%div.1363, %broadcast.3413)
  %add.2367 = f32[1,4096,1]{2,1,0} reshape(%add.2366)
  %rsqrt.186 = f32[1,4096,1]{2,1,0} rsqrt(%add.2367)
  %mul.8771 = f32[1,4096]{1,0} reshape(%rsqrt.186)
  %mul.8775 = f32[1,4096,4096]{2,1,0} broadcast(%mul.8771), dimensions={0,1}
  %mul.8776 = f32[1,4096,4096]{2,1,0} multiply(%convert_element_type.2929, %mul.8775)
  %convert_element_type.2930 = bf16[1,4096,4096]{2,1,0} convert(%mul.8776)
  %get-tuple-element.1314 = bf16[4096]{0} get-tuple-element(%remat2.39), index=4
  %mul.8777 = bf16[1,4096,4096]{2,1,0} broadcast(%get-tuple-element.1314), dimensions={2}
  %mul.8789 = bf16[1,4096,4096]{2,1,0} multiply(%convert_element_type.2930, %mul.8777)
  %sharding_constraint.2270 = bf16[1,4096,4096]{2,1,0} copy(%mul.8789)
  %get-tuple-element.1315 = bf16[512,8]{1,0} get-tuple-element(%remat2.39), index=0
  %all-gather.398 = bf16[4096,8]{1,0} all-gather(%get-tuple-element.1315), channel_id=753, replica_groups=[1,8]<=[8], dimensions={0}, use_global_device_ids=true
  %dot.1049 = bf16[1,4096,8]{2,1,0} dot(%sharding_constraint.2270, %all-gather.398), lhs_contracting_dims={2}, rhs_contracting_dims={0}
  %sharding_constraint.2271 = bf16[1,4096,8]{2,1,0} copy(%dot.1049)
  %top_k.180 = bf16[4096,8]{1,0} reshape(%sharding_constraint.2271)
  %top_k.181 = (bf16[4096,2]{1,0}, s32[4096,2]{1,0}) custom-call(%top_k.180), custom_call_target="TopK", called_computations={%compare_greater_than.60.23351.clone}
  %get-tuple-element.1316 = bf16[4096,2]{1,0} get-tuple-element(%top_k.181), index=0
  %get-tuple-element.1317 = s32[4096,2]{1,0} get-tuple-element(%top_k.181), index=1
  %add.2368 = s32[4096,2]{1,0} add(%get-tuple-element.1317, %broadcast.3418)
  %sort.124 = (bf16[4096,2]{1,0}, s32[4096,2]{1,0}) sort(%get-tuple-element.1316, %add.2368), dimensions={1}, is_stable=true, to_apply=%compare-value-and-index.60
  %get-tuple-element.1319 = s32[4096,2]{1,0} get-tuple-element(%sort.124), index=1
  %slice.728 = s32[4096,2]{1,0} slice(%get-tuple-element.1319), slice={[0:4096], [0:2]}
  %top_k.182 = s32[1,4096,2]{2,1,0} reshape(%slice.728)
  %lt.239 = pred[1,4096,2]{2,1,0} compare(%top_k.182, %broadcast.3419), direction=LT
  %add.2369 = s32[1,4096,2]{2,1,0} add(%top_k.182, %broadcast.3420)
  %select_n.668 = s32[1,4096,2]{2,1,0} select(%lt.239, %add.2369, %top_k.182)
  %broadcast_in_dim.785 = s32[1,4096,2,1]{3,2,1,0} reshape(%select_n.668)
  %concatenate.627 = s32[1,4096,2,3]{3,2,1,0} concatenate(%add.1356, %iota.2852, %broadcast_in_dim.785), dimensions={3}
  %subtract.210 = s32[1,4096,2,3]{3,2,1,0} subtract(%concatenate.627, %broadcast.3428)
  %scatter.277 = u32[1,4096,8]{2,1,0} scatter(%dynamic-slice.43, %subtract.210, %add.1401), update_window_dims={}, inserted_window_dims={0,1,2}, scatter_dims_to_operand_dims={0,1,2}, index_vector_dim=3, to_apply=%region_900.23387.clone
  %gather.88 = u32[1,4096,2]{2,1,0} gather(%scatter.277, %subtract.210), offset_dims={}, collapsed_slice_dims={0,1,2}, start_index_map={0,1,2}, index_vector_dim=3, slice_sizes={1,1,1}
  %eq.2472 = pred[1,4096,2]{2,1,0} compare(%add.1401, %gather.88), direction=EQ
  %get-tuple-element.1318 = bf16[4096,2]{1,0} get-tuple-element(%sort.124), index=0
  %slice.727 = bf16[4096,2]{1,0} slice(%get-tuple-element.1318), slice={[0:4096], [0:2]}
  %convert_element_type.2931 = f32[4096,2]{1,0} convert(%slice.727)
  %convert_element_type.2932 = f32[1,4096,2]{2,1,0} reshape(%convert_element_type.2931)
  %reduce.884 = f32[4096]{0} reduce(%convert_element_type.2931, %constant.1450), dimensions={1}, to_apply=%region_901.23396
  %sub.400 = f32[1,4096]{1,0} reshape(%reduce.884)
  %sub.401 = f32[1,4096,2]{2,1,0} broadcast(%sub.400), dimensions={0,1}
  %sub.402 = f32[1,4096,2]{2,1,0} subtract(%convert_element_type.2932, %sub.401)
  %exp.247 = f32[1,4096,2]{2,1,0} exponential(%sub.402)
  %reduce.885 = f32[1,4096]{1,0} reduce(%exp.247, %constant.1360), dimensions={2}, to_apply=%region_902.23405
  %div.1364 = f32[1,4096,2]{2,1,0} broadcast(%reduce.885), dimensions={0,1}
  %div.1365 = f32[1,4096,2]{2,1,0} divide(%exp.247, %div.1364)
  %convert_element_type.2933 = bf16[1,4096,2]{2,1,0} convert(%div.1365)
  %select_n.669 = bf16[1,4096,2]{2,1,0} select(%eq.2472, %convert_element_type.2933, %broadcast.3427)
  %scatter.278 = bf16[1,4096,8]{2,1,0} scatter(%broadcast.3379, %subtract.210, %select_n.669), update_window_dims={}, inserted_window_dims={0,1,2}, scatter_dims_to_operand_dims={0,1,2}, index_vector_dim=3, to_apply=%region_903.23414.clone
  %eq.2474 = s32[1,4096,2,8]{3,2,1,0} broadcast(%top_k.182), dimensions={0,1,2}
  %iota.2867 = s32[1,4096,2,8]{3,2,1,0} iota(), iota_dimension=3
  %eq.2475 = pred[1,4096,2,8]{3,2,1,0} compare(%eq.2474, %iota.2867), direction=EQ
  %convert_element_type.2934 = s32[1,4096,2,8]{3,2,1,0} convert(%eq.2475)
  %reshape.13472 = s32[1,8192,8]{2,1,0} reshape(%convert_element_type.2934)
  %sharding_constraint.2272 = s32[1,8192,8]{2,1,0} copy(%reshape.13472)
  %reduce-window.60 = s32[1,8192,8]{2,1,0} reduce-window(%sharding_constraint.2272, %constant.1181), window={size=1x8192x1 pad=0_0x8191_0x0_0}, to_apply=%region_904.23426
  %reshape.13475 = s32[1,4096,2,8]{3,2,1,0} reshape(%reduce-window.60)
  %sharding_constraint.2273 = s32[1,4096,2,8]{3,2,1,0} copy(%reshape.13475)
  %le.178 = pred[1,4096,2,8]{3,2,1,0} compare(%sharding_constraint.2273, %broadcast.3429), direction=LE
  %mul.8790 = s32[1,4096,2,8]{3,2,1,0} select(%le.178, %convert_element_type.2934, %broadcast.3430)
  %reduce.886 = s32[1,4096,8]{2,1,0} reduce(%mul.8790, %constant.1181), dimensions={2}, to_apply=%region_905.23435
  %convert_element_type.2935 = bf16[1,4096,8]{2,1,0} convert(%reduce.886)
  %mul.8791 = bf16[1,4096,8]{2,1,0} multiply(%scatter.278, %convert_element_type.2935)
  %mul.8792 = bf16[1,4096,8,1025]{3,2,1,0} broadcast(%mul.8791), dimensions={0,1,2}
  %mul.8793 = s32[1,8192,8]{2,1,0} multiply(%sharding_constraint.2272, %reduce-window.60)
  %reshape.13476 = s32[1,4096,2,8]{3,2,1,0} reshape(%mul.8793)
  %reduce.887 = s32[1,4096,8]{2,1,0} reduce(%reshape.13476, %constant.1181), dimensions={2}, to_apply=%region_906.23445
  %mul.8794 = s32[1,4096,8]{2,1,0} multiply(%reduce.887, %reduce.886)
  %eq.2476 = s32[1,4096,8,1025]{3,2,1,0} broadcast(%mul.8794), dimensions={0,1,2}
  %iota.2868 = s32[1,4096,8,1025]{3,2,1,0} iota(), iota_dimension=3
  %eq.2477 = pred[1,4096,8,1025]{3,2,1,0} compare(%eq.2476, %iota.2868), direction=EQ
  %convert_element_type.2936 = s32[1,4096,8,1025]{3,2,1,0} convert(%eq.2477)
  %convert_element_type.2937 = bf16[1,4096,8,1025]{3,2,1,0} convert(%convert_element_type.2936)
  %mul.8795 = bf16[1,4096,8,1025]{3,2,1,0} multiply(%mul.8792, %convert_element_type.2937)
  %slice.729 = bf16[1,4096,8,1024]{3,2,1,0} slice(%mul.8795), slice={[0:1], [0:4096], [0:8], [1:1025]}
  %convert_element_type.2938 = pred[1,4096,8,1024]{3,2,1,0} compare(%slice.729, %broadcast.3431), direction=NE
  %sharding_constraint.2274 = pred[1,4096,8,1024]{3,2,1,0} copy(%convert_element_type.2938)
  %dot_general.124 = bf16[1,4096,8,1024]{3,2,1,0} convert(%sharding_constraint.2274)
  %dot.1050 = bf16[1,8,1024,4096]{3,2,1,0} dot(%dot_general.124, %sharding_constraint.2270), lhs_batch_dims={0}, lhs_contracting_dims={1}, rhs_batch_dims={0}, rhs_contracting_dims={1}
  %reshape.13479 = bf16[1,8,1,1024,4096]{4,3,2,1,0} reshape(%dot.1050)
  %all-to-all.176 = bf16[1,8,1,1024,4096]{4,3,2,1,0} all-to-all(%reshape.13479), channel_id=757, replica_groups=[1,8]<=[8], dimensions={1}
  %transpose.297 = bf16[8,1,1,1024,4096]{4,3,2,0,1} transpose(%all-to-all.176), dimensions={1,0,2,3,4}
  %reshape.13480 = bf16[8,1,1024,4096]{3,2,1,0} reshape(%transpose.297)
  %transpose.298 = bf16[1,8,1024,4096]{3,2,0,1} transpose(%reshape.13480), dimensions={1,0,2,3}
  %sharding_constraint.2275 = bf16[1,8,1024,4096]{3,2,0,1} copy(%transpose.298)
  %get-tuple-element.1322 = bf16[1,4096,14336]{2,1,0} get-tuple-element(%remat2.39), index=1
  %sharding_constraint.2276 = bf16[1,4096,14336]{2,1,0} copy(%get-tuple-element.1322)
  %dot.1051 = bf16[1,8,1024,14336]{3,2,1,0} dot(%sharding_constraint.2275, %sharding_constraint.2276), lhs_batch_dims={0}, lhs_contracting_dims={3}, rhs_batch_dims={0}, rhs_contracting_dims={1}
  %sharding_constraint.2277 = bf16[1,8,1024,14336]{3,2,1,0} copy(%dot.1051)
  %neg.302 = bf16[1,8,1024,14336]{3,2,1,0} negate(%sharding_constraint.2277)
  %exp.248 = bf16[1,8,1024,14336]{3,2,1,0} exponential(%neg.302)
  %add.2375 = bf16[1,8,1024,14336]{3,2,1,0} add(%exp.248, %jit_silu_.0)
  %div.1366 = bf16[1,8,1024,14336]{3,2,1,0} divide(%jit_silu_.0, %add.2375)
  %mul.8796 = bf16[1,8,1024,14336]{3,2,1,0} multiply(%sharding_constraint.2277, %div.1366)
  %sharding_constraint.2278 = bf16[1,4096,4096]{2,1,0} copy(%sharding_constraint.2260)
  %sharding_constraint.2279 = bf16[1,4096,8,1024]{3,2,1,0} copy(%slice.729)
  %dot.1052 = bf16[1,4096,8,1024]{3,2,1,0} dot(%sharding_constraint.2278, %sharding_constraint.2279), lhs_batch_dims={0}, lhs_contracting_dims={1}, rhs_batch_dims={0}, rhs_contracting_dims={1}
  %reshape.13483 = bf16[1,4096,8,1,1024]{4,3,2,1,0} reshape(%dot.1052)
  %all-to-all.177 = bf16[1,4096,8,1,1024]{4,3,2,1,0} all-to-all(%reshape.13483), channel_id=758, replica_groups=[1,8]<=[8], dimensions={2}
  %transpose.299 = bf16[8,1,4096,1,1024]{4,3,0,2,1} transpose(%all-to-all.177), dimensions={2,0,1,3,4}
  %reshape.13484 = bf16[8,4096,1,1024]{3,2,1,0} reshape(%transpose.299)
  %transpose.300 = bf16[1,8,1024,4096]{2,0,3,1} transpose(%reshape.13484), dimensions={2,0,3,1}
  %sharding_constraint.2280 = bf16[1,8,1024,4096]{2,0,3,1} copy(%transpose.300)
  %get-tuple-element.1323 = bf16[1,14336,4096]{2,1,0} get-tuple-element(%remat2.39), index=3
  %sharding_constraint.2282 = bf16[1,14336,4096]{2,1,0} copy(%get-tuple-element.1323)
  %dot.1053 = bf16[1,8,1024,14336]{3,2,1,0} dot(%sharding_constraint.2280, %sharding_constraint.2282), lhs_batch_dims={0}, lhs_contracting_dims={3}, rhs_batch_dims={0}, rhs_contracting_dims={2}
  %mul.8797 = bf16[1,8,1024,14336]{3,2,1,0} multiply(%mul.8796, %dot.1053)
  %sharding_constraint.2284 = bf16[1,8,1024,14336]{3,2,1,0} copy(%mul.8797)
  %get-tuple-element.1324 = bf16[1,4096,14336]{2,1,0} get-tuple-element(%remat2.39), index=2
  %sharding_constraint.2285 = bf16[1,4096,14336]{2,1,0} copy(%get-tuple-element.1324)
  %dot.1054 = bf16[1,8,1024,4096]{3,2,1,0} dot(%sharding_constraint.2284, %sharding_constraint.2285), lhs_batch_dims={0}, lhs_contracting_dims={3}, rhs_batch_dims={0}, rhs_contracting_dims={2}
  %dot.1055 = bf16[1,8,1024,14336]{3,2,1,0} dot(%sharding_constraint.2275, %sharding_constraint.2285), lhs_batch_dims={0}, lhs_contracting_dims={3}, rhs_batch_dims={0}, rhs_contracting_dims={1}
  %sharding_constraint.2287 = bf16[1,8,1024,14336]{3,2,1,0} copy(%dot.1055)
  %mul.8798 = bf16[1,8,1024,14336]{3,2,1,0} multiply(%dot.1053, %sharding_constraint.2287)
  %mul.8799 = bf16[1,8,1024,14336]{3,2,1,0} multiply(%mul.8798, %div.1366)
  %mul.8800 = bf16[1,8,1024,14336]{3,2,1,0} multiply(%sharding_constraint.2277, %mul.8798)
  %sub.403 = bf16[1,8,1024,14336]{3,2,1,0} subtract(%jit_silu_.0, %div.1366)
  %mul.8801 = bf16[1,8,1024,14336]{3,2,1,0} multiply(%div.1366, %sub.403)
  %mul.8802 = bf16[1,8,1024,14336]{3,2,1,0} multiply(%mul.8800, %mul.8801)
  %add_any.459 = bf16[1,8,1024,14336]{3,2,1,0} add(%mul.8799, %mul.8802)
  %sharding_constraint.2289 = bf16[1,8,1024,14336]{3,2,1,0} copy(%add_any.459)
  %dot.1056 = bf16[1,8,1024,4096]{3,2,1,0} dot(%sharding_constraint.2289, %sharding_constraint.2276), lhs_batch_dims={0}, lhs_contracting_dims={3}, rhs_batch_dims={0}, rhs_contracting_dims={2}
  %add_any.460 = bf16[1,8,1024,4096]{3,2,1,0} add(%dot.1054, %dot.1056)
  %sharding_constraint.2290 = bf16[1,8,1024,4096]{3,2,1,0} copy(%add_any.460)
  %transpose.301 = bf16[8,1,1024,4096]{3,2,0,1} transpose(%sharding_constraint.2290), dimensions={1,0,2,3}
  %reshape.13488 = bf16[8,1,1,1024,4096]{4,3,2,1,0} reshape(%transpose.301)
  %all-to-all.178 = bf16[8,1,1,1024,4096]{4,3,2,1,0} all-to-all(%reshape.13488), channel_id=759, replica_groups=[1,8]<=[8], dimensions={0}
  %transpose.302 = bf16[1,8,1,1024,4096]{4,3,2,0,1} transpose(%all-to-all.178), dimensions={1,0,2,3,4}
  %reshape.13489 = bf16[1,8,1024,4096]{3,2,1,0} reshape(%transpose.302)
  %dot.1057 = bf16[1,4096,4096]{2,1,0} dot(%dot_general.124, %reshape.13489), lhs_batch_dims={0}, lhs_contracting_dims={2,3}, rhs_batch_dims={0}, rhs_contracting_dims={1,2}
  %reshape.13491 = s32[1,4096,2,1]{3,2,1,0} reshape(%slice.728)
  %ge.28 = pred[1,4096,2,3]{3,2,1,0} compare(%concatenate.627, %broadcast.3629), direction=GE
  %le.180 = pred[1,4096,2,3]{3,2,1,0} compare(%concatenate.627, %le.67), direction=LE
  %and.214 = pred[1,4096,2,3]{3,2,1,0} and(%ge.28, %le.180)
  %reduce.888 = pred[1,4096,2]{2,1,0} reduce(%and.214, %constant.5574), dimensions={3}, to_apply=%region_907.23502
  %mul.8803 = bf16[1,8,1024,14336]{3,2,1,0} multiply(%mul.8796, %sharding_constraint.2287)
  %dot.1058 = bf16[1,8,1024,4096]{3,2,1,0} dot(%mul.8803, %sharding_constraint.2282), lhs_batch_dims={0}, lhs_contracting_dims={3}, rhs_batch_dims={0}, rhs_contracting_dims={1}
  %sharding_constraint.2291 = bf16[1,8,1024,4096]{3,2,1,0} copy(%dot.1058)
  %reshape.13498 = bf16[1,8,1,1024,4096]{4,3,2,1,0} reshape(%sharding_constraint.2291)
  %all-to-all.179 = bf16[1,8,1,1024,4096]{4,3,2,1,0} all-to-all(%reshape.13498), channel_id=760, replica_groups=[1,8]<=[8], dimensions={1}
  %transpose.303 = bf16[8,1,1,1024,4096]{4,3,2,0,1} transpose(%all-to-all.179), dimensions={1,0,2,3,4}
  %reshape.13499 = bf16[8,1,1024,4096]{3,2,1,0} reshape(%transpose.303)
  %dot.1059 = bf16[1,4096,8,1024]{3,2,1,0} dot(%sharding_constraint.2278, %reshape.13499), lhs_batch_dims={0}, lhs_contracting_dims={2}, rhs_batch_dims={1}, rhs_contracting_dims={3}
  %sharding_constraint.2292 = bf16[1,4096,8,1024]{3,2,1,0} copy(%dot.1059)
  %pad.28 = bf16[1,4096,8,1025]{3,2,1,0} pad(%sharding_constraint.2292, %constant.1190), padding=0_0x0_0x0_0x1_0
  %mul.8805 = bf16[1,4096,8,1025]{3,2,1,0} multiply(%pad.28, %convert_element_type.2937)
  %reduce.889 = bf16[1,4096,8]{2,1,0} reduce(%mul.8805, %constant.1190), dimensions={3}, to_apply=%region_908.23514
  %mul.8806 = bf16[1,4096,8]{2,1,0} multiply(%reduce.889, %convert_element_type.2935)
  %gather.89 = bf16[1,4096,2]{2,1,0} gather(%mul.8806, %subtract.210), offset_dims={}, collapsed_slice_dims={0,1,2}, start_index_map={0,1,2}, index_vector_dim=3, slice_sizes={1,1,1}
  %select_n.670 = bf16[1,4096,2]{2,1,0} select(%reduce.888, %gather.89, %broadcast.3427)
  %select_n.671 = bf16[1,4096,2]{2,1,0} select(%eq.2472, %select_n.670, %broadcast.3427)
  %convert_element_type.2939 = f32[1,4096,2]{2,1,0} convert(%select_n.671)
  %div.1368 = f32[1,4096,2]{2,1,0} divide(%convert_element_type.2939, %div.1364)
  %mul.8807 = f32[1,4096]{1,0} multiply(%reduce.885, %reduce.885)
  %div.1369 = f32[1,4096]{1,0} divide(%add.1847, %mul.8807)
  %mul.8808 = f32[1,4096,2]{2,1,0} broadcast(%div.1369), dimensions={0,1}
  %mul.8809 = f32[1,4096,2]{2,1,0} multiply(%convert_element_type.2939, %mul.8808)
  %mul.8810 = f32[1,4096,2]{2,1,0} multiply(%mul.8809, %exp.247)
  %reduce.890 = f32[1,4096]{1,0} reduce(%mul.8810, %constant.1360), dimensions={2}, to_apply=%region_909.23531
  %neg.303 = f32[1,4096]{1,0} negate(%reduce.890)
  %broadcast_in_dim.786 = f32[1,4096,2]{2,1,0} broadcast(%neg.303), dimensions={0,1}
  %add_any.461 = f32[1,4096,2]{2,1,0} add(%div.1368, %broadcast_in_dim.786)
  %mul.8811 = f32[1,4096,2]{2,1,0} multiply(%add_any.461, %exp.247)
  %convert_element_type.2940 = bf16[1,4096,2]{2,1,0} convert(%mul.8811)
  %scatter.279 = bf16[1,4096,8]{2,1,0} scatter(%broadcast.3379, %reshape.13491, %convert_element_type.2940), update_window_dims={}, inserted_window_dims={2}, scatter_dims_to_operand_dims={2}, input_batching_dims={0,1}, scatter_indices_batching_dims={0,1}, index_vector_dim=3, to_apply=%region_910.23541.clone
  %sharding_constraint.2293 = bf16[1,4096,8]{2,1,0} copy(%scatter.279)
  %dot.1060 = bf16[1,4096,4096]{2,1,0} dot(%sharding_constraint.2293, %all-gather.398), lhs_contracting_dims={2}, rhs_contracting_dims={1}
  %add_any.462 = bf16[1,4096,4096]{2,1,0} add(%dot.1057, %dot.1060)
  %sharding_constraint.2294 = bf16[1,4096,4096]{2,1,0} copy(%add_any.462)
  %mul.8813 = bf16[1,4096,4096]{2,1,0} multiply(%sharding_constraint.2294, %mul.8777)
  %convert_element_type.2941 = f32[1,4096,4096]{2,1,0} convert(%mul.8813)
  %mul.8816 = f32[1,4096,4096]{2,1,0} multiply(%convert_element_type.2941, %mul.8775)
  %mul.8817 = f32[1,4096,4096]{2,1,0} multiply(%convert_element_type.2929, %convert_element_type.2941)
  %reduce.891 = f32[1,4096]{1,0} reduce(%mul.8817, %constant.1360), dimensions={2}, to_apply=%region_911.23557
  %reshape.13511 = f32[1,4096,1]{2,1,0} reshape(%reduce.891)
  %div.1370 = f32[1,4096,1]{2,1,0} divide(%rsqrt.186, %add.2367)
  %mul.8818 = f32[1,4096,1]{2,1,0} multiply(%div.1370, %broadcast.3620)
  %mul.8819 = f32[1,4096,1]{2,1,0} multiply(%reshape.13511, %mul.8818)
  %mul.8820 = f32[1,4096,1]{2,1,0} multiply(%mul.8819, %mul.4455)
  %mul.8821 = f32[1,4096]{1,0} reshape(%mul.8820)
  %mul.8822 = f32[1,4096,4096]{2,1,0} broadcast(%mul.8821), dimensions={0,1}
  %mul.8823 = f32[1,4096,4096]{2,1,0} multiply(%convert_element_type.2929, %mul.8822)
  %add_any.463 = f32[1,4096,4096]{2,1,0} add(%mul.8816, %mul.8823)
  %convert_element_type.2942 = bf16[1,4096,4096]{2,1,0} convert(%add_any.463)
  %add_any.464 = bf16[1,4096,4096]{2,1,0} add(%sharding_constraint.2260, %convert_element_type.2942)
  %get-tuple-element.1325 = f32[1,32,4096,1]{3,2,1,0} get-tuple-element(%te_fused_attn_forward_ffi.240), index=1
  %get-tuple-element.1326 = u32[2,4]{1,0} get-tuple-element(%te_fused_attn_forward_ffi.240), index=2
  %sharding_constraint.2295 = u32[2,4]{1,0} copy(%get-tuple-element.1326)
  %sharding_constraint.2296 = bf16[1,4096,4096]{2,1,0} copy(%add_any.464)
  %dot.1061 = bf16[1,4096,32,128]{3,2,1,0} dot(%sharding_constraint.2296, %all-gather.397), lhs_contracting_dims={2}, rhs_contracting_dims={2}
  %sharding_constraint.2297 = bf16[1,4096,32,128]{3,2,1,0} copy(%dot.1061)
  %te_fused_attn_backward_ffi.140 = (bf16[1,4096,32,128]{3,2,1,0}, bf16[1,4096,8,128]{3,2,1,0}, bf16[1,4096,8,128]{3,2,1,0}, bf16[0]{0}, u8[134742064]{0}) custom-call(%sharding_constraint.2264, %sharding_constraint.2266, %sharding_constraint.2267, %constant.1403, %get-tuple-element.1325, /*index=5*/%sharding_constraint.2295, %get-tuple-element.1312, %sharding_constraint.2297, %concatenate.625, %concatenate.626, /*index=10*/%constant.1416, %constant.1416, %constant.1416, %constant.1416, %constant.1416, /*index=15*/%constant.1416), custom_call_target="te_fused_attn_backward_ffi", operand_layout_constraints={bf16[1,4096,32,128]{3,2,1,0}, bf16[1,4096,8,128]{3,2,1,0}, bf16[1,4096,8,128]{3,2,1,0}, bf16[0]{0}, f32[1,32,4096,1]{3,2,1,0}, u32[2,4]{1,0}, bf16[1,4096,32,128]{3,2,1,0}, bf16[1,4096,32,128]{3,2,1,0}, s32[2]{0}, s32[2]{0}, f32[0]{0}, f32[0]{0}, f32[0]{0}, f32[0]{0}, f32[0]{0}, f32[0]{0}}, api_version=API_VERSION_TYPED_FFI, backend_config={attn_heads = 32 : i64, bias_batch = 0 : i64, bias_heads = 0 : i64, bias_type = 0 : i64, deterministic = false, dropout_probability = 0.000000e+00 : f64, input_batch = 1 : i64, is_training = true, kv_max_seqlen = 4096 : i64, mask_type = 3 : i64, max_segments_per_seq = 1 : i64, num_gqa_groups = 8 : i64, q_max_seqlen = 4096 : i64, qk_head_dim = 128 : i64, qkv_layout = 9 : i64, scaling_factor = 1.000000e+00 : f64, v_head_dim = 128 : i64, window_size_left = -1 : i64, window_size_right = -1 : i64}
  %get-tuple-element.1327 = bf16[1,4096,8,128]{3,2,1,0} get-tuple-element(%te_fused_attn_backward_ffi.140), index=2
  %sharding_constraint.2298 = bf16[1,4096,8,128]{3,2,1,0} copy(%get-tuple-element.1327)
  %dot.1062 = bf16[1,4096,4096]{2,1,0} dot(%sharding_constraint.2298, %all-gather.396), lhs_contracting_dims={2,3}, rhs_contracting_dims={1,2}
  %get-tuple-element.1328 = bf16[1,4096,8,128]{3,2,1,0} get-tuple-element(%te_fused_attn_backward_ffi.140), index=1
  %sharding_constraint.2299 = bf16[1,4096,8,128]{3,2,1,0} copy(%get-tuple-element.1328)
  %slice.730 = bf16[1,4096,8,64]{3,2,1,0} slice(%sharding_constraint.2299), slice={[0:1], [0:4096], [0:8], [64:128]}
  %mul.8834 = bf16[1,4096,8,64]{3,2,1,0} multiply(%slice.730, %mul.8761)
  %slice.731 = bf16[1,4096,8,64]{3,2,1,0} slice(%sharding_constraint.2299), slice={[0:1], [0:4096], [0:8], [0:64]}
  %mul.8837 = bf16[1,4096,8,64]{3,2,1,0} multiply(%slice.731, %mul.8758)
  %add_any.465 = bf16[1,4096,8,64]{3,2,1,0} add(%mul.8834, %mul.8837)
  %mul.8840 = bf16[1,4096,8,64]{3,2,1,0} multiply(%slice.730, %mul.8758)
  %neg.304 = bf16[1,4096,8,64]{3,2,1,0} negate(%slice.731)
  %mul.8848 = bf16[1,4096,8,64]{3,2,1,0} multiply(%neg.304, %mul.8761)
  %add_any.466 = bf16[1,4096,8,64]{3,2,1,0} add(%mul.8840, %mul.8848)
  %concatenate.634 = bf16[1,4096,8,128]{3,2,1,0} concatenate(%add_any.465, %add_any.466), dimensions={3}
  %dot.1063 = bf16[1,4096,4096]{2,1,0} dot(%concatenate.634, %all-gather.395), lhs_contracting_dims={2,3}, rhs_contracting_dims={1,2}
  %add_any.467 = bf16[1,4096,4096]{2,1,0} add(%dot.1062, %dot.1063)
  %sharding_constraint.2300 = bf16[1,4096,4096]{2,1,0} copy(%add_any.467)
  %get-tuple-element.1329 = bf16[1,4096,32,128]{3,2,1,0} get-tuple-element(%te_fused_attn_backward_ffi.140), index=0
  %sharding_constraint.2301 = bf16[1,4096,32,128]{3,2,1,0} copy(%get-tuple-element.1329)
  %slice.732 = bf16[1,4096,32,64]{3,2,1,0} slice(%sharding_constraint.2301), slice={[0:1], [0:4096], [0:32], [64:128]}
  %mul.8851 = bf16[1,4096,32,64]{3,2,1,0} multiply(%slice.732, %mul.8736)
  %slice.733 = bf16[1,4096,32,64]{3,2,1,0} slice(%sharding_constraint.2301), slice={[0:1], [0:4096], [0:32], [0:64]}
  %mul.8854 = bf16[1,4096,32,64]{3,2,1,0} multiply(%slice.733, %mul.8733)
  %add_any.468 = bf16[1,4096,32,64]{3,2,1,0} add(%mul.8851, %mul.8854)
  %mul.8857 = bf16[1,4096,32,64]{3,2,1,0} multiply(%slice.732, %mul.8733)
  %neg.305 = bf16[1,4096,32,64]{3,2,1,0} negate(%slice.733)
  %mul.8860 = bf16[1,4096,32,64]{3,2,1,0} multiply(%neg.305, %mul.8736)
  %add_any.469 = bf16[1,4096,32,64]{3,2,1,0} add(%mul.8857, %mul.8860)
  %concatenate.635 = bf16[1,4096,32,128]{3,2,1,0} concatenate(%add_any.468, %add_any.469), dimensions={3}
  %dot.1064 = bf16[1,4096,4096]{2,1,0} dot(%concatenate.635, %all-gather.394), lhs_contracting_dims={2,3}, rhs_contracting_dims={1,2}
  %sharding_constraint.2302 = bf16[1,4096,4096]{2,1,0} copy(%dot.1064)
  %add_any.470 = bf16[1,4096,4096]{2,1,0} add(%sharding_constraint.2300, %sharding_constraint.2302)
  %sharding_constraint.2303 = bf16[1,4096,4096]{2,1,0} copy(%add_any.470)
  %mul.8878 = bf16[1,4096,4096]{2,1,0} multiply(%sharding_constraint.2303, %mul.8728)
  %convert_element_type.2944 = f32[1,4096,4096]{2,1,0} convert(%mul.8878)
  %mul.8881 = f32[1,4096,4096]{2,1,0} multiply(%convert_element_type.2944, %mul.8726)
  %mul.8883 = f32[1,4096,4096]{2,1,0} multiply(%convert_element_type.2914, %convert_element_type.2944)
  %reduce.892 = f32[1,4096]{1,0} reduce(%mul.8883, %constant.1360), dimensions={2}, to_apply=%region_912.23636
  %reshape.13518 = f32[1,4096,1]{2,1,0} reshape(%reduce.892)
  %div.1371 = f32[1,4096,1]{2,1,0} divide(%rsqrt.185, %add.2362)
  %mul.8884 = f32[1,4096,1]{2,1,0} multiply(%div.1371, %broadcast.3620)
  %mul.8885 = f32[1,4096,1]{2,1,0} multiply(%reshape.13518, %mul.8884)
  %mul.8886 = f32[1,4096,1]{2,1,0} multiply(%mul.8885, %mul.4455)
  %mul.8887 = f32[1,4096]{1,0} reshape(%mul.8886)
  %mul.8888 = f32[1,4096,4096]{2,1,0} broadcast(%mul.8887), dimensions={0,1}
  %mul.8889 = f32[1,4096,4096]{2,1,0} multiply(%convert_element_type.2914, %mul.8888)
  %add_any.471 = f32[1,4096,4096]{2,1,0} add(%mul.8881, %mul.8889)
  %convert_element_type.2946 = bf16[1,4096,4096]{2,1,0} convert(%add_any.471)
  %add_any.472 = bf16[1,4096,4096]{2,1,0} add(%add_any.464, %convert_element_type.2946)
  %sharding_constraint.2304 = bf16[1,4096,4096]{2,1,0} copy(%add_any.472)
  %tuple.339 = (bf16[512,8]{1,0}, bf16[1,4096,14336]{2,1,0}, bf16[1,4096,14336]{2,1,0}, bf16[1,14336,4096]{2,1,0}, bf16[4096]{0}, /*index=5*/bf16[4096]{0}, bf16[512,8,128]{2,1,0}, bf16[32,128,512]{2,1,0}, bf16[512,32,128]{2,1,0}, bf16[512,8,128]{2,1,0}, /*index=10*/bf16[1,4096,4096]{2,1,0}, s32[1,4096]{1,0}, s32[1,4096]{1,0}, bf16[1,4096,4096]{2,1,0}) tuple(%param.33, %param.34, %param.35, %param.36, %param.32, /*index=5*/%param.27, %param.29, %param.31, %param.28, %param.30, /*index=10*/%sharding_constraint.210, %param.10, %param.7, %sharding_constraint.2304)
  %remat2.40 = (bf16[512,8]{1,0}, bf16[1,4096,14336]{2,1,0}, bf16[1,4096,14336]{2,1,0}, bf16[1,14336,4096]{2,1,0}, bf16[4096]{0}, /*index=5*/bf16[4096]{0}, bf16[512,8,128]{2,1,0}, bf16[32,128,512]{2,1,0}, bf16[512,32,128]{2,1,0}, bf16[512,8,128]{2,1,0}, /*index=10*/bf16[1,4096,4096]{2,1,0}, s32[1,4096]{1,0}, s32[1,4096]{1,0}, bf16[1,4096,4096]{2,1,0}) opt-barrier(%tuple.339)
  %get-tuple-element.1330 = bf16[1,4096,4096]{2,1,0} get-tuple-element(%remat2.40), index=13
  %sharding_constraint.2305 = bf16[1,4096,4096]{2,1,0} copy(%get-tuple-element.1330)
  %iota.2873 = s32[1,4096,2,1]{3,2,1,0} iota(), iota_dimension=1
  %get-tuple-element.1331 = bf16[1,4096,4096]{2,1,0} get-tuple-element(%remat2.40), index=10
  %sharding_constraint.2307 = bf16[1,4096,4096]{2,1,0} copy(%get-tuple-element.1331)
  %convert_element_type.2947 = f32[1,4096,4096]{2,1,0} convert(%sharding_constraint.2307)
  %square.126 = f32[1,4096,4096]{2,1,0} multiply(%convert_element_type.2947, %convert_element_type.2947)
  %reduce.893 = f32[1,4096]{1,0} reduce(%square.126, %constant.1360), dimensions={2}, to_apply=%region_913.23678
  %div.1372 = f32[1,4096]{1,0} multiply(%reduce.893, %broadcast.3412)
  %add.2381 = f32[1,4096]{1,0} add(%div.1372, %broadcast.3413)
  %add.2382 = f32[1,4096,1]{2,1,0} reshape(%add.2381)
  %rsqrt.187 = f32[1,4096,1]{2,1,0} rsqrt(%add.2382)
  %mul.8890 = f32[1,4096]{1,0} reshape(%rsqrt.187)
  %mul.8891 = f32[1,4096,4096]{2,1,0} broadcast(%mul.8890), dimensions={0,1}
  %mul.8892 = f32[1,4096,4096]{2,1,0} multiply(%convert_element_type.2947, %mul.8891)
  %convert_element_type.2948 = bf16[1,4096,4096]{2,1,0} convert(%mul.8892)
  %get-tuple-element.1332 = bf16[4096]{0} get-tuple-element(%remat2.40), index=5
  %mul.8893 = bf16[1,4096,4096]{2,1,0} broadcast(%get-tuple-element.1332), dimensions={2}
  %mul.8894 = bf16[1,4096,4096]{2,1,0} multiply(%convert_element_type.2948, %mul.8893)
  %sharding_constraint.2309 = bf16[1,4096,4096]{2,1,0} copy(%mul.8894)
  %sharding_constraint.2310 = bf16[1,4096,4096]{2,1,0} copy(%sharding_constraint.2309)
  %get-tuple-element.1333 = bf16[512,32,128]{2,1,0} get-tuple-element(%remat2.40), index=8
  %all-gather.400 = bf16[4096,32,128]{2,1,0} all-gather(%get-tuple-element.1333), channel_id=763, replica_groups=[1,8]<=[8], dimensions={0}, use_global_device_ids=true
  %dot.1065 = bf16[1,4096,32,128]{3,2,1,0} dot(%sharding_constraint.2310, %all-gather.400), lhs_contracting_dims={2}, rhs_contracting_dims={0}
  %slice.734 = bf16[1,4096,32,64]{3,2,1,0} slice(%dot.1065), slice={[0:1], [0:4096], [0:32], [0:64]}
  %get-tuple-element.1334 = s32[1,4096]{1,0} get-tuple-element(%remat2.40), index=12
  %convert_element_type.2949 = f32[1,4096]{1,0} convert(%get-tuple-element.1334)
  %div.1377 = f32[1,4096,1,64]{3,2,1,0} broadcast(%convert_element_type.2949), dimensions={0,1}
  %div.1381 = f32[1,4096,1,64]{3,2,1,0} divide(%div.1377, %div.402)
  %cos.123 = f32[1,4096,1,64]{3,2,1,0} cosine(%div.1381)
  %convert_element_type.2951 = bf16[1,4096,1,64]{3,2,1,0} convert(%cos.123)
  %mul.8896 = bf16[1,4096,64]{2,1,0} reshape(%convert_element_type.2951)
  %mul.8897 = bf16[1,4096,32,64]{3,2,1,0} broadcast(%mul.8896), dimensions={0,1,3}
  %mul.8898 = bf16[1,4096,32,64]{3,2,1,0} multiply(%slice.734, %mul.8897)
  %slice.735 = bf16[1,4096,32,64]{3,2,1,0} slice(%dot.1065), slice={[0:1], [0:4096], [0:32], [64:128]}
  %sin.122 = f32[1,4096,1,64]{3,2,1,0} sine(%div.1381)
  %convert_element_type.2952 = bf16[1,4096,1,64]{3,2,1,0} convert(%sin.122)
  %mul.8899 = bf16[1,4096,64]{2,1,0} reshape(%convert_element_type.2952)
  %mul.8900 = bf16[1,4096,32,64]{3,2,1,0} broadcast(%mul.8899), dimensions={0,1,3}
  %mul.8909 = bf16[1,4096,32,64]{3,2,1,0} multiply(%slice.735, %mul.8900)
  %sub.404 = bf16[1,4096,32,64]{3,2,1,0} subtract(%mul.8898, %mul.8909)
  %mul.8920 = bf16[1,4096,32,64]{3,2,1,0} multiply(%slice.735, %mul.8897)
  %mul.8923 = bf16[1,4096,32,64]{3,2,1,0} multiply(%slice.734, %mul.8900)
  %add.2383 = bf16[1,4096,32,64]{3,2,1,0} add(%mul.8920, %mul.8923)
  %concatenate.636 = bf16[1,4096,32,128]{3,2,1,0} concatenate(%sub.404, %add.2383), dimensions={3}
  %sharding_constraint.2311 = bf16[1,4096,32,128]{3,2,1,0} copy(%concatenate.636)
  %get-tuple-element.1335 = bf16[512,8,128]{2,1,0} get-tuple-element(%remat2.40), index=6
  %all-gather.401 = bf16[4096,8,128]{2,1,0} all-gather(%get-tuple-element.1335), channel_id=764, replica_groups=[1,8]<=[8], dimensions={0}, use_global_device_ids=true
  %dot.1066 = bf16[1,4096,8,128]{3,2,1,0} dot(%sharding_constraint.2310, %all-gather.401), lhs_contracting_dims={2}, rhs_contracting_dims={0}
  %slice.736 = bf16[1,4096,8,64]{3,2,1,0} slice(%dot.1066), slice={[0:1], [0:4096], [0:8], [0:64]}
  %mul.8926 = bf16[1,4096,8,64]{3,2,1,0} broadcast(%mul.8896), dimensions={0,1,3}
  %mul.8927 = bf16[1,4096,8,64]{3,2,1,0} multiply(%slice.736, %mul.8926)
  %slice.737 = bf16[1,4096,8,64]{3,2,1,0} slice(%dot.1066), slice={[0:1], [0:4096], [0:8], [64:128]}
  %mul.8930 = bf16[1,4096,8,64]{3,2,1,0} broadcast(%mul.8899), dimensions={0,1,3}
  %mul.8931 = bf16[1,4096,8,64]{3,2,1,0} multiply(%slice.737, %mul.8930)
  %sub.405 = bf16[1,4096,8,64]{3,2,1,0} subtract(%mul.8927, %mul.8931)
  %mul.8934 = bf16[1,4096,8,64]{3,2,1,0} multiply(%slice.737, %mul.8926)
  %mul.8940 = bf16[1,4096,8,64]{3,2,1,0} multiply(%slice.736, %mul.8930)
  %add.2384 = bf16[1,4096,8,64]{3,2,1,0} add(%mul.8934, %mul.8940)
  %concatenate.637 = bf16[1,4096,8,128]{3,2,1,0} concatenate(%sub.405, %add.2384), dimensions={3}
  %sharding_constraint.2313 = bf16[1,4096,8,128]{3,2,1,0} copy(%concatenate.637)
  %get-tuple-element.1336 = bf16[512,8,128]{2,1,0} get-tuple-element(%remat2.40), index=9
  %all-gather.402 = bf16[4096,8,128]{2,1,0} all-gather(%get-tuple-element.1336), channel_id=765, replica_groups=[1,8]<=[8], dimensions={0}, use_global_device_ids=true
  %dot.1067 = bf16[1,4096,8,128]{3,2,1,0} dot(%sharding_constraint.2310, %all-gather.402), lhs_contracting_dims={2}, rhs_contracting_dims={0}
  %sharding_constraint.2314 = bf16[1,4096,8,128]{3,2,1,0} copy(%dot.1067)
  %get-tuple-element.1337 = s32[1,4096]{1,0} get-tuple-element(%remat2.40), index=11
  %eq.2479 = s32[1,4096,4096]{2,1,0} broadcast(%get-tuple-element.1337), dimensions={0,1}
  %eq.2480 = s32[1,4096,4096]{2,1,0} broadcast(%get-tuple-element.1337), dimensions={0,2}
  %eq.2481 = pred[1,4096,4096]{2,1,0} compare(%eq.2479, %eq.2480), direction=EQ
  %and.216 = pred[1,4096,4096]{2,1,0} and(%eq.2481, %and.64)
  %select_n.674 = f32[1,4096,4096]{2,1,0} select(%and.216, %broadcast_in_dim.516, %broadcast_in_dim.517)
  %ne.127 = pred[1,4096,4096]{2,1,0} compare(%select_n.674, %broadcast_in_dim.516), direction=NE
  %not.125 = pred[1,4096,4096]{2,1,0} not(%ne.127)
  %convert_element_type.2958 = s32[1,4096,4096]{2,1,0} convert(%not.125)
  %reduce.894 = s32[1,4096]{1,0} reduce(%convert_element_type.2958, %constant.1181), dimensions={1}, to_apply=%region_914.23774
  %reduce_sum.5761 = s32[1,1,1,4096]{3,2,1,0} reshape(%reduce.894)
  %slice.738 = s32[1,1,1,1]{3,2,1,0} slice(%reduce_sum.5761), slice={[0:1], [0:1], [0:1], [0:1]}
  %squeeze.61 = s32[1,1]{1,0} reshape(%slice.738)
  %reshape.13525 = s32[1]{0} reshape(%squeeze.61)
  %lt.242 = pred[1]{0} compare(%reshape.13525, %constant.1418), direction=LT
  %select_n.675 = s32[1]{0} select(%lt.242, %broadcast_in_dim.518, %reshape.13525)
  %concatenate.638 = s32[2]{0} concatenate(%constant.1418, %select_n.675), dimensions={0}
  %reduce.895 = s32[1,4096]{1,0} reduce(%convert_element_type.2958, %constant.1181), dimensions={2}, to_apply=%region_915.23783
  %reduce_sum.5762 = s32[1,1,1,4096]{3,2,1,0} reshape(%reduce.895)
  %reduce.896 = s32[1,1]{1,0} reduce(%reduce_sum.5762, %constant.1415), dimensions={3,2}, to_apply=%region_916.23789
  %reshape.13526 = s32[1]{0} reshape(%reduce.896)
  %lt.243 = pred[1]{0} compare(%reshape.13526, %constant.1418), direction=LT
  %select_n.676 = s32[1]{0} select(%lt.243, %broadcast_in_dim.518, %reshape.13526)
  %concatenate.639 = s32[2]{0} concatenate(%constant.1418, %select_n.676), dimensions={0}
  %te_fused_attn_forward_ffi.244 = (bf16[1,4096,32,128]{3,2,1,0}, f32[1,32,4096,1]{3,2,1,0}, u32[2,4]{1,0}, u8[48]{0}) custom-call(%sharding_constraint.2311, %sharding_constraint.2313, %sharding_constraint.2314, %constant.1403, %dynamic-slice.38, /*index=5*/%concatenate.638, %concatenate.639, %constant.1416, %constant.1416, %constant.1416, /*index=10*/%constant.1416, %constant.1416, %constant.1416), custom_call_target="te_fused_attn_forward_ffi", operand_layout_constraints={bf16[1,4096,32,128]{3,2,1,0}, bf16[1,4096,8,128]{3,2,1,0}, bf16[1,4096,8,128]{3,2,1,0}, bf16[0]{0}, u32[2]{0}, s32[2]{0}, s32[2]{0}, f32[0]{0}, f32[0]{0}, f32[0]{0}, f32[0]{0}, f32[0]{0}, f32[0]{0}}, api_version=API_VERSION_TYPED_FFI, backend_config={attn_heads = 32 : i64, bias_batch = 0 : i64, bias_heads = 0 : i64, bias_type = 0 : i64, deterministic = false, dropout_probability = 0.000000e+00 : f64, input_batch = 1 : i64, is_training = true, kv_max_seqlen = 4096 : i64, mask_type = 3 : i64, max_segments_per_seq = 1 : i64, num_gqa_groups = 8 : i64, q_max_seqlen = 4096 : i64, qk_head_dim = 128 : i64, qkv_layout = 9 : i64, scaling_factor = 1.000000e+00 : f64, v_head_dim = 128 : i64, window_size_left = -1 : i64, window_size_right = -1 : i64}
  %get-tuple-element.1338 = bf16[1,4096,32,128]{3,2,1,0} get-tuple-element(%te_fused_attn_forward_ffi.244), index=0
  %sharding_constraint.2315 = bf16[1,4096,32,128]{3,2,1,0} copy(%get-tuple-element.1338)
  %get-tuple-element.1339 = bf16[32,128,512]{2,1,0} get-tuple-element(%remat2.40), index=7
  %all-gather.403 = bf16[32,128,4096]{2,1,0} all-gather(%get-tuple-element.1339), channel_id=766, replica_groups=[1,8]<=[8], dimensions={2}, use_global_device_ids=true
  %dot.1068 = bf16[1,4096,4096]{2,1,0} dot(%sharding_constraint.2315, %all-gather.403), lhs_contracting_dims={2,3}, rhs_contracting_dims={0,1}
  %sharding_constraint.2316 = bf16[1,4096,4096]{2,1,0} copy(%dot.1068)
  %add.2385 = bf16[1,4096,4096]{2,1,0} add(%sharding_constraint.2307, %sharding_constraint.2316)
  %convert_element_type.2960 = f32[1,4096,4096]{2,1,0} convert(%add.2385)
  %square.127 = f32[1,4096,4096]{2,1,0} multiply(%convert_element_type.2960, %convert_element_type.2960)
  %reduce.897 = f32[1,4096]{1,0} reduce(%square.127, %constant.1360), dimensions={2}, to_apply=%region_917.23804
  %div.1386 = f32[1,4096]{1,0} multiply(%reduce.897, %broadcast.3412)
  %add.2386 = f32[1,4096]{1,0} add(%div.1386, %broadcast.3413)
  %add.2387 = f32[1,4096,1]{2,1,0} reshape(%add.2386)
  %rsqrt.188 = f32[1,4096,1]{2,1,0} rsqrt(%add.2387)
  %mul.8941 = f32[1,4096]{1,0} reshape(%rsqrt.188)
  %mul.8942 = f32[1,4096,4096]{2,1,0} broadcast(%mul.8941), dimensions={0,1}
  %mul.8943 = f32[1,4096,4096]{2,1,0} multiply(%convert_element_type.2960, %mul.8942)
  %convert_element_type.2961 = bf16[1,4096,4096]{2,1,0} convert(%mul.8943)
  %get-tuple-element.1340 = bf16[4096]{0} get-tuple-element(%remat2.40), index=4
  %mul.8944 = bf16[1,4096,4096]{2,1,0} broadcast(%get-tuple-element.1340), dimensions={2}
  %mul.8946 = bf16[1,4096,4096]{2,1,0} multiply(%convert_element_type.2961, %mul.8944)
  %sharding_constraint.2317 = bf16[1,4096,4096]{2,1,0} copy(%mul.8946)
  %get-tuple-element.1341 = bf16[512,8]{1,0} get-tuple-element(%remat2.40), index=0
  %all-gather.404 = bf16[4096,8]{1,0} all-gather(%get-tuple-element.1341), channel_id=767, replica_groups=[1,8]<=[8], dimensions={0}, use_global_device_ids=true
  %dot.1069 = bf16[1,4096,8]{2,1,0} dot(%sharding_constraint.2317, %all-gather.404), lhs_contracting_dims={2}, rhs_contracting_dims={0}
  %sharding_constraint.2318 = bf16[1,4096,8]{2,1,0} copy(%dot.1069)
  %top_k.183 = bf16[4096,8]{1,0} reshape(%sharding_constraint.2318)
  %top_k.184 = (bf16[4096,2]{1,0}, s32[4096,2]{1,0}) custom-call(%top_k.183), custom_call_target="TopK", called_computations={%compare_greater_than.61.23825.clone}
  %get-tuple-element.1342 = bf16[4096,2]{1,0} get-tuple-element(%top_k.184), index=0
  %get-tuple-element.1343 = s32[4096,2]{1,0} get-tuple-element(%top_k.184), index=1
  %add.2388 = s32[4096,2]{1,0} add(%get-tuple-element.1343, %broadcast.3418)
  %sort.125 = (bf16[4096,2]{1,0}, s32[4096,2]{1,0}) sort(%get-tuple-element.1342, %add.2388), dimensions={1}, is_stable=true, to_apply=%compare-value-and-index.61
  %get-tuple-element.1345 = s32[4096,2]{1,0} get-tuple-element(%sort.125), index=1
  %slice.740 = s32[4096,2]{1,0} slice(%get-tuple-element.1345), slice={[0:4096], [0:2]}
  %top_k.185 = s32[1,4096,2]{2,1,0} reshape(%slice.740)
  %lt.244 = pred[1,4096,2]{2,1,0} compare(%top_k.185, %broadcast.3419), direction=LT
  %add.2389 = s32[1,4096,2]{2,1,0} add(%top_k.185, %broadcast.3420)
  %select_n.677 = s32[1,4096,2]{2,1,0} select(%lt.244, %add.2389, %top_k.185)
  %broadcast_in_dim.791 = s32[1,4096,2,1]{3,2,1,0} reshape(%select_n.677)
  %concatenate.640 = s32[1,4096,2,3]{3,2,1,0} concatenate(%add.1356, %iota.2873, %broadcast_in_dim.791), dimensions={3}
  %subtract.214 = s32[1,4096,2,3]{3,2,1,0} subtract(%concatenate.640, %broadcast.3428)
  %scatter.280 = u32[1,4096,8]{2,1,0} scatter(%dynamic-slice.43, %subtract.214, %add.1401), update_window_dims={}, inserted_window_dims={0,1,2}, scatter_dims_to_operand_dims={0,1,2}, index_vector_dim=3, to_apply=%region_918.23861.clone
  %gather.90 = u32[1,4096,2]{2,1,0} gather(%scatter.280, %subtract.214), offset_dims={}, collapsed_slice_dims={0,1,2}, start_index_map={0,1,2}, index_vector_dim=3, slice_sizes={1,1,1}
  %eq.2482 = pred[1,4096,2]{2,1,0} compare(%add.1401, %gather.90), direction=EQ
  %get-tuple-element.1344 = bf16[4096,2]{1,0} get-tuple-element(%sort.125), index=0
  %slice.739 = bf16[4096,2]{1,0} slice(%get-tuple-element.1344), slice={[0:4096], [0:2]}
  %convert_element_type.2962 = f32[4096,2]{1,0} convert(%slice.739)
  %convert_element_type.2963 = f32[1,4096,2]{2,1,0} reshape(%convert_element_type.2962)
  %reduce.898 = f32[4096]{0} reduce(%convert_element_type.2962, %constant.1450), dimensions={1}, to_apply=%region_919.23870
  %sub.406 = f32[1,4096]{1,0} reshape(%reduce.898)
  %sub.407 = f32[1,4096,2]{2,1,0} broadcast(%sub.406), dimensions={0,1}
  %sub.408 = f32[1,4096,2]{2,1,0} subtract(%convert_element_type.2963, %sub.407)
  %exp.249 = f32[1,4096,2]{2,1,0} exponential(%sub.408)
  %reduce.899 = f32[1,4096]{1,0} reduce(%exp.249, %constant.1360), dimensions={2}, to_apply=%region_920.23879
  %div.1387 = f32[1,4096,2]{2,1,0} broadcast(%reduce.899), dimensions={0,1}
  %div.1388 = f32[1,4096,2]{2,1,0} divide(%exp.249, %div.1387)
  %convert_element_type.2964 = bf16[1,4096,2]{2,1,0} convert(%div.1388)
  %select_n.678 = bf16[1,4096,2]{2,1,0} select(%eq.2482, %convert_element_type.2964, %broadcast.3427)
  %scatter.281 = bf16[1,4096,8]{2,1,0} scatter(%broadcast.3379, %subtract.214, %select_n.678), update_window_dims={}, inserted_window_dims={0,1,2}, scatter_dims_to_operand_dims={0,1,2}, index_vector_dim=3, to_apply=%region_921.23888.clone
  %eq.2484 = s32[1,4096,2,8]{3,2,1,0} broadcast(%top_k.185), dimensions={0,1,2}
  %iota.2884 = s32[1,4096,2,8]{3,2,1,0} iota(), iota_dimension=3
  %eq.2485 = pred[1,4096,2,8]{3,2,1,0} compare(%eq.2484, %iota.2884), direction=EQ
  %convert_element_type.2965 = s32[1,4096,2,8]{3,2,1,0} convert(%eq.2485)
  %reshape.13559 = s32[1,8192,8]{2,1,0} reshape(%convert_element_type.2965)
  %sharding_constraint.2319 = s32[1,8192,8]{2,1,0} copy(%reshape.13559)
  %reduce-window.61 = s32[1,8192,8]{2,1,0} reduce-window(%sharding_constraint.2319, %constant.1181), window={size=1x8192x1 pad=0_0x8191_0x0_0}, to_apply=%region_922.23900
  %reshape.13561 = s32[1,4096,2,8]{3,2,1,0} reshape(%reduce-window.61)
  %sharding_constraint.2320 = s32[1,4096,2,8]{3,2,1,0} copy(%reshape.13561)
  %le.182 = pred[1,4096,2,8]{3,2,1,0} compare(%sharding_constraint.2320, %broadcast.3429), direction=LE
  %mul.8947 = s32[1,4096,2,8]{3,2,1,0} select(%le.182, %convert_element_type.2965, %broadcast.3430)
  %reduce.900 = s32[1,4096,8]{2,1,0} reduce(%mul.8947, %constant.1181), dimensions={2}, to_apply=%region_923.23909
  %convert_element_type.2966 = bf16[1,4096,8]{2,1,0} convert(%reduce.900)
  %mul.8948 = bf16[1,4096,8]{2,1,0} multiply(%scatter.281, %convert_element_type.2966)
  %mul.8949 = bf16[1,4096,8,1025]{3,2,1,0} broadcast(%mul.8948), dimensions={0,1,2}
  %mul.8950 = s32[1,8192,8]{2,1,0} multiply(%sharding_constraint.2319, %reduce-window.61)
  %reshape.13562 = s32[1,4096,2,8]{3,2,1,0} reshape(%mul.8950)
  %reduce.901 = s32[1,4096,8]{2,1,0} reduce(%reshape.13562, %constant.1181), dimensions={2}, to_apply=%region_924.23919
  %mul.8952 = s32[1,4096,8]{2,1,0} multiply(%reduce.901, %reduce.900)
  %eq.2486 = s32[1,4096,8,1025]{3,2,1,0} broadcast(%mul.8952), dimensions={0,1,2}
  %iota.2885 = s32[1,4096,8,1025]{3,2,1,0} iota(), iota_dimension=3
  %eq.2487 = pred[1,4096,8,1025]{3,2,1,0} compare(%eq.2486, %iota.2885), direction=EQ
  %convert_element_type.2967 = s32[1,4096,8,1025]{3,2,1,0} convert(%eq.2487)
  %convert_element_type.2968 = bf16[1,4096,8,1025]{3,2,1,0} convert(%convert_element_type.2967)
  %mul.8953 = bf16[1,4096,8,1025]{3,2,1,0} multiply(%mul.8949, %convert_element_type.2968)
  %slice.741 = bf16[1,4096,8,1024]{3,2,1,0} slice(%mul.8953), slice={[0:1], [0:4096], [0:8], [1:1025]}
  %convert_element_type.2969 = pred[1,4096,8,1024]{3,2,1,0} compare(%slice.741, %broadcast.3431), direction=NE
  %sharding_constraint.2321 = pred[1,4096,8,1024]{3,2,1,0} copy(%convert_element_type.2969)
  %dot_general.126 = bf16[1,4096,8,1024]{3,2,1,0} convert(%sharding_constraint.2321)
  %dot.1070 = bf16[1,8,1024,4096]{3,2,1,0} dot(%dot_general.126, %sharding_constraint.2317), lhs_batch_dims={0}, lhs_contracting_dims={1}, rhs_batch_dims={0}, rhs_contracting_dims={1}
  %reshape.13565 = bf16[1,8,1,1024,4096]{4,3,2,1,0} reshape(%dot.1070)
  %all-to-all.180 = bf16[1,8,1,1024,4096]{4,3,2,1,0} all-to-all(%reshape.13565), channel_id=771, replica_groups=[1,8]<=[8], dimensions={1}
  %transpose.304 = bf16[8,1,1,1024,4096]{4,3,2,0,1} transpose(%all-to-all.180), dimensions={1,0,2,3,4}
  %reshape.13566 = bf16[8,1,1024,4096]{3,2,1,0} reshape(%transpose.304)
  %transpose.305 = bf16[1,8,1024,4096]{3,2,0,1} transpose(%reshape.13566), dimensions={1,0,2,3}
  %sharding_constraint.2322 = bf16[1,8,1024,4096]{3,2,0,1} copy(%transpose.305)
  %get-tuple-element.1348 = bf16[1,4096,14336]{2,1,0} get-tuple-element(%remat2.40), index=1
  %sharding_constraint.2323 = bf16[1,4096,14336]{2,1,0} copy(%get-tuple-element.1348)
  %dot.1071 = bf16[1,8,1024,14336]{3,2,1,0} dot(%sharding_constraint.2322, %sharding_constraint.2323), lhs_batch_dims={0}, lhs_contracting_dims={3}, rhs_batch_dims={0}, rhs_contracting_dims={1}
  %sharding_constraint.2324 = bf16[1,8,1024,14336]{3,2,1,0} copy(%dot.1071)
  %neg.306 = bf16[1,8,1024,14336]{3,2,1,0} negate(%sharding_constraint.2324)
  %exp.250 = bf16[1,8,1024,14336]{3,2,1,0} exponential(%neg.306)
  %add.2394 = bf16[1,8,1024,14336]{3,2,1,0} add(%exp.250, %jit_silu_.0)
  %div.1389 = bf16[1,8,1024,14336]{3,2,1,0} divide(%jit_silu_.0, %add.2394)
  %mul.8954 = bf16[1,8,1024,14336]{3,2,1,0} multiply(%sharding_constraint.2324, %div.1389)
  %sharding_constraint.2326 = bf16[1,4096,4096]{2,1,0} copy(%sharding_constraint.2305)
  %sharding_constraint.2328 = bf16[1,4096,8,1024]{3,2,1,0} copy(%slice.741)
  %dot.1072 = bf16[1,4096,8,1024]{3,2,1,0} dot(%sharding_constraint.2326, %sharding_constraint.2328), lhs_batch_dims={0}, lhs_contracting_dims={1}, rhs_batch_dims={0}, rhs_contracting_dims={1}
  %reshape.13569 = bf16[1,4096,8,1,1024]{4,3,2,1,0} reshape(%dot.1072)
  %all-to-all.181 = bf16[1,4096,8,1,1024]{4,3,2,1,0} all-to-all(%reshape.13569), channel_id=772, replica_groups=[1,8]<=[8], dimensions={2}
  %transpose.306 = bf16[8,1,4096,1,1024]{4,3,0,2,1} transpose(%all-to-all.181), dimensions={2,0,1,3,4}
  %reshape.13570 = bf16[8,4096,1,1024]{3,2,1,0} reshape(%transpose.306)
  %transpose.307 = bf16[1,8,1024,4096]{2,0,3,1} transpose(%reshape.13570), dimensions={2,0,3,1}
  %sharding_constraint.2329 = bf16[1,8,1024,4096]{2,0,3,1} copy(%transpose.307)
  %get-tuple-element.1349 = bf16[1,14336,4096]{2,1,0} get-tuple-element(%remat2.40), index=3
  %sharding_constraint.2330 = bf16[1,14336,4096]{2,1,0} copy(%get-tuple-element.1349)
  %dot.1073 = bf16[1,8,1024,14336]{3,2,1,0} dot(%sharding_constraint.2329, %sharding_constraint.2330), lhs_batch_dims={0}, lhs_contracting_dims={3}, rhs_batch_dims={0}, rhs_contracting_dims={2}
  %mul.8955 = bf16[1,8,1024,14336]{3,2,1,0} multiply(%mul.8954, %dot.1073)
  %sharding_constraint.2331 = bf16[1,8,1024,14336]{3,2,1,0} copy(%mul.8955)
  %get-tuple-element.1350 = bf16[1,4096,14336]{2,1,0} get-tuple-element(%remat2.40), index=2
  %sharding_constraint.2332 = bf16[1,4096,14336]{2,1,0} copy(%get-tuple-element.1350)
  %dot.1074 = bf16[1,8,1024,4096]{3,2,1,0} dot(%sharding_constraint.2331, %sharding_constraint.2332), lhs_batch_dims={0}, lhs_contracting_dims={3}, rhs_batch_dims={0}, rhs_contracting_dims={2}
  %dot.1075 = bf16[1,8,1024,14336]{3,2,1,0} dot(%sharding_constraint.2322, %sharding_constraint.2332), lhs_batch_dims={0}, lhs_contracting_dims={3}, rhs_batch_dims={0}, rhs_contracting_dims={1}
  %sharding_constraint.2333 = bf16[1,8,1024,14336]{3,2,1,0} copy(%dot.1075)
  %mul.8956 = bf16[1,8,1024,14336]{3,2,1,0} multiply(%dot.1073, %sharding_constraint.2333)
  %mul.8957 = bf16[1,8,1024,14336]{3,2,1,0} multiply(%mul.8956, %div.1389)
  %mul.8958 = bf16[1,8,1024,14336]{3,2,1,0} multiply(%sharding_constraint.2324, %mul.8956)
  %sub.409 = bf16[1,8,1024,14336]{3,2,1,0} subtract(%jit_silu_.0, %div.1389)
  %mul.8959 = bf16[1,8,1024,14336]{3,2,1,0} multiply(%div.1389, %sub.409)
  %mul.8960 = bf16[1,8,1024,14336]{3,2,1,0} multiply(%mul.8958, %mul.8959)
  %add_any.473 = bf16[1,8,1024,14336]{3,2,1,0} add(%mul.8957, %mul.8960)
  %sharding_constraint.2334 = bf16[1,8,1024,14336]{3,2,1,0} copy(%add_any.473)
  %dot.1076 = bf16[1,8,1024,4096]{3,2,1,0} dot(%sharding_constraint.2334, %sharding_constraint.2323), lhs_batch_dims={0}, lhs_contracting_dims={3}, rhs_batch_dims={0}, rhs_contracting_dims={2}
  %add_any.474 = bf16[1,8,1024,4096]{3,2,1,0} add(%dot.1074, %dot.1076)
  %sharding_constraint.2335 = bf16[1,8,1024,4096]{3,2,1,0} copy(%add_any.474)
  %transpose.308 = bf16[8,1,1024,4096]{3,2,0,1} transpose(%sharding_constraint.2335), dimensions={1,0,2,3}
  %reshape.13573 = bf16[8,1,1,1024,4096]{4,3,2,1,0} reshape(%transpose.308)
  %all-to-all.182 = bf16[8,1,1,1024,4096]{4,3,2,1,0} all-to-all(%reshape.13573), channel_id=773, replica_groups=[1,8]<=[8], dimensions={0}
  %transpose.309 = bf16[1,8,1,1024,4096]{4,3,2,0,1} transpose(%all-to-all.182), dimensions={1,0,2,3,4}
  %reshape.13574 = bf16[1,8,1024,4096]{3,2,1,0} reshape(%transpose.309)
  %dot.1077 = bf16[1,4096,4096]{2,1,0} dot(%dot_general.126, %reshape.13574), lhs_batch_dims={0}, lhs_contracting_dims={2,3}, rhs_batch_dims={0}, rhs_contracting_dims={1,2}
  %reshape.13576 = s32[1,4096,2,1]{3,2,1,0} reshape(%slice.740)
  %ge.29 = pred[1,4096,2,3]{3,2,1,0} compare(%concatenate.640, %broadcast.3629), direction=GE
  %le.184 = pred[1,4096,2,3]{3,2,1,0} compare(%concatenate.640, %le.67), direction=LE
  %and.217 = pred[1,4096,2,3]{3,2,1,0} and(%ge.29, %le.184)
  %reduce.902 = pred[1,4096,2]{2,1,0} reduce(%and.217, %constant.5574), dimensions={3}, to_apply=%region_925.23976
  %mul.8961 = bf16[1,8,1024,14336]{3,2,1,0} multiply(%mul.8954, %sharding_constraint.2333)
  %dot.1078 = bf16[1,8,1024,4096]{3,2,1,0} dot(%mul.8961, %sharding_constraint.2330), lhs_batch_dims={0}, lhs_contracting_dims={3}, rhs_batch_dims={0}, rhs_contracting_dims={1}
  %sharding_constraint.2336 = bf16[1,8,1024,4096]{3,2,1,0} copy(%dot.1078)
  %reshape.13583 = bf16[1,8,1,1024,4096]{4,3,2,1,0} reshape(%sharding_constraint.2336)
  %all-to-all.183 = bf16[1,8,1,1024,4096]{4,3,2,1,0} all-to-all(%reshape.13583), channel_id=774, replica_groups=[1,8]<=[8], dimensions={1}
  %transpose.310 = bf16[8,1,1,1024,4096]{4,3,2,0,1} transpose(%all-to-all.183), dimensions={1,0,2,3,4}
  %reshape.13584 = bf16[8,1,1024,4096]{3,2,1,0} reshape(%transpose.310)
  %dot.1079 = bf16[1,4096,8,1024]{3,2,1,0} dot(%sharding_constraint.2326, %reshape.13584), lhs_batch_dims={0}, lhs_contracting_dims={2}, rhs_batch_dims={1}, rhs_contracting_dims={3}
  %sharding_constraint.2337 = bf16[1,4096,8,1024]{3,2,1,0} copy(%dot.1079)
  %pad.29 = bf16[1,4096,8,1025]{3,2,1,0} pad(%sharding_constraint.2337, %constant.1190), padding=0_0x0_0x0_0x1_0
  %mul.8962 = bf16[1,4096,8,1025]{3,2,1,0} multiply(%pad.29, %convert_element_type.2968)
  %reduce.903 = bf16[1,4096,8]{2,1,0} reduce(%mul.8962, %constant.1190), dimensions={3}, to_apply=%region_926.23988
  %mul.8963 = bf16[1,4096,8]{2,1,0} multiply(%reduce.903, %convert_element_type.2966)
  %gather.91 = bf16[1,4096,2]{2,1,0} gather(%mul.8963, %subtract.214), offset_dims={}, collapsed_slice_dims={0,1,2}, start_index_map={0,1,2}, index_vector_dim=3, slice_sizes={1,1,1}
  %select_n.679 = bf16[1,4096,2]{2,1,0} select(%reduce.902, %gather.91, %broadcast.3427)
  %select_n.680 = bf16[1,4096,2]{2,1,0} select(%eq.2482, %select_n.679, %broadcast.3427)
  %convert_element_type.2970 = f32[1,4096,2]{2,1,0} convert(%select_n.680)
  %div.1391 = f32[1,4096,2]{2,1,0} divide(%convert_element_type.2970, %div.1387)
  %mul.8964 = f32[1,4096]{1,0} multiply(%reduce.899, %reduce.899)
  %div.1392 = f32[1,4096]{1,0} divide(%add.1847, %mul.8964)
  %mul.8965 = f32[1,4096,2]{2,1,0} broadcast(%div.1392), dimensions={0,1}
  %mul.8966 = f32[1,4096,2]{2,1,0} multiply(%convert_element_type.2970, %mul.8965)
  %mul.8968 = f32[1,4096,2]{2,1,0} multiply(%mul.8966, %exp.249)
  %reduce.904 = f32[1,4096]{1,0} reduce(%mul.8968, %constant.1360), dimensions={2}, to_apply=%region_927.24005
  %neg.307 = f32[1,4096]{1,0} negate(%reduce.904)
  %broadcast_in_dim.792 = f32[1,4096,2]{2,1,0} broadcast(%neg.307), dimensions={0,1}
  %add_any.475 = f32[1,4096,2]{2,1,0} add(%div.1391, %broadcast_in_dim.792)
  %mul.8969 = f32[1,4096,2]{2,1,0} multiply(%add_any.475, %exp.249)
  %convert_element_type.2971 = bf16[1,4096,2]{2,1,0} convert(%mul.8969)
  %scatter.282 = bf16[1,4096,8]{2,1,0} scatter(%broadcast.3379, %reshape.13576, %convert_element_type.2971), update_window_dims={}, inserted_window_dims={2}, scatter_dims_to_operand_dims={2}, input_batching_dims={0,1}, scatter_indices_batching_dims={0,1}, index_vector_dim=3, to_apply=%region_928.24015.clone
  %sharding_constraint.2338 = bf16[1,4096,8]{2,1,0} copy(%scatter.282)
  %dot.1080 = bf16[1,4096,4096]{2,1,0} dot(%sharding_constraint.2338, %all-gather.404), lhs_contracting_dims={2}, rhs_contracting_dims={1}
  %add_any.476 = bf16[1,4096,4096]{2,1,0} add(%dot.1077, %dot.1080)
  %sharding_constraint.2339 = bf16[1,4096,4096]{2,1,0} copy(%add_any.476)
  %mul.8972 = bf16[1,4096,4096]{2,1,0} multiply(%sharding_constraint.2339, %mul.8944)
  %convert_element_type.2972 = f32[1,4096,4096]{2,1,0} convert(%mul.8972)
  %mul.8975 = f32[1,4096,4096]{2,1,0} multiply(%convert_element_type.2972, %mul.8942)
  %mul.8976 = f32[1,4096,4096]{2,1,0} multiply(%convert_element_type.2960, %convert_element_type.2972)
  %reduce.905 = f32[1,4096]{1,0} reduce(%mul.8976, %constant.1360), dimensions={2}, to_apply=%region_929.24031
  %reshape.13596 = f32[1,4096,1]{2,1,0} reshape(%reduce.905)
  %div.1393 = f32[1,4096,1]{2,1,0} divide(%rsqrt.188, %add.2387)
  %mul.8977 = f32[1,4096,1]{2,1,0} multiply(%div.1393, %broadcast.3620)
  %mul.8978 = f32[1,4096,1]{2,1,0} multiply(%reshape.13596, %mul.8977)
  %mul.8979 = f32[1,4096,1]{2,1,0} multiply(%mul.8978, %mul.4455)
  %mul.8980 = f32[1,4096]{1,0} reshape(%mul.8979)
  %mul.8981 = f32[1,4096,4096]{2,1,0} broadcast(%mul.8980), dimensions={0,1}
  %mul.8982 = f32[1,4096,4096]{2,1,0} multiply(%convert_element_type.2960, %mul.8981)
  %add_any.477 = f32[1,4096,4096]{2,1,0} add(%mul.8975, %mul.8982)
  %convert_element_type.2974 = bf16[1,4096,4096]{2,1,0} convert(%add_any.477)
  %add_any.478 = bf16[1,4096,4096]{2,1,0} add(%sharding_constraint.2305, %convert_element_type.2974)
  %get-tuple-element.1351 = f32[1,32,4096,1]{3,2,1,0} get-tuple-element(%te_fused_attn_forward_ffi.244), index=1
  %get-tuple-element.1352 = u32[2,4]{1,0} get-tuple-element(%te_fused_attn_forward_ffi.244), index=2
  %sharding_constraint.2340 = u32[2,4]{1,0} copy(%get-tuple-element.1352)
  %sharding_constraint.2341 = bf16[1,4096,4096]{2,1,0} copy(%add_any.478)
  %dot.1081 = bf16[1,4096,32,128]{3,2,1,0} dot(%sharding_constraint.2341, %all-gather.403), lhs_contracting_dims={2}, rhs_contracting_dims={2}
  %sharding_constraint.2342 = bf16[1,4096,32,128]{3,2,1,0} copy(%dot.1081)
  %te_fused_attn_backward_ffi.145 = (bf16[1,4096,32,128]{3,2,1,0}, bf16[1,4096,8,128]{3,2,1,0}, bf16[1,4096,8,128]{3,2,1,0}, bf16[0]{0}, u8[134742064]{0}) custom-call(%sharding_constraint.2311, %sharding_constraint.2313, %sharding_constraint.2314, %constant.1403, %get-tuple-element.1351, /*index=5*/%sharding_constraint.2340, %get-tuple-element.1338, %sharding_constraint.2342, %concatenate.638, %concatenate.639, /*index=10*/%constant.1416, %constant.1416, %constant.1416, %constant.1416, %constant.1416, /*index=15*/%constant.1416), custom_call_target="te_fused_attn_backward_ffi", operand_layout_constraints={bf16[1,4096,32,128]{3,2,1,0}, bf16[1,4096,8,128]{3,2,1,0}, bf16[1,4096,8,128]{3,2,1,0}, bf16[0]{0}, f32[1,32,4096,1]{3,2,1,0}, u32[2,4]{1,0}, bf16[1,4096,32,128]{3,2,1,0}, bf16[1,4096,32,128]{3,2,1,0}, s32[2]{0}, s32[2]{0}, f32[0]{0}, f32[0]{0}, f32[0]{0}, f32[0]{0}, f32[0]{0}, f32[0]{0}}, api_version=API_VERSION_TYPED_FFI, backend_config={attn_heads = 32 : i64, bias_batch = 0 : i64, bias_heads = 0 : i64, bias_type = 0 : i64, deterministic = false, dropout_probability = 0.000000e+00 : f64, input_batch = 1 : i64, is_training = true, kv_max_seqlen = 4096 : i64, mask_type = 3 : i64, max_segments_per_seq = 1 : i64, num_gqa_groups = 8 : i64, q_max_seqlen = 4096 : i64, qk_head_dim = 128 : i64, qkv_layout = 9 : i64, scaling_factor = 1.000000e+00 : f64, v_head_dim = 128 : i64, window_size_left = -1 : i64, window_size_right = -1 : i64}
  %get-tuple-element.1353 = bf16[1,4096,8,128]{3,2,1,0} get-tuple-element(%te_fused_attn_backward_ffi.145), index=2
  %sharding_constraint.2343 = bf16[1,4096,8,128]{3,2,1,0} copy(%get-tuple-element.1353)
  %dot.1082 = bf16[1,4096,4096]{2,1,0} dot(%sharding_constraint.2343, %all-gather.402), lhs_contracting_dims={2,3}, rhs_contracting_dims={1,2}
  %get-tuple-element.1354 = bf16[1,4096,8,128]{3,2,1,0} get-tuple-element(%te_fused_attn_backward_ffi.145), index=1
  %sharding_constraint.2345 = bf16[1,4096,8,128]{3,2,1,0} copy(%get-tuple-element.1354)
  %slice.742 = bf16[1,4096,8,64]{3,2,1,0} slice(%sharding_constraint.2345), slice={[0:1], [0:4096], [0:8], [64:128]}
  %mul.8989 = bf16[1,4096,8,64]{3,2,1,0} multiply(%slice.742, %mul.8930)
  %slice.743 = bf16[1,4096,8,64]{3,2,1,0} slice(%sharding_constraint.2345), slice={[0:1], [0:4096], [0:8], [0:64]}
  %mul.8997 = bf16[1,4096,8,64]{3,2,1,0} multiply(%slice.743, %mul.8926)
  %add_any.479 = bf16[1,4096,8,64]{3,2,1,0} add(%mul.8989, %mul.8997)
  %mul.9000 = bf16[1,4096,8,64]{3,2,1,0} multiply(%slice.742, %mul.8926)
  %neg.308 = bf16[1,4096,8,64]{3,2,1,0} negate(%slice.743)
  %mul.9004 = bf16[1,4096,8,64]{3,2,1,0} multiply(%neg.308, %mul.8930)
  %add_any.480 = bf16[1,4096,8,64]{3,2,1,0} add(%mul.9000, %mul.9004)
  %concatenate.647 = bf16[1,4096,8,128]{3,2,1,0} concatenate(%add_any.479, %add_any.480), dimensions={3}
  %dot.1083 = bf16[1,4096,4096]{2,1,0} dot(%concatenate.647, %all-gather.401), lhs_contracting_dims={2,3}, rhs_contracting_dims={1,2}
  %add_any.481 = bf16[1,4096,4096]{2,1,0} add(%dot.1082, %dot.1083)
  %sharding_constraint.2347 = bf16[1,4096,4096]{2,1,0} copy(%add_any.481)
  %get-tuple-element.1355 = bf16[1,4096,32,128]{3,2,1,0} get-tuple-element(%te_fused_attn_backward_ffi.145), index=0
  %sharding_constraint.2348 = bf16[1,4096,32,128]{3,2,1,0} copy(%get-tuple-element.1355)
  %slice.744 = bf16[1,4096,32,64]{3,2,1,0} slice(%sharding_constraint.2348), slice={[0:1], [0:4096], [0:32], [64:128]}
  %mul.9007 = bf16[1,4096,32,64]{3,2,1,0} multiply(%slice.744, %mul.8900)
  %slice.745 = bf16[1,4096,32,64]{3,2,1,0} slice(%sharding_constraint.2348), slice={[0:1], [0:4096], [0:32], [0:64]}
  %mul.9013 = bf16[1,4096,32,64]{3,2,1,0} multiply(%slice.745, %mul.8897)
  %add_any.482 = bf16[1,4096,32,64]{3,2,1,0} add(%mul.9007, %mul.9013)
  %mul.9019 = bf16[1,4096,32,64]{3,2,1,0} multiply(%slice.744, %mul.8897)
  %neg.309 = bf16[1,4096,32,64]{3,2,1,0} negate(%slice.745)
  %mul.9028 = bf16[1,4096,32,64]{3,2,1,0} multiply(%neg.309, %mul.8900)
  %add_any.483 = bf16[1,4096,32,64]{3,2,1,0} add(%mul.9019, %mul.9028)
  %concatenate.648 = bf16[1,4096,32,128]{3,2,1,0} concatenate(%add_any.482, %add_any.483), dimensions={3}
  %dot.1084 = bf16[1,4096,4096]{2,1,0} dot(%concatenate.648, %all-gather.400), lhs_contracting_dims={2,3}, rhs_contracting_dims={1,2}
  %sharding_constraint.2349 = bf16[1,4096,4096]{2,1,0} copy(%dot.1084)
  %add_any.484 = bf16[1,4096,4096]{2,1,0} add(%sharding_constraint.2347, %sharding_constraint.2349)
  %sharding_constraint.2350 = bf16[1,4096,4096]{2,1,0} copy(%add_any.484)
  %mul.9030 = bf16[1,4096,4096]{2,1,0} multiply(%sharding_constraint.2350, %mul.8893)
  %convert_element_type.2975 = f32[1,4096,4096]{2,1,0} convert(%mul.9030)
  %mul.9033 = f32[1,4096,4096]{2,1,0} multiply(%convert_element_type.2975, %mul.8891)
  %mul.9034 = f32[1,4096,4096]{2,1,0} multiply(%convert_element_type.2947, %convert_element_type.2975)
  %reduce.906 = f32[1,4096]{1,0} reduce(%mul.9034, %constant.1360), dimensions={2}, to_apply=%region_930.24110
  %reshape.13603 = f32[1,4096,1]{2,1,0} reshape(%reduce.906)
  %div.1394 = f32[1,4096,1]{2,1,0} divide(%rsqrt.187, %add.2382)
  %mul.9036 = f32[1,4096,1]{2,1,0} multiply(%div.1394, %broadcast.3620)
  %mul.9037 = f32[1,4096,1]{2,1,0} multiply(%reshape.13603, %mul.9036)
  %mul.9038 = f32[1,4096,1]{2,1,0} multiply(%mul.9037, %mul.4455)
  %mul.9039 = f32[1,4096]{1,0} reshape(%mul.9038)
  %mul.9040 = f32[1,4096,4096]{2,1,0} broadcast(%mul.9039), dimensions={0,1}
  %mul.9041 = f32[1,4096,4096]{2,1,0} multiply(%convert_element_type.2947, %mul.9040)
  %add_any.485 = f32[1,4096,4096]{2,1,0} add(%mul.9033, %mul.9041)
  %convert_element_type.2976 = bf16[1,4096,4096]{2,1,0} convert(%add_any.485)
  %add_any.486 = bf16[1,4096,4096]{2,1,0} add(%add_any.478, %convert_element_type.2976)
  %sharding_constraint.2351 = bf16[1,4096,4096]{2,1,0} copy(%add_any.486)
  %tuple.343 = (bf16[512,8]{1,0}, bf16[1,4096,14336]{2,1,0}, bf16[1,4096,14336]{2,1,0}, bf16[1,14336,4096]{2,1,0}, bf16[4096]{0}, /*index=5*/bf16[4096]{0}, bf16[512,8,128]{2,1,0}, bf16[32,128,512]{2,1,0}, bf16[512,32,128]{2,1,0}, bf16[512,8,128]{2,1,0}, /*index=10*/bf16[1,4096,4096]{2,1,0}, s32[1,4096]{1,0}, s32[1,4096]{1,0}, bf16[1,4096,4096]{2,1,0}) tuple(%param.23, %param.24, %param.25, %param.26, %param.22, /*index=5*/%param.17, %param.19, %param.21, %param.18, %param.20, /*index=10*/%sharding_constraint.186, %param.10, %param.7, %sharding_constraint.2351)
  %remat2.41 = (bf16[512,8]{1,0}, bf16[1,4096,14336]{2,1,0}, bf16[1,4096,14336]{2,1,0}, bf16[1,14336,4096]{2,1,0}, bf16[4096]{0}, /*index=5*/bf16[4096]{0}, bf16[512,8,128]{2,1,0}, bf16[32,128,512]{2,1,0}, bf16[512,32,128]{2,1,0}, bf16[512,8,128]{2,1,0}, /*index=10*/bf16[1,4096,4096]{2,1,0}, s32[1,4096]{1,0}, s32[1,4096]{1,0}, bf16[1,4096,4096]{2,1,0}) opt-barrier(%tuple.343)
  %get-tuple-element.1356 = bf16[1,4096,4096]{2,1,0} get-tuple-element(%remat2.41), index=13
  %sharding_constraint.2352 = bf16[1,4096,4096]{2,1,0} copy(%get-tuple-element.1356)
  %iota.2890 = s32[1,4096,2,1]{3,2,1,0} iota(), iota_dimension=1
  %get-tuple-element.1357 = bf16[1,4096,4096]{2,1,0} get-tuple-element(%remat2.41), index=10
  %sharding_constraint.2353 = bf16[1,4096,4096]{2,1,0} copy(%get-tuple-element.1357)
  %convert_element_type.2977 = f32[1,4096,4096]{2,1,0} convert(%sharding_constraint.2353)
  %square.128 = f32[1,4096,4096]{2,1,0} multiply(%convert_element_type.2977, %convert_element_type.2977)
  %reduce.907 = f32[1,4096]{1,0} reduce(%square.128, %constant.1360), dimensions={2}, to_apply=%region_931.24152
  %div.1395 = f32[1,4096]{1,0} multiply(%reduce.907, %broadcast.3412)
  %add.2398 = f32[1,4096]{1,0} add(%div.1395, %broadcast.3413)
  %add.2399 = f32[1,4096,1]{2,1,0} reshape(%add.2398)
  %rsqrt.189 = f32[1,4096,1]{2,1,0} rsqrt(%add.2399)
  %mul.9042 = f32[1,4096]{1,0} reshape(%rsqrt.189)
  %mul.9046 = f32[1,4096,4096]{2,1,0} broadcast(%mul.9042), dimensions={0,1}
  %mul.9047 = f32[1,4096,4096]{2,1,0} multiply(%convert_element_type.2977, %mul.9046)
  %convert_element_type.2978 = bf16[1,4096,4096]{2,1,0} convert(%mul.9047)
  %get-tuple-element.1358 = bf16[4096]{0} get-tuple-element(%remat2.41), index=5
  %mul.9048 = bf16[1,4096,4096]{2,1,0} broadcast(%get-tuple-element.1358), dimensions={2}
  %mul.9052 = bf16[1,4096,4096]{2,1,0} multiply(%convert_element_type.2978, %mul.9048)
  %sharding_constraint.2354 = bf16[1,4096,4096]{2,1,0} copy(%mul.9052)
  %sharding_constraint.2355 = bf16[1,4096,4096]{2,1,0} copy(%sharding_constraint.2354)
  %get-tuple-element.1359 = bf16[512,32,128]{2,1,0} get-tuple-element(%remat2.41), index=8
  %all-gather.406 = bf16[4096,32,128]{2,1,0} all-gather(%get-tuple-element.1359), channel_id=777, replica_groups=[1,8]<=[8], dimensions={0}, use_global_device_ids=true
  %dot.1085 = bf16[1,4096,32,128]{3,2,1,0} dot(%sharding_constraint.2355, %all-gather.406), lhs_contracting_dims={2}, rhs_contracting_dims={0}
  %slice.746 = bf16[1,4096,32,64]{3,2,1,0} slice(%dot.1085), slice={[0:1], [0:4096], [0:32], [0:64]}
  %get-tuple-element.1360 = s32[1,4096]{1,0} get-tuple-element(%remat2.41), index=12
  %convert_element_type.2979 = f32[1,4096]{1,0} convert(%get-tuple-element.1360)
  %div.1396 = f32[1,4096,1,64]{3,2,1,0} broadcast(%convert_element_type.2979), dimensions={0,1}
  %div.1400 = f32[1,4096,1,64]{3,2,1,0} divide(%div.1396, %div.402)
  %cos.125 = f32[1,4096,1,64]{3,2,1,0} cosine(%div.1400)
  %convert_element_type.2981 = bf16[1,4096,1,64]{3,2,1,0} convert(%cos.125)
  %mul.9060 = bf16[1,4096,64]{2,1,0} reshape(%convert_element_type.2981)
  %mul.9061 = bf16[1,4096,32,64]{3,2,1,0} broadcast(%mul.9060), dimensions={0,1,3}
  %mul.9062 = bf16[1,4096,32,64]{3,2,1,0} multiply(%slice.746, %mul.9061)
  %slice.747 = bf16[1,4096,32,64]{3,2,1,0} slice(%dot.1085), slice={[0:1], [0:4096], [0:32], [64:128]}
  %sin.124 = f32[1,4096,1,64]{3,2,1,0} sine(%div.1400)
  %convert_element_type.2982 = bf16[1,4096,1,64]{3,2,1,0} convert(%sin.124)
  %mul.9063 = bf16[1,4096,64]{2,1,0} reshape(%convert_element_type.2982)
  %mul.9064 = bf16[1,4096,32,64]{3,2,1,0} broadcast(%mul.9063), dimensions={0,1,3}
  %mul.9065 = bf16[1,4096,32,64]{3,2,1,0} multiply(%slice.747, %mul.9064)
  %sub.410 = bf16[1,4096,32,64]{3,2,1,0} subtract(%mul.9062, %mul.9065)
  %mul.9068 = bf16[1,4096,32,64]{3,2,1,0} multiply(%slice.747, %mul.9061)
  %mul.9072 = bf16[1,4096,32,64]{3,2,1,0} multiply(%slice.746, %mul.9064)
  %add.2400 = bf16[1,4096,32,64]{3,2,1,0} add(%mul.9068, %mul.9072)
  %concatenate.649 = bf16[1,4096,32,128]{3,2,1,0} concatenate(%sub.410, %add.2400), dimensions={3}
  %sharding_constraint.2356 = bf16[1,4096,32,128]{3,2,1,0} copy(%concatenate.649)
  %get-tuple-element.1361 = bf16[512,8,128]{2,1,0} get-tuple-element(%remat2.41), index=6
  %all-gather.407 = bf16[4096,8,128]{2,1,0} all-gather(%get-tuple-element.1361), channel_id=778, replica_groups=[1,8]<=[8], dimensions={0}, use_global_device_ids=true
  %dot.1086 = bf16[1,4096,8,128]{3,2,1,0} dot(%sharding_constraint.2355, %all-gather.407), lhs_contracting_dims={2}, rhs_contracting_dims={0}
  %slice.748 = bf16[1,4096,8,64]{3,2,1,0} slice(%dot.1086), slice={[0:1], [0:4096], [0:8], [0:64]}
  %mul.9075 = bf16[1,4096,8,64]{3,2,1,0} broadcast(%mul.9060), dimensions={0,1,3}
  %mul.9076 = bf16[1,4096,8,64]{3,2,1,0} multiply(%slice.748, %mul.9075)
  %slice.749 = bf16[1,4096,8,64]{3,2,1,0} slice(%dot.1086), slice={[0:1], [0:4096], [0:8], [64:128]}
  %mul.9080 = bf16[1,4096,8,64]{3,2,1,0} broadcast(%mul.9063), dimensions={0,1,3}
  %mul.9081 = bf16[1,4096,8,64]{3,2,1,0} multiply(%slice.749, %mul.9080)
  %sub.411 = bf16[1,4096,8,64]{3,2,1,0} subtract(%mul.9076, %mul.9081)
  %mul.9084 = bf16[1,4096,8,64]{3,2,1,0} multiply(%slice.749, %mul.9075)
  %mul.9088 = bf16[1,4096,8,64]{3,2,1,0} multiply(%slice.748, %mul.9080)
  %add.2401 = bf16[1,4096,8,64]{3,2,1,0} add(%mul.9084, %mul.9088)
  %concatenate.650 = bf16[1,4096,8,128]{3,2,1,0} concatenate(%sub.411, %add.2401), dimensions={3}
  %sharding_constraint.2358 = bf16[1,4096,8,128]{3,2,1,0} copy(%concatenate.650)
  %get-tuple-element.1362 = bf16[512,8,128]{2,1,0} get-tuple-element(%remat2.41), index=9
  %all-gather.408 = bf16[4096,8,128]{2,1,0} all-gather(%get-tuple-element.1362), channel_id=779, replica_groups=[1,8]<=[8], dimensions={0}, use_global_device_ids=true
  %dot.1087 = bf16[1,4096,8,128]{3,2,1,0} dot(%sharding_constraint.2355, %all-gather.408), lhs_contracting_dims={2}, rhs_contracting_dims={0}
  %sharding_constraint.2359 = bf16[1,4096,8,128]{3,2,1,0} copy(%dot.1087)
  %get-tuple-element.1363 = s32[1,4096]{1,0} get-tuple-element(%remat2.41), index=11
  %eq.2489 = s32[1,4096,4096]{2,1,0} broadcast(%get-tuple-element.1363), dimensions={0,1}
  %eq.2490 = s32[1,4096,4096]{2,1,0} broadcast(%get-tuple-element.1363), dimensions={0,2}
  %eq.2491 = pred[1,4096,4096]{2,1,0} compare(%eq.2489, %eq.2490), direction=EQ
  %and.219 = pred[1,4096,4096]{2,1,0} and(%eq.2491, %and.64)
  %select_n.683 = f32[1,4096,4096]{2,1,0} select(%and.219, %broadcast_in_dim.516, %broadcast_in_dim.517)
  %ne.128 = pred[1,4096,4096]{2,1,0} compare(%select_n.683, %broadcast_in_dim.516), direction=NE
  %not.126 = pred[1,4096,4096]{2,1,0} not(%ne.128)
  %convert_element_type.2990 = s32[1,4096,4096]{2,1,0} convert(%not.126)
  %reduce.908 = s32[1,4096]{1,0} reduce(%convert_element_type.2990, %constant.1181), dimensions={1}, to_apply=%region_932.24248
  %reduce_sum.5763 = s32[1,1,1,4096]{3,2,1,0} reshape(%reduce.908)
  %slice.750 = s32[1,1,1,1]{3,2,1,0} slice(%reduce_sum.5763), slice={[0:1], [0:1], [0:1], [0:1]}
  %squeeze.62 = s32[1,1]{1,0} reshape(%slice.750)
  %reshape.13611 = s32[1]{0} reshape(%squeeze.62)
  %lt.247 = pred[1]{0} compare(%reshape.13611, %constant.1418), direction=LT
  %select_n.684 = s32[1]{0} select(%lt.247, %broadcast_in_dim.518, %reshape.13611)
  %concatenate.651 = s32[2]{0} concatenate(%constant.1418, %select_n.684), dimensions={0}
  %reduce.909 = s32[1,4096]{1,0} reduce(%convert_element_type.2990, %constant.1181), dimensions={2}, to_apply=%region_933.24257
  %reduce_sum.5764 = s32[1,1,1,4096]{3,2,1,0} reshape(%reduce.909)
  %reduce.910 = s32[1,1]{1,0} reduce(%reduce_sum.5764, %constant.1415), dimensions={3,2}, to_apply=%region_934.24263
  %reshape.13612 = s32[1]{0} reshape(%reduce.910)
  %lt.248 = pred[1]{0} compare(%reshape.13612, %constant.1418), direction=LT
  %select_n.685 = s32[1]{0} select(%lt.248, %broadcast_in_dim.518, %reshape.13612)
  %concatenate.652 = s32[2]{0} concatenate(%constant.1418, %select_n.685), dimensions={0}
  %te_fused_attn_forward_ffi.248 = (bf16[1,4096,32,128]{3,2,1,0}, f32[1,32,4096,1]{3,2,1,0}, u32[2,4]{1,0}, u8[48]{0}) custom-call(%sharding_constraint.2356, %sharding_constraint.2358, %sharding_constraint.2359, %constant.1403, %dynamic-slice.38, /*index=5*/%concatenate.651, %concatenate.652, %constant.1416, %constant.1416, %constant.1416, /*index=10*/%constant.1416, %constant.1416, %constant.1416), custom_call_target="te_fused_attn_forward_ffi", operand_layout_constraints={bf16[1,4096,32,128]{3,2,1,0}, bf16[1,4096,8,128]{3,2,1,0}, bf16[1,4096,8,128]{3,2,1,0}, bf16[0]{0}, u32[2]{0}, s32[2]{0}, s32[2]{0}, f32[0]{0}, f32[0]{0}, f32[0]{0}, f32[0]{0}, f32[0]{0}, f32[0]{0}}, api_version=API_VERSION_TYPED_FFI, backend_config={attn_heads = 32 : i64, bias_batch = 0 : i64, bias_heads = 0 : i64, bias_type = 0 : i64, deterministic = false, dropout_probability = 0.000000e+00 : f64, input_batch = 1 : i64, is_training = true, kv_max_seqlen = 4096 : i64, mask_type = 3 : i64, max_segments_per_seq = 1 : i64, num_gqa_groups = 8 : i64, q_max_seqlen = 4096 : i64, qk_head_dim = 128 : i64, qkv_layout = 9 : i64, scaling_factor = 1.000000e+00 : f64, v_head_dim = 128 : i64, window_size_left = -1 : i64, window_size_right = -1 : i64}
  %get-tuple-element.1364 = bf16[1,4096,32,128]{3,2,1,0} get-tuple-element(%te_fused_attn_forward_ffi.248), index=0
  %sharding_constraint.2360 = bf16[1,4096,32,128]{3,2,1,0} copy(%get-tuple-element.1364)
  %get-tuple-element.1365 = bf16[32,128,512]{2,1,0} get-tuple-element(%remat2.41), index=7
  %all-gather.409 = bf16[32,128,4096]{2,1,0} all-gather(%get-tuple-element.1365), channel_id=780, replica_groups=[1,8]<=[8], dimensions={2}, use_global_device_ids=true
  %dot.1088 = bf16[1,4096,4096]{2,1,0} dot(%sharding_constraint.2360, %all-gather.409), lhs_contracting_dims={2,3}, rhs_contracting_dims={0,1}
  %sharding_constraint.2361 = bf16[1,4096,4096]{2,1,0} copy(%dot.1088)
  %add.2402 = bf16[1,4096,4096]{2,1,0} add(%sharding_constraint.2353, %sharding_constraint.2361)
  %convert_element_type.2993 = f32[1,4096,4096]{2,1,0} convert(%add.2402)
  %square.129 = f32[1,4096,4096]{2,1,0} multiply(%convert_element_type.2993, %convert_element_type.2993)
  %reduce.911 = f32[1,4096]{1,0} reduce(%square.129, %constant.1360), dimensions={2}, to_apply=%region_935.24278
  %div.1405 = f32[1,4096]{1,0} multiply(%reduce.911, %broadcast.3412)
  %add.2403 = f32[1,4096]{1,0} add(%div.1405, %broadcast.3413)
  %add.2404 = f32[1,4096,1]{2,1,0} reshape(%add.2403)
  %rsqrt.190 = f32[1,4096,1]{2,1,0} rsqrt(%add.2404)
  %mul.9093 = f32[1,4096]{1,0} reshape(%rsqrt.190)
  %mul.9094 = f32[1,4096,4096]{2,1,0} broadcast(%mul.9093), dimensions={0,1}
  %mul.9095 = f32[1,4096,4096]{2,1,0} multiply(%convert_element_type.2993, %mul.9094)
  %convert_element_type.2994 = bf16[1,4096,4096]{2,1,0} convert(%mul.9095)
  %get-tuple-element.1366 = bf16[4096]{0} get-tuple-element(%remat2.41), index=4
  %mul.9096 = bf16[1,4096,4096]{2,1,0} broadcast(%get-tuple-element.1366), dimensions={2}
  %mul.9097 = bf16[1,4096,4096]{2,1,0} multiply(%convert_element_type.2994, %mul.9096)
  %sharding_constraint.2362 = bf16[1,4096,4096]{2,1,0} copy(%mul.9097)
  %get-tuple-element.1367 = bf16[512,8]{1,0} get-tuple-element(%remat2.41), index=0
  %all-gather.410 = bf16[4096,8]{1,0} all-gather(%get-tuple-element.1367), channel_id=781, replica_groups=[1,8]<=[8], dimensions={0}, use_global_device_ids=true
  %dot.1089 = bf16[1,4096,8]{2,1,0} dot(%sharding_constraint.2362, %all-gather.410), lhs_contracting_dims={2}, rhs_contracting_dims={0}
  %sharding_constraint.2363 = bf16[1,4096,8]{2,1,0} copy(%dot.1089)
  %top_k.186 = bf16[4096,8]{1,0} reshape(%sharding_constraint.2363)
  %top_k.187 = (bf16[4096,2]{1,0}, s32[4096,2]{1,0}) custom-call(%top_k.186), custom_call_target="TopK", called_computations={%compare_greater_than.62.24299.clone}
  %get-tuple-element.1368 = bf16[4096,2]{1,0} get-tuple-element(%top_k.187), index=0
  %get-tuple-element.1369 = s32[4096,2]{1,0} get-tuple-element(%top_k.187), index=1
  %add.2405 = s32[4096,2]{1,0} add(%get-tuple-element.1369, %broadcast.3418)
  %sort.126 = (bf16[4096,2]{1,0}, s32[4096,2]{1,0}) sort(%get-tuple-element.1368, %add.2405), dimensions={1}, is_stable=true, to_apply=%compare-value-and-index.62
  %get-tuple-element.1371 = s32[4096,2]{1,0} get-tuple-element(%sort.126), index=1
  %slice.752 = s32[4096,2]{1,0} slice(%get-tuple-element.1371), slice={[0:4096], [0:2]}
  %top_k.188 = s32[1,4096,2]{2,1,0} reshape(%slice.752)
  %lt.249 = pred[1,4096,2]{2,1,0} compare(%top_k.188, %broadcast.3419), direction=LT
  %add.2406 = s32[1,4096,2]{2,1,0} add(%top_k.188, %broadcast.3420)
  %select_n.686 = s32[1,4096,2]{2,1,0} select(%lt.249, %add.2406, %top_k.188)
  %broadcast_in_dim.797 = s32[1,4096,2,1]{3,2,1,0} reshape(%select_n.686)
  %concatenate.653 = s32[1,4096,2,3]{3,2,1,0} concatenate(%add.1356, %iota.2890, %broadcast_in_dim.797), dimensions={3}
  %subtract.218 = s32[1,4096,2,3]{3,2,1,0} subtract(%concatenate.653, %broadcast.3428)
  %scatter.283 = u32[1,4096,8]{2,1,0} scatter(%dynamic-slice.43, %subtract.218, %add.1401), update_window_dims={}, inserted_window_dims={0,1,2}, scatter_dims_to_operand_dims={0,1,2}, index_vector_dim=3, to_apply=%region_936.24335.clone
  %gather.92 = u32[1,4096,2]{2,1,0} gather(%scatter.283, %subtract.218), offset_dims={}, collapsed_slice_dims={0,1,2}, start_index_map={0,1,2}, index_vector_dim=3, slice_sizes={1,1,1}
  %eq.2492 = pred[1,4096,2]{2,1,0} compare(%add.1401, %gather.92), direction=EQ
  %get-tuple-element.1370 = bf16[4096,2]{1,0} get-tuple-element(%sort.126), index=0
  %slice.751 = bf16[4096,2]{1,0} slice(%get-tuple-element.1370), slice={[0:4096], [0:2]}
  %convert_element_type.2995 = f32[4096,2]{1,0} convert(%slice.751)
  %convert_element_type.2997 = f32[1,4096,2]{2,1,0} reshape(%convert_element_type.2995)
  %reduce.912 = f32[4096]{0} reduce(%convert_element_type.2995, %constant.1450), dimensions={1}, to_apply=%region_937.24344
  %sub.412 = f32[1,4096]{1,0} reshape(%reduce.912)
  %sub.413 = f32[1,4096,2]{2,1,0} broadcast(%sub.412), dimensions={0,1}
  %sub.414 = f32[1,4096,2]{2,1,0} subtract(%convert_element_type.2997, %sub.413)
  %exp.251 = f32[1,4096,2]{2,1,0} exponential(%sub.414)
  %reduce.913 = f32[1,4096]{1,0} reduce(%exp.251, %constant.1360), dimensions={2}, to_apply=%region_938.24353
  %div.1406 = f32[1,4096,2]{2,1,0} broadcast(%reduce.913), dimensions={0,1}
  %div.1407 = f32[1,4096,2]{2,1,0} divide(%exp.251, %div.1406)
  %convert_element_type.2998 = bf16[1,4096,2]{2,1,0} convert(%div.1407)
  %select_n.687 = bf16[1,4096,2]{2,1,0} select(%eq.2492, %convert_element_type.2998, %broadcast.3427)
  %scatter.284 = bf16[1,4096,8]{2,1,0} scatter(%broadcast.3379, %subtract.218, %select_n.687), update_window_dims={}, inserted_window_dims={0,1,2}, scatter_dims_to_operand_dims={0,1,2}, index_vector_dim=3, to_apply=%region_939.24362.clone
  %eq.2494 = s32[1,4096,2,8]{3,2,1,0} broadcast(%top_k.188), dimensions={0,1,2}
  %iota.2901 = s32[1,4096,2,8]{3,2,1,0} iota(), iota_dimension=3
  %eq.2495 = pred[1,4096,2,8]{3,2,1,0} compare(%eq.2494, %iota.2901), direction=EQ
  %convert_element_type.2999 = s32[1,4096,2,8]{3,2,1,0} convert(%eq.2495)
  %reshape.13644 = s32[1,8192,8]{2,1,0} reshape(%convert_element_type.2999)
  %sharding_constraint.2364 = s32[1,8192,8]{2,1,0} copy(%reshape.13644)
  %reduce-window.62 = s32[1,8192,8]{2,1,0} reduce-window(%sharding_constraint.2364, %constant.1181), window={size=1x8192x1 pad=0_0x8191_0x0_0}, to_apply=%region_940.24374
  %reshape.13646 = s32[1,4096,2,8]{3,2,1,0} reshape(%reduce-window.62)
  %sharding_constraint.2365 = s32[1,4096,2,8]{3,2,1,0} copy(%reshape.13646)
  %le.186 = pred[1,4096,2,8]{3,2,1,0} compare(%sharding_constraint.2365, %broadcast.3429), direction=LE
  %mul.9098 = s32[1,4096,2,8]{3,2,1,0} select(%le.186, %convert_element_type.2999, %broadcast.3430)
  %reduce.914 = s32[1,4096,8]{2,1,0} reduce(%mul.9098, %constant.1181), dimensions={2}, to_apply=%region_941.24383
  %convert_element_type.3000 = bf16[1,4096,8]{2,1,0} convert(%reduce.914)
  %mul.9099 = bf16[1,4096,8]{2,1,0} multiply(%scatter.284, %convert_element_type.3000)
  %mul.9100 = bf16[1,4096,8,1025]{3,2,1,0} broadcast(%mul.9099), dimensions={0,1,2}
  %mul.9101 = s32[1,8192,8]{2,1,0} multiply(%sharding_constraint.2364, %reduce-window.62)
  %reshape.13647 = s32[1,4096,2,8]{3,2,1,0} reshape(%mul.9101)
  %reduce.915 = s32[1,4096,8]{2,1,0} reduce(%reshape.13647, %constant.1181), dimensions={2}, to_apply=%region_942.24393
  %mul.9102 = s32[1,4096,8]{2,1,0} multiply(%reduce.915, %reduce.914)
  %eq.2496 = s32[1,4096,8,1025]{3,2,1,0} broadcast(%mul.9102), dimensions={0,1,2}
  %iota.2902 = s32[1,4096,8,1025]{3,2,1,0} iota(), iota_dimension=3
  %eq.2497 = pred[1,4096,8,1025]{3,2,1,0} compare(%eq.2496, %iota.2902), direction=EQ
  %convert_element_type.3001 = s32[1,4096,8,1025]{3,2,1,0} convert(%eq.2497)
  %convert_element_type.3002 = bf16[1,4096,8,1025]{3,2,1,0} convert(%convert_element_type.3001)
  %mul.9103 = bf16[1,4096,8,1025]{3,2,1,0} multiply(%mul.9100, %convert_element_type.3002)
  %slice.753 = bf16[1,4096,8,1024]{3,2,1,0} slice(%mul.9103), slice={[0:1], [0:4096], [0:8], [1:1025]}
  %convert_element_type.3003 = pred[1,4096,8,1024]{3,2,1,0} compare(%slice.753, %broadcast.3431), direction=NE
  %sharding_constraint.2366 = pred[1,4096,8,1024]{3,2,1,0} copy(%convert_element_type.3003)
  %dot_general.128 = bf16[1,4096,8,1024]{3,2,1,0} convert(%sharding_constraint.2366)
  %dot.1090 = bf16[1,8,1024,4096]{3,2,1,0} dot(%dot_general.128, %sharding_constraint.2362), lhs_batch_dims={0}, lhs_contracting_dims={1}, rhs_batch_dims={0}, rhs_contracting_dims={1}
  %reshape.13650 = bf16[1,8,1,1024,4096]{4,3,2,1,0} reshape(%dot.1090)
  %all-to-all.184 = bf16[1,8,1,1024,4096]{4,3,2,1,0} all-to-all(%reshape.13650), channel_id=785, replica_groups=[1,8]<=[8], dimensions={1}
  %transpose.311 = bf16[8,1,1,1024,4096]{4,3,2,0,1} transpose(%all-to-all.184), dimensions={1,0,2,3,4}
  %reshape.13651 = bf16[8,1,1024,4096]{3,2,1,0} reshape(%transpose.311)
  %transpose.312 = bf16[1,8,1024,4096]{3,2,0,1} transpose(%reshape.13651), dimensions={1,0,2,3}
  %sharding_constraint.2367 = bf16[1,8,1024,4096]{3,2,0,1} copy(%transpose.312)
  %get-tuple-element.1374 = bf16[1,4096,14336]{2,1,0} get-tuple-element(%remat2.41), index=1
  %sharding_constraint.2368 = bf16[1,4096,14336]{2,1,0} copy(%get-tuple-element.1374)
  %dot.1091 = bf16[1,8,1024,14336]{3,2,1,0} dot(%sharding_constraint.2367, %sharding_constraint.2368), lhs_batch_dims={0}, lhs_contracting_dims={3}, rhs_batch_dims={0}, rhs_contracting_dims={1}
  %sharding_constraint.2369 = bf16[1,8,1024,14336]{3,2,1,0} copy(%dot.1091)
  %neg.310 = bf16[1,8,1024,14336]{3,2,1,0} negate(%sharding_constraint.2369)
  %exp.252 = bf16[1,8,1024,14336]{3,2,1,0} exponential(%neg.310)
  %add.2412 = bf16[1,8,1024,14336]{3,2,1,0} add(%exp.252, %jit_silu_.0)
  %div.1408 = bf16[1,8,1024,14336]{3,2,1,0} divide(%jit_silu_.0, %add.2412)
  %mul.9104 = bf16[1,8,1024,14336]{3,2,1,0} multiply(%sharding_constraint.2369, %div.1408)
  %sharding_constraint.2370 = bf16[1,4096,4096]{2,1,0} copy(%sharding_constraint.2352)
  %sharding_constraint.2371 = bf16[1,4096,8,1024]{3,2,1,0} copy(%slice.753)
  %dot.1092 = bf16[1,4096,8,1024]{3,2,1,0} dot(%sharding_constraint.2370, %sharding_constraint.2371), lhs_batch_dims={0}, lhs_contracting_dims={1}, rhs_batch_dims={0}, rhs_contracting_dims={1}
  %reshape.13654 = bf16[1,4096,8,1,1024]{4,3,2,1,0} reshape(%dot.1092)
  %all-to-all.185 = bf16[1,4096,8,1,1024]{4,3,2,1,0} all-to-all(%reshape.13654), channel_id=786, replica_groups=[1,8]<=[8], dimensions={2}
  %transpose.313 = bf16[8,1,4096,1,1024]{4,3,0,2,1} transpose(%all-to-all.185), dimensions={2,0,1,3,4}
  %reshape.13655 = bf16[8,4096,1,1024]{3,2,1,0} reshape(%transpose.313)
  %transpose.314 = bf16[1,8,1024,4096]{2,0,3,1} transpose(%reshape.13655), dimensions={2,0,3,1}
  %sharding_constraint.2372 = bf16[1,8,1024,4096]{2,0,3,1} copy(%transpose.314)
  %get-tuple-element.1375 = bf16[1,14336,4096]{2,1,0} get-tuple-element(%remat2.41), index=3
  %sharding_constraint.2373 = bf16[1,14336,4096]{2,1,0} copy(%get-tuple-element.1375)
  %dot.1093 = bf16[1,8,1024,14336]{3,2,1,0} dot(%sharding_constraint.2372, %sharding_constraint.2373), lhs_batch_dims={0}, lhs_contracting_dims={3}, rhs_batch_dims={0}, rhs_contracting_dims={2}
  %mul.9105 = bf16[1,8,1024,14336]{3,2,1,0} multiply(%mul.9104, %dot.1093)
  %sharding_constraint.2374 = bf16[1,8,1024,14336]{3,2,1,0} copy(%mul.9105)
  %get-tuple-element.1376 = bf16[1,4096,14336]{2,1,0} get-tuple-element(%remat2.41), index=2
  %sharding_constraint.2375 = bf16[1,4096,14336]{2,1,0} copy(%get-tuple-element.1376)
  %dot.1094 = bf16[1,8,1024,4096]{3,2,1,0} dot(%sharding_constraint.2374, %sharding_constraint.2375), lhs_batch_dims={0}, lhs_contracting_dims={3}, rhs_batch_dims={0}, rhs_contracting_dims={2}
  %dot.1095 = bf16[1,8,1024,14336]{3,2,1,0} dot(%sharding_constraint.2367, %sharding_constraint.2375), lhs_batch_dims={0}, lhs_contracting_dims={3}, rhs_batch_dims={0}, rhs_contracting_dims={1}
  %sharding_constraint.2377 = bf16[1,8,1024,14336]{3,2,1,0} copy(%dot.1095)
  %mul.9106 = bf16[1,8,1024,14336]{3,2,1,0} multiply(%dot.1093, %sharding_constraint.2377)
  %mul.9107 = bf16[1,8,1024,14336]{3,2,1,0} multiply(%mul.9106, %div.1408)
  %mul.9109 = bf16[1,8,1024,14336]{3,2,1,0} multiply(%sharding_constraint.2369, %mul.9106)
  %sub.415 = bf16[1,8,1024,14336]{3,2,1,0} subtract(%jit_silu_.0, %div.1408)
  %mul.9110 = bf16[1,8,1024,14336]{3,2,1,0} multiply(%div.1408, %sub.415)
  %mul.9111 = bf16[1,8,1024,14336]{3,2,1,0} multiply(%mul.9109, %mul.9110)
  %add_any.487 = bf16[1,8,1024,14336]{3,2,1,0} add(%mul.9107, %mul.9111)
  %sharding_constraint.2378 = bf16[1,8,1024,14336]{3,2,1,0} copy(%add_any.487)
  %dot.1096 = bf16[1,8,1024,4096]{3,2,1,0} dot(%sharding_constraint.2378, %sharding_constraint.2368), lhs_batch_dims={0}, lhs_contracting_dims={3}, rhs_batch_dims={0}, rhs_contracting_dims={2}
  %add_any.488 = bf16[1,8,1024,4096]{3,2,1,0} add(%dot.1094, %dot.1096)
  %sharding_constraint.2380 = bf16[1,8,1024,4096]{3,2,1,0} copy(%add_any.488)
  %transpose.315 = bf16[8,1,1024,4096]{3,2,0,1} transpose(%sharding_constraint.2380), dimensions={1,0,2,3}
  %reshape.13658 = bf16[8,1,1,1024,4096]{4,3,2,1,0} reshape(%transpose.315)
  %all-to-all.186 = bf16[8,1,1,1024,4096]{4,3,2,1,0} all-to-all(%reshape.13658), channel_id=787, replica_groups=[1,8]<=[8], dimensions={0}
  %transpose.316 = bf16[1,8,1,1024,4096]{4,3,2,0,1} transpose(%all-to-all.186), dimensions={1,0,2,3,4}
  %reshape.13659 = bf16[1,8,1024,4096]{3,2,1,0} reshape(%transpose.316)
  %dot.1097 = bf16[1,4096,4096]{2,1,0} dot(%dot_general.128, %reshape.13659), lhs_batch_dims={0}, lhs_contracting_dims={2,3}, rhs_batch_dims={0}, rhs_contracting_dims={1,2}
  %reshape.13661 = s32[1,4096,2,1]{3,2,1,0} reshape(%slice.752)
  %ge.30 = pred[1,4096,2,3]{3,2,1,0} compare(%concatenate.653, %broadcast.3629), direction=GE
  %le.188 = pred[1,4096,2,3]{3,2,1,0} compare(%concatenate.653, %le.67), direction=LE
  %and.220 = pred[1,4096,2,3]{3,2,1,0} and(%ge.30, %le.188)
  %reduce.916 = pred[1,4096,2]{2,1,0} reduce(%and.220, %constant.5574), dimensions={3}, to_apply=%region_943.24450
  %mul.9112 = bf16[1,8,1024,14336]{3,2,1,0} multiply(%mul.9104, %sharding_constraint.2377)
  %dot.1098 = bf16[1,8,1024,4096]{3,2,1,0} dot(%mul.9112, %sharding_constraint.2373), lhs_batch_dims={0}, lhs_contracting_dims={3}, rhs_batch_dims={0}, rhs_contracting_dims={1}
  %sharding_constraint.2381 = bf16[1,8,1024,4096]{3,2,1,0} copy(%dot.1098)
  %reshape.13668 = bf16[1,8,1,1024,4096]{4,3,2,1,0} reshape(%sharding_constraint.2381)
  %all-to-all.187 = bf16[1,8,1,1024,4096]{4,3,2,1,0} all-to-all(%reshape.13668), channel_id=788, replica_groups=[1,8]<=[8], dimensions={1}
  %transpose.317 = bf16[8,1,1,1024,4096]{4,3,2,0,1} transpose(%all-to-all.187), dimensions={1,0,2,3,4}
  %reshape.13669 = bf16[8,1,1024,4096]{3,2,1,0} reshape(%transpose.317)
  %dot.1099 = bf16[1,4096,8,1024]{3,2,1,0} dot(%sharding_constraint.2370, %reshape.13669), lhs_batch_dims={0}, lhs_contracting_dims={2}, rhs_batch_dims={1}, rhs_contracting_dims={3}
  %sharding_constraint.2382 = bf16[1,4096,8,1024]{3,2,1,0} copy(%dot.1099)
  %pad.30 = bf16[1,4096,8,1025]{3,2,1,0} pad(%sharding_constraint.2382, %constant.1190), padding=0_0x0_0x0_0x1_0
  %mul.9113 = bf16[1,4096,8,1025]{3,2,1,0} multiply(%pad.30, %convert_element_type.3002)
  %reduce.917 = bf16[1,4096,8]{2,1,0} reduce(%mul.9113, %constant.1190), dimensions={3}, to_apply=%region_944.24462
  %mul.9116 = bf16[1,4096,8]{2,1,0} multiply(%reduce.917, %convert_element_type.3000)
  %gather.93 = bf16[1,4096,2]{2,1,0} gather(%mul.9116, %subtract.218), offset_dims={}, collapsed_slice_dims={0,1,2}, start_index_map={0,1,2}, index_vector_dim=3, slice_sizes={1,1,1}
  %select_n.688 = bf16[1,4096,2]{2,1,0} select(%reduce.916, %gather.93, %broadcast.3427)
  %select_n.689 = bf16[1,4096,2]{2,1,0} select(%eq.2492, %select_n.688, %broadcast.3427)
  %convert_element_type.3004 = f32[1,4096,2]{2,1,0} convert(%select_n.689)
  %div.1410 = f32[1,4096,2]{2,1,0} divide(%convert_element_type.3004, %div.1406)
  %mul.9119 = f32[1,4096]{1,0} multiply(%reduce.913, %reduce.913)
  %div.1411 = f32[1,4096]{1,0} divide(%add.1847, %mul.9119)
  %mul.9120 = f32[1,4096,2]{2,1,0} broadcast(%div.1411), dimensions={0,1}
  %mul.9121 = f32[1,4096,2]{2,1,0} multiply(%convert_element_type.3004, %mul.9120)
  %mul.9122 = f32[1,4096,2]{2,1,0} multiply(%mul.9121, %exp.251)
  %reduce.918 = f32[1,4096]{1,0} reduce(%mul.9122, %constant.1360), dimensions={2}, to_apply=%region_945.24479
  %neg.311 = f32[1,4096]{1,0} negate(%reduce.918)
  %broadcast_in_dim.798 = f32[1,4096,2]{2,1,0} broadcast(%neg.311), dimensions={0,1}
  %add_any.489 = f32[1,4096,2]{2,1,0} add(%div.1410, %broadcast_in_dim.798)
  %mul.9123 = f32[1,4096,2]{2,1,0} multiply(%add_any.489, %exp.251)
  %convert_element_type.3005 = bf16[1,4096,2]{2,1,0} convert(%mul.9123)
  %scatter.285 = bf16[1,4096,8]{2,1,0} scatter(%broadcast.3379, %reshape.13661, %convert_element_type.3005), update_window_dims={}, inserted_window_dims={2}, scatter_dims_to_operand_dims={2}, input_batching_dims={0,1}, scatter_indices_batching_dims={0,1}, index_vector_dim=3, to_apply=%region_946.24489.clone
  %sharding_constraint.2383 = bf16[1,4096,8]{2,1,0} copy(%scatter.285)
  %dot.1100 = bf16[1,4096,4096]{2,1,0} dot(%sharding_constraint.2383, %all-gather.410), lhs_contracting_dims={2}, rhs_contracting_dims={1}
  %add_any.490 = bf16[1,4096,4096]{2,1,0} add(%dot.1097, %dot.1100)
  %sharding_constraint.2384 = bf16[1,4096,4096]{2,1,0} copy(%add_any.490)
  %mul.9125 = bf16[1,4096,4096]{2,1,0} multiply(%sharding_constraint.2384, %mul.9096)
  %convert_element_type.3006 = f32[1,4096,4096]{2,1,0} convert(%mul.9125)
  %mul.9132 = f32[1,4096,4096]{2,1,0} multiply(%convert_element_type.3006, %mul.9094)
  %mul.9133 = f32[1,4096,4096]{2,1,0} multiply(%convert_element_type.2993, %convert_element_type.3006)
  %reduce.919 = f32[1,4096]{1,0} reduce(%mul.9133, %constant.1360), dimensions={2}, to_apply=%region_947.24505
  %reshape.13682 = f32[1,4096,1]{2,1,0} reshape(%reduce.919)
  %div.1413 = f32[1,4096,1]{2,1,0} divide(%rsqrt.190, %add.2404)
  %mul.9138 = f32[1,4096,1]{2,1,0} multiply(%div.1413, %broadcast.3620)
  %mul.9139 = f32[1,4096,1]{2,1,0} multiply(%reshape.13682, %mul.9138)
  %mul.9140 = f32[1,4096,1]{2,1,0} multiply(%mul.9139, %mul.4455)
  %mul.9141 = f32[1,4096]{1,0} reshape(%mul.9140)
  %mul.9142 = f32[1,4096,4096]{2,1,0} broadcast(%mul.9141), dimensions={0,1}
  %mul.9143 = f32[1,4096,4096]{2,1,0} multiply(%convert_element_type.2993, %mul.9142)
  %add_any.491 = f32[1,4096,4096]{2,1,0} add(%mul.9132, %mul.9143)
  %convert_element_type.3007 = bf16[1,4096,4096]{2,1,0} convert(%add_any.491)
  %add_any.492 = bf16[1,4096,4096]{2,1,0} add(%sharding_constraint.2352, %convert_element_type.3007)
  %get-tuple-element.1377 = f32[1,32,4096,1]{3,2,1,0} get-tuple-element(%te_fused_attn_forward_ffi.248), index=1
  %get-tuple-element.1378 = u32[2,4]{1,0} get-tuple-element(%te_fused_attn_forward_ffi.248), index=2
  %sharding_constraint.2385 = u32[2,4]{1,0} copy(%get-tuple-element.1378)
  %sharding_constraint.2386 = bf16[1,4096,4096]{2,1,0} copy(%add_any.492)
  %dot.1101 = bf16[1,4096,32,128]{3,2,1,0} dot(%sharding_constraint.2386, %all-gather.409), lhs_contracting_dims={2}, rhs_contracting_dims={2}
  %sharding_constraint.2387 = bf16[1,4096,32,128]{3,2,1,0} copy(%dot.1101)
  %te_fused_attn_backward_ffi.150 = (bf16[1,4096,32,128]{3,2,1,0}, bf16[1,4096,8,128]{3,2,1,0}, bf16[1,4096,8,128]{3,2,1,0}, bf16[0]{0}, u8[134742064]{0}) custom-call(%sharding_constraint.2356, %sharding_constraint.2358, %sharding_constraint.2359, %constant.1403, %get-tuple-element.1377, /*index=5*/%sharding_constraint.2385, %get-tuple-element.1364, %sharding_constraint.2387, %concatenate.651, %concatenate.652, /*index=10*/%constant.1416, %constant.1416, %constant.1416, %constant.1416, %constant.1416, /*index=15*/%constant.1416), custom_call_target="te_fused_attn_backward_ffi", operand_layout_constraints={bf16[1,4096,32,128]{3,2,1,0}, bf16[1,4096,8,128]{3,2,1,0}, bf16[1,4096,8,128]{3,2,1,0}, bf16[0]{0}, f32[1,32,4096,1]{3,2,1,0}, u32[2,4]{1,0}, bf16[1,4096,32,128]{3,2,1,0}, bf16[1,4096,32,128]{3,2,1,0}, s32[2]{0}, s32[2]{0}, f32[0]{0}, f32[0]{0}, f32[0]{0}, f32[0]{0}, f32[0]{0}, f32[0]{0}}, api_version=API_VERSION_TYPED_FFI, backend_config={attn_heads = 32 : i64, bias_batch = 0 : i64, bias_heads = 0 : i64, bias_type = 0 : i64, deterministic = false, dropout_probability = 0.000000e+00 : f64, input_batch = 1 : i64, is_training = true, kv_max_seqlen = 4096 : i64, mask_type = 3 : i64, max_segments_per_seq = 1 : i64, num_gqa_groups = 8 : i64, q_max_seqlen = 4096 : i64, qk_head_dim = 128 : i64, qkv_layout = 9 : i64, scaling_factor = 1.000000e+00 : f64, v_head_dim = 128 : i64, window_size_left = -1 : i64, window_size_right = -1 : i64}
  %get-tuple-element.1379 = bf16[1,4096,8,128]{3,2,1,0} get-tuple-element(%te_fused_attn_backward_ffi.150), index=2
  %sharding_constraint.2388 = bf16[1,4096,8,128]{3,2,1,0} copy(%get-tuple-element.1379)
  %dot.1102 = bf16[1,4096,4096]{2,1,0} dot(%sharding_constraint.2388, %all-gather.408), lhs_contracting_dims={2,3}, rhs_contracting_dims={1,2}
  %get-tuple-element.1380 = bf16[1,4096,8,128]{3,2,1,0} get-tuple-element(%te_fused_attn_backward_ffi.150), index=1
  %sharding_constraint.2389 = bf16[1,4096,8,128]{3,2,1,0} copy(%get-tuple-element.1380)
  %slice.754 = bf16[1,4096,8,64]{3,2,1,0} slice(%sharding_constraint.2389), slice={[0:1], [0:4096], [0:8], [64:128]}
  %mul.9147 = bf16[1,4096,8,64]{3,2,1,0} multiply(%slice.754, %mul.9080)
  %slice.755 = bf16[1,4096,8,64]{3,2,1,0} slice(%sharding_constraint.2389), slice={[0:1], [0:4096], [0:8], [0:64]}
  %mul.9150 = bf16[1,4096,8,64]{3,2,1,0} multiply(%slice.755, %mul.9075)
  %add_any.493 = bf16[1,4096,8,64]{3,2,1,0} add(%mul.9147, %mul.9150)
  %mul.9153 = bf16[1,4096,8,64]{3,2,1,0} multiply(%slice.754, %mul.9075)
  %neg.312 = bf16[1,4096,8,64]{3,2,1,0} negate(%slice.755)
  %mul.9156 = bf16[1,4096,8,64]{3,2,1,0} multiply(%neg.312, %mul.9080)
  %add_any.494 = bf16[1,4096,8,64]{3,2,1,0} add(%mul.9153, %mul.9156)
  %concatenate.660 = bf16[1,4096,8,128]{3,2,1,0} concatenate(%add_any.493, %add_any.494), dimensions={3}
  %dot.1103 = bf16[1,4096,4096]{2,1,0} dot(%concatenate.660, %all-gather.407), lhs_contracting_dims={2,3}, rhs_contracting_dims={1,2}
  %add_any.495 = bf16[1,4096,4096]{2,1,0} add(%dot.1102, %dot.1103)
  %sharding_constraint.2390 = bf16[1,4096,4096]{2,1,0} copy(%add_any.495)
  %get-tuple-element.1381 = bf16[1,4096,32,128]{3,2,1,0} get-tuple-element(%te_fused_attn_backward_ffi.150), index=0
  %sharding_constraint.2391 = bf16[1,4096,32,128]{3,2,1,0} copy(%get-tuple-element.1381)
  %slice.756 = bf16[1,4096,32,64]{3,2,1,0} slice(%sharding_constraint.2391), slice={[0:1], [0:4096], [0:32], [64:128]}
  %mul.9159 = bf16[1,4096,32,64]{3,2,1,0} multiply(%slice.756, %mul.9064)
  %slice.757 = bf16[1,4096,32,64]{3,2,1,0} slice(%sharding_constraint.2391), slice={[0:1], [0:4096], [0:32], [0:64]}
  %mul.9162 = bf16[1,4096,32,64]{3,2,1,0} multiply(%slice.757, %mul.9061)
  %add_any.496 = bf16[1,4096,32,64]{3,2,1,0} add(%mul.9159, %mul.9162)
  %mul.9173 = bf16[1,4096,32,64]{3,2,1,0} multiply(%slice.756, %mul.9061)
  %neg.313 = bf16[1,4096,32,64]{3,2,1,0} negate(%slice.757)
  %mul.9184 = bf16[1,4096,32,64]{3,2,1,0} multiply(%neg.313, %mul.9064)
  %add_any.497 = bf16[1,4096,32,64]{3,2,1,0} add(%mul.9173, %mul.9184)
  %concatenate.661 = bf16[1,4096,32,128]{3,2,1,0} concatenate(%add_any.496, %add_any.497), dimensions={3}
  %dot.1104 = bf16[1,4096,4096]{2,1,0} dot(%concatenate.661, %all-gather.406), lhs_contracting_dims={2,3}, rhs_contracting_dims={1,2}
  %sharding_constraint.2392 = bf16[1,4096,4096]{2,1,0} copy(%dot.1104)
  %add_any.498 = bf16[1,4096,4096]{2,1,0} add(%sharding_constraint.2390, %sharding_constraint.2392)
  %sharding_constraint.2393 = bf16[1,4096,4096]{2,1,0} copy(%add_any.498)
  %mul.9187 = bf16[1,4096,4096]{2,1,0} multiply(%sharding_constraint.2393, %mul.9048)
  %convert_element_type.3009 = f32[1,4096,4096]{2,1,0} convert(%mul.9187)
  %mul.9190 = f32[1,4096,4096]{2,1,0} multiply(%convert_element_type.3009, %mul.9046)
  %mul.9191 = f32[1,4096,4096]{2,1,0} multiply(%convert_element_type.2977, %convert_element_type.3009)
  %reduce.920 = f32[1,4096]{1,0} reduce(%mul.9191, %constant.1360), dimensions={2}, to_apply=%region_948.24584
  %reshape.13690 = f32[1,4096,1]{2,1,0} reshape(%reduce.920)
  %div.1414 = f32[1,4096,1]{2,1,0} divide(%rsqrt.189, %add.2399)
  %mul.9192 = f32[1,4096,1]{2,1,0} multiply(%div.1414, %broadcast.3620)
  %mul.9193 = f32[1,4096,1]{2,1,0} multiply(%reshape.13690, %mul.9192)
  %mul.9194 = f32[1,4096,1]{2,1,0} multiply(%mul.9193, %mul.4455)
  %mul.9195 = f32[1,4096]{1,0} reshape(%mul.9194)
  %mul.9196 = f32[1,4096,4096]{2,1,0} broadcast(%mul.9195), dimensions={0,1}
  %mul.9197 = f32[1,4096,4096]{2,1,0} multiply(%convert_element_type.2977, %mul.9196)
  %add_any.499 = f32[1,4096,4096]{2,1,0} add(%mul.9190, %mul.9197)
  %convert_element_type.3010 = bf16[1,4096,4096]{2,1,0} convert(%add_any.499)
  %add_any.500 = bf16[1,4096,4096]{2,1,0} add(%add_any.492, %convert_element_type.3010)
  %sharding_constraint.2394 = bf16[1,4096,4096]{2,1,0} copy(%add_any.500)
  %tuple.347 = (bf16[512,8]{1,0}, bf16[1,4096,14336]{2,1,0}, bf16[1,4096,14336]{2,1,0}, bf16[1,14336,4096]{2,1,0}, bf16[4096]{0}, /*index=5*/bf16[4096]{0}, bf16[512,8,128]{2,1,0}, bf16[32,128,512]{2,1,0}, bf16[512,32,128]{2,1,0}, bf16[512,8,128]{2,1,0}, /*index=10*/bf16[1,4096,4096]{2,1,0}, s32[1,4096]{1,0}, s32[1,4096]{1,0}, bf16[1,4096,4096]{2,1,0}) tuple(%param.13, %param.14, %param.15, %param.16, %param.12, /*index=5*/%param.5, %param.8, %param.11, %param.6, %param.9, /*index=10*/%sharding_constraint.162, %param.10, %param.7, %sharding_constraint.2394)
  %remat2.42 = (bf16[512,8]{1,0}, bf16[1,4096,14336]{2,1,0}, bf16[1,4096,14336]{2,1,0}, bf16[1,14336,4096]{2,1,0}, bf16[4096]{0}, /*index=5*/bf16[4096]{0}, bf16[512,8,128]{2,1,0}, bf16[32,128,512]{2,1,0}, bf16[512,32,128]{2,1,0}, bf16[512,8,128]{2,1,0}, /*index=10*/bf16[1,4096,4096]{2,1,0}, s32[1,4096]{1,0}, s32[1,4096]{1,0}, bf16[1,4096,4096]{2,1,0}) opt-barrier(%tuple.347)
  %get-tuple-element.1382 = bf16[1,4096,4096]{2,1,0} get-tuple-element(%remat2.42), index=10
  %sharding_constraint.2395 = bf16[1,4096,4096]{2,1,0} copy(%get-tuple-element.1382)
  %convert_element_type.3011 = f32[1,4096,4096]{2,1,0} convert(%sharding_constraint.2395)
  %square.130 = f32[1,4096,4096]{2,1,0} multiply(%convert_element_type.3011, %convert_element_type.3011)
  %reduce.921 = f32[1,4096]{1,0} reduce(%square.130, %constant.1360), dimensions={2}, to_apply=%region_949.24624
  %div.1415 = f32[1,4096]{1,0} multiply(%reduce.921, %broadcast.3412)
  %add.2415 = f32[1,4096]{1,0} add(%div.1415, %broadcast.3413)
  %add.2416 = f32[1,4096,1]{2,1,0} reshape(%add.2415)
  %rsqrt.191 = f32[1,4096,1]{2,1,0} rsqrt(%add.2416)
  %mul.9198 = f32[1,4096]{1,0} reshape(%rsqrt.191)
  %mul.9199 = f32[1,4096,4096]{2,1,0} broadcast(%mul.9198), dimensions={0,1}
  %mul.9201 = f32[1,4096,4096]{2,1,0} multiply(%convert_element_type.3011, %mul.9199)
  %convert_element_type.3012 = bf16[1,4096,4096]{2,1,0} convert(%mul.9201)
  %get-tuple-element.1383 = bf16[4096]{0} get-tuple-element(%remat2.42), index=5
  %mul.9202 = bf16[1,4096,4096]{2,1,0} broadcast(%get-tuple-element.1383), dimensions={2}
  %mul.9203 = bf16[1,4096,4096]{2,1,0} multiply(%convert_element_type.3012, %mul.9202)
  %sharding_constraint.2396 = bf16[1,4096,4096]{2,1,0} copy(%mul.9203)
  %sharding_constraint.2397 = bf16[1,4096,4096]{2,1,0} copy(%sharding_constraint.2396)
  %get-tuple-element.1384 = bf16[512,32,128]{2,1,0} get-tuple-element(%remat2.42), index=8
  %all-gather.412 = bf16[4096,32,128]{2,1,0} all-gather(%get-tuple-element.1384), channel_id=791, replica_groups=[1,8]<=[8], dimensions={0}, use_global_device_ids=true
  %dot.1105 = bf16[1,4096,32,128]{3,2,1,0} dot(%sharding_constraint.2397, %all-gather.412), lhs_contracting_dims={2}, rhs_contracting_dims={0}
  %slice.758 = bf16[1,4096,32,64]{3,2,1,0} slice(%dot.1105), slice={[0:1], [0:4096], [0:32], [0:64]}
  %get-tuple-element.1385 = s32[1,4096]{1,0} get-tuple-element(%remat2.42), index=12
  %convert_element_type.3013 = f32[1,4096]{1,0} convert(%get-tuple-element.1385)
  %div.1417 = f32[1,4096,1,64]{3,2,1,0} broadcast(%convert_element_type.3013), dimensions={0,1}
  %div.1422 = f32[1,4096,1,64]{3,2,1,0} divide(%div.1417, %div.402)
  %cos.127 = f32[1,4096,1,64]{3,2,1,0} cosine(%div.1422)
  %convert_element_type.3016 = bf16[1,4096,1,64]{3,2,1,0} convert(%cos.127)
  %mul.9213 = bf16[1,4096,64]{2,1,0} reshape(%convert_element_type.3016)
  %mul.9223 = bf16[1,4096,32,64]{3,2,1,0} broadcast(%mul.9213), dimensions={0,1,3}
  %mul.9224 = bf16[1,4096,32,64]{3,2,1,0} multiply(%slice.758, %mul.9223)
  %slice.759 = bf16[1,4096,32,64]{3,2,1,0} slice(%dot.1105), slice={[0:1], [0:4096], [0:32], [64:128]}
  %sin.126 = f32[1,4096,1,64]{3,2,1,0} sine(%div.1422)
  %convert_element_type.3017 = bf16[1,4096,1,64]{3,2,1,0} convert(%sin.126)
  %mul.9225 = bf16[1,4096,64]{2,1,0} reshape(%convert_element_type.3017)
  %mul.9226 = bf16[1,4096,32,64]{3,2,1,0} broadcast(%mul.9225), dimensions={0,1,3}
  %mul.9227 = bf16[1,4096,32,64]{3,2,1,0} multiply(%slice.759, %mul.9226)
  %sub.416 = bf16[1,4096,32,64]{3,2,1,0} subtract(%mul.9224, %mul.9227)
  %mul.9230 = bf16[1,4096,32,64]{3,2,1,0} multiply(%slice.759, %mul.9223)
  %mul.9233 = bf16[1,4096,32,64]{3,2,1,0} multiply(%slice.758, %mul.9226)
  %add.2417 = bf16[1,4096,32,64]{3,2,1,0} add(%mul.9230, %mul.9233)
  %concatenate.662 = bf16[1,4096,32,128]{3,2,1,0} concatenate(%sub.416, %add.2417), dimensions={3}
  %sharding_constraint.2398 = bf16[1,4096,32,128]{3,2,1,0} copy(%concatenate.662)
  %get-tuple-element.1386 = bf16[512,8,128]{2,1,0} get-tuple-element(%remat2.42), index=6
  %all-gather.413 = bf16[4096,8,128]{2,1,0} all-gather(%get-tuple-element.1386), channel_id=792, replica_groups=[1,8]<=[8], dimensions={0}, use_global_device_ids=true
  %dot.1106 = bf16[1,4096,8,128]{3,2,1,0} dot(%sharding_constraint.2397, %all-gather.413), lhs_contracting_dims={2}, rhs_contracting_dims={0}
  %slice.760 = bf16[1,4096,8,64]{3,2,1,0} slice(%dot.1106), slice={[0:1], [0:4096], [0:8], [0:64]}
  %mul.9236 = bf16[1,4096,8,64]{3,2,1,0} broadcast(%mul.9213), dimensions={0,1,3}
  %mul.9237 = bf16[1,4096,8,64]{3,2,1,0} multiply(%slice.760, %mul.9236)
  %slice.761 = bf16[1,4096,8,64]{3,2,1,0} slice(%dot.1106), slice={[0:1], [0:4096], [0:8], [64:128]}
  %mul.9240 = bf16[1,4096,8,64]{3,2,1,0} broadcast(%mul.9225), dimensions={0,1,3}
  %mul.9241 = bf16[1,4096,8,64]{3,2,1,0} multiply(%slice.761, %mul.9240)
  %sub.417 = bf16[1,4096,8,64]{3,2,1,0} subtract(%mul.9237, %mul.9241)
  %mul.9245 = bf16[1,4096,8,64]{3,2,1,0} multiply(%slice.761, %mul.9236)
  %mul.9248 = bf16[1,4096,8,64]{3,2,1,0} multiply(%slice.760, %mul.9240)
  %add.2418 = bf16[1,4096,8,64]{3,2,1,0} add(%mul.9245, %mul.9248)
  %concatenate.663 = bf16[1,4096,8,128]{3,2,1,0} concatenate(%sub.417, %add.2418), dimensions={3}
  %sharding_constraint.2400 = bf16[1,4096,8,128]{3,2,1,0} copy(%concatenate.663)
  %get-tuple-element.1387 = bf16[512,8,128]{2,1,0} get-tuple-element(%remat2.42), index=9
  %all-gather.414 = bf16[4096,8,128]{2,1,0} all-gather(%get-tuple-element.1387), channel_id=793, replica_groups=[1,8]<=[8], dimensions={0}, use_global_device_ids=true
  %dot.1107 = bf16[1,4096,8,128]{3,2,1,0} dot(%sharding_constraint.2397, %all-gather.414), lhs_contracting_dims={2}, rhs_contracting_dims={0}
  %sharding_constraint.2401 = bf16[1,4096,8,128]{3,2,1,0} copy(%dot.1107)
  %get-tuple-element.1388 = s32[1,4096]{1,0} get-tuple-element(%remat2.42), index=11
  %eq.2499 = s32[1,4096,4096]{2,1,0} broadcast(%get-tuple-element.1388), dimensions={0,1}
  %eq.2500 = s32[1,4096,4096]{2,1,0} broadcast(%get-tuple-element.1388), dimensions={0,2}
  %eq.2501 = pred[1,4096,4096]{2,1,0} compare(%eq.2499, %eq.2500), direction=EQ
  %and.222 = pred[1,4096,4096]{2,1,0} and(%eq.2501, %and.64)
  %select_n.692 = f32[1,4096,4096]{2,1,0} select(%and.222, %broadcast_in_dim.516, %broadcast_in_dim.517)
  %ne.129 = pred[1,4096,4096]{2,1,0} compare(%select_n.692, %broadcast_in_dim.516), direction=NE
  %not.127 = pred[1,4096,4096]{2,1,0} not(%ne.129)
  %convert_element_type.3023 = s32[1,4096,4096]{2,1,0} convert(%not.127)
  %reduce.922 = s32[1,4096]{1,0} reduce(%convert_element_type.3023, %constant.1181), dimensions={1}, to_apply=%region_950.24720
  %reduce_sum.5765 = s32[1,1,1,4096]{3,2,1,0} reshape(%reduce.922)
  %slice.762 = s32[1,1,1,1]{3,2,1,0} slice(%reduce_sum.5765), slice={[0:1], [0:1], [0:1], [0:1]}
  %squeeze.63 = s32[1,1]{1,0} reshape(%slice.762)
  %reshape.13696 = s32[1]{0} reshape(%squeeze.63)
  %lt.252 = pred[1]{0} compare(%reshape.13696, %constant.1418), direction=LT
  %select_n.693 = s32[1]{0} select(%lt.252, %broadcast_in_dim.518, %reshape.13696)
  %concatenate.664 = s32[2]{0} concatenate(%constant.1418, %select_n.693), dimensions={0}
  %reduce.923 = s32[1,4096]{1,0} reduce(%convert_element_type.3023, %constant.1181), dimensions={2}, to_apply=%region_951.24729
  %reduce_sum.5766 = s32[1,1,1,4096]{3,2,1,0} reshape(%reduce.923)
  %reduce.924 = s32[1,1]{1,0} reduce(%reduce_sum.5766, %constant.1415), dimensions={3,2}, to_apply=%region_952.24735
  %reshape.13697 = s32[1]{0} reshape(%reduce.924)
  %lt.253 = pred[1]{0} compare(%reshape.13697, %constant.1418), direction=LT
  %select_n.694 = s32[1]{0} select(%lt.253, %broadcast_in_dim.518, %reshape.13697)
  %concatenate.665 = s32[2]{0} concatenate(%constant.1418, %select_n.694), dimensions={0}
  %te_fused_attn_forward_ffi.252 = (bf16[1,4096,32,128]{3,2,1,0}, f32[1,32,4096,1]{3,2,1,0}, u32[2,4]{1,0}, u8[48]{0}) custom-call(%sharding_constraint.2398, %sharding_constraint.2400, %sharding_constraint.2401, %constant.1403, %dynamic-slice.38, /*index=5*/%concatenate.664, %concatenate.665, %constant.1416, %constant.1416, %constant.1416, /*index=10*/%constant.1416, %constant.1416, %constant.1416), custom_call_target="te_fused_attn_forward_ffi", operand_layout_constraints={bf16[1,4096,32,128]{3,2,1,0}, bf16[1,4096,8,128]{3,2,1,0}, bf16[1,4096,8,128]{3,2,1,0}, bf16[0]{0}, u32[2]{0}, s32[2]{0}, s32[2]{0}, f32[0]{0}, f32[0]{0}, f32[0]{0}, f32[0]{0}, f32[0]{0}, f32[0]{0}}, api_version=API_VERSION_TYPED_FFI, backend_config={attn_heads = 32 : i64, bias_batch = 0 : i64, bias_heads = 0 : i64, bias_type = 0 : i64, deterministic = false, dropout_probability = 0.000000e+00 : f64, input_batch = 1 : i64, is_training = true, kv_max_seqlen = 4096 : i64, mask_type = 3 : i64, max_segments_per_seq = 1 : i64, num_gqa_groups = 8 : i64, q_max_seqlen = 4096 : i64, qk_head_dim = 128 : i64, qkv_layout = 9 : i64, scaling_factor = 1.000000e+00 : f64, v_head_dim = 128 : i64, window_size_left = -1 : i64, window_size_right = -1 : i64}
  %get-tuple-element.1389 = bf16[1,4096,32,128]{3,2,1,0} get-tuple-element(%te_fused_attn_forward_ffi.252), index=0
  %sharding_constraint.2402 = bf16[1,4096,32,128]{3,2,1,0} copy(%get-tuple-element.1389)
  %get-tuple-element.1390 = bf16[32,128,512]{2,1,0} get-tuple-element(%remat2.42), index=7
  %all-gather.415 = bf16[32,128,4096]{2,1,0} all-gather(%get-tuple-element.1390), channel_id=794, replica_groups=[1,8]<=[8], dimensions={2}, use_global_device_ids=true
  %dot.1108 = bf16[1,4096,4096]{2,1,0} dot(%sharding_constraint.2402, %all-gather.415), lhs_contracting_dims={2,3}, rhs_contracting_dims={0,1}
  %sharding_constraint.2403 = bf16[1,4096,4096]{2,1,0} copy(%dot.1108)
  %add.2419 = bf16[1,4096,4096]{2,1,0} add(%sharding_constraint.2395, %sharding_constraint.2403)
  %convert_element_type.3025 = f32[1,4096,4096]{2,1,0} convert(%add.2419)
  %square.131 = f32[1,4096,4096]{2,1,0} multiply(%convert_element_type.3025, %convert_element_type.3025)
  %reduce.925 = f32[1,4096]{1,0} reduce(%square.131, %constant.1360), dimensions={2}, to_apply=%region_953.24750
  %div.1427 = f32[1,4096]{1,0} multiply(%reduce.925, %broadcast.3412)
  %add.2420 = f32[1,4096]{1,0} add(%div.1427, %broadcast.3413)
  %add.2421 = f32[1,4096,1]{2,1,0} reshape(%add.2420)
  %rsqrt.192 = f32[1,4096,1]{2,1,0} rsqrt(%add.2421)
  %mul.9249 = f32[1,4096]{1,0} reshape(%rsqrt.192)
  %mul.9250 = f32[1,4096,4096]{2,1,0} broadcast(%mul.9249), dimensions={0,1}
  %mul.9251 = f32[1,4096,4096]{2,1,0} multiply(%convert_element_type.3025, %mul.9250)
  %convert_element_type.3026 = bf16[1,4096,4096]{2,1,0} convert(%mul.9251)
  %get-tuple-element.1391 = bf16[4096]{0} get-tuple-element(%remat2.42), index=4
  %mul.9252 = bf16[1,4096,4096]{2,1,0} broadcast(%get-tuple-element.1391), dimensions={2}
  %mul.9253 = bf16[1,4096,4096]{2,1,0} multiply(%convert_element_type.3026, %mul.9252)
  %sharding_constraint.2404 = bf16[1,4096,4096]{2,1,0} copy(%mul.9253)
  %get-tuple-element.1392 = bf16[512,8]{1,0} get-tuple-element(%remat2.42), index=0
  %all-gather.416 = bf16[4096,8]{1,0} all-gather(%get-tuple-element.1392), channel_id=795, replica_groups=[1,8]<=[8], dimensions={0}, use_global_device_ids=true
  %dot.1109 = bf16[1,4096,8]{2,1,0} dot(%sharding_constraint.2404, %all-gather.416), lhs_contracting_dims={2}, rhs_contracting_dims={0}
  %sharding_constraint.2405 = bf16[1,4096,8]{2,1,0} copy(%dot.1109)
  %top_k.189 = bf16[4096,8]{1,0} reshape(%sharding_constraint.2405)
  %top_k.190 = (bf16[4096,2]{1,0}, s32[4096,2]{1,0}) custom-call(%top_k.189), custom_call_target="TopK", called_computations={%compare_greater_than.63.24771.clone}
  %get-tuple-element.1393 = bf16[4096,2]{1,0} get-tuple-element(%top_k.190), index=0
  %get-tuple-element.1394 = s32[4096,2]{1,0} get-tuple-element(%top_k.190), index=1
  %add.2422 = s32[4096,2]{1,0} add(%get-tuple-element.1394, %broadcast.3418)
  %sort.127 = (bf16[4096,2]{1,0}, s32[4096,2]{1,0}) sort(%get-tuple-element.1393, %add.2422), dimensions={1}, is_stable=true, to_apply=%compare-value-and-index.63
  %get-tuple-element.1396 = s32[4096,2]{1,0} get-tuple-element(%sort.127), index=1
  %slice.764 = s32[4096,2]{1,0} slice(%get-tuple-element.1396), slice={[0:4096], [0:2]}
  %reshape.13699 = s32[1,4096,2,1]{3,2,1,0} reshape(%slice.764)
  %iota.2920 = s32[1,4096,2,1]{3,2,1,0} iota(), iota_dimension=1
  %top_k.191 = s32[1,4096,2]{2,1,0} reshape(%slice.764)
  %lt.254 = pred[1,4096,2]{2,1,0} compare(%top_k.191, %broadcast.3419), direction=LT
  %add.2427 = s32[1,4096,2]{2,1,0} add(%top_k.191, %broadcast.3420)
  %select_n.695 = s32[1,4096,2]{2,1,0} select(%lt.254, %add.2427, %top_k.191)
  %broadcast_in_dim.803 = s32[1,4096,2,1]{3,2,1,0} reshape(%select_n.695)
  %concatenate.666 = s32[1,4096,2,3]{3,2,1,0} concatenate(%add.1356, %iota.2920, %broadcast_in_dim.803), dimensions={3}
  %subtract.220 = s32[1,4096,2,3]{3,2,1,0} subtract(%concatenate.666, %broadcast.3428)
  %scatter.286 = u32[1,4096,8]{2,1,0} scatter(%dynamic-slice.43, %subtract.220, %add.1401), update_window_dims={}, inserted_window_dims={0,1,2}, scatter_dims_to_operand_dims={0,1,2}, index_vector_dim=3, to_apply=%region_954.24810.clone
  %gather.94 = u32[1,4096,2]{2,1,0} gather(%scatter.286, %subtract.220), offset_dims={}, collapsed_slice_dims={0,1,2}, start_index_map={0,1,2}, index_vector_dim=3, slice_sizes={1,1,1}
  %eq.2502 = pred[1,4096,2]{2,1,0} compare(%add.1401, %gather.94), direction=EQ
  %ge.31 = pred[1,4096,2,3]{3,2,1,0} compare(%concatenate.666, %broadcast.3629), direction=GE
  %le.191 = pred[1,4096,2,3]{3,2,1,0} compare(%concatenate.666, %le.67), direction=LE
  %and.223 = pred[1,4096,2,3]{3,2,1,0} and(%ge.31, %le.191)
  %reduce.926 = pred[1,4096,2]{2,1,0} reduce(%and.223, %constant.5574), dimensions={3}, to_apply=%region_955.24821
  %get-tuple-element.1398 = bf16[1,4096,4096]{2,1,0} get-tuple-element(%remat2.42), index=13
  %sharding_constraint.2406 = bf16[1,4096,4096]{2,1,0} copy(%get-tuple-element.1398)
  %sharding_constraint.2409 = bf16[1,4096,4096]{2,1,0} copy(%sharding_constraint.2406)
  %get-tuple-element.1395 = bf16[4096,2]{1,0} get-tuple-element(%sort.127), index=0
  %slice.763 = bf16[4096,2]{1,0} slice(%get-tuple-element.1395), slice={[0:4096], [0:2]}
  %convert_element_type.3027 = f32[4096,2]{1,0} convert(%slice.763)
  %convert_element_type.3028 = f32[1,4096,2]{2,1,0} reshape(%convert_element_type.3027)
  %reduce.927 = f32[4096]{0} reduce(%convert_element_type.3027, %constant.1450), dimensions={1}, to_apply=%region_956.24830
  %sub.418 = f32[1,4096]{1,0} reshape(%reduce.927)
  %sub.419 = f32[1,4096,2]{2,1,0} broadcast(%sub.418), dimensions={0,1}
  %sub.420 = f32[1,4096,2]{2,1,0} subtract(%convert_element_type.3028, %sub.419)
  %exp.253 = f32[1,4096,2]{2,1,0} exponential(%sub.420)
  %reduce.928 = f32[1,4096]{1,0} reduce(%exp.253, %constant.1360), dimensions={2}, to_apply=%region_957.24839
  %div.1428 = f32[1,4096,2]{2,1,0} broadcast(%reduce.928), dimensions={0,1}
  %div.1429 = f32[1,4096,2]{2,1,0} divide(%exp.253, %div.1428)
  %convert_element_type.3029 = bf16[1,4096,2]{2,1,0} convert(%div.1429)
  %select_n.696 = bf16[1,4096,2]{2,1,0} select(%eq.2502, %convert_element_type.3029, %broadcast.3427)
  %scatter.287 = bf16[1,4096,8]{2,1,0} scatter(%broadcast.3379, %subtract.220, %select_n.696), update_window_dims={}, inserted_window_dims={0,1,2}, scatter_dims_to_operand_dims={0,1,2}, index_vector_dim=3, to_apply=%region_958.24848.clone
  %eq.2505 = s32[1,4096,2,8]{3,2,1,0} broadcast(%top_k.191), dimensions={0,1,2}
  %iota.2927 = s32[1,4096,2,8]{3,2,1,0} iota(), iota_dimension=3
  %eq.2506 = pred[1,4096,2,8]{3,2,1,0} compare(%eq.2505, %iota.2927), direction=EQ
  %convert_element_type.3031 = s32[1,4096,2,8]{3,2,1,0} convert(%eq.2506)
  %reshape.13737 = s32[1,8192,8]{2,1,0} reshape(%convert_element_type.3031)
  %sharding_constraint.2410 = s32[1,8192,8]{2,1,0} copy(%reshape.13737)
  %reduce-window.63 = s32[1,8192,8]{2,1,0} reduce-window(%sharding_constraint.2410, %constant.1181), window={size=1x8192x1 pad=0_0x8191_0x0_0}, to_apply=%region_959.24860
  %reshape.13739 = s32[1,4096,2,8]{3,2,1,0} reshape(%reduce-window.63)
  %sharding_constraint.2411 = s32[1,4096,2,8]{3,2,1,0} copy(%reshape.13739)
  %le.192 = pred[1,4096,2,8]{3,2,1,0} compare(%sharding_constraint.2411, %broadcast.3429), direction=LE
  %mul.9254 = s32[1,4096,2,8]{3,2,1,0} select(%le.192, %convert_element_type.3031, %broadcast.3430)
  %reduce.929 = s32[1,4096,8]{2,1,0} reduce(%mul.9254, %constant.1181), dimensions={2}, to_apply=%region_960.24869
  %convert_element_type.3032 = bf16[1,4096,8]{2,1,0} convert(%reduce.929)
  %mul.9255 = bf16[1,4096,8]{2,1,0} multiply(%scatter.287, %convert_element_type.3032)
  %mul.9256 = bf16[1,4096,8,1025]{3,2,1,0} broadcast(%mul.9255), dimensions={0,1,2}
  %mul.9257 = s32[1,8192,8]{2,1,0} multiply(%sharding_constraint.2410, %reduce-window.63)
  %reshape.13740 = s32[1,4096,2,8]{3,2,1,0} reshape(%mul.9257)
  %reduce.930 = s32[1,4096,8]{2,1,0} reduce(%reshape.13740, %constant.1181), dimensions={2}, to_apply=%region_961.24879
  %mul.9258 = s32[1,4096,8]{2,1,0} multiply(%reduce.930, %reduce.929)
  %eq.2507 = s32[1,4096,8,1025]{3,2,1,0} broadcast(%mul.9258), dimensions={0,1,2}
  %iota.2928 = s32[1,4096,8,1025]{3,2,1,0} iota(), iota_dimension=3
  %eq.2508 = pred[1,4096,8,1025]{3,2,1,0} compare(%eq.2507, %iota.2928), direction=EQ
  %convert_element_type.3033 = s32[1,4096,8,1025]{3,2,1,0} convert(%eq.2508)
  %convert_element_type.3034 = bf16[1,4096,8,1025]{3,2,1,0} convert(%convert_element_type.3033)
  %mul.9259 = bf16[1,4096,8,1025]{3,2,1,0} multiply(%mul.9256, %convert_element_type.3034)
  %slice.765 = bf16[1,4096,8,1024]{3,2,1,0} slice(%mul.9259), slice={[0:1], [0:4096], [0:8], [1:1025]}
  %convert_element_type.3035 = pred[1,4096,8,1024]{3,2,1,0} compare(%slice.765, %broadcast.3431), direction=NE
  %sharding_constraint.2414 = pred[1,4096,8,1024]{3,2,1,0} copy(%convert_element_type.3035)
  %dot_general.130 = bf16[1,4096,8,1024]{3,2,1,0} convert(%sharding_constraint.2414)
  %dot.1110 = bf16[1,8,1024,4096]{3,2,1,0} dot(%dot_general.130, %sharding_constraint.2404), lhs_batch_dims={0}, lhs_contracting_dims={1}, rhs_batch_dims={0}, rhs_contracting_dims={1}
  %reshape.13744 = bf16[1,8,1,1024,4096]{4,3,2,1,0} reshape(%dot.1110)
  %all-to-all.188 = bf16[1,8,1,1024,4096]{4,3,2,1,0} all-to-all(%reshape.13744), channel_id=799, replica_groups=[1,8]<=[8], dimensions={1}
  %transpose.318 = bf16[8,1,1,1024,4096]{4,3,2,0,1} transpose(%all-to-all.188), dimensions={1,0,2,3,4}
  %reshape.13745 = bf16[8,1,1024,4096]{3,2,1,0} reshape(%transpose.318)
  %transpose.319 = bf16[1,8,1024,4096]{3,2,0,1} transpose(%reshape.13745), dimensions={1,0,2,3}
  %sharding_constraint.2417 = bf16[1,8,1024,4096]{3,2,0,1} copy(%transpose.319)
  %get-tuple-element.1400 = bf16[1,4096,14336]{2,1,0} get-tuple-element(%remat2.42), index=1
  %sharding_constraint.2419 = bf16[1,4096,14336]{2,1,0} copy(%get-tuple-element.1400)
  %dot.1111 = bf16[1,8,1024,14336]{3,2,1,0} dot(%sharding_constraint.2417, %sharding_constraint.2419), lhs_batch_dims={0}, lhs_contracting_dims={3}, rhs_batch_dims={0}, rhs_contracting_dims={1}
  %sharding_constraint.2420 = bf16[1,8,1024,14336]{3,2,1,0} copy(%dot.1111)
  %neg.314 = bf16[1,8,1024,14336]{3,2,1,0} negate(%sharding_constraint.2420)
  %exp.254 = bf16[1,8,1024,14336]{3,2,1,0} exponential(%neg.314)
  %add.2432 = bf16[1,8,1024,14336]{3,2,1,0} add(%exp.254, %jit_silu_.0)
  %div.1430 = bf16[1,8,1024,14336]{3,2,1,0} divide(%jit_silu_.0, %add.2432)
  %mul.9260 = bf16[1,8,1024,14336]{3,2,1,0} multiply(%sharding_constraint.2420, %div.1430)
  %get-tuple-element.1401 = bf16[1,4096,14336]{2,1,0} get-tuple-element(%remat2.42), index=2
  %sharding_constraint.2422 = bf16[1,4096,14336]{2,1,0} copy(%get-tuple-element.1401)
  %dot.1112 = bf16[1,8,1024,14336]{3,2,1,0} dot(%sharding_constraint.2417, %sharding_constraint.2422), lhs_batch_dims={0}, lhs_contracting_dims={3}, rhs_batch_dims={0}, rhs_contracting_dims={1}
  %sharding_constraint.2424 = bf16[1,8,1024,14336]{3,2,1,0} copy(%dot.1112)
  %mul.9263 = bf16[1,8,1024,14336]{3,2,1,0} multiply(%mul.9260, %sharding_constraint.2424)
  %get-tuple-element.1402 = bf16[1,14336,4096]{2,1,0} get-tuple-element(%remat2.42), index=3
  %sharding_constraint.2426 = bf16[1,14336,4096]{2,1,0} copy(%get-tuple-element.1402)
  %dot.1113 = bf16[1,8,1024,4096]{3,2,1,0} dot(%mul.9263, %sharding_constraint.2426), lhs_batch_dims={0}, lhs_contracting_dims={3}, rhs_batch_dims={0}, rhs_contracting_dims={1}
  %sharding_constraint.2429 = bf16[1,8,1024,4096]{3,2,1,0} copy(%dot.1113)
  %reshape.13749 = bf16[1,8,1,1024,4096]{4,3,2,1,0} reshape(%sharding_constraint.2429)
  %all-to-all.189 = bf16[1,8,1,1024,4096]{4,3,2,1,0} all-to-all(%reshape.13749), channel_id=800, replica_groups=[1,8]<=[8], dimensions={1}
  %transpose.320 = bf16[8,1,1,1024,4096]{4,3,2,0,1} transpose(%all-to-all.189), dimensions={1,0,2,3,4}
  %reshape.13750 = bf16[8,1,1024,4096]{3,2,1,0} reshape(%transpose.320)
  %dot.1114 = bf16[1,4096,8,1024]{3,2,1,0} dot(%sharding_constraint.2409, %reshape.13750), lhs_batch_dims={0}, lhs_contracting_dims={2}, rhs_batch_dims={1}, rhs_contracting_dims={3}
  %sharding_constraint.2430 = bf16[1,4096,8,1024]{3,2,1,0} copy(%dot.1114)
  %pad.31 = bf16[1,4096,8,1025]{3,2,1,0} pad(%sharding_constraint.2430, %constant.1190), padding=0_0x0_0x0_0x1_0
  %mul.9266 = bf16[1,4096,8,1025]{3,2,1,0} multiply(%pad.31, %convert_element_type.3034)
  %reduce.931 = bf16[1,4096,8]{2,1,0} reduce(%mul.9266, %constant.1190), dimensions={3}, to_apply=%region_962.24914
  %mul.9267 = bf16[1,4096,8]{2,1,0} multiply(%reduce.931, %convert_element_type.3032)
  %gather.95 = bf16[1,4096,2]{2,1,0} gather(%mul.9267, %subtract.220), offset_dims={}, collapsed_slice_dims={0,1,2}, start_index_map={0,1,2}, index_vector_dim=3, slice_sizes={1,1,1}
  %select_n.697 = bf16[1,4096,2]{2,1,0} select(%reduce.926, %gather.95, %broadcast.3427)
  %select_n.698 = bf16[1,4096,2]{2,1,0} select(%eq.2502, %select_n.697, %broadcast.3427)
  %convert_element_type.3036 = f32[1,4096,2]{2,1,0} convert(%select_n.698)
  %div.1432 = f32[1,4096,2]{2,1,0} divide(%convert_element_type.3036, %div.1428)
  %mul.9268 = f32[1,4096]{1,0} multiply(%reduce.928, %reduce.928)
  %div.1433 = f32[1,4096]{1,0} divide(%add.1847, %mul.9268)
  %mul.9269 = f32[1,4096,2]{2,1,0} broadcast(%div.1433), dimensions={0,1}
  %mul.9270 = f32[1,4096,2]{2,1,0} multiply(%convert_element_type.3036, %mul.9269)
  %mul.9271 = f32[1,4096,2]{2,1,0} multiply(%mul.9270, %exp.253)
  %reduce.932 = f32[1,4096]{1,0} reduce(%mul.9271, %constant.1360), dimensions={2}, to_apply=%region_963.24931
  %neg.315 = f32[1,4096]{1,0} negate(%reduce.932)
  %broadcast_in_dim.804 = f32[1,4096,2]{2,1,0} broadcast(%neg.315), dimensions={0,1}
  %add_any.501 = f32[1,4096,2]{2,1,0} add(%div.1432, %broadcast_in_dim.804)
  %mul.9272 = f32[1,4096,2]{2,1,0} multiply(%add_any.501, %exp.253)
  %convert_element_type.3038 = bf16[1,4096,2]{2,1,0} convert(%mul.9272)
  %scatter.288 = bf16[1,4096,8]{2,1,0} scatter(%broadcast.3379, %reshape.13699, %convert_element_type.3038), update_window_dims={}, inserted_window_dims={2}, scatter_dims_to_operand_dims={2}, input_batching_dims={0,1}, scatter_indices_batching_dims={0,1}, index_vector_dim=3, to_apply=%region_964.24941.clone
  %sharding_constraint.2431 = bf16[1,4096,8]{2,1,0} copy(%scatter.288)
  %dot.1115 = bf16[4096,8]{1,0} dot(%sharding_constraint.2404, %sharding_constraint.2431), lhs_contracting_dims={0,1}, rhs_contracting_dims={0,1}
  %all-reduce.2 = bf16[4096,8]{1,0} all-reduce(%dot.1115), channel_id=803, replica_groups=[1,8]<=[8], use_global_device_ids=true, to_apply=%add.clone
  %constant.12556 = s32[8]{0} constant({0, 512, 1024, 1536, 2048, 2560, 3072, 3584})
  %dynamic-slice.2172 = s32[1]{0} dynamic-slice(%constant.12556, %partition-id), dynamic_slice_sizes={1}
  %reshape.13763 = s32[] reshape(%dynamic-slice.2172)
  %dynamic-slice.2173 = bf16[512,8]{1,0} dynamic-slice(%all-reduce.2, %reshape.13763, %constant.1181), dynamic_slice_sizes={512,8}
  %mul.9274 = bf16[512,8]{1,0} multiply(%dynamic-slice.2173, %dynamic-slice.2173)
  %convert_element_type.3039 = f32[512,8]{1,0} convert(%mul.9274)
  %reduce.933 = f32[] reduce(%convert_element_type.3039, %constant.1360), dimensions={0,1}, to_apply=%region_965.24950
  %all-reduce.3 = f32[] all-reduce(%reduce.933), channel_id=804, replica_groups=[1,8]<=[8], use_global_device_ids=true, to_apply=%region_965.24950.clone
  %convert_element_type.3040 = bf16[] convert(%all-reduce.3)
  %add.2433 = bf16[] add(%convert_element_type.2003, %convert_element_type.3040)
  %sharding_constraint.2432 = bf16[1,4096,8,1024]{3,2,1,0} copy(%slice.765)
  %dot.1116 = bf16[1,4096,8,1024]{3,2,1,0} dot(%sharding_constraint.2409, %sharding_constraint.2432), lhs_batch_dims={0}, lhs_contracting_dims={1}, rhs_batch_dims={0}, rhs_contracting_dims={1}
  %reshape.13765 = bf16[1,4096,8,1,1024]{4,3,2,1,0} reshape(%dot.1116)
  %all-to-all.190 = bf16[1,4096,8,1,1024]{4,3,2,1,0} all-to-all(%reshape.13765), channel_id=805, replica_groups=[1,8]<=[8], dimensions={2}
  %transpose.321 = bf16[8,1,4096,1,1024]{4,3,0,2,1} transpose(%all-to-all.190), dimensions={2,0,1,3,4}
  %reshape.13766 = bf16[8,4096,1,1024]{3,2,1,0} reshape(%transpose.321)
  %transpose.322 = bf16[1,8,1024,4096]{2,0,3,1} transpose(%reshape.13766), dimensions={2,0,3,1}
  %sharding_constraint.2433 = bf16[1,8,1024,4096]{2,0,3,1} copy(%transpose.322)
  %dot.1117 = bf16[1,8,1024,14336]{3,2,1,0} dot(%sharding_constraint.2433, %sharding_constraint.2426), lhs_batch_dims={0}, lhs_contracting_dims={3}, rhs_batch_dims={0}, rhs_contracting_dims={2}
  %mul.9275 = bf16[1,8,1024,14336]{3,2,1,0} multiply(%dot.1117, %sharding_constraint.2424)
  %mul.9276 = bf16[1,8,1024,14336]{3,2,1,0} multiply(%mul.9275, %div.1430)
  %mul.9277 = bf16[1,8,1024,14336]{3,2,1,0} multiply(%sharding_constraint.2420, %mul.9275)
  %sub.421 = bf16[1,8,1024,14336]{3,2,1,0} subtract(%jit_silu_.0, %div.1430)
  %mul.9278 = bf16[1,8,1024,14336]{3,2,1,0} multiply(%div.1430, %sub.421)
  %mul.9279 = bf16[1,8,1024,14336]{3,2,1,0} multiply(%mul.9277, %mul.9278)
  %add_any.502 = bf16[1,8,1024,14336]{3,2,1,0} add(%mul.9276, %mul.9279)
  %sharding_constraint.2434 = bf16[1,8,1024,14336]{3,2,1,0} copy(%add_any.502)
  %dot.1118 = bf16[1,4096,14336]{2,1,0} dot(%sharding_constraint.2417, %sharding_constraint.2434), lhs_batch_dims={0}, lhs_contracting_dims={1,2}, rhs_batch_dims={0}, rhs_contracting_dims={1,2}
  %sharding_constraint.2435 = bf16[1,4096,14336]{2,1,0} copy(%dot.1118)
  %mul.9280 = bf16[1,4096,14336]{2,1,0} multiply(%sharding_constraint.2435, %sharding_constraint.2435)
  %convert_element_type.3042 = f32[1,4096,14336]{2,1,0} convert(%mul.9280)
  %reduce.934 = f32[] reduce(%convert_element_type.3042, %constant.1360), dimensions={0,1,2}, to_apply=%region_966.24974
  %all-reduce.4 = f32[] all-reduce(%reduce.934), channel_id=806, replica_groups=[1,8]<=[8], use_global_device_ids=true, to_apply=%region_966.24974.clone
  %convert_element_type.3043 = bf16[] convert(%all-reduce.4)
  %add.2434 = bf16[] add(%add.2433, %convert_element_type.3043)
  %mul.9284 = bf16[1,8,1024,14336]{3,2,1,0} multiply(%mul.9260, %dot.1117)
  %sharding_constraint.2436 = bf16[1,8,1024,14336]{3,2,1,0} copy(%mul.9284)
  %dot.1119 = bf16[1,4096,14336]{2,1,0} dot(%sharding_constraint.2417, %sharding_constraint.2436), lhs_batch_dims={0}, lhs_contracting_dims={1,2}, rhs_batch_dims={0}, rhs_contracting_dims={1,2}
  %sharding_constraint.2437 = bf16[1,4096,14336]{2,1,0} copy(%dot.1119)
  %mul.9285 = bf16[1,4096,14336]{2,1,0} multiply(%sharding_constraint.2437, %sharding_constraint.2437)
  %convert_element_type.3044 = f32[1,4096,14336]{2,1,0} convert(%mul.9285)
  %reduce.935 = f32[] reduce(%convert_element_type.3044, %constant.1360), dimensions={0,1,2}, to_apply=%region_967.24987
  %all-reduce.5 = f32[] all-reduce(%reduce.935), channel_id=807, replica_groups=[1,8]<=[8], use_global_device_ids=true, to_apply=%region_967.24987.clone
  %convert_element_type.3045 = bf16[] convert(%all-reduce.5)
  %add.2435 = bf16[] add(%add.2434, %convert_element_type.3045)
  %dot.1120 = bf16[1,14336,4096]{2,1,0} dot(%mul.9263, %sharding_constraint.2433), lhs_batch_dims={0}, lhs_contracting_dims={1,2}, rhs_batch_dims={0}, rhs_contracting_dims={1,2}
  %sharding_constraint.2438 = bf16[1,14336,4096]{2,1,0} copy(%dot.1120)
  %mul.9286 = bf16[1,14336,4096]{2,1,0} multiply(%sharding_constraint.2438, %sharding_constraint.2438)
  %convert_element_type.3046 = f32[1,14336,4096]{2,1,0} convert(%mul.9286)
  %reduce.936 = f32[] reduce(%convert_element_type.3046, %constant.1360), dimensions={0,1,2}, to_apply=%region_968.24998
  %all-reduce.6 = f32[] all-reduce(%reduce.936), channel_id=808, replica_groups=[1,8]<=[8], use_global_device_ids=true, to_apply=%region_968.24998.clone
  %convert_element_type.3048 = bf16[] convert(%all-reduce.6)
  %add.2436 = bf16[] add(%add.2435, %convert_element_type.3048)
  %dot.1121 = bf16[1,8,1024,4096]{3,2,1,0} dot(%sharding_constraint.2436, %sharding_constraint.2422), lhs_batch_dims={0}, lhs_contracting_dims={3}, rhs_batch_dims={0}, rhs_contracting_dims={2}
  %dot.1122 = bf16[1,8,1024,4096]{3,2,1,0} dot(%sharding_constraint.2434, %sharding_constraint.2419), lhs_batch_dims={0}, lhs_contracting_dims={3}, rhs_batch_dims={0}, rhs_contracting_dims={2}
  %add_any.503 = bf16[1,8,1024,4096]{3,2,1,0} add(%dot.1121, %dot.1122)
  %sharding_constraint.2439 = bf16[1,8,1024,4096]{3,2,1,0} copy(%add_any.503)
  %transpose.323 = bf16[8,1,1024,4096]{3,2,0,1} transpose(%sharding_constraint.2439), dimensions={1,0,2,3}
  %reshape.13769 = bf16[8,1,1,1024,4096]{4,3,2,1,0} reshape(%transpose.323)
  %all-to-all.191 = bf16[8,1,1,1024,4096]{4,3,2,1,0} all-to-all(%reshape.13769), channel_id=809, replica_groups=[1,8]<=[8], dimensions={0}
  %transpose.324 = bf16[1,8,1,1024,4096]{4,3,2,0,1} transpose(%all-to-all.191), dimensions={1,0,2,3,4}
  %reshape.13770 = bf16[1,8,1024,4096]{3,2,1,0} reshape(%transpose.324)
  %dot.1123 = bf16[1,4096,4096]{2,1,0} dot(%dot_general.130, %reshape.13770), lhs_batch_dims={0}, lhs_contracting_dims={2,3}, rhs_batch_dims={0}, rhs_contracting_dims={1,2}
  %dot.1124 = bf16[1,4096,4096]{2,1,0} dot(%sharding_constraint.2431, %all-gather.416), lhs_contracting_dims={2}, rhs_contracting_dims={1}
  %add_any.504 = bf16[1,4096,4096]{2,1,0} add(%dot.1123, %dot.1124)
  %sharding_constraint.2440 = bf16[1,4096,4096]{2,1,0} copy(%add_any.504)
  %mul.9298 = bf16[1,4096,4096]{2,1,0} multiply(%convert_element_type.3026, %sharding_constraint.2440)
  %reduce.937 = bf16[4096]{0} reduce(%mul.9298, %constant.1190), dimensions={0,1}, to_apply=%region_969.25016
  %all-reduce.7 = bf16[4096]{0} all-reduce(%reduce.937), channel_id=810, replica_groups=[1,8]<=[8], use_global_device_ids=true, to_apply=%region_969.25016.clone
  %mul.9299 = bf16[4096]{0} multiply(%all-reduce.7, %all-reduce.7)
  %convert_element_type.3049 = f32[4096]{0} convert(%mul.9299)
  %reduce.938 = f32[] reduce(%convert_element_type.3049, %constant.1360), dimensions={0}, to_apply=%region_970.25023
  %convert_element_type.3050 = bf16[] convert(%reduce.938)
  %add.2437 = bf16[] add(%add.2436, %convert_element_type.3050)
  %get-tuple-element.1403 = f32[1,32,4096,1]{3,2,1,0} get-tuple-element(%te_fused_attn_forward_ffi.252), index=1
  %get-tuple-element.1404 = u32[2,4]{1,0} get-tuple-element(%te_fused_attn_forward_ffi.252), index=2
  %sharding_constraint.2441 = u32[2,4]{1,0} copy(%get-tuple-element.1404)
  %mul.9301 = bf16[1,4096,4096]{2,1,0} multiply(%sharding_constraint.2440, %mul.9252)
  %convert_element_type.3051 = f32[1,4096,4096]{2,1,0} convert(%mul.9301)
  %mul.9304 = f32[1,4096,4096]{2,1,0} multiply(%convert_element_type.3051, %mul.9250)
  %mul.9305 = f32[1,4096,4096]{2,1,0} multiply(%convert_element_type.3025, %convert_element_type.3051)
  %reduce.939 = f32[1,4096]{1,0} reduce(%mul.9305, %constant.1360), dimensions={2}, to_apply=%region_971.25038
  %reshape.13772 = f32[1,4096,1]{2,1,0} reshape(%reduce.939)
  %div.1434 = f32[1,4096,1]{2,1,0} divide(%rsqrt.192, %add.2421)
  %mul.9307 = f32[1,4096,1]{2,1,0} multiply(%div.1434, %broadcast.3620)
  %mul.9308 = f32[1,4096,1]{2,1,0} multiply(%reshape.13772, %mul.9307)
  %mul.9309 = f32[1,4096,1]{2,1,0} multiply(%mul.9308, %mul.4455)
  %mul.9310 = f32[1,4096]{1,0} reshape(%mul.9309)
  %mul.9311 = f32[1,4096,4096]{2,1,0} broadcast(%mul.9310), dimensions={0,1}
  %mul.9312 = f32[1,4096,4096]{2,1,0} multiply(%convert_element_type.3025, %mul.9311)
  %add_any.505 = f32[1,4096,4096]{2,1,0} add(%mul.9304, %mul.9312)
  %convert_element_type.3054 = bf16[1,4096,4096]{2,1,0} convert(%add_any.505)
  %add_any.506 = bf16[1,4096,4096]{2,1,0} add(%sharding_constraint.2406, %convert_element_type.3054)
  %sharding_constraint.2442 = bf16[1,4096,4096]{2,1,0} copy(%add_any.506)
  %dot.1125 = bf16[1,4096,32,128]{3,2,1,0} dot(%sharding_constraint.2442, %all-gather.415), lhs_contracting_dims={2}, rhs_contracting_dims={2}
  %sharding_constraint.2443 = bf16[1,4096,32,128]{3,2,1,0} copy(%dot.1125)
  %te_fused_attn_backward_ffi.155 = (bf16[1,4096,32,128]{3,2,1,0}, bf16[1,4096,8,128]{3,2,1,0}, bf16[1,4096,8,128]{3,2,1,0}, bf16[0]{0}, u8[134742064]{0}) custom-call(%sharding_constraint.2398, %sharding_constraint.2400, %sharding_constraint.2401, %constant.1403, %get-tuple-element.1403, /*index=5*/%sharding_constraint.2441, %get-tuple-element.1389, %sharding_constraint.2443, %concatenate.664, %concatenate.665, /*index=10*/%constant.1416, %constant.1416, %constant.1416, %constant.1416, %constant.1416, /*index=15*/%constant.1416), custom_call_target="te_fused_attn_backward_ffi", operand_layout_constraints={bf16[1,4096,32,128]{3,2,1,0}, bf16[1,4096,8,128]{3,2,1,0}, bf16[1,4096,8,128]{3,2,1,0}, bf16[0]{0}, f32[1,32,4096,1]{3,2,1,0}, u32[2,4]{1,0}, bf16[1,4096,32,128]{3,2,1,0}, bf16[1,4096,32,128]{3,2,1,0}, s32[2]{0}, s32[2]{0}, f32[0]{0}, f32[0]{0}, f32[0]{0}, f32[0]{0}, f32[0]{0}, f32[0]{0}}, api_version=API_VERSION_TYPED_FFI, backend_config={attn_heads = 32 : i64, bias_batch = 0 : i64, bias_heads = 0 : i64, bias_type = 0 : i64, deterministic = false, dropout_probability = 0.000000e+00 : f64, input_batch = 1 : i64, is_training = true, kv_max_seqlen = 4096 : i64, mask_type = 3 : i64, max_segments_per_seq = 1 : i64, num_gqa_groups = 8 : i64, q_max_seqlen = 4096 : i64, qk_head_dim = 128 : i64, qkv_layout = 9 : i64, scaling_factor = 1.000000e+00 : f64, v_head_dim = 128 : i64, window_size_left = -1 : i64, window_size_right = -1 : i64}
  %get-tuple-element.1405 = bf16[1,4096,8,128]{3,2,1,0} get-tuple-element(%te_fused_attn_backward_ffi.155), index=2
  %sharding_constraint.2444 = bf16[1,4096,8,128]{3,2,1,0} copy(%get-tuple-element.1405)
  %dot.1126 = bf16[1,4096,4096]{2,1,0} dot(%sharding_constraint.2444, %all-gather.414), lhs_contracting_dims={2,3}, rhs_contracting_dims={1,2}
  %get-tuple-element.1406 = bf16[1,4096,8,128]{3,2,1,0} get-tuple-element(%te_fused_attn_backward_ffi.155), index=1
  %sharding_constraint.2445 = bf16[1,4096,8,128]{3,2,1,0} copy(%get-tuple-element.1406)
  %slice.766 = bf16[1,4096,8,64]{3,2,1,0} slice(%sharding_constraint.2445), slice={[0:1], [0:4096], [0:8], [64:128]}
  %mul.9318 = bf16[1,4096,8,64]{3,2,1,0} multiply(%slice.766, %mul.9240)
  %slice.767 = bf16[1,4096,8,64]{3,2,1,0} slice(%sharding_constraint.2445), slice={[0:1], [0:4096], [0:8], [0:64]}
  %mul.9330 = bf16[1,4096,8,64]{3,2,1,0} multiply(%slice.767, %mul.9236)
  %add_any.507 = bf16[1,4096,8,64]{3,2,1,0} add(%mul.9318, %mul.9330)
  %mul.9333 = bf16[1,4096,8,64]{3,2,1,0} multiply(%slice.766, %mul.9236)
  %neg.316 = bf16[1,4096,8,64]{3,2,1,0} negate(%slice.767)
  %mul.9336 = bf16[1,4096,8,64]{3,2,1,0} multiply(%neg.316, %mul.9240)
  %add_any.508 = bf16[1,4096,8,64]{3,2,1,0} add(%mul.9333, %mul.9336)
  %concatenate.673 = bf16[1,4096,8,128]{3,2,1,0} concatenate(%add_any.507, %add_any.508), dimensions={3}
  %dot.1127 = bf16[1,4096,4096]{2,1,0} dot(%concatenate.673, %all-gather.413), lhs_contracting_dims={2,3}, rhs_contracting_dims={1,2}
  %add_any.509 = bf16[1,4096,4096]{2,1,0} add(%dot.1126, %dot.1127)
  %sharding_constraint.2446 = bf16[1,4096,4096]{2,1,0} copy(%add_any.509)
  %get-tuple-element.1407 = bf16[1,4096,32,128]{3,2,1,0} get-tuple-element(%te_fused_attn_backward_ffi.155), index=0
  %sharding_constraint.2447 = bf16[1,4096,32,128]{3,2,1,0} copy(%get-tuple-element.1407)
  %slice.768 = bf16[1,4096,32,64]{3,2,1,0} slice(%sharding_constraint.2447), slice={[0:1], [0:4096], [0:32], [64:128]}
  %mul.9339 = bf16[1,4096,32,64]{3,2,1,0} multiply(%slice.768, %mul.9226)
  %slice.769 = bf16[1,4096,32,64]{3,2,1,0} slice(%sharding_constraint.2447), slice={[0:1], [0:4096], [0:32], [0:64]}
  %mul.9342 = bf16[1,4096,32,64]{3,2,1,0} multiply(%slice.769, %mul.9223)
  %add_any.510 = bf16[1,4096,32,64]{3,2,1,0} add(%mul.9339, %mul.9342)
  %mul.9345 = bf16[1,4096,32,64]{3,2,1,0} multiply(%slice.768, %mul.9223)
  %neg.317 = bf16[1,4096,32,64]{3,2,1,0} negate(%slice.769)
  %mul.9348 = bf16[1,4096,32,64]{3,2,1,0} multiply(%neg.317, %mul.9226)
  %add_any.511 = bf16[1,4096,32,64]{3,2,1,0} add(%mul.9345, %mul.9348)
  %concatenate.674 = bf16[1,4096,32,128]{3,2,1,0} concatenate(%add_any.510, %add_any.511), dimensions={3}
  %dot.1128 = bf16[1,4096,4096]{2,1,0} dot(%concatenate.674, %all-gather.412), lhs_contracting_dims={2,3}, rhs_contracting_dims={1,2}
  %sharding_constraint.2448 = bf16[1,4096,4096]{2,1,0} copy(%dot.1128)
  %add_any.512 = bf16[1,4096,4096]{2,1,0} add(%sharding_constraint.2446, %sharding_constraint.2448)
  %sharding_constraint.2453 = bf16[1,4096,4096]{2,1,0} copy(%add_any.512)
  %mul.9349 = bf16[1,4096,4096]{2,1,0} multiply(%convert_element_type.3012, %sharding_constraint.2453)
  %reduce.940 = bf16[4096]{0} reduce(%mul.9349, %constant.1190), dimensions={0,1}, to_apply=%region_972.25110
  %all-reduce.8 = bf16[4096]{0} all-reduce(%reduce.940), channel_id=811, replica_groups=[1,8]<=[8], use_global_device_ids=true, to_apply=%region_972.25110.clone
  %mul.9350 = bf16[4096]{0} multiply(%all-reduce.8, %all-reduce.8)
  %convert_element_type.3055 = f32[4096]{0} convert(%mul.9350)
  %reduce.941 = f32[] reduce(%convert_element_type.3055, %constant.1360), dimensions={0}, to_apply=%region_973.25117
  %convert_element_type.3056 = bf16[] convert(%reduce.941)
  %add.2439 = bf16[] add(%add.2437, %convert_element_type.3056)
  %dot.1129 = bf16[8,128,4096]{2,1,0} dot(%concatenate.673, %sharding_constraint.2397), lhs_contracting_dims={0,1}, rhs_contracting_dims={0,1}
  %all-reduce.9 = bf16[8,128,4096]{2,1,0} all-reduce(%dot.1129), channel_id=812, replica_groups=[1,8]<=[8], use_global_device_ids=true, to_apply=%add.1.clone
  %dynamic-slice.2183 = bf16[8,128,512]{2,1,0} dynamic-slice(%all-reduce.9, %constant.1181, %constant.1181, %reshape.13763), dynamic_slice_sizes={8,128,512}
  %transpose.325 = bf16[512,8,128]{0,2,1} transpose(%dynamic-slice.2183), dimensions={2,0,1}
  %mul.9351 = bf16[512,8,128]{0,2,1} multiply(%transpose.325, %transpose.325)
  %convert_element_type.3057 = f32[512,8,128]{0,2,1} convert(%mul.9351)
  %reduce.942 = f32[] reduce(%convert_element_type.3057, %constant.1360), dimensions={0,1,2}, to_apply=%region_974.25128
  %all-reduce.10 = f32[] all-reduce(%reduce.942), channel_id=813, replica_groups=[1,8]<=[8], use_global_device_ids=true, to_apply=%region_974.25128.clone
  %convert_element_type.3058 = bf16[] convert(%all-reduce.10)
  %add.2440 = bf16[] add(%add.2439, %convert_element_type.3058)
  %dot.1130 = bf16[4096,32,128]{2,1,0} dot(%sharding_constraint.2442, %sharding_constraint.2402), lhs_contracting_dims={0,1}, rhs_contracting_dims={0,1}
  %all-reduce.11 = bf16[4096,32,128]{2,1,0} all-reduce(%dot.1130), channel_id=814, replica_groups=[1,8]<=[8], use_global_device_ids=true, to_apply=%add.2.clone
  %dynamic-slice.2185 = bf16[512,32,128]{2,1,0} dynamic-slice(%all-reduce.11, %reshape.13763, %constant.1181, %constant.1181), dynamic_slice_sizes={512,32,128}
  %transpose.326 = bf16[32,128,512]{1,0,2} transpose(%dynamic-slice.2185), dimensions={1,2,0}
  %mul.9352 = bf16[32,128,512]{1,0,2} multiply(%transpose.326, %transpose.326)
  %convert_element_type.3059 = f32[32,128,512]{1,0,2} convert(%mul.9352)
  %reduce.943 = f32[] reduce(%convert_element_type.3059, %constant.1360), dimensions={0,1,2}, to_apply=%region_975.25139
  %all-reduce.12 = f32[] all-reduce(%reduce.943), channel_id=815, replica_groups=[1,8]<=[8], use_global_device_ids=true, to_apply=%region_975.25139.clone
  %convert_element_type.3060 = bf16[] convert(%all-reduce.12)
  %add.2441 = bf16[] add(%add.2440, %convert_element_type.3060)
  %dot.1131 = bf16[32,128,4096]{2,1,0} dot(%concatenate.674, %sharding_constraint.2397), lhs_contracting_dims={0,1}, rhs_contracting_dims={0,1}
  %all-reduce.13 = bf16[32,128,4096]{2,1,0} all-reduce(%dot.1131), channel_id=816, replica_groups=[1,8]<=[8], use_global_device_ids=true, to_apply=%add.3.clone
  %dynamic-slice.2187 = bf16[32,128,512]{2,1,0} dynamic-slice(%all-reduce.13, %constant.1181, %constant.1181, %reshape.13763), dynamic_slice_sizes={32,128,512}
  %transpose.327 = bf16[512,32,128]{0,2,1} transpose(%dynamic-slice.2187), dimensions={2,0,1}
  %mul.9353 = bf16[512,32,128]{0,2,1} multiply(%transpose.327, %transpose.327)
  %convert_element_type.3061 = f32[512,32,128]{0,2,1} convert(%mul.9353)
  %reduce.944 = f32[] reduce(%convert_element_type.3061, %constant.1360), dimensions={0,1,2}, to_apply=%region_976.25150
  %all-reduce.14 = f32[] all-reduce(%reduce.944), channel_id=817, replica_groups=[1,8]<=[8], use_global_device_ids=true, to_apply=%region_976.25150.clone
  %convert_element_type.3062 = bf16[] convert(%all-reduce.14)
  %add.2442 = bf16[] add(%add.2441, %convert_element_type.3062)
  %dot.1132 = bf16[8,128,4096]{2,1,0} dot(%sharding_constraint.2444, %sharding_constraint.2397), lhs_contracting_dims={0,1}, rhs_contracting_dims={0,1}
  %all-reduce.15 = bf16[8,128,4096]{2,1,0} all-reduce(%dot.1132), channel_id=818, replica_groups=[1,8]<=[8], use_global_device_ids=true, to_apply=%add.4.clone
  %dynamic-slice.2189 = bf16[8,128,512]{2,1,0} dynamic-slice(%all-reduce.15, %constant.1181, %constant.1181, %reshape.13763), dynamic_slice_sizes={8,128,512}
  %transpose.328 = bf16[512,8,128]{0,2,1} transpose(%dynamic-slice.2189), dimensions={2,0,1}
  %mul.9354 = bf16[512,8,128]{0,2,1} multiply(%transpose.328, %transpose.328)
  %convert_element_type.3063 = f32[512,8,128]{0,2,1} convert(%mul.9354)
  %reduce.945 = f32[] reduce(%convert_element_type.3063, %constant.1360), dimensions={0,1,2}, to_apply=%region_977.25161
  %all-reduce.16 = f32[] all-reduce(%reduce.945), channel_id=819, replica_groups=[1,8]<=[8], use_global_device_ids=true, to_apply=%region_977.25161.clone
  %convert_element_type.3064 = bf16[] convert(%all-reduce.16)
  %add.2443 = bf16[] add(%add.2442, %convert_element_type.3064)
  %dot.1133 = bf16[4096,8]{1,0} dot(%sharding_constraint.2362, %sharding_constraint.2383), lhs_contracting_dims={0,1}, rhs_contracting_dims={0,1}
  %all-reduce.17 = bf16[4096,8]{1,0} all-reduce(%dot.1133), channel_id=820, replica_groups=[1,8]<=[8], use_global_device_ids=true, to_apply=%add.5.clone
  %dynamic-slice.2191 = bf16[512,8]{1,0} dynamic-slice(%all-reduce.17, %reshape.13763, %constant.1181), dynamic_slice_sizes={512,8}
  %mul.9355 = bf16[512,8]{1,0} multiply(%dynamic-slice.2191, %dynamic-slice.2191)
  %convert_element_type.3065 = f32[512,8]{1,0} convert(%mul.9355)
  %reduce.946 = f32[] reduce(%convert_element_type.3065, %constant.1360), dimensions={0,1}, to_apply=%region_978.25171
  %all-reduce.18 = f32[] all-reduce(%reduce.946), channel_id=821, replica_groups=[1,8]<=[8], use_global_device_ids=true, to_apply=%region_978.25171.clone
  %convert_element_type.3066 = bf16[] convert(%all-reduce.18)
  %add.2444 = bf16[] add(%add.2443, %convert_element_type.3066)
  %dot.1134 = bf16[1,4096,14336]{2,1,0} dot(%sharding_constraint.2367, %sharding_constraint.2378), lhs_batch_dims={0}, lhs_contracting_dims={1,2}, rhs_batch_dims={0}, rhs_contracting_dims={1,2}
  %sharding_constraint.2454 = bf16[1,4096,14336]{2,1,0} copy(%dot.1134)
  %mul.9356 = bf16[1,4096,14336]{2,1,0} multiply(%sharding_constraint.2454, %sharding_constraint.2454)
  %convert_element_type.3068 = f32[1,4096,14336]{2,1,0} convert(%mul.9356)
  %reduce.947 = f32[] reduce(%convert_element_type.3068, %constant.1360), dimensions={0,1,2}, to_apply=%region_979.25182
  %all-reduce.19 = f32[] all-reduce(%reduce.947), channel_id=822, replica_groups=[1,8]<=[8], use_global_device_ids=true, to_apply=%region_979.25182.clone
  %convert_element_type.3069 = bf16[] convert(%all-reduce.19)
  %add.2445 = bf16[] add(%add.2444, %convert_element_type.3069)
  %dot.1135 = bf16[1,4096,14336]{2,1,0} dot(%sharding_constraint.2367, %sharding_constraint.2374), lhs_batch_dims={0}, lhs_contracting_dims={1,2}, rhs_batch_dims={0}, rhs_contracting_dims={1,2}
  %sharding_constraint.2457 = bf16[1,4096,14336]{2,1,0} copy(%dot.1135)
  %mul.9357 = bf16[1,4096,14336]{2,1,0} multiply(%sharding_constraint.2457, %sharding_constraint.2457)
  %convert_element_type.3071 = f32[1,4096,14336]{2,1,0} convert(%mul.9357)
  %reduce.948 = f32[] reduce(%convert_element_type.3071, %constant.1360), dimensions={0,1,2}, to_apply=%region_980.25193
  %all-reduce.20 = f32[] all-reduce(%reduce.948), channel_id=823, replica_groups=[1,8]<=[8], use_global_device_ids=true, to_apply=%region_980.25193.clone
  %convert_element_type.3072 = bf16[] convert(%all-reduce.20)
  %add.2446 = bf16[] add(%add.2445, %convert_element_type.3072)
  %dot.1136 = bf16[1,14336,4096]{2,1,0} dot(%mul.9112, %sharding_constraint.2372), lhs_batch_dims={0}, lhs_contracting_dims={1,2}, rhs_batch_dims={0}, rhs_contracting_dims={1,2}
  %sharding_constraint.2459 = bf16[1,14336,4096]{2,1,0} copy(%dot.1136)
  %mul.9358 = bf16[1,14336,4096]{2,1,0} multiply(%sharding_constraint.2459, %sharding_constraint.2459)
  %convert_element_type.3073 = f32[1,14336,4096]{2,1,0} convert(%mul.9358)
  %reduce.949 = f32[] reduce(%convert_element_type.3073, %constant.1360), dimensions={0,1,2}, to_apply=%region_981.25204
  %all-reduce.21 = f32[] all-reduce(%reduce.949), channel_id=824, replica_groups=[1,8]<=[8], use_global_device_ids=true, to_apply=%region_981.25204.clone
  %convert_element_type.3075 = bf16[] convert(%all-reduce.21)
  %add.2447 = bf16[] add(%add.2446, %convert_element_type.3075)
  %mul.9359 = bf16[1,4096,4096]{2,1,0} multiply(%convert_element_type.2994, %sharding_constraint.2384)
  %reduce.950 = bf16[4096]{0} reduce(%mul.9359, %constant.1190), dimensions={0,1}, to_apply=%region_982.25212
  %all-reduce.22 = bf16[4096]{0} all-reduce(%reduce.950), channel_id=825, replica_groups=[1,8]<=[8], use_global_device_ids=true, to_apply=%region_982.25212.clone
  %mul.9360 = bf16[4096]{0} multiply(%all-reduce.22, %all-reduce.22)
  %convert_element_type.3076 = f32[4096]{0} convert(%mul.9360)
  %reduce.951 = f32[] reduce(%convert_element_type.3076, %constant.1360), dimensions={0}, to_apply=%region_983.25219
  %convert_element_type.3077 = bf16[] convert(%reduce.951)
  %add.2448 = bf16[] add(%add.2447, %convert_element_type.3077)
  %mul.9361 = bf16[1,4096,4096]{2,1,0} multiply(%convert_element_type.2978, %sharding_constraint.2393)
  %reduce.952 = bf16[4096]{0} reduce(%mul.9361, %constant.1190), dimensions={0,1}, to_apply=%region_984.25227
  %all-reduce.23 = bf16[4096]{0} all-reduce(%reduce.952), channel_id=826, replica_groups=[1,8]<=[8], use_global_device_ids=true, to_apply=%region_984.25227.clone
  %mul.9362 = bf16[4096]{0} multiply(%all-reduce.23, %all-reduce.23)
  %convert_element_type.3078 = f32[4096]{0} convert(%mul.9362)
  %reduce.953 = f32[] reduce(%convert_element_type.3078, %constant.1360), dimensions={0}, to_apply=%region_985.25234
  %convert_element_type.3079 = bf16[] convert(%reduce.953)
  %add.2449 = bf16[] add(%add.2448, %convert_element_type.3079)
  %dot.1137 = bf16[8,128,4096]{2,1,0} dot(%concatenate.660, %sharding_constraint.2355), lhs_contracting_dims={0,1}, rhs_contracting_dims={0,1}
  %all-reduce.24 = bf16[8,128,4096]{2,1,0} all-reduce(%dot.1137), channel_id=827, replica_groups=[1,8]<=[8], use_global_device_ids=true, to_apply=%add.6.clone
  %dynamic-slice.2193 = bf16[8,128,512]{2,1,0} dynamic-slice(%all-reduce.24, %constant.1181, %constant.1181, %reshape.13763), dynamic_slice_sizes={8,128,512}
  %transpose.329 = bf16[512,8,128]{0,2,1} transpose(%dynamic-slice.2193), dimensions={2,0,1}
  %mul.9363 = bf16[512,8,128]{0,2,1} multiply(%transpose.329, %transpose.329)
  %convert_element_type.3081 = f32[512,8,128]{0,2,1} convert(%mul.9363)
  %reduce.954 = f32[] reduce(%convert_element_type.3081, %constant.1360), dimensions={0,1,2}, to_apply=%region_986.25245
  %all-reduce.25 = f32[] all-reduce(%reduce.954), channel_id=828, replica_groups=[1,8]<=[8], use_global_device_ids=true, to_apply=%region_986.25245.clone
  %convert_element_type.3083 = bf16[] convert(%all-reduce.25)
  %add.2450 = bf16[] add(%add.2449, %convert_element_type.3083)
  %dot.1138 = bf16[4096,32,128]{2,1,0} dot(%sharding_constraint.2386, %sharding_constraint.2360), lhs_contracting_dims={0,1}, rhs_contracting_dims={0,1}
  %all-reduce.26 = bf16[4096,32,128]{2,1,0} all-reduce(%dot.1138), channel_id=829, replica_groups=[1,8]<=[8], use_global_device_ids=true, to_apply=%add.7.clone
  %dynamic-slice.2195 = bf16[512,32,128]{2,1,0} dynamic-slice(%all-reduce.26, %reshape.13763, %constant.1181, %constant.1181), dynamic_slice_sizes={512,32,128}
  %transpose.330 = bf16[32,128,512]{1,0,2} transpose(%dynamic-slice.2195), dimensions={1,2,0}
  %mul.9364 = bf16[32,128,512]{1,0,2} multiply(%transpose.330, %transpose.330)
  %convert_element_type.3084 = f32[32,128,512]{1,0,2} convert(%mul.9364)
  %reduce.955 = f32[] reduce(%convert_element_type.3084, %constant.1360), dimensions={0,1,2}, to_apply=%region_987.25256
  %all-reduce.27 = f32[] all-reduce(%reduce.955), channel_id=830, replica_groups=[1,8]<=[8], use_global_device_ids=true, to_apply=%region_987.25256.clone
  %convert_element_type.3085 = bf16[] convert(%all-reduce.27)
  %add.2451 = bf16[] add(%add.2450, %convert_element_type.3085)
  %dot.1139 = bf16[32,128,4096]{2,1,0} dot(%concatenate.661, %sharding_constraint.2355), lhs_contracting_dims={0,1}, rhs_contracting_dims={0,1}
  %all-reduce.28 = bf16[32,128,4096]{2,1,0} all-reduce(%dot.1139), channel_id=831, replica_groups=[1,8]<=[8], use_global_device_ids=true, to_apply=%add.8.clone
  %dynamic-slice.2197 = bf16[32,128,512]{2,1,0} dynamic-slice(%all-reduce.28, %constant.1181, %constant.1181, %reshape.13763), dynamic_slice_sizes={32,128,512}
  %transpose.331 = bf16[512,32,128]{0,2,1} transpose(%dynamic-slice.2197), dimensions={2,0,1}
  %mul.9365 = bf16[512,32,128]{0,2,1} multiply(%transpose.331, %transpose.331)
  %convert_element_type.3087 = f32[512,32,128]{0,2,1} convert(%mul.9365)
  %reduce.956 = f32[] reduce(%convert_element_type.3087, %constant.1360), dimensions={0,1,2}, to_apply=%region_988.25267
  %all-reduce.29 = f32[] all-reduce(%reduce.956), channel_id=832, replica_groups=[1,8]<=[8], use_global_device_ids=true, to_apply=%region_988.25267.clone
  %convert_element_type.3088 = bf16[] convert(%all-reduce.29)
  %add.2452 = bf16[] add(%add.2451, %convert_element_type.3088)
  %dot.1140 = bf16[8,128,4096]{2,1,0} dot(%sharding_constraint.2388, %sharding_constraint.2355), lhs_contracting_dims={0,1}, rhs_contracting_dims={0,1}
  %all-reduce.30 = bf16[8,128,4096]{2,1,0} all-reduce(%dot.1140), channel_id=833, replica_groups=[1,8]<=[8], use_global_device_ids=true, to_apply=%add.9.clone
  %dynamic-slice.2199 = bf16[8,128,512]{2,1,0} dynamic-slice(%all-reduce.30, %constant.1181, %constant.1181, %reshape.13763), dynamic_slice_sizes={8,128,512}
  %transpose.332 = bf16[512,8,128]{0,2,1} transpose(%dynamic-slice.2199), dimensions={2,0,1}
  %mul.9366 = bf16[512,8,128]{0,2,1} multiply(%transpose.332, %transpose.332)
  %convert_element_type.3089 = f32[512,8,128]{0,2,1} convert(%mul.9366)
  %reduce.957 = f32[] reduce(%convert_element_type.3089, %constant.1360), dimensions={0,1,2}, to_apply=%region_989.25278
  %all-reduce.31 = f32[] all-reduce(%reduce.957), channel_id=834, replica_groups=[1,8]<=[8], use_global_device_ids=true, to_apply=%region_989.25278.clone
  %convert_element_type.3090 = bf16[] convert(%all-reduce.31)
  %add.2453 = bf16[] add(%add.2452, %convert_element_type.3090)
  %dot.1141 = bf16[4096,8]{1,0} dot(%sharding_constraint.1927, %sharding_constraint.1953), lhs_contracting_dims={0,1}, rhs_contracting_dims={0,1}
  %all-reduce.32 = bf16[4096,8]{1,0} all-reduce(%dot.1141), channel_id=835, replica_groups=[1,8]<=[8], use_global_device_ids=true, to_apply=%add.10.clone
  %dynamic-slice.2201 = bf16[512,8]{1,0} dynamic-slice(%all-reduce.32, %reshape.13763, %constant.1181), dynamic_slice_sizes={512,8}
  %mul.9367 = bf16[512,8]{1,0} multiply(%dynamic-slice.2201, %dynamic-slice.2201)
  %convert_element_type.3091 = f32[512,8]{1,0} convert(%mul.9367)
  %reduce.958 = f32[] reduce(%convert_element_type.3091, %constant.1360), dimensions={0,1}, to_apply=%region_990.25288
  %all-reduce.33 = f32[] all-reduce(%reduce.958), channel_id=836, replica_groups=[1,8]<=[8], use_global_device_ids=true, to_apply=%region_990.25288.clone
  %convert_element_type.3092 = bf16[] convert(%all-reduce.33)
  %add.2454 = bf16[] add(%add.2453, %convert_element_type.3092)
  %dot.1142 = bf16[1,4096,14336]{2,1,0} dot(%sharding_constraint.1937, %sharding_constraint.1947), lhs_batch_dims={0}, lhs_contracting_dims={1,2}, rhs_batch_dims={0}, rhs_contracting_dims={1,2}
  %sharding_constraint.2460 = bf16[1,4096,14336]{2,1,0} copy(%dot.1142)
  %mul.9368 = bf16[1,4096,14336]{2,1,0} multiply(%sharding_constraint.2460, %sharding_constraint.2460)
  %convert_element_type.3093 = f32[1,4096,14336]{2,1,0} convert(%mul.9368)
  %reduce.959 = f32[] reduce(%convert_element_type.3093, %constant.1360), dimensions={0,1,2}, to_apply=%region_991.25299
  %all-reduce.34 = f32[] all-reduce(%reduce.959), channel_id=837, replica_groups=[1,8]<=[8], use_global_device_ids=true, to_apply=%region_991.25299.clone
  %convert_element_type.3094 = bf16[] convert(%all-reduce.34)
  %add.2455 = bf16[] add(%add.2454, %convert_element_type.3094)
  %dot.1143 = bf16[1,4096,14336]{2,1,0} dot(%sharding_constraint.1937, %sharding_constraint.1944), lhs_batch_dims={0}, lhs_contracting_dims={1,2}, rhs_batch_dims={0}, rhs_contracting_dims={1,2}
  %sharding_constraint.2461 = bf16[1,4096,14336]{2,1,0} copy(%dot.1143)
  %mul.9369 = bf16[1,4096,14336]{2,1,0} multiply(%sharding_constraint.2461, %sharding_constraint.2461)
  %convert_element_type.3095 = f32[1,4096,14336]{2,1,0} convert(%mul.9369)
  %reduce.960 = f32[] reduce(%convert_element_type.3095, %constant.1360), dimensions={0,1,2}, to_apply=%region_992.25310
  %all-reduce.35 = f32[] all-reduce(%reduce.960), channel_id=838, replica_groups=[1,8]<=[8], use_global_device_ids=true, to_apply=%region_992.25310.clone
  %convert_element_type.3096 = bf16[] convert(%all-reduce.35)
  %add.2456 = bf16[] add(%add.2455, %convert_element_type.3096)
  %dot.1144 = bf16[1,14336,4096]{2,1,0} dot(%mul.7737, %sharding_constraint.1942), lhs_batch_dims={0}, lhs_contracting_dims={1,2}, rhs_batch_dims={0}, rhs_contracting_dims={1,2}
  %sharding_constraint.2462 = bf16[1,14336,4096]{2,1,0} copy(%dot.1144)
  %mul.9370 = bf16[1,14336,4096]{2,1,0} multiply(%sharding_constraint.2462, %sharding_constraint.2462)
  %convert_element_type.3097 = f32[1,14336,4096]{2,1,0} convert(%mul.9370)
  %reduce.961 = f32[] reduce(%convert_element_type.3097, %constant.1360), dimensions={0,1,2}, to_apply=%region_993.25321
  %all-reduce.36 = f32[] all-reduce(%reduce.961), channel_id=839, replica_groups=[1,8]<=[8], use_global_device_ids=true, to_apply=%region_993.25321.clone
  %convert_element_type.3098 = bf16[] convert(%all-reduce.36)
  %add.2457 = bf16[] add(%add.2456, %convert_element_type.3098)
  %mul.9371 = bf16[1,4096,4096]{2,1,0} multiply(%convert_element_type.2700, %sharding_constraint.1954)
  %reduce.962 = bf16[4096]{0} reduce(%mul.9371, %constant.1190), dimensions={0,1}, to_apply=%region_994.25329
  %all-reduce.37 = bf16[4096]{0} all-reduce(%reduce.962), channel_id=840, replica_groups=[1,8]<=[8], use_global_device_ids=true, to_apply=%region_994.25329.clone
  %mul.9372 = bf16[4096]{0} multiply(%all-reduce.37, %all-reduce.37)
  %convert_element_type.3099 = f32[4096]{0} convert(%mul.9372)
  %reduce.963 = f32[] reduce(%convert_element_type.3099, %constant.1360), dimensions={0}, to_apply=%region_995.25336
  %convert_element_type.3100 = bf16[] convert(%reduce.963)
  %add.2458 = bf16[] add(%add.2457, %convert_element_type.3100)
  %mul.9373 = bf16[1,4096,4096]{2,1,0} multiply(%convert_element_type.2687, %sharding_constraint.1963)
  %reduce.964 = bf16[4096]{0} reduce(%mul.9373, %constant.1190), dimensions={0,1}, to_apply=%region_996.25344
  %all-reduce.38 = bf16[4096]{0} all-reduce(%reduce.964), channel_id=841, replica_groups=[1,8]<=[8], use_global_device_ids=true, to_apply=%region_996.25344.clone
  %mul.9375 = bf16[4096]{0} multiply(%all-reduce.38, %all-reduce.38)
  %convert_element_type.3101 = f32[4096]{0} convert(%mul.9375)
  %reduce.965 = f32[] reduce(%convert_element_type.3101, %constant.1360), dimensions={0}, to_apply=%region_997.25351
  %convert_element_type.3102 = bf16[] convert(%reduce.965)
  %add.2459 = bf16[] add(%add.2458, %convert_element_type.3102)
  %dot.1145 = bf16[8,128,4096]{2,1,0} dot(%concatenate.543, %sharding_constraint.1917), lhs_contracting_dims={0,1}, rhs_contracting_dims={0,1}
  %all-reduce.39 = bf16[8,128,4096]{2,1,0} all-reduce(%dot.1145), channel_id=842, replica_groups=[1,8]<=[8], use_global_device_ids=true, to_apply=%add.11.clone
  %dynamic-slice.2203 = bf16[8,128,512]{2,1,0} dynamic-slice(%all-reduce.39, %constant.1181, %constant.1181, %reshape.13763), dynamic_slice_sizes={8,128,512}
  %transpose.333 = bf16[512,8,128]{0,2,1} transpose(%dynamic-slice.2203), dimensions={2,0,1}
  %mul.9376 = bf16[512,8,128]{0,2,1} multiply(%transpose.333, %transpose.333)
  %convert_element_type.3103 = f32[512,8,128]{0,2,1} convert(%mul.9376)
  %reduce.966 = f32[] reduce(%convert_element_type.3103, %constant.1360), dimensions={0,1,2}, to_apply=%region_998.25362
  %all-reduce.40 = f32[] all-reduce(%reduce.966), channel_id=843, replica_groups=[1,8]<=[8], use_global_device_ids=true, to_apply=%region_998.25362.clone
  %convert_element_type.3104 = bf16[] convert(%all-reduce.40)
  %add.2460 = bf16[] add(%add.2459, %convert_element_type.3104)
  %dot.1146 = bf16[4096,32,128]{2,1,0} dot(%sharding_constraint.1956, %sharding_constraint.1923), lhs_contracting_dims={0,1}, rhs_contracting_dims={0,1}
  %all-reduce.41 = bf16[4096,32,128]{2,1,0} all-reduce(%dot.1146), channel_id=844, replica_groups=[1,8]<=[8], use_global_device_ids=true, to_apply=%add.12.clone
  %dynamic-slice.2205 = bf16[512,32,128]{2,1,0} dynamic-slice(%all-reduce.41, %reshape.13763, %constant.1181, %constant.1181), dynamic_slice_sizes={512,32,128}
  %transpose.334 = bf16[32,128,512]{1,0,2} transpose(%dynamic-slice.2205), dimensions={1,2,0}
  %mul.9377 = bf16[32,128,512]{1,0,2} multiply(%transpose.334, %transpose.334)
  %convert_element_type.3105 = f32[32,128,512]{1,0,2} convert(%mul.9377)
  %reduce.967 = f32[] reduce(%convert_element_type.3105, %constant.1360), dimensions={0,1,2}, to_apply=%region_999.25373
  %all-reduce.42 = f32[] all-reduce(%reduce.967), channel_id=845, replica_groups=[1,8]<=[8], use_global_device_ids=true, to_apply=%region_999.25373.clone
  %convert_element_type.3106 = bf16[] convert(%all-reduce.42)
  %add.2462 = bf16[] add(%add.2460, %convert_element_type.3106)
  %dot.1147 = bf16[32,128,4096]{2,1,0} dot(%concatenate.544, %sharding_constraint.1917), lhs_contracting_dims={0,1}, rhs_contracting_dims={0,1}
  %all-reduce.43 = bf16[32,128,4096]{2,1,0} all-reduce(%dot.1147), channel_id=846, replica_groups=[1,8]<=[8], use_global_device_ids=true, to_apply=%add.13.clone
  %dynamic-slice.2207 = bf16[32,128,512]{2,1,0} dynamic-slice(%all-reduce.43, %constant.1181, %constant.1181, %reshape.13763), dynamic_slice_sizes={32,128,512}
  %transpose.335 = bf16[512,32,128]{0,2,1} transpose(%dynamic-slice.2207), dimensions={2,0,1}
  %mul.9378 = bf16[512,32,128]{0,2,1} multiply(%transpose.335, %transpose.335)
  %convert_element_type.3108 = f32[512,32,128]{0,2,1} convert(%mul.9378)
  %reduce.968 = f32[] reduce(%convert_element_type.3108, %constant.1360), dimensions={0,1,2}, to_apply=%region_1000.25384
  %all-reduce.44 = f32[] all-reduce(%reduce.968), channel_id=847, replica_groups=[1,8]<=[8], use_global_device_ids=true, to_apply=%region_1000.25384.clone
  %convert_element_type.3109 = bf16[] convert(%all-reduce.44)
  %add.2463 = bf16[] add(%add.2462, %convert_element_type.3109)
  %dot.1148 = bf16[8,128,4096]{2,1,0} dot(%sharding_constraint.1958, %sharding_constraint.1917), lhs_contracting_dims={0,1}, rhs_contracting_dims={0,1}
  %all-reduce.45 = bf16[8,128,4096]{2,1,0} all-reduce(%dot.1148), channel_id=848, replica_groups=[1,8]<=[8], use_global_device_ids=true, to_apply=%add.14.clone
  %dynamic-slice.2209 = bf16[8,128,512]{2,1,0} dynamic-slice(%all-reduce.45, %constant.1181, %constant.1181, %reshape.13763), dynamic_slice_sizes={8,128,512}
  %transpose.336 = bf16[512,8,128]{0,2,1} transpose(%dynamic-slice.2209), dimensions={2,0,1}
  %mul.9379 = bf16[512,8,128]{0,2,1} multiply(%transpose.336, %transpose.336)
  %convert_element_type.3111 = f32[512,8,128]{0,2,1} convert(%mul.9379)
  %reduce.969 = f32[] reduce(%convert_element_type.3111, %constant.1360), dimensions={0,1,2}, to_apply=%region_1001.25395
  %all-reduce.46 = f32[] all-reduce(%reduce.969), channel_id=849, replica_groups=[1,8]<=[8], use_global_device_ids=true, to_apply=%region_1001.25395.clone
  %convert_element_type.3112 = bf16[] convert(%all-reduce.46)
  %add.2464 = bf16[] add(%add.2463, %convert_element_type.3112)
  %dot.1149 = bf16[4096,8]{1,0} dot(%sharding_constraint.1877, %sharding_constraint.1897), lhs_contracting_dims={0,1}, rhs_contracting_dims={0,1}
  %all-reduce.47 = bf16[4096,8]{1,0} all-reduce(%dot.1149), channel_id=850, replica_groups=[1,8]<=[8], use_global_device_ids=true, to_apply=%add.15.clone
  %dynamic-slice.2211 = bf16[512,8]{1,0} dynamic-slice(%all-reduce.47, %reshape.13763, %constant.1181), dynamic_slice_sizes={512,8}
  %mul.9380 = bf16[512,8]{1,0} multiply(%dynamic-slice.2211, %dynamic-slice.2211)
  %convert_element_type.3114 = f32[512,8]{1,0} convert(%mul.9380)
  %reduce.970 = f32[] reduce(%convert_element_type.3114, %constant.1360), dimensions={0,1}, to_apply=%region_1002.25405
  %all-reduce.48 = f32[] all-reduce(%reduce.970), channel_id=851, replica_groups=[1,8]<=[8], use_global_device_ids=true, to_apply=%region_1002.25405.clone
  %convert_element_type.3115 = bf16[] convert(%all-reduce.48)
  %add.2465 = bf16[] add(%add.2464, %convert_element_type.3115)
  %dot.1150 = bf16[1,4096,14336]{2,1,0} dot(%sharding_constraint.1883, %sharding_constraint.1893), lhs_batch_dims={0}, lhs_contracting_dims={1,2}, rhs_batch_dims={0}, rhs_contracting_dims={1,2}
  %sharding_constraint.2463 = bf16[1,4096,14336]{2,1,0} copy(%dot.1150)
  %mul.9383 = bf16[1,4096,14336]{2,1,0} multiply(%sharding_constraint.2463, %sharding_constraint.2463)
  %convert_element_type.3116 = f32[1,4096,14336]{2,1,0} convert(%mul.9383)
  %reduce.971 = f32[] reduce(%convert_element_type.3116, %constant.1360), dimensions={0,1,2}, to_apply=%region_1003.25416
  %all-reduce.49 = f32[] all-reduce(%reduce.971), channel_id=852, replica_groups=[1,8]<=[8], use_global_device_ids=true, to_apply=%region_1003.25416.clone
  %convert_element_type.3117 = bf16[] convert(%all-reduce.49)
  %add.2466 = bf16[] add(%add.2465, %convert_element_type.3117)
  %dot.1151 = bf16[1,4096,14336]{2,1,0} dot(%sharding_constraint.1883, %sharding_constraint.1890), lhs_batch_dims={0}, lhs_contracting_dims={1,2}, rhs_batch_dims={0}, rhs_contracting_dims={1,2}
  %sharding_constraint.2465 = bf16[1,4096,14336]{2,1,0} copy(%dot.1151)
  %mul.9384 = bf16[1,4096,14336]{2,1,0} multiply(%sharding_constraint.2465, %sharding_constraint.2465)
  %convert_element_type.3118 = f32[1,4096,14336]{2,1,0} convert(%mul.9384)
  %reduce.972 = f32[] reduce(%convert_element_type.3118, %constant.1360), dimensions={0,1,2}, to_apply=%region_1004.25427
  %all-reduce.50 = f32[] all-reduce(%reduce.972), channel_id=853, replica_groups=[1,8]<=[8], use_global_device_ids=true, to_apply=%region_1004.25427.clone
  %convert_element_type.3119 = bf16[] convert(%all-reduce.50)
  %add.2467 = bf16[] add(%add.2466, %convert_element_type.3119)
  %dot.1152 = bf16[1,14336,4096]{2,1,0} dot(%mul.7563, %sharding_constraint.1888), lhs_batch_dims={0}, lhs_contracting_dims={1,2}, rhs_batch_dims={0}, rhs_contracting_dims={1,2}
  %sharding_constraint.2467 = bf16[1,14336,4096]{2,1,0} copy(%dot.1152)
  %mul.9387 = bf16[1,14336,4096]{2,1,0} multiply(%sharding_constraint.2467, %sharding_constraint.2467)
  %convert_element_type.3121 = f32[1,14336,4096]{2,1,0} convert(%mul.9387)
  %reduce.973 = f32[] reduce(%convert_element_type.3121, %constant.1360), dimensions={0,1,2}, to_apply=%region_1005.25438
  %all-reduce.51 = f32[] all-reduce(%reduce.973), channel_id=854, replica_groups=[1,8]<=[8], use_global_device_ids=true, to_apply=%region_1005.25438.clone
  %convert_element_type.3123 = bf16[] convert(%all-reduce.51)
  %add.2468 = bf16[] add(%add.2467, %convert_element_type.3123)
  %mul.9390 = bf16[1,4096,4096]{2,1,0} multiply(%convert_element_type.2669, %sharding_constraint.1898)
  %reduce.974 = bf16[4096]{0} reduce(%mul.9390, %constant.1190), dimensions={0,1}, to_apply=%region_1006.25446
  %all-reduce.52 = bf16[4096]{0} all-reduce(%reduce.974), channel_id=855, replica_groups=[1,8]<=[8], use_global_device_ids=true, to_apply=%region_1006.25446.clone
  %mul.9391 = bf16[4096]{0} multiply(%all-reduce.52, %all-reduce.52)
  %convert_element_type.3124 = f32[4096]{0} convert(%mul.9391)
  %reduce.975 = f32[] reduce(%convert_element_type.3124, %constant.1360), dimensions={0}, to_apply=%region_1007.25453
  %convert_element_type.3125 = bf16[] convert(%reduce.975)
  %add.2469 = bf16[] add(%add.2468, %convert_element_type.3125)
  %mul.9392 = bf16[1,4096,4096]{2,1,0} multiply(%convert_element_type.2655, %sharding_constraint.1908)
  %reduce.976 = bf16[4096]{0} reduce(%mul.9392, %constant.1190), dimensions={0,1}, to_apply=%region_1008.25461
  %all-reduce.53 = bf16[4096]{0} all-reduce(%reduce.976), channel_id=856, replica_groups=[1,8]<=[8], use_global_device_ids=true, to_apply=%region_1008.25461.clone
  %mul.9397 = bf16[4096]{0} multiply(%all-reduce.53, %all-reduce.53)
  %convert_element_type.3126 = f32[4096]{0} convert(%mul.9397)
  %reduce.977 = f32[] reduce(%convert_element_type.3126, %constant.1360), dimensions={0}, to_apply=%region_1009.25468
  %convert_element_type.3127 = bf16[] convert(%reduce.977)
  %add.2470 = bf16[] add(%add.2469, %convert_element_type.3127)
  %dot.1153 = bf16[8,128,4096]{2,1,0} dot(%concatenate.530, %sharding_constraint.1869), lhs_contracting_dims={0,1}, rhs_contracting_dims={0,1}
  %all-reduce.54 = bf16[8,128,4096]{2,1,0} all-reduce(%dot.1153), channel_id=857, replica_groups=[1,8]<=[8], use_global_device_ids=true, to_apply=%add.16.clone
  %dynamic-slice.2213 = bf16[8,128,512]{2,1,0} dynamic-slice(%all-reduce.54, %constant.1181, %constant.1181, %reshape.13763), dynamic_slice_sizes={8,128,512}
  %transpose.337 = bf16[512,8,128]{0,2,1} transpose(%dynamic-slice.2213), dimensions={2,0,1}
  %mul.9398 = bf16[512,8,128]{0,2,1} multiply(%transpose.337, %transpose.337)
  %convert_element_type.3128 = f32[512,8,128]{0,2,1} convert(%mul.9398)
  %reduce.978 = f32[] reduce(%convert_element_type.3128, %constant.1360), dimensions={0,1,2}, to_apply=%region_1010.25479
  %all-reduce.55 = f32[] all-reduce(%reduce.978), channel_id=858, replica_groups=[1,8]<=[8], use_global_device_ids=true, to_apply=%region_1010.25479.clone
  %convert_element_type.3129 = bf16[] convert(%all-reduce.55)
  %add.2471 = bf16[] add(%add.2470, %convert_element_type.3129)
  %dot.1154 = bf16[4096,32,128]{2,1,0} dot(%sharding_constraint.1900, %sharding_constraint.1875), lhs_contracting_dims={0,1}, rhs_contracting_dims={0,1}
  %all-reduce.56 = bf16[4096,32,128]{2,1,0} all-reduce(%dot.1154), channel_id=859, replica_groups=[1,8]<=[8], use_global_device_ids=true, to_apply=%add.17.clone
  %dynamic-slice.2215 = bf16[512,32,128]{2,1,0} dynamic-slice(%all-reduce.56, %reshape.13763, %constant.1181, %constant.1181), dynamic_slice_sizes={512,32,128}
  %transpose.338 = bf16[32,128,512]{1,0,2} transpose(%dynamic-slice.2215), dimensions={1,2,0}
  %mul.9399 = bf16[32,128,512]{1,0,2} multiply(%transpose.338, %transpose.338)
  %convert_element_type.3130 = f32[32,128,512]{1,0,2} convert(%mul.9399)
  %reduce.979 = f32[] reduce(%convert_element_type.3130, %constant.1360), dimensions={0,1,2}, to_apply=%region_1011.25490
  %all-reduce.57 = f32[] all-reduce(%reduce.979), channel_id=860, replica_groups=[1,8]<=[8], use_global_device_ids=true, to_apply=%region_1011.25490.clone
  %convert_element_type.3131 = bf16[] convert(%all-reduce.57)
  %add.2472 = bf16[] add(%add.2471, %convert_element_type.3131)
  %dot.1155 = bf16[32,128,4096]{2,1,0} dot(%concatenate.531, %sharding_constraint.1869), lhs_contracting_dims={0,1}, rhs_contracting_dims={0,1}
  %all-reduce.58 = bf16[32,128,4096]{2,1,0} all-reduce(%dot.1155), channel_id=861, replica_groups=[1,8]<=[8], use_global_device_ids=true, to_apply=%add.18.clone
  %dynamic-slice.2217 = bf16[32,128,512]{2,1,0} dynamic-slice(%all-reduce.58, %constant.1181, %constant.1181, %reshape.13763), dynamic_slice_sizes={32,128,512}
  %transpose.339 = bf16[512,32,128]{0,2,1} transpose(%dynamic-slice.2217), dimensions={2,0,1}
  %mul.9400 = bf16[512,32,128]{0,2,1} multiply(%transpose.339, %transpose.339)
  %convert_element_type.3132 = f32[512,32,128]{0,2,1} convert(%mul.9400)
  %reduce.980 = f32[] reduce(%convert_element_type.3132, %constant.1360), dimensions={0,1,2}, to_apply=%region_1012.25501
  %all-reduce.59 = f32[] all-reduce(%reduce.980), channel_id=862, replica_groups=[1,8]<=[8], use_global_device_ids=true, to_apply=%region_1012.25501.clone
  %convert_element_type.3133 = bf16[] convert(%all-reduce.59)
  %add.2474 = bf16[] add(%add.2472, %convert_element_type.3133)
  %dot.1156 = bf16[8,128,4096]{2,1,0} dot(%sharding_constraint.1902, %sharding_constraint.1869), lhs_contracting_dims={0,1}, rhs_contracting_dims={0,1}
  %all-reduce.60 = bf16[8,128,4096]{2,1,0} all-reduce(%dot.1156), channel_id=863, replica_groups=[1,8]<=[8], use_global_device_ids=true, to_apply=%add.19.clone
  %dynamic-slice.2219 = bf16[8,128,512]{2,1,0} dynamic-slice(%all-reduce.60, %constant.1181, %constant.1181, %reshape.13763), dynamic_slice_sizes={8,128,512}
  %transpose.340 = bf16[512,8,128]{0,2,1} transpose(%dynamic-slice.2219), dimensions={2,0,1}
  %mul.9401 = bf16[512,8,128]{0,2,1} multiply(%transpose.340, %transpose.340)
  %convert_element_type.3134 = f32[512,8,128]{0,2,1} convert(%mul.9401)
  %reduce.981 = f32[] reduce(%convert_element_type.3134, %constant.1360), dimensions={0,1,2}, to_apply=%region_1013.25512
  %all-reduce.61 = f32[] all-reduce(%reduce.981), channel_id=864, replica_groups=[1,8]<=[8], use_global_device_ids=true, to_apply=%region_1013.25512.clone
  %convert_element_type.3135 = bf16[] convert(%all-reduce.61)
  %add.2475 = bf16[] add(%add.2474, %convert_element_type.3135)
  %dot.1157 = bf16[4096,8]{1,0} dot(%sharding_constraint.1832, %sharding_constraint.1854), lhs_contracting_dims={0,1}, rhs_contracting_dims={0,1}
  %all-reduce.62 = bf16[4096,8]{1,0} all-reduce(%dot.1157), channel_id=865, replica_groups=[1,8]<=[8], use_global_device_ids=true, to_apply=%add.20.clone
  %dynamic-slice.2221 = bf16[512,8]{1,0} dynamic-slice(%all-reduce.62, %reshape.13763, %constant.1181), dynamic_slice_sizes={512,8}
  %mul.9402 = bf16[512,8]{1,0} multiply(%dynamic-slice.2221, %dynamic-slice.2221)
  %convert_element_type.3136 = f32[512,8]{1,0} convert(%mul.9402)
  %reduce.982 = f32[] reduce(%convert_element_type.3136, %constant.1360), dimensions={0,1}, to_apply=%region_1014.25522
  %all-reduce.63 = f32[] all-reduce(%reduce.982), channel_id=866, replica_groups=[1,8]<=[8], use_global_device_ids=true, to_apply=%region_1014.25522.clone
  %convert_element_type.3137 = bf16[] convert(%all-reduce.63)
  %add.2476 = bf16[] add(%add.2475, %convert_element_type.3137)
  %dot.1158 = bf16[1,4096,14336]{2,1,0} dot(%sharding_constraint.1837, %sharding_constraint.1850), lhs_batch_dims={0}, lhs_contracting_dims={1,2}, rhs_batch_dims={0}, rhs_contracting_dims={1,2}
  %sharding_constraint.2469 = bf16[1,4096,14336]{2,1,0} copy(%dot.1158)
  %mul.9403 = bf16[1,4096,14336]{2,1,0} multiply(%sharding_constraint.2469, %sharding_constraint.2469)
  %convert_element_type.3138 = f32[1,4096,14336]{2,1,0} convert(%mul.9403)
  %reduce.983 = f32[] reduce(%convert_element_type.3138, %constant.1360), dimensions={0,1,2}, to_apply=%region_1015.25533
  %all-reduce.64 = f32[] all-reduce(%reduce.983), channel_id=867, replica_groups=[1,8]<=[8], use_global_device_ids=true, to_apply=%region_1015.25533.clone
  %convert_element_type.3139 = bf16[] convert(%all-reduce.64)
  %add.2477 = bf16[] add(%add.2476, %convert_element_type.3139)
  %dot.1159 = bf16[1,4096,14336]{2,1,0} dot(%sharding_constraint.1837, %sharding_constraint.1847), lhs_batch_dims={0}, lhs_contracting_dims={1,2}, rhs_batch_dims={0}, rhs_contracting_dims={1,2}
  %sharding_constraint.2471 = bf16[1,4096,14336]{2,1,0} copy(%dot.1159)
  %mul.9404 = bf16[1,4096,14336]{2,1,0} multiply(%sharding_constraint.2471, %sharding_constraint.2471)
  %convert_element_type.3140 = f32[1,4096,14336]{2,1,0} convert(%mul.9404)
  %reduce.984 = f32[] reduce(%convert_element_type.3140, %constant.1360), dimensions={0,1,2}, to_apply=%region_1016.25544
  %all-reduce.65 = f32[] all-reduce(%reduce.984), channel_id=868, replica_groups=[1,8]<=[8], use_global_device_ids=true, to_apply=%region_1016.25544.clone
  %convert_element_type.3141 = bf16[] convert(%all-reduce.65)
  %add.2478 = bf16[] add(%add.2477, %convert_element_type.3141)
  %dot.1160 = bf16[1,14336,4096]{2,1,0} dot(%mul.7443, %sharding_constraint.1845), lhs_batch_dims={0}, lhs_contracting_dims={1,2}, rhs_batch_dims={0}, rhs_contracting_dims={1,2}
  %sharding_constraint.2473 = bf16[1,14336,4096]{2,1,0} copy(%dot.1160)
  %mul.9405 = bf16[1,14336,4096]{2,1,0} multiply(%sharding_constraint.2473, %sharding_constraint.2473)
  %convert_element_type.3143 = f32[1,14336,4096]{2,1,0} convert(%mul.9405)
  %reduce.985 = f32[] reduce(%convert_element_type.3143, %constant.1360), dimensions={0,1,2}, to_apply=%region_1017.25555
  %all-reduce.66 = f32[] all-reduce(%reduce.985), channel_id=869, replica_groups=[1,8]<=[8], use_global_device_ids=true, to_apply=%region_1017.25555.clone
  %convert_element_type.3144 = bf16[] convert(%all-reduce.66)
  %add.2479 = bf16[] add(%add.2478, %convert_element_type.3144)
  %mul.9406 = bf16[1,4096,4096]{2,1,0} multiply(%convert_element_type.2638, %sharding_constraint.1855)
  %reduce.986 = bf16[4096]{0} reduce(%mul.9406, %constant.1190), dimensions={0,1}, to_apply=%region_1018.25563
  %all-reduce.67 = bf16[4096]{0} all-reduce(%reduce.986), channel_id=870, replica_groups=[1,8]<=[8], use_global_device_ids=true, to_apply=%region_1018.25563.clone
  %mul.9407 = bf16[4096]{0} multiply(%all-reduce.67, %all-reduce.67)
  %convert_element_type.3145 = f32[4096]{0} convert(%mul.9407)
  %reduce.987 = f32[] reduce(%convert_element_type.3145, %constant.1360), dimensions={0}, to_apply=%region_1019.25570
  %convert_element_type.3146 = bf16[] convert(%reduce.987)
  %add.2480 = bf16[] add(%add.2479, %convert_element_type.3146)
  %mul.9408 = bf16[1,4096,4096]{2,1,0} multiply(%convert_element_type.2626, %sharding_constraint.1864)
  %reduce.988 = bf16[4096]{0} reduce(%mul.9408, %constant.1190), dimensions={0,1}, to_apply=%region_1020.25578
  %all-reduce.68 = bf16[4096]{0} all-reduce(%reduce.988), channel_id=871, replica_groups=[1,8]<=[8], use_global_device_ids=true, to_apply=%region_1020.25578.clone
  %mul.9409 = bf16[4096]{0} multiply(%all-reduce.68, %all-reduce.68)
  %convert_element_type.3147 = f32[4096]{0} convert(%mul.9409)
  %reduce.989 = f32[] reduce(%convert_element_type.3147, %constant.1360), dimensions={0}, to_apply=%region_1021.25585
  %convert_element_type.3148 = bf16[] convert(%reduce.989)
  %add.2481 = bf16[] add(%add.2480, %convert_element_type.3148)
  %dot.1161 = bf16[8,128,4096]{2,1,0} dot(%concatenate.517, %sharding_constraint.1825), lhs_contracting_dims={0,1}, rhs_contracting_dims={0,1}
  %all-reduce.69 = bf16[8,128,4096]{2,1,0} all-reduce(%dot.1161), channel_id=872, replica_groups=[1,8]<=[8], use_global_device_ids=true, to_apply=%add.21.clone
  %dynamic-slice.2223 = bf16[8,128,512]{2,1,0} dynamic-slice(%all-reduce.69, %constant.1181, %constant.1181, %reshape.13763), dynamic_slice_sizes={8,128,512}
  %transpose.341 = bf16[512,8,128]{0,2,1} transpose(%dynamic-slice.2223), dimensions={2,0,1}
  %mul.9410 = bf16[512,8,128]{0,2,1} multiply(%transpose.341, %transpose.341)
  %convert_element_type.3149 = f32[512,8,128]{0,2,1} convert(%mul.9410)
  %reduce.990 = f32[] reduce(%convert_element_type.3149, %constant.1360), dimensions={0,1,2}, to_apply=%region_1022.25596
  %all-reduce.70 = f32[] all-reduce(%reduce.990), channel_id=873, replica_groups=[1,8]<=[8], use_global_device_ids=true, to_apply=%region_1022.25596.clone
  %convert_element_type.3150 = bf16[] convert(%all-reduce.70)
  %add.2482 = bf16[] add(%add.2481, %convert_element_type.3150)
  %dot.1162 = bf16[4096,32,128]{2,1,0} dot(%sharding_constraint.1857, %sharding_constraint.1830), lhs_contracting_dims={0,1}, rhs_contracting_dims={0,1}
  %all-reduce.71 = bf16[4096,32,128]{2,1,0} all-reduce(%dot.1162), channel_id=874, replica_groups=[1,8]<=[8], use_global_device_ids=true, to_apply=%add.22.clone
  %dynamic-slice.2225 = bf16[512,32,128]{2,1,0} dynamic-slice(%all-reduce.71, %reshape.13763, %constant.1181, %constant.1181), dynamic_slice_sizes={512,32,128}
  %transpose.342 = bf16[32,128,512]{1,0,2} transpose(%dynamic-slice.2225), dimensions={1,2,0}
  %mul.9411 = bf16[32,128,512]{1,0,2} multiply(%transpose.342, %transpose.342)
  %convert_element_type.3151 = f32[32,128,512]{1,0,2} convert(%mul.9411)
  %reduce.991 = f32[] reduce(%convert_element_type.3151, %constant.1360), dimensions={0,1,2}, to_apply=%region_1023.25607
  %all-reduce.72 = f32[] all-reduce(%reduce.991), channel_id=875, replica_groups=[1,8]<=[8], use_global_device_ids=true, to_apply=%region_1023.25607.clone
  %convert_element_type.3152 = bf16[] convert(%all-reduce.72)
  %add.2483 = bf16[] add(%add.2482, %convert_element_type.3152)
  %dot.1163 = bf16[32,128,4096]{2,1,0} dot(%concatenate.518, %sharding_constraint.1825), lhs_contracting_dims={0,1}, rhs_contracting_dims={0,1}
  %all-reduce.73 = bf16[32,128,4096]{2,1,0} all-reduce(%dot.1163), channel_id=876, replica_groups=[1,8]<=[8], use_global_device_ids=true, to_apply=%add.23.clone
  %dynamic-slice.2227 = bf16[32,128,512]{2,1,0} dynamic-slice(%all-reduce.73, %constant.1181, %constant.1181, %reshape.13763), dynamic_slice_sizes={32,128,512}
  %transpose.343 = bf16[512,32,128]{0,2,1} transpose(%dynamic-slice.2227), dimensions={2,0,1}
  %mul.9413 = bf16[512,32,128]{0,2,1} multiply(%transpose.343, %transpose.343)
  %convert_element_type.3153 = f32[512,32,128]{0,2,1} convert(%mul.9413)
  %reduce.992 = f32[] reduce(%convert_element_type.3153, %constant.1360), dimensions={0,1,2}, to_apply=%region_1024.25618
  %all-reduce.74 = f32[] all-reduce(%reduce.992), channel_id=877, replica_groups=[1,8]<=[8], use_global_device_ids=true, to_apply=%region_1024.25618.clone
  %convert_element_type.3155 = bf16[] convert(%all-reduce.74)
  %add.2485 = bf16[] add(%add.2483, %convert_element_type.3155)
  %dot.1164 = bf16[8,128,4096]{2,1,0} dot(%sharding_constraint.1859, %sharding_constraint.1825), lhs_contracting_dims={0,1}, rhs_contracting_dims={0,1}
  %all-reduce.75 = bf16[8,128,4096]{2,1,0} all-reduce(%dot.1164), channel_id=878, replica_groups=[1,8]<=[8], use_global_device_ids=true, to_apply=%add.24.clone
  %dynamic-slice.2229 = bf16[8,128,512]{2,1,0} dynamic-slice(%all-reduce.75, %constant.1181, %constant.1181, %reshape.13763), dynamic_slice_sizes={8,128,512}
  %transpose.344 = bf16[512,8,128]{0,2,1} transpose(%dynamic-slice.2229), dimensions={2,0,1}
  %mul.9414 = bf16[512,8,128]{0,2,1} multiply(%transpose.344, %transpose.344)
  %convert_element_type.3156 = f32[512,8,128]{0,2,1} convert(%mul.9414)
  %reduce.993 = f32[] reduce(%convert_element_type.3156, %constant.1360), dimensions={0,1,2}, to_apply=%region_1025.25629
  %all-reduce.76 = f32[] all-reduce(%reduce.993), channel_id=879, replica_groups=[1,8]<=[8], use_global_device_ids=true, to_apply=%region_1025.25629.clone
  %convert_element_type.3157 = bf16[] convert(%all-reduce.76)
  %add.2486 = bf16[] add(%add.2485, %convert_element_type.3157)
  %dot.1165 = bf16[4096,8]{1,0} dot(%sharding_constraint.1776, %sharding_constraint.1797), lhs_contracting_dims={0,1}, rhs_contracting_dims={0,1}
  %all-reduce.77 = bf16[4096,8]{1,0} all-reduce(%dot.1165), channel_id=880, replica_groups=[1,8]<=[8], use_global_device_ids=true, to_apply=%add.25.clone
  %dynamic-slice.2231 = bf16[512,8]{1,0} dynamic-slice(%all-reduce.77, %reshape.13763, %constant.1181), dynamic_slice_sizes={512,8}
  %mul.9415 = bf16[512,8]{1,0} multiply(%dynamic-slice.2231, %dynamic-slice.2231)
  %convert_element_type.3158 = f32[512,8]{1,0} convert(%mul.9415)
  %reduce.994 = f32[] reduce(%convert_element_type.3158, %constant.1360), dimensions={0,1}, to_apply=%region_1026.25639
  %all-reduce.78 = f32[] all-reduce(%reduce.994), channel_id=881, replica_groups=[1,8]<=[8], use_global_device_ids=true, to_apply=%region_1026.25639.clone
  %convert_element_type.3159 = bf16[] convert(%all-reduce.78)
  %add.2487 = bf16[] add(%add.2486, %convert_element_type.3159)
  %dot.1166 = bf16[1,4096,14336]{2,1,0} dot(%sharding_constraint.1781, %sharding_constraint.1793), lhs_batch_dims={0}, lhs_contracting_dims={1,2}, rhs_batch_dims={0}, rhs_contracting_dims={1,2}
  %sharding_constraint.2476 = bf16[1,4096,14336]{2,1,0} copy(%dot.1166)
  %mul.9416 = bf16[1,4096,14336]{2,1,0} multiply(%sharding_constraint.2476, %sharding_constraint.2476)
  %convert_element_type.3160 = f32[1,4096,14336]{2,1,0} convert(%mul.9416)
  %reduce.995 = f32[] reduce(%convert_element_type.3160, %constant.1360), dimensions={0,1,2}, to_apply=%region_1027.25650
  %all-reduce.79 = f32[] all-reduce(%reduce.995), channel_id=882, replica_groups=[1,8]<=[8], use_global_device_ids=true, to_apply=%region_1027.25650.clone
  %convert_element_type.3161 = bf16[] convert(%all-reduce.79)
  %add.2488 = bf16[] add(%add.2487, %convert_element_type.3161)
  %dot.1167 = bf16[1,4096,14336]{2,1,0} dot(%sharding_constraint.1781, %sharding_constraint.1790), lhs_batch_dims={0}, lhs_contracting_dims={1,2}, rhs_batch_dims={0}, rhs_contracting_dims={1,2}
  %sharding_constraint.2477 = bf16[1,4096,14336]{2,1,0} copy(%dot.1167)
  %mul.9417 = bf16[1,4096,14336]{2,1,0} multiply(%sharding_constraint.2477, %sharding_constraint.2477)
  %convert_element_type.3162 = f32[1,4096,14336]{2,1,0} convert(%mul.9417)
  %reduce.996 = f32[] reduce(%convert_element_type.3162, %constant.1360), dimensions={0,1,2}, to_apply=%region_1028.25661
  %all-reduce.80 = f32[] all-reduce(%reduce.996), channel_id=883, replica_groups=[1,8]<=[8], use_global_device_ids=true, to_apply=%region_1028.25661.clone
  %convert_element_type.3163 = bf16[] convert(%all-reduce.80)
  %add.2489 = bf16[] add(%add.2488, %convert_element_type.3163)
  %dot.1168 = bf16[1,14336,4096]{2,1,0} dot(%mul.7272, %sharding_constraint.1788), lhs_batch_dims={0}, lhs_contracting_dims={1,2}, rhs_batch_dims={0}, rhs_contracting_dims={1,2}
  %sharding_constraint.2478 = bf16[1,14336,4096]{2,1,0} copy(%dot.1168)
  %mul.9418 = bf16[1,14336,4096]{2,1,0} multiply(%sharding_constraint.2478, %sharding_constraint.2478)
  %convert_element_type.3164 = f32[1,14336,4096]{2,1,0} convert(%mul.9418)
  %reduce.997 = f32[] reduce(%convert_element_type.3164, %constant.1360), dimensions={0,1,2}, to_apply=%region_1029.25672
  %all-reduce.81 = f32[] all-reduce(%reduce.997), channel_id=884, replica_groups=[1,8]<=[8], use_global_device_ids=true, to_apply=%region_1029.25672.clone
  %convert_element_type.3165 = bf16[] convert(%all-reduce.81)
  %add.2490 = bf16[] add(%add.2489, %convert_element_type.3165)
  %mul.9419 = bf16[1,4096,4096]{2,1,0} multiply(%convert_element_type.2608, %sharding_constraint.1798)
  %reduce.998 = bf16[4096]{0} reduce(%mul.9419, %constant.1190), dimensions={0,1}, to_apply=%region_1030.25680
  %all-reduce.82 = bf16[4096]{0} all-reduce(%reduce.998), channel_id=885, replica_groups=[1,8]<=[8], use_global_device_ids=true, to_apply=%region_1030.25680.clone
  %mul.9420 = bf16[4096]{0} multiply(%all-reduce.82, %all-reduce.82)
  %convert_element_type.3166 = f32[4096]{0} convert(%mul.9420)
  %reduce.999 = f32[] reduce(%convert_element_type.3166, %constant.1360), dimensions={0}, to_apply=%region_1031.25687
  %convert_element_type.3167 = bf16[] convert(%reduce.999)
  %add.2491 = bf16[] add(%add.2490, %convert_element_type.3167)
  %mul.9421 = bf16[1,4096,4096]{2,1,0} multiply(%convert_element_type.2594, %sharding_constraint.1818)
  %reduce.1000 = bf16[4096]{0} reduce(%mul.9421, %constant.1190), dimensions={0,1}, to_apply=%region_1032.25695
  %all-reduce.83 = bf16[4096]{0} all-reduce(%reduce.1000), channel_id=886, replica_groups=[1,8]<=[8], use_global_device_ids=true, to_apply=%region_1032.25695.clone
  %mul.9422 = bf16[4096]{0} multiply(%all-reduce.83, %all-reduce.83)
  %convert_element_type.3168 = f32[4096]{0} convert(%mul.9422)
  %reduce.1001 = f32[] reduce(%convert_element_type.3168, %constant.1360), dimensions={0}, to_apply=%region_1033.25702
  %convert_element_type.3169 = bf16[] convert(%reduce.1001)
  %add.2492 = bf16[] add(%add.2491, %convert_element_type.3169)
  %dot.1169 = bf16[8,128,4096]{2,1,0} dot(%concatenate.504, %sharding_constraint.1767), lhs_contracting_dims={0,1}, rhs_contracting_dims={0,1}
  %all-reduce.84 = bf16[8,128,4096]{2,1,0} all-reduce(%dot.1169), channel_id=887, replica_groups=[1,8]<=[8], use_global_device_ids=true, to_apply=%add.26.clone
  %dynamic-slice.2233 = bf16[8,128,512]{2,1,0} dynamic-slice(%all-reduce.84, %constant.1181, %constant.1181, %reshape.13763), dynamic_slice_sizes={8,128,512}
  %transpose.345 = bf16[512,8,128]{0,2,1} transpose(%dynamic-slice.2233), dimensions={2,0,1}
  %mul.9423 = bf16[512,8,128]{0,2,1} multiply(%transpose.345, %transpose.345)
  %convert_element_type.3171 = f32[512,8,128]{0,2,1} convert(%mul.9423)
  %reduce.1002 = f32[] reduce(%convert_element_type.3171, %constant.1360), dimensions={0,1,2}, to_apply=%region_1034.25713
  %all-reduce.85 = f32[] all-reduce(%reduce.1002), channel_id=888, replica_groups=[1,8]<=[8], use_global_device_ids=true, to_apply=%region_1034.25713.clone
  %convert_element_type.3172 = bf16[] convert(%all-reduce.85)
  %add.2493 = bf16[] add(%add.2492, %convert_element_type.3172)
  %dot.1170 = bf16[4096,32,128]{2,1,0} dot(%sharding_constraint.1803, %sharding_constraint.1774), lhs_contracting_dims={0,1}, rhs_contracting_dims={0,1}
  %all-reduce.86 = bf16[4096,32,128]{2,1,0} all-reduce(%dot.1170), channel_id=889, replica_groups=[1,8]<=[8], use_global_device_ids=true, to_apply=%add.27.clone
  %dynamic-slice.2235 = bf16[512,32,128]{2,1,0} dynamic-slice(%all-reduce.86, %reshape.13763, %constant.1181, %constant.1181), dynamic_slice_sizes={512,32,128}
  %transpose.346 = bf16[32,128,512]{1,0,2} transpose(%dynamic-slice.2235), dimensions={1,2,0}
  %mul.9424 = bf16[32,128,512]{1,0,2} multiply(%transpose.346, %transpose.346)
  %convert_element_type.3173 = f32[32,128,512]{1,0,2} convert(%mul.9424)
  %reduce.1003 = f32[] reduce(%convert_element_type.3173, %constant.1360), dimensions={0,1,2}, to_apply=%region_1035.25724
  %all-reduce.87 = f32[] all-reduce(%reduce.1003), channel_id=890, replica_groups=[1,8]<=[8], use_global_device_ids=true, to_apply=%region_1035.25724.clone
  %convert_element_type.3174 = bf16[] convert(%all-reduce.87)
  %add.2495 = bf16[] add(%add.2493, %convert_element_type.3174)
  %dot.1171 = bf16[32,128,4096]{2,1,0} dot(%concatenate.505, %sharding_constraint.1767), lhs_contracting_dims={0,1}, rhs_contracting_dims={0,1}
  %all-reduce.88 = bf16[32,128,4096]{2,1,0} all-reduce(%dot.1171), channel_id=891, replica_groups=[1,8]<=[8], use_global_device_ids=true, to_apply=%add.28.clone
  %dynamic-slice.2237 = bf16[32,128,512]{2,1,0} dynamic-slice(%all-reduce.88, %constant.1181, %constant.1181, %reshape.13763), dynamic_slice_sizes={32,128,512}
  %transpose.347 = bf16[512,32,128]{0,2,1} transpose(%dynamic-slice.2237), dimensions={2,0,1}
  %mul.9425 = bf16[512,32,128]{0,2,1} multiply(%transpose.347, %transpose.347)
  %convert_element_type.3175 = f32[512,32,128]{0,2,1} convert(%mul.9425)
  %reduce.1004 = f32[] reduce(%convert_element_type.3175, %constant.1360), dimensions={0,1,2}, to_apply=%region_1036.25735
  %all-reduce.89 = f32[] all-reduce(%reduce.1004), channel_id=892, replica_groups=[1,8]<=[8], use_global_device_ids=true, to_apply=%region_1036.25735.clone
  %convert_element_type.3176 = bf16[] convert(%all-reduce.89)
  %add.2496 = bf16[] add(%add.2495, %convert_element_type.3176)
  %dot.1172 = bf16[8,128,4096]{2,1,0} dot(%sharding_constraint.1809, %sharding_constraint.1767), lhs_contracting_dims={0,1}, rhs_contracting_dims={0,1}
  %all-reduce.90 = bf16[8,128,4096]{2,1,0} all-reduce(%dot.1172), channel_id=893, replica_groups=[1,8]<=[8], use_global_device_ids=true, to_apply=%add.29.clone
  %dynamic-slice.2239 = bf16[8,128,512]{2,1,0} dynamic-slice(%all-reduce.90, %constant.1181, %constant.1181, %reshape.13763), dynamic_slice_sizes={8,128,512}
  %transpose.348 = bf16[512,8,128]{0,2,1} transpose(%dynamic-slice.2239), dimensions={2,0,1}
  %mul.9426 = bf16[512,8,128]{0,2,1} multiply(%transpose.348, %transpose.348)
  %convert_element_type.3177 = f32[512,8,128]{0,2,1} convert(%mul.9426)
  %reduce.1005 = f32[] reduce(%convert_element_type.3177, %constant.1360), dimensions={0,1,2}, to_apply=%region_1037.25746
  %all-reduce.91 = f32[] all-reduce(%reduce.1005), channel_id=894, replica_groups=[1,8]<=[8], use_global_device_ids=true, to_apply=%region_1037.25746.clone
  %convert_element_type.3179 = bf16[] convert(%all-reduce.91)
  %add.2497 = bf16[] add(%add.2496, %convert_element_type.3179)
  %dot.1173 = bf16[4096,8]{1,0} dot(%sharding_constraint.1731, %sharding_constraint.1752), lhs_contracting_dims={0,1}, rhs_contracting_dims={0,1}
  %all-reduce.92 = bf16[4096,8]{1,0} all-reduce(%dot.1173), channel_id=895, replica_groups=[1,8]<=[8], use_global_device_ids=true, to_apply=%add.30.clone
  %dynamic-slice.2241 = bf16[512,8]{1,0} dynamic-slice(%all-reduce.92, %reshape.13763, %constant.1181), dynamic_slice_sizes={512,8}
  %mul.9427 = bf16[512,8]{1,0} multiply(%dynamic-slice.2241, %dynamic-slice.2241)
  %convert_element_type.3180 = f32[512,8]{1,0} convert(%mul.9427)
  %reduce.1006 = f32[] reduce(%convert_element_type.3180, %constant.1360), dimensions={0,1}, to_apply=%region_1038.25756
  %all-reduce.93 = f32[] all-reduce(%reduce.1006), channel_id=896, replica_groups=[1,8]<=[8], use_global_device_ids=true, to_apply=%region_1038.25756.clone
  %convert_element_type.3181 = bf16[] convert(%all-reduce.93)
  %add.2498 = bf16[] add(%add.2497, %convert_element_type.3181)
  %dot.1174 = bf16[1,4096,14336]{2,1,0} dot(%sharding_constraint.1736, %sharding_constraint.1748), lhs_batch_dims={0}, lhs_contracting_dims={1,2}, rhs_batch_dims={0}, rhs_contracting_dims={1,2}
  %sharding_constraint.2479 = bf16[1,4096,14336]{2,1,0} copy(%dot.1174)
  %mul.9428 = bf16[1,4096,14336]{2,1,0} multiply(%sharding_constraint.2479, %sharding_constraint.2479)
  %convert_element_type.3182 = f32[1,4096,14336]{2,1,0} convert(%mul.9428)
  %reduce.1007 = f32[] reduce(%convert_element_type.3182, %constant.1360), dimensions={0,1,2}, to_apply=%region_1039.25767
  %all-reduce.94 = f32[] all-reduce(%reduce.1007), channel_id=897, replica_groups=[1,8]<=[8], use_global_device_ids=true, to_apply=%region_1039.25767.clone
  %convert_element_type.3183 = bf16[] convert(%all-reduce.94)
  %add.2499 = bf16[] add(%add.2498, %convert_element_type.3183)
  %dot.1175 = bf16[1,4096,14336]{2,1,0} dot(%sharding_constraint.1736, %sharding_constraint.1743), lhs_batch_dims={0}, lhs_contracting_dims={1,2}, rhs_batch_dims={0}, rhs_contracting_dims={1,2}
  %sharding_constraint.2480 = bf16[1,4096,14336]{2,1,0} copy(%dot.1175)
  %mul.9429 = bf16[1,4096,14336]{2,1,0} multiply(%sharding_constraint.2480, %sharding_constraint.2480)
  %convert_element_type.3184 = f32[1,4096,14336]{2,1,0} convert(%mul.9429)
  %reduce.1008 = f32[] reduce(%convert_element_type.3184, %constant.1360), dimensions={0,1,2}, to_apply=%region_1040.25778
  %all-reduce.95 = f32[] all-reduce(%reduce.1008), channel_id=898, replica_groups=[1,8]<=[8], use_global_device_ids=true, to_apply=%region_1040.25778.clone
  %convert_element_type.3185 = bf16[] convert(%all-reduce.95)
  %add.2500 = bf16[] add(%add.2499, %convert_element_type.3185)
  %dot.1176 = bf16[1,14336,4096]{2,1,0} dot(%mul.7136, %sharding_constraint.1741), lhs_batch_dims={0}, lhs_contracting_dims={1,2}, rhs_batch_dims={0}, rhs_contracting_dims={1,2}
  %sharding_constraint.2481 = bf16[1,14336,4096]{2,1,0} copy(%dot.1176)
  %mul.9430 = bf16[1,14336,4096]{2,1,0} multiply(%sharding_constraint.2481, %sharding_constraint.2481)
  %convert_element_type.3186 = f32[1,14336,4096]{2,1,0} convert(%mul.9430)
  %reduce.1009 = f32[] reduce(%convert_element_type.3186, %constant.1360), dimensions={0,1,2}, to_apply=%region_1041.25789
  %all-reduce.96 = f32[] all-reduce(%reduce.1009), channel_id=899, replica_groups=[1,8]<=[8], use_global_device_ids=true, to_apply=%region_1041.25789.clone
  %convert_element_type.3187 = bf16[] convert(%all-reduce.96)
  %add.2501 = bf16[] add(%add.2500, %convert_element_type.3187)
  %mul.9431 = bf16[1,4096,4096]{2,1,0} multiply(%convert_element_type.2576, %sharding_constraint.1753)
  %reduce.1010 = bf16[4096]{0} reduce(%mul.9431, %constant.1190), dimensions={0,1}, to_apply=%region_1042.25797
  %all-reduce.97 = bf16[4096]{0} all-reduce(%reduce.1010), channel_id=900, replica_groups=[1,8]<=[8], use_global_device_ids=true, to_apply=%region_1042.25797.clone
  %mul.9436 = bf16[4096]{0} multiply(%all-reduce.97, %all-reduce.97)
  %convert_element_type.3188 = f32[4096]{0} convert(%mul.9436)
  %reduce.1011 = f32[] reduce(%convert_element_type.3188, %constant.1360), dimensions={0}, to_apply=%region_1043.25804
  %convert_element_type.3189 = bf16[] convert(%reduce.1011)
  %add.2502 = bf16[] add(%add.2501, %convert_element_type.3189)
  %mul.9437 = bf16[1,4096,4096]{2,1,0} multiply(%convert_element_type.2561, %sharding_constraint.1762)
  %reduce.1012 = bf16[4096]{0} reduce(%mul.9437, %constant.1190), dimensions={0,1}, to_apply=%region_1044.25812
  %all-reduce.98 = bf16[4096]{0} all-reduce(%reduce.1012), channel_id=901, replica_groups=[1,8]<=[8], use_global_device_ids=true, to_apply=%region_1044.25812.clone
  %mul.9442 = bf16[4096]{0} multiply(%all-reduce.98, %all-reduce.98)
  %convert_element_type.3190 = f32[4096]{0} convert(%mul.9442)
  %reduce.1013 = f32[] reduce(%convert_element_type.3190, %constant.1360), dimensions={0}, to_apply=%region_1045.25819
  %convert_element_type.3191 = bf16[] convert(%reduce.1013)
  %add.2503 = bf16[] add(%add.2502, %convert_element_type.3191)
  %dot.1177 = bf16[8,128,4096]{2,1,0} dot(%concatenate.491, %sharding_constraint.1724), lhs_contracting_dims={0,1}, rhs_contracting_dims={0,1}
  %all-reduce.99 = bf16[8,128,4096]{2,1,0} all-reduce(%dot.1177), channel_id=902, replica_groups=[1,8]<=[8], use_global_device_ids=true, to_apply=%add.31.clone
  %dynamic-slice.2243 = bf16[8,128,512]{2,1,0} dynamic-slice(%all-reduce.99, %constant.1181, %constant.1181, %reshape.13763), dynamic_slice_sizes={8,128,512}
  %transpose.349 = bf16[512,8,128]{0,2,1} transpose(%dynamic-slice.2243), dimensions={2,0,1}
  %mul.9443 = bf16[512,8,128]{0,2,1} multiply(%transpose.349, %transpose.349)
  %convert_element_type.3192 = f32[512,8,128]{0,2,1} convert(%mul.9443)
  %reduce.1014 = f32[] reduce(%convert_element_type.3192, %constant.1360), dimensions={0,1,2}, to_apply=%region_1046.25830
  %all-reduce.100 = f32[] all-reduce(%reduce.1014), channel_id=903, replica_groups=[1,8]<=[8], use_global_device_ids=true, to_apply=%region_1046.25830.clone
  %convert_element_type.3193 = bf16[] convert(%all-reduce.100)
  %add.2504 = bf16[] add(%add.2503, %convert_element_type.3193)
  %dot.1178 = bf16[4096,32,128]{2,1,0} dot(%sharding_constraint.1755, %sharding_constraint.1729), lhs_contracting_dims={0,1}, rhs_contracting_dims={0,1}
  %all-reduce.101 = bf16[4096,32,128]{2,1,0} all-reduce(%dot.1178), channel_id=904, replica_groups=[1,8]<=[8], use_global_device_ids=true, to_apply=%add.32.clone
  %dynamic-slice.2245 = bf16[512,32,128]{2,1,0} dynamic-slice(%all-reduce.101, %reshape.13763, %constant.1181, %constant.1181), dynamic_slice_sizes={512,32,128}
  %transpose.350 = bf16[32,128,512]{1,0,2} transpose(%dynamic-slice.2245), dimensions={1,2,0}
  %mul.9444 = bf16[32,128,512]{1,0,2} multiply(%transpose.350, %transpose.350)
  %convert_element_type.3194 = f32[32,128,512]{1,0,2} convert(%mul.9444)
  %reduce.1015 = f32[] reduce(%convert_element_type.3194, %constant.1360), dimensions={0,1,2}, to_apply=%region_1047.25841
  %all-reduce.102 = f32[] all-reduce(%reduce.1015), channel_id=905, replica_groups=[1,8]<=[8], use_global_device_ids=true, to_apply=%region_1047.25841.clone
  %convert_element_type.3195 = bf16[] convert(%all-reduce.102)
  %add.2505 = bf16[] add(%add.2504, %convert_element_type.3195)
  %dot.1179 = bf16[32,128,4096]{2,1,0} dot(%concatenate.492, %sharding_constraint.1724), lhs_contracting_dims={0,1}, rhs_contracting_dims={0,1}
  %all-reduce.103 = bf16[32,128,4096]{2,1,0} all-reduce(%dot.1179), channel_id=906, replica_groups=[1,8]<=[8], use_global_device_ids=true, to_apply=%add.33.clone
  %dynamic-slice.2247 = bf16[32,128,512]{2,1,0} dynamic-slice(%all-reduce.103, %constant.1181, %constant.1181, %reshape.13763), dynamic_slice_sizes={32,128,512}
  %transpose.351 = bf16[512,32,128]{0,2,1} transpose(%dynamic-slice.2247), dimensions={2,0,1}
  %mul.9445 = bf16[512,32,128]{0,2,1} multiply(%transpose.351, %transpose.351)
  %convert_element_type.3196 = f32[512,32,128]{0,2,1} convert(%mul.9445)
  %reduce.1016 = f32[] reduce(%convert_element_type.3196, %constant.1360), dimensions={0,1,2}, to_apply=%region_1048.25852
  %all-reduce.104 = f32[] all-reduce(%reduce.1016), channel_id=907, replica_groups=[1,8]<=[8], use_global_device_ids=true, to_apply=%region_1048.25852.clone
  %convert_element_type.3200 = bf16[] convert(%all-reduce.104)
  %add.2506 = bf16[] add(%add.2505, %convert_element_type.3200)
  %dot.1180 = bf16[8,128,4096]{2,1,0} dot(%sharding_constraint.1757, %sharding_constraint.1724), lhs_contracting_dims={0,1}, rhs_contracting_dims={0,1}
  %all-reduce.105 = bf16[8,128,4096]{2,1,0} all-reduce(%dot.1180), channel_id=908, replica_groups=[1,8]<=[8], use_global_device_ids=true, to_apply=%add.34.clone
  %dynamic-slice.2249 = bf16[8,128,512]{2,1,0} dynamic-slice(%all-reduce.105, %constant.1181, %constant.1181, %reshape.13763), dynamic_slice_sizes={8,128,512}
  %transpose.352 = bf16[512,8,128]{0,2,1} transpose(%dynamic-slice.2249), dimensions={2,0,1}
  %mul.9446 = bf16[512,8,128]{0,2,1} multiply(%transpose.352, %transpose.352)
  %convert_element_type.3201 = f32[512,8,128]{0,2,1} convert(%mul.9446)
  %reduce.1017 = f32[] reduce(%convert_element_type.3201, %constant.1360), dimensions={0,1,2}, to_apply=%region_1049.25863
  %all-reduce.106 = f32[] all-reduce(%reduce.1017), channel_id=909, replica_groups=[1,8]<=[8], use_global_device_ids=true, to_apply=%region_1049.25863.clone
  %convert_element_type.3202 = bf16[] convert(%all-reduce.106)
  %add.2507 = bf16[] add(%add.2506, %convert_element_type.3202)
  %dot.1181 = bf16[4096,8]{1,0} dot(%sharding_constraint.1686, %sharding_constraint.1707), lhs_contracting_dims={0,1}, rhs_contracting_dims={0,1}
  %all-reduce.107 = bf16[4096,8]{1,0} all-reduce(%dot.1181), channel_id=910, replica_groups=[1,8]<=[8], use_global_device_ids=true, to_apply=%add.35.clone
  %dynamic-slice.2251 = bf16[512,8]{1,0} dynamic-slice(%all-reduce.107, %reshape.13763, %constant.1181), dynamic_slice_sizes={512,8}
  %mul.9447 = bf16[512,8]{1,0} multiply(%dynamic-slice.2251, %dynamic-slice.2251)
  %convert_element_type.3203 = f32[512,8]{1,0} convert(%mul.9447)
  %reduce.1018 = f32[] reduce(%convert_element_type.3203, %constant.1360), dimensions={0,1}, to_apply=%region_1050.25873
  %all-reduce.108 = f32[] all-reduce(%reduce.1018), channel_id=911, replica_groups=[1,8]<=[8], use_global_device_ids=true, to_apply=%region_1050.25873.clone
  %convert_element_type.3204 = bf16[] convert(%all-reduce.108)
  %add.2508 = bf16[] add(%add.2507, %convert_element_type.3204)
  %dot.1182 = bf16[1,4096,14336]{2,1,0} dot(%sharding_constraint.1691, %sharding_constraint.1703), lhs_batch_dims={0}, lhs_contracting_dims={1,2}, rhs_batch_dims={0}, rhs_contracting_dims={1,2}
  %sharding_constraint.2482 = bf16[1,4096,14336]{2,1,0} copy(%dot.1182)
  %mul.9448 = bf16[1,4096,14336]{2,1,0} multiply(%sharding_constraint.2482, %sharding_constraint.2482)
  %convert_element_type.3205 = f32[1,4096,14336]{2,1,0} convert(%mul.9448)
  %reduce.1019 = f32[] reduce(%convert_element_type.3205, %constant.1360), dimensions={0,1,2}, to_apply=%region_1051.25884
  %all-reduce.109 = f32[] all-reduce(%reduce.1019), channel_id=912, replica_groups=[1,8]<=[8], use_global_device_ids=true, to_apply=%region_1051.25884.clone
  %convert_element_type.3206 = bf16[] convert(%all-reduce.109)
  %add.2509 = bf16[] add(%add.2508, %convert_element_type.3206)
  %dot.1183 = bf16[1,4096,14336]{2,1,0} dot(%sharding_constraint.1691, %sharding_constraint.1699), lhs_batch_dims={0}, lhs_contracting_dims={1,2}, rhs_batch_dims={0}, rhs_contracting_dims={1,2}
  %sharding_constraint.2483 = bf16[1,4096,14336]{2,1,0} copy(%dot.1183)
  %mul.9449 = bf16[1,4096,14336]{2,1,0} multiply(%sharding_constraint.2483, %sharding_constraint.2483)
  %convert_element_type.3207 = f32[1,4096,14336]{2,1,0} convert(%mul.9449)
  %reduce.1020 = f32[] reduce(%convert_element_type.3207, %constant.1360), dimensions={0,1,2}, to_apply=%region_1052.25895
  %all-reduce.110 = f32[] all-reduce(%reduce.1020), channel_id=913, replica_groups=[1,8]<=[8], use_global_device_ids=true, to_apply=%region_1052.25895.clone
  %convert_element_type.3208 = bf16[] convert(%all-reduce.110)
  %add.2510 = bf16[] add(%add.2509, %convert_element_type.3208)
  %dot.1184 = bf16[1,14336,4096]{2,1,0} dot(%mul.6968, %sharding_constraint.1696), lhs_batch_dims={0}, lhs_contracting_dims={1,2}, rhs_batch_dims={0}, rhs_contracting_dims={1,2}
  %sharding_constraint.2484 = bf16[1,14336,4096]{2,1,0} copy(%dot.1184)
  %mul.9451 = bf16[1,14336,4096]{2,1,0} multiply(%sharding_constraint.2484, %sharding_constraint.2484)
  %convert_element_type.3209 = f32[1,14336,4096]{2,1,0} convert(%mul.9451)
  %reduce.1021 = f32[] reduce(%convert_element_type.3209, %constant.1360), dimensions={0,1,2}, to_apply=%region_1053.25906
  %all-reduce.111 = f32[] all-reduce(%reduce.1021), channel_id=914, replica_groups=[1,8]<=[8], use_global_device_ids=true, to_apply=%region_1053.25906.clone
  %convert_element_type.3210 = bf16[] convert(%all-reduce.111)
  %add.2511 = bf16[] add(%add.2510, %convert_element_type.3210)
  %mul.9452 = bf16[1,4096,4096]{2,1,0} multiply(%convert_element_type.2545, %sharding_constraint.1708)
  %reduce.1022 = bf16[4096]{0} reduce(%mul.9452, %constant.1190), dimensions={0,1}, to_apply=%region_1054.25914
  %all-reduce.112 = bf16[4096]{0} all-reduce(%reduce.1022), channel_id=915, replica_groups=[1,8]<=[8], use_global_device_ids=true, to_apply=%region_1054.25914.clone
  %mul.9453 = bf16[4096]{0} multiply(%all-reduce.112, %all-reduce.112)
  %convert_element_type.3211 = f32[4096]{0} convert(%mul.9453)
  %reduce.1023 = f32[] reduce(%convert_element_type.3211, %constant.1360), dimensions={0}, to_apply=%region_1055.25921
  %convert_element_type.3213 = bf16[] convert(%reduce.1023)
  %add.2512 = bf16[] add(%add.2511, %convert_element_type.3213)
  %mul.9454 = bf16[1,4096,4096]{2,1,0} multiply(%convert_element_type.2530, %sharding_constraint.1719)
  %reduce.1024 = bf16[4096]{0} reduce(%mul.9454, %constant.1190), dimensions={0,1}, to_apply=%region_1056.25929
  %all-reduce.113 = bf16[4096]{0} all-reduce(%reduce.1024), channel_id=916, replica_groups=[1,8]<=[8], use_global_device_ids=true, to_apply=%region_1056.25929.clone
  %mul.9455 = bf16[4096]{0} multiply(%all-reduce.113, %all-reduce.113)
  %convert_element_type.3214 = f32[4096]{0} convert(%mul.9455)
  %reduce.1025 = f32[] reduce(%convert_element_type.3214, %constant.1360), dimensions={0}, to_apply=%region_1057.25936
  %convert_element_type.3215 = bf16[] convert(%reduce.1025)
  %add.2513 = bf16[] add(%add.2512, %convert_element_type.3215)
  %dot.1185 = bf16[8,128,4096]{2,1,0} dot(%concatenate.478, %sharding_constraint.1677), lhs_contracting_dims={0,1}, rhs_contracting_dims={0,1}
  %all-reduce.114 = bf16[8,128,4096]{2,1,0} all-reduce(%dot.1185), channel_id=917, replica_groups=[1,8]<=[8], use_global_device_ids=true, to_apply=%add.36.clone
  %dynamic-slice.2253 = bf16[8,128,512]{2,1,0} dynamic-slice(%all-reduce.114, %constant.1181, %constant.1181, %reshape.13763), dynamic_slice_sizes={8,128,512}
  %transpose.353 = bf16[512,8,128]{0,2,1} transpose(%dynamic-slice.2253), dimensions={2,0,1}
  %mul.9456 = bf16[512,8,128]{0,2,1} multiply(%transpose.353, %transpose.353)
  %convert_element_type.3217 = f32[512,8,128]{0,2,1} convert(%mul.9456)
  %reduce.1026 = f32[] reduce(%convert_element_type.3217, %constant.1360), dimensions={0,1,2}, to_apply=%region_1058.25947
  %all-reduce.115 = f32[] all-reduce(%reduce.1026), channel_id=918, replica_groups=[1,8]<=[8], use_global_device_ids=true, to_apply=%region_1058.25947.clone
  %convert_element_type.3218 = bf16[] convert(%all-reduce.115)
  %add.2514 = bf16[] add(%add.2513, %convert_element_type.3218)
  %dot.1186 = bf16[4096,32,128]{2,1,0} dot(%sharding_constraint.1710, %sharding_constraint.1684), lhs_contracting_dims={0,1}, rhs_contracting_dims={0,1}
  %all-reduce.116 = bf16[4096,32,128]{2,1,0} all-reduce(%dot.1186), channel_id=919, replica_groups=[1,8]<=[8], use_global_device_ids=true, to_apply=%add.37.clone
  %dynamic-slice.2255 = bf16[512,32,128]{2,1,0} dynamic-slice(%all-reduce.116, %reshape.13763, %constant.1181, %constant.1181), dynamic_slice_sizes={512,32,128}
  %transpose.354 = bf16[32,128,512]{1,0,2} transpose(%dynamic-slice.2255), dimensions={1,2,0}
  %mul.9457 = bf16[32,128,512]{1,0,2} multiply(%transpose.354, %transpose.354)
  %convert_element_type.3219 = f32[32,128,512]{1,0,2} convert(%mul.9457)
  %reduce.1027 = f32[] reduce(%convert_element_type.3219, %constant.1360), dimensions={0,1,2}, to_apply=%region_1059.25958
  %all-reduce.117 = f32[] all-reduce(%reduce.1027), channel_id=920, replica_groups=[1,8]<=[8], use_global_device_ids=true, to_apply=%region_1059.25958.clone
  %convert_element_type.3220 = bf16[] convert(%all-reduce.117)
  %add.2515 = bf16[] add(%add.2514, %convert_element_type.3220)
  %dot.1187 = bf16[32,128,4096]{2,1,0} dot(%concatenate.479, %sharding_constraint.1677), lhs_contracting_dims={0,1}, rhs_contracting_dims={0,1}
  %all-reduce.118 = bf16[32,128,4096]{2,1,0} all-reduce(%dot.1187), channel_id=921, replica_groups=[1,8]<=[8], use_global_device_ids=true, to_apply=%add.38.clone
  %dynamic-slice.2257 = bf16[32,128,512]{2,1,0} dynamic-slice(%all-reduce.118, %constant.1181, %constant.1181, %reshape.13763), dynamic_slice_sizes={32,128,512}
  %transpose.355 = bf16[512,32,128]{0,2,1} transpose(%dynamic-slice.2257), dimensions={2,0,1}
  %mul.9458 = bf16[512,32,128]{0,2,1} multiply(%transpose.355, %transpose.355)
  %convert_element_type.3221 = f32[512,32,128]{0,2,1} convert(%mul.9458)
  %reduce.1028 = f32[] reduce(%convert_element_type.3221, %constant.1360), dimensions={0,1,2}, to_apply=%region_1060.25969
  %all-reduce.119 = f32[] all-reduce(%reduce.1028), channel_id=922, replica_groups=[1,8]<=[8], use_global_device_ids=true, to_apply=%region_1060.25969.clone
  %convert_element_type.3222 = bf16[] convert(%all-reduce.119)
  %add.2516 = bf16[] add(%add.2515, %convert_element_type.3222)
  %dot.1188 = bf16[8,128,4096]{2,1,0} dot(%sharding_constraint.1714, %sharding_constraint.1677), lhs_contracting_dims={0,1}, rhs_contracting_dims={0,1}
  %all-reduce.120 = bf16[8,128,4096]{2,1,0} all-reduce(%dot.1188), channel_id=923, replica_groups=[1,8]<=[8], use_global_device_ids=true, to_apply=%add.39.clone
  %dynamic-slice.2259 = bf16[8,128,512]{2,1,0} dynamic-slice(%all-reduce.120, %constant.1181, %constant.1181, %reshape.13763), dynamic_slice_sizes={8,128,512}
  %transpose.356 = bf16[512,8,128]{0,2,1} transpose(%dynamic-slice.2259), dimensions={2,0,1}
  %mul.9459 = bf16[512,8,128]{0,2,1} multiply(%transpose.356, %transpose.356)
  %convert_element_type.3223 = f32[512,8,128]{0,2,1} convert(%mul.9459)
  %reduce.1029 = f32[] reduce(%convert_element_type.3223, %constant.1360), dimensions={0,1,2}, to_apply=%region_1061.25980
  %all-reduce.121 = f32[] all-reduce(%reduce.1029), channel_id=924, replica_groups=[1,8]<=[8], use_global_device_ids=true, to_apply=%region_1061.25980.clone
  %convert_element_type.3225 = bf16[] convert(%all-reduce.121)
  %add.2517 = bf16[] add(%add.2516, %convert_element_type.3225)
  %dot.1189 = bf16[4096,8]{1,0} dot(%sharding_constraint.1629, %sharding_constraint.1656), lhs_contracting_dims={0,1}, rhs_contracting_dims={0,1}
  %all-reduce.122 = bf16[4096,8]{1,0} all-reduce(%dot.1189), channel_id=925, replica_groups=[1,8]<=[8], use_global_device_ids=true, to_apply=%add.40.clone
  %dynamic-slice.2261 = bf16[512,8]{1,0} dynamic-slice(%all-reduce.122, %reshape.13763, %constant.1181), dynamic_slice_sizes={512,8}
  %mul.9460 = bf16[512,8]{1,0} multiply(%dynamic-slice.2261, %dynamic-slice.2261)
  %convert_element_type.3226 = f32[512,8]{1,0} convert(%mul.9460)
  %reduce.1030 = f32[] reduce(%convert_element_type.3226, %constant.1360), dimensions={0,1}, to_apply=%region_1062.25990
  %all-reduce.123 = f32[] all-reduce(%reduce.1030), channel_id=926, replica_groups=[1,8]<=[8], use_global_device_ids=true, to_apply=%region_1062.25990.clone
  %convert_element_type.3228 = bf16[] convert(%all-reduce.123)
  %add.2518 = bf16[] add(%add.2517, %convert_element_type.3228)
  %dot.1190 = bf16[1,4096,14336]{2,1,0} dot(%sharding_constraint.1634, %sharding_constraint.1649), lhs_batch_dims={0}, lhs_contracting_dims={1,2}, rhs_batch_dims={0}, rhs_contracting_dims={1,2}
  %sharding_constraint.2485 = bf16[1,4096,14336]{2,1,0} copy(%dot.1190)
  %mul.9461 = bf16[1,4096,14336]{2,1,0} multiply(%sharding_constraint.2485, %sharding_constraint.2485)
  %convert_element_type.3229 = f32[1,4096,14336]{2,1,0} convert(%mul.9461)
  %reduce.1031 = f32[] reduce(%convert_element_type.3229, %constant.1360), dimensions={0,1,2}, to_apply=%region_1063.26001
  %all-reduce.124 = f32[] all-reduce(%reduce.1031), channel_id=927, replica_groups=[1,8]<=[8], use_global_device_ids=true, to_apply=%region_1063.26001.clone
  %convert_element_type.3230 = bf16[] convert(%all-reduce.124)
  %add.2519 = bf16[] add(%add.2518, %convert_element_type.3230)
  %dot.1191 = bf16[1,4096,14336]{2,1,0} dot(%sharding_constraint.1634, %sharding_constraint.1646), lhs_batch_dims={0}, lhs_contracting_dims={1,2}, rhs_batch_dims={0}, rhs_contracting_dims={1,2}
  %sharding_constraint.2486 = bf16[1,4096,14336]{2,1,0} copy(%dot.1191)
  %mul.9462 = bf16[1,4096,14336]{2,1,0} multiply(%sharding_constraint.2486, %sharding_constraint.2486)
  %convert_element_type.3231 = f32[1,4096,14336]{2,1,0} convert(%mul.9462)
  %reduce.1032 = f32[] reduce(%convert_element_type.3231, %constant.1360), dimensions={0,1,2}, to_apply=%region_1064.26012
  %all-reduce.125 = f32[] all-reduce(%reduce.1032), channel_id=928, replica_groups=[1,8]<=[8], use_global_device_ids=true, to_apply=%region_1064.26012.clone
  %convert_element_type.3232 = bf16[] convert(%all-reduce.125)
  %add.2520 = bf16[] add(%add.2519, %convert_element_type.3232)
  %dot.1192 = bf16[1,14336,4096]{2,1,0} dot(%mul.6817, %sharding_constraint.1641), lhs_batch_dims={0}, lhs_contracting_dims={1,2}, rhs_batch_dims={0}, rhs_contracting_dims={1,2}
  %sharding_constraint.2487 = bf16[1,14336,4096]{2,1,0} copy(%dot.1192)
  %mul.9463 = bf16[1,14336,4096]{2,1,0} multiply(%sharding_constraint.2487, %sharding_constraint.2487)
  %convert_element_type.3233 = f32[1,14336,4096]{2,1,0} convert(%mul.9463)
  %reduce.1033 = f32[] reduce(%convert_element_type.3233, %constant.1360), dimensions={0,1,2}, to_apply=%region_1065.26023
  %all-reduce.126 = f32[] all-reduce(%reduce.1033), channel_id=929, replica_groups=[1,8]<=[8], use_global_device_ids=true, to_apply=%region_1065.26023.clone
  %convert_element_type.3234 = bf16[] convert(%all-reduce.126)
  %add.2521 = bf16[] add(%add.2520, %convert_element_type.3234)
  %mul.9464 = bf16[1,4096,4096]{2,1,0} multiply(%convert_element_type.2510, %sharding_constraint.1658)
  %reduce.1034 = bf16[4096]{0} reduce(%mul.9464, %constant.1190), dimensions={0,1}, to_apply=%region_1066.26031
  %all-reduce.127 = bf16[4096]{0} all-reduce(%reduce.1034), channel_id=930, replica_groups=[1,8]<=[8], use_global_device_ids=true, to_apply=%region_1066.26031.clone
  %mul.9465 = bf16[4096]{0} multiply(%all-reduce.127, %all-reduce.127)
  %convert_element_type.3235 = f32[4096]{0} convert(%mul.9465)
  %reduce.1035 = f32[] reduce(%convert_element_type.3235, %constant.1360), dimensions={0}, to_apply=%region_1067.26038
  %convert_element_type.3236 = bf16[] convert(%reduce.1035)
  %add.2523 = bf16[] add(%add.2521, %convert_element_type.3236)
  %mul.9466 = bf16[1,4096,4096]{2,1,0} multiply(%convert_element_type.2494, %sharding_constraint.1670)
  %reduce.1036 = bf16[4096]{0} reduce(%mul.9466, %constant.1190), dimensions={0,1}, to_apply=%region_1068.26046
  %all-reduce.128 = bf16[4096]{0} all-reduce(%reduce.1036), channel_id=931, replica_groups=[1,8]<=[8], use_global_device_ids=true, to_apply=%region_1068.26046.clone
  %mul.9467 = bf16[4096]{0} multiply(%all-reduce.128, %all-reduce.128)
  %convert_element_type.3237 = f32[4096]{0} convert(%mul.9467)
  %reduce.1037 = f32[] reduce(%convert_element_type.3237, %constant.1360), dimensions={0}, to_apply=%region_1069.26053
  %convert_element_type.3238 = bf16[] convert(%reduce.1037)
  %add.2524 = bf16[] add(%add.2523, %convert_element_type.3238)
  %dot.1193 = bf16[8,128,4096]{2,1,0} dot(%concatenate.465, %sharding_constraint.1619), lhs_contracting_dims={0,1}, rhs_contracting_dims={0,1}
  %all-reduce.129 = bf16[8,128,4096]{2,1,0} all-reduce(%dot.1193), channel_id=932, replica_groups=[1,8]<=[8], use_global_device_ids=true, to_apply=%add.41.clone
  %dynamic-slice.2263 = bf16[8,128,512]{2,1,0} dynamic-slice(%all-reduce.129, %constant.1181, %constant.1181, %reshape.13763), dynamic_slice_sizes={8,128,512}
  %transpose.357 = bf16[512,8,128]{0,2,1} transpose(%dynamic-slice.2263), dimensions={2,0,1}
  %mul.9468 = bf16[512,8,128]{0,2,1} multiply(%transpose.357, %transpose.357)
  %convert_element_type.3239 = f32[512,8,128]{0,2,1} convert(%mul.9468)
  %reduce.1038 = f32[] reduce(%convert_element_type.3239, %constant.1360), dimensions={0,1,2}, to_apply=%region_1070.26064
  %all-reduce.130 = f32[] all-reduce(%reduce.1038), channel_id=933, replica_groups=[1,8]<=[8], use_global_device_ids=true, to_apply=%region_1070.26064.clone
  %convert_element_type.3240 = bf16[] convert(%all-reduce.130)
  %add.2525 = bf16[] add(%add.2524, %convert_element_type.3240)
  %dot.1194 = bf16[4096,32,128]{2,1,0} dot(%sharding_constraint.1663, %sharding_constraint.1627), lhs_contracting_dims={0,1}, rhs_contracting_dims={0,1}
  %all-reduce.131 = bf16[4096,32,128]{2,1,0} all-reduce(%dot.1194), channel_id=934, replica_groups=[1,8]<=[8], use_global_device_ids=true, to_apply=%add.42.clone
  %dynamic-slice.2265 = bf16[512,32,128]{2,1,0} dynamic-slice(%all-reduce.131, %reshape.13763, %constant.1181, %constant.1181), dynamic_slice_sizes={512,32,128}
  %transpose.358 = bf16[32,128,512]{1,0,2} transpose(%dynamic-slice.2265), dimensions={1,2,0}
  %mul.9477 = bf16[32,128,512]{1,0,2} multiply(%transpose.358, %transpose.358)
  %convert_element_type.3241 = f32[32,128,512]{1,0,2} convert(%mul.9477)
  %reduce.1039 = f32[] reduce(%convert_element_type.3241, %constant.1360), dimensions={0,1,2}, to_apply=%region_1071.26075
  %all-reduce.132 = f32[] all-reduce(%reduce.1039), channel_id=935, replica_groups=[1,8]<=[8], use_global_device_ids=true, to_apply=%region_1071.26075.clone
  %convert_element_type.3242 = bf16[] convert(%all-reduce.132)
  %add.2526 = bf16[] add(%add.2525, %convert_element_type.3242)
  %dot.1195 = bf16[32,128,4096]{2,1,0} dot(%concatenate.466, %sharding_constraint.1619), lhs_contracting_dims={0,1}, rhs_contracting_dims={0,1}
  %all-reduce.133 = bf16[32,128,4096]{2,1,0} all-reduce(%dot.1195), channel_id=936, replica_groups=[1,8]<=[8], use_global_device_ids=true, to_apply=%add.43.clone
  %dynamic-slice.2267 = bf16[32,128,512]{2,1,0} dynamic-slice(%all-reduce.133, %constant.1181, %constant.1181, %reshape.13763), dynamic_slice_sizes={32,128,512}
  %transpose.359 = bf16[512,32,128]{0,2,1} transpose(%dynamic-slice.2267), dimensions={2,0,1}
  %mul.9486 = bf16[512,32,128]{0,2,1} multiply(%transpose.359, %transpose.359)
  %convert_element_type.3243 = f32[512,32,128]{0,2,1} convert(%mul.9486)
  %reduce.1040 = f32[] reduce(%convert_element_type.3243, %constant.1360), dimensions={0,1,2}, to_apply=%region_1072.26086
  %all-reduce.134 = f32[] all-reduce(%reduce.1040), channel_id=937, replica_groups=[1,8]<=[8], use_global_device_ids=true, to_apply=%region_1072.26086.clone
  %convert_element_type.3245 = bf16[] convert(%all-reduce.134)
  %add.2527 = bf16[] add(%add.2526, %convert_element_type.3245)
  %dot.1196 = bf16[8,128,4096]{2,1,0} dot(%sharding_constraint.1665, %sharding_constraint.1619), lhs_contracting_dims={0,1}, rhs_contracting_dims={0,1}
  %all-reduce.135 = bf16[8,128,4096]{2,1,0} all-reduce(%dot.1196), channel_id=938, replica_groups=[1,8]<=[8], use_global_device_ids=true, to_apply=%add.44.clone
  %dynamic-slice.2269 = bf16[8,128,512]{2,1,0} dynamic-slice(%all-reduce.135, %constant.1181, %constant.1181, %reshape.13763), dynamic_slice_sizes={8,128,512}
  %transpose.360 = bf16[512,8,128]{0,2,1} transpose(%dynamic-slice.2269), dimensions={2,0,1}
  %mul.9488 = bf16[512,8,128]{0,2,1} multiply(%transpose.360, %transpose.360)
  %convert_element_type.3246 = f32[512,8,128]{0,2,1} convert(%mul.9488)
  %reduce.1041 = f32[] reduce(%convert_element_type.3246, %constant.1360), dimensions={0,1,2}, to_apply=%region_1073.26097
  %all-reduce.136 = f32[] all-reduce(%reduce.1041), channel_id=939, replica_groups=[1,8]<=[8], use_global_device_ids=true, to_apply=%region_1073.26097.clone
  %convert_element_type.3248 = bf16[] convert(%all-reduce.136)
  %add.2528 = bf16[] add(%add.2527, %convert_element_type.3248)
  %dot.1197 = bf16[4096,8]{1,0} dot(%sharding_constraint.1583, %sharding_constraint.1602), lhs_contracting_dims={0,1}, rhs_contracting_dims={0,1}
  %all-reduce.137 = bf16[4096,8]{1,0} all-reduce(%dot.1197), channel_id=940, replica_groups=[1,8]<=[8], use_global_device_ids=true, to_apply=%add.45.clone
  %dynamic-slice.2271 = bf16[512,8]{1,0} dynamic-slice(%all-reduce.137, %reshape.13763, %constant.1181), dynamic_slice_sizes={512,8}
  %mul.9489 = bf16[512,8]{1,0} multiply(%dynamic-slice.2271, %dynamic-slice.2271)
  %convert_element_type.3249 = f32[512,8]{1,0} convert(%mul.9489)
  %reduce.1042 = f32[] reduce(%convert_element_type.3249, %constant.1360), dimensions={0,1}, to_apply=%region_1074.26107
  %all-reduce.138 = f32[] all-reduce(%reduce.1042), channel_id=941, replica_groups=[1,8]<=[8], use_global_device_ids=true, to_apply=%region_1074.26107.clone
  %convert_element_type.3250 = bf16[] convert(%all-reduce.138)
  %add.2529 = bf16[] add(%add.2528, %convert_element_type.3250)
  %dot.1198 = bf16[1,4096,14336]{2,1,0} dot(%sharding_constraint.1588, %sharding_constraint.1598), lhs_batch_dims={0}, lhs_contracting_dims={1,2}, rhs_batch_dims={0}, rhs_contracting_dims={1,2}
  %sharding_constraint.2488 = bf16[1,4096,14336]{2,1,0} copy(%dot.1198)
  %mul.9491 = bf16[1,4096,14336]{2,1,0} multiply(%sharding_constraint.2488, %sharding_constraint.2488)
  %convert_element_type.3251 = f32[1,4096,14336]{2,1,0} convert(%mul.9491)
  %reduce.1043 = f32[] reduce(%convert_element_type.3251, %constant.1360), dimensions={0,1,2}, to_apply=%region_1075.26118
  %all-reduce.139 = f32[] all-reduce(%reduce.1043), channel_id=942, replica_groups=[1,8]<=[8], use_global_device_ids=true, to_apply=%region_1075.26118.clone
  %convert_element_type.3252 = bf16[] convert(%all-reduce.139)
  %add.2530 = bf16[] add(%add.2529, %convert_element_type.3252)
  %dot.1199 = bf16[1,4096,14336]{2,1,0} dot(%sharding_constraint.1588, %sharding_constraint.1595), lhs_batch_dims={0}, lhs_contracting_dims={1,2}, rhs_batch_dims={0}, rhs_contracting_dims={1,2}
  %sharding_constraint.2489 = bf16[1,4096,14336]{2,1,0} copy(%dot.1199)
  %mul.9492 = bf16[1,4096,14336]{2,1,0} multiply(%sharding_constraint.2489, %sharding_constraint.2489)
  %convert_element_type.3253 = f32[1,4096,14336]{2,1,0} convert(%mul.9492)
  %reduce.1044 = f32[] reduce(%convert_element_type.3253, %constant.1360), dimensions={0,1,2}, to_apply=%region_1076.26129
  %all-reduce.140 = f32[] all-reduce(%reduce.1044), channel_id=943, replica_groups=[1,8]<=[8], use_global_device_ids=true, to_apply=%region_1076.26129.clone
  %convert_element_type.3254 = bf16[] convert(%all-reduce.140)
  %add.2531 = bf16[] add(%add.2530, %convert_element_type.3254)
  %dot.1200 = bf16[1,14336,4096]{2,1,0} dot(%mul.6656, %sharding_constraint.1593), lhs_batch_dims={0}, lhs_contracting_dims={1,2}, rhs_batch_dims={0}, rhs_contracting_dims={1,2}
  %sharding_constraint.2490 = bf16[1,14336,4096]{2,1,0} copy(%dot.1200)
  %mul.9494 = bf16[1,14336,4096]{2,1,0} multiply(%sharding_constraint.2490, %sharding_constraint.2490)
  %convert_element_type.3255 = f32[1,14336,4096]{2,1,0} convert(%mul.9494)
  %reduce.1045 = f32[] reduce(%convert_element_type.3255, %constant.1360), dimensions={0,1,2}, to_apply=%region_1077.26140
  %all-reduce.141 = f32[] all-reduce(%reduce.1045), channel_id=944, replica_groups=[1,8]<=[8], use_global_device_ids=true, to_apply=%region_1077.26140.clone
  %convert_element_type.3256 = bf16[] convert(%all-reduce.141)
  %add.2532 = bf16[] add(%add.2531, %convert_element_type.3256)
  %mul.9495 = bf16[1,4096,4096]{2,1,0} multiply(%convert_element_type.2477, %sharding_constraint.1604)
  %reduce.1046 = bf16[4096]{0} reduce(%mul.9495, %constant.1190), dimensions={0,1}, to_apply=%region_1078.26148
  %all-reduce.142 = bf16[4096]{0} all-reduce(%reduce.1046), channel_id=945, replica_groups=[1,8]<=[8], use_global_device_ids=true, to_apply=%region_1078.26148.clone
  %mul.9496 = bf16[4096]{0} multiply(%all-reduce.142, %all-reduce.142)
  %convert_element_type.3257 = f32[4096]{0} convert(%mul.9496)
  %reduce.1047 = f32[] reduce(%convert_element_type.3257, %constant.1360), dimensions={0}, to_apply=%region_1079.26155
  %convert_element_type.3260 = bf16[] convert(%reduce.1047)
  %add.2533 = bf16[] add(%add.2532, %convert_element_type.3260)
  %mul.9497 = bf16[1,4096,4096]{2,1,0} multiply(%convert_element_type.2461, %sharding_constraint.1614)
  %reduce.1048 = bf16[4096]{0} reduce(%mul.9497, %constant.1190), dimensions={0,1}, to_apply=%region_1080.26163
  %all-reduce.143 = bf16[4096]{0} all-reduce(%reduce.1048), channel_id=946, replica_groups=[1,8]<=[8], use_global_device_ids=true, to_apply=%region_1080.26163.clone
  %mul.9498 = bf16[4096]{0} multiply(%all-reduce.143, %all-reduce.143)
  %convert_element_type.3261 = f32[4096]{0} convert(%mul.9498)
  %reduce.1049 = f32[] reduce(%convert_element_type.3261, %constant.1360), dimensions={0}, to_apply=%region_1081.26170
  %convert_element_type.3262 = bf16[] convert(%reduce.1049)
  %add.2535 = bf16[] add(%add.2533, %convert_element_type.3262)
  %dot.1201 = bf16[8,128,4096]{2,1,0} dot(%concatenate.452, %sharding_constraint.1576), lhs_contracting_dims={0,1}, rhs_contracting_dims={0,1}
  %all-reduce.144 = bf16[8,128,4096]{2,1,0} all-reduce(%dot.1201), channel_id=947, replica_groups=[1,8]<=[8], use_global_device_ids=true, to_apply=%add.46.clone
  %dynamic-slice.2273 = bf16[8,128,512]{2,1,0} dynamic-slice(%all-reduce.144, %constant.1181, %constant.1181, %reshape.13763), dynamic_slice_sizes={8,128,512}
  %transpose.361 = bf16[512,8,128]{0,2,1} transpose(%dynamic-slice.2273), dimensions={2,0,1}
  %mul.9499 = bf16[512,8,128]{0,2,1} multiply(%transpose.361, %transpose.361)
  %convert_element_type.3264 = f32[512,8,128]{0,2,1} convert(%mul.9499)
  %reduce.1050 = f32[] reduce(%convert_element_type.3264, %constant.1360), dimensions={0,1,2}, to_apply=%region_1082.26181
  %all-reduce.145 = f32[] all-reduce(%reduce.1050), channel_id=948, replica_groups=[1,8]<=[8], use_global_device_ids=true, to_apply=%region_1082.26181.clone
  %convert_element_type.3265 = bf16[] convert(%all-reduce.145)
  %add.2536 = bf16[] add(%add.2535, %convert_element_type.3265)
  %dot.1202 = bf16[4096,32,128]{2,1,0} dot(%sharding_constraint.1606, %sharding_constraint.1581), lhs_contracting_dims={0,1}, rhs_contracting_dims={0,1}
  %all-reduce.146 = bf16[4096,32,128]{2,1,0} all-reduce(%dot.1202), channel_id=949, replica_groups=[1,8]<=[8], use_global_device_ids=true, to_apply=%add.47.clone
  %dynamic-slice.2275 = bf16[512,32,128]{2,1,0} dynamic-slice(%all-reduce.146, %reshape.13763, %constant.1181, %constant.1181), dynamic_slice_sizes={512,32,128}
  %transpose.362 = bf16[32,128,512]{1,0,2} transpose(%dynamic-slice.2275), dimensions={1,2,0}
  %mul.9500 = bf16[32,128,512]{1,0,2} multiply(%transpose.362, %transpose.362)
  %convert_element_type.3266 = f32[32,128,512]{1,0,2} convert(%mul.9500)
  %reduce.1051 = f32[] reduce(%convert_element_type.3266, %constant.1360), dimensions={0,1,2}, to_apply=%region_1083.26192
  %all-reduce.147 = f32[] all-reduce(%reduce.1051), channel_id=950, replica_groups=[1,8]<=[8], use_global_device_ids=true, to_apply=%region_1083.26192.clone
  %convert_element_type.3267 = bf16[] convert(%all-reduce.147)
  %add.2537 = bf16[] add(%add.2536, %convert_element_type.3267)
  %dot.1203 = bf16[32,128,4096]{2,1,0} dot(%concatenate.453, %sharding_constraint.1576), lhs_contracting_dims={0,1}, rhs_contracting_dims={0,1}
  %all-reduce.148 = bf16[32,128,4096]{2,1,0} all-reduce(%dot.1203), channel_id=951, replica_groups=[1,8]<=[8], use_global_device_ids=true, to_apply=%add.48.clone
  %dynamic-slice.2277 = bf16[32,128,512]{2,1,0} dynamic-slice(%all-reduce.148, %constant.1181, %constant.1181, %reshape.13763), dynamic_slice_sizes={32,128,512}
  %transpose.363 = bf16[512,32,128]{0,2,1} transpose(%dynamic-slice.2277), dimensions={2,0,1}
  %mul.9501 = bf16[512,32,128]{0,2,1} multiply(%transpose.363, %transpose.363)
  %convert_element_type.3268 = f32[512,32,128]{0,2,1} convert(%mul.9501)
  %reduce.1052 = f32[] reduce(%convert_element_type.3268, %constant.1360), dimensions={0,1,2}, to_apply=%region_1084.26203
  %all-reduce.149 = f32[] all-reduce(%reduce.1052), channel_id=952, replica_groups=[1,8]<=[8], use_global_device_ids=true, to_apply=%region_1084.26203.clone
  %convert_element_type.3269 = bf16[] convert(%all-reduce.149)
  %add.2538 = bf16[] add(%add.2537, %convert_element_type.3269)
  %dot.1204 = bf16[8,128,4096]{2,1,0} dot(%sharding_constraint.1608, %sharding_constraint.1576), lhs_contracting_dims={0,1}, rhs_contracting_dims={0,1}
  %all-reduce.150 = bf16[8,128,4096]{2,1,0} all-reduce(%dot.1204), channel_id=953, replica_groups=[1,8]<=[8], use_global_device_ids=true, to_apply=%add.49.clone
  %dynamic-slice.2279 = bf16[8,128,512]{2,1,0} dynamic-slice(%all-reduce.150, %constant.1181, %constant.1181, %reshape.13763), dynamic_slice_sizes={8,128,512}
  %transpose.364 = bf16[512,8,128]{0,2,1} transpose(%dynamic-slice.2279), dimensions={2,0,1}
  %mul.9502 = bf16[512,8,128]{0,2,1} multiply(%transpose.364, %transpose.364)
  %convert_element_type.3270 = f32[512,8,128]{0,2,1} convert(%mul.9502)
  %reduce.1053 = f32[] reduce(%convert_element_type.3270, %constant.1360), dimensions={0,1,2}, to_apply=%region_1085.26214
  %all-reduce.151 = f32[] all-reduce(%reduce.1053), channel_id=954, replica_groups=[1,8]<=[8], use_global_device_ids=true, to_apply=%region_1085.26214.clone
  %convert_element_type.3271 = bf16[] convert(%all-reduce.151)
  %add.2539 = bf16[] add(%add.2538, %convert_element_type.3271)
  %dot.1205 = bf16[4096,8]{1,0} dot(%sharding_constraint.1542, %sharding_constraint.1561), lhs_contracting_dims={0,1}, rhs_contracting_dims={0,1}
  %all-reduce.152 = bf16[4096,8]{1,0} all-reduce(%dot.1205), channel_id=955, replica_groups=[1,8]<=[8], use_global_device_ids=true, to_apply=%add.50.clone
  %dynamic-slice.2281 = bf16[512,8]{1,0} dynamic-slice(%all-reduce.152, %reshape.13763, %constant.1181), dynamic_slice_sizes={512,8}
  %mul.9503 = bf16[512,8]{1,0} multiply(%dynamic-slice.2281, %dynamic-slice.2281)
  %convert_element_type.3272 = f32[512,8]{1,0} convert(%mul.9503)
  %reduce.1054 = f32[] reduce(%convert_element_type.3272, %constant.1360), dimensions={0,1}, to_apply=%region_1086.26224
  %all-reduce.153 = f32[] all-reduce(%reduce.1054), channel_id=956, replica_groups=[1,8]<=[8], use_global_device_ids=true, to_apply=%region_1086.26224.clone
  %convert_element_type.3273 = bf16[] convert(%all-reduce.153)
  %add.2540 = bf16[] add(%add.2539, %convert_element_type.3273)
  %dot.1206 = bf16[1,4096,14336]{2,1,0} dot(%sharding_constraint.1547, %sharding_constraint.1557), lhs_batch_dims={0}, lhs_contracting_dims={1,2}, rhs_batch_dims={0}, rhs_contracting_dims={1,2}
  %sharding_constraint.2493 = bf16[1,4096,14336]{2,1,0} copy(%dot.1206)
  %mul.9504 = bf16[1,4096,14336]{2,1,0} multiply(%sharding_constraint.2493, %sharding_constraint.2493)
  %convert_element_type.3274 = f32[1,4096,14336]{2,1,0} convert(%mul.9504)
  %reduce.1055 = f32[] reduce(%convert_element_type.3274, %constant.1360), dimensions={0,1,2}, to_apply=%region_1087.26235
  %all-reduce.154 = f32[] all-reduce(%reduce.1055), channel_id=957, replica_groups=[1,8]<=[8], use_global_device_ids=true, to_apply=%region_1087.26235.clone
  %convert_element_type.3275 = bf16[] convert(%all-reduce.154)
  %add.2541 = bf16[] add(%add.2540, %convert_element_type.3275)
  %dot.1207 = bf16[1,4096,14336]{2,1,0} dot(%sharding_constraint.1547, %sharding_constraint.1554), lhs_batch_dims={0}, lhs_contracting_dims={1,2}, rhs_batch_dims={0}, rhs_contracting_dims={1,2}
  %sharding_constraint.2494 = bf16[1,4096,14336]{2,1,0} copy(%dot.1207)
  %mul.9505 = bf16[1,4096,14336]{2,1,0} multiply(%sharding_constraint.2494, %sharding_constraint.2494)
  %convert_element_type.3276 = f32[1,4096,14336]{2,1,0} convert(%mul.9505)
  %reduce.1056 = f32[] reduce(%convert_element_type.3276, %constant.1360), dimensions={0,1,2}, to_apply=%region_1088.26246
  %all-reduce.155 = f32[] all-reduce(%reduce.1056), channel_id=958, replica_groups=[1,8]<=[8], use_global_device_ids=true, to_apply=%region_1088.26246.clone
  %convert_element_type.3277 = bf16[] convert(%all-reduce.155)
  %add.2542 = bf16[] add(%add.2541, %convert_element_type.3277)
  %dot.1208 = bf16[1,14336,4096]{2,1,0} dot(%mul.6509, %sharding_constraint.1552), lhs_batch_dims={0}, lhs_contracting_dims={1,2}, rhs_batch_dims={0}, rhs_contracting_dims={1,2}
  %sharding_constraint.2495 = bf16[1,14336,4096]{2,1,0} copy(%dot.1208)
  %mul.9506 = bf16[1,14336,4096]{2,1,0} multiply(%sharding_constraint.2495, %sharding_constraint.2495)
  %convert_element_type.3278 = f32[1,14336,4096]{2,1,0} convert(%mul.9506)
  %reduce.1057 = f32[] reduce(%convert_element_type.3278, %constant.1360), dimensions={0,1,2}, to_apply=%region_1089.26257
  %all-reduce.156 = f32[] all-reduce(%reduce.1057), channel_id=959, replica_groups=[1,8]<=[8], use_global_device_ids=true, to_apply=%region_1089.26257.clone
  %convert_element_type.3279 = bf16[] convert(%all-reduce.156)
  %add.2543 = bf16[] add(%add.2542, %convert_element_type.3279)
  %mul.9507 = bf16[1,4096,4096]{2,1,0} multiply(%convert_element_type.2440, %sharding_constraint.1562)
  %reduce.1058 = bf16[4096]{0} reduce(%mul.9507, %constant.1190), dimensions={0,1}, to_apply=%region_1090.26265
  %all-reduce.157 = bf16[4096]{0} all-reduce(%reduce.1058), channel_id=960, replica_groups=[1,8]<=[8], use_global_device_ids=true, to_apply=%region_1090.26265.clone
  %mul.9508 = bf16[4096]{0} multiply(%all-reduce.157, %all-reduce.157)
  %convert_element_type.3280 = f32[4096]{0} convert(%mul.9508)
  %reduce.1059 = f32[] reduce(%convert_element_type.3280, %constant.1360), dimensions={0}, to_apply=%region_1091.26272
  %convert_element_type.3281 = bf16[] convert(%reduce.1059)
  %add.2544 = bf16[] add(%add.2543, %convert_element_type.3281)
  %mul.9517 = bf16[1,4096,4096]{2,1,0} multiply(%convert_element_type.2426, %sharding_constraint.1571)
  %reduce.1060 = bf16[4096]{0} reduce(%mul.9517, %constant.1190), dimensions={0,1}, to_apply=%region_1092.26280
  %all-reduce.158 = bf16[4096]{0} all-reduce(%reduce.1060), channel_id=961, replica_groups=[1,8]<=[8], use_global_device_ids=true, to_apply=%region_1092.26280.clone
  %mul.9526 = bf16[4096]{0} multiply(%all-reduce.158, %all-reduce.158)
  %convert_element_type.3282 = f32[4096]{0} convert(%mul.9526)
  %reduce.1061 = f32[] reduce(%convert_element_type.3282, %constant.1360), dimensions={0}, to_apply=%region_1093.26287
  %convert_element_type.3283 = bf16[] convert(%reduce.1061)
  %add.2545 = bf16[] add(%add.2544, %convert_element_type.3283)
  %dot.1209 = bf16[8,128,4096]{2,1,0} dot(%concatenate.439, %sharding_constraint.1530), lhs_contracting_dims={0,1}, rhs_contracting_dims={0,1}
  %all-reduce.159 = bf16[8,128,4096]{2,1,0} all-reduce(%dot.1209), channel_id=962, replica_groups=[1,8]<=[8], use_global_device_ids=true, to_apply=%add.51.clone
  %dynamic-slice.2283 = bf16[8,128,512]{2,1,0} dynamic-slice(%all-reduce.159, %constant.1181, %constant.1181, %reshape.13763), dynamic_slice_sizes={8,128,512}
  %transpose.365 = bf16[512,8,128]{0,2,1} transpose(%dynamic-slice.2283), dimensions={2,0,1}
  %mul.9527 = bf16[512,8,128]{0,2,1} multiply(%transpose.365, %transpose.365)
  %convert_element_type.3284 = f32[512,8,128]{0,2,1} convert(%mul.9527)
  %reduce.1062 = f32[] reduce(%convert_element_type.3284, %constant.1360), dimensions={0,1,2}, to_apply=%region_1094.26298
  %all-reduce.160 = f32[] all-reduce(%reduce.1062), channel_id=963, replica_groups=[1,8]<=[8], use_global_device_ids=true, to_apply=%region_1094.26298.clone
  %convert_element_type.3285 = bf16[] convert(%all-reduce.160)
  %add.2546 = bf16[] add(%add.2545, %convert_element_type.3285)
  %dot.1210 = bf16[4096,32,128]{2,1,0} dot(%sharding_constraint.1564, %sharding_constraint.1537), lhs_contracting_dims={0,1}, rhs_contracting_dims={0,1}
  %all-reduce.161 = bf16[4096,32,128]{2,1,0} all-reduce(%dot.1210), channel_id=964, replica_groups=[1,8]<=[8], use_global_device_ids=true, to_apply=%add.52.clone
  %dynamic-slice.2285 = bf16[512,32,128]{2,1,0} dynamic-slice(%all-reduce.161, %reshape.13763, %constant.1181, %constant.1181), dynamic_slice_sizes={512,32,128}
  %transpose.366 = bf16[32,128,512]{1,0,2} transpose(%dynamic-slice.2285), dimensions={1,2,0}
  %mul.9528 = bf16[32,128,512]{1,0,2} multiply(%transpose.366, %transpose.366)
  %convert_element_type.3286 = f32[32,128,512]{1,0,2} convert(%mul.9528)
  %reduce.1063 = f32[] reduce(%convert_element_type.3286, %constant.1360), dimensions={0,1,2}, to_apply=%region_1095.26309
  %all-reduce.162 = f32[] all-reduce(%reduce.1063), channel_id=965, replica_groups=[1,8]<=[8], use_global_device_ids=true, to_apply=%region_1095.26309.clone
  %convert_element_type.3287 = bf16[] convert(%all-reduce.162)
  %add.2547 = bf16[] add(%add.2546, %convert_element_type.3287)
  %dot.1211 = bf16[32,128,4096]{2,1,0} dot(%concatenate.440, %sharding_constraint.1530), lhs_contracting_dims={0,1}, rhs_contracting_dims={0,1}
  %all-reduce.163 = bf16[32,128,4096]{2,1,0} all-reduce(%dot.1211), channel_id=966, replica_groups=[1,8]<=[8], use_global_device_ids=true, to_apply=%add.53.clone
  %dynamic-slice.2287 = bf16[32,128,512]{2,1,0} dynamic-slice(%all-reduce.163, %constant.1181, %constant.1181, %reshape.13763), dynamic_slice_sizes={32,128,512}
  %transpose.367 = bf16[512,32,128]{0,2,1} transpose(%dynamic-slice.2287), dimensions={2,0,1}
  %mul.9529 = bf16[512,32,128]{0,2,1} multiply(%transpose.367, %transpose.367)
  %convert_element_type.3288 = f32[512,32,128]{0,2,1} convert(%mul.9529)
  %reduce.1064 = f32[] reduce(%convert_element_type.3288, %constant.1360), dimensions={0,1,2}, to_apply=%region_1096.26320
  %all-reduce.164 = f32[] all-reduce(%reduce.1064), channel_id=967, replica_groups=[1,8]<=[8], use_global_device_ids=true, to_apply=%region_1096.26320.clone
  %convert_element_type.3290 = bf16[] convert(%all-reduce.164)
  %add.2548 = bf16[] add(%add.2547, %convert_element_type.3290)
  %dot.1212 = bf16[8,128,4096]{2,1,0} dot(%sharding_constraint.1566, %sharding_constraint.1530), lhs_contracting_dims={0,1}, rhs_contracting_dims={0,1}
  %all-reduce.165 = bf16[8,128,4096]{2,1,0} all-reduce(%dot.1212), channel_id=968, replica_groups=[1,8]<=[8], use_global_device_ids=true, to_apply=%add.54.clone
  %dynamic-slice.2289 = bf16[8,128,512]{2,1,0} dynamic-slice(%all-reduce.165, %constant.1181, %constant.1181, %reshape.13763), dynamic_slice_sizes={8,128,512}
  %transpose.368 = bf16[512,8,128]{0,2,1} transpose(%dynamic-slice.2289), dimensions={2,0,1}
  %mul.9530 = bf16[512,8,128]{0,2,1} multiply(%transpose.368, %transpose.368)
  %convert_element_type.3291 = f32[512,8,128]{0,2,1} convert(%mul.9530)
  %reduce.1065 = f32[] reduce(%convert_element_type.3291, %constant.1360), dimensions={0,1,2}, to_apply=%region_1097.26331
  %all-reduce.166 = f32[] all-reduce(%reduce.1065), channel_id=969, replica_groups=[1,8]<=[8], use_global_device_ids=true, to_apply=%region_1097.26331.clone
  %convert_element_type.3292 = bf16[] convert(%all-reduce.166)
  %add.2549 = bf16[] add(%add.2548, %convert_element_type.3292)
  %dot.1213 = bf16[4096,8]{1,0} dot(%sharding_constraint.1482, %sharding_constraint.1508), lhs_contracting_dims={0,1}, rhs_contracting_dims={0,1}
  %all-reduce.167 = bf16[4096,8]{1,0} all-reduce(%dot.1213), channel_id=970, replica_groups=[1,8]<=[8], use_global_device_ids=true, to_apply=%add.55.clone
  %dynamic-slice.2291 = bf16[512,8]{1,0} dynamic-slice(%all-reduce.167, %reshape.13763, %constant.1181), dynamic_slice_sizes={512,8}
  %mul.9531 = bf16[512,8]{1,0} multiply(%dynamic-slice.2291, %dynamic-slice.2291)
  %convert_element_type.3294 = f32[512,8]{1,0} convert(%mul.9531)
  %reduce.1066 = f32[] reduce(%convert_element_type.3294, %constant.1360), dimensions={0,1}, to_apply=%region_1098.26341
  %all-reduce.168 = f32[] all-reduce(%reduce.1066), channel_id=971, replica_groups=[1,8]<=[8], use_global_device_ids=true, to_apply=%region_1098.26341.clone
  %convert_element_type.3295 = bf16[] convert(%all-reduce.168)
  %add.2550 = bf16[] add(%add.2549, %convert_element_type.3295)
  %dot.1214 = bf16[1,4096,14336]{2,1,0} dot(%sharding_constraint.1489, %sharding_constraint.1504), lhs_batch_dims={0}, lhs_contracting_dims={1,2}, rhs_batch_dims={0}, rhs_contracting_dims={1,2}
  %sharding_constraint.2496 = bf16[1,4096,14336]{2,1,0} copy(%dot.1214)
  %mul.9534 = bf16[1,4096,14336]{2,1,0} multiply(%sharding_constraint.2496, %sharding_constraint.2496)
  %convert_element_type.3296 = f32[1,4096,14336]{2,1,0} convert(%mul.9534)
  %reduce.1067 = f32[] reduce(%convert_element_type.3296, %constant.1360), dimensions={0,1,2}, to_apply=%region_1099.26352
  %all-reduce.169 = f32[] all-reduce(%reduce.1067), channel_id=972, replica_groups=[1,8]<=[8], use_global_device_ids=true, to_apply=%region_1099.26352.clone
  %convert_element_type.3297 = bf16[] convert(%all-reduce.169)
  %add.2551 = bf16[] add(%add.2550, %convert_element_type.3297)
  %dot.1215 = bf16[1,4096,14336]{2,1,0} dot(%sharding_constraint.1489, %sharding_constraint.1501), lhs_batch_dims={0}, lhs_contracting_dims={1,2}, rhs_batch_dims={0}, rhs_contracting_dims={1,2}
  %sharding_constraint.2497 = bf16[1,4096,14336]{2,1,0} copy(%dot.1215)
  %mul.9537 = bf16[1,4096,14336]{2,1,0} multiply(%sharding_constraint.2497, %sharding_constraint.2497)
  %convert_element_type.3298 = f32[1,4096,14336]{2,1,0} convert(%mul.9537)
  %reduce.1068 = f32[] reduce(%convert_element_type.3298, %constant.1360), dimensions={0,1,2}, to_apply=%region_1100.26363
  %all-reduce.170 = f32[] all-reduce(%reduce.1068), channel_id=973, replica_groups=[1,8]<=[8], use_global_device_ids=true, to_apply=%region_1100.26363.clone
  %convert_element_type.3299 = bf16[] convert(%all-reduce.170)
  %add.2552 = bf16[] add(%add.2551, %convert_element_type.3299)
  %dot.1216 = bf16[1,14336,4096]{2,1,0} dot(%mul.6337, %sharding_constraint.1499), lhs_batch_dims={0}, lhs_contracting_dims={1,2}, rhs_batch_dims={0}, rhs_contracting_dims={1,2}
  %sharding_constraint.2498 = bf16[1,14336,4096]{2,1,0} copy(%dot.1216)
  %mul.9538 = bf16[1,14336,4096]{2,1,0} multiply(%sharding_constraint.2498, %sharding_constraint.2498)
  %convert_element_type.3302 = f32[1,14336,4096]{2,1,0} convert(%mul.9538)
  %reduce.1069 = f32[] reduce(%convert_element_type.3302, %constant.1360), dimensions={0,1,2}, to_apply=%region_1101.26374
  %all-reduce.171 = f32[] all-reduce(%reduce.1069), channel_id=974, replica_groups=[1,8]<=[8], use_global_device_ids=true, to_apply=%region_1101.26374.clone
  %convert_element_type.3303 = bf16[] convert(%all-reduce.171)
  %add.2553 = bf16[] add(%add.2552, %convert_element_type.3303)
  %mul.9539 = bf16[1,4096,4096]{2,1,0} multiply(%convert_element_type.2409, %sharding_constraint.1510)
  %reduce.1070 = bf16[4096]{0} reduce(%mul.9539, %constant.1190), dimensions={0,1}, to_apply=%region_1102.26382
  %all-reduce.172 = bf16[4096]{0} all-reduce(%reduce.1070), channel_id=975, replica_groups=[1,8]<=[8], use_global_device_ids=true, to_apply=%region_1102.26382.clone
  %mul.9540 = bf16[4096]{0} multiply(%all-reduce.172, %all-reduce.172)
  %convert_element_type.3304 = f32[4096]{0} convert(%mul.9540)
  %reduce.1071 = f32[] reduce(%convert_element_type.3304, %constant.1360), dimensions={0}, to_apply=%region_1103.26389
  %convert_element_type.3305 = bf16[] convert(%reduce.1071)
  %add.2554 = bf16[] add(%add.2553, %convert_element_type.3305)
  %mul.9541 = bf16[1,4096,4096]{2,1,0} multiply(%convert_element_type.2394, %sharding_constraint.1525)
  %reduce.1072 = bf16[4096]{0} reduce(%mul.9541, %constant.1190), dimensions={0,1}, to_apply=%region_1104.26397
  %all-reduce.173 = bf16[4096]{0} all-reduce(%reduce.1072), channel_id=976, replica_groups=[1,8]<=[8], use_global_device_ids=true, to_apply=%region_1104.26397.clone
  %mul.9542 = bf16[4096]{0} multiply(%all-reduce.173, %all-reduce.173)
  %convert_element_type.3306 = f32[4096]{0} convert(%mul.9542)
  %reduce.1073 = f32[] reduce(%convert_element_type.3306, %constant.1360), dimensions={0}, to_apply=%region_1105.26404
  %convert_element_type.3307 = bf16[] convert(%reduce.1073)
  %add.2556 = bf16[] add(%add.2554, %convert_element_type.3307)
  %dot.1217 = bf16[8,128,4096]{2,1,0} dot(%concatenate.426, %sharding_constraint.1474), lhs_contracting_dims={0,1}, rhs_contracting_dims={0,1}
  %all-reduce.174 = bf16[8,128,4096]{2,1,0} all-reduce(%dot.1217), channel_id=977, replica_groups=[1,8]<=[8], use_global_device_ids=true, to_apply=%add.56.clone
  %dynamic-slice.2293 = bf16[8,128,512]{2,1,0} dynamic-slice(%all-reduce.174, %constant.1181, %constant.1181, %reshape.13763), dynamic_slice_sizes={8,128,512}
  %transpose.369 = bf16[512,8,128]{0,2,1} transpose(%dynamic-slice.2293), dimensions={2,0,1}
  %mul.9543 = bf16[512,8,128]{0,2,1} multiply(%transpose.369, %transpose.369)
  %convert_element_type.3309 = f32[512,8,128]{0,2,1} convert(%mul.9543)
  %reduce.1074 = f32[] reduce(%convert_element_type.3309, %constant.1360), dimensions={0,1,2}, to_apply=%region_1106.26415
  %all-reduce.175 = f32[] all-reduce(%reduce.1074), channel_id=978, replica_groups=[1,8]<=[8], use_global_device_ids=true, to_apply=%region_1106.26415.clone
  %convert_element_type.3310 = bf16[] convert(%all-reduce.175)
  %add.2557 = bf16[] add(%add.2556, %convert_element_type.3310)
  %dot.1218 = bf16[4096,32,128]{2,1,0} dot(%sharding_constraint.1518, %sharding_constraint.1480), lhs_contracting_dims={0,1}, rhs_contracting_dims={0,1}
  %all-reduce.176 = bf16[4096,32,128]{2,1,0} all-reduce(%dot.1218), channel_id=979, replica_groups=[1,8]<=[8], use_global_device_ids=true, to_apply=%add.57.clone
  %dynamic-slice.2295 = bf16[512,32,128]{2,1,0} dynamic-slice(%all-reduce.176, %reshape.13763, %constant.1181, %constant.1181), dynamic_slice_sizes={512,32,128}
  %transpose.370 = bf16[32,128,512]{1,0,2} transpose(%dynamic-slice.2295), dimensions={1,2,0}
  %mul.9545 = bf16[32,128,512]{1,0,2} multiply(%transpose.370, %transpose.370)
  %convert_element_type.3311 = f32[32,128,512]{1,0,2} convert(%mul.9545)
  %reduce.1075 = f32[] reduce(%convert_element_type.3311, %constant.1360), dimensions={0,1,2}, to_apply=%region_1107.26426
  %all-reduce.177 = f32[] all-reduce(%reduce.1075), channel_id=980, replica_groups=[1,8]<=[8], use_global_device_ids=true, to_apply=%region_1107.26426.clone
  %convert_element_type.3313 = bf16[] convert(%all-reduce.177)
  %add.2558 = bf16[] add(%add.2557, %convert_element_type.3313)
  %dot.1219 = bf16[32,128,4096]{2,1,0} dot(%concatenate.427, %sharding_constraint.1474), lhs_contracting_dims={0,1}, rhs_contracting_dims={0,1}
  %all-reduce.178 = bf16[32,128,4096]{2,1,0} all-reduce(%dot.1219), channel_id=981, replica_groups=[1,8]<=[8], use_global_device_ids=true, to_apply=%add.58.clone
  %dynamic-slice.2297 = bf16[32,128,512]{2,1,0} dynamic-slice(%all-reduce.178, %constant.1181, %constant.1181, %reshape.13763), dynamic_slice_sizes={32,128,512}
  %transpose.371 = bf16[512,32,128]{0,2,1} transpose(%dynamic-slice.2297), dimensions={2,0,1}
  %mul.9546 = bf16[512,32,128]{0,2,1} multiply(%transpose.371, %transpose.371)
  %convert_element_type.3314 = f32[512,32,128]{0,2,1} convert(%mul.9546)
  %reduce.1076 = f32[] reduce(%convert_element_type.3314, %constant.1360), dimensions={0,1,2}, to_apply=%region_1108.26437
  %all-reduce.179 = f32[] all-reduce(%reduce.1076), channel_id=982, replica_groups=[1,8]<=[8], use_global_device_ids=true, to_apply=%region_1108.26437.clone
  %convert_element_type.3315 = bf16[] convert(%all-reduce.179)
  %add.2559 = bf16[] add(%add.2558, %convert_element_type.3315)
  %dot.1220 = bf16[8,128,4096]{2,1,0} dot(%sharding_constraint.1520, %sharding_constraint.1474), lhs_contracting_dims={0,1}, rhs_contracting_dims={0,1}
  %all-reduce.180 = bf16[8,128,4096]{2,1,0} all-reduce(%dot.1220), channel_id=983, replica_groups=[1,8]<=[8], use_global_device_ids=true, to_apply=%add.59.clone
  %dynamic-slice.2299 = bf16[8,128,512]{2,1,0} dynamic-slice(%all-reduce.180, %constant.1181, %constant.1181, %reshape.13763), dynamic_slice_sizes={8,128,512}
  %transpose.372 = bf16[512,8,128]{0,2,1} transpose(%dynamic-slice.2299), dimensions={2,0,1}
  %mul.9547 = bf16[512,8,128]{0,2,1} multiply(%transpose.372, %transpose.372)
  %convert_element_type.3316 = f32[512,8,128]{0,2,1} convert(%mul.9547)
  %reduce.1077 = f32[] reduce(%convert_element_type.3316, %constant.1360), dimensions={0,1,2}, to_apply=%region_1109.26448
  %all-reduce.181 = f32[] all-reduce(%reduce.1077), channel_id=984, replica_groups=[1,8]<=[8], use_global_device_ids=true, to_apply=%region_1109.26448.clone
  %convert_element_type.3317 = bf16[] convert(%all-reduce.181)
  %add.2560 = bf16[] add(%add.2559, %convert_element_type.3317)
  %dot.1221 = bf16[4096,8]{1,0} dot(%sharding_constraint.2317, %sharding_constraint.2338), lhs_contracting_dims={0,1}, rhs_contracting_dims={0,1}
  %all-reduce.182 = bf16[4096,8]{1,0} all-reduce(%dot.1221), channel_id=985, replica_groups=[1,8]<=[8], use_global_device_ids=true, to_apply=%add.60.clone
  %dynamic-slice.2301 = bf16[512,8]{1,0} dynamic-slice(%all-reduce.182, %reshape.13763, %constant.1181), dynamic_slice_sizes={512,8}
  %mul.9548 = bf16[512,8]{1,0} multiply(%dynamic-slice.2301, %dynamic-slice.2301)
  %convert_element_type.3319 = f32[512,8]{1,0} convert(%mul.9548)
  %reduce.1078 = f32[] reduce(%convert_element_type.3319, %constant.1360), dimensions={0,1}, to_apply=%region_1110.26458
  %all-reduce.183 = f32[] all-reduce(%reduce.1078), channel_id=986, replica_groups=[1,8]<=[8], use_global_device_ids=true, to_apply=%region_1110.26458.clone
  %convert_element_type.3320 = bf16[] convert(%all-reduce.183)
  %add.2561 = bf16[] add(%add.2560, %convert_element_type.3320)
  %dot.1222 = bf16[1,4096,14336]{2,1,0} dot(%sharding_constraint.2322, %sharding_constraint.2334), lhs_batch_dims={0}, lhs_contracting_dims={1,2}, rhs_batch_dims={0}, rhs_contracting_dims={1,2}
  %sharding_constraint.2499 = bf16[1,4096,14336]{2,1,0} copy(%dot.1222)
  %mul.9549 = bf16[1,4096,14336]{2,1,0} multiply(%sharding_constraint.2499, %sharding_constraint.2499)
  %convert_element_type.3321 = f32[1,4096,14336]{2,1,0} convert(%mul.9549)
  %reduce.1079 = f32[] reduce(%convert_element_type.3321, %constant.1360), dimensions={0,1,2}, to_apply=%region_1111.26469
  %all-reduce.184 = f32[] all-reduce(%reduce.1079), channel_id=987, replica_groups=[1,8]<=[8], use_global_device_ids=true, to_apply=%region_1111.26469.clone
  %convert_element_type.3322 = bf16[] convert(%all-reduce.184)
  %add.2562 = bf16[] add(%add.2561, %convert_element_type.3322)
  %dot.1223 = bf16[1,4096,14336]{2,1,0} dot(%sharding_constraint.2322, %sharding_constraint.2331), lhs_batch_dims={0}, lhs_contracting_dims={1,2}, rhs_batch_dims={0}, rhs_contracting_dims={1,2}
  %sharding_constraint.2500 = bf16[1,4096,14336]{2,1,0} copy(%dot.1223)
  %mul.9550 = bf16[1,4096,14336]{2,1,0} multiply(%sharding_constraint.2500, %sharding_constraint.2500)
  %convert_element_type.3323 = f32[1,4096,14336]{2,1,0} convert(%mul.9550)
  %reduce.1080 = f32[] reduce(%convert_element_type.3323, %constant.1360), dimensions={0,1,2}, to_apply=%region_1112.26480
  %all-reduce.185 = f32[] all-reduce(%reduce.1080), channel_id=988, replica_groups=[1,8]<=[8], use_global_device_ids=true, to_apply=%region_1112.26480.clone
  %convert_element_type.3325 = bf16[] convert(%all-reduce.185)
  %add.2563 = bf16[] add(%add.2562, %convert_element_type.3325)
  %dot.1224 = bf16[1,14336,4096]{2,1,0} dot(%mul.8961, %sharding_constraint.2329), lhs_batch_dims={0}, lhs_contracting_dims={1,2}, rhs_batch_dims={0}, rhs_contracting_dims={1,2}
  %sharding_constraint.2501 = bf16[1,14336,4096]{2,1,0} copy(%dot.1224)
  %mul.9551 = bf16[1,14336,4096]{2,1,0} multiply(%sharding_constraint.2501, %sharding_constraint.2501)
  %convert_element_type.3326 = f32[1,14336,4096]{2,1,0} convert(%mul.9551)
  %reduce.1081 = f32[] reduce(%convert_element_type.3326, %constant.1360), dimensions={0,1,2}, to_apply=%region_1113.26491
  %all-reduce.186 = f32[] all-reduce(%reduce.1081), channel_id=989, replica_groups=[1,8]<=[8], use_global_device_ids=true, to_apply=%region_1113.26491.clone
  %convert_element_type.3327 = bf16[] convert(%all-reduce.186)
  %add.2564 = bf16[] add(%add.2563, %convert_element_type.3327)
  %mul.9555 = bf16[1,4096,4096]{2,1,0} multiply(%convert_element_type.2961, %sharding_constraint.2339)
  %reduce.1082 = bf16[4096]{0} reduce(%mul.9555, %constant.1190), dimensions={0,1}, to_apply=%region_1114.26499
  %all-reduce.187 = bf16[4096]{0} all-reduce(%reduce.1082), channel_id=990, replica_groups=[1,8]<=[8], use_global_device_ids=true, to_apply=%region_1114.26499.clone
  %mul.9556 = bf16[4096]{0} multiply(%all-reduce.187, %all-reduce.187)
  %convert_element_type.3328 = f32[4096]{0} convert(%mul.9556)
  %reduce.1083 = f32[] reduce(%convert_element_type.3328, %constant.1360), dimensions={0}, to_apply=%region_1115.26506
  %convert_element_type.3329 = bf16[] convert(%reduce.1083)
  %add.2565 = bf16[] add(%add.2564, %convert_element_type.3329)
  %mul.9557 = bf16[1,4096,4096]{2,1,0} multiply(%convert_element_type.2948, %sharding_constraint.2350)
  %reduce.1084 = bf16[4096]{0} reduce(%mul.9557, %constant.1190), dimensions={0,1}, to_apply=%region_1116.26514
  %all-reduce.188 = bf16[4096]{0} all-reduce(%reduce.1084), channel_id=991, replica_groups=[1,8]<=[8], use_global_device_ids=true, to_apply=%region_1116.26514.clone
  %mul.9561 = bf16[4096]{0} multiply(%all-reduce.188, %all-reduce.188)
  %convert_element_type.3330 = f32[4096]{0} convert(%mul.9561)
  %reduce.1085 = f32[] reduce(%convert_element_type.3330, %constant.1360), dimensions={0}, to_apply=%region_1117.26521
  %convert_element_type.3331 = bf16[] convert(%reduce.1085)
  %add.2566 = bf16[] add(%add.2565, %convert_element_type.3331)
  %dot.1225 = bf16[8,128,4096]{2,1,0} dot(%concatenate.647, %sharding_constraint.2310), lhs_contracting_dims={0,1}, rhs_contracting_dims={0,1}
  %all-reduce.189 = bf16[8,128,4096]{2,1,0} all-reduce(%dot.1225), channel_id=992, replica_groups=[1,8]<=[8], use_global_device_ids=true, to_apply=%add.61.clone
  %dynamic-slice.2303 = bf16[8,128,512]{2,1,0} dynamic-slice(%all-reduce.189, %constant.1181, %constant.1181, %reshape.13763), dynamic_slice_sizes={8,128,512}
  %transpose.373 = bf16[512,8,128]{0,2,1} transpose(%dynamic-slice.2303), dimensions={2,0,1}
  %mul.9568 = bf16[512,8,128]{0,2,1} multiply(%transpose.373, %transpose.373)
  %convert_element_type.3332 = f32[512,8,128]{0,2,1} convert(%mul.9568)
  %reduce.1086 = f32[] reduce(%convert_element_type.3332, %constant.1360), dimensions={0,1,2}, to_apply=%region_1118.26532
  %all-reduce.190 = f32[] all-reduce(%reduce.1086), channel_id=993, replica_groups=[1,8]<=[8], use_global_device_ids=true, to_apply=%region_1118.26532.clone
  %convert_element_type.3333 = bf16[] convert(%all-reduce.190)
  %add.2567 = bf16[] add(%add.2566, %convert_element_type.3333)
  %dot.1226 = bf16[4096,32,128]{2,1,0} dot(%sharding_constraint.2341, %sharding_constraint.2315), lhs_contracting_dims={0,1}, rhs_contracting_dims={0,1}
  %all-reduce.191 = bf16[4096,32,128]{2,1,0} all-reduce(%dot.1226), channel_id=994, replica_groups=[1,8]<=[8], use_global_device_ids=true, to_apply=%add.62.clone
  %dynamic-slice.2305 = bf16[512,32,128]{2,1,0} dynamic-slice(%all-reduce.191, %reshape.13763, %constant.1181, %constant.1181), dynamic_slice_sizes={512,32,128}
  %transpose.374 = bf16[32,128,512]{1,0,2} transpose(%dynamic-slice.2305), dimensions={1,2,0}
  %mul.9569 = bf16[32,128,512]{1,0,2} multiply(%transpose.374, %transpose.374)
  %convert_element_type.3334 = f32[32,128,512]{1,0,2} convert(%mul.9569)
  %reduce.1087 = f32[] reduce(%convert_element_type.3334, %constant.1360), dimensions={0,1,2}, to_apply=%region_1119.26543
  %all-reduce.192 = f32[] all-reduce(%reduce.1087), channel_id=995, replica_groups=[1,8]<=[8], use_global_device_ids=true, to_apply=%region_1119.26543.clone
  %convert_element_type.3335 = bf16[] convert(%all-reduce.192)
  %add.2568 = bf16[] add(%add.2567, %convert_element_type.3335)
  %dot.1227 = bf16[32,128,4096]{2,1,0} dot(%concatenate.648, %sharding_constraint.2310), lhs_contracting_dims={0,1}, rhs_contracting_dims={0,1}
  %all-reduce.193 = bf16[32,128,4096]{2,1,0} all-reduce(%dot.1227), channel_id=996, replica_groups=[1,8]<=[8], use_global_device_ids=true, to_apply=%add.63.clone
  %dynamic-slice.2307 = bf16[32,128,512]{2,1,0} dynamic-slice(%all-reduce.193, %constant.1181, %constant.1181, %reshape.13763), dynamic_slice_sizes={32,128,512}
  %transpose.375 = bf16[512,32,128]{0,2,1} transpose(%dynamic-slice.2307), dimensions={2,0,1}
  %mul.9570 = bf16[512,32,128]{0,2,1} multiply(%transpose.375, %transpose.375)
  %convert_element_type.3336 = f32[512,32,128]{0,2,1} convert(%mul.9570)
  %reduce.1088 = f32[] reduce(%convert_element_type.3336, %constant.1360), dimensions={0,1,2}, to_apply=%region_1120.26554
  %all-reduce.194 = f32[] all-reduce(%reduce.1088), channel_id=997, replica_groups=[1,8]<=[8], use_global_device_ids=true, to_apply=%region_1120.26554.clone
  %convert_element_type.3337 = bf16[] convert(%all-reduce.194)
  %add.2569 = bf16[] add(%add.2568, %convert_element_type.3337)
  %dot.1228 = bf16[8,128,4096]{2,1,0} dot(%sharding_constraint.2343, %sharding_constraint.2310), lhs_contracting_dims={0,1}, rhs_contracting_dims={0,1}
  %all-reduce.195 = bf16[8,128,4096]{2,1,0} all-reduce(%dot.1228), channel_id=998, replica_groups=[1,8]<=[8], use_global_device_ids=true, to_apply=%add.64.clone
  %dynamic-slice.2309 = bf16[8,128,512]{2,1,0} dynamic-slice(%all-reduce.195, %constant.1181, %constant.1181, %reshape.13763), dynamic_slice_sizes={8,128,512}
  %transpose.376 = bf16[512,8,128]{0,2,1} transpose(%dynamic-slice.2309), dimensions={2,0,1}
  %mul.9571 = bf16[512,8,128]{0,2,1} multiply(%transpose.376, %transpose.376)
  %convert_element_type.3338 = f32[512,8,128]{0,2,1} convert(%mul.9571)
  %reduce.1089 = f32[] reduce(%convert_element_type.3338, %constant.1360), dimensions={0,1,2}, to_apply=%region_1121.26565
  %all-reduce.196 = f32[] all-reduce(%reduce.1089), channel_id=999, replica_groups=[1,8]<=[8], use_global_device_ids=true, to_apply=%region_1121.26565.clone
  %convert_element_type.3339 = bf16[] convert(%all-reduce.196)
  %add.2570 = bf16[] add(%add.2569, %convert_element_type.3339)
  %dot.1229 = bf16[4096,8]{1,0} dot(%sharding_constraint.1436, %sharding_constraint.1458), lhs_contracting_dims={0,1}, rhs_contracting_dims={0,1}
  %all-reduce.197 = bf16[4096,8]{1,0} all-reduce(%dot.1229), channel_id=1000, replica_groups=[1,8]<=[8], use_global_device_ids=true, to_apply=%add.65.clone
  %dynamic-slice.2311 = bf16[512,8]{1,0} dynamic-slice(%all-reduce.197, %reshape.13763, %constant.1181), dynamic_slice_sizes={512,8}
  %mul.9572 = bf16[512,8]{1,0} multiply(%dynamic-slice.2311, %dynamic-slice.2311)
  %convert_element_type.3340 = f32[512,8]{1,0} convert(%mul.9572)
  %reduce.1090 = f32[] reduce(%convert_element_type.3340, %constant.1360), dimensions={0,1}, to_apply=%region_1122.26575
  %all-reduce.198 = f32[] all-reduce(%reduce.1090), channel_id=1001, replica_groups=[1,8]<=[8], use_global_device_ids=true, to_apply=%region_1122.26575.clone
  %convert_element_type.3342 = bf16[] convert(%all-reduce.198)
  %add.2571 = bf16[] add(%add.2570, %convert_element_type.3342)
  %dot.1230 = bf16[1,4096,14336]{2,1,0} dot(%sharding_constraint.1443, %sharding_constraint.1454), lhs_batch_dims={0}, lhs_contracting_dims={1,2}, rhs_batch_dims={0}, rhs_contracting_dims={1,2}
  %sharding_constraint.2502 = bf16[1,4096,14336]{2,1,0} copy(%dot.1230)
  %mul.9573 = bf16[1,4096,14336]{2,1,0} multiply(%sharding_constraint.2502, %sharding_constraint.2502)
  %convert_element_type.3343 = f32[1,4096,14336]{2,1,0} convert(%mul.9573)
  %reduce.1091 = f32[] reduce(%convert_element_type.3343, %constant.1360), dimensions={0,1,2}, to_apply=%region_1123.26586
  %all-reduce.199 = f32[] all-reduce(%reduce.1091), channel_id=1002, replica_groups=[1,8]<=[8], use_global_device_ids=true, to_apply=%region_1123.26586.clone
  %convert_element_type.3344 = bf16[] convert(%all-reduce.199)
  %add.2572 = bf16[] add(%add.2571, %convert_element_type.3344)
  %dot.1231 = bf16[1,4096,14336]{2,1,0} dot(%sharding_constraint.1443, %sharding_constraint.1451), lhs_batch_dims={0}, lhs_contracting_dims={1,2}, rhs_batch_dims={0}, rhs_contracting_dims={1,2}
  %sharding_constraint.2503 = bf16[1,4096,14336]{2,1,0} copy(%dot.1231)
  %mul.9574 = bf16[1,4096,14336]{2,1,0} multiply(%sharding_constraint.2503, %sharding_constraint.2503)
  %convert_element_type.3346 = f32[1,4096,14336]{2,1,0} convert(%mul.9574)
  %reduce.1092 = f32[] reduce(%convert_element_type.3346, %constant.1360), dimensions={0,1,2}, to_apply=%region_1124.26597
  %all-reduce.200 = f32[] all-reduce(%reduce.1092), channel_id=1003, replica_groups=[1,8]<=[8], use_global_device_ids=true, to_apply=%region_1124.26597.clone
  %convert_element_type.3347 = bf16[] convert(%all-reduce.200)
  %add.2573 = bf16[] add(%add.2572, %convert_element_type.3347)
  %dot.1232 = bf16[1,14336,4096]{2,1,0} dot(%mul.6196, %sharding_constraint.1449), lhs_batch_dims={0}, lhs_contracting_dims={1,2}, rhs_batch_dims={0}, rhs_contracting_dims={1,2}
  %sharding_constraint.2504 = bf16[1,14336,4096]{2,1,0} copy(%dot.1232)
  %mul.9575 = bf16[1,14336,4096]{2,1,0} multiply(%sharding_constraint.2504, %sharding_constraint.2504)
  %convert_element_type.3348 = f32[1,14336,4096]{2,1,0} convert(%mul.9575)
  %reduce.1093 = f32[] reduce(%convert_element_type.3348, %constant.1360), dimensions={0,1,2}, to_apply=%region_1125.26608
  %all-reduce.201 = f32[] all-reduce(%reduce.1093), channel_id=1004, replica_groups=[1,8]<=[8], use_global_device_ids=true, to_apply=%region_1125.26608.clone
  %convert_element_type.3349 = bf16[] convert(%all-reduce.201)
  %add.2574 = bf16[] add(%add.2573, %convert_element_type.3349)
  %mul.9576 = bf16[1,4096,4096]{2,1,0} multiply(%convert_element_type.2374, %sharding_constraint.1459)
  %reduce.1094 = bf16[4096]{0} reduce(%mul.9576, %constant.1190), dimensions={0,1}, to_apply=%region_1126.26616
  %all-reduce.202 = bf16[4096]{0} all-reduce(%reduce.1094), channel_id=1005, replica_groups=[1,8]<=[8], use_global_device_ids=true, to_apply=%region_1126.26616.clone
  %mul.9578 = bf16[4096]{0} multiply(%all-reduce.202, %all-reduce.202)
  %convert_element_type.3350 = f32[4096]{0} convert(%mul.9578)
  %reduce.1095 = f32[] reduce(%convert_element_type.3350, %constant.1360), dimensions={0}, to_apply=%region_1127.26623
  %convert_element_type.3352 = bf16[] convert(%reduce.1095)
  %add.2575 = bf16[] add(%add.2574, %convert_element_type.3352)
  %mul.9579 = bf16[1,4096,4096]{2,1,0} multiply(%convert_element_type.2362, %sharding_constraint.1468)
  %reduce.1096 = bf16[4096]{0} reduce(%mul.9579, %constant.1190), dimensions={0,1}, to_apply=%region_1128.26631
  %all-reduce.203 = bf16[4096]{0} all-reduce(%reduce.1096), channel_id=1006, replica_groups=[1,8]<=[8], use_global_device_ids=true, to_apply=%region_1128.26631.clone
  %mul.9580 = bf16[4096]{0} multiply(%all-reduce.203, %all-reduce.203)
  %convert_element_type.3353 = f32[4096]{0} convert(%mul.9580)
  %reduce.1097 = f32[] reduce(%convert_element_type.3353, %constant.1360), dimensions={0}, to_apply=%region_1129.26638
  %convert_element_type.3354 = bf16[] convert(%reduce.1097)
  %add.2576 = bf16[] add(%add.2575, %convert_element_type.3354)
  %dot.1233 = bf16[8,128,4096]{2,1,0} dot(%concatenate.413, %sharding_constraint.1428), lhs_contracting_dims={0,1}, rhs_contracting_dims={0,1}
  %all-reduce.204 = bf16[8,128,4096]{2,1,0} all-reduce(%dot.1233), channel_id=1007, replica_groups=[1,8]<=[8], use_global_device_ids=true, to_apply=%add.66.clone
  %dynamic-slice.2313 = bf16[8,128,512]{2,1,0} dynamic-slice(%all-reduce.204, %constant.1181, %constant.1181, %reshape.13763), dynamic_slice_sizes={8,128,512}
  %transpose.377 = bf16[512,8,128]{0,2,1} transpose(%dynamic-slice.2313), dimensions={2,0,1}
  %mul.9581 = bf16[512,8,128]{0,2,1} multiply(%transpose.377, %transpose.377)
  %convert_element_type.3355 = f32[512,8,128]{0,2,1} convert(%mul.9581)
  %reduce.1098 = f32[] reduce(%convert_element_type.3355, %constant.1360), dimensions={0,1,2}, to_apply=%region_1130.26649
  %all-reduce.205 = f32[] all-reduce(%reduce.1098), channel_id=1008, replica_groups=[1,8]<=[8], use_global_device_ids=true, to_apply=%region_1130.26649.clone
  %convert_element_type.3358 = bf16[] convert(%all-reduce.205)
  %add.2577 = bf16[] add(%add.2576, %convert_element_type.3358)
  %dot.1234 = bf16[4096,32,128]{2,1,0} dot(%sharding_constraint.1461, %sharding_constraint.1434), lhs_contracting_dims={0,1}, rhs_contracting_dims={0,1}
  %all-reduce.206 = bf16[4096,32,128]{2,1,0} all-reduce(%dot.1234), channel_id=1009, replica_groups=[1,8]<=[8], use_global_device_ids=true, to_apply=%add.67.clone
  %dynamic-slice.2315 = bf16[512,32,128]{2,1,0} dynamic-slice(%all-reduce.206, %reshape.13763, %constant.1181, %constant.1181), dynamic_slice_sizes={512,32,128}
  %transpose.378 = bf16[32,128,512]{1,0,2} transpose(%dynamic-slice.2315), dimensions={1,2,0}
  %mul.9582 = bf16[32,128,512]{1,0,2} multiply(%transpose.378, %transpose.378)
  %convert_element_type.3359 = f32[32,128,512]{1,0,2} convert(%mul.9582)
  %reduce.1099 = f32[] reduce(%convert_element_type.3359, %constant.1360), dimensions={0,1,2}, to_apply=%region_1131.26660
  %all-reduce.207 = f32[] all-reduce(%reduce.1099), channel_id=1010, replica_groups=[1,8]<=[8], use_global_device_ids=true, to_apply=%region_1131.26660.clone
  %convert_element_type.3360 = bf16[] convert(%all-reduce.207)
  %add.2578 = bf16[] add(%add.2577, %convert_element_type.3360)
  %dot.1235 = bf16[32,128,4096]{2,1,0} dot(%concatenate.414, %sharding_constraint.1428), lhs_contracting_dims={0,1}, rhs_contracting_dims={0,1}
  %all-reduce.208 = bf16[32,128,4096]{2,1,0} all-reduce(%dot.1235), channel_id=1011, replica_groups=[1,8]<=[8], use_global_device_ids=true, to_apply=%add.68.clone
  %dynamic-slice.2317 = bf16[32,128,512]{2,1,0} dynamic-slice(%all-reduce.208, %constant.1181, %constant.1181, %reshape.13763), dynamic_slice_sizes={32,128,512}
  %transpose.379 = bf16[512,32,128]{0,2,1} transpose(%dynamic-slice.2317), dimensions={2,0,1}
  %mul.9583 = bf16[512,32,128]{0,2,1} multiply(%transpose.379, %transpose.379)
  %convert_element_type.3361 = f32[512,32,128]{0,2,1} convert(%mul.9583)
  %reduce.1100 = f32[] reduce(%convert_element_type.3361, %constant.1360), dimensions={0,1,2}, to_apply=%region_1132.26671
  %all-reduce.209 = f32[] all-reduce(%reduce.1100), channel_id=1012, replica_groups=[1,8]<=[8], use_global_device_ids=true, to_apply=%region_1132.26671.clone
  %convert_element_type.3362 = bf16[] convert(%all-reduce.209)
  %add.2579 = bf16[] add(%add.2578, %convert_element_type.3362)
  %dot.1236 = bf16[8,128,4096]{2,1,0} dot(%sharding_constraint.1463, %sharding_constraint.1428), lhs_contracting_dims={0,1}, rhs_contracting_dims={0,1}
  %all-reduce.210 = bf16[8,128,4096]{2,1,0} all-reduce(%dot.1236), channel_id=1013, replica_groups=[1,8]<=[8], use_global_device_ids=true, to_apply=%add.69.clone
  %dynamic-slice.2319 = bf16[8,128,512]{2,1,0} dynamic-slice(%all-reduce.210, %constant.1181, %constant.1181, %reshape.13763), dynamic_slice_sizes={8,128,512}
  %transpose.380 = bf16[512,8,128]{0,2,1} transpose(%dynamic-slice.2319), dimensions={2,0,1}
  %mul.9584 = bf16[512,8,128]{0,2,1} multiply(%transpose.380, %transpose.380)
  %convert_element_type.3363 = f32[512,8,128]{0,2,1} convert(%mul.9584)
  %reduce.1101 = f32[] reduce(%convert_element_type.3363, %constant.1360), dimensions={0,1,2}, to_apply=%region_1133.26682
  %all-reduce.211 = f32[] all-reduce(%reduce.1101), channel_id=1014, replica_groups=[1,8]<=[8], use_global_device_ids=true, to_apply=%region_1133.26682.clone
  %convert_element_type.3364 = bf16[] convert(%all-reduce.211)
  %add.2580 = bf16[] add(%add.2579, %convert_element_type.3364)
  %dot.1237 = bf16[4096,8]{1,0} dot(%sharding_constraint.1392, %sharding_constraint.1413), lhs_contracting_dims={0,1}, rhs_contracting_dims={0,1}
  %all-reduce.212 = bf16[4096,8]{1,0} all-reduce(%dot.1237), channel_id=1015, replica_groups=[1,8]<=[8], use_global_device_ids=true, to_apply=%add.70.clone
  %dynamic-slice.2321 = bf16[512,8]{1,0} dynamic-slice(%all-reduce.212, %reshape.13763, %constant.1181), dynamic_slice_sizes={512,8}
  %mul.9588 = bf16[512,8]{1,0} multiply(%dynamic-slice.2321, %dynamic-slice.2321)
  %convert_element_type.3365 = f32[512,8]{1,0} convert(%mul.9588)
  %reduce.1102 = f32[] reduce(%convert_element_type.3365, %constant.1360), dimensions={0,1}, to_apply=%region_1134.26692
  %all-reduce.213 = f32[] all-reduce(%reduce.1102), channel_id=1016, replica_groups=[1,8]<=[8], use_global_device_ids=true, to_apply=%region_1134.26692.clone
  %convert_element_type.3366 = bf16[] convert(%all-reduce.213)
  %add.2581 = bf16[] add(%add.2580, %convert_element_type.3366)
  %dot.1238 = bf16[1,4096,14336]{2,1,0} dot(%sharding_constraint.1397, %sharding_constraint.1409), lhs_batch_dims={0}, lhs_contracting_dims={1,2}, rhs_batch_dims={0}, rhs_contracting_dims={1,2}
  %sharding_constraint.2505 = bf16[1,4096,14336]{2,1,0} copy(%dot.1238)
  %mul.9589 = bf16[1,4096,14336]{2,1,0} multiply(%sharding_constraint.2505, %sharding_constraint.2505)
  %convert_element_type.3367 = f32[1,4096,14336]{2,1,0} convert(%mul.9589)
  %reduce.1103 = f32[] reduce(%convert_element_type.3367, %constant.1360), dimensions={0,1,2}, to_apply=%region_1135.26703
  %all-reduce.214 = f32[] all-reduce(%reduce.1103), channel_id=1017, replica_groups=[1,8]<=[8], use_global_device_ids=true, to_apply=%region_1135.26703.clone
  %convert_element_type.3368 = bf16[] convert(%all-reduce.214)
  %add.2582 = bf16[] add(%add.2581, %convert_element_type.3368)
  %dot.1239 = bf16[1,4096,14336]{2,1,0} dot(%sharding_constraint.1397, %sharding_constraint.1404), lhs_batch_dims={0}, lhs_contracting_dims={1,2}, rhs_batch_dims={0}, rhs_contracting_dims={1,2}
  %sharding_constraint.2506 = bf16[1,4096,14336]{2,1,0} copy(%dot.1239)
  %mul.9590 = bf16[1,4096,14336]{2,1,0} multiply(%sharding_constraint.2506, %sharding_constraint.2506)
  %convert_element_type.3369 = f32[1,4096,14336]{2,1,0} convert(%mul.9590)
  %reduce.1104 = f32[] reduce(%convert_element_type.3369, %constant.1360), dimensions={0,1,2}, to_apply=%region_1136.26714
  %all-reduce.215 = f32[] all-reduce(%reduce.1104), channel_id=1018, replica_groups=[1,8]<=[8], use_global_device_ids=true, to_apply=%region_1136.26714.clone
  %convert_element_type.3370 = bf16[] convert(%all-reduce.215)
  %add.2583 = bf16[] add(%add.2582, %convert_element_type.3370)
  %dot.1240 = bf16[1,14336,4096]{2,1,0} dot(%mul.6016, %sharding_constraint.1402), lhs_batch_dims={0}, lhs_contracting_dims={1,2}, rhs_batch_dims={0}, rhs_contracting_dims={1,2}
  %sharding_constraint.2507 = bf16[1,14336,4096]{2,1,0} copy(%dot.1240)
  %mul.9602 = bf16[1,14336,4096]{2,1,0} multiply(%sharding_constraint.2507, %sharding_constraint.2507)
  %convert_element_type.3372 = f32[1,14336,4096]{2,1,0} convert(%mul.9602)
  %reduce.1105 = f32[] reduce(%convert_element_type.3372, %constant.1360), dimensions={0,1,2}, to_apply=%region_1137.26725
  %all-reduce.216 = f32[] all-reduce(%reduce.1105), channel_id=1019, replica_groups=[1,8]<=[8], use_global_device_ids=true, to_apply=%region_1137.26725.clone
  %convert_element_type.3373 = bf16[] convert(%all-reduce.216)
  %add.2584 = bf16[] add(%add.2583, %convert_element_type.3373)
  %mul.9603 = bf16[1,4096,4096]{2,1,0} multiply(%convert_element_type.2346, %sharding_constraint.1414)
  %reduce.1106 = bf16[4096]{0} reduce(%mul.9603, %constant.1190), dimensions={0,1}, to_apply=%region_1138.26733
  %all-reduce.217 = bf16[4096]{0} all-reduce(%reduce.1106), channel_id=1020, replica_groups=[1,8]<=[8], use_global_device_ids=true, to_apply=%region_1138.26733.clone
  %mul.9604 = bf16[4096]{0} multiply(%all-reduce.217, %all-reduce.217)
  %convert_element_type.3375 = f32[4096]{0} convert(%mul.9604)
  %reduce.1107 = f32[] reduce(%convert_element_type.3375, %constant.1360), dimensions={0}, to_apply=%region_1139.26740
  %convert_element_type.3376 = bf16[] convert(%reduce.1107)
  %add.2585 = bf16[] add(%add.2584, %convert_element_type.3376)
  %mul.9605 = bf16[1,4096,4096]{2,1,0} multiply(%convert_element_type.2332, %sharding_constraint.1423)
  %reduce.1108 = bf16[4096]{0} reduce(%mul.9605, %constant.1190), dimensions={0,1}, to_apply=%region_1140.26748
  %all-reduce.218 = bf16[4096]{0} all-reduce(%reduce.1108), channel_id=1021, replica_groups=[1,8]<=[8], use_global_device_ids=true, to_apply=%region_1140.26748.clone
  %mul.9606 = bf16[4096]{0} multiply(%all-reduce.218, %all-reduce.218)
  %convert_element_type.3377 = f32[4096]{0} convert(%mul.9606)
  %reduce.1109 = f32[] reduce(%convert_element_type.3377, %constant.1360), dimensions={0}, to_apply=%region_1141.26755
  %convert_element_type.3378 = bf16[] convert(%reduce.1109)
  %add.2586 = bf16[] add(%add.2585, %convert_element_type.3378)
  %dot.1241 = bf16[8,128,4096]{2,1,0} dot(%concatenate.400, %sharding_constraint.1378), lhs_contracting_dims={0,1}, rhs_contracting_dims={0,1}
  %all-reduce.219 = bf16[8,128,4096]{2,1,0} all-reduce(%dot.1241), channel_id=1022, replica_groups=[1,8]<=[8], use_global_device_ids=true, to_apply=%add.71.clone
  %dynamic-slice.2323 = bf16[8,128,512]{2,1,0} dynamic-slice(%all-reduce.219, %constant.1181, %constant.1181, %reshape.13763), dynamic_slice_sizes={8,128,512}
  %transpose.381 = bf16[512,8,128]{0,2,1} transpose(%dynamic-slice.2323), dimensions={2,0,1}
  %mul.9607 = bf16[512,8,128]{0,2,1} multiply(%transpose.381, %transpose.381)
  %convert_element_type.3379 = f32[512,8,128]{0,2,1} convert(%mul.9607)
  %reduce.1110 = f32[] reduce(%convert_element_type.3379, %constant.1360), dimensions={0,1,2}, to_apply=%region_1142.26766
  %all-reduce.220 = f32[] all-reduce(%reduce.1110), channel_id=1023, replica_groups=[1,8]<=[8], use_global_device_ids=true, to_apply=%region_1142.26766.clone
  %convert_element_type.3380 = bf16[] convert(%all-reduce.220)
  %add.2587 = bf16[] add(%add.2586, %convert_element_type.3380)
  %dot.1242 = bf16[4096,32,128]{2,1,0} dot(%sharding_constraint.1416, %sharding_constraint.1387), lhs_contracting_dims={0,1}, rhs_contracting_dims={0,1}
  %all-reduce.221 = bf16[4096,32,128]{2,1,0} all-reduce(%dot.1242), channel_id=1024, replica_groups=[1,8]<=[8], use_global_device_ids=true, to_apply=%add.72.clone
  %dynamic-slice.2325 = bf16[512,32,128]{2,1,0} dynamic-slice(%all-reduce.221, %reshape.13763, %constant.1181, %constant.1181), dynamic_slice_sizes={512,32,128}
  %transpose.382 = bf16[32,128,512]{1,0,2} transpose(%dynamic-slice.2325), dimensions={1,2,0}
  %mul.9608 = bf16[32,128,512]{1,0,2} multiply(%transpose.382, %transpose.382)
  %convert_element_type.3381 = f32[32,128,512]{1,0,2} convert(%mul.9608)
  %reduce.1111 = f32[] reduce(%convert_element_type.3381, %constant.1360), dimensions={0,1,2}, to_apply=%region_1143.26777
  %all-reduce.222 = f32[] all-reduce(%reduce.1111), channel_id=1025, replica_groups=[1,8]<=[8], use_global_device_ids=true, to_apply=%region_1143.26777.clone
  %convert_element_type.3382 = bf16[] convert(%all-reduce.222)
  %add.2589 = bf16[] add(%add.2587, %convert_element_type.3382)
  %dot.1243 = bf16[32,128,4096]{2,1,0} dot(%concatenate.401, %sharding_constraint.1378), lhs_contracting_dims={0,1}, rhs_contracting_dims={0,1}
  %all-reduce.223 = bf16[32,128,4096]{2,1,0} all-reduce(%dot.1243), channel_id=1026, replica_groups=[1,8]<=[8], use_global_device_ids=true, to_apply=%add.73.clone
  %dynamic-slice.2327 = bf16[32,128,512]{2,1,0} dynamic-slice(%all-reduce.223, %constant.1181, %constant.1181, %reshape.13763), dynamic_slice_sizes={32,128,512}
  %transpose.383 = bf16[512,32,128]{0,2,1} transpose(%dynamic-slice.2327), dimensions={2,0,1}
  %mul.9609 = bf16[512,32,128]{0,2,1} multiply(%transpose.383, %transpose.383)
  %convert_element_type.3383 = f32[512,32,128]{0,2,1} convert(%mul.9609)
  %reduce.1112 = f32[] reduce(%convert_element_type.3383, %constant.1360), dimensions={0,1,2}, to_apply=%region_1144.26788
  %all-reduce.224 = f32[] all-reduce(%reduce.1112), channel_id=1027, replica_groups=[1,8]<=[8], use_global_device_ids=true, to_apply=%region_1144.26788.clone
  %convert_element_type.3385 = bf16[] convert(%all-reduce.224)
  %add.2590 = bf16[] add(%add.2589, %convert_element_type.3385)
  %dot.1244 = bf16[8,128,4096]{2,1,0} dot(%sharding_constraint.1418, %sharding_constraint.1378), lhs_contracting_dims={0,1}, rhs_contracting_dims={0,1}
  %all-reduce.225 = bf16[8,128,4096]{2,1,0} all-reduce(%dot.1244), channel_id=1028, replica_groups=[1,8]<=[8], use_global_device_ids=true, to_apply=%add.74.clone
  %dynamic-slice.2329 = bf16[8,128,512]{2,1,0} dynamic-slice(%all-reduce.225, %constant.1181, %constant.1181, %reshape.13763), dynamic_slice_sizes={8,128,512}
  %transpose.384 = bf16[512,8,128]{0,2,1} transpose(%dynamic-slice.2329), dimensions={2,0,1}
  %mul.9610 = bf16[512,8,128]{0,2,1} multiply(%transpose.384, %transpose.384)
  %convert_element_type.3387 = f32[512,8,128]{0,2,1} convert(%mul.9610)
  %reduce.1113 = f32[] reduce(%convert_element_type.3387, %constant.1360), dimensions={0,1,2}, to_apply=%region_1145.26799
  %all-reduce.226 = f32[] all-reduce(%reduce.1113), channel_id=1029, replica_groups=[1,8]<=[8], use_global_device_ids=true, to_apply=%region_1145.26799.clone
  %convert_element_type.3388 = bf16[] convert(%all-reduce.226)
  %add.2591 = bf16[] add(%add.2590, %convert_element_type.3388)
  %dot.1245 = bf16[4096,8]{1,0} dot(%sharding_constraint.1337, %sharding_constraint.1358), lhs_contracting_dims={0,1}, rhs_contracting_dims={0,1}
  %all-reduce.227 = bf16[4096,8]{1,0} all-reduce(%dot.1245), channel_id=1030, replica_groups=[1,8]<=[8], use_global_device_ids=true, to_apply=%add.75.clone
  %dynamic-slice.2331 = bf16[512,8]{1,0} dynamic-slice(%all-reduce.227, %reshape.13763, %constant.1181), dynamic_slice_sizes={512,8}
  %mul.9611 = bf16[512,8]{1,0} multiply(%dynamic-slice.2331, %dynamic-slice.2331)
  %convert_element_type.3389 = f32[512,8]{1,0} convert(%mul.9611)
  %reduce.1114 = f32[] reduce(%convert_element_type.3389, %constant.1360), dimensions={0,1}, to_apply=%region_1146.26809
  %all-reduce.228 = f32[] all-reduce(%reduce.1114), channel_id=1031, replica_groups=[1,8]<=[8], use_global_device_ids=true, to_apply=%region_1146.26809.clone
  %convert_element_type.3390 = bf16[] convert(%all-reduce.228)
  %add.2592 = bf16[] add(%add.2591, %convert_element_type.3390)
  %dot.1246 = bf16[1,4096,14336]{2,1,0} dot(%sharding_constraint.1342, %sharding_constraint.1354), lhs_batch_dims={0}, lhs_contracting_dims={1,2}, rhs_batch_dims={0}, rhs_contracting_dims={1,2}
  %sharding_constraint.2508 = bf16[1,4096,14336]{2,1,0} copy(%dot.1246)
  %mul.9612 = bf16[1,4096,14336]{2,1,0} multiply(%sharding_constraint.2508, %sharding_constraint.2508)
  %convert_element_type.3391 = f32[1,4096,14336]{2,1,0} convert(%mul.9612)
  %reduce.1115 = f32[] reduce(%convert_element_type.3391, %constant.1360), dimensions={0,1,2}, to_apply=%region_1147.26820
  %all-reduce.229 = f32[] all-reduce(%reduce.1115), channel_id=1032, replica_groups=[1,8]<=[8], use_global_device_ids=true, to_apply=%region_1147.26820.clone
  %convert_element_type.3392 = bf16[] convert(%all-reduce.229)
  %add.2593 = bf16[] add(%add.2592, %convert_element_type.3392)
  %dot.1247 = bf16[1,4096,14336]{2,1,0} dot(%sharding_constraint.1342, %sharding_constraint.1351), lhs_batch_dims={0}, lhs_contracting_dims={1,2}, rhs_batch_dims={0}, rhs_contracting_dims={1,2}
  %sharding_constraint.2509 = bf16[1,4096,14336]{2,1,0} copy(%dot.1247)
  %mul.9613 = bf16[1,4096,14336]{2,1,0} multiply(%sharding_constraint.2509, %sharding_constraint.2509)
  %convert_element_type.3394 = f32[1,4096,14336]{2,1,0} convert(%mul.9613)
  %reduce.1116 = f32[] reduce(%convert_element_type.3394, %constant.1360), dimensions={0,1,2}, to_apply=%region_1148.26831
  %all-reduce.230 = f32[] all-reduce(%reduce.1116), channel_id=1033, replica_groups=[1,8]<=[8], use_global_device_ids=true, to_apply=%region_1148.26831.clone
  %convert_element_type.3395 = bf16[] convert(%all-reduce.230)
  %add.2594 = bf16[] add(%add.2593, %convert_element_type.3395)
  %dot.1248 = bf16[1,14336,4096]{2,1,0} dot(%mul.5891, %sharding_constraint.1347), lhs_batch_dims={0}, lhs_contracting_dims={1,2}, rhs_batch_dims={0}, rhs_contracting_dims={1,2}
  %sharding_constraint.2510 = bf16[1,14336,4096]{2,1,0} copy(%dot.1248)
  %mul.9614 = bf16[1,14336,4096]{2,1,0} multiply(%sharding_constraint.2510, %sharding_constraint.2510)
  %convert_element_type.3396 = f32[1,14336,4096]{2,1,0} convert(%mul.9614)
  %reduce.1117 = f32[] reduce(%convert_element_type.3396, %constant.1360), dimensions={0,1,2}, to_apply=%region_1149.26842
  %all-reduce.231 = f32[] all-reduce(%reduce.1117), channel_id=1034, replica_groups=[1,8]<=[8], use_global_device_ids=true, to_apply=%region_1149.26842.clone
  %convert_element_type.3397 = bf16[] convert(%all-reduce.231)
  %add.2595 = bf16[] add(%add.2594, %convert_element_type.3397)
  %mul.9615 = bf16[1,4096,4096]{2,1,0} multiply(%convert_element_type.2315, %sharding_constraint.1359)
  %reduce.1118 = bf16[4096]{0} reduce(%mul.9615, %constant.1190), dimensions={0,1}, to_apply=%region_1150.26850
  %all-reduce.232 = bf16[4096]{0} all-reduce(%reduce.1118), channel_id=1035, replica_groups=[1,8]<=[8], use_global_device_ids=true, to_apply=%region_1150.26850.clone
  %mul.9616 = bf16[4096]{0} multiply(%all-reduce.232, %all-reduce.232)
  %convert_element_type.3398 = f32[4096]{0} convert(%mul.9616)
  %reduce.1119 = f32[] reduce(%convert_element_type.3398, %constant.1360), dimensions={0}, to_apply=%region_1151.26857
  %convert_element_type.3399 = bf16[] convert(%reduce.1119)
  %add.2596 = bf16[] add(%add.2595, %convert_element_type.3399)
  %mul.9617 = bf16[1,4096,4096]{2,1,0} multiply(%convert_element_type.2301, %sharding_constraint.1373)
  %reduce.1120 = bf16[4096]{0} reduce(%mul.9617, %constant.1190), dimensions={0,1}, to_apply=%region_1152.26865
  %all-reduce.233 = bf16[4096]{0} all-reduce(%reduce.1120), channel_id=1036, replica_groups=[1,8]<=[8], use_global_device_ids=true, to_apply=%region_1152.26865.clone
  %mul.9618 = bf16[4096]{0} multiply(%all-reduce.233, %all-reduce.233)
  %convert_element_type.3400 = f32[4096]{0} convert(%mul.9618)
  %reduce.1121 = f32[] reduce(%convert_element_type.3400, %constant.1360), dimensions={0}, to_apply=%region_1153.26872
  %convert_element_type.3401 = bf16[] convert(%reduce.1121)
  %add.2597 = bf16[] add(%add.2596, %convert_element_type.3401)
  %dot.1249 = bf16[8,128,4096]{2,1,0} dot(%concatenate.387, %sharding_constraint.1329), lhs_contracting_dims={0,1}, rhs_contracting_dims={0,1}
  %all-reduce.234 = bf16[8,128,4096]{2,1,0} all-reduce(%dot.1249), channel_id=1037, replica_groups=[1,8]<=[8], use_global_device_ids=true, to_apply=%add.76.clone
  %dynamic-slice.2333 = bf16[8,128,512]{2,1,0} dynamic-slice(%all-reduce.234, %constant.1181, %constant.1181, %reshape.13763), dynamic_slice_sizes={8,128,512}
  %transpose.385 = bf16[512,8,128]{0,2,1} transpose(%dynamic-slice.2333), dimensions={2,0,1}
  %mul.9619 = bf16[512,8,128]{0,2,1} multiply(%transpose.385, %transpose.385)
  %convert_element_type.3402 = f32[512,8,128]{0,2,1} convert(%mul.9619)
  %reduce.1122 = f32[] reduce(%convert_element_type.3402, %constant.1360), dimensions={0,1,2}, to_apply=%region_1154.26883
  %all-reduce.235 = f32[] all-reduce(%reduce.1122), channel_id=1038, replica_groups=[1,8]<=[8], use_global_device_ids=true, to_apply=%region_1154.26883.clone
  %convert_element_type.3403 = bf16[] convert(%all-reduce.235)
  %add.2600 = bf16[] add(%add.2597, %convert_element_type.3403)
  %dot.1250 = bf16[4096,32,128]{2,1,0} dot(%sharding_constraint.1361, %sharding_constraint.1335), lhs_contracting_dims={0,1}, rhs_contracting_dims={0,1}
  %all-reduce.236 = bf16[4096,32,128]{2,1,0} all-reduce(%dot.1250), channel_id=1039, replica_groups=[1,8]<=[8], use_global_device_ids=true, to_apply=%add.77.clone
  %dynamic-slice.2335 = bf16[512,32,128]{2,1,0} dynamic-slice(%all-reduce.236, %reshape.13763, %constant.1181, %constant.1181), dynamic_slice_sizes={512,32,128}
  %transpose.386 = bf16[32,128,512]{1,0,2} transpose(%dynamic-slice.2335), dimensions={1,2,0}
  %mul.9620 = bf16[32,128,512]{1,0,2} multiply(%transpose.386, %transpose.386)
  %convert_element_type.3404 = f32[32,128,512]{1,0,2} convert(%mul.9620)
  %reduce.1123 = f32[] reduce(%convert_element_type.3404, %constant.1360), dimensions={0,1,2}, to_apply=%region_1155.26894
  %all-reduce.237 = f32[] all-reduce(%reduce.1123), channel_id=1040, replica_groups=[1,8]<=[8], use_global_device_ids=true, to_apply=%region_1155.26894.clone
  %convert_element_type.3405 = bf16[] convert(%all-reduce.237)
  %add.2601 = bf16[] add(%add.2600, %convert_element_type.3405)
  %dot.1251 = bf16[32,128,4096]{2,1,0} dot(%concatenate.388, %sharding_constraint.1329), lhs_contracting_dims={0,1}, rhs_contracting_dims={0,1}
  %all-reduce.238 = bf16[32,128,4096]{2,1,0} all-reduce(%dot.1251), channel_id=1041, replica_groups=[1,8]<=[8], use_global_device_ids=true, to_apply=%add.78.clone
  %dynamic-slice.2337 = bf16[32,128,512]{2,1,0} dynamic-slice(%all-reduce.238, %constant.1181, %constant.1181, %reshape.13763), dynamic_slice_sizes={32,128,512}
  %transpose.387 = bf16[512,32,128]{0,2,1} transpose(%dynamic-slice.2337), dimensions={2,0,1}
  %mul.9621 = bf16[512,32,128]{0,2,1} multiply(%transpose.387, %transpose.387)
  %convert_element_type.3406 = f32[512,32,128]{0,2,1} convert(%mul.9621)
  %reduce.1124 = f32[] reduce(%convert_element_type.3406, %constant.1360), dimensions={0,1,2}, to_apply=%region_1156.26905
  %all-reduce.239 = f32[] all-reduce(%reduce.1124), channel_id=1042, replica_groups=[1,8]<=[8], use_global_device_ids=true, to_apply=%region_1156.26905.clone
  %convert_element_type.3407 = bf16[] convert(%all-reduce.239)
  %add.2602 = bf16[] add(%add.2601, %convert_element_type.3407)
  %dot.1252 = bf16[8,128,4096]{2,1,0} dot(%sharding_constraint.1364, %sharding_constraint.1329), lhs_contracting_dims={0,1}, rhs_contracting_dims={0,1}
  %all-reduce.240 = bf16[8,128,4096]{2,1,0} all-reduce(%dot.1252), channel_id=1043, replica_groups=[1,8]<=[8], use_global_device_ids=true, to_apply=%add.79.clone
  %dynamic-slice.2339 = bf16[8,128,512]{2,1,0} dynamic-slice(%all-reduce.240, %constant.1181, %constant.1181, %reshape.13763), dynamic_slice_sizes={8,128,512}
  %transpose.388 = bf16[512,8,128]{0,2,1} transpose(%dynamic-slice.2339), dimensions={2,0,1}
  %mul.9622 = bf16[512,8,128]{0,2,1} multiply(%transpose.388, %transpose.388)
  %convert_element_type.3408 = f32[512,8,128]{0,2,1} convert(%mul.9622)
  %reduce.1125 = f32[] reduce(%convert_element_type.3408, %constant.1360), dimensions={0,1,2}, to_apply=%region_1157.26916
  %all-reduce.241 = f32[] all-reduce(%reduce.1125), channel_id=1044, replica_groups=[1,8]<=[8], use_global_device_ids=true, to_apply=%region_1157.26916.clone
  %convert_element_type.3409 = bf16[] convert(%all-reduce.241)
  %add.2603 = bf16[] add(%add.2602, %convert_element_type.3409)
  %dot.1253 = bf16[4096,8]{1,0} dot(%sharding_constraint.1292, %sharding_constraint.1311), lhs_contracting_dims={0,1}, rhs_contracting_dims={0,1}
  %all-reduce.242 = bf16[4096,8]{1,0} all-reduce(%dot.1253), channel_id=1045, replica_groups=[1,8]<=[8], use_global_device_ids=true, to_apply=%add.80.clone
  %dynamic-slice.2341 = bf16[512,8]{1,0} dynamic-slice(%all-reduce.242, %reshape.13763, %constant.1181), dynamic_slice_sizes={512,8}
  %mul.9623 = bf16[512,8]{1,0} multiply(%dynamic-slice.2341, %dynamic-slice.2341)
  %convert_element_type.3410 = f32[512,8]{1,0} convert(%mul.9623)
  %reduce.1126 = f32[] reduce(%convert_element_type.3410, %constant.1360), dimensions={0,1}, to_apply=%region_1158.26926
  %all-reduce.243 = f32[] all-reduce(%reduce.1126), channel_id=1046, replica_groups=[1,8]<=[8], use_global_device_ids=true, to_apply=%region_1158.26926.clone
  %convert_element_type.3412 = bf16[] convert(%all-reduce.243)
  %add.2604 = bf16[] add(%add.2603, %convert_element_type.3412)
  %dot.1254 = bf16[1,4096,14336]{2,1,0} dot(%sharding_constraint.1297, %sharding_constraint.1307), lhs_batch_dims={0}, lhs_contracting_dims={1,2}, rhs_batch_dims={0}, rhs_contracting_dims={1,2}
  %sharding_constraint.2511 = bf16[1,4096,14336]{2,1,0} copy(%dot.1254)
  %mul.9624 = bf16[1,4096,14336]{2,1,0} multiply(%sharding_constraint.2511, %sharding_constraint.2511)
  %convert_element_type.3415 = f32[1,4096,14336]{2,1,0} convert(%mul.9624)
  %reduce.1127 = f32[] reduce(%convert_element_type.3415, %constant.1360), dimensions={0,1,2}, to_apply=%region_1159.26937
  %all-reduce.244 = f32[] all-reduce(%reduce.1127), channel_id=1047, replica_groups=[1,8]<=[8], use_global_device_ids=true, to_apply=%region_1159.26937.clone
  %convert_element_type.3416 = bf16[] convert(%all-reduce.244)
  %add.2605 = bf16[] add(%add.2604, %convert_element_type.3416)
  %dot.1255 = bf16[1,4096,14336]{2,1,0} dot(%sharding_constraint.1297, %sharding_constraint.1304), lhs_batch_dims={0}, lhs_contracting_dims={1,2}, rhs_batch_dims={0}, rhs_contracting_dims={1,2}
  %sharding_constraint.2512 = bf16[1,4096,14336]{2,1,0} copy(%dot.1255)
  %mul.9625 = bf16[1,4096,14336]{2,1,0} multiply(%sharding_constraint.2512, %sharding_constraint.2512)
  %convert_element_type.3417 = f32[1,4096,14336]{2,1,0} convert(%mul.9625)
  %reduce.1128 = f32[] reduce(%convert_element_type.3417, %constant.1360), dimensions={0,1,2}, to_apply=%region_1160.26948
  %all-reduce.245 = f32[] all-reduce(%reduce.1128), channel_id=1048, replica_groups=[1,8]<=[8], use_global_device_ids=true, to_apply=%region_1160.26948.clone
  %convert_element_type.3418 = bf16[] convert(%all-reduce.245)
  %add.2606 = bf16[] add(%add.2605, %convert_element_type.3418)
  %dot.1256 = bf16[1,14336,4096]{2,1,0} dot(%mul.5709, %sharding_constraint.1302), lhs_batch_dims={0}, lhs_contracting_dims={1,2}, rhs_batch_dims={0}, rhs_contracting_dims={1,2}
  %sharding_constraint.2513 = bf16[1,14336,4096]{2,1,0} copy(%dot.1256)
  %mul.9626 = bf16[1,14336,4096]{2,1,0} multiply(%sharding_constraint.2513, %sharding_constraint.2513)
  %convert_element_type.3419 = f32[1,14336,4096]{2,1,0} convert(%mul.9626)
  %reduce.1129 = f32[] reduce(%convert_element_type.3419, %constant.1360), dimensions={0,1,2}, to_apply=%region_1161.26959
  %all-reduce.246 = f32[] all-reduce(%reduce.1129), channel_id=1049, replica_groups=[1,8]<=[8], use_global_device_ids=true, to_apply=%region_1161.26959.clone
  %convert_element_type.3420 = bf16[] convert(%all-reduce.246)
  %add.2607 = bf16[] add(%add.2606, %convert_element_type.3420)
  %mul.9627 = bf16[1,4096,4096]{2,1,0} multiply(%convert_element_type.2283, %sharding_constraint.1312)
  %reduce.1130 = bf16[4096]{0} reduce(%mul.9627, %constant.1190), dimensions={0,1}, to_apply=%region_1162.26967
  %all-reduce.247 = bf16[4096]{0} all-reduce(%reduce.1130), channel_id=1050, replica_groups=[1,8]<=[8], use_global_device_ids=true, to_apply=%region_1162.26967.clone
  %mul.9628 = bf16[4096]{0} multiply(%all-reduce.247, %all-reduce.247)
  %convert_element_type.3421 = f32[4096]{0} convert(%mul.9628)
  %reduce.1131 = f32[] reduce(%convert_element_type.3421, %constant.1360), dimensions={0}, to_apply=%region_1163.26974
  %convert_element_type.3422 = bf16[] convert(%reduce.1131)
  %add.2609 = bf16[] add(%add.2607, %convert_element_type.3422)
  %mul.9629 = bf16[1,4096,4096]{2,1,0} multiply(%convert_element_type.2270, %sharding_constraint.1321)
  %reduce.1132 = bf16[4096]{0} reduce(%mul.9629, %constant.1190), dimensions={0,1}, to_apply=%region_1164.26982
  %all-reduce.248 = bf16[4096]{0} all-reduce(%reduce.1132), channel_id=1051, replica_groups=[1,8]<=[8], use_global_device_ids=true, to_apply=%region_1164.26982.clone
  %mul.9630 = bf16[4096]{0} multiply(%all-reduce.248, %all-reduce.248)
  %convert_element_type.3423 = f32[4096]{0} convert(%mul.9630)
  %reduce.1133 = f32[] reduce(%convert_element_type.3423, %constant.1360), dimensions={0}, to_apply=%region_1165.26989
  %convert_element_type.3427 = bf16[] convert(%reduce.1133)
  %add.2610 = bf16[] add(%add.2609, %convert_element_type.3427)
  %dot.1257 = bf16[8,128,4096]{2,1,0} dot(%concatenate.374, %sharding_constraint.1285), lhs_contracting_dims={0,1}, rhs_contracting_dims={0,1}
  %all-reduce.249 = bf16[8,128,4096]{2,1,0} all-reduce(%dot.1257), channel_id=1052, replica_groups=[1,8]<=[8], use_global_device_ids=true, to_apply=%add.81.clone
  %dynamic-slice.2343 = bf16[8,128,512]{2,1,0} dynamic-slice(%all-reduce.249, %constant.1181, %constant.1181, %reshape.13763), dynamic_slice_sizes={8,128,512}
  %transpose.389 = bf16[512,8,128]{0,2,1} transpose(%dynamic-slice.2343), dimensions={2,0,1}
  %mul.9631 = bf16[512,8,128]{0,2,1} multiply(%transpose.389, %transpose.389)
  %convert_element_type.3428 = f32[512,8,128]{0,2,1} convert(%mul.9631)
  %reduce.1134 = f32[] reduce(%convert_element_type.3428, %constant.1360), dimensions={0,1,2}, to_apply=%region_1166.27000
  %all-reduce.250 = f32[] all-reduce(%reduce.1134), channel_id=1053, replica_groups=[1,8]<=[8], use_global_device_ids=true, to_apply=%region_1166.27000.clone
  %convert_element_type.3429 = bf16[] convert(%all-reduce.250)
  %add.2611 = bf16[] add(%add.2610, %convert_element_type.3429)
  %dot.1258 = bf16[4096,32,128]{2,1,0} dot(%sharding_constraint.1314, %sharding_constraint.1290), lhs_contracting_dims={0,1}, rhs_contracting_dims={0,1}
  %all-reduce.251 = bf16[4096,32,128]{2,1,0} all-reduce(%dot.1258), channel_id=1054, replica_groups=[1,8]<=[8], use_global_device_ids=true, to_apply=%add.82.clone
  %dynamic-slice.2345 = bf16[512,32,128]{2,1,0} dynamic-slice(%all-reduce.251, %reshape.13763, %constant.1181, %constant.1181), dynamic_slice_sizes={512,32,128}
  %transpose.390 = bf16[32,128,512]{1,0,2} transpose(%dynamic-slice.2345), dimensions={1,2,0}
  %mul.9632 = bf16[32,128,512]{1,0,2} multiply(%transpose.390, %transpose.390)
  %convert_element_type.3430 = f32[32,128,512]{1,0,2} convert(%mul.9632)
  %reduce.1135 = f32[] reduce(%convert_element_type.3430, %constant.1360), dimensions={0,1,2}, to_apply=%region_1167.27011
  %all-reduce.252 = f32[] all-reduce(%reduce.1135), channel_id=1055, replica_groups=[1,8]<=[8], use_global_device_ids=true, to_apply=%region_1167.27011.clone
  %convert_element_type.3431 = bf16[] convert(%all-reduce.252)
  %add.2612 = bf16[] add(%add.2611, %convert_element_type.3431)
  %dot.1259 = bf16[32,128,4096]{2,1,0} dot(%concatenate.375, %sharding_constraint.1285), lhs_contracting_dims={0,1}, rhs_contracting_dims={0,1}
  %all-reduce.253 = bf16[32,128,4096]{2,1,0} all-reduce(%dot.1259), channel_id=1056, replica_groups=[1,8]<=[8], use_global_device_ids=true, to_apply=%add.83.clone
  %dynamic-slice.2347 = bf16[32,128,512]{2,1,0} dynamic-slice(%all-reduce.253, %constant.1181, %constant.1181, %reshape.13763), dynamic_slice_sizes={32,128,512}
  %transpose.391 = bf16[512,32,128]{0,2,1} transpose(%dynamic-slice.2347), dimensions={2,0,1}
  %mul.9633 = bf16[512,32,128]{0,2,1} multiply(%transpose.391, %transpose.391)
  %convert_element_type.3432 = f32[512,32,128]{0,2,1} convert(%mul.9633)
  %reduce.1136 = f32[] reduce(%convert_element_type.3432, %constant.1360), dimensions={0,1,2}, to_apply=%region_1168.27022
  %all-reduce.254 = f32[] all-reduce(%reduce.1136), channel_id=1057, replica_groups=[1,8]<=[8], use_global_device_ids=true, to_apply=%region_1168.27022.clone
  %convert_element_type.3433 = bf16[] convert(%all-reduce.254)
  %add.2613 = bf16[] add(%add.2612, %convert_element_type.3433)
  %dot.1260 = bf16[8,128,4096]{2,1,0} dot(%sharding_constraint.1316, %sharding_constraint.1285), lhs_contracting_dims={0,1}, rhs_contracting_dims={0,1}
  %all-reduce.255 = bf16[8,128,4096]{2,1,0} all-reduce(%dot.1260), channel_id=1058, replica_groups=[1,8]<=[8], use_global_device_ids=true, to_apply=%add.84.clone
  %dynamic-slice.2349 = bf16[8,128,512]{2,1,0} dynamic-slice(%all-reduce.255, %constant.1181, %constant.1181, %reshape.13763), dynamic_slice_sizes={8,128,512}
  %transpose.392 = bf16[512,8,128]{0,2,1} transpose(%dynamic-slice.2349), dimensions={2,0,1}
  %mul.9634 = bf16[512,8,128]{0,2,1} multiply(%transpose.392, %transpose.392)
  %convert_element_type.3434 = f32[512,8,128]{0,2,1} convert(%mul.9634)
  %reduce.1137 = f32[] reduce(%convert_element_type.3434, %constant.1360), dimensions={0,1,2}, to_apply=%region_1169.27033
  %all-reduce.256 = f32[] all-reduce(%reduce.1137), channel_id=1059, replica_groups=[1,8]<=[8], use_global_device_ids=true, to_apply=%region_1169.27033.clone
  %convert_element_type.3435 = bf16[] convert(%all-reduce.256)
  %add.2614 = bf16[] add(%add.2613, %convert_element_type.3435)
  %dot.1261 = bf16[4096,8]{1,0} dot(%sharding_constraint.1248, %sharding_constraint.1270), lhs_contracting_dims={0,1}, rhs_contracting_dims={0,1}
  %all-reduce.257 = bf16[4096,8]{1,0} all-reduce(%dot.1261), channel_id=1060, replica_groups=[1,8]<=[8], use_global_device_ids=true, to_apply=%add.85.clone
  %dynamic-slice.2351 = bf16[512,8]{1,0} dynamic-slice(%all-reduce.257, %reshape.13763, %constant.1181), dynamic_slice_sizes={512,8}
  %mul.9635 = bf16[512,8]{1,0} multiply(%dynamic-slice.2351, %dynamic-slice.2351)
  %convert_element_type.3436 = f32[512,8]{1,0} convert(%mul.9635)
  %reduce.1138 = f32[] reduce(%convert_element_type.3436, %constant.1360), dimensions={0,1}, to_apply=%region_1170.27043
  %all-reduce.258 = f32[] all-reduce(%reduce.1138), channel_id=1061, replica_groups=[1,8]<=[8], use_global_device_ids=true, to_apply=%region_1170.27043.clone
  %convert_element_type.3437 = bf16[] convert(%all-reduce.258)
  %add.2615 = bf16[] add(%add.2614, %convert_element_type.3437)
  %dot.1262 = bf16[1,4096,14336]{2,1,0} dot(%sharding_constraint.1253, %sharding_constraint.1263), lhs_batch_dims={0}, lhs_contracting_dims={1,2}, rhs_batch_dims={0}, rhs_contracting_dims={1,2}
  %sharding_constraint.2514 = bf16[1,4096,14336]{2,1,0} copy(%dot.1262)
  %mul.9636 = bf16[1,4096,14336]{2,1,0} multiply(%sharding_constraint.2514, %sharding_constraint.2514)
  %convert_element_type.3438 = f32[1,4096,14336]{2,1,0} convert(%mul.9636)
  %reduce.1139 = f32[] reduce(%convert_element_type.3438, %constant.1360), dimensions={0,1,2}, to_apply=%region_1171.27054
  %all-reduce.259 = f32[] all-reduce(%reduce.1139), channel_id=1062, replica_groups=[1,8]<=[8], use_global_device_ids=true, to_apply=%region_1171.27054.clone
  %convert_element_type.3439 = bf16[] convert(%all-reduce.259)
  %add.2616 = bf16[] add(%add.2615, %convert_element_type.3439)
  %dot.1263 = bf16[1,4096,14336]{2,1,0} dot(%sharding_constraint.1253, %sharding_constraint.1260), lhs_batch_dims={0}, lhs_contracting_dims={1,2}, rhs_batch_dims={0}, rhs_contracting_dims={1,2}
  %sharding_constraint.2515 = bf16[1,4096,14336]{2,1,0} copy(%dot.1263)
  %mul.9637 = bf16[1,4096,14336]{2,1,0} multiply(%sharding_constraint.2515, %sharding_constraint.2515)
  %convert_element_type.3440 = f32[1,4096,14336]{2,1,0} convert(%mul.9637)
  %reduce.1140 = f32[] reduce(%convert_element_type.3440, %constant.1360), dimensions={0,1,2}, to_apply=%region_1172.27065
  %all-reduce.260 = f32[] all-reduce(%reduce.1140), channel_id=1063, replica_groups=[1,8]<=[8], use_global_device_ids=true, to_apply=%region_1172.27065.clone
  %convert_element_type.3441 = bf16[] convert(%all-reduce.260)
  %add.2617 = bf16[] add(%add.2616, %convert_element_type.3441)
  %dot.1264 = bf16[1,14336,4096]{2,1,0} dot(%mul.5586, %sharding_constraint.1258), lhs_batch_dims={0}, lhs_contracting_dims={1,2}, rhs_batch_dims={0}, rhs_contracting_dims={1,2}
  %sharding_constraint.2516 = bf16[1,14336,4096]{2,1,0} copy(%dot.1264)
  %mul.9638 = bf16[1,14336,4096]{2,1,0} multiply(%sharding_constraint.2516, %sharding_constraint.2516)
  %convert_element_type.3442 = f32[1,14336,4096]{2,1,0} convert(%mul.9638)
  %reduce.1141 = f32[] reduce(%convert_element_type.3442, %constant.1360), dimensions={0,1,2}, to_apply=%region_1173.27076
  %all-reduce.261 = f32[] all-reduce(%reduce.1141), channel_id=1064, replica_groups=[1,8]<=[8], use_global_device_ids=true, to_apply=%region_1173.27076.clone
  %convert_element_type.3443 = bf16[] convert(%all-reduce.261)
  %add.2618 = bf16[] add(%add.2617, %convert_element_type.3443)
  %mul.9639 = bf16[1,4096,4096]{2,1,0} multiply(%convert_element_type.2249, %sharding_constraint.1271)
  %reduce.1142 = bf16[4096]{0} reduce(%mul.9639, %constant.1190), dimensions={0,1}, to_apply=%region_1174.27084
  %all-reduce.262 = bf16[4096]{0} all-reduce(%reduce.1142), channel_id=1065, replica_groups=[1,8]<=[8], use_global_device_ids=true, to_apply=%region_1174.27084.clone
  %mul.9640 = bf16[4096]{0} multiply(%all-reduce.262, %all-reduce.262)
  %convert_element_type.3444 = f32[4096]{0} convert(%mul.9640)
  %reduce.1143 = f32[] reduce(%convert_element_type.3444, %constant.1360), dimensions={0}, to_apply=%region_1175.27091
  %convert_element_type.3445 = bf16[] convert(%reduce.1143)
  %add.2619 = bf16[] add(%add.2618, %convert_element_type.3445)
  %mul.9641 = bf16[1,4096,4096]{2,1,0} multiply(%convert_element_type.2236, %sharding_constraint.1280)
  %reduce.1144 = bf16[4096]{0} reduce(%mul.9641, %constant.1190), dimensions={0,1}, to_apply=%region_1176.27099
  %all-reduce.263 = bf16[4096]{0} all-reduce(%reduce.1144), channel_id=1066, replica_groups=[1,8]<=[8], use_global_device_ids=true, to_apply=%region_1176.27099.clone
  %mul.9642 = bf16[4096]{0} multiply(%all-reduce.263, %all-reduce.263)
  %convert_element_type.3446 = f32[4096]{0} convert(%mul.9642)
  %reduce.1145 = f32[] reduce(%convert_element_type.3446, %constant.1360), dimensions={0}, to_apply=%region_1177.27106
  %convert_element_type.3447 = bf16[] convert(%reduce.1145)
  %add.2620 = bf16[] add(%add.2619, %convert_element_type.3447)
  %dot.1265 = bf16[8,128,4096]{2,1,0} dot(%concatenate.361, %sharding_constraint.1239), lhs_contracting_dims={0,1}, rhs_contracting_dims={0,1}
  %all-reduce.264 = bf16[8,128,4096]{2,1,0} all-reduce(%dot.1265), channel_id=1067, replica_groups=[1,8]<=[8], use_global_device_ids=true, to_apply=%add.86.clone
  %dynamic-slice.2353 = bf16[8,128,512]{2,1,0} dynamic-slice(%all-reduce.264, %constant.1181, %constant.1181, %reshape.13763), dynamic_slice_sizes={8,128,512}
  %transpose.393 = bf16[512,8,128]{0,2,1} transpose(%dynamic-slice.2353), dimensions={2,0,1}
  %mul.9643 = bf16[512,8,128]{0,2,1} multiply(%transpose.393, %transpose.393)
  %convert_element_type.3448 = f32[512,8,128]{0,2,1} convert(%mul.9643)
  %reduce.1146 = f32[] reduce(%convert_element_type.3448, %constant.1360), dimensions={0,1,2}, to_apply=%region_1178.27117
  %all-reduce.265 = f32[] all-reduce(%reduce.1146), channel_id=1068, replica_groups=[1,8]<=[8], use_global_device_ids=true, to_apply=%region_1178.27117.clone
  %convert_element_type.3449 = bf16[] convert(%all-reduce.265)
  %add.2621 = bf16[] add(%add.2620, %convert_element_type.3449)
  %dot.1266 = bf16[4096,32,128]{2,1,0} dot(%sharding_constraint.1273, %sharding_constraint.1246), lhs_contracting_dims={0,1}, rhs_contracting_dims={0,1}
  %all-reduce.266 = bf16[4096,32,128]{2,1,0} all-reduce(%dot.1266), channel_id=1069, replica_groups=[1,8]<=[8], use_global_device_ids=true, to_apply=%add.87.clone
  %dynamic-slice.2355 = bf16[512,32,128]{2,1,0} dynamic-slice(%all-reduce.266, %reshape.13763, %constant.1181, %constant.1181), dynamic_slice_sizes={512,32,128}
  %transpose.394 = bf16[32,128,512]{1,0,2} transpose(%dynamic-slice.2355), dimensions={1,2,0}
  %mul.9644 = bf16[32,128,512]{1,0,2} multiply(%transpose.394, %transpose.394)
  %convert_element_type.3450 = f32[32,128,512]{1,0,2} convert(%mul.9644)
  %reduce.1147 = f32[] reduce(%convert_element_type.3450, %constant.1360), dimensions={0,1,2}, to_apply=%region_1179.27128
  %all-reduce.267 = f32[] all-reduce(%reduce.1147), channel_id=1070, replica_groups=[1,8]<=[8], use_global_device_ids=true, to_apply=%region_1179.27128.clone
  %convert_element_type.3451 = bf16[] convert(%all-reduce.267)
  %add.2622 = bf16[] add(%add.2621, %convert_element_type.3451)
  %dot.1267 = bf16[32,128,4096]{2,1,0} dot(%concatenate.362, %sharding_constraint.1239), lhs_contracting_dims={0,1}, rhs_contracting_dims={0,1}
  %all-reduce.268 = bf16[32,128,4096]{2,1,0} all-reduce(%dot.1267), channel_id=1071, replica_groups=[1,8]<=[8], use_global_device_ids=true, to_apply=%add.88.clone
  %dynamic-slice.2357 = bf16[32,128,512]{2,1,0} dynamic-slice(%all-reduce.268, %constant.1181, %constant.1181, %reshape.13763), dynamic_slice_sizes={32,128,512}
  %transpose.395 = bf16[512,32,128]{0,2,1} transpose(%dynamic-slice.2357), dimensions={2,0,1}
  %mul.9645 = bf16[512,32,128]{0,2,1} multiply(%transpose.395, %transpose.395)
  %convert_element_type.3452 = f32[512,32,128]{0,2,1} convert(%mul.9645)
  %reduce.1148 = f32[] reduce(%convert_element_type.3452, %constant.1360), dimensions={0,1,2}, to_apply=%region_1180.27139
  %all-reduce.269 = f32[] all-reduce(%reduce.1148), channel_id=1072, replica_groups=[1,8]<=[8], use_global_device_ids=true, to_apply=%region_1180.27139.clone
  %convert_element_type.3453 = bf16[] convert(%all-reduce.269)
  %add.2623 = bf16[] add(%add.2622, %convert_element_type.3453)
  %dot.1268 = bf16[8,128,4096]{2,1,0} dot(%sharding_constraint.1275, %sharding_constraint.1239), lhs_contracting_dims={0,1}, rhs_contracting_dims={0,1}
  %all-reduce.270 = bf16[8,128,4096]{2,1,0} all-reduce(%dot.1268), channel_id=1073, replica_groups=[1,8]<=[8], use_global_device_ids=true, to_apply=%add.89.clone
  %dynamic-slice.2359 = bf16[8,128,512]{2,1,0} dynamic-slice(%all-reduce.270, %constant.1181, %constant.1181, %reshape.13763), dynamic_slice_sizes={8,128,512}
  %transpose.396 = bf16[512,8,128]{0,2,1} transpose(%dynamic-slice.2359), dimensions={2,0,1}
  %mul.9646 = bf16[512,8,128]{0,2,1} multiply(%transpose.396, %transpose.396)
  %convert_element_type.3454 = f32[512,8,128]{0,2,1} convert(%mul.9646)
  %reduce.1149 = f32[] reduce(%convert_element_type.3454, %constant.1360), dimensions={0,1,2}, to_apply=%region_1181.27150
  %all-reduce.271 = f32[] all-reduce(%reduce.1149), channel_id=1074, replica_groups=[1,8]<=[8], use_global_device_ids=true, to_apply=%region_1181.27150.clone
  %convert_element_type.3455 = bf16[] convert(%all-reduce.271)
  %add.2624 = bf16[] add(%add.2623, %convert_element_type.3455)
  %dot.1269 = bf16[4096,8]{1,0} dot(%sharding_constraint.1203, %sharding_constraint.1222), lhs_contracting_dims={0,1}, rhs_contracting_dims={0,1}
  %all-reduce.272 = bf16[4096,8]{1,0} all-reduce(%dot.1269), channel_id=1075, replica_groups=[1,8]<=[8], use_global_device_ids=true, to_apply=%add.90.clone
  %dynamic-slice.2361 = bf16[512,8]{1,0} dynamic-slice(%all-reduce.272, %reshape.13763, %constant.1181), dynamic_slice_sizes={512,8}
  %mul.9647 = bf16[512,8]{1,0} multiply(%dynamic-slice.2361, %dynamic-slice.2361)
  %convert_element_type.3456 = f32[512,8]{1,0} convert(%mul.9647)
  %reduce.1150 = f32[] reduce(%convert_element_type.3456, %constant.1360), dimensions={0,1}, to_apply=%region_1182.27160
  %all-reduce.273 = f32[] all-reduce(%reduce.1150), channel_id=1076, replica_groups=[1,8]<=[8], use_global_device_ids=true, to_apply=%region_1182.27160.clone
  %convert_element_type.3457 = bf16[] convert(%all-reduce.273)
  %add.2625 = bf16[] add(%add.2624, %convert_element_type.3457)
  %dot.1270 = bf16[1,4096,14336]{2,1,0} dot(%sharding_constraint.1208, %sharding_constraint.1218), lhs_batch_dims={0}, lhs_contracting_dims={1,2}, rhs_batch_dims={0}, rhs_contracting_dims={1,2}
  %sharding_constraint.2517 = bf16[1,4096,14336]{2,1,0} copy(%dot.1270)
  %mul.9648 = bf16[1,4096,14336]{2,1,0} multiply(%sharding_constraint.2517, %sharding_constraint.2517)
  %convert_element_type.3458 = f32[1,4096,14336]{2,1,0} convert(%mul.9648)
  %reduce.1151 = f32[] reduce(%convert_element_type.3458, %constant.1360), dimensions={0,1,2}, to_apply=%region_1183.27171
  %all-reduce.274 = f32[] all-reduce(%reduce.1151), channel_id=1077, replica_groups=[1,8]<=[8], use_global_device_ids=true, to_apply=%region_1183.27171.clone
  %convert_element_type.3459 = bf16[] convert(%all-reduce.274)
  %add.2626 = bf16[] add(%add.2625, %convert_element_type.3459)
  %dot.1271 = bf16[1,4096,14336]{2,1,0} dot(%sharding_constraint.1208, %sharding_constraint.1215), lhs_batch_dims={0}, lhs_contracting_dims={1,2}, rhs_batch_dims={0}, rhs_contracting_dims={1,2}
  %sharding_constraint.2518 = bf16[1,4096,14336]{2,1,0} copy(%dot.1271)
  %mul.9649 = bf16[1,4096,14336]{2,1,0} multiply(%sharding_constraint.2518, %sharding_constraint.2518)
  %convert_element_type.3460 = f32[1,4096,14336]{2,1,0} convert(%mul.9649)
  %reduce.1152 = f32[] reduce(%convert_element_type.3460, %constant.1360), dimensions={0,1,2}, to_apply=%region_1184.27182
  %all-reduce.275 = f32[] all-reduce(%reduce.1152), channel_id=1078, replica_groups=[1,8]<=[8], use_global_device_ids=true, to_apply=%region_1184.27182.clone
  %convert_element_type.3461 = bf16[] convert(%all-reduce.275)
  %add.2627 = bf16[] add(%add.2626, %convert_element_type.3461)
  %dot.1272 = bf16[1,14336,4096]{2,1,0} dot(%mul.5409, %sharding_constraint.1213), lhs_batch_dims={0}, lhs_contracting_dims={1,2}, rhs_batch_dims={0}, rhs_contracting_dims={1,2}
  %sharding_constraint.2519 = bf16[1,14336,4096]{2,1,0} copy(%dot.1272)
  %mul.9650 = bf16[1,14336,4096]{2,1,0} multiply(%sharding_constraint.2519, %sharding_constraint.2519)
  %convert_element_type.3462 = f32[1,14336,4096]{2,1,0} convert(%mul.9650)
  %reduce.1153 = f32[] reduce(%convert_element_type.3462, %constant.1360), dimensions={0,1,2}, to_apply=%region_1185.27193
  %all-reduce.276 = f32[] all-reduce(%reduce.1153), channel_id=1079, replica_groups=[1,8]<=[8], use_global_device_ids=true, to_apply=%region_1185.27193.clone
  %convert_element_type.3463 = bf16[] convert(%all-reduce.276)
  %add.2628 = bf16[] add(%add.2627, %convert_element_type.3463)
  %mul.9651 = bf16[1,4096,4096]{2,1,0} multiply(%convert_element_type.2216, %sharding_constraint.1224)
  %reduce.1154 = bf16[4096]{0} reduce(%mul.9651, %constant.1190), dimensions={0,1}, to_apply=%region_1186.27201
  %all-reduce.277 = bf16[4096]{0} all-reduce(%reduce.1154), channel_id=1080, replica_groups=[1,8]<=[8], use_global_device_ids=true, to_apply=%region_1186.27201.clone
  %mul.9652 = bf16[4096]{0} multiply(%all-reduce.277, %all-reduce.277)
  %convert_element_type.3464 = f32[4096]{0} convert(%mul.9652)
  %reduce.1155 = f32[] reduce(%convert_element_type.3464, %constant.1360), dimensions={0}, to_apply=%region_1187.27208
  %convert_element_type.3465 = bf16[] convert(%reduce.1155)
  %add.2629 = bf16[] add(%add.2628, %convert_element_type.3465)
  %mul.9653 = bf16[1,4096,4096]{2,1,0} multiply(%convert_element_type.2201, %sharding_constraint.1234)
  %reduce.1156 = bf16[4096]{0} reduce(%mul.9653, %constant.1190), dimensions={0,1}, to_apply=%region_1188.27216
  %all-reduce.278 = bf16[4096]{0} all-reduce(%reduce.1156), channel_id=1081, replica_groups=[1,8]<=[8], use_global_device_ids=true, to_apply=%region_1188.27216.clone
  %mul.9654 = bf16[4096]{0} multiply(%all-reduce.278, %all-reduce.278)
  %convert_element_type.3466 = f32[4096]{0} convert(%mul.9654)
  %reduce.1157 = f32[] reduce(%convert_element_type.3466, %constant.1360), dimensions={0}, to_apply=%region_1189.27223
  %convert_element_type.3467 = bf16[] convert(%reduce.1157)
  %add.2631 = bf16[] add(%add.2629, %convert_element_type.3467)
  %dot.1273 = bf16[8,128,4096]{2,1,0} dot(%concatenate.348, %sharding_constraint.1196), lhs_contracting_dims={0,1}, rhs_contracting_dims={0,1}
  %all-reduce.279 = bf16[8,128,4096]{2,1,0} all-reduce(%dot.1273), channel_id=1082, replica_groups=[1,8]<=[8], use_global_device_ids=true, to_apply=%add.91.clone
  %dynamic-slice.2363 = bf16[8,128,512]{2,1,0} dynamic-slice(%all-reduce.279, %constant.1181, %constant.1181, %reshape.13763), dynamic_slice_sizes={8,128,512}
  %transpose.397 = bf16[512,8,128]{0,2,1} transpose(%dynamic-slice.2363), dimensions={2,0,1}
  %mul.9655 = bf16[512,8,128]{0,2,1} multiply(%transpose.397, %transpose.397)
  %convert_element_type.3468 = f32[512,8,128]{0,2,1} convert(%mul.9655)
  %reduce.1158 = f32[] reduce(%convert_element_type.3468, %constant.1360), dimensions={0,1,2}, to_apply=%region_1190.27234
  %all-reduce.280 = f32[] all-reduce(%reduce.1158), channel_id=1083, replica_groups=[1,8]<=[8], use_global_device_ids=true, to_apply=%region_1190.27234.clone
  %convert_element_type.3471 = bf16[] convert(%all-reduce.280)
  %add.2632 = bf16[] add(%add.2631, %convert_element_type.3471)
  %dot.1274 = bf16[4096,32,128]{2,1,0} dot(%sharding_constraint.1227, %sharding_constraint.1201), lhs_contracting_dims={0,1}, rhs_contracting_dims={0,1}
  %all-reduce.281 = bf16[4096,32,128]{2,1,0} all-reduce(%dot.1274), channel_id=1084, replica_groups=[1,8]<=[8], use_global_device_ids=true, to_apply=%add.92.clone
  %dynamic-slice.2365 = bf16[512,32,128]{2,1,0} dynamic-slice(%all-reduce.281, %reshape.13763, %constant.1181, %constant.1181), dynamic_slice_sizes={512,32,128}
  %transpose.398 = bf16[32,128,512]{1,0,2} transpose(%dynamic-slice.2365), dimensions={1,2,0}
  %mul.9658 = bf16[32,128,512]{1,0,2} multiply(%transpose.398, %transpose.398)
  %convert_element_type.3472 = f32[32,128,512]{1,0,2} convert(%mul.9658)
  %reduce.1159 = f32[] reduce(%convert_element_type.3472, %constant.1360), dimensions={0,1,2}, to_apply=%region_1191.27245
  %all-reduce.282 = f32[] all-reduce(%reduce.1159), channel_id=1085, replica_groups=[1,8]<=[8], use_global_device_ids=true, to_apply=%region_1191.27245.clone
  %convert_element_type.3473 = bf16[] convert(%all-reduce.282)
  %add.2633 = bf16[] add(%add.2632, %convert_element_type.3473)
  %dot.1275 = bf16[32,128,4096]{2,1,0} dot(%concatenate.349, %sharding_constraint.1196), lhs_contracting_dims={0,1}, rhs_contracting_dims={0,1}
  %all-reduce.283 = bf16[32,128,4096]{2,1,0} all-reduce(%dot.1275), channel_id=1086, replica_groups=[1,8]<=[8], use_global_device_ids=true, to_apply=%add.93.clone
  %dynamic-slice.2367 = bf16[32,128,512]{2,1,0} dynamic-slice(%all-reduce.283, %constant.1181, %constant.1181, %reshape.13763), dynamic_slice_sizes={32,128,512}
  %transpose.399 = bf16[512,32,128]{0,2,1} transpose(%dynamic-slice.2367), dimensions={2,0,1}
  %mul.9661 = bf16[512,32,128]{0,2,1} multiply(%transpose.399, %transpose.399)
  %convert_element_type.3475 = f32[512,32,128]{0,2,1} convert(%mul.9661)
  %reduce.1160 = f32[] reduce(%convert_element_type.3475, %constant.1360), dimensions={0,1,2}, to_apply=%region_1192.27256
  %all-reduce.284 = f32[] all-reduce(%reduce.1160), channel_id=1087, replica_groups=[1,8]<=[8], use_global_device_ids=true, to_apply=%region_1192.27256.clone
  %convert_element_type.3476 = bf16[] convert(%all-reduce.284)
  %add.2634 = bf16[] add(%add.2633, %convert_element_type.3476)
  %dot.1276 = bf16[8,128,4096]{2,1,0} dot(%sharding_constraint.1229, %sharding_constraint.1196), lhs_contracting_dims={0,1}, rhs_contracting_dims={0,1}
  %all-reduce.285 = bf16[8,128,4096]{2,1,0} all-reduce(%dot.1276), channel_id=1088, replica_groups=[1,8]<=[8], use_global_device_ids=true, to_apply=%add.94.clone
  %dynamic-slice.2369 = bf16[8,128,512]{2,1,0} dynamic-slice(%all-reduce.285, %constant.1181, %constant.1181, %reshape.13763), dynamic_slice_sizes={8,128,512}
  %transpose.400 = bf16[512,8,128]{0,2,1} transpose(%dynamic-slice.2369), dimensions={2,0,1}
  %mul.9662 = bf16[512,8,128]{0,2,1} multiply(%transpose.400, %transpose.400)
  %convert_element_type.3477 = f32[512,8,128]{0,2,1} convert(%mul.9662)
  %reduce.1161 = f32[] reduce(%convert_element_type.3477, %constant.1360), dimensions={0,1,2}, to_apply=%region_1193.27267
  %all-reduce.286 = f32[] all-reduce(%reduce.1161), channel_id=1089, replica_groups=[1,8]<=[8], use_global_device_ids=true, to_apply=%region_1193.27267.clone
  %convert_element_type.3478 = bf16[] convert(%all-reduce.286)
  %add.2635 = bf16[] add(%add.2634, %convert_element_type.3478)
  %dot.1277 = bf16[4096,8]{1,0} dot(%sharding_constraint.1155, %sharding_constraint.1177), lhs_contracting_dims={0,1}, rhs_contracting_dims={0,1}
  %all-reduce.287 = bf16[4096,8]{1,0} all-reduce(%dot.1277), channel_id=1090, replica_groups=[1,8]<=[8], use_global_device_ids=true, to_apply=%add.95.clone
  %dynamic-slice.2371 = bf16[512,8]{1,0} dynamic-slice(%all-reduce.287, %reshape.13763, %constant.1181), dynamic_slice_sizes={512,8}
  %mul.9663 = bf16[512,8]{1,0} multiply(%dynamic-slice.2371, %dynamic-slice.2371)
  %convert_element_type.3479 = f32[512,8]{1,0} convert(%mul.9663)
  %reduce.1162 = f32[] reduce(%convert_element_type.3479, %constant.1360), dimensions={0,1}, to_apply=%region_1194.27277
  %all-reduce.288 = f32[] all-reduce(%reduce.1162), channel_id=1091, replica_groups=[1,8]<=[8], use_global_device_ids=true, to_apply=%region_1194.27277.clone
  %convert_element_type.3480 = bf16[] convert(%all-reduce.288)
  %add.2636 = bf16[] add(%add.2635, %convert_element_type.3480)
  %dot.1278 = bf16[1,4096,14336]{2,1,0} dot(%sharding_constraint.1162, %sharding_constraint.1172), lhs_batch_dims={0}, lhs_contracting_dims={1,2}, rhs_batch_dims={0}, rhs_contracting_dims={1,2}
  %sharding_constraint.2520 = bf16[1,4096,14336]{2,1,0} copy(%dot.1278)
  %mul.9664 = bf16[1,4096,14336]{2,1,0} multiply(%sharding_constraint.2520, %sharding_constraint.2520)
  %convert_element_type.3481 = f32[1,4096,14336]{2,1,0} convert(%mul.9664)
  %reduce.1163 = f32[] reduce(%convert_element_type.3481, %constant.1360), dimensions={0,1,2}, to_apply=%region_1195.27288
  %all-reduce.289 = f32[] all-reduce(%reduce.1163), channel_id=1092, replica_groups=[1,8]<=[8], use_global_device_ids=true, to_apply=%region_1195.27288.clone
  %convert_element_type.3483 = bf16[] convert(%all-reduce.289)
  %add.2637 = bf16[] add(%add.2636, %convert_element_type.3483)
  %dot.1279 = bf16[1,4096,14336]{2,1,0} dot(%sharding_constraint.1162, %sharding_constraint.1169), lhs_batch_dims={0}, lhs_contracting_dims={1,2}, rhs_batch_dims={0}, rhs_contracting_dims={1,2}
  %sharding_constraint.2521 = bf16[1,4096,14336]{2,1,0} copy(%dot.1279)
  %mul.9665 = bf16[1,4096,14336]{2,1,0} multiply(%sharding_constraint.2521, %sharding_constraint.2521)
  %convert_element_type.3484 = f32[1,4096,14336]{2,1,0} convert(%mul.9665)
  %reduce.1164 = f32[] reduce(%convert_element_type.3484, %constant.1360), dimensions={0,1,2}, to_apply=%region_1196.27299
  %all-reduce.290 = f32[] all-reduce(%reduce.1164), channel_id=1093, replica_groups=[1,8]<=[8], use_global_device_ids=true, to_apply=%region_1196.27299.clone
  %convert_element_type.3485 = bf16[] convert(%all-reduce.290)
  %add.2638 = bf16[] add(%add.2637, %convert_element_type.3485)
  %dot.1280 = bf16[1,14336,4096]{2,1,0} dot(%mul.5291, %sharding_constraint.1167), lhs_batch_dims={0}, lhs_contracting_dims={1,2}, rhs_batch_dims={0}, rhs_contracting_dims={1,2}
  %sharding_constraint.2522 = bf16[1,14336,4096]{2,1,0} copy(%dot.1280)
  %mul.9666 = bf16[1,14336,4096]{2,1,0} multiply(%sharding_constraint.2522, %sharding_constraint.2522)
  %convert_element_type.3486 = f32[1,14336,4096]{2,1,0} convert(%mul.9666)
  %reduce.1165 = f32[] reduce(%convert_element_type.3486, %constant.1360), dimensions={0,1,2}, to_apply=%region_1197.27310
  %all-reduce.291 = f32[] all-reduce(%reduce.1165), channel_id=1094, replica_groups=[1,8]<=[8], use_global_device_ids=true, to_apply=%region_1197.27310.clone
  %convert_element_type.3488 = bf16[] convert(%all-reduce.291)
  %add.2639 = bf16[] add(%add.2638, %convert_element_type.3488)
  %mul.9667 = bf16[1,4096,4096]{2,1,0} multiply(%convert_element_type.2183, %sharding_constraint.1179)
  %reduce.1166 = bf16[4096]{0} reduce(%mul.9667, %constant.1190), dimensions={0,1}, to_apply=%region_1198.27318
  %all-reduce.292 = bf16[4096]{0} all-reduce(%reduce.1166), channel_id=1095, replica_groups=[1,8]<=[8], use_global_device_ids=true, to_apply=%region_1198.27318.clone
  %mul.9668 = bf16[4096]{0} multiply(%all-reduce.292, %all-reduce.292)
  %convert_element_type.3489 = f32[4096]{0} convert(%mul.9668)
  %reduce.1167 = f32[] reduce(%convert_element_type.3489, %constant.1360), dimensions={0}, to_apply=%region_1199.27325
  %convert_element_type.3490 = bf16[] convert(%reduce.1167)
  %add.2640 = bf16[] add(%add.2639, %convert_element_type.3490)
  %mul.9669 = bf16[1,4096,4096]{2,1,0} multiply(%convert_element_type.2166, %sharding_constraint.1191)
  %reduce.1168 = bf16[4096]{0} reduce(%mul.9669, %constant.1190), dimensions={0,1}, to_apply=%region_1200.27333
  %all-reduce.293 = bf16[4096]{0} all-reduce(%reduce.1168), channel_id=1096, replica_groups=[1,8]<=[8], use_global_device_ids=true, to_apply=%region_1200.27333.clone
  %mul.9670 = bf16[4096]{0} multiply(%all-reduce.293, %all-reduce.293)
  %convert_element_type.3491 = f32[4096]{0} convert(%mul.9670)
  %reduce.1169 = f32[] reduce(%convert_element_type.3491, %constant.1360), dimensions={0}, to_apply=%region_1201.27340
  %convert_element_type.3492 = bf16[] convert(%reduce.1169)
  %add.2641 = bf16[] add(%add.2640, %convert_element_type.3492)
  %dot.1281 = bf16[8,128,4096]{2,1,0} dot(%concatenate.335, %sharding_constraint.1148), lhs_contracting_dims={0,1}, rhs_contracting_dims={0,1}
  %all-reduce.294 = bf16[8,128,4096]{2,1,0} all-reduce(%dot.1281), channel_id=1097, replica_groups=[1,8]<=[8], use_global_device_ids=true, to_apply=%add.96.clone
  %dynamic-slice.2373 = bf16[8,128,512]{2,1,0} dynamic-slice(%all-reduce.294, %constant.1181, %constant.1181, %reshape.13763), dynamic_slice_sizes={8,128,512}
  %transpose.401 = bf16[512,8,128]{0,2,1} transpose(%dynamic-slice.2373), dimensions={2,0,1}
  %mul.9671 = bf16[512,8,128]{0,2,1} multiply(%transpose.401, %transpose.401)
  %convert_element_type.3493 = f32[512,8,128]{0,2,1} convert(%mul.9671)
  %reduce.1170 = f32[] reduce(%convert_element_type.3493, %constant.1360), dimensions={0,1,2}, to_apply=%region_1202.27351
  %all-reduce.295 = f32[] all-reduce(%reduce.1170), channel_id=1098, replica_groups=[1,8]<=[8], use_global_device_ids=true, to_apply=%region_1202.27351.clone
  %convert_element_type.3494 = bf16[] convert(%all-reduce.295)
  %add.2642 = bf16[] add(%add.2641, %convert_element_type.3494)
  %dot.1282 = bf16[4096,32,128]{2,1,0} dot(%sharding_constraint.1184, %sharding_constraint.1153), lhs_contracting_dims={0,1}, rhs_contracting_dims={0,1}
  %all-reduce.296 = bf16[4096,32,128]{2,1,0} all-reduce(%dot.1282), channel_id=1099, replica_groups=[1,8]<=[8], use_global_device_ids=true, to_apply=%add.97.clone
  %dynamic-slice.2375 = bf16[512,32,128]{2,1,0} dynamic-slice(%all-reduce.296, %reshape.13763, %constant.1181, %constant.1181), dynamic_slice_sizes={512,32,128}
  %transpose.402 = bf16[32,128,512]{1,0,2} transpose(%dynamic-slice.2375), dimensions={1,2,0}
  %mul.9672 = bf16[32,128,512]{1,0,2} multiply(%transpose.402, %transpose.402)
  %convert_element_type.3495 = f32[32,128,512]{1,0,2} convert(%mul.9672)
  %reduce.1171 = f32[] reduce(%convert_element_type.3495, %constant.1360), dimensions={0,1,2}, to_apply=%region_1203.27362
  %all-reduce.297 = f32[] all-reduce(%reduce.1171), channel_id=1100, replica_groups=[1,8]<=[8], use_global_device_ids=true, to_apply=%region_1203.27362.clone
  %convert_element_type.3496 = bf16[] convert(%all-reduce.297)
  %add.2643 = bf16[] add(%add.2642, %convert_element_type.3496)
  %dot.1283 = bf16[32,128,4096]{2,1,0} dot(%concatenate.336, %sharding_constraint.1148), lhs_contracting_dims={0,1}, rhs_contracting_dims={0,1}
  %all-reduce.298 = bf16[32,128,4096]{2,1,0} all-reduce(%dot.1283), channel_id=1101, replica_groups=[1,8]<=[8], use_global_device_ids=true, to_apply=%add.98.clone
  %dynamic-slice.2377 = bf16[32,128,512]{2,1,0} dynamic-slice(%all-reduce.298, %constant.1181, %constant.1181, %reshape.13763), dynamic_slice_sizes={32,128,512}
  %transpose.403 = bf16[512,32,128]{0,2,1} transpose(%dynamic-slice.2377), dimensions={2,0,1}
  %mul.9673 = bf16[512,32,128]{0,2,1} multiply(%transpose.403, %transpose.403)
  %convert_element_type.3497 = f32[512,32,128]{0,2,1} convert(%mul.9673)
  %reduce.1172 = f32[] reduce(%convert_element_type.3497, %constant.1360), dimensions={0,1,2}, to_apply=%region_1204.27373
  %all-reduce.299 = f32[] all-reduce(%reduce.1172), channel_id=1102, replica_groups=[1,8]<=[8], use_global_device_ids=true, to_apply=%region_1204.27373.clone
  %convert_element_type.3499 = bf16[] convert(%all-reduce.299)
  %add.2644 = bf16[] add(%add.2643, %convert_element_type.3499)
  %dot.1284 = bf16[8,128,4096]{2,1,0} dot(%sharding_constraint.1186, %sharding_constraint.1148), lhs_contracting_dims={0,1}, rhs_contracting_dims={0,1}
  %all-reduce.300 = bf16[8,128,4096]{2,1,0} all-reduce(%dot.1284), channel_id=1103, replica_groups=[1,8]<=[8], use_global_device_ids=true, to_apply=%add.99.clone
  %dynamic-slice.2379 = bf16[8,128,512]{2,1,0} dynamic-slice(%all-reduce.300, %constant.1181, %constant.1181, %reshape.13763), dynamic_slice_sizes={8,128,512}
  %transpose.404 = bf16[512,8,128]{0,2,1} transpose(%dynamic-slice.2379), dimensions={2,0,1}
  %mul.9674 = bf16[512,8,128]{0,2,1} multiply(%transpose.404, %transpose.404)
  %convert_element_type.3500 = f32[512,8,128]{0,2,1} convert(%mul.9674)
  %reduce.1173 = f32[] reduce(%convert_element_type.3500, %constant.1360), dimensions={0,1,2}, to_apply=%region_1205.27384
  %all-reduce.301 = f32[] all-reduce(%reduce.1173), channel_id=1104, replica_groups=[1,8]<=[8], use_global_device_ids=true, to_apply=%region_1205.27384.clone
  %convert_element_type.3502 = bf16[] convert(%all-reduce.301)
  %add.2646 = bf16[] add(%add.2644, %convert_element_type.3502)
  %dot.1285 = bf16[4096,8]{1,0} dot(%sharding_constraint.1112, %sharding_constraint.1131), lhs_contracting_dims={0,1}, rhs_contracting_dims={0,1}
  %all-reduce.302 = bf16[4096,8]{1,0} all-reduce(%dot.1285), channel_id=1105, replica_groups=[1,8]<=[8], use_global_device_ids=true, to_apply=%add.100.clone
  %dynamic-slice.2381 = bf16[512,8]{1,0} dynamic-slice(%all-reduce.302, %reshape.13763, %constant.1181), dynamic_slice_sizes={512,8}
  %mul.9675 = bf16[512,8]{1,0} multiply(%dynamic-slice.2381, %dynamic-slice.2381)
  %convert_element_type.3503 = f32[512,8]{1,0} convert(%mul.9675)
  %reduce.1174 = f32[] reduce(%convert_element_type.3503, %constant.1360), dimensions={0,1}, to_apply=%region_1206.27394
  %all-reduce.303 = f32[] all-reduce(%reduce.1174), channel_id=1106, replica_groups=[1,8]<=[8], use_global_device_ids=true, to_apply=%region_1206.27394.clone
  %convert_element_type.3504 = bf16[] convert(%all-reduce.303)
  %add.2647 = bf16[] add(%add.2646, %convert_element_type.3504)
  %dot.1286 = bf16[1,4096,14336]{2,1,0} dot(%sharding_constraint.1117, %sharding_constraint.1127), lhs_batch_dims={0}, lhs_contracting_dims={1,2}, rhs_batch_dims={0}, rhs_contracting_dims={1,2}
  %sharding_constraint.2523 = bf16[1,4096,14336]{2,1,0} copy(%dot.1286)
  %mul.9676 = bf16[1,4096,14336]{2,1,0} multiply(%sharding_constraint.2523, %sharding_constraint.2523)
  %convert_element_type.3505 = f32[1,4096,14336]{2,1,0} convert(%mul.9676)
  %reduce.1175 = f32[] reduce(%convert_element_type.3505, %constant.1360), dimensions={0,1,2}, to_apply=%region_1207.27405
  %all-reduce.304 = f32[] all-reduce(%reduce.1175), channel_id=1107, replica_groups=[1,8]<=[8], use_global_device_ids=true, to_apply=%region_1207.27405.clone
  %convert_element_type.3506 = bf16[] convert(%all-reduce.304)
  %add.2650 = bf16[] add(%add.2647, %convert_element_type.3506)
  %dot.1287 = bf16[1,4096,14336]{2,1,0} dot(%sharding_constraint.1117, %sharding_constraint.1124), lhs_batch_dims={0}, lhs_contracting_dims={1,2}, rhs_batch_dims={0}, rhs_contracting_dims={1,2}
  %sharding_constraint.2526 = bf16[1,4096,14336]{2,1,0} copy(%dot.1287)
  %mul.9677 = bf16[1,4096,14336]{2,1,0} multiply(%sharding_constraint.2526, %sharding_constraint.2526)
  %convert_element_type.3507 = f32[1,4096,14336]{2,1,0} convert(%mul.9677)
  %reduce.1176 = f32[] reduce(%convert_element_type.3507, %constant.1360), dimensions={0,1,2}, to_apply=%region_1208.27416
  %all-reduce.305 = f32[] all-reduce(%reduce.1176), channel_id=1108, replica_groups=[1,8]<=[8], use_global_device_ids=true, to_apply=%region_1208.27416.clone
  %convert_element_type.3508 = bf16[] convert(%all-reduce.305)
  %add.2652 = bf16[] add(%add.2650, %convert_element_type.3508)
  %dot.1288 = bf16[1,14336,4096]{2,1,0} dot(%mul.5116, %sharding_constraint.1122), lhs_batch_dims={0}, lhs_contracting_dims={1,2}, rhs_batch_dims={0}, rhs_contracting_dims={1,2}
  %sharding_constraint.2527 = bf16[1,14336,4096]{2,1,0} copy(%dot.1288)
  %mul.9679 = bf16[1,14336,4096]{2,1,0} multiply(%sharding_constraint.2527, %sharding_constraint.2527)
  %convert_element_type.3509 = f32[1,14336,4096]{2,1,0} convert(%mul.9679)
  %reduce.1177 = f32[] reduce(%convert_element_type.3509, %constant.1360), dimensions={0,1,2}, to_apply=%region_1209.27427
  %all-reduce.306 = f32[] all-reduce(%reduce.1177), channel_id=1109, replica_groups=[1,8]<=[8], use_global_device_ids=true, to_apply=%region_1209.27427.clone
  %convert_element_type.3510 = bf16[] convert(%all-reduce.306)
  %add.2653 = bf16[] add(%add.2652, %convert_element_type.3510)
  %mul.9680 = bf16[1,4096,4096]{2,1,0} multiply(%convert_element_type.2147, %sharding_constraint.1132)
  %reduce.1178 = bf16[4096]{0} reduce(%mul.9680, %constant.1190), dimensions={0,1}, to_apply=%region_1210.27435
  %all-reduce.307 = bf16[4096]{0} all-reduce(%reduce.1178), channel_id=1110, replica_groups=[1,8]<=[8], use_global_device_ids=true, to_apply=%region_1210.27435.clone
  %mul.9681 = bf16[4096]{0} multiply(%all-reduce.307, %all-reduce.307)
  %convert_element_type.3511 = f32[4096]{0} convert(%mul.9681)
  %reduce.1179 = f32[] reduce(%convert_element_type.3511, %constant.1360), dimensions={0}, to_apply=%region_1211.27442
  %convert_element_type.3512 = bf16[] convert(%reduce.1179)
  %add.2654 = bf16[] add(%add.2653, %convert_element_type.3512)
  %mul.9682 = bf16[1,4096,4096]{2,1,0} multiply(%convert_element_type.2133, %sharding_constraint.1141)
  %reduce.1180 = bf16[4096]{0} reduce(%mul.9682, %constant.1190), dimensions={0,1}, to_apply=%region_1212.27450
  %all-reduce.308 = bf16[4096]{0} all-reduce(%reduce.1180), channel_id=1111, replica_groups=[1,8]<=[8], use_global_device_ids=true, to_apply=%region_1212.27450.clone
  %mul.9683 = bf16[4096]{0} multiply(%all-reduce.308, %all-reduce.308)
  %convert_element_type.3513 = f32[4096]{0} convert(%mul.9683)
  %reduce.1181 = f32[] reduce(%convert_element_type.3513, %constant.1360), dimensions={0}, to_apply=%region_1213.27457
  %convert_element_type.3514 = bf16[] convert(%reduce.1181)
  %add.2655 = bf16[] add(%add.2654, %convert_element_type.3514)
  %dot.1289 = bf16[8,128,4096]{2,1,0} dot(%concatenate.322, %sharding_constraint.1103), lhs_contracting_dims={0,1}, rhs_contracting_dims={0,1}
  %all-reduce.309 = bf16[8,128,4096]{2,1,0} all-reduce(%dot.1289), channel_id=1112, replica_groups=[1,8]<=[8], use_global_device_ids=true, to_apply=%add.101.clone
  %dynamic-slice.2383 = bf16[8,128,512]{2,1,0} dynamic-slice(%all-reduce.309, %constant.1181, %constant.1181, %reshape.13763), dynamic_slice_sizes={8,128,512}
  %transpose.405 = bf16[512,8,128]{0,2,1} transpose(%dynamic-slice.2383), dimensions={2,0,1}
  %mul.9684 = bf16[512,8,128]{0,2,1} multiply(%transpose.405, %transpose.405)
  %convert_element_type.3517 = f32[512,8,128]{0,2,1} convert(%mul.9684)
  %reduce.1182 = f32[] reduce(%convert_element_type.3517, %constant.1360), dimensions={0,1,2}, to_apply=%region_1214.27468
  %all-reduce.310 = f32[] all-reduce(%reduce.1182), channel_id=1113, replica_groups=[1,8]<=[8], use_global_device_ids=true, to_apply=%region_1214.27468.clone
  %convert_element_type.3518 = bf16[] convert(%all-reduce.310)
  %add.2656 = bf16[] add(%add.2655, %convert_element_type.3518)
  %dot.1290 = bf16[4096,32,128]{2,1,0} dot(%sharding_constraint.1134, %sharding_constraint.1110), lhs_contracting_dims={0,1}, rhs_contracting_dims={0,1}
  %all-reduce.311 = bf16[4096,32,128]{2,1,0} all-reduce(%dot.1290), channel_id=1114, replica_groups=[1,8]<=[8], use_global_device_ids=true, to_apply=%add.102.clone
  %dynamic-slice.2385 = bf16[512,32,128]{2,1,0} dynamic-slice(%all-reduce.311, %reshape.13763, %constant.1181, %constant.1181), dynamic_slice_sizes={512,32,128}
  %transpose.406 = bf16[32,128,512]{1,0,2} transpose(%dynamic-slice.2385), dimensions={1,2,0}
  %mul.9687 = bf16[32,128,512]{1,0,2} multiply(%transpose.406, %transpose.406)
  %convert_element_type.3519 = f32[32,128,512]{1,0,2} convert(%mul.9687)
  %reduce.1183 = f32[] reduce(%convert_element_type.3519, %constant.1360), dimensions={0,1,2}, to_apply=%region_1215.27479
  %all-reduce.312 = f32[] all-reduce(%reduce.1183), channel_id=1115, replica_groups=[1,8]<=[8], use_global_device_ids=true, to_apply=%region_1215.27479.clone
  %convert_element_type.3520 = bf16[] convert(%all-reduce.312)
  %add.2657 = bf16[] add(%add.2656, %convert_element_type.3520)
  %dot.1291 = bf16[32,128,4096]{2,1,0} dot(%concatenate.323, %sharding_constraint.1103), lhs_contracting_dims={0,1}, rhs_contracting_dims={0,1}
  %all-reduce.313 = bf16[32,128,4096]{2,1,0} all-reduce(%dot.1291), channel_id=1116, replica_groups=[1,8]<=[8], use_global_device_ids=true, to_apply=%add.103.clone
  %dynamic-slice.2387 = bf16[32,128,512]{2,1,0} dynamic-slice(%all-reduce.313, %constant.1181, %constant.1181, %reshape.13763), dynamic_slice_sizes={32,128,512}
  %transpose.407 = bf16[512,32,128]{0,2,1} transpose(%dynamic-slice.2387), dimensions={2,0,1}
  %mul.9688 = bf16[512,32,128]{0,2,1} multiply(%transpose.407, %transpose.407)
  %convert_element_type.3521 = f32[512,32,128]{0,2,1} convert(%mul.9688)
  %reduce.1184 = f32[] reduce(%convert_element_type.3521, %constant.1360), dimensions={0,1,2}, to_apply=%region_1216.27490
  %all-reduce.314 = f32[] all-reduce(%reduce.1184), channel_id=1117, replica_groups=[1,8]<=[8], use_global_device_ids=true, to_apply=%region_1216.27490.clone
  %convert_element_type.3522 = bf16[] convert(%all-reduce.314)
  %add.2658 = bf16[] add(%add.2657, %convert_element_type.3522)
  %dot.1292 = bf16[8,128,4096]{2,1,0} dot(%sharding_constraint.1136, %sharding_constraint.1103), lhs_contracting_dims={0,1}, rhs_contracting_dims={0,1}
  %all-reduce.315 = bf16[8,128,4096]{2,1,0} all-reduce(%dot.1292), channel_id=1118, replica_groups=[1,8]<=[8], use_global_device_ids=true, to_apply=%add.104.clone
  %dynamic-slice.2389 = bf16[8,128,512]{2,1,0} dynamic-slice(%all-reduce.315, %constant.1181, %constant.1181, %reshape.13763), dynamic_slice_sizes={8,128,512}
  %transpose.408 = bf16[512,8,128]{0,2,1} transpose(%dynamic-slice.2389), dimensions={2,0,1}
  %mul.9689 = bf16[512,8,128]{0,2,1} multiply(%transpose.408, %transpose.408)
  %convert_element_type.3523 = f32[512,8,128]{0,2,1} convert(%mul.9689)
  %reduce.1185 = f32[] reduce(%convert_element_type.3523, %constant.1360), dimensions={0,1,2}, to_apply=%region_1217.27501
  %all-reduce.316 = f32[] all-reduce(%reduce.1185), channel_id=1119, replica_groups=[1,8]<=[8], use_global_device_ids=true, to_apply=%region_1217.27501.clone
  %convert_element_type.3524 = bf16[] convert(%all-reduce.316)
  %add.2659 = bf16[] add(%add.2658, %convert_element_type.3524)
  %dot.1293 = bf16[4096,8]{1,0} dot(%sharding_constraint.1067, %sharding_constraint.1088), lhs_contracting_dims={0,1}, rhs_contracting_dims={0,1}
  %all-reduce.317 = bf16[4096,8]{1,0} all-reduce(%dot.1293), channel_id=1120, replica_groups=[1,8]<=[8], use_global_device_ids=true, to_apply=%add.105.clone
  %dynamic-slice.2391 = bf16[512,8]{1,0} dynamic-slice(%all-reduce.317, %reshape.13763, %constant.1181), dynamic_slice_sizes={512,8}
  %mul.9690 = bf16[512,8]{1,0} multiply(%dynamic-slice.2391, %dynamic-slice.2391)
  %convert_element_type.3525 = f32[512,8]{1,0} convert(%mul.9690)
  %reduce.1186 = f32[] reduce(%convert_element_type.3525, %constant.1360), dimensions={0,1}, to_apply=%region_1218.27511
  %all-reduce.318 = f32[] all-reduce(%reduce.1186), channel_id=1121, replica_groups=[1,8]<=[8], use_global_device_ids=true, to_apply=%region_1218.27511.clone
  %convert_element_type.3526 = bf16[] convert(%all-reduce.318)
  %add.2660 = bf16[] add(%add.2659, %convert_element_type.3526)
  %dot.1294 = bf16[1,4096,14336]{2,1,0} dot(%sharding_constraint.1072, %sharding_constraint.1084), lhs_batch_dims={0}, lhs_contracting_dims={1,2}, rhs_batch_dims={0}, rhs_contracting_dims={1,2}
  %sharding_constraint.2528 = bf16[1,4096,14336]{2,1,0} copy(%dot.1294)
  %mul.9691 = bf16[1,4096,14336]{2,1,0} multiply(%sharding_constraint.2528, %sharding_constraint.2528)
  %convert_element_type.3527 = f32[1,4096,14336]{2,1,0} convert(%mul.9691)
  %reduce.1187 = f32[] reduce(%convert_element_type.3527, %constant.1360), dimensions={0,1,2}, to_apply=%region_1219.27522
  %all-reduce.319 = f32[] all-reduce(%reduce.1187), channel_id=1122, replica_groups=[1,8]<=[8], use_global_device_ids=true, to_apply=%region_1219.27522.clone
  %convert_element_type.3531 = bf16[] convert(%all-reduce.319)
  %add.2661 = bf16[] add(%add.2660, %convert_element_type.3531)
  %dot.1295 = bf16[1,4096,14336]{2,1,0} dot(%sharding_constraint.1072, %sharding_constraint.1079), lhs_batch_dims={0}, lhs_contracting_dims={1,2}, rhs_batch_dims={0}, rhs_contracting_dims={1,2}
  %sharding_constraint.2529 = bf16[1,4096,14336]{2,1,0} copy(%dot.1295)
  %mul.9692 = bf16[1,4096,14336]{2,1,0} multiply(%sharding_constraint.2529, %sharding_constraint.2529)
  %convert_element_type.3532 = f32[1,4096,14336]{2,1,0} convert(%mul.9692)
  %reduce.1188 = f32[] reduce(%convert_element_type.3532, %constant.1360), dimensions={0,1,2}, to_apply=%region_1220.27533
  %all-reduce.320 = f32[] all-reduce(%reduce.1188), channel_id=1123, replica_groups=[1,8]<=[8], use_global_device_ids=true, to_apply=%region_1220.27533.clone
  %convert_element_type.3533 = bf16[] convert(%all-reduce.320)
  %add.2662 = bf16[] add(%add.2661, %convert_element_type.3533)
  %dot.1296 = bf16[1,14336,4096]{2,1,0} dot(%mul.4999, %sharding_constraint.1077), lhs_batch_dims={0}, lhs_contracting_dims={1,2}, rhs_batch_dims={0}, rhs_contracting_dims={1,2}
  %sharding_constraint.2530 = bf16[1,14336,4096]{2,1,0} copy(%dot.1296)
  %mul.9694 = bf16[1,14336,4096]{2,1,0} multiply(%sharding_constraint.2530, %sharding_constraint.2530)
  %convert_element_type.3535 = f32[1,14336,4096]{2,1,0} convert(%mul.9694)
  %reduce.1189 = f32[] reduce(%convert_element_type.3535, %constant.1360), dimensions={0,1,2}, to_apply=%region_1221.27544
  %all-reduce.321 = f32[] all-reduce(%reduce.1189), channel_id=1124, replica_groups=[1,8]<=[8], use_global_device_ids=true, to_apply=%region_1221.27544.clone
  %convert_element_type.3536 = bf16[] convert(%all-reduce.321)
  %add.2663 = bf16[] add(%add.2662, %convert_element_type.3536)
  %mul.9695 = bf16[1,4096,4096]{2,1,0} multiply(%convert_element_type.2113, %sharding_constraint.1089)
  %reduce.1190 = bf16[4096]{0} reduce(%mul.9695, %constant.1190), dimensions={0,1}, to_apply=%region_1222.27552
  %all-reduce.322 = bf16[4096]{0} all-reduce(%reduce.1190), channel_id=1125, replica_groups=[1,8]<=[8], use_global_device_ids=true, to_apply=%region_1222.27552.clone
  %mul.9696 = bf16[4096]{0} multiply(%all-reduce.322, %all-reduce.322)
  %convert_element_type.3537 = f32[4096]{0} convert(%mul.9696)
  %reduce.1191 = f32[] reduce(%convert_element_type.3537, %constant.1360), dimensions={0}, to_apply=%region_1223.27559
  %convert_element_type.3538 = bf16[] convert(%reduce.1191)
  %add.2664 = bf16[] add(%add.2663, %convert_element_type.3538)
  %mul.9701 = bf16[1,4096,4096]{2,1,0} multiply(%convert_element_type.2100, %sharding_constraint.1098)
  %reduce.1192 = bf16[4096]{0} reduce(%mul.9701, %constant.1190), dimensions={0,1}, to_apply=%region_1224.27567
  %all-reduce.323 = bf16[4096]{0} all-reduce(%reduce.1192), channel_id=1126, replica_groups=[1,8]<=[8], use_global_device_ids=true, to_apply=%region_1224.27567.clone
  %mul.9702 = bf16[4096]{0} multiply(%all-reduce.323, %all-reduce.323)
  %convert_element_type.3539 = f32[4096]{0} convert(%mul.9702)
  %reduce.1193 = f32[] reduce(%convert_element_type.3539, %constant.1360), dimensions={0}, to_apply=%region_1225.27574
  %convert_element_type.3540 = bf16[] convert(%reduce.1193)
  %add.2666 = bf16[] add(%add.2664, %convert_element_type.3540)
  %dot.1297 = bf16[8,128,4096]{2,1,0} dot(%concatenate.309, %sharding_constraint.1060), lhs_contracting_dims={0,1}, rhs_contracting_dims={0,1}
  %all-reduce.324 = bf16[8,128,4096]{2,1,0} all-reduce(%dot.1297), channel_id=1127, replica_groups=[1,8]<=[8], use_global_device_ids=true, to_apply=%add.106.clone
  %dynamic-slice.2393 = bf16[8,128,512]{2,1,0} dynamic-slice(%all-reduce.324, %constant.1181, %constant.1181, %reshape.13763), dynamic_slice_sizes={8,128,512}
  %transpose.409 = bf16[512,8,128]{0,2,1} transpose(%dynamic-slice.2393), dimensions={2,0,1}
  %mul.9703 = bf16[512,8,128]{0,2,1} multiply(%transpose.409, %transpose.409)
  %convert_element_type.3541 = f32[512,8,128]{0,2,1} convert(%mul.9703)
  %reduce.1194 = f32[] reduce(%convert_element_type.3541, %constant.1360), dimensions={0,1,2}, to_apply=%region_1226.27585
  %all-reduce.325 = f32[] all-reduce(%reduce.1194), channel_id=1128, replica_groups=[1,8]<=[8], use_global_device_ids=true, to_apply=%region_1226.27585.clone
  %convert_element_type.3542 = bf16[] convert(%all-reduce.325)
  %add.2667 = bf16[] add(%add.2666, %convert_element_type.3542)
  %dot.1298 = bf16[4096,32,128]{2,1,0} dot(%sharding_constraint.1091, %sharding_constraint.1065), lhs_contracting_dims={0,1}, rhs_contracting_dims={0,1}
  %all-reduce.326 = bf16[4096,32,128]{2,1,0} all-reduce(%dot.1298), channel_id=1129, replica_groups=[1,8]<=[8], use_global_device_ids=true, to_apply=%add.107.clone
  %dynamic-slice.2395 = bf16[512,32,128]{2,1,0} dynamic-slice(%all-reduce.326, %reshape.13763, %constant.1181, %constant.1181), dynamic_slice_sizes={512,32,128}
  %transpose.410 = bf16[32,128,512]{1,0,2} transpose(%dynamic-slice.2395), dimensions={1,2,0}
  %mul.9704 = bf16[32,128,512]{1,0,2} multiply(%transpose.410, %transpose.410)
  %convert_element_type.3543 = f32[32,128,512]{1,0,2} convert(%mul.9704)
  %reduce.1195 = f32[] reduce(%convert_element_type.3543, %constant.1360), dimensions={0,1,2}, to_apply=%region_1227.27596
  %all-reduce.327 = f32[] all-reduce(%reduce.1195), channel_id=1130, replica_groups=[1,8]<=[8], use_global_device_ids=true, to_apply=%region_1227.27596.clone
  %convert_element_type.3544 = bf16[] convert(%all-reduce.327)
  %add.2668 = bf16[] add(%add.2667, %convert_element_type.3544)
  %dot.1299 = bf16[32,128,4096]{2,1,0} dot(%concatenate.310, %sharding_constraint.1060), lhs_contracting_dims={0,1}, rhs_contracting_dims={0,1}
  %all-reduce.328 = bf16[32,128,4096]{2,1,0} all-reduce(%dot.1299), channel_id=1131, replica_groups=[1,8]<=[8], use_global_device_ids=true, to_apply=%add.108.clone
  %dynamic-slice.2397 = bf16[32,128,512]{2,1,0} dynamic-slice(%all-reduce.328, %constant.1181, %constant.1181, %reshape.13763), dynamic_slice_sizes={32,128,512}
  %transpose.411 = bf16[512,32,128]{0,2,1} transpose(%dynamic-slice.2397), dimensions={2,0,1}
  %mul.9705 = bf16[512,32,128]{0,2,1} multiply(%transpose.411, %transpose.411)
  %convert_element_type.3545 = f32[512,32,128]{0,2,1} convert(%mul.9705)
  %reduce.1196 = f32[] reduce(%convert_element_type.3545, %constant.1360), dimensions={0,1,2}, to_apply=%region_1228.27607
  %all-reduce.329 = f32[] all-reduce(%reduce.1196), channel_id=1132, replica_groups=[1,8]<=[8], use_global_device_ids=true, to_apply=%region_1228.27607.clone
  %convert_element_type.3546 = bf16[] convert(%all-reduce.329)
  %add.2669 = bf16[] add(%add.2668, %convert_element_type.3546)
  %dot.1300 = bf16[8,128,4096]{2,1,0} dot(%sharding_constraint.1093, %sharding_constraint.1060), lhs_contracting_dims={0,1}, rhs_contracting_dims={0,1}
  %all-reduce.330 = bf16[8,128,4096]{2,1,0} all-reduce(%dot.1300), channel_id=1133, replica_groups=[1,8]<=[8], use_global_device_ids=true, to_apply=%add.109.clone
  %dynamic-slice.2399 = bf16[8,128,512]{2,1,0} dynamic-slice(%all-reduce.330, %constant.1181, %constant.1181, %reshape.13763), dynamic_slice_sizes={8,128,512}
  %transpose.412 = bf16[512,8,128]{0,2,1} transpose(%dynamic-slice.2399), dimensions={2,0,1}
  %mul.9706 = bf16[512,8,128]{0,2,1} multiply(%transpose.412, %transpose.412)
  %convert_element_type.3547 = f32[512,8,128]{0,2,1} convert(%mul.9706)
  %reduce.1197 = f32[] reduce(%convert_element_type.3547, %constant.1360), dimensions={0,1,2}, to_apply=%region_1229.27618
  %all-reduce.331 = f32[] all-reduce(%reduce.1197), channel_id=1134, replica_groups=[1,8]<=[8], use_global_device_ids=true, to_apply=%region_1229.27618.clone
  %convert_element_type.3548 = bf16[] convert(%all-reduce.331)
  %add.2670 = bf16[] add(%add.2669, %convert_element_type.3548)
  %dot.1301 = bf16[4096,8]{1,0} dot(%sharding_constraint.1026, %sharding_constraint.1045), lhs_contracting_dims={0,1}, rhs_contracting_dims={0,1}
  %all-reduce.332 = bf16[4096,8]{1,0} all-reduce(%dot.1301), channel_id=1135, replica_groups=[1,8]<=[8], use_global_device_ids=true, to_apply=%add.110.clone
  %dynamic-slice.2401 = bf16[512,8]{1,0} dynamic-slice(%all-reduce.332, %reshape.13763, %constant.1181), dynamic_slice_sizes={512,8}
  %mul.9707 = bf16[512,8]{1,0} multiply(%dynamic-slice.2401, %dynamic-slice.2401)
  %convert_element_type.3549 = f32[512,8]{1,0} convert(%mul.9707)
  %reduce.1198 = f32[] reduce(%convert_element_type.3549, %constant.1360), dimensions={0,1}, to_apply=%region_1230.27628
  %all-reduce.333 = f32[] all-reduce(%reduce.1198), channel_id=1136, replica_groups=[1,8]<=[8], use_global_device_ids=true, to_apply=%region_1230.27628.clone
  %convert_element_type.3550 = bf16[] convert(%all-reduce.333)
  %add.2671 = bf16[] add(%add.2670, %convert_element_type.3550)
  %dot.1302 = bf16[1,4096,14336]{2,1,0} dot(%sharding_constraint.1031, %sharding_constraint.1041), lhs_batch_dims={0}, lhs_contracting_dims={1,2}, rhs_batch_dims={0}, rhs_contracting_dims={1,2}
  %sharding_constraint.2531 = bf16[1,4096,14336]{2,1,0} copy(%dot.1302)
  %mul.9708 = bf16[1,4096,14336]{2,1,0} multiply(%sharding_constraint.2531, %sharding_constraint.2531)
  %convert_element_type.3552 = f32[1,4096,14336]{2,1,0} convert(%mul.9708)
  %reduce.1199 = f32[] reduce(%convert_element_type.3552, %constant.1360), dimensions={0,1,2}, to_apply=%region_1231.27639
  %all-reduce.334 = f32[] all-reduce(%reduce.1199), channel_id=1137, replica_groups=[1,8]<=[8], use_global_device_ids=true, to_apply=%region_1231.27639.clone
  %convert_element_type.3553 = bf16[] convert(%all-reduce.334)
  %add.2672 = bf16[] add(%add.2671, %convert_element_type.3553)
  %dot.1303 = bf16[1,4096,14336]{2,1,0} dot(%sharding_constraint.1031, %sharding_constraint.1038), lhs_batch_dims={0}, lhs_contracting_dims={1,2}, rhs_batch_dims={0}, rhs_contracting_dims={1,2}
  %sharding_constraint.2532 = bf16[1,4096,14336]{2,1,0} copy(%dot.1303)
  %mul.9709 = bf16[1,4096,14336]{2,1,0} multiply(%sharding_constraint.2532, %sharding_constraint.2532)
  %convert_element_type.3554 = f32[1,4096,14336]{2,1,0} convert(%mul.9709)
  %reduce.1200 = f32[] reduce(%convert_element_type.3554, %constant.1360), dimensions={0,1,2}, to_apply=%region_1232.27650
  %all-reduce.335 = f32[] all-reduce(%reduce.1200), channel_id=1138, replica_groups=[1,8]<=[8], use_global_device_ids=true, to_apply=%region_1232.27650.clone
  %convert_element_type.3555 = bf16[] convert(%all-reduce.335)
  %add.2673 = bf16[] add(%add.2672, %convert_element_type.3555)
  %dot.1304 = bf16[1,14336,4096]{2,1,0} dot(%mul.4818, %sharding_constraint.1036), lhs_batch_dims={0}, lhs_contracting_dims={1,2}, rhs_batch_dims={0}, rhs_contracting_dims={1,2}
  %sharding_constraint.2533 = bf16[1,14336,4096]{2,1,0} copy(%dot.1304)
  %mul.9710 = bf16[1,14336,4096]{2,1,0} multiply(%sharding_constraint.2533, %sharding_constraint.2533)
  %convert_element_type.3556 = f32[1,14336,4096]{2,1,0} convert(%mul.9710)
  %reduce.1201 = f32[] reduce(%convert_element_type.3556, %constant.1360), dimensions={0,1,2}, to_apply=%region_1233.27661
  %all-reduce.336 = f32[] all-reduce(%reduce.1201), channel_id=1139, replica_groups=[1,8]<=[8], use_global_device_ids=true, to_apply=%region_1233.27661.clone
  %convert_element_type.3557 = bf16[] convert(%all-reduce.336)
  %add.2674 = bf16[] add(%add.2673, %convert_element_type.3557)
  %mul.9711 = bf16[1,4096,4096]{2,1,0} multiply(%convert_element_type.2082, %sharding_constraint.1046)
  %reduce.1202 = bf16[4096]{0} reduce(%mul.9711, %constant.1190), dimensions={0,1}, to_apply=%region_1234.27669
  %all-reduce.337 = bf16[4096]{0} all-reduce(%reduce.1202), channel_id=1140, replica_groups=[1,8]<=[8], use_global_device_ids=true, to_apply=%region_1234.27669.clone
  %mul.9712 = bf16[4096]{0} multiply(%all-reduce.337, %all-reduce.337)
  %convert_element_type.3558 = f32[4096]{0} convert(%mul.9712)
  %reduce.1203 = f32[] reduce(%convert_element_type.3558, %constant.1360), dimensions={0}, to_apply=%region_1235.27676
  %convert_element_type.3559 = bf16[] convert(%reduce.1203)
  %add.2676 = bf16[] add(%add.2674, %convert_element_type.3559)
  %mul.9713 = bf16[1,4096,4096]{2,1,0} multiply(%convert_element_type.2068, %sharding_constraint.1055)
  %reduce.1204 = bf16[4096]{0} reduce(%mul.9713, %constant.1190), dimensions={0,1}, to_apply=%region_1236.27684
  %all-reduce.338 = bf16[4096]{0} all-reduce(%reduce.1204), channel_id=1141, replica_groups=[1,8]<=[8], use_global_device_ids=true, to_apply=%region_1236.27684.clone
  %mul.9714 = bf16[4096]{0} multiply(%all-reduce.338, %all-reduce.338)
  %convert_element_type.3561 = f32[4096]{0} convert(%mul.9714)
  %reduce.1205 = f32[] reduce(%convert_element_type.3561, %constant.1360), dimensions={0}, to_apply=%region_1237.27691
  %convert_element_type.3562 = bf16[] convert(%reduce.1205)
  %add.2677 = bf16[] add(%add.2676, %convert_element_type.3562)
  %dot.1305 = bf16[8,128,4096]{2,1,0} dot(%concatenate.296, %sharding_constraint.1019), lhs_contracting_dims={0,1}, rhs_contracting_dims={0,1}
  %all-reduce.339 = bf16[8,128,4096]{2,1,0} all-reduce(%dot.1305), channel_id=1142, replica_groups=[1,8]<=[8], use_global_device_ids=true, to_apply=%add.111.clone
  %dynamic-slice.2403 = bf16[8,128,512]{2,1,0} dynamic-slice(%all-reduce.339, %constant.1181, %constant.1181, %reshape.13763), dynamic_slice_sizes={8,128,512}
  %transpose.413 = bf16[512,8,128]{0,2,1} transpose(%dynamic-slice.2403), dimensions={2,0,1}
  %mul.9715 = bf16[512,8,128]{0,2,1} multiply(%transpose.413, %transpose.413)
  %convert_element_type.3563 = f32[512,8,128]{0,2,1} convert(%mul.9715)
  %reduce.1206 = f32[] reduce(%convert_element_type.3563, %constant.1360), dimensions={0,1,2}, to_apply=%region_1238.27702
  %all-reduce.340 = f32[] all-reduce(%reduce.1206), channel_id=1143, replica_groups=[1,8]<=[8], use_global_device_ids=true, to_apply=%region_1238.27702.clone
  %convert_element_type.3564 = bf16[] convert(%all-reduce.340)
  %add.2679 = bf16[] add(%add.2677, %convert_element_type.3564)
  %dot.1306 = bf16[4096,32,128]{2,1,0} dot(%sharding_constraint.1048, %sharding_constraint.1024), lhs_contracting_dims={0,1}, rhs_contracting_dims={0,1}
  %all-reduce.341 = bf16[4096,32,128]{2,1,0} all-reduce(%dot.1306), channel_id=1144, replica_groups=[1,8]<=[8], use_global_device_ids=true, to_apply=%add.112.clone
  %dynamic-slice.2405 = bf16[512,32,128]{2,1,0} dynamic-slice(%all-reduce.341, %reshape.13763, %constant.1181, %constant.1181), dynamic_slice_sizes={512,32,128}
  %transpose.414 = bf16[32,128,512]{1,0,2} transpose(%dynamic-slice.2405), dimensions={1,2,0}
  %mul.9717 = bf16[32,128,512]{1,0,2} multiply(%transpose.414, %transpose.414)
  %convert_element_type.3565 = f32[32,128,512]{1,0,2} convert(%mul.9717)
  %reduce.1207 = f32[] reduce(%convert_element_type.3565, %constant.1360), dimensions={0,1,2}, to_apply=%region_1239.27713
  %all-reduce.342 = f32[] all-reduce(%reduce.1207), channel_id=1145, replica_groups=[1,8]<=[8], use_global_device_ids=true, to_apply=%region_1239.27713.clone
  %convert_element_type.3566 = bf16[] convert(%all-reduce.342)
  %add.2680 = bf16[] add(%add.2679, %convert_element_type.3566)
  %dot.1307 = bf16[32,128,4096]{2,1,0} dot(%concatenate.297, %sharding_constraint.1019), lhs_contracting_dims={0,1}, rhs_contracting_dims={0,1}
  %all-reduce.343 = bf16[32,128,4096]{2,1,0} all-reduce(%dot.1307), channel_id=1146, replica_groups=[1,8]<=[8], use_global_device_ids=true, to_apply=%add.113.clone
  %dynamic-slice.2407 = bf16[32,128,512]{2,1,0} dynamic-slice(%all-reduce.343, %constant.1181, %constant.1181, %reshape.13763), dynamic_slice_sizes={32,128,512}
  %transpose.415 = bf16[512,32,128]{0,2,1} transpose(%dynamic-slice.2407), dimensions={2,0,1}
  %mul.9718 = bf16[512,32,128]{0,2,1} multiply(%transpose.415, %transpose.415)
  %convert_element_type.3567 = f32[512,32,128]{0,2,1} convert(%mul.9718)
  %reduce.1208 = f32[] reduce(%convert_element_type.3567, %constant.1360), dimensions={0,1,2}, to_apply=%region_1240.27724
  %all-reduce.344 = f32[] all-reduce(%reduce.1208), channel_id=1147, replica_groups=[1,8]<=[8], use_global_device_ids=true, to_apply=%region_1240.27724.clone
  %convert_element_type.3568 = bf16[] convert(%all-reduce.344)
  %add.2681 = bf16[] add(%add.2680, %convert_element_type.3568)
  %dot.1308 = bf16[8,128,4096]{2,1,0} dot(%sharding_constraint.1050, %sharding_constraint.1019), lhs_contracting_dims={0,1}, rhs_contracting_dims={0,1}
  %all-reduce.345 = bf16[8,128,4096]{2,1,0} all-reduce(%dot.1308), channel_id=1148, replica_groups=[1,8]<=[8], use_global_device_ids=true, to_apply=%add.114.clone
  %dynamic-slice.2409 = bf16[8,128,512]{2,1,0} dynamic-slice(%all-reduce.345, %constant.1181, %constant.1181, %reshape.13763), dynamic_slice_sizes={8,128,512}
  %transpose.416 = bf16[512,8,128]{0,2,1} transpose(%dynamic-slice.2409), dimensions={2,0,1}
  %mul.9719 = bf16[512,8,128]{0,2,1} multiply(%transpose.416, %transpose.416)
  %convert_element_type.3569 = f32[512,8,128]{0,2,1} convert(%mul.9719)
  %reduce.1209 = f32[] reduce(%convert_element_type.3569, %constant.1360), dimensions={0,1,2}, to_apply=%region_1241.27735
  %all-reduce.346 = f32[] all-reduce(%reduce.1209), channel_id=1149, replica_groups=[1,8]<=[8], use_global_device_ids=true, to_apply=%region_1241.27735.clone
  %convert_element_type.3570 = bf16[] convert(%all-reduce.346)
  %add.2682 = bf16[] add(%add.2681, %convert_element_type.3570)
  %dot.1309 = bf16[4096,8]{1,0} dot(%sharding_constraint.2270, %sharding_constraint.2293), lhs_contracting_dims={0,1}, rhs_contracting_dims={0,1}
  %all-reduce.347 = bf16[4096,8]{1,0} all-reduce(%dot.1309), channel_id=1150, replica_groups=[1,8]<=[8], use_global_device_ids=true, to_apply=%add.115.clone
  %dynamic-slice.2411 = bf16[512,8]{1,0} dynamic-slice(%all-reduce.347, %reshape.13763, %constant.1181), dynamic_slice_sizes={512,8}
  %mul.9720 = bf16[512,8]{1,0} multiply(%dynamic-slice.2411, %dynamic-slice.2411)
  %convert_element_type.3571 = f32[512,8]{1,0} convert(%mul.9720)
  %reduce.1210 = f32[] reduce(%convert_element_type.3571, %constant.1360), dimensions={0,1}, to_apply=%region_1242.27745
  %all-reduce.348 = f32[] all-reduce(%reduce.1210), channel_id=1151, replica_groups=[1,8]<=[8], use_global_device_ids=true, to_apply=%region_1242.27745.clone
  %convert_element_type.3573 = bf16[] convert(%all-reduce.348)
  %add.2683 = bf16[] add(%add.2682, %convert_element_type.3573)
  %dot.1310 = bf16[1,4096,14336]{2,1,0} dot(%sharding_constraint.2275, %sharding_constraint.2289), lhs_batch_dims={0}, lhs_contracting_dims={1,2}, rhs_batch_dims={0}, rhs_contracting_dims={1,2}
  %sharding_constraint.2534 = bf16[1,4096,14336]{2,1,0} copy(%dot.1310)
  %mul.9721 = bf16[1,4096,14336]{2,1,0} multiply(%sharding_constraint.2534, %sharding_constraint.2534)
  %convert_element_type.3574 = f32[1,4096,14336]{2,1,0} convert(%mul.9721)
  %reduce.1211 = f32[] reduce(%convert_element_type.3574, %constant.1360), dimensions={0,1,2}, to_apply=%region_1243.27756
  %all-reduce.349 = f32[] all-reduce(%reduce.1211), channel_id=1152, replica_groups=[1,8]<=[8], use_global_device_ids=true, to_apply=%region_1243.27756.clone
  %convert_element_type.3575 = bf16[] convert(%all-reduce.349)
  %add.2684 = bf16[] add(%add.2683, %convert_element_type.3575)
  %dot.1311 = bf16[1,4096,14336]{2,1,0} dot(%sharding_constraint.2275, %sharding_constraint.2284), lhs_batch_dims={0}, lhs_contracting_dims={1,2}, rhs_batch_dims={0}, rhs_contracting_dims={1,2}
  %sharding_constraint.2535 = bf16[1,4096,14336]{2,1,0} copy(%dot.1311)
  %mul.9722 = bf16[1,4096,14336]{2,1,0} multiply(%sharding_constraint.2535, %sharding_constraint.2535)
  %convert_element_type.3576 = f32[1,4096,14336]{2,1,0} convert(%mul.9722)
  %reduce.1212 = f32[] reduce(%convert_element_type.3576, %constant.1360), dimensions={0,1,2}, to_apply=%region_1244.27767
  %all-reduce.350 = f32[] all-reduce(%reduce.1212), channel_id=1153, replica_groups=[1,8]<=[8], use_global_device_ids=true, to_apply=%region_1244.27767.clone
  %convert_element_type.3577 = bf16[] convert(%all-reduce.350)
  %add.2685 = bf16[] add(%add.2684, %convert_element_type.3577)
  %dot.1312 = bf16[1,14336,4096]{2,1,0} dot(%mul.8803, %sharding_constraint.2280), lhs_batch_dims={0}, lhs_contracting_dims={1,2}, rhs_batch_dims={0}, rhs_contracting_dims={1,2}
  %sharding_constraint.2539 = bf16[1,14336,4096]{2,1,0} copy(%dot.1312)
  %mul.9723 = bf16[1,14336,4096]{2,1,0} multiply(%sharding_constraint.2539, %sharding_constraint.2539)
  %convert_element_type.3578 = f32[1,14336,4096]{2,1,0} convert(%mul.9723)
  %reduce.1213 = f32[] reduce(%convert_element_type.3578, %constant.1360), dimensions={0,1,2}, to_apply=%region_1245.27778
  %all-reduce.351 = f32[] all-reduce(%reduce.1213), channel_id=1154, replica_groups=[1,8]<=[8], use_global_device_ids=true, to_apply=%region_1245.27778.clone
  %convert_element_type.3580 = bf16[] convert(%all-reduce.351)
  %add.2686 = bf16[] add(%add.2685, %convert_element_type.3580)
  %mul.9724 = bf16[1,4096,4096]{2,1,0} multiply(%convert_element_type.2930, %sharding_constraint.2294)
  %reduce.1214 = bf16[4096]{0} reduce(%mul.9724, %constant.1190), dimensions={0,1}, to_apply=%region_1246.27786
  %all-reduce.352 = bf16[4096]{0} all-reduce(%reduce.1214), channel_id=1155, replica_groups=[1,8]<=[8], use_global_device_ids=true, to_apply=%region_1246.27786.clone
  %mul.9725 = bf16[4096]{0} multiply(%all-reduce.352, %all-reduce.352)
  %convert_element_type.3581 = f32[4096]{0} convert(%mul.9725)
  %reduce.1215 = f32[] reduce(%convert_element_type.3581, %constant.1360), dimensions={0}, to_apply=%region_1247.27793
  %convert_element_type.3582 = bf16[] convert(%reduce.1215)
  %add.2687 = bf16[] add(%add.2686, %convert_element_type.3582)
  %mul.9726 = bf16[1,4096,4096]{2,1,0} multiply(%convert_element_type.2915, %sharding_constraint.2303)
  %reduce.1216 = bf16[4096]{0} reduce(%mul.9726, %constant.1190), dimensions={0,1}, to_apply=%region_1248.27801
  %all-reduce.353 = bf16[4096]{0} all-reduce(%reduce.1216), channel_id=1156, replica_groups=[1,8]<=[8], use_global_device_ids=true, to_apply=%region_1248.27801.clone
  %mul.9727 = bf16[4096]{0} multiply(%all-reduce.353, %all-reduce.353)
  %convert_element_type.3584 = f32[4096]{0} convert(%mul.9727)
  %reduce.1217 = f32[] reduce(%convert_element_type.3584, %constant.1360), dimensions={0}, to_apply=%region_1249.27808
  %convert_element_type.3585 = bf16[] convert(%reduce.1217)
  %add.2688 = bf16[] add(%add.2687, %convert_element_type.3585)
  %dot.1313 = bf16[8,128,4096]{2,1,0} dot(%concatenate.634, %sharding_constraint.2263), lhs_contracting_dims={0,1}, rhs_contracting_dims={0,1}
  %all-reduce.354 = bf16[8,128,4096]{2,1,0} all-reduce(%dot.1313), channel_id=1157, replica_groups=[1,8]<=[8], use_global_device_ids=true, to_apply=%add.116.clone
  %dynamic-slice.2413 = bf16[8,128,512]{2,1,0} dynamic-slice(%all-reduce.354, %constant.1181, %constant.1181, %reshape.13763), dynamic_slice_sizes={8,128,512}
  %transpose.417 = bf16[512,8,128]{0,2,1} transpose(%dynamic-slice.2413), dimensions={2,0,1}
  %mul.9728 = bf16[512,8,128]{0,2,1} multiply(%transpose.417, %transpose.417)
  %convert_element_type.3586 = f32[512,8,128]{0,2,1} convert(%mul.9728)
  %reduce.1218 = f32[] reduce(%convert_element_type.3586, %constant.1360), dimensions={0,1,2}, to_apply=%region_1250.27819
  %all-reduce.355 = f32[] all-reduce(%reduce.1218), channel_id=1158, replica_groups=[1,8]<=[8], use_global_device_ids=true, to_apply=%region_1250.27819.clone
  %convert_element_type.3587 = bf16[] convert(%all-reduce.355)
  %add.2689 = bf16[] add(%add.2688, %convert_element_type.3587)
  %dot.1314 = bf16[4096,32,128]{2,1,0} dot(%sharding_constraint.2296, %sharding_constraint.2268), lhs_contracting_dims={0,1}, rhs_contracting_dims={0,1}
  %all-reduce.356 = bf16[4096,32,128]{2,1,0} all-reduce(%dot.1314), channel_id=1159, replica_groups=[1,8]<=[8], use_global_device_ids=true, to_apply=%add.117.clone
  %dynamic-slice.2415 = bf16[512,32,128]{2,1,0} dynamic-slice(%all-reduce.356, %reshape.13763, %constant.1181, %constant.1181), dynamic_slice_sizes={512,32,128}
  %transpose.418 = bf16[32,128,512]{1,0,2} transpose(%dynamic-slice.2415), dimensions={1,2,0}
  %mul.9729 = bf16[32,128,512]{1,0,2} multiply(%transpose.418, %transpose.418)
  %convert_element_type.3588 = f32[32,128,512]{1,0,2} convert(%mul.9729)
  %reduce.1219 = f32[] reduce(%convert_element_type.3588, %constant.1360), dimensions={0,1,2}, to_apply=%region_1251.27830
  %all-reduce.357 = f32[] all-reduce(%reduce.1219), channel_id=1160, replica_groups=[1,8]<=[8], use_global_device_ids=true, to_apply=%region_1251.27830.clone
  %convert_element_type.3590 = bf16[] convert(%all-reduce.357)
  %add.2690 = bf16[] add(%add.2689, %convert_element_type.3590)
  %dot.1315 = bf16[32,128,4096]{2,1,0} dot(%concatenate.635, %sharding_constraint.2263), lhs_contracting_dims={0,1}, rhs_contracting_dims={0,1}
  %all-reduce.358 = bf16[32,128,4096]{2,1,0} all-reduce(%dot.1315), channel_id=1161, replica_groups=[1,8]<=[8], use_global_device_ids=true, to_apply=%add.118.clone
  %dynamic-slice.2417 = bf16[32,128,512]{2,1,0} dynamic-slice(%all-reduce.358, %constant.1181, %constant.1181, %reshape.13763), dynamic_slice_sizes={32,128,512}
  %transpose.419 = bf16[512,32,128]{0,2,1} transpose(%dynamic-slice.2417), dimensions={2,0,1}
  %mul.9730 = bf16[512,32,128]{0,2,1} multiply(%transpose.419, %transpose.419)
  %convert_element_type.3591 = f32[512,32,128]{0,2,1} convert(%mul.9730)
  %reduce.1220 = f32[] reduce(%convert_element_type.3591, %constant.1360), dimensions={0,1,2}, to_apply=%region_1252.27841
  %all-reduce.359 = f32[] all-reduce(%reduce.1220), channel_id=1162, replica_groups=[1,8]<=[8], use_global_device_ids=true, to_apply=%region_1252.27841.clone
  %convert_element_type.3592 = bf16[] convert(%all-reduce.359)
  %add.2691 = bf16[] add(%add.2690, %convert_element_type.3592)
  %dot.1316 = bf16[8,128,4096]{2,1,0} dot(%sharding_constraint.2298, %sharding_constraint.2263), lhs_contracting_dims={0,1}, rhs_contracting_dims={0,1}
  %all-reduce.360 = bf16[8,128,4096]{2,1,0} all-reduce(%dot.1316), channel_id=1163, replica_groups=[1,8]<=[8], use_global_device_ids=true, to_apply=%add.119.clone
  %dynamic-slice.2419 = bf16[8,128,512]{2,1,0} dynamic-slice(%all-reduce.360, %constant.1181, %constant.1181, %reshape.13763), dynamic_slice_sizes={8,128,512}
  %transpose.420 = bf16[512,8,128]{0,2,1} transpose(%dynamic-slice.2419), dimensions={2,0,1}
  %mul.9731 = bf16[512,8,128]{0,2,1} multiply(%transpose.420, %transpose.420)
  %convert_element_type.3593 = f32[512,8,128]{0,2,1} convert(%mul.9731)
  %reduce.1221 = f32[] reduce(%convert_element_type.3593, %constant.1360), dimensions={0,1,2}, to_apply=%region_1253.27852
  %all-reduce.361 = f32[] all-reduce(%reduce.1221), channel_id=1164, replica_groups=[1,8]<=[8], use_global_device_ids=true, to_apply=%region_1253.27852.clone
  %convert_element_type.3594 = bf16[] convert(%all-reduce.361)
  %add.2692 = bf16[] add(%add.2691, %convert_element_type.3594)
  %dot.1317 = bf16[4096,8]{1,0} dot(%sharding_constraint.985, %sharding_constraint.1004), lhs_contracting_dims={0,1}, rhs_contracting_dims={0,1}
  %all-reduce.362 = bf16[4096,8]{1,0} all-reduce(%dot.1317), channel_id=1165, replica_groups=[1,8]<=[8], use_global_device_ids=true, to_apply=%add.120.clone
  %dynamic-slice.2421 = bf16[512,8]{1,0} dynamic-slice(%all-reduce.362, %reshape.13763, %constant.1181), dynamic_slice_sizes={512,8}
  %mul.9732 = bf16[512,8]{1,0} multiply(%dynamic-slice.2421, %dynamic-slice.2421)
  %convert_element_type.3596 = f32[512,8]{1,0} convert(%mul.9732)
  %reduce.1222 = f32[] reduce(%convert_element_type.3596, %constant.1360), dimensions={0,1}, to_apply=%region_1254.27862
  %all-reduce.363 = f32[] all-reduce(%reduce.1222), channel_id=1166, replica_groups=[1,8]<=[8], use_global_device_ids=true, to_apply=%region_1254.27862.clone
  %convert_element_type.3598 = bf16[] convert(%all-reduce.363)
  %add.2693 = bf16[] add(%add.2692, %convert_element_type.3598)
  %dot.1318 = bf16[1,4096,14336]{2,1,0} dot(%sharding_constraint.990, %sharding_constraint.1000), lhs_batch_dims={0}, lhs_contracting_dims={1,2}, rhs_batch_dims={0}, rhs_contracting_dims={1,2}
  %sharding_constraint.2540 = bf16[1,4096,14336]{2,1,0} copy(%dot.1318)
  %mul.9733 = bf16[1,4096,14336]{2,1,0} multiply(%sharding_constraint.2540, %sharding_constraint.2540)
  %convert_element_type.3599 = f32[1,4096,14336]{2,1,0} convert(%mul.9733)
  %reduce.1223 = f32[] reduce(%convert_element_type.3599, %constant.1360), dimensions={0,1,2}, to_apply=%region_1255.27873
  %all-reduce.364 = f32[] all-reduce(%reduce.1223), channel_id=1167, replica_groups=[1,8]<=[8], use_global_device_ids=true, to_apply=%region_1255.27873.clone
  %convert_element_type.3600 = bf16[] convert(%all-reduce.364)
  %add.2694 = bf16[] add(%add.2693, %convert_element_type.3600)
  %dot.1319 = bf16[1,4096,14336]{2,1,0} dot(%sharding_constraint.990, %sharding_constraint.997), lhs_batch_dims={0}, lhs_contracting_dims={1,2}, rhs_batch_dims={0}, rhs_contracting_dims={1,2}
  %sharding_constraint.2541 = bf16[1,4096,14336]{2,1,0} copy(%dot.1319)
  %mul.9734 = bf16[1,4096,14336]{2,1,0} multiply(%sharding_constraint.2541, %sharding_constraint.2541)
  %convert_element_type.3601 = f32[1,4096,14336]{2,1,0} convert(%mul.9734)
  %reduce.1224 = f32[] reduce(%convert_element_type.3601, %constant.1360), dimensions={0,1,2}, to_apply=%region_1256.27884
  %all-reduce.365 = f32[] all-reduce(%reduce.1224), channel_id=1168, replica_groups=[1,8]<=[8], use_global_device_ids=true, to_apply=%region_1256.27884.clone
  %convert_element_type.3602 = bf16[] convert(%all-reduce.365)
  %add.2695 = bf16[] add(%add.2694, %convert_element_type.3602)
  %dot.1320 = bf16[1,14336,4096]{2,1,0} dot(%mul.4678, %sharding_constraint.995), lhs_batch_dims={0}, lhs_contracting_dims={1,2}, rhs_batch_dims={0}, rhs_contracting_dims={1,2}
  %sharding_constraint.2542 = bf16[1,14336,4096]{2,1,0} copy(%dot.1320)
  %mul.9735 = bf16[1,14336,4096]{2,1,0} multiply(%sharding_constraint.2542, %sharding_constraint.2542)
  %convert_element_type.3603 = f32[1,14336,4096]{2,1,0} convert(%mul.9735)
  %reduce.1225 = f32[] reduce(%convert_element_type.3603, %constant.1360), dimensions={0,1,2}, to_apply=%region_1257.27895
  %all-reduce.366 = f32[] all-reduce(%reduce.1225), channel_id=1169, replica_groups=[1,8]<=[8], use_global_device_ids=true, to_apply=%region_1257.27895.clone
  %convert_element_type.3605 = bf16[] convert(%all-reduce.366)
  %add.2696 = bf16[] add(%add.2695, %convert_element_type.3605)
  %mul.9740 = bf16[1,4096,4096]{2,1,0} multiply(%convert_element_type.2051, %sharding_constraint.1005)
  %reduce.1226 = bf16[4096]{0} reduce(%mul.9740, %constant.1190), dimensions={0,1}, to_apply=%region_1258.27903
  %all-reduce.367 = bf16[4096]{0} all-reduce(%reduce.1226), channel_id=1170, replica_groups=[1,8]<=[8], use_global_device_ids=true, to_apply=%region_1258.27903.clone
  %mul.9741 = bf16[4096]{0} multiply(%all-reduce.367, %all-reduce.367)
  %convert_element_type.3606 = f32[4096]{0} convert(%mul.9741)
  %reduce.1227 = f32[] reduce(%convert_element_type.3606, %constant.1360), dimensions={0}, to_apply=%region_1259.27910
  %convert_element_type.3607 = bf16[] convert(%reduce.1227)
  %add.2697 = bf16[] add(%add.2696, %convert_element_type.3607)
  %mul.9746 = bf16[1,4096,4096]{2,1,0} multiply(%convert_element_type.2039, %sharding_constraint.1014)
  %reduce.1228 = bf16[4096]{0} reduce(%mul.9746, %constant.1190), dimensions={0,1}, to_apply=%region_1260.27918
  %all-reduce.368 = bf16[4096]{0} all-reduce(%reduce.1228), channel_id=1171, replica_groups=[1,8]<=[8], use_global_device_ids=true, to_apply=%region_1260.27918.clone
  %mul.9747 = bf16[4096]{0} multiply(%all-reduce.368, %all-reduce.368)
  %convert_element_type.3608 = f32[4096]{0} convert(%mul.9747)
  %reduce.1229 = f32[] reduce(%convert_element_type.3608, %constant.1360), dimensions={0}, to_apply=%region_1261.27925
  %convert_element_type.3609 = bf16[] convert(%reduce.1229)
  %add.2698 = bf16[] add(%add.2697, %convert_element_type.3609)
  %dot.1321 = bf16[8,128,4096]{2,1,0} dot(%concatenate.283, %sharding_constraint.978), lhs_contracting_dims={0,1}, rhs_contracting_dims={0,1}
  %all-reduce.369 = bf16[8,128,4096]{2,1,0} all-reduce(%dot.1321), channel_id=1172, replica_groups=[1,8]<=[8], use_global_device_ids=true, to_apply=%add.121.clone
  %dynamic-slice.2423 = bf16[8,128,512]{2,1,0} dynamic-slice(%all-reduce.369, %constant.1181, %constant.1181, %reshape.13763), dynamic_slice_sizes={8,128,512}
  %transpose.421 = bf16[512,8,128]{0,2,1} transpose(%dynamic-slice.2423), dimensions={2,0,1}
  %mul.9748 = bf16[512,8,128]{0,2,1} multiply(%transpose.421, %transpose.421)
  %convert_element_type.3610 = f32[512,8,128]{0,2,1} convert(%mul.9748)
  %reduce.1230 = f32[] reduce(%convert_element_type.3610, %constant.1360), dimensions={0,1,2}, to_apply=%region_1262.27936
  %all-reduce.370 = f32[] all-reduce(%reduce.1230), channel_id=1173, replica_groups=[1,8]<=[8], use_global_device_ids=true, to_apply=%region_1262.27936.clone
  %convert_element_type.3611 = bf16[] convert(%all-reduce.370)
  %add.2699 = bf16[] add(%add.2698, %convert_element_type.3611)
  %dot.1322 = bf16[4096,32,128]{2,1,0} dot(%sharding_constraint.1007, %sharding_constraint.983), lhs_contracting_dims={0,1}, rhs_contracting_dims={0,1}
  %all-reduce.371 = bf16[4096,32,128]{2,1,0} all-reduce(%dot.1322), channel_id=1174, replica_groups=[1,8]<=[8], use_global_device_ids=true, to_apply=%add.122.clone
  %dynamic-slice.2425 = bf16[512,32,128]{2,1,0} dynamic-slice(%all-reduce.371, %reshape.13763, %constant.1181, %constant.1181), dynamic_slice_sizes={512,32,128}
  %transpose.422 = bf16[32,128,512]{1,0,2} transpose(%dynamic-slice.2425), dimensions={1,2,0}
  %mul.9752 = bf16[32,128,512]{1,0,2} multiply(%transpose.422, %transpose.422)
  %convert_element_type.3613 = f32[32,128,512]{1,0,2} convert(%mul.9752)
  %reduce.1231 = f32[] reduce(%convert_element_type.3613, %constant.1360), dimensions={0,1,2}, to_apply=%region_1263.27947
  %all-reduce.372 = f32[] all-reduce(%reduce.1231), channel_id=1175, replica_groups=[1,8]<=[8], use_global_device_ids=true, to_apply=%region_1263.27947.clone
  %convert_element_type.3614 = bf16[] convert(%all-reduce.372)
  %add.2700 = bf16[] add(%add.2699, %convert_element_type.3614)
  %dot.1323 = bf16[32,128,4096]{2,1,0} dot(%concatenate.284, %sharding_constraint.978), lhs_contracting_dims={0,1}, rhs_contracting_dims={0,1}
  %all-reduce.373 = bf16[32,128,4096]{2,1,0} all-reduce(%dot.1323), channel_id=1176, replica_groups=[1,8]<=[8], use_global_device_ids=true, to_apply=%add.123.clone
  %dynamic-slice.2427 = bf16[32,128,512]{2,1,0} dynamic-slice(%all-reduce.373, %constant.1181, %constant.1181, %reshape.13763), dynamic_slice_sizes={32,128,512}
  %transpose.423 = bf16[512,32,128]{0,2,1} transpose(%dynamic-slice.2427), dimensions={2,0,1}
  %mul.9753 = bf16[512,32,128]{0,2,1} multiply(%transpose.423, %transpose.423)
  %convert_element_type.3615 = f32[512,32,128]{0,2,1} convert(%mul.9753)
  %reduce.1232 = f32[] reduce(%convert_element_type.3615, %constant.1360), dimensions={0,1,2}, to_apply=%region_1264.27958
  %all-reduce.374 = f32[] all-reduce(%reduce.1232), channel_id=1177, replica_groups=[1,8]<=[8], use_global_device_ids=true, to_apply=%region_1264.27958.clone
  %convert_element_type.3617 = bf16[] convert(%all-reduce.374)
  %add.2701 = bf16[] add(%add.2700, %convert_element_type.3617)
  %dot.1324 = bf16[8,128,4096]{2,1,0} dot(%sharding_constraint.1009, %sharding_constraint.978), lhs_contracting_dims={0,1}, rhs_contracting_dims={0,1}
  %all-reduce.375 = bf16[8,128,4096]{2,1,0} all-reduce(%dot.1324), channel_id=1178, replica_groups=[1,8]<=[8], use_global_device_ids=true, to_apply=%add.124.clone
  %dynamic-slice.2429 = bf16[8,128,512]{2,1,0} dynamic-slice(%all-reduce.375, %constant.1181, %constant.1181, %reshape.13763), dynamic_slice_sizes={8,128,512}
  %transpose.424 = bf16[512,8,128]{0,2,1} transpose(%dynamic-slice.2429), dimensions={2,0,1}
  %mul.9755 = bf16[512,8,128]{0,2,1} multiply(%transpose.424, %transpose.424)
  %convert_element_type.3618 = f32[512,8,128]{0,2,1} convert(%mul.9755)
  %reduce.1233 = f32[] reduce(%convert_element_type.3618, %constant.1360), dimensions={0,1,2}, to_apply=%region_1265.27969
  %all-reduce.376 = f32[] all-reduce(%reduce.1233), channel_id=1179, replica_groups=[1,8]<=[8], use_global_device_ids=true, to_apply=%region_1265.27969.clone
  %convert_element_type.3619 = bf16[] convert(%all-reduce.376)
  %add.2702 = bf16[] add(%add.2701, %convert_element_type.3619)
  %dot.1325 = bf16[4096,8]{1,0} dot(%sharding_constraint.944, %sharding_constraint.963), lhs_contracting_dims={0,1}, rhs_contracting_dims={0,1}
  %all-reduce.377 = bf16[4096,8]{1,0} all-reduce(%dot.1325), channel_id=1180, replica_groups=[1,8]<=[8], use_global_device_ids=true, to_apply=%add.125.clone
  %dynamic-slice.2431 = bf16[512,8]{1,0} dynamic-slice(%all-reduce.377, %reshape.13763, %constant.1181), dynamic_slice_sizes={512,8}
  %mul.9756 = bf16[512,8]{1,0} multiply(%dynamic-slice.2431, %dynamic-slice.2431)
  %convert_element_type.3620 = f32[512,8]{1,0} convert(%mul.9756)
  %reduce.1234 = f32[] reduce(%convert_element_type.3620, %constant.1360), dimensions={0,1}, to_apply=%region_1266.27979
  %all-reduce.378 = f32[] all-reduce(%reduce.1234), channel_id=1181, replica_groups=[1,8]<=[8], use_global_device_ids=true, to_apply=%region_1266.27979.clone
  %convert_element_type.3621 = bf16[] convert(%all-reduce.378)
  %add.2703 = bf16[] add(%add.2702, %convert_element_type.3621)
  %dot.1326 = bf16[1,4096,14336]{2,1,0} dot(%sharding_constraint.949, %sharding_constraint.959), lhs_batch_dims={0}, lhs_contracting_dims={1,2}, rhs_batch_dims={0}, rhs_contracting_dims={1,2}
  %sharding_constraint.2543 = bf16[1,4096,14336]{2,1,0} copy(%dot.1326)
  %mul.9757 = bf16[1,4096,14336]{2,1,0} multiply(%sharding_constraint.2543, %sharding_constraint.2543)
  %convert_element_type.3623 = f32[1,4096,14336]{2,1,0} convert(%mul.9757)
  %reduce.1235 = f32[] reduce(%convert_element_type.3623, %constant.1360), dimensions={0,1,2}, to_apply=%region_1267.27990
  %all-reduce.379 = f32[] all-reduce(%reduce.1235), channel_id=1182, replica_groups=[1,8]<=[8], use_global_device_ids=true, to_apply=%region_1267.27990.clone
  %convert_element_type.3624 = bf16[] convert(%all-reduce.379)
  %add.2704 = bf16[] add(%add.2703, %convert_element_type.3624)
  %dot.1327 = bf16[1,4096,14336]{2,1,0} dot(%sharding_constraint.949, %sharding_constraint.956), lhs_batch_dims={0}, lhs_contracting_dims={1,2}, rhs_batch_dims={0}, rhs_contracting_dims={1,2}
  %sharding_constraint.2544 = bf16[1,4096,14336]{2,1,0} copy(%dot.1327)
  %mul.9759 = bf16[1,4096,14336]{2,1,0} multiply(%sharding_constraint.2544, %sharding_constraint.2544)
  %convert_element_type.3625 = f32[1,4096,14336]{2,1,0} convert(%mul.9759)
  %reduce.1236 = f32[] reduce(%convert_element_type.3625, %constant.1360), dimensions={0,1,2}, to_apply=%region_1268.28001
  %all-reduce.380 = f32[] all-reduce(%reduce.1236), channel_id=1183, replica_groups=[1,8]<=[8], use_global_device_ids=true, to_apply=%region_1268.28001.clone
  %convert_element_type.3626 = bf16[] convert(%all-reduce.380)
  %add.2705 = bf16[] add(%add.2704, %convert_element_type.3626)
  %dot.1328 = bf16[1,14336,4096]{2,1,0} dot(%mul.4513, %sharding_constraint.954), lhs_batch_dims={0}, lhs_contracting_dims={1,2}, rhs_batch_dims={0}, rhs_contracting_dims={1,2}
  %sharding_constraint.2545 = bf16[1,14336,4096]{2,1,0} copy(%dot.1328)
  %mul.9760 = bf16[1,14336,4096]{2,1,0} multiply(%sharding_constraint.2545, %sharding_constraint.2545)
  %convert_element_type.3627 = f32[1,14336,4096]{2,1,0} convert(%mul.9760)
  %reduce.1237 = f32[] reduce(%convert_element_type.3627, %constant.1360), dimensions={0,1,2}, to_apply=%region_1269.28012
  %all-reduce.381 = f32[] all-reduce(%reduce.1237), channel_id=1184, replica_groups=[1,8]<=[8], use_global_device_ids=true, to_apply=%region_1269.28012.clone
  %convert_element_type.3629 = bf16[] convert(%all-reduce.381)
  %add.2706 = bf16[] add(%add.2705, %convert_element_type.3629)
  %mul.9761 = bf16[1,4096,4096]{2,1,0} multiply(%convert_element_type.2020, %sharding_constraint.964)
  %reduce.1238 = bf16[4096]{0} reduce(%mul.9761, %constant.1190), dimensions={0,1}, to_apply=%region_1270.28020
  %all-reduce.382 = bf16[4096]{0} all-reduce(%reduce.1238), channel_id=1185, replica_groups=[1,8]<=[8], use_global_device_ids=true, to_apply=%region_1270.28020.clone
  %mul.9762 = bf16[4096]{0} multiply(%all-reduce.382, %all-reduce.382)
  %convert_element_type.3630 = f32[4096]{0} convert(%mul.9762)
  %reduce.1239 = f32[] reduce(%convert_element_type.3630, %constant.1360), dimensions={0}, to_apply=%region_1271.28027
  %convert_element_type.3631 = bf16[] convert(%reduce.1239)
  %add.2707 = bf16[] add(%add.2706, %convert_element_type.3631)
  %mul.9763 = bf16[1,4096,4096]{2,1,0} multiply(%convert_element_type.2007, %sharding_constraint.973)
  %reduce.1240 = bf16[4096]{0} reduce(%mul.9763, %constant.1190), dimensions={0,1}, to_apply=%region_1272.28035
  %all-reduce.383 = bf16[4096]{0} all-reduce(%reduce.1240), channel_id=1186, replica_groups=[1,8]<=[8], use_global_device_ids=true, to_apply=%region_1272.28035.clone
  %mul.9765 = bf16[4096]{0} multiply(%all-reduce.383, %all-reduce.383)
  %convert_element_type.3632 = f32[4096]{0} convert(%mul.9765)
  %reduce.1241 = f32[] reduce(%convert_element_type.3632, %constant.1360), dimensions={0}, to_apply=%region_1273.28042
  %convert_element_type.3633 = bf16[] convert(%reduce.1241)
  %add.2708 = bf16[] add(%add.2707, %convert_element_type.3633)
  %dot.1329 = bf16[8,128,4096]{2,1,0} dot(%concatenate.270, %sharding_constraint.937), lhs_contracting_dims={0,1}, rhs_contracting_dims={0,1}
  %all-reduce.384 = bf16[8,128,4096]{2,1,0} all-reduce(%dot.1329), channel_id=1187, replica_groups=[1,8]<=[8], use_global_device_ids=true, to_apply=%add.126.clone
  %dynamic-slice.2433 = bf16[8,128,512]{2,1,0} dynamic-slice(%all-reduce.384, %constant.1181, %constant.1181, %reshape.13763), dynamic_slice_sizes={8,128,512}
  %transpose.425 = bf16[512,8,128]{0,2,1} transpose(%dynamic-slice.2433), dimensions={2,0,1}
  %mul.9766 = bf16[512,8,128]{0,2,1} multiply(%transpose.425, %transpose.425)
  %convert_element_type.3634 = f32[512,8,128]{0,2,1} convert(%mul.9766)
  %reduce.1242 = f32[] reduce(%convert_element_type.3634, %constant.1360), dimensions={0,1,2}, to_apply=%region_1274.28053
  %all-reduce.385 = f32[] all-reduce(%reduce.1242), channel_id=1188, replica_groups=[1,8]<=[8], use_global_device_ids=true, to_apply=%region_1274.28053.clone
  %convert_element_type.3635 = bf16[] convert(%all-reduce.385)
  %add.2709 = bf16[] add(%add.2708, %convert_element_type.3635)
  %dot.1330 = bf16[4096,32,128]{2,1,0} dot(%sharding_constraint.966, %sharding_constraint.942), lhs_contracting_dims={0,1}, rhs_contracting_dims={0,1}
  %all-reduce.386 = bf16[4096,32,128]{2,1,0} all-reduce(%dot.1330), channel_id=1189, replica_groups=[1,8]<=[8], use_global_device_ids=true, to_apply=%add.127.clone
  %dynamic-slice.2435 = bf16[512,32,128]{2,1,0} dynamic-slice(%all-reduce.386, %reshape.13763, %constant.1181, %constant.1181), dynamic_slice_sizes={512,32,128}
  %transpose.426 = bf16[32,128,512]{1,0,2} transpose(%dynamic-slice.2435), dimensions={1,2,0}
  %mul.9767 = bf16[32,128,512]{1,0,2} multiply(%transpose.426, %transpose.426)
  %convert_element_type.3636 = f32[32,128,512]{1,0,2} convert(%mul.9767)
  %reduce.1243 = f32[] reduce(%convert_element_type.3636, %constant.1360), dimensions={0,1,2}, to_apply=%region_1275.28064
  %all-reduce.387 = f32[] all-reduce(%reduce.1243), channel_id=1190, replica_groups=[1,8]<=[8], use_global_device_ids=true, to_apply=%region_1275.28064.clone
  %convert_element_type.3637 = bf16[] convert(%all-reduce.387)
  %add.2710 = bf16[] add(%add.2709, %convert_element_type.3637)
  %dot.1331 = bf16[32,128,4096]{2,1,0} dot(%concatenate.271, %sharding_constraint.937), lhs_contracting_dims={0,1}, rhs_contracting_dims={0,1}
  %all-reduce.388 = bf16[32,128,4096]{2,1,0} all-reduce(%dot.1331), channel_id=1191, replica_groups=[1,8]<=[8], use_global_device_ids=true, to_apply=%add.128.clone
  %dynamic-slice.2437 = bf16[32,128,512]{2,1,0} dynamic-slice(%all-reduce.388, %constant.1181, %constant.1181, %reshape.13763), dynamic_slice_sizes={32,128,512}
  %transpose.427 = bf16[512,32,128]{0,2,1} transpose(%dynamic-slice.2437), dimensions={2,0,1}
  %mul.9768 = bf16[512,32,128]{0,2,1} multiply(%transpose.427, %transpose.427)
  %convert_element_type.3638 = f32[512,32,128]{0,2,1} convert(%mul.9768)
  %reduce.1244 = f32[] reduce(%convert_element_type.3638, %constant.1360), dimensions={0,1,2}, to_apply=%region_1276.28075
  %all-reduce.389 = f32[] all-reduce(%reduce.1244), channel_id=1192, replica_groups=[1,8]<=[8], use_global_device_ids=true, to_apply=%region_1276.28075.clone
  %convert_element_type.3639 = bf16[] convert(%all-reduce.389)
  %add.2711 = bf16[] add(%add.2710, %convert_element_type.3639)
  %dot.1332 = bf16[8,128,4096]{2,1,0} dot(%sharding_constraint.968, %sharding_constraint.937), lhs_contracting_dims={0,1}, rhs_contracting_dims={0,1}
  %all-reduce.390 = bf16[8,128,4096]{2,1,0} all-reduce(%dot.1332), channel_id=1193, replica_groups=[1,8]<=[8], use_global_device_ids=true, to_apply=%add.129.clone
  %dynamic-slice.2439 = bf16[8,128,512]{2,1,0} dynamic-slice(%all-reduce.390, %constant.1181, %constant.1181, %reshape.13763), dynamic_slice_sizes={8,128,512}
  %transpose.428 = bf16[512,8,128]{0,2,1} transpose(%dynamic-slice.2439), dimensions={2,0,1}
  %mul.9769 = bf16[512,8,128]{0,2,1} multiply(%transpose.428, %transpose.428)
  %convert_element_type.3640 = f32[512,8,128]{0,2,1} convert(%mul.9769)
  %reduce.1245 = f32[] reduce(%convert_element_type.3640, %constant.1360), dimensions={0,1,2}, to_apply=%region_1277.28086
  %all-reduce.391 = f32[] all-reduce(%reduce.1245), channel_id=1194, replica_groups=[1,8]<=[8], use_global_device_ids=true, to_apply=%region_1277.28086.clone
  %convert_element_type.3641 = bf16[] convert(%all-reduce.391)
  %add.2712 = bf16[] add(%add.2711, %convert_element_type.3641)
  %dot.1333 = bf16[4096,8]{1,0} dot(%sharding_constraint.2224, %sharding_constraint.2246), lhs_contracting_dims={0,1}, rhs_contracting_dims={0,1}
  %all-reduce.392 = bf16[4096,8]{1,0} all-reduce(%dot.1333), channel_id=1195, replica_groups=[1,8]<=[8], use_global_device_ids=true, to_apply=%add.130.clone
  %dynamic-slice.2441 = bf16[512,8]{1,0} dynamic-slice(%all-reduce.392, %reshape.13763, %constant.1181), dynamic_slice_sizes={512,8}
  %mul.9770 = bf16[512,8]{1,0} multiply(%dynamic-slice.2441, %dynamic-slice.2441)
  %convert_element_type.3642 = f32[512,8]{1,0} convert(%mul.9770)
  %reduce.1246 = f32[] reduce(%convert_element_type.3642, %constant.1360), dimensions={0,1}, to_apply=%region_1278.28096
  %all-reduce.393 = f32[] all-reduce(%reduce.1246), channel_id=1196, replica_groups=[1,8]<=[8], use_global_device_ids=true, to_apply=%region_1278.28096.clone
  %convert_element_type.3643 = bf16[] convert(%all-reduce.393)
  %add.2713 = bf16[] add(%add.2712, %convert_element_type.3643)
  %dot.1334 = bf16[1,4096,14336]{2,1,0} dot(%sharding_constraint.2229, %sharding_constraint.2242), lhs_batch_dims={0}, lhs_contracting_dims={1,2}, rhs_batch_dims={0}, rhs_contracting_dims={1,2}
  %sharding_constraint.2546 = bf16[1,4096,14336]{2,1,0} copy(%dot.1334)
  %mul.9771 = bf16[1,4096,14336]{2,1,0} multiply(%sharding_constraint.2546, %sharding_constraint.2546)
  %convert_element_type.3644 = f32[1,4096,14336]{2,1,0} convert(%mul.9771)
  %reduce.1247 = f32[] reduce(%convert_element_type.3644, %constant.1360), dimensions={0,1,2}, to_apply=%region_1279.28107
  %all-reduce.394 = f32[] all-reduce(%reduce.1247), channel_id=1197, replica_groups=[1,8]<=[8], use_global_device_ids=true, to_apply=%region_1279.28107.clone
  %convert_element_type.3646 = bf16[] convert(%all-reduce.394)
  %add.2714 = bf16[] add(%add.2713, %convert_element_type.3646)
  %dot.1335 = bf16[1,4096,14336]{2,1,0} dot(%sharding_constraint.2229, %sharding_constraint.2239), lhs_batch_dims={0}, lhs_contracting_dims={1,2}, rhs_batch_dims={0}, rhs_contracting_dims={1,2}
  %sharding_constraint.2547 = bf16[1,4096,14336]{2,1,0} copy(%dot.1335)
  %mul.9772 = bf16[1,4096,14336]{2,1,0} multiply(%sharding_constraint.2547, %sharding_constraint.2547)
  %convert_element_type.3647 = f32[1,4096,14336]{2,1,0} convert(%mul.9772)
  %reduce.1248 = f32[] reduce(%convert_element_type.3647, %constant.1360), dimensions={0,1,2}, to_apply=%region_1280.28118
  %all-reduce.395 = f32[] all-reduce(%reduce.1248), channel_id=1198, replica_groups=[1,8]<=[8], use_global_device_ids=true, to_apply=%region_1280.28118.clone
  %convert_element_type.3648 = bf16[] convert(%all-reduce.395)
  %add.2715 = bf16[] add(%add.2714, %convert_element_type.3648)
  %dot.1336 = bf16[1,14336,4096]{2,1,0} dot(%mul.8650, %sharding_constraint.2237), lhs_batch_dims={0}, lhs_contracting_dims={1,2}, rhs_batch_dims={0}, rhs_contracting_dims={1,2}
  %sharding_constraint.2548 = bf16[1,14336,4096]{2,1,0} copy(%dot.1336)
  %mul.9781 = bf16[1,14336,4096]{2,1,0} multiply(%sharding_constraint.2548, %sharding_constraint.2548)
  %convert_element_type.3649 = f32[1,14336,4096]{2,1,0} convert(%mul.9781)
  %reduce.1249 = f32[] reduce(%convert_element_type.3649, %constant.1360), dimensions={0,1,2}, to_apply=%region_1281.28129
  %all-reduce.396 = f32[] all-reduce(%reduce.1249), channel_id=1199, replica_groups=[1,8]<=[8], use_global_device_ids=true, to_apply=%region_1281.28129.clone
  %convert_element_type.3650 = bf16[] convert(%all-reduce.396)
  %add.2716 = bf16[] add(%add.2715, %convert_element_type.3650)
  %mul.9790 = bf16[1,4096,4096]{2,1,0} multiply(%convert_element_type.2898, %sharding_constraint.2247)
  %reduce.1250 = bf16[4096]{0} reduce(%mul.9790, %constant.1190), dimensions={0,1}, to_apply=%region_1282.28137
  %all-reduce.397 = bf16[4096]{0} all-reduce(%reduce.1250), channel_id=1200, replica_groups=[1,8]<=[8], use_global_device_ids=true, to_apply=%region_1282.28137.clone
  %mul.9791 = bf16[4096]{0} multiply(%all-reduce.397, %all-reduce.397)
  %convert_element_type.3651 = f32[4096]{0} convert(%mul.9791)
  %reduce.1251 = f32[] reduce(%convert_element_type.3651, %constant.1360), dimensions={0}, to_apply=%region_1283.28144
  %convert_element_type.3652 = bf16[] convert(%reduce.1251)
  %add.2717 = bf16[] add(%add.2716, %convert_element_type.3652)
  %mul.9792 = bf16[1,4096,4096]{2,1,0} multiply(%convert_element_type.2885, %sharding_constraint.2258)
  %reduce.1252 = bf16[4096]{0} reduce(%mul.9792, %constant.1190), dimensions={0,1}, to_apply=%region_1284.28152
  %all-reduce.398 = bf16[4096]{0} all-reduce(%reduce.1252), channel_id=1201, replica_groups=[1,8]<=[8], use_global_device_ids=true, to_apply=%region_1284.28152.clone
  %mul.9793 = bf16[4096]{0} multiply(%all-reduce.398, %all-reduce.398)
  %convert_element_type.3653 = f32[4096]{0} convert(%mul.9793)
  %reduce.1253 = f32[] reduce(%convert_element_type.3653, %constant.1360), dimensions={0}, to_apply=%region_1285.28159
  %convert_element_type.3654 = bf16[] convert(%reduce.1253)
  %add.2718 = bf16[] add(%add.2717, %convert_element_type.3654)
  %dot.1337 = bf16[8,128,4096]{2,1,0} dot(%concatenate.621, %sharding_constraint.2215), lhs_contracting_dims={0,1}, rhs_contracting_dims={0,1}
  %all-reduce.399 = bf16[8,128,4096]{2,1,0} all-reduce(%dot.1337), channel_id=1202, replica_groups=[1,8]<=[8], use_global_device_ids=true, to_apply=%add.131.clone
  %dynamic-slice.2443 = bf16[8,128,512]{2,1,0} dynamic-slice(%all-reduce.399, %constant.1181, %constant.1181, %reshape.13763), dynamic_slice_sizes={8,128,512}
  %transpose.429 = bf16[512,8,128]{0,2,1} transpose(%dynamic-slice.2443), dimensions={2,0,1}
  %mul.9795 = bf16[512,8,128]{0,2,1} multiply(%transpose.429, %transpose.429)
  %convert_element_type.3656 = f32[512,8,128]{0,2,1} convert(%mul.9795)
  %reduce.1254 = f32[] reduce(%convert_element_type.3656, %constant.1360), dimensions={0,1,2}, to_apply=%region_1286.28170
  %all-reduce.400 = f32[] all-reduce(%reduce.1254), channel_id=1203, replica_groups=[1,8]<=[8], use_global_device_ids=true, to_apply=%region_1286.28170.clone
  %convert_element_type.3657 = bf16[] convert(%all-reduce.400)
  %add.2719 = bf16[] add(%add.2718, %convert_element_type.3657)
  %dot.1338 = bf16[4096,32,128]{2,1,0} dot(%sharding_constraint.2249, %sharding_constraint.2222), lhs_contracting_dims={0,1}, rhs_contracting_dims={0,1}
  %all-reduce.401 = bf16[4096,32,128]{2,1,0} all-reduce(%dot.1338), channel_id=1204, replica_groups=[1,8]<=[8], use_global_device_ids=true, to_apply=%add.132.clone
  %dynamic-slice.2445 = bf16[512,32,128]{2,1,0} dynamic-slice(%all-reduce.401, %reshape.13763, %constant.1181, %constant.1181), dynamic_slice_sizes={512,32,128}
  %transpose.430 = bf16[32,128,512]{1,0,2} transpose(%dynamic-slice.2445), dimensions={1,2,0}
  %mul.9796 = bf16[32,128,512]{1,0,2} multiply(%transpose.430, %transpose.430)
  %convert_element_type.3658 = f32[32,128,512]{1,0,2} convert(%mul.9796)
  %reduce.1255 = f32[] reduce(%convert_element_type.3658, %constant.1360), dimensions={0,1,2}, to_apply=%region_1287.28181
  %all-reduce.402 = f32[] all-reduce(%reduce.1255), channel_id=1205, replica_groups=[1,8]<=[8], use_global_device_ids=true, to_apply=%region_1287.28181.clone
  %convert_element_type.3659 = bf16[] convert(%all-reduce.402)
  %add.2720 = bf16[] add(%add.2719, %convert_element_type.3659)
  %dot.1339 = bf16[32,128,4096]{2,1,0} dot(%concatenate.622, %sharding_constraint.2215), lhs_contracting_dims={0,1}, rhs_contracting_dims={0,1}
  %all-reduce.403 = bf16[32,128,4096]{2,1,0} all-reduce(%dot.1339), channel_id=1206, replica_groups=[1,8]<=[8], use_global_device_ids=true, to_apply=%add.133.clone
  %dynamic-slice.2447 = bf16[32,128,512]{2,1,0} dynamic-slice(%all-reduce.403, %constant.1181, %constant.1181, %reshape.13763), dynamic_slice_sizes={32,128,512}
  %transpose.431 = bf16[512,32,128]{0,2,1} transpose(%dynamic-slice.2447), dimensions={2,0,1}
  %mul.9797 = bf16[512,32,128]{0,2,1} multiply(%transpose.431, %transpose.431)
  %convert_element_type.3661 = f32[512,32,128]{0,2,1} convert(%mul.9797)
  %reduce.1256 = f32[] reduce(%convert_element_type.3661, %constant.1360), dimensions={0,1,2}, to_apply=%region_1288.28192
  %all-reduce.404 = f32[] all-reduce(%reduce.1256), channel_id=1207, replica_groups=[1,8]<=[8], use_global_device_ids=true, to_apply=%region_1288.28192.clone
  %convert_element_type.3662 = bf16[] convert(%all-reduce.404)
  %add.2721 = bf16[] add(%add.2720, %convert_element_type.3662)
  %dot.1340 = bf16[8,128,4096]{2,1,0} dot(%sharding_constraint.2251, %sharding_constraint.2215), lhs_contracting_dims={0,1}, rhs_contracting_dims={0,1}
  %all-reduce.405 = bf16[8,128,4096]{2,1,0} all-reduce(%dot.1340), channel_id=1208, replica_groups=[1,8]<=[8], use_global_device_ids=true, to_apply=%add.134.clone
  %dynamic-slice.2449 = bf16[8,128,512]{2,1,0} dynamic-slice(%all-reduce.405, %constant.1181, %constant.1181, %reshape.13763), dynamic_slice_sizes={8,128,512}
  %transpose.432 = bf16[512,8,128]{0,2,1} transpose(%dynamic-slice.2449), dimensions={2,0,1}
  %mul.9798 = bf16[512,8,128]{0,2,1} multiply(%transpose.432, %transpose.432)
  %convert_element_type.3663 = f32[512,8,128]{0,2,1} convert(%mul.9798)
  %reduce.1257 = f32[] reduce(%convert_element_type.3663, %constant.1360), dimensions={0,1,2}, to_apply=%region_1289.28203
  %all-reduce.406 = f32[] all-reduce(%reduce.1257), channel_id=1209, replica_groups=[1,8]<=[8], use_global_device_ids=true, to_apply=%region_1289.28203.clone
  %convert_element_type.3665 = bf16[] convert(%all-reduce.406)
  %add.2722 = bf16[] add(%add.2721, %convert_element_type.3665)
  %dot.1341 = bf16[4096,8]{1,0} dot(%sharding_constraint.2169, %sharding_constraint.2194), lhs_contracting_dims={0,1}, rhs_contracting_dims={0,1}
  %all-reduce.407 = bf16[4096,8]{1,0} all-reduce(%dot.1341), channel_id=1210, replica_groups=[1,8]<=[8], use_global_device_ids=true, to_apply=%add.135.clone
  %dynamic-slice.2451 = bf16[512,8]{1,0} dynamic-slice(%all-reduce.407, %reshape.13763, %constant.1181), dynamic_slice_sizes={512,8}
  %mul.9799 = bf16[512,8]{1,0} multiply(%dynamic-slice.2451, %dynamic-slice.2451)
  %convert_element_type.3666 = f32[512,8]{1,0} convert(%mul.9799)
  %reduce.1258 = f32[] reduce(%convert_element_type.3666, %constant.1360), dimensions={0,1}, to_apply=%region_1290.28213
  %all-reduce.408 = f32[] all-reduce(%reduce.1258), channel_id=1211, replica_groups=[1,8]<=[8], use_global_device_ids=true, to_apply=%region_1290.28213.clone
  %convert_element_type.3667 = bf16[] convert(%all-reduce.408)
  %add.2723 = bf16[] add(%add.2722, %convert_element_type.3667)
  %dot.1342 = bf16[1,4096,14336]{2,1,0} dot(%sharding_constraint.2174, %sharding_constraint.2189), lhs_batch_dims={0}, lhs_contracting_dims={1,2}, rhs_batch_dims={0}, rhs_contracting_dims={1,2}
  %sharding_constraint.2549 = bf16[1,4096,14336]{2,1,0} copy(%dot.1342)
  %mul.9800 = bf16[1,4096,14336]{2,1,0} multiply(%sharding_constraint.2549, %sharding_constraint.2549)
  %convert_element_type.3668 = f32[1,4096,14336]{2,1,0} convert(%mul.9800)
  %reduce.1259 = f32[] reduce(%convert_element_type.3668, %constant.1360), dimensions={0,1,2}, to_apply=%region_1291.28224
  %all-reduce.409 = f32[] all-reduce(%reduce.1259), channel_id=1212, replica_groups=[1,8]<=[8], use_global_device_ids=true, to_apply=%region_1291.28224.clone
  %convert_element_type.3669 = bf16[] convert(%all-reduce.409)
  %add.2724 = bf16[] add(%add.2723, %convert_element_type.3669)
  %dot.1343 = bf16[1,4096,14336]{2,1,0} dot(%sharding_constraint.2174, %sharding_constraint.2183), lhs_batch_dims={0}, lhs_contracting_dims={1,2}, rhs_batch_dims={0}, rhs_contracting_dims={1,2}
  %sharding_constraint.2550 = bf16[1,4096,14336]{2,1,0} copy(%dot.1343)
  %mul.9801 = bf16[1,4096,14336]{2,1,0} multiply(%sharding_constraint.2550, %sharding_constraint.2550)
  %convert_element_type.3670 = f32[1,4096,14336]{2,1,0} convert(%mul.9801)
  %reduce.1260 = f32[] reduce(%convert_element_type.3670, %constant.1360), dimensions={0,1,2}, to_apply=%region_1292.28235
  %all-reduce.410 = f32[] all-reduce(%reduce.1260), channel_id=1213, replica_groups=[1,8]<=[8], use_global_device_ids=true, to_apply=%region_1292.28235.clone
  %convert_element_type.3671 = bf16[] convert(%all-reduce.410)
  %add.2725 = bf16[] add(%add.2724, %convert_element_type.3671)
  %dot.1344 = bf16[1,14336,4096]{2,1,0} dot(%mul.8487, %sharding_constraint.2181), lhs_batch_dims={0}, lhs_contracting_dims={1,2}, rhs_batch_dims={0}, rhs_contracting_dims={1,2}
  %sharding_constraint.2551 = bf16[1,14336,4096]{2,1,0} copy(%dot.1344)
  %mul.9802 = bf16[1,14336,4096]{2,1,0} multiply(%sharding_constraint.2551, %sharding_constraint.2551)
  %convert_element_type.3672 = f32[1,14336,4096]{2,1,0} convert(%mul.9802)
  %reduce.1261 = f32[] reduce(%convert_element_type.3672, %constant.1360), dimensions={0,1,2}, to_apply=%region_1293.28246
  %all-reduce.411 = f32[] all-reduce(%reduce.1261), channel_id=1214, replica_groups=[1,8]<=[8], use_global_device_ids=true, to_apply=%region_1293.28246.clone
  %convert_element_type.3673 = bf16[] convert(%all-reduce.411)
  %add.2726 = bf16[] add(%add.2725, %convert_element_type.3673)
  %mul.9806 = bf16[1,4096,4096]{2,1,0} multiply(%convert_element_type.2865, %sharding_constraint.2196)
  %reduce.1262 = bf16[4096]{0} reduce(%mul.9806, %constant.1190), dimensions={0,1}, to_apply=%region_1294.28254
  %all-reduce.412 = bf16[4096]{0} all-reduce(%reduce.1262), channel_id=1215, replica_groups=[1,8]<=[8], use_global_device_ids=true, to_apply=%region_1294.28254.clone
  %mul.9807 = bf16[4096]{0} multiply(%all-reduce.412, %all-reduce.412)
  %convert_element_type.3674 = f32[4096]{0} convert(%mul.9807)
  %reduce.1263 = f32[] reduce(%convert_element_type.3674, %constant.1360), dimensions={0}, to_apply=%region_1295.28261
  %convert_element_type.3676 = bf16[] convert(%reduce.1263)
  %add.2727 = bf16[] add(%add.2726, %convert_element_type.3676)
  %mul.9808 = bf16[1,4096,4096]{2,1,0} multiply(%convert_element_type.2853, %sharding_constraint.2210)
  %reduce.1264 = bf16[4096]{0} reduce(%mul.9808, %constant.1190), dimensions={0,1}, to_apply=%region_1296.28269
  %all-reduce.413 = bf16[4096]{0} all-reduce(%reduce.1264), channel_id=1216, replica_groups=[1,8]<=[8], use_global_device_ids=true, to_apply=%region_1296.28269.clone
  %mul.9809 = bf16[4096]{0} multiply(%all-reduce.413, %all-reduce.413)
  %convert_element_type.3677 = f32[4096]{0} convert(%mul.9809)
  %reduce.1265 = f32[] reduce(%convert_element_type.3677, %constant.1360), dimensions={0}, to_apply=%region_1297.28276
  %convert_element_type.3679 = bf16[] convert(%reduce.1265)
  %add.2728 = bf16[] add(%add.2727, %convert_element_type.3679)
  %dot.1345 = bf16[8,128,4096]{2,1,0} dot(%concatenate.608, %sharding_constraint.2162), lhs_contracting_dims={0,1}, rhs_contracting_dims={0,1}
  %all-reduce.414 = bf16[8,128,4096]{2,1,0} all-reduce(%dot.1345), channel_id=1217, replica_groups=[1,8]<=[8], use_global_device_ids=true, to_apply=%add.136.clone
  %dynamic-slice.2453 = bf16[8,128,512]{2,1,0} dynamic-slice(%all-reduce.414, %constant.1181, %constant.1181, %reshape.13763), dynamic_slice_sizes={8,128,512}
  %transpose.433 = bf16[512,8,128]{0,2,1} transpose(%dynamic-slice.2453), dimensions={2,0,1}
  %mul.9810 = bf16[512,8,128]{0,2,1} multiply(%transpose.433, %transpose.433)
  %convert_element_type.3680 = f32[512,8,128]{0,2,1} convert(%mul.9810)
  %reduce.1266 = f32[] reduce(%convert_element_type.3680, %constant.1360), dimensions={0,1,2}, to_apply=%region_1298.28287
  %all-reduce.415 = f32[] all-reduce(%reduce.1266), channel_id=1218, replica_groups=[1,8]<=[8], use_global_device_ids=true, to_apply=%region_1298.28287.clone
  %convert_element_type.3681 = bf16[] convert(%all-reduce.415)
  %add.2729 = bf16[] add(%add.2728, %convert_element_type.3681)
  %dot.1346 = bf16[4096,32,128]{2,1,0} dot(%sharding_constraint.2200, %sharding_constraint.2167), lhs_contracting_dims={0,1}, rhs_contracting_dims={0,1}
  %all-reduce.416 = bf16[4096,32,128]{2,1,0} all-reduce(%dot.1346), channel_id=1219, replica_groups=[1,8]<=[8], use_global_device_ids=true, to_apply=%add.137.clone
  %dynamic-slice.2455 = bf16[512,32,128]{2,1,0} dynamic-slice(%all-reduce.416, %reshape.13763, %constant.1181, %constant.1181), dynamic_slice_sizes={512,32,128}
  %transpose.434 = bf16[32,128,512]{1,0,2} transpose(%dynamic-slice.2455), dimensions={1,2,0}
  %mul.9811 = bf16[32,128,512]{1,0,2} multiply(%transpose.434, %transpose.434)
  %convert_element_type.3682 = f32[32,128,512]{1,0,2} convert(%mul.9811)
  %reduce.1267 = f32[] reduce(%convert_element_type.3682, %constant.1360), dimensions={0,1,2}, to_apply=%region_1299.28298
  %all-reduce.417 = f32[] all-reduce(%reduce.1267), channel_id=1220, replica_groups=[1,8]<=[8], use_global_device_ids=true, to_apply=%region_1299.28298.clone
  %convert_element_type.3683 = bf16[] convert(%all-reduce.417)
  %add.2731 = bf16[] add(%add.2729, %convert_element_type.3683)
  %dot.1347 = bf16[32,128,4096]{2,1,0} dot(%concatenate.609, %sharding_constraint.2162), lhs_contracting_dims={0,1}, rhs_contracting_dims={0,1}
  %all-reduce.418 = bf16[32,128,4096]{2,1,0} all-reduce(%dot.1347), channel_id=1221, replica_groups=[1,8]<=[8], use_global_device_ids=true, to_apply=%add.138.clone
  %dynamic-slice.2457 = bf16[32,128,512]{2,1,0} dynamic-slice(%all-reduce.418, %constant.1181, %constant.1181, %reshape.13763), dynamic_slice_sizes={32,128,512}
  %transpose.435 = bf16[512,32,128]{0,2,1} transpose(%dynamic-slice.2457), dimensions={2,0,1}
  %mul.9812 = bf16[512,32,128]{0,2,1} multiply(%transpose.435, %transpose.435)
  %convert_element_type.3685 = f32[512,32,128]{0,2,1} convert(%mul.9812)
  %reduce.1268 = f32[] reduce(%convert_element_type.3685, %constant.1360), dimensions={0,1,2}, to_apply=%region_1300.28309
  %all-reduce.419 = f32[] all-reduce(%reduce.1268), channel_id=1222, replica_groups=[1,8]<=[8], use_global_device_ids=true, to_apply=%region_1300.28309.clone
  %convert_element_type.3686 = bf16[] convert(%all-reduce.419)
  %add.2733 = bf16[] add(%add.2731, %convert_element_type.3686)
  %dot.1348 = bf16[8,128,4096]{2,1,0} dot(%sharding_constraint.2205, %sharding_constraint.2162), lhs_contracting_dims={0,1}, rhs_contracting_dims={0,1}
  %all-reduce.420 = bf16[8,128,4096]{2,1,0} all-reduce(%dot.1348), channel_id=1223, replica_groups=[1,8]<=[8], use_global_device_ids=true, to_apply=%add.139.clone
  %dynamic-slice.2459 = bf16[8,128,512]{2,1,0} dynamic-slice(%all-reduce.420, %constant.1181, %constant.1181, %reshape.13763), dynamic_slice_sizes={8,128,512}
  %transpose.436 = bf16[512,8,128]{0,2,1} transpose(%dynamic-slice.2459), dimensions={2,0,1}
  %mul.9821 = bf16[512,8,128]{0,2,1} multiply(%transpose.436, %transpose.436)
  %convert_element_type.3687 = f32[512,8,128]{0,2,1} convert(%mul.9821)
  %reduce.1269 = f32[] reduce(%convert_element_type.3687, %constant.1360), dimensions={0,1,2}, to_apply=%region_1301.28320
  %all-reduce.421 = f32[] all-reduce(%reduce.1269), channel_id=1224, replica_groups=[1,8]<=[8], use_global_device_ids=true, to_apply=%region_1301.28320.clone
  %convert_element_type.3689 = bf16[] convert(%all-reduce.421)
  %add.2734 = bf16[] add(%add.2733, %convert_element_type.3689)
  %dot.1349 = bf16[4096,8]{1,0} dot(%sharding_constraint.2120, %sharding_constraint.2142), lhs_contracting_dims={0,1}, rhs_contracting_dims={0,1}
  %all-reduce.422 = bf16[4096,8]{1,0} all-reduce(%dot.1349), channel_id=1225, replica_groups=[1,8]<=[8], use_global_device_ids=true, to_apply=%add.140.clone
  %dynamic-slice.2461 = bf16[512,8]{1,0} dynamic-slice(%all-reduce.422, %reshape.13763, %constant.1181), dynamic_slice_sizes={512,8}
  %mul.9830 = bf16[512,8]{1,0} multiply(%dynamic-slice.2461, %dynamic-slice.2461)
  %convert_element_type.3691 = f32[512,8]{1,0} convert(%mul.9830)
  %reduce.1270 = f32[] reduce(%convert_element_type.3691, %constant.1360), dimensions={0,1}, to_apply=%region_1302.28330
  %all-reduce.423 = f32[] all-reduce(%reduce.1270), channel_id=1226, replica_groups=[1,8]<=[8], use_global_device_ids=true, to_apply=%region_1302.28330.clone
  %convert_element_type.3692 = bf16[] convert(%all-reduce.423)
  %add.2735 = bf16[] add(%add.2734, %convert_element_type.3692)
  %dot.1350 = bf16[1,4096,14336]{2,1,0} dot(%sharding_constraint.2128, %sharding_constraint.2138), lhs_batch_dims={0}, lhs_contracting_dims={1,2}, rhs_batch_dims={0}, rhs_contracting_dims={1,2}
  %sharding_constraint.2552 = bf16[1,4096,14336]{2,1,0} copy(%dot.1350)
  %mul.9831 = bf16[1,4096,14336]{2,1,0} multiply(%sharding_constraint.2552, %sharding_constraint.2552)
  %convert_element_type.3693 = f32[1,4096,14336]{2,1,0} convert(%mul.9831)
  %reduce.1271 = f32[] reduce(%convert_element_type.3693, %constant.1360), dimensions={0,1,2}, to_apply=%region_1303.28341
  %all-reduce.424 = f32[] all-reduce(%reduce.1271), channel_id=1227, replica_groups=[1,8]<=[8], use_global_device_ids=true, to_apply=%region_1303.28341.clone
  %convert_element_type.3694 = bf16[] convert(%all-reduce.424)
  %add.2736 = bf16[] add(%add.2735, %convert_element_type.3694)
  %dot.1351 = bf16[1,4096,14336]{2,1,0} dot(%sharding_constraint.2128, %sharding_constraint.2135), lhs_batch_dims={0}, lhs_contracting_dims={1,2}, rhs_batch_dims={0}, rhs_contracting_dims={1,2}
  %sharding_constraint.2553 = bf16[1,4096,14336]{2,1,0} copy(%dot.1351)
  %mul.9832 = bf16[1,4096,14336]{2,1,0} multiply(%sharding_constraint.2553, %sharding_constraint.2553)
  %convert_element_type.3695 = f32[1,4096,14336]{2,1,0} convert(%mul.9832)
  %reduce.1272 = f32[] reduce(%convert_element_type.3695, %constant.1360), dimensions={0,1,2}, to_apply=%region_1304.28352
  %all-reduce.425 = f32[] all-reduce(%reduce.1272), channel_id=1228, replica_groups=[1,8]<=[8], use_global_device_ids=true, to_apply=%region_1304.28352.clone
  %convert_element_type.3697 = bf16[] convert(%all-reduce.425)
  %add.2737 = bf16[] add(%add.2736, %convert_element_type.3697)
  %dot.1352 = bf16[1,14336,4096]{2,1,0} dot(%mul.8346, %sharding_constraint.2133), lhs_batch_dims={0}, lhs_contracting_dims={1,2}, rhs_batch_dims={0}, rhs_contracting_dims={1,2}
  %sharding_constraint.2554 = bf16[1,14336,4096]{2,1,0} copy(%dot.1352)
  %mul.9833 = bf16[1,14336,4096]{2,1,0} multiply(%sharding_constraint.2554, %sharding_constraint.2554)
  %convert_element_type.3698 = f32[1,14336,4096]{2,1,0} convert(%mul.9833)
  %reduce.1273 = f32[] reduce(%convert_element_type.3698, %constant.1360), dimensions={0,1,2}, to_apply=%region_1305.28363
  %all-reduce.426 = f32[] all-reduce(%reduce.1273), channel_id=1229, replica_groups=[1,8]<=[8], use_global_device_ids=true, to_apply=%region_1305.28363.clone
  %convert_element_type.3699 = bf16[] convert(%all-reduce.426)
  %add.2738 = bf16[] add(%add.2737, %convert_element_type.3699)
  %mul.9834 = bf16[1,4096,4096]{2,1,0} multiply(%convert_element_type.2835, %sharding_constraint.2143)
  %reduce.1274 = bf16[4096]{0} reduce(%mul.9834, %constant.1190), dimensions={0,1}, to_apply=%region_1306.28371
  %all-reduce.427 = bf16[4096]{0} all-reduce(%reduce.1274), channel_id=1230, replica_groups=[1,8]<=[8], use_global_device_ids=true, to_apply=%region_1306.28371.clone
  %mul.9835 = bf16[4096]{0} multiply(%all-reduce.427, %all-reduce.427)
  %convert_element_type.3700 = f32[4096]{0} convert(%mul.9835)
  %reduce.1275 = f32[] reduce(%convert_element_type.3700, %constant.1360), dimensions={0}, to_apply=%region_1307.28378
  %convert_element_type.3701 = bf16[] convert(%reduce.1275)
  %add.2739 = bf16[] add(%add.2738, %convert_element_type.3701)
  %mul.9836 = bf16[1,4096,4096]{2,1,0} multiply(%convert_element_type.2823, %sharding_constraint.2157)
  %reduce.1276 = bf16[4096]{0} reduce(%mul.9836, %constant.1190), dimensions={0,1}, to_apply=%region_1308.28386
  %all-reduce.428 = bf16[4096]{0} all-reduce(%reduce.1276), channel_id=1231, replica_groups=[1,8]<=[8], use_global_device_ids=true, to_apply=%region_1308.28386.clone
  %mul.9837 = bf16[4096]{0} multiply(%all-reduce.428, %all-reduce.428)
  %convert_element_type.3702 = f32[4096]{0} convert(%mul.9837)
  %reduce.1277 = f32[] reduce(%convert_element_type.3702, %constant.1360), dimensions={0}, to_apply=%region_1309.28393
  %convert_element_type.3703 = bf16[] convert(%reduce.1277)
  %add.2740 = bf16[] add(%add.2739, %convert_element_type.3703)
  %dot.1353 = bf16[8,128,4096]{2,1,0} dot(%concatenate.595, %sharding_constraint.2106), lhs_contracting_dims={0,1}, rhs_contracting_dims={0,1}
  %all-reduce.429 = bf16[8,128,4096]{2,1,0} all-reduce(%dot.1353), channel_id=1232, replica_groups=[1,8]<=[8], use_global_device_ids=true, to_apply=%add.141.clone
  %dynamic-slice.2463 = bf16[8,128,512]{2,1,0} dynamic-slice(%all-reduce.429, %constant.1181, %constant.1181, %reshape.13763), dynamic_slice_sizes={8,128,512}
  %transpose.437 = bf16[512,8,128]{0,2,1} transpose(%dynamic-slice.2463), dimensions={2,0,1}
  %mul.9838 = bf16[512,8,128]{0,2,1} multiply(%transpose.437, %transpose.437)
  %convert_element_type.3704 = f32[512,8,128]{0,2,1} convert(%mul.9838)
  %reduce.1278 = f32[] reduce(%convert_element_type.3704, %constant.1360), dimensions={0,1,2}, to_apply=%region_1310.28404
  %all-reduce.430 = f32[] all-reduce(%reduce.1278), channel_id=1233, replica_groups=[1,8]<=[8], use_global_device_ids=true, to_apply=%region_1310.28404.clone
  %convert_element_type.3705 = bf16[] convert(%all-reduce.430)
  %add.2741 = bf16[] add(%add.2740, %convert_element_type.3705)
  %dot.1354 = bf16[4096,32,128]{2,1,0} dot(%sharding_constraint.2149, %sharding_constraint.2116), lhs_contracting_dims={0,1}, rhs_contracting_dims={0,1}
  %all-reduce.431 = bf16[4096,32,128]{2,1,0} all-reduce(%dot.1354), channel_id=1234, replica_groups=[1,8]<=[8], use_global_device_ids=true, to_apply=%add.142.clone
  %dynamic-slice.2465 = bf16[512,32,128]{2,1,0} dynamic-slice(%all-reduce.431, %reshape.13763, %constant.1181, %constant.1181), dynamic_slice_sizes={512,32,128}
  %transpose.438 = bf16[32,128,512]{1,0,2} transpose(%dynamic-slice.2465), dimensions={1,2,0}
  %mul.9839 = bf16[32,128,512]{1,0,2} multiply(%transpose.438, %transpose.438)
  %convert_element_type.3706 = f32[32,128,512]{1,0,2} convert(%mul.9839)
  %reduce.1279 = f32[] reduce(%convert_element_type.3706, %constant.1360), dimensions={0,1,2}, to_apply=%region_1311.28415
  %all-reduce.432 = f32[] all-reduce(%reduce.1279), channel_id=1235, replica_groups=[1,8]<=[8], use_global_device_ids=true, to_apply=%region_1311.28415.clone
  %convert_element_type.3707 = bf16[] convert(%all-reduce.432)
  %add.2743 = bf16[] add(%add.2741, %convert_element_type.3707)
  %dot.1355 = bf16[32,128,4096]{2,1,0} dot(%concatenate.596, %sharding_constraint.2106), lhs_contracting_dims={0,1}, rhs_contracting_dims={0,1}
  %all-reduce.433 = bf16[32,128,4096]{2,1,0} all-reduce(%dot.1355), channel_id=1236, replica_groups=[1,8]<=[8], use_global_device_ids=true, to_apply=%add.143.clone
  %dynamic-slice.2467 = bf16[32,128,512]{2,1,0} dynamic-slice(%all-reduce.433, %constant.1181, %constant.1181, %reshape.13763), dynamic_slice_sizes={32,128,512}
  %transpose.439 = bf16[512,32,128]{0,2,1} transpose(%dynamic-slice.2467), dimensions={2,0,1}
  %mul.9840 = bf16[512,32,128]{0,2,1} multiply(%transpose.439, %transpose.439)
  %convert_element_type.3708 = f32[512,32,128]{0,2,1} convert(%mul.9840)
  %reduce.1280 = f32[] reduce(%convert_element_type.3708, %constant.1360), dimensions={0,1,2}, to_apply=%region_1312.28426
  %all-reduce.434 = f32[] all-reduce(%reduce.1280), channel_id=1237, replica_groups=[1,8]<=[8], use_global_device_ids=true, to_apply=%region_1312.28426.clone
  %convert_element_type.3709 = bf16[] convert(%all-reduce.434)
  %add.2745 = bf16[] add(%add.2743, %convert_element_type.3709)
  %dot.1356 = bf16[8,128,4096]{2,1,0} dot(%sharding_constraint.2151, %sharding_constraint.2106), lhs_contracting_dims={0,1}, rhs_contracting_dims={0,1}
  %all-reduce.435 = bf16[8,128,4096]{2,1,0} all-reduce(%dot.1356), channel_id=1238, replica_groups=[1,8]<=[8], use_global_device_ids=true, to_apply=%add.144.clone
  %dynamic-slice.2469 = bf16[8,128,512]{2,1,0} dynamic-slice(%all-reduce.435, %constant.1181, %constant.1181, %reshape.13763), dynamic_slice_sizes={8,128,512}
  %transpose.440 = bf16[512,8,128]{0,2,1} transpose(%dynamic-slice.2469), dimensions={2,0,1}
  %mul.9841 = bf16[512,8,128]{0,2,1} multiply(%transpose.440, %transpose.440)
  %convert_element_type.3710 = f32[512,8,128]{0,2,1} convert(%mul.9841)
  %reduce.1281 = f32[] reduce(%convert_element_type.3710, %constant.1360), dimensions={0,1,2}, to_apply=%region_1313.28437
  %all-reduce.436 = f32[] all-reduce(%reduce.1281), channel_id=1239, replica_groups=[1,8]<=[8], use_global_device_ids=true, to_apply=%region_1313.28437.clone
  %convert_element_type.3711 = bf16[] convert(%all-reduce.436)
  %add.2746 = bf16[] add(%add.2745, %convert_element_type.3711)
  %dot.1357 = bf16[4096,8]{1,0} dot(%sharding_constraint.2067, %sharding_constraint.2089), lhs_contracting_dims={0,1}, rhs_contracting_dims={0,1}
  %all-reduce.437 = bf16[4096,8]{1,0} all-reduce(%dot.1357), channel_id=1240, replica_groups=[1,8]<=[8], use_global_device_ids=true, to_apply=%add.145.clone
  %dynamic-slice.2471 = bf16[512,8]{1,0} dynamic-slice(%all-reduce.437, %reshape.13763, %constant.1181), dynamic_slice_sizes={512,8}
  %mul.9842 = bf16[512,8]{1,0} multiply(%dynamic-slice.2471, %dynamic-slice.2471)
  %convert_element_type.3712 = f32[512,8]{1,0} convert(%mul.9842)
  %reduce.1282 = f32[] reduce(%convert_element_type.3712, %constant.1360), dimensions={0,1}, to_apply=%region_1314.28447
  %all-reduce.438 = f32[] all-reduce(%reduce.1282), channel_id=1241, replica_groups=[1,8]<=[8], use_global_device_ids=true, to_apply=%region_1314.28447.clone
  %convert_element_type.3713 = bf16[] convert(%all-reduce.438)
  %add.2747 = bf16[] add(%add.2746, %convert_element_type.3713)
  %dot.1358 = bf16[1,4096,14336]{2,1,0} dot(%sharding_constraint.2074, %sharding_constraint.2085), lhs_batch_dims={0}, lhs_contracting_dims={1,2}, rhs_batch_dims={0}, rhs_contracting_dims={1,2}
  %sharding_constraint.2555 = bf16[1,4096,14336]{2,1,0} copy(%dot.1358)
  %mul.9843 = bf16[1,4096,14336]{2,1,0} multiply(%sharding_constraint.2555, %sharding_constraint.2555)
  %convert_element_type.3714 = f32[1,4096,14336]{2,1,0} convert(%mul.9843)
  %reduce.1283 = f32[] reduce(%convert_element_type.3714, %constant.1360), dimensions={0,1,2}, to_apply=%region_1315.28458
  %all-reduce.439 = f32[] all-reduce(%reduce.1283), channel_id=1242, replica_groups=[1,8]<=[8], use_global_device_ids=true, to_apply=%region_1315.28458.clone
  %convert_element_type.3716 = bf16[] convert(%all-reduce.439)
  %add.2748 = bf16[] add(%add.2747, %convert_element_type.3716)
  %dot.1359 = bf16[1,4096,14336]{2,1,0} dot(%sharding_constraint.2074, %sharding_constraint.2082), lhs_batch_dims={0}, lhs_contracting_dims={1,2}, rhs_batch_dims={0}, rhs_contracting_dims={1,2}
  %sharding_constraint.2556 = bf16[1,4096,14336]{2,1,0} copy(%dot.1359)
  %mul.9844 = bf16[1,4096,14336]{2,1,0} multiply(%sharding_constraint.2556, %sharding_constraint.2556)
  %convert_element_type.3717 = f32[1,4096,14336]{2,1,0} convert(%mul.9844)
  %reduce.1284 = f32[] reduce(%convert_element_type.3717, %constant.1360), dimensions={0,1,2}, to_apply=%region_1316.28469
  %all-reduce.440 = f32[] all-reduce(%reduce.1284), channel_id=1243, replica_groups=[1,8]<=[8], use_global_device_ids=true, to_apply=%region_1316.28469.clone
  %convert_element_type.3719 = bf16[] convert(%all-reduce.440)
  %add.2749 = bf16[] add(%add.2748, %convert_element_type.3719)
  %dot.1360 = bf16[1,14336,4096]{2,1,0} dot(%mul.8164, %sharding_constraint.2080), lhs_batch_dims={0}, lhs_contracting_dims={1,2}, rhs_batch_dims={0}, rhs_contracting_dims={1,2}
  %sharding_constraint.2558 = bf16[1,14336,4096]{2,1,0} copy(%dot.1360)
  %mul.9846 = bf16[1,14336,4096]{2,1,0} multiply(%sharding_constraint.2558, %sharding_constraint.2558)
  %convert_element_type.3720 = f32[1,14336,4096]{2,1,0} convert(%mul.9846)
  %reduce.1285 = f32[] reduce(%convert_element_type.3720, %constant.1360), dimensions={0,1,2}, to_apply=%region_1317.28480
  %all-reduce.441 = f32[] all-reduce(%reduce.1285), channel_id=1244, replica_groups=[1,8]<=[8], use_global_device_ids=true, to_apply=%region_1317.28480.clone
  %convert_element_type.3721 = bf16[] convert(%all-reduce.441)
  %add.2750 = bf16[] add(%add.2749, %convert_element_type.3721)
  %mul.9847 = bf16[1,4096,4096]{2,1,0} multiply(%convert_element_type.2801, %sharding_constraint.2090)
  %reduce.1286 = bf16[4096]{0} reduce(%mul.9847, %constant.1190), dimensions={0,1}, to_apply=%region_1318.28488
  %all-reduce.442 = bf16[4096]{0} all-reduce(%reduce.1286), channel_id=1245, replica_groups=[1,8]<=[8], use_global_device_ids=true, to_apply=%region_1318.28488.clone
  %mul.9850 = bf16[4096]{0} multiply(%all-reduce.442, %all-reduce.442)
  %convert_element_type.3722 = f32[4096]{0} convert(%mul.9850)
  %reduce.1287 = f32[] reduce(%convert_element_type.3722, %constant.1360), dimensions={0}, to_apply=%region_1319.28495
  %convert_element_type.3723 = bf16[] convert(%reduce.1287)
  %add.2751 = bf16[] add(%add.2750, %convert_element_type.3723)
  %mul.9851 = bf16[1,4096,4096]{2,1,0} multiply(%convert_element_type.2788, %sharding_constraint.2099)
  %reduce.1288 = bf16[4096]{0} reduce(%mul.9851, %constant.1190), dimensions={0,1}, to_apply=%region_1320.28503
  %all-reduce.443 = bf16[4096]{0} all-reduce(%reduce.1288), channel_id=1246, replica_groups=[1,8]<=[8], use_global_device_ids=true, to_apply=%region_1320.28503.clone
  %mul.9852 = bf16[4096]{0} multiply(%all-reduce.443, %all-reduce.443)
  %convert_element_type.3724 = f32[4096]{0} convert(%mul.9852)
  %reduce.1289 = f32[] reduce(%convert_element_type.3724, %constant.1360), dimensions={0}, to_apply=%region_1321.28510
  %convert_element_type.3725 = bf16[] convert(%reduce.1289)
  %add.2752 = bf16[] add(%add.2751, %convert_element_type.3725)
  %dot.1361 = bf16[8,128,4096]{2,1,0} dot(%concatenate.582, %sharding_constraint.2060), lhs_contracting_dims={0,1}, rhs_contracting_dims={0,1}
  %all-reduce.444 = bf16[8,128,4096]{2,1,0} all-reduce(%dot.1361), channel_id=1247, replica_groups=[1,8]<=[8], use_global_device_ids=true, to_apply=%add.146.clone
  %dynamic-slice.2473 = bf16[8,128,512]{2,1,0} dynamic-slice(%all-reduce.444, %constant.1181, %constant.1181, %reshape.13763), dynamic_slice_sizes={8,128,512}
  %transpose.441 = bf16[512,8,128]{0,2,1} transpose(%dynamic-slice.2473), dimensions={2,0,1}
  %mul.9853 = bf16[512,8,128]{0,2,1} multiply(%transpose.441, %transpose.441)
  %convert_element_type.3726 = f32[512,8,128]{0,2,1} convert(%mul.9853)
  %reduce.1290 = f32[] reduce(%convert_element_type.3726, %constant.1360), dimensions={0,1,2}, to_apply=%region_1322.28521
  %all-reduce.445 = f32[] all-reduce(%reduce.1290), channel_id=1248, replica_groups=[1,8]<=[8], use_global_device_ids=true, to_apply=%region_1322.28521.clone
  %convert_element_type.3727 = bf16[] convert(%all-reduce.445)
  %add.2753 = bf16[] add(%add.2752, %convert_element_type.3727)
  %dot.1362 = bf16[4096,32,128]{2,1,0} dot(%sharding_constraint.2092, %sharding_constraint.2065), lhs_contracting_dims={0,1}, rhs_contracting_dims={0,1}
  %all-reduce.446 = bf16[4096,32,128]{2,1,0} all-reduce(%dot.1362), channel_id=1249, replica_groups=[1,8]<=[8], use_global_device_ids=true, to_apply=%add.147.clone
  %dynamic-slice.2475 = bf16[512,32,128]{2,1,0} dynamic-slice(%all-reduce.446, %reshape.13763, %constant.1181, %constant.1181), dynamic_slice_sizes={512,32,128}
  %transpose.442 = bf16[32,128,512]{1,0,2} transpose(%dynamic-slice.2475), dimensions={1,2,0}
  %mul.9854 = bf16[32,128,512]{1,0,2} multiply(%transpose.442, %transpose.442)
  %convert_element_type.3729 = f32[32,128,512]{1,0,2} convert(%mul.9854)
  %reduce.1291 = f32[] reduce(%convert_element_type.3729, %constant.1360), dimensions={0,1,2}, to_apply=%region_1323.28532
  %all-reduce.447 = f32[] all-reduce(%reduce.1291), channel_id=1250, replica_groups=[1,8]<=[8], use_global_device_ids=true, to_apply=%region_1323.28532.clone
  %convert_element_type.3731 = bf16[] convert(%all-reduce.447)
  %add.2754 = bf16[] add(%add.2753, %convert_element_type.3731)
  %dot.1363 = bf16[32,128,4096]{2,1,0} dot(%concatenate.583, %sharding_constraint.2060), lhs_contracting_dims={0,1}, rhs_contracting_dims={0,1}
  %all-reduce.448 = bf16[32,128,4096]{2,1,0} all-reduce(%dot.1363), channel_id=1251, replica_groups=[1,8]<=[8], use_global_device_ids=true, to_apply=%add.148.clone
  %dynamic-slice.2477 = bf16[32,128,512]{2,1,0} dynamic-slice(%all-reduce.448, %constant.1181, %constant.1181, %reshape.13763), dynamic_slice_sizes={32,128,512}
  %transpose.443 = bf16[512,32,128]{0,2,1} transpose(%dynamic-slice.2477), dimensions={2,0,1}
  %mul.9855 = bf16[512,32,128]{0,2,1} multiply(%transpose.443, %transpose.443)
  %convert_element_type.3732 = f32[512,32,128]{0,2,1} convert(%mul.9855)
  %reduce.1292 = f32[] reduce(%convert_element_type.3732, %constant.1360), dimensions={0,1,2}, to_apply=%region_1324.28543
  %all-reduce.449 = f32[] all-reduce(%reduce.1292), channel_id=1252, replica_groups=[1,8]<=[8], use_global_device_ids=true, to_apply=%region_1324.28543.clone
  %convert_element_type.3733 = bf16[] convert(%all-reduce.449)
  %add.2756 = bf16[] add(%add.2754, %convert_element_type.3733)
  %dot.1364 = bf16[8,128,4096]{2,1,0} dot(%sharding_constraint.2094, %sharding_constraint.2060), lhs_contracting_dims={0,1}, rhs_contracting_dims={0,1}
  %all-reduce.450 = bf16[8,128,4096]{2,1,0} all-reduce(%dot.1364), channel_id=1253, replica_groups=[1,8]<=[8], use_global_device_ids=true, to_apply=%add.149.clone
  %dynamic-slice.2479 = bf16[8,128,512]{2,1,0} dynamic-slice(%all-reduce.450, %constant.1181, %constant.1181, %reshape.13763), dynamic_slice_sizes={8,128,512}
  %transpose.444 = bf16[512,8,128]{0,2,1} transpose(%dynamic-slice.2479), dimensions={2,0,1}
  %mul.9856 = bf16[512,8,128]{0,2,1} multiply(%transpose.444, %transpose.444)
  %convert_element_type.3734 = f32[512,8,128]{0,2,1} convert(%mul.9856)
  %reduce.1293 = f32[] reduce(%convert_element_type.3734, %constant.1360), dimensions={0,1,2}, to_apply=%region_1325.28554
  %all-reduce.451 = f32[] all-reduce(%reduce.1293), channel_id=1254, replica_groups=[1,8]<=[8], use_global_device_ids=true, to_apply=%region_1325.28554.clone
  %convert_element_type.3735 = bf16[] convert(%all-reduce.451)
  %add.2757 = bf16[] add(%add.2756, %convert_element_type.3735)
  %dot.1365 = bf16[4096,8]{1,0} dot(%sharding_constraint.2024, %sharding_constraint.2043), lhs_contracting_dims={0,1}, rhs_contracting_dims={0,1}
  %all-reduce.452 = bf16[4096,8]{1,0} all-reduce(%dot.1365), channel_id=1255, replica_groups=[1,8]<=[8], use_global_device_ids=true, to_apply=%add.150.clone
  %dynamic-slice.2481 = bf16[512,8]{1,0} dynamic-slice(%all-reduce.452, %reshape.13763, %constant.1181), dynamic_slice_sizes={512,8}
  %mul.9858 = bf16[512,8]{1,0} multiply(%dynamic-slice.2481, %dynamic-slice.2481)
  %convert_element_type.3736 = f32[512,8]{1,0} convert(%mul.9858)
  %reduce.1294 = f32[] reduce(%convert_element_type.3736, %constant.1360), dimensions={0,1}, to_apply=%region_1326.28564
  %all-reduce.453 = f32[] all-reduce(%reduce.1294), channel_id=1256, replica_groups=[1,8]<=[8], use_global_device_ids=true, to_apply=%region_1326.28564.clone
  %convert_element_type.3737 = bf16[] convert(%all-reduce.453)
  %add.2758 = bf16[] add(%add.2757, %convert_element_type.3737)
  %dot.1366 = bf16[1,4096,14336]{2,1,0} dot(%sharding_constraint.2029, %sharding_constraint.2039), lhs_batch_dims={0}, lhs_contracting_dims={1,2}, rhs_batch_dims={0}, rhs_contracting_dims={1,2}
  %sharding_constraint.2560 = bf16[1,4096,14336]{2,1,0} copy(%dot.1366)
  %mul.9859 = bf16[1,4096,14336]{2,1,0} multiply(%sharding_constraint.2560, %sharding_constraint.2560)
  %convert_element_type.3738 = f32[1,4096,14336]{2,1,0} convert(%mul.9859)
  %reduce.1295 = f32[] reduce(%convert_element_type.3738, %constant.1360), dimensions={0,1,2}, to_apply=%region_1327.28575
  %all-reduce.454 = f32[] all-reduce(%reduce.1295), channel_id=1257, replica_groups=[1,8]<=[8], use_global_device_ids=true, to_apply=%region_1327.28575.clone
  %convert_element_type.3739 = bf16[] convert(%all-reduce.454)
  %add.2759 = bf16[] add(%add.2758, %convert_element_type.3739)
  %dot.1367 = bf16[1,4096,14336]{2,1,0} dot(%sharding_constraint.2029, %sharding_constraint.2036), lhs_batch_dims={0}, lhs_contracting_dims={1,2}, rhs_batch_dims={0}, rhs_contracting_dims={1,2}
  %sharding_constraint.2561 = bf16[1,4096,14336]{2,1,0} copy(%dot.1367)
  %mul.9860 = bf16[1,4096,14336]{2,1,0} multiply(%sharding_constraint.2561, %sharding_constraint.2561)
  %convert_element_type.3742 = f32[1,4096,14336]{2,1,0} convert(%mul.9860)
  %reduce.1296 = f32[] reduce(%convert_element_type.3742, %constant.1360), dimensions={0,1,2}, to_apply=%region_1328.28586
  %all-reduce.455 = f32[] all-reduce(%reduce.1296), channel_id=1258, replica_groups=[1,8]<=[8], use_global_device_ids=true, to_apply=%region_1328.28586.clone
  %convert_element_type.3743 = bf16[] convert(%all-reduce.455)
  %add.2760 = bf16[] add(%add.2759, %convert_element_type.3743)
  %dot.1368 = bf16[1,14336,4096]{2,1,0} dot(%mul.8043, %sharding_constraint.2034), lhs_batch_dims={0}, lhs_contracting_dims={1,2}, rhs_batch_dims={0}, rhs_contracting_dims={1,2}
  %sharding_constraint.2562 = bf16[1,14336,4096]{2,1,0} copy(%dot.1368)
  %mul.9862 = bf16[1,14336,4096]{2,1,0} multiply(%sharding_constraint.2562, %sharding_constraint.2562)
  %convert_element_type.3744 = f32[1,14336,4096]{2,1,0} convert(%mul.9862)
  %reduce.1297 = f32[] reduce(%convert_element_type.3744, %constant.1360), dimensions={0,1,2}, to_apply=%region_1329.28597
  %all-reduce.456 = f32[] all-reduce(%reduce.1297), channel_id=1259, replica_groups=[1,8]<=[8], use_global_device_ids=true, to_apply=%region_1329.28597.clone
  %convert_element_type.3745 = bf16[] convert(%all-reduce.456)
  %add.2761 = bf16[] add(%add.2760, %convert_element_type.3745)
  %mul.9863 = bf16[1,4096,4096]{2,1,0} multiply(%convert_element_type.2768, %sharding_constraint.2044)
  %reduce.1298 = bf16[4096]{0} reduce(%mul.9863, %constant.1190), dimensions={0,1}, to_apply=%region_1330.28605
  %all-reduce.457 = bf16[4096]{0} all-reduce(%reduce.1298), channel_id=1260, replica_groups=[1,8]<=[8], use_global_device_ids=true, to_apply=%region_1330.28605.clone
  %mul.9864 = bf16[4096]{0} multiply(%all-reduce.457, %all-reduce.457)
  %convert_element_type.3746 = f32[4096]{0} convert(%mul.9864)
  %reduce.1299 = f32[] reduce(%convert_element_type.3746, %constant.1360), dimensions={0}, to_apply=%region_1331.28612
  %convert_element_type.3747 = bf16[] convert(%reduce.1299)
  %add.2762 = bf16[] add(%add.2761, %convert_element_type.3747)
  %mul.9865 = bf16[1,4096,4096]{2,1,0} multiply(%convert_element_type.2753, %sharding_constraint.2053)
  %reduce.1300 = bf16[4096]{0} reduce(%mul.9865, %constant.1190), dimensions={0,1}, to_apply=%region_1332.28620
  %all-reduce.458 = bf16[4096]{0} all-reduce(%reduce.1300), channel_id=1261, replica_groups=[1,8]<=[8], use_global_device_ids=true, to_apply=%region_1332.28620.clone
  %mul.9866 = bf16[4096]{0} multiply(%all-reduce.458, %all-reduce.458)
  %convert_element_type.3748 = f32[4096]{0} convert(%mul.9866)
  %reduce.1301 = f32[] reduce(%convert_element_type.3748, %constant.1360), dimensions={0}, to_apply=%region_1333.28627
  %convert_element_type.3749 = bf16[] convert(%reduce.1301)
  %add.2763 = bf16[] add(%add.2762, %convert_element_type.3749)
  %dot.1369 = bf16[8,128,4096]{2,1,0} dot(%concatenate.569, %sharding_constraint.2016), lhs_contracting_dims={0,1}, rhs_contracting_dims={0,1}
  %all-reduce.459 = bf16[8,128,4096]{2,1,0} all-reduce(%dot.1369), channel_id=1262, replica_groups=[1,8]<=[8], use_global_device_ids=true, to_apply=%add.151.clone
  %dynamic-slice.2483 = bf16[8,128,512]{2,1,0} dynamic-slice(%all-reduce.459, %constant.1181, %constant.1181, %reshape.13763), dynamic_slice_sizes={8,128,512}
  %transpose.445 = bf16[512,8,128]{0,2,1} transpose(%dynamic-slice.2483), dimensions={2,0,1}
  %mul.9868 = bf16[512,8,128]{0,2,1} multiply(%transpose.445, %transpose.445)
  %convert_element_type.3750 = f32[512,8,128]{0,2,1} convert(%mul.9868)
  %reduce.1302 = f32[] reduce(%convert_element_type.3750, %constant.1360), dimensions={0,1,2}, to_apply=%region_1334.28638
  %all-reduce.460 = f32[] all-reduce(%reduce.1302), channel_id=1263, replica_groups=[1,8]<=[8], use_global_device_ids=true, to_apply=%region_1334.28638.clone
  %convert_element_type.3751 = bf16[] convert(%all-reduce.460)
  %add.2764 = bf16[] add(%add.2763, %convert_element_type.3751)
  %dot.1370 = bf16[4096,32,128]{2,1,0} dot(%sharding_constraint.2046, %sharding_constraint.2022), lhs_contracting_dims={0,1}, rhs_contracting_dims={0,1}
  %all-reduce.461 = bf16[4096,32,128]{2,1,0} all-reduce(%dot.1370), channel_id=1264, replica_groups=[1,8]<=[8], use_global_device_ids=true, to_apply=%add.152.clone
  %dynamic-slice.2485 = bf16[512,32,128]{2,1,0} dynamic-slice(%all-reduce.461, %reshape.13763, %constant.1181, %constant.1181), dynamic_slice_sizes={512,32,128}
  %transpose.446 = bf16[32,128,512]{1,0,2} transpose(%dynamic-slice.2485), dimensions={1,2,0}
  %mul.9869 = bf16[32,128,512]{1,0,2} multiply(%transpose.446, %transpose.446)
  %convert_element_type.3752 = f32[32,128,512]{1,0,2} convert(%mul.9869)
  %reduce.1303 = f32[] reduce(%convert_element_type.3752, %constant.1360), dimensions={0,1,2}, to_apply=%region_1335.28649
  %all-reduce.462 = f32[] all-reduce(%reduce.1303), channel_id=1265, replica_groups=[1,8]<=[8], use_global_device_ids=true, to_apply=%region_1335.28649.clone
  %convert_element_type.3753 = bf16[] convert(%all-reduce.462)
  %add.2765 = bf16[] add(%add.2764, %convert_element_type.3753)
  %dot.1371 = bf16[32,128,4096]{2,1,0} dot(%concatenate.570, %sharding_constraint.2016), lhs_contracting_dims={0,1}, rhs_contracting_dims={0,1}
  %all-reduce.463 = bf16[32,128,4096]{2,1,0} all-reduce(%dot.1371), channel_id=1266, replica_groups=[1,8]<=[8], use_global_device_ids=true, to_apply=%add.153.clone
  %dynamic-slice.2487 = bf16[32,128,512]{2,1,0} dynamic-slice(%all-reduce.463, %constant.1181, %constant.1181, %reshape.13763), dynamic_slice_sizes={32,128,512}
  %transpose.447 = bf16[512,32,128]{0,2,1} transpose(%dynamic-slice.2487), dimensions={2,0,1}
  %mul.9870 = bf16[512,32,128]{0,2,1} multiply(%transpose.447, %transpose.447)
  %convert_element_type.3754 = f32[512,32,128]{0,2,1} convert(%mul.9870)
  %reduce.1304 = f32[] reduce(%convert_element_type.3754, %constant.1360), dimensions={0,1,2}, to_apply=%region_1336.28660
  %all-reduce.464 = f32[] all-reduce(%reduce.1304), channel_id=1267, replica_groups=[1,8]<=[8], use_global_device_ids=true, to_apply=%region_1336.28660.clone
  %convert_element_type.3755 = bf16[] convert(%all-reduce.464)
  %add.2766 = bf16[] add(%add.2765, %convert_element_type.3755)
  %dot.1372 = bf16[8,128,4096]{2,1,0} dot(%sharding_constraint.2048, %sharding_constraint.2016), lhs_contracting_dims={0,1}, rhs_contracting_dims={0,1}
  %all-reduce.465 = bf16[8,128,4096]{2,1,0} all-reduce(%dot.1372), channel_id=1268, replica_groups=[1,8]<=[8], use_global_device_ids=true, to_apply=%add.154.clone
  %dynamic-slice.2489 = bf16[8,128,512]{2,1,0} dynamic-slice(%all-reduce.465, %constant.1181, %constant.1181, %reshape.13763), dynamic_slice_sizes={8,128,512}
  %transpose.448 = bf16[512,8,128]{0,2,1} transpose(%dynamic-slice.2489), dimensions={2,0,1}
  %mul.9871 = bf16[512,8,128]{0,2,1} multiply(%transpose.448, %transpose.448)
  %convert_element_type.3756 = f32[512,8,128]{0,2,1} convert(%mul.9871)
  %reduce.1305 = f32[] reduce(%convert_element_type.3756, %constant.1360), dimensions={0,1,2}, to_apply=%region_1337.28671
  %all-reduce.466 = f32[] all-reduce(%reduce.1305), channel_id=1269, replica_groups=[1,8]<=[8], use_global_device_ids=true, to_apply=%region_1337.28671.clone
  %convert_element_type.3757 = bf16[] convert(%all-reduce.466)
  %add.2767 = bf16[] add(%add.2766, %convert_element_type.3757)
  %dot.1373 = bf16[4096,8]{1,0} dot(%sharding_constraint.1975, %sharding_constraint.1998), lhs_contracting_dims={0,1}, rhs_contracting_dims={0,1}
  %all-reduce.467 = bf16[4096,8]{1,0} all-reduce(%dot.1373), channel_id=1270, replica_groups=[1,8]<=[8], use_global_device_ids=true, to_apply=%add.155.clone
  %dynamic-slice.2491 = bf16[512,8]{1,0} dynamic-slice(%all-reduce.467, %reshape.13763, %constant.1181), dynamic_slice_sizes={512,8}
  %mul.9872 = bf16[512,8]{1,0} multiply(%dynamic-slice.2491, %dynamic-slice.2491)
  %convert_element_type.3759 = f32[512,8]{1,0} convert(%mul.9872)
  %reduce.1306 = f32[] reduce(%convert_element_type.3759, %constant.1360), dimensions={0,1}, to_apply=%region_1338.28681
  %all-reduce.468 = f32[] all-reduce(%reduce.1306), channel_id=1271, replica_groups=[1,8]<=[8], use_global_device_ids=true, to_apply=%region_1338.28681.clone
  %convert_element_type.3760 = bf16[] convert(%all-reduce.468)
  %add.2768 = bf16[] add(%add.2767, %convert_element_type.3760)
  %dot.1374 = bf16[1,4096,14336]{2,1,0} dot(%sharding_constraint.1984, %sharding_constraint.1994), lhs_batch_dims={0}, lhs_contracting_dims={1,2}, rhs_batch_dims={0}, rhs_contracting_dims={1,2}
  %sharding_constraint.2563 = bf16[1,4096,14336]{2,1,0} copy(%dot.1374)
  %mul.9873 = bf16[1,4096,14336]{2,1,0} multiply(%sharding_constraint.2563, %sharding_constraint.2563)
  %convert_element_type.3761 = f32[1,4096,14336]{2,1,0} convert(%mul.9873)
  %reduce.1307 = f32[] reduce(%convert_element_type.3761, %constant.1360), dimensions={0,1,2}, to_apply=%region_1339.28692
  %all-reduce.469 = f32[] all-reduce(%reduce.1307), channel_id=1272, replica_groups=[1,8]<=[8], use_global_device_ids=true, to_apply=%region_1339.28692.clone
  %convert_element_type.3762 = bf16[] convert(%all-reduce.469)
  %add.2769 = bf16[] add(%add.2768, %convert_element_type.3762)
  %dot.1375 = bf16[1,4096,14336]{2,1,0} dot(%sharding_constraint.1984, %sharding_constraint.1991), lhs_batch_dims={0}, lhs_contracting_dims={1,2}, rhs_batch_dims={0}, rhs_contracting_dims={1,2}
  %sharding_constraint.2564 = bf16[1,4096,14336]{2,1,0} copy(%dot.1375)
  %mul.9874 = bf16[1,4096,14336]{2,1,0} multiply(%sharding_constraint.2564, %sharding_constraint.2564)
  %convert_element_type.3763 = f32[1,4096,14336]{2,1,0} convert(%mul.9874)
  %reduce.1308 = f32[] reduce(%convert_element_type.3763, %constant.1360), dimensions={0,1,2}, to_apply=%region_1340.28703
  %all-reduce.470 = f32[] all-reduce(%reduce.1308), channel_id=1273, replica_groups=[1,8]<=[8], use_global_device_ids=true, to_apply=%region_1340.28703.clone
  %convert_element_type.3764 = bf16[] convert(%all-reduce.470)
  %add.2770 = bf16[] add(%add.2769, %convert_element_type.3764)
  %dot.1376 = bf16[1,14336,4096]{2,1,0} dot(%mul.7858, %sharding_constraint.1989), lhs_batch_dims={0}, lhs_contracting_dims={1,2}, rhs_batch_dims={0}, rhs_contracting_dims={1,2}
  %sharding_constraint.2565 = bf16[1,14336,4096]{2,1,0} copy(%dot.1376)
  %mul.9877 = bf16[1,14336,4096]{2,1,0} multiply(%sharding_constraint.2565, %sharding_constraint.2565)
  %convert_element_type.3765 = f32[1,14336,4096]{2,1,0} convert(%mul.9877)
  %reduce.1309 = f32[] reduce(%convert_element_type.3765, %constant.1360), dimensions={0,1,2}, to_apply=%region_1341.28714
  %all-reduce.471 = f32[] all-reduce(%reduce.1309), channel_id=1274, replica_groups=[1,8]<=[8], use_global_device_ids=true, to_apply=%region_1341.28714.clone
  %convert_element_type.3766 = bf16[] convert(%all-reduce.471)
  %add.2771 = bf16[] add(%add.2770, %convert_element_type.3766)
  %mul.9882 = bf16[1,4096,4096]{2,1,0} multiply(%convert_element_type.2735, %sharding_constraint.1999)
  %reduce.1310 = bf16[4096]{0} reduce(%mul.9882, %constant.1190), dimensions={0,1}, to_apply=%region_1342.28722
  %all-reduce.472 = bf16[4096]{0} all-reduce(%reduce.1310), channel_id=1275, replica_groups=[1,8]<=[8], use_global_device_ids=true, to_apply=%region_1342.28722.clone
  %mul.9883 = bf16[4096]{0} multiply(%all-reduce.472, %all-reduce.472)
  %convert_element_type.3767 = f32[4096]{0} convert(%mul.9883)
  %reduce.1311 = f32[] reduce(%convert_element_type.3767, %constant.1360), dimensions={0}, to_apply=%region_1343.28729
  %convert_element_type.3768 = bf16[] convert(%reduce.1311)
  %add.2772 = bf16[] add(%add.2771, %convert_element_type.3768)
  %mul.9884 = bf16[1,4096,4096]{2,1,0} multiply(%convert_element_type.2722, %sharding_constraint.2010)
  %reduce.1312 = bf16[4096]{0} reduce(%mul.9884, %constant.1190), dimensions={0,1}, to_apply=%region_1344.28737
  %all-reduce.473 = bf16[4096]{0} all-reduce(%reduce.1312), channel_id=1276, replica_groups=[1,8]<=[8], use_global_device_ids=true, to_apply=%region_1344.28737.clone
  %mul.9885 = bf16[4096]{0} multiply(%all-reduce.473, %all-reduce.473)
  %convert_element_type.3770 = f32[4096]{0} convert(%mul.9885)
  %reduce.1313 = f32[] reduce(%convert_element_type.3770, %constant.1360), dimensions={0}, to_apply=%region_1345.28744
  %convert_element_type.3771 = bf16[] convert(%reduce.1313)
  %add.2773 = bf16[] add(%add.2772, %convert_element_type.3771)
  %dot.1377 = bf16[8,128,4096]{2,1,0} dot(%concatenate.556, %sharding_constraint.1968), lhs_contracting_dims={0,1}, rhs_contracting_dims={0,1}
  %all-reduce.474 = bf16[8,128,4096]{2,1,0} all-reduce(%dot.1377), channel_id=1277, replica_groups=[1,8]<=[8], use_global_device_ids=true, to_apply=%add.156.clone
  %dynamic-slice.2493 = bf16[8,128,512]{2,1,0} dynamic-slice(%all-reduce.474, %constant.1181, %constant.1181, %reshape.13763), dynamic_slice_sizes={8,128,512}
  %transpose.449 = bf16[512,8,128]{0,2,1} transpose(%dynamic-slice.2493), dimensions={2,0,1}
  %mul.9886 = bf16[512,8,128]{0,2,1} multiply(%transpose.449, %transpose.449)
  %convert_element_type.3772 = f32[512,8,128]{0,2,1} convert(%mul.9886)
  %reduce.1314 = f32[] reduce(%convert_element_type.3772, %constant.1360), dimensions={0,1,2}, to_apply=%region_1346.28755
  %all-reduce.475 = f32[] all-reduce(%reduce.1314), channel_id=1278, replica_groups=[1,8]<=[8], use_global_device_ids=true, to_apply=%region_1346.28755.clone
  %convert_element_type.3773 = bf16[] convert(%all-reduce.475)
  %add.2774 = bf16[] add(%add.2773, %convert_element_type.3773)
  %dot.1378 = bf16[4096,32,128]{2,1,0} dot(%sharding_constraint.2001, %sharding_constraint.1973), lhs_contracting_dims={0,1}, rhs_contracting_dims={0,1}
  %all-reduce.476 = bf16[4096,32,128]{2,1,0} all-reduce(%dot.1378), channel_id=1279, replica_groups=[1,8]<=[8], use_global_device_ids=true, to_apply=%add.157.clone
  %dynamic-slice.2495 = bf16[512,32,128]{2,1,0} dynamic-slice(%all-reduce.476, %reshape.13763, %constant.1181, %constant.1181), dynamic_slice_sizes={512,32,128}
  %transpose.450 = bf16[32,128,512]{1,0,2} transpose(%dynamic-slice.2495), dimensions={1,2,0}
  %mul.9887 = bf16[32,128,512]{1,0,2} multiply(%transpose.450, %transpose.450)
  %convert_element_type.3774 = f32[32,128,512]{1,0,2} convert(%mul.9887)
  %reduce.1315 = f32[] reduce(%convert_element_type.3774, %constant.1360), dimensions={0,1,2}, to_apply=%region_1347.28766
  %all-reduce.477 = f32[] all-reduce(%reduce.1315), channel_id=1280, replica_groups=[1,8]<=[8], use_global_device_ids=true, to_apply=%region_1347.28766.clone
  %convert_element_type.3775 = bf16[] convert(%all-reduce.477)
  %add.2775 = bf16[] add(%add.2774, %convert_element_type.3775)
  %dot.1379 = bf16[32,128,4096]{2,1,0} dot(%concatenate.557, %sharding_constraint.1968), lhs_contracting_dims={0,1}, rhs_contracting_dims={0,1}
  %all-reduce.478 = bf16[32,128,4096]{2,1,0} all-reduce(%dot.1379), channel_id=1281, replica_groups=[1,8]<=[8], use_global_device_ids=true, to_apply=%add.158.clone
  %dynamic-slice.2497 = bf16[32,128,512]{2,1,0} dynamic-slice(%all-reduce.478, %constant.1181, %constant.1181, %reshape.13763), dynamic_slice_sizes={32,128,512}
  %transpose.451 = bf16[512,32,128]{0,2,1} transpose(%dynamic-slice.2497), dimensions={2,0,1}
  %mul.9888 = bf16[512,32,128]{0,2,1} multiply(%transpose.451, %transpose.451)
  %convert_element_type.3776 = f32[512,32,128]{0,2,1} convert(%mul.9888)
  %reduce.1316 = f32[] reduce(%convert_element_type.3776, %constant.1360), dimensions={0,1,2}, to_apply=%region_1348.28777
  %all-reduce.479 = f32[] all-reduce(%reduce.1316), channel_id=1282, replica_groups=[1,8]<=[8], use_global_device_ids=true, to_apply=%region_1348.28777.clone
  %convert_element_type.3777 = bf16[] convert(%all-reduce.479)
  %add.2776 = bf16[] add(%add.2775, %convert_element_type.3777)
  %dot.1380 = bf16[8,128,4096]{2,1,0} dot(%sharding_constraint.2005, %sharding_constraint.1968), lhs_contracting_dims={0,1}, rhs_contracting_dims={0,1}
  %all-reduce.480 = bf16[8,128,4096]{2,1,0} all-reduce(%dot.1380), channel_id=1283, replica_groups=[1,8]<=[8], use_global_device_ids=true, to_apply=%add.159.clone
  %dynamic-slice.2499 = bf16[8,128,512]{2,1,0} dynamic-slice(%all-reduce.480, %constant.1181, %constant.1181, %reshape.13763), dynamic_slice_sizes={8,128,512}
  %transpose.452 = bf16[512,8,128]{0,2,1} transpose(%dynamic-slice.2499), dimensions={2,0,1}
  %mul.9889 = bf16[512,8,128]{0,2,1} multiply(%transpose.452, %transpose.452)
  %convert_element_type.3779 = f32[512,8,128]{0,2,1} convert(%mul.9889)
  %reduce.1317 = f32[] reduce(%convert_element_type.3779, %constant.1360), dimensions={0,1,2}, to_apply=%region_1349.28788
  %all-reduce.481 = f32[] all-reduce(%reduce.1317), channel_id=1284, replica_groups=[1,8]<=[8], use_global_device_ids=true, to_apply=%region_1349.28788.clone
  %convert_element_type.3780 = bf16[] convert(%all-reduce.481)
  %add.2777 = bf16[] add(%add.2776, %convert_element_type.3780)
  %dot.1381 = bf16[4096,32000]{1,0} dot(%mul.4419, %sharding_constraint.933), lhs_contracting_dims={0,1}, rhs_contracting_dims={0,1}
  %all-reduce.482 = bf16[4096,32000]{1,0} all-reduce(%dot.1381), channel_id=1285, replica_groups=[1,8]<=[8], use_global_device_ids=true, to_apply=%add.160.clone
  %dynamic-slice.2501 = bf16[512,32000]{1,0} dynamic-slice(%all-reduce.482, %reshape.13763, %constant.1181), dynamic_slice_sizes={512,32000}
  %mul.9890 = bf16[512,32000]{1,0} multiply(%dynamic-slice.2501, %dynamic-slice.2501)
  %convert_element_type.3781 = f32[512,32000]{1,0} convert(%mul.9890)
  %reduce.1318 = f32[] reduce(%convert_element_type.3781, %constant.1360), dimensions={0,1}, to_apply=%region_1350.28798
  %all-reduce.483 = f32[] all-reduce(%reduce.1318), channel_id=1286, replica_groups=[1,8]<=[8], use_global_device_ids=true, to_apply=%region_1350.28798.clone
  %convert_element_type.3782 = bf16[] convert(%all-reduce.483)
  %add.2778 = bf16[] add(%add.2777, %convert_element_type.3782)
  %mul.9900 = bf16[1,4096,4096]{2,1,0} multiply(%sharding_constraint.2453, %mul.9202)
  %convert_element_type.3783 = f32[1,4096,4096]{2,1,0} convert(%mul.9900)
  %mul.9907 = f32[1,4096,4096]{2,1,0} multiply(%convert_element_type.3783, %mul.9199)
  %mul.9908 = f32[1,4096,4096]{2,1,0} multiply(%convert_element_type.3011, %convert_element_type.3783)
  %reduce.1319 = f32[1,4096]{1,0} reduce(%mul.9908, %constant.1360), dimensions={2}, to_apply=%region_1351.28812
  %reshape.13956 = f32[1,4096,1]{2,1,0} reshape(%reduce.1319)
  %div.1435 = f32[1,4096,1]{2,1,0} divide(%rsqrt.191, %add.2416)
  %mul.9909 = f32[1,4096,1]{2,1,0} multiply(%div.1435, %broadcast.3620)
  %mul.9910 = f32[1,4096,1]{2,1,0} multiply(%reshape.13956, %mul.9909)
  %mul.9911 = f32[1,4096,1]{2,1,0} multiply(%mul.9910, %mul.4455)
  %mul.9912 = f32[1,4096]{1,0} reshape(%mul.9911)
  %mul.9913 = f32[1,4096,4096]{2,1,0} broadcast(%mul.9912), dimensions={0,1}
  %mul.9914 = f32[1,4096,4096]{2,1,0} multiply(%convert_element_type.3011, %mul.9913)
  %add_any.513 = f32[1,4096,4096]{2,1,0} add(%mul.9907, %mul.9914)
  %convert_element_type.3784 = bf16[1,4096,4096]{2,1,0} convert(%add_any.513)
  %add_any.514 = bf16[1,4096,4096]{2,1,0} add(%add_any.506, %convert_element_type.3784)
  %sharding_constraint.2566 = bf16[1,4096,4096]{2,1,0} copy(%add_any.514)
  %sharding_constraint.2567 = bf16[1,4096,4096]{2,1,0} copy(%sharding_constraint.2566)
  %dot.1382 = bf16[32000,4096]{1,0} dot(%convert_element_type.1177, %sharding_constraint.2567), lhs_contracting_dims={0,1}, rhs_contracting_dims={0,1}
  %all-reduce.484 = bf16[32000,4096]{1,0} all-reduce(%dot.1382), channel_id=1287, replica_groups=[1,8]<=[8], use_global_device_ids=true, to_apply=%add.161.clone
  %dynamic-slice.2503 = bf16[32000,512]{1,0} dynamic-slice(%all-reduce.484, %constant.1181, %reshape.13763), dynamic_slice_sizes={32000,512}
  %mul.9915 = bf16[32000,512]{1,0} multiply(%dynamic-slice.2503, %dynamic-slice.2503)
  %convert_element_type.3785 = f32[32000,512]{1,0} convert(%mul.9915)
  %reduce.1320 = f32[] reduce(%convert_element_type.3785, %constant.1360), dimensions={0,1}, to_apply=%region_1352.28833
  %all-reduce.485 = f32[] all-reduce(%reduce.1320), channel_id=1288, replica_groups=[1,8]<=[8], use_global_device_ids=true, to_apply=%region_1352.28833.clone
  %convert_element_type.3787 = bf16[] convert(%all-reduce.485)
  %add.2779 = bf16[] add(%add.2778, %convert_element_type.3787)
  %sqrt.0 = bf16[] sqrt(%add.2779)
  %lt.257 = pred[] compare(%sqrt.0, %constant.1491), direction=LT
  %select_n.701 = pred[4096]{0} broadcast(%lt.257), dimensions={}
  %div.1436 = bf16[4096]{0} broadcast(%sqrt.0), dimensions={}
  %div.1437 = bf16[4096]{0} divide(%all-reduce.1, %div.1436)
  %select_n.702 = bf16[4096]{0} select(%select_n.701, %all-reduce.1, %div.1437)
  %constant.13404 = bf16[] constant(0.1001)
  %broadcast.3910 = bf16[4096]{0} broadcast(%constant.13404), dimensions={}
  %mul.9916 = bf16[4096]{0} multiply(%select_n.702, %broadcast.3910)
  %param.330 = bf16[4096]{0} parameter(325), sharding={replicated}
  %constant.13405 = bf16[] constant(0.8984)
  %broadcast.3911 = bf16[4096]{0} broadcast(%constant.13405), dimensions={}
  %mul.9917 = bf16[4096]{0} multiply(%param.330, %broadcast.3911)
  %add.2780 = bf16[4096]{0} add(%mul.9916, %mul.9917)
  %constant.13406 = f32[] constant(0.9)
  %param.331 = s32[] parameter(324), sharding={replicated}
  %constant.13407 = s32[] constant(2147483647)
  %lt.258 = pred[] compare(%param.331, %constant.13407), direction=LT
  %add.2781 = s32[] add(%param.331, %constant.1177)
  %select_n.703 = s32[] select(%lt.258, %add.2781, %constant.13407)
  %pow.130 = f32[] convert(%select_n.703)
  %pow.131 = f32[] power(%constant.13406, %pow.130)
  %sub.422 = f32[] subtract(%constant.1178, %pow.131)
  %convert_element_type.3788 = bf16[] convert(%sub.422)
  %div.1438 = bf16[4096]{0} broadcast(%convert_element_type.3788), dimensions={}
  %integer_pow.0 = bf16[4096]{0} multiply(%select_n.702, %select_n.702)
  %constant.13408 = bf16[] constant(0.05005)
  %broadcast.3912 = bf16[4096]{0} broadcast(%constant.13408), dimensions={}
  %mul.9918 = bf16[4096]{0} multiply(%integer_pow.0, %broadcast.3912)
  %param.332 = bf16[4096]{0} parameter(648), sharding={replicated}
  %constant.13409 = bf16[] constant(0.9492)
  %broadcast.3913 = bf16[4096]{0} broadcast(%constant.13409), dimensions={}
  %mul.9919 = bf16[4096]{0} multiply(%param.332, %broadcast.3913)
  %add.2782 = bf16[4096]{0} add(%mul.9918, %mul.9919)
  %constant.13410 = f32[] constant(0.95)
  %pow.133 = f32[] power(%constant.13410, %pow.130)
  %sub.423 = f32[] subtract(%constant.1178, %pow.133)
  %convert_element_type.3789 = bf16[] convert(%sub.423)
  %div.1439 = bf16[4096]{0} broadcast(%convert_element_type.3789), dimensions={}
  %div.1440 = bf16[4096]{0} divide(%add.2782, %div.1439)
  %sqrt.1 = bf16[4096]{0} sqrt(%div.1440)
  %constant.13411 = bf16[] constant(1.001e-08)
  %broadcast.3914 = bf16[4096]{0} broadcast(%constant.13411), dimensions={}
  %add.2783 = bf16[4096]{0} add(%sqrt.1, %broadcast.3914)
  %multiply.2512 = bf16[4096]{0} multiply(%div.1438, %add.2783)
  %div.1441 = bf16[4096]{0} divide(%add.2780, %multiply.2512)
  %mul.9920 = bf16[4096]{0} multiply(%param.1, %broadcast.3910)
  %add.2784 = bf16[4096]{0} add(%div.1441, %mul.9920)
  %mul.9921 = bf16[4096]{0} multiply(%mul.2424, %add.2784)
  %add.2785 = bf16[4096]{0} add(%param.1, %mul.9921)
  %mul.9922 = bf16[512,8]{1,0} broadcast(%convert_element_type.1176), dimensions={}
  %select_n.704 = pred[512,8]{1,0} broadcast(%lt.257), dimensions={}
  %div.1442 = bf16[512,8]{1,0} broadcast(%sqrt.0), dimensions={}
  %div.1443 = bf16[512,8]{1,0} divide(%dynamic-slice.2173, %div.1442)
  %select_n.705 = bf16[512,8]{1,0} select(%select_n.704, %dynamic-slice.2173, %div.1443)
  %broadcast.3915 = bf16[512,8]{1,0} broadcast(%constant.13404), dimensions={}
  %mul.9923 = bf16[512,8]{1,0} multiply(%select_n.705, %broadcast.3915)
  %param.333 = bf16[512,8]{1,0} parameter(326), sharding={devices=[8,1]<=[8]}
  %broadcast.3916 = bf16[512,8]{1,0} broadcast(%constant.13405), dimensions={}
  %mul.9924 = bf16[512,8]{1,0} multiply(%param.333, %broadcast.3916)
  %add.2786 = bf16[512,8]{1,0} add(%mul.9923, %mul.9924)
  %div.1444 = bf16[512,8]{1,0} broadcast(%convert_element_type.3788), dimensions={}
  %integer_pow.1 = bf16[512,8]{1,0} multiply(%select_n.705, %select_n.705)
  %broadcast.3917 = bf16[512,8]{1,0} broadcast(%constant.13408), dimensions={}
  %mul.9925 = bf16[512,8]{1,0} multiply(%integer_pow.1, %broadcast.3917)
  %param.334 = bf16[512,8]{1,0} parameter(649), sharding={devices=[8,1]<=[8]}
  %broadcast.3918 = bf16[512,8]{1,0} broadcast(%constant.13409), dimensions={}
  %mul.9926 = bf16[512,8]{1,0} multiply(%param.334, %broadcast.3918)
  %add.2787 = bf16[512,8]{1,0} add(%mul.9925, %mul.9926)
  %div.1446 = bf16[512,8]{1,0} broadcast(%convert_element_type.3789), dimensions={}
  %div.1447 = bf16[512,8]{1,0} divide(%add.2787, %div.1446)
  %sqrt.2 = bf16[512,8]{1,0} sqrt(%div.1447)
  %broadcast.3919 = bf16[512,8]{1,0} broadcast(%constant.13411), dimensions={}
  %add.2788 = bf16[512,8]{1,0} add(%sqrt.2, %broadcast.3919)
  %multiply.2513 = bf16[512,8]{1,0} multiply(%div.1444, %add.2788)
  %div.1448 = bf16[512,8]{1,0} divide(%add.2786, %multiply.2513)
  %mul.9927 = bf16[512,8]{1,0} multiply(%param.13, %broadcast.3915)
  %add.2789 = bf16[512,8]{1,0} add(%div.1448, %mul.9927)
  %mul.9928 = bf16[512,8]{1,0} multiply(%mul.9922, %add.2789)
  %add.2790 = bf16[512,8]{1,0} add(%param.13, %mul.9928)
  %mul.9929 = bf16[1,4096,14336]{2,1,0} broadcast(%convert_element_type.1176), dimensions={}
  %select_n.706 = pred[1,4096,14336]{2,1,0} broadcast(%lt.257), dimensions={}
  %div.1450 = bf16[1,4096,14336]{2,1,0} broadcast(%sqrt.0), dimensions={}
  %div.1453 = bf16[1,4096,14336]{2,1,0} divide(%sharding_constraint.2435, %div.1450)
  %select_n.707 = bf16[1,4096,14336]{2,1,0} select(%select_n.706, %sharding_constraint.2435, %div.1453)
  %broadcast.3920 = bf16[1,4096,14336]{2,1,0} broadcast(%constant.13404), dimensions={}
  %mul.9930 = bf16[1,4096,14336]{2,1,0} multiply(%select_n.707, %broadcast.3920)
  %param.335 = bf16[1,4096,14336]{2,1,0} parameter(327), sharding={devices=[8,1,1]<=[8]}
  %broadcast.3921 = bf16[1,4096,14336]{2,1,0} broadcast(%constant.13405), dimensions={}
  %mul.9931 = bf16[1,4096,14336]{2,1,0} multiply(%param.335, %broadcast.3921)
  %add.2791 = bf16[1,4096,14336]{2,1,0} add(%mul.9930, %mul.9931)
  %div.1454 = bf16[1,4096,14336]{2,1,0} broadcast(%convert_element_type.3788), dimensions={}
  %integer_pow.2 = bf16[1,4096,14336]{2,1,0} multiply(%select_n.707, %select_n.707)
  %broadcast.3922 = bf16[1,4096,14336]{2,1,0} broadcast(%constant.13408), dimensions={}
  %mul.9932 = bf16[1,4096,14336]{2,1,0} multiply(%integer_pow.2, %broadcast.3922)
  %param.336 = bf16[1,4096,14336]{2,1,0} parameter(650), sharding={devices=[8,1,1]<=[8]}
  %broadcast.3923 = bf16[1,4096,14336]{2,1,0} broadcast(%constant.13409), dimensions={}
  %mul.9933 = bf16[1,4096,14336]{2,1,0} multiply(%param.336, %broadcast.3923)
  %add.2792 = bf16[1,4096,14336]{2,1,0} add(%mul.9932, %mul.9933)
  %div.1455 = bf16[1,4096,14336]{2,1,0} broadcast(%convert_element_type.3789), dimensions={}
  %div.1456 = bf16[1,4096,14336]{2,1,0} divide(%add.2792, %div.1455)
  %sqrt.3 = bf16[1,4096,14336]{2,1,0} sqrt(%div.1456)
  %broadcast.3924 = bf16[1,4096,14336]{2,1,0} broadcast(%constant.13411), dimensions={}
  %add.2794 = bf16[1,4096,14336]{2,1,0} add(%sqrt.3, %broadcast.3924)
  %multiply.2514 = bf16[1,4096,14336]{2,1,0} multiply(%div.1454, %add.2794)
  %div.1457 = bf16[1,4096,14336]{2,1,0} divide(%add.2791, %multiply.2514)
  %mul.9934 = bf16[1,4096,14336]{2,1,0} multiply(%param.14, %broadcast.3920)
  %add.2795 = bf16[1,4096,14336]{2,1,0} add(%div.1457, %mul.9934)
  %mul.9938 = bf16[1,4096,14336]{2,1,0} multiply(%mul.9929, %add.2795)
  %add.2796 = bf16[1,4096,14336]{2,1,0} add(%param.14, %mul.9938)
  %div.1458 = bf16[1,4096,14336]{2,1,0} divide(%sharding_constraint.2437, %div.1450)
  %select_n.708 = bf16[1,4096,14336]{2,1,0} select(%select_n.706, %sharding_constraint.2437, %div.1458)
  %mul.9942 = bf16[1,4096,14336]{2,1,0} multiply(%select_n.708, %broadcast.3920)
  %param.337 = bf16[1,4096,14336]{2,1,0} parameter(328), sharding={devices=[8,1,1]<=[8]}
  %mul.9943 = bf16[1,4096,14336]{2,1,0} multiply(%param.337, %broadcast.3921)
  %add.2797 = bf16[1,4096,14336]{2,1,0} add(%mul.9942, %mul.9943)
  %integer_pow.3 = bf16[1,4096,14336]{2,1,0} multiply(%select_n.708, %select_n.708)
  %mul.9944 = bf16[1,4096,14336]{2,1,0} multiply(%integer_pow.3, %broadcast.3922)
  %param.338 = bf16[1,4096,14336]{2,1,0} parameter(651), sharding={devices=[8,1,1]<=[8]}
  %mul.9945 = bf16[1,4096,14336]{2,1,0} multiply(%param.338, %broadcast.3923)
  %add.2799 = bf16[1,4096,14336]{2,1,0} add(%mul.9944, %mul.9945)
  %div.1461 = bf16[1,4096,14336]{2,1,0} divide(%add.2799, %div.1455)
  %sqrt.4 = bf16[1,4096,14336]{2,1,0} sqrt(%div.1461)
  %add.2800 = bf16[1,4096,14336]{2,1,0} add(%sqrt.4, %broadcast.3924)
  %multiply.2515 = bf16[1,4096,14336]{2,1,0} multiply(%div.1454, %add.2800)
  %div.1462 = bf16[1,4096,14336]{2,1,0} divide(%add.2797, %multiply.2515)
  %mul.9946 = bf16[1,4096,14336]{2,1,0} multiply(%param.15, %broadcast.3920)
  %add.2801 = bf16[1,4096,14336]{2,1,0} add(%div.1462, %mul.9946)
  %mul.9947 = bf16[1,4096,14336]{2,1,0} multiply(%mul.9929, %add.2801)
  %add.2802 = bf16[1,4096,14336]{2,1,0} add(%param.15, %mul.9947)
  %mul.9949 = bf16[1,14336,4096]{2,1,0} broadcast(%convert_element_type.1176), dimensions={}
  %select_n.709 = pred[1,14336,4096]{2,1,0} broadcast(%lt.257), dimensions={}
  %div.1463 = bf16[1,14336,4096]{2,1,0} broadcast(%sqrt.0), dimensions={}
  %div.1464 = bf16[1,14336,4096]{2,1,0} divide(%sharding_constraint.2438, %div.1463)
  %select_n.710 = bf16[1,14336,4096]{2,1,0} select(%select_n.709, %sharding_constraint.2438, %div.1464)
  %broadcast.3925 = bf16[1,14336,4096]{2,1,0} broadcast(%constant.13404), dimensions={}
  %mul.9950 = bf16[1,14336,4096]{2,1,0} multiply(%select_n.710, %broadcast.3925)
  %param.339 = bf16[1,14336,4096]{2,1,0} parameter(329), sharding={devices=[8,1,1]<=[8]}
  %broadcast.3926 = bf16[1,14336,4096]{2,1,0} broadcast(%constant.13405), dimensions={}
  %mul.9951 = bf16[1,14336,4096]{2,1,0} multiply(%param.339, %broadcast.3926)
  %add.2803 = bf16[1,14336,4096]{2,1,0} add(%mul.9950, %mul.9951)
  %div.1465 = bf16[1,14336,4096]{2,1,0} broadcast(%convert_element_type.3788), dimensions={}
  %integer_pow.4 = bf16[1,14336,4096]{2,1,0} multiply(%select_n.710, %select_n.710)
  %broadcast.3927 = bf16[1,14336,4096]{2,1,0} broadcast(%constant.13408), dimensions={}
  %mul.9952 = bf16[1,14336,4096]{2,1,0} multiply(%integer_pow.4, %broadcast.3927)
  %param.340 = bf16[1,14336,4096]{2,1,0} parameter(652), sharding={devices=[8,1,1]<=[8]}
  %broadcast.3928 = bf16[1,14336,4096]{2,1,0} broadcast(%constant.13409), dimensions={}
  %mul.9953 = bf16[1,14336,4096]{2,1,0} multiply(%param.340, %broadcast.3928)
  %add.2804 = bf16[1,14336,4096]{2,1,0} add(%mul.9952, %mul.9953)
  %div.1466 = bf16[1,14336,4096]{2,1,0} broadcast(%convert_element_type.3789), dimensions={}
  %div.1467 = bf16[1,14336,4096]{2,1,0} divide(%add.2804, %div.1466)
  %sqrt.5 = bf16[1,14336,4096]{2,1,0} sqrt(%div.1467)
  %broadcast.3929 = bf16[1,14336,4096]{2,1,0} broadcast(%constant.13411), dimensions={}
  %add.2805 = bf16[1,14336,4096]{2,1,0} add(%sqrt.5, %broadcast.3929)
  %multiply.2516 = bf16[1,14336,4096]{2,1,0} multiply(%div.1465, %add.2805)
  %div.1468 = bf16[1,14336,4096]{2,1,0} divide(%add.2803, %multiply.2516)
  %mul.9954 = bf16[1,14336,4096]{2,1,0} multiply(%param.16, %broadcast.3925)
  %add.2806 = bf16[1,14336,4096]{2,1,0} add(%div.1468, %mul.9954)
  %mul.9955 = bf16[1,14336,4096]{2,1,0} multiply(%mul.9949, %add.2806)
  %add.2807 = bf16[1,14336,4096]{2,1,0} add(%param.16, %mul.9955)
  %div.1469 = bf16[4096]{0} divide(%all-reduce.7, %div.1436)
  %select_n.711 = bf16[4096]{0} select(%select_n.701, %all-reduce.7, %div.1469)
  %mul.9960 = bf16[4096]{0} multiply(%select_n.711, %broadcast.3910)
  %param.341 = bf16[4096]{0} parameter(330), sharding={replicated}
  %mul.9961 = bf16[4096]{0} multiply(%param.341, %broadcast.3911)
  %add.2808 = bf16[4096]{0} add(%mul.9960, %mul.9961)
  %integer_pow.5 = bf16[4096]{0} multiply(%select_n.711, %select_n.711)
  %mul.9965 = bf16[4096]{0} multiply(%integer_pow.5, %broadcast.3912)
  %param.342 = bf16[4096]{0} parameter(653), sharding={replicated}
  %mul.9972 = bf16[4096]{0} multiply(%param.342, %broadcast.3913)
  %add.2809 = bf16[4096]{0} add(%mul.9965, %mul.9972)
  %div.1472 = bf16[4096]{0} divide(%add.2809, %div.1439)
  %sqrt.6 = bf16[4096]{0} sqrt(%div.1472)
  %add.2810 = bf16[4096]{0} add(%sqrt.6, %broadcast.3914)
  %multiply.2517 = bf16[4096]{0} multiply(%div.1438, %add.2810)
  %div.1473 = bf16[4096]{0} divide(%add.2808, %multiply.2517)
  %mul.9973 = bf16[4096]{0} multiply(%param.12, %broadcast.3910)
  %add.2811 = bf16[4096]{0} add(%div.1473, %mul.9973)
  %mul.9974 = bf16[4096]{0} multiply(%mul.2424, %add.2811)
  %add.2812 = bf16[4096]{0} add(%param.12, %mul.9974)
  %div.1474 = bf16[4096]{0} divide(%all-reduce.8, %div.1436)
  %select_n.712 = bf16[4096]{0} select(%select_n.701, %all-reduce.8, %div.1474)
  %mul.9976 = bf16[4096]{0} multiply(%select_n.712, %broadcast.3910)
  %param.343 = bf16[4096]{0} parameter(331), sharding={replicated}
  %mul.9977 = bf16[4096]{0} multiply(%param.343, %broadcast.3911)
  %add.2813 = bf16[4096]{0} add(%mul.9976, %mul.9977)
  %integer_pow.6 = bf16[4096]{0} multiply(%select_n.712, %select_n.712)
  %mul.9978 = bf16[4096]{0} multiply(%integer_pow.6, %broadcast.3912)
  %param.344 = bf16[4096]{0} parameter(654), sharding={replicated}
  %mul.9979 = bf16[4096]{0} multiply(%param.344, %broadcast.3913)
  %add.2814 = bf16[4096]{0} add(%mul.9978, %mul.9979)
  %div.1477 = bf16[4096]{0} divide(%add.2814, %div.1439)
  %sqrt.7 = bf16[4096]{0} sqrt(%div.1477)
  %add.2815 = bf16[4096]{0} add(%sqrt.7, %broadcast.3914)
  %multiply.2518 = bf16[4096]{0} multiply(%div.1438, %add.2815)
  %div.1478 = bf16[4096]{0} divide(%add.2813, %multiply.2518)
  %mul.9980 = bf16[4096]{0} multiply(%param.5, %broadcast.3910)
  %add.2816 = bf16[4096]{0} add(%div.1478, %mul.9980)
  %mul.9983 = bf16[4096]{0} multiply(%mul.2424, %add.2816)
  %add.2817 = bf16[4096]{0} add(%param.5, %mul.9983)
  %mul.9984 = bf16[512,8,128]{2,1,0} broadcast(%convert_element_type.1176), dimensions={}
  %select_n.713 = pred[512,8,128]{2,1,0} broadcast(%lt.257), dimensions={}
  %div.1479 = bf16[512,8,128]{2,1,0} broadcast(%sqrt.0), dimensions={}
  %div.1480 = bf16[512,8,128]{0,2,1} divide(%transpose.325, %div.1479)
  %select_n.714 = bf16[512,8,128]{2,1,0} select(%select_n.713, %transpose.325, %div.1480)
  %broadcast.3930 = bf16[512,8,128]{2,1,0} broadcast(%constant.13404), dimensions={}
  %mul.9985 = bf16[512,8,128]{2,1,0} multiply(%select_n.714, %broadcast.3930)
  %param.345 = bf16[512,8,128]{2,1,0} parameter(332), sharding={devices=[8,1,1]<=[8]}
  %broadcast.3931 = bf16[512,8,128]{2,1,0} broadcast(%constant.13405), dimensions={}
  %mul.9986 = bf16[512,8,128]{2,1,0} multiply(%param.345, %broadcast.3931)
  %add.2818 = bf16[512,8,128]{2,1,0} add(%mul.9985, %mul.9986)
  %div.1481 = bf16[512,8,128]{2,1,0} broadcast(%convert_element_type.3788), dimensions={}
  %integer_pow.7 = bf16[512,8,128]{2,1,0} multiply(%select_n.714, %select_n.714)
  %broadcast.3932 = bf16[512,8,128]{2,1,0} broadcast(%constant.13408), dimensions={}
  %mul.9987 = bf16[512,8,128]{2,1,0} multiply(%integer_pow.7, %broadcast.3932)
  %param.346 = bf16[512,8,128]{2,1,0} parameter(655), sharding={devices=[8,1,1]<=[8]}
  %broadcast.3933 = bf16[512,8,128]{2,1,0} broadcast(%constant.13409), dimensions={}
  %mul.9988 = bf16[512,8,128]{2,1,0} multiply(%param.346, %broadcast.3933)
  %add.2819 = bf16[512,8,128]{2,1,0} add(%mul.9987, %mul.9988)
  %div.1482 = bf16[512,8,128]{2,1,0} broadcast(%convert_element_type.3789), dimensions={}
  %div.1483 = bf16[512,8,128]{2,1,0} divide(%add.2819, %div.1482)
  %sqrt.8 = bf16[512,8,128]{2,1,0} sqrt(%div.1483)
  %broadcast.3934 = bf16[512,8,128]{2,1,0} broadcast(%constant.13411), dimensions={}
  %add.2820 = bf16[512,8,128]{2,1,0} add(%sqrt.8, %broadcast.3934)
  %multiply.2519 = bf16[512,8,128]{2,1,0} multiply(%div.1481, %add.2820)
  %div.1484 = bf16[512,8,128]{2,1,0} divide(%add.2818, %multiply.2519)
  %mul.9992 = bf16[512,8,128]{2,1,0} multiply(%param.8, %broadcast.3930)
  %add.2821 = bf16[512,8,128]{2,1,0} add(%div.1484, %mul.9992)
  %mul.9993 = bf16[512,8,128]{2,1,0} multiply(%mul.9984, %add.2821)
  %add.2822 = bf16[512,8,128]{2,1,0} add(%param.8, %mul.9993)
  %mul.9994 = bf16[32,128,512]{2,1,0} broadcast(%convert_element_type.1176), dimensions={}
  %select_n.715 = pred[32,128,512]{2,1,0} broadcast(%lt.257), dimensions={}
  %div.1485 = bf16[32,128,512]{2,1,0} broadcast(%sqrt.0), dimensions={}
  %div.1486 = bf16[32,128,512]{1,0,2} divide(%transpose.326, %div.1485)
  %select_n.716 = bf16[32,128,512]{2,1,0} select(%select_n.715, %transpose.326, %div.1486)
  %broadcast.3935 = bf16[32,128,512]{2,1,0} broadcast(%constant.13404), dimensions={}
  %mul.9998 = bf16[32,128,512]{2,1,0} multiply(%select_n.716, %broadcast.3935)
  %param.347 = bf16[32,128,512]{2,1,0} parameter(333), sharding={devices=[1,1,8]<=[8]}
  %broadcast.3936 = bf16[32,128,512]{2,1,0} broadcast(%constant.13405), dimensions={}
  %mul.10005 = bf16[32,128,512]{2,1,0} multiply(%param.347, %broadcast.3936)
  %add.2823 = bf16[32,128,512]{2,1,0} add(%mul.9998, %mul.10005)
  %div.1487 = bf16[32,128,512]{2,1,0} broadcast(%convert_element_type.3788), dimensions={}
  %integer_pow.8 = bf16[32,128,512]{2,1,0} multiply(%select_n.716, %select_n.716)
  %broadcast.3937 = bf16[32,128,512]{2,1,0} broadcast(%constant.13408), dimensions={}
  %mul.10006 = bf16[32,128,512]{2,1,0} multiply(%integer_pow.8, %broadcast.3937)
  %param.348 = bf16[32,128,512]{2,1,0} parameter(656), sharding={devices=[1,1,8]<=[8]}
  %broadcast.3938 = bf16[32,128,512]{2,1,0} broadcast(%constant.13409), dimensions={}
  %mul.10007 = bf16[32,128,512]{2,1,0} multiply(%param.348, %broadcast.3938)
  %add.2824 = bf16[32,128,512]{2,1,0} add(%mul.10006, %mul.10007)
  %div.1488 = bf16[32,128,512]{2,1,0} broadcast(%convert_element_type.3789), dimensions={}
  %div.1489 = bf16[32,128,512]{2,1,0} divide(%add.2824, %div.1488)
  %sqrt.9 = bf16[32,128,512]{2,1,0} sqrt(%div.1489)
  %broadcast.3939 = bf16[32,128,512]{2,1,0} broadcast(%constant.13411), dimensions={}
  %add.2825 = bf16[32,128,512]{2,1,0} add(%sqrt.9, %broadcast.3939)
  %multiply.2520 = bf16[32,128,512]{2,1,0} multiply(%div.1487, %add.2825)
  %div.1490 = bf16[32,128,512]{2,1,0} divide(%add.2823, %multiply.2520)
  %mul.10008 = bf16[32,128,512]{2,1,0} multiply(%param.11, %broadcast.3935)
  %add.2827 = bf16[32,128,512]{2,1,0} add(%div.1490, %mul.10008)
  %mul.10009 = bf16[32,128,512]{2,1,0} multiply(%mul.9994, %add.2827)
  %add.2828 = bf16[32,128,512]{2,1,0} add(%param.11, %mul.10009)
  %mul.10010 = bf16[512,32,128]{2,1,0} broadcast(%convert_element_type.1176), dimensions={}
  %select_n.717 = pred[512,32,128]{2,1,0} broadcast(%lt.257), dimensions={}
  %div.1491 = bf16[512,32,128]{2,1,0} broadcast(%sqrt.0), dimensions={}
  %div.1492 = bf16[512,32,128]{0,2,1} divide(%transpose.327, %div.1491)
  %select_n.718 = bf16[512,32,128]{2,1,0} select(%select_n.717, %transpose.327, %div.1492)
  %broadcast.3940 = bf16[512,32,128]{2,1,0} broadcast(%constant.13404), dimensions={}
  %mul.10011 = bf16[512,32,128]{2,1,0} multiply(%select_n.718, %broadcast.3940)
  %param.349 = bf16[512,32,128]{2,1,0} parameter(334), sharding={devices=[8,1,1]<=[8]}
  %broadcast.3941 = bf16[512,32,128]{2,1,0} broadcast(%constant.13405), dimensions={}
  %mul.10012 = bf16[512,32,128]{2,1,0} multiply(%param.349, %broadcast.3941)
  %add.2829 = bf16[512,32,128]{2,1,0} add(%mul.10011, %mul.10012)
  %div.1493 = bf16[512,32,128]{2,1,0} broadcast(%convert_element_type.3788), dimensions={}
  %integer_pow.9 = bf16[512,32,128]{2,1,0} multiply(%select_n.718, %select_n.718)
  %broadcast.3942 = bf16[512,32,128]{2,1,0} broadcast(%constant.13408), dimensions={}
  %mul.10013 = bf16[512,32,128]{2,1,0} multiply(%integer_pow.9, %broadcast.3942)
  %param.350 = bf16[512,32,128]{2,1,0} parameter(657), sharding={devices=[8,1,1]<=[8]}
  %broadcast.3943 = bf16[512,32,128]{2,1,0} broadcast(%constant.13409), dimensions={}
  %mul.10014 = bf16[512,32,128]{2,1,0} multiply(%param.350, %broadcast.3943)
  %add.2830 = bf16[512,32,128]{2,1,0} add(%mul.10013, %mul.10014)
  %div.1494 = bf16[512,32,128]{2,1,0} broadcast(%convert_element_type.3789), dimensions={}
  %div.1495 = bf16[512,32,128]{2,1,0} divide(%add.2830, %div.1494)
  %sqrt.10 = bf16[512,32,128]{2,1,0} sqrt(%div.1495)
  %broadcast.3944 = bf16[512,32,128]{2,1,0} broadcast(%constant.13411), dimensions={}
  %add.2831 = bf16[512,32,128]{2,1,0} add(%sqrt.10, %broadcast.3944)
  %multiply.2521 = bf16[512,32,128]{2,1,0} multiply(%div.1493, %add.2831)
  %div.1496 = bf16[512,32,128]{2,1,0} divide(%add.2829, %multiply.2521)
  %mul.10015 = bf16[512,32,128]{2,1,0} multiply(%param.6, %broadcast.3940)
  %add.2832 = bf16[512,32,128]{2,1,0} add(%div.1496, %mul.10015)
  %mul.10016 = bf16[512,32,128]{2,1,0} multiply(%mul.10010, %add.2832)
  %add.2833 = bf16[512,32,128]{2,1,0} add(%param.6, %mul.10016)
  %div.1497 = bf16[512,8,128]{0,2,1} divide(%transpose.328, %div.1479)
  %select_n.719 = bf16[512,8,128]{2,1,0} select(%select_n.713, %transpose.328, %div.1497)
  %mul.10018 = bf16[512,8,128]{2,1,0} multiply(%select_n.719, %broadcast.3930)
  %param.351 = bf16[512,8,128]{2,1,0} parameter(335), sharding={devices=[8,1,1]<=[8]}
  %mul.10019 = bf16[512,8,128]{2,1,0} multiply(%param.351, %broadcast.3931)
  %add.2834 = bf16[512,8,128]{2,1,0} add(%mul.10018, %mul.10019)
  %integer_pow.10 = bf16[512,8,128]{2,1,0} multiply(%select_n.719, %select_n.719)
  %mul.10021 = bf16[512,8,128]{2,1,0} multiply(%integer_pow.10, %broadcast.3932)
  %param.352 = bf16[512,8,128]{2,1,0} parameter(658), sharding={devices=[8,1,1]<=[8]}
  %mul.10022 = bf16[512,8,128]{2,1,0} multiply(%param.352, %broadcast.3933)
  %add.2835 = bf16[512,8,128]{2,1,0} add(%mul.10021, %mul.10022)
  %div.1500 = bf16[512,8,128]{2,1,0} divide(%add.2835, %div.1482)
  %sqrt.11 = bf16[512,8,128]{2,1,0} sqrt(%div.1500)
  %add.2836 = bf16[512,8,128]{2,1,0} add(%sqrt.11, %broadcast.3934)
  %multiply.2522 = bf16[512,8,128]{2,1,0} multiply(%div.1481, %add.2836)
  %div.1501 = bf16[512,8,128]{2,1,0} divide(%add.2834, %multiply.2522)
  %mul.10023 = bf16[512,8,128]{2,1,0} multiply(%param.9, %broadcast.3930)
  %add.2837 = bf16[512,8,128]{2,1,0} add(%div.1501, %mul.10023)
  %mul.10024 = bf16[512,8,128]{2,1,0} multiply(%mul.9984, %add.2837)
  %add.2839 = bf16[512,8,128]{2,1,0} add(%param.9, %mul.10024)
  %div.1502 = bf16[512,8]{1,0} divide(%dynamic-slice.2191, %div.1442)
  %select_n.720 = bf16[512,8]{1,0} select(%select_n.704, %dynamic-slice.2191, %div.1502)
  %mul.10026 = bf16[512,8]{1,0} multiply(%select_n.720, %broadcast.3915)
  %param.353 = bf16[512,8]{1,0} parameter(336), sharding={devices=[8,1]<=[8]}
  %mul.10027 = bf16[512,8]{1,0} multiply(%param.353, %broadcast.3916)
  %add.2840 = bf16[512,8]{1,0} add(%mul.10026, %mul.10027)
  %integer_pow.11 = bf16[512,8]{1,0} multiply(%select_n.720, %select_n.720)
  %mul.10028 = bf16[512,8]{1,0} multiply(%integer_pow.11, %broadcast.3917)
  %param.354 = bf16[512,8]{1,0} parameter(659), sharding={devices=[8,1]<=[8]}
  %mul.10029 = bf16[512,8]{1,0} multiply(%param.354, %broadcast.3918)
  %add.2841 = bf16[512,8]{1,0} add(%mul.10028, %mul.10029)
  %div.1506 = bf16[512,8]{1,0} divide(%add.2841, %div.1446)
  %sqrt.12 = bf16[512,8]{1,0} sqrt(%div.1506)
  %add.2842 = bf16[512,8]{1,0} add(%sqrt.12, %broadcast.3919)
  %multiply.2523 = bf16[512,8]{1,0} multiply(%div.1444, %add.2842)
  %div.1507 = bf16[512,8]{1,0} divide(%add.2840, %multiply.2523)
  %mul.10030 = bf16[512,8]{1,0} multiply(%param.23, %broadcast.3915)
  %add.2843 = bf16[512,8]{1,0} add(%div.1507, %mul.10030)
  %mul.10031 = bf16[512,8]{1,0} multiply(%mul.9922, %add.2843)
  %add.2844 = bf16[512,8]{1,0} add(%param.23, %mul.10031)
  %div.1508 = bf16[1,4096,14336]{2,1,0} divide(%sharding_constraint.2454, %div.1450)
  %select_n.721 = bf16[1,4096,14336]{2,1,0} select(%select_n.706, %sharding_constraint.2454, %div.1508)
  %mul.10033 = bf16[1,4096,14336]{2,1,0} multiply(%select_n.721, %broadcast.3920)
  %param.355 = bf16[1,4096,14336]{2,1,0} parameter(337), sharding={devices=[8,1,1]<=[8]}
  %mul.10034 = bf16[1,4096,14336]{2,1,0} multiply(%param.355, %broadcast.3921)
  %add.2845 = bf16[1,4096,14336]{2,1,0} add(%mul.10033, %mul.10034)
  %integer_pow.12 = bf16[1,4096,14336]{2,1,0} multiply(%select_n.721, %select_n.721)
  %mul.10035 = bf16[1,4096,14336]{2,1,0} multiply(%integer_pow.12, %broadcast.3922)
  %param.356 = bf16[1,4096,14336]{2,1,0} parameter(660), sharding={devices=[8,1,1]<=[8]}
  %mul.10036 = bf16[1,4096,14336]{2,1,0} multiply(%param.356, %broadcast.3923)
  %add.2846 = bf16[1,4096,14336]{2,1,0} add(%mul.10035, %mul.10036)
  %div.1511 = bf16[1,4096,14336]{2,1,0} divide(%add.2846, %div.1455)
  %sqrt.13 = bf16[1,4096,14336]{2,1,0} sqrt(%div.1511)
  %add.2847 = bf16[1,4096,14336]{2,1,0} add(%sqrt.13, %broadcast.3924)
  %multiply.2524 = bf16[1,4096,14336]{2,1,0} multiply(%div.1454, %add.2847)
  %div.1512 = bf16[1,4096,14336]{2,1,0} divide(%add.2845, %multiply.2524)
  %mul.10037 = bf16[1,4096,14336]{2,1,0} multiply(%param.24, %broadcast.3920)
  %add.2848 = bf16[1,4096,14336]{2,1,0} add(%div.1512, %mul.10037)
  %mul.10038 = bf16[1,4096,14336]{2,1,0} multiply(%mul.9929, %add.2848)
  %add.2849 = bf16[1,4096,14336]{2,1,0} add(%param.24, %mul.10038)
  %div.1513 = bf16[1,4096,14336]{2,1,0} divide(%sharding_constraint.2457, %div.1450)
  %select_n.722 = bf16[1,4096,14336]{2,1,0} select(%select_n.706, %sharding_constraint.2457, %div.1513)
  %mul.10044 = bf16[1,4096,14336]{2,1,0} multiply(%select_n.722, %broadcast.3920)
  %param.357 = bf16[1,4096,14336]{2,1,0} parameter(338), sharding={devices=[8,1,1]<=[8]}
  %mul.10045 = bf16[1,4096,14336]{2,1,0} multiply(%param.357, %broadcast.3921)
  %add.2850 = bf16[1,4096,14336]{2,1,0} add(%mul.10044, %mul.10045)
  %integer_pow.13 = bf16[1,4096,14336]{2,1,0} multiply(%select_n.722, %select_n.722)
  %mul.10050 = bf16[1,4096,14336]{2,1,0} multiply(%integer_pow.13, %broadcast.3922)
  %param.358 = bf16[1,4096,14336]{2,1,0} parameter(661), sharding={devices=[8,1,1]<=[8]}
  %mul.10051 = bf16[1,4096,14336]{2,1,0} multiply(%param.358, %broadcast.3923)
  %add.2851 = bf16[1,4096,14336]{2,1,0} add(%mul.10050, %mul.10051)
  %div.1516 = bf16[1,4096,14336]{2,1,0} divide(%add.2851, %div.1455)
  %sqrt.14 = bf16[1,4096,14336]{2,1,0} sqrt(%div.1516)
  %add.2852 = bf16[1,4096,14336]{2,1,0} add(%sqrt.14, %broadcast.3924)
  %multiply.2525 = bf16[1,4096,14336]{2,1,0} multiply(%div.1454, %add.2852)
  %div.1517 = bf16[1,4096,14336]{2,1,0} divide(%add.2850, %multiply.2525)
  %mul.10052 = bf16[1,4096,14336]{2,1,0} multiply(%param.25, %broadcast.3920)
  %add.2853 = bf16[1,4096,14336]{2,1,0} add(%div.1517, %mul.10052)
  %mul.10053 = bf16[1,4096,14336]{2,1,0} multiply(%mul.9929, %add.2853)
  %add.2854 = bf16[1,4096,14336]{2,1,0} add(%param.25, %mul.10053)
  %div.1518 = bf16[1,14336,4096]{2,1,0} divide(%sharding_constraint.2459, %div.1463)
  %select_n.723 = bf16[1,14336,4096]{2,1,0} select(%select_n.709, %sharding_constraint.2459, %div.1518)
  %mul.10055 = bf16[1,14336,4096]{2,1,0} multiply(%select_n.723, %broadcast.3925)
  %param.359 = bf16[1,14336,4096]{2,1,0} parameter(339), sharding={devices=[8,1,1]<=[8]}
  %mul.10056 = bf16[1,14336,4096]{2,1,0} multiply(%param.359, %broadcast.3926)
  %add.2855 = bf16[1,14336,4096]{2,1,0} add(%mul.10055, %mul.10056)
  %integer_pow.14 = bf16[1,14336,4096]{2,1,0} multiply(%select_n.723, %select_n.723)
  %mul.10057 = bf16[1,14336,4096]{2,1,0} multiply(%integer_pow.14, %broadcast.3927)
  %param.360 = bf16[1,14336,4096]{2,1,0} parameter(662), sharding={devices=[8,1,1]<=[8]}
  %mul.10059 = bf16[1,14336,4096]{2,1,0} multiply(%param.360, %broadcast.3928)
  %add.2856 = bf16[1,14336,4096]{2,1,0} add(%mul.10057, %mul.10059)
  %div.1521 = bf16[1,14336,4096]{2,1,0} divide(%add.2856, %div.1466)
  %sqrt.15 = bf16[1,14336,4096]{2,1,0} sqrt(%div.1521)
  %add.2857 = bf16[1,14336,4096]{2,1,0} add(%sqrt.15, %broadcast.3929)
  %multiply.2526 = bf16[1,14336,4096]{2,1,0} multiply(%div.1465, %add.2857)
  %div.1522 = bf16[1,14336,4096]{2,1,0} divide(%add.2855, %multiply.2526)
  %mul.10060 = bf16[1,14336,4096]{2,1,0} multiply(%param.26, %broadcast.3925)
  %add.2858 = bf16[1,14336,4096]{2,1,0} add(%div.1522, %mul.10060)
  %mul.10064 = bf16[1,14336,4096]{2,1,0} multiply(%mul.9949, %add.2858)
  %add.2859 = bf16[1,14336,4096]{2,1,0} add(%param.26, %mul.10064)
  %div.1524 = bf16[4096]{0} divide(%all-reduce.22, %div.1436)
  %select_n.724 = bf16[4096]{0} select(%select_n.701, %all-reduce.22, %div.1524)
  %mul.10068 = bf16[4096]{0} multiply(%select_n.724, %broadcast.3910)
  %param.361 = bf16[4096]{0} parameter(340), sharding={replicated}
  %mul.10069 = bf16[4096]{0} multiply(%param.361, %broadcast.3911)
  %add.2860 = bf16[4096]{0} add(%mul.10068, %mul.10069)
  %integer_pow.15 = bf16[4096]{0} multiply(%select_n.724, %select_n.724)
  %mul.10070 = bf16[4096]{0} multiply(%integer_pow.15, %broadcast.3912)
  %param.362 = bf16[4096]{0} parameter(663), sharding={replicated}
  %mul.10071 = bf16[4096]{0} multiply(%param.362, %broadcast.3913)
  %add.2861 = bf16[4096]{0} add(%mul.10070, %mul.10071)
  %div.1528 = bf16[4096]{0} divide(%add.2861, %div.1439)
  %sqrt.16 = bf16[4096]{0} sqrt(%div.1528)
  %add.2862 = bf16[4096]{0} add(%sqrt.16, %broadcast.3914)
  %multiply.2527 = bf16[4096]{0} multiply(%div.1438, %add.2862)
  %div.1529 = bf16[4096]{0} divide(%add.2860, %multiply.2527)
  %mul.10072 = bf16[4096]{0} multiply(%param.22, %broadcast.3910)
  %add.2863 = bf16[4096]{0} add(%div.1529, %mul.10072)
  %mul.10073 = bf16[4096]{0} multiply(%mul.2424, %add.2863)
  %add.2864 = bf16[4096]{0} add(%param.22, %mul.10073)
  %div.1530 = bf16[4096]{0} divide(%all-reduce.23, %div.1436)
  %select_n.725 = bf16[4096]{0} select(%select_n.701, %all-reduce.23, %div.1530)
  %mul.10075 = bf16[4096]{0} multiply(%select_n.725, %broadcast.3910)
  %param.363 = bf16[4096]{0} parameter(341), sharding={replicated}
  %mul.10076 = bf16[4096]{0} multiply(%param.363, %broadcast.3911)
  %add.2865 = bf16[4096]{0} add(%mul.10075, %mul.10076)
  %integer_pow.16 = bf16[4096]{0} multiply(%select_n.725, %select_n.725)
  %mul.10085 = bf16[4096]{0} multiply(%integer_pow.16, %broadcast.3912)
  %param.364 = bf16[4096]{0} parameter(664), sharding={replicated}
  %mul.10094 = bf16[4096]{0} multiply(%param.364, %broadcast.3913)
  %add.2866 = bf16[4096]{0} add(%mul.10085, %mul.10094)
  %div.1533 = bf16[4096]{0} divide(%add.2866, %div.1439)
  %sqrt.17 = bf16[4096]{0} sqrt(%div.1533)
  %add.2867 = bf16[4096]{0} add(%sqrt.17, %broadcast.3914)
  %multiply.2528 = bf16[4096]{0} multiply(%div.1438, %add.2867)
  %div.1534 = bf16[4096]{0} divide(%add.2865, %multiply.2528)
  %mul.10095 = bf16[4096]{0} multiply(%param.17, %broadcast.3910)
  %add.2868 = bf16[4096]{0} add(%div.1534, %mul.10095)
  %mul.10096 = bf16[4096]{0} multiply(%mul.2424, %add.2868)
  %add.2869 = bf16[4096]{0} add(%param.17, %mul.10096)
  %div.1535 = bf16[512,8,128]{0,2,1} divide(%transpose.329, %div.1479)
  %select_n.726 = bf16[512,8,128]{2,1,0} select(%select_n.713, %transpose.329, %div.1535)
  %mul.10099 = bf16[512,8,128]{2,1,0} multiply(%select_n.726, %broadcast.3930)
  %param.365 = bf16[512,8,128]{2,1,0} parameter(342), sharding={devices=[8,1,1]<=[8]}
  %mul.10100 = bf16[512,8,128]{2,1,0} multiply(%param.365, %broadcast.3931)
  %add.2871 = bf16[512,8,128]{2,1,0} add(%mul.10099, %mul.10100)
  %integer_pow.17 = bf16[512,8,128]{2,1,0} multiply(%select_n.726, %select_n.726)
  %mul.10101 = bf16[512,8,128]{2,1,0} multiply(%integer_pow.17, %broadcast.3932)
  %param.366 = bf16[512,8,128]{2,1,0} parameter(665), sharding={devices=[8,1,1]<=[8]}
  %mul.10102 = bf16[512,8,128]{2,1,0} multiply(%param.366, %broadcast.3933)
  %add.2872 = bf16[512,8,128]{2,1,0} add(%mul.10101, %mul.10102)
  %div.1538 = bf16[512,8,128]{2,1,0} divide(%add.2872, %div.1482)
  %sqrt.18 = bf16[512,8,128]{2,1,0} sqrt(%div.1538)
  %add.2873 = bf16[512,8,128]{2,1,0} add(%sqrt.18, %broadcast.3934)
  %multiply.2529 = bf16[512,8,128]{2,1,0} multiply(%div.1481, %add.2873)
  %div.1539 = bf16[512,8,128]{2,1,0} divide(%add.2871, %multiply.2529)
  %mul.10103 = bf16[512,8,128]{2,1,0} multiply(%param.19, %broadcast.3930)
  %add.2874 = bf16[512,8,128]{2,1,0} add(%div.1539, %mul.10103)
  %mul.10104 = bf16[512,8,128]{2,1,0} multiply(%mul.9984, %add.2874)
  %add.2875 = bf16[512,8,128]{2,1,0} add(%param.19, %mul.10104)
  %div.1540 = bf16[32,128,512]{1,0,2} divide(%transpose.330, %div.1485)
  %select_n.727 = bf16[32,128,512]{2,1,0} select(%select_n.715, %transpose.330, %div.1540)
  %mul.10106 = bf16[32,128,512]{2,1,0} multiply(%select_n.727, %broadcast.3935)
  %param.367 = bf16[32,128,512]{2,1,0} parameter(343), sharding={devices=[1,1,8]<=[8]}
  %mul.10107 = bf16[32,128,512]{2,1,0} multiply(%param.367, %broadcast.3936)
  %add.2876 = bf16[32,128,512]{2,1,0} add(%mul.10106, %mul.10107)
  %integer_pow.18 = bf16[32,128,512]{2,1,0} multiply(%select_n.727, %select_n.727)
  %mul.10108 = bf16[32,128,512]{2,1,0} multiply(%integer_pow.18, %broadcast.3937)
  %param.368 = bf16[32,128,512]{2,1,0} parameter(666), sharding={devices=[1,1,8]<=[8]}
  %mul.10109 = bf16[32,128,512]{2,1,0} multiply(%param.368, %broadcast.3938)
  %add.2877 = bf16[32,128,512]{2,1,0} add(%mul.10108, %mul.10109)
  %div.1543 = bf16[32,128,512]{2,1,0} divide(%add.2877, %div.1488)
  %sqrt.19 = bf16[32,128,512]{2,1,0} sqrt(%div.1543)
  %add.2878 = bf16[32,128,512]{2,1,0} add(%sqrt.19, %broadcast.3939)
  %multiply.2530 = bf16[32,128,512]{2,1,0} multiply(%div.1487, %add.2878)
  %div.1544 = bf16[32,128,512]{2,1,0} divide(%add.2876, %multiply.2530)
  %mul.10110 = bf16[32,128,512]{2,1,0} multiply(%param.21, %broadcast.3935)
  %add.2880 = bf16[32,128,512]{2,1,0} add(%div.1544, %mul.10110)
  %mul.10111 = bf16[32,128,512]{2,1,0} multiply(%mul.9994, %add.2880)
  %add.2881 = bf16[32,128,512]{2,1,0} add(%param.21, %mul.10111)
  %div.1545 = bf16[512,32,128]{0,2,1} divide(%transpose.331, %div.1491)
  %select_n.728 = bf16[512,32,128]{2,1,0} select(%select_n.717, %transpose.331, %div.1545)
  %mul.10113 = bf16[512,32,128]{2,1,0} multiply(%select_n.728, %broadcast.3940)
  %param.369 = bf16[512,32,128]{2,1,0} parameter(344), sharding={devices=[8,1,1]<=[8]}
  %mul.10114 = bf16[512,32,128]{2,1,0} multiply(%param.369, %broadcast.3941)
  %add.2882 = bf16[512,32,128]{2,1,0} add(%mul.10113, %mul.10114)
  %integer_pow.19 = bf16[512,32,128]{2,1,0} multiply(%select_n.728, %select_n.728)
  %mul.10115 = bf16[512,32,128]{2,1,0} multiply(%integer_pow.19, %broadcast.3942)
  %param.370 = bf16[512,32,128]{2,1,0} parameter(667), sharding={devices=[8,1,1]<=[8]}
  %mul.10116 = bf16[512,32,128]{2,1,0} multiply(%param.370, %broadcast.3943)
  %add.2883 = bf16[512,32,128]{2,1,0} add(%mul.10115, %mul.10116)
  %div.1549 = bf16[512,32,128]{2,1,0} divide(%add.2883, %div.1494)
  %sqrt.20 = bf16[512,32,128]{2,1,0} sqrt(%div.1549)
  %add.2884 = bf16[512,32,128]{2,1,0} add(%sqrt.20, %broadcast.3944)
  %multiply.2531 = bf16[512,32,128]{2,1,0} multiply(%div.1493, %add.2884)
  %div.1550 = bf16[512,32,128]{2,1,0} divide(%add.2882, %multiply.2531)
  %mul.10125 = bf16[512,32,128]{2,1,0} multiply(%param.18, %broadcast.3940)
  %add.2885 = bf16[512,32,128]{2,1,0} add(%div.1550, %mul.10125)
  %mul.10134 = bf16[512,32,128]{2,1,0} multiply(%mul.10010, %add.2885)
  %add.2886 = bf16[512,32,128]{2,1,0} add(%param.18, %mul.10134)
  %div.1551 = bf16[512,8,128]{0,2,1} divide(%transpose.332, %div.1479)
  %select_n.729 = bf16[512,8,128]{2,1,0} select(%select_n.713, %transpose.332, %div.1551)
  %mul.10136 = bf16[512,8,128]{2,1,0} multiply(%select_n.729, %broadcast.3930)
  %param.371 = bf16[512,8,128]{2,1,0} parameter(345), sharding={devices=[8,1,1]<=[8]}
  %mul.10137 = bf16[512,8,128]{2,1,0} multiply(%param.371, %broadcast.3931)
  %add.2887 = bf16[512,8,128]{2,1,0} add(%mul.10136, %mul.10137)
  %integer_pow.20 = bf16[512,8,128]{2,1,0} multiply(%select_n.729, %select_n.729)
  %mul.10138 = bf16[512,8,128]{2,1,0} multiply(%integer_pow.20, %broadcast.3932)
  %param.372 = bf16[512,8,128]{2,1,0} parameter(668), sharding={devices=[8,1,1]<=[8]}
  %mul.10139 = bf16[512,8,128]{2,1,0} multiply(%param.372, %broadcast.3933)
  %add.2888 = bf16[512,8,128]{2,1,0} add(%mul.10138, %mul.10139)
  %div.1561 = bf16[512,8,128]{2,1,0} divide(%add.2888, %div.1482)
  %sqrt.21 = bf16[512,8,128]{2,1,0} sqrt(%div.1561)
  %add.2889 = bf16[512,8,128]{2,1,0} add(%sqrt.21, %broadcast.3934)
  %multiply.2532 = bf16[512,8,128]{2,1,0} multiply(%div.1481, %add.2889)
  %div.1562 = bf16[512,8,128]{2,1,0} divide(%add.2887, %multiply.2532)
  %mul.10140 = bf16[512,8,128]{2,1,0} multiply(%param.20, %broadcast.3930)
  %add.2890 = bf16[512,8,128]{2,1,0} add(%div.1562, %mul.10140)
  %mul.10141 = bf16[512,8,128]{2,1,0} multiply(%mul.9984, %add.2890)
  %add.2891 = bf16[512,8,128]{2,1,0} add(%param.20, %mul.10141)
  %div.1563 = bf16[512,8]{1,0} divide(%dynamic-slice.2201, %div.1442)
  %select_n.730 = bf16[512,8]{1,0} select(%select_n.704, %dynamic-slice.2201, %div.1563)
  %mul.10143 = bf16[512,8]{1,0} multiply(%select_n.730, %broadcast.3915)
  %param.373 = bf16[512,8]{1,0} parameter(346), sharding={devices=[8,1]<=[8]}
  %mul.10144 = bf16[512,8]{1,0} multiply(%param.373, %broadcast.3916)
  %add.2893 = bf16[512,8]{1,0} add(%mul.10143, %mul.10144)
  %integer_pow.21 = bf16[512,8]{1,0} multiply(%select_n.730, %select_n.730)
  %mul.10145 = bf16[512,8]{1,0} multiply(%integer_pow.21, %broadcast.3917)
  %param.374 = bf16[512,8]{1,0} parameter(669), sharding={devices=[8,1]<=[8]}
  %mul.10146 = bf16[512,8]{1,0} multiply(%param.374, %broadcast.3918)
  %add.2894 = bf16[512,8]{1,0} add(%mul.10145, %mul.10146)
  %div.1566 = bf16[512,8]{1,0} divide(%add.2894, %div.1446)
  %sqrt.22 = bf16[512,8]{1,0} sqrt(%div.1566)
  %add.2895 = bf16[512,8]{1,0} add(%sqrt.22, %broadcast.3919)
  %multiply.2533 = bf16[512,8]{1,0} multiply(%div.1444, %add.2895)
  %div.1567 = bf16[512,8]{1,0} divide(%add.2893, %multiply.2533)
  %mul.10147 = bf16[512,8]{1,0} multiply(%param.113, %broadcast.3915)
  %add.2896 = bf16[512,8]{1,0} add(%div.1567, %mul.10147)
  %mul.10148 = bf16[512,8]{1,0} multiply(%mul.9922, %add.2896)
  %add.2897 = bf16[512,8]{1,0} add(%param.113, %mul.10148)
  %div.1568 = bf16[1,4096,14336]{2,1,0} divide(%sharding_constraint.2460, %div.1450)
  %select_n.731 = bf16[1,4096,14336]{2,1,0} select(%select_n.706, %sharding_constraint.2460, %div.1568)
  %mul.10150 = bf16[1,4096,14336]{2,1,0} multiply(%select_n.731, %broadcast.3920)
  %param.375 = bf16[1,4096,14336]{2,1,0} parameter(347), sharding={devices=[8,1,1]<=[8]}
  %mul.10151 = bf16[1,4096,14336]{2,1,0} multiply(%param.375, %broadcast.3921)
  %add.2898 = bf16[1,4096,14336]{2,1,0} add(%mul.10150, %mul.10151)
  %integer_pow.22 = bf16[1,4096,14336]{2,1,0} multiply(%select_n.731, %select_n.731)
  %mul.10152 = bf16[1,4096,14336]{2,1,0} multiply(%integer_pow.22, %broadcast.3922)
  %param.376 = bf16[1,4096,14336]{2,1,0} parameter(670), sharding={devices=[8,1,1]<=[8]}
  %mul.10153 = bf16[1,4096,14336]{2,1,0} multiply(%param.376, %broadcast.3923)
  %add.2899 = bf16[1,4096,14336]{2,1,0} add(%mul.10152, %mul.10153)
  %div.1571 = bf16[1,4096,14336]{2,1,0} divide(%add.2899, %div.1455)
  %sqrt.23 = bf16[1,4096,14336]{2,1,0} sqrt(%div.1571)
  %add.2900 = bf16[1,4096,14336]{2,1,0} add(%sqrt.23, %broadcast.3924)
  %multiply.2534 = bf16[1,4096,14336]{2,1,0} multiply(%div.1454, %add.2900)
  %div.1572 = bf16[1,4096,14336]{2,1,0} divide(%add.2898, %multiply.2534)
  %mul.10154 = bf16[1,4096,14336]{2,1,0} multiply(%param.114, %broadcast.3920)
  %add.2903 = bf16[1,4096,14336]{2,1,0} add(%div.1572, %mul.10154)
  %mul.10155 = bf16[1,4096,14336]{2,1,0} multiply(%mul.9929, %add.2903)
  %add.2904 = bf16[1,4096,14336]{2,1,0} add(%param.114, %mul.10155)
  %div.1573 = bf16[1,4096,14336]{2,1,0} divide(%sharding_constraint.2461, %div.1450)
  %select_n.732 = bf16[1,4096,14336]{2,1,0} select(%select_n.706, %sharding_constraint.2461, %div.1573)
  %mul.10158 = bf16[1,4096,14336]{2,1,0} multiply(%select_n.732, %broadcast.3920)
  %param.377 = bf16[1,4096,14336]{2,1,0} parameter(348), sharding={devices=[8,1,1]<=[8]}
  %mul.10159 = bf16[1,4096,14336]{2,1,0} multiply(%param.377, %broadcast.3921)
  %add.2905 = bf16[1,4096,14336]{2,1,0} add(%mul.10158, %mul.10159)
  %integer_pow.23 = bf16[1,4096,14336]{2,1,0} multiply(%select_n.732, %select_n.732)
  %mul.10160 = bf16[1,4096,14336]{2,1,0} multiply(%integer_pow.23, %broadcast.3922)
  %param.378 = bf16[1,4096,14336]{2,1,0} parameter(671), sharding={devices=[8,1,1]<=[8]}
  %mul.10161 = bf16[1,4096,14336]{2,1,0} multiply(%param.378, %broadcast.3923)
  %add.2906 = bf16[1,4096,14336]{2,1,0} add(%mul.10160, %mul.10161)
  %div.1576 = bf16[1,4096,14336]{2,1,0} divide(%add.2906, %div.1455)
  %sqrt.24 = bf16[1,4096,14336]{2,1,0} sqrt(%div.1576)
  %add.2907 = bf16[1,4096,14336]{2,1,0} add(%sqrt.24, %broadcast.3924)
  %multiply.2535 = bf16[1,4096,14336]{2,1,0} multiply(%div.1454, %add.2907)
  %div.1577 = bf16[1,4096,14336]{2,1,0} divide(%add.2905, %multiply.2535)
  %mul.10162 = bf16[1,4096,14336]{2,1,0} multiply(%param.115, %broadcast.3920)
  %add.2908 = bf16[1,4096,14336]{2,1,0} add(%div.1577, %mul.10162)
  %mul.10166 = bf16[1,4096,14336]{2,1,0} multiply(%mul.9929, %add.2908)
  %add.2909 = bf16[1,4096,14336]{2,1,0} add(%param.115, %mul.10166)
  %div.1578 = bf16[1,14336,4096]{2,1,0} divide(%sharding_constraint.2462, %div.1463)
  %select_n.733 = bf16[1,14336,4096]{2,1,0} select(%select_n.709, %sharding_constraint.2462, %div.1578)
  %mul.10168 = bf16[1,14336,4096]{2,1,0} multiply(%select_n.733, %broadcast.3925)
  %param.379 = bf16[1,14336,4096]{2,1,0} parameter(349), sharding={devices=[8,1,1]<=[8]}
  %mul.10169 = bf16[1,14336,4096]{2,1,0} multiply(%param.379, %broadcast.3926)
  %add.2910 = bf16[1,14336,4096]{2,1,0} add(%mul.10168, %mul.10169)
  %integer_pow.24 = bf16[1,14336,4096]{2,1,0} multiply(%select_n.733, %select_n.733)
  %mul.10170 = bf16[1,14336,4096]{2,1,0} multiply(%integer_pow.24, %broadcast.3927)
  %param.380 = bf16[1,14336,4096]{2,1,0} parameter(672), sharding={devices=[8,1,1]<=[8]}
  %mul.10171 = bf16[1,14336,4096]{2,1,0} multiply(%param.380, %broadcast.3928)
  %add.2911 = bf16[1,14336,4096]{2,1,0} add(%mul.10170, %mul.10171)
  %div.1581 = bf16[1,14336,4096]{2,1,0} divide(%add.2911, %div.1466)
  %sqrt.25 = bf16[1,14336,4096]{2,1,0} sqrt(%div.1581)
  %add.2912 = bf16[1,14336,4096]{2,1,0} add(%sqrt.25, %broadcast.3929)
  %multiply.2536 = bf16[1,14336,4096]{2,1,0} multiply(%div.1465, %add.2912)
  %div.1582 = bf16[1,14336,4096]{2,1,0} divide(%add.2910, %multiply.2536)
  %mul.10173 = bf16[1,14336,4096]{2,1,0} multiply(%param.116, %broadcast.3925)
  %add.2913 = bf16[1,14336,4096]{2,1,0} add(%div.1582, %mul.10173)
  %mul.10174 = bf16[1,14336,4096]{2,1,0} multiply(%mul.9949, %add.2913)
  %add.2914 = bf16[1,14336,4096]{2,1,0} add(%param.116, %mul.10174)
  %div.1583 = bf16[4096]{0} divide(%all-reduce.37, %div.1436)
  %select_n.734 = bf16[4096]{0} select(%select_n.701, %all-reduce.37, %div.1583)
  %mul.10176 = bf16[4096]{0} multiply(%select_n.734, %broadcast.3910)
  %param.381 = bf16[4096]{0} parameter(350), sharding={replicated}
  %mul.10177 = bf16[4096]{0} multiply(%param.381, %broadcast.3911)
  %add.2915 = bf16[4096]{0} add(%mul.10176, %mul.10177)
  %integer_pow.25 = bf16[4096]{0} multiply(%select_n.734, %select_n.734)
  %mul.10179 = bf16[4096]{0} multiply(%integer_pow.25, %broadcast.3912)
  %param.382 = bf16[4096]{0} parameter(673), sharding={replicated}
  %mul.10180 = bf16[4096]{0} multiply(%param.382, %broadcast.3913)
  %add.2916 = bf16[4096]{0} add(%mul.10179, %mul.10180)
  %div.1586 = bf16[4096]{0} divide(%add.2916, %div.1439)
  %sqrt.26 = bf16[4096]{0} sqrt(%div.1586)
  %add.2917 = bf16[4096]{0} add(%sqrt.26, %broadcast.3914)
  %multiply.2537 = bf16[4096]{0} multiply(%div.1438, %add.2917)
  %div.1587 = bf16[4096]{0} divide(%add.2915, %multiply.2537)
  %mul.10181 = bf16[4096]{0} multiply(%param.112, %broadcast.3910)
  %add.2918 = bf16[4096]{0} add(%div.1587, %mul.10181)
  %mul.10182 = bf16[4096]{0} multiply(%mul.2424, %add.2918)
  %add.2921 = bf16[4096]{0} add(%param.112, %mul.10182)
  %div.1590 = bf16[4096]{0} divide(%all-reduce.38, %div.1436)
  %select_n.735 = bf16[4096]{0} select(%select_n.701, %all-reduce.38, %div.1590)
  %mul.10184 = bf16[4096]{0} multiply(%select_n.735, %broadcast.3910)
  %param.383 = bf16[4096]{0} parameter(351), sharding={replicated}
  %mul.10185 = bf16[4096]{0} multiply(%param.383, %broadcast.3911)
  %add.2922 = bf16[4096]{0} add(%mul.10184, %mul.10185)
  %integer_pow.26 = bf16[4096]{0} multiply(%select_n.735, %select_n.735)
  %mul.10186 = bf16[4096]{0} multiply(%integer_pow.26, %broadcast.3912)
  %param.384 = bf16[4096]{0} parameter(674), sharding={replicated}
  %mul.10187 = bf16[4096]{0} multiply(%param.384, %broadcast.3913)
  %add.2923 = bf16[4096]{0} add(%mul.10186, %mul.10187)
  %div.1600 = bf16[4096]{0} divide(%add.2923, %div.1439)
  %sqrt.27 = bf16[4096]{0} sqrt(%div.1600)
  %add.2924 = bf16[4096]{0} add(%sqrt.27, %broadcast.3914)
  %multiply.2538 = bf16[4096]{0} multiply(%div.1438, %add.2924)
  %div.1601 = bf16[4096]{0} divide(%add.2922, %multiply.2538)
  %mul.10188 = bf16[4096]{0} multiply(%param.107, %broadcast.3910)
  %add.2925 = bf16[4096]{0} add(%div.1601, %mul.10188)
  %mul.10189 = bf16[4096]{0} multiply(%mul.2424, %add.2925)
  %add.2926 = bf16[4096]{0} add(%param.107, %mul.10189)
  %div.1602 = bf16[512,8,128]{0,2,1} divide(%transpose.333, %div.1479)
  %select_n.736 = bf16[512,8,128]{2,1,0} select(%select_n.713, %transpose.333, %div.1602)
  %mul.10191 = bf16[512,8,128]{2,1,0} multiply(%select_n.736, %broadcast.3930)
  %param.385 = bf16[512,8,128]{2,1,0} parameter(352), sharding={devices=[8,1,1]<=[8]}
  %mul.10192 = bf16[512,8,128]{2,1,0} multiply(%param.385, %broadcast.3931)
  %add.2927 = bf16[512,8,128]{2,1,0} add(%mul.10191, %mul.10192)
  %integer_pow.27 = bf16[512,8,128]{2,1,0} multiply(%select_n.736, %select_n.736)
  %mul.10194 = bf16[512,8,128]{2,1,0} multiply(%integer_pow.27, %broadcast.3932)
  %param.386 = bf16[512,8,128]{2,1,0} parameter(675), sharding={devices=[8,1,1]<=[8]}
  %mul.10195 = bf16[512,8,128]{2,1,0} multiply(%param.386, %broadcast.3933)
  %add.2928 = bf16[512,8,128]{2,1,0} add(%mul.10194, %mul.10195)
  %div.1605 = bf16[512,8,128]{2,1,0} divide(%add.2928, %div.1482)
  %sqrt.28 = bf16[512,8,128]{2,1,0} sqrt(%div.1605)
  %add.2929 = bf16[512,8,128]{2,1,0} add(%sqrt.28, %broadcast.3934)
  %multiply.2539 = bf16[512,8,128]{2,1,0} multiply(%div.1481, %add.2929)
  %div.1606 = bf16[512,8,128]{2,1,0} divide(%add.2927, %multiply.2539)
  %mul.10196 = bf16[512,8,128]{2,1,0} multiply(%param.109, %broadcast.3930)
  %add.2930 = bf16[512,8,128]{2,1,0} add(%div.1606, %mul.10196)
  %mul.10197 = bf16[512,8,128]{2,1,0} multiply(%mul.9984, %add.2930)
  %add.2931 = bf16[512,8,128]{2,1,0} add(%param.109, %mul.10197)
  %div.1607 = bf16[32,128,512]{1,0,2} divide(%transpose.334, %div.1485)
  %select_n.737 = bf16[32,128,512]{2,1,0} select(%select_n.715, %transpose.334, %div.1607)
  %mul.10199 = bf16[32,128,512]{2,1,0} multiply(%select_n.737, %broadcast.3935)
  %param.387 = bf16[32,128,512]{2,1,0} parameter(353), sharding={devices=[1,1,8]<=[8]}
  %mul.10204 = bf16[32,128,512]{2,1,0} multiply(%param.387, %broadcast.3936)
  %add.2932 = bf16[32,128,512]{2,1,0} add(%mul.10199, %mul.10204)
  %integer_pow.28 = bf16[32,128,512]{2,1,0} multiply(%select_n.737, %select_n.737)
  %mul.10211 = bf16[32,128,512]{2,1,0} multiply(%integer_pow.28, %broadcast.3937)
  %param.388 = bf16[32,128,512]{2,1,0} parameter(676), sharding={devices=[1,1,8]<=[8]}
  %mul.10212 = bf16[32,128,512]{2,1,0} multiply(%param.388, %broadcast.3938)
  %add.2933 = bf16[32,128,512]{2,1,0} add(%mul.10211, %mul.10212)
  %div.1610 = bf16[32,128,512]{2,1,0} divide(%add.2933, %div.1488)
  %sqrt.29 = bf16[32,128,512]{2,1,0} sqrt(%div.1610)
  %add.2934 = bf16[32,128,512]{2,1,0} add(%sqrt.29, %broadcast.3939)
  %multiply.2540 = bf16[32,128,512]{2,1,0} multiply(%div.1487, %add.2934)
  %div.1611 = bf16[32,128,512]{2,1,0} divide(%add.2932, %multiply.2540)
  %mul.10213 = bf16[32,128,512]{2,1,0} multiply(%param.111, %broadcast.3935)
  %add.2935 = bf16[32,128,512]{2,1,0} add(%div.1611, %mul.10213)
  %mul.10214 = bf16[32,128,512]{2,1,0} multiply(%mul.9994, %add.2935)
  %add.2936 = bf16[32,128,512]{2,1,0} add(%param.111, %mul.10214)
  %div.1612 = bf16[512,32,128]{0,2,1} divide(%transpose.335, %div.1491)
  %select_n.738 = bf16[512,32,128]{2,1,0} select(%select_n.717, %transpose.335, %div.1612)
  %mul.10216 = bf16[512,32,128]{2,1,0} multiply(%select_n.738, %broadcast.3940)
  %param.389 = bf16[512,32,128]{2,1,0} parameter(354), sharding={devices=[8,1,1]<=[8]}
  %mul.10217 = bf16[512,32,128]{2,1,0} multiply(%param.389, %broadcast.3941)
  %add.2937 = bf16[512,32,128]{2,1,0} add(%mul.10216, %mul.10217)
  %integer_pow.29 = bf16[512,32,128]{2,1,0} multiply(%select_n.738, %select_n.738)
  %mul.10218 = bf16[512,32,128]{2,1,0} multiply(%integer_pow.29, %broadcast.3942)
  %param.390 = bf16[512,32,128]{2,1,0} parameter(677), sharding={devices=[8,1,1]<=[8]}
  %mul.10219 = bf16[512,32,128]{2,1,0} multiply(%param.390, %broadcast.3943)
  %add.2938 = bf16[512,32,128]{2,1,0} add(%mul.10218, %mul.10219)
  %div.1615 = bf16[512,32,128]{2,1,0} divide(%add.2938, %div.1494)
  %sqrt.30 = bf16[512,32,128]{2,1,0} sqrt(%div.1615)
  %add.2939 = bf16[512,32,128]{2,1,0} add(%sqrt.30, %broadcast.3944)
  %multiply.2541 = bf16[512,32,128]{2,1,0} multiply(%div.1493, %add.2939)
  %div.1616 = bf16[512,32,128]{2,1,0} divide(%add.2937, %multiply.2541)
  %mul.10220 = bf16[512,32,128]{2,1,0} multiply(%param.108, %broadcast.3940)
  %add.2940 = bf16[512,32,128]{2,1,0} add(%div.1616, %mul.10220)
  %mul.10221 = bf16[512,32,128]{2,1,0} multiply(%mul.10010, %add.2940)
  %add.2941 = bf16[512,32,128]{2,1,0} add(%param.108, %mul.10221)
  %div.1617 = bf16[512,8,128]{0,2,1} divide(%transpose.336, %div.1479)
  %select_n.739 = bf16[512,8,128]{2,1,0} select(%select_n.713, %transpose.336, %div.1617)
  %mul.10223 = bf16[512,8,128]{2,1,0} multiply(%select_n.739, %broadcast.3930)
  %param.391 = bf16[512,8,128]{2,1,0} parameter(355), sharding={devices=[8,1,1]<=[8]}
  %mul.10224 = bf16[512,8,128]{2,1,0} multiply(%param.391, %broadcast.3931)
  %add.2942 = bf16[512,8,128]{2,1,0} add(%mul.10223, %mul.10224)
  %integer_pow.30 = bf16[512,8,128]{2,1,0} multiply(%select_n.739, %select_n.739)
  %mul.10225 = bf16[512,8,128]{2,1,0} multiply(%integer_pow.30, %broadcast.3932)
  %param.392 = bf16[512,8,128]{2,1,0} parameter(678), sharding={devices=[8,1,1]<=[8]}
  %mul.10226 = bf16[512,8,128]{2,1,0} multiply(%param.392, %broadcast.3933)
  %add.2943 = bf16[512,8,128]{2,1,0} add(%mul.10225, %mul.10226)
  %div.1620 = bf16[512,8,128]{2,1,0} divide(%add.2943, %div.1482)
  %sqrt.31 = bf16[512,8,128]{2,1,0} sqrt(%div.1620)
  %add.2944 = bf16[512,8,128]{2,1,0} add(%sqrt.31, %broadcast.3934)
  %multiply.2542 = bf16[512,8,128]{2,1,0} multiply(%div.1481, %add.2944)
  %div.1621 = bf16[512,8,128]{2,1,0} divide(%add.2942, %multiply.2542)
  %mul.10227 = bf16[512,8,128]{2,1,0} multiply(%param.110, %broadcast.3930)
  %add.2945 = bf16[512,8,128]{2,1,0} add(%div.1621, %mul.10227)
  %mul.10228 = bf16[512,8,128]{2,1,0} multiply(%mul.9984, %add.2945)
  %add.2946 = bf16[512,8,128]{2,1,0} add(%param.110, %mul.10228)
  %div.1622 = bf16[512,8]{1,0} divide(%dynamic-slice.2211, %div.1442)
  %select_n.740 = bf16[512,8]{1,0} select(%select_n.704, %dynamic-slice.2211, %div.1622)
  %mul.10230 = bf16[512,8]{1,0} multiply(%select_n.740, %broadcast.3915)
  %param.393 = bf16[512,8]{1,0} parameter(356), sharding={devices=[8,1]<=[8]}
  %mul.10231 = bf16[512,8]{1,0} multiply(%param.393, %broadcast.3916)
  %add.2947 = bf16[512,8]{1,0} add(%mul.10230, %mul.10231)
  %integer_pow.31 = bf16[512,8]{1,0} multiply(%select_n.740, %select_n.740)
  %mul.10233 = bf16[512,8]{1,0} multiply(%integer_pow.31, %broadcast.3917)
  %param.394 = bf16[512,8]{1,0} parameter(679), sharding={devices=[8,1]<=[8]}
  %mul.10234 = bf16[512,8]{1,0} multiply(%param.394, %broadcast.3918)
  %add.2948 = bf16[512,8]{1,0} add(%mul.10233, %mul.10234)
  %div.1625 = bf16[512,8]{1,0} divide(%add.2948, %div.1446)
  %sqrt.32 = bf16[512,8]{1,0} sqrt(%div.1625)
  %add.2950 = bf16[512,8]{1,0} add(%sqrt.32, %broadcast.3919)
  %multiply.2543 = bf16[512,8]{1,0} multiply(%div.1444, %add.2950)
  %div.1626 = bf16[512,8]{1,0} divide(%add.2947, %multiply.2543)
  %mul.10235 = bf16[512,8]{1,0} multiply(%param.123, %broadcast.3915)
  %add.2951 = bf16[512,8]{1,0} add(%div.1626, %mul.10235)
  %mul.10236 = bf16[512,8]{1,0} multiply(%mul.9922, %add.2951)
  %add.2953 = bf16[512,8]{1,0} add(%param.123, %mul.10236)
  %div.1627 = bf16[1,4096,14336]{2,1,0} divide(%sharding_constraint.2463, %div.1450)
  %select_n.741 = bf16[1,4096,14336]{2,1,0} select(%select_n.706, %sharding_constraint.2463, %div.1627)
  %mul.10239 = bf16[1,4096,14336]{2,1,0} multiply(%select_n.741, %broadcast.3920)
  %param.395 = bf16[1,4096,14336]{2,1,0} parameter(357), sharding={devices=[8,1,1]<=[8]}
  %mul.10240 = bf16[1,4096,14336]{2,1,0} multiply(%param.395, %broadcast.3921)
  %add.2954 = bf16[1,4096,14336]{2,1,0} add(%mul.10239, %mul.10240)
  %integer_pow.32 = bf16[1,4096,14336]{2,1,0} multiply(%select_n.741, %select_n.741)
  %mul.10241 = bf16[1,4096,14336]{2,1,0} multiply(%integer_pow.32, %broadcast.3922)
  %param.396 = bf16[1,4096,14336]{2,1,0} parameter(680), sharding={devices=[8,1,1]<=[8]}
  %mul.10242 = bf16[1,4096,14336]{2,1,0} multiply(%param.396, %broadcast.3923)
  %add.2956 = bf16[1,4096,14336]{2,1,0} add(%mul.10241, %mul.10242)
  %div.1630 = bf16[1,4096,14336]{2,1,0} divide(%add.2956, %div.1455)
  %sqrt.33 = bf16[1,4096,14336]{2,1,0} sqrt(%div.1630)
  %add.2957 = bf16[1,4096,14336]{2,1,0} add(%sqrt.33, %broadcast.3924)
  %multiply.2544 = bf16[1,4096,14336]{2,1,0} multiply(%div.1454, %add.2957)
  %div.1631 = bf16[1,4096,14336]{2,1,0} divide(%add.2954, %multiply.2544)
  %mul.10243 = bf16[1,4096,14336]{2,1,0} multiply(%param.124, %broadcast.3920)
  %add.2958 = bf16[1,4096,14336]{2,1,0} add(%div.1631, %mul.10243)
  %mul.10245 = bf16[1,4096,14336]{2,1,0} multiply(%mul.9929, %add.2958)
  %add.2959 = bf16[1,4096,14336]{2,1,0} add(%param.124, %mul.10245)
  %div.1632 = bf16[1,4096,14336]{2,1,0} divide(%sharding_constraint.2465, %div.1450)
  %select_n.742 = bf16[1,4096,14336]{2,1,0} select(%select_n.706, %sharding_constraint.2465, %div.1632)
  %mul.10247 = bf16[1,4096,14336]{2,1,0} multiply(%select_n.742, %broadcast.3920)
  %param.397 = bf16[1,4096,14336]{2,1,0} parameter(358), sharding={devices=[8,1,1]<=[8]}
  %mul.10248 = bf16[1,4096,14336]{2,1,0} multiply(%param.397, %broadcast.3921)
  %add.2960 = bf16[1,4096,14336]{2,1,0} add(%mul.10247, %mul.10248)
  %integer_pow.33 = bf16[1,4096,14336]{2,1,0} multiply(%select_n.742, %select_n.742)
  %mul.10249 = bf16[1,4096,14336]{2,1,0} multiply(%integer_pow.33, %broadcast.3922)
  %param.398 = bf16[1,4096,14336]{2,1,0} parameter(681), sharding={devices=[8,1,1]<=[8]}
  %mul.10250 = bf16[1,4096,14336]{2,1,0} multiply(%param.398, %broadcast.3923)
  %add.2961 = bf16[1,4096,14336]{2,1,0} add(%mul.10249, %mul.10250)
  %div.1635 = bf16[1,4096,14336]{2,1,0} divide(%add.2961, %div.1455)
  %sqrt.34 = bf16[1,4096,14336]{2,1,0} sqrt(%div.1635)
  %add.2962 = bf16[1,4096,14336]{2,1,0} add(%sqrt.34, %broadcast.3924)
  %multiply.2545 = bf16[1,4096,14336]{2,1,0} multiply(%div.1454, %add.2962)
  %div.1636 = bf16[1,4096,14336]{2,1,0} divide(%add.2960, %multiply.2545)
  %mul.10252 = bf16[1,4096,14336]{2,1,0} multiply(%param.125, %broadcast.3920)
  %add.2963 = bf16[1,4096,14336]{2,1,0} add(%div.1636, %mul.10252)
  %mul.10256 = bf16[1,4096,14336]{2,1,0} multiply(%mul.9929, %add.2963)
  %add.2964 = bf16[1,4096,14336]{2,1,0} add(%param.125, %mul.10256)
  %div.1637 = bf16[1,14336,4096]{2,1,0} divide(%sharding_constraint.2467, %div.1463)
  %select_n.743 = bf16[1,14336,4096]{2,1,0} select(%select_n.709, %sharding_constraint.2467, %div.1637)
  %mul.10258 = bf16[1,14336,4096]{2,1,0} multiply(%select_n.743, %broadcast.3925)
  %param.399 = bf16[1,14336,4096]{2,1,0} parameter(359), sharding={devices=[8,1,1]<=[8]}
  %mul.10259 = bf16[1,14336,4096]{2,1,0} multiply(%param.399, %broadcast.3926)
  %add.2965 = bf16[1,14336,4096]{2,1,0} add(%mul.10258, %mul.10259)
  %integer_pow.34 = bf16[1,14336,4096]{2,1,0} multiply(%select_n.743, %select_n.743)
  %mul.10260 = bf16[1,14336,4096]{2,1,0} multiply(%integer_pow.34, %broadcast.3927)
  %param.400 = bf16[1,14336,4096]{2,1,0} parameter(682), sharding={devices=[8,1,1]<=[8]}
  %mul.10261 = bf16[1,14336,4096]{2,1,0} multiply(%param.400, %broadcast.3928)
  %add.2966 = bf16[1,14336,4096]{2,1,0} add(%mul.10260, %mul.10261)
  %div.1640 = bf16[1,14336,4096]{2,1,0} divide(%add.2966, %div.1466)
  %sqrt.35 = bf16[1,14336,4096]{2,1,0} sqrt(%div.1640)
  %add.2967 = bf16[1,14336,4096]{2,1,0} add(%sqrt.35, %broadcast.3929)
  %multiply.2546 = bf16[1,14336,4096]{2,1,0} multiply(%div.1465, %add.2967)
  %div.1641 = bf16[1,14336,4096]{2,1,0} divide(%add.2965, %multiply.2546)
  %mul.10262 = bf16[1,14336,4096]{2,1,0} multiply(%param.126, %broadcast.3925)
  %add.2968 = bf16[1,14336,4096]{2,1,0} add(%div.1641, %mul.10262)
  %mul.10263 = bf16[1,14336,4096]{2,1,0} multiply(%mul.9949, %add.2968)
  %add.2970 = bf16[1,14336,4096]{2,1,0} add(%param.126, %mul.10263)
  %div.1642 = bf16[4096]{0} divide(%all-reduce.52, %div.1436)
  %select_n.744 = bf16[4096]{0} select(%select_n.701, %all-reduce.52, %div.1642)
  %mul.10266 = bf16[4096]{0} multiply(%select_n.744, %broadcast.3910)
  %param.401 = bf16[4096]{0} parameter(360), sharding={replicated}
  %mul.10267 = bf16[4096]{0} multiply(%param.401, %broadcast.3911)
  %add.2971 = bf16[4096]{0} add(%mul.10266, %mul.10267)
  %integer_pow.35 = bf16[4096]{0} multiply(%select_n.744, %select_n.744)
  %mul.10268 = bf16[4096]{0} multiply(%integer_pow.35, %broadcast.3912)
  %param.402 = bf16[4096]{0} parameter(683), sharding={replicated}
  %mul.10269 = bf16[4096]{0} multiply(%param.402, %broadcast.3913)
  %add.2972 = bf16[4096]{0} add(%mul.10268, %mul.10269)
  %div.1645 = bf16[4096]{0} divide(%add.2972, %div.1439)
  %sqrt.36 = bf16[4096]{0} sqrt(%div.1645)
  %add.2973 = bf16[4096]{0} add(%sqrt.36, %broadcast.3914)
  %multiply.2547 = bf16[4096]{0} multiply(%div.1438, %add.2973)
  %div.1646 = bf16[4096]{0} divide(%add.2971, %multiply.2547)
  %mul.10270 = bf16[4096]{0} multiply(%param.122, %broadcast.3910)
  %add.2974 = bf16[4096]{0} add(%div.1646, %mul.10270)
  %mul.10271 = bf16[4096]{0} multiply(%mul.2424, %add.2974)
  %add.2975 = bf16[4096]{0} add(%param.122, %mul.10271)
  %div.1647 = bf16[4096]{0} divide(%all-reduce.53, %div.1436)
  %select_n.745 = bf16[4096]{0} select(%select_n.701, %all-reduce.53, %div.1647)
  %mul.10273 = bf16[4096]{0} multiply(%select_n.745, %broadcast.3910)
  %param.403 = bf16[4096]{0} parameter(361), sharding={replicated}
  %mul.10274 = bf16[4096]{0} multiply(%param.403, %broadcast.3911)
  %add.2976 = bf16[4096]{0} add(%mul.10273, %mul.10274)
  %integer_pow.36 = bf16[4096]{0} multiply(%select_n.745, %select_n.745)
  %mul.10277 = bf16[4096]{0} multiply(%integer_pow.36, %broadcast.3912)
  %param.404 = bf16[4096]{0} parameter(684), sharding={replicated}
  %mul.10282 = bf16[4096]{0} multiply(%param.404, %broadcast.3913)
  %add.2977 = bf16[4096]{0} add(%mul.10277, %mul.10282)
  %div.1651 = bf16[4096]{0} divide(%add.2977, %div.1439)
  %sqrt.37 = bf16[4096]{0} sqrt(%div.1651)
  %add.2978 = bf16[4096]{0} add(%sqrt.37, %broadcast.3914)
  %multiply.2548 = bf16[4096]{0} multiply(%div.1438, %add.2978)
  %div.1652 = bf16[4096]{0} divide(%add.2976, %multiply.2548)
  %mul.10283 = bf16[4096]{0} multiply(%param.117, %broadcast.3910)
  %add.2980 = bf16[4096]{0} add(%div.1652, %mul.10283)
  %mul.10284 = bf16[4096]{0} multiply(%mul.2424, %add.2980)
  %add.2981 = bf16[4096]{0} add(%param.117, %mul.10284)
  %div.1653 = bf16[512,8,128]{0,2,1} divide(%transpose.337, %div.1479)
  %select_n.746 = bf16[512,8,128]{2,1,0} select(%select_n.713, %transpose.337, %div.1653)
  %mul.10287 = bf16[512,8,128]{2,1,0} multiply(%select_n.746, %broadcast.3930)
  %param.405 = bf16[512,8,128]{2,1,0} parameter(362), sharding={devices=[8,1,1]<=[8]}
  %mul.10288 = bf16[512,8,128]{2,1,0} multiply(%param.405, %broadcast.3931)
  %add.2982 = bf16[512,8,128]{2,1,0} add(%mul.10287, %mul.10288)
  %integer_pow.37 = bf16[512,8,128]{2,1,0} multiply(%select_n.746, %select_n.746)
  %mul.10295 = bf16[512,8,128]{2,1,0} multiply(%integer_pow.37, %broadcast.3932)
  %param.406 = bf16[512,8,128]{2,1,0} parameter(685), sharding={devices=[8,1,1]<=[8]}
  %mul.10296 = bf16[512,8,128]{2,1,0} multiply(%param.406, %broadcast.3933)
  %add.2983 = bf16[512,8,128]{2,1,0} add(%mul.10295, %mul.10296)
  %div.1656 = bf16[512,8,128]{2,1,0} divide(%add.2983, %div.1482)
  %sqrt.38 = bf16[512,8,128]{2,1,0} sqrt(%div.1656)
  %add.2984 = bf16[512,8,128]{2,1,0} add(%sqrt.38, %broadcast.3934)
  %multiply.2549 = bf16[512,8,128]{2,1,0} multiply(%div.1481, %add.2984)
  %div.1657 = bf16[512,8,128]{2,1,0} divide(%add.2982, %multiply.2549)
  %mul.10297 = bf16[512,8,128]{2,1,0} multiply(%param.119, %broadcast.3930)
  %add.2985 = bf16[512,8,128]{2,1,0} add(%div.1657, %mul.10297)
  %mul.10298 = bf16[512,8,128]{2,1,0} multiply(%mul.9984, %add.2985)
  %add.2986 = bf16[512,8,128]{2,1,0} add(%param.119, %mul.10298)
  %div.1658 = bf16[32,128,512]{1,0,2} divide(%transpose.338, %div.1485)
  %select_n.747 = bf16[32,128,512]{2,1,0} select(%select_n.715, %transpose.338, %div.1658)
  %mul.10300 = bf16[32,128,512]{2,1,0} multiply(%select_n.747, %broadcast.3935)
  %param.407 = bf16[32,128,512]{2,1,0} parameter(363), sharding={devices=[1,1,8]<=[8]}
  %mul.10302 = bf16[32,128,512]{2,1,0} multiply(%param.407, %broadcast.3936)
  %add.2987 = bf16[32,128,512]{2,1,0} add(%mul.10300, %mul.10302)
  %integer_pow.38 = bf16[32,128,512]{2,1,0} multiply(%select_n.747, %select_n.747)
  %mul.10303 = bf16[32,128,512]{2,1,0} multiply(%integer_pow.38, %broadcast.3937)
  %param.408 = bf16[32,128,512]{2,1,0} parameter(686), sharding={devices=[1,1,8]<=[8]}
  %mul.10304 = bf16[32,128,512]{2,1,0} multiply(%param.408, %broadcast.3938)
  %add.2988 = bf16[32,128,512]{2,1,0} add(%mul.10303, %mul.10304)
  %div.1661 = bf16[32,128,512]{2,1,0} divide(%add.2988, %div.1488)
  %sqrt.39 = bf16[32,128,512]{2,1,0} sqrt(%div.1661)
  %add.2989 = bf16[32,128,512]{2,1,0} add(%sqrt.39, %broadcast.3939)
  %multiply.2550 = bf16[32,128,512]{2,1,0} multiply(%div.1487, %add.2989)
  %div.1662 = bf16[32,128,512]{2,1,0} divide(%add.2987, %multiply.2550)
  %mul.10309 = bf16[32,128,512]{2,1,0} multiply(%param.121, %broadcast.3935)
  %add.2990 = bf16[32,128,512]{2,1,0} add(%div.1662, %mul.10309)
  %mul.10310 = bf16[32,128,512]{2,1,0} multiply(%mul.9994, %add.2990)
  %add.2991 = bf16[32,128,512]{2,1,0} add(%param.121, %mul.10310)
  %div.1663 = bf16[512,32,128]{0,2,1} divide(%transpose.339, %div.1491)
  %select_n.748 = bf16[512,32,128]{2,1,0} select(%select_n.717, %transpose.339, %div.1663)
  %mul.10318 = bf16[512,32,128]{2,1,0} multiply(%select_n.748, %broadcast.3940)
  %param.409 = bf16[512,32,128]{2,1,0} parameter(364), sharding={devices=[8,1,1]<=[8]}
  %mul.10322 = bf16[512,32,128]{2,1,0} multiply(%param.409, %broadcast.3941)
  %add.2992 = bf16[512,32,128]{2,1,0} add(%mul.10318, %mul.10322)
  %integer_pow.39 = bf16[512,32,128]{2,1,0} multiply(%select_n.748, %select_n.748)
  %mul.10326 = bf16[512,32,128]{2,1,0} multiply(%integer_pow.39, %broadcast.3942)
  %param.410 = bf16[512,32,128]{2,1,0} parameter(687), sharding={devices=[8,1,1]<=[8]}
  %mul.10327 = bf16[512,32,128]{2,1,0} multiply(%param.410, %broadcast.3943)
  %add.2993 = bf16[512,32,128]{2,1,0} add(%mul.10326, %mul.10327)
  %div.1666 = bf16[512,32,128]{2,1,0} divide(%add.2993, %div.1494)
  %sqrt.40 = bf16[512,32,128]{2,1,0} sqrt(%div.1666)
  %add.2994 = bf16[512,32,128]{2,1,0} add(%sqrt.40, %broadcast.3944)
  %multiply.2551 = bf16[512,32,128]{2,1,0} multiply(%div.1493, %add.2994)
  %div.1667 = bf16[512,32,128]{2,1,0} divide(%add.2992, %multiply.2551)
  %mul.10328 = bf16[512,32,128]{2,1,0} multiply(%param.118, %broadcast.3940)
  %add.2995 = bf16[512,32,128]{2,1,0} add(%div.1667, %mul.10328)
  %mul.10329 = bf16[512,32,128]{2,1,0} multiply(%mul.10010, %add.2995)
  %add.2996 = bf16[512,32,128]{2,1,0} add(%param.118, %mul.10329)
  %div.1668 = bf16[512,8,128]{0,2,1} divide(%transpose.340, %div.1479)
  %select_n.749 = bf16[512,8,128]{2,1,0} select(%select_n.713, %transpose.340, %div.1668)
  %mul.10331 = bf16[512,8,128]{2,1,0} multiply(%select_n.749, %broadcast.3930)
  %param.411 = bf16[512,8,128]{2,1,0} parameter(365), sharding={devices=[8,1,1]<=[8]}
  %mul.10332 = bf16[512,8,128]{2,1,0} multiply(%param.411, %broadcast.3931)
  %add.2997 = bf16[512,8,128]{2,1,0} add(%mul.10331, %mul.10332)
  %integer_pow.40 = bf16[512,8,128]{2,1,0} multiply(%select_n.749, %select_n.749)
  %mul.10336 = bf16[512,8,128]{2,1,0} multiply(%integer_pow.40, %broadcast.3932)
  %param.412 = bf16[512,8,128]{2,1,0} parameter(688), sharding={devices=[8,1,1]<=[8]}
  %mul.10340 = bf16[512,8,128]{2,1,0} multiply(%param.412, %broadcast.3933)
  %add.2998 = bf16[512,8,128]{2,1,0} add(%mul.10336, %mul.10340)
  %div.1672 = bf16[512,8,128]{2,1,0} divide(%add.2998, %div.1482)
  %sqrt.41 = bf16[512,8,128]{2,1,0} sqrt(%div.1672)
  %add.2999 = bf16[512,8,128]{2,1,0} add(%sqrt.41, %broadcast.3934)
  %multiply.2552 = bf16[512,8,128]{2,1,0} multiply(%div.1481, %add.2999)
  %div.1673 = bf16[512,8,128]{2,1,0} divide(%add.2997, %multiply.2552)
  %mul.10348 = bf16[512,8,128]{2,1,0} multiply(%param.120, %broadcast.3930)
  %add.3000 = bf16[512,8,128]{2,1,0} add(%div.1673, %mul.10348)
  %mul.10349 = bf16[512,8,128]{2,1,0} multiply(%mul.9984, %add.3000)
  %add.3001 = bf16[512,8,128]{2,1,0} add(%param.120, %mul.10349)
  %div.1674 = bf16[512,8]{1,0} divide(%dynamic-slice.2221, %div.1442)
  %select_n.750 = bf16[512,8]{1,0} select(%select_n.704, %dynamic-slice.2221, %div.1674)
  %mul.10361 = bf16[512,8]{1,0} multiply(%select_n.750, %broadcast.3915)
  %param.413 = bf16[512,8]{1,0} parameter(366), sharding={devices=[8,1]<=[8]}
  %mul.10363 = bf16[512,8]{1,0} multiply(%param.413, %broadcast.3916)
  %add.3002 = bf16[512,8]{1,0} add(%mul.10361, %mul.10363)
  %integer_pow.41 = bf16[512,8]{1,0} multiply(%select_n.750, %select_n.750)
  %mul.10364 = bf16[512,8]{1,0} multiply(%integer_pow.41, %broadcast.3917)
  %param.414 = bf16[512,8]{1,0} parameter(689), sharding={devices=[8,1]<=[8]}
  %mul.10365 = bf16[512,8]{1,0} multiply(%param.414, %broadcast.3918)
  %add.3004 = bf16[512,8]{1,0} add(%mul.10364, %mul.10365)
  %div.1677 = bf16[512,8]{1,0} divide(%add.3004, %div.1446)
  %sqrt.42 = bf16[512,8]{1,0} sqrt(%div.1677)
  %add.3005 = bf16[512,8]{1,0} add(%sqrt.42, %broadcast.3919)
  %multiply.2553 = bf16[512,8]{1,0} multiply(%div.1444, %add.3005)
  %div.1678 = bf16[512,8]{1,0} divide(%add.3002, %multiply.2553)
  %mul.10366 = bf16[512,8]{1,0} multiply(%param.133, %broadcast.3915)
  %add.3006 = bf16[512,8]{1,0} add(%div.1678, %mul.10366)
  %mul.10367 = bf16[512,8]{1,0} multiply(%mul.9922, %add.3006)
  %add.3007 = bf16[512,8]{1,0} add(%param.133, %mul.10367)
  %div.1679 = bf16[1,4096,14336]{2,1,0} divide(%sharding_constraint.2469, %div.1450)
  %select_n.751 = bf16[1,4096,14336]{2,1,0} select(%select_n.706, %sharding_constraint.2469, %div.1679)
  %mul.10375 = bf16[1,4096,14336]{2,1,0} multiply(%select_n.751, %broadcast.3920)
  %param.415 = bf16[1,4096,14336]{2,1,0} parameter(367), sharding={devices=[8,1,1]<=[8]}
  %mul.10376 = bf16[1,4096,14336]{2,1,0} multiply(%param.415, %broadcast.3921)
  %add.3008 = bf16[1,4096,14336]{2,1,0} add(%mul.10375, %mul.10376)
  %integer_pow.42 = bf16[1,4096,14336]{2,1,0} multiply(%select_n.751, %select_n.751)
  %mul.10377 = bf16[1,4096,14336]{2,1,0} multiply(%integer_pow.42, %broadcast.3922)
  %param.416 = bf16[1,4096,14336]{2,1,0} parameter(690), sharding={devices=[8,1,1]<=[8]}
  %mul.10378 = bf16[1,4096,14336]{2,1,0} multiply(%param.416, %broadcast.3923)
  %add.3009 = bf16[1,4096,14336]{2,1,0} add(%mul.10377, %mul.10378)
  %div.1682 = bf16[1,4096,14336]{2,1,0} divide(%add.3009, %div.1455)
  %sqrt.43 = bf16[1,4096,14336]{2,1,0} sqrt(%div.1682)
  %add.3010 = bf16[1,4096,14336]{2,1,0} add(%sqrt.43, %broadcast.3924)
  %multiply.2554 = bf16[1,4096,14336]{2,1,0} multiply(%div.1454, %add.3010)
  %div.1684 = bf16[1,4096,14336]{2,1,0} divide(%add.3008, %multiply.2554)
  %mul.10379 = bf16[1,4096,14336]{2,1,0} multiply(%param.134, %broadcast.3920)
  %add.3011 = bf16[1,4096,14336]{2,1,0} add(%div.1684, %mul.10379)
  %mul.10380 = bf16[1,4096,14336]{2,1,0} multiply(%mul.9929, %add.3011)
  %add.3012 = bf16[1,4096,14336]{2,1,0} add(%param.134, %mul.10380)
  %div.1686 = bf16[1,4096,14336]{2,1,0} divide(%sharding_constraint.2471, %div.1450)
  %select_n.752 = bf16[1,4096,14336]{2,1,0} select(%select_n.706, %sharding_constraint.2471, %div.1686)
  %mul.10398 = bf16[1,4096,14336]{2,1,0} multiply(%select_n.752, %broadcast.3920)
  %param.417 = bf16[1,4096,14336]{2,1,0} parameter(368), sharding={devices=[8,1,1]<=[8]}
  %mul.10399 = bf16[1,4096,14336]{2,1,0} multiply(%param.417, %broadcast.3921)
  %add.3013 = bf16[1,4096,14336]{2,1,0} add(%mul.10398, %mul.10399)
  %integer_pow.43 = bf16[1,4096,14336]{2,1,0} multiply(%select_n.752, %select_n.752)
  %mul.10400 = bf16[1,4096,14336]{2,1,0} multiply(%integer_pow.43, %broadcast.3922)
  %param.418 = bf16[1,4096,14336]{2,1,0} parameter(691), sharding={devices=[8,1,1]<=[8]}
  %mul.10401 = bf16[1,4096,14336]{2,1,0} multiply(%param.418, %broadcast.3923)
  %add.3014 = bf16[1,4096,14336]{2,1,0} add(%mul.10400, %mul.10401)
  %div.1692 = bf16[1,4096,14336]{2,1,0} divide(%add.3014, %div.1455)
  %sqrt.44 = bf16[1,4096,14336]{2,1,0} sqrt(%div.1692)
  %add.3016 = bf16[1,4096,14336]{2,1,0} add(%sqrt.44, %broadcast.3924)
  %multiply.2555 = bf16[1,4096,14336]{2,1,0} multiply(%div.1454, %add.3016)
  %div.1693 = bf16[1,4096,14336]{2,1,0} divide(%add.3013, %multiply.2555)
  %mul.10403 = bf16[1,4096,14336]{2,1,0} multiply(%param.135, %broadcast.3920)
  %add.3017 = bf16[1,4096,14336]{2,1,0} add(%div.1693, %mul.10403)
  %mul.10404 = bf16[1,4096,14336]{2,1,0} multiply(%mul.9929, %add.3017)
  %add.3018 = bf16[1,4096,14336]{2,1,0} add(%param.135, %mul.10404)
  %div.1694 = bf16[1,14336,4096]{2,1,0} divide(%sharding_constraint.2473, %div.1463)
  %select_n.753 = bf16[1,14336,4096]{2,1,0} select(%select_n.709, %sharding_constraint.2473, %div.1694)
  %mul.10406 = bf16[1,14336,4096]{2,1,0} multiply(%select_n.753, %broadcast.3925)
  %param.419 = bf16[1,14336,4096]{2,1,0} parameter(369), sharding={devices=[8,1,1]<=[8]}
  %mul.10407 = bf16[1,14336,4096]{2,1,0} multiply(%param.419, %broadcast.3926)
  %add.3019 = bf16[1,14336,4096]{2,1,0} add(%mul.10406, %mul.10407)
  %integer_pow.44 = bf16[1,14336,4096]{2,1,0} multiply(%select_n.753, %select_n.753)
  %mul.10408 = bf16[1,14336,4096]{2,1,0} multiply(%integer_pow.44, %broadcast.3927)
  %param.420 = bf16[1,14336,4096]{2,1,0} parameter(692), sharding={devices=[8,1,1]<=[8]}
  %mul.10409 = bf16[1,14336,4096]{2,1,0} multiply(%param.420, %broadcast.3928)
  %add.3020 = bf16[1,14336,4096]{2,1,0} add(%mul.10408, %mul.10409)
  %div.1697 = bf16[1,14336,4096]{2,1,0} divide(%add.3020, %div.1466)
  %sqrt.45 = bf16[1,14336,4096]{2,1,0} sqrt(%div.1697)
  %add.3021 = bf16[1,14336,4096]{2,1,0} add(%sqrt.45, %broadcast.3929)
  %multiply.2556 = bf16[1,14336,4096]{2,1,0} multiply(%div.1465, %add.3021)
  %div.1698 = bf16[1,14336,4096]{2,1,0} divide(%add.3019, %multiply.2556)
  %mul.10410 = bf16[1,14336,4096]{2,1,0} multiply(%param.136, %broadcast.3925)
  %add.3022 = bf16[1,14336,4096]{2,1,0} add(%div.1698, %mul.10410)
  %mul.10411 = bf16[1,14336,4096]{2,1,0} multiply(%mul.9949, %add.3022)
  %add.3023 = bf16[1,14336,4096]{2,1,0} add(%param.136, %mul.10411)
  %div.1699 = bf16[4096]{0} divide(%all-reduce.67, %div.1436)
  %select_n.754 = bf16[4096]{0} select(%select_n.701, %all-reduce.67, %div.1699)
  %mul.10418 = bf16[4096]{0} multiply(%select_n.754, %broadcast.3910)
  %param.421 = bf16[4096]{0} parameter(370), sharding={replicated}
  %mul.10419 = bf16[4096]{0} multiply(%param.421, %broadcast.3911)
  %add.3024 = bf16[4096]{0} add(%mul.10418, %mul.10419)
  %integer_pow.45 = bf16[4096]{0} multiply(%select_n.754, %select_n.754)
  %mul.10420 = bf16[4096]{0} multiply(%integer_pow.45, %broadcast.3912)
  %param.422 = bf16[4096]{0} parameter(693), sharding={replicated}
  %mul.10429 = bf16[4096]{0} multiply(%param.422, %broadcast.3913)
  %add.3025 = bf16[4096]{0} add(%mul.10420, %mul.10429)
  %div.1702 = bf16[4096]{0} divide(%add.3025, %div.1439)
  %sqrt.46 = bf16[4096]{0} sqrt(%div.1702)
  %add.3027 = bf16[4096]{0} add(%sqrt.46, %broadcast.3914)
  %multiply.2557 = bf16[4096]{0} multiply(%div.1438, %add.3027)
  %div.1703 = bf16[4096]{0} divide(%add.3024, %multiply.2557)
  %mul.10438 = bf16[4096]{0} multiply(%param.132, %broadcast.3910)
  %add.3028 = bf16[4096]{0} add(%div.1703, %mul.10438)
  %mul.10442 = bf16[4096]{0} multiply(%mul.2424, %add.3028)
  %add.3029 = bf16[4096]{0} add(%param.132, %mul.10442)
  %div.1704 = bf16[4096]{0} divide(%all-reduce.68, %div.1436)
  %select_n.755 = bf16[4096]{0} select(%select_n.701, %all-reduce.68, %div.1704)
  %mul.10450 = bf16[4096]{0} multiply(%select_n.755, %broadcast.3910)
  %param.423 = bf16[4096]{0} parameter(371), sharding={replicated}
  %mul.10451 = bf16[4096]{0} multiply(%param.423, %broadcast.3911)
  %add.3030 = bf16[4096]{0} add(%mul.10450, %mul.10451)
  %integer_pow.46 = bf16[4096]{0} multiply(%select_n.755, %select_n.755)
  %mul.10452 = bf16[4096]{0} multiply(%integer_pow.46, %broadcast.3912)
  %param.424 = bf16[4096]{0} parameter(694), sharding={replicated}
  %mul.10453 = bf16[4096]{0} multiply(%param.424, %broadcast.3913)
  %add.3031 = bf16[4096]{0} add(%mul.10452, %mul.10453)
  %div.1707 = bf16[4096]{0} divide(%add.3031, %div.1439)
  %sqrt.47 = bf16[4096]{0} sqrt(%div.1707)
  %add.3032 = bf16[4096]{0} add(%sqrt.47, %broadcast.3914)
  %multiply.2558 = bf16[4096]{0} multiply(%div.1438, %add.3032)
  %div.1708 = bf16[4096]{0} divide(%add.3030, %multiply.2558)
  %mul.10454 = bf16[4096]{0} multiply(%param.127, %broadcast.3910)
  %add.3033 = bf16[4096]{0} add(%div.1708, %mul.10454)
  %mul.10455 = bf16[4096]{0} multiply(%mul.2424, %add.3033)
  %add.3035 = bf16[4096]{0} add(%param.127, %mul.10455)
  %div.1709 = bf16[512,8,128]{0,2,1} divide(%transpose.341, %div.1479)
  %select_n.756 = bf16[512,8,128]{2,1,0} select(%select_n.713, %transpose.341, %div.1709)
  %mul.10457 = bf16[512,8,128]{2,1,0} multiply(%select_n.756, %broadcast.3930)
  %param.425 = bf16[512,8,128]{2,1,0} parameter(372), sharding={devices=[8,1,1]<=[8]}
  %mul.10459 = bf16[512,8,128]{2,1,0} multiply(%param.425, %broadcast.3931)
  %add.3036 = bf16[512,8,128]{2,1,0} add(%mul.10457, %mul.10459)
  %integer_pow.47 = bf16[512,8,128]{2,1,0} multiply(%select_n.756, %select_n.756)
  %mul.10460 = bf16[512,8,128]{2,1,0} multiply(%integer_pow.47, %broadcast.3932)
  %param.426 = bf16[512,8,128]{2,1,0} parameter(695), sharding={devices=[8,1,1]<=[8]}
  %mul.10461 = bf16[512,8,128]{2,1,0} multiply(%param.426, %broadcast.3933)
  %add.3037 = bf16[512,8,128]{2,1,0} add(%mul.10460, %mul.10461)
  %div.1712 = bf16[512,8,128]{2,1,0} divide(%add.3037, %div.1482)
  %sqrt.48 = bf16[512,8,128]{2,1,0} sqrt(%div.1712)
  %add.3038 = bf16[512,8,128]{2,1,0} add(%sqrt.48, %broadcast.3934)
  %multiply.2559 = bf16[512,8,128]{2,1,0} multiply(%div.1481, %add.3038)
  %div.1713 = bf16[512,8,128]{2,1,0} divide(%add.3036, %multiply.2559)
  %mul.10462 = bf16[512,8,128]{2,1,0} multiply(%param.129, %broadcast.3930)
  %add.3039 = bf16[512,8,128]{2,1,0} add(%div.1713, %mul.10462)
  %mul.10463 = bf16[512,8,128]{2,1,0} multiply(%mul.9984, %add.3039)
  %add.3040 = bf16[512,8,128]{2,1,0} add(%param.129, %mul.10463)
  %div.1714 = bf16[32,128,512]{1,0,2} divide(%transpose.342, %div.1485)
  %select_n.757 = bf16[32,128,512]{2,1,0} select(%select_n.715, %transpose.342, %div.1714)
  %mul.10465 = bf16[32,128,512]{2,1,0} multiply(%select_n.757, %broadcast.3935)
  %param.427 = bf16[32,128,512]{2,1,0} parameter(373), sharding={devices=[1,1,8]<=[8]}
  %mul.10469 = bf16[32,128,512]{2,1,0} multiply(%param.427, %broadcast.3936)
  %add.3041 = bf16[32,128,512]{2,1,0} add(%mul.10465, %mul.10469)
  %integer_pow.48 = bf16[32,128,512]{2,1,0} multiply(%select_n.757, %select_n.757)
  %mul.10470 = bf16[32,128,512]{2,1,0} multiply(%integer_pow.48, %broadcast.3937)
  %param.428 = bf16[32,128,512]{2,1,0} parameter(696), sharding={devices=[1,1,8]<=[8]}
  %mul.10471 = bf16[32,128,512]{2,1,0} multiply(%param.428, %broadcast.3938)
  %add.3042 = bf16[32,128,512]{2,1,0} add(%mul.10470, %mul.10471)
  %div.1718 = bf16[32,128,512]{2,1,0} divide(%add.3042, %div.1488)
  %sqrt.49 = bf16[32,128,512]{2,1,0} sqrt(%div.1718)
  %add.3043 = bf16[32,128,512]{2,1,0} add(%sqrt.49, %broadcast.3939)
  %multiply.2560 = bf16[32,128,512]{2,1,0} multiply(%div.1487, %add.3043)
  %div.1719 = bf16[32,128,512]{2,1,0} divide(%add.3041, %multiply.2560)
  %mul.10475 = bf16[32,128,512]{2,1,0} multiply(%param.131, %broadcast.3935)
  %add.3044 = bf16[32,128,512]{2,1,0} add(%div.1719, %mul.10475)
  %mul.10482 = bf16[32,128,512]{2,1,0} multiply(%mul.9994, %add.3044)
  %add.3045 = bf16[32,128,512]{2,1,0} add(%param.131, %mul.10482)
  %div.1721 = bf16[512,32,128]{0,2,1} divide(%transpose.343, %div.1491)
  %select_n.758 = bf16[512,32,128]{2,1,0} select(%select_n.717, %transpose.343, %div.1721)
  %mul.10484 = bf16[512,32,128]{2,1,0} multiply(%select_n.758, %broadcast.3940)
  %param.429 = bf16[512,32,128]{2,1,0} parameter(374), sharding={devices=[8,1,1]<=[8]}
  %mul.10485 = bf16[512,32,128]{2,1,0} multiply(%param.429, %broadcast.3941)
  %add.3047 = bf16[512,32,128]{2,1,0} add(%mul.10484, %mul.10485)
  %integer_pow.49 = bf16[512,32,128]{2,1,0} multiply(%select_n.758, %select_n.758)
  %mul.10486 = bf16[512,32,128]{2,1,0} multiply(%integer_pow.49, %broadcast.3942)
  %param.430 = bf16[512,32,128]{2,1,0} parameter(697), sharding={devices=[8,1,1]<=[8]}
  %mul.10487 = bf16[512,32,128]{2,1,0} multiply(%param.430, %broadcast.3943)
  %add.3048 = bf16[512,32,128]{2,1,0} add(%mul.10486, %mul.10487)
  %div.1729 = bf16[512,32,128]{2,1,0} divide(%add.3048, %div.1494)
  %sqrt.50 = bf16[512,32,128]{2,1,0} sqrt(%div.1729)
  %add.3049 = bf16[512,32,128]{2,1,0} add(%sqrt.50, %broadcast.3944)
  %multiply.2561 = bf16[512,32,128]{2,1,0} multiply(%div.1493, %add.3049)
  %div.1730 = bf16[512,32,128]{2,1,0} divide(%add.3047, %multiply.2561)
  %mul.10488 = bf16[512,32,128]{2,1,0} multiply(%param.128, %broadcast.3940)
  %add.3050 = bf16[512,32,128]{2,1,0} add(%div.1730, %mul.10488)
  %mul.10489 = bf16[512,32,128]{2,1,0} multiply(%mul.10010, %add.3050)
  %add.3051 = bf16[512,32,128]{2,1,0} add(%param.128, %mul.10489)
  %div.1731 = bf16[512,8,128]{0,2,1} divide(%transpose.344, %div.1479)
  %select_n.759 = bf16[512,8,128]{2,1,0} select(%select_n.713, %transpose.344, %div.1731)
  %mul.10491 = bf16[512,8,128]{2,1,0} multiply(%select_n.759, %broadcast.3930)
  %param.431 = bf16[512,8,128]{2,1,0} parameter(375), sharding={devices=[8,1,1]<=[8]}
  %mul.10492 = bf16[512,8,128]{2,1,0} multiply(%param.431, %broadcast.3931)
  %add.3052 = bf16[512,8,128]{2,1,0} add(%mul.10491, %mul.10492)
  %integer_pow.50 = bf16[512,8,128]{2,1,0} multiply(%select_n.759, %select_n.759)
  %mul.10493 = bf16[512,8,128]{2,1,0} multiply(%integer_pow.50, %broadcast.3932)
  %param.432 = bf16[512,8,128]{2,1,0} parameter(698), sharding={devices=[8,1,1]<=[8]}
  %mul.10494 = bf16[512,8,128]{2,1,0} multiply(%param.432, %broadcast.3933)
  %add.3053 = bf16[512,8,128]{2,1,0} add(%mul.10493, %mul.10494)
  %div.1734 = bf16[512,8,128]{2,1,0} divide(%add.3053, %div.1482)
  %sqrt.51 = bf16[512,8,128]{2,1,0} sqrt(%div.1734)
  %add.3054 = bf16[512,8,128]{2,1,0} add(%sqrt.51, %broadcast.3934)
  %multiply.2562 = bf16[512,8,128]{2,1,0} multiply(%div.1481, %add.3054)
  %div.1735 = bf16[512,8,128]{2,1,0} divide(%add.3052, %multiply.2562)
  %mul.10495 = bf16[512,8,128]{2,1,0} multiply(%param.130, %broadcast.3930)
  %add.3055 = bf16[512,8,128]{2,1,0} add(%div.1735, %mul.10495)
  %mul.10496 = bf16[512,8,128]{2,1,0} multiply(%mul.9984, %add.3055)
  %add.3056 = bf16[512,8,128]{2,1,0} add(%param.130, %mul.10496)
  %div.1736 = bf16[512,8]{1,0} divide(%dynamic-slice.2231, %div.1442)
  %select_n.760 = bf16[512,8]{1,0} select(%select_n.704, %dynamic-slice.2231, %div.1736)
  %mul.10498 = bf16[512,8]{1,0} multiply(%select_n.760, %broadcast.3915)
  %param.433 = bf16[512,8]{1,0} parameter(376), sharding={devices=[8,1]<=[8]}
  %mul.10499 = bf16[512,8]{1,0} multiply(%param.433, %broadcast.3916)
  %add.3057 = bf16[512,8]{1,0} add(%mul.10498, %mul.10499)
  %integer_pow.51 = bf16[512,8]{1,0} multiply(%select_n.760, %select_n.760)
  %mul.10500 = bf16[512,8]{1,0} multiply(%integer_pow.51, %broadcast.3917)
  %param.434 = bf16[512,8]{1,0} parameter(699), sharding={devices=[8,1]<=[8]}
  %mul.10501 = bf16[512,8]{1,0} multiply(%param.434, %broadcast.3918)
  %add.3058 = bf16[512,8]{1,0} add(%mul.10500, %mul.10501)
  %div.1739 = bf16[512,8]{1,0} divide(%add.3058, %div.1446)
  %sqrt.52 = bf16[512,8]{1,0} sqrt(%div.1739)
  %add.3059 = bf16[512,8]{1,0} add(%sqrt.52, %broadcast.3919)
  %multiply.2563 = bf16[512,8]{1,0} multiply(%div.1444, %add.3059)
  %div.1740 = bf16[512,8]{1,0} divide(%add.3057, %multiply.2563)
  %mul.10502 = bf16[512,8]{1,0} multiply(%param.143, %broadcast.3915)
  %add.3060 = bf16[512,8]{1,0} add(%div.1740, %mul.10502)
  %mul.10503 = bf16[512,8]{1,0} multiply(%mul.9922, %add.3060)
  %add.3061 = bf16[512,8]{1,0} add(%param.143, %mul.10503)
  %div.1741 = bf16[1,4096,14336]{2,1,0} divide(%sharding_constraint.2476, %div.1450)
  %select_n.761 = bf16[1,4096,14336]{2,1,0} select(%select_n.706, %sharding_constraint.2476, %div.1741)
  %mul.10509 = bf16[1,4096,14336]{2,1,0} multiply(%select_n.761, %broadcast.3920)
  %param.435 = bf16[1,4096,14336]{2,1,0} parameter(377), sharding={devices=[8,1,1]<=[8]}
  %mul.10514 = bf16[1,4096,14336]{2,1,0} multiply(%param.435, %broadcast.3921)
  %add.3062 = bf16[1,4096,14336]{2,1,0} add(%mul.10509, %mul.10514)
  %integer_pow.52 = bf16[1,4096,14336]{2,1,0} multiply(%select_n.761, %select_n.761)
  %mul.10515 = bf16[1,4096,14336]{2,1,0} multiply(%integer_pow.52, %broadcast.3922)
  %param.436 = bf16[1,4096,14336]{2,1,0} parameter(700), sharding={devices=[8,1,1]<=[8]}
  %mul.10516 = bf16[1,4096,14336]{2,1,0} multiply(%param.436, %broadcast.3923)
  %add.3063 = bf16[1,4096,14336]{2,1,0} add(%mul.10515, %mul.10516)
  %div.1744 = bf16[1,4096,14336]{2,1,0} divide(%add.3063, %div.1455)
  %sqrt.53 = bf16[1,4096,14336]{2,1,0} sqrt(%div.1744)
  %add.3065 = bf16[1,4096,14336]{2,1,0} add(%sqrt.53, %broadcast.3924)
  %multiply.2564 = bf16[1,4096,14336]{2,1,0} multiply(%div.1454, %add.3065)
  %div.1745 = bf16[1,4096,14336]{2,1,0} divide(%add.3062, %multiply.2564)
  %mul.10517 = bf16[1,4096,14336]{2,1,0} multiply(%param.144, %broadcast.3920)
  %add.3066 = bf16[1,4096,14336]{2,1,0} add(%div.1745, %mul.10517)
  %mul.10518 = bf16[1,4096,14336]{2,1,0} multiply(%mul.9929, %add.3066)
  %add.3067 = bf16[1,4096,14336]{2,1,0} add(%param.144, %mul.10518)
  %div.1746 = bf16[1,4096,14336]{2,1,0} divide(%sharding_constraint.2477, %div.1450)
  %select_n.762 = bf16[1,4096,14336]{2,1,0} select(%select_n.706, %sharding_constraint.2477, %div.1746)
  %mul.10520 = bf16[1,4096,14336]{2,1,0} multiply(%select_n.762, %broadcast.3920)
  %param.437 = bf16[1,4096,14336]{2,1,0} parameter(378), sharding={devices=[8,1,1]<=[8]}
  %mul.10521 = bf16[1,4096,14336]{2,1,0} multiply(%param.437, %broadcast.3921)
  %add.3068 = bf16[1,4096,14336]{2,1,0} add(%mul.10520, %mul.10521)
  %integer_pow.53 = bf16[1,4096,14336]{2,1,0} multiply(%select_n.762, %select_n.762)
  %mul.10522 = bf16[1,4096,14336]{2,1,0} multiply(%integer_pow.53, %broadcast.3922)
  %param.438 = bf16[1,4096,14336]{2,1,0} parameter(701), sharding={devices=[8,1,1]<=[8]}
  %mul.10523 = bf16[1,4096,14336]{2,1,0} multiply(%param.438, %broadcast.3923)
  %add.3069 = bf16[1,4096,14336]{2,1,0} add(%mul.10522, %mul.10523)
  %div.1749 = bf16[1,4096,14336]{2,1,0} divide(%add.3069, %div.1455)
  %sqrt.54 = bf16[1,4096,14336]{2,1,0} sqrt(%div.1749)
  %add.3070 = bf16[1,4096,14336]{2,1,0} add(%sqrt.54, %broadcast.3924)
  %multiply.2565 = bf16[1,4096,14336]{2,1,0} multiply(%div.1454, %add.3070)
  %div.1750 = bf16[1,4096,14336]{2,1,0} divide(%add.3068, %multiply.2565)
  %mul.10524 = bf16[1,4096,14336]{2,1,0} multiply(%param.145, %broadcast.3920)
  %add.3071 = bf16[1,4096,14336]{2,1,0} add(%div.1750, %mul.10524)
  %mul.10525 = bf16[1,4096,14336]{2,1,0} multiply(%mul.9929, %add.3071)
  %add.3072 = bf16[1,4096,14336]{2,1,0} add(%param.145, %mul.10525)
  %div.1751 = bf16[1,14336,4096]{2,1,0} divide(%sharding_constraint.2478, %div.1463)
  %select_n.763 = bf16[1,14336,4096]{2,1,0} select(%select_n.709, %sharding_constraint.2478, %div.1751)
  %mul.10527 = bf16[1,14336,4096]{2,1,0} multiply(%select_n.763, %broadcast.3925)
  %param.439 = bf16[1,14336,4096]{2,1,0} parameter(379), sharding={devices=[8,1,1]<=[8]}
  %mul.10528 = bf16[1,14336,4096]{2,1,0} multiply(%param.439, %broadcast.3926)
  %add.3073 = bf16[1,14336,4096]{2,1,0} add(%mul.10527, %mul.10528)
  %integer_pow.54 = bf16[1,14336,4096]{2,1,0} multiply(%select_n.763, %select_n.763)
  %mul.10529 = bf16[1,14336,4096]{2,1,0} multiply(%integer_pow.54, %broadcast.3927)
  %param.440 = bf16[1,14336,4096]{2,1,0} parameter(702), sharding={devices=[8,1,1]<=[8]}
  %mul.10530 = bf16[1,14336,4096]{2,1,0} multiply(%param.440, %broadcast.3928)
  %add.3074 = bf16[1,14336,4096]{2,1,0} add(%mul.10529, %mul.10530)
  %div.1754 = bf16[1,14336,4096]{2,1,0} divide(%add.3074, %div.1466)
  %sqrt.55 = bf16[1,14336,4096]{2,1,0} sqrt(%div.1754)
  %add.3075 = bf16[1,14336,4096]{2,1,0} add(%sqrt.55, %broadcast.3929)
  %multiply.2566 = bf16[1,14336,4096]{2,1,0} multiply(%div.1465, %add.3075)
  %div.1755 = bf16[1,14336,4096]{2,1,0} divide(%add.3073, %multiply.2566)
  %mul.10531 = bf16[1,14336,4096]{2,1,0} multiply(%param.146, %broadcast.3925)
  %add.3076 = bf16[1,14336,4096]{2,1,0} add(%div.1755, %mul.10531)
  %mul.10532 = bf16[1,14336,4096]{2,1,0} multiply(%mul.9949, %add.3076)
  %add.3077 = bf16[1,14336,4096]{2,1,0} add(%param.146, %mul.10532)
  %div.1756 = bf16[4096]{0} divide(%all-reduce.82, %div.1436)
  %select_n.764 = bf16[4096]{0} select(%select_n.701, %all-reduce.82, %div.1756)
  %mul.10534 = bf16[4096]{0} multiply(%select_n.764, %broadcast.3910)
  %param.441 = bf16[4096]{0} parameter(380), sharding={replicated}
  %mul.10535 = bf16[4096]{0} multiply(%param.441, %broadcast.3911)
  %add.3078 = bf16[4096]{0} add(%mul.10534, %mul.10535)
  %integer_pow.55 = bf16[4096]{0} multiply(%select_n.764, %select_n.764)
  %mul.10536 = bf16[4096]{0} multiply(%integer_pow.55, %broadcast.3912)
  %param.442 = bf16[4096]{0} parameter(703), sharding={replicated}
  %mul.10537 = bf16[4096]{0} multiply(%param.442, %broadcast.3913)
  %add.3079 = bf16[4096]{0} add(%mul.10536, %mul.10537)
  %div.1759 = bf16[4096]{0} divide(%add.3079, %div.1439)
  %sqrt.56 = bf16[4096]{0} sqrt(%div.1759)
  %add.3080 = bf16[4096]{0} add(%sqrt.56, %broadcast.3914)
  %multiply.2567 = bf16[4096]{0} multiply(%div.1438, %add.3080)
  %div.1760 = bf16[4096]{0} divide(%add.3078, %multiply.2567)
  %mul.10541 = bf16[4096]{0} multiply(%param.142, %broadcast.3910)
  %add.3081 = bf16[4096]{0} add(%div.1760, %mul.10541)
  %mul.10544 = bf16[4096]{0} multiply(%mul.2424, %add.3081)
  %add.3082 = bf16[4096]{0} add(%param.142, %mul.10544)
  %div.1761 = bf16[4096]{0} divide(%all-reduce.83, %div.1436)
  %select_n.765 = bf16[4096]{0} select(%select_n.701, %all-reduce.83, %div.1761)
  %mul.10546 = bf16[4096]{0} multiply(%select_n.765, %broadcast.3910)
  %param.443 = bf16[4096]{0} parameter(381), sharding={replicated}
  %mul.10547 = bf16[4096]{0} multiply(%param.443, %broadcast.3911)
  %add.3083 = bf16[4096]{0} add(%mul.10546, %mul.10547)
  %integer_pow.56 = bf16[4096]{0} multiply(%select_n.765, %select_n.765)
  %mul.10548 = bf16[4096]{0} multiply(%integer_pow.56, %broadcast.3912)
  %param.444 = bf16[4096]{0} parameter(704), sharding={replicated}
  %mul.10549 = bf16[4096]{0} multiply(%param.444, %broadcast.3913)
  %add.3084 = bf16[4096]{0} add(%mul.10548, %mul.10549)
  %div.1764 = bf16[4096]{0} divide(%add.3084, %div.1439)
  %sqrt.57 = bf16[4096]{0} sqrt(%div.1764)
  %add.3085 = bf16[4096]{0} add(%sqrt.57, %broadcast.3914)
  %multiply.2568 = bf16[4096]{0} multiply(%div.1438, %add.3085)
  %div.1765 = bf16[4096]{0} divide(%add.3083, %multiply.2568)
  %mul.10550 = bf16[4096]{0} multiply(%param.137, %broadcast.3910)
  %add.3086 = bf16[4096]{0} add(%div.1765, %mul.10550)
  %mul.10551 = bf16[4096]{0} multiply(%mul.2424, %add.3086)
  %add.3087 = bf16[4096]{0} add(%param.137, %mul.10551)
  %div.1766 = bf16[512,8,128]{0,2,1} divide(%transpose.345, %div.1479)
  %select_n.766 = bf16[512,8,128]{2,1,0} select(%select_n.713, %transpose.345, %div.1766)
  %mul.10553 = bf16[512,8,128]{2,1,0} multiply(%select_n.766, %broadcast.3930)
  %param.445 = bf16[512,8,128]{2,1,0} parameter(382), sharding={devices=[8,1,1]<=[8]}
  %mul.10554 = bf16[512,8,128]{2,1,0} multiply(%param.445, %broadcast.3931)
  %add.3088 = bf16[512,8,128]{2,1,0} add(%mul.10553, %mul.10554)
  %integer_pow.57 = bf16[512,8,128]{2,1,0} multiply(%select_n.766, %select_n.766)
  %mul.10555 = bf16[512,8,128]{2,1,0} multiply(%integer_pow.57, %broadcast.3932)
  %param.446 = bf16[512,8,128]{2,1,0} parameter(705), sharding={devices=[8,1,1]<=[8]}
  %mul.10556 = bf16[512,8,128]{2,1,0} multiply(%param.446, %broadcast.3933)
  %add.3089 = bf16[512,8,128]{2,1,0} add(%mul.10555, %mul.10556)
  %div.1769 = bf16[512,8,128]{2,1,0} divide(%add.3089, %div.1482)
  %sqrt.58 = bf16[512,8,128]{2,1,0} sqrt(%div.1769)
  %add.3090 = bf16[512,8,128]{2,1,0} add(%sqrt.58, %broadcast.3934)
  %multiply.2569 = bf16[512,8,128]{2,1,0} multiply(%div.1481, %add.3090)
  %div.1770 = bf16[512,8,128]{2,1,0} divide(%add.3088, %multiply.2569)
  %mul.10557 = bf16[512,8,128]{2,1,0} multiply(%param.139, %broadcast.3930)
  %add.3091 = bf16[512,8,128]{2,1,0} add(%div.1770, %mul.10557)
  %mul.10558 = bf16[512,8,128]{2,1,0} multiply(%mul.9984, %add.3091)
  %add.3092 = bf16[512,8,128]{2,1,0} add(%param.139, %mul.10558)
  %div.1771 = bf16[32,128,512]{1,0,2} divide(%transpose.346, %div.1485)
  %select_n.767 = bf16[32,128,512]{2,1,0} select(%select_n.715, %transpose.346, %div.1771)
  %mul.10560 = bf16[32,128,512]{2,1,0} multiply(%select_n.767, %broadcast.3935)
  %param.447 = bf16[32,128,512]{2,1,0} parameter(383), sharding={devices=[1,1,8]<=[8]}
  %mul.10561 = bf16[32,128,512]{2,1,0} multiply(%param.447, %broadcast.3936)
  %add.3093 = bf16[32,128,512]{2,1,0} add(%mul.10560, %mul.10561)
  %integer_pow.58 = bf16[32,128,512]{2,1,0} multiply(%select_n.767, %select_n.767)
  %mul.10562 = bf16[32,128,512]{2,1,0} multiply(%integer_pow.58, %broadcast.3937)
  %param.448 = bf16[32,128,512]{2,1,0} parameter(706), sharding={devices=[1,1,8]<=[8]}
  %mul.10563 = bf16[32,128,512]{2,1,0} multiply(%param.448, %broadcast.3938)
  %add.3094 = bf16[32,128,512]{2,1,0} add(%mul.10562, %mul.10563)
  %div.1774 = bf16[32,128,512]{2,1,0} divide(%add.3094, %div.1488)
  %sqrt.59 = bf16[32,128,512]{2,1,0} sqrt(%div.1774)
  %add.3095 = bf16[32,128,512]{2,1,0} add(%sqrt.59, %broadcast.3939)
  %multiply.2570 = bf16[32,128,512]{2,1,0} multiply(%div.1487, %add.3095)
  %div.1775 = bf16[32,128,512]{2,1,0} divide(%add.3093, %multiply.2570)
  %mul.10564 = bf16[32,128,512]{2,1,0} multiply(%param.141, %broadcast.3935)
  %add.3096 = bf16[32,128,512]{2,1,0} add(%div.1775, %mul.10564)
  %mul.10565 = bf16[32,128,512]{2,1,0} multiply(%mul.9994, %add.3096)
  %add.3098 = bf16[32,128,512]{2,1,0} add(%param.141, %mul.10565)
  %div.1776 = bf16[512,32,128]{0,2,1} divide(%transpose.347, %div.1491)
  %select_n.768 = bf16[512,32,128]{2,1,0} select(%select_n.717, %transpose.347, %div.1776)
  %mul.10567 = bf16[512,32,128]{2,1,0} multiply(%select_n.768, %broadcast.3940)
  %param.449 = bf16[512,32,128]{2,1,0} parameter(384), sharding={devices=[8,1,1]<=[8]}
  %mul.10568 = bf16[512,32,128]{2,1,0} multiply(%param.449, %broadcast.3941)
  %add.3099 = bf16[512,32,128]{2,1,0} add(%mul.10567, %mul.10568)
  %integer_pow.59 = bf16[512,32,128]{2,1,0} multiply(%select_n.768, %select_n.768)
  %mul.10569 = bf16[512,32,128]{2,1,0} multiply(%integer_pow.59, %broadcast.3942)
  %param.450 = bf16[512,32,128]{2,1,0} parameter(707), sharding={devices=[8,1,1]<=[8]}
  %mul.10570 = bf16[512,32,128]{2,1,0} multiply(%param.450, %broadcast.3943)
  %add.3100 = bf16[512,32,128]{2,1,0} add(%mul.10569, %mul.10570)
  %div.1779 = bf16[512,32,128]{2,1,0} divide(%add.3100, %div.1494)
  %sqrt.60 = bf16[512,32,128]{2,1,0} sqrt(%div.1779)
  %add.3101 = bf16[512,32,128]{2,1,0} add(%sqrt.60, %broadcast.3944)
  %multiply.2571 = bf16[512,32,128]{2,1,0} multiply(%div.1493, %add.3101)
  %div.1780 = bf16[512,32,128]{2,1,0} divide(%add.3099, %multiply.2571)
  %mul.10571 = bf16[512,32,128]{2,1,0} multiply(%param.138, %broadcast.3940)
  %add.3103 = bf16[512,32,128]{2,1,0} add(%div.1780, %mul.10571)
  %mul.10572 = bf16[512,32,128]{2,1,0} multiply(%mul.10010, %add.3103)
  %add.3104 = bf16[512,32,128]{2,1,0} add(%param.138, %mul.10572)
  %div.1781 = bf16[512,8,128]{0,2,1} divide(%transpose.348, %div.1479)
  %select_n.769 = bf16[512,8,128]{2,1,0} select(%select_n.713, %transpose.348, %div.1781)
  %mul.10574 = bf16[512,8,128]{2,1,0} multiply(%select_n.769, %broadcast.3930)
  %param.451 = bf16[512,8,128]{2,1,0} parameter(385), sharding={devices=[8,1,1]<=[8]}
  %mul.10575 = bf16[512,8,128]{2,1,0} multiply(%param.451, %broadcast.3931)
  %add.3105 = bf16[512,8,128]{2,1,0} add(%mul.10574, %mul.10575)
  %integer_pow.60 = bf16[512,8,128]{2,1,0} multiply(%select_n.769, %select_n.769)
  %mul.10576 = bf16[512,8,128]{2,1,0} multiply(%integer_pow.60, %broadcast.3932)
  %param.452 = bf16[512,8,128]{2,1,0} parameter(708), sharding={devices=[8,1,1]<=[8]}
  %mul.10577 = bf16[512,8,128]{2,1,0} multiply(%param.452, %broadcast.3933)
  %add.3106 = bf16[512,8,128]{2,1,0} add(%mul.10576, %mul.10577)
  %div.1784 = bf16[512,8,128]{2,1,0} divide(%add.3106, %div.1482)
  %sqrt.61 = bf16[512,8,128]{2,1,0} sqrt(%div.1784)
  %add.3107 = bf16[512,8,128]{2,1,0} add(%sqrt.61, %broadcast.3934)
  %multiply.2572 = bf16[512,8,128]{2,1,0} multiply(%div.1481, %add.3107)
  %div.1785 = bf16[512,8,128]{2,1,0} divide(%add.3105, %multiply.2572)
  %mul.10578 = bf16[512,8,128]{2,1,0} multiply(%param.140, %broadcast.3930)
  %add.3108 = bf16[512,8,128]{2,1,0} add(%div.1785, %mul.10578)
  %mul.10579 = bf16[512,8,128]{2,1,0} multiply(%mul.9984, %add.3108)
  %add.3109 = bf16[512,8,128]{2,1,0} add(%param.140, %mul.10579)
  %div.1786 = bf16[512,8]{1,0} divide(%dynamic-slice.2241, %div.1442)
  %select_n.770 = bf16[512,8]{1,0} select(%select_n.704, %dynamic-slice.2241, %div.1786)
  %mul.10581 = bf16[512,8]{1,0} multiply(%select_n.770, %broadcast.3915)
  %param.453 = bf16[512,8]{1,0} parameter(386), sharding={devices=[8,1]<=[8]}
  %mul.10582 = bf16[512,8]{1,0} multiply(%param.453, %broadcast.3916)
  %add.3110 = bf16[512,8]{1,0} add(%mul.10581, %mul.10582)
  %integer_pow.61 = bf16[512,8]{1,0} multiply(%select_n.770, %select_n.770)
  %mul.10583 = bf16[512,8]{1,0} multiply(%integer_pow.61, %broadcast.3917)
  %param.454 = bf16[512,8]{1,0} parameter(709), sharding={devices=[8,1]<=[8]}
  %mul.10584 = bf16[512,8]{1,0} multiply(%param.454, %broadcast.3918)
  %add.3111 = bf16[512,8]{1,0} add(%mul.10583, %mul.10584)
  %div.1789 = bf16[512,8]{1,0} divide(%add.3111, %div.1446)
  %sqrt.62 = bf16[512,8]{1,0} sqrt(%div.1789)
  %add.3112 = bf16[512,8]{1,0} add(%sqrt.62, %broadcast.3919)
  %multiply.2573 = bf16[512,8]{1,0} multiply(%div.1444, %add.3112)
  %div.1790 = bf16[512,8]{1,0} divide(%add.3110, %multiply.2573)
  %mul.10585 = bf16[512,8]{1,0} multiply(%param.153, %broadcast.3915)
  %add.3113 = bf16[512,8]{1,0} add(%div.1790, %mul.10585)
  %mul.10586 = bf16[512,8]{1,0} multiply(%mul.9922, %add.3113)
  %add.3114 = bf16[512,8]{1,0} add(%param.153, %mul.10586)
  %div.1791 = bf16[1,4096,14336]{2,1,0} divide(%sharding_constraint.2479, %div.1450)
  %select_n.771 = bf16[1,4096,14336]{2,1,0} select(%select_n.706, %sharding_constraint.2479, %div.1791)
  %mul.10588 = bf16[1,4096,14336]{2,1,0} multiply(%select_n.771, %broadcast.3920)
  %param.455 = bf16[1,4096,14336]{2,1,0} parameter(387), sharding={devices=[8,1,1]<=[8]}
  %mul.10589 = bf16[1,4096,14336]{2,1,0} multiply(%param.455, %broadcast.3921)
  %add.3115 = bf16[1,4096,14336]{2,1,0} add(%mul.10588, %mul.10589)
  %integer_pow.62 = bf16[1,4096,14336]{2,1,0} multiply(%select_n.771, %select_n.771)
  %mul.10591 = bf16[1,4096,14336]{2,1,0} multiply(%integer_pow.62, %broadcast.3922)
  %param.456 = bf16[1,4096,14336]{2,1,0} parameter(710), sharding={devices=[8,1,1]<=[8]}
  %mul.10592 = bf16[1,4096,14336]{2,1,0} multiply(%param.456, %broadcast.3923)
  %add.3116 = bf16[1,4096,14336]{2,1,0} add(%mul.10591, %mul.10592)
  %div.1795 = bf16[1,4096,14336]{2,1,0} divide(%add.3116, %div.1455)
  %sqrt.63 = bf16[1,4096,14336]{2,1,0} sqrt(%div.1795)
  %add.3117 = bf16[1,4096,14336]{2,1,0} add(%sqrt.63, %broadcast.3924)
  %multiply.2574 = bf16[1,4096,14336]{2,1,0} multiply(%div.1454, %add.3117)
  %div.1796 = bf16[1,4096,14336]{2,1,0} divide(%add.3115, %multiply.2574)
  %mul.10593 = bf16[1,4096,14336]{2,1,0} multiply(%param.154, %broadcast.3920)
  %add.3118 = bf16[1,4096,14336]{2,1,0} add(%div.1796, %mul.10593)
  %mul.10594 = bf16[1,4096,14336]{2,1,0} multiply(%mul.9929, %add.3118)
  %add.3119 = bf16[1,4096,14336]{2,1,0} add(%param.154, %mul.10594)
  %div.1797 = bf16[1,4096,14336]{2,1,0} divide(%sharding_constraint.2480, %div.1450)
  %select_n.772 = bf16[1,4096,14336]{2,1,0} select(%select_n.706, %sharding_constraint.2480, %div.1797)
  %mul.10596 = bf16[1,4096,14336]{2,1,0} multiply(%select_n.772, %broadcast.3920)
  %param.457 = bf16[1,4096,14336]{2,1,0} parameter(388), sharding={devices=[8,1,1]<=[8]}
  %mul.10599 = bf16[1,4096,14336]{2,1,0} multiply(%param.457, %broadcast.3921)
  %add.3120 = bf16[1,4096,14336]{2,1,0} add(%mul.10596, %mul.10599)
  %integer_pow.63 = bf16[1,4096,14336]{2,1,0} multiply(%select_n.772, %select_n.772)
  %mul.10600 = bf16[1,4096,14336]{2,1,0} multiply(%integer_pow.63, %broadcast.3922)
  %param.458 = bf16[1,4096,14336]{2,1,0} parameter(711), sharding={devices=[8,1,1]<=[8]}
  %mul.10601 = bf16[1,4096,14336]{2,1,0} multiply(%param.458, %broadcast.3923)
  %add.3121 = bf16[1,4096,14336]{2,1,0} add(%mul.10600, %mul.10601)
  %div.1800 = bf16[1,4096,14336]{2,1,0} divide(%add.3121, %div.1455)
  %sqrt.64 = bf16[1,4096,14336]{2,1,0} sqrt(%div.1800)
  %add.3122 = bf16[1,4096,14336]{2,1,0} add(%sqrt.64, %broadcast.3924)
  %multiply.2575 = bf16[1,4096,14336]{2,1,0} multiply(%div.1454, %add.3122)
  %div.1801 = bf16[1,4096,14336]{2,1,0} divide(%add.3120, %multiply.2575)
  %mul.10602 = bf16[1,4096,14336]{2,1,0} multiply(%param.155, %broadcast.3920)
  %add.3123 = bf16[1,4096,14336]{2,1,0} add(%div.1801, %mul.10602)
  %mul.10603 = bf16[1,4096,14336]{2,1,0} multiply(%mul.9929, %add.3123)
  %add.3124 = bf16[1,4096,14336]{2,1,0} add(%param.155, %mul.10603)
  %div.1802 = bf16[1,14336,4096]{2,1,0} divide(%sharding_constraint.2481, %div.1463)
  %select_n.773 = bf16[1,14336,4096]{2,1,0} select(%select_n.709, %sharding_constraint.2481, %div.1802)
  %mul.10606 = bf16[1,14336,4096]{2,1,0} multiply(%select_n.773, %broadcast.3925)
  %param.459 = bf16[1,14336,4096]{2,1,0} parameter(389), sharding={devices=[8,1,1]<=[8]}
  %mul.10607 = bf16[1,14336,4096]{2,1,0} multiply(%param.459, %broadcast.3926)
  %add.3125 = bf16[1,14336,4096]{2,1,0} add(%mul.10606, %mul.10607)
  %integer_pow.64 = bf16[1,14336,4096]{2,1,0} multiply(%select_n.773, %select_n.773)
  %mul.10608 = bf16[1,14336,4096]{2,1,0} multiply(%integer_pow.64, %broadcast.3927)
  %param.460 = bf16[1,14336,4096]{2,1,0} parameter(712), sharding={devices=[8,1,1]<=[8]}
  %mul.10613 = bf16[1,14336,4096]{2,1,0} multiply(%param.460, %broadcast.3928)
  %add.3126 = bf16[1,14336,4096]{2,1,0} add(%mul.10608, %mul.10613)
  %div.1805 = bf16[1,14336,4096]{2,1,0} divide(%add.3126, %div.1466)
  %sqrt.65 = bf16[1,14336,4096]{2,1,0} sqrt(%div.1805)
  %add.3127 = bf16[1,14336,4096]{2,1,0} add(%sqrt.65, %broadcast.3929)
  %multiply.2576 = bf16[1,14336,4096]{2,1,0} multiply(%div.1465, %add.3127)
  %div.1806 = bf16[1,14336,4096]{2,1,0} divide(%add.3125, %multiply.2576)
  %mul.10614 = bf16[1,14336,4096]{2,1,0} multiply(%param.156, %broadcast.3925)
  %add.3128 = bf16[1,14336,4096]{2,1,0} add(%div.1806, %mul.10614)
  %mul.10615 = bf16[1,14336,4096]{2,1,0} multiply(%mul.9949, %add.3128)
  %add.3129 = bf16[1,14336,4096]{2,1,0} add(%param.156, %mul.10615)
  %div.1807 = bf16[4096]{0} divide(%all-reduce.97, %div.1436)
  %select_n.774 = bf16[4096]{0} select(%select_n.701, %all-reduce.97, %div.1807)
  %mul.10617 = bf16[4096]{0} multiply(%select_n.774, %broadcast.3910)
  %param.461 = bf16[4096]{0} parameter(390), sharding={replicated}
  %mul.10618 = bf16[4096]{0} multiply(%param.461, %broadcast.3911)
  %add.3130 = bf16[4096]{0} add(%mul.10617, %mul.10618)
  %integer_pow.65 = bf16[4096]{0} multiply(%select_n.774, %select_n.774)
  %mul.10619 = bf16[4096]{0} multiply(%integer_pow.65, %broadcast.3912)
  %param.462 = bf16[4096]{0} parameter(713), sharding={replicated}
  %mul.10620 = bf16[4096]{0} multiply(%param.462, %broadcast.3913)
  %add.3131 = bf16[4096]{0} add(%mul.10619, %mul.10620)
  %div.1810 = bf16[4096]{0} divide(%add.3131, %div.1439)
  %sqrt.66 = bf16[4096]{0} sqrt(%div.1810)
  %add.3132 = bf16[4096]{0} add(%sqrt.66, %broadcast.3914)
  %multiply.2577 = bf16[4096]{0} multiply(%div.1438, %add.3132)
  %div.1811 = bf16[4096]{0} divide(%add.3130, %multiply.2577)
  %mul.10621 = bf16[4096]{0} multiply(%param.152, %broadcast.3910)
  %add.3133 = bf16[4096]{0} add(%div.1811, %mul.10621)
  %mul.10622 = bf16[4096]{0} multiply(%mul.2424, %add.3133)
  %add.3134 = bf16[4096]{0} add(%param.152, %mul.10622)
  %div.1812 = bf16[4096]{0} divide(%all-reduce.98, %div.1436)
  %select_n.775 = bf16[4096]{0} select(%select_n.701, %all-reduce.98, %div.1812)
  %mul.10624 = bf16[4096]{0} multiply(%select_n.775, %broadcast.3910)
  %param.463 = bf16[4096]{0} parameter(391), sharding={replicated}
  %mul.10625 = bf16[4096]{0} multiply(%param.463, %broadcast.3911)
  %add.3135 = bf16[4096]{0} add(%mul.10624, %mul.10625)
  %integer_pow.66 = bf16[4096]{0} multiply(%select_n.775, %select_n.775)
  %mul.10626 = bf16[4096]{0} multiply(%integer_pow.66, %broadcast.3912)
  %param.464 = bf16[4096]{0} parameter(714), sharding={replicated}
  %mul.10627 = bf16[4096]{0} multiply(%param.464, %broadcast.3913)
  %add.3136 = bf16[4096]{0} add(%mul.10626, %mul.10627)
  %div.1815 = bf16[4096]{0} divide(%add.3136, %div.1439)
  %sqrt.67 = bf16[4096]{0} sqrt(%div.1815)
  %add.3137 = bf16[4096]{0} add(%sqrt.67, %broadcast.3914)
  %multiply.2578 = bf16[4096]{0} multiply(%div.1438, %add.3137)
  %div.1816 = bf16[4096]{0} divide(%add.3135, %multiply.2578)
  %mul.10629 = bf16[4096]{0} multiply(%param.147, %broadcast.3910)
  %add.3138 = bf16[4096]{0} add(%div.1816, %mul.10629)
  %mul.10630 = bf16[4096]{0} multiply(%mul.2424, %add.3138)
  %add.3139 = bf16[4096]{0} add(%param.147, %mul.10630)
  %div.1817 = bf16[512,8,128]{0,2,1} divide(%transpose.349, %div.1479)
  %select_n.776 = bf16[512,8,128]{2,1,0} select(%select_n.713, %transpose.349, %div.1817)
  %mul.10632 = bf16[512,8,128]{2,1,0} multiply(%select_n.776, %broadcast.3930)
  %param.465 = bf16[512,8,128]{2,1,0} parameter(392), sharding={devices=[8,1,1]<=[8]}
  %mul.10634 = bf16[512,8,128]{2,1,0} multiply(%param.465, %broadcast.3931)
  %add.3140 = bf16[512,8,128]{2,1,0} add(%mul.10632, %mul.10634)
  %integer_pow.67 = bf16[512,8,128]{2,1,0} multiply(%select_n.776, %select_n.776)
  %mul.10635 = bf16[512,8,128]{2,1,0} multiply(%integer_pow.67, %broadcast.3932)
  %param.466 = bf16[512,8,128]{2,1,0} parameter(715), sharding={devices=[8,1,1]<=[8]}
  %mul.10636 = bf16[512,8,128]{2,1,0} multiply(%param.466, %broadcast.3933)
  %add.3143 = bf16[512,8,128]{2,1,0} add(%mul.10635, %mul.10636)
  %div.1820 = bf16[512,8,128]{2,1,0} divide(%add.3143, %div.1482)
  %sqrt.68 = bf16[512,8,128]{2,1,0} sqrt(%div.1820)
  %add.3144 = bf16[512,8,128]{2,1,0} add(%sqrt.68, %broadcast.3934)
  %multiply.2579 = bf16[512,8,128]{2,1,0} multiply(%div.1481, %add.3144)
  %div.1821 = bf16[512,8,128]{2,1,0} divide(%add.3140, %multiply.2579)
  %mul.10637 = bf16[512,8,128]{2,1,0} multiply(%param.149, %broadcast.3930)
  %add.3145 = bf16[512,8,128]{2,1,0} add(%div.1821, %mul.10637)
  %mul.10638 = bf16[512,8,128]{2,1,0} multiply(%mul.9984, %add.3145)
  %add.3146 = bf16[512,8,128]{2,1,0} add(%param.149, %mul.10638)
  %div.1822 = bf16[32,128,512]{1,0,2} divide(%transpose.350, %div.1485)
  %select_n.777 = bf16[32,128,512]{2,1,0} select(%select_n.715, %transpose.350, %div.1822)
  %mul.10643 = bf16[32,128,512]{2,1,0} multiply(%select_n.777, %broadcast.3935)
  %param.467 = bf16[32,128,512]{2,1,0} parameter(393), sharding={devices=[1,1,8]<=[8]}
  %mul.10644 = bf16[32,128,512]{2,1,0} multiply(%param.467, %broadcast.3936)
  %add.3147 = bf16[32,128,512]{2,1,0} add(%mul.10643, %mul.10644)
  %integer_pow.68 = bf16[32,128,512]{2,1,0} multiply(%select_n.777, %select_n.777)
  %mul.10645 = bf16[32,128,512]{2,1,0} multiply(%integer_pow.68, %broadcast.3937)
  %param.468 = bf16[32,128,512]{2,1,0} parameter(716), sharding={devices=[1,1,8]<=[8]}
  %mul.10646 = bf16[32,128,512]{2,1,0} multiply(%param.468, %broadcast.3938)
  %add.3148 = bf16[32,128,512]{2,1,0} add(%mul.10645, %mul.10646)
  %div.1825 = bf16[32,128,512]{2,1,0} divide(%add.3148, %div.1488)
  %sqrt.69 = bf16[32,128,512]{2,1,0} sqrt(%div.1825)
  %add.3149 = bf16[32,128,512]{2,1,0} add(%sqrt.69, %broadcast.3939)
  %multiply.2580 = bf16[32,128,512]{2,1,0} multiply(%div.1487, %add.3149)
  %div.1826 = bf16[32,128,512]{2,1,0} divide(%add.3147, %multiply.2580)
  %mul.10647 = bf16[32,128,512]{2,1,0} multiply(%param.151, %broadcast.3935)
  %add.3151 = bf16[32,128,512]{2,1,0} add(%div.1826, %mul.10647)
  %mul.10652 = bf16[32,128,512]{2,1,0} multiply(%mul.9994, %add.3151)
  %add.3152 = bf16[32,128,512]{2,1,0} add(%param.151, %mul.10652)
  %div.1827 = bf16[512,32,128]{0,2,1} divide(%transpose.351, %div.1491)
  %select_n.778 = bf16[512,32,128]{2,1,0} select(%select_n.717, %transpose.351, %div.1827)
  %mul.10658 = bf16[512,32,128]{2,1,0} multiply(%select_n.778, %broadcast.3940)
  %param.469 = bf16[512,32,128]{2,1,0} parameter(394), sharding={devices=[8,1,1]<=[8]}
  %mul.10659 = bf16[512,32,128]{2,1,0} multiply(%param.469, %broadcast.3941)
  %add.3153 = bf16[512,32,128]{2,1,0} add(%mul.10658, %mul.10659)
  %integer_pow.69 = bf16[512,32,128]{2,1,0} multiply(%select_n.778, %select_n.778)
  %mul.10660 = bf16[512,32,128]{2,1,0} multiply(%integer_pow.69, %broadcast.3942)
  %param.470 = bf16[512,32,128]{2,1,0} parameter(717), sharding={devices=[8,1,1]<=[8]}
  %mul.10661 = bf16[512,32,128]{2,1,0} multiply(%param.470, %broadcast.3943)
  %add.3154 = bf16[512,32,128]{2,1,0} add(%mul.10660, %mul.10661)
  %div.1831 = bf16[512,32,128]{2,1,0} divide(%add.3154, %div.1494)
  %sqrt.70 = bf16[512,32,128]{2,1,0} sqrt(%div.1831)
  %add.3155 = bf16[512,32,128]{2,1,0} add(%sqrt.70, %broadcast.3944)
  %multiply.2581 = bf16[512,32,128]{2,1,0} multiply(%div.1493, %add.3155)
  %div.1832 = bf16[512,32,128]{2,1,0} divide(%add.3153, %multiply.2581)
  %mul.10662 = bf16[512,32,128]{2,1,0} multiply(%param.148, %broadcast.3940)
  %add.3156 = bf16[512,32,128]{2,1,0} add(%div.1832, %mul.10662)
  %mul.10663 = bf16[512,32,128]{2,1,0} multiply(%mul.10010, %add.3156)
  %add.3157 = bf16[512,32,128]{2,1,0} add(%param.148, %mul.10663)
  %div.1833 = bf16[512,8,128]{0,2,1} divide(%transpose.352, %div.1479)
  %select_n.779 = bf16[512,8,128]{2,1,0} select(%select_n.713, %transpose.352, %div.1833)
  %mul.10665 = bf16[512,8,128]{2,1,0} multiply(%select_n.779, %broadcast.3930)
  %param.471 = bf16[512,8,128]{2,1,0} parameter(395), sharding={devices=[8,1,1]<=[8]}
  %mul.10667 = bf16[512,8,128]{2,1,0} multiply(%param.471, %broadcast.3931)
  %add.3158 = bf16[512,8,128]{2,1,0} add(%mul.10665, %mul.10667)
  %integer_pow.70 = bf16[512,8,128]{2,1,0} multiply(%select_n.779, %select_n.779)
  %mul.10668 = bf16[512,8,128]{2,1,0} multiply(%integer_pow.70, %broadcast.3932)
  %param.472 = bf16[512,8,128]{2,1,0} parameter(718), sharding={devices=[8,1,1]<=[8]}
  %mul.10669 = bf16[512,8,128]{2,1,0} multiply(%param.472, %broadcast.3933)
  %add.3159 = bf16[512,8,128]{2,1,0} add(%mul.10668, %mul.10669)
  %div.1836 = bf16[512,8,128]{2,1,0} divide(%add.3159, %div.1482)
  %sqrt.71 = bf16[512,8,128]{2,1,0} sqrt(%div.1836)
  %add.3160 = bf16[512,8,128]{2,1,0} add(%sqrt.71, %broadcast.3934)
  %multiply.2582 = bf16[512,8,128]{2,1,0} multiply(%div.1481, %add.3160)
  %div.1837 = bf16[512,8,128]{2,1,0} divide(%add.3158, %multiply.2582)
  %mul.10671 = bf16[512,8,128]{2,1,0} multiply(%param.150, %broadcast.3930)
  %add.3161 = bf16[512,8,128]{2,1,0} add(%div.1837, %mul.10671)
  %mul.10672 = bf16[512,8,128]{2,1,0} multiply(%mul.9984, %add.3161)
  %add.3162 = bf16[512,8,128]{2,1,0} add(%param.150, %mul.10672)
  %div.1838 = bf16[512,8]{1,0} divide(%dynamic-slice.2251, %div.1442)
  %select_n.780 = bf16[512,8]{1,0} select(%select_n.704, %dynamic-slice.2251, %div.1838)
  %mul.10674 = bf16[512,8]{1,0} multiply(%select_n.780, %broadcast.3915)
  %param.473 = bf16[512,8]{1,0} parameter(396), sharding={devices=[8,1]<=[8]}
  %mul.10675 = bf16[512,8]{1,0} multiply(%param.473, %broadcast.3916)
  %add.3163 = bf16[512,8]{1,0} add(%mul.10674, %mul.10675)
  %integer_pow.71 = bf16[512,8]{1,0} multiply(%select_n.780, %select_n.780)
  %mul.10676 = bf16[512,8]{1,0} multiply(%integer_pow.71, %broadcast.3917)
  %param.474 = bf16[512,8]{1,0} parameter(719), sharding={devices=[8,1]<=[8]}
  %mul.10678 = bf16[512,8]{1,0} multiply(%param.474, %broadcast.3918)
  %add.3164 = bf16[512,8]{1,0} add(%mul.10676, %mul.10678)
  %div.1841 = bf16[512,8]{1,0} divide(%add.3164, %div.1446)
  %sqrt.72 = bf16[512,8]{1,0} sqrt(%div.1841)
  %add.3165 = bf16[512,8]{1,0} add(%sqrt.72, %broadcast.3919)
  %multiply.2583 = bf16[512,8]{1,0} multiply(%div.1444, %add.3165)
  %div.1842 = bf16[512,8]{1,0} divide(%add.3163, %multiply.2583)
  %mul.10679 = bf16[512,8]{1,0} multiply(%param.163, %broadcast.3915)
  %add.3166 = bf16[512,8]{1,0} add(%div.1842, %mul.10679)
  %mul.10680 = bf16[512,8]{1,0} multiply(%mul.9922, %add.3166)
  %add.3167 = bf16[512,8]{1,0} add(%param.163, %mul.10680)
  %div.1843 = bf16[1,4096,14336]{2,1,0} divide(%sharding_constraint.2482, %div.1450)
  %select_n.781 = bf16[1,4096,14336]{2,1,0} select(%select_n.706, %sharding_constraint.2482, %div.1843)
  %mul.10693 = bf16[1,4096,14336]{2,1,0} multiply(%select_n.781, %broadcast.3920)
  %param.475 = bf16[1,4096,14336]{2,1,0} parameter(397), sharding={devices=[8,1,1]<=[8]}
  %mul.10702 = bf16[1,4096,14336]{2,1,0} multiply(%param.475, %broadcast.3921)
  %add.3168 = bf16[1,4096,14336]{2,1,0} add(%mul.10693, %mul.10702)
  %integer_pow.72 = bf16[1,4096,14336]{2,1,0} multiply(%select_n.781, %select_n.781)
  %mul.10703 = bf16[1,4096,14336]{2,1,0} multiply(%integer_pow.72, %broadcast.3922)
  %param.476 = bf16[1,4096,14336]{2,1,0} parameter(720), sharding={devices=[8,1,1]<=[8]}
  %mul.10704 = bf16[1,4096,14336]{2,1,0} multiply(%param.476, %broadcast.3923)
  %add.3169 = bf16[1,4096,14336]{2,1,0} add(%mul.10703, %mul.10704)
  %div.1846 = bf16[1,4096,14336]{2,1,0} divide(%add.3169, %div.1455)
  %sqrt.73 = bf16[1,4096,14336]{2,1,0} sqrt(%div.1846)
  %add.3170 = bf16[1,4096,14336]{2,1,0} add(%sqrt.73, %broadcast.3924)
  %multiply.2584 = bf16[1,4096,14336]{2,1,0} multiply(%div.1454, %add.3170)
  %div.1847 = bf16[1,4096,14336]{2,1,0} divide(%add.3168, %multiply.2584)
  %mul.10705 = bf16[1,4096,14336]{2,1,0} multiply(%param.164, %broadcast.3920)
  %add.3171 = bf16[1,4096,14336]{2,1,0} add(%div.1847, %mul.10705)
  %mul.10707 = bf16[1,4096,14336]{2,1,0} multiply(%mul.9929, %add.3171)
  %add.3173 = bf16[1,4096,14336]{2,1,0} add(%param.164, %mul.10707)
  %div.1848 = bf16[1,4096,14336]{2,1,0} divide(%sharding_constraint.2483, %div.1450)
  %select_n.782 = bf16[1,4096,14336]{2,1,0} select(%select_n.706, %sharding_constraint.2483, %div.1848)
  %mul.10709 = bf16[1,4096,14336]{2,1,0} multiply(%select_n.782, %broadcast.3920)
  %param.477 = bf16[1,4096,14336]{2,1,0} parameter(398), sharding={devices=[8,1,1]<=[8]}
  %mul.10710 = bf16[1,4096,14336]{2,1,0} multiply(%param.477, %broadcast.3921)
  %add.3174 = bf16[1,4096,14336]{2,1,0} add(%mul.10709, %mul.10710)
  %integer_pow.73 = bf16[1,4096,14336]{2,1,0} multiply(%select_n.782, %select_n.782)
  %mul.10711 = bf16[1,4096,14336]{2,1,0} multiply(%integer_pow.73, %broadcast.3922)
  %param.478 = bf16[1,4096,14336]{2,1,0} parameter(721), sharding={devices=[8,1,1]<=[8]}
  %mul.10713 = bf16[1,4096,14336]{2,1,0} multiply(%param.478, %broadcast.3923)
  %add.3175 = bf16[1,4096,14336]{2,1,0} add(%mul.10711, %mul.10713)
  %div.1851 = bf16[1,4096,14336]{2,1,0} divide(%add.3175, %div.1455)
  %sqrt.74 = bf16[1,4096,14336]{2,1,0} sqrt(%div.1851)
  %add.3176 = bf16[1,4096,14336]{2,1,0} add(%sqrt.74, %broadcast.3924)
  %multiply.2585 = bf16[1,4096,14336]{2,1,0} multiply(%div.1454, %add.3176)
  %div.1853 = bf16[1,4096,14336]{2,1,0} divide(%add.3174, %multiply.2585)
  %mul.10714 = bf16[1,4096,14336]{2,1,0} multiply(%param.165, %broadcast.3920)
  %add.3177 = bf16[1,4096,14336]{2,1,0} add(%div.1853, %mul.10714)
  %mul.10715 = bf16[1,4096,14336]{2,1,0} multiply(%mul.9929, %add.3177)
  %add.3178 = bf16[1,4096,14336]{2,1,0} add(%param.165, %mul.10715)
  %div.1854 = bf16[1,14336,4096]{2,1,0} divide(%sharding_constraint.2484, %div.1463)
  %select_n.783 = bf16[1,14336,4096]{2,1,0} select(%select_n.709, %sharding_constraint.2484, %div.1854)
  %mul.10717 = bf16[1,14336,4096]{2,1,0} multiply(%select_n.783, %broadcast.3925)
  %param.479 = bf16[1,14336,4096]{2,1,0} parameter(399), sharding={devices=[8,1,1]<=[8]}
  %mul.10719 = bf16[1,14336,4096]{2,1,0} multiply(%param.479, %broadcast.3926)
  %add.3179 = bf16[1,14336,4096]{2,1,0} add(%mul.10717, %mul.10719)
  %integer_pow.74 = bf16[1,14336,4096]{2,1,0} multiply(%select_n.783, %select_n.783)
  %mul.10720 = bf16[1,14336,4096]{2,1,0} multiply(%integer_pow.74, %broadcast.3927)
  %param.480 = bf16[1,14336,4096]{2,1,0} parameter(722), sharding={devices=[8,1,1]<=[8]}
  %mul.10721 = bf16[1,14336,4096]{2,1,0} multiply(%param.480, %broadcast.3928)
  %add.3180 = bf16[1,14336,4096]{2,1,0} add(%mul.10720, %mul.10721)
  %div.1864 = bf16[1,14336,4096]{2,1,0} divide(%add.3180, %div.1466)
  %sqrt.75 = bf16[1,14336,4096]{2,1,0} sqrt(%div.1864)
  %add.3181 = bf16[1,14336,4096]{2,1,0} add(%sqrt.75, %broadcast.3929)
  %multiply.2586 = bf16[1,14336,4096]{2,1,0} multiply(%div.1465, %add.3181)
  %div.1865 = bf16[1,14336,4096]{2,1,0} divide(%add.3179, %multiply.2586)
  %mul.10722 = bf16[1,14336,4096]{2,1,0} multiply(%param.166, %broadcast.3925)
  %add.3182 = bf16[1,14336,4096]{2,1,0} add(%div.1865, %mul.10722)
  %mul.10723 = bf16[1,14336,4096]{2,1,0} multiply(%mul.9949, %add.3182)
  %add.3183 = bf16[1,14336,4096]{2,1,0} add(%param.166, %mul.10723)
  %div.1866 = bf16[4096]{0} divide(%all-reduce.112, %div.1436)
  %select_n.784 = bf16[4096]{0} select(%select_n.701, %all-reduce.112, %div.1866)
  %mul.10733 = bf16[4096]{0} multiply(%select_n.784, %broadcast.3910)
  %param.481 = bf16[4096]{0} parameter(400), sharding={replicated}
  %mul.10742 = bf16[4096]{0} multiply(%param.481, %broadcast.3911)
  %add.3184 = bf16[4096]{0} add(%mul.10733, %mul.10742)
  %integer_pow.75 = bf16[4096]{0} multiply(%select_n.784, %select_n.784)
  %mul.10743 = bf16[4096]{0} multiply(%integer_pow.75, %broadcast.3912)
  %param.482 = bf16[4096]{0} parameter(723), sharding={replicated}
  %mul.10744 = bf16[4096]{0} multiply(%param.482, %broadcast.3913)
  %add.3185 = bf16[4096]{0} add(%mul.10743, %mul.10744)
  %div.1869 = bf16[4096]{0} divide(%add.3185, %div.1439)
  %sqrt.76 = bf16[4096]{0} sqrt(%div.1869)
  %add.3186 = bf16[4096]{0} add(%sqrt.76, %broadcast.3914)
  %multiply.2587 = bf16[4096]{0} multiply(%div.1438, %add.3186)
  %div.1870 = bf16[4096]{0} divide(%add.3184, %multiply.2587)
  %mul.10745 = bf16[4096]{0} multiply(%param.162, %broadcast.3910)
  %add.3187 = bf16[4096]{0} add(%div.1870, %mul.10745)
  %mul.10746 = bf16[4096]{0} multiply(%mul.2424, %add.3187)
  %add.3188 = bf16[4096]{0} add(%param.162, %mul.10746)
  %div.1871 = bf16[4096]{0} divide(%all-reduce.113, %div.1436)
  %select_n.785 = bf16[4096]{0} select(%select_n.701, %all-reduce.113, %div.1871)
  %mul.10748 = bf16[4096]{0} multiply(%select_n.785, %broadcast.3910)
  %param.483 = bf16[4096]{0} parameter(401), sharding={replicated}
  %mul.10751 = bf16[4096]{0} multiply(%param.483, %broadcast.3911)
  %add.3189 = bf16[4096]{0} add(%mul.10748, %mul.10751)
  %integer_pow.76 = bf16[4096]{0} multiply(%select_n.785, %select_n.785)
  %mul.10756 = bf16[4096]{0} multiply(%integer_pow.76, %broadcast.3912)
  %param.484 = bf16[4096]{0} parameter(724), sharding={replicated}
  %mul.10757 = bf16[4096]{0} multiply(%param.484, %broadcast.3913)
  %add.3192 = bf16[4096]{0} add(%mul.10756, %mul.10757)
  %div.1874 = bf16[4096]{0} divide(%add.3192, %div.1439)
  %sqrt.77 = bf16[4096]{0} sqrt(%div.1874)
  %add.3193 = bf16[4096]{0} add(%sqrt.77, %broadcast.3914)
  %multiply.2588 = bf16[4096]{0} multiply(%div.1438, %add.3193)
  %div.1875 = bf16[4096]{0} divide(%add.3189, %multiply.2588)
  %mul.10758 = bf16[4096]{0} multiply(%param.157, %broadcast.3910)
  %add.3194 = bf16[4096]{0} add(%div.1875, %mul.10758)
  %mul.10759 = bf16[4096]{0} multiply(%mul.2424, %add.3194)
  %add.3195 = bf16[4096]{0} add(%param.157, %mul.10759)
  %div.1876 = bf16[512,8,128]{0,2,1} divide(%transpose.353, %div.1479)
  %select_n.786 = bf16[512,8,128]{2,1,0} select(%select_n.713, %transpose.353, %div.1876)
  %mul.10761 = bf16[512,8,128]{2,1,0} multiply(%select_n.786, %broadcast.3930)
  %param.485 = bf16[512,8,128]{2,1,0} parameter(402), sharding={devices=[8,1,1]<=[8]}
  %mul.10762 = bf16[512,8,128]{2,1,0} multiply(%param.485, %broadcast.3931)
  %add.3197 = bf16[512,8,128]{2,1,0} add(%mul.10761, %mul.10762)
  %integer_pow.77 = bf16[512,8,128]{2,1,0} multiply(%select_n.786, %select_n.786)
  %mul.10769 = bf16[512,8,128]{2,1,0} multiply(%integer_pow.77, %broadcast.3932)
  %param.486 = bf16[512,8,128]{2,1,0} parameter(725), sharding={devices=[8,1,1]<=[8]}
  %mul.10770 = bf16[512,8,128]{2,1,0} multiply(%param.486, %broadcast.3933)
  %add.3198 = bf16[512,8,128]{2,1,0} add(%mul.10769, %mul.10770)
  %div.1879 = bf16[512,8,128]{2,1,0} divide(%add.3198, %div.1482)
  %sqrt.78 = bf16[512,8,128]{2,1,0} sqrt(%div.1879)
  %add.3199 = bf16[512,8,128]{2,1,0} add(%sqrt.78, %broadcast.3934)
  %multiply.2589 = bf16[512,8,128]{2,1,0} multiply(%div.1481, %add.3199)
  %div.1880 = bf16[512,8,128]{2,1,0} divide(%add.3197, %multiply.2589)
  %mul.10771 = bf16[512,8,128]{2,1,0} multiply(%param.159, %broadcast.3930)
  %add.3200 = bf16[512,8,128]{2,1,0} add(%div.1880, %mul.10771)
  %mul.10772 = bf16[512,8,128]{2,1,0} multiply(%mul.9984, %add.3200)
  %add.3201 = bf16[512,8,128]{2,1,0} add(%param.159, %mul.10772)
  %div.1881 = bf16[32,128,512]{1,0,2} divide(%transpose.354, %div.1485)
  %select_n.787 = bf16[32,128,512]{2,1,0} select(%select_n.715, %transpose.354, %div.1881)
  %mul.10774 = bf16[32,128,512]{2,1,0} multiply(%select_n.787, %broadcast.3935)
  %param.487 = bf16[32,128,512]{2,1,0} parameter(403), sharding={devices=[1,1,8]<=[8]}
  %mul.10775 = bf16[32,128,512]{2,1,0} multiply(%param.487, %broadcast.3936)
  %add.3202 = bf16[32,128,512]{2,1,0} add(%mul.10774, %mul.10775)
  %integer_pow.78 = bf16[32,128,512]{2,1,0} multiply(%select_n.787, %select_n.787)
  %mul.10776 = bf16[32,128,512]{2,1,0} multiply(%integer_pow.78, %broadcast.3937)
  %param.488 = bf16[32,128,512]{2,1,0} parameter(726), sharding={devices=[1,1,8]<=[8]}
  %mul.10777 = bf16[32,128,512]{2,1,0} multiply(%param.488, %broadcast.3938)
  %add.3203 = bf16[32,128,512]{2,1,0} add(%mul.10776, %mul.10777)
  %div.1884 = bf16[32,128,512]{2,1,0} divide(%add.3203, %div.1488)
  %sqrt.79 = bf16[32,128,512]{2,1,0} sqrt(%div.1884)
  %add.3204 = bf16[32,128,512]{2,1,0} add(%sqrt.79, %broadcast.3939)
  %multiply.2590 = bf16[32,128,512]{2,1,0} multiply(%div.1487, %add.3204)
  %div.1885 = bf16[32,128,512]{2,1,0} divide(%add.3202, %multiply.2590)
  %mul.10778 = bf16[32,128,512]{2,1,0} multiply(%param.161, %broadcast.3935)
  %add.3205 = bf16[32,128,512]{2,1,0} add(%div.1885, %mul.10778)
  %mul.10779 = bf16[32,128,512]{2,1,0} multiply(%mul.9994, %add.3205)
  %add.3207 = bf16[32,128,512]{2,1,0} add(%param.161, %mul.10779)
  %div.1886 = bf16[512,32,128]{0,2,1} divide(%transpose.355, %div.1491)
  %select_n.788 = bf16[512,32,128]{2,1,0} select(%select_n.717, %transpose.355, %div.1886)
  %mul.10781 = bf16[512,32,128]{2,1,0} multiply(%select_n.788, %broadcast.3940)
  %param.489 = bf16[512,32,128]{2,1,0} parameter(404), sharding={devices=[8,1,1]<=[8]}
  %mul.10782 = bf16[512,32,128]{2,1,0} multiply(%param.489, %broadcast.3941)
  %add.3208 = bf16[512,32,128]{2,1,0} add(%mul.10781, %mul.10782)
  %integer_pow.79 = bf16[512,32,128]{2,1,0} multiply(%select_n.788, %select_n.788)
  %mul.10783 = bf16[512,32,128]{2,1,0} multiply(%integer_pow.79, %broadcast.3942)
  %param.490 = bf16[512,32,128]{2,1,0} parameter(727), sharding={devices=[8,1,1]<=[8]}
  %mul.10784 = bf16[512,32,128]{2,1,0} multiply(%param.490, %broadcast.3943)
  %add.3209 = bf16[512,32,128]{2,1,0} add(%mul.10783, %mul.10784)
  %div.1889 = bf16[512,32,128]{2,1,0} divide(%add.3209, %div.1494)
  %sqrt.80 = bf16[512,32,128]{2,1,0} sqrt(%div.1889)
  %add.3210 = bf16[512,32,128]{2,1,0} add(%sqrt.80, %broadcast.3944)
  %multiply.2591 = bf16[512,32,128]{2,1,0} multiply(%div.1493, %add.3210)
  %div.1890 = bf16[512,32,128]{2,1,0} divide(%add.3208, %multiply.2591)
  %mul.10788 = bf16[512,32,128]{2,1,0} multiply(%param.158, %broadcast.3940)
  %add.3211 = bf16[512,32,128]{2,1,0} add(%div.1890, %mul.10788)
  %mul.10792 = bf16[512,32,128]{2,1,0} multiply(%mul.10010, %add.3211)
  %add.3212 = bf16[512,32,128]{2,1,0} add(%param.158, %mul.10792)
  %div.1891 = bf16[512,8,128]{0,2,1} divide(%transpose.356, %div.1479)
  %select_n.789 = bf16[512,8,128]{2,1,0} select(%select_n.713, %transpose.356, %div.1891)
  %mul.10800 = bf16[512,8,128]{2,1,0} multiply(%select_n.789, %broadcast.3930)
  %param.491 = bf16[512,8,128]{2,1,0} parameter(405), sharding={devices=[8,1,1]<=[8]}
  %mul.10801 = bf16[512,8,128]{2,1,0} multiply(%param.491, %broadcast.3931)
  %add.3213 = bf16[512,8,128]{2,1,0} add(%mul.10800, %mul.10801)
  %integer_pow.80 = bf16[512,8,128]{2,1,0} multiply(%select_n.789, %select_n.789)
  %mul.10802 = bf16[512,8,128]{2,1,0} multiply(%integer_pow.80, %broadcast.3932)
  %param.492 = bf16[512,8,128]{2,1,0} parameter(728), sharding={devices=[8,1,1]<=[8]}
  %mul.10803 = bf16[512,8,128]{2,1,0} multiply(%param.492, %broadcast.3933)
  %add.3214 = bf16[512,8,128]{2,1,0} add(%mul.10802, %mul.10803)
  %div.1895 = bf16[512,8,128]{2,1,0} divide(%add.3214, %div.1482)
  %sqrt.81 = bf16[512,8,128]{2,1,0} sqrt(%div.1895)
  %add.3215 = bf16[512,8,128]{2,1,0} add(%sqrt.81, %broadcast.3934)
  %multiply.2592 = bf16[512,8,128]{2,1,0} multiply(%div.1481, %add.3215)
  %div.1903 = bf16[512,8,128]{2,1,0} divide(%add.3213, %multiply.2592)
  %mul.10804 = bf16[512,8,128]{2,1,0} multiply(%param.160, %broadcast.3930)
  %add.3216 = bf16[512,8,128]{2,1,0} add(%div.1903, %mul.10804)
  %mul.10805 = bf16[512,8,128]{2,1,0} multiply(%mul.9984, %add.3216)
  %add.3217 = bf16[512,8,128]{2,1,0} add(%param.160, %mul.10805)
  %div.1904 = bf16[512,8]{1,0} divide(%dynamic-slice.2261, %div.1442)
  %select_n.790 = bf16[512,8]{1,0} select(%select_n.704, %dynamic-slice.2261, %div.1904)
  %mul.10818 = bf16[512,8]{1,0} multiply(%select_n.790, %broadcast.3915)
  %param.493 = bf16[512,8]{1,0} parameter(406), sharding={devices=[8,1]<=[8]}
  %mul.10822 = bf16[512,8]{1,0} multiply(%param.493, %broadcast.3916)
  %add.3218 = bf16[512,8]{1,0} add(%mul.10818, %mul.10822)
  %integer_pow.81 = bf16[512,8]{1,0} multiply(%select_n.790, %select_n.790)
  %mul.10823 = bf16[512,8]{1,0} multiply(%integer_pow.81, %broadcast.3917)
  %param.494 = bf16[512,8]{1,0} parameter(729), sharding={devices=[8,1]<=[8]}
  %mul.10824 = bf16[512,8]{1,0} multiply(%param.494, %broadcast.3918)
  %add.3219 = bf16[512,8]{1,0} add(%mul.10823, %mul.10824)
  %div.1907 = bf16[512,8]{1,0} divide(%add.3219, %div.1446)
  %sqrt.82 = bf16[512,8]{1,0} sqrt(%div.1907)
  %add.3221 = bf16[512,8]{1,0} add(%sqrt.82, %broadcast.3919)
  %multiply.2593 = bf16[512,8]{1,0} multiply(%div.1444, %add.3221)
  %div.1908 = bf16[512,8]{1,0} divide(%add.3218, %multiply.2593)
  %mul.10825 = bf16[512,8]{1,0} multiply(%param.173, %broadcast.3915)
  %add.3222 = bf16[512,8]{1,0} add(%div.1908, %mul.10825)
  %mul.10826 = bf16[512,8]{1,0} multiply(%mul.9922, %add.3222)
  %add.3223 = bf16[512,8]{1,0} add(%param.173, %mul.10826)
  %div.1909 = bf16[1,4096,14336]{2,1,0} divide(%sharding_constraint.2485, %div.1450)
  %select_n.791 = bf16[1,4096,14336]{2,1,0} select(%select_n.706, %sharding_constraint.2485, %div.1909)
  %mul.10830 = bf16[1,4096,14336]{2,1,0} multiply(%select_n.791, %broadcast.3920)
  %param.495 = bf16[1,4096,14336]{2,1,0} parameter(407), sharding={devices=[8,1,1]<=[8]}
  %mul.10835 = bf16[1,4096,14336]{2,1,0} multiply(%param.495, %broadcast.3921)
  %add.3224 = bf16[1,4096,14336]{2,1,0} add(%mul.10830, %mul.10835)
  %integer_pow.82 = bf16[1,4096,14336]{2,1,0} multiply(%select_n.791, %select_n.791)
  %mul.10836 = bf16[1,4096,14336]{2,1,0} multiply(%integer_pow.82, %broadcast.3922)
  %param.496 = bf16[1,4096,14336]{2,1,0} parameter(730), sharding={devices=[8,1,1]<=[8]}
  %mul.10837 = bf16[1,4096,14336]{2,1,0} multiply(%param.496, %broadcast.3923)
  %add.3225 = bf16[1,4096,14336]{2,1,0} add(%mul.10836, %mul.10837)
  %div.1912 = bf16[1,4096,14336]{2,1,0} divide(%add.3225, %div.1455)
  %sqrt.83 = bf16[1,4096,14336]{2,1,0} sqrt(%div.1912)
  %add.3226 = bf16[1,4096,14336]{2,1,0} add(%sqrt.83, %broadcast.3924)
  %multiply.2594 = bf16[1,4096,14336]{2,1,0} multiply(%div.1454, %add.3226)
  %div.1913 = bf16[1,4096,14336]{2,1,0} divide(%add.3224, %multiply.2594)
  %mul.10838 = bf16[1,4096,14336]{2,1,0} multiply(%param.174, %broadcast.3920)
  %add.3227 = bf16[1,4096,14336]{2,1,0} add(%div.1913, %mul.10838)
  %mul.10839 = bf16[1,4096,14336]{2,1,0} multiply(%mul.9929, %add.3227)
  %add.3228 = bf16[1,4096,14336]{2,1,0} add(%param.174, %mul.10839)
  %div.1914 = bf16[1,4096,14336]{2,1,0} divide(%sharding_constraint.2486, %div.1450)
  %select_n.792 = bf16[1,4096,14336]{2,1,0} select(%select_n.706, %sharding_constraint.2486, %div.1914)
  %mul.10841 = bf16[1,4096,14336]{2,1,0} multiply(%select_n.792, %broadcast.3920)
  %param.497 = bf16[1,4096,14336]{2,1,0} parameter(408), sharding={devices=[8,1,1]<=[8]}
  %mul.10848 = bf16[1,4096,14336]{2,1,0} multiply(%param.497, %broadcast.3921)
  %add.3229 = bf16[1,4096,14336]{2,1,0} add(%mul.10841, %mul.10848)
  %integer_pow.83 = bf16[1,4096,14336]{2,1,0} multiply(%select_n.792, %select_n.792)
  %mul.10849 = bf16[1,4096,14336]{2,1,0} multiply(%integer_pow.83, %broadcast.3922)
  %param.498 = bf16[1,4096,14336]{2,1,0} parameter(731), sharding={devices=[8,1,1]<=[8]}
  %mul.10850 = bf16[1,4096,14336]{2,1,0} multiply(%param.498, %broadcast.3923)
  %add.3230 = bf16[1,4096,14336]{2,1,0} add(%mul.10849, %mul.10850)
  %div.1917 = bf16[1,4096,14336]{2,1,0} divide(%add.3230, %div.1455)
  %sqrt.84 = bf16[1,4096,14336]{2,1,0} sqrt(%div.1917)
  %add.3231 = bf16[1,4096,14336]{2,1,0} add(%sqrt.84, %broadcast.3924)
  %multiply.2595 = bf16[1,4096,14336]{2,1,0} multiply(%div.1454, %add.3231)
  %div.1918 = bf16[1,4096,14336]{2,1,0} divide(%add.3229, %multiply.2595)
  %mul.10851 = bf16[1,4096,14336]{2,1,0} multiply(%param.175, %broadcast.3920)
  %add.3232 = bf16[1,4096,14336]{2,1,0} add(%div.1918, %mul.10851)
  %mul.10852 = bf16[1,4096,14336]{2,1,0} multiply(%mul.9929, %add.3232)
  %add.3233 = bf16[1,4096,14336]{2,1,0} add(%param.175, %mul.10852)
  %div.1919 = bf16[1,14336,4096]{2,1,0} divide(%sharding_constraint.2487, %div.1463)
  %select_n.793 = bf16[1,14336,4096]{2,1,0} select(%select_n.709, %sharding_constraint.2487, %div.1919)
  %mul.10854 = bf16[1,14336,4096]{2,1,0} multiply(%select_n.793, %broadcast.3925)
  %param.499 = bf16[1,14336,4096]{2,1,0} parameter(409), sharding={devices=[8,1,1]<=[8]}
  %mul.10855 = bf16[1,14336,4096]{2,1,0} multiply(%param.499, %broadcast.3926)
  %add.3234 = bf16[1,14336,4096]{2,1,0} add(%mul.10854, %mul.10855)
  %integer_pow.84 = bf16[1,14336,4096]{2,1,0} multiply(%select_n.793, %select_n.793)
  %mul.10856 = bf16[1,14336,4096]{2,1,0} multiply(%integer_pow.84, %broadcast.3927)
  %param.500 = bf16[1,14336,4096]{2,1,0} parameter(732), sharding={devices=[8,1,1]<=[8]}
  %mul.10857 = bf16[1,14336,4096]{2,1,0} multiply(%param.500, %broadcast.3928)
  %add.3235 = bf16[1,14336,4096]{2,1,0} add(%mul.10856, %mul.10857)
  %div.1923 = bf16[1,14336,4096]{2,1,0} divide(%add.3235, %div.1466)
  %sqrt.85 = bf16[1,14336,4096]{2,1,0} sqrt(%div.1923)
  %add.3236 = bf16[1,14336,4096]{2,1,0} add(%sqrt.85, %broadcast.3929)
  %multiply.2596 = bf16[1,14336,4096]{2,1,0} multiply(%div.1465, %add.3236)
  %div.1924 = bf16[1,14336,4096]{2,1,0} divide(%add.3234, %multiply.2596)
  %mul.10858 = bf16[1,14336,4096]{2,1,0} multiply(%param.176, %broadcast.3925)
  %add.3237 = bf16[1,14336,4096]{2,1,0} add(%div.1924, %mul.10858)
  %mul.10859 = bf16[1,14336,4096]{2,1,0} multiply(%mul.9949, %add.3237)
  %add.3238 = bf16[1,14336,4096]{2,1,0} add(%param.176, %mul.10859)
  %div.1925 = bf16[4096]{0} divide(%all-reduce.127, %div.1436)
  %select_n.794 = bf16[4096]{0} select(%select_n.701, %all-reduce.127, %div.1925)
  %mul.10861 = bf16[4096]{0} multiply(%select_n.794, %broadcast.3910)
  %param.501 = bf16[4096]{0} parameter(410), sharding={replicated}
  %mul.10862 = bf16[4096]{0} multiply(%param.501, %broadcast.3911)
  %add.3239 = bf16[4096]{0} add(%mul.10861, %mul.10862)
  %integer_pow.85 = bf16[4096]{0} multiply(%select_n.794, %select_n.794)
  %mul.10863 = bf16[4096]{0} multiply(%integer_pow.85, %broadcast.3912)
  %param.502 = bf16[4096]{0} parameter(733), sharding={replicated}
  %mul.10864 = bf16[4096]{0} multiply(%param.502, %broadcast.3913)
  %add.3240 = bf16[4096]{0} add(%mul.10863, %mul.10864)
  %div.1928 = bf16[4096]{0} divide(%add.3240, %div.1439)
  %sqrt.86 = bf16[4096]{0} sqrt(%div.1928)
  %add.3241 = bf16[4096]{0} add(%sqrt.86, %broadcast.3914)
  %multiply.2597 = bf16[4096]{0} multiply(%div.1438, %add.3241)
  %div.1929 = bf16[4096]{0} divide(%add.3239, %multiply.2597)
  %mul.10865 = bf16[4096]{0} multiply(%param.172, %broadcast.3910)
  %add.3242 = bf16[4096]{0} add(%div.1929, %mul.10865)
  %mul.10866 = bf16[4096]{0} multiply(%mul.2424, %add.3242)
  %add.3243 = bf16[4096]{0} add(%param.172, %mul.10866)
  %div.1930 = bf16[4096]{0} divide(%all-reduce.128, %div.1436)
  %select_n.795 = bf16[4096]{0} select(%select_n.701, %all-reduce.128, %div.1930)
  %mul.10868 = bf16[4096]{0} multiply(%select_n.795, %broadcast.3910)
  %param.503 = bf16[4096]{0} parameter(411), sharding={replicated}
  %mul.10869 = bf16[4096]{0} multiply(%param.503, %broadcast.3911)
  %add.3244 = bf16[4096]{0} add(%mul.10868, %mul.10869)
  %integer_pow.86 = bf16[4096]{0} multiply(%select_n.795, %select_n.795)
  %mul.10870 = bf16[4096]{0} multiply(%integer_pow.86, %broadcast.3912)
  %param.504 = bf16[4096]{0} parameter(734), sharding={replicated}
  %mul.10871 = bf16[4096]{0} multiply(%param.504, %broadcast.3913)
  %add.3245 = bf16[4096]{0} add(%mul.10870, %mul.10871)
  %div.1933 = bf16[4096]{0} divide(%add.3245, %div.1439)
  %sqrt.87 = bf16[4096]{0} sqrt(%div.1933)
  %add.3246 = bf16[4096]{0} add(%sqrt.87, %broadcast.3914)
  %multiply.2598 = bf16[4096]{0} multiply(%div.1438, %add.3246)
  %div.1934 = bf16[4096]{0} divide(%add.3244, %multiply.2598)
  %mul.10872 = bf16[4096]{0} multiply(%param.167, %broadcast.3910)
  %add.3247 = bf16[4096]{0} add(%div.1934, %mul.10872)
  %mul.10873 = bf16[4096]{0} multiply(%mul.2424, %add.3247)
  %add.3248 = bf16[4096]{0} add(%param.167, %mul.10873)
  %div.1935 = bf16[512,8,128]{0,2,1} divide(%transpose.357, %div.1479)
  %select_n.796 = bf16[512,8,128]{2,1,0} select(%select_n.713, %transpose.357, %div.1935)
  %mul.10875 = bf16[512,8,128]{2,1,0} multiply(%select_n.796, %broadcast.3930)
  %param.505 = bf16[512,8,128]{2,1,0} parameter(412), sharding={devices=[8,1,1]<=[8]}
  %mul.10876 = bf16[512,8,128]{2,1,0} multiply(%param.505, %broadcast.3931)
  %add.3249 = bf16[512,8,128]{2,1,0} add(%mul.10875, %mul.10876)
  %integer_pow.87 = bf16[512,8,128]{2,1,0} multiply(%select_n.796, %select_n.796)
  %mul.10877 = bf16[512,8,128]{2,1,0} multiply(%integer_pow.87, %broadcast.3932)
  %param.506 = bf16[512,8,128]{2,1,0} parameter(735), sharding={devices=[8,1,1]<=[8]}
  %mul.10878 = bf16[512,8,128]{2,1,0} multiply(%param.506, %broadcast.3933)
  %add.3250 = bf16[512,8,128]{2,1,0} add(%mul.10877, %mul.10878)
  %div.1938 = bf16[512,8,128]{2,1,0} divide(%add.3250, %div.1482)
  %sqrt.88 = bf16[512,8,128]{2,1,0} sqrt(%div.1938)
  %add.3251 = bf16[512,8,128]{2,1,0} add(%sqrt.88, %broadcast.3934)
  %multiply.2599 = bf16[512,8,128]{2,1,0} multiply(%div.1481, %add.3251)
  %div.1939 = bf16[512,8,128]{2,1,0} divide(%add.3249, %multiply.2599)
  %mul.10879 = bf16[512,8,128]{2,1,0} multiply(%param.169, %broadcast.3930)
  %add.3252 = bf16[512,8,128]{2,1,0} add(%div.1939, %mul.10879)
  %mul.10880 = bf16[512,8,128]{2,1,0} multiply(%mul.9984, %add.3252)
  %add.3254 = bf16[512,8,128]{2,1,0} add(%param.169, %mul.10880)
  %div.1940 = bf16[32,128,512]{1,0,2} divide(%transpose.358, %div.1485)
  %select_n.797 = bf16[32,128,512]{2,1,0} select(%select_n.715, %transpose.358, %div.1940)
  %mul.10882 = bf16[32,128,512]{2,1,0} multiply(%select_n.797, %broadcast.3935)
  %param.507 = bf16[32,128,512]{2,1,0} parameter(413), sharding={devices=[1,1,8]<=[8]}
  %mul.10883 = bf16[32,128,512]{2,1,0} multiply(%param.507, %broadcast.3936)
  %add.3255 = bf16[32,128,512]{2,1,0} add(%mul.10882, %mul.10883)
  %integer_pow.88 = bf16[32,128,512]{2,1,0} multiply(%select_n.797, %select_n.797)
  %mul.10884 = bf16[32,128,512]{2,1,0} multiply(%integer_pow.88, %broadcast.3937)
  %param.508 = bf16[32,128,512]{2,1,0} parameter(736), sharding={devices=[1,1,8]<=[8]}
  %mul.10885 = bf16[32,128,512]{2,1,0} multiply(%param.508, %broadcast.3938)
  %add.3257 = bf16[32,128,512]{2,1,0} add(%mul.10884, %mul.10885)
  %div.1944 = bf16[32,128,512]{2,1,0} divide(%add.3257, %div.1488)
  %sqrt.89 = bf16[32,128,512]{2,1,0} sqrt(%div.1944)
  %add.3258 = bf16[32,128,512]{2,1,0} add(%sqrt.89, %broadcast.3939)
  %multiply.2600 = bf16[32,128,512]{2,1,0} multiply(%div.1487, %add.3258)
  %div.1945 = bf16[32,128,512]{2,1,0} divide(%add.3255, %multiply.2600)
  %mul.10889 = bf16[32,128,512]{2,1,0} multiply(%param.171, %broadcast.3935)
  %add.3260 = bf16[32,128,512]{2,1,0} add(%div.1945, %mul.10889)
  %mul.10892 = bf16[32,128,512]{2,1,0} multiply(%mul.9994, %add.3260)
  %add.3261 = bf16[32,128,512]{2,1,0} add(%param.171, %mul.10892)
  %div.1946 = bf16[512,32,128]{0,2,1} divide(%transpose.359, %div.1491)
  %select_n.798 = bf16[512,32,128]{2,1,0} select(%select_n.717, %transpose.359, %div.1946)
  %mul.10895 = bf16[512,32,128]{2,1,0} multiply(%select_n.798, %broadcast.3940)
  %param.509 = bf16[512,32,128]{2,1,0} parameter(414), sharding={devices=[8,1,1]<=[8]}
  %mul.10896 = bf16[512,32,128]{2,1,0} multiply(%param.509, %broadcast.3941)
  %add.3262 = bf16[512,32,128]{2,1,0} add(%mul.10895, %mul.10896)
  %integer_pow.89 = bf16[512,32,128]{2,1,0} multiply(%select_n.798, %select_n.798)
  %mul.10897 = bf16[512,32,128]{2,1,0} multiply(%integer_pow.89, %broadcast.3942)
  %param.510 = bf16[512,32,128]{2,1,0} parameter(737), sharding={devices=[8,1,1]<=[8]}
  %mul.10898 = bf16[512,32,128]{2,1,0} multiply(%param.510, %broadcast.3943)
  %add.3263 = bf16[512,32,128]{2,1,0} add(%mul.10897, %mul.10898)
  %div.1949 = bf16[512,32,128]{2,1,0} divide(%add.3263, %div.1494)
  %sqrt.90 = bf16[512,32,128]{2,1,0} sqrt(%div.1949)
  %add.3264 = bf16[512,32,128]{2,1,0} add(%sqrt.90, %broadcast.3944)
  %multiply.2601 = bf16[512,32,128]{2,1,0} multiply(%div.1493, %add.3264)
  %div.1950 = bf16[512,32,128]{2,1,0} divide(%add.3262, %multiply.2601)
  %mul.10900 = bf16[512,32,128]{2,1,0} multiply(%param.168, %broadcast.3940)
  %add.3265 = bf16[512,32,128]{2,1,0} add(%div.1950, %mul.10900)
  %mul.10903 = bf16[512,32,128]{2,1,0} multiply(%mul.10010, %add.3265)
  %add.3266 = bf16[512,32,128]{2,1,0} add(%param.168, %mul.10903)
  %div.1951 = bf16[512,8,128]{0,2,1} divide(%transpose.360, %div.1479)
  %select_n.799 = bf16[512,8,128]{2,1,0} select(%select_n.713, %transpose.360, %div.1951)
  %mul.10905 = bf16[512,8,128]{2,1,0} multiply(%select_n.799, %broadcast.3930)
  %param.511 = bf16[512,8,128]{2,1,0} parameter(415), sharding={devices=[8,1,1]<=[8]}
  %mul.10906 = bf16[512,8,128]{2,1,0} multiply(%param.511, %broadcast.3931)
  %add.3267 = bf16[512,8,128]{2,1,0} add(%mul.10905, %mul.10906)
  %integer_pow.90 = bf16[512,8,128]{2,1,0} multiply(%select_n.799, %select_n.799)
  %mul.10910 = bf16[512,8,128]{2,1,0} multiply(%integer_pow.90, %broadcast.3932)
  %param.512 = bf16[512,8,128]{2,1,0} parameter(738), sharding={devices=[8,1,1]<=[8]}
  %mul.10911 = bf16[512,8,128]{2,1,0} multiply(%param.512, %broadcast.3933)
  %add.3268 = bf16[512,8,128]{2,1,0} add(%mul.10910, %mul.10911)
  %div.1955 = bf16[512,8,128]{2,1,0} divide(%add.3268, %div.1482)
  %sqrt.91 = bf16[512,8,128]{2,1,0} sqrt(%div.1955)
  %add.3269 = bf16[512,8,128]{2,1,0} add(%sqrt.91, %broadcast.3934)
  %multiply.2602 = bf16[512,8,128]{2,1,0} multiply(%div.1481, %add.3269)
  %div.1956 = bf16[512,8,128]{2,1,0} divide(%add.3267, %multiply.2602)
  %mul.10912 = bf16[512,8,128]{2,1,0} multiply(%param.170, %broadcast.3930)
  %add.3270 = bf16[512,8,128]{2,1,0} add(%div.1956, %mul.10912)
  %mul.10923 = bf16[512,8,128]{2,1,0} multiply(%mul.9984, %add.3270)
  %add.3271 = bf16[512,8,128]{2,1,0} add(%param.170, %mul.10923)
  %div.1957 = bf16[512,8]{1,0} divide(%dynamic-slice.2271, %div.1442)
  %select_n.800 = bf16[512,8]{1,0} select(%select_n.704, %dynamic-slice.2271, %div.1957)
  %mul.10925 = bf16[512,8]{1,0} multiply(%select_n.800, %broadcast.3915)
  %param.513 = bf16[512,8]{1,0} parameter(416), sharding={devices=[8,1]<=[8]}
  %mul.10926 = bf16[512,8]{1,0} multiply(%param.513, %broadcast.3916)
  %add.3272 = bf16[512,8]{1,0} add(%mul.10925, %mul.10926)
  %integer_pow.91 = bf16[512,8]{1,0} multiply(%select_n.800, %select_n.800)
  %mul.10927 = bf16[512,8]{1,0} multiply(%integer_pow.91, %broadcast.3917)
  %param.514 = bf16[512,8]{1,0} parameter(739), sharding={devices=[8,1]<=[8]}
  %mul.10928 = bf16[512,8]{1,0} multiply(%param.514, %broadcast.3918)
  %add.3275 = bf16[512,8]{1,0} add(%mul.10927, %mul.10928)
  %div.1963 = bf16[512,8]{1,0} divide(%add.3275, %div.1446)
  %sqrt.92 = bf16[512,8]{1,0} sqrt(%div.1963)
  %add.3276 = bf16[512,8]{1,0} add(%sqrt.92, %broadcast.3919)
  %multiply.2603 = bf16[512,8]{1,0} multiply(%div.1444, %add.3276)
  %div.1964 = bf16[512,8]{1,0} divide(%add.3272, %multiply.2603)
  %mul.10929 = bf16[512,8]{1,0} multiply(%param.183, %broadcast.3915)
  %add.3277 = bf16[512,8]{1,0} add(%div.1964, %mul.10929)
  %mul.10930 = bf16[512,8]{1,0} multiply(%mul.9922, %add.3277)
  %add.3278 = bf16[512,8]{1,0} add(%param.183, %mul.10930)
  %div.1965 = bf16[1,4096,14336]{2,1,0} divide(%sharding_constraint.2488, %div.1450)
  %select_n.801 = bf16[1,4096,14336]{2,1,0} select(%select_n.706, %sharding_constraint.2488, %div.1965)
  %mul.10933 = bf16[1,4096,14336]{2,1,0} multiply(%select_n.801, %broadcast.3920)
  %param.515 = bf16[1,4096,14336]{2,1,0} parameter(417), sharding={devices=[8,1,1]<=[8]}
  %mul.10934 = bf16[1,4096,14336]{2,1,0} multiply(%param.515, %broadcast.3921)
  %add.3279 = bf16[1,4096,14336]{2,1,0} add(%mul.10933, %mul.10934)
  %integer_pow.92 = bf16[1,4096,14336]{2,1,0} multiply(%select_n.801, %select_n.801)
  %mul.10935 = bf16[1,4096,14336]{2,1,0} multiply(%integer_pow.92, %broadcast.3922)
  %param.516 = bf16[1,4096,14336]{2,1,0} parameter(740), sharding={devices=[8,1,1]<=[8]}
  %mul.10936 = bf16[1,4096,14336]{2,1,0} multiply(%param.516, %broadcast.3923)
  %add.3280 = bf16[1,4096,14336]{2,1,0} add(%mul.10935, %mul.10936)
  %div.1968 = bf16[1,4096,14336]{2,1,0} divide(%add.3280, %div.1455)
  %sqrt.93 = bf16[1,4096,14336]{2,1,0} sqrt(%div.1968)
  %add.3281 = bf16[1,4096,14336]{2,1,0} add(%sqrt.93, %broadcast.3924)
  %multiply.2604 = bf16[1,4096,14336]{2,1,0} multiply(%div.1454, %add.3281)
  %div.1969 = bf16[1,4096,14336]{2,1,0} divide(%add.3279, %multiply.2604)
  %mul.10937 = bf16[1,4096,14336]{2,1,0} multiply(%param.184, %broadcast.3920)
  %add.3282 = bf16[1,4096,14336]{2,1,0} add(%div.1969, %mul.10937)
  %mul.10938 = bf16[1,4096,14336]{2,1,0} multiply(%mul.9929, %add.3282)
  %add.3284 = bf16[1,4096,14336]{2,1,0} add(%param.184, %mul.10938)
  %div.1970 = bf16[1,4096,14336]{2,1,0} divide(%sharding_constraint.2489, %div.1450)
  %select_n.802 = bf16[1,4096,14336]{2,1,0} select(%select_n.706, %sharding_constraint.2489, %div.1970)
  %mul.10943 = bf16[1,4096,14336]{2,1,0} multiply(%select_n.802, %broadcast.3920)
  %param.517 = bf16[1,4096,14336]{2,1,0} parameter(418), sharding={devices=[8,1,1]<=[8]}
  %mul.10944 = bf16[1,4096,14336]{2,1,0} multiply(%param.517, %broadcast.3921)
  %add.3285 = bf16[1,4096,14336]{2,1,0} add(%mul.10943, %mul.10944)
  %integer_pow.93 = bf16[1,4096,14336]{2,1,0} multiply(%select_n.802, %select_n.802)
  %mul.10945 = bf16[1,4096,14336]{2,1,0} multiply(%integer_pow.93, %broadcast.3922)
  %param.518 = bf16[1,4096,14336]{2,1,0} parameter(741), sharding={devices=[8,1,1]<=[8]}
  %mul.10949 = bf16[1,4096,14336]{2,1,0} multiply(%param.518, %broadcast.3923)
  %add.3287 = bf16[1,4096,14336]{2,1,0} add(%mul.10945, %mul.10949)
  %div.1973 = bf16[1,4096,14336]{2,1,0} divide(%add.3287, %div.1455)
  %sqrt.94 = bf16[1,4096,14336]{2,1,0} sqrt(%div.1973)
  %add.3288 = bf16[1,4096,14336]{2,1,0} add(%sqrt.94, %broadcast.3924)
  %multiply.2605 = bf16[1,4096,14336]{2,1,0} multiply(%div.1454, %add.3288)
  %div.1974 = bf16[1,4096,14336]{2,1,0} divide(%add.3285, %multiply.2605)
  %mul.10958 = bf16[1,4096,14336]{2,1,0} multiply(%param.185, %broadcast.3920)
  %add.3289 = bf16[1,4096,14336]{2,1,0} add(%div.1974, %mul.10958)
  %mul.10959 = bf16[1,4096,14336]{2,1,0} multiply(%mul.9929, %add.3289)
  %add.3290 = bf16[1,4096,14336]{2,1,0} add(%param.185, %mul.10959)
  %div.1975 = bf16[1,14336,4096]{2,1,0} divide(%sharding_constraint.2490, %div.1463)
  %select_n.803 = bf16[1,14336,4096]{2,1,0} select(%select_n.709, %sharding_constraint.2490, %div.1975)
  %mul.10965 = bf16[1,14336,4096]{2,1,0} multiply(%select_n.803, %broadcast.3925)
  %param.519 = bf16[1,14336,4096]{2,1,0} parameter(419), sharding={devices=[8,1,1]<=[8]}
  %mul.10966 = bf16[1,14336,4096]{2,1,0} multiply(%param.519, %broadcast.3926)
  %add.3291 = bf16[1,14336,4096]{2,1,0} add(%mul.10965, %mul.10966)
  %integer_pow.94 = bf16[1,14336,4096]{2,1,0} multiply(%select_n.803, %select_n.803)
  %mul.10967 = bf16[1,14336,4096]{2,1,0} multiply(%integer_pow.94, %broadcast.3927)
  %param.520 = bf16[1,14336,4096]{2,1,0} parameter(742), sharding={devices=[8,1,1]<=[8]}
  %mul.10968 = bf16[1,14336,4096]{2,1,0} multiply(%param.520, %broadcast.3928)
  %add.3292 = bf16[1,14336,4096]{2,1,0} add(%mul.10967, %mul.10968)
  %div.1978 = bf16[1,14336,4096]{2,1,0} divide(%add.3292, %div.1466)
  %sqrt.95 = bf16[1,14336,4096]{2,1,0} sqrt(%div.1978)
  %add.3293 = bf16[1,14336,4096]{2,1,0} add(%sqrt.95, %broadcast.3929)
  %multiply.2606 = bf16[1,14336,4096]{2,1,0} multiply(%div.1465, %add.3293)
  %div.1979 = bf16[1,14336,4096]{2,1,0} divide(%add.3291, %multiply.2606)
  %mul.10969 = bf16[1,14336,4096]{2,1,0} multiply(%param.186, %broadcast.3925)
  %add.3294 = bf16[1,14336,4096]{2,1,0} add(%div.1979, %mul.10969)
  %mul.10970 = bf16[1,14336,4096]{2,1,0} multiply(%mul.9949, %add.3294)
  %add.3295 = bf16[1,14336,4096]{2,1,0} add(%param.186, %mul.10970)
  %div.1980 = bf16[4096]{0} divide(%all-reduce.142, %div.1436)
  %select_n.804 = bf16[4096]{0} select(%select_n.701, %all-reduce.142, %div.1980)
  %mul.10972 = bf16[4096]{0} multiply(%select_n.804, %broadcast.3910)
  %param.521 = bf16[4096]{0} parameter(420), sharding={replicated}
  %mul.10973 = bf16[4096]{0} multiply(%param.521, %broadcast.3911)
  %add.3296 = bf16[4096]{0} add(%mul.10972, %mul.10973)
  %integer_pow.95 = bf16[4096]{0} multiply(%select_n.804, %select_n.804)
  %mul.10974 = bf16[4096]{0} multiply(%integer_pow.95, %broadcast.3912)
  %param.522 = bf16[4096]{0} parameter(743), sharding={replicated}
  %mul.10975 = bf16[4096]{0} multiply(%param.522, %broadcast.3913)
  %add.3298 = bf16[4096]{0} add(%mul.10974, %mul.10975)
  %div.1983 = bf16[4096]{0} divide(%add.3298, %div.1439)
  %sqrt.96 = bf16[4096]{0} sqrt(%div.1983)
  %add.3299 = bf16[4096]{0} add(%sqrt.96, %broadcast.3914)
  %multiply.2607 = bf16[4096]{0} multiply(%div.1438, %add.3299)
  %div.1984 = bf16[4096]{0} divide(%add.3296, %multiply.2607)
  %mul.10976 = bf16[4096]{0} multiply(%param.182, %broadcast.3910)
  %add.3300 = bf16[4096]{0} add(%div.1984, %mul.10976)
  %mul.10977 = bf16[4096]{0} multiply(%mul.2424, %add.3300)
  %add.3301 = bf16[4096]{0} add(%param.182, %mul.10977)
  %div.1985 = bf16[4096]{0} divide(%all-reduce.143, %div.1436)
  %select_n.805 = bf16[4096]{0} select(%select_n.701, %all-reduce.143, %div.1985)
  %mul.10979 = bf16[4096]{0} multiply(%select_n.805, %broadcast.3910)
  %param.523 = bf16[4096]{0} parameter(421), sharding={replicated}
  %mul.10980 = bf16[4096]{0} multiply(%param.523, %broadcast.3911)
  %add.3302 = bf16[4096]{0} add(%mul.10979, %mul.10980)
  %integer_pow.96 = bf16[4096]{0} multiply(%select_n.805, %select_n.805)
  %mul.10981 = bf16[4096]{0} multiply(%integer_pow.96, %broadcast.3912)
  %param.524 = bf16[4096]{0} parameter(744), sharding={replicated}
  %mul.10982 = bf16[4096]{0} multiply(%param.524, %broadcast.3913)
  %add.3303 = bf16[4096]{0} add(%mul.10981, %mul.10982)
  %div.1990 = bf16[4096]{0} divide(%add.3303, %div.1439)
  %sqrt.97 = bf16[4096]{0} sqrt(%div.1990)
  %add.3304 = bf16[4096]{0} add(%sqrt.97, %broadcast.3914)
  %multiply.2608 = bf16[4096]{0} multiply(%div.1438, %add.3304)
  %div.1992 = bf16[4096]{0} divide(%add.3302, %multiply.2608)
  %mul.10983 = bf16[4096]{0} multiply(%param.177, %broadcast.3910)
  %add.3305 = bf16[4096]{0} add(%div.1992, %mul.10983)
  %mul.10984 = bf16[4096]{0} multiply(%mul.2424, %add.3305)
  %add.3306 = bf16[4096]{0} add(%param.177, %mul.10984)
  %div.1995 = bf16[512,8,128]{0,2,1} divide(%transpose.361, %div.1479)
  %select_n.806 = bf16[512,8,128]{2,1,0} select(%select_n.713, %transpose.361, %div.1995)
  %mul.10986 = bf16[512,8,128]{2,1,0} multiply(%select_n.806, %broadcast.3930)
  %param.525 = bf16[512,8,128]{2,1,0} parameter(422), sharding={devices=[8,1,1]<=[8]}
  %mul.10987 = bf16[512,8,128]{2,1,0} multiply(%param.525, %broadcast.3931)
  %add.3307 = bf16[512,8,128]{2,1,0} add(%mul.10986, %mul.10987)
  %integer_pow.97 = bf16[512,8,128]{2,1,0} multiply(%select_n.806, %select_n.806)
  %mul.10988 = bf16[512,8,128]{2,1,0} multiply(%integer_pow.97, %broadcast.3932)
  %param.526 = bf16[512,8,128]{2,1,0} parameter(745), sharding={devices=[8,1,1]<=[8]}
  %mul.10989 = bf16[512,8,128]{2,1,0} multiply(%param.526, %broadcast.3933)
  %add.3308 = bf16[512,8,128]{2,1,0} add(%mul.10988, %mul.10989)
  %div.1998 = bf16[512,8,128]{2,1,0} divide(%add.3308, %div.1482)
  %sqrt.98 = bf16[512,8,128]{2,1,0} sqrt(%div.1998)
  %add.3309 = bf16[512,8,128]{2,1,0} add(%sqrt.98, %broadcast.3934)
  %multiply.2609 = bf16[512,8,128]{2,1,0} multiply(%div.1481, %add.3309)
  %div.1999 = bf16[512,8,128]{2,1,0} divide(%add.3307, %multiply.2609)
  %mul.10990 = bf16[512,8,128]{2,1,0} multiply(%param.179, %broadcast.3930)
  %add.3310 = bf16[512,8,128]{2,1,0} add(%div.1999, %mul.10990)
  %mul.10991 = bf16[512,8,128]{2,1,0} multiply(%mul.9984, %add.3310)
  %add.3311 = bf16[512,8,128]{2,1,0} add(%param.179, %mul.10991)
  %div.2000 = bf16[32,128,512]{1,0,2} divide(%transpose.362, %div.1485)
  %select_n.807 = bf16[32,128,512]{2,1,0} select(%select_n.715, %transpose.362, %div.2000)
  %mul.10993 = bf16[32,128,512]{2,1,0} multiply(%select_n.807, %broadcast.3935)
  %param.527 = bf16[32,128,512]{2,1,0} parameter(423), sharding={devices=[1,1,8]<=[8]}
  %mul.10994 = bf16[32,128,512]{2,1,0} multiply(%param.527, %broadcast.3936)
  %add.3312 = bf16[32,128,512]{2,1,0} add(%mul.10993, %mul.10994)
  %integer_pow.98 = bf16[32,128,512]{2,1,0} multiply(%select_n.807, %select_n.807)
  %mul.10995 = bf16[32,128,512]{2,1,0} multiply(%integer_pow.98, %broadcast.3937)
  %param.528 = bf16[32,128,512]{2,1,0} parameter(746), sharding={devices=[1,1,8]<=[8]}
  %mul.10996 = bf16[32,128,512]{2,1,0} multiply(%param.528, %broadcast.3938)
  %add.3313 = bf16[32,128,512]{2,1,0} add(%mul.10995, %mul.10996)
  %div.2003 = bf16[32,128,512]{2,1,0} divide(%add.3313, %div.1488)
  %sqrt.99 = bf16[32,128,512]{2,1,0} sqrt(%div.2003)
  %add.3314 = bf16[32,128,512]{2,1,0} add(%sqrt.99, %broadcast.3939)
  %multiply.2610 = bf16[32,128,512]{2,1,0} multiply(%div.1487, %add.3314)
  %div.2004 = bf16[32,128,512]{2,1,0} divide(%add.3312, %multiply.2610)
  %mul.10997 = bf16[32,128,512]{2,1,0} multiply(%param.181, %broadcast.3935)
  %add.3315 = bf16[32,128,512]{2,1,0} add(%div.2004, %mul.10997)
  %mul.10998 = bf16[32,128,512]{2,1,0} multiply(%mul.9994, %add.3315)
  %add.3316 = bf16[32,128,512]{2,1,0} add(%param.181, %mul.10998)
  %div.2005 = bf16[512,32,128]{0,2,1} divide(%transpose.363, %div.1491)
  %select_n.808 = bf16[512,32,128]{2,1,0} select(%select_n.717, %transpose.363, %div.2005)
  %mul.11000 = bf16[512,32,128]{2,1,0} multiply(%select_n.808, %broadcast.3940)
  %param.529 = bf16[512,32,128]{2,1,0} parameter(424), sharding={devices=[8,1,1]<=[8]}
  %mul.11001 = bf16[512,32,128]{2,1,0} multiply(%param.529, %broadcast.3941)
  %add.3317 = bf16[512,32,128]{2,1,0} add(%mul.11000, %mul.11001)
  %integer_pow.99 = bf16[512,32,128]{2,1,0} multiply(%select_n.808, %select_n.808)
  %mul.11002 = bf16[512,32,128]{2,1,0} multiply(%integer_pow.99, %broadcast.3942)
  %param.530 = bf16[512,32,128]{2,1,0} parameter(747), sharding={devices=[8,1,1]<=[8]}
  %mul.11004 = bf16[512,32,128]{2,1,0} multiply(%param.530, %broadcast.3943)
  %add.3318 = bf16[512,32,128]{2,1,0} add(%mul.11002, %mul.11004)
  %div.2008 = bf16[512,32,128]{2,1,0} divide(%add.3318, %div.1494)
  %sqrt.100 = bf16[512,32,128]{2,1,0} sqrt(%div.2008)
  %add.3319 = bf16[512,32,128]{2,1,0} add(%sqrt.100, %broadcast.3944)
  %multiply.2611 = bf16[512,32,128]{2,1,0} multiply(%div.1493, %add.3319)
  %div.2009 = bf16[512,32,128]{2,1,0} divide(%add.3317, %multiply.2611)
  %mul.11005 = bf16[512,32,128]{2,1,0} multiply(%param.178, %broadcast.3940)
  %add.3320 = bf16[512,32,128]{2,1,0} add(%div.2009, %mul.11005)
  %mul.11006 = bf16[512,32,128]{2,1,0} multiply(%mul.10010, %add.3320)
  %add.3321 = bf16[512,32,128]{2,1,0} add(%param.178, %mul.11006)
  %div.2010 = bf16[512,8,128]{0,2,1} divide(%transpose.364, %div.1479)
  %select_n.809 = bf16[512,8,128]{2,1,0} select(%select_n.713, %transpose.364, %div.2010)
  %mul.11008 = bf16[512,8,128]{2,1,0} multiply(%select_n.809, %broadcast.3930)
  %param.531 = bf16[512,8,128]{2,1,0} parameter(425), sharding={devices=[8,1,1]<=[8]}
  %mul.11009 = bf16[512,8,128]{2,1,0} multiply(%param.531, %broadcast.3931)
  %add.3322 = bf16[512,8,128]{2,1,0} add(%mul.11008, %mul.11009)
  %integer_pow.100 = bf16[512,8,128]{2,1,0} multiply(%select_n.809, %select_n.809)
  %mul.11010 = bf16[512,8,128]{2,1,0} multiply(%integer_pow.100, %broadcast.3932)
  %param.532 = bf16[512,8,128]{2,1,0} parameter(748), sharding={devices=[8,1,1]<=[8]}
  %mul.11011 = bf16[512,8,128]{2,1,0} multiply(%param.532, %broadcast.3933)
  %add.3323 = bf16[512,8,128]{2,1,0} add(%mul.11010, %mul.11011)
  %div.2013 = bf16[512,8,128]{2,1,0} divide(%add.3323, %div.1482)
  %sqrt.101 = bf16[512,8,128]{2,1,0} sqrt(%div.2013)
  %add.3324 = bf16[512,8,128]{2,1,0} add(%sqrt.101, %broadcast.3934)
  %multiply.2612 = bf16[512,8,128]{2,1,0} multiply(%div.1481, %add.3324)
  %div.2014 = bf16[512,8,128]{2,1,0} divide(%add.3322, %multiply.2612)
  %mul.11015 = bf16[512,8,128]{2,1,0} multiply(%param.180, %broadcast.3930)
  %add.3325 = bf16[512,8,128]{2,1,0} add(%div.2014, %mul.11015)
  %mul.11018 = bf16[512,8,128]{2,1,0} multiply(%mul.9984, %add.3325)
  %add.3326 = bf16[512,8,128]{2,1,0} add(%param.180, %mul.11018)
  %div.2015 = bf16[512,8]{1,0} divide(%dynamic-slice.2281, %div.1442)
  %select_n.810 = bf16[512,8]{1,0} select(%select_n.704, %dynamic-slice.2281, %div.2015)
  %mul.11021 = bf16[512,8]{1,0} multiply(%select_n.810, %broadcast.3915)
  %param.533 = bf16[512,8]{1,0} parameter(426), sharding={devices=[8,1]<=[8]}
  %mul.11022 = bf16[512,8]{1,0} multiply(%param.533, %broadcast.3916)
  %add.3327 = bf16[512,8]{1,0} add(%mul.11021, %mul.11022)
  %integer_pow.101 = bf16[512,8]{1,0} multiply(%select_n.810, %select_n.810)
  %mul.11023 = bf16[512,8]{1,0} multiply(%integer_pow.101, %broadcast.3917)
  %param.534 = bf16[512,8]{1,0} parameter(749), sharding={devices=[8,1]<=[8]}
  %mul.11024 = bf16[512,8]{1,0} multiply(%param.534, %broadcast.3918)
  %add.3328 = bf16[512,8]{1,0} add(%mul.11023, %mul.11024)
  %div.2018 = bf16[512,8]{1,0} divide(%add.3328, %div.1446)
  %sqrt.102 = bf16[512,8]{1,0} sqrt(%div.2018)
  %add.3329 = bf16[512,8]{1,0} add(%sqrt.102, %broadcast.3919)
  %multiply.2613 = bf16[512,8]{1,0} multiply(%div.1444, %add.3329)
  %div.2019 = bf16[512,8]{1,0} divide(%add.3327, %multiply.2613)
  %mul.11025 = bf16[512,8]{1,0} multiply(%param.193, %broadcast.3915)
  %add.3330 = bf16[512,8]{1,0} add(%div.2019, %mul.11025)
  %mul.11026 = bf16[512,8]{1,0} multiply(%mul.9922, %add.3330)
  %add.3331 = bf16[512,8]{1,0} add(%param.193, %mul.11026)
  %div.2020 = bf16[1,4096,14336]{2,1,0} divide(%sharding_constraint.2493, %div.1450)
  %select_n.811 = bf16[1,4096,14336]{2,1,0} select(%select_n.706, %sharding_constraint.2493, %div.2020)
  %mul.11028 = bf16[1,4096,14336]{2,1,0} multiply(%select_n.811, %broadcast.3920)
  %param.535 = bf16[1,4096,14336]{2,1,0} parameter(427), sharding={devices=[8,1,1]<=[8]}
  %mul.11029 = bf16[1,4096,14336]{2,1,0} multiply(%param.535, %broadcast.3921)
  %add.3332 = bf16[1,4096,14336]{2,1,0} add(%mul.11028, %mul.11029)
  %integer_pow.102 = bf16[1,4096,14336]{2,1,0} multiply(%select_n.811, %select_n.811)
  %mul.11030 = bf16[1,4096,14336]{2,1,0} multiply(%integer_pow.102, %broadcast.3922)
  %param.536 = bf16[1,4096,14336]{2,1,0} parameter(750), sharding={devices=[8,1,1]<=[8]}
  %mul.11031 = bf16[1,4096,14336]{2,1,0} multiply(%param.536, %broadcast.3923)
  %add.3333 = bf16[1,4096,14336]{2,1,0} add(%mul.11030, %mul.11031)
  %div.2023 = bf16[1,4096,14336]{2,1,0} divide(%add.3333, %div.1455)
  %sqrt.103 = bf16[1,4096,14336]{2,1,0} sqrt(%div.2023)
  %add.3334 = bf16[1,4096,14336]{2,1,0} add(%sqrt.103, %broadcast.3924)
  %multiply.2614 = bf16[1,4096,14336]{2,1,0} multiply(%div.1454, %add.3334)
  %div.2024 = bf16[1,4096,14336]{2,1,0} divide(%add.3332, %multiply.2614)
  %mul.11032 = bf16[1,4096,14336]{2,1,0} multiply(%param.194, %broadcast.3920)
  %add.3336 = bf16[1,4096,14336]{2,1,0} add(%div.2024, %mul.11032)
  %mul.11033 = bf16[1,4096,14336]{2,1,0} multiply(%mul.9929, %add.3336)
  %add.3337 = bf16[1,4096,14336]{2,1,0} add(%param.194, %mul.11033)
  %div.2025 = bf16[1,4096,14336]{2,1,0} divide(%sharding_constraint.2494, %div.1450)
  %select_n.812 = bf16[1,4096,14336]{2,1,0} select(%select_n.706, %sharding_constraint.2494, %div.2025)
  %mul.11035 = bf16[1,4096,14336]{2,1,0} multiply(%select_n.812, %broadcast.3920)
  %param.537 = bf16[1,4096,14336]{2,1,0} parameter(428), sharding={devices=[8,1,1]<=[8]}
  %mul.11036 = bf16[1,4096,14336]{2,1,0} multiply(%param.537, %broadcast.3921)
  %add.3339 = bf16[1,4096,14336]{2,1,0} add(%mul.11035, %mul.11036)
  %integer_pow.103 = bf16[1,4096,14336]{2,1,0} multiply(%select_n.812, %select_n.812)
  %mul.11038 = bf16[1,4096,14336]{2,1,0} multiply(%integer_pow.103, %broadcast.3922)
  %param.538 = bf16[1,4096,14336]{2,1,0} parameter(751), sharding={devices=[8,1,1]<=[8]}
  %mul.11040 = bf16[1,4096,14336]{2,1,0} multiply(%param.538, %broadcast.3923)
  %add.3340 = bf16[1,4096,14336]{2,1,0} add(%mul.11038, %mul.11040)
  %div.2032 = bf16[1,4096,14336]{2,1,0} divide(%add.3340, %div.1455)
  %sqrt.104 = bf16[1,4096,14336]{2,1,0} sqrt(%div.2032)
  %add.3341 = bf16[1,4096,14336]{2,1,0} add(%sqrt.104, %broadcast.3924)
  %multiply.2615 = bf16[1,4096,14336]{2,1,0} multiply(%div.1454, %add.3341)
  %div.2033 = bf16[1,4096,14336]{2,1,0} divide(%add.3339, %multiply.2615)
  %mul.11041 = bf16[1,4096,14336]{2,1,0} multiply(%param.195, %broadcast.3920)
  %add.3342 = bf16[1,4096,14336]{2,1,0} add(%div.2033, %mul.11041)
  %mul.11046 = bf16[1,4096,14336]{2,1,0} multiply(%mul.9929, %add.3342)
  %add.3343 = bf16[1,4096,14336]{2,1,0} add(%param.195, %mul.11046)
  %div.2034 = bf16[1,14336,4096]{2,1,0} divide(%sharding_constraint.2495, %div.1463)
  %select_n.813 = bf16[1,14336,4096]{2,1,0} select(%select_n.709, %sharding_constraint.2495, %div.2034)
  %mul.11048 = bf16[1,14336,4096]{2,1,0} multiply(%select_n.813, %broadcast.3925)
  %param.539 = bf16[1,14336,4096]{2,1,0} parameter(429), sharding={devices=[8,1,1]<=[8]}
  %mul.11049 = bf16[1,14336,4096]{2,1,0} multiply(%param.539, %broadcast.3926)
  %add.3344 = bf16[1,14336,4096]{2,1,0} add(%mul.11048, %mul.11049)
  %integer_pow.104 = bf16[1,14336,4096]{2,1,0} multiply(%select_n.813, %select_n.813)
  %mul.11050 = bf16[1,14336,4096]{2,1,0} multiply(%integer_pow.104, %broadcast.3927)
  %param.540 = bf16[1,14336,4096]{2,1,0} parameter(752), sharding={devices=[8,1,1]<=[8]}
  %mul.11051 = bf16[1,14336,4096]{2,1,0} multiply(%param.540, %broadcast.3928)
  %add.3345 = bf16[1,14336,4096]{2,1,0} add(%mul.11050, %mul.11051)
  %div.2037 = bf16[1,14336,4096]{2,1,0} divide(%add.3345, %div.1466)
  %sqrt.105 = bf16[1,14336,4096]{2,1,0} sqrt(%div.2037)
  %add.3346 = bf16[1,14336,4096]{2,1,0} add(%sqrt.105, %broadcast.3929)
  %multiply.2616 = bf16[1,14336,4096]{2,1,0} multiply(%div.1465, %add.3346)
  %div.2038 = bf16[1,14336,4096]{2,1,0} divide(%add.3344, %multiply.2616)
  %mul.11056 = bf16[1,14336,4096]{2,1,0} multiply(%param.196, %broadcast.3925)
  %add.3347 = bf16[1,14336,4096]{2,1,0} add(%div.2038, %mul.11056)
  %mul.11057 = bf16[1,14336,4096]{2,1,0} multiply(%mul.9949, %add.3347)
  %add.3348 = bf16[1,14336,4096]{2,1,0} add(%param.196, %mul.11057)
  %div.2039 = bf16[4096]{0} divide(%all-reduce.157, %div.1436)
  %select_n.814 = bf16[4096]{0} select(%select_n.701, %all-reduce.157, %div.2039)
  %mul.11059 = bf16[4096]{0} multiply(%select_n.814, %broadcast.3910)
  %param.541 = bf16[4096]{0} parameter(430), sharding={replicated}
  %mul.11060 = bf16[4096]{0} multiply(%param.541, %broadcast.3911)
  %add.3349 = bf16[4096]{0} add(%mul.11059, %mul.11060)
  %integer_pow.105 = bf16[4096]{0} multiply(%select_n.814, %select_n.814)
  %mul.11062 = bf16[4096]{0} multiply(%integer_pow.105, %broadcast.3912)
  %param.542 = bf16[4096]{0} parameter(753), sharding={replicated}
  %mul.11063 = bf16[4096]{0} multiply(%param.542, %broadcast.3913)
  %add.3351 = bf16[4096]{0} add(%mul.11062, %mul.11063)
  %div.2042 = bf16[4096]{0} divide(%add.3351, %div.1439)
  %sqrt.106 = bf16[4096]{0} sqrt(%div.2042)
  %add.3352 = bf16[4096]{0} add(%sqrt.106, %broadcast.3914)
  %multiply.2617 = bf16[4096]{0} multiply(%div.1438, %add.3352)
  %div.2043 = bf16[4096]{0} divide(%add.3349, %multiply.2617)
  %mul.11064 = bf16[4096]{0} multiply(%param.192, %broadcast.3910)
  %add.3353 = bf16[4096]{0} add(%div.2043, %mul.11064)
  %mul.11065 = bf16[4096]{0} multiply(%mul.2424, %add.3353)
  %add.3354 = bf16[4096]{0} add(%param.192, %mul.11065)
  %div.2044 = bf16[4096]{0} divide(%all-reduce.158, %div.1436)
  %select_n.815 = bf16[4096]{0} select(%select_n.701, %all-reduce.158, %div.2044)
  %mul.11067 = bf16[4096]{0} multiply(%select_n.815, %broadcast.3910)
  %param.543 = bf16[4096]{0} parameter(431), sharding={replicated}
  %mul.11072 = bf16[4096]{0} multiply(%param.543, %broadcast.3911)
  %add.3355 = bf16[4096]{0} add(%mul.11067, %mul.11072)
  %integer_pow.106 = bf16[4096]{0} multiply(%select_n.815, %select_n.815)
  %mul.11073 = bf16[4096]{0} multiply(%integer_pow.106, %broadcast.3912)
  %param.544 = bf16[4096]{0} parameter(754), sharding={replicated}
  %mul.11074 = bf16[4096]{0} multiply(%param.544, %broadcast.3913)
  %add.3356 = bf16[4096]{0} add(%mul.11073, %mul.11074)
  %div.2047 = bf16[4096]{0} divide(%add.3356, %div.1439)
  %sqrt.107 = bf16[4096]{0} sqrt(%div.2047)
  %add.3357 = bf16[4096]{0} add(%sqrt.107, %broadcast.3914)
  %multiply.2618 = bf16[4096]{0} multiply(%div.1438, %add.3357)
  %div.2048 = bf16[4096]{0} divide(%add.3355, %multiply.2618)
  %mul.11075 = bf16[4096]{0} multiply(%param.187, %broadcast.3910)
  %add.3358 = bf16[4096]{0} add(%div.2048, %mul.11075)
  %mul.11076 = bf16[4096]{0} multiply(%mul.2424, %add.3358)
  %add.3359 = bf16[4096]{0} add(%param.187, %mul.11076)
  %div.2049 = bf16[512,8,128]{0,2,1} divide(%transpose.365, %div.1479)
  %select_n.816 = bf16[512,8,128]{2,1,0} select(%select_n.713, %transpose.365, %div.2049)
  %mul.11079 = bf16[512,8,128]{2,1,0} multiply(%select_n.816, %broadcast.3930)
  %param.545 = bf16[512,8,128]{2,1,0} parameter(432), sharding={devices=[8,1,1]<=[8]}
  %mul.11080 = bf16[512,8,128]{2,1,0} multiply(%param.545, %broadcast.3931)
  %add.3360 = bf16[512,8,128]{2,1,0} add(%mul.11079, %mul.11080)
  %integer_pow.107 = bf16[512,8,128]{2,1,0} multiply(%select_n.816, %select_n.816)
  %mul.11081 = bf16[512,8,128]{2,1,0} multiply(%integer_pow.107, %broadcast.3932)
  %param.546 = bf16[512,8,128]{2,1,0} parameter(755), sharding={devices=[8,1,1]<=[8]}
  %mul.11082 = bf16[512,8,128]{2,1,0} multiply(%param.546, %broadcast.3933)
  %add.3361 = bf16[512,8,128]{2,1,0} add(%mul.11081, %mul.11082)
  %div.2052 = bf16[512,8,128]{2,1,0} divide(%add.3361, %div.1482)
  %sqrt.108 = bf16[512,8,128]{2,1,0} sqrt(%div.2052)
  %add.3362 = bf16[512,8,128]{2,1,0} add(%sqrt.108, %broadcast.3934)
  %multiply.2619 = bf16[512,8,128]{2,1,0} multiply(%div.1481, %add.3362)
  %div.2053 = bf16[512,8,128]{2,1,0} divide(%add.3360, %multiply.2619)
  %mul.11083 = bf16[512,8,128]{2,1,0} multiply(%param.189, %broadcast.3930)
  %add.3363 = bf16[512,8,128]{2,1,0} add(%div.2053, %mul.11083)
  %mul.11084 = bf16[512,8,128]{2,1,0} multiply(%mul.9984, %add.3363)
  %add.3364 = bf16[512,8,128]{2,1,0} add(%param.189, %mul.11084)
  %div.2054 = bf16[32,128,512]{1,0,2} divide(%transpose.366, %div.1485)
  %select_n.817 = bf16[32,128,512]{2,1,0} select(%select_n.715, %transpose.366, %div.2054)
  %mul.11091 = bf16[32,128,512]{2,1,0} multiply(%select_n.817, %broadcast.3935)
  %param.547 = bf16[32,128,512]{2,1,0} parameter(433), sharding={devices=[1,1,8]<=[8]}
  %mul.11092 = bf16[32,128,512]{2,1,0} multiply(%param.547, %broadcast.3936)
  %add.3365 = bf16[32,128,512]{2,1,0} add(%mul.11091, %mul.11092)
  %integer_pow.108 = bf16[32,128,512]{2,1,0} multiply(%select_n.817, %select_n.817)
  %mul.11093 = bf16[32,128,512]{2,1,0} multiply(%integer_pow.108, %broadcast.3937)
  %param.548 = bf16[32,128,512]{2,1,0} parameter(756), sharding={devices=[1,1,8]<=[8]}
  %mul.11094 = bf16[32,128,512]{2,1,0} multiply(%param.548, %broadcast.3938)
  %add.3366 = bf16[32,128,512]{2,1,0} add(%mul.11093, %mul.11094)
  %div.2057 = bf16[32,128,512]{2,1,0} divide(%add.3366, %div.1488)
  %sqrt.109 = bf16[32,128,512]{2,1,0} sqrt(%div.2057)
  %add.3367 = bf16[32,128,512]{2,1,0} add(%sqrt.109, %broadcast.3939)
  %multiply.2620 = bf16[32,128,512]{2,1,0} multiply(%div.1487, %add.3367)
  %div.2058 = bf16[32,128,512]{2,1,0} divide(%add.3365, %multiply.2620)
  %mul.11095 = bf16[32,128,512]{2,1,0} multiply(%param.191, %broadcast.3935)
  %add.3369 = bf16[32,128,512]{2,1,0} add(%div.2058, %mul.11095)
  %mul.11096 = bf16[32,128,512]{2,1,0} multiply(%mul.9994, %add.3369)
  %add.3370 = bf16[32,128,512]{2,1,0} add(%param.191, %mul.11096)
  %div.2059 = bf16[512,32,128]{0,2,1} divide(%transpose.367, %div.1491)
  %select_n.818 = bf16[512,32,128]{2,1,0} select(%select_n.717, %transpose.367, %div.2059)
  %mul.11099 = bf16[512,32,128]{2,1,0} multiply(%select_n.818, %broadcast.3940)
  %param.549 = bf16[512,32,128]{2,1,0} parameter(434), sharding={devices=[8,1,1]<=[8]}
  %mul.11100 = bf16[512,32,128]{2,1,0} multiply(%param.549, %broadcast.3941)
  %add.3371 = bf16[512,32,128]{2,1,0} add(%mul.11099, %mul.11100)
  %integer_pow.109 = bf16[512,32,128]{2,1,0} multiply(%select_n.818, %select_n.818)
  %mul.11101 = bf16[512,32,128]{2,1,0} multiply(%integer_pow.109, %broadcast.3942)
  %param.550 = bf16[512,32,128]{2,1,0} parameter(757), sharding={devices=[8,1,1]<=[8]}
  %mul.11102 = bf16[512,32,128]{2,1,0} multiply(%param.550, %broadcast.3943)
  %add.3372 = bf16[512,32,128]{2,1,0} add(%mul.11101, %mul.11102)
  %div.2062 = bf16[512,32,128]{2,1,0} divide(%add.3372, %div.1494)
  %sqrt.110 = bf16[512,32,128]{2,1,0} sqrt(%div.2062)
  %add.3373 = bf16[512,32,128]{2,1,0} add(%sqrt.110, %broadcast.3944)
  %multiply.2621 = bf16[512,32,128]{2,1,0} multiply(%div.1493, %add.3373)
  %div.2063 = bf16[512,32,128]{2,1,0} divide(%add.3371, %multiply.2621)
  %mul.11103 = bf16[512,32,128]{2,1,0} multiply(%param.188, %broadcast.3940)
  %add.3374 = bf16[512,32,128]{2,1,0} add(%div.2063, %mul.11103)
  %mul.11104 = bf16[512,32,128]{2,1,0} multiply(%mul.10010, %add.3374)
  %add.3375 = bf16[512,32,128]{2,1,0} add(%param.188, %mul.11104)
  %div.2064 = bf16[512,8,128]{0,2,1} divide(%transpose.368, %div.1479)
  %select_n.819 = bf16[512,8,128]{2,1,0} select(%select_n.713, %transpose.368, %div.2064)
  %mul.11106 = bf16[512,8,128]{2,1,0} multiply(%select_n.819, %broadcast.3930)
  %param.551 = bf16[512,8,128]{2,1,0} parameter(435), sharding={devices=[8,1,1]<=[8]}
  %mul.11108 = bf16[512,8,128]{2,1,0} multiply(%param.551, %broadcast.3931)
  %add.3376 = bf16[512,8,128]{2,1,0} add(%mul.11106, %mul.11108)
  %integer_pow.110 = bf16[512,8,128]{2,1,0} multiply(%select_n.819, %select_n.819)
  %mul.11109 = bf16[512,8,128]{2,1,0} multiply(%integer_pow.110, %broadcast.3932)
  %param.552 = bf16[512,8,128]{2,1,0} parameter(758), sharding={devices=[8,1,1]<=[8]}
  %mul.11110 = bf16[512,8,128]{2,1,0} multiply(%param.552, %broadcast.3933)
  %add.3377 = bf16[512,8,128]{2,1,0} add(%mul.11109, %mul.11110)
  %div.2068 = bf16[512,8,128]{2,1,0} divide(%add.3377, %div.1482)
  %sqrt.111 = bf16[512,8,128]{2,1,0} sqrt(%div.2068)
  %add.3378 = bf16[512,8,128]{2,1,0} add(%sqrt.111, %broadcast.3934)
  %multiply.2622 = bf16[512,8,128]{2,1,0} multiply(%div.1481, %add.3378)
  %div.2069 = bf16[512,8,128]{2,1,0} divide(%add.3376, %multiply.2622)
  %mul.11111 = bf16[512,8,128]{2,1,0} multiply(%param.190, %broadcast.3930)
  %add.3379 = bf16[512,8,128]{2,1,0} add(%div.2069, %mul.11111)
  %mul.11112 = bf16[512,8,128]{2,1,0} multiply(%mul.9984, %add.3379)
  %add.3380 = bf16[512,8,128]{2,1,0} add(%param.190, %mul.11112)
  %div.2070 = bf16[512,8]{1,0} divide(%dynamic-slice.2291, %div.1442)
  %select_n.820 = bf16[512,8]{1,0} select(%select_n.704, %dynamic-slice.2291, %div.2070)
  %mul.11117 = bf16[512,8]{1,0} multiply(%select_n.820, %broadcast.3915)
  %param.553 = bf16[512,8]{1,0} parameter(436), sharding={devices=[8,1]<=[8]}
  %mul.11118 = bf16[512,8]{1,0} multiply(%param.553, %broadcast.3916)
  %add.3381 = bf16[512,8]{1,0} add(%mul.11117, %mul.11118)
  %integer_pow.111 = bf16[512,8]{1,0} multiply(%select_n.820, %select_n.820)
  %mul.11120 = bf16[512,8]{1,0} multiply(%integer_pow.111, %broadcast.3917)
  %param.554 = bf16[512,8]{1,0} parameter(759), sharding={devices=[8,1]<=[8]}
  %mul.11121 = bf16[512,8]{1,0} multiply(%param.554, %broadcast.3918)
  %add.3382 = bf16[512,8]{1,0} add(%mul.11120, %mul.11121)
  %div.2073 = bf16[512,8]{1,0} divide(%add.3382, %div.1446)
  %sqrt.112 = bf16[512,8]{1,0} sqrt(%div.2073)
  %add.3383 = bf16[512,8]{1,0} add(%sqrt.112, %broadcast.3919)
  %multiply.2623 = bf16[512,8]{1,0} multiply(%div.1444, %add.3383)
  %div.2074 = bf16[512,8]{1,0} divide(%add.3381, %multiply.2623)
  %mul.11122 = bf16[512,8]{1,0} multiply(%param.203, %broadcast.3915)
  %add.3384 = bf16[512,8]{1,0} add(%div.2074, %mul.11122)
  %mul.11124 = bf16[512,8]{1,0} multiply(%mul.9922, %add.3384)
  %add.3385 = bf16[512,8]{1,0} add(%param.203, %mul.11124)
  %div.2075 = bf16[1,4096,14336]{2,1,0} divide(%sharding_constraint.2496, %div.1450)
  %select_n.821 = bf16[1,4096,14336]{2,1,0} select(%select_n.706, %sharding_constraint.2496, %div.2075)
  %mul.11126 = bf16[1,4096,14336]{2,1,0} multiply(%select_n.821, %broadcast.3920)
  %param.555 = bf16[1,4096,14336]{2,1,0} parameter(437), sharding={devices=[8,1,1]<=[8]}
  %mul.11127 = bf16[1,4096,14336]{2,1,0} multiply(%param.555, %broadcast.3921)
  %add.3386 = bf16[1,4096,14336]{2,1,0} add(%mul.11126, %mul.11127)
  %integer_pow.112 = bf16[1,4096,14336]{2,1,0} multiply(%select_n.821, %select_n.821)
  %mul.11128 = bf16[1,4096,14336]{2,1,0} multiply(%integer_pow.112, %broadcast.3922)
  %param.556 = bf16[1,4096,14336]{2,1,0} parameter(760), sharding={devices=[8,1,1]<=[8]}
  %mul.11135 = bf16[1,4096,14336]{2,1,0} multiply(%param.556, %broadcast.3923)
  %add.3387 = bf16[1,4096,14336]{2,1,0} add(%mul.11128, %mul.11135)
  %div.2078 = bf16[1,4096,14336]{2,1,0} divide(%add.3387, %div.1455)
  %sqrt.113 = bf16[1,4096,14336]{2,1,0} sqrt(%div.2078)
  %add.3388 = bf16[1,4096,14336]{2,1,0} add(%sqrt.113, %broadcast.3924)
  %multiply.2624 = bf16[1,4096,14336]{2,1,0} multiply(%div.1454, %add.3388)
  %div.2079 = bf16[1,4096,14336]{2,1,0} divide(%add.3386, %multiply.2624)
  %mul.11136 = bf16[1,4096,14336]{2,1,0} multiply(%param.204, %broadcast.3920)
  %add.3389 = bf16[1,4096,14336]{2,1,0} add(%div.2079, %mul.11136)
  %mul.11141 = bf16[1,4096,14336]{2,1,0} multiply(%mul.9929, %add.3389)
  %add.3390 = bf16[1,4096,14336]{2,1,0} add(%param.204, %mul.11141)
  %div.2080 = bf16[1,4096,14336]{2,1,0} divide(%sharding_constraint.2497, %div.1450)
  %select_n.822 = bf16[1,4096,14336]{2,1,0} select(%select_n.706, %sharding_constraint.2497, %div.2080)
  %mul.11143 = bf16[1,4096,14336]{2,1,0} multiply(%select_n.822, %broadcast.3920)
  %param.557 = bf16[1,4096,14336]{2,1,0} parameter(438), sharding={devices=[8,1,1]<=[8]}
  %mul.11145 = bf16[1,4096,14336]{2,1,0} multiply(%param.557, %broadcast.3921)
  %add.3391 = bf16[1,4096,14336]{2,1,0} add(%mul.11143, %mul.11145)
  %integer_pow.113 = bf16[1,4096,14336]{2,1,0} multiply(%select_n.822, %select_n.822)
  %mul.11146 = bf16[1,4096,14336]{2,1,0} multiply(%integer_pow.113, %broadcast.3922)
  %param.558 = bf16[1,4096,14336]{2,1,0} parameter(761), sharding={devices=[8,1,1]<=[8]}
  %mul.11147 = bf16[1,4096,14336]{2,1,0} multiply(%param.558, %broadcast.3923)
  %add.3392 = bf16[1,4096,14336]{2,1,0} add(%mul.11146, %mul.11147)
  %div.2083 = bf16[1,4096,14336]{2,1,0} divide(%add.3392, %div.1455)
  %sqrt.114 = bf16[1,4096,14336]{2,1,0} sqrt(%div.2083)
  %add.3393 = bf16[1,4096,14336]{2,1,0} add(%sqrt.114, %broadcast.3924)
  %multiply.2625 = bf16[1,4096,14336]{2,1,0} multiply(%div.1454, %add.3393)
  %div.2084 = bf16[1,4096,14336]{2,1,0} divide(%add.3391, %multiply.2625)
  %mul.11148 = bf16[1,4096,14336]{2,1,0} multiply(%param.205, %broadcast.3920)
  %add.3394 = bf16[1,4096,14336]{2,1,0} add(%div.2084, %mul.11148)
  %mul.11150 = bf16[1,4096,14336]{2,1,0} multiply(%mul.9929, %add.3394)
  %add.3395 = bf16[1,4096,14336]{2,1,0} add(%param.205, %mul.11150)
  %div.2085 = bf16[1,14336,4096]{2,1,0} divide(%sharding_constraint.2498, %div.1463)
  %select_n.823 = bf16[1,14336,4096]{2,1,0} select(%select_n.709, %sharding_constraint.2498, %div.2085)
  %mul.11153 = bf16[1,14336,4096]{2,1,0} multiply(%select_n.823, %broadcast.3925)
  %param.559 = bf16[1,14336,4096]{2,1,0} parameter(439), sharding={devices=[8,1,1]<=[8]}
  %mul.11154 = bf16[1,14336,4096]{2,1,0} multiply(%param.559, %broadcast.3926)
  %add.3396 = bf16[1,14336,4096]{2,1,0} add(%mul.11153, %mul.11154)
  %integer_pow.114 = bf16[1,14336,4096]{2,1,0} multiply(%select_n.823, %select_n.823)
  %mul.11155 = bf16[1,14336,4096]{2,1,0} multiply(%integer_pow.114, %broadcast.3927)
  %param.560 = bf16[1,14336,4096]{2,1,0} parameter(762), sharding={devices=[8,1,1]<=[8]}
  %mul.11159 = bf16[1,14336,4096]{2,1,0} multiply(%param.560, %broadcast.3928)
  %add.3397 = bf16[1,14336,4096]{2,1,0} add(%mul.11155, %mul.11159)
  %div.2088 = bf16[1,14336,4096]{2,1,0} divide(%add.3397, %div.1466)
  %sqrt.115 = bf16[1,14336,4096]{2,1,0} sqrt(%div.2088)
  %add.3398 = bf16[1,14336,4096]{2,1,0} add(%sqrt.115, %broadcast.3929)
  %multiply.2626 = bf16[1,14336,4096]{2,1,0} multiply(%div.1465, %add.3398)
  %div.2089 = bf16[1,14336,4096]{2,1,0} divide(%add.3396, %multiply.2626)
  %mul.11162 = bf16[1,14336,4096]{2,1,0} multiply(%param.206, %broadcast.3925)
  %add.3399 = bf16[1,14336,4096]{2,1,0} add(%div.2089, %mul.11162)
  %mul.11163 = bf16[1,14336,4096]{2,1,0} multiply(%mul.9949, %add.3399)
  %add.3400 = bf16[1,14336,4096]{2,1,0} add(%param.206, %mul.11163)
  %div.2090 = bf16[4096]{0} divide(%all-reduce.172, %div.1436)
  %select_n.824 = bf16[4096]{0} select(%select_n.701, %all-reduce.172, %div.2090)
  %mul.11165 = bf16[4096]{0} multiply(%select_n.824, %broadcast.3910)
  %param.561 = bf16[4096]{0} parameter(440), sharding={replicated}
  %mul.11166 = bf16[4096]{0} multiply(%param.561, %broadcast.3911)
  %add.3401 = bf16[4096]{0} add(%mul.11165, %mul.11166)
  %integer_pow.115 = bf16[4096]{0} multiply(%select_n.824, %select_n.824)
  %mul.11167 = bf16[4096]{0} multiply(%integer_pow.115, %broadcast.3912)
  %param.562 = bf16[4096]{0} parameter(763), sharding={replicated}
  %mul.11176 = bf16[4096]{0} multiply(%param.562, %broadcast.3913)
  %add.3402 = bf16[4096]{0} add(%mul.11167, %mul.11176)
  %div.2093 = bf16[4096]{0} divide(%add.3402, %div.1439)
  %sqrt.116 = bf16[4096]{0} sqrt(%div.2093)
  %add.3403 = bf16[4096]{0} add(%sqrt.116, %broadcast.3914)
  %multiply.2627 = bf16[4096]{0} multiply(%div.1438, %add.3403)
  %div.2094 = bf16[4096]{0} divide(%add.3401, %multiply.2627)
  %mul.11185 = bf16[4096]{0} multiply(%param.202, %broadcast.3910)
  %add.3404 = bf16[4096]{0} add(%div.2094, %mul.11185)
  %mul.11187 = bf16[4096]{0} multiply(%mul.2424, %add.3404)
  %add.3405 = bf16[4096]{0} add(%param.202, %mul.11187)
  %div.2095 = bf16[4096]{0} divide(%all-reduce.173, %div.1436)
  %select_n.825 = bf16[4096]{0} select(%select_n.701, %all-reduce.173, %div.2095)
  %mul.11190 = bf16[4096]{0} multiply(%select_n.825, %broadcast.3910)
  %param.563 = bf16[4096]{0} parameter(441), sharding={replicated}
  %mul.11191 = bf16[4096]{0} multiply(%param.563, %broadcast.3911)
  %add.3407 = bf16[4096]{0} add(%mul.11190, %mul.11191)
  %integer_pow.116 = bf16[4096]{0} multiply(%select_n.825, %select_n.825)
  %mul.11193 = bf16[4096]{0} multiply(%integer_pow.116, %broadcast.3912)
  %param.564 = bf16[4096]{0} parameter(764), sharding={replicated}
  %mul.11194 = bf16[4096]{0} multiply(%param.564, %broadcast.3913)
  %add.3408 = bf16[4096]{0} add(%mul.11193, %mul.11194)
  %div.2098 = bf16[4096]{0} divide(%add.3408, %div.1439)
  %sqrt.117 = bf16[4096]{0} sqrt(%div.2098)
  %add.3409 = bf16[4096]{0} add(%sqrt.117, %broadcast.3914)
  %multiply.2628 = bf16[4096]{0} multiply(%div.1438, %add.3409)
  %div.2099 = bf16[4096]{0} divide(%add.3407, %multiply.2628)
  %mul.11195 = bf16[4096]{0} multiply(%param.197, %broadcast.3910)
  %add.3410 = bf16[4096]{0} add(%div.2099, %mul.11195)
  %mul.11196 = bf16[4096]{0} multiply(%mul.2424, %add.3410)
  %add.3411 = bf16[4096]{0} add(%param.197, %mul.11196)
  %div.2100 = bf16[512,8,128]{0,2,1} divide(%transpose.369, %div.1479)
  %select_n.826 = bf16[512,8,128]{2,1,0} select(%select_n.713, %transpose.369, %div.2100)
  %mul.11198 = bf16[512,8,128]{2,1,0} multiply(%select_n.826, %broadcast.3930)
  %param.565 = bf16[512,8,128]{2,1,0} parameter(442), sharding={devices=[8,1,1]<=[8]}
  %mul.11200 = bf16[512,8,128]{2,1,0} multiply(%param.565, %broadcast.3931)
  %add.3413 = bf16[512,8,128]{2,1,0} add(%mul.11198, %mul.11200)
  %integer_pow.117 = bf16[512,8,128]{2,1,0} multiply(%select_n.826, %select_n.826)
  %mul.11204 = bf16[512,8,128]{2,1,0} multiply(%integer_pow.117, %broadcast.3932)
  %param.566 = bf16[512,8,128]{2,1,0} parameter(765), sharding={devices=[8,1,1]<=[8]}
  %mul.11205 = bf16[512,8,128]{2,1,0} multiply(%param.566, %broadcast.3933)
  %add.3414 = bf16[512,8,128]{2,1,0} add(%mul.11204, %mul.11205)
  %div.2103 = bf16[512,8,128]{2,1,0} divide(%add.3414, %div.1482)
  %sqrt.118 = bf16[512,8,128]{2,1,0} sqrt(%div.2103)
  %add.3415 = bf16[512,8,128]{2,1,0} add(%sqrt.118, %broadcast.3934)
  %multiply.2629 = bf16[512,8,128]{2,1,0} multiply(%div.1481, %add.3415)
  %div.2104 = bf16[512,8,128]{2,1,0} divide(%add.3413, %multiply.2629)
  %mul.11206 = bf16[512,8,128]{2,1,0} multiply(%param.199, %broadcast.3930)
  %add.3416 = bf16[512,8,128]{2,1,0} add(%div.2104, %mul.11206)
  %mul.11207 = bf16[512,8,128]{2,1,0} multiply(%mul.9984, %add.3416)
  %add.3417 = bf16[512,8,128]{2,1,0} add(%param.199, %mul.11207)
  %div.2105 = bf16[32,128,512]{1,0,2} divide(%transpose.370, %div.1485)
  %select_n.827 = bf16[32,128,512]{2,1,0} select(%select_n.715, %transpose.370, %div.2105)
  %mul.11225 = bf16[32,128,512]{2,1,0} multiply(%select_n.827, %broadcast.3935)
  %param.567 = bf16[32,128,512]{2,1,0} parameter(443), sharding={devices=[1,1,8]<=[8]}
  %mul.11230 = bf16[32,128,512]{2,1,0} multiply(%param.567, %broadcast.3936)
  %add.3418 = bf16[32,128,512]{2,1,0} add(%mul.11225, %mul.11230)
  %integer_pow.118 = bf16[32,128,512]{2,1,0} multiply(%select_n.827, %select_n.827)
  %mul.11231 = bf16[32,128,512]{2,1,0} multiply(%integer_pow.118, %broadcast.3937)
  %param.568 = bf16[32,128,512]{2,1,0} parameter(766), sharding={devices=[1,1,8]<=[8]}
  %mul.11232 = bf16[32,128,512]{2,1,0} multiply(%param.568, %broadcast.3938)
  %add.3419 = bf16[32,128,512]{2,1,0} add(%mul.11231, %mul.11232)
  %div.2108 = bf16[32,128,512]{2,1,0} divide(%add.3419, %div.1488)
  %sqrt.119 = bf16[32,128,512]{2,1,0} sqrt(%div.2108)
  %add.3420 = bf16[32,128,512]{2,1,0} add(%sqrt.119, %broadcast.3939)
  %multiply.2630 = bf16[32,128,512]{2,1,0} multiply(%div.1487, %add.3420)
  %div.2109 = bf16[32,128,512]{2,1,0} divide(%add.3418, %multiply.2630)
  %mul.11233 = bf16[32,128,512]{2,1,0} multiply(%param.201, %broadcast.3935)
  %add.3422 = bf16[32,128,512]{2,1,0} add(%div.2109, %mul.11233)
  %mul.11234 = bf16[32,128,512]{2,1,0} multiply(%mul.9994, %add.3422)
  %add.3423 = bf16[32,128,512]{2,1,0} add(%param.201, %mul.11234)
  %div.2110 = bf16[512,32,128]{0,2,1} divide(%transpose.371, %div.1491)
  %select_n.828 = bf16[512,32,128]{2,1,0} select(%select_n.717, %transpose.371, %div.2110)
  %mul.11236 = bf16[512,32,128]{2,1,0} multiply(%select_n.828, %broadcast.3940)
  %param.569 = bf16[512,32,128]{2,1,0} parameter(444), sharding={devices=[8,1,1]<=[8]}
  %mul.11243 = bf16[512,32,128]{2,1,0} multiply(%param.569, %broadcast.3941)
  %add.3424 = bf16[512,32,128]{2,1,0} add(%mul.11236, %mul.11243)
  %integer_pow.119 = bf16[512,32,128]{2,1,0} multiply(%select_n.828, %select_n.828)
  %mul.11244 = bf16[512,32,128]{2,1,0} multiply(%integer_pow.119, %broadcast.3942)
  %param.570 = bf16[512,32,128]{2,1,0} parameter(767), sharding={devices=[8,1,1]<=[8]}
  %mul.11245 = bf16[512,32,128]{2,1,0} multiply(%param.570, %broadcast.3943)
  %add.3425 = bf16[512,32,128]{2,1,0} add(%mul.11244, %mul.11245)
  %div.2113 = bf16[512,32,128]{2,1,0} divide(%add.3425, %div.1494)
  %sqrt.120 = bf16[512,32,128]{2,1,0} sqrt(%div.2113)
  %add.3426 = bf16[512,32,128]{2,1,0} add(%sqrt.120, %broadcast.3944)
  %multiply.2631 = bf16[512,32,128]{2,1,0} multiply(%div.1493, %add.3426)
  %div.2114 = bf16[512,32,128]{2,1,0} divide(%add.3424, %multiply.2631)
  %mul.11246 = bf16[512,32,128]{2,1,0} multiply(%param.198, %broadcast.3940)
  %add.3427 = bf16[512,32,128]{2,1,0} add(%div.2114, %mul.11246)
  %mul.11247 = bf16[512,32,128]{2,1,0} multiply(%mul.10010, %add.3427)
  %add.3428 = bf16[512,32,128]{2,1,0} add(%param.198, %mul.11247)
  %div.2115 = bf16[512,8,128]{0,2,1} divide(%transpose.372, %div.1479)
  %select_n.829 = bf16[512,8,128]{2,1,0} select(%select_n.713, %transpose.372, %div.2115)
  %mul.11249 = bf16[512,8,128]{2,1,0} multiply(%select_n.829, %broadcast.3930)
  %param.571 = bf16[512,8,128]{2,1,0} parameter(445), sharding={devices=[8,1,1]<=[8]}
  %mul.11250 = bf16[512,8,128]{2,1,0} multiply(%param.571, %broadcast.3931)
  %add.3429 = bf16[512,8,128]{2,1,0} add(%mul.11249, %mul.11250)
  %integer_pow.120 = bf16[512,8,128]{2,1,0} multiply(%select_n.829, %select_n.829)
  %mul.11251 = bf16[512,8,128]{2,1,0} multiply(%integer_pow.120, %broadcast.3932)
  %param.572 = bf16[512,8,128]{2,1,0} parameter(768), sharding={devices=[8,1,1]<=[8]}
  %mul.11252 = bf16[512,8,128]{2,1,0} multiply(%param.572, %broadcast.3933)
  %add.3430 = bf16[512,8,128]{2,1,0} add(%mul.11251, %mul.11252)
  %div.2118 = bf16[512,8,128]{2,1,0} divide(%add.3430, %div.1482)
  %sqrt.121 = bf16[512,8,128]{2,1,0} sqrt(%div.2118)
  %add.3431 = bf16[512,8,128]{2,1,0} add(%sqrt.121, %broadcast.3934)
  %multiply.2632 = bf16[512,8,128]{2,1,0} multiply(%div.1481, %add.3431)
  %div.2119 = bf16[512,8,128]{2,1,0} divide(%add.3429, %multiply.2632)
  %mul.11253 = bf16[512,8,128]{2,1,0} multiply(%param.200, %broadcast.3930)
  %add.3432 = bf16[512,8,128]{2,1,0} add(%div.2119, %mul.11253)
  %mul.11254 = bf16[512,8,128]{2,1,0} multiply(%mul.9984, %add.3432)
  %add.3433 = bf16[512,8,128]{2,1,0} add(%param.200, %mul.11254)
  %div.2120 = bf16[512,8]{1,0} divide(%dynamic-slice.2301, %div.1442)
  %select_n.830 = bf16[512,8]{1,0} select(%select_n.704, %dynamic-slice.2301, %div.2120)
  %mul.11256 = bf16[512,8]{1,0} multiply(%select_n.830, %broadcast.3915)
  %param.573 = bf16[512,8]{1,0} parameter(446), sharding={devices=[8,1]<=[8]}
  %mul.11257 = bf16[512,8]{1,0} multiply(%param.573, %broadcast.3916)
  %add.3434 = bf16[512,8]{1,0} add(%mul.11256, %mul.11257)
  %integer_pow.121 = bf16[512,8]{1,0} multiply(%select_n.830, %select_n.830)
  %mul.11258 = bf16[512,8]{1,0} multiply(%integer_pow.121, %broadcast.3917)
  %param.574 = bf16[512,8]{1,0} parameter(769), sharding={devices=[8,1]<=[8]}
  %mul.11262 = bf16[512,8]{1,0} multiply(%param.574, %broadcast.3918)
  %add.3435 = bf16[512,8]{1,0} add(%mul.11258, %mul.11262)
  %div.2123 = bf16[512,8]{1,0} divide(%add.3435, %div.1446)
  %sqrt.122 = bf16[512,8]{1,0} sqrt(%div.2123)
  %add.3436 = bf16[512,8]{1,0} add(%sqrt.122, %broadcast.3919)
  %multiply.2633 = bf16[512,8]{1,0} multiply(%div.1444, %add.3436)
  %div.2124 = bf16[512,8]{1,0} divide(%add.3434, %multiply.2633)
  %mul.11266 = bf16[512,8]{1,0} multiply(%param.33, %broadcast.3915)
  %add.3437 = bf16[512,8]{1,0} add(%div.2124, %mul.11266)
  %mul.11270 = bf16[512,8]{1,0} multiply(%mul.9922, %add.3437)
  %add.3438 = bf16[512,8]{1,0} add(%param.33, %mul.11270)
  %div.2125 = bf16[1,4096,14336]{2,1,0} divide(%sharding_constraint.2499, %div.1450)
  %select_n.831 = bf16[1,4096,14336]{2,1,0} select(%select_n.706, %sharding_constraint.2499, %div.2125)
  %mul.11275 = bf16[1,4096,14336]{2,1,0} multiply(%select_n.831, %broadcast.3920)
  %param.575 = bf16[1,4096,14336]{2,1,0} parameter(447), sharding={devices=[8,1,1]<=[8]}
  %mul.11276 = bf16[1,4096,14336]{2,1,0} multiply(%param.575, %broadcast.3921)
  %add.3439 = bf16[1,4096,14336]{2,1,0} add(%mul.11275, %mul.11276)
  %integer_pow.122 = bf16[1,4096,14336]{2,1,0} multiply(%select_n.831, %select_n.831)
  %mul.11277 = bf16[1,4096,14336]{2,1,0} multiply(%integer_pow.122, %broadcast.3922)
  %param.576 = bf16[1,4096,14336]{2,1,0} parameter(770), sharding={devices=[8,1,1]<=[8]}
  %mul.11278 = bf16[1,4096,14336]{2,1,0} multiply(%param.576, %broadcast.3923)
  %add.3440 = bf16[1,4096,14336]{2,1,0} add(%mul.11277, %mul.11278)
  %div.2128 = bf16[1,4096,14336]{2,1,0} divide(%add.3440, %div.1455)
  %sqrt.123 = bf16[1,4096,14336]{2,1,0} sqrt(%div.2128)
  %add.3441 = bf16[1,4096,14336]{2,1,0} add(%sqrt.123, %broadcast.3924)
  %multiply.2634 = bf16[1,4096,14336]{2,1,0} multiply(%div.1454, %add.3441)
  %div.2129 = bf16[1,4096,14336]{2,1,0} divide(%add.3439, %multiply.2634)
  %mul.11279 = bf16[1,4096,14336]{2,1,0} multiply(%param.34, %broadcast.3920)
  %add.3442 = bf16[1,4096,14336]{2,1,0} add(%div.2129, %mul.11279)
  %mul.11280 = bf16[1,4096,14336]{2,1,0} multiply(%mul.9929, %add.3442)
  %add.3444 = bf16[1,4096,14336]{2,1,0} add(%param.34, %mul.11280)
  %div.2132 = bf16[1,4096,14336]{2,1,0} divide(%sharding_constraint.2500, %div.1450)
  %select_n.832 = bf16[1,4096,14336]{2,1,0} select(%select_n.706, %sharding_constraint.2500, %div.2132)
  %mul.11288 = bf16[1,4096,14336]{2,1,0} multiply(%select_n.832, %broadcast.3920)
  %param.577 = bf16[1,4096,14336]{2,1,0} parameter(448), sharding={devices=[8,1,1]<=[8]}
  %mul.11292 = bf16[1,4096,14336]{2,1,0} multiply(%param.577, %broadcast.3921)
  %add.3445 = bf16[1,4096,14336]{2,1,0} add(%mul.11288, %mul.11292)
  %integer_pow.123 = bf16[1,4096,14336]{2,1,0} multiply(%select_n.832, %select_n.832)
  %mul.11296 = bf16[1,4096,14336]{2,1,0} multiply(%integer_pow.123, %broadcast.3922)
  %param.578 = bf16[1,4096,14336]{2,1,0} parameter(771), sharding={devices=[8,1,1]<=[8]}
  %mul.11297 = bf16[1,4096,14336]{2,1,0} multiply(%param.578, %broadcast.3923)
  %add.3447 = bf16[1,4096,14336]{2,1,0} add(%mul.11296, %mul.11297)
  %div.2136 = bf16[1,4096,14336]{2,1,0} divide(%add.3447, %div.1455)
  %sqrt.124 = bf16[1,4096,14336]{2,1,0} sqrt(%div.2136)
  %add.3448 = bf16[1,4096,14336]{2,1,0} add(%sqrt.124, %broadcast.3924)
  %multiply.2635 = bf16[1,4096,14336]{2,1,0} multiply(%div.1454, %add.3448)
  %div.2137 = bf16[1,4096,14336]{2,1,0} divide(%add.3445, %multiply.2635)
  %mul.11298 = bf16[1,4096,14336]{2,1,0} multiply(%param.35, %broadcast.3920)
  %add.3449 = bf16[1,4096,14336]{2,1,0} add(%div.2137, %mul.11298)
  %mul.11299 = bf16[1,4096,14336]{2,1,0} multiply(%mul.9929, %add.3449)
  %add.3450 = bf16[1,4096,14336]{2,1,0} add(%param.35, %mul.11299)
  %div.2138 = bf16[1,14336,4096]{2,1,0} divide(%sharding_constraint.2501, %div.1463)
  %select_n.833 = bf16[1,14336,4096]{2,1,0} select(%select_n.709, %sharding_constraint.2501, %div.2138)
  %mul.11312 = bf16[1,14336,4096]{2,1,0} multiply(%select_n.833, %broadcast.3925)
  %param.579 = bf16[1,14336,4096]{2,1,0} parameter(449), sharding={devices=[8,1,1]<=[8]}
  %mul.11313 = bf16[1,14336,4096]{2,1,0} multiply(%param.579, %broadcast.3926)
  %add.3451 = bf16[1,14336,4096]{2,1,0} add(%mul.11312, %mul.11313)
  %integer_pow.124 = bf16[1,14336,4096]{2,1,0} multiply(%select_n.833, %select_n.833)
  %mul.11314 = bf16[1,14336,4096]{2,1,0} multiply(%integer_pow.124, %broadcast.3927)
  %param.580 = bf16[1,14336,4096]{2,1,0} parameter(772), sharding={devices=[8,1,1]<=[8]}
  %mul.11315 = bf16[1,14336,4096]{2,1,0} multiply(%param.580, %broadcast.3928)
  %add.3452 = bf16[1,14336,4096]{2,1,0} add(%mul.11314, %mul.11315)
  %div.2141 = bf16[1,14336,4096]{2,1,0} divide(%add.3452, %div.1466)
  %sqrt.125 = bf16[1,14336,4096]{2,1,0} sqrt(%div.2141)
  %add.3453 = bf16[1,14336,4096]{2,1,0} add(%sqrt.125, %broadcast.3929)
  %multiply.2636 = bf16[1,14336,4096]{2,1,0} multiply(%div.1465, %add.3453)
  %div.2142 = bf16[1,14336,4096]{2,1,0} divide(%add.3451, %multiply.2636)
  %mul.11322 = bf16[1,14336,4096]{2,1,0} multiply(%param.36, %broadcast.3925)
  %add.3454 = bf16[1,14336,4096]{2,1,0} add(%div.2142, %mul.11322)
  %mul.11323 = bf16[1,14336,4096]{2,1,0} multiply(%mul.9949, %add.3454)
  %add.3455 = bf16[1,14336,4096]{2,1,0} add(%param.36, %mul.11323)
  %div.2143 = bf16[4096]{0} divide(%all-reduce.187, %div.1436)
  %select_n.834 = bf16[4096]{0} select(%select_n.701, %all-reduce.187, %div.2143)
  %mul.11325 = bf16[4096]{0} multiply(%select_n.834, %broadcast.3910)
  %param.581 = bf16[4096]{0} parameter(450), sharding={replicated}
  %mul.11326 = bf16[4096]{0} multiply(%param.581, %broadcast.3911)
  %add.3456 = bf16[4096]{0} add(%mul.11325, %mul.11326)
  %integer_pow.125 = bf16[4096]{0} multiply(%select_n.834, %select_n.834)
  %mul.11327 = bf16[4096]{0} multiply(%integer_pow.125, %broadcast.3912)
  %param.582 = bf16[4096]{0} parameter(773), sharding={replicated}
  %mul.11328 = bf16[4096]{0} multiply(%param.582, %broadcast.3913)
  %add.3457 = bf16[4096]{0} add(%mul.11327, %mul.11328)
  %div.2146 = bf16[4096]{0} divide(%add.3457, %div.1439)
  %sqrt.126 = bf16[4096]{0} sqrt(%div.2146)
  %add.3458 = bf16[4096]{0} add(%sqrt.126, %broadcast.3914)
  %multiply.2637 = bf16[4096]{0} multiply(%div.1438, %add.3458)
  %div.2147 = bf16[4096]{0} divide(%add.3456, %multiply.2637)
  %mul.11329 = bf16[4096]{0} multiply(%param.32, %broadcast.3910)
  %add.3459 = bf16[4096]{0} add(%div.2147, %mul.11329)
  %mul.11330 = bf16[4096]{0} multiply(%mul.2424, %add.3459)
  %add.3460 = bf16[4096]{0} add(%param.32, %mul.11330)
  %div.2148 = bf16[4096]{0} divide(%all-reduce.188, %div.1436)
  %select_n.835 = bf16[4096]{0} select(%select_n.701, %all-reduce.188, %div.2148)
  %mul.11332 = bf16[4096]{0} multiply(%select_n.835, %broadcast.3910)
  %param.583 = bf16[4096]{0} parameter(451), sharding={replicated}
  %mul.11333 = bf16[4096]{0} multiply(%param.583, %broadcast.3911)
  %add.3463 = bf16[4096]{0} add(%mul.11332, %mul.11333)
  %integer_pow.126 = bf16[4096]{0} multiply(%select_n.835, %select_n.835)
  %mul.11334 = bf16[4096]{0} multiply(%integer_pow.126, %broadcast.3912)
  %param.584 = bf16[4096]{0} parameter(774), sharding={replicated}
  %mul.11335 = bf16[4096]{0} multiply(%param.584, %broadcast.3913)
  %add.3464 = bf16[4096]{0} add(%mul.11334, %mul.11335)
  %div.2151 = bf16[4096]{0} divide(%add.3464, %div.1439)
  %sqrt.127 = bf16[4096]{0} sqrt(%div.2151)
  %add.3465 = bf16[4096]{0} add(%sqrt.127, %broadcast.3914)
  %multiply.2638 = bf16[4096]{0} multiply(%div.1438, %add.3465)
  %div.2152 = bf16[4096]{0} divide(%add.3463, %multiply.2638)
  %mul.11336 = bf16[4096]{0} multiply(%param.27, %broadcast.3910)
  %add.3466 = bf16[4096]{0} add(%div.2152, %mul.11336)
  %mul.11337 = bf16[4096]{0} multiply(%mul.2424, %add.3466)
  %add.3467 = bf16[4096]{0} add(%param.27, %mul.11337)
  %div.2153 = bf16[512,8,128]{0,2,1} divide(%transpose.373, %div.1479)
  %select_n.836 = bf16[512,8,128]{2,1,0} select(%select_n.713, %transpose.373, %div.2153)
  %mul.11339 = bf16[512,8,128]{2,1,0} multiply(%select_n.836, %broadcast.3930)
  %param.585 = bf16[512,8,128]{2,1,0} parameter(452), sharding={devices=[8,1,1]<=[8]}
  %mul.11340 = bf16[512,8,128]{2,1,0} multiply(%param.585, %broadcast.3931)
  %add.3468 = bf16[512,8,128]{2,1,0} add(%mul.11339, %mul.11340)
  %integer_pow.127 = bf16[512,8,128]{2,1,0} multiply(%select_n.836, %select_n.836)
  %mul.11341 = bf16[512,8,128]{2,1,0} multiply(%integer_pow.127, %broadcast.3932)
  %param.586 = bf16[512,8,128]{2,1,0} parameter(775), sharding={devices=[8,1,1]<=[8]}
  %mul.11343 = bf16[512,8,128]{2,1,0} multiply(%param.586, %broadcast.3933)
  %add.3469 = bf16[512,8,128]{2,1,0} add(%mul.11341, %mul.11343)
  %div.2157 = bf16[512,8,128]{2,1,0} divide(%add.3469, %div.1482)
  %sqrt.128 = bf16[512,8,128]{2,1,0} sqrt(%div.2157)
  %add.3470 = bf16[512,8,128]{2,1,0} add(%sqrt.128, %broadcast.3934)
  %multiply.2639 = bf16[512,8,128]{2,1,0} multiply(%div.1481, %add.3470)
  %div.2158 = bf16[512,8,128]{2,1,0} divide(%add.3468, %multiply.2639)
  %mul.11344 = bf16[512,8,128]{2,1,0} multiply(%param.29, %broadcast.3930)
  %add.3471 = bf16[512,8,128]{2,1,0} add(%div.2158, %mul.11344)
  %mul.11345 = bf16[512,8,128]{2,1,0} multiply(%mul.9984, %add.3471)
  %add.3472 = bf16[512,8,128]{2,1,0} add(%param.29, %mul.11345)
  %div.2159 = bf16[32,128,512]{1,0,2} divide(%transpose.374, %div.1485)
  %select_n.837 = bf16[32,128,512]{2,1,0} select(%select_n.715, %transpose.374, %div.2159)
  %mul.11347 = bf16[32,128,512]{2,1,0} multiply(%select_n.837, %broadcast.3935)
  %param.587 = bf16[32,128,512]{2,1,0} parameter(453), sharding={devices=[1,1,8]<=[8]}
  %mul.11348 = bf16[32,128,512]{2,1,0} multiply(%param.587, %broadcast.3936)
  %add.3473 = bf16[32,128,512]{2,1,0} add(%mul.11347, %mul.11348)
  %integer_pow.128 = bf16[32,128,512]{2,1,0} multiply(%select_n.837, %select_n.837)
  %mul.11349 = bf16[32,128,512]{2,1,0} multiply(%integer_pow.128, %broadcast.3937)
  %param.588 = bf16[32,128,512]{2,1,0} parameter(776), sharding={devices=[1,1,8]<=[8]}
  %mul.11350 = bf16[32,128,512]{2,1,0} multiply(%param.588, %broadcast.3938)
  %add.3474 = bf16[32,128,512]{2,1,0} add(%mul.11349, %mul.11350)
  %div.2169 = bf16[32,128,512]{2,1,0} divide(%add.3474, %div.1488)
  %sqrt.129 = bf16[32,128,512]{2,1,0} sqrt(%div.2169)
  %add.3475 = bf16[32,128,512]{2,1,0} add(%sqrt.129, %broadcast.3939)
  %multiply.2640 = bf16[32,128,512]{2,1,0} multiply(%div.1487, %add.3475)
  %div.2170 = bf16[32,128,512]{2,1,0} divide(%add.3473, %multiply.2640)
  %mul.11351 = bf16[32,128,512]{2,1,0} multiply(%param.31, %broadcast.3935)
  %add.3476 = bf16[32,128,512]{2,1,0} add(%div.2170, %mul.11351)
  %mul.11352 = bf16[32,128,512]{2,1,0} multiply(%mul.9994, %add.3476)
  %add.3477 = bf16[32,128,512]{2,1,0} add(%param.31, %mul.11352)
  %div.2171 = bf16[512,32,128]{0,2,1} divide(%transpose.375, %div.1491)
  %select_n.838 = bf16[512,32,128]{2,1,0} select(%select_n.717, %transpose.375, %div.2171)
  %mul.11354 = bf16[512,32,128]{2,1,0} multiply(%select_n.838, %broadcast.3940)
  %param.589 = bf16[512,32,128]{2,1,0} parameter(454), sharding={devices=[8,1,1]<=[8]}
  %mul.11355 = bf16[512,32,128]{2,1,0} multiply(%param.589, %broadcast.3941)
  %add.3478 = bf16[512,32,128]{2,1,0} add(%mul.11354, %mul.11355)
  %integer_pow.129 = bf16[512,32,128]{2,1,0} multiply(%select_n.838, %select_n.838)
  %mul.11356 = bf16[512,32,128]{2,1,0} multiply(%integer_pow.129, %broadcast.3942)
  %param.590 = bf16[512,32,128]{2,1,0} parameter(777), sharding={devices=[8,1,1]<=[8]}
  %mul.11357 = bf16[512,32,128]{2,1,0} multiply(%param.590, %broadcast.3943)
  %add.3479 = bf16[512,32,128]{2,1,0} add(%mul.11356, %mul.11357)
  %div.2174 = bf16[512,32,128]{2,1,0} divide(%add.3479, %div.1494)
  %sqrt.130 = bf16[512,32,128]{2,1,0} sqrt(%div.2174)
  %add.3480 = bf16[512,32,128]{2,1,0} add(%sqrt.130, %broadcast.3944)
  %multiply.2641 = bf16[512,32,128]{2,1,0} multiply(%div.1493, %add.3480)
  %div.2175 = bf16[512,32,128]{2,1,0} divide(%add.3478, %multiply.2641)
  %mul.11358 = bf16[512,32,128]{2,1,0} multiply(%param.28, %broadcast.3940)
  %add.3481 = bf16[512,32,128]{2,1,0} add(%div.2175, %mul.11358)
  %mul.11359 = bf16[512,32,128]{2,1,0} multiply(%mul.10010, %add.3481)
  %add.3482 = bf16[512,32,128]{2,1,0} add(%param.28, %mul.11359)
  %div.2176 = bf16[512,8,128]{0,2,1} divide(%transpose.376, %div.1479)
  %select_n.839 = bf16[512,8,128]{2,1,0} select(%select_n.713, %transpose.376, %div.2176)
  %mul.11366 = bf16[512,8,128]{2,1,0} multiply(%select_n.839, %broadcast.3930)
  %param.591 = bf16[512,8,128]{2,1,0} parameter(455), sharding={devices=[8,1,1]<=[8]}
  %mul.11367 = bf16[512,8,128]{2,1,0} multiply(%param.591, %broadcast.3931)
  %add.3483 = bf16[512,8,128]{2,1,0} add(%mul.11366, %mul.11367)
  %integer_pow.130 = bf16[512,8,128]{2,1,0} multiply(%select_n.839, %select_n.839)
  %mul.11368 = bf16[512,8,128]{2,1,0} multiply(%integer_pow.130, %broadcast.3932)
  %param.592 = bf16[512,8,128]{2,1,0} parameter(778), sharding={devices=[8,1,1]<=[8]}
  %mul.11369 = bf16[512,8,128]{2,1,0} multiply(%param.592, %broadcast.3933)
  %add.3484 = bf16[512,8,128]{2,1,0} add(%mul.11368, %mul.11369)
  %div.2179 = bf16[512,8,128]{2,1,0} divide(%add.3484, %div.1482)
  %sqrt.131 = bf16[512,8,128]{2,1,0} sqrt(%div.2179)
  %add.3485 = bf16[512,8,128]{2,1,0} add(%sqrt.131, %broadcast.3934)
  %multiply.2642 = bf16[512,8,128]{2,1,0} multiply(%div.1481, %add.3485)
  %div.2180 = bf16[512,8,128]{2,1,0} divide(%add.3483, %multiply.2642)
  %mul.11370 = bf16[512,8,128]{2,1,0} multiply(%param.30, %broadcast.3930)
  %add.3486 = bf16[512,8,128]{2,1,0} add(%div.2180, %mul.11370)
  %mul.11371 = bf16[512,8,128]{2,1,0} multiply(%mul.9984, %add.3486)
  %add.3487 = bf16[512,8,128]{2,1,0} add(%param.30, %mul.11371)
  %div.2181 = bf16[512,8]{1,0} divide(%dynamic-slice.2311, %div.1442)
  %select_n.840 = bf16[512,8]{1,0} select(%select_n.704, %dynamic-slice.2311, %div.2181)
  %mul.11374 = bf16[512,8]{1,0} multiply(%select_n.840, %broadcast.3915)
  %param.593 = bf16[512,8]{1,0} parameter(456), sharding={devices=[8,1]<=[8]}
  %mul.11375 = bf16[512,8]{1,0} multiply(%param.593, %broadcast.3916)
  %add.3488 = bf16[512,8]{1,0} add(%mul.11374, %mul.11375)
  %integer_pow.131 = bf16[512,8]{1,0} multiply(%select_n.840, %select_n.840)
  %mul.11376 = bf16[512,8]{1,0} multiply(%integer_pow.131, %broadcast.3917)
  %param.594 = bf16[512,8]{1,0} parameter(779), sharding={devices=[8,1]<=[8]}
  %mul.11377 = bf16[512,8]{1,0} multiply(%param.594, %broadcast.3918)
  %add.3489 = bf16[512,8]{1,0} add(%mul.11376, %mul.11377)
  %div.2184 = bf16[512,8]{1,0} divide(%add.3489, %div.1446)
  %sqrt.132 = bf16[512,8]{1,0} sqrt(%div.2184)
  %add.3490 = bf16[512,8]{1,0} add(%sqrt.132, %broadcast.3919)
  %multiply.2643 = bf16[512,8]{1,0} multiply(%div.1444, %add.3490)
  %div.2185 = bf16[512,8]{1,0} divide(%add.3488, %multiply.2643)
  %mul.11378 = bf16[512,8]{1,0} multiply(%param.213, %broadcast.3915)
  %add.3492 = bf16[512,8]{1,0} add(%div.2185, %mul.11378)
  %mul.11379 = bf16[512,8]{1,0} multiply(%mul.9922, %add.3492)
  %add.3493 = bf16[512,8]{1,0} add(%param.213, %mul.11379)
  %div.2186 = bf16[1,4096,14336]{2,1,0} divide(%sharding_constraint.2502, %div.1450)
  %select_n.841 = bf16[1,4096,14336]{2,1,0} select(%select_n.706, %sharding_constraint.2502, %div.2186)
  %mul.11384 = bf16[1,4096,14336]{2,1,0} multiply(%select_n.841, %broadcast.3920)
  %param.595 = bf16[1,4096,14336]{2,1,0} parameter(457), sharding={devices=[8,1,1]<=[8]}
  %mul.11385 = bf16[1,4096,14336]{2,1,0} multiply(%param.595, %broadcast.3921)
  %add.3494 = bf16[1,4096,14336]{2,1,0} add(%mul.11384, %mul.11385)
  %integer_pow.132 = bf16[1,4096,14336]{2,1,0} multiply(%select_n.841, %select_n.841)
  %mul.11386 = bf16[1,4096,14336]{2,1,0} multiply(%integer_pow.132, %broadcast.3922)
  %param.596 = bf16[1,4096,14336]{2,1,0} parameter(780), sharding={devices=[8,1,1]<=[8]}
  %mul.11390 = bf16[1,4096,14336]{2,1,0} multiply(%param.596, %broadcast.3923)
  %add.3495 = bf16[1,4096,14336]{2,1,0} add(%mul.11386, %mul.11390)
  %div.2189 = bf16[1,4096,14336]{2,1,0} divide(%add.3495, %div.1455)
  %sqrt.133 = bf16[1,4096,14336]{2,1,0} sqrt(%div.2189)
  %add.3496 = bf16[1,4096,14336]{2,1,0} add(%sqrt.133, %broadcast.3924)
  %multiply.2644 = bf16[1,4096,14336]{2,1,0} multiply(%div.1454, %add.3496)
  %div.2190 = bf16[1,4096,14336]{2,1,0} divide(%add.3494, %multiply.2644)
  %mul.11397 = bf16[1,4096,14336]{2,1,0} multiply(%param.214, %broadcast.3920)
  %add.3497 = bf16[1,4096,14336]{2,1,0} add(%div.2190, %mul.11397)
  %mul.11398 = bf16[1,4096,14336]{2,1,0} multiply(%mul.9929, %add.3497)
  %add.3498 = bf16[1,4096,14336]{2,1,0} add(%param.214, %mul.11398)
  %div.2192 = bf16[1,4096,14336]{2,1,0} divide(%sharding_constraint.2503, %div.1450)
  %select_n.842 = bf16[1,4096,14336]{2,1,0} select(%select_n.706, %sharding_constraint.2503, %div.2192)
  %mul.11400 = bf16[1,4096,14336]{2,1,0} multiply(%select_n.842, %broadcast.3920)
  %param.597 = bf16[1,4096,14336]{2,1,0} parameter(458), sharding={devices=[8,1,1]<=[8]}
  %mul.11401 = bf16[1,4096,14336]{2,1,0} multiply(%param.597, %broadcast.3921)
  %add.3499 = bf16[1,4096,14336]{2,1,0} add(%mul.11400, %mul.11401)
  %integer_pow.133 = bf16[1,4096,14336]{2,1,0} multiply(%select_n.842, %select_n.842)
  %mul.11402 = bf16[1,4096,14336]{2,1,0} multiply(%integer_pow.133, %broadcast.3922)
  %param.598 = bf16[1,4096,14336]{2,1,0} parameter(781), sharding={devices=[8,1,1]<=[8]}
  %mul.11403 = bf16[1,4096,14336]{2,1,0} multiply(%param.598, %broadcast.3923)
  %add.3501 = bf16[1,4096,14336]{2,1,0} add(%mul.11402, %mul.11403)
  %div.2195 = bf16[1,4096,14336]{2,1,0} divide(%add.3501, %div.1455)
  %sqrt.134 = bf16[1,4096,14336]{2,1,0} sqrt(%div.2195)
  %add.3502 = bf16[1,4096,14336]{2,1,0} add(%sqrt.134, %broadcast.3924)
  %multiply.2645 = bf16[1,4096,14336]{2,1,0} multiply(%div.1454, %add.3502)
  %div.2197 = bf16[1,4096,14336]{2,1,0} divide(%add.3499, %multiply.2645)
  %mul.11404 = bf16[1,4096,14336]{2,1,0} multiply(%param.215, %broadcast.3920)
  %add.3503 = bf16[1,4096,14336]{2,1,0} add(%div.2197, %mul.11404)
  %mul.11405 = bf16[1,4096,14336]{2,1,0} multiply(%mul.9929, %add.3503)
  %add.3504 = bf16[1,4096,14336]{2,1,0} add(%param.215, %mul.11405)
  %div.2198 = bf16[1,14336,4096]{2,1,0} divide(%sharding_constraint.2504, %div.1463)
  %select_n.843 = bf16[1,14336,4096]{2,1,0} select(%select_n.709, %sharding_constraint.2504, %div.2198)
  %mul.11409 = bf16[1,14336,4096]{2,1,0} multiply(%select_n.843, %broadcast.3925)
  %param.599 = bf16[1,14336,4096]{2,1,0} parameter(459), sharding={devices=[8,1,1]<=[8]}
  %mul.11410 = bf16[1,14336,4096]{2,1,0} multiply(%param.599, %broadcast.3926)
  %add.3505 = bf16[1,14336,4096]{2,1,0} add(%mul.11409, %mul.11410)
  %integer_pow.134 = bf16[1,14336,4096]{2,1,0} multiply(%select_n.843, %select_n.843)
  %mul.11411 = bf16[1,14336,4096]{2,1,0} multiply(%integer_pow.134, %broadcast.3927)
  %param.600 = bf16[1,14336,4096]{2,1,0} parameter(782), sharding={devices=[8,1,1]<=[8]}
  %mul.11412 = bf16[1,14336,4096]{2,1,0} multiply(%param.600, %broadcast.3928)
  %add.3506 = bf16[1,14336,4096]{2,1,0} add(%mul.11411, %mul.11412)
  %div.2208 = bf16[1,14336,4096]{2,1,0} divide(%add.3506, %div.1466)
  %sqrt.135 = bf16[1,14336,4096]{2,1,0} sqrt(%div.2208)
  %add.3507 = bf16[1,14336,4096]{2,1,0} add(%sqrt.135, %broadcast.3929)
  %multiply.2646 = bf16[1,14336,4096]{2,1,0} multiply(%div.1465, %add.3507)
  %div.2209 = bf16[1,14336,4096]{2,1,0} divide(%add.3505, %multiply.2646)
  %mul.11413 = bf16[1,14336,4096]{2,1,0} multiply(%param.216, %broadcast.3925)
  %add.3508 = bf16[1,14336,4096]{2,1,0} add(%div.2209, %mul.11413)
  %mul.11417 = bf16[1,14336,4096]{2,1,0} multiply(%mul.9949, %add.3508)
  %add.3509 = bf16[1,14336,4096]{2,1,0} add(%param.216, %mul.11417)
  %div.2210 = bf16[4096]{0} divide(%all-reduce.202, %div.1436)
  %select_n.844 = bf16[4096]{0} select(%select_n.701, %all-reduce.202, %div.2210)
  %mul.11419 = bf16[4096]{0} multiply(%select_n.844, %broadcast.3910)
  %param.601 = bf16[4096]{0} parameter(460), sharding={replicated}
  %mul.11430 = bf16[4096]{0} multiply(%param.601, %broadcast.3911)
  %add.3511 = bf16[4096]{0} add(%mul.11419, %mul.11430)
  %integer_pow.135 = bf16[4096]{0} multiply(%select_n.844, %select_n.844)
  %mul.11431 = bf16[4096]{0} multiply(%integer_pow.135, %broadcast.3912)
  %param.602 = bf16[4096]{0} parameter(783), sharding={replicated}
  %mul.11432 = bf16[4096]{0} multiply(%param.602, %broadcast.3913)
  %add.3512 = bf16[4096]{0} add(%mul.11431, %mul.11432)
  %div.2214 = bf16[4096]{0} divide(%add.3512, %div.1439)
  %sqrt.136 = bf16[4096]{0} sqrt(%div.2214)
  %add.3513 = bf16[4096]{0} add(%sqrt.136, %broadcast.3914)
  %multiply.2647 = bf16[4096]{0} multiply(%div.1438, %add.3513)
  %div.2215 = bf16[4096]{0} divide(%add.3511, %multiply.2647)
  %mul.11433 = bf16[4096]{0} multiply(%param.212, %broadcast.3910)
  %add.3514 = bf16[4096]{0} add(%div.2215, %mul.11433)
  %mul.11434 = bf16[4096]{0} multiply(%mul.2424, %add.3514)
  %add.3515 = bf16[4096]{0} add(%param.212, %mul.11434)
  %div.2216 = bf16[4096]{0} divide(%all-reduce.203, %div.1436)
  %select_n.845 = bf16[4096]{0} select(%select_n.701, %all-reduce.203, %div.2216)
  %mul.11436 = bf16[4096]{0} multiply(%select_n.845, %broadcast.3910)
  %param.603 = bf16[4096]{0} parameter(461), sharding={replicated}
  %mul.11437 = bf16[4096]{0} multiply(%param.603, %broadcast.3911)
  %add.3516 = bf16[4096]{0} add(%mul.11436, %mul.11437)
  %integer_pow.136 = bf16[4096]{0} multiply(%select_n.845, %select_n.845)
  %mul.11438 = bf16[4096]{0} multiply(%integer_pow.136, %broadcast.3912)
  %param.604 = bf16[4096]{0} parameter(784), sharding={replicated}
  %mul.11439 = bf16[4096]{0} multiply(%param.604, %broadcast.3913)
  %add.3517 = bf16[4096]{0} add(%mul.11438, %mul.11439)
  %div.2219 = bf16[4096]{0} divide(%add.3517, %div.1439)
  %sqrt.137 = bf16[4096]{0} sqrt(%div.2219)
  %add.3518 = bf16[4096]{0} add(%sqrt.137, %broadcast.3914)
  %multiply.2648 = bf16[4096]{0} multiply(%div.1438, %add.3518)
  %div.2220 = bf16[4096]{0} divide(%add.3516, %multiply.2648)
  %mul.11444 = bf16[4096]{0} multiply(%param.207, %broadcast.3910)
  %add.3519 = bf16[4096]{0} add(%div.2220, %mul.11444)
  %mul.11445 = bf16[4096]{0} multiply(%mul.2424, %add.3519)
  %add.3520 = bf16[4096]{0} add(%param.207, %mul.11445)
  %div.2221 = bf16[512,8,128]{0,2,1} divide(%transpose.377, %div.1479)
  %select_n.846 = bf16[512,8,128]{2,1,0} select(%select_n.713, %transpose.377, %div.2221)
  %mul.11447 = bf16[512,8,128]{2,1,0} multiply(%select_n.846, %broadcast.3930)
  %param.605 = bf16[512,8,128]{2,1,0} parameter(462), sharding={devices=[8,1,1]<=[8]}
  %mul.11448 = bf16[512,8,128]{2,1,0} multiply(%param.605, %broadcast.3931)
  %add.3521 = bf16[512,8,128]{2,1,0} add(%mul.11447, %mul.11448)
  %integer_pow.137 = bf16[512,8,128]{2,1,0} multiply(%select_n.846, %select_n.846)
  %mul.11449 = bf16[512,8,128]{2,1,0} multiply(%integer_pow.137, %broadcast.3932)
  %param.606 = bf16[512,8,128]{2,1,0} parameter(785), sharding={devices=[8,1,1]<=[8]}
  %mul.11450 = bf16[512,8,128]{2,1,0} multiply(%param.606, %broadcast.3933)
  %add.3522 = bf16[512,8,128]{2,1,0} add(%mul.11449, %mul.11450)
  %div.2224 = bf16[512,8,128]{2,1,0} divide(%add.3522, %div.1482)
  %sqrt.138 = bf16[512,8,128]{2,1,0} sqrt(%div.2224)
  %add.3523 = bf16[512,8,128]{2,1,0} add(%sqrt.138, %broadcast.3934)
  %multiply.2649 = bf16[512,8,128]{2,1,0} multiply(%div.1481, %add.3523)
  %div.2226 = bf16[512,8,128]{2,1,0} divide(%add.3521, %multiply.2649)
  %mul.11451 = bf16[512,8,128]{2,1,0} multiply(%param.209, %broadcast.3930)
  %add.3524 = bf16[512,8,128]{2,1,0} add(%div.2226, %mul.11451)
  %mul.11452 = bf16[512,8,128]{2,1,0} multiply(%mul.9984, %add.3524)
  %add.3525 = bf16[512,8,128]{2,1,0} add(%param.209, %mul.11452)
  %div.2227 = bf16[32,128,512]{1,0,2} divide(%transpose.378, %div.1485)
  %select_n.847 = bf16[32,128,512]{2,1,0} select(%select_n.715, %transpose.378, %div.2227)
  %mul.11454 = bf16[32,128,512]{2,1,0} multiply(%select_n.847, %broadcast.3935)
  %param.607 = bf16[32,128,512]{2,1,0} parameter(463), sharding={devices=[1,1,8]<=[8]}
  %mul.11455 = bf16[32,128,512]{2,1,0} multiply(%param.607, %broadcast.3936)
  %add.3526 = bf16[32,128,512]{2,1,0} add(%mul.11454, %mul.11455)
  %integer_pow.138 = bf16[32,128,512]{2,1,0} multiply(%select_n.847, %select_n.847)
  %mul.11456 = bf16[32,128,512]{2,1,0} multiply(%integer_pow.138, %broadcast.3937)
  %param.608 = bf16[32,128,512]{2,1,0} parameter(786), sharding={devices=[1,1,8]<=[8]}
  %mul.11457 = bf16[32,128,512]{2,1,0} multiply(%param.608, %broadcast.3938)
  %add.3527 = bf16[32,128,512]{2,1,0} add(%mul.11456, %mul.11457)
  %div.2233 = bf16[32,128,512]{2,1,0} divide(%add.3527, %div.1488)
  %sqrt.139 = bf16[32,128,512]{2,1,0} sqrt(%div.2233)
  %add.3528 = bf16[32,128,512]{2,1,0} add(%sqrt.139, %broadcast.3939)
  %multiply.2650 = bf16[32,128,512]{2,1,0} multiply(%div.1487, %add.3528)
  %div.2234 = bf16[32,128,512]{2,1,0} divide(%add.3526, %multiply.2650)
  %mul.11458 = bf16[32,128,512]{2,1,0} multiply(%param.211, %broadcast.3935)
  %add.3529 = bf16[32,128,512]{2,1,0} add(%div.2234, %mul.11458)
  %mul.11459 = bf16[32,128,512]{2,1,0} multiply(%mul.9994, %add.3529)
  %add.3530 = bf16[32,128,512]{2,1,0} add(%param.211, %mul.11459)
  %div.2235 = bf16[512,32,128]{0,2,1} divide(%transpose.379, %div.1491)
  %select_n.848 = bf16[512,32,128]{2,1,0} select(%select_n.717, %transpose.379, %div.2235)
  %mul.11461 = bf16[512,32,128]{2,1,0} multiply(%select_n.848, %broadcast.3940)
  %param.609 = bf16[512,32,128]{2,1,0} parameter(464), sharding={devices=[8,1,1]<=[8]}
  %mul.11462 = bf16[512,32,128]{2,1,0} multiply(%param.609, %broadcast.3941)
  %add.3531 = bf16[512,32,128]{2,1,0} add(%mul.11461, %mul.11462)
  %integer_pow.139 = bf16[512,32,128]{2,1,0} multiply(%select_n.848, %select_n.848)
  %mul.11463 = bf16[512,32,128]{2,1,0} multiply(%integer_pow.139, %broadcast.3942)
  %param.610 = bf16[512,32,128]{2,1,0} parameter(787), sharding={devices=[8,1,1]<=[8]}
  %mul.11464 = bf16[512,32,128]{2,1,0} multiply(%param.610, %broadcast.3943)
  %add.3532 = bf16[512,32,128]{2,1,0} add(%mul.11463, %mul.11464)
  %div.2238 = bf16[512,32,128]{2,1,0} divide(%add.3532, %div.1494)
  %sqrt.140 = bf16[512,32,128]{2,1,0} sqrt(%div.2238)
  %add.3533 = bf16[512,32,128]{2,1,0} add(%sqrt.140, %broadcast.3944)
  %multiply.2651 = bf16[512,32,128]{2,1,0} multiply(%div.1493, %add.3533)
  %div.2239 = bf16[512,32,128]{2,1,0} divide(%add.3531, %multiply.2651)
  %mul.11465 = bf16[512,32,128]{2,1,0} multiply(%param.208, %broadcast.3940)
  %add.3534 = bf16[512,32,128]{2,1,0} add(%div.2239, %mul.11465)
  %mul.11468 = bf16[512,32,128]{2,1,0} multiply(%mul.10010, %add.3534)
  %add.3535 = bf16[512,32,128]{2,1,0} add(%param.208, %mul.11468)
  %div.2240 = bf16[512,8,128]{0,2,1} divide(%transpose.380, %div.1479)
  %select_n.849 = bf16[512,8,128]{2,1,0} select(%select_n.713, %transpose.380, %div.2240)
  %mul.11470 = bf16[512,8,128]{2,1,0} multiply(%select_n.849, %broadcast.3930)
  %param.611 = bf16[512,8,128]{2,1,0} parameter(465), sharding={devices=[8,1,1]<=[8]}
  %mul.11471 = bf16[512,8,128]{2,1,0} multiply(%param.611, %broadcast.3931)
  %add.3536 = bf16[512,8,128]{2,1,0} add(%mul.11470, %mul.11471)
  %integer_pow.140 = bf16[512,8,128]{2,1,0} multiply(%select_n.849, %select_n.849)
  %mul.11472 = bf16[512,8,128]{2,1,0} multiply(%integer_pow.140, %broadcast.3932)
  %param.612 = bf16[512,8,128]{2,1,0} parameter(788), sharding={devices=[8,1,1]<=[8]}
  %mul.11473 = bf16[512,8,128]{2,1,0} multiply(%param.612, %broadcast.3933)
  %add.3537 = bf16[512,8,128]{2,1,0} add(%mul.11472, %mul.11473)
  %div.2243 = bf16[512,8,128]{2,1,0} divide(%add.3537, %div.1482)
  %sqrt.141 = bf16[512,8,128]{2,1,0} sqrt(%div.2243)
  %add.3538 = bf16[512,8,128]{2,1,0} add(%sqrt.141, %broadcast.3934)
  %multiply.2652 = bf16[512,8,128]{2,1,0} multiply(%div.1481, %add.3538)
  %div.2244 = bf16[512,8,128]{2,1,0} divide(%add.3536, %multiply.2652)
  %mul.11475 = bf16[512,8,128]{2,1,0} multiply(%param.210, %broadcast.3930)
  %add.3539 = bf16[512,8,128]{2,1,0} add(%div.2244, %mul.11475)
  %mul.11476 = bf16[512,8,128]{2,1,0} multiply(%mul.9984, %add.3539)
  %add.3540 = bf16[512,8,128]{2,1,0} add(%param.210, %mul.11476)
  %div.2245 = bf16[512,8]{1,0} divide(%dynamic-slice.2321, %div.1442)
  %select_n.850 = bf16[512,8]{1,0} select(%select_n.704, %dynamic-slice.2321, %div.2245)
  %mul.11478 = bf16[512,8]{1,0} multiply(%select_n.850, %broadcast.3915)
  %param.613 = bf16[512,8]{1,0} parameter(466), sharding={devices=[8,1]<=[8]}
  %mul.11479 = bf16[512,8]{1,0} multiply(%param.613, %broadcast.3916)
  %add.3541 = bf16[512,8]{1,0} add(%mul.11478, %mul.11479)
  %integer_pow.141 = bf16[512,8]{1,0} multiply(%select_n.850, %select_n.850)
  %mul.11480 = bf16[512,8]{1,0} multiply(%integer_pow.141, %broadcast.3917)
  %param.614 = bf16[512,8]{1,0} parameter(789), sharding={devices=[8,1]<=[8]}
  %mul.11481 = bf16[512,8]{1,0} multiply(%param.614, %broadcast.3918)
  %add.3542 = bf16[512,8]{1,0} add(%mul.11480, %mul.11481)
  %div.2248 = bf16[512,8]{1,0} divide(%add.3542, %div.1446)
  %sqrt.142 = bf16[512,8]{1,0} sqrt(%div.2248)
  %add.3543 = bf16[512,8]{1,0} add(%sqrt.142, %broadcast.3919)
  %multiply.2653 = bf16[512,8]{1,0} multiply(%div.1444, %add.3543)
  %div.2249 = bf16[512,8]{1,0} divide(%add.3541, %multiply.2653)
  %mul.11482 = bf16[512,8]{1,0} multiply(%param.223, %broadcast.3915)
  %add.3544 = bf16[512,8]{1,0} add(%div.2249, %mul.11482)
  %mul.11483 = bf16[512,8]{1,0} multiply(%mul.9922, %add.3544)
  %add.3546 = bf16[512,8]{1,0} add(%param.223, %mul.11483)
  %div.2250 = bf16[1,4096,14336]{2,1,0} divide(%sharding_constraint.2505, %div.1450)
  %select_n.851 = bf16[1,4096,14336]{2,1,0} select(%select_n.706, %sharding_constraint.2505, %div.2250)
  %mul.11485 = bf16[1,4096,14336]{2,1,0} multiply(%select_n.851, %broadcast.3920)
  %param.615 = bf16[1,4096,14336]{2,1,0} parameter(467), sharding={devices=[8,1,1]<=[8]}
  %mul.11492 = bf16[1,4096,14336]{2,1,0} multiply(%param.615, %broadcast.3921)
  %add.3547 = bf16[1,4096,14336]{2,1,0} add(%mul.11485, %mul.11492)
  %integer_pow.142 = bf16[1,4096,14336]{2,1,0} multiply(%select_n.851, %select_n.851)
  %mul.11493 = bf16[1,4096,14336]{2,1,0} multiply(%integer_pow.142, %broadcast.3922)
  %param.616 = bf16[1,4096,14336]{2,1,0} parameter(790), sharding={devices=[8,1,1]<=[8]}
  %mul.11497 = bf16[1,4096,14336]{2,1,0} multiply(%param.616, %broadcast.3923)
  %add.3548 = bf16[1,4096,14336]{2,1,0} add(%mul.11493, %mul.11497)
  %div.2253 = bf16[1,4096,14336]{2,1,0} divide(%add.3548, %div.1455)
  %sqrt.143 = bf16[1,4096,14336]{2,1,0} sqrt(%div.2253)
  %add.3549 = bf16[1,4096,14336]{2,1,0} add(%sqrt.143, %broadcast.3924)
  %multiply.2654 = bf16[1,4096,14336]{2,1,0} multiply(%div.1454, %add.3549)
  %div.2254 = bf16[1,4096,14336]{2,1,0} divide(%add.3547, %multiply.2654)
  %mul.11498 = bf16[1,4096,14336]{2,1,0} multiply(%param.224, %broadcast.3920)
  %add.3550 = bf16[1,4096,14336]{2,1,0} add(%div.2254, %mul.11498)
  %mul.11499 = bf16[1,4096,14336]{2,1,0} multiply(%mul.9929, %add.3550)
  %add.3551 = bf16[1,4096,14336]{2,1,0} add(%param.224, %mul.11499)
  %div.2255 = bf16[1,4096,14336]{2,1,0} divide(%sharding_constraint.2506, %div.1450)
  %select_n.852 = bf16[1,4096,14336]{2,1,0} select(%select_n.706, %sharding_constraint.2506, %div.2255)
  %mul.11501 = bf16[1,4096,14336]{2,1,0} multiply(%select_n.852, %broadcast.3920)
  %param.617 = bf16[1,4096,14336]{2,1,0} parameter(468), sharding={devices=[8,1,1]<=[8]}
  %mul.11502 = bf16[1,4096,14336]{2,1,0} multiply(%param.617, %broadcast.3921)
  %add.3552 = bf16[1,4096,14336]{2,1,0} add(%mul.11501, %mul.11502)
  %integer_pow.143 = bf16[1,4096,14336]{2,1,0} multiply(%select_n.852, %select_n.852)
  %mul.11503 = bf16[1,4096,14336]{2,1,0} multiply(%integer_pow.143, %broadcast.3922)
  %param.618 = bf16[1,4096,14336]{2,1,0} parameter(791), sharding={devices=[8,1,1]<=[8]}
  %mul.11504 = bf16[1,4096,14336]{2,1,0} multiply(%param.618, %broadcast.3923)
  %add.3553 = bf16[1,4096,14336]{2,1,0} add(%mul.11503, %mul.11504)
  %div.2259 = bf16[1,4096,14336]{2,1,0} divide(%add.3553, %div.1455)
  %sqrt.144 = bf16[1,4096,14336]{2,1,0} sqrt(%div.2259)
  %add.3554 = bf16[1,4096,14336]{2,1,0} add(%sqrt.144, %broadcast.3924)
  %multiply.2655 = bf16[1,4096,14336]{2,1,0} multiply(%div.1454, %add.3554)
  %div.2260 = bf16[1,4096,14336]{2,1,0} divide(%add.3552, %multiply.2655)
  %mul.11505 = bf16[1,4096,14336]{2,1,0} multiply(%param.225, %broadcast.3920)
  %add.3555 = bf16[1,4096,14336]{2,1,0} add(%div.2260, %mul.11505)
  %mul.11506 = bf16[1,4096,14336]{2,1,0} multiply(%mul.9929, %add.3555)
  %add.3556 = bf16[1,4096,14336]{2,1,0} add(%param.225, %mul.11506)
  %div.2261 = bf16[1,14336,4096]{2,1,0} divide(%sharding_constraint.2507, %div.1463)
  %select_n.853 = bf16[1,14336,4096]{2,1,0} select(%select_n.709, %sharding_constraint.2507, %div.2261)
  %mul.11508 = bf16[1,14336,4096]{2,1,0} multiply(%select_n.853, %broadcast.3925)
  %param.619 = bf16[1,14336,4096]{2,1,0} parameter(469), sharding={devices=[8,1,1]<=[8]}
  %mul.11509 = bf16[1,14336,4096]{2,1,0} multiply(%param.619, %broadcast.3926)
  %add.3558 = bf16[1,14336,4096]{2,1,0} add(%mul.11508, %mul.11509)
  %integer_pow.144 = bf16[1,14336,4096]{2,1,0} multiply(%select_n.853, %select_n.853)
  %mul.11510 = bf16[1,14336,4096]{2,1,0} multiply(%integer_pow.144, %broadcast.3927)
  %param.620 = bf16[1,14336,4096]{2,1,0} parameter(792), sharding={devices=[8,1,1]<=[8]}
  %mul.11511 = bf16[1,14336,4096]{2,1,0} multiply(%param.620, %broadcast.3928)
  %add.3559 = bf16[1,14336,4096]{2,1,0} add(%mul.11510, %mul.11511)
  %div.2267 = bf16[1,14336,4096]{2,1,0} divide(%add.3559, %div.1466)
  %sqrt.145 = bf16[1,14336,4096]{2,1,0} sqrt(%div.2267)
  %add.3561 = bf16[1,14336,4096]{2,1,0} add(%sqrt.145, %broadcast.3929)
  %multiply.2656 = bf16[1,14336,4096]{2,1,0} multiply(%div.1465, %add.3561)
  %div.2268 = bf16[1,14336,4096]{2,1,0} divide(%add.3558, %multiply.2656)
  %mul.11512 = bf16[1,14336,4096]{2,1,0} multiply(%param.226, %broadcast.3925)
  %add.3562 = bf16[1,14336,4096]{2,1,0} add(%div.2268, %mul.11512)
  %mul.11513 = bf16[1,14336,4096]{2,1,0} multiply(%mul.9949, %add.3562)
  %add.3564 = bf16[1,14336,4096]{2,1,0} add(%param.226, %mul.11513)
  %div.2269 = bf16[4096]{0} divide(%all-reduce.217, %div.1436)
  %select_n.854 = bf16[4096]{0} select(%select_n.701, %all-reduce.217, %div.2269)
  %mul.11515 = bf16[4096]{0} multiply(%select_n.854, %broadcast.3910)
  %param.621 = bf16[4096]{0} parameter(470), sharding={replicated}
  %mul.11516 = bf16[4096]{0} multiply(%param.621, %broadcast.3911)
  %add.3565 = bf16[4096]{0} add(%mul.11515, %mul.11516)
  %integer_pow.145 = bf16[4096]{0} multiply(%select_n.854, %select_n.854)
  %mul.11517 = bf16[4096]{0} multiply(%integer_pow.145, %broadcast.3912)
  %param.622 = bf16[4096]{0} parameter(793), sharding={replicated}
  %mul.11519 = bf16[4096]{0} multiply(%param.622, %broadcast.3913)
  %add.3566 = bf16[4096]{0} add(%mul.11517, %mul.11519)
  %div.2272 = bf16[4096]{0} divide(%add.3566, %div.1439)
  %sqrt.146 = bf16[4096]{0} sqrt(%div.2272)
  %add.3567 = bf16[4096]{0} add(%sqrt.146, %broadcast.3914)
  %multiply.2657 = bf16[4096]{0} multiply(%div.1438, %add.3567)
  %div.2273 = bf16[4096]{0} divide(%add.3565, %multiply.2657)
  %mul.11520 = bf16[4096]{0} multiply(%param.222, %broadcast.3910)
  %add.3569 = bf16[4096]{0} add(%div.2273, %mul.11520)
  %mul.11521 = bf16[4096]{0} multiply(%mul.2424, %add.3569)
  %add.3570 = bf16[4096]{0} add(%param.222, %mul.11521)
  %div.2274 = bf16[4096]{0} divide(%all-reduce.218, %div.1436)
  %select_n.855 = bf16[4096]{0} select(%select_n.701, %all-reduce.218, %div.2274)
  %mul.11523 = bf16[4096]{0} multiply(%select_n.855, %broadcast.3910)
  %param.623 = bf16[4096]{0} parameter(471), sharding={replicated}
  %mul.11524 = bf16[4096]{0} multiply(%param.623, %broadcast.3911)
  %add.3571 = bf16[4096]{0} add(%mul.11523, %mul.11524)
  %integer_pow.146 = bf16[4096]{0} multiply(%select_n.855, %select_n.855)
  %mul.11525 = bf16[4096]{0} multiply(%integer_pow.146, %broadcast.3912)
  %param.624 = bf16[4096]{0} parameter(794), sharding={replicated}
  %mul.11526 = bf16[4096]{0} multiply(%param.624, %broadcast.3913)
  %add.3572 = bf16[4096]{0} add(%mul.11525, %mul.11526)
  %div.2277 = bf16[4096]{0} divide(%add.3572, %div.1439)
  %sqrt.147 = bf16[4096]{0} sqrt(%div.2277)
  %add.3573 = bf16[4096]{0} add(%sqrt.147, %broadcast.3914)
  %multiply.2658 = bf16[4096]{0} multiply(%div.1438, %add.3573)
  %div.2278 = bf16[4096]{0} divide(%add.3571, %multiply.2658)
  %mul.11527 = bf16[4096]{0} multiply(%param.217, %broadcast.3910)
  %add.3574 = bf16[4096]{0} add(%div.2278, %mul.11527)
  %mul.11528 = bf16[4096]{0} multiply(%mul.2424, %add.3574)
  %add.3575 = bf16[4096]{0} add(%param.217, %mul.11528)
  %div.2279 = bf16[512,8,128]{0,2,1} divide(%transpose.381, %div.1479)
  %select_n.856 = bf16[512,8,128]{2,1,0} select(%select_n.713, %transpose.381, %div.2279)
  %mul.11531 = bf16[512,8,128]{2,1,0} multiply(%select_n.856, %broadcast.3930)
  %param.625 = bf16[512,8,128]{2,1,0} parameter(472), sharding={devices=[8,1,1]<=[8]}
  %mul.11532 = bf16[512,8,128]{2,1,0} multiply(%param.625, %broadcast.3931)
  %add.3576 = bf16[512,8,128]{2,1,0} add(%mul.11531, %mul.11532)
  %integer_pow.147 = bf16[512,8,128]{2,1,0} multiply(%select_n.856, %select_n.856)
  %mul.11533 = bf16[512,8,128]{2,1,0} multiply(%integer_pow.147, %broadcast.3932)
  %param.626 = bf16[512,8,128]{2,1,0} parameter(795), sharding={devices=[8,1,1]<=[8]}
  %mul.11534 = bf16[512,8,128]{2,1,0} multiply(%param.626, %broadcast.3933)
  %add.3578 = bf16[512,8,128]{2,1,0} add(%mul.11533, %mul.11534)
  %div.2282 = bf16[512,8,128]{2,1,0} divide(%add.3578, %div.1482)
  %sqrt.148 = bf16[512,8,128]{2,1,0} sqrt(%div.2282)
  %add.3579 = bf16[512,8,128]{2,1,0} add(%sqrt.148, %broadcast.3934)
  %multiply.2659 = bf16[512,8,128]{2,1,0} multiply(%div.1481, %add.3579)
  %div.2283 = bf16[512,8,128]{2,1,0} divide(%add.3576, %multiply.2659)
  %mul.11535 = bf16[512,8,128]{2,1,0} multiply(%param.219, %broadcast.3930)
  %add.3580 = bf16[512,8,128]{2,1,0} add(%div.2283, %mul.11535)
  %mul.11536 = bf16[512,8,128]{2,1,0} multiply(%mul.9984, %add.3580)
  %add.3581 = bf16[512,8,128]{2,1,0} add(%param.219, %mul.11536)
  %div.2284 = bf16[32,128,512]{1,0,2} divide(%transpose.382, %div.1485)
  %select_n.857 = bf16[32,128,512]{2,1,0} select(%select_n.715, %transpose.382, %div.2284)
  %mul.11538 = bf16[32,128,512]{2,1,0} multiply(%select_n.857, %broadcast.3935)
  %param.627 = bf16[32,128,512]{2,1,0} parameter(473), sharding={devices=[1,1,8]<=[8]}
  %mul.11539 = bf16[32,128,512]{2,1,0} multiply(%param.627, %broadcast.3936)
  %add.3582 = bf16[32,128,512]{2,1,0} add(%mul.11538, %mul.11539)
  %integer_pow.148 = bf16[32,128,512]{2,1,0} multiply(%select_n.857, %select_n.857)
  %mul.11540 = bf16[32,128,512]{2,1,0} multiply(%integer_pow.148, %broadcast.3937)
  %param.628 = bf16[32,128,512]{2,1,0} parameter(796), sharding={devices=[1,1,8]<=[8]}
  %mul.11541 = bf16[32,128,512]{2,1,0} multiply(%param.628, %broadcast.3938)
  %add.3583 = bf16[32,128,512]{2,1,0} add(%mul.11540, %mul.11541)
  %div.2287 = bf16[32,128,512]{2,1,0} divide(%add.3583, %div.1488)
  %sqrt.149 = bf16[32,128,512]{2,1,0} sqrt(%div.2287)
  %add.3584 = bf16[32,128,512]{2,1,0} add(%sqrt.149, %broadcast.3939)
  %multiply.2660 = bf16[32,128,512]{2,1,0} multiply(%div.1487, %add.3584)
  %div.2288 = bf16[32,128,512]{2,1,0} divide(%add.3582, %multiply.2660)
  %mul.11542 = bf16[32,128,512]{2,1,0} multiply(%param.221, %broadcast.3935)
  %add.3585 = bf16[32,128,512]{2,1,0} add(%div.2288, %mul.11542)
  %mul.11543 = bf16[32,128,512]{2,1,0} multiply(%mul.9994, %add.3585)
  %add.3586 = bf16[32,128,512]{2,1,0} add(%param.221, %mul.11543)
  %div.2289 = bf16[512,32,128]{0,2,1} divide(%transpose.383, %div.1491)
  %select_n.858 = bf16[512,32,128]{2,1,0} select(%select_n.717, %transpose.383, %div.2289)
  %mul.11545 = bf16[512,32,128]{2,1,0} multiply(%select_n.858, %broadcast.3940)
  %param.629 = bf16[512,32,128]{2,1,0} parameter(474), sharding={devices=[8,1,1]<=[8]}
  %mul.11551 = bf16[512,32,128]{2,1,0} multiply(%param.629, %broadcast.3941)
  %add.3588 = bf16[512,32,128]{2,1,0} add(%mul.11545, %mul.11551)
  %integer_pow.149 = bf16[512,32,128]{2,1,0} multiply(%select_n.858, %select_n.858)
  %mul.11552 = bf16[512,32,128]{2,1,0} multiply(%integer_pow.149, %broadcast.3942)
  %param.630 = bf16[512,32,128]{2,1,0} parameter(797), sharding={devices=[8,1,1]<=[8]}
  %mul.11553 = bf16[512,32,128]{2,1,0} multiply(%param.630, %broadcast.3943)
  %add.3589 = bf16[512,32,128]{2,1,0} add(%mul.11552, %mul.11553)
  %div.2292 = bf16[512,32,128]{2,1,0} divide(%add.3589, %div.1494)
  %sqrt.150 = bf16[512,32,128]{2,1,0} sqrt(%div.2292)
  %add.3590 = bf16[512,32,128]{2,1,0} add(%sqrt.150, %broadcast.3944)
  %multiply.2661 = bf16[512,32,128]{2,1,0} multiply(%div.1493, %add.3590)
  %div.2294 = bf16[512,32,128]{2,1,0} divide(%add.3588, %multiply.2661)
  %mul.11554 = bf16[512,32,128]{2,1,0} multiply(%param.218, %broadcast.3940)
  %add.3591 = bf16[512,32,128]{2,1,0} add(%div.2294, %mul.11554)
  %mul.11555 = bf16[512,32,128]{2,1,0} multiply(%mul.10010, %add.3591)
  %add.3592 = bf16[512,32,128]{2,1,0} add(%param.218, %mul.11555)
  %div.2295 = bf16[512,8,128]{0,2,1} divide(%transpose.384, %div.1479)
  %select_n.859 = bf16[512,8,128]{2,1,0} select(%select_n.713, %transpose.384, %div.2295)
  %mul.11557 = bf16[512,8,128]{2,1,0} multiply(%select_n.859, %broadcast.3930)
  %param.631 = bf16[512,8,128]{2,1,0} parameter(475), sharding={devices=[8,1,1]<=[8]}
  %mul.11558 = bf16[512,8,128]{2,1,0} multiply(%param.631, %broadcast.3931)
  %add.3593 = bf16[512,8,128]{2,1,0} add(%mul.11557, %mul.11558)
  %integer_pow.150 = bf16[512,8,128]{2,1,0} multiply(%select_n.859, %select_n.859)
  %mul.11559 = bf16[512,8,128]{2,1,0} multiply(%integer_pow.150, %broadcast.3932)
  %param.632 = bf16[512,8,128]{2,1,0} parameter(798), sharding={devices=[8,1,1]<=[8]}
  %mul.11560 = bf16[512,8,128]{2,1,0} multiply(%param.632, %broadcast.3933)
  %add.3594 = bf16[512,8,128]{2,1,0} add(%mul.11559, %mul.11560)
  %div.2298 = bf16[512,8,128]{2,1,0} divide(%add.3594, %div.1482)
  %sqrt.151 = bf16[512,8,128]{2,1,0} sqrt(%div.2298)
  %add.3595 = bf16[512,8,128]{2,1,0} add(%sqrt.151, %broadcast.3934)
  %multiply.2662 = bf16[512,8,128]{2,1,0} multiply(%div.1481, %add.3595)
  %div.2299 = bf16[512,8,128]{2,1,0} divide(%add.3593, %multiply.2662)
  %mul.11561 = bf16[512,8,128]{2,1,0} multiply(%param.220, %broadcast.3930)
  %add.3596 = bf16[512,8,128]{2,1,0} add(%div.2299, %mul.11561)
  %mul.11562 = bf16[512,8,128]{2,1,0} multiply(%mul.9984, %add.3596)
  %add.3597 = bf16[512,8,128]{2,1,0} add(%param.220, %mul.11562)
  %div.2300 = bf16[512,8]{1,0} divide(%dynamic-slice.2331, %div.1442)
  %select_n.860 = bf16[512,8]{1,0} select(%select_n.704, %dynamic-slice.2331, %div.2300)
  %mul.11564 = bf16[512,8]{1,0} multiply(%select_n.860, %broadcast.3915)
  %param.633 = bf16[512,8]{1,0} parameter(476), sharding={devices=[8,1]<=[8]}
  %mul.11565 = bf16[512,8]{1,0} multiply(%param.633, %broadcast.3916)
  %add.3598 = bf16[512,8]{1,0} add(%mul.11564, %mul.11565)
  %integer_pow.151 = bf16[512,8]{1,0} multiply(%select_n.860, %select_n.860)
  %mul.11566 = bf16[512,8]{1,0} multiply(%integer_pow.151, %broadcast.3917)
  %param.634 = bf16[512,8]{1,0} parameter(799), sharding={devices=[8,1]<=[8]}
  %mul.11567 = bf16[512,8]{1,0} multiply(%param.634, %broadcast.3918)
  %add.3599 = bf16[512,8]{1,0} add(%mul.11566, %mul.11567)
  %div.2303 = bf16[512,8]{1,0} divide(%add.3599, %div.1446)
  %sqrt.152 = bf16[512,8]{1,0} sqrt(%div.2303)
  %add.3600 = bf16[512,8]{1,0} add(%sqrt.152, %broadcast.3919)
  %multiply.2663 = bf16[512,8]{1,0} multiply(%div.1444, %add.3600)
  %div.2304 = bf16[512,8]{1,0} divide(%add.3598, %multiply.2663)
  %mul.11568 = bf16[512,8]{1,0} multiply(%param.233, %broadcast.3915)
  %add.3601 = bf16[512,8]{1,0} add(%div.2304, %mul.11568)
  %mul.11570 = bf16[512,8]{1,0} multiply(%mul.9922, %add.3601)
  %add.3602 = bf16[512,8]{1,0} add(%param.233, %mul.11570)
  %div.2305 = bf16[1,4096,14336]{2,1,0} divide(%sharding_constraint.2508, %div.1450)
  %select_n.861 = bf16[1,4096,14336]{2,1,0} select(%select_n.706, %sharding_constraint.2508, %div.2305)
  %mul.11572 = bf16[1,4096,14336]{2,1,0} multiply(%select_n.861, %broadcast.3920)
  %param.635 = bf16[1,4096,14336]{2,1,0} parameter(477), sharding={devices=[8,1,1]<=[8]}
  %mul.11573 = bf16[1,4096,14336]{2,1,0} multiply(%param.635, %broadcast.3921)
  %add.3603 = bf16[1,4096,14336]{2,1,0} add(%mul.11572, %mul.11573)
  %integer_pow.152 = bf16[1,4096,14336]{2,1,0} multiply(%select_n.861, %select_n.861)
  %mul.11574 = bf16[1,4096,14336]{2,1,0} multiply(%integer_pow.152, %broadcast.3922)
  %param.636 = bf16[1,4096,14336]{2,1,0} parameter(800), sharding={devices=[8,1,1]<=[8]}
  %mul.11575 = bf16[1,4096,14336]{2,1,0} multiply(%param.636, %broadcast.3923)
  %add.3604 = bf16[1,4096,14336]{2,1,0} add(%mul.11574, %mul.11575)
  %div.2308 = bf16[1,4096,14336]{2,1,0} divide(%add.3604, %div.1455)
  %sqrt.153 = bf16[1,4096,14336]{2,1,0} sqrt(%div.2308)
  %add.3605 = bf16[1,4096,14336]{2,1,0} add(%sqrt.153, %broadcast.3924)
  %multiply.2664 = bf16[1,4096,14336]{2,1,0} multiply(%div.1454, %add.3605)
  %div.2309 = bf16[1,4096,14336]{2,1,0} divide(%add.3603, %multiply.2664)
  %mul.11576 = bf16[1,4096,14336]{2,1,0} multiply(%param.234, %broadcast.3920)
  %add.3607 = bf16[1,4096,14336]{2,1,0} add(%div.2309, %mul.11576)
  %mul.11577 = bf16[1,4096,14336]{2,1,0} multiply(%mul.9929, %add.3607)
  %add.3608 = bf16[1,4096,14336]{2,1,0} add(%param.234, %mul.11577)
  %div.2310 = bf16[1,4096,14336]{2,1,0} divide(%sharding_constraint.2509, %div.1450)
  %select_n.862 = bf16[1,4096,14336]{2,1,0} select(%select_n.706, %sharding_constraint.2509, %div.2310)
  %mul.11579 = bf16[1,4096,14336]{2,1,0} multiply(%select_n.862, %broadcast.3920)
  %param.637 = bf16[1,4096,14336]{2,1,0} parameter(478), sharding={devices=[8,1,1]<=[8]}
  %mul.11580 = bf16[1,4096,14336]{2,1,0} multiply(%param.637, %broadcast.3921)
  %add.3609 = bf16[1,4096,14336]{2,1,0} add(%mul.11579, %mul.11580)
  %integer_pow.153 = bf16[1,4096,14336]{2,1,0} multiply(%select_n.862, %select_n.862)
  %mul.11583 = bf16[1,4096,14336]{2,1,0} multiply(%integer_pow.153, %broadcast.3922)
  %param.638 = bf16[1,4096,14336]{2,1,0} parameter(801), sharding={devices=[8,1,1]<=[8]}
  %mul.11584 = bf16[1,4096,14336]{2,1,0} multiply(%param.638, %broadcast.3923)
  %add.3610 = bf16[1,4096,14336]{2,1,0} add(%mul.11583, %mul.11584)
  %div.2313 = bf16[1,4096,14336]{2,1,0} divide(%add.3610, %div.1455)
  %sqrt.154 = bf16[1,4096,14336]{2,1,0} sqrt(%div.2313)
  %add.3611 = bf16[1,4096,14336]{2,1,0} add(%sqrt.154, %broadcast.3924)
  %multiply.2665 = bf16[1,4096,14336]{2,1,0} multiply(%div.1454, %add.3611)
  %div.2314 = bf16[1,4096,14336]{2,1,0} divide(%add.3609, %multiply.2665)
  %mul.11585 = bf16[1,4096,14336]{2,1,0} multiply(%param.235, %broadcast.3920)
  %add.3612 = bf16[1,4096,14336]{2,1,0} add(%div.2314, %mul.11585)
  %mul.11586 = bf16[1,4096,14336]{2,1,0} multiply(%mul.9929, %add.3612)
  %add.3613 = bf16[1,4096,14336]{2,1,0} add(%param.235, %mul.11586)
  %div.2315 = bf16[1,14336,4096]{2,1,0} divide(%sharding_constraint.2510, %div.1463)
  %select_n.863 = bf16[1,14336,4096]{2,1,0} select(%select_n.709, %sharding_constraint.2510, %div.2315)
  %mul.11593 = bf16[1,14336,4096]{2,1,0} multiply(%select_n.863, %broadcast.3925)
  %param.639 = bf16[1,14336,4096]{2,1,0} parameter(479), sharding={devices=[8,1,1]<=[8]}
  %mul.11594 = bf16[1,14336,4096]{2,1,0} multiply(%param.639, %broadcast.3926)
  %add.3614 = bf16[1,14336,4096]{2,1,0} add(%mul.11593, %mul.11594)
  %integer_pow.154 = bf16[1,14336,4096]{2,1,0} multiply(%select_n.863, %select_n.863)
  %mul.11595 = bf16[1,14336,4096]{2,1,0} multiply(%integer_pow.154, %broadcast.3927)
  %param.640 = bf16[1,14336,4096]{2,1,0} parameter(802), sharding={devices=[8,1,1]<=[8]}
  %mul.11596 = bf16[1,14336,4096]{2,1,0} multiply(%param.640, %broadcast.3928)
  %add.3615 = bf16[1,14336,4096]{2,1,0} add(%mul.11595, %mul.11596)
  %div.2318 = bf16[1,14336,4096]{2,1,0} divide(%add.3615, %div.1466)
  %sqrt.155 = bf16[1,14336,4096]{2,1,0} sqrt(%div.2318)
  %add.3616 = bf16[1,14336,4096]{2,1,0} add(%sqrt.155, %broadcast.3929)
  %multiply.2666 = bf16[1,14336,4096]{2,1,0} multiply(%div.1465, %add.3616)
  %div.2319 = bf16[1,14336,4096]{2,1,0} divide(%add.3614, %multiply.2666)
  %mul.11598 = bf16[1,14336,4096]{2,1,0} multiply(%param.236, %broadcast.3925)
  %add.3617 = bf16[1,14336,4096]{2,1,0} add(%div.2319, %mul.11598)
  %mul.11600 = bf16[1,14336,4096]{2,1,0} multiply(%mul.9949, %add.3617)
  %add.3618 = bf16[1,14336,4096]{2,1,0} add(%param.236, %mul.11600)
  %div.2320 = bf16[4096]{0} divide(%all-reduce.232, %div.1436)
  %select_n.864 = bf16[4096]{0} select(%select_n.701, %all-reduce.232, %div.2320)
  %mul.11602 = bf16[4096]{0} multiply(%select_n.864, %broadcast.3910)
  %param.641 = bf16[4096]{0} parameter(480), sharding={replicated}
  %mul.11604 = bf16[4096]{0} multiply(%param.641, %broadcast.3911)
  %add.3619 = bf16[4096]{0} add(%mul.11602, %mul.11604)
  %integer_pow.155 = bf16[4096]{0} multiply(%select_n.864, %select_n.864)
  %mul.11605 = bf16[4096]{0} multiply(%integer_pow.155, %broadcast.3912)
  %param.642 = bf16[4096]{0} parameter(803), sharding={replicated}
  %mul.11611 = bf16[4096]{0} multiply(%param.642, %broadcast.3913)
  %add.3620 = bf16[4096]{0} add(%mul.11605, %mul.11611)
  %div.2323 = bf16[4096]{0} divide(%add.3620, %div.1439)
  %sqrt.156 = bf16[4096]{0} sqrt(%div.2323)
  %add.3621 = bf16[4096]{0} add(%sqrt.156, %broadcast.3914)
  %multiply.2667 = bf16[4096]{0} multiply(%div.1438, %add.3621)
  %div.2324 = bf16[4096]{0} divide(%add.3619, %multiply.2667)
  %mul.11612 = bf16[4096]{0} multiply(%param.232, %broadcast.3910)
  %add.3622 = bf16[4096]{0} add(%div.2324, %mul.11612)
  %mul.11613 = bf16[4096]{0} multiply(%mul.2424, %add.3622)
  %add.3623 = bf16[4096]{0} add(%param.232, %mul.11613)
  %div.2325 = bf16[4096]{0} divide(%all-reduce.233, %div.1436)
  %select_n.865 = bf16[4096]{0} select(%select_n.701, %all-reduce.233, %div.2325)
  %mul.11615 = bf16[4096]{0} multiply(%select_n.865, %broadcast.3910)
  %param.643 = bf16[4096]{0} parameter(481), sharding={replicated}
  %mul.11616 = bf16[4096]{0} multiply(%param.643, %broadcast.3911)
  %add.3624 = bf16[4096]{0} add(%mul.11615, %mul.11616)
  %integer_pow.156 = bf16[4096]{0} multiply(%select_n.865, %select_n.865)
  %mul.11617 = bf16[4096]{0} multiply(%integer_pow.156, %broadcast.3912)
  %param.644 = bf16[4096]{0} parameter(804), sharding={replicated}
  %mul.11619 = bf16[4096]{0} multiply(%param.644, %broadcast.3913)
  %add.3625 = bf16[4096]{0} add(%mul.11617, %mul.11619)
  %div.2328 = bf16[4096]{0} divide(%add.3625, %div.1439)
  %sqrt.157 = bf16[4096]{0} sqrt(%div.2328)
  %add.3626 = bf16[4096]{0} add(%sqrt.157, %broadcast.3914)
  %multiply.2668 = bf16[4096]{0} multiply(%div.1438, %add.3626)
  %div.2329 = bf16[4096]{0} divide(%add.3624, %multiply.2668)
  %mul.11620 = bf16[4096]{0} multiply(%param.227, %broadcast.3910)
  %add.3627 = bf16[4096]{0} add(%div.2329, %mul.11620)
  %mul.11621 = bf16[4096]{0} multiply(%mul.2424, %add.3627)
  %add.3628 = bf16[4096]{0} add(%param.227, %mul.11621)
  %div.2330 = bf16[512,8,128]{0,2,1} divide(%transpose.385, %div.1479)
  %select_n.866 = bf16[512,8,128]{2,1,0} select(%select_n.713, %transpose.385, %div.2330)
  %mul.11623 = bf16[512,8,128]{2,1,0} multiply(%select_n.866, %broadcast.3930)
  %param.645 = bf16[512,8,128]{2,1,0} parameter(482), sharding={devices=[8,1,1]<=[8]}
  %mul.11624 = bf16[512,8,128]{2,1,0} multiply(%param.645, %broadcast.3931)
  %add.3629 = bf16[512,8,128]{2,1,0} add(%mul.11623, %mul.11624)
  %integer_pow.157 = bf16[512,8,128]{2,1,0} multiply(%select_n.866, %select_n.866)
  %mul.11626 = bf16[512,8,128]{2,1,0} multiply(%integer_pow.157, %broadcast.3932)
  %param.646 = bf16[512,8,128]{2,1,0} parameter(805), sharding={devices=[8,1,1]<=[8]}
  %mul.11627 = bf16[512,8,128]{2,1,0} multiply(%param.646, %broadcast.3933)
  %add.3630 = bf16[512,8,128]{2,1,0} add(%mul.11626, %mul.11627)
  %div.2338 = bf16[512,8,128]{2,1,0} divide(%add.3630, %div.1482)
  %sqrt.158 = bf16[512,8,128]{2,1,0} sqrt(%div.2338)
  %add.3631 = bf16[512,8,128]{2,1,0} add(%sqrt.158, %broadcast.3934)
  %multiply.2669 = bf16[512,8,128]{2,1,0} multiply(%div.1481, %add.3631)
  %div.2339 = bf16[512,8,128]{2,1,0} divide(%add.3629, %multiply.2669)
  %mul.11628 = bf16[512,8,128]{2,1,0} multiply(%param.229, %broadcast.3930)
  %add.3632 = bf16[512,8,128]{2,1,0} add(%div.2339, %mul.11628)
  %mul.11629 = bf16[512,8,128]{2,1,0} multiply(%mul.9984, %add.3632)
  %add.3633 = bf16[512,8,128]{2,1,0} add(%param.229, %mul.11629)
  %div.2340 = bf16[32,128,512]{1,0,2} divide(%transpose.386, %div.1485)
  %select_n.867 = bf16[32,128,512]{2,1,0} select(%select_n.715, %transpose.386, %div.2340)
  %mul.11636 = bf16[32,128,512]{2,1,0} multiply(%select_n.867, %broadcast.3935)
  %param.647 = bf16[32,128,512]{2,1,0} parameter(483), sharding={devices=[1,1,8]<=[8]}
  %mul.11645 = bf16[32,128,512]{2,1,0} multiply(%param.647, %broadcast.3936)
  %add.3634 = bf16[32,128,512]{2,1,0} add(%mul.11636, %mul.11645)
  %integer_pow.158 = bf16[32,128,512]{2,1,0} multiply(%select_n.867, %select_n.867)
  %mul.11650 = bf16[32,128,512]{2,1,0} multiply(%integer_pow.158, %broadcast.3937)
  %param.648 = bf16[32,128,512]{2,1,0} parameter(806), sharding={devices=[1,1,8]<=[8]}
  %mul.11655 = bf16[32,128,512]{2,1,0} multiply(%param.648, %broadcast.3938)
  %add.3635 = bf16[32,128,512]{2,1,0} add(%mul.11650, %mul.11655)
  %div.2343 = bf16[32,128,512]{2,1,0} divide(%add.3635, %div.1488)
  %sqrt.159 = bf16[32,128,512]{2,1,0} sqrt(%div.2343)
  %add.3636 = bf16[32,128,512]{2,1,0} add(%sqrt.159, %broadcast.3939)
  %multiply.2670 = bf16[32,128,512]{2,1,0} multiply(%div.1487, %add.3636)
  %div.2344 = bf16[32,128,512]{2,1,0} divide(%add.3634, %multiply.2670)
  %mul.11656 = bf16[32,128,512]{2,1,0} multiply(%param.231, %broadcast.3935)
  %add.3637 = bf16[32,128,512]{2,1,0} add(%div.2344, %mul.11656)
  %mul.11657 = bf16[32,128,512]{2,1,0} multiply(%mul.9994, %add.3637)
  %add.3638 = bf16[32,128,512]{2,1,0} add(%param.231, %mul.11657)
  %div.2345 = bf16[512,32,128]{0,2,1} divide(%transpose.387, %div.1491)
  %select_n.868 = bf16[512,32,128]{2,1,0} select(%select_n.717, %transpose.387, %div.2345)
  %mul.11667 = bf16[512,32,128]{2,1,0} multiply(%select_n.868, %broadcast.3940)
  %param.649 = bf16[512,32,128]{2,1,0} parameter(484), sharding={devices=[8,1,1]<=[8]}
  %mul.11672 = bf16[512,32,128]{2,1,0} multiply(%param.649, %broadcast.3941)
  %add.3640 = bf16[512,32,128]{2,1,0} add(%mul.11667, %mul.11672)
  %integer_pow.159 = bf16[512,32,128]{2,1,0} multiply(%select_n.868, %select_n.868)
  %mul.11678 = bf16[512,32,128]{2,1,0} multiply(%integer_pow.159, %broadcast.3942)
  %param.650 = bf16[512,32,128]{2,1,0} parameter(807), sharding={devices=[8,1,1]<=[8]}
  %mul.11679 = bf16[512,32,128]{2,1,0} multiply(%param.650, %broadcast.3943)
  %add.3641 = bf16[512,32,128]{2,1,0} add(%mul.11678, %mul.11679)
  %div.2348 = bf16[512,32,128]{2,1,0} divide(%add.3641, %div.1494)
  %sqrt.160 = bf16[512,32,128]{2,1,0} sqrt(%div.2348)
  %add.3643 = bf16[512,32,128]{2,1,0} add(%sqrt.160, %broadcast.3944)
  %multiply.2671 = bf16[512,32,128]{2,1,0} multiply(%div.1493, %add.3643)
  %div.2349 = bf16[512,32,128]{2,1,0} divide(%add.3640, %multiply.2671)
  %mul.11680 = bf16[512,32,128]{2,1,0} multiply(%param.228, %broadcast.3940)
  %add.3644 = bf16[512,32,128]{2,1,0} add(%div.2349, %mul.11680)
  %mul.11681 = bf16[512,32,128]{2,1,0} multiply(%mul.10010, %add.3644)
  %add.3645 = bf16[512,32,128]{2,1,0} add(%param.228, %mul.11681)
  %div.2350 = bf16[512,8,128]{0,2,1} divide(%transpose.388, %div.1479)
  %select_n.869 = bf16[512,8,128]{2,1,0} select(%select_n.713, %transpose.388, %div.2350)
  %mul.11683 = bf16[512,8,128]{2,1,0} multiply(%select_n.869, %broadcast.3930)
  %param.651 = bf16[512,8,128]{2,1,0} parameter(485), sharding={devices=[8,1,1]<=[8]}
  %mul.11684 = bf16[512,8,128]{2,1,0} multiply(%param.651, %broadcast.3931)
  %add.3646 = bf16[512,8,128]{2,1,0} add(%mul.11683, %mul.11684)
  %integer_pow.160 = bf16[512,8,128]{2,1,0} multiply(%select_n.869, %select_n.869)
  %mul.11685 = bf16[512,8,128]{2,1,0} multiply(%integer_pow.160, %broadcast.3932)
  %param.652 = bf16[512,8,128]{2,1,0} parameter(808), sharding={devices=[8,1,1]<=[8]}
  %mul.11687 = bf16[512,8,128]{2,1,0} multiply(%param.652, %broadcast.3933)
  %add.3647 = bf16[512,8,128]{2,1,0} add(%mul.11685, %mul.11687)
  %div.2353 = bf16[512,8,128]{2,1,0} divide(%add.3647, %div.1482)
  %sqrt.161 = bf16[512,8,128]{2,1,0} sqrt(%div.2353)
  %add.3648 = bf16[512,8,128]{2,1,0} add(%sqrt.161, %broadcast.3934)
  %multiply.2672 = bf16[512,8,128]{2,1,0} multiply(%div.1481, %add.3648)
  %div.2354 = bf16[512,8,128]{2,1,0} divide(%add.3646, %multiply.2672)
  %mul.11688 = bf16[512,8,128]{2,1,0} multiply(%param.230, %broadcast.3930)
  %add.3649 = bf16[512,8,128]{2,1,0} add(%div.2354, %mul.11688)
  %mul.11689 = bf16[512,8,128]{2,1,0} multiply(%mul.9984, %add.3649)
  %add.3650 = bf16[512,8,128]{2,1,0} add(%param.230, %mul.11689)
  %div.2355 = bf16[512,8]{1,0} divide(%dynamic-slice.2341, %div.1442)
  %select_n.870 = bf16[512,8]{1,0} select(%select_n.704, %dynamic-slice.2341, %div.2355)
  %mul.11691 = bf16[512,8]{1,0} multiply(%select_n.870, %broadcast.3915)
  %param.653 = bf16[512,8]{1,0} parameter(486), sharding={devices=[8,1]<=[8]}
  %mul.11692 = bf16[512,8]{1,0} multiply(%param.653, %broadcast.3916)
  %add.3651 = bf16[512,8]{1,0} add(%mul.11691, %mul.11692)
  %integer_pow.161 = bf16[512,8]{1,0} multiply(%select_n.870, %select_n.870)
  %mul.11694 = bf16[512,8]{1,0} multiply(%integer_pow.161, %broadcast.3917)
  %param.654 = bf16[512,8]{1,0} parameter(809), sharding={devices=[8,1]<=[8]}
  %mul.11695 = bf16[512,8]{1,0} multiply(%param.654, %broadcast.3918)
  %add.3652 = bf16[512,8]{1,0} add(%mul.11694, %mul.11695)
  %div.2358 = bf16[512,8]{1,0} divide(%add.3652, %div.1446)
  %sqrt.162 = bf16[512,8]{1,0} sqrt(%div.2358)
  %add.3653 = bf16[512,8]{1,0} add(%sqrt.162, %broadcast.3919)
  %multiply.2673 = bf16[512,8]{1,0} multiply(%div.1444, %add.3653)
  %div.2359 = bf16[512,8]{1,0} divide(%add.3651, %multiply.2673)
  %mul.11696 = bf16[512,8]{1,0} multiply(%param.243, %broadcast.3915)
  %add.3655 = bf16[512,8]{1,0} add(%div.2359, %mul.11696)
  %mul.11699 = bf16[512,8]{1,0} multiply(%mul.9922, %add.3655)
  %add.3656 = bf16[512,8]{1,0} add(%param.243, %mul.11699)
  %div.2360 = bf16[1,4096,14336]{2,1,0} divide(%sharding_constraint.2511, %div.1450)
  %select_n.871 = bf16[1,4096,14336]{2,1,0} select(%select_n.706, %sharding_constraint.2511, %div.2360)
  %mul.11705 = bf16[1,4096,14336]{2,1,0} multiply(%select_n.871, %broadcast.3920)
  %param.655 = bf16[1,4096,14336]{2,1,0} parameter(487), sharding={devices=[8,1,1]<=[8]}
  %mul.11706 = bf16[1,4096,14336]{2,1,0} multiply(%param.655, %broadcast.3921)
  %add.3657 = bf16[1,4096,14336]{2,1,0} add(%mul.11705, %mul.11706)
  %integer_pow.162 = bf16[1,4096,14336]{2,1,0} multiply(%select_n.871, %select_n.871)
  %mul.11707 = bf16[1,4096,14336]{2,1,0} multiply(%integer_pow.162, %broadcast.3922)
  %param.656 = bf16[1,4096,14336]{2,1,0} parameter(810), sharding={devices=[8,1,1]<=[8]}
  %mul.11708 = bf16[1,4096,14336]{2,1,0} multiply(%param.656, %broadcast.3923)
  %add.3658 = bf16[1,4096,14336]{2,1,0} add(%mul.11707, %mul.11708)
  %div.2363 = bf16[1,4096,14336]{2,1,0} divide(%add.3658, %div.1455)
  %sqrt.163 = bf16[1,4096,14336]{2,1,0} sqrt(%div.2363)
  %add.3659 = bf16[1,4096,14336]{2,1,0} add(%sqrt.163, %broadcast.3924)
  %multiply.2674 = bf16[1,4096,14336]{2,1,0} multiply(%div.1454, %add.3659)
  %div.2364 = bf16[1,4096,14336]{2,1,0} divide(%add.3657, %multiply.2674)
  %mul.11709 = bf16[1,4096,14336]{2,1,0} multiply(%param.244, %broadcast.3920)
  %add.3660 = bf16[1,4096,14336]{2,1,0} add(%div.2364, %mul.11709)
  %mul.11722 = bf16[1,4096,14336]{2,1,0} multiply(%mul.9929, %add.3660)
  %add.3661 = bf16[1,4096,14336]{2,1,0} add(%param.244, %mul.11722)
  %div.2365 = bf16[1,4096,14336]{2,1,0} divide(%sharding_constraint.2512, %div.1450)
  %select_n.872 = bf16[1,4096,14336]{2,1,0} select(%select_n.706, %sharding_constraint.2512, %div.2365)
  %mul.11724 = bf16[1,4096,14336]{2,1,0} multiply(%select_n.872, %broadcast.3920)
  %param.657 = bf16[1,4096,14336]{2,1,0} parameter(488), sharding={devices=[8,1,1]<=[8]}
  %mul.11725 = bf16[1,4096,14336]{2,1,0} multiply(%param.657, %broadcast.3921)
  %add.3662 = bf16[1,4096,14336]{2,1,0} add(%mul.11724, %mul.11725)
  %integer_pow.163 = bf16[1,4096,14336]{2,1,0} multiply(%select_n.872, %select_n.872)
  %mul.11726 = bf16[1,4096,14336]{2,1,0} multiply(%integer_pow.163, %broadcast.3922)
  %param.658 = bf16[1,4096,14336]{2,1,0} parameter(811), sharding={devices=[8,1,1]<=[8]}
  %mul.11727 = bf16[1,4096,14336]{2,1,0} multiply(%param.658, %broadcast.3923)
  %add.3663 = bf16[1,4096,14336]{2,1,0} add(%mul.11726, %mul.11727)
  %div.2368 = bf16[1,4096,14336]{2,1,0} divide(%add.3663, %div.1455)
  %sqrt.164 = bf16[1,4096,14336]{2,1,0} sqrt(%div.2368)
  %add.3664 = bf16[1,4096,14336]{2,1,0} add(%sqrt.164, %broadcast.3924)
  %multiply.2675 = bf16[1,4096,14336]{2,1,0} multiply(%div.1454, %add.3664)
  %div.2369 = bf16[1,4096,14336]{2,1,0} divide(%add.3662, %multiply.2675)
  %mul.11728 = bf16[1,4096,14336]{2,1,0} multiply(%param.245, %broadcast.3920)
  %add.3665 = bf16[1,4096,14336]{2,1,0} add(%div.2369, %mul.11728)
  %mul.11730 = bf16[1,4096,14336]{2,1,0} multiply(%mul.9929, %add.3665)
  %add.3666 = bf16[1,4096,14336]{2,1,0} add(%param.245, %mul.11730)
  %div.2370 = bf16[1,14336,4096]{2,1,0} divide(%sharding_constraint.2513, %div.1463)
  %select_n.873 = bf16[1,14336,4096]{2,1,0} select(%select_n.709, %sharding_constraint.2513, %div.2370)
  %mul.11732 = bf16[1,14336,4096]{2,1,0} multiply(%select_n.873, %broadcast.3925)
  %param.659 = bf16[1,14336,4096]{2,1,0} parameter(489), sharding={devices=[8,1,1]<=[8]}
  %mul.11736 = bf16[1,14336,4096]{2,1,0} multiply(%param.659, %broadcast.3926)
  %add.3667 = bf16[1,14336,4096]{2,1,0} add(%mul.11732, %mul.11736)
  %integer_pow.164 = bf16[1,14336,4096]{2,1,0} multiply(%select_n.873, %select_n.873)
  %mul.11740 = bf16[1,14336,4096]{2,1,0} multiply(%integer_pow.164, %broadcast.3927)
  %param.660 = bf16[1,14336,4096]{2,1,0} parameter(812), sharding={devices=[8,1,1]<=[8]}
  %mul.11744 = bf16[1,14336,4096]{2,1,0} multiply(%param.660, %broadcast.3928)
  %add.3668 = bf16[1,14336,4096]{2,1,0} add(%mul.11740, %mul.11744)
  %div.2373 = bf16[1,14336,4096]{2,1,0} divide(%add.3668, %div.1466)
  %sqrt.165 = bf16[1,14336,4096]{2,1,0} sqrt(%div.2373)
  %add.3669 = bf16[1,14336,4096]{2,1,0} add(%sqrt.165, %broadcast.3929)
  %multiply.2676 = bf16[1,14336,4096]{2,1,0} multiply(%div.1465, %add.3669)
  %div.2374 = bf16[1,14336,4096]{2,1,0} divide(%add.3667, %multiply.2676)
  %mul.11748 = bf16[1,14336,4096]{2,1,0} multiply(%param.246, %broadcast.3925)
  %add.3670 = bf16[1,14336,4096]{2,1,0} add(%div.2374, %mul.11748)
  %mul.11749 = bf16[1,14336,4096]{2,1,0} multiply(%mul.9949, %add.3670)
  %add.3671 = bf16[1,14336,4096]{2,1,0} add(%param.246, %mul.11749)
  %div.2375 = bf16[4096]{0} divide(%all-reduce.247, %div.1436)
  %select_n.874 = bf16[4096]{0} select(%select_n.701, %all-reduce.247, %div.2375)
  %mul.11751 = bf16[4096]{0} multiply(%select_n.874, %broadcast.3910)
  %param.661 = bf16[4096]{0} parameter(490), sharding={replicated}
  %mul.11752 = bf16[4096]{0} multiply(%param.661, %broadcast.3911)
  %add.3672 = bf16[4096]{0} add(%mul.11751, %mul.11752)
  %integer_pow.165 = bf16[4096]{0} multiply(%select_n.874, %select_n.874)
  %mul.11754 = bf16[4096]{0} multiply(%integer_pow.165, %broadcast.3912)
  %param.662 = bf16[4096]{0} parameter(813), sharding={replicated}
  %mul.11758 = bf16[4096]{0} multiply(%param.662, %broadcast.3913)
  %add.3673 = bf16[4096]{0} add(%mul.11754, %mul.11758)
  %div.2378 = bf16[4096]{0} divide(%add.3673, %div.1439)
  %sqrt.166 = bf16[4096]{0} sqrt(%div.2378)
  %add.3674 = bf16[4096]{0} add(%sqrt.166, %broadcast.3914)
  %multiply.2677 = bf16[4096]{0} multiply(%div.1438, %add.3674)
  %div.2379 = bf16[4096]{0} divide(%add.3672, %multiply.2677)
  %mul.11762 = bf16[4096]{0} multiply(%param.242, %broadcast.3910)
  %add.3675 = bf16[4096]{0} add(%div.2379, %mul.11762)
  %mul.11770 = bf16[4096]{0} multiply(%mul.2424, %add.3675)
  %add.3676 = bf16[4096]{0} add(%param.242, %mul.11770)
  %div.2380 = bf16[4096]{0} divide(%all-reduce.248, %div.1436)
  %select_n.875 = bf16[4096]{0} select(%select_n.701, %all-reduce.248, %div.2380)
  %mul.11778 = bf16[4096]{0} multiply(%select_n.875, %broadcast.3910)
  %param.663 = bf16[4096]{0} parameter(491), sharding={replicated}
  %mul.11784 = bf16[4096]{0} multiply(%param.663, %broadcast.3911)
  %add.3677 = bf16[4096]{0} add(%mul.11778, %mul.11784)
  %integer_pow.166 = bf16[4096]{0} multiply(%select_n.875, %select_n.875)
  %mul.11785 = bf16[4096]{0} multiply(%integer_pow.166, %broadcast.3912)
  %param.664 = bf16[4096]{0} parameter(814), sharding={replicated}
  %mul.11786 = bf16[4096]{0} multiply(%param.664, %broadcast.3913)
  %add.3678 = bf16[4096]{0} add(%mul.11785, %mul.11786)
  %div.2383 = bf16[4096]{0} divide(%add.3678, %div.1439)
  %sqrt.167 = bf16[4096]{0} sqrt(%div.2383)
  %add.3679 = bf16[4096]{0} add(%sqrt.167, %broadcast.3914)
  %multiply.2678 = bf16[4096]{0} multiply(%div.1438, %add.3679)
  %div.2384 = bf16[4096]{0} divide(%add.3677, %multiply.2678)
  %mul.11787 = bf16[4096]{0} multiply(%param.237, %broadcast.3910)
  %add.3680 = bf16[4096]{0} add(%div.2384, %mul.11787)
  %mul.11788 = bf16[4096]{0} multiply(%mul.2424, %add.3680)
  %add.3681 = bf16[4096]{0} add(%param.237, %mul.11788)
  %div.2385 = bf16[512,8,128]{0,2,1} divide(%transpose.389, %div.1479)
  %select_n.876 = bf16[512,8,128]{2,1,0} select(%select_n.713, %transpose.389, %div.2385)
  %mul.11796 = bf16[512,8,128]{2,1,0} multiply(%select_n.876, %broadcast.3930)
  %param.665 = bf16[512,8,128]{2,1,0} parameter(492), sharding={devices=[8,1,1]<=[8]}
  %mul.11797 = bf16[512,8,128]{2,1,0} multiply(%param.665, %broadcast.3931)
  %add.3682 = bf16[512,8,128]{2,1,0} add(%mul.11796, %mul.11797)
  %integer_pow.167 = bf16[512,8,128]{2,1,0} multiply(%select_n.876, %select_n.876)
  %mul.11798 = bf16[512,8,128]{2,1,0} multiply(%integer_pow.167, %broadcast.3932)
  %param.666 = bf16[512,8,128]{2,1,0} parameter(815), sharding={devices=[8,1,1]<=[8]}
  %mul.11799 = bf16[512,8,128]{2,1,0} multiply(%param.666, %broadcast.3933)
  %add.3684 = bf16[512,8,128]{2,1,0} add(%mul.11798, %mul.11799)
  %div.2388 = bf16[512,8,128]{2,1,0} divide(%add.3684, %div.1482)
  %sqrt.168 = bf16[512,8,128]{2,1,0} sqrt(%div.2388)
  %add.3685 = bf16[512,8,128]{2,1,0} add(%sqrt.168, %broadcast.3934)
  %multiply.2679 = bf16[512,8,128]{2,1,0} multiply(%div.1481, %add.3685)
  %div.2389 = bf16[512,8,128]{2,1,0} divide(%add.3682, %multiply.2679)
  %mul.11800 = bf16[512,8,128]{2,1,0} multiply(%param.239, %broadcast.3930)
  %add.3686 = bf16[512,8,128]{2,1,0} add(%div.2389, %mul.11800)
  %mul.11801 = bf16[512,8,128]{2,1,0} multiply(%mul.9984, %add.3686)
  %add.3687 = bf16[512,8,128]{2,1,0} add(%param.239, %mul.11801)
  %div.2390 = bf16[32,128,512]{1,0,2} divide(%transpose.390, %div.1485)
  %select_n.877 = bf16[32,128,512]{2,1,0} select(%select_n.715, %transpose.390, %div.2390)
  %mul.11819 = bf16[32,128,512]{2,1,0} multiply(%select_n.877, %broadcast.3935)
  %param.667 = bf16[32,128,512]{2,1,0} parameter(493), sharding={devices=[1,1,8]<=[8]}
  %mul.11820 = bf16[32,128,512]{2,1,0} multiply(%param.667, %broadcast.3936)
  %add.3688 = bf16[32,128,512]{2,1,0} add(%mul.11819, %mul.11820)
  %integer_pow.168 = bf16[32,128,512]{2,1,0} multiply(%select_n.877, %select_n.877)
  %mul.11821 = bf16[32,128,512]{2,1,0} multiply(%integer_pow.168, %broadcast.3937)
  %param.668 = bf16[32,128,512]{2,1,0} parameter(816), sharding={devices=[1,1,8]<=[8]}
  %mul.11822 = bf16[32,128,512]{2,1,0} multiply(%param.668, %broadcast.3938)
  %add.3689 = bf16[32,128,512]{2,1,0} add(%mul.11821, %mul.11822)
  %div.2393 = bf16[32,128,512]{2,1,0} divide(%add.3689, %div.1488)
  %sqrt.169 = bf16[32,128,512]{2,1,0} sqrt(%div.2393)
  %add.3690 = bf16[32,128,512]{2,1,0} add(%sqrt.169, %broadcast.3939)
  %multiply.2680 = bf16[32,128,512]{2,1,0} multiply(%div.1487, %add.3690)
  %div.2394 = bf16[32,128,512]{2,1,0} divide(%add.3688, %multiply.2680)
  %mul.11824 = bf16[32,128,512]{2,1,0} multiply(%param.241, %broadcast.3935)
  %add.3691 = bf16[32,128,512]{2,1,0} add(%div.2394, %mul.11824)
  %mul.11825 = bf16[32,128,512]{2,1,0} multiply(%mul.9994, %add.3691)
  %add.3693 = bf16[32,128,512]{2,1,0} add(%param.241, %mul.11825)
  %div.2395 = bf16[512,32,128]{0,2,1} divide(%transpose.391, %div.1491)
  %select_n.878 = bf16[512,32,128]{2,1,0} select(%select_n.717, %transpose.391, %div.2395)
  %mul.11827 = bf16[512,32,128]{2,1,0} multiply(%select_n.878, %broadcast.3940)
  %param.669 = bf16[512,32,128]{2,1,0} parameter(494), sharding={devices=[8,1,1]<=[8]}
  %mul.11828 = bf16[512,32,128]{2,1,0} multiply(%param.669, %broadcast.3941)
  %add.3694 = bf16[512,32,128]{2,1,0} add(%mul.11827, %mul.11828)
  %integer_pow.169 = bf16[512,32,128]{2,1,0} multiply(%select_n.878, %select_n.878)
  %mul.11829 = bf16[512,32,128]{2,1,0} multiply(%integer_pow.169, %broadcast.3942)
  %param.670 = bf16[512,32,128]{2,1,0} parameter(817), sharding={devices=[8,1,1]<=[8]}
  %mul.11830 = bf16[512,32,128]{2,1,0} multiply(%param.670, %broadcast.3943)
  %add.3695 = bf16[512,32,128]{2,1,0} add(%mul.11829, %mul.11830)
  %div.2398 = bf16[512,32,128]{2,1,0} divide(%add.3695, %div.1494)
  %sqrt.170 = bf16[512,32,128]{2,1,0} sqrt(%div.2398)
  %add.3696 = bf16[512,32,128]{2,1,0} add(%sqrt.170, %broadcast.3944)
  %multiply.2681 = bf16[512,32,128]{2,1,0} multiply(%div.1493, %add.3696)
  %div.2399 = bf16[512,32,128]{2,1,0} divide(%add.3694, %multiply.2681)
  %mul.11831 = bf16[512,32,128]{2,1,0} multiply(%param.238, %broadcast.3940)
  %add.3697 = bf16[512,32,128]{2,1,0} add(%div.2399, %mul.11831)
  %mul.11832 = bf16[512,32,128]{2,1,0} multiply(%mul.10010, %add.3697)
  %add.3698 = bf16[512,32,128]{2,1,0} add(%param.238, %mul.11832)
  %div.2400 = bf16[512,8,128]{0,2,1} divide(%transpose.392, %div.1479)
  %select_n.879 = bf16[512,8,128]{2,1,0} select(%select_n.713, %transpose.392, %div.2400)
  %mul.11837 = bf16[512,8,128]{2,1,0} multiply(%select_n.879, %broadcast.3930)
  %param.671 = bf16[512,8,128]{2,1,0} parameter(495), sharding={devices=[8,1,1]<=[8]}
  %mul.11840 = bf16[512,8,128]{2,1,0} multiply(%param.671, %broadcast.3931)
  %add.3699 = bf16[512,8,128]{2,1,0} add(%mul.11837, %mul.11840)
  %integer_pow.170 = bf16[512,8,128]{2,1,0} multiply(%select_n.879, %select_n.879)
  %mul.11841 = bf16[512,8,128]{2,1,0} multiply(%integer_pow.170, %broadcast.3932)
  %param.672 = bf16[512,8,128]{2,1,0} parameter(818), sharding={devices=[8,1,1]<=[8]}
  %mul.11850 = bf16[512,8,128]{2,1,0} multiply(%param.672, %broadcast.3933)
  %add.3700 = bf16[512,8,128]{2,1,0} add(%mul.11841, %mul.11850)
  %div.2405 = bf16[512,8,128]{2,1,0} divide(%add.3700, %div.1482)
  %sqrt.171 = bf16[512,8,128]{2,1,0} sqrt(%div.2405)
  %add.3701 = bf16[512,8,128]{2,1,0} add(%sqrt.171, %broadcast.3934)
  %multiply.2682 = bf16[512,8,128]{2,1,0} multiply(%div.1481, %add.3701)
  %div.2406 = bf16[512,8,128]{2,1,0} divide(%add.3699, %multiply.2682)
  %mul.11859 = bf16[512,8,128]{2,1,0} multiply(%param.240, %broadcast.3930)
  %add.3702 = bf16[512,8,128]{2,1,0} add(%div.2406, %mul.11859)
  %mul.11860 = bf16[512,8,128]{2,1,0} multiply(%mul.9984, %add.3702)
  %add.3703 = bf16[512,8,128]{2,1,0} add(%param.240, %mul.11860)
  %div.2407 = bf16[512,8]{1,0} divide(%dynamic-slice.2351, %div.1442)
  %select_n.880 = bf16[512,8]{1,0} select(%select_n.704, %dynamic-slice.2351, %div.2407)
  %mul.11871 = bf16[512,8]{1,0} multiply(%select_n.880, %broadcast.3915)
  %param.673 = bf16[512,8]{1,0} parameter(496), sharding={devices=[8,1]<=[8]}
  %mul.11872 = bf16[512,8]{1,0} multiply(%param.673, %broadcast.3916)
  %add.3704 = bf16[512,8]{1,0} add(%mul.11871, %mul.11872)
  %integer_pow.171 = bf16[512,8]{1,0} multiply(%select_n.880, %select_n.880)
  %mul.11873 = bf16[512,8]{1,0} multiply(%integer_pow.171, %broadcast.3917)
  %param.674 = bf16[512,8]{1,0} parameter(819), sharding={devices=[8,1]<=[8]}
  %mul.11874 = bf16[512,8]{1,0} multiply(%param.674, %broadcast.3918)
  %add.3705 = bf16[512,8]{1,0} add(%mul.11873, %mul.11874)
  %div.2410 = bf16[512,8]{1,0} divide(%add.3705, %div.1446)
  %sqrt.172 = bf16[512,8]{1,0} sqrt(%div.2410)
  %add.3706 = bf16[512,8]{1,0} add(%sqrt.172, %broadcast.3919)
  %multiply.2683 = bf16[512,8]{1,0} multiply(%div.1444, %add.3706)
  %div.2411 = bf16[512,8]{1,0} divide(%add.3704, %multiply.2683)
  %mul.11875 = bf16[512,8]{1,0} multiply(%param.253, %broadcast.3915)
  %add.3707 = bf16[512,8]{1,0} add(%div.2411, %mul.11875)
  %mul.11876 = bf16[512,8]{1,0} multiply(%mul.9922, %add.3707)
  %add.3708 = bf16[512,8]{1,0} add(%param.253, %mul.11876)
  %div.2412 = bf16[1,4096,14336]{2,1,0} divide(%sharding_constraint.2514, %div.1450)
  %select_n.881 = bf16[1,4096,14336]{2,1,0} select(%select_n.706, %sharding_constraint.2514, %div.2412)
  %mul.11878 = bf16[1,4096,14336]{2,1,0} multiply(%select_n.881, %broadcast.3920)
  %param.675 = bf16[1,4096,14336]{2,1,0} parameter(497), sharding={devices=[8,1,1]<=[8]}
  %mul.11879 = bf16[1,4096,14336]{2,1,0} multiply(%param.675, %broadcast.3921)
  %add.3709 = bf16[1,4096,14336]{2,1,0} add(%mul.11878, %mul.11879)
  %integer_pow.172 = bf16[1,4096,14336]{2,1,0} multiply(%select_n.881, %select_n.881)
  %mul.11881 = bf16[1,4096,14336]{2,1,0} multiply(%integer_pow.172, %broadcast.3922)
  %param.676 = bf16[1,4096,14336]{2,1,0} parameter(820), sharding={devices=[8,1,1]<=[8]}
  %mul.11882 = bf16[1,4096,14336]{2,1,0} multiply(%param.676, %broadcast.3923)
  %add.3711 = bf16[1,4096,14336]{2,1,0} add(%mul.11881, %mul.11882)
  %div.2415 = bf16[1,4096,14336]{2,1,0} divide(%add.3711, %div.1455)
  %sqrt.173 = bf16[1,4096,14336]{2,1,0} sqrt(%div.2415)
  %add.3712 = bf16[1,4096,14336]{2,1,0} add(%sqrt.173, %broadcast.3924)
  %multiply.2684 = bf16[1,4096,14336]{2,1,0} multiply(%div.1454, %add.3712)
  %div.2416 = bf16[1,4096,14336]{2,1,0} divide(%add.3709, %multiply.2684)
  %mul.11883 = bf16[1,4096,14336]{2,1,0} multiply(%param.254, %broadcast.3920)
  %add.3713 = bf16[1,4096,14336]{2,1,0} add(%div.2416, %mul.11883)
  %mul.11884 = bf16[1,4096,14336]{2,1,0} multiply(%mul.9929, %add.3713)
  %add.3715 = bf16[1,4096,14336]{2,1,0} add(%param.254, %mul.11884)
  %div.2417 = bf16[1,4096,14336]{2,1,0} divide(%sharding_constraint.2515, %div.1450)
  %select_n.882 = bf16[1,4096,14336]{2,1,0} select(%select_n.706, %sharding_constraint.2515, %div.2417)
  %mul.11886 = bf16[1,4096,14336]{2,1,0} multiply(%select_n.882, %broadcast.3920)
  %param.677 = bf16[1,4096,14336]{2,1,0} parameter(498), sharding={devices=[8,1,1]<=[8]}
  %mul.11887 = bf16[1,4096,14336]{2,1,0} multiply(%param.677, %broadcast.3921)
  %add.3716 = bf16[1,4096,14336]{2,1,0} add(%mul.11886, %mul.11887)
  %integer_pow.173 = bf16[1,4096,14336]{2,1,0} multiply(%select_n.882, %select_n.882)
  %mul.11891 = bf16[1,4096,14336]{2,1,0} multiply(%integer_pow.173, %broadcast.3922)
  %param.678 = bf16[1,4096,14336]{2,1,0} parameter(821), sharding={devices=[8,1,1]<=[8]}
  %mul.11892 = bf16[1,4096,14336]{2,1,0} multiply(%param.678, %broadcast.3923)
  %add.3717 = bf16[1,4096,14336]{2,1,0} add(%mul.11891, %mul.11892)
  %div.2420 = bf16[1,4096,14336]{2,1,0} divide(%add.3717, %div.1455)
  %sqrt.174 = bf16[1,4096,14336]{2,1,0} sqrt(%div.2420)
  %add.3718 = bf16[1,4096,14336]{2,1,0} add(%sqrt.174, %broadcast.3924)
  %multiply.2685 = bf16[1,4096,14336]{2,1,0} multiply(%div.1454, %add.3718)
  %div.2421 = bf16[1,4096,14336]{2,1,0} divide(%add.3716, %multiply.2685)
  %mul.11893 = bf16[1,4096,14336]{2,1,0} multiply(%param.255, %broadcast.3920)
  %add.3719 = bf16[1,4096,14336]{2,1,0} add(%div.2421, %mul.11893)
  %mul.11897 = bf16[1,4096,14336]{2,1,0} multiply(%mul.9929, %add.3719)
  %add.3720 = bf16[1,4096,14336]{2,1,0} add(%param.255, %mul.11897)
  %div.2422 = bf16[1,14336,4096]{2,1,0} divide(%sharding_constraint.2516, %div.1463)
  %select_n.883 = bf16[1,14336,4096]{2,1,0} select(%select_n.709, %sharding_constraint.2516, %div.2422)
  %mul.11905 = bf16[1,14336,4096]{2,1,0} multiply(%select_n.883, %broadcast.3925)
  %param.679 = bf16[1,14336,4096]{2,1,0} parameter(499), sharding={devices=[8,1,1]<=[8]}
  %mul.11906 = bf16[1,14336,4096]{2,1,0} multiply(%param.679, %broadcast.3926)
  %add.3721 = bf16[1,14336,4096]{2,1,0} add(%mul.11905, %mul.11906)
  %integer_pow.174 = bf16[1,14336,4096]{2,1,0} multiply(%select_n.883, %select_n.883)
  %mul.11907 = bf16[1,14336,4096]{2,1,0} multiply(%integer_pow.174, %broadcast.3927)
  %param.680 = bf16[1,14336,4096]{2,1,0} parameter(822), sharding={devices=[8,1,1]<=[8]}
  %mul.11908 = bf16[1,14336,4096]{2,1,0} multiply(%param.680, %broadcast.3928)
  %add.3722 = bf16[1,14336,4096]{2,1,0} add(%mul.11907, %mul.11908)
  %div.2425 = bf16[1,14336,4096]{2,1,0} divide(%add.3722, %div.1466)
  %sqrt.175 = bf16[1,14336,4096]{2,1,0} sqrt(%div.2425)
  %add.3723 = bf16[1,14336,4096]{2,1,0} add(%sqrt.175, %broadcast.3929)
  %multiply.2686 = bf16[1,14336,4096]{2,1,0} multiply(%div.1465, %add.3723)
  %div.2426 = bf16[1,14336,4096]{2,1,0} divide(%add.3721, %multiply.2686)
  %mul.11909 = bf16[1,14336,4096]{2,1,0} multiply(%param.256, %broadcast.3925)
  %add.3724 = bf16[1,14336,4096]{2,1,0} add(%div.2426, %mul.11909)
  %mul.11910 = bf16[1,14336,4096]{2,1,0} multiply(%mul.9949, %add.3724)
  %add.3725 = bf16[1,14336,4096]{2,1,0} add(%param.256, %mul.11910)
  %div.2427 = bf16[4096]{0} divide(%all-reduce.262, %div.1436)
  %select_n.884 = bf16[4096]{0} select(%select_n.701, %all-reduce.262, %div.2427)
  %mul.11912 = bf16[4096]{0} multiply(%select_n.884, %broadcast.3910)
  %param.681 = bf16[4096]{0} parameter(500), sharding={replicated}
  %mul.11913 = bf16[4096]{0} multiply(%param.681, %broadcast.3911)
  %add.3726 = bf16[4096]{0} add(%mul.11912, %mul.11913)
  %integer_pow.175 = bf16[4096]{0} multiply(%select_n.884, %select_n.884)
  %mul.11914 = bf16[4096]{0} multiply(%integer_pow.175, %broadcast.3912)
  %param.682 = bf16[4096]{0} parameter(823), sharding={replicated}
  %mul.11915 = bf16[4096]{0} multiply(%param.682, %broadcast.3913)
  %add.3727 = bf16[4096]{0} add(%mul.11914, %mul.11915)
  %div.2430 = bf16[4096]{0} divide(%add.3727, %div.1439)
  %sqrt.176 = bf16[4096]{0} sqrt(%div.2430)
  %add.3728 = bf16[4096]{0} add(%sqrt.176, %broadcast.3914)
  %multiply.2687 = bf16[4096]{0} multiply(%div.1438, %add.3728)
  %div.2431 = bf16[4096]{0} divide(%add.3726, %multiply.2687)
  %mul.11916 = bf16[4096]{0} multiply(%param.252, %broadcast.3910)
  %add.3729 = bf16[4096]{0} add(%div.2431, %mul.11916)
  %mul.11918 = bf16[4096]{0} multiply(%mul.2424, %add.3729)
  %add.3730 = bf16[4096]{0} add(%param.252, %mul.11918)
  %div.2432 = bf16[4096]{0} divide(%all-reduce.263, %div.1436)
  %select_n.885 = bf16[4096]{0} select(%select_n.701, %all-reduce.263, %div.2432)
  %mul.11920 = bf16[4096]{0} multiply(%select_n.885, %broadcast.3910)
  %param.683 = bf16[4096]{0} parameter(501), sharding={replicated}
  %mul.11921 = bf16[4096]{0} multiply(%param.683, %broadcast.3911)
  %add.3731 = bf16[4096]{0} add(%mul.11920, %mul.11921)
  %integer_pow.176 = bf16[4096]{0} multiply(%select_n.885, %select_n.885)
  %mul.11922 = bf16[4096]{0} multiply(%integer_pow.176, %broadcast.3912)
  %param.684 = bf16[4096]{0} parameter(824), sharding={replicated}
  %mul.11923 = bf16[4096]{0} multiply(%param.684, %broadcast.3913)
  %add.3734 = bf16[4096]{0} add(%mul.11922, %mul.11923)
  %div.2435 = bf16[4096]{0} divide(%add.3734, %div.1439)
  %sqrt.177 = bf16[4096]{0} sqrt(%div.2435)
  %add.3735 = bf16[4096]{0} add(%sqrt.177, %broadcast.3914)
  %multiply.2688 = bf16[4096]{0} multiply(%div.1438, %add.3735)
  %div.2436 = bf16[4096]{0} divide(%add.3731, %multiply.2688)
  %mul.11924 = bf16[4096]{0} multiply(%param.247, %broadcast.3910)
  %add.3736 = bf16[4096]{0} add(%div.2436, %mul.11924)
  %mul.11925 = bf16[4096]{0} multiply(%mul.2424, %add.3736)
  %add.3737 = bf16[4096]{0} add(%param.247, %mul.11925)
  %div.2438 = bf16[512,8,128]{0,2,1} divide(%transpose.393, %div.1479)
  %select_n.886 = bf16[512,8,128]{2,1,0} select(%select_n.713, %transpose.393, %div.2438)
  %mul.11927 = bf16[512,8,128]{2,1,0} multiply(%select_n.886, %broadcast.3930)
  %param.685 = bf16[512,8,128]{2,1,0} parameter(502), sharding={devices=[8,1,1]<=[8]}
  %mul.11933 = bf16[512,8,128]{2,1,0} multiply(%param.685, %broadcast.3931)
  %add.3738 = bf16[512,8,128]{2,1,0} add(%mul.11927, %mul.11933)
  %integer_pow.177 = bf16[512,8,128]{2,1,0} multiply(%select_n.886, %select_n.886)
  %mul.11934 = bf16[512,8,128]{2,1,0} multiply(%integer_pow.177, %broadcast.3932)
  %param.686 = bf16[512,8,128]{2,1,0} parameter(825), sharding={devices=[8,1,1]<=[8]}
  %mul.11939 = bf16[512,8,128]{2,1,0} multiply(%param.686, %broadcast.3933)
  %add.3739 = bf16[512,8,128]{2,1,0} add(%mul.11934, %mul.11939)
  %div.2441 = bf16[512,8,128]{2,1,0} divide(%add.3739, %div.1482)
  %sqrt.178 = bf16[512,8,128]{2,1,0} sqrt(%div.2441)
  %add.3740 = bf16[512,8,128]{2,1,0} add(%sqrt.178, %broadcast.3934)
  %multiply.2689 = bf16[512,8,128]{2,1,0} multiply(%div.1481, %add.3740)
  %div.2442 = bf16[512,8,128]{2,1,0} divide(%add.3738, %multiply.2689)
  %mul.11940 = bf16[512,8,128]{2,1,0} multiply(%param.249, %broadcast.3930)
  %add.3741 = bf16[512,8,128]{2,1,0} add(%div.2442, %mul.11940)
  %mul.11941 = bf16[512,8,128]{2,1,0} multiply(%mul.9984, %add.3741)
  %add.3742 = bf16[512,8,128]{2,1,0} add(%param.249, %mul.11941)
  %div.2443 = bf16[32,128,512]{1,0,2} divide(%transpose.394, %div.1485)
  %select_n.887 = bf16[32,128,512]{2,1,0} select(%select_n.715, %transpose.394, %div.2443)
  %mul.11943 = bf16[32,128,512]{2,1,0} multiply(%select_n.887, %broadcast.3935)
  %param.687 = bf16[32,128,512]{2,1,0} parameter(503), sharding={devices=[1,1,8]<=[8]}
  %mul.11944 = bf16[32,128,512]{2,1,0} multiply(%param.687, %broadcast.3936)
  %add.3743 = bf16[32,128,512]{2,1,0} add(%mul.11943, %mul.11944)
  %integer_pow.178 = bf16[32,128,512]{2,1,0} multiply(%select_n.887, %select_n.887)
  %mul.11945 = bf16[32,128,512]{2,1,0} multiply(%integer_pow.178, %broadcast.3937)
  %param.688 = bf16[32,128,512]{2,1,0} parameter(826), sharding={devices=[1,1,8]<=[8]}
  %mul.11946 = bf16[32,128,512]{2,1,0} multiply(%param.688, %broadcast.3938)
  %add.3744 = bf16[32,128,512]{2,1,0} add(%mul.11945, %mul.11946)
  %div.2446 = bf16[32,128,512]{2,1,0} divide(%add.3744, %div.1488)
  %sqrt.179 = bf16[32,128,512]{2,1,0} sqrt(%div.2446)
  %add.3745 = bf16[32,128,512]{2,1,0} add(%sqrt.179, %broadcast.3939)
  %multiply.2690 = bf16[32,128,512]{2,1,0} multiply(%div.1487, %add.3745)
  %div.2447 = bf16[32,128,512]{2,1,0} divide(%add.3743, %multiply.2690)
  %mul.11947 = bf16[32,128,512]{2,1,0} multiply(%param.251, %broadcast.3935)
  %add.3746 = bf16[32,128,512]{2,1,0} add(%div.2447, %mul.11947)
  %mul.11948 = bf16[32,128,512]{2,1,0} multiply(%mul.9994, %add.3746)
  %add.3747 = bf16[32,128,512]{2,1,0} add(%param.251, %mul.11948)
  %div.2448 = bf16[512,32,128]{0,2,1} divide(%transpose.395, %div.1491)
  %select_n.888 = bf16[512,32,128]{2,1,0} select(%select_n.717, %transpose.395, %div.2448)
  %mul.11950 = bf16[512,32,128]{2,1,0} multiply(%select_n.888, %broadcast.3940)
  %param.689 = bf16[512,32,128]{2,1,0} parameter(504), sharding={devices=[8,1,1]<=[8]}
  %mul.11951 = bf16[512,32,128]{2,1,0} multiply(%param.689, %broadcast.3941)
  %add.3748 = bf16[512,32,128]{2,1,0} add(%mul.11950, %mul.11951)
  %integer_pow.179 = bf16[512,32,128]{2,1,0} multiply(%select_n.888, %select_n.888)
  %mul.11952 = bf16[512,32,128]{2,1,0} multiply(%integer_pow.179, %broadcast.3942)
  %param.690 = bf16[512,32,128]{2,1,0} parameter(827), sharding={devices=[8,1,1]<=[8]}
  %mul.11953 = bf16[512,32,128]{2,1,0} multiply(%param.690, %broadcast.3943)
  %add.3749 = bf16[512,32,128]{2,1,0} add(%mul.11952, %mul.11953)
  %div.2451 = bf16[512,32,128]{2,1,0} divide(%add.3749, %div.1494)
  %sqrt.180 = bf16[512,32,128]{2,1,0} sqrt(%div.2451)
  %add.3751 = bf16[512,32,128]{2,1,0} add(%sqrt.180, %broadcast.3944)
  %multiply.2691 = bf16[512,32,128]{2,1,0} multiply(%div.1493, %add.3751)
  %div.2452 = bf16[512,32,128]{2,1,0} divide(%add.3748, %multiply.2691)
  %mul.11954 = bf16[512,32,128]{2,1,0} multiply(%param.248, %broadcast.3940)
  %add.3752 = bf16[512,32,128]{2,1,0} add(%div.2452, %mul.11954)
  %mul.11955 = bf16[512,32,128]{2,1,0} multiply(%mul.10010, %add.3752)
  %add.3753 = bf16[512,32,128]{2,1,0} add(%param.248, %mul.11955)
  %div.2453 = bf16[512,8,128]{0,2,1} divide(%transpose.396, %div.1479)
  %select_n.889 = bf16[512,8,128]{2,1,0} select(%select_n.713, %transpose.396, %div.2453)
  %mul.11957 = bf16[512,8,128]{2,1,0} multiply(%select_n.889, %broadcast.3930)
  %param.691 = bf16[512,8,128]{2,1,0} parameter(505), sharding={devices=[8,1,1]<=[8]}
  %mul.11958 = bf16[512,8,128]{2,1,0} multiply(%param.691, %broadcast.3931)
  %add.3754 = bf16[512,8,128]{2,1,0} add(%mul.11957, %mul.11958)
  %integer_pow.180 = bf16[512,8,128]{2,1,0} multiply(%select_n.889, %select_n.889)
  %mul.11959 = bf16[512,8,128]{2,1,0} multiply(%integer_pow.180, %broadcast.3932)
  %param.692 = bf16[512,8,128]{2,1,0} parameter(828), sharding={devices=[8,1,1]<=[8]}
  %mul.11963 = bf16[512,8,128]{2,1,0} multiply(%param.692, %broadcast.3933)
  %add.3755 = bf16[512,8,128]{2,1,0} add(%mul.11959, %mul.11963)
  %div.2456 = bf16[512,8,128]{2,1,0} divide(%add.3755, %div.1482)
  %sqrt.181 = bf16[512,8,128]{2,1,0} sqrt(%div.2456)
  %add.3756 = bf16[512,8,128]{2,1,0} add(%sqrt.181, %broadcast.3934)
  %multiply.2692 = bf16[512,8,128]{2,1,0} multiply(%div.1481, %add.3756)
  %div.2457 = bf16[512,8,128]{2,1,0} divide(%add.3754, %multiply.2692)
  %mul.11966 = bf16[512,8,128]{2,1,0} multiply(%param.250, %broadcast.3930)
  %add.3757 = bf16[512,8,128]{2,1,0} add(%div.2457, %mul.11966)
  %mul.11967 = bf16[512,8,128]{2,1,0} multiply(%mul.9984, %add.3757)
  %add.3758 = bf16[512,8,128]{2,1,0} add(%param.250, %mul.11967)
  %div.2458 = bf16[512,8]{1,0} divide(%dynamic-slice.2361, %div.1442)
  %select_n.890 = bf16[512,8]{1,0} select(%select_n.704, %dynamic-slice.2361, %div.2458)
  %mul.11970 = bf16[512,8]{1,0} multiply(%select_n.890, %broadcast.3915)
  %param.693 = bf16[512,8]{1,0} parameter(506), sharding={devices=[8,1]<=[8]}
  %mul.11971 = bf16[512,8]{1,0} multiply(%param.693, %broadcast.3916)
  %add.3759 = bf16[512,8]{1,0} add(%mul.11970, %mul.11971)
  %integer_pow.181 = bf16[512,8]{1,0} multiply(%select_n.890, %select_n.890)
  %mul.11972 = bf16[512,8]{1,0} multiply(%integer_pow.181, %broadcast.3917)
  %param.694 = bf16[512,8]{1,0} parameter(829), sharding={devices=[8,1]<=[8]}
  %mul.11973 = bf16[512,8]{1,0} multiply(%param.694, %broadcast.3918)
  %add.3760 = bf16[512,8]{1,0} add(%mul.11972, %mul.11973)
  %div.2463 = bf16[512,8]{1,0} divide(%add.3760, %div.1446)
  %sqrt.182 = bf16[512,8]{1,0} sqrt(%div.2463)
  %add.3761 = bf16[512,8]{1,0} add(%sqrt.182, %broadcast.3919)
  %multiply.2693 = bf16[512,8]{1,0} multiply(%div.1444, %add.3761)
  %div.2471 = bf16[512,8]{1,0} divide(%add.3759, %multiply.2693)
  %mul.11974 = bf16[512,8]{1,0} multiply(%param.263, %broadcast.3915)
  %add.3763 = bf16[512,8]{1,0} add(%div.2471, %mul.11974)
  %mul.11975 = bf16[512,8]{1,0} multiply(%mul.9922, %add.3763)
  %add.3764 = bf16[512,8]{1,0} add(%param.263, %mul.11975)
  %div.2472 = bf16[1,4096,14336]{2,1,0} divide(%sharding_constraint.2517, %div.1450)
  %select_n.891 = bf16[1,4096,14336]{2,1,0} select(%select_n.706, %sharding_constraint.2517, %div.2472)
  %mul.11977 = bf16[1,4096,14336]{2,1,0} multiply(%select_n.891, %broadcast.3920)
  %param.695 = bf16[1,4096,14336]{2,1,0} parameter(507), sharding={devices=[8,1,1]<=[8]}
  %mul.11978 = bf16[1,4096,14336]{2,1,0} multiply(%param.695, %broadcast.3921)
  %add.3765 = bf16[1,4096,14336]{2,1,0} add(%mul.11977, %mul.11978)
  %integer_pow.182 = bf16[1,4096,14336]{2,1,0} multiply(%select_n.891, %select_n.891)
  %mul.11979 = bf16[1,4096,14336]{2,1,0} multiply(%integer_pow.182, %broadcast.3922)
  %param.696 = bf16[1,4096,14336]{2,1,0} parameter(830), sharding={devices=[8,1,1]<=[8]}
  %mul.11980 = bf16[1,4096,14336]{2,1,0} multiply(%param.696, %broadcast.3923)
  %add.3766 = bf16[1,4096,14336]{2,1,0} add(%mul.11979, %mul.11980)
  %div.2475 = bf16[1,4096,14336]{2,1,0} divide(%add.3766, %div.1455)
  %sqrt.183 = bf16[1,4096,14336]{2,1,0} sqrt(%div.2475)
  %add.3767 = bf16[1,4096,14336]{2,1,0} add(%sqrt.183, %broadcast.3924)
  %multiply.2694 = bf16[1,4096,14336]{2,1,0} multiply(%div.1454, %add.3767)
  %div.2476 = bf16[1,4096,14336]{2,1,0} divide(%add.3765, %multiply.2694)
  %mul.11981 = bf16[1,4096,14336]{2,1,0} multiply(%param.264, %broadcast.3920)
  %add.3768 = bf16[1,4096,14336]{2,1,0} add(%div.2476, %mul.11981)
  %mul.11982 = bf16[1,4096,14336]{2,1,0} multiply(%mul.9929, %add.3768)
  %add.3769 = bf16[1,4096,14336]{2,1,0} add(%param.264, %mul.11982)
  %div.2477 = bf16[1,4096,14336]{2,1,0} divide(%sharding_constraint.2518, %div.1450)
  %select_n.892 = bf16[1,4096,14336]{2,1,0} select(%select_n.706, %sharding_constraint.2518, %div.2477)
  %mul.11984 = bf16[1,4096,14336]{2,1,0} multiply(%select_n.892, %broadcast.3920)
  %param.697 = bf16[1,4096,14336]{2,1,0} parameter(508), sharding={devices=[8,1,1]<=[8]}
  %mul.11985 = bf16[1,4096,14336]{2,1,0} multiply(%param.697, %broadcast.3921)
  %add.3770 = bf16[1,4096,14336]{2,1,0} add(%mul.11984, %mul.11985)
  %integer_pow.183 = bf16[1,4096,14336]{2,1,0} multiply(%select_n.892, %select_n.892)
  %mul.11986 = bf16[1,4096,14336]{2,1,0} multiply(%integer_pow.183, %broadcast.3922)
  %param.698 = bf16[1,4096,14336]{2,1,0} parameter(831), sharding={devices=[8,1,1]<=[8]}
  %mul.11987 = bf16[1,4096,14336]{2,1,0} multiply(%param.698, %broadcast.3923)
  %add.3771 = bf16[1,4096,14336]{2,1,0} add(%mul.11986, %mul.11987)
  %div.2480 = bf16[1,4096,14336]{2,1,0} divide(%add.3771, %div.1455)
  %sqrt.184 = bf16[1,4096,14336]{2,1,0} sqrt(%div.2480)
  %add.3772 = bf16[1,4096,14336]{2,1,0} add(%sqrt.184, %broadcast.3924)
  %multiply.2695 = bf16[1,4096,14336]{2,1,0} multiply(%div.1454, %add.3772)
  %div.2481 = bf16[1,4096,14336]{2,1,0} divide(%add.3770, %multiply.2695)
  %mul.11988 = bf16[1,4096,14336]{2,1,0} multiply(%param.265, %broadcast.3920)
  %add.3773 = bf16[1,4096,14336]{2,1,0} add(%div.2481, %mul.11988)
  %mul.11989 = bf16[1,4096,14336]{2,1,0} multiply(%mul.9929, %add.3773)
  %add.3774 = bf16[1,4096,14336]{2,1,0} add(%param.265, %mul.11989)
  %div.2482 = bf16[1,14336,4096]{2,1,0} divide(%sharding_constraint.2519, %div.1463)
  %select_n.893 = bf16[1,14336,4096]{2,1,0} select(%select_n.709, %sharding_constraint.2519, %div.2482)
  %mul.11991 = bf16[1,14336,4096]{2,1,0} multiply(%select_n.893, %broadcast.3925)
  %param.699 = bf16[1,14336,4096]{2,1,0} parameter(509), sharding={devices=[8,1,1]<=[8]}
  %mul.11992 = bf16[1,14336,4096]{2,1,0} multiply(%param.699, %broadcast.3926)
  %add.3775 = bf16[1,14336,4096]{2,1,0} add(%mul.11991, %mul.11992)
  %integer_pow.184 = bf16[1,14336,4096]{2,1,0} multiply(%select_n.893, %select_n.893)
  %mul.11993 = bf16[1,14336,4096]{2,1,0} multiply(%integer_pow.184, %broadcast.3927)
  %param.700 = bf16[1,14336,4096]{2,1,0} parameter(832), sharding={devices=[8,1,1]<=[8]}
  %mul.11994 = bf16[1,14336,4096]{2,1,0} multiply(%param.700, %broadcast.3928)
  %add.3776 = bf16[1,14336,4096]{2,1,0} add(%mul.11993, %mul.11994)
  %div.2486 = bf16[1,14336,4096]{2,1,0} divide(%add.3776, %div.1466)
  %sqrt.185 = bf16[1,14336,4096]{2,1,0} sqrt(%div.2486)
  %add.3777 = bf16[1,14336,4096]{2,1,0} add(%sqrt.185, %broadcast.3929)
  %multiply.2696 = bf16[1,14336,4096]{2,1,0} multiply(%div.1465, %add.3777)
  %div.2487 = bf16[1,14336,4096]{2,1,0} divide(%add.3775, %multiply.2696)
  %mul.11995 = bf16[1,14336,4096]{2,1,0} multiply(%param.266, %broadcast.3925)
  %add.3778 = bf16[1,14336,4096]{2,1,0} add(%div.2487, %mul.11995)
  %mul.11996 = bf16[1,14336,4096]{2,1,0} multiply(%mul.9949, %add.3778)
  %add.3779 = bf16[1,14336,4096]{2,1,0} add(%param.266, %mul.11996)
  %div.2488 = bf16[4096]{0} divide(%all-reduce.277, %div.1436)
  %select_n.894 = bf16[4096]{0} select(%select_n.701, %all-reduce.277, %div.2488)
  %mul.11998 = bf16[4096]{0} multiply(%select_n.894, %broadcast.3910)
  %param.701 = bf16[4096]{0} parameter(510), sharding={replicated}
  %mul.11999 = bf16[4096]{0} multiply(%param.701, %broadcast.3911)
  %add.3780 = bf16[4096]{0} add(%mul.11998, %mul.11999)
  %integer_pow.185 = bf16[4096]{0} multiply(%select_n.894, %select_n.894)
  %mul.12000 = bf16[4096]{0} multiply(%integer_pow.185, %broadcast.3912)
  %param.702 = bf16[4096]{0} parameter(833), sharding={replicated}
  %mul.12001 = bf16[4096]{0} multiply(%param.702, %broadcast.3913)
  %add.3781 = bf16[4096]{0} add(%mul.12000, %mul.12001)
  %div.2491 = bf16[4096]{0} divide(%add.3781, %div.1439)
  %sqrt.186 = bf16[4096]{0} sqrt(%div.2491)
  %add.3782 = bf16[4096]{0} add(%sqrt.186, %broadcast.3914)
  %multiply.2697 = bf16[4096]{0} multiply(%div.1438, %add.3782)
  %div.2492 = bf16[4096]{0} divide(%add.3780, %multiply.2697)
  %mul.12002 = bf16[4096]{0} multiply(%param.262, %broadcast.3910)
  %add.3783 = bf16[4096]{0} add(%div.2492, %mul.12002)
  %mul.12003 = bf16[4096]{0} multiply(%mul.2424, %add.3783)
  %add.3784 = bf16[4096]{0} add(%param.262, %mul.12003)
  %div.2493 = bf16[4096]{0} divide(%all-reduce.278, %div.1436)
  %select_n.895 = bf16[4096]{0} select(%select_n.701, %all-reduce.278, %div.2493)
  %mul.12005 = bf16[4096]{0} multiply(%select_n.895, %broadcast.3910)
  %param.703 = bf16[4096]{0} parameter(511), sharding={replicated}
  %mul.12006 = bf16[4096]{0} multiply(%param.703, %broadcast.3911)
  %add.3785 = bf16[4096]{0} add(%mul.12005, %mul.12006)
  %integer_pow.186 = bf16[4096]{0} multiply(%select_n.895, %select_n.895)
  %mul.12007 = bf16[4096]{0} multiply(%integer_pow.186, %broadcast.3912)
  %param.704 = bf16[4096]{0} parameter(834), sharding={replicated}
  %mul.12008 = bf16[4096]{0} multiply(%param.704, %broadcast.3913)
  %add.3786 = bf16[4096]{0} add(%mul.12007, %mul.12008)
  %div.2497 = bf16[4096]{0} divide(%add.3786, %div.1439)
  %sqrt.187 = bf16[4096]{0} sqrt(%div.2497)
  %add.3787 = bf16[4096]{0} add(%sqrt.187, %broadcast.3914)
  %multiply.2698 = bf16[4096]{0} multiply(%div.1438, %add.3787)
  %div.2498 = bf16[4096]{0} divide(%add.3785, %multiply.2698)
  %mul.12009 = bf16[4096]{0} multiply(%param.257, %broadcast.3910)
  %add.3788 = bf16[4096]{0} add(%div.2498, %mul.12009)
  %mul.12010 = bf16[4096]{0} multiply(%mul.2424, %add.3788)
  %add.3789 = bf16[4096]{0} add(%param.257, %mul.12010)
  %div.2499 = bf16[512,8,128]{0,2,1} divide(%transpose.397, %div.1479)
  %select_n.896 = bf16[512,8,128]{2,1,0} select(%select_n.713, %transpose.397, %div.2499)
  %mul.12012 = bf16[512,8,128]{2,1,0} multiply(%select_n.896, %broadcast.3930)
  %param.705 = bf16[512,8,128]{2,1,0} parameter(512), sharding={devices=[8,1,1]<=[8]}
  %mul.12013 = bf16[512,8,128]{2,1,0} multiply(%param.705, %broadcast.3931)
  %add.3790 = bf16[512,8,128]{2,1,0} add(%mul.12012, %mul.12013)
  %integer_pow.187 = bf16[512,8,128]{2,1,0} multiply(%select_n.896, %select_n.896)
  %mul.12014 = bf16[512,8,128]{2,1,0} multiply(%integer_pow.187, %broadcast.3932)
  %param.706 = bf16[512,8,128]{2,1,0} parameter(835), sharding={devices=[8,1,1]<=[8]}
  %mul.12015 = bf16[512,8,128]{2,1,0} multiply(%param.706, %broadcast.3933)
  %add.3791 = bf16[512,8,128]{2,1,0} add(%mul.12014, %mul.12015)
  %div.2512 = bf16[512,8,128]{2,1,0} divide(%add.3791, %div.1482)
  %sqrt.188 = bf16[512,8,128]{2,1,0} sqrt(%div.2512)
  %add.3792 = bf16[512,8,128]{2,1,0} add(%sqrt.188, %broadcast.3934)
  %multiply.2699 = bf16[512,8,128]{2,1,0} multiply(%div.1481, %add.3792)
  %div.2513 = bf16[512,8,128]{2,1,0} divide(%add.3790, %multiply.2699)
  %mul.12016 = bf16[512,8,128]{2,1,0} multiply(%param.259, %broadcast.3930)
  %add.3793 = bf16[512,8,128]{2,1,0} add(%div.2513, %mul.12016)
  %mul.12017 = bf16[512,8,128]{2,1,0} multiply(%mul.9984, %add.3793)
  %add.3794 = bf16[512,8,128]{2,1,0} add(%param.259, %mul.12017)
  %div.2514 = bf16[32,128,512]{1,0,2} divide(%transpose.398, %div.1485)
  %select_n.897 = bf16[32,128,512]{2,1,0} select(%select_n.715, %transpose.398, %div.2514)
  %mul.12020 = bf16[32,128,512]{2,1,0} multiply(%select_n.897, %broadcast.3935)
  %param.707 = bf16[32,128,512]{2,1,0} parameter(513), sharding={devices=[1,1,8]<=[8]}
  %mul.12021 = bf16[32,128,512]{2,1,0} multiply(%param.707, %broadcast.3936)
  %add.3795 = bf16[32,128,512]{2,1,0} add(%mul.12020, %mul.12021)
  %integer_pow.188 = bf16[32,128,512]{2,1,0} multiply(%select_n.897, %select_n.897)
  %mul.12022 = bf16[32,128,512]{2,1,0} multiply(%integer_pow.188, %broadcast.3937)
  %param.708 = bf16[32,128,512]{2,1,0} parameter(836), sharding={devices=[1,1,8]<=[8]}
  %mul.12023 = bf16[32,128,512]{2,1,0} multiply(%param.708, %broadcast.3938)
  %add.3796 = bf16[32,128,512]{2,1,0} add(%mul.12022, %mul.12023)
  %div.2517 = bf16[32,128,512]{2,1,0} divide(%add.3796, %div.1488)
  %sqrt.189 = bf16[32,128,512]{2,1,0} sqrt(%div.2517)
  %add.3797 = bf16[32,128,512]{2,1,0} add(%sqrt.189, %broadcast.3939)
  %multiply.2700 = bf16[32,128,512]{2,1,0} multiply(%div.1487, %add.3797)
  %div.2518 = bf16[32,128,512]{2,1,0} divide(%add.3795, %multiply.2700)
  %mul.12024 = bf16[32,128,512]{2,1,0} multiply(%param.261, %broadcast.3935)
  %add.3798 = bf16[32,128,512]{2,1,0} add(%div.2518, %mul.12024)
  %mul.12025 = bf16[32,128,512]{2,1,0} multiply(%mul.9994, %add.3798)
  %add.3799 = bf16[32,128,512]{2,1,0} add(%param.261, %mul.12025)
  %div.2519 = bf16[512,32,128]{0,2,1} divide(%transpose.399, %div.1491)
  %select_n.898 = bf16[512,32,128]{2,1,0} select(%select_n.717, %transpose.399, %div.2519)
  %mul.12029 = bf16[512,32,128]{2,1,0} multiply(%select_n.898, %broadcast.3940)
  %param.709 = bf16[512,32,128]{2,1,0} parameter(514), sharding={devices=[8,1,1]<=[8]}
  %mul.12030 = bf16[512,32,128]{2,1,0} multiply(%param.709, %broadcast.3941)
  %add.3800 = bf16[512,32,128]{2,1,0} add(%mul.12029, %mul.12030)
  %integer_pow.189 = bf16[512,32,128]{2,1,0} multiply(%select_n.898, %select_n.898)
  %mul.12031 = bf16[512,32,128]{2,1,0} multiply(%integer_pow.189, %broadcast.3942)
  %param.710 = bf16[512,32,128]{2,1,0} parameter(837), sharding={devices=[8,1,1]<=[8]}
  %mul.12032 = bf16[512,32,128]{2,1,0} multiply(%param.710, %broadcast.3943)
  %add.3801 = bf16[512,32,128]{2,1,0} add(%mul.12031, %mul.12032)
  %div.2522 = bf16[512,32,128]{2,1,0} divide(%add.3801, %div.1494)
  %sqrt.190 = bf16[512,32,128]{2,1,0} sqrt(%div.2522)
  %add.3802 = bf16[512,32,128]{2,1,0} add(%sqrt.190, %broadcast.3944)
  %multiply.2701 = bf16[512,32,128]{2,1,0} multiply(%div.1493, %add.3802)
  %div.2523 = bf16[512,32,128]{2,1,0} divide(%add.3800, %multiply.2701)
  %mul.12033 = bf16[512,32,128]{2,1,0} multiply(%param.258, %broadcast.3940)
  %add.3803 = bf16[512,32,128]{2,1,0} add(%div.2523, %mul.12033)
  %mul.12035 = bf16[512,32,128]{2,1,0} multiply(%mul.10010, %add.3803)
  %add.3805 = bf16[512,32,128]{2,1,0} add(%param.258, %mul.12035)
  %div.2524 = bf16[512,8,128]{0,2,1} divide(%transpose.400, %div.1479)
  %select_n.899 = bf16[512,8,128]{2,1,0} select(%select_n.713, %transpose.400, %div.2524)
  %mul.12037 = bf16[512,8,128]{2,1,0} multiply(%select_n.899, %broadcast.3930)
  %param.711 = bf16[512,8,128]{2,1,0} parameter(515), sharding={devices=[8,1,1]<=[8]}
  %mul.12042 = bf16[512,8,128]{2,1,0} multiply(%param.711, %broadcast.3931)
  %add.3806 = bf16[512,8,128]{2,1,0} add(%mul.12037, %mul.12042)
  %integer_pow.190 = bf16[512,8,128]{2,1,0} multiply(%select_n.899, %select_n.899)
  %mul.12043 = bf16[512,8,128]{2,1,0} multiply(%integer_pow.190, %broadcast.3932)
  %param.712 = bf16[512,8,128]{2,1,0} parameter(838), sharding={devices=[8,1,1]<=[8]}
  %mul.12044 = bf16[512,8,128]{2,1,0} multiply(%param.712, %broadcast.3933)
  %add.3807 = bf16[512,8,128]{2,1,0} add(%mul.12043, %mul.12044)
  %div.2527 = bf16[512,8,128]{2,1,0} divide(%add.3807, %div.1482)
  %sqrt.191 = bf16[512,8,128]{2,1,0} sqrt(%div.2527)
  %add.3808 = bf16[512,8,128]{2,1,0} add(%sqrt.191, %broadcast.3934)
  %multiply.2702 = bf16[512,8,128]{2,1,0} multiply(%div.1481, %add.3808)
  %div.2528 = bf16[512,8,128]{2,1,0} divide(%add.3806, %multiply.2702)
  %mul.12045 = bf16[512,8,128]{2,1,0} multiply(%param.260, %broadcast.3930)
  %add.3809 = bf16[512,8,128]{2,1,0} add(%div.2528, %mul.12045)
  %mul.12046 = bf16[512,8,128]{2,1,0} multiply(%mul.9984, %add.3809)
  %add.3810 = bf16[512,8,128]{2,1,0} add(%param.260, %mul.12046)
  %div.2530 = bf16[512,8]{1,0} divide(%dynamic-slice.2371, %div.1442)
  %select_n.900 = bf16[512,8]{1,0} select(%select_n.704, %dynamic-slice.2371, %div.2530)
  %mul.12048 = bf16[512,8]{1,0} multiply(%select_n.900, %broadcast.3915)
  %param.713 = bf16[512,8]{1,0} parameter(516), sharding={devices=[8,1]<=[8]}
  %mul.12049 = bf16[512,8]{1,0} multiply(%param.713, %broadcast.3916)
  %add.3811 = bf16[512,8]{1,0} add(%mul.12048, %mul.12049)
  %integer_pow.191 = bf16[512,8]{1,0} multiply(%select_n.900, %select_n.900)
  %mul.12050 = bf16[512,8]{1,0} multiply(%integer_pow.191, %broadcast.3917)
  %param.714 = bf16[512,8]{1,0} parameter(839), sharding={devices=[8,1]<=[8]}
  %mul.12051 = bf16[512,8]{1,0} multiply(%param.714, %broadcast.3918)
  %add.3812 = bf16[512,8]{1,0} add(%mul.12050, %mul.12051)
  %div.2534 = bf16[512,8]{1,0} divide(%add.3812, %div.1446)
  %sqrt.192 = bf16[512,8]{1,0} sqrt(%div.2534)
  %add.3813 = bf16[512,8]{1,0} add(%sqrt.192, %broadcast.3919)
  %multiply.2703 = bf16[512,8]{1,0} multiply(%div.1444, %add.3813)
  %div.2537 = bf16[512,8]{1,0} divide(%add.3811, %multiply.2703)
  %mul.12052 = bf16[512,8]{1,0} multiply(%param.273, %broadcast.3915)
  %add.3815 = bf16[512,8]{1,0} add(%div.2537, %mul.12052)
  %mul.12053 = bf16[512,8]{1,0} multiply(%mul.9922, %add.3815)
  %add.3817 = bf16[512,8]{1,0} add(%param.273, %mul.12053)
  %div.2538 = bf16[1,4096,14336]{2,1,0} divide(%sharding_constraint.2520, %div.1450)
  %select_n.901 = bf16[1,4096,14336]{2,1,0} select(%select_n.706, %sharding_constraint.2520, %div.2538)
  %mul.12056 = bf16[1,4096,14336]{2,1,0} multiply(%select_n.901, %broadcast.3920)
  %param.715 = bf16[1,4096,14336]{2,1,0} parameter(517), sharding={devices=[8,1,1]<=[8]}
  %mul.12057 = bf16[1,4096,14336]{2,1,0} multiply(%param.715, %broadcast.3921)
  %add.3818 = bf16[1,4096,14336]{2,1,0} add(%mul.12056, %mul.12057)
  %integer_pow.192 = bf16[1,4096,14336]{2,1,0} multiply(%select_n.901, %select_n.901)
  %mul.12058 = bf16[1,4096,14336]{2,1,0} multiply(%integer_pow.192, %broadcast.3922)
  %param.716 = bf16[1,4096,14336]{2,1,0} parameter(840), sharding={devices=[8,1,1]<=[8]}
  %mul.12059 = bf16[1,4096,14336]{2,1,0} multiply(%param.716, %broadcast.3923)
  %add.3819 = bf16[1,4096,14336]{2,1,0} add(%mul.12058, %mul.12059)
  %div.2541 = bf16[1,4096,14336]{2,1,0} divide(%add.3819, %div.1455)
  %sqrt.193 = bf16[1,4096,14336]{2,1,0} sqrt(%div.2541)
  %add.3820 = bf16[1,4096,14336]{2,1,0} add(%sqrt.193, %broadcast.3924)
  %multiply.2704 = bf16[1,4096,14336]{2,1,0} multiply(%div.1454, %add.3820)
  %div.2542 = bf16[1,4096,14336]{2,1,0} divide(%add.3818, %multiply.2704)
  %mul.12061 = bf16[1,4096,14336]{2,1,0} multiply(%param.274, %broadcast.3920)
  %add.3821 = bf16[1,4096,14336]{2,1,0} add(%div.2542, %mul.12061)
  %mul.12065 = bf16[1,4096,14336]{2,1,0} multiply(%mul.9929, %add.3821)
  %add.3822 = bf16[1,4096,14336]{2,1,0} add(%param.274, %mul.12065)
  %div.2543 = bf16[1,4096,14336]{2,1,0} divide(%sharding_constraint.2521, %div.1450)
  %select_n.902 = bf16[1,4096,14336]{2,1,0} select(%select_n.706, %sharding_constraint.2521, %div.2543)
  %mul.12067 = bf16[1,4096,14336]{2,1,0} multiply(%select_n.902, %broadcast.3920)
  %param.717 = bf16[1,4096,14336]{2,1,0} parameter(518), sharding={devices=[8,1,1]<=[8]}
  %mul.12068 = bf16[1,4096,14336]{2,1,0} multiply(%param.717, %broadcast.3921)
  %add.3823 = bf16[1,4096,14336]{2,1,0} add(%mul.12067, %mul.12068)
  %integer_pow.193 = bf16[1,4096,14336]{2,1,0} multiply(%select_n.902, %select_n.902)
  %mul.12069 = bf16[1,4096,14336]{2,1,0} multiply(%integer_pow.193, %broadcast.3922)
  %param.718 = bf16[1,4096,14336]{2,1,0} parameter(841), sharding={devices=[8,1,1]<=[8]}
  %mul.12070 = bf16[1,4096,14336]{2,1,0} multiply(%param.718, %broadcast.3923)
  %add.3824 = bf16[1,4096,14336]{2,1,0} add(%mul.12069, %mul.12070)
  %div.2546 = bf16[1,4096,14336]{2,1,0} divide(%add.3824, %div.1455)
  %sqrt.194 = bf16[1,4096,14336]{2,1,0} sqrt(%div.2546)
  %add.3825 = bf16[1,4096,14336]{2,1,0} add(%sqrt.194, %broadcast.3924)
  %multiply.2705 = bf16[1,4096,14336]{2,1,0} multiply(%div.1454, %add.3825)
  %div.2547 = bf16[1,4096,14336]{2,1,0} divide(%add.3823, %multiply.2705)
  %mul.12072 = bf16[1,4096,14336]{2,1,0} multiply(%param.275, %broadcast.3920)
  %add.3826 = bf16[1,4096,14336]{2,1,0} add(%div.2547, %mul.12072)
  %mul.12073 = bf16[1,4096,14336]{2,1,0} multiply(%mul.9929, %add.3826)
  %add.3827 = bf16[1,4096,14336]{2,1,0} add(%param.275, %mul.12073)
  %div.2548 = bf16[1,14336,4096]{2,1,0} divide(%sharding_constraint.2522, %div.1463)
  %select_n.903 = bf16[1,14336,4096]{2,1,0} select(%select_n.709, %sharding_constraint.2522, %div.2548)
  %mul.12078 = bf16[1,14336,4096]{2,1,0} multiply(%select_n.903, %broadcast.3925)
  %param.719 = bf16[1,14336,4096]{2,1,0} parameter(519), sharding={devices=[8,1,1]<=[8]}
  %mul.12079 = bf16[1,14336,4096]{2,1,0} multiply(%param.719, %broadcast.3926)
  %add.3829 = bf16[1,14336,4096]{2,1,0} add(%mul.12078, %mul.12079)
  %integer_pow.194 = bf16[1,14336,4096]{2,1,0} multiply(%select_n.903, %select_n.903)
  %mul.12080 = bf16[1,14336,4096]{2,1,0} multiply(%integer_pow.194, %broadcast.3927)
  %param.720 = bf16[1,14336,4096]{2,1,0} parameter(842), sharding={devices=[8,1,1]<=[8]}
  %mul.12081 = bf16[1,14336,4096]{2,1,0} multiply(%param.720, %broadcast.3928)
  %add.3830 = bf16[1,14336,4096]{2,1,0} add(%mul.12080, %mul.12081)
  %div.2551 = bf16[1,14336,4096]{2,1,0} divide(%add.3830, %div.1466)
  %sqrt.195 = bf16[1,14336,4096]{2,1,0} sqrt(%div.2551)
  %add.3831 = bf16[1,14336,4096]{2,1,0} add(%sqrt.195, %broadcast.3929)
  %multiply.2706 = bf16[1,14336,4096]{2,1,0} multiply(%div.1465, %add.3831)
  %div.2552 = bf16[1,14336,4096]{2,1,0} divide(%add.3829, %multiply.2706)
  %mul.12082 = bf16[1,14336,4096]{2,1,0} multiply(%param.276, %broadcast.3925)
  %add.3832 = bf16[1,14336,4096]{2,1,0} add(%div.2552, %mul.12082)
  %mul.12083 = bf16[1,14336,4096]{2,1,0} multiply(%mul.9949, %add.3832)
  %add.3833 = bf16[1,14336,4096]{2,1,0} add(%param.276, %mul.12083)
  %div.2553 = bf16[4096]{0} divide(%all-reduce.292, %div.1436)
  %select_n.904 = bf16[4096]{0} select(%select_n.701, %all-reduce.292, %div.2553)
  %mul.12085 = bf16[4096]{0} multiply(%select_n.904, %broadcast.3910)
  %param.721 = bf16[4096]{0} parameter(520), sharding={replicated}
  %mul.12086 = bf16[4096]{0} multiply(%param.721, %broadcast.3911)
  %add.3834 = bf16[4096]{0} add(%mul.12085, %mul.12086)
  %integer_pow.195 = bf16[4096]{0} multiply(%select_n.904, %select_n.904)
  %mul.12087 = bf16[4096]{0} multiply(%integer_pow.195, %broadcast.3912)
  %param.722 = bf16[4096]{0} parameter(843), sharding={replicated}
  %mul.12088 = bf16[4096]{0} multiply(%param.722, %broadcast.3913)
  %add.3835 = bf16[4096]{0} add(%mul.12087, %mul.12088)
  %div.2556 = bf16[4096]{0} divide(%add.3835, %div.1439)
  %sqrt.196 = bf16[4096]{0} sqrt(%div.2556)
  %add.3836 = bf16[4096]{0} add(%sqrt.196, %broadcast.3914)
  %multiply.2707 = bf16[4096]{0} multiply(%div.1438, %add.3836)
  %div.2557 = bf16[4096]{0} divide(%add.3834, %multiply.2707)
  %mul.12089 = bf16[4096]{0} multiply(%param.272, %broadcast.3910)
  %add.3837 = bf16[4096]{0} add(%div.2557, %mul.12089)
  %mul.12090 = bf16[4096]{0} multiply(%mul.2424, %add.3837)
  %add.3838 = bf16[4096]{0} add(%param.272, %mul.12090)
  %div.2558 = bf16[4096]{0} divide(%all-reduce.293, %div.1436)
  %select_n.905 = bf16[4096]{0} select(%select_n.701, %all-reduce.293, %div.2558)
  %mul.12093 = bf16[4096]{0} multiply(%select_n.905, %broadcast.3910)
  %param.723 = bf16[4096]{0} parameter(521), sharding={replicated}
  %mul.12094 = bf16[4096]{0} multiply(%param.723, %broadcast.3911)
  %add.3840 = bf16[4096]{0} add(%mul.12093, %mul.12094)
  %integer_pow.196 = bf16[4096]{0} multiply(%select_n.905, %select_n.905)
  %mul.12096 = bf16[4096]{0} multiply(%integer_pow.196, %broadcast.3912)
  %param.724 = bf16[4096]{0} parameter(844), sharding={replicated}
  %mul.12097 = bf16[4096]{0} multiply(%param.724, %broadcast.3913)
  %add.3841 = bf16[4096]{0} add(%mul.12096, %mul.12097)
  %div.2561 = bf16[4096]{0} divide(%add.3841, %div.1439)
  %sqrt.197 = bf16[4096]{0} sqrt(%div.2561)
  %add.3842 = bf16[4096]{0} add(%sqrt.197, %broadcast.3914)
  %multiply.2708 = bf16[4096]{0} multiply(%div.1438, %add.3842)
  %div.2562 = bf16[4096]{0} divide(%add.3840, %multiply.2708)
  %mul.12098 = bf16[4096]{0} multiply(%param.267, %broadcast.3910)
  %add.3843 = bf16[4096]{0} add(%div.2562, %mul.12098)
  %mul.12100 = bf16[4096]{0} multiply(%mul.2424, %add.3843)
  %add.3844 = bf16[4096]{0} add(%param.267, %mul.12100)
  %div.2563 = bf16[512,8,128]{0,2,1} divide(%transpose.401, %div.1479)
  %select_n.906 = bf16[512,8,128]{2,1,0} select(%select_n.713, %transpose.401, %div.2563)
  %mul.12102 = bf16[512,8,128]{2,1,0} multiply(%select_n.906, %broadcast.3930)
  %param.725 = bf16[512,8,128]{2,1,0} parameter(522), sharding={devices=[8,1,1]<=[8]}
  %mul.12103 = bf16[512,8,128]{2,1,0} multiply(%param.725, %broadcast.3931)
  %add.3845 = bf16[512,8,128]{2,1,0} add(%mul.12102, %mul.12103)
  %integer_pow.197 = bf16[512,8,128]{2,1,0} multiply(%select_n.906, %select_n.906)
  %mul.12110 = bf16[512,8,128]{2,1,0} multiply(%integer_pow.197, %broadcast.3932)
  %param.726 = bf16[512,8,128]{2,1,0} parameter(845), sharding={devices=[8,1,1]<=[8]}
  %mul.12111 = bf16[512,8,128]{2,1,0} multiply(%param.726, %broadcast.3933)
  %add.3846 = bf16[512,8,128]{2,1,0} add(%mul.12110, %mul.12111)
  %div.2566 = bf16[512,8,128]{2,1,0} divide(%add.3846, %div.1482)
  %sqrt.198 = bf16[512,8,128]{2,1,0} sqrt(%div.2566)
  %add.3847 = bf16[512,8,128]{2,1,0} add(%sqrt.198, %broadcast.3934)
  %multiply.2709 = bf16[512,8,128]{2,1,0} multiply(%div.1481, %add.3847)
  %div.2567 = bf16[512,8,128]{2,1,0} divide(%add.3845, %multiply.2709)
  %mul.12112 = bf16[512,8,128]{2,1,0} multiply(%param.269, %broadcast.3930)
  %add.3848 = bf16[512,8,128]{2,1,0} add(%div.2567, %mul.12112)
  %mul.12113 = bf16[512,8,128]{2,1,0} multiply(%mul.9984, %add.3848)
  %add.3849 = bf16[512,8,128]{2,1,0} add(%param.269, %mul.12113)
  %div.2568 = bf16[32,128,512]{1,0,2} divide(%transpose.402, %div.1485)
  %select_n.907 = bf16[32,128,512]{2,1,0} select(%select_n.715, %transpose.402, %div.2568)
  %mul.12115 = bf16[32,128,512]{2,1,0} multiply(%select_n.907, %broadcast.3935)
  %param.727 = bf16[32,128,512]{2,1,0} parameter(523), sharding={devices=[1,1,8]<=[8]}
  %mul.12116 = bf16[32,128,512]{2,1,0} multiply(%param.727, %broadcast.3936)
  %add.3850 = bf16[32,128,512]{2,1,0} add(%mul.12115, %mul.12116)
  %integer_pow.198 = bf16[32,128,512]{2,1,0} multiply(%select_n.907, %select_n.907)
  %mul.12117 = bf16[32,128,512]{2,1,0} multiply(%integer_pow.198, %broadcast.3937)
  %param.728 = bf16[32,128,512]{2,1,0} parameter(846), sharding={devices=[1,1,8]<=[8]}
  %mul.12118 = bf16[32,128,512]{2,1,0} multiply(%param.728, %broadcast.3938)
  %add.3851 = bf16[32,128,512]{2,1,0} add(%mul.12117, %mul.12118)
  %div.2571 = bf16[32,128,512]{2,1,0} divide(%add.3851, %div.1488)
  %sqrt.199 = bf16[32,128,512]{2,1,0} sqrt(%div.2571)
  %add.3852 = bf16[32,128,512]{2,1,0} add(%sqrt.199, %broadcast.3939)
  %multiply.2710 = bf16[32,128,512]{2,1,0} multiply(%div.1487, %add.3852)
  %div.2572 = bf16[32,128,512]{2,1,0} divide(%add.3850, %multiply.2710)
  %mul.12119 = bf16[32,128,512]{2,1,0} multiply(%param.271, %broadcast.3935)
  %add.3853 = bf16[32,128,512]{2,1,0} add(%div.2572, %mul.12119)
  %mul.12120 = bf16[32,128,512]{2,1,0} multiply(%mul.9994, %add.3853)
  %add.3854 = bf16[32,128,512]{2,1,0} add(%param.271, %mul.12120)
  %div.2573 = bf16[512,32,128]{0,2,1} divide(%transpose.403, %div.1491)
  %select_n.908 = bf16[512,32,128]{2,1,0} select(%select_n.717, %transpose.403, %div.2573)
  %mul.12122 = bf16[512,32,128]{2,1,0} multiply(%select_n.908, %broadcast.3940)
  %param.729 = bf16[512,32,128]{2,1,0} parameter(524), sharding={devices=[8,1,1]<=[8]}
  %mul.12129 = bf16[512,32,128]{2,1,0} multiply(%param.729, %broadcast.3941)
  %add.3855 = bf16[512,32,128]{2,1,0} add(%mul.12122, %mul.12129)
  %integer_pow.199 = bf16[512,32,128]{2,1,0} multiply(%select_n.908, %select_n.908)
  %mul.12130 = bf16[512,32,128]{2,1,0} multiply(%integer_pow.199, %broadcast.3942)
  %param.730 = bf16[512,32,128]{2,1,0} parameter(847), sharding={devices=[8,1,1]<=[8]}
  %mul.12131 = bf16[512,32,128]{2,1,0} multiply(%param.730, %broadcast.3943)
  %add.3856 = bf16[512,32,128]{2,1,0} add(%mul.12130, %mul.12131)
  %div.2576 = bf16[512,32,128]{2,1,0} divide(%add.3856, %div.1494)
  %sqrt.200 = bf16[512,32,128]{2,1,0} sqrt(%div.2576)
  %add.3857 = bf16[512,32,128]{2,1,0} add(%sqrt.200, %broadcast.3944)
  %multiply.2711 = bf16[512,32,128]{2,1,0} multiply(%div.1493, %add.3857)
  %div.2577 = bf16[512,32,128]{2,1,0} divide(%add.3855, %multiply.2711)
  %mul.12132 = bf16[512,32,128]{2,1,0} multiply(%param.268, %broadcast.3940)
  %add.3858 = bf16[512,32,128]{2,1,0} add(%div.2577, %mul.12132)
  %mul.12133 = bf16[512,32,128]{2,1,0} multiply(%mul.10010, %add.3858)
  %add.3859 = bf16[512,32,128]{2,1,0} add(%param.268, %mul.12133)
  %div.2578 = bf16[512,8,128]{0,2,1} divide(%transpose.404, %div.1479)
  %select_n.909 = bf16[512,8,128]{2,1,0} select(%select_n.713, %transpose.404, %div.2578)
  %mul.12136 = bf16[512,8,128]{2,1,0} multiply(%select_n.909, %broadcast.3930)
  %param.731 = bf16[512,8,128]{2,1,0} parameter(525), sharding={devices=[8,1,1]<=[8]}
  %mul.12137 = bf16[512,8,128]{2,1,0} multiply(%param.731, %broadcast.3931)
  %add.3860 = bf16[512,8,128]{2,1,0} add(%mul.12136, %mul.12137)
  %integer_pow.200 = bf16[512,8,128]{2,1,0} multiply(%select_n.909, %select_n.909)
  %mul.12138 = bf16[512,8,128]{2,1,0} multiply(%integer_pow.200, %broadcast.3932)
  %param.732 = bf16[512,8,128]{2,1,0} parameter(848), sharding={devices=[8,1,1]<=[8]}
  %mul.12139 = bf16[512,8,128]{2,1,0} multiply(%param.732, %broadcast.3933)
  %add.3862 = bf16[512,8,128]{2,1,0} add(%mul.12138, %mul.12139)
  %div.2581 = bf16[512,8,128]{2,1,0} divide(%add.3862, %div.1482)
  %sqrt.201 = bf16[512,8,128]{2,1,0} sqrt(%div.2581)
  %add.3863 = bf16[512,8,128]{2,1,0} add(%sqrt.201, %broadcast.3934)
  %multiply.2712 = bf16[512,8,128]{2,1,0} multiply(%div.1481, %add.3863)
  %div.2582 = bf16[512,8,128]{2,1,0} divide(%add.3860, %multiply.2712)
  %mul.12141 = bf16[512,8,128]{2,1,0} multiply(%param.270, %broadcast.3930)
  %add.3865 = bf16[512,8,128]{2,1,0} add(%div.2582, %mul.12141)
  %mul.12142 = bf16[512,8,128]{2,1,0} multiply(%mul.9984, %add.3865)
  %add.3866 = bf16[512,8,128]{2,1,0} add(%param.270, %mul.12142)
  %div.2583 = bf16[512,8]{1,0} divide(%dynamic-slice.2381, %div.1442)
  %select_n.910 = bf16[512,8]{1,0} select(%select_n.704, %dynamic-slice.2381, %div.2583)
  %mul.12144 = bf16[512,8]{1,0} multiply(%select_n.910, %broadcast.3915)
  %param.733 = bf16[512,8]{1,0} parameter(526), sharding={devices=[8,1]<=[8]}
  %mul.12145 = bf16[512,8]{1,0} multiply(%param.733, %broadcast.3916)
  %add.3868 = bf16[512,8]{1,0} add(%mul.12144, %mul.12145)
  %integer_pow.201 = bf16[512,8]{1,0} multiply(%select_n.910, %select_n.910)
  %mul.12148 = bf16[512,8]{1,0} multiply(%integer_pow.201, %broadcast.3917)
  %param.734 = bf16[512,8]{1,0} parameter(849), sharding={devices=[8,1]<=[8]}
  %mul.12152 = bf16[512,8]{1,0} multiply(%param.734, %broadcast.3918)
  %add.3869 = bf16[512,8]{1,0} add(%mul.12148, %mul.12152)
  %div.2586 = bf16[512,8]{1,0} divide(%add.3869, %div.1446)
  %sqrt.202 = bf16[512,8]{1,0} sqrt(%div.2586)
  %add.3870 = bf16[512,8]{1,0} add(%sqrt.202, %broadcast.3919)
  %multiply.2713 = bf16[512,8]{1,0} multiply(%div.1444, %add.3870)
  %div.2587 = bf16[512,8]{1,0} divide(%add.3868, %multiply.2713)
  %mul.12153 = bf16[512,8]{1,0} multiply(%param.283, %broadcast.3915)
  %add.3871 = bf16[512,8]{1,0} add(%div.2587, %mul.12153)
  %mul.12154 = bf16[512,8]{1,0} multiply(%mul.9922, %add.3871)
  %add.3872 = bf16[512,8]{1,0} add(%param.283, %mul.12154)
  %div.2588 = bf16[1,4096,14336]{2,1,0} divide(%sharding_constraint.2523, %div.1450)
  %select_n.911 = bf16[1,4096,14336]{2,1,0} select(%select_n.706, %sharding_constraint.2523, %div.2588)
  %mul.12156 = bf16[1,4096,14336]{2,1,0} multiply(%select_n.911, %broadcast.3920)
  %param.735 = bf16[1,4096,14336]{2,1,0} parameter(527), sharding={devices=[8,1,1]<=[8]}
  %mul.12157 = bf16[1,4096,14336]{2,1,0} multiply(%param.735, %broadcast.3921)
  %add.3873 = bf16[1,4096,14336]{2,1,0} add(%mul.12156, %mul.12157)
  %integer_pow.202 = bf16[1,4096,14336]{2,1,0} multiply(%select_n.911, %select_n.911)
  %mul.12158 = bf16[1,4096,14336]{2,1,0} multiply(%integer_pow.202, %broadcast.3922)
  %param.736 = bf16[1,4096,14336]{2,1,0} parameter(850), sharding={devices=[8,1,1]<=[8]}
  %mul.12161 = bf16[1,4096,14336]{2,1,0} multiply(%param.736, %broadcast.3923)
  %add.3874 = bf16[1,4096,14336]{2,1,0} add(%mul.12158, %mul.12161)
  %div.2591 = bf16[1,4096,14336]{2,1,0} divide(%add.3874, %div.1455)
  %sqrt.203 = bf16[1,4096,14336]{2,1,0} sqrt(%div.2591)
  %add.3875 = bf16[1,4096,14336]{2,1,0} add(%sqrt.203, %broadcast.3924)
  %multiply.2714 = bf16[1,4096,14336]{2,1,0} multiply(%div.1454, %add.3875)
  %div.2592 = bf16[1,4096,14336]{2,1,0} divide(%add.3873, %multiply.2714)
  %mul.12162 = bf16[1,4096,14336]{2,1,0} multiply(%param.284, %broadcast.3920)
  %add.3876 = bf16[1,4096,14336]{2,1,0} add(%div.2592, %mul.12162)
  %mul.12163 = bf16[1,4096,14336]{2,1,0} multiply(%mul.9929, %add.3876)
  %add.3878 = bf16[1,4096,14336]{2,1,0} add(%param.284, %mul.12163)
  %div.2593 = bf16[1,4096,14336]{2,1,0} divide(%sharding_constraint.2526, %div.1450)
  %select_n.912 = bf16[1,4096,14336]{2,1,0} select(%select_n.706, %sharding_constraint.2526, %div.2593)
  %mul.12165 = bf16[1,4096,14336]{2,1,0} multiply(%select_n.912, %broadcast.3920)
  %param.737 = bf16[1,4096,14336]{2,1,0} parameter(528), sharding={devices=[8,1,1]<=[8]}
  %mul.12170 = bf16[1,4096,14336]{2,1,0} multiply(%param.737, %broadcast.3921)
  %add.3879 = bf16[1,4096,14336]{2,1,0} add(%mul.12165, %mul.12170)
  %integer_pow.203 = bf16[1,4096,14336]{2,1,0} multiply(%select_n.912, %select_n.912)
  %mul.12173 = bf16[1,4096,14336]{2,1,0} multiply(%integer_pow.203, %broadcast.3922)
  %param.738 = bf16[1,4096,14336]{2,1,0} parameter(851), sharding={devices=[8,1,1]<=[8]}
  %mul.12178 = bf16[1,4096,14336]{2,1,0} multiply(%param.738, %broadcast.3923)
  %add.3880 = bf16[1,4096,14336]{2,1,0} add(%mul.12173, %mul.12178)
  %div.2596 = bf16[1,4096,14336]{2,1,0} divide(%add.3880, %div.1455)
  %sqrt.204 = bf16[1,4096,14336]{2,1,0} sqrt(%div.2596)
  %add.3882 = bf16[1,4096,14336]{2,1,0} add(%sqrt.204, %broadcast.3924)
  %multiply.2715 = bf16[1,4096,14336]{2,1,0} multiply(%div.1454, %add.3882)
  %div.2598 = bf16[1,4096,14336]{2,1,0} divide(%add.3879, %multiply.2715)
  %mul.12179 = bf16[1,4096,14336]{2,1,0} multiply(%param.285, %broadcast.3920)
  %add.3883 = bf16[1,4096,14336]{2,1,0} add(%div.2598, %mul.12179)
  %mul.12180 = bf16[1,4096,14336]{2,1,0} multiply(%mul.9929, %add.3883)
  %add.3884 = bf16[1,4096,14336]{2,1,0} add(%param.285, %mul.12180)
  %div.2599 = bf16[1,14336,4096]{2,1,0} divide(%sharding_constraint.2527, %div.1463)
  %select_n.913 = bf16[1,14336,4096]{2,1,0} select(%select_n.709, %sharding_constraint.2527, %div.2599)
  %mul.12182 = bf16[1,14336,4096]{2,1,0} multiply(%select_n.913, %broadcast.3925)
  %param.739 = bf16[1,14336,4096]{2,1,0} parameter(529), sharding={devices=[8,1,1]<=[8]}
  %mul.12191 = bf16[1,14336,4096]{2,1,0} multiply(%param.739, %broadcast.3926)
  %add.3885 = bf16[1,14336,4096]{2,1,0} add(%mul.12182, %mul.12191)
  %integer_pow.204 = bf16[1,14336,4096]{2,1,0} multiply(%select_n.913, %select_n.913)
  %mul.12192 = bf16[1,14336,4096]{2,1,0} multiply(%integer_pow.204, %broadcast.3927)
  %param.740 = bf16[1,14336,4096]{2,1,0} parameter(852), sharding={devices=[8,1,1]<=[8]}
  %mul.12193 = bf16[1,14336,4096]{2,1,0} multiply(%param.740, %broadcast.3928)
  %add.3886 = bf16[1,14336,4096]{2,1,0} add(%mul.12192, %mul.12193)
  %div.2602 = bf16[1,14336,4096]{2,1,0} divide(%add.3886, %div.1466)
  %sqrt.205 = bf16[1,14336,4096]{2,1,0} sqrt(%div.2602)
  %add.3887 = bf16[1,14336,4096]{2,1,0} add(%sqrt.205, %broadcast.3929)
  %multiply.2716 = bf16[1,14336,4096]{2,1,0} multiply(%div.1465, %add.3887)
  %div.2603 = bf16[1,14336,4096]{2,1,0} divide(%add.3885, %multiply.2716)
  %mul.12194 = bf16[1,14336,4096]{2,1,0} multiply(%param.286, %broadcast.3925)
  %add.3888 = bf16[1,14336,4096]{2,1,0} add(%div.2603, %mul.12194)
  %mul.12196 = bf16[1,14336,4096]{2,1,0} multiply(%mul.9949, %add.3888)
  %add.3889 = bf16[1,14336,4096]{2,1,0} add(%param.286, %mul.12196)
  %div.2604 = bf16[4096]{0} divide(%all-reduce.307, %div.1436)
  %select_n.914 = bf16[4096]{0} select(%select_n.701, %all-reduce.307, %div.2604)
  %mul.12198 = bf16[4096]{0} multiply(%select_n.914, %broadcast.3910)
  %param.741 = bf16[4096]{0} parameter(530), sharding={replicated}
  %mul.12199 = bf16[4096]{0} multiply(%param.741, %broadcast.3911)
  %add.3890 = bf16[4096]{0} add(%mul.12198, %mul.12199)
  %integer_pow.205 = bf16[4096]{0} multiply(%select_n.914, %select_n.914)
  %mul.12200 = bf16[4096]{0} multiply(%integer_pow.205, %broadcast.3912)
  %param.742 = bf16[4096]{0} parameter(853), sharding={replicated}
  %mul.12201 = bf16[4096]{0} multiply(%param.742, %broadcast.3913)
  %add.3892 = bf16[4096]{0} add(%mul.12200, %mul.12201)
  %div.2608 = bf16[4096]{0} divide(%add.3892, %div.1439)
  %sqrt.206 = bf16[4096]{0} sqrt(%div.2608)
  %add.3893 = bf16[4096]{0} add(%sqrt.206, %broadcast.3914)
  %multiply.2717 = bf16[4096]{0} multiply(%div.1438, %add.3893)
  %div.2609 = bf16[4096]{0} divide(%add.3890, %multiply.2717)
  %mul.12202 = bf16[4096]{0} multiply(%param.282, %broadcast.3910)
  %add.3894 = bf16[4096]{0} add(%div.2609, %mul.12202)
  %mul.12203 = bf16[4096]{0} multiply(%mul.2424, %add.3894)
  %add.3895 = bf16[4096]{0} add(%param.282, %mul.12203)
  %div.2610 = bf16[4096]{0} divide(%all-reduce.308, %div.1436)
  %select_n.915 = bf16[4096]{0} select(%select_n.701, %all-reduce.308, %div.2610)
  %mul.12205 = bf16[4096]{0} multiply(%select_n.915, %broadcast.3910)
  %param.743 = bf16[4096]{0} parameter(531), sharding={replicated}
  %mul.12206 = bf16[4096]{0} multiply(%param.743, %broadcast.3911)
  %add.3896 = bf16[4096]{0} add(%mul.12205, %mul.12206)
  %integer_pow.206 = bf16[4096]{0} multiply(%select_n.915, %select_n.915)
  %mul.12210 = bf16[4096]{0} multiply(%integer_pow.206, %broadcast.3912)
  %param.744 = bf16[4096]{0} parameter(854), sharding={replicated}
  %mul.12222 = bf16[4096]{0} multiply(%param.744, %broadcast.3913)
  %add.3897 = bf16[4096]{0} add(%mul.12210, %mul.12222)
  %div.2613 = bf16[4096]{0} divide(%add.3897, %div.1439)
  %sqrt.207 = bf16[4096]{0} sqrt(%div.2613)
  %add.3898 = bf16[4096]{0} add(%sqrt.207, %broadcast.3914)
  %multiply.2718 = bf16[4096]{0} multiply(%div.1438, %add.3898)
  %div.2614 = bf16[4096]{0} divide(%add.3896, %multiply.2718)
  %mul.12227 = bf16[4096]{0} multiply(%param.277, %broadcast.3910)
  %add.3899 = bf16[4096]{0} add(%div.2614, %mul.12227)
  %mul.12232 = bf16[4096]{0} multiply(%mul.2424, %add.3899)
  %add.3900 = bf16[4096]{0} add(%param.277, %mul.12232)
  %div.2615 = bf16[512,8,128]{0,2,1} divide(%transpose.405, %div.1479)
  %select_n.916 = bf16[512,8,128]{2,1,0} select(%select_n.713, %transpose.405, %div.2615)
  %mul.12249 = bf16[512,8,128]{2,1,0} multiply(%select_n.916, %broadcast.3930)
  %param.745 = bf16[512,8,128]{2,1,0} parameter(532), sharding={devices=[8,1,1]<=[8]}
  %mul.12257 = bf16[512,8,128]{2,1,0} multiply(%param.745, %broadcast.3931)
  %add.3901 = bf16[512,8,128]{2,1,0} add(%mul.12249, %mul.12257)
  %integer_pow.207 = bf16[512,8,128]{2,1,0} multiply(%select_n.916, %select_n.916)
  %mul.12258 = bf16[512,8,128]{2,1,0} multiply(%integer_pow.207, %broadcast.3932)
  %param.746 = bf16[512,8,128]{2,1,0} parameter(855), sharding={devices=[8,1,1]<=[8]}
  %mul.12259 = bf16[512,8,128]{2,1,0} multiply(%param.746, %broadcast.3933)
  %add.3902 = bf16[512,8,128]{2,1,0} add(%mul.12258, %mul.12259)
  %div.2618 = bf16[512,8,128]{2,1,0} divide(%add.3902, %div.1482)
  %sqrt.208 = bf16[512,8,128]{2,1,0} sqrt(%div.2618)
  %add.3903 = bf16[512,8,128]{2,1,0} add(%sqrt.208, %broadcast.3934)
  %multiply.2719 = bf16[512,8,128]{2,1,0} multiply(%div.1481, %add.3903)
  %div.2619 = bf16[512,8,128]{2,1,0} divide(%add.3901, %multiply.2719)
  %mul.12260 = bf16[512,8,128]{2,1,0} multiply(%param.279, %broadcast.3930)
  %add.3904 = bf16[512,8,128]{2,1,0} add(%div.2619, %mul.12260)
  %mul.12261 = bf16[512,8,128]{2,1,0} multiply(%mul.9984, %add.3904)
  %add.3905 = bf16[512,8,128]{2,1,0} add(%param.279, %mul.12261)
  %div.2620 = bf16[32,128,512]{1,0,2} divide(%transpose.406, %div.1485)
  %select_n.917 = bf16[32,128,512]{2,1,0} select(%select_n.715, %transpose.406, %div.2620)
  %mul.12263 = bf16[32,128,512]{2,1,0} multiply(%select_n.917, %broadcast.3935)
  %param.747 = bf16[32,128,512]{2,1,0} parameter(533), sharding={devices=[1,1,8]<=[8]}
  %mul.12271 = bf16[32,128,512]{2,1,0} multiply(%param.747, %broadcast.3936)
  %add.3906 = bf16[32,128,512]{2,1,0} add(%mul.12263, %mul.12271)
  %integer_pow.208 = bf16[32,128,512]{2,1,0} multiply(%select_n.917, %select_n.917)
  %mul.12272 = bf16[32,128,512]{2,1,0} multiply(%integer_pow.208, %broadcast.3937)
  %param.748 = bf16[32,128,512]{2,1,0} parameter(856), sharding={devices=[1,1,8]<=[8]}
  %mul.12273 = bf16[32,128,512]{2,1,0} multiply(%param.748, %broadcast.3938)
  %add.3907 = bf16[32,128,512]{2,1,0} add(%mul.12272, %mul.12273)
  %div.2623 = bf16[32,128,512]{2,1,0} divide(%add.3907, %div.1488)
  %sqrt.209 = bf16[32,128,512]{2,1,0} sqrt(%div.2623)
  %add.3908 = bf16[32,128,512]{2,1,0} add(%sqrt.209, %broadcast.3939)
  %multiply.2720 = bf16[32,128,512]{2,1,0} multiply(%div.1487, %add.3908)
  %div.2624 = bf16[32,128,512]{2,1,0} divide(%add.3906, %multiply.2720)
  %mul.12274 = bf16[32,128,512]{2,1,0} multiply(%param.281, %broadcast.3935)
  %add.3909 = bf16[32,128,512]{2,1,0} add(%div.2624, %mul.12274)
  %mul.12275 = bf16[32,128,512]{2,1,0} multiply(%mul.9994, %add.3909)
  %add.3911 = bf16[32,128,512]{2,1,0} add(%param.281, %mul.12275)
  %div.2625 = bf16[512,32,128]{0,2,1} divide(%transpose.407, %div.1491)
  %select_n.918 = bf16[512,32,128]{2,1,0} select(%select_n.717, %transpose.407, %div.2625)
  %mul.12281 = bf16[512,32,128]{2,1,0} multiply(%select_n.918, %broadcast.3940)
  %param.749 = bf16[512,32,128]{2,1,0} parameter(534), sharding={devices=[8,1,1]<=[8]}
  %mul.12282 = bf16[512,32,128]{2,1,0} multiply(%param.749, %broadcast.3941)
  %add.3912 = bf16[512,32,128]{2,1,0} add(%mul.12281, %mul.12282)
  %integer_pow.209 = bf16[512,32,128]{2,1,0} multiply(%select_n.918, %select_n.918)
  %mul.12283 = bf16[512,32,128]{2,1,0} multiply(%integer_pow.209, %broadcast.3942)
  %param.750 = bf16[512,32,128]{2,1,0} parameter(857), sharding={devices=[8,1,1]<=[8]}
  %mul.12284 = bf16[512,32,128]{2,1,0} multiply(%param.750, %broadcast.3943)
  %add.3913 = bf16[512,32,128]{2,1,0} add(%mul.12283, %mul.12284)
  %div.2628 = bf16[512,32,128]{2,1,0} divide(%add.3913, %div.1494)
  %sqrt.210 = bf16[512,32,128]{2,1,0} sqrt(%div.2628)
  %add.3914 = bf16[512,32,128]{2,1,0} add(%sqrt.210, %broadcast.3944)
  %multiply.2721 = bf16[512,32,128]{2,1,0} multiply(%div.1493, %add.3914)
  %div.2629 = bf16[512,32,128]{2,1,0} divide(%add.3912, %multiply.2721)
  %mul.12285 = bf16[512,32,128]{2,1,0} multiply(%param.278, %broadcast.3940)
  %add.3915 = bf16[512,32,128]{2,1,0} add(%div.2629, %mul.12285)
  %mul.12286 = bf16[512,32,128]{2,1,0} multiply(%mul.10010, %add.3915)
  %add.3916 = bf16[512,32,128]{2,1,0} add(%param.278, %mul.12286)
  %div.2630 = bf16[512,8,128]{0,2,1} divide(%transpose.408, %div.1479)
  %select_n.919 = bf16[512,8,128]{2,1,0} select(%select_n.713, %transpose.408, %div.2630)
  %mul.12289 = bf16[512,8,128]{2,1,0} multiply(%select_n.919, %broadcast.3930)
  %param.751 = bf16[512,8,128]{2,1,0} parameter(535), sharding={devices=[8,1,1]<=[8]}
  %mul.12290 = bf16[512,8,128]{2,1,0} multiply(%param.751, %broadcast.3931)
  %add.3917 = bf16[512,8,128]{2,1,0} add(%mul.12289, %mul.12290)
  %integer_pow.210 = bf16[512,8,128]{2,1,0} multiply(%select_n.919, %select_n.919)
  %mul.12291 = bf16[512,8,128]{2,1,0} multiply(%integer_pow.210, %broadcast.3932)
  %param.752 = bf16[512,8,128]{2,1,0} parameter(858), sharding={devices=[8,1,1]<=[8]}
  %mul.12292 = bf16[512,8,128]{2,1,0} multiply(%param.752, %broadcast.3933)
  %add.3918 = bf16[512,8,128]{2,1,0} add(%mul.12291, %mul.12292)
  %div.2633 = bf16[512,8,128]{2,1,0} divide(%add.3918, %div.1482)
  %sqrt.211 = bf16[512,8,128]{2,1,0} sqrt(%div.2633)
  %add.3919 = bf16[512,8,128]{2,1,0} add(%sqrt.211, %broadcast.3934)
  %multiply.2722 = bf16[512,8,128]{2,1,0} multiply(%div.1481, %add.3919)
  %div.2634 = bf16[512,8,128]{2,1,0} divide(%add.3917, %multiply.2722)
  %mul.12293 = bf16[512,8,128]{2,1,0} multiply(%param.280, %broadcast.3930)
  %add.3920 = bf16[512,8,128]{2,1,0} add(%div.2634, %mul.12293)
  %mul.12299 = bf16[512,8,128]{2,1,0} multiply(%mul.9984, %add.3920)
  %add.3921 = bf16[512,8,128]{2,1,0} add(%param.280, %mul.12299)
  %div.2639 = bf16[512,8]{1,0} divide(%dynamic-slice.2391, %div.1442)
  %select_n.920 = bf16[512,8]{1,0} select(%select_n.704, %dynamic-slice.2391, %div.2639)
  %mul.12301 = bf16[512,8]{1,0} multiply(%select_n.920, %broadcast.3915)
  %param.753 = bf16[512,8]{1,0} parameter(536), sharding={devices=[8,1]<=[8]}
  %mul.12302 = bf16[512,8]{1,0} multiply(%param.753, %broadcast.3916)
  %add.3922 = bf16[512,8]{1,0} add(%mul.12301, %mul.12302)
  %integer_pow.211 = bf16[512,8]{1,0} multiply(%select_n.920, %select_n.920)
  %mul.12303 = bf16[512,8]{1,0} multiply(%integer_pow.211, %broadcast.3917)
  %param.754 = bf16[512,8]{1,0} parameter(859), sharding={devices=[8,1]<=[8]}
  %mul.12304 = bf16[512,8]{1,0} multiply(%param.754, %broadcast.3918)
  %add.3923 = bf16[512,8]{1,0} add(%mul.12303, %mul.12304)
  %div.2642 = bf16[512,8]{1,0} divide(%add.3923, %div.1446)
  %sqrt.212 = bf16[512,8]{1,0} sqrt(%div.2642)
  %add.3924 = bf16[512,8]{1,0} add(%sqrt.212, %broadcast.3919)
  %multiply.2723 = bf16[512,8]{1,0} multiply(%div.1444, %add.3924)
  %div.2643 = bf16[512,8]{1,0} divide(%add.3922, %multiply.2723)
  %mul.12305 = bf16[512,8]{1,0} multiply(%param.293, %broadcast.3915)
  %add.3925 = bf16[512,8]{1,0} add(%div.2643, %mul.12305)
  %mul.12307 = bf16[512,8]{1,0} multiply(%mul.9922, %add.3925)
  %add.3926 = bf16[512,8]{1,0} add(%param.293, %mul.12307)
  %div.2644 = bf16[1,4096,14336]{2,1,0} divide(%sharding_constraint.2528, %div.1450)
  %select_n.921 = bf16[1,4096,14336]{2,1,0} select(%select_n.706, %sharding_constraint.2528, %div.2644)
  %mul.12314 = bf16[1,4096,14336]{2,1,0} multiply(%select_n.921, %broadcast.3920)
  %param.755 = bf16[1,4096,14336]{2,1,0} parameter(537), sharding={devices=[8,1,1]<=[8]}
  %mul.12315 = bf16[1,4096,14336]{2,1,0} multiply(%param.755, %broadcast.3921)
  %add.3927 = bf16[1,4096,14336]{2,1,0} add(%mul.12314, %mul.12315)
  %integer_pow.212 = bf16[1,4096,14336]{2,1,0} multiply(%select_n.921, %select_n.921)
  %mul.12316 = bf16[1,4096,14336]{2,1,0} multiply(%integer_pow.212, %broadcast.3922)
  %param.756 = bf16[1,4096,14336]{2,1,0} parameter(860), sharding={devices=[8,1,1]<=[8]}
  %mul.12317 = bf16[1,4096,14336]{2,1,0} multiply(%param.756, %broadcast.3923)
  %add.3928 = bf16[1,4096,14336]{2,1,0} add(%mul.12316, %mul.12317)
  %div.2647 = bf16[1,4096,14336]{2,1,0} divide(%add.3928, %div.1455)
  %sqrt.213 = bf16[1,4096,14336]{2,1,0} sqrt(%div.2647)
  %add.3929 = bf16[1,4096,14336]{2,1,0} add(%sqrt.213, %broadcast.3924)
  %multiply.2724 = bf16[1,4096,14336]{2,1,0} multiply(%div.1454, %add.3929)
  %div.2648 = bf16[1,4096,14336]{2,1,0} divide(%add.3927, %multiply.2724)
  %mul.12318 = bf16[1,4096,14336]{2,1,0} multiply(%param.294, %broadcast.3920)
  %add.3930 = bf16[1,4096,14336]{2,1,0} add(%div.2648, %mul.12318)
  %mul.12319 = bf16[1,4096,14336]{2,1,0} multiply(%mul.9929, %add.3930)
  %add.3931 = bf16[1,4096,14336]{2,1,0} add(%param.294, %mul.12319)
  %div.2649 = bf16[1,4096,14336]{2,1,0} divide(%sharding_constraint.2529, %div.1450)
  %select_n.922 = bf16[1,4096,14336]{2,1,0} select(%select_n.706, %sharding_constraint.2529, %div.2649)
  %mul.12322 = bf16[1,4096,14336]{2,1,0} multiply(%select_n.922, %broadcast.3920)
  %param.757 = bf16[1,4096,14336]{2,1,0} parameter(538), sharding={devices=[8,1,1]<=[8]}
  %mul.12323 = bf16[1,4096,14336]{2,1,0} multiply(%param.757, %broadcast.3921)
  %add.3932 = bf16[1,4096,14336]{2,1,0} add(%mul.12322, %mul.12323)
  %integer_pow.213 = bf16[1,4096,14336]{2,1,0} multiply(%select_n.922, %select_n.922)
  %mul.12324 = bf16[1,4096,14336]{2,1,0} multiply(%integer_pow.213, %broadcast.3922)
  %param.758 = bf16[1,4096,14336]{2,1,0} parameter(861), sharding={devices=[8,1,1]<=[8]}
  %mul.12325 = bf16[1,4096,14336]{2,1,0} multiply(%param.758, %broadcast.3923)
  %add.3933 = bf16[1,4096,14336]{2,1,0} add(%mul.12324, %mul.12325)
  %div.2652 = bf16[1,4096,14336]{2,1,0} divide(%add.3933, %div.1455)
  %sqrt.214 = bf16[1,4096,14336]{2,1,0} sqrt(%div.2652)
  %add.3934 = bf16[1,4096,14336]{2,1,0} add(%sqrt.214, %broadcast.3924)
  %multiply.2725 = bf16[1,4096,14336]{2,1,0} multiply(%div.1454, %add.3934)
  %div.2653 = bf16[1,4096,14336]{2,1,0} divide(%add.3932, %multiply.2725)
  %mul.12326 = bf16[1,4096,14336]{2,1,0} multiply(%param.295, %broadcast.3920)
  %add.3935 = bf16[1,4096,14336]{2,1,0} add(%div.2653, %mul.12326)
  %mul.12327 = bf16[1,4096,14336]{2,1,0} multiply(%mul.9929, %add.3935)
  %add.3936 = bf16[1,4096,14336]{2,1,0} add(%param.295, %mul.12327)
  %div.2654 = bf16[1,14336,4096]{2,1,0} divide(%sharding_constraint.2530, %div.1463)
  %select_n.923 = bf16[1,14336,4096]{2,1,0} select(%select_n.709, %sharding_constraint.2530, %div.2654)
  %mul.12332 = bf16[1,14336,4096]{2,1,0} multiply(%select_n.923, %broadcast.3925)
  %param.759 = bf16[1,14336,4096]{2,1,0} parameter(539), sharding={devices=[8,1,1]<=[8]}
  %mul.12333 = bf16[1,14336,4096]{2,1,0} multiply(%param.759, %broadcast.3926)
  %add.3937 = bf16[1,14336,4096]{2,1,0} add(%mul.12332, %mul.12333)
  %integer_pow.214 = bf16[1,14336,4096]{2,1,0} multiply(%select_n.923, %select_n.923)
  %mul.12334 = bf16[1,14336,4096]{2,1,0} multiply(%integer_pow.214, %broadcast.3927)
  %param.760 = bf16[1,14336,4096]{2,1,0} parameter(862), sharding={devices=[8,1,1]<=[8]}
  %mul.12338 = bf16[1,14336,4096]{2,1,0} multiply(%param.760, %broadcast.3928)
  %add.3938 = bf16[1,14336,4096]{2,1,0} add(%mul.12334, %mul.12338)
  %div.2657 = bf16[1,14336,4096]{2,1,0} divide(%add.3938, %div.1466)
  %sqrt.215 = bf16[1,14336,4096]{2,1,0} sqrt(%div.2657)
  %add.3939 = bf16[1,14336,4096]{2,1,0} add(%sqrt.215, %broadcast.3929)
  %multiply.2726 = bf16[1,14336,4096]{2,1,0} multiply(%div.1465, %add.3939)
  %div.2658 = bf16[1,14336,4096]{2,1,0} divide(%add.3937, %multiply.2726)
  %mul.12346 = bf16[1,14336,4096]{2,1,0} multiply(%param.296, %broadcast.3925)
  %add.3940 = bf16[1,14336,4096]{2,1,0} add(%div.2658, %mul.12346)
  %mul.12347 = bf16[1,14336,4096]{2,1,0} multiply(%mul.9949, %add.3940)
  %add.3941 = bf16[1,14336,4096]{2,1,0} add(%param.296, %mul.12347)
  %div.2659 = bf16[4096]{0} divide(%all-reduce.322, %div.1436)
  %select_n.924 = bf16[4096]{0} select(%select_n.701, %all-reduce.322, %div.2659)
  %mul.12353 = bf16[4096]{0} multiply(%select_n.924, %broadcast.3910)
  %param.761 = bf16[4096]{0} parameter(540), sharding={replicated}
  %mul.12355 = bf16[4096]{0} multiply(%param.761, %broadcast.3911)
  %add.3942 = bf16[4096]{0} add(%mul.12353, %mul.12355)
  %integer_pow.215 = bf16[4096]{0} multiply(%select_n.924, %select_n.924)
  %mul.12356 = bf16[4096]{0} multiply(%integer_pow.215, %broadcast.3912)
  %param.762 = bf16[4096]{0} parameter(863), sharding={replicated}
  %mul.12357 = bf16[4096]{0} multiply(%param.762, %broadcast.3913)
  %add.3943 = bf16[4096]{0} add(%mul.12356, %mul.12357)
  %div.2662 = bf16[4096]{0} divide(%add.3943, %div.1439)
  %sqrt.216 = bf16[4096]{0} sqrt(%div.2662)
  %add.3944 = bf16[4096]{0} add(%sqrt.216, %broadcast.3914)
  %multiply.2727 = bf16[4096]{0} multiply(%div.1438, %add.3944)
  %div.2663 = bf16[4096]{0} divide(%add.3942, %multiply.2727)
  %mul.12358 = bf16[4096]{0} multiply(%param.292, %broadcast.3910)
  %add.3945 = bf16[4096]{0} add(%div.2663, %mul.12358)
  %mul.12359 = bf16[4096]{0} multiply(%mul.2424, %add.3945)
  %add.3947 = bf16[4096]{0} add(%param.292, %mul.12359)
  %div.2664 = bf16[4096]{0} divide(%all-reduce.323, %div.1436)
  %select_n.925 = bf16[4096]{0} select(%select_n.701, %all-reduce.323, %div.2664)
  %mul.12365 = bf16[4096]{0} multiply(%select_n.925, %broadcast.3910)
  %param.763 = bf16[4096]{0} parameter(541), sharding={replicated}
  %mul.12366 = bf16[4096]{0} multiply(%param.763, %broadcast.3911)
  %add.3948 = bf16[4096]{0} add(%mul.12365, %mul.12366)
  %integer_pow.216 = bf16[4096]{0} multiply(%select_n.925, %select_n.925)
  %mul.12367 = bf16[4096]{0} multiply(%integer_pow.216, %broadcast.3912)
  %param.764 = bf16[4096]{0} parameter(864), sharding={replicated}
  %mul.12371 = bf16[4096]{0} multiply(%param.764, %broadcast.3913)
  %add.3949 = bf16[4096]{0} add(%mul.12367, %mul.12371)
  %div.2667 = bf16[4096]{0} divide(%add.3949, %div.1439)
  %sqrt.217 = bf16[4096]{0} sqrt(%div.2667)
  %add.3950 = bf16[4096]{0} add(%sqrt.217, %broadcast.3914)
  %multiply.2728 = bf16[4096]{0} multiply(%div.1438, %add.3950)
  %div.2668 = bf16[4096]{0} divide(%add.3948, %multiply.2728)
  %mul.12378 = bf16[4096]{0} multiply(%param.287, %broadcast.3910)
  %add.3951 = bf16[4096]{0} add(%div.2668, %mul.12378)
  %mul.12387 = bf16[4096]{0} multiply(%mul.2424, %add.3951)
  %add.3952 = bf16[4096]{0} add(%param.287, %mul.12387)
  %div.2669 = bf16[512,8,128]{0,2,1} divide(%transpose.409, %div.1479)
  %select_n.926 = bf16[512,8,128]{2,1,0} select(%select_n.713, %transpose.409, %div.2669)
  %mul.12397 = bf16[512,8,128]{2,1,0} multiply(%select_n.926, %broadcast.3930)
  %param.765 = bf16[512,8,128]{2,1,0} parameter(542), sharding={devices=[8,1,1]<=[8]}
  %mul.12398 = bf16[512,8,128]{2,1,0} multiply(%param.765, %broadcast.3931)
  %add.3953 = bf16[512,8,128]{2,1,0} add(%mul.12397, %mul.12398)
  %integer_pow.217 = bf16[512,8,128]{2,1,0} multiply(%select_n.926, %select_n.926)
  %mul.12399 = bf16[512,8,128]{2,1,0} multiply(%integer_pow.217, %broadcast.3932)
  %param.766 = bf16[512,8,128]{2,1,0} parameter(865), sharding={devices=[8,1,1]<=[8]}
  %mul.12401 = bf16[512,8,128]{2,1,0} multiply(%param.766, %broadcast.3933)
  %add.3955 = bf16[512,8,128]{2,1,0} add(%mul.12399, %mul.12401)
  %div.2674 = bf16[512,8,128]{2,1,0} divide(%add.3955, %div.1482)
  %sqrt.218 = bf16[512,8,128]{2,1,0} sqrt(%div.2674)
  %add.3956 = bf16[512,8,128]{2,1,0} add(%sqrt.218, %broadcast.3934)
  %multiply.2729 = bf16[512,8,128]{2,1,0} multiply(%div.1481, %add.3956)
  %div.2675 = bf16[512,8,128]{2,1,0} divide(%add.3953, %multiply.2729)
  %mul.12402 = bf16[512,8,128]{2,1,0} multiply(%param.289, %broadcast.3930)
  %add.3957 = bf16[512,8,128]{2,1,0} add(%div.2675, %mul.12402)
  %mul.12403 = bf16[512,8,128]{2,1,0} multiply(%mul.9984, %add.3957)
  %add.3959 = bf16[512,8,128]{2,1,0} add(%param.289, %mul.12403)
  %div.2676 = bf16[32,128,512]{1,0,2} divide(%transpose.410, %div.1485)
  %select_n.927 = bf16[32,128,512]{2,1,0} select(%select_n.715, %transpose.410, %div.2676)
  %mul.12405 = bf16[32,128,512]{2,1,0} multiply(%select_n.927, %broadcast.3935)
  %param.767 = bf16[32,128,512]{2,1,0} parameter(543), sharding={devices=[1,1,8]<=[8]}
  %mul.12406 = bf16[32,128,512]{2,1,0} multiply(%param.767, %broadcast.3936)
  %add.3960 = bf16[32,128,512]{2,1,0} add(%mul.12405, %mul.12406)
  %integer_pow.218 = bf16[32,128,512]{2,1,0} multiply(%select_n.927, %select_n.927)
  %mul.12407 = bf16[32,128,512]{2,1,0} multiply(%integer_pow.218, %broadcast.3937)
  %param.768 = bf16[32,128,512]{2,1,0} parameter(866), sharding={devices=[1,1,8]<=[8]}
  %mul.12408 = bf16[32,128,512]{2,1,0} multiply(%param.768, %broadcast.3938)
  %add.3961 = bf16[32,128,512]{2,1,0} add(%mul.12407, %mul.12408)
  %div.2679 = bf16[32,128,512]{2,1,0} divide(%add.3961, %div.1488)
  %sqrt.219 = bf16[32,128,512]{2,1,0} sqrt(%div.2679)
  %add.3962 = bf16[32,128,512]{2,1,0} add(%sqrt.219, %broadcast.3939)
  %multiply.2730 = bf16[32,128,512]{2,1,0} multiply(%div.1487, %add.3962)
  %div.2680 = bf16[32,128,512]{2,1,0} divide(%add.3960, %multiply.2730)
  %mul.12409 = bf16[32,128,512]{2,1,0} multiply(%param.291, %broadcast.3935)
  %add.3964 = bf16[32,128,512]{2,1,0} add(%div.2680, %mul.12409)
  %mul.12410 = bf16[32,128,512]{2,1,0} multiply(%mul.9994, %add.3964)
  %add.3965 = bf16[32,128,512]{2,1,0} add(%param.291, %mul.12410)
  %div.2681 = bf16[512,32,128]{0,2,1} divide(%transpose.411, %div.1491)
  %select_n.928 = bf16[512,32,128]{2,1,0} select(%select_n.717, %transpose.411, %div.2681)
  %mul.12412 = bf16[512,32,128]{2,1,0} multiply(%select_n.928, %broadcast.3940)
  %param.769 = bf16[512,32,128]{2,1,0} parameter(544), sharding={devices=[8,1,1]<=[8]}
  %mul.12413 = bf16[512,32,128]{2,1,0} multiply(%param.769, %broadcast.3941)
  %add.3966 = bf16[512,32,128]{2,1,0} add(%mul.12412, %mul.12413)
  %integer_pow.219 = bf16[512,32,128]{2,1,0} multiply(%select_n.928, %select_n.928)
  %mul.12414 = bf16[512,32,128]{2,1,0} multiply(%integer_pow.219, %broadcast.3942)
  %param.770 = bf16[512,32,128]{2,1,0} parameter(867), sharding={devices=[8,1,1]<=[8]}
  %mul.12415 = bf16[512,32,128]{2,1,0} multiply(%param.770, %broadcast.3943)
  %add.3967 = bf16[512,32,128]{2,1,0} add(%mul.12414, %mul.12415)
  %div.2684 = bf16[512,32,128]{2,1,0} divide(%add.3967, %div.1494)
  %sqrt.220 = bf16[512,32,128]{2,1,0} sqrt(%div.2684)
  %add.3968 = bf16[512,32,128]{2,1,0} add(%sqrt.220, %broadcast.3944)
  %multiply.2731 = bf16[512,32,128]{2,1,0} multiply(%div.1493, %add.3968)
  %div.2685 = bf16[512,32,128]{2,1,0} divide(%add.3966, %multiply.2731)
  %mul.12416 = bf16[512,32,128]{2,1,0} multiply(%param.288, %broadcast.3940)
  %add.3969 = bf16[512,32,128]{2,1,0} add(%div.2685, %mul.12416)
  %mul.12417 = bf16[512,32,128]{2,1,0} multiply(%mul.10010, %add.3969)
  %add.3970 = bf16[512,32,128]{2,1,0} add(%param.288, %mul.12417)
  %div.2686 = bf16[512,8,128]{0,2,1} divide(%transpose.412, %div.1479)
  %select_n.929 = bf16[512,8,128]{2,1,0} select(%select_n.713, %transpose.412, %div.2686)
  %mul.12427 = bf16[512,8,128]{2,1,0} multiply(%select_n.929, %broadcast.3930)
  %param.771 = bf16[512,8,128]{2,1,0} parameter(545), sharding={devices=[8,1,1]<=[8]}
  %mul.12437 = bf16[512,8,128]{2,1,0} multiply(%param.771, %broadcast.3931)
  %add.3971 = bf16[512,8,128]{2,1,0} add(%mul.12427, %mul.12437)
  %integer_pow.220 = bf16[512,8,128]{2,1,0} multiply(%select_n.929, %select_n.929)
  %mul.12440 = bf16[512,8,128]{2,1,0} multiply(%integer_pow.220, %broadcast.3932)
  %param.772 = bf16[512,8,128]{2,1,0} parameter(868), sharding={devices=[8,1,1]<=[8]}
  %mul.12441 = bf16[512,8,128]{2,1,0} multiply(%param.772, %broadcast.3933)
  %add.3972 = bf16[512,8,128]{2,1,0} add(%mul.12440, %mul.12441)
  %div.2689 = bf16[512,8,128]{2,1,0} divide(%add.3972, %div.1482)
  %sqrt.221 = bf16[512,8,128]{2,1,0} sqrt(%div.2689)
  %add.3973 = bf16[512,8,128]{2,1,0} add(%sqrt.221, %broadcast.3934)
  %multiply.2732 = bf16[512,8,128]{2,1,0} multiply(%div.1481, %add.3973)
  %div.2690 = bf16[512,8,128]{2,1,0} divide(%add.3971, %multiply.2732)
  %mul.12442 = bf16[512,8,128]{2,1,0} multiply(%param.290, %broadcast.3930)
  %add.3974 = bf16[512,8,128]{2,1,0} add(%div.2690, %mul.12442)
  %mul.12443 = bf16[512,8,128]{2,1,0} multiply(%mul.9984, %add.3974)
  %add.3975 = bf16[512,8,128]{2,1,0} add(%param.290, %mul.12443)
  %div.2691 = bf16[512,8]{1,0} divide(%dynamic-slice.2401, %div.1442)
  %select_n.930 = bf16[512,8]{1,0} select(%select_n.704, %dynamic-slice.2401, %div.2691)
  %mul.12445 = bf16[512,8]{1,0} multiply(%select_n.930, %broadcast.3915)
  %param.773 = bf16[512,8]{1,0} parameter(546), sharding={devices=[8,1]<=[8]}
  %mul.12446 = bf16[512,8]{1,0} multiply(%param.773, %broadcast.3916)
  %add.3976 = bf16[512,8]{1,0} add(%mul.12445, %mul.12446)
  %integer_pow.221 = bf16[512,8]{1,0} multiply(%select_n.930, %select_n.930)
  %mul.12447 = bf16[512,8]{1,0} multiply(%integer_pow.221, %broadcast.3917)
  %param.774 = bf16[512,8]{1,0} parameter(869), sharding={devices=[8,1]<=[8]}
  %mul.12448 = bf16[512,8]{1,0} multiply(%param.774, %broadcast.3918)
  %add.3977 = bf16[512,8]{1,0} add(%mul.12447, %mul.12448)
  %div.2694 = bf16[512,8]{1,0} divide(%add.3977, %div.1446)
  %sqrt.222 = bf16[512,8]{1,0} sqrt(%div.2694)
  %add.3978 = bf16[512,8]{1,0} add(%sqrt.222, %broadcast.3919)
  %multiply.2733 = bf16[512,8]{1,0} multiply(%div.1444, %add.3978)
  %div.2695 = bf16[512,8]{1,0} divide(%add.3976, %multiply.2733)
  %mul.12449 = bf16[512,8]{1,0} multiply(%param.303, %broadcast.3915)
  %add.3979 = bf16[512,8]{1,0} add(%div.2695, %mul.12449)
  %mul.12450 = bf16[512,8]{1,0} multiply(%mul.9922, %add.3979)
  %add.3980 = bf16[512,8]{1,0} add(%param.303, %mul.12450)
  %div.2696 = bf16[1,4096,14336]{2,1,0} divide(%sharding_constraint.2531, %div.1450)
  %select_n.931 = bf16[1,4096,14336]{2,1,0} select(%select_n.706, %sharding_constraint.2531, %div.2696)
  %mul.12452 = bf16[1,4096,14336]{2,1,0} multiply(%select_n.931, %broadcast.3920)
  %param.775 = bf16[1,4096,14336]{2,1,0} parameter(547), sharding={devices=[8,1,1]<=[8]}
  %mul.12453 = bf16[1,4096,14336]{2,1,0} multiply(%param.775, %broadcast.3921)
  %add.3981 = bf16[1,4096,14336]{2,1,0} add(%mul.12452, %mul.12453)
  %integer_pow.222 = bf16[1,4096,14336]{2,1,0} multiply(%select_n.931, %select_n.931)
  %mul.12454 = bf16[1,4096,14336]{2,1,0} multiply(%integer_pow.222, %broadcast.3922)
  %param.776 = bf16[1,4096,14336]{2,1,0} parameter(870), sharding={devices=[8,1,1]<=[8]}
  %mul.12455 = bf16[1,4096,14336]{2,1,0} multiply(%param.776, %broadcast.3923)
  %add.3982 = bf16[1,4096,14336]{2,1,0} add(%mul.12454, %mul.12455)
  %div.2699 = bf16[1,4096,14336]{2,1,0} divide(%add.3982, %div.1455)
  %sqrt.223 = bf16[1,4096,14336]{2,1,0} sqrt(%div.2699)
  %add.3983 = bf16[1,4096,14336]{2,1,0} add(%sqrt.223, %broadcast.3924)
  %multiply.2734 = bf16[1,4096,14336]{2,1,0} multiply(%div.1454, %add.3983)
  %div.2700 = bf16[1,4096,14336]{2,1,0} divide(%add.3981, %multiply.2734)
  %mul.12456 = bf16[1,4096,14336]{2,1,0} multiply(%param.304, %broadcast.3920)
  %add.3984 = bf16[1,4096,14336]{2,1,0} add(%div.2700, %mul.12456)
  %mul.12457 = bf16[1,4096,14336]{2,1,0} multiply(%mul.9929, %add.3984)
  %add.3986 = bf16[1,4096,14336]{2,1,0} add(%param.304, %mul.12457)
  %div.2701 = bf16[1,4096,14336]{2,1,0} divide(%sharding_constraint.2532, %div.1450)
  %select_n.932 = bf16[1,4096,14336]{2,1,0} select(%select_n.706, %sharding_constraint.2532, %div.2701)
  %mul.12459 = bf16[1,4096,14336]{2,1,0} multiply(%select_n.932, %broadcast.3920)
  %param.777 = bf16[1,4096,14336]{2,1,0} parameter(548), sharding={devices=[8,1,1]<=[8]}
  %mul.12460 = bf16[1,4096,14336]{2,1,0} multiply(%param.777, %broadcast.3921)
  %add.3987 = bf16[1,4096,14336]{2,1,0} add(%mul.12459, %mul.12460)
  %integer_pow.223 = bf16[1,4096,14336]{2,1,0} multiply(%select_n.932, %select_n.932)
  %mul.12461 = bf16[1,4096,14336]{2,1,0} multiply(%integer_pow.223, %broadcast.3922)
  %param.778 = bf16[1,4096,14336]{2,1,0} parameter(871), sharding={devices=[8,1,1]<=[8]}
  %mul.12462 = bf16[1,4096,14336]{2,1,0} multiply(%param.778, %broadcast.3923)
  %add.3988 = bf16[1,4096,14336]{2,1,0} add(%mul.12461, %mul.12462)
  %div.2704 = bf16[1,4096,14336]{2,1,0} divide(%add.3988, %div.1455)
  %sqrt.224 = bf16[1,4096,14336]{2,1,0} sqrt(%div.2704)
  %add.3989 = bf16[1,4096,14336]{2,1,0} add(%sqrt.224, %broadcast.3924)
  %multiply.2735 = bf16[1,4096,14336]{2,1,0} multiply(%div.1454, %add.3989)
  %div.2705 = bf16[1,4096,14336]{2,1,0} divide(%add.3987, %multiply.2735)
  %mul.12463 = bf16[1,4096,14336]{2,1,0} multiply(%param.305, %broadcast.3920)
  %add.3990 = bf16[1,4096,14336]{2,1,0} add(%div.2705, %mul.12463)
  %mul.12464 = bf16[1,4096,14336]{2,1,0} multiply(%mul.9929, %add.3990)
  %add.3991 = bf16[1,4096,14336]{2,1,0} add(%param.305, %mul.12464)
  %div.2706 = bf16[1,14336,4096]{2,1,0} divide(%sharding_constraint.2533, %div.1463)
  %select_n.933 = bf16[1,14336,4096]{2,1,0} select(%select_n.709, %sharding_constraint.2533, %div.2706)
  %mul.12466 = bf16[1,14336,4096]{2,1,0} multiply(%select_n.933, %broadcast.3925)
  %param.779 = bf16[1,14336,4096]{2,1,0} parameter(549), sharding={devices=[8,1,1]<=[8]}
  %mul.12467 = bf16[1,14336,4096]{2,1,0} multiply(%param.779, %broadcast.3926)
  %add.3992 = bf16[1,14336,4096]{2,1,0} add(%mul.12466, %mul.12467)
  %integer_pow.224 = bf16[1,14336,4096]{2,1,0} multiply(%select_n.933, %select_n.933)
  %mul.12468 = bf16[1,14336,4096]{2,1,0} multiply(%integer_pow.224, %broadcast.3927)
  %param.780 = bf16[1,14336,4096]{2,1,0} parameter(872), sharding={devices=[8,1,1]<=[8]}
  %mul.12469 = bf16[1,14336,4096]{2,1,0} multiply(%param.780, %broadcast.3928)
  %add.3993 = bf16[1,14336,4096]{2,1,0} add(%mul.12468, %mul.12469)
  %div.2709 = bf16[1,14336,4096]{2,1,0} divide(%add.3993, %div.1466)
  %sqrt.225 = bf16[1,14336,4096]{2,1,0} sqrt(%div.2709)
  %add.3994 = bf16[1,14336,4096]{2,1,0} add(%sqrt.225, %broadcast.3929)
  %multiply.2736 = bf16[1,14336,4096]{2,1,0} multiply(%div.1465, %add.3994)
  %div.2710 = bf16[1,14336,4096]{2,1,0} divide(%add.3992, %multiply.2736)
  %mul.12470 = bf16[1,14336,4096]{2,1,0} multiply(%param.306, %broadcast.3925)
  %add.3995 = bf16[1,14336,4096]{2,1,0} add(%div.2710, %mul.12470)
  %mul.12471 = bf16[1,14336,4096]{2,1,0} multiply(%mul.9949, %add.3995)
  %add.3996 = bf16[1,14336,4096]{2,1,0} add(%param.306, %mul.12471)
  %div.2711 = bf16[4096]{0} divide(%all-reduce.337, %div.1436)
  %select_n.934 = bf16[4096]{0} select(%select_n.701, %all-reduce.337, %div.2711)
  %mul.12473 = bf16[4096]{0} multiply(%select_n.934, %broadcast.3910)
  %param.781 = bf16[4096]{0} parameter(550), sharding={replicated}
  %mul.12474 = bf16[4096]{0} multiply(%param.781, %broadcast.3911)
  %add.3997 = bf16[4096]{0} add(%mul.12473, %mul.12474)
  %integer_pow.225 = bf16[4096]{0} multiply(%select_n.934, %select_n.934)
  %mul.12475 = bf16[4096]{0} multiply(%integer_pow.225, %broadcast.3912)
  %param.782 = bf16[4096]{0} parameter(873), sharding={replicated}
  %mul.12476 = bf16[4096]{0} multiply(%param.782, %broadcast.3913)
  %add.3998 = bf16[4096]{0} add(%mul.12475, %mul.12476)
  %div.2714 = bf16[4096]{0} divide(%add.3998, %div.1439)
  %sqrt.226 = bf16[4096]{0} sqrt(%div.2714)
  %add.3999 = bf16[4096]{0} add(%sqrt.226, %broadcast.3914)
  %multiply.2737 = bf16[4096]{0} multiply(%div.1438, %add.3999)
  %div.2715 = bf16[4096]{0} divide(%add.3997, %multiply.2737)
  %mul.12477 = bf16[4096]{0} multiply(%param.302, %broadcast.3910)
  %add.4000 = bf16[4096]{0} add(%div.2715, %mul.12477)
  %mul.12478 = bf16[4096]{0} multiply(%mul.2424, %add.4000)
  %add.4001 = bf16[4096]{0} add(%param.302, %mul.12478)
  %div.2716 = bf16[4096]{0} divide(%all-reduce.338, %div.1436)
  %select_n.935 = bf16[4096]{0} select(%select_n.701, %all-reduce.338, %div.2716)
  %mul.12480 = bf16[4096]{0} multiply(%select_n.935, %broadcast.3910)
  %param.783 = bf16[4096]{0} parameter(551), sharding={replicated}
  %mul.12481 = bf16[4096]{0} multiply(%param.783, %broadcast.3911)
  %add.4002 = bf16[4096]{0} add(%mul.12480, %mul.12481)
  %integer_pow.226 = bf16[4096]{0} multiply(%select_n.935, %select_n.935)
  %mul.12482 = bf16[4096]{0} multiply(%integer_pow.226, %broadcast.3912)
  %param.784 = bf16[4096]{0} parameter(874), sharding={replicated}
  %mul.12483 = bf16[4096]{0} multiply(%param.784, %broadcast.3913)
  %add.4005 = bf16[4096]{0} add(%mul.12482, %mul.12483)
  %div.2719 = bf16[4096]{0} divide(%add.4005, %div.1439)
  %sqrt.227 = bf16[4096]{0} sqrt(%div.2719)
  %add.4006 = bf16[4096]{0} add(%sqrt.227, %broadcast.3914)
  %multiply.2738 = bf16[4096]{0} multiply(%div.1438, %add.4006)
  %div.2720 = bf16[4096]{0} divide(%add.4002, %multiply.2738)
  %mul.12484 = bf16[4096]{0} multiply(%param.297, %broadcast.3910)
  %add.4007 = bf16[4096]{0} add(%div.2720, %mul.12484)
  %mul.12485 = bf16[4096]{0} multiply(%mul.2424, %add.4007)
  %add.4008 = bf16[4096]{0} add(%param.297, %mul.12485)
  %div.2721 = bf16[512,8,128]{0,2,1} divide(%transpose.413, %div.1479)
  %select_n.936 = bf16[512,8,128]{2,1,0} select(%select_n.713, %transpose.413, %div.2721)
  %mul.12487 = bf16[512,8,128]{2,1,0} multiply(%select_n.936, %broadcast.3930)
  %param.785 = bf16[512,8,128]{2,1,0} parameter(552), sharding={devices=[8,1,1]<=[8]}
  %mul.12488 = bf16[512,8,128]{2,1,0} multiply(%param.785, %broadcast.3931)
  %add.4009 = bf16[512,8,128]{2,1,0} add(%mul.12487, %mul.12488)
  %integer_pow.227 = bf16[512,8,128]{2,1,0} multiply(%select_n.936, %select_n.936)
  %mul.12489 = bf16[512,8,128]{2,1,0} multiply(%integer_pow.227, %broadcast.3932)
  %param.786 = bf16[512,8,128]{2,1,0} parameter(875), sharding={devices=[8,1,1]<=[8]}
  %mul.12490 = bf16[512,8,128]{2,1,0} multiply(%param.786, %broadcast.3933)
  %add.4010 = bf16[512,8,128]{2,1,0} add(%mul.12489, %mul.12490)
  %div.2724 = bf16[512,8,128]{2,1,0} divide(%add.4010, %div.1482)
  %sqrt.228 = bf16[512,8,128]{2,1,0} sqrt(%div.2724)
  %add.4011 = bf16[512,8,128]{2,1,0} add(%sqrt.228, %broadcast.3934)
  %multiply.2739 = bf16[512,8,128]{2,1,0} multiply(%div.1481, %add.4011)
  %div.2725 = bf16[512,8,128]{2,1,0} divide(%add.4009, %multiply.2739)
  %mul.12491 = bf16[512,8,128]{2,1,0} multiply(%param.299, %broadcast.3930)
  %add.4012 = bf16[512,8,128]{2,1,0} add(%div.2725, %mul.12491)
  %mul.12492 = bf16[512,8,128]{2,1,0} multiply(%mul.9984, %add.4012)
  %add.4013 = bf16[512,8,128]{2,1,0} add(%param.299, %mul.12492)
  %div.2726 = bf16[32,128,512]{1,0,2} divide(%transpose.414, %div.1485)
  %select_n.937 = bf16[32,128,512]{2,1,0} select(%select_n.715, %transpose.414, %div.2726)
  %mul.12495 = bf16[32,128,512]{2,1,0} multiply(%select_n.937, %broadcast.3935)
  %param.787 = bf16[32,128,512]{2,1,0} parameter(553), sharding={devices=[1,1,8]<=[8]}
  %mul.12496 = bf16[32,128,512]{2,1,0} multiply(%param.787, %broadcast.3936)
  %add.4015 = bf16[32,128,512]{2,1,0} add(%mul.12495, %mul.12496)
  %integer_pow.228 = bf16[32,128,512]{2,1,0} multiply(%select_n.937, %select_n.937)
  %mul.12497 = bf16[32,128,512]{2,1,0} multiply(%integer_pow.228, %broadcast.3937)
  %param.788 = bf16[32,128,512]{2,1,0} parameter(876), sharding={devices=[1,1,8]<=[8]}
  %mul.12498 = bf16[32,128,512]{2,1,0} multiply(%param.788, %broadcast.3938)
  %add.4016 = bf16[32,128,512]{2,1,0} add(%mul.12497, %mul.12498)
  %div.2729 = bf16[32,128,512]{2,1,0} divide(%add.4016, %div.1488)
  %sqrt.229 = bf16[32,128,512]{2,1,0} sqrt(%div.2729)
  %add.4017 = bf16[32,128,512]{2,1,0} add(%sqrt.229, %broadcast.3939)
  %multiply.2740 = bf16[32,128,512]{2,1,0} multiply(%div.1487, %add.4017)
  %div.2730 = bf16[32,128,512]{2,1,0} divide(%add.4015, %multiply.2740)
  %mul.12499 = bf16[32,128,512]{2,1,0} multiply(%param.301, %broadcast.3935)
  %add.4018 = bf16[32,128,512]{2,1,0} add(%div.2730, %mul.12499)
  %mul.12500 = bf16[32,128,512]{2,1,0} multiply(%mul.9994, %add.4018)
  %add.4019 = bf16[32,128,512]{2,1,0} add(%param.301, %mul.12500)
  %div.2731 = bf16[512,32,128]{0,2,1} divide(%transpose.415, %div.1491)
  %select_n.938 = bf16[512,32,128]{2,1,0} select(%select_n.717, %transpose.415, %div.2731)
  %mul.12502 = bf16[512,32,128]{2,1,0} multiply(%select_n.938, %broadcast.3940)
  %param.789 = bf16[512,32,128]{2,1,0} parameter(554), sharding={devices=[8,1,1]<=[8]}
  %mul.12503 = bf16[512,32,128]{2,1,0} multiply(%param.789, %broadcast.3941)
  %add.4020 = bf16[512,32,128]{2,1,0} add(%mul.12502, %mul.12503)
  %integer_pow.229 = bf16[512,32,128]{2,1,0} multiply(%select_n.938, %select_n.938)
  %mul.12504 = bf16[512,32,128]{2,1,0} multiply(%integer_pow.229, %broadcast.3942)
  %param.790 = bf16[512,32,128]{2,1,0} parameter(877), sharding={devices=[8,1,1]<=[8]}
  %mul.12510 = bf16[512,32,128]{2,1,0} multiply(%param.790, %broadcast.3943)
  %add.4021 = bf16[512,32,128]{2,1,0} add(%mul.12504, %mul.12510)
  %div.2735 = bf16[512,32,128]{2,1,0} divide(%add.4021, %div.1494)
  %sqrt.230 = bf16[512,32,128]{2,1,0} sqrt(%div.2735)
  %add.4022 = bf16[512,32,128]{2,1,0} add(%sqrt.230, %broadcast.3944)
  %multiply.2741 = bf16[512,32,128]{2,1,0} multiply(%div.1493, %add.4022)
  %div.2736 = bf16[512,32,128]{2,1,0} divide(%add.4020, %multiply.2741)
  %mul.12511 = bf16[512,32,128]{2,1,0} multiply(%param.298, %broadcast.3940)
  %add.4023 = bf16[512,32,128]{2,1,0} add(%div.2736, %mul.12511)
  %mul.12516 = bf16[512,32,128]{2,1,0} multiply(%mul.10010, %add.4023)
  %add.4024 = bf16[512,32,128]{2,1,0} add(%param.298, %mul.12516)
  %div.2737 = bf16[512,8,128]{0,2,1} divide(%transpose.416, %div.1479)
  %select_n.939 = bf16[512,8,128]{2,1,0} select(%select_n.713, %transpose.416, %div.2737)
  %mul.12518 = bf16[512,8,128]{2,1,0} multiply(%select_n.939, %broadcast.3930)
  %param.791 = bf16[512,8,128]{2,1,0} parameter(555), sharding={devices=[8,1,1]<=[8]}
  %mul.12519 = bf16[512,8,128]{2,1,0} multiply(%param.791, %broadcast.3931)
  %add.4025 = bf16[512,8,128]{2,1,0} add(%mul.12518, %mul.12519)
  %integer_pow.230 = bf16[512,8,128]{2,1,0} multiply(%select_n.939, %select_n.939)
  %mul.12520 = bf16[512,8,128]{2,1,0} multiply(%integer_pow.230, %broadcast.3932)
  %param.792 = bf16[512,8,128]{2,1,0} parameter(878), sharding={devices=[8,1,1]<=[8]}
  %mul.12521 = bf16[512,8,128]{2,1,0} multiply(%param.792, %broadcast.3933)
  %add.4026 = bf16[512,8,128]{2,1,0} add(%mul.12520, %mul.12521)
  %div.2740 = bf16[512,8,128]{2,1,0} divide(%add.4026, %div.1482)
  %sqrt.231 = bf16[512,8,128]{2,1,0} sqrt(%div.2740)
  %add.4027 = bf16[512,8,128]{2,1,0} add(%sqrt.231, %broadcast.3934)
  %multiply.2742 = bf16[512,8,128]{2,1,0} multiply(%div.1481, %add.4027)
  %div.2742 = bf16[512,8,128]{2,1,0} divide(%add.4025, %multiply.2742)
  %mul.12522 = bf16[512,8,128]{2,1,0} multiply(%param.300, %broadcast.3930)
  %add.4028 = bf16[512,8,128]{2,1,0} add(%div.2742, %mul.12522)
  %mul.12523 = bf16[512,8,128]{2,1,0} multiply(%mul.9984, %add.4028)
  %add.4029 = bf16[512,8,128]{2,1,0} add(%param.300, %mul.12523)
  %div.2743 = bf16[512,8]{1,0} divide(%dynamic-slice.2411, %div.1442)
  %select_n.940 = bf16[512,8]{1,0} select(%select_n.704, %dynamic-slice.2411, %div.2743)
  %mul.12525 = bf16[512,8]{1,0} multiply(%select_n.940, %broadcast.3915)
  %param.793 = bf16[512,8]{1,0} parameter(556), sharding={devices=[8,1]<=[8]}
  %mul.12526 = bf16[512,8]{1,0} multiply(%param.793, %broadcast.3916)
  %add.4030 = bf16[512,8]{1,0} add(%mul.12525, %mul.12526)
  %integer_pow.231 = bf16[512,8]{1,0} multiply(%select_n.940, %select_n.940)
  %mul.12527 = bf16[512,8]{1,0} multiply(%integer_pow.231, %broadcast.3917)
  %param.794 = bf16[512,8]{1,0} parameter(879), sharding={devices=[8,1]<=[8]}
  %mul.12528 = bf16[512,8]{1,0} multiply(%param.794, %broadcast.3918)
  %add.4031 = bf16[512,8]{1,0} add(%mul.12527, %mul.12528)
  %div.2746 = bf16[512,8]{1,0} divide(%add.4031, %div.1446)
  %sqrt.232 = bf16[512,8]{1,0} sqrt(%div.2746)
  %add.4032 = bf16[512,8]{1,0} add(%sqrt.232, %broadcast.3919)
  %multiply.2743 = bf16[512,8]{1,0} multiply(%div.1444, %add.4032)
  %div.2747 = bf16[512,8]{1,0} divide(%add.4030, %multiply.2743)
  %mul.12530 = bf16[512,8]{1,0} multiply(%param.43, %broadcast.3915)
  %add.4034 = bf16[512,8]{1,0} add(%div.2747, %mul.12530)
  %mul.12531 = bf16[512,8]{1,0} multiply(%mul.9922, %add.4034)
  %add.4035 = bf16[512,8]{1,0} add(%param.43, %mul.12531)
  %div.2748 = bf16[1,4096,14336]{2,1,0} divide(%sharding_constraint.2534, %div.1450)
  %select_n.941 = bf16[1,4096,14336]{2,1,0} select(%select_n.706, %sharding_constraint.2534, %div.2748)
  %mul.12533 = bf16[1,4096,14336]{2,1,0} multiply(%select_n.941, %broadcast.3920)
  %param.795 = bf16[1,4096,14336]{2,1,0} parameter(557), sharding={devices=[8,1,1]<=[8]}
  %mul.12534 = bf16[1,4096,14336]{2,1,0} multiply(%param.795, %broadcast.3921)
  %add.4036 = bf16[1,4096,14336]{2,1,0} add(%mul.12533, %mul.12534)
  %integer_pow.232 = bf16[1,4096,14336]{2,1,0} multiply(%select_n.941, %select_n.941)
  %mul.12535 = bf16[1,4096,14336]{2,1,0} multiply(%integer_pow.232, %broadcast.3922)
  %param.796 = bf16[1,4096,14336]{2,1,0} parameter(880), sharding={devices=[8,1,1]<=[8]}
  %mul.12539 = bf16[1,4096,14336]{2,1,0} multiply(%param.796, %broadcast.3923)
  %add.4037 = bf16[1,4096,14336]{2,1,0} add(%mul.12535, %mul.12539)
  %div.2751 = bf16[1,4096,14336]{2,1,0} divide(%add.4037, %div.1455)
  %sqrt.233 = bf16[1,4096,14336]{2,1,0} sqrt(%div.2751)
  %add.4038 = bf16[1,4096,14336]{2,1,0} add(%sqrt.233, %broadcast.3924)
  %multiply.2744 = bf16[1,4096,14336]{2,1,0} multiply(%div.1454, %add.4038)
  %div.2752 = bf16[1,4096,14336]{2,1,0} divide(%add.4036, %multiply.2744)
  %mul.12540 = bf16[1,4096,14336]{2,1,0} multiply(%param.44, %broadcast.3920)
  %add.4039 = bf16[1,4096,14336]{2,1,0} add(%div.2752, %mul.12540)
  %mul.12541 = bf16[1,4096,14336]{2,1,0} multiply(%mul.9929, %add.4039)
  %add.4040 = bf16[1,4096,14336]{2,1,0} add(%param.44, %mul.12541)
  %div.2753 = bf16[1,4096,14336]{2,1,0} divide(%sharding_constraint.2535, %div.1450)
  %select_n.942 = bf16[1,4096,14336]{2,1,0} select(%select_n.706, %sharding_constraint.2535, %div.2753)
  %mul.12543 = bf16[1,4096,14336]{2,1,0} multiply(%select_n.942, %broadcast.3920)
  %param.797 = bf16[1,4096,14336]{2,1,0} parameter(558), sharding={devices=[8,1,1]<=[8]}
  %mul.12544 = bf16[1,4096,14336]{2,1,0} multiply(%param.797, %broadcast.3921)
  %add.4041 = bf16[1,4096,14336]{2,1,0} add(%mul.12543, %mul.12544)
  %integer_pow.233 = bf16[1,4096,14336]{2,1,0} multiply(%select_n.942, %select_n.942)
  %mul.12547 = bf16[1,4096,14336]{2,1,0} multiply(%integer_pow.233, %broadcast.3922)
  %param.798 = bf16[1,4096,14336]{2,1,0} parameter(881), sharding={devices=[8,1,1]<=[8]}
  %mul.12548 = bf16[1,4096,14336]{2,1,0} multiply(%param.798, %broadcast.3923)
  %add.4042 = bf16[1,4096,14336]{2,1,0} add(%mul.12547, %mul.12548)
  %div.2757 = bf16[1,4096,14336]{2,1,0} divide(%add.4042, %div.1455)
  %sqrt.234 = bf16[1,4096,14336]{2,1,0} sqrt(%div.2757)
  %add.4043 = bf16[1,4096,14336]{2,1,0} add(%sqrt.234, %broadcast.3924)
  %multiply.2745 = bf16[1,4096,14336]{2,1,0} multiply(%div.1454, %add.4043)
  %div.2758 = bf16[1,4096,14336]{2,1,0} divide(%add.4041, %multiply.2745)
  %mul.12549 = bf16[1,4096,14336]{2,1,0} multiply(%param.45, %broadcast.3920)
  %add.4044 = bf16[1,4096,14336]{2,1,0} add(%div.2758, %mul.12549)
  %mul.12550 = bf16[1,4096,14336]{2,1,0} multiply(%mul.9929, %add.4044)
  %add.4045 = bf16[1,4096,14336]{2,1,0} add(%param.45, %mul.12550)
  %div.2759 = bf16[1,14336,4096]{2,1,0} divide(%sharding_constraint.2539, %div.1463)
  %select_n.943 = bf16[1,14336,4096]{2,1,0} select(%select_n.709, %sharding_constraint.2539, %div.2759)
  %mul.12553 = bf16[1,14336,4096]{2,1,0} multiply(%select_n.943, %broadcast.3925)
  %param.799 = bf16[1,14336,4096]{2,1,0} parameter(559), sharding={devices=[8,1,1]<=[8]}
  %mul.12554 = bf16[1,14336,4096]{2,1,0} multiply(%param.799, %broadcast.3926)
  %add.4046 = bf16[1,14336,4096]{2,1,0} add(%mul.12553, %mul.12554)
  %integer_pow.234 = bf16[1,14336,4096]{2,1,0} multiply(%select_n.943, %select_n.943)
  %mul.12555 = bf16[1,14336,4096]{2,1,0} multiply(%integer_pow.234, %broadcast.3927)
  %param.800 = bf16[1,14336,4096]{2,1,0} parameter(882), sharding={devices=[8,1,1]<=[8]}
  %mul.12556 = bf16[1,14336,4096]{2,1,0} multiply(%param.800, %broadcast.3928)
  %add.4047 = bf16[1,14336,4096]{2,1,0} add(%mul.12555, %mul.12556)
  %div.2762 = bf16[1,14336,4096]{2,1,0} divide(%add.4047, %div.1466)
  %sqrt.235 = bf16[1,14336,4096]{2,1,0} sqrt(%div.2762)
  %add.4048 = bf16[1,14336,4096]{2,1,0} add(%sqrt.235, %broadcast.3929)
  %multiply.2746 = bf16[1,14336,4096]{2,1,0} multiply(%div.1465, %add.4048)
  %div.2763 = bf16[1,14336,4096]{2,1,0} divide(%add.4046, %multiply.2746)
  %mul.12557 = bf16[1,14336,4096]{2,1,0} multiply(%param.46, %broadcast.3925)
  %add.4049 = bf16[1,14336,4096]{2,1,0} add(%div.2763, %mul.12557)
  %mul.12558 = bf16[1,14336,4096]{2,1,0} multiply(%mul.9949, %add.4049)
  %add.4050 = bf16[1,14336,4096]{2,1,0} add(%param.46, %mul.12558)
  %div.2765 = bf16[4096]{0} divide(%all-reduce.352, %div.1436)
  %select_n.944 = bf16[4096]{0} select(%select_n.701, %all-reduce.352, %div.2765)
  %mul.12560 = bf16[4096]{0} multiply(%select_n.944, %broadcast.3910)
  %param.801 = bf16[4096]{0} parameter(560), sharding={replicated}
  %mul.12561 = bf16[4096]{0} multiply(%param.801, %broadcast.3911)
  %add.4051 = bf16[4096]{0} add(%mul.12560, %mul.12561)
  %integer_pow.235 = bf16[4096]{0} multiply(%select_n.944, %select_n.944)
  %mul.12562 = bf16[4096]{0} multiply(%integer_pow.235, %broadcast.3912)
  %param.802 = bf16[4096]{0} parameter(883), sharding={replicated}
  %mul.12563 = bf16[4096]{0} multiply(%param.802, %broadcast.3913)
  %add.4052 = bf16[4096]{0} add(%mul.12562, %mul.12563)
  %div.2776 = bf16[4096]{0} divide(%add.4052, %div.1439)
  %sqrt.236 = bf16[4096]{0} sqrt(%div.2776)
  %add.4053 = bf16[4096]{0} add(%sqrt.236, %broadcast.3914)
  %multiply.2747 = bf16[4096]{0} multiply(%div.1438, %add.4053)
  %div.2777 = bf16[4096]{0} divide(%add.4051, %multiply.2747)
  %mul.12564 = bf16[4096]{0} multiply(%param.42, %broadcast.3910)
  %add.4055 = bf16[4096]{0} add(%div.2777, %mul.12564)
  %mul.12565 = bf16[4096]{0} multiply(%mul.2424, %add.4055)
  %add.4056 = bf16[4096]{0} add(%param.42, %mul.12565)
  %div.2778 = bf16[4096]{0} divide(%all-reduce.353, %div.1436)
  %select_n.945 = bf16[4096]{0} select(%select_n.701, %all-reduce.353, %div.2778)
  %mul.12568 = bf16[4096]{0} multiply(%select_n.945, %broadcast.3910)
  %param.803 = bf16[4096]{0} parameter(561), sharding={replicated}
  %mul.12569 = bf16[4096]{0} multiply(%param.803, %broadcast.3911)
  %add.4057 = bf16[4096]{0} add(%mul.12568, %mul.12569)
  %integer_pow.236 = bf16[4096]{0} multiply(%select_n.945, %select_n.945)
  %mul.12570 = bf16[4096]{0} multiply(%integer_pow.236, %broadcast.3912)
  %param.804 = bf16[4096]{0} parameter(884), sharding={replicated}
  %mul.12571 = bf16[4096]{0} multiply(%param.804, %broadcast.3913)
  %add.4058 = bf16[4096]{0} add(%mul.12570, %mul.12571)
  %div.2781 = bf16[4096]{0} divide(%add.4058, %div.1439)
  %sqrt.237 = bf16[4096]{0} sqrt(%div.2781)
  %add.4059 = bf16[4096]{0} add(%sqrt.237, %broadcast.3914)
  %multiply.2748 = bf16[4096]{0} multiply(%div.1438, %add.4059)
  %div.2782 = bf16[4096]{0} divide(%add.4057, %multiply.2748)
  %mul.12572 = bf16[4096]{0} multiply(%param.37, %broadcast.3910)
  %add.4060 = bf16[4096]{0} add(%div.2782, %mul.12572)
  %mul.12574 = bf16[4096]{0} multiply(%mul.2424, %add.4060)
  %add.4061 = bf16[4096]{0} add(%param.37, %mul.12574)
  %div.2783 = bf16[512,8,128]{0,2,1} divide(%transpose.417, %div.1479)
  %select_n.946 = bf16[512,8,128]{2,1,0} select(%select_n.713, %transpose.417, %div.2783)
  %mul.12576 = bf16[512,8,128]{2,1,0} multiply(%select_n.946, %broadcast.3930)
  %param.805 = bf16[512,8,128]{2,1,0} parameter(562), sharding={devices=[8,1,1]<=[8]}
  %mul.12577 = bf16[512,8,128]{2,1,0} multiply(%param.805, %broadcast.3931)
  %add.4062 = bf16[512,8,128]{2,1,0} add(%mul.12576, %mul.12577)
  %integer_pow.237 = bf16[512,8,128]{2,1,0} multiply(%select_n.946, %select_n.946)
  %mul.12581 = bf16[512,8,128]{2,1,0} multiply(%integer_pow.237, %broadcast.3932)
  %param.806 = bf16[512,8,128]{2,1,0} parameter(885), sharding={devices=[8,1,1]<=[8]}
  %mul.12584 = bf16[512,8,128]{2,1,0} multiply(%param.806, %broadcast.3933)
  %add.4063 = bf16[512,8,128]{2,1,0} add(%mul.12581, %mul.12584)
  %div.2786 = bf16[512,8,128]{2,1,0} divide(%add.4063, %div.1482)
  %sqrt.238 = bf16[512,8,128]{2,1,0} sqrt(%div.2786)
  %add.4064 = bf16[512,8,128]{2,1,0} add(%sqrt.238, %broadcast.3934)
  %multiply.2749 = bf16[512,8,128]{2,1,0} multiply(%div.1481, %add.4064)
  %div.2787 = bf16[512,8,128]{2,1,0} divide(%add.4062, %multiply.2749)
  %mul.12585 = bf16[512,8,128]{2,1,0} multiply(%param.39, %broadcast.3930)
  %add.4065 = bf16[512,8,128]{2,1,0} add(%div.2787, %mul.12585)
  %mul.12586 = bf16[512,8,128]{2,1,0} multiply(%mul.9984, %add.4065)
  %add.4066 = bf16[512,8,128]{2,1,0} add(%param.39, %mul.12586)
  %div.2788 = bf16[32,128,512]{1,0,2} divide(%transpose.418, %div.1485)
  %select_n.947 = bf16[32,128,512]{2,1,0} select(%select_n.715, %transpose.418, %div.2788)
  %mul.12588 = bf16[32,128,512]{2,1,0} multiply(%select_n.947, %broadcast.3935)
  %param.807 = bf16[32,128,512]{2,1,0} parameter(563), sharding={devices=[1,1,8]<=[8]}
  %mul.12589 = bf16[32,128,512]{2,1,0} multiply(%param.807, %broadcast.3936)
  %add.4067 = bf16[32,128,512]{2,1,0} add(%mul.12588, %mul.12589)
  %integer_pow.238 = bf16[32,128,512]{2,1,0} multiply(%select_n.947, %select_n.947)
  %mul.12590 = bf16[32,128,512]{2,1,0} multiply(%integer_pow.238, %broadcast.3937)
  %param.808 = bf16[32,128,512]{2,1,0} parameter(886), sharding={devices=[1,1,8]<=[8]}
  %mul.12591 = bf16[32,128,512]{2,1,0} multiply(%param.808, %broadcast.3938)
  %add.4068 = bf16[32,128,512]{2,1,0} add(%mul.12590, %mul.12591)
  %div.2791 = bf16[32,128,512]{2,1,0} divide(%add.4068, %div.1488)
  %sqrt.239 = bf16[32,128,512]{2,1,0} sqrt(%div.2791)
  %add.4069 = bf16[32,128,512]{2,1,0} add(%sqrt.239, %broadcast.3939)
  %multiply.2750 = bf16[32,128,512]{2,1,0} multiply(%div.1487, %add.4069)
  %div.2792 = bf16[32,128,512]{2,1,0} divide(%add.4067, %multiply.2750)
  %mul.12592 = bf16[32,128,512]{2,1,0} multiply(%param.41, %broadcast.3935)
  %add.4070 = bf16[32,128,512]{2,1,0} add(%div.2792, %mul.12592)
  %mul.12593 = bf16[32,128,512]{2,1,0} multiply(%mul.9994, %add.4070)
  %add.4071 = bf16[32,128,512]{2,1,0} add(%param.41, %mul.12593)
  %div.2793 = bf16[512,32,128]{0,2,1} divide(%transpose.419, %div.1491)
  %select_n.948 = bf16[512,32,128]{2,1,0} select(%select_n.717, %transpose.419, %div.2793)
  %mul.12595 = bf16[512,32,128]{2,1,0} multiply(%select_n.948, %broadcast.3940)
  %param.809 = bf16[512,32,128]{2,1,0} parameter(564), sharding={devices=[8,1,1]<=[8]}
  %mul.12597 = bf16[512,32,128]{2,1,0} multiply(%param.809, %broadcast.3941)
  %add.4072 = bf16[512,32,128]{2,1,0} add(%mul.12595, %mul.12597)
  %integer_pow.239 = bf16[512,32,128]{2,1,0} multiply(%select_n.948, %select_n.948)
  %mul.12598 = bf16[512,32,128]{2,1,0} multiply(%integer_pow.239, %broadcast.3942)
  %param.810 = bf16[512,32,128]{2,1,0} parameter(887), sharding={devices=[8,1,1]<=[8]}
  %mul.12599 = bf16[512,32,128]{2,1,0} multiply(%param.810, %broadcast.3943)
  %add.4073 = bf16[512,32,128]{2,1,0} add(%mul.12598, %mul.12599)
  %div.2796 = bf16[512,32,128]{2,1,0} divide(%add.4073, %div.1494)
  %sqrt.240 = bf16[512,32,128]{2,1,0} sqrt(%div.2796)
  %add.4074 = bf16[512,32,128]{2,1,0} add(%sqrt.240, %broadcast.3944)
  %multiply.2751 = bf16[512,32,128]{2,1,0} multiply(%div.1493, %add.4074)
  %div.2797 = bf16[512,32,128]{2,1,0} divide(%add.4072, %multiply.2751)
  %mul.12600 = bf16[512,32,128]{2,1,0} multiply(%param.38, %broadcast.3940)
  %add.4075 = bf16[512,32,128]{2,1,0} add(%div.2797, %mul.12600)
  %mul.12601 = bf16[512,32,128]{2,1,0} multiply(%mul.10010, %add.4075)
  %add.4076 = bf16[512,32,128]{2,1,0} add(%param.38, %mul.12601)
  %div.2798 = bf16[512,8,128]{0,2,1} divide(%transpose.420, %div.1479)
  %select_n.949 = bf16[512,8,128]{2,1,0} select(%select_n.713, %transpose.420, %div.2798)
  %mul.12606 = bf16[512,8,128]{2,1,0} multiply(%select_n.949, %broadcast.3930)
  %param.811 = bf16[512,8,128]{2,1,0} parameter(565), sharding={devices=[8,1,1]<=[8]}
  %mul.12607 = bf16[512,8,128]{2,1,0} multiply(%param.811, %broadcast.3931)
  %add.4077 = bf16[512,8,128]{2,1,0} add(%mul.12606, %mul.12607)
  %integer_pow.240 = bf16[512,8,128]{2,1,0} multiply(%select_n.949, %select_n.949)
  %mul.12609 = bf16[512,8,128]{2,1,0} multiply(%integer_pow.240, %broadcast.3932)
  %param.812 = bf16[512,8,128]{2,1,0} parameter(888), sharding={devices=[8,1,1]<=[8]}
  %mul.12610 = bf16[512,8,128]{2,1,0} multiply(%param.812, %broadcast.3933)
  %add.4078 = bf16[512,8,128]{2,1,0} add(%mul.12609, %mul.12610)
  %div.2802 = bf16[512,8,128]{2,1,0} divide(%add.4078, %div.1482)
  %sqrt.241 = bf16[512,8,128]{2,1,0} sqrt(%div.2802)
  %add.4079 = bf16[512,8,128]{2,1,0} add(%sqrt.241, %broadcast.3934)
  %multiply.2752 = bf16[512,8,128]{2,1,0} multiply(%div.1481, %add.4079)
  %div.2803 = bf16[512,8,128]{2,1,0} divide(%add.4077, %multiply.2752)
  %mul.12612 = bf16[512,8,128]{2,1,0} multiply(%param.40, %broadcast.3930)
  %add.4080 = bf16[512,8,128]{2,1,0} add(%div.2803, %mul.12612)
  %mul.12613 = bf16[512,8,128]{2,1,0} multiply(%mul.9984, %add.4080)
  %add.4081 = bf16[512,8,128]{2,1,0} add(%param.40, %mul.12613)
  %div.2805 = bf16[512,8]{1,0} divide(%dynamic-slice.2421, %div.1442)
  %select_n.950 = bf16[512,8]{1,0} select(%select_n.704, %dynamic-slice.2421, %div.2805)
  %mul.12620 = bf16[512,8]{1,0} multiply(%select_n.950, %broadcast.3915)
  %param.813 = bf16[512,8]{1,0} parameter(566), sharding={devices=[8,1]<=[8]}
  %mul.12622 = bf16[512,8]{1,0} multiply(%param.813, %broadcast.3916)
  %add.4082 = bf16[512,8]{1,0} add(%mul.12620, %mul.12622)
  %integer_pow.241 = bf16[512,8]{1,0} multiply(%select_n.950, %select_n.950)
  %mul.12626 = bf16[512,8]{1,0} multiply(%integer_pow.241, %broadcast.3917)
  %param.814 = bf16[512,8]{1,0} parameter(889), sharding={devices=[8,1]<=[8]}
  %mul.12627 = bf16[512,8]{1,0} multiply(%param.814, %broadcast.3918)
  %add.4083 = bf16[512,8]{1,0} add(%mul.12626, %mul.12627)
  %div.2817 = bf16[512,8]{1,0} divide(%add.4083, %div.1446)
  %sqrt.242 = bf16[512,8]{1,0} sqrt(%div.2817)
  %add.4084 = bf16[512,8]{1,0} add(%sqrt.242, %broadcast.3919)
  %multiply.2753 = bf16[512,8]{1,0} multiply(%div.1444, %add.4084)
  %div.2818 = bf16[512,8]{1,0} divide(%add.4082, %multiply.2753)
  %mul.12628 = bf16[512,8]{1,0} multiply(%param.313, %broadcast.3915)
  %add.4085 = bf16[512,8]{1,0} add(%div.2818, %mul.12628)
  %mul.12629 = bf16[512,8]{1,0} multiply(%mul.9922, %add.4085)
  %add.4086 = bf16[512,8]{1,0} add(%param.313, %mul.12629)
  %div.2819 = bf16[1,4096,14336]{2,1,0} divide(%sharding_constraint.2540, %div.1450)
  %select_n.951 = bf16[1,4096,14336]{2,1,0} select(%select_n.706, %sharding_constraint.2540, %div.2819)
  %mul.12631 = bf16[1,4096,14336]{2,1,0} multiply(%select_n.951, %broadcast.3920)
  %param.815 = bf16[1,4096,14336]{2,1,0} parameter(567), sharding={devices=[8,1,1]<=[8]}
  %mul.12632 = bf16[1,4096,14336]{2,1,0} multiply(%param.815, %broadcast.3921)
  %add.4088 = bf16[1,4096,14336]{2,1,0} add(%mul.12631, %mul.12632)
  %integer_pow.242 = bf16[1,4096,14336]{2,1,0} multiply(%select_n.951, %select_n.951)
  %mul.12633 = bf16[1,4096,14336]{2,1,0} multiply(%integer_pow.242, %broadcast.3922)
  %param.816 = bf16[1,4096,14336]{2,1,0} parameter(890), sharding={devices=[8,1,1]<=[8]}
  %mul.12635 = bf16[1,4096,14336]{2,1,0} multiply(%param.816, %broadcast.3923)
  %add.4089 = bf16[1,4096,14336]{2,1,0} add(%mul.12633, %mul.12635)
  %div.2822 = bf16[1,4096,14336]{2,1,0} divide(%add.4089, %div.1455)
  %sqrt.243 = bf16[1,4096,14336]{2,1,0} sqrt(%div.2822)
  %add.4090 = bf16[1,4096,14336]{2,1,0} add(%sqrt.243, %broadcast.3924)
  %multiply.2754 = bf16[1,4096,14336]{2,1,0} multiply(%div.1454, %add.4090)
  %div.2823 = bf16[1,4096,14336]{2,1,0} divide(%add.4088, %multiply.2754)
  %mul.12636 = bf16[1,4096,14336]{2,1,0} multiply(%param.314, %broadcast.3920)
  %add.4091 = bf16[1,4096,14336]{2,1,0} add(%div.2823, %mul.12636)
  %mul.12638 = bf16[1,4096,14336]{2,1,0} multiply(%mul.9929, %add.4091)
  %add.4092 = bf16[1,4096,14336]{2,1,0} add(%param.314, %mul.12638)
  %div.2824 = bf16[1,4096,14336]{2,1,0} divide(%sharding_constraint.2541, %div.1450)
  %select_n.952 = bf16[1,4096,14336]{2,1,0} select(%select_n.706, %sharding_constraint.2541, %div.2824)
  %mul.12640 = bf16[1,4096,14336]{2,1,0} multiply(%select_n.952, %broadcast.3920)
  %param.817 = bf16[1,4096,14336]{2,1,0} parameter(568), sharding={devices=[8,1,1]<=[8]}
  %mul.12641 = bf16[1,4096,14336]{2,1,0} multiply(%param.817, %broadcast.3921)
  %add.4093 = bf16[1,4096,14336]{2,1,0} add(%mul.12640, %mul.12641)
  %integer_pow.243 = bf16[1,4096,14336]{2,1,0} multiply(%select_n.952, %select_n.952)
  %mul.12642 = bf16[1,4096,14336]{2,1,0} multiply(%integer_pow.243, %broadcast.3922)
  %param.818 = bf16[1,4096,14336]{2,1,0} parameter(891), sharding={devices=[8,1,1]<=[8]}
  %mul.12643 = bf16[1,4096,14336]{2,1,0} multiply(%param.818, %broadcast.3923)
  %add.4094 = bf16[1,4096,14336]{2,1,0} add(%mul.12642, %mul.12643)
  %div.2827 = bf16[1,4096,14336]{2,1,0} divide(%add.4094, %div.1455)
  %sqrt.244 = bf16[1,4096,14336]{2,1,0} sqrt(%div.2827)
  %add.4095 = bf16[1,4096,14336]{2,1,0} add(%sqrt.244, %broadcast.3924)
  %multiply.2755 = bf16[1,4096,14336]{2,1,0} multiply(%div.1454, %add.4095)
  %div.2828 = bf16[1,4096,14336]{2,1,0} divide(%add.4093, %multiply.2755)
  %mul.12644 = bf16[1,4096,14336]{2,1,0} multiply(%param.315, %broadcast.3920)
  %add.4096 = bf16[1,4096,14336]{2,1,0} add(%div.2828, %mul.12644)
  %mul.12647 = bf16[1,4096,14336]{2,1,0} multiply(%mul.9929, %add.4096)
  %add.4097 = bf16[1,4096,14336]{2,1,0} add(%param.315, %mul.12647)
  %div.2829 = bf16[1,14336,4096]{2,1,0} divide(%sharding_constraint.2542, %div.1463)
  %select_n.953 = bf16[1,14336,4096]{2,1,0} select(%select_n.709, %sharding_constraint.2542, %div.2829)
  %mul.12654 = bf16[1,14336,4096]{2,1,0} multiply(%select_n.953, %broadcast.3925)
  %param.819 = bf16[1,14336,4096]{2,1,0} parameter(569), sharding={devices=[8,1,1]<=[8]}
  %mul.12655 = bf16[1,14336,4096]{2,1,0} multiply(%param.819, %broadcast.3926)
  %add.4098 = bf16[1,14336,4096]{2,1,0} add(%mul.12654, %mul.12655)
  %integer_pow.244 = bf16[1,14336,4096]{2,1,0} multiply(%select_n.953, %select_n.953)
  %mul.12656 = bf16[1,14336,4096]{2,1,0} multiply(%integer_pow.244, %broadcast.3927)
  %param.820 = bf16[1,14336,4096]{2,1,0} parameter(892), sharding={devices=[8,1,1]<=[8]}
  %mul.12657 = bf16[1,14336,4096]{2,1,0} multiply(%param.820, %broadcast.3928)
  %add.4100 = bf16[1,14336,4096]{2,1,0} add(%mul.12656, %mul.12657)
  %div.2832 = bf16[1,14336,4096]{2,1,0} divide(%add.4100, %div.1466)
  %sqrt.245 = bf16[1,14336,4096]{2,1,0} sqrt(%div.2832)
  %add.4101 = bf16[1,14336,4096]{2,1,0} add(%sqrt.245, %broadcast.3929)
  %multiply.2756 = bf16[1,14336,4096]{2,1,0} multiply(%div.1465, %add.4101)
  %div.2833 = bf16[1,14336,4096]{2,1,0} divide(%add.4098, %multiply.2756)
  %mul.12658 = bf16[1,14336,4096]{2,1,0} multiply(%param.316, %broadcast.3925)
  %add.4102 = bf16[1,14336,4096]{2,1,0} add(%div.2833, %mul.12658)
  %mul.12665 = bf16[1,14336,4096]{2,1,0} multiply(%mul.9949, %add.4102)
  %add.4103 = bf16[1,14336,4096]{2,1,0} add(%param.316, %mul.12665)
  %div.2834 = bf16[4096]{0} divide(%all-reduce.367, %div.1436)
  %select_n.954 = bf16[4096]{0} select(%select_n.701, %all-reduce.367, %div.2834)
  %mul.12667 = bf16[4096]{0} multiply(%select_n.954, %broadcast.3910)
  %param.821 = bf16[4096]{0} parameter(570), sharding={replicated}
  %mul.12668 = bf16[4096]{0} multiply(%param.821, %broadcast.3911)
  %add.4104 = bf16[4096]{0} add(%mul.12667, %mul.12668)
  %integer_pow.245 = bf16[4096]{0} multiply(%select_n.954, %select_n.954)
  %mul.12669 = bf16[4096]{0} multiply(%integer_pow.245, %broadcast.3912)
  %param.822 = bf16[4096]{0} parameter(893), sharding={replicated}
  %mul.12670 = bf16[4096]{0} multiply(%param.822, %broadcast.3913)
  %add.4105 = bf16[4096]{0} add(%mul.12669, %mul.12670)
  %div.2837 = bf16[4096]{0} divide(%add.4105, %div.1439)
  %sqrt.246 = bf16[4096]{0} sqrt(%div.2837)
  %add.4106 = bf16[4096]{0} add(%sqrt.246, %broadcast.3914)
  %multiply.2757 = bf16[4096]{0} multiply(%div.1438, %add.4106)
  %div.2838 = bf16[4096]{0} divide(%add.4104, %multiply.2757)
  %mul.12671 = bf16[4096]{0} multiply(%param.312, %broadcast.3910)
  %add.4107 = bf16[4096]{0} add(%div.2838, %mul.12671)
  %mul.12673 = bf16[4096]{0} multiply(%mul.2424, %add.4107)
  %add.4109 = bf16[4096]{0} add(%param.312, %mul.12673)
  %div.2839 = bf16[4096]{0} divide(%all-reduce.368, %div.1436)
  %select_n.955 = bf16[4096]{0} select(%select_n.701, %all-reduce.368, %div.2839)
  %mul.12675 = bf16[4096]{0} multiply(%select_n.955, %broadcast.3910)
  %param.823 = bf16[4096]{0} parameter(571), sharding={replicated}
  %mul.12676 = bf16[4096]{0} multiply(%param.823, %broadcast.3911)
  %add.4111 = bf16[4096]{0} add(%mul.12675, %mul.12676)
  %integer_pow.246 = bf16[4096]{0} multiply(%select_n.955, %select_n.955)
  %mul.12677 = bf16[4096]{0} multiply(%integer_pow.246, %broadcast.3912)
  %param.824 = bf16[4096]{0} parameter(894), sharding={replicated}
  %mul.12678 = bf16[4096]{0} multiply(%param.824, %broadcast.3913)
  %add.4112 = bf16[4096]{0} add(%mul.12677, %mul.12678)
  %div.2842 = bf16[4096]{0} divide(%add.4112, %div.1439)
  %sqrt.247 = bf16[4096]{0} sqrt(%div.2842)
  %add.4113 = bf16[4096]{0} add(%sqrt.247, %broadcast.3914)
  %multiply.2758 = bf16[4096]{0} multiply(%div.1438, %add.4113)
  %div.2843 = bf16[4096]{0} divide(%add.4111, %multiply.2758)
  %mul.12679 = bf16[4096]{0} multiply(%param.307, %broadcast.3910)
  %add.4114 = bf16[4096]{0} add(%div.2843, %mul.12679)
  %mul.12680 = bf16[4096]{0} multiply(%mul.2424, %add.4114)
  %add.4115 = bf16[4096]{0} add(%param.307, %mul.12680)
  %div.2844 = bf16[512,8,128]{0,2,1} divide(%transpose.421, %div.1479)
  %select_n.956 = bf16[512,8,128]{2,1,0} select(%select_n.713, %transpose.421, %div.2844)
  %mul.12692 = bf16[512,8,128]{2,1,0} multiply(%select_n.956, %broadcast.3930)
  %param.825 = bf16[512,8,128]{2,1,0} parameter(572), sharding={devices=[8,1,1]<=[8]}
  %mul.12696 = bf16[512,8,128]{2,1,0} multiply(%param.825, %broadcast.3931)
  %add.4116 = bf16[512,8,128]{2,1,0} add(%mul.12692, %mul.12696)
  %integer_pow.247 = bf16[512,8,128]{2,1,0} multiply(%select_n.956, %select_n.956)
  %mul.12697 = bf16[512,8,128]{2,1,0} multiply(%integer_pow.247, %broadcast.3932)
  %param.826 = bf16[512,8,128]{2,1,0} parameter(895), sharding={devices=[8,1,1]<=[8]}
  %mul.12698 = bf16[512,8,128]{2,1,0} multiply(%param.826, %broadcast.3933)
  %add.4117 = bf16[512,8,128]{2,1,0} add(%mul.12697, %mul.12698)
  %div.2847 = bf16[512,8,128]{2,1,0} divide(%add.4117, %div.1482)
  %sqrt.248 = bf16[512,8,128]{2,1,0} sqrt(%div.2847)
  %add.4119 = bf16[512,8,128]{2,1,0} add(%sqrt.248, %broadcast.3934)
  %multiply.2759 = bf16[512,8,128]{2,1,0} multiply(%div.1481, %add.4119)
  %div.2848 = bf16[512,8,128]{2,1,0} divide(%add.4116, %multiply.2759)
  %mul.12699 = bf16[512,8,128]{2,1,0} multiply(%param.309, %broadcast.3930)
  %add.4120 = bf16[512,8,128]{2,1,0} add(%div.2848, %mul.12699)
  %mul.12706 = bf16[512,8,128]{2,1,0} multiply(%mul.9984, %add.4120)
  %add.4121 = bf16[512,8,128]{2,1,0} add(%param.309, %mul.12706)
  %div.2849 = bf16[32,128,512]{1,0,2} divide(%transpose.422, %div.1485)
  %select_n.957 = bf16[32,128,512]{2,1,0} select(%select_n.715, %transpose.422, %div.2849)
  %mul.12714 = bf16[32,128,512]{2,1,0} multiply(%select_n.957, %broadcast.3935)
  %param.827 = bf16[32,128,512]{2,1,0} parameter(573), sharding={devices=[1,1,8]<=[8]}
  %mul.12718 = bf16[32,128,512]{2,1,0} multiply(%param.827, %broadcast.3936)
  %add.4122 = bf16[32,128,512]{2,1,0} add(%mul.12714, %mul.12718)
  %integer_pow.248 = bf16[32,128,512]{2,1,0} multiply(%select_n.957, %select_n.957)
  %mul.12719 = bf16[32,128,512]{2,1,0} multiply(%integer_pow.248, %broadcast.3937)
  %param.828 = bf16[32,128,512]{2,1,0} parameter(896), sharding={devices=[1,1,8]<=[8]}
  %mul.12720 = bf16[32,128,512]{2,1,0} multiply(%param.828, %broadcast.3938)
  %add.4123 = bf16[32,128,512]{2,1,0} add(%mul.12719, %mul.12720)
  %div.2852 = bf16[32,128,512]{2,1,0} divide(%add.4123, %div.1488)
  %sqrt.249 = bf16[32,128,512]{2,1,0} sqrt(%div.2852)
  %add.4124 = bf16[32,128,512]{2,1,0} add(%sqrt.249, %broadcast.3939)
  %multiply.2760 = bf16[32,128,512]{2,1,0} multiply(%div.1487, %add.4124)
  %div.2853 = bf16[32,128,512]{2,1,0} divide(%add.4122, %multiply.2760)
  %mul.12721 = bf16[32,128,512]{2,1,0} multiply(%param.311, %broadcast.3935)
  %add.4125 = bf16[32,128,512]{2,1,0} add(%div.2853, %mul.12721)
  %mul.12722 = bf16[32,128,512]{2,1,0} multiply(%mul.9994, %add.4125)
  %add.4126 = bf16[32,128,512]{2,1,0} add(%param.311, %mul.12722)
  %div.2854 = bf16[512,32,128]{0,2,1} divide(%transpose.423, %div.1491)
  %select_n.958 = bf16[512,32,128]{2,1,0} select(%select_n.717, %transpose.423, %div.2854)
  %mul.12731 = bf16[512,32,128]{2,1,0} multiply(%select_n.958, %broadcast.3940)
  %param.829 = bf16[512,32,128]{2,1,0} parameter(574), sharding={devices=[8,1,1]<=[8]}
  %mul.12732 = bf16[512,32,128]{2,1,0} multiply(%param.829, %broadcast.3941)
  %add.4127 = bf16[512,32,128]{2,1,0} add(%mul.12731, %mul.12732)
  %integer_pow.249 = bf16[512,32,128]{2,1,0} multiply(%select_n.958, %select_n.958)
  %mul.12733 = bf16[512,32,128]{2,1,0} multiply(%integer_pow.249, %broadcast.3942)
  %param.830 = bf16[512,32,128]{2,1,0} parameter(897), sharding={devices=[8,1,1]<=[8]}
  %mul.12734 = bf16[512,32,128]{2,1,0} multiply(%param.830, %broadcast.3943)
  %add.4128 = bf16[512,32,128]{2,1,0} add(%mul.12733, %mul.12734)
  %div.2857 = bf16[512,32,128]{2,1,0} divide(%add.4128, %div.1494)
  %sqrt.250 = bf16[512,32,128]{2,1,0} sqrt(%div.2857)
  %add.4129 = bf16[512,32,128]{2,1,0} add(%sqrt.250, %broadcast.3944)
  %multiply.2761 = bf16[512,32,128]{2,1,0} multiply(%div.1493, %add.4129)
  %div.2858 = bf16[512,32,128]{2,1,0} divide(%add.4127, %multiply.2761)
  %mul.12735 = bf16[512,32,128]{2,1,0} multiply(%param.308, %broadcast.3940)
  %add.4130 = bf16[512,32,128]{2,1,0} add(%div.2858, %mul.12735)
  %mul.12737 = bf16[512,32,128]{2,1,0} multiply(%mul.10010, %add.4130)
  %add.4131 = bf16[512,32,128]{2,1,0} add(%param.308, %mul.12737)
  %div.2859 = bf16[512,8,128]{0,2,1} divide(%transpose.424, %div.1479)
  %select_n.959 = bf16[512,8,128]{2,1,0} select(%select_n.713, %transpose.424, %div.2859)
  %mul.12748 = bf16[512,8,128]{2,1,0} multiply(%select_n.959, %broadcast.3930)
  %param.831 = bf16[512,8,128]{2,1,0} parameter(575), sharding={devices=[8,1,1]<=[8]}
  %mul.12749 = bf16[512,8,128]{2,1,0} multiply(%param.831, %broadcast.3931)
  %add.4132 = bf16[512,8,128]{2,1,0} add(%mul.12748, %mul.12749)
  %integer_pow.250 = bf16[512,8,128]{2,1,0} multiply(%select_n.959, %select_n.959)
  %mul.12750 = bf16[512,8,128]{2,1,0} multiply(%integer_pow.250, %broadcast.3932)
  %param.832 = bf16[512,8,128]{2,1,0} parameter(898), sharding={devices=[8,1,1]<=[8]}
  %mul.12751 = bf16[512,8,128]{2,1,0} multiply(%param.832, %broadcast.3933)
  %add.4133 = bf16[512,8,128]{2,1,0} add(%mul.12750, %mul.12751)
  %div.2862 = bf16[512,8,128]{2,1,0} divide(%add.4133, %div.1482)
  %sqrt.251 = bf16[512,8,128]{2,1,0} sqrt(%div.2862)
  %add.4134 = bf16[512,8,128]{2,1,0} add(%sqrt.251, %broadcast.3934)
  %multiply.2762 = bf16[512,8,128]{2,1,0} multiply(%div.1481, %add.4134)
  %div.2863 = bf16[512,8,128]{2,1,0} divide(%add.4132, %multiply.2762)
  %mul.12752 = bf16[512,8,128]{2,1,0} multiply(%param.310, %broadcast.3930)
  %add.4135 = bf16[512,8,128]{2,1,0} add(%div.2863, %mul.12752)
  %mul.12754 = bf16[512,8,128]{2,1,0} multiply(%mul.9984, %add.4135)
  %add.4136 = bf16[512,8,128]{2,1,0} add(%param.310, %mul.12754)
  %div.2864 = bf16[512,8]{1,0} divide(%dynamic-slice.2431, %div.1442)
  %select_n.960 = bf16[512,8]{1,0} select(%select_n.704, %dynamic-slice.2431, %div.2864)
  %mul.12756 = bf16[512,8]{1,0} multiply(%select_n.960, %broadcast.3915)
  %param.833 = bf16[512,8]{1,0} parameter(576), sharding={devices=[8,1]<=[8]}
  %mul.12757 = bf16[512,8]{1,0} multiply(%param.833, %broadcast.3916)
  %add.4137 = bf16[512,8]{1,0} add(%mul.12756, %mul.12757)
  %integer_pow.251 = bf16[512,8]{1,0} multiply(%select_n.960, %select_n.960)
  %mul.12758 = bf16[512,8]{1,0} multiply(%integer_pow.251, %broadcast.3917)
  %param.834 = bf16[512,8]{1,0} parameter(899), sharding={devices=[8,1]<=[8]}
  %mul.12759 = bf16[512,8]{1,0} multiply(%param.834, %broadcast.3918)
  %add.4138 = bf16[512,8]{1,0} add(%mul.12758, %mul.12759)
  %div.2867 = bf16[512,8]{1,0} divide(%add.4138, %div.1446)
  %sqrt.252 = bf16[512,8]{1,0} sqrt(%div.2867)
  %add.4139 = bf16[512,8]{1,0} add(%sqrt.252, %broadcast.3919)
  %multiply.2763 = bf16[512,8]{1,0} multiply(%div.1444, %add.4139)
  %div.2868 = bf16[512,8]{1,0} divide(%add.4137, %multiply.2763)
  %mul.12765 = bf16[512,8]{1,0} multiply(%param.323, %broadcast.3915)
  %add.4140 = bf16[512,8]{1,0} add(%div.2868, %mul.12765)
  %mul.12766 = bf16[512,8]{1,0} multiply(%mul.9922, %add.4140)
  %add.4141 = bf16[512,8]{1,0} add(%param.323, %mul.12766)
  %div.2869 = bf16[1,4096,14336]{2,1,0} divide(%sharding_constraint.2543, %div.1450)
  %select_n.961 = bf16[1,4096,14336]{2,1,0} select(%select_n.706, %sharding_constraint.2543, %div.2869)
  %mul.12768 = bf16[1,4096,14336]{2,1,0} multiply(%select_n.961, %broadcast.3920)
  %param.835 = bf16[1,4096,14336]{2,1,0} parameter(577), sharding={devices=[8,1,1]<=[8]}
  %mul.12769 = bf16[1,4096,14336]{2,1,0} multiply(%param.835, %broadcast.3921)
  %add.4142 = bf16[1,4096,14336]{2,1,0} add(%mul.12768, %mul.12769)
  %integer_pow.252 = bf16[1,4096,14336]{2,1,0} multiply(%select_n.961, %select_n.961)
  %mul.12770 = bf16[1,4096,14336]{2,1,0} multiply(%integer_pow.252, %broadcast.3922)
  %param.836 = bf16[1,4096,14336]{2,1,0} parameter(900), sharding={devices=[8,1,1]<=[8]}
  %mul.12771 = bf16[1,4096,14336]{2,1,0} multiply(%param.836, %broadcast.3923)
  %add.4143 = bf16[1,4096,14336]{2,1,0} add(%mul.12770, %mul.12771)
  %div.2872 = bf16[1,4096,14336]{2,1,0} divide(%add.4143, %div.1455)
  %sqrt.253 = bf16[1,4096,14336]{2,1,0} sqrt(%div.2872)
  %add.4144 = bf16[1,4096,14336]{2,1,0} add(%sqrt.253, %broadcast.3924)
  %multiply.2764 = bf16[1,4096,14336]{2,1,0} multiply(%div.1454, %add.4144)
  %div.2873 = bf16[1,4096,14336]{2,1,0} divide(%add.4142, %multiply.2764)
  %mul.12773 = bf16[1,4096,14336]{2,1,0} multiply(%param.324, %broadcast.3920)
  %add.4145 = bf16[1,4096,14336]{2,1,0} add(%div.2873, %mul.12773)
  %mul.12774 = bf16[1,4096,14336]{2,1,0} multiply(%mul.9929, %add.4145)
  %add.4146 = bf16[1,4096,14336]{2,1,0} add(%param.324, %mul.12774)
  %div.2874 = bf16[1,4096,14336]{2,1,0} divide(%sharding_constraint.2544, %div.1450)
  %select_n.962 = bf16[1,4096,14336]{2,1,0} select(%select_n.706, %sharding_constraint.2544, %div.2874)
  %mul.12776 = bf16[1,4096,14336]{2,1,0} multiply(%select_n.962, %broadcast.3920)
  %param.837 = bf16[1,4096,14336]{2,1,0} parameter(578), sharding={devices=[8,1,1]<=[8]}
  %mul.12777 = bf16[1,4096,14336]{2,1,0} multiply(%param.837, %broadcast.3921)
  %add.4147 = bf16[1,4096,14336]{2,1,0} add(%mul.12776, %mul.12777)
  %integer_pow.253 = bf16[1,4096,14336]{2,1,0} multiply(%select_n.962, %select_n.962)
  %mul.12778 = bf16[1,4096,14336]{2,1,0} multiply(%integer_pow.253, %broadcast.3922)
  %param.838 = bf16[1,4096,14336]{2,1,0} parameter(901), sharding={devices=[8,1,1]<=[8]}
  %mul.12779 = bf16[1,4096,14336]{2,1,0} multiply(%param.838, %broadcast.3923)
  %add.4149 = bf16[1,4096,14336]{2,1,0} add(%mul.12778, %mul.12779)
  %div.2877 = bf16[1,4096,14336]{2,1,0} divide(%add.4149, %div.1455)
  %sqrt.254 = bf16[1,4096,14336]{2,1,0} sqrt(%div.2877)
  %add.4150 = bf16[1,4096,14336]{2,1,0} add(%sqrt.254, %broadcast.3924)
  %multiply.2765 = bf16[1,4096,14336]{2,1,0} multiply(%div.1454, %add.4150)
  %div.2879 = bf16[1,4096,14336]{2,1,0} divide(%add.4147, %multiply.2765)
  %mul.12780 = bf16[1,4096,14336]{2,1,0} multiply(%param.325, %broadcast.3920)
  %add.4151 = bf16[1,4096,14336]{2,1,0} add(%div.2879, %mul.12780)
  %mul.12781 = bf16[1,4096,14336]{2,1,0} multiply(%mul.9929, %add.4151)
  %add.4152 = bf16[1,4096,14336]{2,1,0} add(%param.325, %mul.12781)
  %div.2880 = bf16[1,14336,4096]{2,1,0} divide(%sharding_constraint.2545, %div.1463)
  %select_n.963 = bf16[1,14336,4096]{2,1,0} select(%select_n.709, %sharding_constraint.2545, %div.2880)
  %mul.12788 = bf16[1,14336,4096]{2,1,0} multiply(%select_n.963, %broadcast.3925)
  %param.839 = bf16[1,14336,4096]{2,1,0} parameter(579), sharding={devices=[8,1,1]<=[8]}
  %mul.12789 = bf16[1,14336,4096]{2,1,0} multiply(%param.839, %broadcast.3926)
  %add.4153 = bf16[1,14336,4096]{2,1,0} add(%mul.12788, %mul.12789)
  %integer_pow.254 = bf16[1,14336,4096]{2,1,0} multiply(%select_n.963, %select_n.963)
  %mul.12790 = bf16[1,14336,4096]{2,1,0} multiply(%integer_pow.254, %broadcast.3927)
  %param.840 = bf16[1,14336,4096]{2,1,0} parameter(902), sharding={devices=[8,1,1]<=[8]}
  %mul.12799 = bf16[1,14336,4096]{2,1,0} multiply(%param.840, %broadcast.3928)
  %add.4154 = bf16[1,14336,4096]{2,1,0} add(%mul.12790, %mul.12799)
  %div.2883 = bf16[1,14336,4096]{2,1,0} divide(%add.4154, %div.1466)
  %sqrt.255 = bf16[1,14336,4096]{2,1,0} sqrt(%div.2883)
  %add.4155 = bf16[1,14336,4096]{2,1,0} add(%sqrt.255, %broadcast.3929)
  %multiply.2766 = bf16[1,14336,4096]{2,1,0} multiply(%div.1465, %add.4155)
  %div.2884 = bf16[1,14336,4096]{2,1,0} divide(%add.4153, %multiply.2766)
  %mul.12812 = bf16[1,14336,4096]{2,1,0} multiply(%param.326, %broadcast.3925)
  %add.4156 = bf16[1,14336,4096]{2,1,0} add(%div.2884, %mul.12812)
  %mul.12821 = bf16[1,14336,4096]{2,1,0} multiply(%mul.9949, %add.4156)
  %add.4157 = bf16[1,14336,4096]{2,1,0} add(%param.326, %mul.12821)
  %div.2885 = bf16[4096]{0} divide(%all-reduce.382, %div.1436)
  %select_n.964 = bf16[4096]{0} select(%select_n.701, %all-reduce.382, %div.2885)
  %mul.12831 = bf16[4096]{0} multiply(%select_n.964, %broadcast.3910)
  %param.841 = bf16[4096]{0} parameter(580), sharding={replicated}
  %mul.12832 = bf16[4096]{0} multiply(%param.841, %broadcast.3911)
  %add.4158 = bf16[4096]{0} add(%mul.12831, %mul.12832)
  %integer_pow.255 = bf16[4096]{0} multiply(%select_n.964, %select_n.964)
  %mul.12833 = bf16[4096]{0} multiply(%integer_pow.255, %broadcast.3912)
  %param.842 = bf16[4096]{0} parameter(903), sharding={replicated}
  %mul.12834 = bf16[4096]{0} multiply(%param.842, %broadcast.3913)
  %add.4159 = bf16[4096]{0} add(%mul.12833, %mul.12834)
  %div.2888 = bf16[4096]{0} divide(%add.4159, %div.1439)
  %sqrt.256 = bf16[4096]{0} sqrt(%div.2888)
  %add.4160 = bf16[4096]{0} add(%sqrt.256, %broadcast.3914)
  %multiply.2767 = bf16[4096]{0} multiply(%div.1438, %add.4160)
  %div.2889 = bf16[4096]{0} divide(%add.4158, %multiply.2767)
  %mul.12835 = bf16[4096]{0} multiply(%param.322, %broadcast.3910)
  %add.4161 = bf16[4096]{0} add(%div.2889, %mul.12835)
  %mul.12839 = bf16[4096]{0} multiply(%mul.2424, %add.4161)
  %add.4162 = bf16[4096]{0} add(%param.322, %mul.12839)
  %div.2890 = bf16[4096]{0} divide(%all-reduce.383, %div.1436)
  %select_n.965 = bf16[4096]{0} select(%select_n.701, %all-reduce.383, %div.2890)
  %mul.12841 = bf16[4096]{0} multiply(%select_n.965, %broadcast.3910)
  %param.843 = bf16[4096]{0} parameter(581), sharding={replicated}
  %mul.12845 = bf16[4096]{0} multiply(%param.843, %broadcast.3911)
  %add.4163 = bf16[4096]{0} add(%mul.12841, %mul.12845)
  %integer_pow.256 = bf16[4096]{0} multiply(%select_n.965, %select_n.965)
  %mul.12852 = bf16[4096]{0} multiply(%integer_pow.256, %broadcast.3912)
  %param.844 = bf16[4096]{0} parameter(904), sharding={replicated}
  %mul.12853 = bf16[4096]{0} multiply(%param.844, %broadcast.3913)
  %add.4164 = bf16[4096]{0} add(%mul.12852, %mul.12853)
  %div.2893 = bf16[4096]{0} divide(%add.4164, %div.1439)
  %sqrt.257 = bf16[4096]{0} sqrt(%div.2893)
  %add.4166 = bf16[4096]{0} add(%sqrt.257, %broadcast.3914)
  %multiply.2768 = bf16[4096]{0} multiply(%div.1438, %add.4166)
  %div.2894 = bf16[4096]{0} divide(%add.4163, %multiply.2768)
  %mul.12858 = bf16[4096]{0} multiply(%param.317, %broadcast.3910)
  %add.4167 = bf16[4096]{0} add(%div.2894, %mul.12858)
  %mul.12859 = bf16[4096]{0} multiply(%mul.2424, %add.4167)
  %add.4169 = bf16[4096]{0} add(%param.317, %mul.12859)
  %div.2895 = bf16[512,8,128]{0,2,1} divide(%transpose.425, %div.1479)
  %select_n.966 = bf16[512,8,128]{2,1,0} select(%select_n.713, %transpose.425, %div.2895)
  %mul.12861 = bf16[512,8,128]{2,1,0} multiply(%select_n.966, %broadcast.3930)
  %param.845 = bf16[512,8,128]{2,1,0} parameter(582), sharding={devices=[8,1,1]<=[8]}
  %mul.12862 = bf16[512,8,128]{2,1,0} multiply(%param.845, %broadcast.3931)
  %add.4170 = bf16[512,8,128]{2,1,0} add(%mul.12861, %mul.12862)
  %integer_pow.257 = bf16[512,8,128]{2,1,0} multiply(%select_n.966, %select_n.966)
  %mul.12863 = bf16[512,8,128]{2,1,0} multiply(%integer_pow.257, %broadcast.3932)
  %param.846 = bf16[512,8,128]{2,1,0} parameter(905), sharding={devices=[8,1,1]<=[8]}
  %mul.12865 = bf16[512,8,128]{2,1,0} multiply(%param.846, %broadcast.3933)
  %add.4172 = bf16[512,8,128]{2,1,0} add(%mul.12863, %mul.12865)
  %div.2898 = bf16[512,8,128]{2,1,0} divide(%add.4172, %div.1482)
  %sqrt.258 = bf16[512,8,128]{2,1,0} sqrt(%div.2898)
  %add.4173 = bf16[512,8,128]{2,1,0} add(%sqrt.258, %broadcast.3934)
  %multiply.2769 = bf16[512,8,128]{2,1,0} multiply(%div.1481, %add.4173)
  %div.2899 = bf16[512,8,128]{2,1,0} divide(%add.4170, %multiply.2769)
  %mul.12866 = bf16[512,8,128]{2,1,0} multiply(%param.319, %broadcast.3930)
  %add.4174 = bf16[512,8,128]{2,1,0} add(%div.2899, %mul.12866)
  %mul.12867 = bf16[512,8,128]{2,1,0} multiply(%mul.9984, %add.4174)
  %add.4175 = bf16[512,8,128]{2,1,0} add(%param.319, %mul.12867)
  %div.2900 = bf16[32,128,512]{1,0,2} divide(%transpose.426, %div.1485)
  %select_n.967 = bf16[32,128,512]{2,1,0} select(%select_n.715, %transpose.426, %div.2900)
  %mul.12869 = bf16[32,128,512]{2,1,0} multiply(%select_n.967, %broadcast.3935)
  %param.847 = bf16[32,128,512]{2,1,0} parameter(583), sharding={devices=[1,1,8]<=[8]}
  %mul.12870 = bf16[32,128,512]{2,1,0} multiply(%param.847, %broadcast.3936)
  %add.4176 = bf16[32,128,512]{2,1,0} add(%mul.12869, %mul.12870)
  %integer_pow.258 = bf16[32,128,512]{2,1,0} multiply(%select_n.967, %select_n.967)
  %mul.12876 = bf16[32,128,512]{2,1,0} multiply(%integer_pow.258, %broadcast.3937)
  %param.848 = bf16[32,128,512]{2,1,0} parameter(906), sharding={devices=[1,1,8]<=[8]}
  %mul.12877 = bf16[32,128,512]{2,1,0} multiply(%param.848, %broadcast.3938)
  %add.4177 = bf16[32,128,512]{2,1,0} add(%mul.12876, %mul.12877)
  %div.2904 = bf16[32,128,512]{2,1,0} divide(%add.4177, %div.1488)
  %sqrt.259 = bf16[32,128,512]{2,1,0} sqrt(%div.2904)
  %add.4178 = bf16[32,128,512]{2,1,0} add(%sqrt.259, %broadcast.3939)
  %multiply.2770 = bf16[32,128,512]{2,1,0} multiply(%div.1487, %add.4178)
  %div.2905 = bf16[32,128,512]{2,1,0} divide(%add.4176, %multiply.2770)
  %mul.12878 = bf16[32,128,512]{2,1,0} multiply(%param.321, %broadcast.3935)
  %add.4179 = bf16[32,128,512]{2,1,0} add(%div.2905, %mul.12878)
  %mul.12879 = bf16[32,128,512]{2,1,0} multiply(%mul.9994, %add.4179)
  %add.4180 = bf16[32,128,512]{2,1,0} add(%param.321, %mul.12879)
  %div.2906 = bf16[512,32,128]{0,2,1} divide(%transpose.427, %div.1491)
  %select_n.968 = bf16[512,32,128]{2,1,0} select(%select_n.717, %transpose.427, %div.2906)
  %mul.12881 = bf16[512,32,128]{2,1,0} multiply(%select_n.968, %broadcast.3940)
  %param.849 = bf16[512,32,128]{2,1,0} parameter(584), sharding={devices=[8,1,1]<=[8]}
  %mul.12882 = bf16[512,32,128]{2,1,0} multiply(%param.849, %broadcast.3941)
  %add.4182 = bf16[512,32,128]{2,1,0} add(%mul.12881, %mul.12882)
  %integer_pow.259 = bf16[512,32,128]{2,1,0} multiply(%select_n.968, %select_n.968)
  %mul.12884 = bf16[512,32,128]{2,1,0} multiply(%integer_pow.259, %broadcast.3942)
  %param.850 = bf16[512,32,128]{2,1,0} parameter(907), sharding={devices=[8,1,1]<=[8]}
  %mul.12885 = bf16[512,32,128]{2,1,0} multiply(%param.850, %broadcast.3943)
  %add.4183 = bf16[512,32,128]{2,1,0} add(%mul.12884, %mul.12885)
  %div.2909 = bf16[512,32,128]{2,1,0} divide(%add.4183, %div.1494)
  %sqrt.260 = bf16[512,32,128]{2,1,0} sqrt(%div.2909)
  %add.4184 = bf16[512,32,128]{2,1,0} add(%sqrt.260, %broadcast.3944)
  %multiply.2771 = bf16[512,32,128]{2,1,0} multiply(%div.1493, %add.4184)
  %div.2910 = bf16[512,32,128]{2,1,0} divide(%add.4182, %multiply.2771)
  %mul.12886 = bf16[512,32,128]{2,1,0} multiply(%param.318, %broadcast.3940)
  %add.4186 = bf16[512,32,128]{2,1,0} add(%div.2910, %mul.12886)
  %mul.12887 = bf16[512,32,128]{2,1,0} multiply(%mul.10010, %add.4186)
  %add.4187 = bf16[512,32,128]{2,1,0} add(%param.318, %mul.12887)
  %div.2911 = bf16[512,8,128]{0,2,1} divide(%transpose.428, %div.1479)
  %select_n.969 = bf16[512,8,128]{2,1,0} select(%select_n.713, %transpose.428, %div.2911)
  %mul.12889 = bf16[512,8,128]{2,1,0} multiply(%select_n.969, %broadcast.3930)
  %param.851 = bf16[512,8,128]{2,1,0} parameter(585), sharding={devices=[8,1,1]<=[8]}
  %mul.12890 = bf16[512,8,128]{2,1,0} multiply(%param.851, %broadcast.3931)
  %add.4188 = bf16[512,8,128]{2,1,0} add(%mul.12889, %mul.12890)
  %integer_pow.260 = bf16[512,8,128]{2,1,0} multiply(%select_n.969, %select_n.969)
  %mul.12891 = bf16[512,8,128]{2,1,0} multiply(%integer_pow.260, %broadcast.3932)
  %param.852 = bf16[512,8,128]{2,1,0} parameter(908), sharding={devices=[8,1,1]<=[8]}
  %mul.12892 = bf16[512,8,128]{2,1,0} multiply(%param.852, %broadcast.3933)
  %add.4189 = bf16[512,8,128]{2,1,0} add(%mul.12891, %mul.12892)
  %div.2914 = bf16[512,8,128]{2,1,0} divide(%add.4189, %div.1482)
  %sqrt.261 = bf16[512,8,128]{2,1,0} sqrt(%div.2914)
  %add.4190 = bf16[512,8,128]{2,1,0} add(%sqrt.261, %broadcast.3934)
  %multiply.2772 = bf16[512,8,128]{2,1,0} multiply(%div.1481, %add.4190)
  %div.2915 = bf16[512,8,128]{2,1,0} divide(%add.4188, %multiply.2772)
  %mul.12893 = bf16[512,8,128]{2,1,0} multiply(%param.320, %broadcast.3930)
  %add.4191 = bf16[512,8,128]{2,1,0} add(%div.2915, %mul.12893)
  %mul.12894 = bf16[512,8,128]{2,1,0} multiply(%mul.9984, %add.4191)
  %add.4192 = bf16[512,8,128]{2,1,0} add(%param.320, %mul.12894)
  %div.2916 = bf16[512,8]{1,0} divide(%dynamic-slice.2441, %div.1442)
  %select_n.970 = bf16[512,8]{1,0} select(%select_n.704, %dynamic-slice.2441, %div.2916)
  %mul.12896 = bf16[512,8]{1,0} multiply(%select_n.970, %broadcast.3915)
  %param.853 = bf16[512,8]{1,0} parameter(586), sharding={devices=[8,1]<=[8]}
  %mul.12897 = bf16[512,8]{1,0} multiply(%param.853, %broadcast.3916)
  %add.4193 = bf16[512,8]{1,0} add(%mul.12896, %mul.12897)
  %integer_pow.261 = bf16[512,8]{1,0} multiply(%select_n.970, %select_n.970)
  %mul.12898 = bf16[512,8]{1,0} multiply(%integer_pow.261, %broadcast.3917)
  %param.854 = bf16[512,8]{1,0} parameter(909), sharding={devices=[8,1]<=[8]}
  %mul.12899 = bf16[512,8]{1,0} multiply(%param.854, %broadcast.3918)
  %add.4194 = bf16[512,8]{1,0} add(%mul.12898, %mul.12899)
  %div.2919 = bf16[512,8]{1,0} divide(%add.4194, %div.1446)
  %sqrt.262 = bf16[512,8]{1,0} sqrt(%div.2919)
  %add.4196 = bf16[512,8]{1,0} add(%sqrt.262, %broadcast.3919)
  %multiply.2773 = bf16[512,8]{1,0} multiply(%div.1444, %add.4196)
  %div.2920 = bf16[512,8]{1,0} divide(%add.4193, %multiply.2773)
  %mul.12900 = bf16[512,8]{1,0} multiply(%param.53, %broadcast.3915)
  %add.4197 = bf16[512,8]{1,0} add(%div.2920, %mul.12900)
  %mul.12901 = bf16[512,8]{1,0} multiply(%mul.9922, %add.4197)
  %add.4198 = bf16[512,8]{1,0} add(%param.53, %mul.12901)
  %div.2921 = bf16[1,4096,14336]{2,1,0} divide(%sharding_constraint.2546, %div.1450)
  %select_n.971 = bf16[1,4096,14336]{2,1,0} select(%select_n.706, %sharding_constraint.2546, %div.2921)
  %mul.12903 = bf16[1,4096,14336]{2,1,0} multiply(%select_n.971, %broadcast.3920)
  %param.855 = bf16[1,4096,14336]{2,1,0} parameter(587), sharding={devices=[8,1,1]<=[8]}
  %mul.12904 = bf16[1,4096,14336]{2,1,0} multiply(%param.855, %broadcast.3921)
  %add.4199 = bf16[1,4096,14336]{2,1,0} add(%mul.12903, %mul.12904)
  %integer_pow.262 = bf16[1,4096,14336]{2,1,0} multiply(%select_n.971, %select_n.971)
  %mul.12905 = bf16[1,4096,14336]{2,1,0} multiply(%integer_pow.262, %broadcast.3922)
  %param.856 = bf16[1,4096,14336]{2,1,0} parameter(910), sharding={devices=[8,1,1]<=[8]}
  %mul.12906 = bf16[1,4096,14336]{2,1,0} multiply(%param.856, %broadcast.3923)
  %add.4200 = bf16[1,4096,14336]{2,1,0} add(%mul.12905, %mul.12906)
  %div.2924 = bf16[1,4096,14336]{2,1,0} divide(%add.4200, %div.1455)
  %sqrt.263 = bf16[1,4096,14336]{2,1,0} sqrt(%div.2924)
  %add.4201 = bf16[1,4096,14336]{2,1,0} add(%sqrt.263, %broadcast.3924)
  %multiply.2774 = bf16[1,4096,14336]{2,1,0} multiply(%div.1454, %add.4201)
  %div.2925 = bf16[1,4096,14336]{2,1,0} divide(%add.4199, %multiply.2774)
  %mul.12911 = bf16[1,4096,14336]{2,1,0} multiply(%param.54, %broadcast.3920)
  %add.4202 = bf16[1,4096,14336]{2,1,0} add(%div.2925, %mul.12911)
  %mul.12914 = bf16[1,4096,14336]{2,1,0} multiply(%mul.9929, %add.4202)
  %add.4203 = bf16[1,4096,14336]{2,1,0} add(%param.54, %mul.12914)
  %div.2926 = bf16[1,4096,14336]{2,1,0} divide(%sharding_constraint.2547, %div.1450)
  %select_n.972 = bf16[1,4096,14336]{2,1,0} select(%select_n.706, %sharding_constraint.2547, %div.2926)
  %mul.12916 = bf16[1,4096,14336]{2,1,0} multiply(%select_n.972, %broadcast.3920)
  %param.857 = bf16[1,4096,14336]{2,1,0} parameter(588), sharding={devices=[8,1,1]<=[8]}
  %mul.12917 = bf16[1,4096,14336]{2,1,0} multiply(%param.857, %broadcast.3921)
  %add.4204 = bf16[1,4096,14336]{2,1,0} add(%mul.12916, %mul.12917)
  %integer_pow.263 = bf16[1,4096,14336]{2,1,0} multiply(%select_n.972, %select_n.972)
  %mul.12923 = bf16[1,4096,14336]{2,1,0} multiply(%integer_pow.263, %broadcast.3922)
  %param.858 = bf16[1,4096,14336]{2,1,0} parameter(911), sharding={devices=[8,1,1]<=[8]}
  %mul.12924 = bf16[1,4096,14336]{2,1,0} multiply(%param.858, %broadcast.3923)
  %add.4205 = bf16[1,4096,14336]{2,1,0} add(%mul.12923, %mul.12924)
  %div.2929 = bf16[1,4096,14336]{2,1,0} divide(%add.4205, %div.1455)
  %sqrt.264 = bf16[1,4096,14336]{2,1,0} sqrt(%div.2929)
  %add.4206 = bf16[1,4096,14336]{2,1,0} add(%sqrt.264, %broadcast.3924)
  %multiply.2775 = bf16[1,4096,14336]{2,1,0} multiply(%div.1454, %add.4206)
  %div.2930 = bf16[1,4096,14336]{2,1,0} divide(%add.4204, %multiply.2775)
  %mul.12929 = bf16[1,4096,14336]{2,1,0} multiply(%param.55, %broadcast.3920)
  %add.4207 = bf16[1,4096,14336]{2,1,0} add(%div.2930, %mul.12929)
  %mul.12930 = bf16[1,4096,14336]{2,1,0} multiply(%mul.9929, %add.4207)
  %add.4208 = bf16[1,4096,14336]{2,1,0} add(%param.55, %mul.12930)
  %div.2931 = bf16[1,14336,4096]{2,1,0} divide(%sharding_constraint.2548, %div.1463)
  %select_n.973 = bf16[1,14336,4096]{2,1,0} select(%select_n.709, %sharding_constraint.2548, %div.2931)
  %mul.12932 = bf16[1,14336,4096]{2,1,0} multiply(%select_n.973, %broadcast.3925)
  %param.859 = bf16[1,14336,4096]{2,1,0} parameter(589), sharding={devices=[8,1,1]<=[8]}
  %mul.12933 = bf16[1,14336,4096]{2,1,0} multiply(%param.859, %broadcast.3926)
  %add.4209 = bf16[1,14336,4096]{2,1,0} add(%mul.12932, %mul.12933)
  %integer_pow.264 = bf16[1,14336,4096]{2,1,0} multiply(%select_n.973, %select_n.973)
  %mul.12934 = bf16[1,14336,4096]{2,1,0} multiply(%integer_pow.264, %broadcast.3927)
  %param.860 = bf16[1,14336,4096]{2,1,0} parameter(912), sharding={devices=[8,1,1]<=[8]}
  %mul.12935 = bf16[1,14336,4096]{2,1,0} multiply(%param.860, %broadcast.3928)
  %add.4210 = bf16[1,14336,4096]{2,1,0} add(%mul.12934, %mul.12935)
  %div.2934 = bf16[1,14336,4096]{2,1,0} divide(%add.4210, %div.1466)
  %sqrt.265 = bf16[1,14336,4096]{2,1,0} sqrt(%div.2934)
  %add.4211 = bf16[1,14336,4096]{2,1,0} add(%sqrt.265, %broadcast.3929)
  %multiply.2776 = bf16[1,14336,4096]{2,1,0} multiply(%div.1465, %add.4211)
  %div.2935 = bf16[1,14336,4096]{2,1,0} divide(%add.4209, %multiply.2776)
  %mul.12936 = bf16[1,14336,4096]{2,1,0} multiply(%param.56, %broadcast.3925)
  %add.4212 = bf16[1,14336,4096]{2,1,0} add(%div.2935, %mul.12936)
  %mul.12938 = bf16[1,14336,4096]{2,1,0} multiply(%mul.9949, %add.4212)
  %add.4213 = bf16[1,14336,4096]{2,1,0} add(%param.56, %mul.12938)
  %div.2936 = bf16[4096]{0} divide(%all-reduce.397, %div.1436)
  %select_n.974 = bf16[4096]{0} select(%select_n.701, %all-reduce.397, %div.2936)
  %mul.12940 = bf16[4096]{0} multiply(%select_n.974, %broadcast.3910)
  %param.861 = bf16[4096]{0} parameter(590), sharding={replicated}
  %mul.12941 = bf16[4096]{0} multiply(%param.861, %broadcast.3911)
  %add.4214 = bf16[4096]{0} add(%mul.12940, %mul.12941)
  %integer_pow.265 = bf16[4096]{0} multiply(%select_n.974, %select_n.974)
  %mul.12942 = bf16[4096]{0} multiply(%integer_pow.265, %broadcast.3912)
  %param.862 = bf16[4096]{0} parameter(913), sharding={replicated}
  %mul.12943 = bf16[4096]{0} multiply(%param.862, %broadcast.3913)
  %add.4215 = bf16[4096]{0} add(%mul.12942, %mul.12943)
  %div.2945 = bf16[4096]{0} divide(%add.4215, %div.1439)
  %sqrt.266 = bf16[4096]{0} sqrt(%div.2945)
  %add.4216 = bf16[4096]{0} add(%sqrt.266, %broadcast.3914)
  %multiply.2777 = bf16[4096]{0} multiply(%div.1438, %add.4216)
  %div.2946 = bf16[4096]{0} divide(%add.4214, %multiply.2777)
  %mul.12944 = bf16[4096]{0} multiply(%param.52, %broadcast.3910)
  %add.4217 = bf16[4096]{0} add(%div.2946, %mul.12944)
  %mul.12945 = bf16[4096]{0} multiply(%mul.2424, %add.4217)
  %add.4218 = bf16[4096]{0} add(%param.52, %mul.12945)
  %div.2947 = bf16[4096]{0} divide(%all-reduce.398, %div.1436)
  %select_n.975 = bf16[4096]{0} select(%select_n.701, %all-reduce.398, %div.2947)
  %mul.12947 = bf16[4096]{0} multiply(%select_n.975, %broadcast.3910)
  %param.863 = bf16[4096]{0} parameter(591), sharding={replicated}
  %mul.12948 = bf16[4096]{0} multiply(%param.863, %broadcast.3911)
  %add.4219 = bf16[4096]{0} add(%mul.12947, %mul.12948)
  %integer_pow.266 = bf16[4096]{0} multiply(%select_n.975, %select_n.975)
  %mul.12949 = bf16[4096]{0} multiply(%integer_pow.266, %broadcast.3912)
  %param.864 = bf16[4096]{0} parameter(914), sharding={replicated}
  %mul.12950 = bf16[4096]{0} multiply(%param.864, %broadcast.3913)
  %add.4220 = bf16[4096]{0} add(%mul.12949, %mul.12950)
  %div.2950 = bf16[4096]{0} divide(%add.4220, %div.1439)
  %sqrt.267 = bf16[4096]{0} sqrt(%div.2950)
  %add.4221 = bf16[4096]{0} add(%sqrt.267, %broadcast.3914)
  %multiply.2778 = bf16[4096]{0} multiply(%div.1438, %add.4221)
  %div.2951 = bf16[4096]{0} divide(%add.4219, %multiply.2778)
  %mul.12951 = bf16[4096]{0} multiply(%param.47, %broadcast.3910)
  %add.4222 = bf16[4096]{0} add(%div.2951, %mul.12951)
  %mul.12952 = bf16[4096]{0} multiply(%mul.2424, %add.4222)
  %add.4223 = bf16[4096]{0} add(%param.47, %mul.12952)
  %div.2952 = bf16[512,8,128]{0,2,1} divide(%transpose.429, %div.1479)
  %select_n.976 = bf16[512,8,128]{2,1,0} select(%select_n.713, %transpose.429, %div.2952)
  %mul.12954 = bf16[512,8,128]{2,1,0} multiply(%select_n.976, %broadcast.3930)
  %param.865 = bf16[512,8,128]{2,1,0} parameter(592), sharding={devices=[8,1,1]<=[8]}
  %mul.12955 = bf16[512,8,128]{2,1,0} multiply(%param.865, %broadcast.3931)
  %add.4224 = bf16[512,8,128]{2,1,0} add(%mul.12954, %mul.12955)
  %integer_pow.267 = bf16[512,8,128]{2,1,0} multiply(%select_n.976, %select_n.976)
  %mul.12964 = bf16[512,8,128]{2,1,0} multiply(%integer_pow.267, %broadcast.3932)
  %param.866 = bf16[512,8,128]{2,1,0} parameter(915), sharding={devices=[8,1,1]<=[8]}
  %mul.12973 = bf16[512,8,128]{2,1,0} multiply(%param.866, %broadcast.3933)
  %add.4226 = bf16[512,8,128]{2,1,0} add(%mul.12964, %mul.12973)
  %div.2955 = bf16[512,8,128]{2,1,0} divide(%add.4226, %div.1482)
  %sqrt.268 = bf16[512,8,128]{2,1,0} sqrt(%div.2955)
  %add.4227 = bf16[512,8,128]{2,1,0} add(%sqrt.268, %broadcast.3934)
  %multiply.2779 = bf16[512,8,128]{2,1,0} multiply(%div.1481, %add.4227)
  %div.2956 = bf16[512,8,128]{2,1,0} divide(%add.4224, %multiply.2779)
  %mul.12974 = bf16[512,8,128]{2,1,0} multiply(%param.49, %broadcast.3930)
  %add.4228 = bf16[512,8,128]{2,1,0} add(%div.2956, %mul.12974)
  %mul.12975 = bf16[512,8,128]{2,1,0} multiply(%mul.9984, %add.4228)
  %add.4229 = bf16[512,8,128]{2,1,0} add(%param.49, %mul.12975)
  %div.2957 = bf16[32,128,512]{1,0,2} divide(%transpose.430, %div.1485)
  %select_n.977 = bf16[32,128,512]{2,1,0} select(%select_n.715, %transpose.430, %div.2957)
  %mul.12978 = bf16[32,128,512]{2,1,0} multiply(%select_n.977, %broadcast.3935)
  %param.867 = bf16[32,128,512]{2,1,0} parameter(593), sharding={devices=[1,1,8]<=[8]}
  %mul.12979 = bf16[32,128,512]{2,1,0} multiply(%param.867, %broadcast.3936)
  %add.4230 = bf16[32,128,512]{2,1,0} add(%mul.12978, %mul.12979)
  %integer_pow.268 = bf16[32,128,512]{2,1,0} multiply(%select_n.977, %select_n.977)
  %mul.12980 = bf16[32,128,512]{2,1,0} multiply(%integer_pow.268, %broadcast.3937)
  %param.868 = bf16[32,128,512]{2,1,0} parameter(916), sharding={devices=[1,1,8]<=[8]}
  %mul.12981 = bf16[32,128,512]{2,1,0} multiply(%param.868, %broadcast.3938)
  %add.4231 = bf16[32,128,512]{2,1,0} add(%mul.12980, %mul.12981)
  %div.2960 = bf16[32,128,512]{2,1,0} divide(%add.4231, %div.1488)
  %sqrt.269 = bf16[32,128,512]{2,1,0} sqrt(%div.2960)
  %add.4232 = bf16[32,128,512]{2,1,0} add(%sqrt.269, %broadcast.3939)
  %multiply.2780 = bf16[32,128,512]{2,1,0} multiply(%div.1487, %add.4232)
  %div.2961 = bf16[32,128,512]{2,1,0} divide(%add.4230, %multiply.2780)
  %mul.12982 = bf16[32,128,512]{2,1,0} multiply(%param.51, %broadcast.3935)
  %add.4233 = bf16[32,128,512]{2,1,0} add(%div.2961, %mul.12982)
  %mul.12983 = bf16[32,128,512]{2,1,0} multiply(%mul.9994, %add.4233)
  %add.4235 = bf16[32,128,512]{2,1,0} add(%param.51, %mul.12983)
  %div.2962 = bf16[512,32,128]{0,2,1} divide(%transpose.431, %div.1491)
  %select_n.978 = bf16[512,32,128]{2,1,0} select(%select_n.717, %transpose.431, %div.2962)
  %mul.12985 = bf16[512,32,128]{2,1,0} multiply(%select_n.978, %broadcast.3940)
  %param.869 = bf16[512,32,128]{2,1,0} parameter(594), sharding={devices=[8,1,1]<=[8]}
  %mul.12986 = bf16[512,32,128]{2,1,0} multiply(%param.869, %broadcast.3941)
  %add.4236 = bf16[512,32,128]{2,1,0} add(%mul.12985, %mul.12986)
  %integer_pow.269 = bf16[512,32,128]{2,1,0} multiply(%select_n.978, %select_n.978)
  %mul.12987 = bf16[512,32,128]{2,1,0} multiply(%integer_pow.269, %broadcast.3942)
  %param.870 = bf16[512,32,128]{2,1,0} parameter(917), sharding={devices=[8,1,1]<=[8]}
  %mul.12988 = bf16[512,32,128]{2,1,0} multiply(%param.870, %broadcast.3943)
  %add.4237 = bf16[512,32,128]{2,1,0} add(%mul.12987, %mul.12988)
  %div.2965 = bf16[512,32,128]{2,1,0} divide(%add.4237, %div.1494)
  %sqrt.270 = bf16[512,32,128]{2,1,0} sqrt(%div.2965)
  %add.4238 = bf16[512,32,128]{2,1,0} add(%sqrt.270, %broadcast.3944)
  %multiply.2781 = bf16[512,32,128]{2,1,0} multiply(%div.1493, %add.4238)
  %div.2966 = bf16[512,32,128]{2,1,0} divide(%add.4236, %multiply.2781)
  %mul.12989 = bf16[512,32,128]{2,1,0} multiply(%param.48, %broadcast.3940)
  %add.4239 = bf16[512,32,128]{2,1,0} add(%div.2966, %mul.12989)
  %mul.12990 = bf16[512,32,128]{2,1,0} multiply(%mul.10010, %add.4239)
  %add.4240 = bf16[512,32,128]{2,1,0} add(%param.48, %mul.12990)
  %div.2967 = bf16[512,8,128]{0,2,1} divide(%transpose.432, %div.1479)
  %select_n.979 = bf16[512,8,128]{2,1,0} select(%select_n.713, %transpose.432, %div.2967)
  %mul.12992 = bf16[512,8,128]{2,1,0} multiply(%select_n.979, %broadcast.3930)
  %param.871 = bf16[512,8,128]{2,1,0} parameter(595), sharding={devices=[8,1,1]<=[8]}
  %mul.12993 = bf16[512,8,128]{2,1,0} multiply(%param.871, %broadcast.3931)
  %add.4241 = bf16[512,8,128]{2,1,0} add(%mul.12992, %mul.12993)
  %integer_pow.270 = bf16[512,8,128]{2,1,0} multiply(%select_n.979, %select_n.979)
  %mul.12994 = bf16[512,8,128]{2,1,0} multiply(%integer_pow.270, %broadcast.3932)
  %param.872 = bf16[512,8,128]{2,1,0} parameter(918), sharding={devices=[8,1,1]<=[8]}
  %mul.12995 = bf16[512,8,128]{2,1,0} multiply(%param.872, %broadcast.3933)
  %add.4242 = bf16[512,8,128]{2,1,0} add(%mul.12994, %mul.12995)
  %div.2970 = bf16[512,8,128]{2,1,0} divide(%add.4242, %div.1482)
  %sqrt.271 = bf16[512,8,128]{2,1,0} sqrt(%div.2970)
  %add.4243 = bf16[512,8,128]{2,1,0} add(%sqrt.271, %broadcast.3934)
  %multiply.2782 = bf16[512,8,128]{2,1,0} multiply(%div.1481, %add.4243)
  %div.2971 = bf16[512,8,128]{2,1,0} divide(%add.4241, %multiply.2782)
  %mul.13004 = bf16[512,8,128]{2,1,0} multiply(%param.50, %broadcast.3930)
  %add.4244 = bf16[512,8,128]{2,1,0} add(%div.2971, %mul.13004)
  %mul.13013 = bf16[512,8,128]{2,1,0} multiply(%mul.9984, %add.4244)
  %add.4245 = bf16[512,8,128]{2,1,0} add(%param.50, %mul.13013)
  %div.2972 = bf16[512,8]{1,0} divide(%dynamic-slice.2451, %div.1442)
  %select_n.980 = bf16[512,8]{1,0} select(%select_n.704, %dynamic-slice.2451, %div.2972)
  %mul.13015 = bf16[512,8]{1,0} multiply(%select_n.980, %broadcast.3915)
  %param.873 = bf16[512,8]{1,0} parameter(596), sharding={devices=[8,1]<=[8]}
  %mul.13016 = bf16[512,8]{1,0} multiply(%param.873, %broadcast.3916)
  %add.4246 = bf16[512,8]{1,0} add(%mul.13015, %mul.13016)
  %integer_pow.271 = bf16[512,8]{1,0} multiply(%select_n.980, %select_n.980)
  %mul.13017 = bf16[512,8]{1,0} multiply(%integer_pow.271, %broadcast.3917)
  %param.874 = bf16[512,8]{1,0} parameter(919), sharding={devices=[8,1]<=[8]}
  %mul.13018 = bf16[512,8]{1,0} multiply(%param.874, %broadcast.3918)
  %add.4247 = bf16[512,8]{1,0} add(%mul.13017, %mul.13018)
  %div.2975 = bf16[512,8]{1,0} divide(%add.4247, %div.1446)
  %sqrt.272 = bf16[512,8]{1,0} sqrt(%div.2975)
  %add.4248 = bf16[512,8]{1,0} add(%sqrt.272, %broadcast.3919)
  %multiply.2783 = bf16[512,8]{1,0} multiply(%div.1444, %add.4248)
  %div.2976 = bf16[512,8]{1,0} divide(%add.4246, %multiply.2783)
  %mul.13020 = bf16[512,8]{1,0} multiply(%param.63, %broadcast.3915)
  %add.4249 = bf16[512,8]{1,0} add(%div.2976, %mul.13020)
  %mul.13021 = bf16[512,8]{1,0} multiply(%mul.9922, %add.4249)
  %add.4251 = bf16[512,8]{1,0} add(%param.63, %mul.13021)
  %div.2977 = bf16[1,4096,14336]{2,1,0} divide(%sharding_constraint.2549, %div.1450)
  %select_n.981 = bf16[1,4096,14336]{2,1,0} select(%select_n.706, %sharding_constraint.2549, %div.2977)
  %mul.13023 = bf16[1,4096,14336]{2,1,0} multiply(%select_n.981, %broadcast.3920)
  %param.875 = bf16[1,4096,14336]{2,1,0} parameter(597), sharding={devices=[8,1,1]<=[8]}
  %mul.13024 = bf16[1,4096,14336]{2,1,0} multiply(%param.875, %broadcast.3921)
  %add.4252 = bf16[1,4096,14336]{2,1,0} add(%mul.13023, %mul.13024)
  %integer_pow.272 = bf16[1,4096,14336]{2,1,0} multiply(%select_n.981, %select_n.981)
  %mul.13026 = bf16[1,4096,14336]{2,1,0} multiply(%integer_pow.272, %broadcast.3922)
  %param.876 = bf16[1,4096,14336]{2,1,0} parameter(920), sharding={devices=[8,1,1]<=[8]}
  %mul.13027 = bf16[1,4096,14336]{2,1,0} multiply(%param.876, %broadcast.3923)
  %add.4253 = bf16[1,4096,14336]{2,1,0} add(%mul.13026, %mul.13027)
  %div.2980 = bf16[1,4096,14336]{2,1,0} divide(%add.4253, %div.1455)
  %sqrt.273 = bf16[1,4096,14336]{2,1,0} sqrt(%div.2980)
  %add.4254 = bf16[1,4096,14336]{2,1,0} add(%sqrt.273, %broadcast.3924)
  %multiply.2784 = bf16[1,4096,14336]{2,1,0} multiply(%div.1454, %add.4254)
  %div.2981 = bf16[1,4096,14336]{2,1,0} divide(%add.4252, %multiply.2784)
  %mul.13028 = bf16[1,4096,14336]{2,1,0} multiply(%param.64, %broadcast.3920)
  %add.4255 = bf16[1,4096,14336]{2,1,0} add(%div.2981, %mul.13028)
  %mul.13029 = bf16[1,4096,14336]{2,1,0} multiply(%mul.9929, %add.4255)
  %add.4257 = bf16[1,4096,14336]{2,1,0} add(%param.64, %mul.13029)
  %div.2982 = bf16[1,4096,14336]{2,1,0} divide(%sharding_constraint.2550, %div.1450)
  %select_n.982 = bf16[1,4096,14336]{2,1,0} select(%select_n.706, %sharding_constraint.2550, %div.2982)
  %mul.13031 = bf16[1,4096,14336]{2,1,0} multiply(%select_n.982, %broadcast.3920)
  %param.877 = bf16[1,4096,14336]{2,1,0} parameter(598), sharding={devices=[8,1,1]<=[8]}
  %mul.13032 = bf16[1,4096,14336]{2,1,0} multiply(%param.877, %broadcast.3921)
  %add.4258 = bf16[1,4096,14336]{2,1,0} add(%mul.13031, %mul.13032)
  %integer_pow.273 = bf16[1,4096,14336]{2,1,0} multiply(%select_n.982, %select_n.982)
  %mul.13033 = bf16[1,4096,14336]{2,1,0} multiply(%integer_pow.273, %broadcast.3922)
  %param.878 = bf16[1,4096,14336]{2,1,0} parameter(921), sharding={devices=[8,1,1]<=[8]}
  %mul.13034 = bf16[1,4096,14336]{2,1,0} multiply(%param.878, %broadcast.3923)
  %add.4259 = bf16[1,4096,14336]{2,1,0} add(%mul.13033, %mul.13034)
  %div.2985 = bf16[1,4096,14336]{2,1,0} divide(%add.4259, %div.1455)
  %sqrt.274 = bf16[1,4096,14336]{2,1,0} sqrt(%div.2985)
  %add.4260 = bf16[1,4096,14336]{2,1,0} add(%sqrt.274, %broadcast.3924)
  %multiply.2785 = bf16[1,4096,14336]{2,1,0} multiply(%div.1454, %add.4260)
  %div.2986 = bf16[1,4096,14336]{2,1,0} divide(%add.4258, %multiply.2785)
  %mul.13035 = bf16[1,4096,14336]{2,1,0} multiply(%param.65, %broadcast.3920)
  %add.4261 = bf16[1,4096,14336]{2,1,0} add(%div.2986, %mul.13035)
  %mul.13036 = bf16[1,4096,14336]{2,1,0} multiply(%mul.9929, %add.4261)
  %add.4263 = bf16[1,4096,14336]{2,1,0} add(%param.65, %mul.13036)
  %div.2987 = bf16[1,14336,4096]{2,1,0} divide(%sharding_constraint.2551, %div.1463)
  %select_n.983 = bf16[1,14336,4096]{2,1,0} select(%select_n.709, %sharding_constraint.2551, %div.2987)
  %mul.13038 = bf16[1,14336,4096]{2,1,0} multiply(%select_n.983, %broadcast.3925)
  %param.879 = bf16[1,14336,4096]{2,1,0} parameter(599), sharding={devices=[8,1,1]<=[8]}
  %mul.13039 = bf16[1,14336,4096]{2,1,0} multiply(%param.879, %broadcast.3926)
  %add.4264 = bf16[1,14336,4096]{2,1,0} add(%mul.13038, %mul.13039)
  %integer_pow.274 = bf16[1,14336,4096]{2,1,0} multiply(%select_n.983, %select_n.983)
  %mul.13041 = bf16[1,14336,4096]{2,1,0} multiply(%integer_pow.274, %broadcast.3927)
  %param.880 = bf16[1,14336,4096]{2,1,0} parameter(922), sharding={devices=[8,1,1]<=[8]}
  %mul.13042 = bf16[1,14336,4096]{2,1,0} multiply(%param.880, %broadcast.3928)
  %add.4265 = bf16[1,14336,4096]{2,1,0} add(%mul.13041, %mul.13042)
  %div.2990 = bf16[1,14336,4096]{2,1,0} divide(%add.4265, %div.1466)
  %sqrt.275 = bf16[1,14336,4096]{2,1,0} sqrt(%div.2990)
  %add.4266 = bf16[1,14336,4096]{2,1,0} add(%sqrt.275, %broadcast.3929)
  %multiply.2786 = bf16[1,14336,4096]{2,1,0} multiply(%div.1465, %add.4266)
  %div.2991 = bf16[1,14336,4096]{2,1,0} divide(%add.4264, %multiply.2786)
  %mul.13043 = bf16[1,14336,4096]{2,1,0} multiply(%param.66, %broadcast.3925)
  %add.4267 = bf16[1,14336,4096]{2,1,0} add(%div.2991, %mul.13043)
  %mul.13044 = bf16[1,14336,4096]{2,1,0} multiply(%mul.9949, %add.4267)
  %add.4268 = bf16[1,14336,4096]{2,1,0} add(%param.66, %mul.13044)
  %div.2992 = bf16[4096]{0} divide(%all-reduce.412, %div.1436)
  %select_n.984 = bf16[4096]{0} select(%select_n.701, %all-reduce.412, %div.2992)
  %mul.13046 = bf16[4096]{0} multiply(%select_n.984, %broadcast.3910)
  %param.881 = bf16[4096]{0} parameter(600), sharding={replicated}
  %mul.13048 = bf16[4096]{0} multiply(%param.881, %broadcast.3911)
  %add.4269 = bf16[4096]{0} add(%mul.13046, %mul.13048)
  %integer_pow.275 = bf16[4096]{0} multiply(%select_n.984, %select_n.984)
  %mul.13049 = bf16[4096]{0} multiply(%integer_pow.275, %broadcast.3912)
  %param.882 = bf16[4096]{0} parameter(923), sharding={replicated}
  %mul.13050 = bf16[4096]{0} multiply(%param.882, %broadcast.3913)
  %add.4270 = bf16[4096]{0} add(%mul.13049, %mul.13050)
  %div.2995 = bf16[4096]{0} divide(%add.4270, %div.1439)
  %sqrt.276 = bf16[4096]{0} sqrt(%div.2995)
  %add.4271 = bf16[4096]{0} add(%sqrt.276, %broadcast.3914)
  %multiply.2787 = bf16[4096]{0} multiply(%div.1438, %add.4271)
  %div.2996 = bf16[4096]{0} divide(%add.4269, %multiply.2787)
  %mul.13051 = bf16[4096]{0} multiply(%param.62, %broadcast.3910)
  %add.4272 = bf16[4096]{0} add(%div.2996, %mul.13051)
  %mul.13055 = bf16[4096]{0} multiply(%mul.2424, %add.4272)
  %add.4273 = bf16[4096]{0} add(%param.62, %mul.13055)
  %div.2997 = bf16[4096]{0} divide(%all-reduce.413, %div.1436)
  %select_n.985 = bf16[4096]{0} select(%select_n.701, %all-reduce.413, %div.2997)
  %mul.13059 = bf16[4096]{0} multiply(%select_n.985, %broadcast.3910)
  %param.883 = bf16[4096]{0} parameter(601), sharding={replicated}
  %mul.13060 = bf16[4096]{0} multiply(%param.883, %broadcast.3911)
  %add.4276 = bf16[4096]{0} add(%mul.13059, %mul.13060)
  %integer_pow.276 = bf16[4096]{0} multiply(%select_n.985, %select_n.985)
  %mul.13061 = bf16[4096]{0} multiply(%integer_pow.276, %broadcast.3912)
  %param.884 = bf16[4096]{0} parameter(924), sharding={replicated}
  %mul.13062 = bf16[4096]{0} multiply(%param.884, %broadcast.3913)
  %add.4277 = bf16[4096]{0} add(%mul.13061, %mul.13062)
  %div.3000 = bf16[4096]{0} divide(%add.4277, %div.1439)
  %sqrt.277 = bf16[4096]{0} sqrt(%div.3000)
  %add.4278 = bf16[4096]{0} add(%sqrt.277, %broadcast.3914)
  %multiply.2788 = bf16[4096]{0} multiply(%div.1438, %add.4278)
  %div.3001 = bf16[4096]{0} divide(%add.4276, %multiply.2788)
  %mul.13063 = bf16[4096]{0} multiply(%param.57, %broadcast.3910)
  %add.4279 = bf16[4096]{0} add(%div.3001, %mul.13063)
  %mul.13064 = bf16[4096]{0} multiply(%mul.2424, %add.4279)
  %add.4280 = bf16[4096]{0} add(%param.57, %mul.13064)
  %div.3002 = bf16[512,8,128]{0,2,1} divide(%transpose.433, %div.1479)
  %select_n.986 = bf16[512,8,128]{2,1,0} select(%select_n.713, %transpose.433, %div.3002)
  %mul.13066 = bf16[512,8,128]{2,1,0} multiply(%select_n.986, %broadcast.3930)
  %param.885 = bf16[512,8,128]{2,1,0} parameter(602), sharding={devices=[8,1,1]<=[8]}
  %mul.13067 = bf16[512,8,128]{2,1,0} multiply(%param.885, %broadcast.3931)
  %add.4281 = bf16[512,8,128]{2,1,0} add(%mul.13066, %mul.13067)
  %integer_pow.277 = bf16[512,8,128]{2,1,0} multiply(%select_n.986, %select_n.986)
  %mul.13068 = bf16[512,8,128]{2,1,0} multiply(%integer_pow.277, %broadcast.3932)
  %param.886 = bf16[512,8,128]{2,1,0} parameter(925), sharding={devices=[8,1,1]<=[8]}
  %mul.13069 = bf16[512,8,128]{2,1,0} multiply(%param.886, %broadcast.3933)
  %add.4282 = bf16[512,8,128]{2,1,0} add(%mul.13068, %mul.13069)
  %div.3006 = bf16[512,8,128]{2,1,0} divide(%add.4282, %div.1482)
  %sqrt.278 = bf16[512,8,128]{2,1,0} sqrt(%div.3006)
  %add.4283 = bf16[512,8,128]{2,1,0} add(%sqrt.278, %broadcast.3934)
  %multiply.2789 = bf16[512,8,128]{2,1,0} multiply(%div.1481, %add.4283)
  %div.3007 = bf16[512,8,128]{2,1,0} divide(%add.4281, %multiply.2789)
  %mul.13070 = bf16[512,8,128]{2,1,0} multiply(%param.59, %broadcast.3930)
  %add.4284 = bf16[512,8,128]{2,1,0} add(%div.3007, %mul.13070)
  %mul.13072 = bf16[512,8,128]{2,1,0} multiply(%mul.9984, %add.4284)
  %add.4285 = bf16[512,8,128]{2,1,0} add(%param.59, %mul.13072)
  %div.3008 = bf16[32,128,512]{1,0,2} divide(%transpose.434, %div.1485)
  %select_n.987 = bf16[32,128,512]{2,1,0} select(%select_n.715, %transpose.434, %div.3008)
  %mul.13074 = bf16[32,128,512]{2,1,0} multiply(%select_n.987, %broadcast.3935)
  %param.887 = bf16[32,128,512]{2,1,0} parameter(603), sharding={devices=[1,1,8]<=[8]}
  %mul.13075 = bf16[32,128,512]{2,1,0} multiply(%param.887, %broadcast.3936)
  %add.4286 = bf16[32,128,512]{2,1,0} add(%mul.13074, %mul.13075)
  %integer_pow.278 = bf16[32,128,512]{2,1,0} multiply(%select_n.987, %select_n.987)
  %mul.13077 = bf16[32,128,512]{2,1,0} multiply(%integer_pow.278, %broadcast.3937)
  %param.888 = bf16[32,128,512]{2,1,0} parameter(926), sharding={devices=[1,1,8]<=[8]}
  %mul.13078 = bf16[32,128,512]{2,1,0} multiply(%param.888, %broadcast.3938)
  %add.4287 = bf16[32,128,512]{2,1,0} add(%mul.13077, %mul.13078)
  %div.3011 = bf16[32,128,512]{2,1,0} divide(%add.4287, %div.1488)
  %sqrt.279 = bf16[32,128,512]{2,1,0} sqrt(%div.3011)
  %add.4288 = bf16[32,128,512]{2,1,0} add(%sqrt.279, %broadcast.3939)
  %multiply.2790 = bf16[32,128,512]{2,1,0} multiply(%div.1487, %add.4288)
  %div.3012 = bf16[32,128,512]{2,1,0} divide(%add.4286, %multiply.2790)
  %mul.13079 = bf16[32,128,512]{2,1,0} multiply(%param.61, %broadcast.3935)
  %add.4289 = bf16[32,128,512]{2,1,0} add(%div.3012, %mul.13079)
  %mul.13080 = bf16[32,128,512]{2,1,0} multiply(%mul.9994, %add.4289)
  %add.4290 = bf16[32,128,512]{2,1,0} add(%param.61, %mul.13080)
  %div.3013 = bf16[512,32,128]{0,2,1} divide(%transpose.435, %div.1491)
  %select_n.988 = bf16[512,32,128]{2,1,0} select(%select_n.717, %transpose.435, %div.3013)
  %mul.13087 = bf16[512,32,128]{2,1,0} multiply(%select_n.988, %broadcast.3940)
  %param.889 = bf16[512,32,128]{2,1,0} parameter(604), sharding={devices=[8,1,1]<=[8]}
  %mul.13093 = bf16[512,32,128]{2,1,0} multiply(%param.889, %broadcast.3941)
  %add.4291 = bf16[512,32,128]{2,1,0} add(%mul.13087, %mul.13093)
  %integer_pow.279 = bf16[512,32,128]{2,1,0} multiply(%select_n.988, %select_n.988)
  %mul.13094 = bf16[512,32,128]{2,1,0} multiply(%integer_pow.279, %broadcast.3942)
  %param.890 = bf16[512,32,128]{2,1,0} parameter(927), sharding={devices=[8,1,1]<=[8]}
  %mul.13096 = bf16[512,32,128]{2,1,0} multiply(%param.890, %broadcast.3943)
  %add.4292 = bf16[512,32,128]{2,1,0} add(%mul.13094, %mul.13096)
  %div.3016 = bf16[512,32,128]{2,1,0} divide(%add.4292, %div.1494)
  %sqrt.280 = bf16[512,32,128]{2,1,0} sqrt(%div.3016)
  %add.4293 = bf16[512,32,128]{2,1,0} add(%sqrt.280, %broadcast.3944)
  %multiply.2791 = bf16[512,32,128]{2,1,0} multiply(%div.1493, %add.4293)
  %div.3017 = bf16[512,32,128]{2,1,0} divide(%add.4291, %multiply.2791)
  %mul.13100 = bf16[512,32,128]{2,1,0} multiply(%param.58, %broadcast.3940)
  %add.4294 = bf16[512,32,128]{2,1,0} add(%div.3017, %mul.13100)
  %mul.13101 = bf16[512,32,128]{2,1,0} multiply(%mul.10010, %add.4294)
  %add.4295 = bf16[512,32,128]{2,1,0} add(%param.58, %mul.13101)
  %div.3018 = bf16[512,8,128]{0,2,1} divide(%transpose.436, %div.1479)
  %select_n.989 = bf16[512,8,128]{2,1,0} select(%select_n.713, %transpose.436, %div.3018)
  %mul.13103 = bf16[512,8,128]{2,1,0} multiply(%select_n.989, %broadcast.3930)
  %param.891 = bf16[512,8,128]{2,1,0} parameter(605), sharding={devices=[8,1,1]<=[8]}
  %mul.13104 = bf16[512,8,128]{2,1,0} multiply(%param.891, %broadcast.3931)
  %add.4296 = bf16[512,8,128]{2,1,0} add(%mul.13103, %mul.13104)
  %integer_pow.280 = bf16[512,8,128]{2,1,0} multiply(%select_n.989, %select_n.989)
  %mul.13105 = bf16[512,8,128]{2,1,0} multiply(%integer_pow.280, %broadcast.3932)
  %param.892 = bf16[512,8,128]{2,1,0} parameter(928), sharding={devices=[8,1,1]<=[8]}
  %mul.13106 = bf16[512,8,128]{2,1,0} multiply(%param.892, %broadcast.3933)
  %add.4297 = bf16[512,8,128]{2,1,0} add(%mul.13105, %mul.13106)
  %div.3021 = bf16[512,8,128]{2,1,0} divide(%add.4297, %div.1482)
  %sqrt.281 = bf16[512,8,128]{2,1,0} sqrt(%div.3021)
  %add.4298 = bf16[512,8,128]{2,1,0} add(%sqrt.281, %broadcast.3934)
  %multiply.2792 = bf16[512,8,128]{2,1,0} multiply(%div.1481, %add.4298)
  %div.3022 = bf16[512,8,128]{2,1,0} divide(%add.4296, %multiply.2792)
  %mul.13107 = bf16[512,8,128]{2,1,0} multiply(%param.60, %broadcast.3930)
  %add.4299 = bf16[512,8,128]{2,1,0} add(%div.3022, %mul.13107)
  %mul.13109 = bf16[512,8,128]{2,1,0} multiply(%mul.9984, %add.4299)
  %add.4300 = bf16[512,8,128]{2,1,0} add(%param.60, %mul.13109)
  %div.3023 = bf16[512,8]{1,0} divide(%dynamic-slice.2461, %div.1442)
  %select_n.990 = bf16[512,8]{1,0} select(%select_n.704, %dynamic-slice.2461, %div.3023)
  %mul.13111 = bf16[512,8]{1,0} multiply(%select_n.990, %broadcast.3915)
  %param.893 = bf16[512,8]{1,0} parameter(606), sharding={devices=[8,1]<=[8]}
  %mul.13112 = bf16[512,8]{1,0} multiply(%param.893, %broadcast.3916)
  %add.4301 = bf16[512,8]{1,0} add(%mul.13111, %mul.13112)
  %integer_pow.281 = bf16[512,8]{1,0} multiply(%select_n.990, %select_n.990)
  %mul.13113 = bf16[512,8]{1,0} multiply(%integer_pow.281, %broadcast.3917)
  %param.894 = bf16[512,8]{1,0} parameter(929), sharding={devices=[8,1]<=[8]}
  %mul.13114 = bf16[512,8]{1,0} multiply(%param.894, %broadcast.3918)
  %add.4302 = bf16[512,8]{1,0} add(%mul.13113, %mul.13114)
  %div.3027 = bf16[512,8]{1,0} divide(%add.4302, %div.1446)
  %sqrt.282 = bf16[512,8]{1,0} sqrt(%div.3027)
  %add.4303 = bf16[512,8]{1,0} add(%sqrt.282, %broadcast.3919)
  %multiply.2793 = bf16[512,8]{1,0} multiply(%div.1444, %add.4303)
  %div.3028 = bf16[512,8]{1,0} divide(%add.4301, %multiply.2793)
  %mul.13115 = bf16[512,8]{1,0} multiply(%param.73, %broadcast.3915)
  %add.4305 = bf16[512,8]{1,0} add(%div.3028, %mul.13115)
  %mul.13116 = bf16[512,8]{1,0} multiply(%mul.9922, %add.4305)
  %add.4306 = bf16[512,8]{1,0} add(%param.73, %mul.13116)
  %div.3029 = bf16[1,4096,14336]{2,1,0} divide(%sharding_constraint.2552, %div.1450)
  %select_n.991 = bf16[1,4096,14336]{2,1,0} select(%select_n.706, %sharding_constraint.2552, %div.3029)
  %mul.13118 = bf16[1,4096,14336]{2,1,0} multiply(%select_n.991, %broadcast.3920)
  %param.895 = bf16[1,4096,14336]{2,1,0} parameter(607), sharding={devices=[8,1,1]<=[8]}
  %mul.13121 = bf16[1,4096,14336]{2,1,0} multiply(%param.895, %broadcast.3921)
  %add.4307 = bf16[1,4096,14336]{2,1,0} add(%mul.13118, %mul.13121)
  %integer_pow.282 = bf16[1,4096,14336]{2,1,0} multiply(%select_n.991, %select_n.991)
  %mul.13126 = bf16[1,4096,14336]{2,1,0} multiply(%integer_pow.282, %broadcast.3922)
  %param.896 = bf16[1,4096,14336]{2,1,0} parameter(930), sharding={devices=[8,1,1]<=[8]}
  %mul.13127 = bf16[1,4096,14336]{2,1,0} multiply(%param.896, %broadcast.3923)
  %add.4308 = bf16[1,4096,14336]{2,1,0} add(%mul.13126, %mul.13127)
  %div.3032 = bf16[1,4096,14336]{2,1,0} divide(%add.4308, %div.1455)
  %sqrt.283 = bf16[1,4096,14336]{2,1,0} sqrt(%div.3032)
  %add.4309 = bf16[1,4096,14336]{2,1,0} add(%sqrt.283, %broadcast.3924)
  %multiply.2794 = bf16[1,4096,14336]{2,1,0} multiply(%div.1454, %add.4309)
  %div.3033 = bf16[1,4096,14336]{2,1,0} divide(%add.4307, %multiply.2794)
  %mul.13128 = bf16[1,4096,14336]{2,1,0} multiply(%param.74, %broadcast.3920)
  %add.4310 = bf16[1,4096,14336]{2,1,0} add(%div.3033, %mul.13128)
  %mul.13129 = bf16[1,4096,14336]{2,1,0} multiply(%mul.9929, %add.4310)
  %add.4311 = bf16[1,4096,14336]{2,1,0} add(%param.74, %mul.13129)
  %div.3034 = bf16[1,4096,14336]{2,1,0} divide(%sharding_constraint.2553, %div.1450)
  %select_n.992 = bf16[1,4096,14336]{2,1,0} select(%select_n.706, %sharding_constraint.2553, %div.3034)
  %mul.13131 = bf16[1,4096,14336]{2,1,0} multiply(%select_n.992, %broadcast.3920)
  %param.897 = bf16[1,4096,14336]{2,1,0} parameter(608), sharding={devices=[8,1,1]<=[8]}
  %mul.13132 = bf16[1,4096,14336]{2,1,0} multiply(%param.897, %broadcast.3921)
  %add.4312 = bf16[1,4096,14336]{2,1,0} add(%mul.13131, %mul.13132)
  %integer_pow.283 = bf16[1,4096,14336]{2,1,0} multiply(%select_n.992, %select_n.992)
  %mul.13139 = bf16[1,4096,14336]{2,1,0} multiply(%integer_pow.283, %broadcast.3922)
  %param.898 = bf16[1,4096,14336]{2,1,0} parameter(931), sharding={devices=[8,1,1]<=[8]}
  %mul.13140 = bf16[1,4096,14336]{2,1,0} multiply(%param.898, %broadcast.3923)
  %add.4313 = bf16[1,4096,14336]{2,1,0} add(%mul.13139, %mul.13140)
  %div.3037 = bf16[1,4096,14336]{2,1,0} divide(%add.4313, %div.1455)
  %sqrt.284 = bf16[1,4096,14336]{2,1,0} sqrt(%div.3037)
  %add.4314 = bf16[1,4096,14336]{2,1,0} add(%sqrt.284, %broadcast.3924)
  %multiply.2795 = bf16[1,4096,14336]{2,1,0} multiply(%div.1454, %add.4314)
  %div.3039 = bf16[1,4096,14336]{2,1,0} divide(%add.4312, %multiply.2795)
  %mul.13141 = bf16[1,4096,14336]{2,1,0} multiply(%param.75, %broadcast.3920)
  %add.4315 = bf16[1,4096,14336]{2,1,0} add(%div.3039, %mul.13141)
  %mul.13142 = bf16[1,4096,14336]{2,1,0} multiply(%mul.9929, %add.4315)
  %add.4316 = bf16[1,4096,14336]{2,1,0} add(%param.75, %mul.13142)
  %div.3040 = bf16[1,14336,4096]{2,1,0} divide(%sharding_constraint.2554, %div.1463)
  %select_n.993 = bf16[1,14336,4096]{2,1,0} select(%select_n.709, %sharding_constraint.2554, %div.3040)
  %mul.13144 = bf16[1,14336,4096]{2,1,0} multiply(%select_n.993, %broadcast.3925)
  %param.899 = bf16[1,14336,4096]{2,1,0} parameter(609), sharding={devices=[8,1,1]<=[8]}
  %mul.13145 = bf16[1,14336,4096]{2,1,0} multiply(%param.899, %broadcast.3926)
  %add.4317 = bf16[1,14336,4096]{2,1,0} add(%mul.13144, %mul.13145)
  %integer_pow.284 = bf16[1,14336,4096]{2,1,0} multiply(%select_n.993, %select_n.993)
  %mul.13146 = bf16[1,14336,4096]{2,1,0} multiply(%integer_pow.284, %broadcast.3927)
  %param.900 = bf16[1,14336,4096]{2,1,0} parameter(932), sharding={devices=[8,1,1]<=[8]}
  %mul.13147 = bf16[1,14336,4096]{2,1,0} multiply(%param.900, %broadcast.3928)
  %add.4319 = bf16[1,14336,4096]{2,1,0} add(%mul.13146, %mul.13147)
  %div.3046 = bf16[1,14336,4096]{2,1,0} divide(%add.4319, %div.1466)
  %sqrt.285 = bf16[1,14336,4096]{2,1,0} sqrt(%div.3046)
  %add.4320 = bf16[1,14336,4096]{2,1,0} add(%sqrt.285, %broadcast.3929)
  %multiply.2796 = bf16[1,14336,4096]{2,1,0} multiply(%div.1465, %add.4320)
  %div.3047 = bf16[1,14336,4096]{2,1,0} divide(%add.4317, %multiply.2796)
  %mul.13148 = bf16[1,14336,4096]{2,1,0} multiply(%param.76, %broadcast.3925)
  %add.4321 = bf16[1,14336,4096]{2,1,0} add(%div.3047, %mul.13148)
  %mul.13149 = bf16[1,14336,4096]{2,1,0} multiply(%mul.9949, %add.4321)
  %add.4322 = bf16[1,14336,4096]{2,1,0} add(%param.76, %mul.13149)
  %div.3048 = bf16[4096]{0} divide(%all-reduce.427, %div.1436)
  %select_n.994 = bf16[4096]{0} select(%select_n.701, %all-reduce.427, %div.3048)
  %mul.13151 = bf16[4096]{0} multiply(%select_n.994, %broadcast.3910)
  %param.901 = bf16[4096]{0} parameter(610), sharding={replicated}
  %mul.13152 = bf16[4096]{0} multiply(%param.901, %broadcast.3911)
  %add.4323 = bf16[4096]{0} add(%mul.13151, %mul.13152)
  %integer_pow.285 = bf16[4096]{0} multiply(%select_n.994, %select_n.994)
  %mul.13153 = bf16[4096]{0} multiply(%integer_pow.285, %broadcast.3912)
  %param.902 = bf16[4096]{0} parameter(933), sharding={replicated}
  %mul.13154 = bf16[4096]{0} multiply(%param.902, %broadcast.3913)
  %add.4324 = bf16[4096]{0} add(%mul.13153, %mul.13154)
  %div.3051 = bf16[4096]{0} divide(%add.4324, %div.1439)
  %sqrt.286 = bf16[4096]{0} sqrt(%div.3051)
  %add.4325 = bf16[4096]{0} add(%sqrt.286, %broadcast.3914)
  %multiply.2797 = bf16[4096]{0} multiply(%div.1438, %add.4325)
  %div.3052 = bf16[4096]{0} divide(%add.4323, %multiply.2797)
  %mul.13158 = bf16[4096]{0} multiply(%param.72, %broadcast.3910)
  %add.4326 = bf16[4096]{0} add(%div.3052, %mul.13158)
  %mul.13162 = bf16[4096]{0} multiply(%mul.2424, %add.4326)
  %add.4327 = bf16[4096]{0} add(%param.72, %mul.13162)
  %div.3053 = bf16[4096]{0} divide(%all-reduce.428, %div.1436)
  %select_n.995 = bf16[4096]{0} select(%select_n.701, %all-reduce.428, %div.3053)
  %mul.13170 = bf16[4096]{0} multiply(%select_n.995, %broadcast.3910)
  %param.903 = bf16[4096]{0} parameter(611), sharding={replicated}
  %mul.13171 = bf16[4096]{0} multiply(%param.903, %broadcast.3911)
  %add.4328 = bf16[4096]{0} add(%mul.13170, %mul.13171)
  %integer_pow.286 = bf16[4096]{0} multiply(%select_n.995, %select_n.995)
  %mul.13172 = bf16[4096]{0} multiply(%integer_pow.286, %broadcast.3912)
  %param.904 = bf16[4096]{0} parameter(934), sharding={replicated}
  %mul.13174 = bf16[4096]{0} multiply(%param.904, %broadcast.3913)
  %add.4329 = bf16[4096]{0} add(%mul.13172, %mul.13174)
  %div.3056 = bf16[4096]{0} divide(%add.4329, %div.1439)
  %sqrt.287 = bf16[4096]{0} sqrt(%div.3056)
  %add.4330 = bf16[4096]{0} add(%sqrt.287, %broadcast.3914)
  %multiply.2798 = bf16[4096]{0} multiply(%div.1438, %add.4330)
  %div.3057 = bf16[4096]{0} divide(%add.4328, %multiply.2798)
  %mul.13175 = bf16[4096]{0} multiply(%param.67, %broadcast.3910)
  %add.4331 = bf16[4096]{0} add(%div.3057, %mul.13175)
  %mul.13176 = bf16[4096]{0} multiply(%mul.2424, %add.4331)
  %add.4332 = bf16[4096]{0} add(%param.67, %mul.13176)
  %div.3058 = bf16[512,8,128]{0,2,1} divide(%transpose.437, %div.1479)
  %select_n.996 = bf16[512,8,128]{2,1,0} select(%select_n.713, %transpose.437, %div.3058)
  %mul.13196 = bf16[512,8,128]{2,1,0} multiply(%select_n.996, %broadcast.3930)
  %param.905 = bf16[512,8,128]{2,1,0} parameter(612), sharding={devices=[8,1,1]<=[8]}
  %mul.13197 = bf16[512,8,128]{2,1,0} multiply(%param.905, %broadcast.3931)
  %add.4333 = bf16[512,8,128]{2,1,0} add(%mul.13196, %mul.13197)
  %integer_pow.287 = bf16[512,8,128]{2,1,0} multiply(%select_n.996, %select_n.996)
  %mul.13200 = bf16[512,8,128]{2,1,0} multiply(%integer_pow.287, %broadcast.3932)
  %param.906 = bf16[512,8,128]{2,1,0} parameter(935), sharding={devices=[8,1,1]<=[8]}
  %mul.13205 = bf16[512,8,128]{2,1,0} multiply(%param.906, %broadcast.3933)
  %add.4334 = bf16[512,8,128]{2,1,0} add(%mul.13200, %mul.13205)
  %div.3061 = bf16[512,8,128]{2,1,0} divide(%add.4334, %div.1482)
  %sqrt.288 = bf16[512,8,128]{2,1,0} sqrt(%div.3061)
  %add.4335 = bf16[512,8,128]{2,1,0} add(%sqrt.288, %broadcast.3934)
  %multiply.2799 = bf16[512,8,128]{2,1,0} multiply(%div.1481, %add.4335)
  %div.3062 = bf16[512,8,128]{2,1,0} divide(%add.4333, %multiply.2799)
  %mul.13206 = bf16[512,8,128]{2,1,0} multiply(%param.69, %broadcast.3930)
  %add.4336 = bf16[512,8,128]{2,1,0} add(%div.3062, %mul.13206)
  %mul.13207 = bf16[512,8,128]{2,1,0} multiply(%mul.9984, %add.4336)
  %add.4337 = bf16[512,8,128]{2,1,0} add(%param.69, %mul.13207)
  %div.3063 = bf16[32,128,512]{1,0,2} divide(%transpose.438, %div.1485)
  %select_n.997 = bf16[32,128,512]{2,1,0} select(%select_n.715, %transpose.438, %div.3063)
  %mul.13209 = bf16[32,128,512]{2,1,0} multiply(%select_n.997, %broadcast.3935)
  %param.907 = bf16[32,128,512]{2,1,0} parameter(613), sharding={devices=[1,1,8]<=[8]}
  %mul.13210 = bf16[32,128,512]{2,1,0} multiply(%param.907, %broadcast.3936)
  %add.4338 = bf16[32,128,512]{2,1,0} add(%mul.13209, %mul.13210)
  %integer_pow.288 = bf16[32,128,512]{2,1,0} multiply(%select_n.997, %select_n.997)
  %mul.13211 = bf16[32,128,512]{2,1,0} multiply(%integer_pow.288, %broadcast.3937)
  %param.908 = bf16[32,128,512]{2,1,0} parameter(936), sharding={devices=[1,1,8]<=[8]}
  %mul.13218 = bf16[32,128,512]{2,1,0} multiply(%param.908, %broadcast.3938)
  %add.4339 = bf16[32,128,512]{2,1,0} add(%mul.13211, %mul.13218)
  %div.3066 = bf16[32,128,512]{2,1,0} divide(%add.4339, %div.1488)
  %sqrt.289 = bf16[32,128,512]{2,1,0} sqrt(%div.3066)
  %add.4340 = bf16[32,128,512]{2,1,0} add(%sqrt.289, %broadcast.3939)
  %multiply.2800 = bf16[32,128,512]{2,1,0} multiply(%div.1487, %add.4340)
  %div.3067 = bf16[32,128,512]{2,1,0} divide(%add.4338, %multiply.2800)
  %mul.13219 = bf16[32,128,512]{2,1,0} multiply(%param.71, %broadcast.3935)
  %add.4341 = bf16[32,128,512]{2,1,0} add(%div.3067, %mul.13219)
  %mul.13220 = bf16[32,128,512]{2,1,0} multiply(%mul.9994, %add.4341)
  %add.4342 = bf16[32,128,512]{2,1,0} add(%param.71, %mul.13220)
  %div.3069 = bf16[512,32,128]{0,2,1} divide(%transpose.439, %div.1491)
  %select_n.998 = bf16[512,32,128]{2,1,0} select(%select_n.717, %transpose.439, %div.3069)
  %mul.13222 = bf16[512,32,128]{2,1,0} multiply(%select_n.998, %broadcast.3940)
  %param.909 = bf16[512,32,128]{2,1,0} parameter(614), sharding={devices=[8,1,1]<=[8]}
  %mul.13223 = bf16[512,32,128]{2,1,0} multiply(%param.909, %broadcast.3941)
  %add.4343 = bf16[512,32,128]{2,1,0} add(%mul.13222, %mul.13223)
  %integer_pow.289 = bf16[512,32,128]{2,1,0} multiply(%select_n.998, %select_n.998)
  %mul.13224 = bf16[512,32,128]{2,1,0} multiply(%integer_pow.289, %broadcast.3942)
  %param.910 = bf16[512,32,128]{2,1,0} parameter(937), sharding={devices=[8,1,1]<=[8]}
  %mul.13225 = bf16[512,32,128]{2,1,0} multiply(%param.910, %broadcast.3943)
  %add.4344 = bf16[512,32,128]{2,1,0} add(%mul.13224, %mul.13225)
  %div.3080 = bf16[512,32,128]{2,1,0} divide(%add.4344, %div.1494)
  %sqrt.290 = bf16[512,32,128]{2,1,0} sqrt(%div.3080)
  %add.4345 = bf16[512,32,128]{2,1,0} add(%sqrt.290, %broadcast.3944)
  %multiply.2801 = bf16[512,32,128]{2,1,0} multiply(%div.1493, %add.4345)
  %div.3081 = bf16[512,32,128]{2,1,0} divide(%add.4343, %multiply.2801)
  %mul.13226 = bf16[512,32,128]{2,1,0} multiply(%param.68, %broadcast.3940)
  %add.4346 = bf16[512,32,128]{2,1,0} add(%div.3081, %mul.13226)
  %mul.13227 = bf16[512,32,128]{2,1,0} multiply(%mul.10010, %add.4346)
  %add.4347 = bf16[512,32,128]{2,1,0} add(%param.68, %mul.13227)
  %div.3082 = bf16[512,8,128]{0,2,1} divide(%transpose.440, %div.1479)
  %select_n.999 = bf16[512,8,128]{2,1,0} select(%select_n.713, %transpose.440, %div.3082)
  %mul.13231 = bf16[512,8,128]{2,1,0} multiply(%select_n.999, %broadcast.3930)
  %param.911 = bf16[512,8,128]{2,1,0} parameter(615), sharding={devices=[8,1,1]<=[8]}
  %mul.13232 = bf16[512,8,128]{2,1,0} multiply(%param.911, %broadcast.3931)
  %add.4348 = bf16[512,8,128]{2,1,0} add(%mul.13231, %mul.13232)
  %integer_pow.290 = bf16[512,8,128]{2,1,0} multiply(%select_n.999, %select_n.999)
  %mul.13233 = bf16[512,8,128]{2,1,0} multiply(%integer_pow.290, %broadcast.3932)
  %param.912 = bf16[512,8,128]{2,1,0} parameter(938), sharding={devices=[8,1,1]<=[8]}
  %mul.13234 = bf16[512,8,128]{2,1,0} multiply(%param.912, %broadcast.3933)
  %add.4349 = bf16[512,8,128]{2,1,0} add(%mul.13233, %mul.13234)
  %div.3085 = bf16[512,8,128]{2,1,0} divide(%add.4349, %div.1482)
  %sqrt.291 = bf16[512,8,128]{2,1,0} sqrt(%div.3085)
  %add.4350 = bf16[512,8,128]{2,1,0} add(%sqrt.291, %broadcast.3934)
  %multiply.2802 = bf16[512,8,128]{2,1,0} multiply(%div.1481, %add.4350)
  %div.3086 = bf16[512,8,128]{2,1,0} divide(%add.4348, %multiply.2802)
  %mul.13235 = bf16[512,8,128]{2,1,0} multiply(%param.70, %broadcast.3930)
  %add.4351 = bf16[512,8,128]{2,1,0} add(%div.3086, %mul.13235)
  %mul.13236 = bf16[512,8,128]{2,1,0} multiply(%mul.9984, %add.4351)
  %add.4352 = bf16[512,8,128]{2,1,0} add(%param.70, %mul.13236)
  %div.3087 = bf16[512,8]{1,0} divide(%dynamic-slice.2471, %div.1442)
  %select_n.1000 = bf16[512,8]{1,0} select(%select_n.704, %dynamic-slice.2471, %div.3087)
  %mul.13238 = bf16[512,8]{1,0} multiply(%select_n.1000, %broadcast.3915)
  %param.913 = bf16[512,8]{1,0} parameter(616), sharding={devices=[8,1]<=[8]}
  %mul.13239 = bf16[512,8]{1,0} multiply(%param.913, %broadcast.3916)
  %add.4353 = bf16[512,8]{1,0} add(%mul.13238, %mul.13239)
  %integer_pow.291 = bf16[512,8]{1,0} multiply(%select_n.1000, %select_n.1000)
  %mul.13240 = bf16[512,8]{1,0} multiply(%integer_pow.291, %broadcast.3917)
  %param.914 = bf16[512,8]{1,0} parameter(939), sharding={devices=[8,1]<=[8]}
  %mul.13241 = bf16[512,8]{1,0} multiply(%param.914, %broadcast.3918)
  %add.4354 = bf16[512,8]{1,0} add(%mul.13240, %mul.13241)
  %div.3090 = bf16[512,8]{1,0} divide(%add.4354, %div.1446)
  %sqrt.292 = bf16[512,8]{1,0} sqrt(%div.3090)
  %add.4355 = bf16[512,8]{1,0} add(%sqrt.292, %broadcast.3919)
  %multiply.2803 = bf16[512,8]{1,0} multiply(%div.1444, %add.4355)
  %div.3091 = bf16[512,8]{1,0} divide(%add.4353, %multiply.2803)
  %mul.13242 = bf16[512,8]{1,0} multiply(%param.83, %broadcast.3915)
  %add.4356 = bf16[512,8]{1,0} add(%div.3091, %mul.13242)
  %mul.13243 = bf16[512,8]{1,0} multiply(%mul.9922, %add.4356)
  %add.4357 = bf16[512,8]{1,0} add(%param.83, %mul.13243)
  %div.3092 = bf16[1,4096,14336]{2,1,0} divide(%sharding_constraint.2555, %div.1450)
  %select_n.1001 = bf16[1,4096,14336]{2,1,0} select(%select_n.706, %sharding_constraint.2555, %div.3092)
  %mul.13245 = bf16[1,4096,14336]{2,1,0} multiply(%select_n.1001, %broadcast.3920)
  %param.915 = bf16[1,4096,14336]{2,1,0} parameter(617), sharding={devices=[8,1,1]<=[8]}
  %mul.13246 = bf16[1,4096,14336]{2,1,0} multiply(%param.915, %broadcast.3921)
  %add.4359 = bf16[1,4096,14336]{2,1,0} add(%mul.13245, %mul.13246)
  %integer_pow.292 = bf16[1,4096,14336]{2,1,0} multiply(%select_n.1001, %select_n.1001)
  %mul.13247 = bf16[1,4096,14336]{2,1,0} multiply(%integer_pow.292, %broadcast.3922)
  %param.916 = bf16[1,4096,14336]{2,1,0} parameter(940), sharding={devices=[8,1,1]<=[8]}
  %mul.13248 = bf16[1,4096,14336]{2,1,0} multiply(%param.916, %broadcast.3923)
  %add.4360 = bf16[1,4096,14336]{2,1,0} add(%mul.13247, %mul.13248)
  %div.3095 = bf16[1,4096,14336]{2,1,0} divide(%add.4360, %div.1455)
  %sqrt.293 = bf16[1,4096,14336]{2,1,0} sqrt(%div.3095)
  %add.4361 = bf16[1,4096,14336]{2,1,0} add(%sqrt.293, %broadcast.3924)
  %multiply.2804 = bf16[1,4096,14336]{2,1,0} multiply(%div.1454, %add.4361)
  %div.3096 = bf16[1,4096,14336]{2,1,0} divide(%add.4359, %multiply.2804)
  %mul.13250 = bf16[1,4096,14336]{2,1,0} multiply(%param.84, %broadcast.3920)
  %add.4362 = bf16[1,4096,14336]{2,1,0} add(%div.3096, %mul.13250)
  %mul.13251 = bf16[1,4096,14336]{2,1,0} multiply(%mul.9929, %add.4362)
  %add.4363 = bf16[1,4096,14336]{2,1,0} add(%param.84, %mul.13251)
  %div.3097 = bf16[1,4096,14336]{2,1,0} divide(%sharding_constraint.2556, %div.1450)
  %select_n.1002 = bf16[1,4096,14336]{2,1,0} select(%select_n.706, %sharding_constraint.2556, %div.3097)
  %mul.13253 = bf16[1,4096,14336]{2,1,0} multiply(%select_n.1002, %broadcast.3920)
  %param.917 = bf16[1,4096,14336]{2,1,0} parameter(618), sharding={devices=[8,1,1]<=[8]}
  %mul.13254 = bf16[1,4096,14336]{2,1,0} multiply(%param.917, %broadcast.3921)
  %add.4364 = bf16[1,4096,14336]{2,1,0} add(%mul.13253, %mul.13254)
  %integer_pow.293 = bf16[1,4096,14336]{2,1,0} multiply(%select_n.1002, %select_n.1002)
  %mul.13255 = bf16[1,4096,14336]{2,1,0} multiply(%integer_pow.293, %broadcast.3922)
  %param.918 = bf16[1,4096,14336]{2,1,0} parameter(941), sharding={devices=[8,1,1]<=[8]}
  %mul.13259 = bf16[1,4096,14336]{2,1,0} multiply(%param.918, %broadcast.3923)
  %add.4365 = bf16[1,4096,14336]{2,1,0} add(%mul.13255, %mul.13259)
  %div.3100 = bf16[1,4096,14336]{2,1,0} divide(%add.4365, %div.1455)
  %sqrt.294 = bf16[1,4096,14336]{2,1,0} sqrt(%div.3100)
  %add.4366 = bf16[1,4096,14336]{2,1,0} add(%sqrt.294, %broadcast.3924)
  %multiply.2805 = bf16[1,4096,14336]{2,1,0} multiply(%div.1454, %add.4366)
  %div.3101 = bf16[1,4096,14336]{2,1,0} divide(%add.4364, %multiply.2805)
  %mul.13262 = bf16[1,4096,14336]{2,1,0} multiply(%param.85, %broadcast.3920)
  %add.4367 = bf16[1,4096,14336]{2,1,0} add(%div.3101, %mul.13262)
  %mul.13263 = bf16[1,4096,14336]{2,1,0} multiply(%mul.9929, %add.4367)
  %add.4368 = bf16[1,4096,14336]{2,1,0} add(%param.85, %mul.13263)
  %div.3102 = bf16[1,14336,4096]{2,1,0} divide(%sharding_constraint.2558, %div.1463)
  %select_n.1003 = bf16[1,14336,4096]{2,1,0} select(%select_n.709, %sharding_constraint.2558, %div.3102)
  %mul.13265 = bf16[1,14336,4096]{2,1,0} multiply(%select_n.1003, %broadcast.3925)
  %param.919 = bf16[1,14336,4096]{2,1,0} parameter(619), sharding={devices=[8,1,1]<=[8]}
  %mul.13266 = bf16[1,14336,4096]{2,1,0} multiply(%param.919, %broadcast.3926)
  %add.4369 = bf16[1,14336,4096]{2,1,0} add(%mul.13265, %mul.13266)
  %integer_pow.294 = bf16[1,14336,4096]{2,1,0} multiply(%select_n.1003, %select_n.1003)
  %mul.13267 = bf16[1,14336,4096]{2,1,0} multiply(%integer_pow.294, %broadcast.3927)
  %param.920 = bf16[1,14336,4096]{2,1,0} parameter(942), sharding={devices=[8,1,1]<=[8]}
  %mul.13268 = bf16[1,14336,4096]{2,1,0} multiply(%param.920, %broadcast.3928)
  %add.4371 = bf16[1,14336,4096]{2,1,0} add(%mul.13267, %mul.13268)
  %div.3105 = bf16[1,14336,4096]{2,1,0} divide(%add.4371, %div.1466)
  %sqrt.295 = bf16[1,14336,4096]{2,1,0} sqrt(%div.3105)
  %add.4372 = bf16[1,14336,4096]{2,1,0} add(%sqrt.295, %broadcast.3929)
  %multiply.2806 = bf16[1,14336,4096]{2,1,0} multiply(%div.1465, %add.4372)
  %div.3106 = bf16[1,14336,4096]{2,1,0} divide(%add.4369, %multiply.2806)
  %mul.13270 = bf16[1,14336,4096]{2,1,0} multiply(%param.86, %broadcast.3925)
  %add.4373 = bf16[1,14336,4096]{2,1,0} add(%div.3106, %mul.13270)
  %mul.13271 = bf16[1,14336,4096]{2,1,0} multiply(%mul.9949, %add.4373)
  %add.4374 = bf16[1,14336,4096]{2,1,0} add(%param.86, %mul.13271)
  %div.3107 = bf16[4096]{0} divide(%all-reduce.442, %div.1436)
  %select_n.1004 = bf16[4096]{0} select(%select_n.701, %all-reduce.442, %div.3107)
  %mul.13273 = bf16[4096]{0} multiply(%select_n.1004, %broadcast.3910)
  %param.921 = bf16[4096]{0} parameter(620), sharding={replicated}
  %mul.13274 = bf16[4096]{0} multiply(%param.921, %broadcast.3911)
  %add.4375 = bf16[4096]{0} add(%mul.13273, %mul.13274)
  %integer_pow.295 = bf16[4096]{0} multiply(%select_n.1004, %select_n.1004)
  %mul.13275 = bf16[4096]{0} multiply(%integer_pow.295, %broadcast.3912)
  %param.922 = bf16[4096]{0} parameter(943), sharding={replicated}
  %mul.13276 = bf16[4096]{0} multiply(%param.922, %broadcast.3913)
  %add.4376 = bf16[4096]{0} add(%mul.13275, %mul.13276)
  %div.3111 = bf16[4096]{0} divide(%add.4376, %div.1439)
  %sqrt.296 = bf16[4096]{0} sqrt(%div.3111)
  %add.4377 = bf16[4096]{0} add(%sqrt.296, %broadcast.3914)
  %multiply.2807 = bf16[4096]{0} multiply(%div.1438, %add.4377)
  %div.3119 = bf16[4096]{0} divide(%add.4375, %multiply.2807)
  %mul.13282 = bf16[4096]{0} multiply(%param.82, %broadcast.3910)
  %add.4378 = bf16[4096]{0} add(%div.3119, %mul.13282)
  %mul.13286 = bf16[4096]{0} multiply(%mul.2424, %add.4378)
  %add.4379 = bf16[4096]{0} add(%param.82, %mul.13286)
  %div.3120 = bf16[4096]{0} divide(%all-reduce.443, %div.1436)
  %select_n.1005 = bf16[4096]{0} select(%select_n.701, %all-reduce.443, %div.3120)
  %mul.13294 = bf16[4096]{0} multiply(%select_n.1005, %broadcast.3910)
  %param.923 = bf16[4096]{0} parameter(621), sharding={replicated}
  %mul.13295 = bf16[4096]{0} multiply(%param.923, %broadcast.3911)
  %add.4380 = bf16[4096]{0} add(%mul.13294, %mul.13295)
  %integer_pow.296 = bf16[4096]{0} multiply(%select_n.1005, %select_n.1005)
  %mul.13296 = bf16[4096]{0} multiply(%integer_pow.296, %broadcast.3912)
  %param.924 = bf16[4096]{0} parameter(944), sharding={replicated}
  %mul.13297 = bf16[4096]{0} multiply(%param.924, %broadcast.3913)
  %add.4382 = bf16[4096]{0} add(%mul.13296, %mul.13297)
  %div.3123 = bf16[4096]{0} divide(%add.4382, %div.1439)
  %sqrt.297 = bf16[4096]{0} sqrt(%div.3123)
  %add.4383 = bf16[4096]{0} add(%sqrt.297, %broadcast.3914)
  %multiply.2808 = bf16[4096]{0} multiply(%div.1438, %add.4383)
  %div.3124 = bf16[4096]{0} divide(%add.4380, %multiply.2808)
  %mul.13298 = bf16[4096]{0} multiply(%param.77, %broadcast.3910)
  %add.4384 = bf16[4096]{0} add(%div.3124, %mul.13298)
  %mul.13299 = bf16[4096]{0} multiply(%mul.2424, %add.4384)
  %add.4385 = bf16[4096]{0} add(%param.77, %mul.13299)
  %div.3125 = bf16[512,8,128]{0,2,1} divide(%transpose.441, %div.1479)
  %select_n.1007 = bf16[512,8,128]{2,1,0} select(%select_n.713, %transpose.441, %div.3125)
  %mul.13303 = bf16[512,8,128]{2,1,0} multiply(%select_n.1007, %broadcast.3930)
  %param.925 = bf16[512,8,128]{2,1,0} parameter(622), sharding={devices=[8,1,1]<=[8]}
  %mul.13304 = bf16[512,8,128]{2,1,0} multiply(%param.925, %broadcast.3931)
  %add.4386 = bf16[512,8,128]{2,1,0} add(%mul.13303, %mul.13304)
  %integer_pow.297 = bf16[512,8,128]{2,1,0} multiply(%select_n.1007, %select_n.1007)
  %mul.13305 = bf16[512,8,128]{2,1,0} multiply(%integer_pow.297, %broadcast.3932)
  %param.926 = bf16[512,8,128]{2,1,0} parameter(945), sharding={devices=[8,1,1]<=[8]}
  %mul.13306 = bf16[512,8,128]{2,1,0} multiply(%param.926, %broadcast.3933)
  %add.4387 = bf16[512,8,128]{2,1,0} add(%mul.13305, %mul.13306)
  %div.3128 = bf16[512,8,128]{2,1,0} divide(%add.4387, %div.1482)
  %sqrt.298 = bf16[512,8,128]{2,1,0} sqrt(%div.3128)
  %add.4388 = bf16[512,8,128]{2,1,0} add(%sqrt.298, %broadcast.3934)
  %multiply.2809 = bf16[512,8,128]{2,1,0} multiply(%div.1481, %add.4388)
  %div.3129 = bf16[512,8,128]{2,1,0} divide(%add.4386, %multiply.2809)
  %mul.13307 = bf16[512,8,128]{2,1,0} multiply(%param.79, %broadcast.3930)
  %add.4389 = bf16[512,8,128]{2,1,0} add(%div.3129, %mul.13307)
  %mul.13308 = bf16[512,8,128]{2,1,0} multiply(%mul.9984, %add.4389)
  %add.4390 = bf16[512,8,128]{2,1,0} add(%param.79, %mul.13308)
  %div.3130 = bf16[32,128,512]{1,0,2} divide(%transpose.442, %div.1485)
  %select_n.1008 = bf16[32,128,512]{2,1,0} select(%select_n.715, %transpose.442, %div.3130)
  %mul.13314 = bf16[32,128,512]{2,1,0} multiply(%select_n.1008, %broadcast.3935)
  %param.927 = bf16[32,128,512]{2,1,0} parameter(623), sharding={devices=[1,1,8]<=[8]}
  %mul.13315 = bf16[32,128,512]{2,1,0} multiply(%param.927, %broadcast.3936)
  %add.4391 = bf16[32,128,512]{2,1,0} add(%mul.13314, %mul.13315)
  %integer_pow.298 = bf16[32,128,512]{2,1,0} multiply(%select_n.1008, %select_n.1008)
  %mul.13319 = bf16[32,128,512]{2,1,0} multiply(%integer_pow.298, %broadcast.3937)
  %param.928 = bf16[32,128,512]{2,1,0} parameter(946), sharding={devices=[1,1,8]<=[8]}
  %mul.13326 = bf16[32,128,512]{2,1,0} multiply(%param.928, %broadcast.3938)
  %add.4392 = bf16[32,128,512]{2,1,0} add(%mul.13319, %mul.13326)
  %div.3133 = bf16[32,128,512]{2,1,0} divide(%add.4392, %div.1488)
  %sqrt.299 = bf16[32,128,512]{2,1,0} sqrt(%div.3133)
  %add.4393 = bf16[32,128,512]{2,1,0} add(%sqrt.299, %broadcast.3939)
  %multiply.2810 = bf16[32,128,512]{2,1,0} multiply(%div.1487, %add.4393)
  %div.3134 = bf16[32,128,512]{2,1,0} divide(%add.4391, %multiply.2810)
  %mul.13327 = bf16[32,128,512]{2,1,0} multiply(%param.81, %broadcast.3935)
  %add.4394 = bf16[32,128,512]{2,1,0} add(%div.3134, %mul.13327)
  %mul.13328 = bf16[32,128,512]{2,1,0} multiply(%mul.9994, %add.4394)
  %add.4395 = bf16[32,128,512]{2,1,0} add(%param.81, %mul.13328)
  %div.3135 = bf16[512,32,128]{0,2,1} divide(%transpose.443, %div.1491)
  %select_n.1009 = bf16[512,32,128]{2,1,0} select(%select_n.717, %transpose.443, %div.3135)
  %mul.13331 = bf16[512,32,128]{2,1,0} multiply(%select_n.1009, %broadcast.3940)
  %param.929 = bf16[512,32,128]{2,1,0} parameter(624), sharding={devices=[8,1,1]<=[8]}
  %mul.13332 = bf16[512,32,128]{2,1,0} multiply(%param.929, %broadcast.3941)
  %add.4396 = bf16[512,32,128]{2,1,0} add(%mul.13331, %mul.13332)
  %integer_pow.299 = bf16[512,32,128]{2,1,0} multiply(%select_n.1009, %select_n.1009)
  %mul.13333 = bf16[512,32,128]{2,1,0} multiply(%integer_pow.299, %broadcast.3942)
  %param.930 = bf16[512,32,128]{2,1,0} parameter(947), sharding={devices=[8,1,1]<=[8]}
  %mul.13334 = bf16[512,32,128]{2,1,0} multiply(%param.930, %broadcast.3943)
  %add.4397 = bf16[512,32,128]{2,1,0} add(%mul.13333, %mul.13334)
  %div.3138 = bf16[512,32,128]{2,1,0} divide(%add.4397, %div.1494)
  %sqrt.300 = bf16[512,32,128]{2,1,0} sqrt(%div.3138)
  %add.4398 = bf16[512,32,128]{2,1,0} add(%sqrt.300, %broadcast.3944)
  %multiply.2811 = bf16[512,32,128]{2,1,0} multiply(%div.1493, %add.4398)
  %div.3139 = bf16[512,32,128]{2,1,0} divide(%add.4396, %multiply.2811)
  %mul.13335 = bf16[512,32,128]{2,1,0} multiply(%param.78, %broadcast.3940)
  %add.4399 = bf16[512,32,128]{2,1,0} add(%div.3139, %mul.13335)
  %mul.13336 = bf16[512,32,128]{2,1,0} multiply(%mul.10010, %add.4399)
  %add.4400 = bf16[512,32,128]{2,1,0} add(%param.78, %mul.13336)
  %div.3140 = bf16[512,8,128]{0,2,1} divide(%transpose.444, %div.1479)
  %select_n.1010 = bf16[512,8,128]{2,1,0} select(%select_n.713, %transpose.444, %div.3140)
  %mul.13343 = bf16[512,8,128]{2,1,0} multiply(%select_n.1010, %broadcast.3930)
  %param.931 = bf16[512,8,128]{2,1,0} parameter(625), sharding={devices=[8,1,1]<=[8]}
  %mul.13344 = bf16[512,8,128]{2,1,0} multiply(%param.931, %broadcast.3931)
  %add.4401 = bf16[512,8,128]{2,1,0} add(%mul.13343, %mul.13344)
  %integer_pow.300 = bf16[512,8,128]{2,1,0} multiply(%select_n.1010, %select_n.1010)
  %mul.13345 = bf16[512,8,128]{2,1,0} multiply(%integer_pow.300, %broadcast.3932)
  %param.932 = bf16[512,8,128]{2,1,0} parameter(948), sharding={devices=[8,1,1]<=[8]}
  %mul.13346 = bf16[512,8,128]{2,1,0} multiply(%param.932, %broadcast.3933)
  %add.4402 = bf16[512,8,128]{2,1,0} add(%mul.13345, %mul.13346)
  %div.3143 = bf16[512,8,128]{2,1,0} divide(%add.4402, %div.1482)
  %sqrt.301 = bf16[512,8,128]{2,1,0} sqrt(%div.3143)
  %add.4403 = bf16[512,8,128]{2,1,0} add(%sqrt.301, %broadcast.3934)
  %multiply.2812 = bf16[512,8,128]{2,1,0} multiply(%div.1481, %add.4403)
  %div.3144 = bf16[512,8,128]{2,1,0} divide(%add.4401, %multiply.2812)
  %mul.13347 = bf16[512,8,128]{2,1,0} multiply(%param.80, %broadcast.3930)
  %add.4404 = bf16[512,8,128]{2,1,0} add(%div.3144, %mul.13347)
  %mul.13348 = bf16[512,8,128]{2,1,0} multiply(%mul.9984, %add.4404)
  %add.4405 = bf16[512,8,128]{2,1,0} add(%param.80, %mul.13348)
  %div.3145 = bf16[512,8]{1,0} divide(%dynamic-slice.2481, %div.1442)
  %select_n.1011 = bf16[512,8]{1,0} select(%select_n.704, %dynamic-slice.2481, %div.3145)
  %mul.13351 = bf16[512,8]{1,0} multiply(%select_n.1011, %broadcast.3915)
  %param.933 = bf16[512,8]{1,0} parameter(626), sharding={devices=[8,1]<=[8]}
  %mul.13352 = bf16[512,8]{1,0} multiply(%param.933, %broadcast.3916)
  %add.4406 = bf16[512,8]{1,0} add(%mul.13351, %mul.13352)
  %integer_pow.301 = bf16[512,8]{1,0} multiply(%select_n.1011, %select_n.1011)
  %mul.13353 = bf16[512,8]{1,0} multiply(%integer_pow.301, %broadcast.3917)
  %param.934 = bf16[512,8]{1,0} parameter(949), sharding={devices=[8,1]<=[8]}
  %mul.13354 = bf16[512,8]{1,0} multiply(%param.934, %broadcast.3918)
  %add.4407 = bf16[512,8]{1,0} add(%mul.13353, %mul.13354)
  %div.3148 = bf16[512,8]{1,0} divide(%add.4407, %div.1446)
  %sqrt.302 = bf16[512,8]{1,0} sqrt(%div.3148)
  %add.4408 = bf16[512,8]{1,0} add(%sqrt.302, %broadcast.3919)
  %multiply.2813 = bf16[512,8]{1,0} multiply(%div.1444, %add.4408)
  %div.3150 = bf16[512,8]{1,0} divide(%add.4406, %multiply.2813)
  %mul.13355 = bf16[512,8]{1,0} multiply(%param.93, %broadcast.3915)
  %add.4409 = bf16[512,8]{1,0} add(%div.3150, %mul.13355)
  %mul.13356 = bf16[512,8]{1,0} multiply(%mul.9922, %add.4409)
  %add.4410 = bf16[512,8]{1,0} add(%param.93, %mul.13356)
  %div.3151 = bf16[1,4096,14336]{2,1,0} divide(%sharding_constraint.2560, %div.1450)
  %select_n.1012 = bf16[1,4096,14336]{2,1,0} select(%select_n.706, %sharding_constraint.2560, %div.3151)
  %mul.13358 = bf16[1,4096,14336]{2,1,0} multiply(%select_n.1012, %broadcast.3920)
  %param.935 = bf16[1,4096,14336]{2,1,0} parameter(627), sharding={devices=[8,1,1]<=[8]}
  %mul.13359 = bf16[1,4096,14336]{2,1,0} multiply(%param.935, %broadcast.3921)
  %add.4411 = bf16[1,4096,14336]{2,1,0} add(%mul.13358, %mul.13359)
  %integer_pow.302 = bf16[1,4096,14336]{2,1,0} multiply(%select_n.1012, %select_n.1012)
  %mul.13360 = bf16[1,4096,14336]{2,1,0} multiply(%integer_pow.302, %broadcast.3922)
  %param.936 = bf16[1,4096,14336]{2,1,0} parameter(950), sharding={devices=[8,1,1]<=[8]}
  %mul.13361 = bf16[1,4096,14336]{2,1,0} multiply(%param.936, %broadcast.3923)
  %add.4413 = bf16[1,4096,14336]{2,1,0} add(%mul.13360, %mul.13361)
  %div.3154 = bf16[1,4096,14336]{2,1,0} divide(%add.4413, %div.1455)
  %sqrt.303 = bf16[1,4096,14336]{2,1,0} sqrt(%div.3154)
  %add.4414 = bf16[1,4096,14336]{2,1,0} add(%sqrt.303, %broadcast.3924)
  %multiply.2814 = bf16[1,4096,14336]{2,1,0} multiply(%div.1454, %add.4414)
  %div.3155 = bf16[1,4096,14336]{2,1,0} divide(%add.4411, %multiply.2814)
  %mul.13362 = bf16[1,4096,14336]{2,1,0} multiply(%param.94, %broadcast.3920)
  %add.4415 = bf16[1,4096,14336]{2,1,0} add(%div.3155, %mul.13362)
  %mul.13363 = bf16[1,4096,14336]{2,1,0} multiply(%mul.9929, %add.4415)
  %add.4416 = bf16[1,4096,14336]{2,1,0} add(%param.94, %mul.13363)
  %div.3156 = bf16[1,4096,14336]{2,1,0} divide(%sharding_constraint.2561, %div.1450)
  %select_n.1013 = bf16[1,4096,14336]{2,1,0} select(%select_n.706, %sharding_constraint.2561, %div.3156)
  %mul.13365 = bf16[1,4096,14336]{2,1,0} multiply(%select_n.1013, %broadcast.3920)
  %param.937 = bf16[1,4096,14336]{2,1,0} parameter(628), sharding={devices=[8,1,1]<=[8]}
  %mul.13366 = bf16[1,4096,14336]{2,1,0} multiply(%param.937, %broadcast.3921)
  %add.4417 = bf16[1,4096,14336]{2,1,0} add(%mul.13365, %mul.13366)
  %integer_pow.303 = bf16[1,4096,14336]{2,1,0} multiply(%select_n.1013, %select_n.1013)
  %mul.13367 = bf16[1,4096,14336]{2,1,0} multiply(%integer_pow.303, %broadcast.3922)
  %param.938 = bf16[1,4096,14336]{2,1,0} parameter(951), sharding={devices=[8,1,1]<=[8]}
  %mul.13376 = bf16[1,4096,14336]{2,1,0} multiply(%param.938, %broadcast.3923)
  %add.4418 = bf16[1,4096,14336]{2,1,0} add(%mul.13367, %mul.13376)
  %div.3159 = bf16[1,4096,14336]{2,1,0} divide(%add.4418, %div.1455)
  %sqrt.304 = bf16[1,4096,14336]{2,1,0} sqrt(%div.3159)
  %add.4420 = bf16[1,4096,14336]{2,1,0} add(%sqrt.304, %broadcast.3924)
  %multiply.2815 = bf16[1,4096,14336]{2,1,0} multiply(%div.1454, %add.4420)
  %div.3160 = bf16[1,4096,14336]{2,1,0} divide(%add.4417, %multiply.2815)
  %mul.13381 = bf16[1,4096,14336]{2,1,0} multiply(%param.95, %broadcast.3920)
  %add.4421 = bf16[1,4096,14336]{2,1,0} add(%div.3160, %mul.13381)
  %mul.13388 = bf16[1,4096,14336]{2,1,0} multiply(%mul.9929, %add.4421)
  %add.4423 = bf16[1,4096,14336]{2,1,0} add(%param.95, %mul.13388)
  %div.3161 = bf16[1,14336,4096]{2,1,0} divide(%sharding_constraint.2562, %div.1463)
  %select_n.1014 = bf16[1,14336,4096]{2,1,0} select(%select_n.709, %sharding_constraint.2562, %div.3161)
  %mul.13398 = bf16[1,14336,4096]{2,1,0} multiply(%select_n.1014, %broadcast.3925)
  %param.939 = bf16[1,14336,4096]{2,1,0} parameter(629), sharding={devices=[8,1,1]<=[8]}
  %mul.13403 = bf16[1,14336,4096]{2,1,0} multiply(%param.939, %broadcast.3926)
  %add.4424 = bf16[1,14336,4096]{2,1,0} add(%mul.13398, %mul.13403)
  %integer_pow.304 = bf16[1,14336,4096]{2,1,0} multiply(%select_n.1014, %select_n.1014)
  %mul.13408 = bf16[1,14336,4096]{2,1,0} multiply(%integer_pow.304, %broadcast.3927)
  %param.940 = bf16[1,14336,4096]{2,1,0} parameter(952), sharding={devices=[8,1,1]<=[8]}
  %mul.13409 = bf16[1,14336,4096]{2,1,0} multiply(%param.940, %broadcast.3928)
  %add.4425 = bf16[1,14336,4096]{2,1,0} add(%mul.13408, %mul.13409)
  %div.3164 = bf16[1,14336,4096]{2,1,0} divide(%add.4425, %div.1466)
  %sqrt.305 = bf16[1,14336,4096]{2,1,0} sqrt(%div.3164)
  %add.4426 = bf16[1,14336,4096]{2,1,0} add(%sqrt.305, %broadcast.3929)
  %multiply.2816 = bf16[1,14336,4096]{2,1,0} multiply(%div.1465, %add.4426)
  %div.3165 = bf16[1,14336,4096]{2,1,0} divide(%add.4424, %multiply.2816)
  %mul.13410 = bf16[1,14336,4096]{2,1,0} multiply(%param.96, %broadcast.3925)
  %add.4427 = bf16[1,14336,4096]{2,1,0} add(%div.3165, %mul.13410)
  %mul.13411 = bf16[1,14336,4096]{2,1,0} multiply(%mul.9949, %add.4427)
  %add.4428 = bf16[1,14336,4096]{2,1,0} add(%param.96, %mul.13411)
  %div.3166 = bf16[4096]{0} divide(%all-reduce.457, %div.1436)
  %select_n.1015 = bf16[4096]{0} select(%select_n.701, %all-reduce.457, %div.3166)
  %mul.13413 = bf16[4096]{0} multiply(%select_n.1015, %broadcast.3910)
  %param.941 = bf16[4096]{0} parameter(630), sharding={replicated}
  %mul.13414 = bf16[4096]{0} multiply(%param.941, %broadcast.3911)
  %add.4429 = bf16[4096]{0} add(%mul.13413, %mul.13414)
  %integer_pow.305 = bf16[4096]{0} multiply(%select_n.1015, %select_n.1015)
  %mul.13415 = bf16[4096]{0} multiply(%integer_pow.305, %broadcast.3912)
  %param.942 = bf16[4096]{0} parameter(953), sharding={replicated}
  %mul.13416 = bf16[4096]{0} multiply(%param.942, %broadcast.3913)
  %add.4430 = bf16[4096]{0} add(%mul.13415, %mul.13416)
  %div.3169 = bf16[4096]{0} divide(%add.4430, %div.1439)
  %sqrt.306 = bf16[4096]{0} sqrt(%div.3169)
  %add.4431 = bf16[4096]{0} add(%sqrt.306, %broadcast.3914)
  %multiply.2817 = bf16[4096]{0} multiply(%div.1438, %add.4431)
  %div.3170 = bf16[4096]{0} divide(%add.4429, %multiply.2817)
  %mul.13417 = bf16[4096]{0} multiply(%param.92, %broadcast.3910)
  %add.4432 = bf16[4096]{0} add(%div.3170, %mul.13417)
  %mul.13418 = bf16[4096]{0} multiply(%mul.2424, %add.4432)
  %add.4433 = bf16[4096]{0} add(%param.92, %mul.13418)
  %div.3171 = bf16[4096]{0} divide(%all-reduce.458, %div.1436)
  %select_n.1016 = bf16[4096]{0} select(%select_n.701, %all-reduce.458, %div.3171)
  %mul.13420 = bf16[4096]{0} multiply(%select_n.1016, %broadcast.3910)
  %param.943 = bf16[4096]{0} parameter(631), sharding={replicated}
  %mul.13421 = bf16[4096]{0} multiply(%param.943, %broadcast.3911)
  %add.4434 = bf16[4096]{0} add(%mul.13420, %mul.13421)
  %integer_pow.306 = bf16[4096]{0} multiply(%select_n.1016, %select_n.1016)
  %mul.13422 = bf16[4096]{0} multiply(%integer_pow.306, %broadcast.3912)
  %param.944 = bf16[4096]{0} parameter(954), sharding={replicated}
  %mul.13423 = bf16[4096]{0} multiply(%param.944, %broadcast.3913)
  %add.4435 = bf16[4096]{0} add(%mul.13422, %mul.13423)
  %div.3174 = bf16[4096]{0} divide(%add.4435, %div.1439)
  %sqrt.307 = bf16[4096]{0} sqrt(%div.3174)
  %add.4436 = bf16[4096]{0} add(%sqrt.307, %broadcast.3914)
  %multiply.2818 = bf16[4096]{0} multiply(%div.1438, %add.4436)
  %div.3175 = bf16[4096]{0} divide(%add.4434, %multiply.2818)
  %mul.13425 = bf16[4096]{0} multiply(%param.87, %broadcast.3910)
  %add.4437 = bf16[4096]{0} add(%div.3175, %mul.13425)
  %mul.13426 = bf16[4096]{0} multiply(%mul.2424, %add.4437)
  %add.4438 = bf16[4096]{0} add(%param.87, %mul.13426)
  %div.3176 = bf16[512,8,128]{0,2,1} divide(%transpose.445, %div.1479)
  %select_n.1017 = bf16[512,8,128]{2,1,0} select(%select_n.713, %transpose.445, %div.3176)
  %mul.13428 = bf16[512,8,128]{2,1,0} multiply(%select_n.1017, %broadcast.3930)
  %param.945 = bf16[512,8,128]{2,1,0} parameter(632), sharding={devices=[8,1,1]<=[8]}
  %mul.13429 = bf16[512,8,128]{2,1,0} multiply(%param.945, %broadcast.3931)
  %add.4439 = bf16[512,8,128]{2,1,0} add(%mul.13428, %mul.13429)
  %integer_pow.307 = bf16[512,8,128]{2,1,0} multiply(%select_n.1017, %select_n.1017)
  %mul.13430 = bf16[512,8,128]{2,1,0} multiply(%integer_pow.307, %broadcast.3932)
  %param.946 = bf16[512,8,128]{2,1,0} parameter(955), sharding={devices=[8,1,1]<=[8]}
  %mul.13435 = bf16[512,8,128]{2,1,0} multiply(%param.946, %broadcast.3933)
  %add.4440 = bf16[512,8,128]{2,1,0} add(%mul.13430, %mul.13435)
  %div.3179 = bf16[512,8,128]{2,1,0} divide(%add.4440, %div.1482)
  %sqrt.308 = bf16[512,8,128]{2,1,0} sqrt(%div.3179)
  %add.4441 = bf16[512,8,128]{2,1,0} add(%sqrt.308, %broadcast.3934)
  %multiply.2819 = bf16[512,8,128]{2,1,0} multiply(%div.1481, %add.4441)
  %div.3180 = bf16[512,8,128]{2,1,0} divide(%add.4439, %multiply.2819)
  %mul.13436 = bf16[512,8,128]{2,1,0} multiply(%param.89, %broadcast.3930)
  %add.4442 = bf16[512,8,128]{2,1,0} add(%div.3180, %mul.13436)
  %mul.13437 = bf16[512,8,128]{2,1,0} multiply(%mul.9984, %add.4442)
  %add.4443 = bf16[512,8,128]{2,1,0} add(%param.89, %mul.13437)
  %div.3181 = bf16[32,128,512]{1,0,2} divide(%transpose.446, %div.1485)
  %select_n.1018 = bf16[32,128,512]{2,1,0} select(%select_n.715, %transpose.446, %div.3181)
  %mul.13439 = bf16[32,128,512]{2,1,0} multiply(%select_n.1018, %broadcast.3935)
  %param.947 = bf16[32,128,512]{2,1,0} parameter(633), sharding={devices=[1,1,8]<=[8]}
  %mul.13440 = bf16[32,128,512]{2,1,0} multiply(%param.947, %broadcast.3936)
  %add.4444 = bf16[32,128,512]{2,1,0} add(%mul.13439, %mul.13440)
  %integer_pow.308 = bf16[32,128,512]{2,1,0} multiply(%select_n.1018, %select_n.1018)
  %mul.13442 = bf16[32,128,512]{2,1,0} multiply(%integer_pow.308, %broadcast.3937)
  %param.948 = bf16[32,128,512]{2,1,0} parameter(956), sharding={devices=[1,1,8]<=[8]}
  %mul.13443 = bf16[32,128,512]{2,1,0} multiply(%param.948, %broadcast.3938)
  %add.4445 = bf16[32,128,512]{2,1,0} add(%mul.13442, %mul.13443)
  %div.3184 = bf16[32,128,512]{2,1,0} divide(%add.4445, %div.1488)
  %sqrt.309 = bf16[32,128,512]{2,1,0} sqrt(%div.3184)
  %add.4446 = bf16[32,128,512]{2,1,0} add(%sqrt.309, %broadcast.3939)
  %multiply.2820 = bf16[32,128,512]{2,1,0} multiply(%div.1487, %add.4446)
  %div.3185 = bf16[32,128,512]{2,1,0} divide(%add.4444, %multiply.2820)
  %mul.13444 = bf16[32,128,512]{2,1,0} multiply(%param.91, %broadcast.3935)
  %add.4447 = bf16[32,128,512]{2,1,0} add(%div.3185, %mul.13444)
  %mul.13445 = bf16[32,128,512]{2,1,0} multiply(%mul.9994, %add.4447)
  %add.4448 = bf16[32,128,512]{2,1,0} add(%param.91, %mul.13445)
  %div.3186 = bf16[512,32,128]{0,2,1} divide(%transpose.447, %div.1491)
  %select_n.1019 = bf16[512,32,128]{2,1,0} select(%select_n.717, %transpose.447, %div.3186)
  %mul.13447 = bf16[512,32,128]{2,1,0} multiply(%select_n.1019, %broadcast.3940)
  %param.949 = bf16[512,32,128]{2,1,0} parameter(634), sharding={devices=[8,1,1]<=[8]}
  %mul.13453 = bf16[512,32,128]{2,1,0} multiply(%param.949, %broadcast.3941)
  %add.4449 = bf16[512,32,128]{2,1,0} add(%mul.13447, %mul.13453)
  %integer_pow.309 = bf16[512,32,128]{2,1,0} multiply(%select_n.1019, %select_n.1019)
  %mul.13454 = bf16[512,32,128]{2,1,0} multiply(%integer_pow.309, %broadcast.3942)
  %param.950 = bf16[512,32,128]{2,1,0} parameter(957), sharding={devices=[8,1,1]<=[8]}
  %mul.13455 = bf16[512,32,128]{2,1,0} multiply(%param.950, %broadcast.3943)
  %add.4450 = bf16[512,32,128]{2,1,0} add(%mul.13454, %mul.13455)
  %div.3189 = bf16[512,32,128]{2,1,0} divide(%add.4450, %div.1494)
  %sqrt.310 = bf16[512,32,128]{2,1,0} sqrt(%div.3189)
  %add.4451 = bf16[512,32,128]{2,1,0} add(%sqrt.310, %broadcast.3944)
  %multiply.2821 = bf16[512,32,128]{2,1,0} multiply(%div.1493, %add.4451)
  %div.3190 = bf16[512,32,128]{2,1,0} divide(%add.4449, %multiply.2821)
  %mul.13456 = bf16[512,32,128]{2,1,0} multiply(%param.88, %broadcast.3940)
  %add.4453 = bf16[512,32,128]{2,1,0} add(%div.3190, %mul.13456)
  %mul.13457 = bf16[512,32,128]{2,1,0} multiply(%mul.10010, %add.4453)
  %add.4454 = bf16[512,32,128]{2,1,0} add(%param.88, %mul.13457)
  %div.3191 = bf16[512,8,128]{0,2,1} divide(%transpose.448, %div.1479)
  %select_n.1020 = bf16[512,8,128]{2,1,0} select(%select_n.713, %transpose.448, %div.3191)
  %mul.13459 = bf16[512,8,128]{2,1,0} multiply(%select_n.1020, %broadcast.3930)
  %param.951 = bf16[512,8,128]{2,1,0} parameter(635), sharding={devices=[8,1,1]<=[8]}
  %mul.13461 = bf16[512,8,128]{2,1,0} multiply(%param.951, %broadcast.3931)
  %add.4455 = bf16[512,8,128]{2,1,0} add(%mul.13459, %mul.13461)
  %integer_pow.310 = bf16[512,8,128]{2,1,0} multiply(%select_n.1020, %select_n.1020)
  %mul.13462 = bf16[512,8,128]{2,1,0} multiply(%integer_pow.310, %broadcast.3932)
  %param.952 = bf16[512,8,128]{2,1,0} parameter(958), sharding={devices=[8,1,1]<=[8]}
  %mul.13463 = bf16[512,8,128]{2,1,0} multiply(%param.952, %broadcast.3933)
  %add.4456 = bf16[512,8,128]{2,1,0} add(%mul.13462, %mul.13463)
  %div.3194 = bf16[512,8,128]{2,1,0} divide(%add.4456, %div.1482)
  %sqrt.311 = bf16[512,8,128]{2,1,0} sqrt(%div.3194)
  %add.4457 = bf16[512,8,128]{2,1,0} add(%sqrt.311, %broadcast.3934)
  %multiply.2822 = bf16[512,8,128]{2,1,0} multiply(%div.1481, %add.4457)
  %div.3195 = bf16[512,8,128]{2,1,0} divide(%add.4455, %multiply.2822)
  %mul.13464 = bf16[512,8,128]{2,1,0} multiply(%param.90, %broadcast.3930)
  %add.4458 = bf16[512,8,128]{2,1,0} add(%div.3195, %mul.13464)
  %mul.13465 = bf16[512,8,128]{2,1,0} multiply(%mul.9984, %add.4458)
  %add.4459 = bf16[512,8,128]{2,1,0} add(%param.90, %mul.13465)
  %div.3196 = bf16[512,8]{1,0} divide(%dynamic-slice.2491, %div.1442)
  %select_n.1021 = bf16[512,8]{1,0} select(%select_n.704, %dynamic-slice.2491, %div.3196)
  %mul.13467 = bf16[512,8]{1,0} multiply(%select_n.1021, %broadcast.3915)
  %param.953 = bf16[512,8]{1,0} parameter(636), sharding={devices=[8,1]<=[8]}
  %mul.13468 = bf16[512,8]{1,0} multiply(%param.953, %broadcast.3916)
  %add.4460 = bf16[512,8]{1,0} add(%mul.13467, %mul.13468)
  %integer_pow.311 = bf16[512,8]{1,0} multiply(%select_n.1021, %select_n.1021)
  %mul.13469 = bf16[512,8]{1,0} multiply(%integer_pow.311, %broadcast.3917)
  %param.954 = bf16[512,8]{1,0} parameter(959), sharding={devices=[8,1]<=[8]}
  %mul.13470 = bf16[512,8]{1,0} multiply(%param.954, %broadcast.3918)
  %add.4461 = bf16[512,8]{1,0} add(%mul.13469, %mul.13470)
  %div.3199 = bf16[512,8]{1,0} divide(%add.4461, %div.1446)
  %sqrt.312 = bf16[512,8]{1,0} sqrt(%div.3199)
  %add.4462 = bf16[512,8]{1,0} add(%sqrt.312, %broadcast.3919)
  %multiply.2823 = bf16[512,8]{1,0} multiply(%div.1444, %add.4462)
  %div.3200 = bf16[512,8]{1,0} divide(%add.4460, %multiply.2823)
  %mul.13471 = bf16[512,8]{1,0} multiply(%param.103, %broadcast.3915)
  %add.4463 = bf16[512,8]{1,0} add(%div.3200, %mul.13471)
  %mul.13472 = bf16[512,8]{1,0} multiply(%mul.9922, %add.4463)
  %add.4464 = bf16[512,8]{1,0} add(%param.103, %mul.13472)
  %div.3201 = bf16[1,4096,14336]{2,1,0} divide(%sharding_constraint.2563, %div.1450)
  %select_n.1022 = bf16[1,4096,14336]{2,1,0} select(%select_n.706, %sharding_constraint.2563, %div.3201)
  %mul.13474 = bf16[1,4096,14336]{2,1,0} multiply(%select_n.1022, %broadcast.3920)
  %param.955 = bf16[1,4096,14336]{2,1,0} parameter(637), sharding={devices=[8,1,1]<=[8]}
  %mul.13475 = bf16[1,4096,14336]{2,1,0} multiply(%param.955, %broadcast.3921)
  %add.4465 = bf16[1,4096,14336]{2,1,0} add(%mul.13474, %mul.13475)
  %integer_pow.312 = bf16[1,4096,14336]{2,1,0} multiply(%select_n.1022, %select_n.1022)
  %mul.13476 = bf16[1,4096,14336]{2,1,0} multiply(%integer_pow.312, %broadcast.3922)
  %param.956 = bf16[1,4096,14336]{2,1,0} parameter(960), sharding={devices=[8,1,1]<=[8]}
  %mul.13478 = bf16[1,4096,14336]{2,1,0} multiply(%param.956, %broadcast.3923)
  %add.4466 = bf16[1,4096,14336]{2,1,0} add(%mul.13476, %mul.13478)
  %div.3204 = bf16[1,4096,14336]{2,1,0} divide(%add.4466, %div.1455)
  %sqrt.313 = bf16[1,4096,14336]{2,1,0} sqrt(%div.3204)
  %add.4467 = bf16[1,4096,14336]{2,1,0} add(%sqrt.313, %broadcast.3924)
  %multiply.2824 = bf16[1,4096,14336]{2,1,0} multiply(%div.1454, %add.4467)
  %div.3206 = bf16[1,4096,14336]{2,1,0} divide(%add.4465, %multiply.2824)
  %mul.13479 = bf16[1,4096,14336]{2,1,0} multiply(%param.104, %broadcast.3920)
  %add.4468 = bf16[1,4096,14336]{2,1,0} add(%div.3206, %mul.13479)
  %mul.13480 = bf16[1,4096,14336]{2,1,0} multiply(%mul.9929, %add.4468)
  %add.4470 = bf16[1,4096,14336]{2,1,0} add(%param.104, %mul.13480)
  %div.3207 = bf16[1,4096,14336]{2,1,0} divide(%sharding_constraint.2564, %div.1450)
  %select_n.1023 = bf16[1,4096,14336]{2,1,0} select(%select_n.706, %sharding_constraint.2564, %div.3207)
  %mul.13482 = bf16[1,4096,14336]{2,1,0} multiply(%select_n.1023, %broadcast.3920)
  %param.957 = bf16[1,4096,14336]{2,1,0} parameter(638), sharding={devices=[8,1,1]<=[8]}
  %mul.13483 = bf16[1,4096,14336]{2,1,0} multiply(%param.957, %broadcast.3921)
  %add.4471 = bf16[1,4096,14336]{2,1,0} add(%mul.13482, %mul.13483)
  %integer_pow.313 = bf16[1,4096,14336]{2,1,0} multiply(%select_n.1023, %select_n.1023)
  %mul.13487 = bf16[1,4096,14336]{2,1,0} multiply(%integer_pow.313, %broadcast.3922)
  %param.958 = bf16[1,4096,14336]{2,1,0} parameter(961), sharding={devices=[8,1,1]<=[8]}
  %mul.13488 = bf16[1,4096,14336]{2,1,0} multiply(%param.958, %broadcast.3923)
  %add.4473 = bf16[1,4096,14336]{2,1,0} add(%mul.13487, %mul.13488)
  %div.3210 = bf16[1,4096,14336]{2,1,0} divide(%add.4473, %div.1455)
  %sqrt.314 = bf16[1,4096,14336]{2,1,0} sqrt(%div.3210)
  %add.4474 = bf16[1,4096,14336]{2,1,0} add(%sqrt.314, %broadcast.3924)
  %multiply.2825 = bf16[1,4096,14336]{2,1,0} multiply(%div.1454, %add.4474)
  %div.3211 = bf16[1,4096,14336]{2,1,0} divide(%add.4471, %multiply.2825)
  %mul.13489 = bf16[1,4096,14336]{2,1,0} multiply(%param.105, %broadcast.3920)
  %add.4476 = bf16[1,4096,14336]{2,1,0} add(%div.3211, %mul.13489)
  %mul.13490 = bf16[1,4096,14336]{2,1,0} multiply(%mul.9929, %add.4476)
  %add.4477 = bf16[1,4096,14336]{2,1,0} add(%param.105, %mul.13490)
  %div.3212 = bf16[1,14336,4096]{2,1,0} divide(%sharding_constraint.2565, %div.1463)
  %select_n.1024 = bf16[1,14336,4096]{2,1,0} select(%select_n.709, %sharding_constraint.2565, %div.3212)
  %mul.13492 = bf16[1,14336,4096]{2,1,0} multiply(%select_n.1024, %broadcast.3925)
  %param.959 = bf16[1,14336,4096]{2,1,0} parameter(639), sharding={devices=[8,1,1]<=[8]}
  %mul.13494 = bf16[1,14336,4096]{2,1,0} multiply(%param.959, %broadcast.3926)
  %add.4478 = bf16[1,14336,4096]{2,1,0} add(%mul.13492, %mul.13494)
  %integer_pow.314 = bf16[1,14336,4096]{2,1,0} multiply(%select_n.1024, %select_n.1024)
  %mul.13500 = bf16[1,14336,4096]{2,1,0} multiply(%integer_pow.314, %broadcast.3927)
  %param.960 = bf16[1,14336,4096]{2,1,0} parameter(962), sharding={devices=[8,1,1]<=[8]}
  %mul.13501 = bf16[1,14336,4096]{2,1,0} multiply(%param.960, %broadcast.3928)
  %add.4479 = bf16[1,14336,4096]{2,1,0} add(%mul.13500, %mul.13501)
  %div.3217 = bf16[1,14336,4096]{2,1,0} divide(%add.4479, %div.1466)
  %sqrt.315 = bf16[1,14336,4096]{2,1,0} sqrt(%div.3217)
  %add.4480 = bf16[1,14336,4096]{2,1,0} add(%sqrt.315, %broadcast.3929)
  %multiply.2826 = bf16[1,14336,4096]{2,1,0} multiply(%div.1465, %add.4480)
  %div.3218 = bf16[1,14336,4096]{2,1,0} divide(%add.4478, %multiply.2826)
  %mul.13506 = bf16[1,14336,4096]{2,1,0} multiply(%param.106, %broadcast.3925)
  %add.4481 = bf16[1,14336,4096]{2,1,0} add(%div.3218, %mul.13506)
  %mul.13507 = bf16[1,14336,4096]{2,1,0} multiply(%mul.9949, %add.4481)
  %add.4482 = bf16[1,14336,4096]{2,1,0} add(%param.106, %mul.13507)
  %div.3219 = bf16[4096]{0} divide(%all-reduce.472, %div.1436)
  %select_n.1025 = bf16[4096]{0} select(%select_n.701, %all-reduce.472, %div.3219)
  %mul.13509 = bf16[4096]{0} multiply(%select_n.1025, %broadcast.3910)
  %param.961 = bf16[4096]{0} parameter(640), sharding={replicated}
  %mul.13510 = bf16[4096]{0} multiply(%param.961, %broadcast.3911)
  %add.4483 = bf16[4096]{0} add(%mul.13509, %mul.13510)
  %integer_pow.315 = bf16[4096]{0} multiply(%select_n.1025, %select_n.1025)
  %mul.13511 = bf16[4096]{0} multiply(%integer_pow.315, %broadcast.3912)
  %param.962 = bf16[4096]{0} parameter(963), sharding={replicated}
  %mul.13512 = bf16[4096]{0} multiply(%param.962, %broadcast.3913)
  %add.4484 = bf16[4096]{0} add(%mul.13511, %mul.13512)
  %div.3222 = bf16[4096]{0} divide(%add.4484, %div.1439)
  %sqrt.316 = bf16[4096]{0} sqrt(%div.3222)
  %add.4485 = bf16[4096]{0} add(%sqrt.316, %broadcast.3914)
  %multiply.2827 = bf16[4096]{0} multiply(%div.1438, %add.4485)
  %div.3223 = bf16[4096]{0} divide(%add.4483, %multiply.2827)
  %mul.13513 = bf16[4096]{0} multiply(%param.102, %broadcast.3910)
  %add.4486 = bf16[4096]{0} add(%div.3223, %mul.13513)
  %mul.13515 = bf16[4096]{0} multiply(%mul.2424, %add.4486)
  %add.4487 = bf16[4096]{0} add(%param.102, %mul.13515)
  %div.3224 = bf16[4096]{0} divide(%all-reduce.473, %div.1436)
  %select_n.1026 = bf16[4096]{0} select(%select_n.701, %all-reduce.473, %div.3224)
  %mul.13517 = bf16[4096]{0} multiply(%select_n.1026, %broadcast.3910)
  %param.963 = bf16[4096]{0} parameter(641), sharding={replicated}
  %mul.13518 = bf16[4096]{0} multiply(%param.963, %broadcast.3911)
  %add.4488 = bf16[4096]{0} add(%mul.13517, %mul.13518)
  %integer_pow.316 = bf16[4096]{0} multiply(%select_n.1026, %select_n.1026)
  %mul.13519 = bf16[4096]{0} multiply(%integer_pow.316, %broadcast.3912)
  %param.964 = bf16[4096]{0} parameter(964), sharding={replicated}
  %mul.13520 = bf16[4096]{0} multiply(%param.964, %broadcast.3913)
  %add.4490 = bf16[4096]{0} add(%mul.13519, %mul.13520)
  %div.3227 = bf16[4096]{0} divide(%add.4490, %div.1439)
  %sqrt.317 = bf16[4096]{0} sqrt(%div.3227)
  %add.4491 = bf16[4096]{0} add(%sqrt.317, %broadcast.3914)
  %multiply.2828 = bf16[4096]{0} multiply(%div.1438, %add.4491)
  %div.3228 = bf16[4096]{0} divide(%add.4488, %multiply.2828)
  %mul.13522 = bf16[4096]{0} multiply(%param.97, %broadcast.3910)
  %add.4492 = bf16[4096]{0} add(%div.3228, %mul.13522)
  %mul.13523 = bf16[4096]{0} multiply(%mul.2424, %add.4492)
  %add.4493 = bf16[4096]{0} add(%param.97, %mul.13523)
  %div.3229 = bf16[512,8,128]{0,2,1} divide(%transpose.449, %div.1479)
  %select_n.1027 = bf16[512,8,128]{2,1,0} select(%select_n.713, %transpose.449, %div.3229)
  %mul.13525 = bf16[512,8,128]{2,1,0} multiply(%select_n.1027, %broadcast.3930)
  %param.965 = bf16[512,8,128]{2,1,0} parameter(642), sharding={devices=[8,1,1]<=[8]}
  %mul.13529 = bf16[512,8,128]{2,1,0} multiply(%param.965, %broadcast.3931)
  %add.4494 = bf16[512,8,128]{2,1,0} add(%mul.13525, %mul.13529)
  %integer_pow.317 = bf16[512,8,128]{2,1,0} multiply(%select_n.1027, %select_n.1027)
  %mul.13532 = bf16[512,8,128]{2,1,0} multiply(%integer_pow.317, %broadcast.3932)
  %param.966 = bf16[512,8,128]{2,1,0} parameter(965), sharding={devices=[8,1,1]<=[8]}
  %mul.13541 = bf16[512,8,128]{2,1,0} multiply(%param.966, %broadcast.3933)
  %add.4495 = bf16[512,8,128]{2,1,0} add(%mul.13532, %mul.13541)
  %div.3232 = bf16[512,8,128]{2,1,0} divide(%add.4495, %div.1482)
  %sqrt.318 = bf16[512,8,128]{2,1,0} sqrt(%div.3232)
  %add.4497 = bf16[512,8,128]{2,1,0} add(%sqrt.318, %broadcast.3934)
  %multiply.2829 = bf16[512,8,128]{2,1,0} multiply(%div.1481, %add.4497)
  %div.3233 = bf16[512,8,128]{2,1,0} divide(%add.4494, %multiply.2829)
  %mul.13551 = bf16[512,8,128]{2,1,0} multiply(%param.99, %broadcast.3930)
  %add.4498 = bf16[512,8,128]{2,1,0} add(%div.3233, %mul.13551)
  %mul.13552 = bf16[512,8,128]{2,1,0} multiply(%mul.9984, %add.4498)
  %add.4500 = bf16[512,8,128]{2,1,0} add(%param.99, %mul.13552)
  %div.3234 = bf16[32,128,512]{1,0,2} divide(%transpose.450, %div.1485)
  %select_n.1028 = bf16[32,128,512]{2,1,0} select(%select_n.715, %transpose.450, %div.3234)
  %mul.13555 = bf16[32,128,512]{2,1,0} multiply(%select_n.1028, %broadcast.3935)
  %param.967 = bf16[32,128,512]{2,1,0} parameter(643), sharding={devices=[1,1,8]<=[8]}
  %mul.13557 = bf16[32,128,512]{2,1,0} multiply(%param.967, %broadcast.3936)
  %add.4501 = bf16[32,128,512]{2,1,0} add(%mul.13555, %mul.13557)
  %integer_pow.318 = bf16[32,128,512]{2,1,0} multiply(%select_n.1028, %select_n.1028)
  %mul.13558 = bf16[32,128,512]{2,1,0} multiply(%integer_pow.318, %broadcast.3937)
  %param.968 = bf16[32,128,512]{2,1,0} parameter(966), sharding={devices=[1,1,8]<=[8]}
  %mul.13559 = bf16[32,128,512]{2,1,0} multiply(%param.968, %broadcast.3938)
  %add.4502 = bf16[32,128,512]{2,1,0} add(%mul.13558, %mul.13559)
  %div.3237 = bf16[32,128,512]{2,1,0} divide(%add.4502, %div.1488)
  %sqrt.319 = bf16[32,128,512]{2,1,0} sqrt(%div.3237)
  %add.4503 = bf16[32,128,512]{2,1,0} add(%sqrt.319, %broadcast.3939)
  %multiply.2830 = bf16[32,128,512]{2,1,0} multiply(%div.1487, %add.4503)
  %div.3238 = bf16[32,128,512]{2,1,0} divide(%add.4501, %multiply.2830)
  %mul.13560 = bf16[32,128,512]{2,1,0} multiply(%param.101, %broadcast.3935)
  %add.4504 = bf16[32,128,512]{2,1,0} add(%div.3238, %mul.13560)
  %mul.13561 = bf16[32,128,512]{2,1,0} multiply(%mul.9994, %add.4504)
  %add.4506 = bf16[32,128,512]{2,1,0} add(%param.101, %mul.13561)
  %div.3239 = bf16[512,32,128]{0,2,1} divide(%transpose.451, %div.1491)
  %select_n.1029 = bf16[512,32,128]{2,1,0} select(%select_n.717, %transpose.451, %div.3239)
  %mul.13564 = bf16[512,32,128]{2,1,0} multiply(%select_n.1029, %broadcast.3940)
  %param.969 = bf16[512,32,128]{2,1,0} parameter(644), sharding={devices=[8,1,1]<=[8]}
  %mul.13565 = bf16[512,32,128]{2,1,0} multiply(%param.969, %broadcast.3941)
  %add.4507 = bf16[512,32,128]{2,1,0} add(%mul.13564, %mul.13565)
  %integer_pow.319 = bf16[512,32,128]{2,1,0} multiply(%select_n.1029, %select_n.1029)
  %mul.13566 = bf16[512,32,128]{2,1,0} multiply(%integer_pow.319, %broadcast.3942)
  %param.970 = bf16[512,32,128]{2,1,0} parameter(967), sharding={devices=[8,1,1]<=[8]}
  %mul.13567 = bf16[512,32,128]{2,1,0} multiply(%param.970, %broadcast.3943)
  %add.4508 = bf16[512,32,128]{2,1,0} add(%mul.13566, %mul.13567)
  %div.3242 = bf16[512,32,128]{2,1,0} divide(%add.4508, %div.1494)
  %sqrt.320 = bf16[512,32,128]{2,1,0} sqrt(%div.3242)
  %add.4509 = bf16[512,32,128]{2,1,0} add(%sqrt.320, %broadcast.3944)
  %multiply.2831 = bf16[512,32,128]{2,1,0} multiply(%div.1493, %add.4509)
  %div.3247 = bf16[512,32,128]{2,1,0} divide(%add.4507, %multiply.2831)
  %mul.13568 = bf16[512,32,128]{2,1,0} multiply(%param.98, %broadcast.3940)
  %add.4510 = bf16[512,32,128]{2,1,0} add(%div.3247, %mul.13568)
  %mul.13570 = bf16[512,32,128]{2,1,0} multiply(%mul.10010, %add.4510)
  %add.4511 = bf16[512,32,128]{2,1,0} add(%param.98, %mul.13570)
  %div.3248 = bf16[512,8,128]{0,2,1} divide(%transpose.452, %div.1479)
  %select_n.1030 = bf16[512,8,128]{2,1,0} select(%select_n.713, %transpose.452, %div.3248)
  %mul.13590 = bf16[512,8,128]{2,1,0} multiply(%select_n.1030, %broadcast.3930)
  %param.971 = bf16[512,8,128]{2,1,0} parameter(645), sharding={devices=[8,1,1]<=[8]}
  %mul.13591 = bf16[512,8,128]{2,1,0} multiply(%param.971, %broadcast.3931)
  %add.4512 = bf16[512,8,128]{2,1,0} add(%mul.13590, %mul.13591)
  %integer_pow.320 = bf16[512,8,128]{2,1,0} multiply(%select_n.1030, %select_n.1030)
  %mul.13592 = bf16[512,8,128]{2,1,0} multiply(%integer_pow.320, %broadcast.3932)
  %param.972 = bf16[512,8,128]{2,1,0} parameter(968), sharding={devices=[8,1,1]<=[8]}
  %mul.13595 = bf16[512,8,128]{2,1,0} multiply(%param.972, %broadcast.3933)
  %add.4513 = bf16[512,8,128]{2,1,0} add(%mul.13592, %mul.13595)
  %div.3251 = bf16[512,8,128]{2,1,0} divide(%add.4513, %div.1482)
  %sqrt.321 = bf16[512,8,128]{2,1,0} sqrt(%div.3251)
  %add.4514 = bf16[512,8,128]{2,1,0} add(%sqrt.321, %broadcast.3934)
  %multiply.2832 = bf16[512,8,128]{2,1,0} multiply(%div.1481, %add.4514)
  %div.3252 = bf16[512,8,128]{2,1,0} divide(%add.4512, %multiply.2832)
  %mul.13600 = bf16[512,8,128]{2,1,0} multiply(%param.100, %broadcast.3930)
  %add.4515 = bf16[512,8,128]{2,1,0} add(%div.3252, %mul.13600)
  %mul.13601 = bf16[512,8,128]{2,1,0} multiply(%mul.9984, %add.4515)
  %add.4516 = bf16[512,8,128]{2,1,0} add(%param.100, %mul.13601)
  %mul.13602 = bf16[512,32000]{1,0} broadcast(%convert_element_type.1176), dimensions={}
  %select_n.1031 = pred[512,32000]{1,0} broadcast(%lt.257), dimensions={}
  %div.3253 = bf16[512,32000]{1,0} broadcast(%sqrt.0), dimensions={}
  %div.3254 = bf16[512,32000]{1,0} divide(%dynamic-slice.2501, %div.3253)
  %select_n.1032 = bf16[512,32000]{1,0} select(%select_n.1031, %dynamic-slice.2501, %div.3254)
  %broadcast.3945 = bf16[512,32000]{1,0} broadcast(%constant.13404), dimensions={}
  %mul.13603 = bf16[512,32000]{1,0} multiply(%select_n.1032, %broadcast.3945)
  %param.973 = bf16[512,32000]{1,0} parameter(646), sharding={devices=[8,1]<=[8]}
  %mul.13604 = bf16[512,32000]{1,0} broadcast(%constant.13405), dimensions={}
  %mul.13605 = bf16[512,32000]{1,0} multiply(%param.973, %mul.13604)
  %add.4517 = bf16[512,32000]{1,0} add(%mul.13603, %mul.13605)
  %div.3255 = bf16[512,32000]{1,0} broadcast(%convert_element_type.3788), dimensions={}
  %integer_pow.321 = bf16[512,32000]{1,0} multiply(%select_n.1032, %select_n.1032)
  %mul.13606 = bf16[512,32000]{1,0} broadcast(%constant.13408), dimensions={}
  %mul.13613 = bf16[512,32000]{1,0} multiply(%integer_pow.321, %mul.13606)
  %param.974 = bf16[512,32000]{1,0} parameter(969), sharding={devices=[8,1]<=[8]}
  %mul.13614 = bf16[512,32000]{1,0} broadcast(%constant.13409), dimensions={}
  %mul.13615 = bf16[512,32000]{1,0} multiply(%param.974, %mul.13614)
  %add.4518 = bf16[512,32000]{1,0} add(%mul.13613, %mul.13615)
  %div.3256 = bf16[512,32000]{1,0} broadcast(%convert_element_type.3789), dimensions={}
  %div.3257 = bf16[512,32000]{1,0} divide(%add.4518, %div.3256)
  %sqrt.322 = bf16[512,32000]{1,0} sqrt(%div.3257)
  %add.4519 = bf16[512,32000]{1,0} broadcast(%constant.13411), dimensions={}
  %add.4520 = bf16[512,32000]{1,0} add(%sqrt.322, %add.4519)
  %multiply.2833 = bf16[512,32000]{1,0} multiply(%div.3255, %add.4520)
  %div.3258 = bf16[512,32000]{1,0} divide(%add.4517, %multiply.2833)
  %mul.13616 = bf16[512,32000]{1,0} multiply(%param.328, %broadcast.3945)
  %add.4521 = bf16[512,32000]{1,0} add(%div.3258, %mul.13616)
  %mul.13617 = bf16[512,32000]{1,0} multiply(%mul.13602, %add.4521)
  %add.4522 = bf16[512,32000]{1,0} add(%param.328, %mul.13617)
  %mul.13618 = bf16[32000,512]{1,0} broadcast(%convert_element_type.1176), dimensions={}
  %select_n.1033 = pred[32000,512]{1,0} broadcast(%lt.257), dimensions={}
  %div.3259 = bf16[32000,512]{1,0} broadcast(%sqrt.0), dimensions={}
  %div.3260 = bf16[32000,512]{1,0} divide(%dynamic-slice.2503, %div.3259)
  %select_n.1034 = bf16[32000,512]{1,0} select(%select_n.1033, %dynamic-slice.2503, %div.3260)
  %broadcast.3946 = bf16[32000,512]{1,0} broadcast(%constant.13404), dimensions={}
  %mul.13619 = bf16[32000,512]{1,0} multiply(%select_n.1034, %broadcast.3946)
  %param.975 = bf16[32000,512]{1,0} parameter(647), sharding={devices=[1,8]<=[8]}
  %mul.13620 = bf16[32000,512]{1,0} broadcast(%constant.13405), dimensions={}
  %mul.13621 = bf16[32000,512]{1,0} multiply(%param.975, %mul.13620)
  %add.4523 = bf16[32000,512]{1,0} add(%mul.13619, %mul.13621)
  %div.3261 = bf16[32000,512]{1,0} broadcast(%convert_element_type.3788), dimensions={}
  %integer_pow.322 = bf16[32000,512]{1,0} multiply(%select_n.1034, %select_n.1034)
  %mul.13622 = bf16[32000,512]{1,0} broadcast(%constant.13408), dimensions={}
  %mul.13623 = bf16[32000,512]{1,0} multiply(%integer_pow.322, %mul.13622)
  %param.976 = bf16[32000,512]{1,0} parameter(970), sharding={devices=[1,8]<=[8]}
  %mul.13624 = bf16[32000,512]{1,0} broadcast(%constant.13409), dimensions={}
  %mul.13625 = bf16[32000,512]{1,0} multiply(%param.976, %mul.13624)
  %add.4524 = bf16[32000,512]{1,0} add(%mul.13623, %mul.13625)
  %div.3262 = bf16[32000,512]{1,0} broadcast(%convert_element_type.3789), dimensions={}
  %div.3263 = bf16[32000,512]{1,0} divide(%add.4524, %div.3262)
  %sqrt.323 = bf16[32000,512]{1,0} sqrt(%div.3263)
  %add.4525 = bf16[32000,512]{1,0} broadcast(%constant.13411), dimensions={}
  %add.4526 = bf16[32000,512]{1,0} add(%sqrt.323, %add.4525)
  %multiply.2834 = bf16[32000,512]{1,0} multiply(%div.3261, %add.4526)
  %div.3264 = bf16[32000,512]{1,0} divide(%add.4523, %multiply.2834)
  %mul.13626 = bf16[32000,512]{1,0} multiply(%param.4, %broadcast.3946)
  %add.4528 = bf16[32000,512]{1,0} add(%div.3264, %mul.13626)
  %mul.13627 = bf16[32000,512]{1,0} multiply(%mul.13618, %add.4528)
  %add.4529 = bf16[32000,512]{1,0} add(%param.4, %mul.13627)
  %lt.259 = pred[] compare(%param.2, %constant.13407), direction=LT
  %add.4530 = s32[] add(%param.2, %constant.1177)
  %select_n.1035 = s32[] select(%lt.259, %add.4530, %constant.13407)
  %convert_element_type.4918 = f32[4096]{0} convert(%integer_pow.0)
  %reduce.1321 = f32[] reduce(%convert_element_type.4918, %constant.1360), dimensions={0}, to_apply=%region_1353.36677
  %convert_element_type.4919 = bf16[] convert(%reduce.1321)
  %convert_element_type.4920 = f32[512,8]{1,0} convert(%integer_pow.1)
  %reduce.1322 = f32[] reduce(%convert_element_type.4920, %constant.1360), dimensions={0,1}, to_apply=%region_1354.36685
  %all-reduce.486 = f32[] all-reduce(%reduce.1322), channel_id=1289, replica_groups=[1,8]<=[8], use_global_device_ids=true, to_apply=%region_1354.36685.clone
  %convert_element_type.4921 = bf16[] convert(%all-reduce.486)
  %add.4531 = bf16[] add(%convert_element_type.4919, %convert_element_type.4921)
  %convert_element_type.4922 = f32[1,4096,14336]{2,1,0} convert(%integer_pow.2)
  %reduce.1323 = f32[] reduce(%convert_element_type.4922, %constant.1360), dimensions={0,1,2}, to_apply=%region_1355.36694
  %all-reduce.487 = f32[] all-reduce(%reduce.1323), channel_id=1290, replica_groups=[1,8]<=[8], use_global_device_ids=true, to_apply=%region_1355.36694.clone
  %convert_element_type.4923 = bf16[] convert(%all-reduce.487)
  %add.4532 = bf16[] add(%add.4531, %convert_element_type.4923)
  %convert_element_type.4924 = f32[1,4096,14336]{2,1,0} convert(%integer_pow.3)
  %reduce.1324 = f32[] reduce(%convert_element_type.4924, %constant.1360), dimensions={0,1,2}, to_apply=%region_1356.36703
  %all-reduce.488 = f32[] all-reduce(%reduce.1324), channel_id=1291, replica_groups=[1,8]<=[8], use_global_device_ids=true, to_apply=%region_1356.36703.clone
  %convert_element_type.4925 = bf16[] convert(%all-reduce.488)
  %add.4533 = bf16[] add(%add.4532, %convert_element_type.4925)
  %convert_element_type.4926 = f32[1,14336,4096]{2,1,0} convert(%integer_pow.4)
  %reduce.1325 = f32[] reduce(%convert_element_type.4926, %constant.1360), dimensions={0,1,2}, to_apply=%region_1357.36712
  %all-reduce.489 = f32[] all-reduce(%reduce.1325), channel_id=1292, replica_groups=[1,8]<=[8], use_global_device_ids=true, to_apply=%region_1357.36712.clone
  %convert_element_type.4928 = bf16[] convert(%all-reduce.489)
  %add.4534 = bf16[] add(%add.4533, %convert_element_type.4928)
  %convert_element_type.4929 = f32[4096]{0} convert(%integer_pow.5)
  %reduce.1326 = f32[] reduce(%convert_element_type.4929, %constant.1360), dimensions={0}, to_apply=%region_1358.36721
  %convert_element_type.4930 = bf16[] convert(%reduce.1326)
  %add.4535 = bf16[] add(%add.4534, %convert_element_type.4930)
  %convert_element_type.4932 = f32[4096]{0} convert(%integer_pow.6)
  %reduce.1327 = f32[] reduce(%convert_element_type.4932, %constant.1360), dimensions={0}, to_apply=%region_1359.36730
  %convert_element_type.4933 = bf16[] convert(%reduce.1327)
  %add.4536 = bf16[] add(%add.4535, %convert_element_type.4933)
  %convert_element_type.4935 = f32[512,8,128]{2,1,0} convert(%integer_pow.7)
  %reduce.1328 = f32[] reduce(%convert_element_type.4935, %constant.1360), dimensions={0,1,2}, to_apply=%region_1360.36739
  %all-reduce.490 = f32[] all-reduce(%reduce.1328), channel_id=1293, replica_groups=[1,8]<=[8], use_global_device_ids=true, to_apply=%region_1360.36739.clone
  %convert_element_type.4936 = bf16[] convert(%all-reduce.490)
  %add.4537 = bf16[] add(%add.4536, %convert_element_type.4936)
  %convert_element_type.4937 = f32[32,128,512]{2,1,0} convert(%integer_pow.8)
  %reduce.1329 = f32[] reduce(%convert_element_type.4937, %constant.1360), dimensions={0,1,2}, to_apply=%region_1361.36748
  %all-reduce.491 = f32[] all-reduce(%reduce.1329), channel_id=1294, replica_groups=[1,8]<=[8], use_global_device_ids=true, to_apply=%region_1361.36748.clone
  %convert_element_type.4939 = bf16[] convert(%all-reduce.491)
  %add.4538 = bf16[] add(%add.4537, %convert_element_type.4939)
  %convert_element_type.4940 = f32[512,32,128]{2,1,0} convert(%integer_pow.9)
  %reduce.1330 = f32[] reduce(%convert_element_type.4940, %constant.1360), dimensions={0,1,2}, to_apply=%region_1362.36757
  %all-reduce.492 = f32[] all-reduce(%reduce.1330), channel_id=1295, replica_groups=[1,8]<=[8], use_global_device_ids=true, to_apply=%region_1362.36757.clone
  %convert_element_type.4941 = bf16[] convert(%all-reduce.492)
  %add.4539 = bf16[] add(%add.4538, %convert_element_type.4941)
  %convert_element_type.4942 = f32[512,8,128]{2,1,0} convert(%integer_pow.10)
  %reduce.1331 = f32[] reduce(%convert_element_type.4942, %constant.1360), dimensions={0,1,2}, to_apply=%region_1363.36766
  %all-reduce.493 = f32[] all-reduce(%reduce.1331), channel_id=1296, replica_groups=[1,8]<=[8], use_global_device_ids=true, to_apply=%region_1363.36766.clone
  %convert_element_type.4943 = bf16[] convert(%all-reduce.493)
  %add.4540 = bf16[] add(%add.4539, %convert_element_type.4943)
  %convert_element_type.4945 = f32[512,8]{1,0} convert(%integer_pow.11)
  %reduce.1332 = f32[] reduce(%convert_element_type.4945, %constant.1360), dimensions={0,1}, to_apply=%region_1364.36775
  %all-reduce.494 = f32[] all-reduce(%reduce.1332), channel_id=1297, replica_groups=[1,8]<=[8], use_global_device_ids=true, to_apply=%region_1364.36775.clone
  %convert_element_type.4947 = bf16[] convert(%all-reduce.494)
  %add.4541 = bf16[] add(%add.4540, %convert_element_type.4947)
  %convert_element_type.4948 = f32[1,4096,14336]{2,1,0} convert(%integer_pow.12)
  %reduce.1333 = f32[] reduce(%convert_element_type.4948, %constant.1360), dimensions={0,1,2}, to_apply=%region_1365.36784
  %all-reduce.495 = f32[] all-reduce(%reduce.1333), channel_id=1298, replica_groups=[1,8]<=[8], use_global_device_ids=true, to_apply=%region_1365.36784.clone
  %convert_element_type.4949 = bf16[] convert(%all-reduce.495)
  %add.4542 = bf16[] add(%add.4541, %convert_element_type.4949)
  %convert_element_type.4951 = f32[1,4096,14336]{2,1,0} convert(%integer_pow.13)
  %reduce.1334 = f32[] reduce(%convert_element_type.4951, %constant.1360), dimensions={0,1,2}, to_apply=%region_1366.36793
  %all-reduce.496 = f32[] all-reduce(%reduce.1334), channel_id=1299, replica_groups=[1,8]<=[8], use_global_device_ids=true, to_apply=%region_1366.36793.clone
  %convert_element_type.4952 = bf16[] convert(%all-reduce.496)
  %add.4543 = bf16[] add(%add.4542, %convert_element_type.4952)
  %convert_element_type.4953 = f32[1,14336,4096]{2,1,0} convert(%integer_pow.14)
  %reduce.1335 = f32[] reduce(%convert_element_type.4953, %constant.1360), dimensions={0,1,2}, to_apply=%region_1367.36802
  %all-reduce.497 = f32[] all-reduce(%reduce.1335), channel_id=1300, replica_groups=[1,8]<=[8], use_global_device_ids=true, to_apply=%region_1367.36802.clone
  %convert_element_type.4954 = bf16[] convert(%all-reduce.497)
  %add.4544 = bf16[] add(%add.4543, %convert_element_type.4954)
  %convert_element_type.4955 = f32[4096]{0} convert(%integer_pow.15)
  %reduce.1336 = f32[] reduce(%convert_element_type.4955, %constant.1360), dimensions={0}, to_apply=%region_1368.36811
  %convert_element_type.4956 = bf16[] convert(%reduce.1336)
  %add.4547 = bf16[] add(%add.4544, %convert_element_type.4956)
  %convert_element_type.4957 = f32[4096]{0} convert(%integer_pow.16)
  %reduce.1337 = f32[] reduce(%convert_element_type.4957, %constant.1360), dimensions={0}, to_apply=%region_1369.36820
  %convert_element_type.4958 = bf16[] convert(%reduce.1337)
  %add.4548 = bf16[] add(%add.4547, %convert_element_type.4958)
  %convert_element_type.4959 = f32[512,8,128]{2,1,0} convert(%integer_pow.17)
  %reduce.1338 = f32[] reduce(%convert_element_type.4959, %constant.1360), dimensions={0,1,2}, to_apply=%region_1370.36829
  %all-reduce.498 = f32[] all-reduce(%reduce.1338), channel_id=1301, replica_groups=[1,8]<=[8], use_global_device_ids=true, to_apply=%region_1370.36829.clone
  %convert_element_type.4960 = bf16[] convert(%all-reduce.498)
  %add.4549 = bf16[] add(%add.4548, %convert_element_type.4960)
  %convert_element_type.4961 = f32[32,128,512]{2,1,0} convert(%integer_pow.18)
  %reduce.1339 = f32[] reduce(%convert_element_type.4961, %constant.1360), dimensions={0,1,2}, to_apply=%region_1371.36838
  %all-reduce.499 = f32[] all-reduce(%reduce.1339), channel_id=1302, replica_groups=[1,8]<=[8], use_global_device_ids=true, to_apply=%region_1371.36838.clone
  %convert_element_type.4962 = bf16[] convert(%all-reduce.499)
  %add.4550 = bf16[] add(%add.4549, %convert_element_type.4962)
  %convert_element_type.4963 = f32[512,32,128]{2,1,0} convert(%integer_pow.19)
  %reduce.1340 = f32[] reduce(%convert_element_type.4963, %constant.1360), dimensions={0,1,2}, to_apply=%region_1372.36847
  %all-reduce.500 = f32[] all-reduce(%reduce.1340), channel_id=1303, replica_groups=[1,8]<=[8], use_global_device_ids=true, to_apply=%region_1372.36847.clone
  %convert_element_type.4964 = bf16[] convert(%all-reduce.500)
  %add.4551 = bf16[] add(%add.4550, %convert_element_type.4964)
  %convert_element_type.4965 = f32[512,8,128]{2,1,0} convert(%integer_pow.20)
  %reduce.1341 = f32[] reduce(%convert_element_type.4965, %constant.1360), dimensions={0,1,2}, to_apply=%region_1373.36856
  %all-reduce.501 = f32[] all-reduce(%reduce.1341), channel_id=1304, replica_groups=[1,8]<=[8], use_global_device_ids=true, to_apply=%region_1373.36856.clone
  %convert_element_type.4966 = bf16[] convert(%all-reduce.501)
  %add.4552 = bf16[] add(%add.4551, %convert_element_type.4966)
  %convert_element_type.4968 = f32[512,8]{1,0} convert(%integer_pow.21)
  %reduce.1342 = f32[] reduce(%convert_element_type.4968, %constant.1360), dimensions={0,1}, to_apply=%region_1374.36865
  %all-reduce.502 = f32[] all-reduce(%reduce.1342), channel_id=1305, replica_groups=[1,8]<=[8], use_global_device_ids=true, to_apply=%region_1374.36865.clone
  %convert_element_type.4969 = bf16[] convert(%all-reduce.502)
  %add.4553 = bf16[] add(%add.4552, %convert_element_type.4969)
  %convert_element_type.4970 = f32[1,4096,14336]{2,1,0} convert(%integer_pow.22)
  %reduce.1343 = f32[] reduce(%convert_element_type.4970, %constant.1360), dimensions={0,1,2}, to_apply=%region_1375.36874
  %all-reduce.503 = f32[] all-reduce(%reduce.1343), channel_id=1306, replica_groups=[1,8]<=[8], use_global_device_ids=true, to_apply=%region_1375.36874.clone
  %convert_element_type.4972 = bf16[] convert(%all-reduce.503)
  %add.4555 = bf16[] add(%add.4553, %convert_element_type.4972)
  %convert_element_type.4973 = f32[1,4096,14336]{2,1,0} convert(%integer_pow.23)
  %reduce.1344 = f32[] reduce(%convert_element_type.4973, %constant.1360), dimensions={0,1,2}, to_apply=%region_1376.36883
  %all-reduce.504 = f32[] all-reduce(%reduce.1344), channel_id=1307, replica_groups=[1,8]<=[8], use_global_device_ids=true, to_apply=%region_1376.36883.clone
  %convert_element_type.4974 = bf16[] convert(%all-reduce.504)
  %add.4556 = bf16[] add(%add.4555, %convert_element_type.4974)
  %convert_element_type.4975 = f32[1,14336,4096]{2,1,0} convert(%integer_pow.24)
  %reduce.1345 = f32[] reduce(%convert_element_type.4975, %constant.1360), dimensions={0,1,2}, to_apply=%region_1377.36892
  %all-reduce.505 = f32[] all-reduce(%reduce.1345), channel_id=1308, replica_groups=[1,8]<=[8], use_global_device_ids=true, to_apply=%region_1377.36892.clone
  %convert_element_type.4976 = bf16[] convert(%all-reduce.505)
  %add.4557 = bf16[] add(%add.4556, %convert_element_type.4976)
  %convert_element_type.4978 = f32[4096]{0} convert(%integer_pow.25)
  %reduce.1346 = f32[] reduce(%convert_element_type.4978, %constant.1360), dimensions={0}, to_apply=%region_1378.36901
  %convert_element_type.4979 = bf16[] convert(%reduce.1346)
  %add.4558 = bf16[] add(%add.4557, %convert_element_type.4979)
  %convert_element_type.4980 = f32[4096]{0} convert(%integer_pow.26)
  %reduce.1347 = f32[] reduce(%convert_element_type.4980, %constant.1360), dimensions={0}, to_apply=%region_1379.36910
  %convert_element_type.4981 = bf16[] convert(%reduce.1347)
  %add.4559 = bf16[] add(%add.4558, %convert_element_type.4981)
  %convert_element_type.4982 = f32[512,8,128]{2,1,0} convert(%integer_pow.27)
  %reduce.1348 = f32[] reduce(%convert_element_type.4982, %constant.1360), dimensions={0,1,2}, to_apply=%region_1380.36919
  %all-reduce.506 = f32[] all-reduce(%reduce.1348), channel_id=1309, replica_groups=[1,8]<=[8], use_global_device_ids=true, to_apply=%region_1380.36919.clone
  %convert_element_type.4984 = bf16[] convert(%all-reduce.506)
  %add.4560 = bf16[] add(%add.4559, %convert_element_type.4984)
  %convert_element_type.4985 = f32[32,128,512]{2,1,0} convert(%integer_pow.28)
  %reduce.1349 = f32[] reduce(%convert_element_type.4985, %constant.1360), dimensions={0,1,2}, to_apply=%region_1381.36928
  %all-reduce.507 = f32[] all-reduce(%reduce.1349), channel_id=1310, replica_groups=[1,8]<=[8], use_global_device_ids=true, to_apply=%region_1381.36928.clone
  %convert_element_type.4986 = bf16[] convert(%all-reduce.507)
  %add.4561 = bf16[] add(%add.4560, %convert_element_type.4986)
  %convert_element_type.4987 = f32[512,32,128]{2,1,0} convert(%integer_pow.29)
  %reduce.1350 = f32[] reduce(%convert_element_type.4987, %constant.1360), dimensions={0,1,2}, to_apply=%region_1382.36937
  %all-reduce.508 = f32[] all-reduce(%reduce.1350), channel_id=1311, replica_groups=[1,8]<=[8], use_global_device_ids=true, to_apply=%region_1382.36937.clone
  %convert_element_type.4988 = bf16[] convert(%all-reduce.508)
  %add.4562 = bf16[] add(%add.4561, %convert_element_type.4988)
  %convert_element_type.4989 = f32[512,8,128]{2,1,0} convert(%integer_pow.30)
  %reduce.1351 = f32[] reduce(%convert_element_type.4989, %constant.1360), dimensions={0,1,2}, to_apply=%region_1383.36946
  %all-reduce.509 = f32[] all-reduce(%reduce.1351), channel_id=1312, replica_groups=[1,8]<=[8], use_global_device_ids=true, to_apply=%region_1383.36946.clone
  %convert_element_type.4990 = bf16[] convert(%all-reduce.509)
  %add.4563 = bf16[] add(%add.4562, %convert_element_type.4990)
  %convert_element_type.4991 = f32[512,8]{1,0} convert(%integer_pow.31)
  %reduce.1352 = f32[] reduce(%convert_element_type.4991, %constant.1360), dimensions={0,1}, to_apply=%region_1384.36955
  %all-reduce.510 = f32[] all-reduce(%reduce.1352), channel_id=1313, replica_groups=[1,8]<=[8], use_global_device_ids=true, to_apply=%region_1384.36955.clone
  %convert_element_type.4992 = bf16[] convert(%all-reduce.510)
  %add.4564 = bf16[] add(%add.4563, %convert_element_type.4992)
  %convert_element_type.4993 = f32[1,4096,14336]{2,1,0} convert(%integer_pow.32)
  %reduce.1353 = f32[] reduce(%convert_element_type.4993, %constant.1360), dimensions={0,1,2}, to_apply=%region_1385.36964
  %all-reduce.511 = f32[] all-reduce(%reduce.1353), channel_id=1314, replica_groups=[1,8]<=[8], use_global_device_ids=true, to_apply=%region_1385.36964.clone
  %convert_element_type.4995 = bf16[] convert(%all-reduce.511)
  %add.4565 = bf16[] add(%add.4564, %convert_element_type.4995)
  %convert_element_type.4996 = f32[1,4096,14336]{2,1,0} convert(%integer_pow.33)
  %reduce.1354 = f32[] reduce(%convert_element_type.4996, %constant.1360), dimensions={0,1,2}, to_apply=%region_1386.36973
  %all-reduce.512 = f32[] all-reduce(%reduce.1354), channel_id=1315, replica_groups=[1,8]<=[8], use_global_device_ids=true, to_apply=%region_1386.36973.clone
  %convert_element_type.4997 = bf16[] convert(%all-reduce.512)
  %add.4567 = bf16[] add(%add.4565, %convert_element_type.4997)
  %convert_element_type.4998 = f32[1,14336,4096]{2,1,0} convert(%integer_pow.34)
  %reduce.1355 = f32[] reduce(%convert_element_type.4998, %constant.1360), dimensions={0,1,2}, to_apply=%region_1387.36982
  %all-reduce.513 = f32[] all-reduce(%reduce.1355), channel_id=1316, replica_groups=[1,8]<=[8], use_global_device_ids=true, to_apply=%region_1387.36982.clone
  %convert_element_type.4999 = bf16[] convert(%all-reduce.513)
  %add.4568 = bf16[] add(%add.4567, %convert_element_type.4999)
  %convert_element_type.5000 = f32[4096]{0} convert(%integer_pow.35)
  %reduce.1356 = f32[] reduce(%convert_element_type.5000, %constant.1360), dimensions={0}, to_apply=%region_1388.36991
  %convert_element_type.5001 = bf16[] convert(%reduce.1356)
  %add.4569 = bf16[] add(%add.4568, %convert_element_type.5001)
  %convert_element_type.5003 = f32[4096]{0} convert(%integer_pow.36)
  %reduce.1357 = f32[] reduce(%convert_element_type.5003, %constant.1360), dimensions={0}, to_apply=%region_1389.37000
  %convert_element_type.5004 = bf16[] convert(%reduce.1357)
  %add.4570 = bf16[] add(%add.4569, %convert_element_type.5004)
  %convert_element_type.5005 = f32[512,8,128]{2,1,0} convert(%integer_pow.37)
  %reduce.1358 = f32[] reduce(%convert_element_type.5005, %constant.1360), dimensions={0,1,2}, to_apply=%region_1390.37009
  %all-reduce.514 = f32[] all-reduce(%reduce.1358), channel_id=1317, replica_groups=[1,8]<=[8], use_global_device_ids=true, to_apply=%region_1390.37009.clone
  %convert_element_type.5006 = bf16[] convert(%all-reduce.514)
  %add.4571 = bf16[] add(%add.4570, %convert_element_type.5006)
  %convert_element_type.5007 = f32[32,128,512]{2,1,0} convert(%integer_pow.38)
  %reduce.1359 = f32[] reduce(%convert_element_type.5007, %constant.1360), dimensions={0,1,2}, to_apply=%region_1391.37018
  %all-reduce.515 = f32[] all-reduce(%reduce.1359), channel_id=1318, replica_groups=[1,8]<=[8], use_global_device_ids=true, to_apply=%region_1391.37018.clone
  %convert_element_type.5008 = bf16[] convert(%all-reduce.515)
  %add.4572 = bf16[] add(%add.4571, %convert_element_type.5008)
  %convert_element_type.5009 = f32[512,32,128]{2,1,0} convert(%integer_pow.39)
  %reduce.1360 = f32[] reduce(%convert_element_type.5009, %constant.1360), dimensions={0,1,2}, to_apply=%region_1392.37027
  %all-reduce.516 = f32[] all-reduce(%reduce.1360), channel_id=1319, replica_groups=[1,8]<=[8], use_global_device_ids=true, to_apply=%region_1392.37027.clone
  %convert_element_type.5011 = bf16[] convert(%all-reduce.516)
  %add.4573 = bf16[] add(%add.4572, %convert_element_type.5011)
  %convert_element_type.5012 = f32[512,8,128]{2,1,0} convert(%integer_pow.40)
  %reduce.1361 = f32[] reduce(%convert_element_type.5012, %constant.1360), dimensions={0,1,2}, to_apply=%region_1393.37036
  %all-reduce.517 = f32[] all-reduce(%reduce.1361), channel_id=1320, replica_groups=[1,8]<=[8], use_global_device_ids=true, to_apply=%region_1393.37036.clone
  %convert_element_type.5013 = bf16[] convert(%all-reduce.517)
  %add.4574 = bf16[] add(%add.4573, %convert_element_type.5013)
  %convert_element_type.5014 = f32[512,8]{1,0} convert(%integer_pow.41)
  %reduce.1362 = f32[] reduce(%convert_element_type.5014, %constant.1360), dimensions={0,1}, to_apply=%region_1394.37045
  %all-reduce.518 = f32[] all-reduce(%reduce.1362), channel_id=1321, replica_groups=[1,8]<=[8], use_global_device_ids=true, to_apply=%region_1394.37045.clone
  %convert_element_type.5015 = bf16[] convert(%all-reduce.518)
  %add.4576 = bf16[] add(%add.4574, %convert_element_type.5015)
  %convert_element_type.5016 = f32[1,4096,14336]{2,1,0} convert(%integer_pow.42)
  %reduce.1363 = f32[] reduce(%convert_element_type.5016, %constant.1360), dimensions={0,1,2}, to_apply=%region_1395.37054
  %all-reduce.519 = f32[] all-reduce(%reduce.1363), channel_id=1322, replica_groups=[1,8]<=[8], use_global_device_ids=true, to_apply=%region_1395.37054.clone
  %convert_element_type.5017 = bf16[] convert(%all-reduce.519)
  %add.4577 = bf16[] add(%add.4576, %convert_element_type.5017)
  %convert_element_type.5018 = f32[1,4096,14336]{2,1,0} convert(%integer_pow.43)
  %reduce.1364 = f32[] reduce(%convert_element_type.5018, %constant.1360), dimensions={0,1,2}, to_apply=%region_1396.37063
  %all-reduce.520 = f32[] all-reduce(%reduce.1364), channel_id=1323, replica_groups=[1,8]<=[8], use_global_device_ids=true, to_apply=%region_1396.37063.clone
  %convert_element_type.5020 = bf16[] convert(%all-reduce.520)
  %add.4578 = bf16[] add(%add.4577, %convert_element_type.5020)
  %convert_element_type.5022 = f32[1,14336,4096]{2,1,0} convert(%integer_pow.44)
  %reduce.1365 = f32[] reduce(%convert_element_type.5022, %constant.1360), dimensions={0,1,2}, to_apply=%region_1397.37072
  %all-reduce.521 = f32[] all-reduce(%reduce.1365), channel_id=1324, replica_groups=[1,8]<=[8], use_global_device_ids=true, to_apply=%region_1397.37072.clone
  %convert_element_type.5023 = bf16[] convert(%all-reduce.521)
  %add.4579 = bf16[] add(%add.4578, %convert_element_type.5023)
  %convert_element_type.5024 = f32[4096]{0} convert(%integer_pow.45)
  %reduce.1366 = f32[] reduce(%convert_element_type.5024, %constant.1360), dimensions={0}, to_apply=%region_1398.37081
  %convert_element_type.5025 = bf16[] convert(%reduce.1366)
  %add.4580 = bf16[] add(%add.4579, %convert_element_type.5025)
  %convert_element_type.5026 = f32[4096]{0} convert(%integer_pow.46)
  %reduce.1367 = f32[] reduce(%convert_element_type.5026, %constant.1360), dimensions={0}, to_apply=%region_1399.37090
  %convert_element_type.5027 = bf16[] convert(%reduce.1367)
  %add.4581 = bf16[] add(%add.4580, %convert_element_type.5027)
  %convert_element_type.5028 = f32[512,8,128]{2,1,0} convert(%integer_pow.47)
  %reduce.1368 = f32[] reduce(%convert_element_type.5028, %constant.1360), dimensions={0,1,2}, to_apply=%region_1400.37099
  %all-reduce.522 = f32[] all-reduce(%reduce.1368), channel_id=1325, replica_groups=[1,8]<=[8], use_global_device_ids=true, to_apply=%region_1400.37099.clone
  %convert_element_type.5029 = bf16[] convert(%all-reduce.522)
  %add.4582 = bf16[] add(%add.4581, %convert_element_type.5029)
  %convert_element_type.5030 = f32[32,128,512]{2,1,0} convert(%integer_pow.48)
  %reduce.1369 = f32[] reduce(%convert_element_type.5030, %constant.1360), dimensions={0,1,2}, to_apply=%region_1401.37108
  %all-reduce.523 = f32[] all-reduce(%reduce.1369), channel_id=1326, replica_groups=[1,8]<=[8], use_global_device_ids=true, to_apply=%region_1401.37108.clone
  %convert_element_type.5031 = bf16[] convert(%all-reduce.523)
  %add.4583 = bf16[] add(%add.4582, %convert_element_type.5031)
  %convert_element_type.5032 = f32[512,32,128]{2,1,0} convert(%integer_pow.49)
  %reduce.1370 = f32[] reduce(%convert_element_type.5032, %constant.1360), dimensions={0,1,2}, to_apply=%region_1402.37117
  %all-reduce.524 = f32[] all-reduce(%reduce.1370), channel_id=1327, replica_groups=[1,8]<=[8], use_global_device_ids=true, to_apply=%region_1402.37117.clone
  %convert_element_type.5033 = bf16[] convert(%all-reduce.524)
  %add.4584 = bf16[] add(%add.4583, %convert_element_type.5033)
  %convert_element_type.5034 = f32[512,8,128]{2,1,0} convert(%integer_pow.50)
  %reduce.1371 = f32[] reduce(%convert_element_type.5034, %constant.1360), dimensions={0,1,2}, to_apply=%region_1403.37126
  %all-reduce.525 = f32[] all-reduce(%reduce.1371), channel_id=1328, replica_groups=[1,8]<=[8], use_global_device_ids=true, to_apply=%region_1403.37126.clone
  %convert_element_type.5035 = bf16[] convert(%all-reduce.525)
  %add.4585 = bf16[] add(%add.4584, %convert_element_type.5035)
  %convert_element_type.5037 = f32[512,8]{1,0} convert(%integer_pow.51)
  %reduce.1372 = f32[] reduce(%convert_element_type.5037, %constant.1360), dimensions={0,1}, to_apply=%region_1404.37135
  %all-reduce.526 = f32[] all-reduce(%reduce.1372), channel_id=1329, replica_groups=[1,8]<=[8], use_global_device_ids=true, to_apply=%region_1404.37135.clone
  %convert_element_type.5038 = bf16[] convert(%all-reduce.526)
  %add.4586 = bf16[] add(%add.4585, %convert_element_type.5038)
  %convert_element_type.5040 = f32[1,4096,14336]{2,1,0} convert(%integer_pow.52)
  %reduce.1373 = f32[] reduce(%convert_element_type.5040, %constant.1360), dimensions={0,1,2}, to_apply=%region_1405.37144
  %all-reduce.527 = f32[] all-reduce(%reduce.1373), channel_id=1330, replica_groups=[1,8]<=[8], use_global_device_ids=true, to_apply=%region_1405.37144.clone
  %convert_element_type.5041 = bf16[] convert(%all-reduce.527)
  %add.4587 = bf16[] add(%add.4586, %convert_element_type.5041)
  %convert_element_type.5042 = f32[1,4096,14336]{2,1,0} convert(%integer_pow.53)
  %reduce.1374 = f32[] reduce(%convert_element_type.5042, %constant.1360), dimensions={0,1,2}, to_apply=%region_1406.37153
  %all-reduce.528 = f32[] all-reduce(%reduce.1374), channel_id=1331, replica_groups=[1,8]<=[8], use_global_device_ids=true, to_apply=%region_1406.37153.clone
  %convert_element_type.5043 = bf16[] convert(%all-reduce.528)
  %add.4588 = bf16[] add(%add.4587, %convert_element_type.5043)
  %convert_element_type.5044 = f32[1,14336,4096]{2,1,0} convert(%integer_pow.54)
  %reduce.1375 = f32[] reduce(%convert_element_type.5044, %constant.1360), dimensions={0,1,2}, to_apply=%region_1407.37162
  %all-reduce.529 = f32[] all-reduce(%reduce.1375), channel_id=1332, replica_groups=[1,8]<=[8], use_global_device_ids=true, to_apply=%region_1407.37162.clone
  %convert_element_type.5045 = bf16[] convert(%all-reduce.529)
  %add.4589 = bf16[] add(%add.4588, %convert_element_type.5045)
  %convert_element_type.5046 = f32[4096]{0} convert(%integer_pow.55)
  %reduce.1376 = f32[] reduce(%convert_element_type.5046, %constant.1360), dimensions={0}, to_apply=%region_1408.37171
  %convert_element_type.5047 = bf16[] convert(%reduce.1376)
  %add.4590 = bf16[] add(%add.4589, %convert_element_type.5047)
  %convert_element_type.5049 = f32[4096]{0} convert(%integer_pow.56)
  %reduce.1377 = f32[] reduce(%convert_element_type.5049, %constant.1360), dimensions={0}, to_apply=%region_1409.37180
  %convert_element_type.5050 = bf16[] convert(%reduce.1377)
  %add.4591 = bf16[] add(%add.4590, %convert_element_type.5050)
  %convert_element_type.5052 = f32[512,8,128]{2,1,0} convert(%integer_pow.57)
  %reduce.1378 = f32[] reduce(%convert_element_type.5052, %constant.1360), dimensions={0,1,2}, to_apply=%region_1410.37189
  %all-reduce.530 = f32[] all-reduce(%reduce.1378), channel_id=1333, replica_groups=[1,8]<=[8], use_global_device_ids=true, to_apply=%region_1410.37189.clone
  %convert_element_type.5053 = bf16[] convert(%all-reduce.530)
  %add.4592 = bf16[] add(%add.4591, %convert_element_type.5053)
  %convert_element_type.5054 = f32[32,128,512]{2,1,0} convert(%integer_pow.58)
  %reduce.1379 = f32[] reduce(%convert_element_type.5054, %constant.1360), dimensions={0,1,2}, to_apply=%region_1411.37198
  %all-reduce.531 = f32[] all-reduce(%reduce.1379), channel_id=1334, replica_groups=[1,8]<=[8], use_global_device_ids=true, to_apply=%region_1411.37198.clone
  %convert_element_type.5055 = bf16[] convert(%all-reduce.531)
  %add.4593 = bf16[] add(%add.4592, %convert_element_type.5055)
  %convert_element_type.5056 = f32[512,32,128]{2,1,0} convert(%integer_pow.59)
  %reduce.1380 = f32[] reduce(%convert_element_type.5056, %constant.1360), dimensions={0,1,2}, to_apply=%region_1412.37207
  %all-reduce.532 = f32[] all-reduce(%reduce.1380), channel_id=1335, replica_groups=[1,8]<=[8], use_global_device_ids=true, to_apply=%region_1412.37207.clone
  %convert_element_type.5057 = bf16[] convert(%all-reduce.532)
  %add.4594 = bf16[] add(%add.4593, %convert_element_type.5057)
  %convert_element_type.5058 = f32[512,8,128]{2,1,0} convert(%integer_pow.60)
  %reduce.1381 = f32[] reduce(%convert_element_type.5058, %constant.1360), dimensions={0,1,2}, to_apply=%region_1413.37216
  %all-reduce.533 = f32[] all-reduce(%reduce.1381), channel_id=1336, replica_groups=[1,8]<=[8], use_global_device_ids=true, to_apply=%region_1413.37216.clone
  %convert_element_type.5059 = bf16[] convert(%all-reduce.533)
  %add.4595 = bf16[] add(%add.4594, %convert_element_type.5059)
  %convert_element_type.5060 = f32[512,8]{1,0} convert(%integer_pow.61)
  %reduce.1382 = f32[] reduce(%convert_element_type.5060, %constant.1360), dimensions={0,1}, to_apply=%region_1414.37225
  %all-reduce.534 = f32[] all-reduce(%reduce.1382), channel_id=1337, replica_groups=[1,8]<=[8], use_global_device_ids=true, to_apply=%region_1414.37225.clone
  %convert_element_type.5061 = bf16[] convert(%all-reduce.534)
  %add.4596 = bf16[] add(%add.4595, %convert_element_type.5061)
  %convert_element_type.5062 = f32[1,4096,14336]{2,1,0} convert(%integer_pow.62)
  %reduce.1383 = f32[] reduce(%convert_element_type.5062, %constant.1360), dimensions={0,1,2}, to_apply=%region_1415.37234
  %all-reduce.535 = f32[] all-reduce(%reduce.1383), channel_id=1338, replica_groups=[1,8]<=[8], use_global_device_ids=true, to_apply=%region_1415.37234.clone
  %convert_element_type.5063 = bf16[] convert(%all-reduce.535)
  %add.4597 = bf16[] add(%add.4596, %convert_element_type.5063)
  %convert_element_type.5064 = f32[1,4096,14336]{2,1,0} convert(%integer_pow.63)
  %reduce.1384 = f32[] reduce(%convert_element_type.5064, %constant.1360), dimensions={0,1,2}, to_apply=%region_1416.37243
  %all-reduce.536 = f32[] all-reduce(%reduce.1384), channel_id=1339, replica_groups=[1,8]<=[8], use_global_device_ids=true, to_apply=%region_1416.37243.clone
  %convert_element_type.5065 = bf16[] convert(%all-reduce.536)
  %add.4598 = bf16[] add(%add.4597, %convert_element_type.5065)
  %convert_element_type.5066 = f32[1,14336,4096]{2,1,0} convert(%integer_pow.64)
  %reduce.1385 = f32[] reduce(%convert_element_type.5066, %constant.1360), dimensions={0,1,2}, to_apply=%region_1417.37252
  %all-reduce.537 = f32[] all-reduce(%reduce.1385), channel_id=1340, replica_groups=[1,8]<=[8], use_global_device_ids=true, to_apply=%region_1417.37252.clone
  %convert_element_type.5067 = bf16[] convert(%all-reduce.537)
  %add.4599 = bf16[] add(%add.4598, %convert_element_type.5067)
  %convert_element_type.5068 = f32[4096]{0} convert(%integer_pow.65)
  %reduce.1386 = f32[] reduce(%convert_element_type.5068, %constant.1360), dimensions={0}, to_apply=%region_1418.37261
  %convert_element_type.5069 = bf16[] convert(%reduce.1386)
  %add.4600 = bf16[] add(%add.4599, %convert_element_type.5069)
  %convert_element_type.5070 = f32[4096]{0} convert(%integer_pow.66)
  %reduce.1387 = f32[] reduce(%convert_element_type.5070, %constant.1360), dimensions={0}, to_apply=%region_1419.37270
  %convert_element_type.5072 = bf16[] convert(%reduce.1387)
  %add.4601 = bf16[] add(%add.4600, %convert_element_type.5072)
  %convert_element_type.5073 = f32[512,8,128]{2,1,0} convert(%integer_pow.67)
  %reduce.1388 = f32[] reduce(%convert_element_type.5073, %constant.1360), dimensions={0,1,2}, to_apply=%region_1420.37279
  %all-reduce.538 = f32[] all-reduce(%reduce.1388), channel_id=1341, replica_groups=[1,8]<=[8], use_global_device_ids=true, to_apply=%region_1420.37279.clone
  %convert_element_type.5074 = bf16[] convert(%all-reduce.538)
  %add.4602 = bf16[] add(%add.4601, %convert_element_type.5074)
  %convert_element_type.5075 = f32[32,128,512]{2,1,0} convert(%integer_pow.68)
  %reduce.1389 = f32[] reduce(%convert_element_type.5075, %constant.1360), dimensions={0,1,2}, to_apply=%region_1421.37288
  %all-reduce.539 = f32[] all-reduce(%reduce.1389), channel_id=1342, replica_groups=[1,8]<=[8], use_global_device_ids=true, to_apply=%region_1421.37288.clone
  %convert_element_type.5076 = bf16[] convert(%all-reduce.539)
  %add.4603 = bf16[] add(%add.4602, %convert_element_type.5076)
  %convert_element_type.5077 = f32[512,32,128]{2,1,0} convert(%integer_pow.69)
  %reduce.1390 = f32[] reduce(%convert_element_type.5077, %constant.1360), dimensions={0,1,2}, to_apply=%region_1422.37297
  %all-reduce.540 = f32[] all-reduce(%reduce.1390), channel_id=1343, replica_groups=[1,8]<=[8], use_global_device_ids=true, to_apply=%region_1422.37297.clone
  %convert_element_type.5078 = bf16[] convert(%all-reduce.540)
  %add.4604 = bf16[] add(%add.4603, %convert_element_type.5078)
  %convert_element_type.5079 = f32[512,8,128]{2,1,0} convert(%integer_pow.70)
  %reduce.1391 = f32[] reduce(%convert_element_type.5079, %constant.1360), dimensions={0,1,2}, to_apply=%region_1423.37306
  %all-reduce.541 = f32[] all-reduce(%reduce.1391), channel_id=1344, replica_groups=[1,8]<=[8], use_global_device_ids=true, to_apply=%region_1423.37306.clone
  %convert_element_type.5080 = bf16[] convert(%all-reduce.541)
  %add.4605 = bf16[] add(%add.4604, %convert_element_type.5080)
  %convert_element_type.5081 = f32[512,8]{1,0} convert(%integer_pow.71)
  %reduce.1392 = f32[] reduce(%convert_element_type.5081, %constant.1360), dimensions={0,1}, to_apply=%region_1424.37315
  %all-reduce.542 = f32[] all-reduce(%reduce.1392), channel_id=1345, replica_groups=[1,8]<=[8], use_global_device_ids=true, to_apply=%region_1424.37315.clone
  %convert_element_type.5082 = bf16[] convert(%all-reduce.542)
  %add.4606 = bf16[] add(%add.4605, %convert_element_type.5082)
  %convert_element_type.5083 = f32[1,4096,14336]{2,1,0} convert(%integer_pow.72)
  %reduce.1393 = f32[] reduce(%convert_element_type.5083, %constant.1360), dimensions={0,1,2}, to_apply=%region_1425.37324
  %all-reduce.543 = f32[] all-reduce(%reduce.1393), channel_id=1346, replica_groups=[1,8]<=[8], use_global_device_ids=true, to_apply=%region_1425.37324.clone
  %convert_element_type.5084 = bf16[] convert(%all-reduce.543)
  %add.4607 = bf16[] add(%add.4606, %convert_element_type.5084)
  %convert_element_type.5085 = f32[1,4096,14336]{2,1,0} convert(%integer_pow.73)
  %reduce.1394 = f32[] reduce(%convert_element_type.5085, %constant.1360), dimensions={0,1,2}, to_apply=%region_1426.37333
  %all-reduce.544 = f32[] all-reduce(%reduce.1394), channel_id=1347, replica_groups=[1,8]<=[8], use_global_device_ids=true, to_apply=%region_1426.37333.clone
  %convert_element_type.5086 = bf16[] convert(%all-reduce.544)
  %add.4608 = bf16[] add(%add.4607, %convert_element_type.5086)
  %convert_element_type.5087 = f32[1,14336,4096]{2,1,0} convert(%integer_pow.74)
  %reduce.1395 = f32[] reduce(%convert_element_type.5087, %constant.1360), dimensions={0,1,2}, to_apply=%region_1427.37342
  %all-reduce.545 = f32[] all-reduce(%reduce.1395), channel_id=1348, replica_groups=[1,8]<=[8], use_global_device_ids=true, to_apply=%region_1427.37342.clone
  %convert_element_type.5088 = bf16[] convert(%all-reduce.545)
  %add.4609 = bf16[] add(%add.4608, %convert_element_type.5088)
  %convert_element_type.5089 = f32[4096]{0} convert(%integer_pow.75)
  %reduce.1396 = f32[] reduce(%convert_element_type.5089, %constant.1360), dimensions={0}, to_apply=%region_1428.37351
  %convert_element_type.5090 = bf16[] convert(%reduce.1396)
  %add.4610 = bf16[] add(%add.4609, %convert_element_type.5090)
  %convert_element_type.5091 = f32[4096]{0} convert(%integer_pow.76)
  %reduce.1397 = f32[] reduce(%convert_element_type.5091, %constant.1360), dimensions={0}, to_apply=%region_1429.37360
  %convert_element_type.5092 = bf16[] convert(%reduce.1397)
  %add.4611 = bf16[] add(%add.4610, %convert_element_type.5092)
  %convert_element_type.5093 = f32[512,8,128]{2,1,0} convert(%integer_pow.77)
  %reduce.1398 = f32[] reduce(%convert_element_type.5093, %constant.1360), dimensions={0,1,2}, to_apply=%region_1430.37369
  %all-reduce.546 = f32[] all-reduce(%reduce.1398), channel_id=1349, replica_groups=[1,8]<=[8], use_global_device_ids=true, to_apply=%region_1430.37369.clone
  %convert_element_type.5094 = bf16[] convert(%all-reduce.546)
  %add.4612 = bf16[] add(%add.4611, %convert_element_type.5094)
  %convert_element_type.5097 = f32[32,128,512]{2,1,0} convert(%integer_pow.78)
  %reduce.1399 = f32[] reduce(%convert_element_type.5097, %constant.1360), dimensions={0,1,2}, to_apply=%region_1431.37378
  %all-reduce.547 = f32[] all-reduce(%reduce.1399), channel_id=1350, replica_groups=[1,8]<=[8], use_global_device_ids=true, to_apply=%region_1431.37378.clone
  %convert_element_type.5098 = bf16[] convert(%all-reduce.547)
  %add.4613 = bf16[] add(%add.4612, %convert_element_type.5098)
  %convert_element_type.5099 = f32[512,32,128]{2,1,0} convert(%integer_pow.79)
  %reduce.1400 = f32[] reduce(%convert_element_type.5099, %constant.1360), dimensions={0,1,2}, to_apply=%region_1432.37387
  %all-reduce.548 = f32[] all-reduce(%reduce.1400), channel_id=1351, replica_groups=[1,8]<=[8], use_global_device_ids=true, to_apply=%region_1432.37387.clone
  %convert_element_type.5100 = bf16[] convert(%all-reduce.548)
  %add.4614 = bf16[] add(%add.4613, %convert_element_type.5100)
  %convert_element_type.5101 = f32[512,8,128]{2,1,0} convert(%integer_pow.80)
  %reduce.1401 = f32[] reduce(%convert_element_type.5101, %constant.1360), dimensions={0,1,2}, to_apply=%region_1433.37396
  %all-reduce.549 = f32[] all-reduce(%reduce.1401), channel_id=1352, replica_groups=[1,8]<=[8], use_global_device_ids=true, to_apply=%region_1433.37396.clone
  %convert_element_type.5102 = bf16[] convert(%all-reduce.549)
  %add.4615 = bf16[] add(%add.4614, %convert_element_type.5102)
  %convert_element_type.5103 = f32[512,8]{1,0} convert(%integer_pow.81)
  %reduce.1402 = f32[] reduce(%convert_element_type.5103, %constant.1360), dimensions={0,1}, to_apply=%region_1434.37405
  %all-reduce.550 = f32[] all-reduce(%reduce.1402), channel_id=1353, replica_groups=[1,8]<=[8], use_global_device_ids=true, to_apply=%region_1434.37405.clone
  %convert_element_type.5104 = bf16[] convert(%all-reduce.550)
  %add.4616 = bf16[] add(%add.4615, %convert_element_type.5104)
  %convert_element_type.5105 = f32[1,4096,14336]{2,1,0} convert(%integer_pow.82)
  %reduce.1403 = f32[] reduce(%convert_element_type.5105, %constant.1360), dimensions={0,1,2}, to_apply=%region_1435.37414
  %all-reduce.551 = f32[] all-reduce(%reduce.1403), channel_id=1354, replica_groups=[1,8]<=[8], use_global_device_ids=true, to_apply=%region_1435.37414.clone
  %convert_element_type.5106 = bf16[] convert(%all-reduce.551)
  %add.4617 = bf16[] add(%add.4616, %convert_element_type.5106)
  %convert_element_type.5107 = f32[1,4096,14336]{2,1,0} convert(%integer_pow.83)
  %reduce.1404 = f32[] reduce(%convert_element_type.5107, %constant.1360), dimensions={0,1,2}, to_apply=%region_1436.37423
  %all-reduce.552 = f32[] all-reduce(%reduce.1404), channel_id=1355, replica_groups=[1,8]<=[8], use_global_device_ids=true, to_apply=%region_1436.37423.clone
  %convert_element_type.5108 = bf16[] convert(%all-reduce.552)
  %add.4618 = bf16[] add(%add.4617, %convert_element_type.5108)
  %convert_element_type.5109 = f32[1,14336,4096]{2,1,0} convert(%integer_pow.84)
  %reduce.1405 = f32[] reduce(%convert_element_type.5109, %constant.1360), dimensions={0,1,2}, to_apply=%region_1437.37432
  %all-reduce.553 = f32[] all-reduce(%reduce.1405), channel_id=1356, replica_groups=[1,8]<=[8], use_global_device_ids=true, to_apply=%region_1437.37432.clone
  %convert_element_type.5110 = bf16[] convert(%all-reduce.553)
  %add.4619 = bf16[] add(%add.4618, %convert_element_type.5110)
  %convert_element_type.5111 = f32[4096]{0} convert(%integer_pow.85)
  %reduce.1406 = f32[] reduce(%convert_element_type.5111, %constant.1360), dimensions={0}, to_apply=%region_1438.37441
  %convert_element_type.5112 = bf16[] convert(%reduce.1406)
  %add.4620 = bf16[] add(%add.4619, %convert_element_type.5112)
  %convert_element_type.5114 = f32[4096]{0} convert(%integer_pow.86)
  %reduce.1407 = f32[] reduce(%convert_element_type.5114, %constant.1360), dimensions={0}, to_apply=%region_1439.37450
  %convert_element_type.5115 = bf16[] convert(%reduce.1407)
  %add.4621 = bf16[] add(%add.4620, %convert_element_type.5115)
  %convert_element_type.5116 = f32[512,8,128]{2,1,0} convert(%integer_pow.87)
  %reduce.1408 = f32[] reduce(%convert_element_type.5116, %constant.1360), dimensions={0,1,2}, to_apply=%region_1440.37459
  %all-reduce.554 = f32[] all-reduce(%reduce.1408), channel_id=1357, replica_groups=[1,8]<=[8], use_global_device_ids=true, to_apply=%region_1440.37459.clone
  %convert_element_type.5118 = bf16[] convert(%all-reduce.554)
  %add.4623 = bf16[] add(%add.4621, %convert_element_type.5118)
  %convert_element_type.5119 = f32[32,128,512]{2,1,0} convert(%integer_pow.88)
  %reduce.1409 = f32[] reduce(%convert_element_type.5119, %constant.1360), dimensions={0,1,2}, to_apply=%region_1441.37468
  %all-reduce.555 = f32[] all-reduce(%reduce.1409), channel_id=1358, replica_groups=[1,8]<=[8], use_global_device_ids=true, to_apply=%region_1441.37468.clone
  %convert_element_type.5120 = bf16[] convert(%all-reduce.555)
  %add.4624 = bf16[] add(%add.4623, %convert_element_type.5120)
  %convert_element_type.5121 = f32[512,32,128]{2,1,0} convert(%integer_pow.89)
  %reduce.1410 = f32[] reduce(%convert_element_type.5121, %constant.1360), dimensions={0,1,2}, to_apply=%region_1442.37477
  %all-reduce.556 = f32[] all-reduce(%reduce.1410), channel_id=1359, replica_groups=[1,8]<=[8], use_global_device_ids=true, to_apply=%region_1442.37477.clone
  %convert_element_type.5122 = bf16[] convert(%all-reduce.556)
  %add.4625 = bf16[] add(%add.4624, %convert_element_type.5122)
  %convert_element_type.5123 = f32[512,8,128]{2,1,0} convert(%integer_pow.90)
  %reduce.1411 = f32[] reduce(%convert_element_type.5123, %constant.1360), dimensions={0,1,2}, to_apply=%region_1443.37486
  %all-reduce.557 = f32[] all-reduce(%reduce.1411), channel_id=1360, replica_groups=[1,8]<=[8], use_global_device_ids=true, to_apply=%region_1443.37486.clone
  %convert_element_type.5125 = bf16[] convert(%all-reduce.557)
  %add.4626 = bf16[] add(%add.4625, %convert_element_type.5125)
  %convert_element_type.5126 = f32[512,8]{1,0} convert(%integer_pow.91)
  %reduce.1412 = f32[] reduce(%convert_element_type.5126, %constant.1360), dimensions={0,1}, to_apply=%region_1444.37495
  %all-reduce.558 = f32[] all-reduce(%reduce.1412), channel_id=1361, replica_groups=[1,8]<=[8], use_global_device_ids=true, to_apply=%region_1444.37495.clone
  %convert_element_type.5127 = bf16[] convert(%all-reduce.558)
  %add.4627 = bf16[] add(%add.4626, %convert_element_type.5127)
  %convert_element_type.5128 = f32[1,4096,14336]{2,1,0} convert(%integer_pow.92)
  %reduce.1413 = f32[] reduce(%convert_element_type.5128, %constant.1360), dimensions={0,1,2}, to_apply=%region_1445.37504
  %all-reduce.559 = f32[] all-reduce(%reduce.1413), channel_id=1362, replica_groups=[1,8]<=[8], use_global_device_ids=true, to_apply=%region_1445.37504.clone
  %convert_element_type.5129 = bf16[] convert(%all-reduce.559)
  %add.4628 = bf16[] add(%add.4627, %convert_element_type.5129)
  %convert_element_type.5130 = f32[1,4096,14336]{2,1,0} convert(%integer_pow.93)
  %reduce.1414 = f32[] reduce(%convert_element_type.5130, %constant.1360), dimensions={0,1,2}, to_apply=%region_1446.37513
  %all-reduce.560 = f32[] all-reduce(%reduce.1414), channel_id=1363, replica_groups=[1,8]<=[8], use_global_device_ids=true, to_apply=%region_1446.37513.clone
  %convert_element_type.5131 = bf16[] convert(%all-reduce.560)
  %add.4630 = bf16[] add(%add.4628, %convert_element_type.5131)
  %convert_element_type.5132 = f32[1,14336,4096]{2,1,0} convert(%integer_pow.94)
  %reduce.1415 = f32[] reduce(%convert_element_type.5132, %constant.1360), dimensions={0,1,2}, to_apply=%region_1447.37522
  %all-reduce.561 = f32[] all-reduce(%reduce.1415), channel_id=1364, replica_groups=[1,8]<=[8], use_global_device_ids=true, to_apply=%region_1447.37522.clone
  %convert_element_type.5133 = bf16[] convert(%all-reduce.561)
  %add.4631 = bf16[] add(%add.4630, %convert_element_type.5133)
  %convert_element_type.5134 = f32[4096]{0} convert(%integer_pow.95)
  %reduce.1416 = f32[] reduce(%convert_element_type.5134, %constant.1360), dimensions={0}, to_apply=%region_1448.37531
  %convert_element_type.5135 = bf16[] convert(%reduce.1416)
  %add.4632 = bf16[] add(%add.4631, %convert_element_type.5135)
  %convert_element_type.5137 = f32[4096]{0} convert(%integer_pow.96)
  %reduce.1417 = f32[] reduce(%convert_element_type.5137, %constant.1360), dimensions={0}, to_apply=%region_1449.37540
  %convert_element_type.5138 = bf16[] convert(%reduce.1417)
  %add.4633 = bf16[] add(%add.4632, %convert_element_type.5138)
  %convert_element_type.5139 = f32[512,8,128]{2,1,0} convert(%integer_pow.97)
  %reduce.1418 = f32[] reduce(%convert_element_type.5139, %constant.1360), dimensions={0,1,2}, to_apply=%region_1450.37549
  %all-reduce.562 = f32[] all-reduce(%reduce.1418), channel_id=1365, replica_groups=[1,8]<=[8], use_global_device_ids=true, to_apply=%region_1450.37549.clone
  %convert_element_type.5140 = bf16[] convert(%all-reduce.562)
  %add.4634 = bf16[] add(%add.4633, %convert_element_type.5140)
  %convert_element_type.5143 = f32[32,128,512]{2,1,0} convert(%integer_pow.98)
  %reduce.1419 = f32[] reduce(%convert_element_type.5143, %constant.1360), dimensions={0,1,2}, to_apply=%region_1451.37558
  %all-reduce.563 = f32[] all-reduce(%reduce.1419), channel_id=1366, replica_groups=[1,8]<=[8], use_global_device_ids=true, to_apply=%region_1451.37558.clone
  %convert_element_type.5144 = bf16[] convert(%all-reduce.563)
  %add.4635 = bf16[] add(%add.4634, %convert_element_type.5144)
  %convert_element_type.5145 = f32[512,32,128]{2,1,0} convert(%integer_pow.99)
  %reduce.1420 = f32[] reduce(%convert_element_type.5145, %constant.1360), dimensions={0,1,2}, to_apply=%region_1452.37567
  %all-reduce.564 = f32[] all-reduce(%reduce.1420), channel_id=1367, replica_groups=[1,8]<=[8], use_global_device_ids=true, to_apply=%region_1452.37567.clone
  %convert_element_type.5146 = bf16[] convert(%all-reduce.564)
  %add.4636 = bf16[] add(%add.4635, %convert_element_type.5146)
  %convert_element_type.5147 = f32[512,8,128]{2,1,0} convert(%integer_pow.100)
  %reduce.1421 = f32[] reduce(%convert_element_type.5147, %constant.1360), dimensions={0,1,2}, to_apply=%region_1453.37576
  %all-reduce.565 = f32[] all-reduce(%reduce.1421), channel_id=1368, replica_groups=[1,8]<=[8], use_global_device_ids=true, to_apply=%region_1453.37576.clone
  %convert_element_type.5148 = bf16[] convert(%all-reduce.565)
  %add.4637 = bf16[] add(%add.4636, %convert_element_type.5148)
  %convert_element_type.5149 = f32[512,8]{1,0} convert(%integer_pow.101)
  %reduce.1422 = f32[] reduce(%convert_element_type.5149, %constant.1360), dimensions={0,1}, to_apply=%region_1454.37585
  %all-reduce.566 = f32[] all-reduce(%reduce.1422), channel_id=1369, replica_groups=[1,8]<=[8], use_global_device_ids=true, to_apply=%region_1454.37585.clone
  %convert_element_type.5150 = bf16[] convert(%all-reduce.566)
  %add.4638 = bf16[] add(%add.4637, %convert_element_type.5150)
  %convert_element_type.5151 = f32[1,4096,14336]{2,1,0} convert(%integer_pow.102)
  %reduce.1423 = f32[] reduce(%convert_element_type.5151, %constant.1360), dimensions={0,1,2}, to_apply=%region_1455.37594
  %all-reduce.567 = f32[] all-reduce(%reduce.1423), channel_id=1370, replica_groups=[1,8]<=[8], use_global_device_ids=true, to_apply=%region_1455.37594.clone
  %convert_element_type.5152 = bf16[] convert(%all-reduce.567)
  %add.4639 = bf16[] add(%add.4638, %convert_element_type.5152)
  %convert_element_type.5153 = f32[1,4096,14336]{2,1,0} convert(%integer_pow.103)
  %reduce.1424 = f32[] reduce(%convert_element_type.5153, %constant.1360), dimensions={0,1,2}, to_apply=%region_1456.37603
  %all-reduce.568 = f32[] all-reduce(%reduce.1424), channel_id=1371, replica_groups=[1,8]<=[8], use_global_device_ids=true, to_apply=%region_1456.37603.clone
  %convert_element_type.5154 = bf16[] convert(%all-reduce.568)
  %add.4640 = bf16[] add(%add.4639, %convert_element_type.5154)
  %convert_element_type.5157 = f32[1,14336,4096]{2,1,0} convert(%integer_pow.104)
  %reduce.1425 = f32[] reduce(%convert_element_type.5157, %constant.1360), dimensions={0,1,2}, to_apply=%region_1457.37612
  %all-reduce.569 = f32[] all-reduce(%reduce.1425), channel_id=1372, replica_groups=[1,8]<=[8], use_global_device_ids=true, to_apply=%region_1457.37612.clone
  %convert_element_type.5158 = bf16[] convert(%all-reduce.569)
  %add.4642 = bf16[] add(%add.4640, %convert_element_type.5158)
  %convert_element_type.5159 = f32[4096]{0} convert(%integer_pow.105)
  %reduce.1426 = f32[] reduce(%convert_element_type.5159, %constant.1360), dimensions={0}, to_apply=%region_1458.37621
  %convert_element_type.5161 = bf16[] convert(%reduce.1426)
  %add.4643 = bf16[] add(%add.4642, %convert_element_type.5161)
  %convert_element_type.5162 = f32[4096]{0} convert(%integer_pow.106)
  %reduce.1427 = f32[] reduce(%convert_element_type.5162, %constant.1360), dimensions={0}, to_apply=%region_1459.37630
  %convert_element_type.5163 = bf16[] convert(%reduce.1427)
  %add.4644 = bf16[] add(%add.4643, %convert_element_type.5163)
  %convert_element_type.5164 = f32[512,8,128]{2,1,0} convert(%integer_pow.107)
  %reduce.1428 = f32[] reduce(%convert_element_type.5164, %constant.1360), dimensions={0,1,2}, to_apply=%region_1460.37639
  %all-reduce.570 = f32[] all-reduce(%reduce.1428), channel_id=1373, replica_groups=[1,8]<=[8], use_global_device_ids=true, to_apply=%region_1460.37639.clone
  %convert_element_type.5166 = bf16[] convert(%all-reduce.570)
  %add.4645 = bf16[] add(%add.4644, %convert_element_type.5166)
  %convert_element_type.5167 = f32[32,128,512]{2,1,0} convert(%integer_pow.108)
  %reduce.1429 = f32[] reduce(%convert_element_type.5167, %constant.1360), dimensions={0,1,2}, to_apply=%region_1461.37648
  %all-reduce.571 = f32[] all-reduce(%reduce.1429), channel_id=1374, replica_groups=[1,8]<=[8], use_global_device_ids=true, to_apply=%region_1461.37648.clone
  %convert_element_type.5168 = bf16[] convert(%all-reduce.571)
  %add.4646 = bf16[] add(%add.4645, %convert_element_type.5168)
  %convert_element_type.5169 = f32[512,32,128]{2,1,0} convert(%integer_pow.109)
  %reduce.1430 = f32[] reduce(%convert_element_type.5169, %constant.1360), dimensions={0,1,2}, to_apply=%region_1462.37657
  %all-reduce.572 = f32[] all-reduce(%reduce.1430), channel_id=1375, replica_groups=[1,8]<=[8], use_global_device_ids=true, to_apply=%region_1462.37657.clone
  %convert_element_type.5170 = bf16[] convert(%all-reduce.572)
  %add.4647 = bf16[] add(%add.4646, %convert_element_type.5170)
  %convert_element_type.5171 = f32[512,8,128]{2,1,0} convert(%integer_pow.110)
  %reduce.1431 = f32[] reduce(%convert_element_type.5171, %constant.1360), dimensions={0,1,2}, to_apply=%region_1463.37666
  %all-reduce.573 = f32[] all-reduce(%reduce.1431), channel_id=1376, replica_groups=[1,8]<=[8], use_global_device_ids=true, to_apply=%region_1463.37666.clone
  %convert_element_type.5172 = bf16[] convert(%all-reduce.573)
  %add.4648 = bf16[] add(%add.4647, %convert_element_type.5172)
  %convert_element_type.5173 = f32[512,8]{1,0} convert(%integer_pow.111)
  %reduce.1432 = f32[] reduce(%convert_element_type.5173, %constant.1360), dimensions={0,1}, to_apply=%region_1464.37675
  %all-reduce.574 = f32[] all-reduce(%reduce.1432), channel_id=1377, replica_groups=[1,8]<=[8], use_global_device_ids=true, to_apply=%region_1464.37675.clone
  %convert_element_type.5174 = bf16[] convert(%all-reduce.574)
  %add.4649 = bf16[] add(%add.4648, %convert_element_type.5174)
  %convert_element_type.5175 = f32[1,4096,14336]{2,1,0} convert(%integer_pow.112)
  %reduce.1433 = f32[] reduce(%convert_element_type.5175, %constant.1360), dimensions={0,1,2}, to_apply=%region_1465.37684
  %all-reduce.575 = f32[] all-reduce(%reduce.1433), channel_id=1378, replica_groups=[1,8]<=[8], use_global_device_ids=true, to_apply=%region_1465.37684.clone
  %convert_element_type.5176 = bf16[] convert(%all-reduce.575)
  %add.4650 = bf16[] add(%add.4649, %convert_element_type.5176)
  %convert_element_type.5177 = f32[1,4096,14336]{2,1,0} convert(%integer_pow.113)
  %reduce.1434 = f32[] reduce(%convert_element_type.5177, %constant.1360), dimensions={0,1,2}, to_apply=%region_1466.37693
  %all-reduce.576 = f32[] all-reduce(%reduce.1434), channel_id=1379, replica_groups=[1,8]<=[8], use_global_device_ids=true, to_apply=%region_1466.37693.clone
  %convert_element_type.5178 = bf16[] convert(%all-reduce.576)
  %add.4651 = bf16[] add(%add.4650, %convert_element_type.5178)
  %convert_element_type.5179 = f32[1,14336,4096]{2,1,0} convert(%integer_pow.114)
  %reduce.1435 = f32[] reduce(%convert_element_type.5179, %constant.1360), dimensions={0,1,2}, to_apply=%region_1467.37702
  %all-reduce.577 = f32[] all-reduce(%reduce.1435), channel_id=1380, replica_groups=[1,8]<=[8], use_global_device_ids=true, to_apply=%region_1467.37702.clone
  %convert_element_type.5181 = bf16[] convert(%all-reduce.577)
  %add.4653 = bf16[] add(%add.4651, %convert_element_type.5181)
  %convert_element_type.5182 = f32[4096]{0} convert(%integer_pow.115)
  %reduce.1436 = f32[] reduce(%convert_element_type.5182, %constant.1360), dimensions={0}, to_apply=%region_1468.37711
  %convert_element_type.5183 = bf16[] convert(%reduce.1436)
  %add.4654 = bf16[] add(%add.4653, %convert_element_type.5183)
  %convert_element_type.5184 = f32[4096]{0} convert(%integer_pow.116)
  %reduce.1437 = f32[] reduce(%convert_element_type.5184, %constant.1360), dimensions={0}, to_apply=%region_1469.37720
  %convert_element_type.5185 = bf16[] convert(%reduce.1437)
  %add.4655 = bf16[] add(%add.4654, %convert_element_type.5185)
  %convert_element_type.5187 = f32[512,8,128]{2,1,0} convert(%integer_pow.117)
  %reduce.1438 = f32[] reduce(%convert_element_type.5187, %constant.1360), dimensions={0,1,2}, to_apply=%region_1470.37729
  %all-reduce.578 = f32[] all-reduce(%reduce.1438), channel_id=1381, replica_groups=[1,8]<=[8], use_global_device_ids=true, to_apply=%region_1470.37729.clone
  %convert_element_type.5188 = bf16[] convert(%all-reduce.578)
  %add.4656 = bf16[] add(%add.4655, %convert_element_type.5188)
  %convert_element_type.5189 = f32[32,128,512]{2,1,0} convert(%integer_pow.118)
  %reduce.1439 = f32[] reduce(%convert_element_type.5189, %constant.1360), dimensions={0,1,2}, to_apply=%region_1471.37738
  %all-reduce.579 = f32[] all-reduce(%reduce.1439), channel_id=1382, replica_groups=[1,8]<=[8], use_global_device_ids=true, to_apply=%region_1471.37738.clone
  %convert_element_type.5190 = bf16[] convert(%all-reduce.579)
  %add.4657 = bf16[] add(%add.4656, %convert_element_type.5190)
  %convert_element_type.5191 = f32[512,32,128]{2,1,0} convert(%integer_pow.119)
  %reduce.1440 = f32[] reduce(%convert_element_type.5191, %constant.1360), dimensions={0,1,2}, to_apply=%region_1472.37747
  %all-reduce.580 = f32[] all-reduce(%reduce.1440), channel_id=1383, replica_groups=[1,8]<=[8], use_global_device_ids=true, to_apply=%region_1472.37747.clone
  %convert_element_type.5192 = bf16[] convert(%all-reduce.580)
  %add.4658 = bf16[] add(%add.4657, %convert_element_type.5192)
  %convert_element_type.5193 = f32[512,8,128]{2,1,0} convert(%integer_pow.120)
  %reduce.1441 = f32[] reduce(%convert_element_type.5193, %constant.1360), dimensions={0,1,2}, to_apply=%region_1473.37756
  %all-reduce.581 = f32[] all-reduce(%reduce.1441), channel_id=1384, replica_groups=[1,8]<=[8], use_global_device_ids=true, to_apply=%region_1473.37756.clone
  %convert_element_type.5194 = bf16[] convert(%all-reduce.581)
  %add.4659 = bf16[] add(%add.4658, %convert_element_type.5194)
  %convert_element_type.5196 = f32[512,8]{1,0} convert(%integer_pow.121)
  %reduce.1442 = f32[] reduce(%convert_element_type.5196, %constant.1360), dimensions={0,1}, to_apply=%region_1474.37765
  %all-reduce.582 = f32[] all-reduce(%reduce.1442), channel_id=1385, replica_groups=[1,8]<=[8], use_global_device_ids=true, to_apply=%region_1474.37765.clone
  %convert_element_type.5197 = bf16[] convert(%all-reduce.582)
  %add.4660 = bf16[] add(%add.4659, %convert_element_type.5197)
  %convert_element_type.5199 = f32[1,4096,14336]{2,1,0} convert(%integer_pow.122)
  %reduce.1443 = f32[] reduce(%convert_element_type.5199, %constant.1360), dimensions={0,1,2}, to_apply=%region_1475.37774
  %all-reduce.583 = f32[] all-reduce(%reduce.1443), channel_id=1386, replica_groups=[1,8]<=[8], use_global_device_ids=true, to_apply=%region_1475.37774.clone
  %convert_element_type.5200 = bf16[] convert(%all-reduce.583)
  %add.4661 = bf16[] add(%add.4660, %convert_element_type.5200)
  %convert_element_type.5201 = f32[1,4096,14336]{2,1,0} convert(%integer_pow.123)
  %reduce.1444 = f32[] reduce(%convert_element_type.5201, %constant.1360), dimensions={0,1,2}, to_apply=%region_1476.37783
  %all-reduce.584 = f32[] all-reduce(%reduce.1444), channel_id=1387, replica_groups=[1,8]<=[8], use_global_device_ids=true, to_apply=%region_1476.37783.clone
  %convert_element_type.5202 = bf16[] convert(%all-reduce.584)
  %add.4663 = bf16[] add(%add.4661, %convert_element_type.5202)
  %convert_element_type.5203 = f32[1,14336,4096]{2,1,0} convert(%integer_pow.124)
  %reduce.1445 = f32[] reduce(%convert_element_type.5203, %constant.1360), dimensions={0,1,2}, to_apply=%region_1477.37792
  %all-reduce.585 = f32[] all-reduce(%reduce.1445), channel_id=1388, replica_groups=[1,8]<=[8], use_global_device_ids=true, to_apply=%region_1477.37792.clone
  %convert_element_type.5204 = bf16[] convert(%all-reduce.585)
  %add.4664 = bf16[] add(%add.4663, %convert_element_type.5204)
  %convert_element_type.5206 = f32[4096]{0} convert(%integer_pow.125)
  %reduce.1446 = f32[] reduce(%convert_element_type.5206, %constant.1360), dimensions={0}, to_apply=%region_1478.37801
  %convert_element_type.5207 = bf16[] convert(%reduce.1446)
  %add.4665 = bf16[] add(%add.4664, %convert_element_type.5207)
  %convert_element_type.5211 = f32[4096]{0} convert(%integer_pow.126)
  %reduce.1447 = f32[] reduce(%convert_element_type.5211, %constant.1360), dimensions={0}, to_apply=%region_1479.37810
  %convert_element_type.5212 = bf16[] convert(%reduce.1447)
  %add.4666 = bf16[] add(%add.4665, %convert_element_type.5212)
  %convert_element_type.5213 = f32[512,8,128]{2,1,0} convert(%integer_pow.127)
  %reduce.1448 = f32[] reduce(%convert_element_type.5213, %constant.1360), dimensions={0,1,2}, to_apply=%region_1480.37819
  %all-reduce.586 = f32[] all-reduce(%reduce.1448), channel_id=1389, replica_groups=[1,8]<=[8], use_global_device_ids=true, to_apply=%region_1480.37819.clone
  %convert_element_type.5214 = bf16[] convert(%all-reduce.586)
  %add.4667 = bf16[] add(%add.4666, %convert_element_type.5214)
  %convert_element_type.5216 = f32[32,128,512]{2,1,0} convert(%integer_pow.128)
  %reduce.1449 = f32[] reduce(%convert_element_type.5216, %constant.1360), dimensions={0,1,2}, to_apply=%region_1481.37828
  %all-reduce.587 = f32[] all-reduce(%reduce.1449), channel_id=1390, replica_groups=[1,8]<=[8], use_global_device_ids=true, to_apply=%region_1481.37828.clone
  %convert_element_type.5217 = bf16[] convert(%all-reduce.587)
  %add.4668 = bf16[] add(%add.4667, %convert_element_type.5217)
  %convert_element_type.5218 = f32[512,32,128]{2,1,0} convert(%integer_pow.129)
  %reduce.1450 = f32[] reduce(%convert_element_type.5218, %constant.1360), dimensions={0,1,2}, to_apply=%region_1482.37837
  %all-reduce.588 = f32[] all-reduce(%reduce.1450), channel_id=1391, replica_groups=[1,8]<=[8], use_global_device_ids=true, to_apply=%region_1482.37837.clone
  %convert_element_type.5219 = bf16[] convert(%all-reduce.588)
  %add.4669 = bf16[] add(%add.4668, %convert_element_type.5219)
  %convert_element_type.5220 = f32[512,8,128]{2,1,0} convert(%integer_pow.130)
  %reduce.1451 = f32[] reduce(%convert_element_type.5220, %constant.1360), dimensions={0,1,2}, to_apply=%region_1483.37846
  %all-reduce.589 = f32[] all-reduce(%reduce.1451), channel_id=1392, replica_groups=[1,8]<=[8], use_global_device_ids=true, to_apply=%region_1483.37846.clone
  %convert_element_type.5222 = bf16[] convert(%all-reduce.589)
  %add.4670 = bf16[] add(%add.4669, %convert_element_type.5222)
  %convert_element_type.5223 = f32[512,8]{1,0} convert(%integer_pow.131)
  %reduce.1452 = f32[] reduce(%convert_element_type.5223, %constant.1360), dimensions={0,1}, to_apply=%region_1484.37855
  %all-reduce.590 = f32[] all-reduce(%reduce.1452), channel_id=1393, replica_groups=[1,8]<=[8], use_global_device_ids=true, to_apply=%region_1484.37855.clone
  %convert_element_type.5224 = bf16[] convert(%all-reduce.590)
  %add.4671 = bf16[] add(%add.4670, %convert_element_type.5224)
  %convert_element_type.5225 = f32[1,4096,14336]{2,1,0} convert(%integer_pow.132)
  %reduce.1453 = f32[] reduce(%convert_element_type.5225, %constant.1360), dimensions={0,1,2}, to_apply=%region_1485.37864
  %all-reduce.591 = f32[] all-reduce(%reduce.1453), channel_id=1394, replica_groups=[1,8]<=[8], use_global_device_ids=true, to_apply=%region_1485.37864.clone
  %convert_element_type.5226 = bf16[] convert(%all-reduce.591)
  %add.4672 = bf16[] add(%add.4671, %convert_element_type.5226)
  %convert_element_type.5227 = f32[1,4096,14336]{2,1,0} convert(%integer_pow.133)
  %reduce.1454 = f32[] reduce(%convert_element_type.5227, %constant.1360), dimensions={0,1,2}, to_apply=%region_1486.37873
  %all-reduce.592 = f32[] all-reduce(%reduce.1454), channel_id=1395, replica_groups=[1,8]<=[8], use_global_device_ids=true, to_apply=%region_1486.37873.clone
  %convert_element_type.5228 = bf16[] convert(%all-reduce.592)
  %add.4673 = bf16[] add(%add.4672, %convert_element_type.5228)
  %convert_element_type.5229 = f32[1,14336,4096]{2,1,0} convert(%integer_pow.134)
  %reduce.1455 = f32[] reduce(%convert_element_type.5229, %constant.1360), dimensions={0,1,2}, to_apply=%region_1487.37882
  %all-reduce.593 = f32[] all-reduce(%reduce.1455), channel_id=1396, replica_groups=[1,8]<=[8], use_global_device_ids=true, to_apply=%region_1487.37882.clone
  %convert_element_type.5230 = bf16[] convert(%all-reduce.593)
  %add.4674 = bf16[] add(%add.4673, %convert_element_type.5230)
  %convert_element_type.5231 = f32[4096]{0} convert(%integer_pow.135)
  %reduce.1456 = f32[] reduce(%convert_element_type.5231, %constant.1360), dimensions={0}, to_apply=%region_1488.37891
  %convert_element_type.5232 = bf16[] convert(%reduce.1456)
  %add.4675 = bf16[] add(%add.4674, %convert_element_type.5232)
  %convert_element_type.5233 = f32[4096]{0} convert(%integer_pow.136)
  %reduce.1457 = f32[] reduce(%convert_element_type.5233, %constant.1360), dimensions={0}, to_apply=%region_1489.37900
  %convert_element_type.5234 = bf16[] convert(%reduce.1457)
  %add.4676 = bf16[] add(%add.4675, %convert_element_type.5234)
  %convert_element_type.5236 = f32[512,8,128]{2,1,0} convert(%integer_pow.137)
  %reduce.1458 = f32[] reduce(%convert_element_type.5236, %constant.1360), dimensions={0,1,2}, to_apply=%region_1490.37909
  %all-reduce.594 = f32[] all-reduce(%reduce.1458), channel_id=1397, replica_groups=[1,8]<=[8], use_global_device_ids=true, to_apply=%region_1490.37909.clone
  %convert_element_type.5237 = bf16[] convert(%all-reduce.594)
  %add.4677 = bf16[] add(%add.4676, %convert_element_type.5237)
  %convert_element_type.5239 = f32[32,128,512]{2,1,0} convert(%integer_pow.138)
  %reduce.1459 = f32[] reduce(%convert_element_type.5239, %constant.1360), dimensions={0,1,2}, to_apply=%region_1491.37918
  %all-reduce.595 = f32[] all-reduce(%reduce.1459), channel_id=1398, replica_groups=[1,8]<=[8], use_global_device_ids=true, to_apply=%region_1491.37918.clone
  %convert_element_type.5240 = bf16[] convert(%all-reduce.595)
  %add.4678 = bf16[] add(%add.4677, %convert_element_type.5240)
  %convert_element_type.5241 = f32[512,32,128]{2,1,0} convert(%integer_pow.139)
  %reduce.1460 = f32[] reduce(%convert_element_type.5241, %constant.1360), dimensions={0,1,2}, to_apply=%region_1492.37927
  %all-reduce.596 = f32[] all-reduce(%reduce.1460), channel_id=1399, replica_groups=[1,8]<=[8], use_global_device_ids=true, to_apply=%region_1492.37927.clone
  %convert_element_type.5243 = bf16[] convert(%all-reduce.596)
  %add.4679 = bf16[] add(%add.4678, %convert_element_type.5243)
  %convert_element_type.5244 = f32[512,8,128]{2,1,0} convert(%integer_pow.140)
  %reduce.1461 = f32[] reduce(%convert_element_type.5244, %constant.1360), dimensions={0,1,2}, to_apply=%region_1493.37936
  %all-reduce.597 = f32[] all-reduce(%reduce.1461), channel_id=1400, replica_groups=[1,8]<=[8], use_global_device_ids=true, to_apply=%region_1493.37936.clone
  %convert_element_type.5245 = bf16[] convert(%all-reduce.597)
  %add.4680 = bf16[] add(%add.4679, %convert_element_type.5245)
  %convert_element_type.5246 = f32[512,8]{1,0} convert(%integer_pow.141)
  %reduce.1462 = f32[] reduce(%convert_element_type.5246, %constant.1360), dimensions={0,1}, to_apply=%region_1494.37945
  %all-reduce.598 = f32[] all-reduce(%reduce.1462), channel_id=1401, replica_groups=[1,8]<=[8], use_global_device_ids=true, to_apply=%region_1494.37945.clone
  %convert_element_type.5247 = bf16[] convert(%all-reduce.598)
  %add.4681 = bf16[] add(%add.4680, %convert_element_type.5247)
  %convert_element_type.5249 = f32[1,4096,14336]{2,1,0} convert(%integer_pow.142)
  %reduce.1463 = f32[] reduce(%convert_element_type.5249, %constant.1360), dimensions={0,1,2}, to_apply=%region_1495.37954
  %all-reduce.599 = f32[] all-reduce(%reduce.1463), channel_id=1402, replica_groups=[1,8]<=[8], use_global_device_ids=true, to_apply=%region_1495.37954.clone
  %convert_element_type.5251 = bf16[] convert(%all-reduce.599)
  %add.4682 = bf16[] add(%add.4681, %convert_element_type.5251)
  %convert_element_type.5252 = f32[1,4096,14336]{2,1,0} convert(%integer_pow.143)
  %reduce.1464 = f32[] reduce(%convert_element_type.5252, %constant.1360), dimensions={0,1,2}, to_apply=%region_1496.37963
  %all-reduce.600 = f32[] all-reduce(%reduce.1464), channel_id=1403, replica_groups=[1,8]<=[8], use_global_device_ids=true, to_apply=%region_1496.37963.clone
  %convert_element_type.5253 = bf16[] convert(%all-reduce.600)
  %add.4683 = bf16[] add(%add.4682, %convert_element_type.5253)
  %convert_element_type.5255 = f32[1,14336,4096]{2,1,0} convert(%integer_pow.144)
  %reduce.1465 = f32[] reduce(%convert_element_type.5255, %constant.1360), dimensions={0,1,2}, to_apply=%region_1497.37972
  %all-reduce.601 = f32[] all-reduce(%reduce.1465), channel_id=1404, replica_groups=[1,8]<=[8], use_global_device_ids=true, to_apply=%region_1497.37972.clone
  %convert_element_type.5256 = bf16[] convert(%all-reduce.601)
  %add.4684 = bf16[] add(%add.4683, %convert_element_type.5256)
  %convert_element_type.5257 = f32[4096]{0} convert(%integer_pow.145)
  %reduce.1466 = f32[] reduce(%convert_element_type.5257, %constant.1360), dimensions={0}, to_apply=%region_1498.37981
  %convert_element_type.5258 = bf16[] convert(%reduce.1466)
  %add.4685 = bf16[] add(%add.4684, %convert_element_type.5258)
  %convert_element_type.5259 = f32[4096]{0} convert(%integer_pow.146)
  %reduce.1467 = f32[] reduce(%convert_element_type.5259, %constant.1360), dimensions={0}, to_apply=%region_1499.37990
  %convert_element_type.5260 = bf16[] convert(%reduce.1467)
  %add.4686 = bf16[] add(%add.4685, %convert_element_type.5260)
  %convert_element_type.5261 = f32[512,8,128]{2,1,0} convert(%integer_pow.147)
  %reduce.1468 = f32[] reduce(%convert_element_type.5261, %constant.1360), dimensions={0,1,2}, to_apply=%region_1500.37999
  %all-reduce.602 = f32[] all-reduce(%reduce.1468), channel_id=1405, replica_groups=[1,8]<=[8], use_global_device_ids=true, to_apply=%region_1500.37999.clone
  %convert_element_type.5262 = bf16[] convert(%all-reduce.602)
  %add.4687 = bf16[] add(%add.4686, %convert_element_type.5262)
  %convert_element_type.5263 = f32[32,128,512]{2,1,0} convert(%integer_pow.148)
  %reduce.1469 = f32[] reduce(%convert_element_type.5263, %constant.1360), dimensions={0,1,2}, to_apply=%region_1501.38008
  %all-reduce.603 = f32[] all-reduce(%reduce.1469), channel_id=1406, replica_groups=[1,8]<=[8], use_global_device_ids=true, to_apply=%region_1501.38008.clone
  %convert_element_type.5264 = bf16[] convert(%all-reduce.603)
  %add.4688 = bf16[] add(%add.4687, %convert_element_type.5264)
  %convert_element_type.5265 = f32[512,32,128]{2,1,0} convert(%integer_pow.149)
  %reduce.1470 = f32[] reduce(%convert_element_type.5265, %constant.1360), dimensions={0,1,2}, to_apply=%region_1502.38017
  %all-reduce.604 = f32[] all-reduce(%reduce.1470), channel_id=1407, replica_groups=[1,8]<=[8], use_global_device_ids=true, to_apply=%region_1502.38017.clone
  %convert_element_type.5266 = bf16[] convert(%all-reduce.604)
  %add.4689 = bf16[] add(%add.4688, %convert_element_type.5266)
  %convert_element_type.5267 = f32[512,8,128]{2,1,0} convert(%integer_pow.150)
  %reduce.1471 = f32[] reduce(%convert_element_type.5267, %constant.1360), dimensions={0,1,2}, to_apply=%region_1503.38026
  %all-reduce.605 = f32[] all-reduce(%reduce.1471), channel_id=1408, replica_groups=[1,8]<=[8], use_global_device_ids=true, to_apply=%region_1503.38026.clone
  %convert_element_type.5268 = bf16[] convert(%all-reduce.605)
  %add.4691 = bf16[] add(%add.4689, %convert_element_type.5268)
  %convert_element_type.5269 = f32[512,8]{1,0} convert(%integer_pow.151)
  %reduce.1472 = f32[] reduce(%convert_element_type.5269, %constant.1360), dimensions={0,1}, to_apply=%region_1504.38035
  %all-reduce.606 = f32[] all-reduce(%reduce.1472), channel_id=1409, replica_groups=[1,8]<=[8], use_global_device_ids=true, to_apply=%region_1504.38035.clone
  %convert_element_type.5270 = bf16[] convert(%all-reduce.606)
  %add.4692 = bf16[] add(%add.4691, %convert_element_type.5270)
  %convert_element_type.5271 = f32[1,4096,14336]{2,1,0} convert(%integer_pow.152)
  %reduce.1473 = f32[] reduce(%convert_element_type.5271, %constant.1360), dimensions={0,1,2}, to_apply=%region_1505.38044
  %all-reduce.607 = f32[] all-reduce(%reduce.1473), channel_id=1410, replica_groups=[1,8]<=[8], use_global_device_ids=true, to_apply=%region_1505.38044.clone
  %convert_element_type.5272 = bf16[] convert(%all-reduce.607)
  %add.4693 = bf16[] add(%add.4692, %convert_element_type.5272)
  %convert_element_type.5273 = f32[1,4096,14336]{2,1,0} convert(%integer_pow.153)
  %reduce.1474 = f32[] reduce(%convert_element_type.5273, %constant.1360), dimensions={0,1,2}, to_apply=%region_1506.38053
  %all-reduce.608 = f32[] all-reduce(%reduce.1474), channel_id=1411, replica_groups=[1,8]<=[8], use_global_device_ids=true, to_apply=%region_1506.38053.clone
  %convert_element_type.5274 = bf16[] convert(%all-reduce.608)
  %add.4694 = bf16[] add(%add.4693, %convert_element_type.5274)
  %convert_element_type.5275 = f32[1,14336,4096]{2,1,0} convert(%integer_pow.154)
  %reduce.1475 = f32[] reduce(%convert_element_type.5275, %constant.1360), dimensions={0,1,2}, to_apply=%region_1507.38062
  %all-reduce.609 = f32[] all-reduce(%reduce.1475), channel_id=1412, replica_groups=[1,8]<=[8], use_global_device_ids=true, to_apply=%region_1507.38062.clone
  %convert_element_type.5276 = bf16[] convert(%all-reduce.609)
  %add.4695 = bf16[] add(%add.4694, %convert_element_type.5276)
  %convert_element_type.5277 = f32[4096]{0} convert(%integer_pow.155)
  %reduce.1476 = f32[] reduce(%convert_element_type.5277, %constant.1360), dimensions={0}, to_apply=%region_1508.38071
  %convert_element_type.5278 = bf16[] convert(%reduce.1476)
  %add.4696 = bf16[] add(%add.4695, %convert_element_type.5278)
  %convert_element_type.5279 = f32[4096]{0} convert(%integer_pow.156)
  %reduce.1477 = f32[] reduce(%convert_element_type.5279, %constant.1360), dimensions={0}, to_apply=%region_1509.38080
  %convert_element_type.5280 = bf16[] convert(%reduce.1477)
  %add.4697 = bf16[] add(%add.4696, %convert_element_type.5280)
  %convert_element_type.5282 = f32[512,8,128]{2,1,0} convert(%integer_pow.157)
  %reduce.1478 = f32[] reduce(%convert_element_type.5282, %constant.1360), dimensions={0,1,2}, to_apply=%region_1510.38089
  %all-reduce.610 = f32[] all-reduce(%reduce.1478), channel_id=1413, replica_groups=[1,8]<=[8], use_global_device_ids=true, to_apply=%region_1510.38089.clone
  %convert_element_type.5283 = bf16[] convert(%all-reduce.610)
  %add.4698 = bf16[] add(%add.4697, %convert_element_type.5283)
  %convert_element_type.5284 = f32[32,128,512]{2,1,0} convert(%integer_pow.158)
  %reduce.1479 = f32[] reduce(%convert_element_type.5284, %constant.1360), dimensions={0,1,2}, to_apply=%region_1511.38098
  %all-reduce.611 = f32[] all-reduce(%reduce.1479), channel_id=1414, replica_groups=[1,8]<=[8], use_global_device_ids=true, to_apply=%region_1511.38098.clone
  %convert_element_type.5285 = bf16[] convert(%all-reduce.611)
  %add.4699 = bf16[] add(%add.4698, %convert_element_type.5285)
  %convert_element_type.5286 = f32[512,32,128]{2,1,0} convert(%integer_pow.159)
  %reduce.1480 = f32[] reduce(%convert_element_type.5286, %constant.1360), dimensions={0,1,2}, to_apply=%region_1512.38107
  %all-reduce.612 = f32[] all-reduce(%reduce.1480), channel_id=1415, replica_groups=[1,8]<=[8], use_global_device_ids=true, to_apply=%region_1512.38107.clone
  %convert_element_type.5287 = bf16[] convert(%all-reduce.612)
  %add.4700 = bf16[] add(%add.4699, %convert_element_type.5287)
  %convert_element_type.5288 = f32[512,8,128]{2,1,0} convert(%integer_pow.160)
  %reduce.1481 = f32[] reduce(%convert_element_type.5288, %constant.1360), dimensions={0,1,2}, to_apply=%region_1513.38116
  %all-reduce.613 = f32[] all-reduce(%reduce.1481), channel_id=1416, replica_groups=[1,8]<=[8], use_global_device_ids=true, to_apply=%region_1513.38116.clone
  %convert_element_type.5289 = bf16[] convert(%all-reduce.613)
  %add.4701 = bf16[] add(%add.4700, %convert_element_type.5289)
  %convert_element_type.5291 = f32[512,8]{1,0} convert(%integer_pow.161)
  %reduce.1482 = f32[] reduce(%convert_element_type.5291, %constant.1360), dimensions={0,1}, to_apply=%region_1514.38125
  %all-reduce.614 = f32[] all-reduce(%reduce.1482), channel_id=1417, replica_groups=[1,8]<=[8], use_global_device_ids=true, to_apply=%region_1514.38125.clone
  %convert_element_type.5292 = bf16[] convert(%all-reduce.614)
  %add.4702 = bf16[] add(%add.4701, %convert_element_type.5292)
  %convert_element_type.5293 = f32[1,4096,14336]{2,1,0} convert(%integer_pow.162)
  %reduce.1483 = f32[] reduce(%convert_element_type.5293, %constant.1360), dimensions={0,1,2}, to_apply=%region_1515.38134
  %all-reduce.615 = f32[] all-reduce(%reduce.1483), channel_id=1418, replica_groups=[1,8]<=[8], use_global_device_ids=true, to_apply=%region_1515.38134.clone
  %convert_element_type.5294 = bf16[] convert(%all-reduce.615)
  %add.4703 = bf16[] add(%add.4702, %convert_element_type.5294)
  %convert_element_type.5295 = f32[1,4096,14336]{2,1,0} convert(%integer_pow.163)
  %reduce.1484 = f32[] reduce(%convert_element_type.5295, %constant.1360), dimensions={0,1,2}, to_apply=%region_1516.38143
  %all-reduce.616 = f32[] all-reduce(%reduce.1484), channel_id=1419, replica_groups=[1,8]<=[8], use_global_device_ids=true, to_apply=%region_1516.38143.clone
  %convert_element_type.5296 = bf16[] convert(%all-reduce.616)
  %add.4704 = bf16[] add(%add.4703, %convert_element_type.5296)
  %convert_element_type.5297 = f32[1,14336,4096]{2,1,0} convert(%integer_pow.164)
  %reduce.1485 = f32[] reduce(%convert_element_type.5297, %constant.1360), dimensions={0,1,2}, to_apply=%region_1517.38152
  %all-reduce.617 = f32[] all-reduce(%reduce.1485), channel_id=1420, replica_groups=[1,8]<=[8], use_global_device_ids=true, to_apply=%region_1517.38152.clone
  %convert_element_type.5299 = bf16[] convert(%all-reduce.617)
  %add.4705 = bf16[] add(%add.4704, %convert_element_type.5299)
  %convert_element_type.5300 = f32[4096]{0} convert(%integer_pow.165)
  %reduce.1486 = f32[] reduce(%convert_element_type.5300, %constant.1360), dimensions={0}, to_apply=%region_1518.38161
  %convert_element_type.5301 = bf16[] convert(%reduce.1486)
  %add.4706 = bf16[] add(%add.4705, %convert_element_type.5301)
  %convert_element_type.5302 = f32[4096]{0} convert(%integer_pow.166)
  %reduce.1487 = f32[] reduce(%convert_element_type.5302, %constant.1360), dimensions={0}, to_apply=%region_1519.38170
  %convert_element_type.5303 = bf16[] convert(%reduce.1487)
  %add.4707 = bf16[] add(%add.4706, %convert_element_type.5303)
  %convert_element_type.5304 = f32[512,8,128]{2,1,0} convert(%integer_pow.167)
  %reduce.1488 = f32[] reduce(%convert_element_type.5304, %constant.1360), dimensions={0,1,2}, to_apply=%region_1520.38179
  %all-reduce.618 = f32[] all-reduce(%reduce.1488), channel_id=1421, replica_groups=[1,8]<=[8], use_global_device_ids=true, to_apply=%region_1520.38179.clone
  %convert_element_type.5305 = bf16[] convert(%all-reduce.618)
  %add.4708 = bf16[] add(%add.4707, %convert_element_type.5305)
  %convert_element_type.5307 = f32[32,128,512]{2,1,0} convert(%integer_pow.168)
  %reduce.1489 = f32[] reduce(%convert_element_type.5307, %constant.1360), dimensions={0,1,2}, to_apply=%region_1521.38188
  %all-reduce.619 = f32[] all-reduce(%reduce.1489), channel_id=1422, replica_groups=[1,8]<=[8], use_global_device_ids=true, to_apply=%region_1521.38188.clone
  %convert_element_type.5308 = bf16[] convert(%all-reduce.619)
  %add.4709 = bf16[] add(%add.4708, %convert_element_type.5308)
  %convert_element_type.5309 = f32[512,32,128]{2,1,0} convert(%integer_pow.169)
  %reduce.1490 = f32[] reduce(%convert_element_type.5309, %constant.1360), dimensions={0,1,2}, to_apply=%region_1522.38197
  %all-reduce.620 = f32[] all-reduce(%reduce.1490), channel_id=1423, replica_groups=[1,8]<=[8], use_global_device_ids=true, to_apply=%region_1522.38197.clone
  %convert_element_type.5311 = bf16[] convert(%all-reduce.620)
  %add.4710 = bf16[] add(%add.4709, %convert_element_type.5311)
  %convert_element_type.5312 = f32[512,8,128]{2,1,0} convert(%integer_pow.170)
  %reduce.1491 = f32[] reduce(%convert_element_type.5312, %constant.1360), dimensions={0,1,2}, to_apply=%region_1523.38206
  %all-reduce.621 = f32[] all-reduce(%reduce.1491), channel_id=1424, replica_groups=[1,8]<=[8], use_global_device_ids=true, to_apply=%region_1523.38206.clone
  %convert_element_type.5313 = bf16[] convert(%all-reduce.621)
  %add.4711 = bf16[] add(%add.4710, %convert_element_type.5313)
  %convert_element_type.5314 = f32[512,8]{1,0} convert(%integer_pow.171)
  %reduce.1492 = f32[] reduce(%convert_element_type.5314, %constant.1360), dimensions={0,1}, to_apply=%region_1524.38215
  %all-reduce.622 = f32[] all-reduce(%reduce.1492), channel_id=1425, replica_groups=[1,8]<=[8], use_global_device_ids=true, to_apply=%region_1524.38215.clone
  %convert_element_type.5315 = bf16[] convert(%all-reduce.622)
  %add.4712 = bf16[] add(%add.4711, %convert_element_type.5315)
  %convert_element_type.5316 = f32[1,4096,14336]{2,1,0} convert(%integer_pow.172)
  %reduce.1493 = f32[] reduce(%convert_element_type.5316, %constant.1360), dimensions={0,1,2}, to_apply=%region_1525.38224
  %all-reduce.623 = f32[] all-reduce(%reduce.1493), channel_id=1426, replica_groups=[1,8]<=[8], use_global_device_ids=true, to_apply=%region_1525.38224.clone
  %convert_element_type.5317 = bf16[] convert(%all-reduce.623)
  %add.4713 = bf16[] add(%add.4712, %convert_element_type.5317)
  %convert_element_type.5318 = f32[1,4096,14336]{2,1,0} convert(%integer_pow.173)
  %reduce.1494 = f32[] reduce(%convert_element_type.5318, %constant.1360), dimensions={0,1,2}, to_apply=%region_1526.38233
  %all-reduce.624 = f32[] all-reduce(%reduce.1494), channel_id=1427, replica_groups=[1,8]<=[8], use_global_device_ids=true, to_apply=%region_1526.38233.clone
  %convert_element_type.5319 = bf16[] convert(%all-reduce.624)
  %add.4714 = bf16[] add(%add.4713, %convert_element_type.5319)
  %convert_element_type.5320 = f32[1,14336,4096]{2,1,0} convert(%integer_pow.174)
  %reduce.1495 = f32[] reduce(%convert_element_type.5320, %constant.1360), dimensions={0,1,2}, to_apply=%region_1527.38242
  %all-reduce.625 = f32[] all-reduce(%reduce.1495), channel_id=1428, replica_groups=[1,8]<=[8], use_global_device_ids=true, to_apply=%region_1527.38242.clone
  %convert_element_type.5321 = bf16[] convert(%all-reduce.625)
  %add.4715 = bf16[] add(%add.4714, %convert_element_type.5321)
  %convert_element_type.5323 = f32[4096]{0} convert(%integer_pow.175)
  %reduce.1496 = f32[] reduce(%convert_element_type.5323, %constant.1360), dimensions={0}, to_apply=%region_1528.38251
  %convert_element_type.5324 = bf16[] convert(%reduce.1496)
  %add.4717 = bf16[] add(%add.4715, %convert_element_type.5324)
  %convert_element_type.5326 = f32[4096]{0} convert(%integer_pow.176)
  %reduce.1497 = f32[] reduce(%convert_element_type.5326, %constant.1360), dimensions={0}, to_apply=%region_1529.38260
  %convert_element_type.5327 = bf16[] convert(%reduce.1497)
  %add.4718 = bf16[] add(%add.4717, %convert_element_type.5327)
  %convert_element_type.5328 = f32[512,8,128]{2,1,0} convert(%integer_pow.177)
  %reduce.1498 = f32[] reduce(%convert_element_type.5328, %constant.1360), dimensions={0,1,2}, to_apply=%region_1530.38269
  %all-reduce.626 = f32[] all-reduce(%reduce.1498), channel_id=1429, replica_groups=[1,8]<=[8], use_global_device_ids=true, to_apply=%region_1530.38269.clone
  %convert_element_type.5329 = bf16[] convert(%all-reduce.626)
  %add.4719 = bf16[] add(%add.4718, %convert_element_type.5329)
  %convert_element_type.5330 = f32[32,128,512]{2,1,0} convert(%integer_pow.178)
  %reduce.1499 = f32[] reduce(%convert_element_type.5330, %constant.1360), dimensions={0,1,2}, to_apply=%region_1531.38278
  %all-reduce.627 = f32[] all-reduce(%reduce.1499), channel_id=1430, replica_groups=[1,8]<=[8], use_global_device_ids=true, to_apply=%region_1531.38278.clone
  %convert_element_type.5331 = bf16[] convert(%all-reduce.627)
  %add.4720 = bf16[] add(%add.4719, %convert_element_type.5331)
  %convert_element_type.5332 = f32[512,32,128]{2,1,0} convert(%integer_pow.179)
  %reduce.1500 = f32[] reduce(%convert_element_type.5332, %constant.1360), dimensions={0,1,2}, to_apply=%region_1532.38287
  %all-reduce.628 = f32[] all-reduce(%reduce.1500), channel_id=1431, replica_groups=[1,8]<=[8], use_global_device_ids=true, to_apply=%region_1532.38287.clone
  %convert_element_type.5333 = bf16[] convert(%all-reduce.628)
  %add.4721 = bf16[] add(%add.4720, %convert_element_type.5333)
  %convert_element_type.5334 = f32[512,8,128]{2,1,0} convert(%integer_pow.180)
  %reduce.1501 = f32[] reduce(%convert_element_type.5334, %constant.1360), dimensions={0,1,2}, to_apply=%region_1533.38296
  %all-reduce.629 = f32[] all-reduce(%reduce.1501), channel_id=1432, replica_groups=[1,8]<=[8], use_global_device_ids=true, to_apply=%region_1533.38296.clone
  %convert_element_type.5335 = bf16[] convert(%all-reduce.629)
  %add.4722 = bf16[] add(%add.4721, %convert_element_type.5335)
  %convert_element_type.5336 = f32[512,8]{1,0} convert(%integer_pow.181)
  %reduce.1502 = f32[] reduce(%convert_element_type.5336, %constant.1360), dimensions={0,1}, to_apply=%region_1534.38305
  %all-reduce.630 = f32[] all-reduce(%reduce.1502), channel_id=1433, replica_groups=[1,8]<=[8], use_global_device_ids=true, to_apply=%region_1534.38305.clone
  %convert_element_type.5337 = bf16[] convert(%all-reduce.630)
  %add.4724 = bf16[] add(%add.4722, %convert_element_type.5337)
  %convert_element_type.5338 = f32[1,4096,14336]{2,1,0} convert(%integer_pow.182)
  %reduce.1503 = f32[] reduce(%convert_element_type.5338, %constant.1360), dimensions={0,1,2}, to_apply=%region_1535.38314
  %all-reduce.631 = f32[] all-reduce(%reduce.1503), channel_id=1434, replica_groups=[1,8]<=[8], use_global_device_ids=true, to_apply=%region_1535.38314.clone
  %convert_element_type.5339 = bf16[] convert(%all-reduce.631)
  %add.4725 = bf16[] add(%add.4724, %convert_element_type.5339)
  %convert_element_type.5341 = f32[1,4096,14336]{2,1,0} convert(%integer_pow.183)
  %reduce.1504 = f32[] reduce(%convert_element_type.5341, %constant.1360), dimensions={0,1,2}, to_apply=%region_1536.38323
  %all-reduce.632 = f32[] all-reduce(%reduce.1504), channel_id=1435, replica_groups=[1,8]<=[8], use_global_device_ids=true, to_apply=%region_1536.38323.clone
  %convert_element_type.5342 = bf16[] convert(%all-reduce.632)
  %add.4727 = bf16[] add(%add.4725, %convert_element_type.5342)
  %convert_element_type.5343 = f32[1,14336,4096]{2,1,0} convert(%integer_pow.184)
  %reduce.1505 = f32[] reduce(%convert_element_type.5343, %constant.1360), dimensions={0,1,2}, to_apply=%region_1537.38332
  %all-reduce.633 = f32[] all-reduce(%reduce.1505), channel_id=1436, replica_groups=[1,8]<=[8], use_global_device_ids=true, to_apply=%region_1537.38332.clone
  %convert_element_type.5344 = bf16[] convert(%all-reduce.633)
  %add.4728 = bf16[] add(%add.4727, %convert_element_type.5344)
  %convert_element_type.5345 = f32[4096]{0} convert(%integer_pow.185)
  %reduce.1506 = f32[] reduce(%convert_element_type.5345, %constant.1360), dimensions={0}, to_apply=%region_1538.38341
  %convert_element_type.5346 = bf16[] convert(%reduce.1506)
  %add.4729 = bf16[] add(%add.4728, %convert_element_type.5346)
  %convert_element_type.5347 = f32[4096]{0} convert(%integer_pow.186)
  %reduce.1507 = f32[] reduce(%convert_element_type.5347, %constant.1360), dimensions={0}, to_apply=%region_1539.38350
  %convert_element_type.5348 = bf16[] convert(%reduce.1507)
  %add.4730 = bf16[] add(%add.4729, %convert_element_type.5348)
  %convert_element_type.5349 = f32[512,8,128]{2,1,0} convert(%integer_pow.187)
  %reduce.1508 = f32[] reduce(%convert_element_type.5349, %constant.1360), dimensions={0,1,2}, to_apply=%region_1540.38359
  %all-reduce.634 = f32[] all-reduce(%reduce.1508), channel_id=1437, replica_groups=[1,8]<=[8], use_global_device_ids=true, to_apply=%region_1540.38359.clone
  %convert_element_type.5350 = bf16[] convert(%all-reduce.634)
  %add.4731 = bf16[] add(%add.4730, %convert_element_type.5350)
  %convert_element_type.5351 = f32[32,128,512]{2,1,0} convert(%integer_pow.188)
  %reduce.1509 = f32[] reduce(%convert_element_type.5351, %constant.1360), dimensions={0,1,2}, to_apply=%region_1541.38368
  %all-reduce.635 = f32[] all-reduce(%reduce.1509), channel_id=1438, replica_groups=[1,8]<=[8], use_global_device_ids=true, to_apply=%region_1541.38368.clone
  %convert_element_type.5353 = bf16[] convert(%all-reduce.635)
  %add.4732 = bf16[] add(%add.4731, %convert_element_type.5353)
  %convert_element_type.5354 = f32[512,32,128]{2,1,0} convert(%integer_pow.189)
  %reduce.1510 = f32[] reduce(%convert_element_type.5354, %constant.1360), dimensions={0,1,2}, to_apply=%region_1542.38377
  %all-reduce.636 = f32[] all-reduce(%reduce.1510), channel_id=1439, replica_groups=[1,8]<=[8], use_global_device_ids=true, to_apply=%region_1542.38377.clone
  %convert_element_type.5355 = bf16[] convert(%all-reduce.636)
  %add.4733 = bf16[] add(%add.4732, %convert_element_type.5355)
  %convert_element_type.5356 = f32[512,8,128]{2,1,0} convert(%integer_pow.190)
  %reduce.1511 = f32[] reduce(%convert_element_type.5356, %constant.1360), dimensions={0,1,2}, to_apply=%region_1543.38386
  %all-reduce.637 = f32[] all-reduce(%reduce.1511), channel_id=1440, replica_groups=[1,8]<=[8], use_global_device_ids=true, to_apply=%region_1543.38386.clone
  %convert_element_type.5357 = bf16[] convert(%all-reduce.637)
  %add.4734 = bf16[] add(%add.4733, %convert_element_type.5357)
  %convert_element_type.5358 = f32[512,8]{1,0} convert(%integer_pow.191)
  %reduce.1512 = f32[] reduce(%convert_element_type.5358, %constant.1360), dimensions={0,1}, to_apply=%region_1544.38395
  %all-reduce.638 = f32[] all-reduce(%reduce.1512), channel_id=1441, replica_groups=[1,8]<=[8], use_global_device_ids=true, to_apply=%region_1544.38395.clone
  %convert_element_type.5359 = bf16[] convert(%all-reduce.638)
  %add.4735 = bf16[] add(%add.4734, %convert_element_type.5359)
  %convert_element_type.5360 = f32[1,4096,14336]{2,1,0} convert(%integer_pow.192)
  %reduce.1513 = f32[] reduce(%convert_element_type.5360, %constant.1360), dimensions={0,1,2}, to_apply=%region_1545.38404
  %all-reduce.639 = f32[] all-reduce(%reduce.1513), channel_id=1442, replica_groups=[1,8]<=[8], use_global_device_ids=true, to_apply=%region_1545.38404.clone
  %convert_element_type.5361 = bf16[] convert(%all-reduce.639)
  %add.4736 = bf16[] add(%add.4735, %convert_element_type.5361)
  %convert_element_type.5362 = f32[1,4096,14336]{2,1,0} convert(%integer_pow.193)
  %reduce.1514 = f32[] reduce(%convert_element_type.5362, %constant.1360), dimensions={0,1,2}, to_apply=%region_1546.38413
  %all-reduce.640 = f32[] all-reduce(%reduce.1514), channel_id=1443, replica_groups=[1,8]<=[8], use_global_device_ids=true, to_apply=%region_1546.38413.clone
  %convert_element_type.5363 = bf16[] convert(%all-reduce.640)
  %add.4737 = bf16[] add(%add.4736, %convert_element_type.5363)
  %convert_element_type.5364 = f32[1,14336,4096]{2,1,0} convert(%integer_pow.194)
  %reduce.1515 = f32[] reduce(%convert_element_type.5364, %constant.1360), dimensions={0,1,2}, to_apply=%region_1547.38422
  %all-reduce.641 = f32[] all-reduce(%reduce.1515), channel_id=1444, replica_groups=[1,8]<=[8], use_global_device_ids=true, to_apply=%region_1547.38422.clone
  %convert_element_type.5365 = bf16[] convert(%all-reduce.641)
  %add.4738 = bf16[] add(%add.4737, %convert_element_type.5365)
  %convert_element_type.5368 = f32[4096]{0} convert(%integer_pow.195)
  %reduce.1516 = f32[] reduce(%convert_element_type.5368, %constant.1360), dimensions={0}, to_apply=%region_1548.38431
  %convert_element_type.5369 = bf16[] convert(%reduce.1516)
  %add.4739 = bf16[] add(%add.4738, %convert_element_type.5369)
  %convert_element_type.5370 = f32[4096]{0} convert(%integer_pow.196)
  %reduce.1517 = f32[] reduce(%convert_element_type.5370, %constant.1360), dimensions={0}, to_apply=%region_1549.38440
  %convert_element_type.5371 = bf16[] convert(%reduce.1517)
  %add.4740 = bf16[] add(%add.4739, %convert_element_type.5371)
  %convert_element_type.5372 = f32[512,8,128]{2,1,0} convert(%integer_pow.197)
  %reduce.1518 = f32[] reduce(%convert_element_type.5372, %constant.1360), dimensions={0,1,2}, to_apply=%region_1550.38449
  %all-reduce.642 = f32[] all-reduce(%reduce.1518), channel_id=1445, replica_groups=[1,8]<=[8], use_global_device_ids=true, to_apply=%region_1550.38449.clone
  %convert_element_type.5373 = bf16[] convert(%all-reduce.642)
  %add.4741 = bf16[] add(%add.4740, %convert_element_type.5373)
  %convert_element_type.5374 = f32[32,128,512]{2,1,0} convert(%integer_pow.198)
  %reduce.1519 = f32[] reduce(%convert_element_type.5374, %constant.1360), dimensions={0,1,2}, to_apply=%region_1551.38458
  %all-reduce.643 = f32[] all-reduce(%reduce.1519), channel_id=1446, replica_groups=[1,8]<=[8], use_global_device_ids=true, to_apply=%region_1551.38458.clone
  %convert_element_type.5376 = bf16[] convert(%all-reduce.643)
  %add.4742 = bf16[] add(%add.4741, %convert_element_type.5376)
  %convert_element_type.5377 = f32[512,32,128]{2,1,0} convert(%integer_pow.199)
  %reduce.1520 = f32[] reduce(%convert_element_type.5377, %constant.1360), dimensions={0,1,2}, to_apply=%region_1552.38467
  %all-reduce.644 = f32[] all-reduce(%reduce.1520), channel_id=1447, replica_groups=[1,8]<=[8], use_global_device_ids=true, to_apply=%region_1552.38467.clone
  %convert_element_type.5378 = bf16[] convert(%all-reduce.644)
  %add.4743 = bf16[] add(%add.4742, %convert_element_type.5378)
  %convert_element_type.5379 = f32[512,8,128]{2,1,0} convert(%integer_pow.200)
  %reduce.1521 = f32[] reduce(%convert_element_type.5379, %constant.1360), dimensions={0,1,2}, to_apply=%region_1553.38476
  %all-reduce.645 = f32[] all-reduce(%reduce.1521), channel_id=1448, replica_groups=[1,8]<=[8], use_global_device_ids=true, to_apply=%region_1553.38476.clone
  %convert_element_type.5380 = bf16[] convert(%all-reduce.645)
  %add.4744 = bf16[] add(%add.4743, %convert_element_type.5380)
  %convert_element_type.5381 = f32[512,8]{1,0} convert(%integer_pow.201)
  %reduce.1522 = f32[] reduce(%convert_element_type.5381, %constant.1360), dimensions={0,1}, to_apply=%region_1554.38485
  %all-reduce.646 = f32[] all-reduce(%reduce.1522), channel_id=1449, replica_groups=[1,8]<=[8], use_global_device_ids=true, to_apply=%region_1554.38485.clone
  %convert_element_type.5382 = bf16[] convert(%all-reduce.646)
  %add.4745 = bf16[] add(%add.4744, %convert_element_type.5382)
  %convert_element_type.5383 = f32[1,4096,14336]{2,1,0} convert(%integer_pow.202)
  %reduce.1523 = f32[] reduce(%convert_element_type.5383, %constant.1360), dimensions={0,1,2}, to_apply=%region_1555.38494
  %all-reduce.647 = f32[] all-reduce(%reduce.1523), channel_id=1450, replica_groups=[1,8]<=[8], use_global_device_ids=true, to_apply=%region_1555.38494.clone
  %convert_element_type.5385 = bf16[] convert(%all-reduce.647)
  %add.4746 = bf16[] add(%add.4745, %convert_element_type.5385)
  %convert_element_type.5386 = f32[1,4096,14336]{2,1,0} convert(%integer_pow.203)
  %reduce.1524 = f32[] reduce(%convert_element_type.5386, %constant.1360), dimensions={0,1,2}, to_apply=%region_1556.38503
  %all-reduce.648 = f32[] all-reduce(%reduce.1524), channel_id=1451, replica_groups=[1,8]<=[8], use_global_device_ids=true, to_apply=%region_1556.38503.clone
  %convert_element_type.5387 = bf16[] convert(%all-reduce.648)
  %add.4747 = bf16[] add(%add.4746, %convert_element_type.5387)
  %convert_element_type.5388 = f32[1,14336,4096]{2,1,0} convert(%integer_pow.204)
  %reduce.1525 = f32[] reduce(%convert_element_type.5388, %constant.1360), dimensions={0,1,2}, to_apply=%region_1557.38512
  %all-reduce.649 = f32[] all-reduce(%reduce.1525), channel_id=1452, replica_groups=[1,8]<=[8], use_global_device_ids=true, to_apply=%region_1557.38512.clone
  %convert_element_type.5389 = bf16[] convert(%all-reduce.649)
  %add.4748 = bf16[] add(%add.4747, %convert_element_type.5389)
  %convert_element_type.5390 = f32[4096]{0} convert(%integer_pow.205)
  %reduce.1526 = f32[] reduce(%convert_element_type.5390, %constant.1360), dimensions={0}, to_apply=%region_1558.38521
  %convert_element_type.5391 = bf16[] convert(%reduce.1526)
  %add.4749 = bf16[] add(%add.4748, %convert_element_type.5391)
  %convert_element_type.5392 = f32[4096]{0} convert(%integer_pow.206)
  %reduce.1527 = f32[] reduce(%convert_element_type.5392, %constant.1360), dimensions={0}, to_apply=%region_1559.38530
  %convert_element_type.5393 = bf16[] convert(%reduce.1527)
  %add.4750 = bf16[] add(%add.4749, %convert_element_type.5393)
  %convert_element_type.5394 = f32[512,8,128]{2,1,0} convert(%integer_pow.207)
  %reduce.1528 = f32[] reduce(%convert_element_type.5394, %constant.1360), dimensions={0,1,2}, to_apply=%region_1560.38539
  %all-reduce.650 = f32[] all-reduce(%reduce.1528), channel_id=1453, replica_groups=[1,8]<=[8], use_global_device_ids=true, to_apply=%region_1560.38539.clone
  %convert_element_type.5396 = bf16[] convert(%all-reduce.650)
  %add.4751 = bf16[] add(%add.4750, %convert_element_type.5396)
  %convert_element_type.5397 = f32[32,128,512]{2,1,0} convert(%integer_pow.208)
  %reduce.1529 = f32[] reduce(%convert_element_type.5397, %constant.1360), dimensions={0,1,2}, to_apply=%region_1561.38548
  %all-reduce.651 = f32[] all-reduce(%reduce.1529), channel_id=1454, replica_groups=[1,8]<=[8], use_global_device_ids=true, to_apply=%region_1561.38548.clone
  %convert_element_type.5398 = bf16[] convert(%all-reduce.651)
  %add.4752 = bf16[] add(%add.4751, %convert_element_type.5398)
  %convert_element_type.5399 = f32[512,32,128]{2,1,0} convert(%integer_pow.209)
  %reduce.1530 = f32[] reduce(%convert_element_type.5399, %constant.1360), dimensions={0,1,2}, to_apply=%region_1562.38557
  %all-reduce.652 = f32[] all-reduce(%reduce.1530), channel_id=1455, replica_groups=[1,8]<=[8], use_global_device_ids=true, to_apply=%region_1562.38557.clone
  %convert_element_type.5400 = bf16[] convert(%all-reduce.652)
  %add.4753 = bf16[] add(%add.4752, %convert_element_type.5400)
  %convert_element_type.5401 = f32[512,8,128]{2,1,0} convert(%integer_pow.210)
  %reduce.1531 = f32[] reduce(%convert_element_type.5401, %constant.1360), dimensions={0,1,2}, to_apply=%region_1563.38566
  %all-reduce.653 = f32[] all-reduce(%reduce.1531), channel_id=1456, replica_groups=[1,8]<=[8], use_global_device_ids=true, to_apply=%region_1563.38566.clone
  %convert_element_type.5402 = bf16[] convert(%all-reduce.653)
  %add.4754 = bf16[] add(%add.4753, %convert_element_type.5402)
  %convert_element_type.5403 = f32[512,8]{1,0} convert(%integer_pow.211)
  %reduce.1532 = f32[] reduce(%convert_element_type.5403, %constant.1360), dimensions={0,1}, to_apply=%region_1564.38575
  %all-reduce.654 = f32[] all-reduce(%reduce.1532), channel_id=1457, replica_groups=[1,8]<=[8], use_global_device_ids=true, to_apply=%region_1564.38575.clone
  %convert_element_type.5404 = bf16[] convert(%all-reduce.654)
  %add.4755 = bf16[] add(%add.4754, %convert_element_type.5404)
  %convert_element_type.5405 = f32[1,4096,14336]{2,1,0} convert(%integer_pow.212)
  %reduce.1533 = f32[] reduce(%convert_element_type.5405, %constant.1360), dimensions={0,1,2}, to_apply=%region_1565.38584
  %all-reduce.655 = f32[] all-reduce(%reduce.1533), channel_id=1458, replica_groups=[1,8]<=[8], use_global_device_ids=true, to_apply=%region_1565.38584.clone
  %convert_element_type.5406 = bf16[] convert(%all-reduce.655)
  %add.4756 = bf16[] add(%add.4755, %convert_element_type.5406)
  %convert_element_type.5407 = f32[1,4096,14336]{2,1,0} convert(%integer_pow.213)
  %reduce.1534 = f32[] reduce(%convert_element_type.5407, %constant.1360), dimensions={0,1,2}, to_apply=%region_1566.38593
  %all-reduce.656 = f32[] all-reduce(%reduce.1534), channel_id=1459, replica_groups=[1,8]<=[8], use_global_device_ids=true, to_apply=%region_1566.38593.clone
  %convert_element_type.5408 = bf16[] convert(%all-reduce.656)
  %add.4757 = bf16[] add(%add.4756, %convert_element_type.5408)
  %convert_element_type.5409 = f32[1,14336,4096]{2,1,0} convert(%integer_pow.214)
  %reduce.1535 = f32[] reduce(%convert_element_type.5409, %constant.1360), dimensions={0,1,2}, to_apply=%region_1567.38602
  %all-reduce.657 = f32[] all-reduce(%reduce.1535), channel_id=1460, replica_groups=[1,8]<=[8], use_global_device_ids=true, to_apply=%region_1567.38602.clone
  %convert_element_type.5410 = bf16[] convert(%all-reduce.657)
  %add.4758 = bf16[] add(%add.4757, %convert_element_type.5410)
  %convert_element_type.5411 = f32[4096]{0} convert(%integer_pow.215)
  %reduce.1536 = f32[] reduce(%convert_element_type.5411, %constant.1360), dimensions={0}, to_apply=%region_1568.38611
  %convert_element_type.5413 = bf16[] convert(%reduce.1536)
  %add.4759 = bf16[] add(%add.4758, %convert_element_type.5413)
  %convert_element_type.5414 = f32[4096]{0} convert(%integer_pow.216)
  %reduce.1537 = f32[] reduce(%convert_element_type.5414, %constant.1360), dimensions={0}, to_apply=%region_1569.38620
  %convert_element_type.5415 = bf16[] convert(%reduce.1537)
  %add.4760 = bf16[] add(%add.4759, %convert_element_type.5415)
  %convert_element_type.5416 = f32[512,8,128]{2,1,0} convert(%integer_pow.217)
  %reduce.1538 = f32[] reduce(%convert_element_type.5416, %constant.1360), dimensions={0,1,2}, to_apply=%region_1570.38629
  %all-reduce.658 = f32[] all-reduce(%reduce.1538), channel_id=1461, replica_groups=[1,8]<=[8], use_global_device_ids=true, to_apply=%region_1570.38629.clone
  %convert_element_type.5417 = bf16[] convert(%all-reduce.658)
  %add.4761 = bf16[] add(%add.4760, %convert_element_type.5417)
  %convert_element_type.5418 = f32[32,128,512]{2,1,0} convert(%integer_pow.218)
  %reduce.1539 = f32[] reduce(%convert_element_type.5418, %constant.1360), dimensions={0,1,2}, to_apply=%region_1571.38638
  %all-reduce.659 = f32[] all-reduce(%reduce.1539), channel_id=1462, replica_groups=[1,8]<=[8], use_global_device_ids=true, to_apply=%region_1571.38638.clone
  %convert_element_type.5419 = bf16[] convert(%all-reduce.659)
  %add.4762 = bf16[] add(%add.4761, %convert_element_type.5419)
  %convert_element_type.5420 = f32[512,32,128]{2,1,0} convert(%integer_pow.219)
  %reduce.1540 = f32[] reduce(%convert_element_type.5420, %constant.1360), dimensions={0,1,2}, to_apply=%region_1572.38647
  %all-reduce.660 = f32[] all-reduce(%reduce.1540), channel_id=1463, replica_groups=[1,8]<=[8], use_global_device_ids=true, to_apply=%region_1572.38647.clone
  %convert_element_type.5422 = bf16[] convert(%all-reduce.660)
  %add.4763 = bf16[] add(%add.4762, %convert_element_type.5422)
  %convert_element_type.5423 = f32[512,8,128]{2,1,0} convert(%integer_pow.220)
  %reduce.1541 = f32[] reduce(%convert_element_type.5423, %constant.1360), dimensions={0,1,2}, to_apply=%region_1573.38656
  %all-reduce.661 = f32[] all-reduce(%reduce.1541), channel_id=1464, replica_groups=[1,8]<=[8], use_global_device_ids=true, to_apply=%region_1573.38656.clone
  %convert_element_type.5424 = bf16[] convert(%all-reduce.661)
  %add.4764 = bf16[] add(%add.4763, %convert_element_type.5424)
  %convert_element_type.5425 = f32[512,8]{1,0} convert(%integer_pow.221)
  %reduce.1542 = f32[] reduce(%convert_element_type.5425, %constant.1360), dimensions={0,1}, to_apply=%region_1574.38665
  %all-reduce.662 = f32[] all-reduce(%reduce.1542), channel_id=1465, replica_groups=[1,8]<=[8], use_global_device_ids=true, to_apply=%region_1574.38665.clone
  %convert_element_type.5429 = bf16[] convert(%all-reduce.662)
  %add.4765 = bf16[] add(%add.4764, %convert_element_type.5429)
  %convert_element_type.5430 = f32[1,4096,14336]{2,1,0} convert(%integer_pow.222)
  %reduce.1543 = f32[] reduce(%convert_element_type.5430, %constant.1360), dimensions={0,1,2}, to_apply=%region_1575.38674
  %all-reduce.663 = f32[] all-reduce(%reduce.1543), channel_id=1466, replica_groups=[1,8]<=[8], use_global_device_ids=true, to_apply=%region_1575.38674.clone
  %convert_element_type.5432 = bf16[] convert(%all-reduce.663)
  %add.4766 = bf16[] add(%add.4765, %convert_element_type.5432)
  %convert_element_type.5433 = f32[1,4096,14336]{2,1,0} convert(%integer_pow.223)
  %reduce.1544 = f32[] reduce(%convert_element_type.5433, %constant.1360), dimensions={0,1,2}, to_apply=%region_1576.38683
  %all-reduce.664 = f32[] all-reduce(%reduce.1544), channel_id=1467, replica_groups=[1,8]<=[8], use_global_device_ids=true, to_apply=%region_1576.38683.clone
  %convert_element_type.5434 = bf16[] convert(%all-reduce.664)
  %add.4768 = bf16[] add(%add.4766, %convert_element_type.5434)
  %convert_element_type.5435 = f32[1,14336,4096]{2,1,0} convert(%integer_pow.224)
  %reduce.1545 = f32[] reduce(%convert_element_type.5435, %constant.1360), dimensions={0,1,2}, to_apply=%region_1577.38692
  %all-reduce.665 = f32[] all-reduce(%reduce.1545), channel_id=1468, replica_groups=[1,8]<=[8], use_global_device_ids=true, to_apply=%region_1577.38692.clone
  %convert_element_type.5436 = bf16[] convert(%all-reduce.665)
  %add.4769 = bf16[] add(%add.4768, %convert_element_type.5436)
  %convert_element_type.5437 = f32[4096]{0} convert(%integer_pow.225)
  %reduce.1546 = f32[] reduce(%convert_element_type.5437, %constant.1360), dimensions={0}, to_apply=%region_1578.38701
  %convert_element_type.5438 = bf16[] convert(%reduce.1546)
  %add.4770 = bf16[] add(%add.4769, %convert_element_type.5438)
  %convert_element_type.5439 = f32[4096]{0} convert(%integer_pow.226)
  %reduce.1547 = f32[] reduce(%convert_element_type.5439, %constant.1360), dimensions={0}, to_apply=%region_1579.38710
  %convert_element_type.5441 = bf16[] convert(%reduce.1547)
  %add.4771 = bf16[] add(%add.4770, %convert_element_type.5441)
  %convert_element_type.5442 = f32[512,8,128]{2,1,0} convert(%integer_pow.227)
  %reduce.1548 = f32[] reduce(%convert_element_type.5442, %constant.1360), dimensions={0,1,2}, to_apply=%region_1580.38719
  %all-reduce.666 = f32[] all-reduce(%reduce.1548), channel_id=1469, replica_groups=[1,8]<=[8], use_global_device_ids=true, to_apply=%region_1580.38719.clone
  %convert_element_type.5443 = bf16[] convert(%all-reduce.666)
  %add.4772 = bf16[] add(%add.4771, %convert_element_type.5443)
  %convert_element_type.5444 = f32[32,128,512]{2,1,0} convert(%integer_pow.228)
  %reduce.1549 = f32[] reduce(%convert_element_type.5444, %constant.1360), dimensions={0,1,2}, to_apply=%region_1581.38728
  %all-reduce.667 = f32[] all-reduce(%reduce.1549), channel_id=1470, replica_groups=[1,8]<=[8], use_global_device_ids=true, to_apply=%region_1581.38728.clone
  %convert_element_type.5445 = bf16[] convert(%all-reduce.667)
  %add.4774 = bf16[] add(%add.4772, %convert_element_type.5445)
  %convert_element_type.5447 = f32[512,32,128]{2,1,0} convert(%integer_pow.229)
  %reduce.1550 = f32[] reduce(%convert_element_type.5447, %constant.1360), dimensions={0,1,2}, to_apply=%region_1582.38737
  %all-reduce.668 = f32[] all-reduce(%reduce.1550), channel_id=1471, replica_groups=[1,8]<=[8], use_global_device_ids=true, to_apply=%region_1582.38737.clone
  %convert_element_type.5448 = bf16[] convert(%all-reduce.668)
  %add.4775 = bf16[] add(%add.4774, %convert_element_type.5448)
  %convert_element_type.5449 = f32[512,8,128]{2,1,0} convert(%integer_pow.230)
  %reduce.1551 = f32[] reduce(%convert_element_type.5449, %constant.1360), dimensions={0,1,2}, to_apply=%region_1583.38746
  %all-reduce.669 = f32[] all-reduce(%reduce.1551), channel_id=1472, replica_groups=[1,8]<=[8], use_global_device_ids=true, to_apply=%region_1583.38746.clone
  %convert_element_type.5450 = bf16[] convert(%all-reduce.669)
  %add.4777 = bf16[] add(%add.4775, %convert_element_type.5450)
  %convert_element_type.5451 = f32[512,8]{1,0} convert(%integer_pow.231)
  %reduce.1552 = f32[] reduce(%convert_element_type.5451, %constant.1360), dimensions={0,1}, to_apply=%region_1584.38755
  %all-reduce.670 = f32[] all-reduce(%reduce.1552), channel_id=1473, replica_groups=[1,8]<=[8], use_global_device_ids=true, to_apply=%region_1584.38755.clone
  %convert_element_type.5452 = bf16[] convert(%all-reduce.670)
  %add.4778 = bf16[] add(%add.4777, %convert_element_type.5452)
  %convert_element_type.5453 = f32[1,4096,14336]{2,1,0} convert(%integer_pow.232)
  %reduce.1553 = f32[] reduce(%convert_element_type.5453, %constant.1360), dimensions={0,1,2}, to_apply=%region_1585.38764
  %all-reduce.671 = f32[] all-reduce(%reduce.1553), channel_id=1474, replica_groups=[1,8]<=[8], use_global_device_ids=true, to_apply=%region_1585.38764.clone
  %convert_element_type.5454 = bf16[] convert(%all-reduce.671)
  %add.4780 = bf16[] add(%add.4778, %convert_element_type.5454)
  %convert_element_type.5455 = f32[1,4096,14336]{2,1,0} convert(%integer_pow.233)
  %reduce.1554 = f32[] reduce(%convert_element_type.5455, %constant.1360), dimensions={0,1,2}, to_apply=%region_1586.38773
  %all-reduce.672 = f32[] all-reduce(%reduce.1554), channel_id=1475, replica_groups=[1,8]<=[8], use_global_device_ids=true, to_apply=%region_1586.38773.clone
  %convert_element_type.5456 = bf16[] convert(%all-reduce.672)
  %add.4781 = bf16[] add(%add.4780, %convert_element_type.5456)
  %convert_element_type.5458 = f32[1,14336,4096]{2,1,0} convert(%integer_pow.234)
  %reduce.1555 = f32[] reduce(%convert_element_type.5458, %constant.1360), dimensions={0,1,2}, to_apply=%region_1587.38782
  %all-reduce.673 = f32[] all-reduce(%reduce.1555), channel_id=1476, replica_groups=[1,8]<=[8], use_global_device_ids=true, to_apply=%region_1587.38782.clone
  %convert_element_type.5459 = bf16[] convert(%all-reduce.673)
  %add.4782 = bf16[] add(%add.4781, %convert_element_type.5459)
  %convert_element_type.5460 = f32[4096]{0} convert(%integer_pow.235)
  %reduce.1556 = f32[] reduce(%convert_element_type.5460, %constant.1360), dimensions={0}, to_apply=%region_1588.38791
  %convert_element_type.5461 = bf16[] convert(%reduce.1556)
  %add.4783 = bf16[] add(%add.4782, %convert_element_type.5461)
  %convert_element_type.5462 = f32[4096]{0} convert(%integer_pow.236)
  %reduce.1557 = f32[] reduce(%convert_element_type.5462, %constant.1360), dimensions={0}, to_apply=%region_1589.38800
  %convert_element_type.5463 = bf16[] convert(%reduce.1557)
  %add.4784 = bf16[] add(%add.4783, %convert_element_type.5463)
  %convert_element_type.5464 = f32[512,8,128]{2,1,0} convert(%integer_pow.237)
  %reduce.1558 = f32[] reduce(%convert_element_type.5464, %constant.1360), dimensions={0,1,2}, to_apply=%region_1590.38809
  %all-reduce.674 = f32[] all-reduce(%reduce.1558), channel_id=1477, replica_groups=[1,8]<=[8], use_global_device_ids=true, to_apply=%region_1590.38809.clone
  %convert_element_type.5465 = bf16[] convert(%all-reduce.674)
  %add.4785 = bf16[] add(%add.4784, %convert_element_type.5465)
  %convert_element_type.5466 = f32[32,128,512]{2,1,0} convert(%integer_pow.238)
  %reduce.1559 = f32[] reduce(%convert_element_type.5466, %constant.1360), dimensions={0,1,2}, to_apply=%region_1591.38818
  %all-reduce.675 = f32[] all-reduce(%reduce.1559), channel_id=1478, replica_groups=[1,8]<=[8], use_global_device_ids=true, to_apply=%region_1591.38818.clone
  %convert_element_type.5467 = bf16[] convert(%all-reduce.675)
  %add.4786 = bf16[] add(%add.4785, %convert_element_type.5467)
  %convert_element_type.5468 = f32[512,32,128]{2,1,0} convert(%integer_pow.239)
  %reduce.1560 = f32[] reduce(%convert_element_type.5468, %constant.1360), dimensions={0,1,2}, to_apply=%region_1592.38827
  %all-reduce.676 = f32[] all-reduce(%reduce.1560), channel_id=1479, replica_groups=[1,8]<=[8], use_global_device_ids=true, to_apply=%region_1592.38827.clone
  %convert_element_type.5470 = bf16[] convert(%all-reduce.676)
  %add.4787 = bf16[] add(%add.4786, %convert_element_type.5470)
  %convert_element_type.5471 = f32[512,8,128]{2,1,0} convert(%integer_pow.240)
  %reduce.1561 = f32[] reduce(%convert_element_type.5471, %constant.1360), dimensions={0,1,2}, to_apply=%region_1593.38836
  %all-reduce.677 = f32[] all-reduce(%reduce.1561), channel_id=1480, replica_groups=[1,8]<=[8], use_global_device_ids=true, to_apply=%region_1593.38836.clone
  %convert_element_type.5472 = bf16[] convert(%all-reduce.677)
  %add.4788 = bf16[] add(%add.4787, %convert_element_type.5472)
  %convert_element_type.5473 = f32[512,8]{1,0} convert(%integer_pow.241)
  %reduce.1562 = f32[] reduce(%convert_element_type.5473, %constant.1360), dimensions={0,1}, to_apply=%region_1594.38845
  %all-reduce.678 = f32[] all-reduce(%reduce.1562), channel_id=1481, replica_groups=[1,8]<=[8], use_global_device_ids=true, to_apply=%region_1594.38845.clone
  %convert_element_type.5474 = bf16[] convert(%all-reduce.678)
  %add.4789 = bf16[] add(%add.4788, %convert_element_type.5474)
  %convert_element_type.5475 = f32[1,4096,14336]{2,1,0} convert(%integer_pow.242)
  %reduce.1563 = f32[] reduce(%convert_element_type.5475, %constant.1360), dimensions={0,1,2}, to_apply=%region_1595.38854
  %all-reduce.679 = f32[] all-reduce(%reduce.1563), channel_id=1482, replica_groups=[1,8]<=[8], use_global_device_ids=true, to_apply=%region_1595.38854.clone
  %convert_element_type.5477 = bf16[] convert(%all-reduce.679)
  %add.4790 = bf16[] add(%add.4789, %convert_element_type.5477)
  %convert_element_type.5478 = f32[1,4096,14336]{2,1,0} convert(%integer_pow.243)
  %reduce.1564 = f32[] reduce(%convert_element_type.5478, %constant.1360), dimensions={0,1,2}, to_apply=%region_1596.38863
  %all-reduce.680 = f32[] all-reduce(%reduce.1564), channel_id=1483, replica_groups=[1,8]<=[8], use_global_device_ids=true, to_apply=%region_1596.38863.clone
  %convert_element_type.5479 = bf16[] convert(%all-reduce.680)
  %add.4791 = bf16[] add(%add.4790, %convert_element_type.5479)
  %convert_element_type.5481 = f32[1,14336,4096]{2,1,0} convert(%integer_pow.244)
  %reduce.1565 = f32[] reduce(%convert_element_type.5481, %constant.1360), dimensions={0,1,2}, to_apply=%region_1597.38872
  %all-reduce.681 = f32[] all-reduce(%reduce.1565), channel_id=1484, replica_groups=[1,8]<=[8], use_global_device_ids=true, to_apply=%region_1597.38872.clone
  %convert_element_type.5482 = bf16[] convert(%all-reduce.681)
  %add.4792 = bf16[] add(%add.4791, %convert_element_type.5482)
  %convert_element_type.5483 = f32[4096]{0} convert(%integer_pow.245)
  %reduce.1566 = f32[] reduce(%convert_element_type.5483, %constant.1360), dimensions={0}, to_apply=%region_1598.38881
  %convert_element_type.5485 = bf16[] convert(%reduce.1566)
  %add.4794 = bf16[] add(%add.4792, %convert_element_type.5485)
  %convert_element_type.5487 = f32[4096]{0} convert(%integer_pow.246)
  %reduce.1567 = f32[] reduce(%convert_element_type.5487, %constant.1360), dimensions={0}, to_apply=%region_1599.38890
  %convert_element_type.5488 = bf16[] convert(%reduce.1567)
  %add.4795 = bf16[] add(%add.4794, %convert_element_type.5488)
  %convert_element_type.5489 = f32[512,8,128]{2,1,0} convert(%integer_pow.247)
  %reduce.1568 = f32[] reduce(%convert_element_type.5489, %constant.1360), dimensions={0,1,2}, to_apply=%region_1600.38899
  %all-reduce.682 = f32[] all-reduce(%reduce.1568), channel_id=1485, replica_groups=[1,8]<=[8], use_global_device_ids=true, to_apply=%region_1600.38899.clone
  %convert_element_type.5490 = bf16[] convert(%all-reduce.682)
  %add.4796 = bf16[] add(%add.4795, %convert_element_type.5490)
  %convert_element_type.5491 = f32[32,128,512]{2,1,0} convert(%integer_pow.248)
  %reduce.1569 = f32[] reduce(%convert_element_type.5491, %constant.1360), dimensions={0,1,2}, to_apply=%region_1601.38908
  %all-reduce.683 = f32[] all-reduce(%reduce.1569), channel_id=1486, replica_groups=[1,8]<=[8], use_global_device_ids=true, to_apply=%region_1601.38908.clone
  %convert_element_type.5493 = bf16[] convert(%all-reduce.683)
  %add.4797 = bf16[] add(%add.4796, %convert_element_type.5493)
  %convert_element_type.5494 = f32[512,32,128]{2,1,0} convert(%integer_pow.249)
  %reduce.1570 = f32[] reduce(%convert_element_type.5494, %constant.1360), dimensions={0,1,2}, to_apply=%region_1602.38917
  %all-reduce.684 = f32[] all-reduce(%reduce.1570), channel_id=1487, replica_groups=[1,8]<=[8], use_global_device_ids=true, to_apply=%region_1602.38917.clone
  %convert_element_type.5495 = bf16[] convert(%all-reduce.684)
  %add.4799 = bf16[] add(%add.4797, %convert_element_type.5495)
  %convert_element_type.5496 = f32[512,8,128]{2,1,0} convert(%integer_pow.250)
  %reduce.1571 = f32[] reduce(%convert_element_type.5496, %constant.1360), dimensions={0,1,2}, to_apply=%region_1603.38926
  %all-reduce.685 = f32[] all-reduce(%reduce.1571), channel_id=1488, replica_groups=[1,8]<=[8], use_global_device_ids=true, to_apply=%region_1603.38926.clone
  %convert_element_type.5497 = bf16[] convert(%all-reduce.685)
  %add.4800 = bf16[] add(%add.4799, %convert_element_type.5497)
  %convert_element_type.5498 = f32[512,8]{1,0} convert(%integer_pow.251)
  %reduce.1572 = f32[] reduce(%convert_element_type.5498, %constant.1360), dimensions={0,1}, to_apply=%region_1604.38935
  %all-reduce.686 = f32[] all-reduce(%reduce.1572), channel_id=1489, replica_groups=[1,8]<=[8], use_global_device_ids=true, to_apply=%region_1604.38935.clone
  %convert_element_type.5500 = bf16[] convert(%all-reduce.686)
  %add.4801 = bf16[] add(%add.4800, %convert_element_type.5500)
  %convert_element_type.5501 = f32[1,4096,14336]{2,1,0} convert(%integer_pow.252)
  %reduce.1573 = f32[] reduce(%convert_element_type.5501, %constant.1360), dimensions={0,1,2}, to_apply=%region_1605.38944
  %all-reduce.687 = f32[] all-reduce(%reduce.1573), channel_id=1490, replica_groups=[1,8]<=[8], use_global_device_ids=true, to_apply=%region_1605.38944.clone
  %convert_element_type.5503 = bf16[] convert(%all-reduce.687)
  %add.4802 = bf16[] add(%add.4801, %convert_element_type.5503)
  %convert_element_type.5504 = f32[1,4096,14336]{2,1,0} convert(%integer_pow.253)
  %reduce.1574 = f32[] reduce(%convert_element_type.5504, %constant.1360), dimensions={0,1,2}, to_apply=%region_1606.38953
  %all-reduce.688 = f32[] all-reduce(%reduce.1574), channel_id=1491, replica_groups=[1,8]<=[8], use_global_device_ids=true, to_apply=%region_1606.38953.clone
  %convert_element_type.5505 = bf16[] convert(%all-reduce.688)
  %add.4804 = bf16[] add(%add.4802, %convert_element_type.5505)
  %convert_element_type.5506 = f32[1,14336,4096]{2,1,0} convert(%integer_pow.254)
  %reduce.1575 = f32[] reduce(%convert_element_type.5506, %constant.1360), dimensions={0,1,2}, to_apply=%region_1607.38962
  %all-reduce.689 = f32[] all-reduce(%reduce.1575), channel_id=1492, replica_groups=[1,8]<=[8], use_global_device_ids=true, to_apply=%region_1607.38962.clone
  %convert_element_type.5507 = bf16[] convert(%all-reduce.689)
  %add.4805 = bf16[] add(%add.4804, %convert_element_type.5507)
  %convert_element_type.5508 = f32[4096]{0} convert(%integer_pow.255)
  %reduce.1576 = f32[] reduce(%convert_element_type.5508, %constant.1360), dimensions={0}, to_apply=%region_1608.38971
  %convert_element_type.5510 = bf16[] convert(%reduce.1576)
  %add.4806 = bf16[] add(%add.4805, %convert_element_type.5510)
  %convert_element_type.5511 = f32[4096]{0} convert(%integer_pow.256)
  %reduce.1577 = f32[] reduce(%convert_element_type.5511, %constant.1360), dimensions={0}, to_apply=%region_1609.38980
  %convert_element_type.5515 = bf16[] convert(%reduce.1577)
  %add.4807 = bf16[] add(%add.4806, %convert_element_type.5515)
  %convert_element_type.5516 = f32[512,8,128]{2,1,0} convert(%integer_pow.257)
  %reduce.1578 = f32[] reduce(%convert_element_type.5516, %constant.1360), dimensions={0,1,2}, to_apply=%region_1610.38989
  %all-reduce.690 = f32[] all-reduce(%reduce.1578), channel_id=1493, replica_groups=[1,8]<=[8], use_global_device_ids=true, to_apply=%region_1610.38989.clone
  %convert_element_type.5517 = bf16[] convert(%all-reduce.690)
  %add.4808 = bf16[] add(%add.4807, %convert_element_type.5517)
  %convert_element_type.5518 = f32[32,128,512]{2,1,0} convert(%integer_pow.258)
  %reduce.1579 = f32[] reduce(%convert_element_type.5518, %constant.1360), dimensions={0,1,2}, to_apply=%region_1611.38998
  %all-reduce.691 = f32[] all-reduce(%reduce.1579), channel_id=1494, replica_groups=[1,8]<=[8], use_global_device_ids=true, to_apply=%region_1611.38998.clone
  %convert_element_type.5520 = bf16[] convert(%all-reduce.691)
  %add.4809 = bf16[] add(%add.4808, %convert_element_type.5520)
  %convert_element_type.5521 = f32[512,32,128]{2,1,0} convert(%integer_pow.259)
  %reduce.1580 = f32[] reduce(%convert_element_type.5521, %constant.1360), dimensions={0,1,2}, to_apply=%region_1612.39007
  %all-reduce.692 = f32[] all-reduce(%reduce.1580), channel_id=1495, replica_groups=[1,8]<=[8], use_global_device_ids=true, to_apply=%region_1612.39007.clone
  %convert_element_type.5522 = bf16[] convert(%all-reduce.692)
  %add.4810 = bf16[] add(%add.4809, %convert_element_type.5522)
  %convert_element_type.5523 = f32[512,8,128]{2,1,0} convert(%integer_pow.260)
  %reduce.1581 = f32[] reduce(%convert_element_type.5523, %constant.1360), dimensions={0,1,2}, to_apply=%region_1613.39016
  %all-reduce.693 = f32[] all-reduce(%reduce.1581), channel_id=1496, replica_groups=[1,8]<=[8], use_global_device_ids=true, to_apply=%region_1613.39016.clone
  %convert_element_type.5524 = bf16[] convert(%all-reduce.693)
  %add.4811 = bf16[] add(%add.4810, %convert_element_type.5524)
  %convert_element_type.5526 = f32[512,8]{1,0} convert(%integer_pow.261)
  %reduce.1582 = f32[] reduce(%convert_element_type.5526, %constant.1360), dimensions={0,1}, to_apply=%region_1614.39025
  %all-reduce.694 = f32[] all-reduce(%reduce.1582), channel_id=1497, replica_groups=[1,8]<=[8], use_global_device_ids=true, to_apply=%region_1614.39025.clone
  %convert_element_type.5527 = bf16[] convert(%all-reduce.694)
  %add.4812 = bf16[] add(%add.4811, %convert_element_type.5527)
  %convert_element_type.5528 = f32[1,4096,14336]{2,1,0} convert(%integer_pow.262)
  %reduce.1583 = f32[] reduce(%convert_element_type.5528, %constant.1360), dimensions={0,1,2}, to_apply=%region_1615.39034
  %all-reduce.695 = f32[] all-reduce(%reduce.1583), channel_id=1498, replica_groups=[1,8]<=[8], use_global_device_ids=true, to_apply=%region_1615.39034.clone
  %convert_element_type.5529 = bf16[] convert(%all-reduce.695)
  %add.4813 = bf16[] add(%add.4812, %convert_element_type.5529)
  %convert_element_type.5530 = f32[1,4096,14336]{2,1,0} convert(%integer_pow.263)
  %reduce.1584 = f32[] reduce(%convert_element_type.5530, %constant.1360), dimensions={0,1,2}, to_apply=%region_1616.39043
  %all-reduce.696 = f32[] all-reduce(%reduce.1584), channel_id=1499, replica_groups=[1,8]<=[8], use_global_device_ids=true, to_apply=%region_1616.39043.clone
  %convert_element_type.5531 = bf16[] convert(%all-reduce.696)
  %add.4814 = bf16[] add(%add.4813, %convert_element_type.5531)
  %convert_element_type.5532 = f32[1,14336,4096]{2,1,0} convert(%integer_pow.264)
  %reduce.1585 = f32[] reduce(%convert_element_type.5532, %constant.1360), dimensions={0,1,2}, to_apply=%region_1617.39052
  %all-reduce.697 = f32[] all-reduce(%reduce.1585), channel_id=1500, replica_groups=[1,8]<=[8], use_global_device_ids=true, to_apply=%region_1617.39052.clone
  %convert_element_type.5533 = bf16[] convert(%all-reduce.697)
  %add.4815 = bf16[] add(%add.4814, %convert_element_type.5533)
  %convert_element_type.5534 = f32[4096]{0} convert(%integer_pow.265)
  %reduce.1586 = f32[] reduce(%convert_element_type.5534, %constant.1360), dimensions={0}, to_apply=%region_1618.39061
  %convert_element_type.5535 = bf16[] convert(%reduce.1586)
  %add.4818 = bf16[] add(%add.4815, %convert_element_type.5535)
  %convert_element_type.5536 = f32[4096]{0} convert(%integer_pow.266)
  %reduce.1587 = f32[] reduce(%convert_element_type.5536, %constant.1360), dimensions={0}, to_apply=%region_1619.39070
  %convert_element_type.5537 = bf16[] convert(%reduce.1587)
  %add.4819 = bf16[] add(%add.4818, %convert_element_type.5537)
  %convert_element_type.5538 = f32[512,8,128]{2,1,0} convert(%integer_pow.267)
  %reduce.1588 = f32[] reduce(%convert_element_type.5538, %constant.1360), dimensions={0,1,2}, to_apply=%region_1620.39079
  %all-reduce.698 = f32[] all-reduce(%reduce.1588), channel_id=1501, replica_groups=[1,8]<=[8], use_global_device_ids=true, to_apply=%region_1620.39079.clone
  %convert_element_type.5540 = bf16[] convert(%all-reduce.698)
  %add.4820 = bf16[] add(%add.4819, %convert_element_type.5540)
  %convert_element_type.5541 = f32[32,128,512]{2,1,0} convert(%integer_pow.268)
  %reduce.1589 = f32[] reduce(%convert_element_type.5541, %constant.1360), dimensions={0,1,2}, to_apply=%region_1621.39088
  %all-reduce.699 = f32[] all-reduce(%reduce.1589), channel_id=1502, replica_groups=[1,8]<=[8], use_global_device_ids=true, to_apply=%region_1621.39088.clone
  %convert_element_type.5543 = bf16[] convert(%all-reduce.699)
  %add.4821 = bf16[] add(%add.4820, %convert_element_type.5543)
  %convert_element_type.5544 = f32[512,32,128]{2,1,0} convert(%integer_pow.269)
  %reduce.1590 = f32[] reduce(%convert_element_type.5544, %constant.1360), dimensions={0,1,2}, to_apply=%region_1622.39097
  %all-reduce.700 = f32[] all-reduce(%reduce.1590), channel_id=1503, replica_groups=[1,8]<=[8], use_global_device_ids=true, to_apply=%region_1622.39097.clone
  %convert_element_type.5545 = bf16[] convert(%all-reduce.700)
  %add.4822 = bf16[] add(%add.4821, %convert_element_type.5545)
  %convert_element_type.5546 = f32[512,8,128]{2,1,0} convert(%integer_pow.270)
  %reduce.1591 = f32[] reduce(%convert_element_type.5546, %constant.1360), dimensions={0,1,2}, to_apply=%region_1623.39106
  %all-reduce.701 = f32[] all-reduce(%reduce.1591), channel_id=1504, replica_groups=[1,8]<=[8], use_global_device_ids=true, to_apply=%region_1623.39106.clone
  %convert_element_type.5547 = bf16[] convert(%all-reduce.701)
  %add.4823 = bf16[] add(%add.4822, %convert_element_type.5547)
  %convert_element_type.5548 = f32[512,8]{1,0} convert(%integer_pow.271)
  %reduce.1592 = f32[] reduce(%convert_element_type.5548, %constant.1360), dimensions={0,1}, to_apply=%region_1624.39115
  %all-reduce.702 = f32[] all-reduce(%reduce.1592), channel_id=1505, replica_groups=[1,8]<=[8], use_global_device_ids=true, to_apply=%region_1624.39115.clone
  %convert_element_type.5549 = bf16[] convert(%all-reduce.702)
  %add.4824 = bf16[] add(%add.4823, %convert_element_type.5549)
  %convert_element_type.5550 = f32[1,4096,14336]{2,1,0} convert(%integer_pow.272)
  %reduce.1593 = f32[] reduce(%convert_element_type.5550, %constant.1360), dimensions={0,1,2}, to_apply=%region_1625.39124
  %all-reduce.703 = f32[] all-reduce(%reduce.1593), channel_id=1506, replica_groups=[1,8]<=[8], use_global_device_ids=true, to_apply=%region_1625.39124.clone
  %convert_element_type.5551 = bf16[] convert(%all-reduce.703)
  %add.4825 = bf16[] add(%add.4824, %convert_element_type.5551)
  %convert_element_type.5553 = f32[1,4096,14336]{2,1,0} convert(%integer_pow.273)
  %reduce.1594 = f32[] reduce(%convert_element_type.5553, %constant.1360), dimensions={0,1,2}, to_apply=%region_1626.39133
  %all-reduce.704 = f32[] all-reduce(%reduce.1594), channel_id=1507, replica_groups=[1,8]<=[8], use_global_device_ids=true, to_apply=%region_1626.39133.clone
  %convert_element_type.5555 = bf16[] convert(%all-reduce.704)
  %add.4826 = bf16[] add(%add.4825, %convert_element_type.5555)
  %convert_element_type.5556 = f32[1,14336,4096]{2,1,0} convert(%integer_pow.274)
  %reduce.1595 = f32[] reduce(%convert_element_type.5556, %constant.1360), dimensions={0,1,2}, to_apply=%region_1627.39142
  %all-reduce.705 = f32[] all-reduce(%reduce.1595), channel_id=1508, replica_groups=[1,8]<=[8], use_global_device_ids=true, to_apply=%region_1627.39142.clone
  %convert_element_type.5557 = bf16[] convert(%all-reduce.705)
  %add.4827 = bf16[] add(%add.4826, %convert_element_type.5557)
  %convert_element_type.5558 = f32[4096]{0} convert(%integer_pow.275)
  %reduce.1596 = f32[] reduce(%convert_element_type.5558, %constant.1360), dimensions={0}, to_apply=%region_1628.39151
  %convert_element_type.5559 = bf16[] convert(%reduce.1596)
  %add.4828 = bf16[] add(%add.4827, %convert_element_type.5559)
  %convert_element_type.5560 = f32[4096]{0} convert(%integer_pow.276)
  %reduce.1597 = f32[] reduce(%convert_element_type.5560, %constant.1360), dimensions={0}, to_apply=%region_1629.39160
  %convert_element_type.5562 = bf16[] convert(%reduce.1597)
  %add.4829 = bf16[] add(%add.4828, %convert_element_type.5562)
  %convert_element_type.5563 = f32[512,8,128]{2,1,0} convert(%integer_pow.277)
  %reduce.1598 = f32[] reduce(%convert_element_type.5563, %constant.1360), dimensions={0,1,2}, to_apply=%region_1630.39169
  %all-reduce.706 = f32[] all-reduce(%reduce.1598), channel_id=1509, replica_groups=[1,8]<=[8], use_global_device_ids=true, to_apply=%region_1630.39169.clone
  %convert_element_type.5564 = bf16[] convert(%all-reduce.706)
  %add.4830 = bf16[] add(%add.4829, %convert_element_type.5564)
  %convert_element_type.5565 = f32[32,128,512]{2,1,0} convert(%integer_pow.278)
  %reduce.1599 = f32[] reduce(%convert_element_type.5565, %constant.1360), dimensions={0,1,2}, to_apply=%region_1631.39178
  %all-reduce.707 = f32[] all-reduce(%reduce.1599), channel_id=1510, replica_groups=[1,8]<=[8], use_global_device_ids=true, to_apply=%region_1631.39178.clone
  %convert_element_type.5566 = bf16[] convert(%all-reduce.707)
  %add.4831 = bf16[] add(%add.4830, %convert_element_type.5566)
  %convert_element_type.5567 = f32[512,32,128]{2,1,0} convert(%integer_pow.279)
  %reduce.1600 = f32[] reduce(%convert_element_type.5567, %constant.1360), dimensions={0,1,2}, to_apply=%region_1632.39187
  %all-reduce.708 = f32[] all-reduce(%reduce.1600), channel_id=1511, replica_groups=[1,8]<=[8], use_global_device_ids=true, to_apply=%region_1632.39187.clone
  %convert_element_type.5568 = bf16[] convert(%all-reduce.708)
  %add.4832 = bf16[] add(%add.4831, %convert_element_type.5568)
  %convert_element_type.5569 = f32[512,8,128]{2,1,0} convert(%integer_pow.280)
  %reduce.1601 = f32[] reduce(%convert_element_type.5569, %constant.1360), dimensions={0,1,2}, to_apply=%region_1633.39196
  %all-reduce.709 = f32[] all-reduce(%reduce.1601), channel_id=1512, replica_groups=[1,8]<=[8], use_global_device_ids=true, to_apply=%region_1633.39196.clone
  %convert_element_type.5570 = bf16[] convert(%all-reduce.709)
  %add.4833 = bf16[] add(%add.4832, %convert_element_type.5570)
  %convert_element_type.5571 = f32[512,8]{1,0} convert(%integer_pow.281)
  %reduce.1602 = f32[] reduce(%convert_element_type.5571, %constant.1360), dimensions={0,1}, to_apply=%region_1634.39205
  %all-reduce.710 = f32[] all-reduce(%reduce.1602), channel_id=1513, replica_groups=[1,8]<=[8], use_global_device_ids=true, to_apply=%region_1634.39205.clone
  %convert_element_type.5572 = bf16[] convert(%all-reduce.710)
  %add.4834 = bf16[] add(%add.4833, %convert_element_type.5572)
  %convert_element_type.5573 = f32[1,4096,14336]{2,1,0} convert(%integer_pow.282)
  %reduce.1603 = f32[] reduce(%convert_element_type.5573, %constant.1360), dimensions={0,1,2}, to_apply=%region_1635.39214
  %all-reduce.711 = f32[] all-reduce(%reduce.1603), channel_id=1514, replica_groups=[1,8]<=[8], use_global_device_ids=true, to_apply=%region_1635.39214.clone
  %convert_element_type.5574 = bf16[] convert(%all-reduce.711)
  %add.4835 = bf16[] add(%add.4834, %convert_element_type.5574)
  %convert_element_type.5575 = f32[1,4096,14336]{2,1,0} convert(%integer_pow.283)
  %reduce.1604 = f32[] reduce(%convert_element_type.5575, %constant.1360), dimensions={0,1,2}, to_apply=%region_1636.39223
  %all-reduce.712 = f32[] all-reduce(%reduce.1604), channel_id=1515, replica_groups=[1,8]<=[8], use_global_device_ids=true, to_apply=%region_1636.39223.clone
  %convert_element_type.5576 = bf16[] convert(%all-reduce.712)
  %add.4836 = bf16[] add(%add.4835, %convert_element_type.5576)
  %convert_element_type.5577 = f32[1,14336,4096]{2,1,0} convert(%integer_pow.284)
  %reduce.1605 = f32[] reduce(%convert_element_type.5577, %constant.1360), dimensions={0,1,2}, to_apply=%region_1637.39232
  %all-reduce.713 = f32[] all-reduce(%reduce.1605), channel_id=1516, replica_groups=[1,8]<=[8], use_global_device_ids=true, to_apply=%region_1637.39232.clone
  %convert_element_type.5578 = bf16[] convert(%all-reduce.713)
  %add.4837 = bf16[] add(%add.4836, %convert_element_type.5578)
  %convert_element_type.5579 = f32[4096]{0} convert(%integer_pow.285)
  %reduce.1606 = f32[] reduce(%convert_element_type.5579, %constant.1360), dimensions={0}, to_apply=%region_1638.39241
  %convert_element_type.5580 = bf16[] convert(%reduce.1606)
  %add.4838 = bf16[] add(%add.4837, %convert_element_type.5580)
  %convert_element_type.5582 = f32[4096]{0} convert(%integer_pow.286)
  %reduce.1607 = f32[] reduce(%convert_element_type.5582, %constant.1360), dimensions={0}, to_apply=%region_1639.39250
  %convert_element_type.5583 = bf16[] convert(%reduce.1607)
  %add.4839 = bf16[] add(%add.4838, %convert_element_type.5583)
  %convert_element_type.5584 = f32[512,8,128]{2,1,0} convert(%integer_pow.287)
  %reduce.1608 = f32[] reduce(%convert_element_type.5584, %constant.1360), dimensions={0,1,2}, to_apply=%region_1640.39259
  %all-reduce.714 = f32[] all-reduce(%reduce.1608), channel_id=1517, replica_groups=[1,8]<=[8], use_global_device_ids=true, to_apply=%region_1640.39259.clone
  %convert_element_type.5585 = bf16[] convert(%all-reduce.714)
  %add.4840 = bf16[] add(%add.4839, %convert_element_type.5585)
  %convert_element_type.5586 = f32[32,128,512]{2,1,0} convert(%integer_pow.288)
  %reduce.1609 = f32[] reduce(%convert_element_type.5586, %constant.1360), dimensions={0,1,2}, to_apply=%region_1641.39268
  %all-reduce.715 = f32[] all-reduce(%reduce.1609), channel_id=1518, replica_groups=[1,8]<=[8], use_global_device_ids=true, to_apply=%region_1641.39268.clone
  %convert_element_type.5587 = bf16[] convert(%all-reduce.715)
  %add.4841 = bf16[] add(%add.4840, %convert_element_type.5587)
  %convert_element_type.5588 = f32[512,32,128]{2,1,0} convert(%integer_pow.289)
  %reduce.1610 = f32[] reduce(%convert_element_type.5588, %constant.1360), dimensions={0,1,2}, to_apply=%region_1642.39277
  %all-reduce.716 = f32[] all-reduce(%reduce.1610), channel_id=1519, replica_groups=[1,8]<=[8], use_global_device_ids=true, to_apply=%region_1642.39277.clone
  %convert_element_type.5589 = bf16[] convert(%all-reduce.716)
  %add.4842 = bf16[] add(%add.4841, %convert_element_type.5589)
  %convert_element_type.5590 = f32[512,8,128]{2,1,0} convert(%integer_pow.290)
  %reduce.1611 = f32[] reduce(%convert_element_type.5590, %constant.1360), dimensions={0,1,2}, to_apply=%region_1643.39286
  %all-reduce.717 = f32[] all-reduce(%reduce.1611), channel_id=1520, replica_groups=[1,8]<=[8], use_global_device_ids=true, to_apply=%region_1643.39286.clone
  %convert_element_type.5591 = bf16[] convert(%all-reduce.717)
  %add.4843 = bf16[] add(%add.4842, %convert_element_type.5591)
  %convert_element_type.5592 = f32[512,8]{1,0} convert(%integer_pow.291)
  %reduce.1612 = f32[] reduce(%convert_element_type.5592, %constant.1360), dimensions={0,1}, to_apply=%region_1644.39295
  %all-reduce.718 = f32[] all-reduce(%reduce.1612), channel_id=1521, replica_groups=[1,8]<=[8], use_global_device_ids=true, to_apply=%region_1644.39295.clone
  %convert_element_type.5594 = bf16[] convert(%all-reduce.718)
  %add.4844 = bf16[] add(%add.4843, %convert_element_type.5594)
  %convert_element_type.5595 = f32[1,4096,14336]{2,1,0} convert(%integer_pow.292)
  %reduce.1613 = f32[] reduce(%convert_element_type.5595, %constant.1360), dimensions={0,1,2}, to_apply=%region_1645.39304
  %all-reduce.719 = f32[] all-reduce(%reduce.1613), channel_id=1522, replica_groups=[1,8]<=[8], use_global_device_ids=true, to_apply=%region_1645.39304.clone
  %convert_element_type.5596 = bf16[] convert(%all-reduce.719)
  %add.4845 = bf16[] add(%add.4844, %convert_element_type.5596)
  %convert_element_type.5597 = f32[1,4096,14336]{2,1,0} convert(%integer_pow.293)
  %reduce.1614 = f32[] reduce(%convert_element_type.5597, %constant.1360), dimensions={0,1,2}, to_apply=%region_1646.39313
  %all-reduce.720 = f32[] all-reduce(%reduce.1614), channel_id=1523, replica_groups=[1,8]<=[8], use_global_device_ids=true, to_apply=%region_1646.39313.clone
  %convert_element_type.5598 = bf16[] convert(%all-reduce.720)
  %add.4847 = bf16[] add(%add.4845, %convert_element_type.5598)
  %convert_element_type.5599 = f32[1,14336,4096]{2,1,0} convert(%integer_pow.294)
  %reduce.1615 = f32[] reduce(%convert_element_type.5599, %constant.1360), dimensions={0,1,2}, to_apply=%region_1647.39322
  %all-reduce.721 = f32[] all-reduce(%reduce.1615), channel_id=1524, replica_groups=[1,8]<=[8], use_global_device_ids=true, to_apply=%region_1647.39322.clone
  %convert_element_type.5600 = bf16[] convert(%all-reduce.721)
  %add.4848 = bf16[] add(%add.4847, %convert_element_type.5600)
  %convert_element_type.5601 = f32[4096]{0} convert(%integer_pow.295)
  %reduce.1616 = f32[] reduce(%convert_element_type.5601, %constant.1360), dimensions={0}, to_apply=%region_1648.39331
  %convert_element_type.5603 = bf16[] convert(%reduce.1616)
  %add.4849 = bf16[] add(%add.4848, %convert_element_type.5603)
  %convert_element_type.5604 = f32[4096]{0} convert(%integer_pow.296)
  %reduce.1617 = f32[] reduce(%convert_element_type.5604, %constant.1360), dimensions={0}, to_apply=%region_1649.39340
  %convert_element_type.5605 = bf16[] convert(%reduce.1617)
  %add.4850 = bf16[] add(%add.4849, %convert_element_type.5605)
  %convert_element_type.5606 = f32[512,8,128]{2,1,0} convert(%integer_pow.297)
  %reduce.1618 = f32[] reduce(%convert_element_type.5606, %constant.1360), dimensions={0,1,2}, to_apply=%region_1650.39349
  %all-reduce.722 = f32[] all-reduce(%reduce.1618), channel_id=1525, replica_groups=[1,8]<=[8], use_global_device_ids=true, to_apply=%region_1650.39349.clone
  %convert_element_type.5607 = bf16[] convert(%all-reduce.722)
  %add.4851 = bf16[] add(%add.4850, %convert_element_type.5607)
  %convert_element_type.5608 = f32[32,128,512]{2,1,0} convert(%integer_pow.298)
  %reduce.1619 = f32[] reduce(%convert_element_type.5608, %constant.1360), dimensions={0,1,2}, to_apply=%region_1651.39358
  %all-reduce.723 = f32[] all-reduce(%reduce.1619), channel_id=1526, replica_groups=[1,8]<=[8], use_global_device_ids=true, to_apply=%region_1651.39358.clone
  %convert_element_type.5609 = bf16[] convert(%all-reduce.723)
  %add.4852 = bf16[] add(%add.4851, %convert_element_type.5609)
  %convert_element_type.5611 = f32[512,32,128]{2,1,0} convert(%integer_pow.299)
  %reduce.1620 = f32[] reduce(%convert_element_type.5611, %constant.1360), dimensions={0,1,2}, to_apply=%region_1652.39367
  %all-reduce.724 = f32[] all-reduce(%reduce.1620), channel_id=1527, replica_groups=[1,8]<=[8], use_global_device_ids=true, to_apply=%region_1652.39367.clone
  %convert_element_type.5612 = bf16[] convert(%all-reduce.724)
  %add.4853 = bf16[] add(%add.4852, %convert_element_type.5612)
  %convert_element_type.5613 = f32[512,8,128]{2,1,0} convert(%integer_pow.300)
  %reduce.1621 = f32[] reduce(%convert_element_type.5613, %constant.1360), dimensions={0,1,2}, to_apply=%region_1653.39376
  %all-reduce.725 = f32[] all-reduce(%reduce.1621), channel_id=1528, replica_groups=[1,8]<=[8], use_global_device_ids=true, to_apply=%region_1653.39376.clone
  %convert_element_type.5614 = bf16[] convert(%all-reduce.725)
  %add.4854 = bf16[] add(%add.4853, %convert_element_type.5614)
  %convert_element_type.5615 = f32[512,8]{1,0} convert(%integer_pow.301)
  %reduce.1622 = f32[] reduce(%convert_element_type.5615, %constant.1360), dimensions={0,1}, to_apply=%region_1654.39385
  %all-reduce.726 = f32[] all-reduce(%reduce.1622), channel_id=1529, replica_groups=[1,8]<=[8], use_global_device_ids=true, to_apply=%region_1654.39385.clone
  %convert_element_type.5616 = bf16[] convert(%all-reduce.726)
  %add.4855 = bf16[] add(%add.4854, %convert_element_type.5616)
  %convert_element_type.5617 = f32[1,4096,14336]{2,1,0} convert(%integer_pow.302)
  %reduce.1623 = f32[] reduce(%convert_element_type.5617, %constant.1360), dimensions={0,1,2}, to_apply=%region_1655.39394
  %all-reduce.727 = f32[] all-reduce(%reduce.1623), channel_id=1530, replica_groups=[1,8]<=[8], use_global_device_ids=true, to_apply=%region_1655.39394.clone
  %convert_element_type.5618 = bf16[] convert(%all-reduce.727)
  %add.4856 = bf16[] add(%add.4855, %convert_element_type.5618)
  %convert_element_type.5619 = f32[1,4096,14336]{2,1,0} convert(%integer_pow.303)
  %reduce.1624 = f32[] reduce(%convert_element_type.5619, %constant.1360), dimensions={0,1,2}, to_apply=%region_1656.39403
  %all-reduce.728 = f32[] all-reduce(%reduce.1624), channel_id=1531, replica_groups=[1,8]<=[8], use_global_device_ids=true, to_apply=%region_1656.39403.clone
  %convert_element_type.5620 = bf16[] convert(%all-reduce.728)
  %add.4857 = bf16[] add(%add.4856, %convert_element_type.5620)
  %convert_element_type.5621 = f32[1,14336,4096]{2,1,0} convert(%integer_pow.304)
  %reduce.1625 = f32[] reduce(%convert_element_type.5621, %constant.1360), dimensions={0,1,2}, to_apply=%region_1657.39412
  %all-reduce.729 = f32[] all-reduce(%reduce.1625), channel_id=1532, replica_groups=[1,8]<=[8], use_global_device_ids=true, to_apply=%region_1657.39412.clone
  %convert_element_type.5622 = bf16[] convert(%all-reduce.729)
  %add.4859 = bf16[] add(%add.4857, %convert_element_type.5622)
  %convert_element_type.5623 = f32[4096]{0} convert(%integer_pow.305)
  %reduce.1626 = f32[] reduce(%convert_element_type.5623, %constant.1360), dimensions={0}, to_apply=%region_1658.39421
  %convert_element_type.5624 = bf16[] convert(%reduce.1626)
  %add.4860 = bf16[] add(%add.4859, %convert_element_type.5624)
  %convert_element_type.5625 = f32[4096]{0} convert(%integer_pow.306)
  %reduce.1627 = f32[] reduce(%convert_element_type.5625, %constant.1360), dimensions={0}, to_apply=%region_1659.39430
  %convert_element_type.5626 = bf16[] convert(%reduce.1627)
  %add.4861 = bf16[] add(%add.4860, %convert_element_type.5626)
  %convert_element_type.5627 = f32[512,8,128]{2,1,0} convert(%integer_pow.307)
  %reduce.1628 = f32[] reduce(%convert_element_type.5627, %constant.1360), dimensions={0,1,2}, to_apply=%region_1660.39439
  %all-reduce.730 = f32[] all-reduce(%reduce.1628), channel_id=1533, replica_groups=[1,8]<=[8], use_global_device_ids=true, to_apply=%region_1660.39439.clone
  %convert_element_type.5628 = bf16[] convert(%all-reduce.730)
  %add.4862 = bf16[] add(%add.4861, %convert_element_type.5628)
  %convert_element_type.5630 = f32[32,128,512]{2,1,0} convert(%integer_pow.308)
  %reduce.1629 = f32[] reduce(%convert_element_type.5630, %constant.1360), dimensions={0,1,2}, to_apply=%region_1661.39448
  %all-reduce.731 = f32[] all-reduce(%reduce.1629), channel_id=1534, replica_groups=[1,8]<=[8], use_global_device_ids=true, to_apply=%region_1661.39448.clone
  %convert_element_type.5631 = bf16[] convert(%all-reduce.731)
  %add.4863 = bf16[] add(%add.4862, %convert_element_type.5631)
  %convert_element_type.5632 = f32[512,32,128]{2,1,0} convert(%integer_pow.309)
  %reduce.1630 = f32[] reduce(%convert_element_type.5632, %constant.1360), dimensions={0,1,2}, to_apply=%region_1662.39457
  %all-reduce.732 = f32[] all-reduce(%reduce.1630), channel_id=1535, replica_groups=[1,8]<=[8], use_global_device_ids=true, to_apply=%region_1662.39457.clone
  %convert_element_type.5633 = bf16[] convert(%all-reduce.732)
  %add.4864 = bf16[] add(%add.4863, %convert_element_type.5633)
  %convert_element_type.5634 = f32[512,8,128]{2,1,0} convert(%integer_pow.310)
  %reduce.1631 = f32[] reduce(%convert_element_type.5634, %constant.1360), dimensions={0,1,2}, to_apply=%region_1663.39466
  %all-reduce.733 = f32[] all-reduce(%reduce.1631), channel_id=1536, replica_groups=[1,8]<=[8], use_global_device_ids=true, to_apply=%region_1663.39466.clone
  %convert_element_type.5635 = bf16[] convert(%all-reduce.733)
  %add.4865 = bf16[] add(%add.4864, %convert_element_type.5635)
  %convert_element_type.5636 = f32[512,8]{1,0} convert(%integer_pow.311)
  %reduce.1632 = f32[] reduce(%convert_element_type.5636, %constant.1360), dimensions={0,1}, to_apply=%region_1664.39475
  %all-reduce.734 = f32[] all-reduce(%reduce.1632), channel_id=1537, replica_groups=[1,8]<=[8], use_global_device_ids=true, to_apply=%region_1664.39475.clone
  %convert_element_type.5639 = bf16[] convert(%all-reduce.734)
  %add.4866 = bf16[] add(%add.4865, %convert_element_type.5639)
  %convert_element_type.5640 = f32[1,4096,14336]{2,1,0} convert(%integer_pow.312)
  %reduce.1633 = f32[] reduce(%convert_element_type.5640, %constant.1360), dimensions={0,1,2}, to_apply=%region_1665.39484
  %all-reduce.735 = f32[] all-reduce(%reduce.1633), channel_id=1538, replica_groups=[1,8]<=[8], use_global_device_ids=true, to_apply=%region_1665.39484.clone
  %convert_element_type.5641 = bf16[] convert(%all-reduce.735)
  %add.4867 = bf16[] add(%add.4866, %convert_element_type.5641)
  %convert_element_type.5642 = f32[1,4096,14336]{2,1,0} convert(%integer_pow.313)
  %reduce.1634 = f32[] reduce(%convert_element_type.5642, %constant.1360), dimensions={0,1,2}, to_apply=%region_1666.39493
  %all-reduce.736 = f32[] all-reduce(%reduce.1634), channel_id=1539, replica_groups=[1,8]<=[8], use_global_device_ids=true, to_apply=%region_1666.39493.clone
  %convert_element_type.5643 = bf16[] convert(%all-reduce.736)
  %add.4868 = bf16[] add(%add.4867, %convert_element_type.5643)
  %convert_element_type.5645 = f32[1,14336,4096]{2,1,0} convert(%integer_pow.314)
  %reduce.1635 = f32[] reduce(%convert_element_type.5645, %constant.1360), dimensions={0,1,2}, to_apply=%region_1667.39502
  %all-reduce.737 = f32[] all-reduce(%reduce.1635), channel_id=1540, replica_groups=[1,8]<=[8], use_global_device_ids=true, to_apply=%region_1667.39502.clone
  %convert_element_type.5646 = bf16[] convert(%all-reduce.737)
  %add.4869 = bf16[] add(%add.4868, %convert_element_type.5646)
  %convert_element_type.5647 = f32[4096]{0} convert(%integer_pow.315)
  %reduce.1636 = f32[] reduce(%convert_element_type.5647, %constant.1360), dimensions={0}, to_apply=%region_1668.39511
  %convert_element_type.5648 = bf16[] convert(%reduce.1636)
  %add.4871 = bf16[] add(%add.4869, %convert_element_type.5648)
  %convert_element_type.5649 = f32[4096]{0} convert(%integer_pow.316)
  %reduce.1637 = f32[] reduce(%convert_element_type.5649, %constant.1360), dimensions={0}, to_apply=%region_1669.39520
  %convert_element_type.5650 = bf16[] convert(%reduce.1637)
  %add.4872 = bf16[] add(%add.4871, %convert_element_type.5650)
  %convert_element_type.5651 = f32[512,8,128]{2,1,0} convert(%integer_pow.317)
  %reduce.1638 = f32[] reduce(%convert_element_type.5651, %constant.1360), dimensions={0,1,2}, to_apply=%region_1670.39529
  %all-reduce.738 = f32[] all-reduce(%reduce.1638), channel_id=1541, replica_groups=[1,8]<=[8], use_global_device_ids=true, to_apply=%region_1670.39529.clone
  %convert_element_type.5652 = bf16[] convert(%all-reduce.738)
  %add.4873 = bf16[] add(%add.4872, %convert_element_type.5652)
  %convert_element_type.5653 = f32[32,128,512]{2,1,0} convert(%integer_pow.318)
  %reduce.1639 = f32[] reduce(%convert_element_type.5653, %constant.1360), dimensions={0,1,2}, to_apply=%region_1671.39538
  %all-reduce.739 = f32[] all-reduce(%reduce.1639), channel_id=1542, replica_groups=[1,8]<=[8], use_global_device_ids=true, to_apply=%region_1671.39538.clone
  %convert_element_type.5654 = bf16[] convert(%all-reduce.739)
  %add.4874 = bf16[] add(%add.4873, %convert_element_type.5654)
  %convert_element_type.5657 = f32[512,32,128]{2,1,0} convert(%integer_pow.319)
  %reduce.1640 = f32[] reduce(%convert_element_type.5657, %constant.1360), dimensions={0,1,2}, to_apply=%region_1672.39547
  %all-reduce.740 = f32[] all-reduce(%reduce.1640), channel_id=1543, replica_groups=[1,8]<=[8], use_global_device_ids=true, to_apply=%region_1672.39547.clone
  %convert_element_type.5658 = bf16[] convert(%all-reduce.740)
  %add.4875 = bf16[] add(%add.4874, %convert_element_type.5658)
  %convert_element_type.5659 = f32[512,8,128]{2,1,0} convert(%integer_pow.320)
  %reduce.1641 = f32[] reduce(%convert_element_type.5659, %constant.1360), dimensions={0,1,2}, to_apply=%region_1673.39556
  %all-reduce.741 = f32[] all-reduce(%reduce.1641), channel_id=1544, replica_groups=[1,8]<=[8], use_global_device_ids=true, to_apply=%region_1673.39556.clone
  %convert_element_type.5660 = bf16[] convert(%all-reduce.741)
  %add.4876 = bf16[] add(%add.4875, %convert_element_type.5660)
  %convert_element_type.5661 = f32[512,32000]{1,0} convert(%integer_pow.321)
  %reduce.1642 = f32[] reduce(%convert_element_type.5661, %constant.1360), dimensions={0,1}, to_apply=%region_1674.39565
  %all-reduce.742 = f32[] all-reduce(%reduce.1642), channel_id=1545, replica_groups=[1,8]<=[8], use_global_device_ids=true, to_apply=%region_1674.39565.clone
  %convert_element_type.5662 = bf16[] convert(%all-reduce.742)
  %add.4877 = bf16[] add(%add.4876, %convert_element_type.5662)
  %convert_element_type.5663 = f32[32000,512]{1,0} convert(%integer_pow.322)
  %reduce.1643 = f32[] reduce(%convert_element_type.5663, %constant.1360), dimensions={0,1}, to_apply=%region_1675.39574
  %all-reduce.743 = f32[] all-reduce(%reduce.1643), channel_id=1546, replica_groups=[1,8]<=[8], use_global_device_ids=true, to_apply=%region_1675.39574.clone
  %convert_element_type.5664 = bf16[] convert(%all-reduce.743)
  %add.4878 = bf16[] add(%add.4877, %convert_element_type.5664)
  %sqrt.324 = bf16[] sqrt(%add.4878)
  %sub.424 = f32[1,4096,32000]{2,1,0} broadcast(%log.2), dimensions={0,1}
  %sub.425 = f32[1,4096,32000]{2,1,0} subtract(%sub.228, %sub.424)
  %broadcast.3947 = f32[1,4096,32000]{2,1,0} broadcast(%constant.1360), dimensions={}
  %mul.13628 = f32[1,4096,32000]{2,1,0} select(%eq.2166, %sub.425, %broadcast.3947)
  %reduce.1644 = f32[1,4096]{1,0} reduce(%mul.13628, %constant.1360), dimensions={2}, to_apply=%region_1676.39587
  %neg.318 = f32[1,4096]{1,0} negate(%reduce.1644)
  %square.455 = f32[1,4096]{1,0} multiply(%add.1846, %add.1846)
  %mul.13632 = f32[1,4096]{1,0} multiply(%square.455, %broadcast.3619)
  %add.4879 = f32[1,4096]{1,0} add(%neg.318, %mul.13632)
  %sharding_constraint.2568 = f32[1,4096]{1,0} copy(%add.4879)
  %mul.13636 = f32[1,4096]{1,0} select(%ne.96, %sharding_constraint.2568, %broadcast.3619)
  %reduce.1645 = f32[] reduce(%mul.13636, %constant.1360), dimensions={0,1}, to_apply=%region_1677.39598
  %all-reduce.744 = f32[] all-reduce(%reduce.1645), channel_id=1547, replica_groups=[1,8]<=[8], use_global_device_ids=true, to_apply=%region_1677.39598.clone
  %div.3265 = f32[] divide(%all-reduce.744, %add.1845)
  %square.456 = bf16[4096]{0} multiply(%add.2785, %add.2785)
  %convert_element_type.5665 = f32[4096]{0} convert(%square.456)
  %reduce.1646 = f32[] reduce(%convert_element_type.5665, %constant.1360), dimensions={0}, to_apply=%region_1678.39606
  %convert_element_type.5667 = bf16[] convert(%reduce.1646)
  %square.457 = bf16[512,8]{1,0} multiply(%add.2790, %add.2790)
  %convert_element_type.5668 = f32[512,8]{1,0} convert(%square.457)
  %reduce.1647 = f32[] reduce(%convert_element_type.5668, %constant.1360), dimensions={0,1}, to_apply=%region_1679.39614
  %all-reduce.745 = f32[] all-reduce(%reduce.1647), channel_id=1548, replica_groups=[1,8]<=[8], use_global_device_ids=true, to_apply=%region_1679.39614.clone
  %convert_element_type.5669 = bf16[] convert(%all-reduce.745)
  %add.4880 = bf16[] add(%convert_element_type.5667, %convert_element_type.5669)
  %square.458 = bf16[1,4096,14336]{2,1,0} multiply(%add.2796, %add.2796)
  %convert_element_type.5670 = f32[1,4096,14336]{2,1,0} convert(%square.458)
  %reduce.1648 = f32[] reduce(%convert_element_type.5670, %constant.1360), dimensions={0,1,2}, to_apply=%region_1680.39623
  %all-reduce.746 = f32[] all-reduce(%reduce.1648), channel_id=1549, replica_groups=[1,8]<=[8], use_global_device_ids=true, to_apply=%region_1680.39623.clone
  %convert_element_type.5671 = bf16[] convert(%all-reduce.746)
  %add.4881 = bf16[] add(%add.4880, %convert_element_type.5671)
  %square.459 = bf16[1,4096,14336]{2,1,0} multiply(%add.2802, %add.2802)
  %convert_element_type.5672 = f32[1,4096,14336]{2,1,0} convert(%square.459)
  %reduce.1649 = f32[] reduce(%convert_element_type.5672, %constant.1360), dimensions={0,1,2}, to_apply=%region_1681.39632
  %all-reduce.747 = f32[] all-reduce(%reduce.1649), channel_id=1550, replica_groups=[1,8]<=[8], use_global_device_ids=true, to_apply=%region_1681.39632.clone
  %convert_element_type.5673 = bf16[] convert(%all-reduce.747)
  %add.4882 = bf16[] add(%add.4881, %convert_element_type.5673)
  %square.460 = bf16[1,14336,4096]{2,1,0} multiply(%add.2807, %add.2807)
  %convert_element_type.5674 = f32[1,14336,4096]{2,1,0} convert(%square.460)
  %reduce.1650 = f32[] reduce(%convert_element_type.5674, %constant.1360), dimensions={0,1,2}, to_apply=%region_1682.39641
  %all-reduce.748 = f32[] all-reduce(%reduce.1650), channel_id=1551, replica_groups=[1,8]<=[8], use_global_device_ids=true, to_apply=%region_1682.39641.clone
  %convert_element_type.5675 = bf16[] convert(%all-reduce.748)
  %add.4883 = bf16[] add(%add.4882, %convert_element_type.5675)
  %square.461 = bf16[4096]{0} multiply(%add.2812, %add.2812)
  %convert_element_type.5676 = f32[4096]{0} convert(%square.461)
  %reduce.1651 = f32[] reduce(%convert_element_type.5676, %constant.1360), dimensions={0}, to_apply=%region_1683.39650
  %convert_element_type.5677 = bf16[] convert(%reduce.1651)
  %add.4884 = bf16[] add(%add.4883, %convert_element_type.5677)
  %square.462 = bf16[4096]{0} multiply(%add.2817, %add.2817)
  %convert_element_type.5678 = f32[4096]{0} convert(%square.462)
  %reduce.1652 = f32[] reduce(%convert_element_type.5678, %constant.1360), dimensions={0}, to_apply=%region_1684.39659
  %convert_element_type.5680 = bf16[] convert(%reduce.1652)
  %add.4885 = bf16[] add(%add.4884, %convert_element_type.5680)
  %square.463 = bf16[512,8,128]{2,1,0} multiply(%add.2822, %add.2822)
  %convert_element_type.5681 = f32[512,8,128]{2,1,0} convert(%square.463)
  %reduce.1653 = f32[] reduce(%convert_element_type.5681, %constant.1360), dimensions={0,1,2}, to_apply=%region_1685.39668
  %all-reduce.749 = f32[] all-reduce(%reduce.1653), channel_id=1552, replica_groups=[1,8]<=[8], use_global_device_ids=true, to_apply=%region_1685.39668.clone
  %convert_element_type.5682 = bf16[] convert(%all-reduce.749)
  %add.4886 = bf16[] add(%add.4885, %convert_element_type.5682)
  %square.464 = bf16[32,128,512]{2,1,0} multiply(%add.2828, %add.2828)
  %convert_element_type.5684 = f32[32,128,512]{2,1,0} convert(%square.464)
  %reduce.1654 = f32[] reduce(%convert_element_type.5684, %constant.1360), dimensions={0,1,2}, to_apply=%region_1686.39677
  %all-reduce.750 = f32[] all-reduce(%reduce.1654), channel_id=1553, replica_groups=[1,8]<=[8], use_global_device_ids=true, to_apply=%region_1686.39677.clone
  %convert_element_type.5685 = bf16[] convert(%all-reduce.750)
  %add.4887 = bf16[] add(%add.4886, %convert_element_type.5685)
  %square.465 = bf16[512,32,128]{2,1,0} multiply(%add.2833, %add.2833)
  %convert_element_type.5686 = f32[512,32,128]{2,1,0} convert(%square.465)
  %reduce.1655 = f32[] reduce(%convert_element_type.5686, %constant.1360), dimensions={0,1,2}, to_apply=%region_1687.39686
  %all-reduce.751 = f32[] all-reduce(%reduce.1655), channel_id=1554, replica_groups=[1,8]<=[8], use_global_device_ids=true, to_apply=%region_1687.39686.clone
  %convert_element_type.5687 = bf16[] convert(%all-reduce.751)
  %add.4888 = bf16[] add(%add.4887, %convert_element_type.5687)
  %square.466 = bf16[512,8,128]{2,1,0} multiply(%add.2839, %add.2839)
  %convert_element_type.5688 = f32[512,8,128]{2,1,0} convert(%square.466)
  %reduce.1656 = f32[] reduce(%convert_element_type.5688, %constant.1360), dimensions={0,1,2}, to_apply=%region_1688.39695
  %all-reduce.752 = f32[] all-reduce(%reduce.1656), channel_id=1555, replica_groups=[1,8]<=[8], use_global_device_ids=true, to_apply=%region_1688.39695.clone
  %convert_element_type.5689 = bf16[] convert(%all-reduce.752)
  %add.4889 = bf16[] add(%add.4888, %convert_element_type.5689)
  %square.467 = bf16[512,8]{1,0} multiply(%add.2844, %add.2844)
  %convert_element_type.5690 = f32[512,8]{1,0} convert(%square.467)
  %reduce.1657 = f32[] reduce(%convert_element_type.5690, %constant.1360), dimensions={0,1}, to_apply=%region_1689.39704
  %all-reduce.753 = f32[] all-reduce(%reduce.1657), channel_id=1556, replica_groups=[1,8]<=[8], use_global_device_ids=true, to_apply=%region_1689.39704.clone
  %convert_element_type.5691 = bf16[] convert(%all-reduce.753)
  %add.4890 = bf16[] add(%add.4889, %convert_element_type.5691)
  %square.468 = bf16[1,4096,14336]{2,1,0} multiply(%add.2849, %add.2849)
  %convert_element_type.5692 = f32[1,4096,14336]{2,1,0} convert(%square.468)
  %reduce.1658 = f32[] reduce(%convert_element_type.5692, %constant.1360), dimensions={0,1,2}, to_apply=%region_1690.39713
  %all-reduce.754 = f32[] all-reduce(%reduce.1658), channel_id=1557, replica_groups=[1,8]<=[8], use_global_device_ids=true, to_apply=%region_1690.39713.clone
  %convert_element_type.5693 = bf16[] convert(%all-reduce.754)
  %add.4891 = bf16[] add(%add.4890, %convert_element_type.5693)
  %square.469 = bf16[1,4096,14336]{2,1,0} multiply(%add.2854, %add.2854)
  %convert_element_type.5694 = f32[1,4096,14336]{2,1,0} convert(%square.469)
  %reduce.1659 = f32[] reduce(%convert_element_type.5694, %constant.1360), dimensions={0,1,2}, to_apply=%region_1691.39722
  %all-reduce.755 = f32[] all-reduce(%reduce.1659), channel_id=1558, replica_groups=[1,8]<=[8], use_global_device_ids=true, to_apply=%region_1691.39722.clone
  %convert_element_type.5695 = bf16[] convert(%all-reduce.755)
  %add.4892 = bf16[] add(%add.4891, %convert_element_type.5695)
  %square.470 = bf16[1,14336,4096]{2,1,0} multiply(%add.2859, %add.2859)
  %convert_element_type.5696 = f32[1,14336,4096]{2,1,0} convert(%square.470)
  %reduce.1660 = f32[] reduce(%convert_element_type.5696, %constant.1360), dimensions={0,1,2}, to_apply=%region_1692.39731
  %all-reduce.756 = f32[] all-reduce(%reduce.1660), channel_id=1559, replica_groups=[1,8]<=[8], use_global_device_ids=true, to_apply=%region_1692.39731.clone
  %convert_element_type.5699 = bf16[] convert(%all-reduce.756)
  %add.4893 = bf16[] add(%add.4892, %convert_element_type.5699)
  %square.471 = bf16[4096]{0} multiply(%add.2864, %add.2864)
  %convert_element_type.5700 = f32[4096]{0} convert(%square.471)
  %reduce.1661 = f32[] reduce(%convert_element_type.5700, %constant.1360), dimensions={0}, to_apply=%region_1693.39740
  %convert_element_type.5701 = bf16[] convert(%reduce.1661)
  %add.4894 = bf16[] add(%add.4893, %convert_element_type.5701)
  %square.472 = bf16[4096]{0} multiply(%add.2869, %add.2869)
  %convert_element_type.5703 = f32[4096]{0} convert(%square.472)
  %reduce.1662 = f32[] reduce(%convert_element_type.5703, %constant.1360), dimensions={0}, to_apply=%region_1694.39749
  %convert_element_type.5704 = bf16[] convert(%reduce.1662)
  %add.4895 = bf16[] add(%add.4894, %convert_element_type.5704)
  %square.473 = bf16[512,8,128]{2,1,0} multiply(%add.2875, %add.2875)
  %convert_element_type.5705 = f32[512,8,128]{2,1,0} convert(%square.473)
  %reduce.1663 = f32[] reduce(%convert_element_type.5705, %constant.1360), dimensions={0,1,2}, to_apply=%region_1695.39758
  %all-reduce.757 = f32[] all-reduce(%reduce.1663), channel_id=1560, replica_groups=[1,8]<=[8], use_global_device_ids=true, to_apply=%region_1695.39758.clone
  %convert_element_type.5706 = bf16[] convert(%all-reduce.757)
  %add.4896 = bf16[] add(%add.4895, %convert_element_type.5706)
  %square.474 = bf16[32,128,512]{2,1,0} multiply(%add.2881, %add.2881)
  %convert_element_type.5707 = f32[32,128,512]{2,1,0} convert(%square.474)
  %reduce.1664 = f32[] reduce(%convert_element_type.5707, %constant.1360), dimensions={0,1,2}, to_apply=%region_1696.39767
  %all-reduce.758 = f32[] all-reduce(%reduce.1664), channel_id=1561, replica_groups=[1,8]<=[8], use_global_device_ids=true, to_apply=%region_1696.39767.clone
  %convert_element_type.5708 = bf16[] convert(%all-reduce.758)
  %add.4897 = bf16[] add(%add.4896, %convert_element_type.5708)
  %square.475 = bf16[512,32,128]{2,1,0} multiply(%add.2886, %add.2886)
  %convert_element_type.5709 = f32[512,32,128]{2,1,0} convert(%square.475)
  %reduce.1665 = f32[] reduce(%convert_element_type.5709, %constant.1360), dimensions={0,1,2}, to_apply=%region_1697.39776
  %all-reduce.759 = f32[] all-reduce(%reduce.1665), channel_id=1562, replica_groups=[1,8]<=[8], use_global_device_ids=true, to_apply=%region_1697.39776.clone
  %convert_element_type.5710 = bf16[] convert(%all-reduce.759)
  %add.4898 = bf16[] add(%add.4897, %convert_element_type.5710)
  %square.476 = bf16[512,8,128]{2,1,0} multiply(%add.2891, %add.2891)
  %convert_element_type.5711 = f32[512,8,128]{2,1,0} convert(%square.476)
  %reduce.1666 = f32[] reduce(%convert_element_type.5711, %constant.1360), dimensions={0,1,2}, to_apply=%region_1698.39785
  %all-reduce.760 = f32[] all-reduce(%reduce.1666), channel_id=1563, replica_groups=[1,8]<=[8], use_global_device_ids=true, to_apply=%region_1698.39785.clone
  %convert_element_type.5712 = bf16[] convert(%all-reduce.760)
  %add.4899 = bf16[] add(%add.4898, %convert_element_type.5712)
  %square.477 = bf16[512,8]{1,0} multiply(%add.2897, %add.2897)
  %convert_element_type.5713 = f32[512,8]{1,0} convert(%square.477)
  %reduce.1667 = f32[] reduce(%convert_element_type.5713, %constant.1360), dimensions={0,1}, to_apply=%region_1699.39794
  %all-reduce.761 = f32[] all-reduce(%reduce.1667), channel_id=1564, replica_groups=[1,8]<=[8], use_global_device_ids=true, to_apply=%region_1699.39794.clone
  %convert_element_type.5714 = bf16[] convert(%all-reduce.761)
  %add.4901 = bf16[] add(%add.4899, %convert_element_type.5714)
  %square.478 = bf16[1,4096,14336]{2,1,0} multiply(%add.2904, %add.2904)
  %convert_element_type.5715 = f32[1,4096,14336]{2,1,0} convert(%square.478)
  %reduce.1668 = f32[] reduce(%convert_element_type.5715, %constant.1360), dimensions={0,1,2}, to_apply=%region_1700.39803
  %all-reduce.762 = f32[] all-reduce(%reduce.1668), channel_id=1565, replica_groups=[1,8]<=[8], use_global_device_ids=true, to_apply=%region_1700.39803.clone
  %convert_element_type.5716 = bf16[] convert(%all-reduce.762)
  %add.4902 = bf16[] add(%add.4901, %convert_element_type.5716)
  %square.479 = bf16[1,4096,14336]{2,1,0} multiply(%add.2909, %add.2909)
  %convert_element_type.5717 = f32[1,4096,14336]{2,1,0} convert(%square.479)
  %reduce.1669 = f32[] reduce(%convert_element_type.5717, %constant.1360), dimensions={0,1,2}, to_apply=%region_1701.39812
  %all-reduce.763 = f32[] all-reduce(%reduce.1669), channel_id=1566, replica_groups=[1,8]<=[8], use_global_device_ids=true, to_apply=%region_1701.39812.clone
  %convert_element_type.5718 = bf16[] convert(%all-reduce.763)
  %add.4903 = bf16[] add(%add.4902, %convert_element_type.5718)
  %square.480 = bf16[1,14336,4096]{2,1,0} multiply(%add.2914, %add.2914)
  %convert_element_type.5719 = f32[1,14336,4096]{2,1,0} convert(%square.480)
  %reduce.1670 = f32[] reduce(%convert_element_type.5719, %constant.1360), dimensions={0,1,2}, to_apply=%region_1702.39821
  %all-reduce.764 = f32[] all-reduce(%reduce.1670), channel_id=1567, replica_groups=[1,8]<=[8], use_global_device_ids=true, to_apply=%region_1702.39821.clone
  %convert_element_type.5720 = bf16[] convert(%all-reduce.764)
  %add.4904 = bf16[] add(%add.4903, %convert_element_type.5720)
  %square.481 = bf16[4096]{0} multiply(%add.2921, %add.2921)
  %convert_element_type.5721 = f32[4096]{0} convert(%square.481)
  %reduce.1671 = f32[] reduce(%convert_element_type.5721, %constant.1360), dimensions={0}, to_apply=%region_1703.39830
  %convert_element_type.5722 = bf16[] convert(%reduce.1671)
  %add.4905 = bf16[] add(%add.4904, %convert_element_type.5722)
  %square.482 = bf16[4096]{0} multiply(%add.2926, %add.2926)
  %convert_element_type.5723 = f32[4096]{0} convert(%square.482)
  %reduce.1672 = f32[] reduce(%convert_element_type.5723, %constant.1360), dimensions={0}, to_apply=%region_1704.39839
  %convert_element_type.5724 = bf16[] convert(%reduce.1672)
  %add.4906 = bf16[] add(%add.4905, %convert_element_type.5724)
  %square.483 = bf16[512,8,128]{2,1,0} multiply(%add.2931, %add.2931)
  %convert_element_type.5726 = f32[512,8,128]{2,1,0} convert(%square.483)
  %reduce.1673 = f32[] reduce(%convert_element_type.5726, %constant.1360), dimensions={0,1,2}, to_apply=%region_1705.39848
  %all-reduce.765 = f32[] all-reduce(%reduce.1673), channel_id=1568, replica_groups=[1,8]<=[8], use_global_device_ids=true, to_apply=%region_1705.39848.clone
  %convert_element_type.5727 = bf16[] convert(%all-reduce.765)
  %add.4907 = bf16[] add(%add.4906, %convert_element_type.5727)
  %square.484 = bf16[32,128,512]{2,1,0} multiply(%add.2936, %add.2936)
  %convert_element_type.5729 = f32[32,128,512]{2,1,0} convert(%square.484)
  %reduce.1674 = f32[] reduce(%convert_element_type.5729, %constant.1360), dimensions={0,1,2}, to_apply=%region_1706.39857
  %all-reduce.766 = f32[] all-reduce(%reduce.1674), channel_id=1569, replica_groups=[1,8]<=[8], use_global_device_ids=true, to_apply=%region_1706.39857.clone
  %convert_element_type.5730 = bf16[] convert(%all-reduce.766)
  %add.4908 = bf16[] add(%add.4907, %convert_element_type.5730)
  %square.485 = bf16[512,32,128]{2,1,0} multiply(%add.2941, %add.2941)
  %convert_element_type.5731 = f32[512,32,128]{2,1,0} convert(%square.485)
  %reduce.1675 = f32[] reduce(%convert_element_type.5731, %constant.1360), dimensions={0,1,2}, to_apply=%region_1707.39866
  %all-reduce.767 = f32[] all-reduce(%reduce.1675), channel_id=1570, replica_groups=[1,8]<=[8], use_global_device_ids=true, to_apply=%region_1707.39866.clone
  %convert_element_type.5733 = bf16[] convert(%all-reduce.767)
  %add.4909 = bf16[] add(%add.4908, %convert_element_type.5733)
  %square.486 = bf16[512,8,128]{2,1,0} multiply(%add.2946, %add.2946)
  %convert_element_type.5734 = f32[512,8,128]{2,1,0} convert(%square.486)
  %reduce.1676 = f32[] reduce(%convert_element_type.5734, %constant.1360), dimensions={0,1,2}, to_apply=%region_1708.39875
  %all-reduce.768 = f32[] all-reduce(%reduce.1676), channel_id=1571, replica_groups=[1,8]<=[8], use_global_device_ids=true, to_apply=%region_1708.39875.clone
  %convert_element_type.5735 = bf16[] convert(%all-reduce.768)
  %add.4910 = bf16[] add(%add.4909, %convert_element_type.5735)
  %square.487 = bf16[512,8]{1,0} multiply(%add.2953, %add.2953)
  %convert_element_type.5736 = f32[512,8]{1,0} convert(%square.487)
  %reduce.1677 = f32[] reduce(%convert_element_type.5736, %constant.1360), dimensions={0,1}, to_apply=%region_1709.39884
  %all-reduce.769 = f32[] all-reduce(%reduce.1677), channel_id=1572, replica_groups=[1,8]<=[8], use_global_device_ids=true, to_apply=%region_1709.39884.clone
  %convert_element_type.5737 = bf16[] convert(%all-reduce.769)
  %add.4911 = bf16[] add(%add.4910, %convert_element_type.5737)
  %square.488 = bf16[1,4096,14336]{2,1,0} multiply(%add.2959, %add.2959)
  %convert_element_type.5738 = f32[1,4096,14336]{2,1,0} convert(%square.488)
  %reduce.1678 = f32[] reduce(%convert_element_type.5738, %constant.1360), dimensions={0,1,2}, to_apply=%region_1710.39893
  %all-reduce.770 = f32[] all-reduce(%reduce.1678), channel_id=1573, replica_groups=[1,8]<=[8], use_global_device_ids=true, to_apply=%region_1710.39893.clone
  %convert_element_type.5739 = bf16[] convert(%all-reduce.770)
  %add.4913 = bf16[] add(%add.4911, %convert_element_type.5739)
  %square.489 = bf16[1,4096,14336]{2,1,0} multiply(%add.2964, %add.2964)
  %convert_element_type.5741 = f32[1,4096,14336]{2,1,0} convert(%square.489)
  %reduce.1679 = f32[] reduce(%convert_element_type.5741, %constant.1360), dimensions={0,1,2}, to_apply=%region_1711.39902
  %all-reduce.771 = f32[] all-reduce(%reduce.1679), channel_id=1574, replica_groups=[1,8]<=[8], use_global_device_ids=true, to_apply=%region_1711.39902.clone
  %convert_element_type.5742 = bf16[] convert(%all-reduce.771)
  %add.4914 = bf16[] add(%add.4913, %convert_element_type.5742)
  %square.490 = bf16[1,14336,4096]{2,1,0} multiply(%add.2970, %add.2970)
  %convert_element_type.5743 = f32[1,14336,4096]{2,1,0} convert(%square.490)
  %reduce.1680 = f32[] reduce(%convert_element_type.5743, %constant.1360), dimensions={0,1,2}, to_apply=%region_1712.39911
  %all-reduce.772 = f32[] all-reduce(%reduce.1680), channel_id=1575, replica_groups=[1,8]<=[8], use_global_device_ids=true, to_apply=%region_1712.39911.clone
  %convert_element_type.5745 = bf16[] convert(%all-reduce.772)
  %add.4915 = bf16[] add(%add.4914, %convert_element_type.5745)
  %square.491 = bf16[4096]{0} multiply(%add.2975, %add.2975)
  %convert_element_type.5746 = f32[4096]{0} convert(%square.491)
  %reduce.1681 = f32[] reduce(%convert_element_type.5746, %constant.1360), dimensions={0}, to_apply=%region_1713.39920
  %convert_element_type.5748 = bf16[] convert(%reduce.1681)
  %add.4916 = bf16[] add(%add.4915, %convert_element_type.5748)
  %square.492 = bf16[4096]{0} multiply(%add.2981, %add.2981)
  %convert_element_type.5749 = f32[4096]{0} convert(%square.492)
  %reduce.1682 = f32[] reduce(%convert_element_type.5749, %constant.1360), dimensions={0}, to_apply=%region_1714.39929
  %convert_element_type.5752 = bf16[] convert(%reduce.1682)
  %add.4917 = bf16[] add(%add.4916, %convert_element_type.5752)
  %square.493 = bf16[512,8,128]{2,1,0} multiply(%add.2986, %add.2986)
  %convert_element_type.5753 = f32[512,8,128]{2,1,0} convert(%square.493)
  %reduce.1683 = f32[] reduce(%convert_element_type.5753, %constant.1360), dimensions={0,1,2}, to_apply=%region_1715.39938
  %all-reduce.773 = f32[] all-reduce(%reduce.1683), channel_id=1576, replica_groups=[1,8]<=[8], use_global_device_ids=true, to_apply=%region_1715.39938.clone
  %convert_element_type.5754 = bf16[] convert(%all-reduce.773)
  %add.4918 = bf16[] add(%add.4917, %convert_element_type.5754)
  %square.494 = bf16[32,128,512]{2,1,0} multiply(%add.2991, %add.2991)
  %convert_element_type.5755 = f32[32,128,512]{2,1,0} convert(%square.494)
  %reduce.1684 = f32[] reduce(%convert_element_type.5755, %constant.1360), dimensions={0,1,2}, to_apply=%region_1716.39947
  %all-reduce.774 = f32[] all-reduce(%reduce.1684), channel_id=1577, replica_groups=[1,8]<=[8], use_global_device_ids=true, to_apply=%region_1716.39947.clone
  %convert_element_type.5756 = bf16[] convert(%all-reduce.774)
  %add.4919 = bf16[] add(%add.4918, %convert_element_type.5756)
  %square.495 = bf16[512,32,128]{2,1,0} multiply(%add.2996, %add.2996)
  %convert_element_type.5758 = f32[512,32,128]{2,1,0} convert(%square.495)
  %reduce.1685 = f32[] reduce(%convert_element_type.5758, %constant.1360), dimensions={0,1,2}, to_apply=%region_1717.39956
  %all-reduce.775 = f32[] all-reduce(%reduce.1685), channel_id=1578, replica_groups=[1,8]<=[8], use_global_device_ids=true, to_apply=%region_1717.39956.clone
  %convert_element_type.5759 = bf16[] convert(%all-reduce.775)
  %add.4920 = bf16[] add(%add.4919, %convert_element_type.5759)
  %square.496 = bf16[512,8,128]{2,1,0} multiply(%add.3001, %add.3001)
  %convert_element_type.5760 = f32[512,8,128]{2,1,0} convert(%square.496)
  %reduce.1686 = f32[] reduce(%convert_element_type.5760, %constant.1360), dimensions={0,1,2}, to_apply=%region_1718.39965
  %all-reduce.776 = f32[] all-reduce(%reduce.1686), channel_id=1579, replica_groups=[1,8]<=[8], use_global_device_ids=true, to_apply=%region_1718.39965.clone
  %convert_element_type.5761 = bf16[] convert(%all-reduce.776)
  %add.4921 = bf16[] add(%add.4920, %convert_element_type.5761)
  %square.497 = bf16[512,8]{1,0} multiply(%add.3007, %add.3007)
  %convert_element_type.5762 = f32[512,8]{1,0} convert(%square.497)
  %reduce.1687 = f32[] reduce(%convert_element_type.5762, %constant.1360), dimensions={0,1}, to_apply=%region_1719.39974
  %all-reduce.777 = f32[] all-reduce(%reduce.1687), channel_id=1580, replica_groups=[1,8]<=[8], use_global_device_ids=true, to_apply=%region_1719.39974.clone
  %convert_element_type.5764 = bf16[] convert(%all-reduce.777)
  %add.4922 = bf16[] add(%add.4921, %convert_element_type.5764)
  %square.498 = bf16[1,4096,14336]{2,1,0} multiply(%add.3012, %add.3012)
  %convert_element_type.5765 = f32[1,4096,14336]{2,1,0} convert(%square.498)
  %reduce.1688 = f32[] reduce(%convert_element_type.5765, %constant.1360), dimensions={0,1,2}, to_apply=%region_1720.39983
  %all-reduce.778 = f32[] all-reduce(%reduce.1688), channel_id=1581, replica_groups=[1,8]<=[8], use_global_device_ids=true, to_apply=%region_1720.39983.clone
  %convert_element_type.5766 = bf16[] convert(%all-reduce.778)
  %add.4924 = bf16[] add(%add.4922, %convert_element_type.5766)
  %square.499 = bf16[1,4096,14336]{2,1,0} multiply(%add.3018, %add.3018)
  %convert_element_type.5767 = f32[1,4096,14336]{2,1,0} convert(%square.499)
  %reduce.1689 = f32[] reduce(%convert_element_type.5767, %constant.1360), dimensions={0,1,2}, to_apply=%region_1721.39992
  %all-reduce.779 = f32[] all-reduce(%reduce.1689), channel_id=1582, replica_groups=[1,8]<=[8], use_global_device_ids=true, to_apply=%region_1721.39992.clone
  %convert_element_type.5768 = bf16[] convert(%all-reduce.779)
  %add.4925 = bf16[] add(%add.4924, %convert_element_type.5768)
  %square.500 = bf16[1,14336,4096]{2,1,0} multiply(%add.3023, %add.3023)
  %convert_element_type.5769 = f32[1,14336,4096]{2,1,0} convert(%square.500)
  %reduce.1690 = f32[] reduce(%convert_element_type.5769, %constant.1360), dimensions={0,1,2}, to_apply=%region_1722.40001
  %all-reduce.780 = f32[] all-reduce(%reduce.1690), channel_id=1583, replica_groups=[1,8]<=[8], use_global_device_ids=true, to_apply=%region_1722.40001.clone
  %convert_element_type.5770 = bf16[] convert(%all-reduce.780)
  %add.4927 = bf16[] add(%add.4925, %convert_element_type.5770)
  %square.501 = bf16[4096]{0} multiply(%add.3029, %add.3029)
  %convert_element_type.5771 = f32[4096]{0} convert(%square.501)
  %reduce.1691 = f32[] reduce(%convert_element_type.5771, %constant.1360), dimensions={0}, to_apply=%region_1723.40010
  %convert_element_type.5772 = bf16[] convert(%reduce.1691)
  %add.4928 = bf16[] add(%add.4927, %convert_element_type.5772)
  %square.502 = bf16[4096]{0} multiply(%add.3035, %add.3035)
  %convert_element_type.5774 = f32[4096]{0} convert(%square.502)
  %reduce.1692 = f32[] reduce(%convert_element_type.5774, %constant.1360), dimensions={0}, to_apply=%region_1724.40019
  %convert_element_type.5775 = bf16[] convert(%reduce.1692)
  %add.4929 = bf16[] add(%add.4928, %convert_element_type.5775)
  %square.503 = bf16[512,8,128]{2,1,0} multiply(%add.3040, %add.3040)
  %convert_element_type.5776 = f32[512,8,128]{2,1,0} convert(%square.503)
  %reduce.1693 = f32[] reduce(%convert_element_type.5776, %constant.1360), dimensions={0,1,2}, to_apply=%region_1725.40028
  %all-reduce.781 = f32[] all-reduce(%reduce.1693), channel_id=1584, replica_groups=[1,8]<=[8], use_global_device_ids=true, to_apply=%region_1725.40028.clone
  %convert_element_type.5777 = bf16[] convert(%all-reduce.781)
  %add.4930 = bf16[] add(%add.4929, %convert_element_type.5777)
  %square.504 = bf16[32,128,512]{2,1,0} multiply(%add.3045, %add.3045)
  %convert_element_type.5778 = f32[32,128,512]{2,1,0} convert(%square.504)
  %reduce.1694 = f32[] reduce(%convert_element_type.5778, %constant.1360), dimensions={0,1,2}, to_apply=%region_1726.40037
  %all-reduce.782 = f32[] all-reduce(%reduce.1694), channel_id=1585, replica_groups=[1,8]<=[8], use_global_device_ids=true, to_apply=%region_1726.40037.clone
  %convert_element_type.5779 = bf16[] convert(%all-reduce.782)
  %add.4931 = bf16[] add(%add.4930, %convert_element_type.5779)
  %square.505 = bf16[512,32,128]{2,1,0} multiply(%add.3051, %add.3051)
  %convert_element_type.5781 = f32[512,32,128]{2,1,0} convert(%square.505)
  %reduce.1695 = f32[] reduce(%convert_element_type.5781, %constant.1360), dimensions={0,1,2}, to_apply=%region_1727.40046
  %all-reduce.783 = f32[] all-reduce(%reduce.1695), channel_id=1586, replica_groups=[1,8]<=[8], use_global_device_ids=true, to_apply=%region_1727.40046.clone
  %convert_element_type.5782 = bf16[] convert(%all-reduce.783)
  %add.4932 = bf16[] add(%add.4931, %convert_element_type.5782)
  %square.506 = bf16[512,8,128]{2,1,0} multiply(%add.3056, %add.3056)
  %convert_element_type.5783 = f32[512,8,128]{2,1,0} convert(%square.506)
  %reduce.1696 = f32[] reduce(%convert_element_type.5783, %constant.1360), dimensions={0,1,2}, to_apply=%region_1728.40055
  %all-reduce.784 = f32[] all-reduce(%reduce.1696), channel_id=1587, replica_groups=[1,8]<=[8], use_global_device_ids=true, to_apply=%region_1728.40055.clone
  %convert_element_type.5785 = bf16[] convert(%all-reduce.784)
  %add.4933 = bf16[] add(%add.4932, %convert_element_type.5785)
  %square.507 = bf16[512,8]{1,0} multiply(%add.3061, %add.3061)
  %convert_element_type.5786 = f32[512,8]{1,0} convert(%square.507)
  %reduce.1697 = f32[] reduce(%convert_element_type.5786, %constant.1360), dimensions={0,1}, to_apply=%region_1729.40064
  %all-reduce.785 = f32[] all-reduce(%reduce.1697), channel_id=1588, replica_groups=[1,8]<=[8], use_global_device_ids=true, to_apply=%region_1729.40064.clone
  %convert_element_type.5787 = bf16[] convert(%all-reduce.785)
  %add.4934 = bf16[] add(%add.4933, %convert_element_type.5787)
  %square.508 = bf16[1,4096,14336]{2,1,0} multiply(%add.3067, %add.3067)
  %convert_element_type.5789 = f32[1,4096,14336]{2,1,0} convert(%square.508)
  %reduce.1698 = f32[] reduce(%convert_element_type.5789, %constant.1360), dimensions={0,1,2}, to_apply=%region_1730.40073
  %all-reduce.786 = f32[] all-reduce(%reduce.1698), channel_id=1589, replica_groups=[1,8]<=[8], use_global_device_ids=true, to_apply=%region_1730.40073.clone
  %convert_element_type.5791 = bf16[] convert(%all-reduce.786)
  %add.4935 = bf16[] add(%add.4934, %convert_element_type.5791)
  %square.509 = bf16[1,4096,14336]{2,1,0} multiply(%add.3072, %add.3072)
  %convert_element_type.5792 = f32[1,4096,14336]{2,1,0} convert(%square.509)
  %reduce.1699 = f32[] reduce(%convert_element_type.5792, %constant.1360), dimensions={0,1,2}, to_apply=%region_1731.40082
  %all-reduce.787 = f32[] all-reduce(%reduce.1699), channel_id=1590, replica_groups=[1,8]<=[8], use_global_device_ids=true, to_apply=%region_1731.40082.clone
  %convert_element_type.5793 = bf16[] convert(%all-reduce.787)
  %add.4936 = bf16[] add(%add.4935, %convert_element_type.5793)
  %square.510 = bf16[1,14336,4096]{2,1,0} multiply(%add.3077, %add.3077)
  %convert_element_type.5794 = f32[1,14336,4096]{2,1,0} convert(%square.510)
  %reduce.1700 = f32[] reduce(%convert_element_type.5794, %constant.1360), dimensions={0,1,2}, to_apply=%region_1732.40091
  %all-reduce.788 = f32[] all-reduce(%reduce.1700), channel_id=1591, replica_groups=[1,8]<=[8], use_global_device_ids=true, to_apply=%region_1732.40091.clone
  %convert_element_type.5795 = bf16[] convert(%all-reduce.788)
  %add.4937 = bf16[] add(%add.4936, %convert_element_type.5795)
  %square.511 = bf16[4096]{0} multiply(%add.3082, %add.3082)
  %convert_element_type.5797 = f32[4096]{0} convert(%square.511)
  %reduce.1701 = f32[] reduce(%convert_element_type.5797, %constant.1360), dimensions={0}, to_apply=%region_1733.40100
  %convert_element_type.5798 = bf16[] convert(%reduce.1701)
  %add.4938 = bf16[] add(%add.4937, %convert_element_type.5798)
  %square.512 = bf16[4096]{0} multiply(%add.3087, %add.3087)
  %convert_element_type.5799 = f32[4096]{0} convert(%square.512)
  %reduce.1702 = f32[] reduce(%convert_element_type.5799, %constant.1360), dimensions={0}, to_apply=%region_1734.40109
  %convert_element_type.5800 = bf16[] convert(%reduce.1702)
  %add.4939 = bf16[] add(%add.4938, %convert_element_type.5800)
  %square.513 = bf16[512,8,128]{2,1,0} multiply(%add.3092, %add.3092)
  %convert_element_type.5801 = f32[512,8,128]{2,1,0} convert(%square.513)
  %reduce.1703 = f32[] reduce(%convert_element_type.5801, %constant.1360), dimensions={0,1,2}, to_apply=%region_1735.40118
  %all-reduce.789 = f32[] all-reduce(%reduce.1703), channel_id=1592, replica_groups=[1,8]<=[8], use_global_device_ids=true, to_apply=%region_1735.40118.clone
  %convert_element_type.5802 = bf16[] convert(%all-reduce.789)
  %add.4940 = bf16[] add(%add.4939, %convert_element_type.5802)
  %square.514 = bf16[32,128,512]{2,1,0} multiply(%add.3098, %add.3098)
  %convert_element_type.5804 = f32[32,128,512]{2,1,0} convert(%square.514)
  %reduce.1704 = f32[] reduce(%convert_element_type.5804, %constant.1360), dimensions={0,1,2}, to_apply=%region_1736.40127
  %all-reduce.790 = f32[] all-reduce(%reduce.1704), channel_id=1593, replica_groups=[1,8]<=[8], use_global_device_ids=true, to_apply=%region_1736.40127.clone
  %convert_element_type.5805 = bf16[] convert(%all-reduce.790)
  %add.4941 = bf16[] add(%add.4940, %convert_element_type.5805)
  %square.515 = bf16[512,32,128]{2,1,0} multiply(%add.3104, %add.3104)
  %convert_element_type.5807 = f32[512,32,128]{2,1,0} convert(%square.515)
  %reduce.1705 = f32[] reduce(%convert_element_type.5807, %constant.1360), dimensions={0,1,2}, to_apply=%region_1737.40136
  %all-reduce.791 = f32[] all-reduce(%reduce.1705), channel_id=1594, replica_groups=[1,8]<=[8], use_global_device_ids=true, to_apply=%region_1737.40136.clone
  %convert_element_type.5808 = bf16[] convert(%all-reduce.791)
  %add.4942 = bf16[] add(%add.4941, %convert_element_type.5808)
  %square.516 = bf16[512,8,128]{2,1,0} multiply(%add.3109, %add.3109)
  %convert_element_type.5809 = f32[512,8,128]{2,1,0} convert(%square.516)
  %reduce.1706 = f32[] reduce(%convert_element_type.5809, %constant.1360), dimensions={0,1,2}, to_apply=%region_1738.40145
  %all-reduce.792 = f32[] all-reduce(%reduce.1706), channel_id=1595, replica_groups=[1,8]<=[8], use_global_device_ids=true, to_apply=%region_1738.40145.clone
  %convert_element_type.5810 = bf16[] convert(%all-reduce.792)
  %add.4943 = bf16[] add(%add.4942, %convert_element_type.5810)
  %square.517 = bf16[512,8]{1,0} multiply(%add.3114, %add.3114)
  %convert_element_type.5811 = f32[512,8]{1,0} convert(%square.517)
  %reduce.1707 = f32[] reduce(%convert_element_type.5811, %constant.1360), dimensions={0,1}, to_apply=%region_1739.40154
  %all-reduce.793 = f32[] all-reduce(%reduce.1707), channel_id=1596, replica_groups=[1,8]<=[8], use_global_device_ids=true, to_apply=%region_1739.40154.clone
  %convert_element_type.5812 = bf16[] convert(%all-reduce.793)
  %add.4944 = bf16[] add(%add.4943, %convert_element_type.5812)
  %square.518 = bf16[1,4096,14336]{2,1,0} multiply(%add.3119, %add.3119)
  %convert_element_type.5813 = f32[1,4096,14336]{2,1,0} convert(%square.518)
  %reduce.1708 = f32[] reduce(%convert_element_type.5813, %constant.1360), dimensions={0,1,2}, to_apply=%region_1740.40163
  %all-reduce.794 = f32[] all-reduce(%reduce.1708), channel_id=1597, replica_groups=[1,8]<=[8], use_global_device_ids=true, to_apply=%region_1740.40163.clone
  %convert_element_type.5814 = bf16[] convert(%all-reduce.794)
  %add.4945 = bf16[] add(%add.4944, %convert_element_type.5814)
  %square.519 = bf16[1,4096,14336]{2,1,0} multiply(%add.3124, %add.3124)
  %convert_element_type.5815 = f32[1,4096,14336]{2,1,0} convert(%square.519)
  %reduce.1709 = f32[] reduce(%convert_element_type.5815, %constant.1360), dimensions={0,1,2}, to_apply=%region_1741.40172
  %all-reduce.795 = f32[] all-reduce(%reduce.1709), channel_id=1598, replica_groups=[1,8]<=[8], use_global_device_ids=true, to_apply=%region_1741.40172.clone
  %convert_element_type.5817 = bf16[] convert(%all-reduce.795)
  %add.4946 = bf16[] add(%add.4945, %convert_element_type.5817)
  %square.520 = bf16[1,14336,4096]{2,1,0} multiply(%add.3129, %add.3129)
  %convert_element_type.5819 = f32[1,14336,4096]{2,1,0} convert(%square.520)
  %reduce.1710 = f32[] reduce(%convert_element_type.5819, %constant.1360), dimensions={0,1,2}, to_apply=%region_1742.40181
  %all-reduce.796 = f32[] all-reduce(%reduce.1710), channel_id=1599, replica_groups=[1,8]<=[8], use_global_device_ids=true, to_apply=%region_1742.40181.clone
  %convert_element_type.5820 = bf16[] convert(%all-reduce.796)
  %add.4947 = bf16[] add(%add.4946, %convert_element_type.5820)
  %square.521 = bf16[4096]{0} multiply(%add.3134, %add.3134)
  %convert_element_type.5821 = f32[4096]{0} convert(%square.521)
  %reduce.1711 = f32[] reduce(%convert_element_type.5821, %constant.1360), dimensions={0}, to_apply=%region_1743.40190
  %convert_element_type.5822 = bf16[] convert(%reduce.1711)
  %add.4948 = bf16[] add(%add.4947, %convert_element_type.5822)
  %square.522 = bf16[4096]{0} multiply(%add.3139, %add.3139)
  %convert_element_type.5824 = f32[4096]{0} convert(%square.522)
  %reduce.1712 = f32[] reduce(%convert_element_type.5824, %constant.1360), dimensions={0}, to_apply=%region_1744.40199
  %convert_element_type.5825 = bf16[] convert(%reduce.1712)
  %add.4949 = bf16[] add(%add.4948, %convert_element_type.5825)
  %square.523 = bf16[512,8,128]{2,1,0} multiply(%add.3146, %add.3146)
  %convert_element_type.5826 = f32[512,8,128]{2,1,0} convert(%square.523)
  %reduce.1713 = f32[] reduce(%convert_element_type.5826, %constant.1360), dimensions={0,1,2}, to_apply=%region_1745.40208
  %all-reduce.797 = f32[] all-reduce(%reduce.1713), channel_id=1600, replica_groups=[1,8]<=[8], use_global_device_ids=true, to_apply=%region_1745.40208.clone
  %convert_element_type.5827 = bf16[] convert(%all-reduce.797)
  %add.4950 = bf16[] add(%add.4949, %convert_element_type.5827)
  %square.524 = bf16[32,128,512]{2,1,0} multiply(%add.3152, %add.3152)
  %convert_element_type.5828 = f32[32,128,512]{2,1,0} convert(%square.524)
  %reduce.1714 = f32[] reduce(%convert_element_type.5828, %constant.1360), dimensions={0,1,2}, to_apply=%region_1746.40217
  %all-reduce.798 = f32[] all-reduce(%reduce.1714), channel_id=1601, replica_groups=[1,8]<=[8], use_global_device_ids=true, to_apply=%region_1746.40217.clone
  %convert_element_type.5829 = bf16[] convert(%all-reduce.798)
  %add.4951 = bf16[] add(%add.4950, %convert_element_type.5829)
  %square.525 = bf16[512,32,128]{2,1,0} multiply(%add.3157, %add.3157)
  %convert_element_type.5830 = f32[512,32,128]{2,1,0} convert(%square.525)
  %reduce.1715 = f32[] reduce(%convert_element_type.5830, %constant.1360), dimensions={0,1,2}, to_apply=%region_1747.40226
  %all-reduce.799 = f32[] all-reduce(%reduce.1715), channel_id=1602, replica_groups=[1,8]<=[8], use_global_device_ids=true, to_apply=%region_1747.40226.clone
  %convert_element_type.5831 = bf16[] convert(%all-reduce.799)
  %add.4952 = bf16[] add(%add.4951, %convert_element_type.5831)
  %square.526 = bf16[512,8,128]{2,1,0} multiply(%add.3162, %add.3162)
  %convert_element_type.5833 = f32[512,8,128]{2,1,0} convert(%square.526)
  %reduce.1716 = f32[] reduce(%convert_element_type.5833, %constant.1360), dimensions={0,1,2}, to_apply=%region_1748.40235
  %all-reduce.800 = f32[] all-reduce(%reduce.1716), channel_id=1603, replica_groups=[1,8]<=[8], use_global_device_ids=true, to_apply=%region_1748.40235.clone
  %convert_element_type.5834 = bf16[] convert(%all-reduce.800)
  %add.4953 = bf16[] add(%add.4952, %convert_element_type.5834)
  %square.527 = bf16[512,8]{1,0} multiply(%add.3167, %add.3167)
  %convert_element_type.5835 = f32[512,8]{1,0} convert(%square.527)
  %reduce.1717 = f32[] reduce(%convert_element_type.5835, %constant.1360), dimensions={0,1}, to_apply=%region_1749.40244
  %all-reduce.801 = f32[] all-reduce(%reduce.1717), channel_id=1604, replica_groups=[1,8]<=[8], use_global_device_ids=true, to_apply=%region_1749.40244.clone
  %convert_element_type.5836 = bf16[] convert(%all-reduce.801)
  %add.4954 = bf16[] add(%add.4953, %convert_element_type.5836)
  %square.528 = bf16[1,4096,14336]{2,1,0} multiply(%add.3173, %add.3173)
  %convert_element_type.5837 = f32[1,4096,14336]{2,1,0} convert(%square.528)
  %reduce.1718 = f32[] reduce(%convert_element_type.5837, %constant.1360), dimensions={0,1,2}, to_apply=%region_1750.40253
  %all-reduce.802 = f32[] all-reduce(%reduce.1718), channel_id=1605, replica_groups=[1,8]<=[8], use_global_device_ids=true, to_apply=%region_1750.40253.clone
  %convert_element_type.5838 = bf16[] convert(%all-reduce.802)
  %add.4955 = bf16[] add(%add.4954, %convert_element_type.5838)
  %square.529 = bf16[1,4096,14336]{2,1,0} multiply(%add.3178, %add.3178)
  %convert_element_type.5839 = f32[1,4096,14336]{2,1,0} convert(%square.529)
  %reduce.1719 = f32[] reduce(%convert_element_type.5839, %constant.1360), dimensions={0,1,2}, to_apply=%region_1751.40262
  %all-reduce.803 = f32[] all-reduce(%reduce.1719), channel_id=1606, replica_groups=[1,8]<=[8], use_global_device_ids=true, to_apply=%region_1751.40262.clone
  %convert_element_type.5840 = bf16[] convert(%all-reduce.803)
  %add.4956 = bf16[] add(%add.4955, %convert_element_type.5840)
  %square.530 = bf16[1,14336,4096]{2,1,0} multiply(%add.3183, %add.3183)
  %convert_element_type.5841 = f32[1,14336,4096]{2,1,0} convert(%square.530)
  %reduce.1720 = f32[] reduce(%convert_element_type.5841, %constant.1360), dimensions={0,1,2}, to_apply=%region_1752.40271
  %all-reduce.804 = f32[] all-reduce(%reduce.1720), channel_id=1607, replica_groups=[1,8]<=[8], use_global_device_ids=true, to_apply=%region_1752.40271.clone
  %convert_element_type.5842 = bf16[] convert(%all-reduce.804)
  %add.4957 = bf16[] add(%add.4956, %convert_element_type.5842)
  %square.531 = bf16[4096]{0} multiply(%add.3188, %add.3188)
  %convert_element_type.5844 = f32[4096]{0} convert(%square.531)
  %reduce.1721 = f32[] reduce(%convert_element_type.5844, %constant.1360), dimensions={0}, to_apply=%region_1753.40280
  %convert_element_type.5845 = bf16[] convert(%reduce.1721)
  %add.4958 = bf16[] add(%add.4957, %convert_element_type.5845)
  %square.532 = bf16[4096]{0} multiply(%add.3195, %add.3195)
  %convert_element_type.5847 = f32[4096]{0} convert(%square.532)
  %reduce.1722 = f32[] reduce(%convert_element_type.5847, %constant.1360), dimensions={0}, to_apply=%region_1754.40289
  %convert_element_type.5848 = bf16[] convert(%reduce.1722)
  %add.4959 = bf16[] add(%add.4958, %convert_element_type.5848)
  %square.533 = bf16[512,8,128]{2,1,0} multiply(%add.3201, %add.3201)
  %convert_element_type.5849 = f32[512,8,128]{2,1,0} convert(%square.533)
  %reduce.1723 = f32[] reduce(%convert_element_type.5849, %constant.1360), dimensions={0,1,2}, to_apply=%region_1755.40298
  %all-reduce.805 = f32[] all-reduce(%reduce.1723), channel_id=1608, replica_groups=[1,8]<=[8], use_global_device_ids=true, to_apply=%region_1755.40298.clone
  %convert_element_type.5850 = bf16[] convert(%all-reduce.805)
  %add.4960 = bf16[] add(%add.4959, %convert_element_type.5850)
  %square.534 = bf16[32,128,512]{2,1,0} multiply(%add.3207, %add.3207)
  %convert_element_type.5851 = f32[32,128,512]{2,1,0} convert(%square.534)
  %reduce.1724 = f32[] reduce(%convert_element_type.5851, %constant.1360), dimensions={0,1,2}, to_apply=%region_1756.40307
  %all-reduce.806 = f32[] all-reduce(%reduce.1724), channel_id=1609, replica_groups=[1,8]<=[8], use_global_device_ids=true, to_apply=%region_1756.40307.clone
  %convert_element_type.5853 = bf16[] convert(%all-reduce.806)
  %add.4962 = bf16[] add(%add.4960, %convert_element_type.5853)
  %square.535 = bf16[512,32,128]{2,1,0} multiply(%add.3212, %add.3212)
  %convert_element_type.5854 = f32[512,32,128]{2,1,0} convert(%square.535)
  %reduce.1725 = f32[] reduce(%convert_element_type.5854, %constant.1360), dimensions={0,1,2}, to_apply=%region_1757.40316
  %all-reduce.807 = f32[] all-reduce(%reduce.1725), channel_id=1610, replica_groups=[1,8]<=[8], use_global_device_ids=true, to_apply=%region_1757.40316.clone
  %convert_element_type.5855 = bf16[] convert(%all-reduce.807)
  %add.4963 = bf16[] add(%add.4962, %convert_element_type.5855)
  %square.536 = bf16[512,8,128]{2,1,0} multiply(%add.3217, %add.3217)
  %convert_element_type.5857 = f32[512,8,128]{2,1,0} convert(%square.536)
  %reduce.1726 = f32[] reduce(%convert_element_type.5857, %constant.1360), dimensions={0,1,2}, to_apply=%region_1758.40325
  %all-reduce.808 = f32[] all-reduce(%reduce.1726), channel_id=1611, replica_groups=[1,8]<=[8], use_global_device_ids=true, to_apply=%region_1758.40325.clone
  %convert_element_type.5859 = bf16[] convert(%all-reduce.808)
  %add.4964 = bf16[] add(%add.4963, %convert_element_type.5859)
  %square.537 = bf16[512,8]{1,0} multiply(%add.3223, %add.3223)
  %convert_element_type.5860 = f32[512,8]{1,0} convert(%square.537)
  %reduce.1727 = f32[] reduce(%convert_element_type.5860, %constant.1360), dimensions={0,1}, to_apply=%region_1759.40334
  %all-reduce.809 = f32[] all-reduce(%reduce.1727), channel_id=1612, replica_groups=[1,8]<=[8], use_global_device_ids=true, to_apply=%region_1759.40334.clone
  %convert_element_type.5861 = bf16[] convert(%all-reduce.809)
  %add.4965 = bf16[] add(%add.4964, %convert_element_type.5861)
  %square.538 = bf16[1,4096,14336]{2,1,0} multiply(%add.3228, %add.3228)
  %convert_element_type.5862 = f32[1,4096,14336]{2,1,0} convert(%square.538)
  %reduce.1728 = f32[] reduce(%convert_element_type.5862, %constant.1360), dimensions={0,1,2}, to_apply=%region_1760.40343
  %all-reduce.810 = f32[] all-reduce(%reduce.1728), channel_id=1613, replica_groups=[1,8]<=[8], use_global_device_ids=true, to_apply=%region_1760.40343.clone
  %convert_element_type.5863 = bf16[] convert(%all-reduce.810)
  %add.4967 = bf16[] add(%add.4965, %convert_element_type.5863)
  %square.539 = bf16[1,4096,14336]{2,1,0} multiply(%add.3233, %add.3233)
  %convert_element_type.5865 = f32[1,4096,14336]{2,1,0} convert(%square.539)
  %reduce.1729 = f32[] reduce(%convert_element_type.5865, %constant.1360), dimensions={0,1,2}, to_apply=%region_1761.40352
  %all-reduce.811 = f32[] all-reduce(%reduce.1729), channel_id=1614, replica_groups=[1,8]<=[8], use_global_device_ids=true, to_apply=%region_1761.40352.clone
  %convert_element_type.5866 = bf16[] convert(%all-reduce.811)
  %add.4968 = bf16[] add(%add.4967, %convert_element_type.5866)
  %square.540 = bf16[1,14336,4096]{2,1,0} multiply(%add.3238, %add.3238)
  %convert_element_type.5867 = f32[1,14336,4096]{2,1,0} convert(%square.540)
  %reduce.1730 = f32[] reduce(%convert_element_type.5867, %constant.1360), dimensions={0,1,2}, to_apply=%region_1762.40361
  %all-reduce.812 = f32[] all-reduce(%reduce.1730), channel_id=1615, replica_groups=[1,8]<=[8], use_global_device_ids=true, to_apply=%region_1762.40361.clone
  %convert_element_type.5868 = bf16[] convert(%all-reduce.812)
  %add.4969 = bf16[] add(%add.4968, %convert_element_type.5868)
  %square.541 = bf16[4096]{0} multiply(%add.3243, %add.3243)
  %convert_element_type.5869 = f32[4096]{0} convert(%square.541)
  %reduce.1731 = f32[] reduce(%convert_element_type.5869, %constant.1360), dimensions={0}, to_apply=%region_1763.40370
  %convert_element_type.5870 = bf16[] convert(%reduce.1731)
  %add.4970 = bf16[] add(%add.4969, %convert_element_type.5870)
  %square.542 = bf16[4096]{0} multiply(%add.3248, %add.3248)
  %convert_element_type.5871 = f32[4096]{0} convert(%square.542)
  %reduce.1732 = f32[] reduce(%convert_element_type.5871, %constant.1360), dimensions={0}, to_apply=%region_1764.40379
  %convert_element_type.5872 = bf16[] convert(%reduce.1732)
  %add.4971 = bf16[] add(%add.4970, %convert_element_type.5872)
  %square.543 = bf16[512,8,128]{2,1,0} multiply(%add.3254, %add.3254)
  %convert_element_type.5873 = f32[512,8,128]{2,1,0} convert(%square.543)
  %reduce.1733 = f32[] reduce(%convert_element_type.5873, %constant.1360), dimensions={0,1,2}, to_apply=%region_1765.40388
  %all-reduce.813 = f32[] all-reduce(%reduce.1733), channel_id=1616, replica_groups=[1,8]<=[8], use_global_device_ids=true, to_apply=%region_1765.40388.clone
  %convert_element_type.5874 = bf16[] convert(%all-reduce.813)
  %add.4972 = bf16[] add(%add.4971, %convert_element_type.5874)
  %square.544 = bf16[32,128,512]{2,1,0} multiply(%add.3261, %add.3261)
  %convert_element_type.5875 = f32[32,128,512]{2,1,0} convert(%square.544)
  %reduce.1734 = f32[] reduce(%convert_element_type.5875, %constant.1360), dimensions={0,1,2}, to_apply=%region_1766.40397
  %all-reduce.814 = f32[] all-reduce(%reduce.1734), channel_id=1617, replica_groups=[1,8]<=[8], use_global_device_ids=true, to_apply=%region_1766.40397.clone
  %convert_element_type.5876 = bf16[] convert(%all-reduce.814)
  %add.4973 = bf16[] add(%add.4972, %convert_element_type.5876)
  %square.545 = bf16[512,32,128]{2,1,0} multiply(%add.3266, %add.3266)
  %convert_element_type.5877 = f32[512,32,128]{2,1,0} convert(%square.545)
  %reduce.1735 = f32[] reduce(%convert_element_type.5877, %constant.1360), dimensions={0,1,2}, to_apply=%region_1767.40406
  %all-reduce.815 = f32[] all-reduce(%reduce.1735), channel_id=1618, replica_groups=[1,8]<=[8], use_global_device_ids=true, to_apply=%region_1767.40406.clone
  %convert_element_type.5878 = bf16[] convert(%all-reduce.815)
  %add.4974 = bf16[] add(%add.4973, %convert_element_type.5878)
  %square.546 = bf16[512,8,128]{2,1,0} multiply(%add.3271, %add.3271)
  %convert_element_type.5879 = f32[512,8,128]{2,1,0} convert(%square.546)
  %reduce.1736 = f32[] reduce(%convert_element_type.5879, %constant.1360), dimensions={0,1,2}, to_apply=%region_1768.40415
  %all-reduce.816 = f32[] all-reduce(%reduce.1736), channel_id=1619, replica_groups=[1,8]<=[8], use_global_device_ids=true, to_apply=%region_1768.40415.clone
  %convert_element_type.5880 = bf16[] convert(%all-reduce.816)
  %add.4975 = bf16[] add(%add.4974, %convert_element_type.5880)
  %square.547 = bf16[512,8]{1,0} multiply(%add.3278, %add.3278)
  %convert_element_type.5881 = f32[512,8]{1,0} convert(%square.547)
  %reduce.1737 = f32[] reduce(%convert_element_type.5881, %constant.1360), dimensions={0,1}, to_apply=%region_1769.40424
  %all-reduce.817 = f32[] all-reduce(%reduce.1737), channel_id=1620, replica_groups=[1,8]<=[8], use_global_device_ids=true, to_apply=%region_1769.40424.clone
  %convert_element_type.5882 = bf16[] convert(%all-reduce.817)
  %add.4976 = bf16[] add(%add.4975, %convert_element_type.5882)
  %square.548 = bf16[1,4096,14336]{2,1,0} multiply(%add.3284, %add.3284)
  %convert_element_type.5883 = f32[1,4096,14336]{2,1,0} convert(%square.548)
  %reduce.1738 = f32[] reduce(%convert_element_type.5883, %constant.1360), dimensions={0,1,2}, to_apply=%region_1770.40433
  %all-reduce.818 = f32[] all-reduce(%reduce.1738), channel_id=1621, replica_groups=[1,8]<=[8], use_global_device_ids=true, to_apply=%region_1770.40433.clone
  %convert_element_type.5884 = bf16[] convert(%all-reduce.818)
  %add.4977 = bf16[] add(%add.4976, %convert_element_type.5884)
  %square.549 = bf16[1,4096,14336]{2,1,0} multiply(%add.3290, %add.3290)
  %convert_element_type.5885 = f32[1,4096,14336]{2,1,0} convert(%square.549)
  %reduce.1739 = f32[] reduce(%convert_element_type.5885, %constant.1360), dimensions={0,1,2}, to_apply=%region_1771.40442
  %all-reduce.819 = f32[] all-reduce(%reduce.1739), channel_id=1622, replica_groups=[1,8]<=[8], use_global_device_ids=true, to_apply=%region_1771.40442.clone
  %convert_element_type.5886 = bf16[] convert(%all-reduce.819)
  %add.4978 = bf16[] add(%add.4977, %convert_element_type.5886)
  %square.550 = bf16[1,14336,4096]{2,1,0} multiply(%add.3295, %add.3295)
  %convert_element_type.5887 = f32[1,14336,4096]{2,1,0} convert(%square.550)
  %reduce.1740 = f32[] reduce(%convert_element_type.5887, %constant.1360), dimensions={0,1,2}, to_apply=%region_1772.40451
  %all-reduce.820 = f32[] all-reduce(%reduce.1740), channel_id=1623, replica_groups=[1,8]<=[8], use_global_device_ids=true, to_apply=%region_1772.40451.clone
  %convert_element_type.5888 = bf16[] convert(%all-reduce.820)
  %add.4979 = bf16[] add(%add.4978, %convert_element_type.5888)
  %square.551 = bf16[4096]{0} multiply(%add.3301, %add.3301)
  %convert_element_type.5889 = f32[4096]{0} convert(%square.551)
  %reduce.1741 = f32[] reduce(%convert_element_type.5889, %constant.1360), dimensions={0}, to_apply=%region_1773.40460
  %convert_element_type.5890 = bf16[] convert(%reduce.1741)
  %add.4980 = bf16[] add(%add.4979, %convert_element_type.5890)
  %square.552 = bf16[4096]{0} multiply(%add.3306, %add.3306)
  %convert_element_type.5891 = f32[4096]{0} convert(%square.552)
  %reduce.1742 = f32[] reduce(%convert_element_type.5891, %constant.1360), dimensions={0}, to_apply=%region_1774.40469
  %convert_element_type.5892 = bf16[] convert(%reduce.1742)
  %add.4981 = bf16[] add(%add.4980, %convert_element_type.5892)
  %square.553 = bf16[512,8,128]{2,1,0} multiply(%add.3311, %add.3311)
  %convert_element_type.5893 = f32[512,8,128]{2,1,0} convert(%square.553)
  %reduce.1743 = f32[] reduce(%convert_element_type.5893, %constant.1360), dimensions={0,1,2}, to_apply=%region_1775.40478
  %all-reduce.821 = f32[] all-reduce(%reduce.1743), channel_id=1624, replica_groups=[1,8]<=[8], use_global_device_ids=true, to_apply=%region_1775.40478.clone
  %convert_element_type.5894 = bf16[] convert(%all-reduce.821)
  %add.4982 = bf16[] add(%add.4981, %convert_element_type.5894)
  %square.554 = bf16[32,128,512]{2,1,0} multiply(%add.3316, %add.3316)
  %convert_element_type.5895 = f32[32,128,512]{2,1,0} convert(%square.554)
  %reduce.1744 = f32[] reduce(%convert_element_type.5895, %constant.1360), dimensions={0,1,2}, to_apply=%region_1776.40487
  %all-reduce.822 = f32[] all-reduce(%reduce.1744), channel_id=1625, replica_groups=[1,8]<=[8], use_global_device_ids=true, to_apply=%region_1776.40487.clone
  %convert_element_type.5896 = bf16[] convert(%all-reduce.822)
  %add.4983 = bf16[] add(%add.4982, %convert_element_type.5896)
  %square.555 = bf16[512,32,128]{2,1,0} multiply(%add.3321, %add.3321)
  %convert_element_type.5897 = f32[512,32,128]{2,1,0} convert(%square.555)
  %reduce.1745 = f32[] reduce(%convert_element_type.5897, %constant.1360), dimensions={0,1,2}, to_apply=%region_1777.40496
  %all-reduce.823 = f32[] all-reduce(%reduce.1745), channel_id=1626, replica_groups=[1,8]<=[8], use_global_device_ids=true, to_apply=%region_1777.40496.clone
  %convert_element_type.5898 = bf16[] convert(%all-reduce.823)
  %add.4984 = bf16[] add(%add.4983, %convert_element_type.5898)
  %square.556 = bf16[512,8,128]{2,1,0} multiply(%add.3326, %add.3326)
  %convert_element_type.5899 = f32[512,8,128]{2,1,0} convert(%square.556)
  %reduce.1746 = f32[] reduce(%convert_element_type.5899, %constant.1360), dimensions={0,1,2}, to_apply=%region_1778.40505
  %all-reduce.824 = f32[] all-reduce(%reduce.1746), channel_id=1627, replica_groups=[1,8]<=[8], use_global_device_ids=true, to_apply=%region_1778.40505.clone
  %convert_element_type.5900 = bf16[] convert(%all-reduce.824)
  %add.4985 = bf16[] add(%add.4984, %convert_element_type.5900)
  %square.557 = bf16[512,8]{1,0} multiply(%add.3331, %add.3331)
  %convert_element_type.5901 = f32[512,8]{1,0} convert(%square.557)
  %reduce.1747 = f32[] reduce(%convert_element_type.5901, %constant.1360), dimensions={0,1}, to_apply=%region_1779.40514
  %all-reduce.825 = f32[] all-reduce(%reduce.1747), channel_id=1628, replica_groups=[1,8]<=[8], use_global_device_ids=true, to_apply=%region_1779.40514.clone
  %convert_element_type.5902 = bf16[] convert(%all-reduce.825)
  %add.4986 = bf16[] add(%add.4985, %convert_element_type.5902)
  %square.558 = bf16[1,4096,14336]{2,1,0} multiply(%add.3337, %add.3337)
  %convert_element_type.5903 = f32[1,4096,14336]{2,1,0} convert(%square.558)
  %reduce.1748 = f32[] reduce(%convert_element_type.5903, %constant.1360), dimensions={0,1,2}, to_apply=%region_1780.40523
  %all-reduce.826 = f32[] all-reduce(%reduce.1748), channel_id=1629, replica_groups=[1,8]<=[8], use_global_device_ids=true, to_apply=%region_1780.40523.clone
  %convert_element_type.5904 = bf16[] convert(%all-reduce.826)
  %add.4987 = bf16[] add(%add.4986, %convert_element_type.5904)
  %square.559 = bf16[1,4096,14336]{2,1,0} multiply(%add.3343, %add.3343)
  %convert_element_type.5905 = f32[1,4096,14336]{2,1,0} convert(%square.559)
  %reduce.1749 = f32[] reduce(%convert_element_type.5905, %constant.1360), dimensions={0,1,2}, to_apply=%region_1781.40532
  %all-reduce.827 = f32[] all-reduce(%reduce.1749), channel_id=1630, replica_groups=[1,8]<=[8], use_global_device_ids=true, to_apply=%region_1781.40532.clone
  %convert_element_type.5907 = bf16[] convert(%all-reduce.827)
  %add.4988 = bf16[] add(%add.4987, %convert_element_type.5907)
  %square.560 = bf16[1,14336,4096]{2,1,0} multiply(%add.3348, %add.3348)
  %convert_element_type.5910 = f32[1,14336,4096]{2,1,0} convert(%square.560)
  %reduce.1750 = f32[] reduce(%convert_element_type.5910, %constant.1360), dimensions={0,1,2}, to_apply=%region_1782.40541
  %all-reduce.828 = f32[] all-reduce(%reduce.1750), channel_id=1631, replica_groups=[1,8]<=[8], use_global_device_ids=true, to_apply=%region_1782.40541.clone
  %convert_element_type.5911 = bf16[] convert(%all-reduce.828)
  %add.4989 = bf16[] add(%add.4988, %convert_element_type.5911)
  %square.561 = bf16[4096]{0} multiply(%add.3354, %add.3354)
  %convert_element_type.5912 = f32[4096]{0} convert(%square.561)
  %reduce.1751 = f32[] reduce(%convert_element_type.5912, %constant.1360), dimensions={0}, to_apply=%region_1783.40550
  %convert_element_type.5913 = bf16[] convert(%reduce.1751)
  %add.4990 = bf16[] add(%add.4989, %convert_element_type.5913)
  %square.562 = bf16[4096]{0} multiply(%add.3359, %add.3359)
  %convert_element_type.5915 = f32[4096]{0} convert(%square.562)
  %reduce.1752 = f32[] reduce(%convert_element_type.5915, %constant.1360), dimensions={0}, to_apply=%region_1784.40559
  %convert_element_type.5916 = bf16[] convert(%reduce.1752)
  %add.4991 = bf16[] add(%add.4990, %convert_element_type.5916)
  %square.563 = bf16[512,8,128]{2,1,0} multiply(%add.3364, %add.3364)
  %convert_element_type.5917 = f32[512,8,128]{2,1,0} convert(%square.563)
  %reduce.1753 = f32[] reduce(%convert_element_type.5917, %constant.1360), dimensions={0,1,2}, to_apply=%region_1785.40568
  %all-reduce.829 = f32[] all-reduce(%reduce.1753), channel_id=1632, replica_groups=[1,8]<=[8], use_global_device_ids=true, to_apply=%region_1785.40568.clone
  %convert_element_type.5918 = bf16[] convert(%all-reduce.829)
  %add.4992 = bf16[] add(%add.4991, %convert_element_type.5918)
  %square.564 = bf16[32,128,512]{2,1,0} multiply(%add.3370, %add.3370)
  %convert_element_type.5919 = f32[32,128,512]{2,1,0} convert(%square.564)
  %reduce.1754 = f32[] reduce(%convert_element_type.5919, %constant.1360), dimensions={0,1,2}, to_apply=%region_1786.40577
  %all-reduce.830 = f32[] all-reduce(%reduce.1754), channel_id=1633, replica_groups=[1,8]<=[8], use_global_device_ids=true, to_apply=%region_1786.40577.clone
  %convert_element_type.5920 = bf16[] convert(%all-reduce.830)
  %add.4993 = bf16[] add(%add.4992, %convert_element_type.5920)
  %square.565 = bf16[512,32,128]{2,1,0} multiply(%add.3375, %add.3375)
  %convert_element_type.5921 = f32[512,32,128]{2,1,0} convert(%square.565)
  %reduce.1755 = f32[] reduce(%convert_element_type.5921, %constant.1360), dimensions={0,1,2}, to_apply=%region_1787.40586
  %all-reduce.831 = f32[] all-reduce(%reduce.1755), channel_id=1634, replica_groups=[1,8]<=[8], use_global_device_ids=true, to_apply=%region_1787.40586.clone
  %convert_element_type.5922 = bf16[] convert(%all-reduce.831)
  %add.4995 = bf16[] add(%add.4993, %convert_element_type.5922)
  %square.566 = bf16[512,8,128]{2,1,0} multiply(%add.3380, %add.3380)
  %convert_element_type.5923 = f32[512,8,128]{2,1,0} convert(%square.566)
  %reduce.1756 = f32[] reduce(%convert_element_type.5923, %constant.1360), dimensions={0,1,2}, to_apply=%region_1788.40595
  %all-reduce.832 = f32[] all-reduce(%reduce.1756), channel_id=1635, replica_groups=[1,8]<=[8], use_global_device_ids=true, to_apply=%region_1788.40595.clone
  %convert_element_type.5924 = bf16[] convert(%all-reduce.832)
  %add.4996 = bf16[] add(%add.4995, %convert_element_type.5924)
  %square.567 = bf16[512,8]{1,0} multiply(%add.3385, %add.3385)
  %convert_element_type.5925 = f32[512,8]{1,0} convert(%square.567)
  %reduce.1757 = f32[] reduce(%convert_element_type.5925, %constant.1360), dimensions={0,1}, to_apply=%region_1789.40604
  %all-reduce.833 = f32[] all-reduce(%reduce.1757), channel_id=1636, replica_groups=[1,8]<=[8], use_global_device_ids=true, to_apply=%region_1789.40604.clone
  %convert_element_type.5927 = bf16[] convert(%all-reduce.833)
  %add.4997 = bf16[] add(%add.4996, %convert_element_type.5927)
  %square.568 = bf16[1,4096,14336]{2,1,0} multiply(%add.3390, %add.3390)
  %convert_element_type.5928 = f32[1,4096,14336]{2,1,0} convert(%square.568)
  %reduce.1758 = f32[] reduce(%convert_element_type.5928, %constant.1360), dimensions={0,1,2}, to_apply=%region_1790.40613
  %all-reduce.834 = f32[] all-reduce(%reduce.1758), channel_id=1637, replica_groups=[1,8]<=[8], use_global_device_ids=true, to_apply=%region_1790.40613.clone
  %convert_element_type.5929 = bf16[] convert(%all-reduce.834)
  %add.4998 = bf16[] add(%add.4997, %convert_element_type.5929)
  %square.569 = bf16[1,4096,14336]{2,1,0} multiply(%add.3395, %add.3395)
  %convert_element_type.5930 = f32[1,4096,14336]{2,1,0} convert(%square.569)
  %reduce.1759 = f32[] reduce(%convert_element_type.5930, %constant.1360), dimensions={0,1,2}, to_apply=%region_1791.40622
  %all-reduce.835 = f32[] all-reduce(%reduce.1759), channel_id=1638, replica_groups=[1,8]<=[8], use_global_device_ids=true, to_apply=%region_1791.40622.clone
  %convert_element_type.5931 = bf16[] convert(%all-reduce.835)
  %add.4999 = bf16[] add(%add.4998, %convert_element_type.5931)
  %square.570 = bf16[1,14336,4096]{2,1,0} multiply(%add.3400, %add.3400)
  %convert_element_type.5932 = f32[1,14336,4096]{2,1,0} convert(%square.570)
  %reduce.1760 = f32[] reduce(%convert_element_type.5932, %constant.1360), dimensions={0,1,2}, to_apply=%region_1792.40631
  %all-reduce.836 = f32[] all-reduce(%reduce.1760), channel_id=1639, replica_groups=[1,8]<=[8], use_global_device_ids=true, to_apply=%region_1792.40631.clone
  %convert_element_type.5934 = bf16[] convert(%all-reduce.836)
  %add.5000 = bf16[] add(%add.4999, %convert_element_type.5934)
  %square.571 = bf16[4096]{0} multiply(%add.3405, %add.3405)
  %convert_element_type.5935 = f32[4096]{0} convert(%square.571)
  %reduce.1761 = f32[] reduce(%convert_element_type.5935, %constant.1360), dimensions={0}, to_apply=%region_1793.40640
  %convert_element_type.5936 = bf16[] convert(%reduce.1761)
  %add.5001 = bf16[] add(%add.5000, %convert_element_type.5936)
  %square.572 = bf16[4096]{0} multiply(%add.3411, %add.3411)
  %convert_element_type.5938 = f32[4096]{0} convert(%square.572)
  %reduce.1762 = f32[] reduce(%convert_element_type.5938, %constant.1360), dimensions={0}, to_apply=%region_1794.40649
  %convert_element_type.5939 = bf16[] convert(%reduce.1762)
  %add.5002 = bf16[] add(%add.5001, %convert_element_type.5939)
  %square.573 = bf16[512,8,128]{2,1,0} multiply(%add.3417, %add.3417)
  %convert_element_type.5940 = f32[512,8,128]{2,1,0} convert(%square.573)
  %reduce.1763 = f32[] reduce(%convert_element_type.5940, %constant.1360), dimensions={0,1,2}, to_apply=%region_1795.40658
  %all-reduce.837 = f32[] all-reduce(%reduce.1763), channel_id=1640, replica_groups=[1,8]<=[8], use_global_device_ids=true, to_apply=%region_1795.40658.clone
  %convert_element_type.5941 = bf16[] convert(%all-reduce.837)
  %add.5003 = bf16[] add(%add.5002, %convert_element_type.5941)
  %square.574 = bf16[32,128,512]{2,1,0} multiply(%add.3423, %add.3423)
  %convert_element_type.5942 = f32[32,128,512]{2,1,0} convert(%square.574)
  %reduce.1764 = f32[] reduce(%convert_element_type.5942, %constant.1360), dimensions={0,1,2}, to_apply=%region_1796.40667
  %all-reduce.838 = f32[] all-reduce(%reduce.1764), channel_id=1641, replica_groups=[1,8]<=[8], use_global_device_ids=true, to_apply=%region_1796.40667.clone
  %convert_element_type.5943 = bf16[] convert(%all-reduce.838)
  %add.5004 = bf16[] add(%add.5003, %convert_element_type.5943)
  %square.575 = bf16[512,32,128]{2,1,0} multiply(%add.3428, %add.3428)
  %convert_element_type.5944 = f32[512,32,128]{2,1,0} convert(%square.575)
  %reduce.1765 = f32[] reduce(%convert_element_type.5944, %constant.1360), dimensions={0,1,2}, to_apply=%region_1797.40676
  %all-reduce.839 = f32[] all-reduce(%reduce.1765), channel_id=1642, replica_groups=[1,8]<=[8], use_global_device_ids=true, to_apply=%region_1797.40676.clone
  %convert_element_type.5945 = bf16[] convert(%all-reduce.839)
  %add.5005 = bf16[] add(%add.5004, %convert_element_type.5945)
  %square.576 = bf16[512,8,128]{2,1,0} multiply(%add.3433, %add.3433)
  %convert_element_type.5946 = f32[512,8,128]{2,1,0} convert(%square.576)
  %reduce.1766 = f32[] reduce(%convert_element_type.5946, %constant.1360), dimensions={0,1,2}, to_apply=%region_1798.40685
  %all-reduce.840 = f32[] all-reduce(%reduce.1766), channel_id=1643, replica_groups=[1,8]<=[8], use_global_device_ids=true, to_apply=%region_1798.40685.clone
  %convert_element_type.5947 = bf16[] convert(%all-reduce.840)
  %add.5006 = bf16[] add(%add.5005, %convert_element_type.5947)
  %square.577 = bf16[512,8]{1,0} multiply(%add.3438, %add.3438)
  %convert_element_type.5949 = f32[512,8]{1,0} convert(%square.577)
  %reduce.1767 = f32[] reduce(%convert_element_type.5949, %constant.1360), dimensions={0,1}, to_apply=%region_1799.40694
  %all-reduce.841 = f32[] all-reduce(%reduce.1767), channel_id=1644, replica_groups=[1,8]<=[8], use_global_device_ids=true, to_apply=%region_1799.40694.clone
  %convert_element_type.5950 = bf16[] convert(%all-reduce.841)
  %add.5007 = bf16[] add(%add.5006, %convert_element_type.5950)
  %square.578 = bf16[1,4096,14336]{2,1,0} multiply(%add.3444, %add.3444)
  %convert_element_type.5951 = f32[1,4096,14336]{2,1,0} convert(%square.578)
  %reduce.1768 = f32[] reduce(%convert_element_type.5951, %constant.1360), dimensions={0,1,2}, to_apply=%region_1800.40703
  %all-reduce.842 = f32[] all-reduce(%reduce.1768), channel_id=1645, replica_groups=[1,8]<=[8], use_global_device_ids=true, to_apply=%region_1800.40703.clone
  %convert_element_type.5952 = bf16[] convert(%all-reduce.842)
  %add.5008 = bf16[] add(%add.5007, %convert_element_type.5952)
  %square.579 = bf16[1,4096,14336]{2,1,0} multiply(%add.3450, %add.3450)
  %convert_element_type.5953 = f32[1,4096,14336]{2,1,0} convert(%square.579)
  %reduce.1769 = f32[] reduce(%convert_element_type.5953, %constant.1360), dimensions={0,1,2}, to_apply=%region_1801.40712
  %all-reduce.843 = f32[] all-reduce(%reduce.1769), channel_id=1646, replica_groups=[1,8]<=[8], use_global_device_ids=true, to_apply=%region_1801.40712.clone
  %convert_element_type.5955 = bf16[] convert(%all-reduce.843)
  %add.5009 = bf16[] add(%add.5008, %convert_element_type.5955)
  %square.580 = bf16[1,14336,4096]{2,1,0} multiply(%add.3455, %add.3455)
  %convert_element_type.5956 = f32[1,14336,4096]{2,1,0} convert(%square.580)
  %reduce.1770 = f32[] reduce(%convert_element_type.5956, %constant.1360), dimensions={0,1,2}, to_apply=%region_1802.40721
  %all-reduce.844 = f32[] all-reduce(%reduce.1770), channel_id=1647, replica_groups=[1,8]<=[8], use_global_device_ids=true, to_apply=%region_1802.40721.clone
  %convert_element_type.5957 = bf16[] convert(%all-reduce.844)
  %add.5010 = bf16[] add(%add.5009, %convert_element_type.5957)
  %square.581 = bf16[4096]{0} multiply(%add.3460, %add.3460)
  %convert_element_type.5958 = f32[4096]{0} convert(%square.581)
  %reduce.1771 = f32[] reduce(%convert_element_type.5958, %constant.1360), dimensions={0}, to_apply=%region_1803.40730
  %convert_element_type.5959 = bf16[] convert(%reduce.1771)
  %add.5011 = bf16[] add(%add.5010, %convert_element_type.5959)
  %square.582 = bf16[4096]{0} multiply(%add.3467, %add.3467)
  %convert_element_type.5961 = f32[4096]{0} convert(%square.582)
  %reduce.1772 = f32[] reduce(%convert_element_type.5961, %constant.1360), dimensions={0}, to_apply=%region_1804.40739
  %convert_element_type.5962 = bf16[] convert(%reduce.1772)
  %add.5012 = bf16[] add(%add.5011, %convert_element_type.5962)
  %square.583 = bf16[512,8,128]{2,1,0} multiply(%add.3472, %add.3472)
  %convert_element_type.5963 = f32[512,8,128]{2,1,0} convert(%square.583)
  %reduce.1773 = f32[] reduce(%convert_element_type.5963, %constant.1360), dimensions={0,1,2}, to_apply=%region_1805.40748
  %all-reduce.845 = f32[] all-reduce(%reduce.1773), channel_id=1648, replica_groups=[1,8]<=[8], use_global_device_ids=true, to_apply=%region_1805.40748.clone
  %convert_element_type.5964 = bf16[] convert(%all-reduce.845)
  %add.5013 = bf16[] add(%add.5012, %convert_element_type.5964)
  %square.584 = bf16[32,128,512]{2,1,0} multiply(%add.3477, %add.3477)
  %convert_element_type.5965 = f32[32,128,512]{2,1,0} convert(%square.584)
  %reduce.1774 = f32[] reduce(%convert_element_type.5965, %constant.1360), dimensions={0,1,2}, to_apply=%region_1806.40757
  %all-reduce.846 = f32[] all-reduce(%reduce.1774), channel_id=1649, replica_groups=[1,8]<=[8], use_global_device_ids=true, to_apply=%region_1806.40757.clone
  %convert_element_type.5966 = bf16[] convert(%all-reduce.846)
  %add.5014 = bf16[] add(%add.5013, %convert_element_type.5966)
  %square.585 = bf16[512,32,128]{2,1,0} multiply(%add.3482, %add.3482)
  %convert_element_type.5967 = f32[512,32,128]{2,1,0} convert(%square.585)
  %reduce.1775 = f32[] reduce(%convert_element_type.5967, %constant.1360), dimensions={0,1,2}, to_apply=%region_1807.40766
  %all-reduce.847 = f32[] all-reduce(%reduce.1775), channel_id=1650, replica_groups=[1,8]<=[8], use_global_device_ids=true, to_apply=%region_1807.40766.clone
  %convert_element_type.5970 = bf16[] convert(%all-reduce.847)
  %add.5015 = bf16[] add(%add.5014, %convert_element_type.5970)
  %square.586 = bf16[512,8,128]{2,1,0} multiply(%add.3487, %add.3487)
  %convert_element_type.5971 = f32[512,8,128]{2,1,0} convert(%square.586)
  %reduce.1776 = f32[] reduce(%convert_element_type.5971, %constant.1360), dimensions={0,1,2}, to_apply=%region_1808.40775
  %all-reduce.848 = f32[] all-reduce(%reduce.1776), channel_id=1651, replica_groups=[1,8]<=[8], use_global_device_ids=true, to_apply=%region_1808.40775.clone
  %convert_element_type.5972 = bf16[] convert(%all-reduce.848)
  %add.5016 = bf16[] add(%add.5015, %convert_element_type.5972)
  %square.587 = bf16[512,8]{1,0} multiply(%add.3493, %add.3493)
  %convert_element_type.5974 = f32[512,8]{1,0} convert(%square.587)
  %reduce.1777 = f32[] reduce(%convert_element_type.5974, %constant.1360), dimensions={0,1}, to_apply=%region_1809.40784
  %all-reduce.849 = f32[] all-reduce(%reduce.1777), channel_id=1652, replica_groups=[1,8]<=[8], use_global_device_ids=true, to_apply=%region_1809.40784.clone
  %convert_element_type.5975 = bf16[] convert(%all-reduce.849)
  %add.5017 = bf16[] add(%add.5016, %convert_element_type.5975)
  %square.588 = bf16[1,4096,14336]{2,1,0} multiply(%add.3498, %add.3498)
  %convert_element_type.5976 = f32[1,4096,14336]{2,1,0} convert(%square.588)
  %reduce.1778 = f32[] reduce(%convert_element_type.5976, %constant.1360), dimensions={0,1,2}, to_apply=%region_1810.40793
  %all-reduce.850 = f32[] all-reduce(%reduce.1778), channel_id=1653, replica_groups=[1,8]<=[8], use_global_device_ids=true, to_apply=%region_1810.40793.clone
  %convert_element_type.5977 = bf16[] convert(%all-reduce.850)
  %add.5018 = bf16[] add(%add.5017, %convert_element_type.5977)
  %square.589 = bf16[1,4096,14336]{2,1,0} multiply(%add.3504, %add.3504)
  %convert_element_type.5978 = f32[1,4096,14336]{2,1,0} convert(%square.589)
  %reduce.1779 = f32[] reduce(%convert_element_type.5978, %constant.1360), dimensions={0,1,2}, to_apply=%region_1811.40802
  %all-reduce.851 = f32[] all-reduce(%reduce.1779), channel_id=1654, replica_groups=[1,8]<=[8], use_global_device_ids=true, to_apply=%region_1811.40802.clone
  %convert_element_type.5979 = bf16[] convert(%all-reduce.851)
  %add.5019 = bf16[] add(%add.5018, %convert_element_type.5979)
  %square.590 = bf16[1,14336,4096]{2,1,0} multiply(%add.3509, %add.3509)
  %convert_element_type.5980 = f32[1,14336,4096]{2,1,0} convert(%square.590)
  %reduce.1780 = f32[] reduce(%convert_element_type.5980, %constant.1360), dimensions={0,1,2}, to_apply=%region_1812.40811
  %all-reduce.852 = f32[] all-reduce(%reduce.1780), channel_id=1655, replica_groups=[1,8]<=[8], use_global_device_ids=true, to_apply=%region_1812.40811.clone
  %convert_element_type.5981 = bf16[] convert(%all-reduce.852)
  %add.5021 = bf16[] add(%add.5019, %convert_element_type.5981)
  %square.591 = bf16[4096]{0} multiply(%add.3515, %add.3515)
  %convert_element_type.5982 = f32[4096]{0} convert(%square.591)
  %reduce.1781 = f32[] reduce(%convert_element_type.5982, %constant.1360), dimensions={0}, to_apply=%region_1813.40820
  %convert_element_type.5984 = bf16[] convert(%reduce.1781)
  %add.5022 = bf16[] add(%add.5021, %convert_element_type.5984)
  %square.592 = bf16[4096]{0} multiply(%add.3520, %add.3520)
  %convert_element_type.5985 = f32[4096]{0} convert(%square.592)
  %reduce.1782 = f32[] reduce(%convert_element_type.5985, %constant.1360), dimensions={0}, to_apply=%region_1814.40829
  %convert_element_type.5986 = bf16[] convert(%reduce.1782)
  %add.5023 = bf16[] add(%add.5022, %convert_element_type.5986)
  %square.593 = bf16[512,8,128]{2,1,0} multiply(%add.3525, %add.3525)
  %convert_element_type.5987 = f32[512,8,128]{2,1,0} convert(%square.593)
  %reduce.1783 = f32[] reduce(%convert_element_type.5987, %constant.1360), dimensions={0,1,2}, to_apply=%region_1815.40838
  %all-reduce.853 = f32[] all-reduce(%reduce.1783), channel_id=1656, replica_groups=[1,8]<=[8], use_global_device_ids=true, to_apply=%region_1815.40838.clone
  %convert_element_type.5988 = bf16[] convert(%all-reduce.853)
  %add.5024 = bf16[] add(%add.5023, %convert_element_type.5988)
  %square.594 = bf16[32,128,512]{2,1,0} multiply(%add.3530, %add.3530)
  %convert_element_type.5989 = f32[32,128,512]{2,1,0} convert(%square.594)
  %reduce.1784 = f32[] reduce(%convert_element_type.5989, %constant.1360), dimensions={0,1,2}, to_apply=%region_1816.40847
  %all-reduce.854 = f32[] all-reduce(%reduce.1784), channel_id=1657, replica_groups=[1,8]<=[8], use_global_device_ids=true, to_apply=%region_1816.40847.clone
  %convert_element_type.5990 = bf16[] convert(%all-reduce.854)
  %add.5025 = bf16[] add(%add.5024, %convert_element_type.5990)
  %square.595 = bf16[512,32,128]{2,1,0} multiply(%add.3535, %add.3535)
  %convert_element_type.5991 = f32[512,32,128]{2,1,0} convert(%square.595)
  %reduce.1785 = f32[] reduce(%convert_element_type.5991, %constant.1360), dimensions={0,1,2}, to_apply=%region_1817.40856
  %all-reduce.855 = f32[] all-reduce(%reduce.1785), channel_id=1658, replica_groups=[1,8]<=[8], use_global_device_ids=true, to_apply=%region_1817.40856.clone
  %convert_element_type.5992 = bf16[] convert(%all-reduce.855)
  %add.5026 = bf16[] add(%add.5025, %convert_element_type.5992)
  %square.596 = bf16[512,8,128]{2,1,0} multiply(%add.3540, %add.3540)
  %convert_element_type.5993 = f32[512,8,128]{2,1,0} convert(%square.596)
  %reduce.1786 = f32[] reduce(%convert_element_type.5993, %constant.1360), dimensions={0,1,2}, to_apply=%region_1818.40865
  %all-reduce.856 = f32[] all-reduce(%reduce.1786), channel_id=1659, replica_groups=[1,8]<=[8], use_global_device_ids=true, to_apply=%region_1818.40865.clone
  %convert_element_type.5994 = bf16[] convert(%all-reduce.856)
  %add.5027 = bf16[] add(%add.5026, %convert_element_type.5994)
  %square.597 = bf16[512,8]{1,0} multiply(%add.3546, %add.3546)
  %convert_element_type.5995 = f32[512,8]{1,0} convert(%square.597)
  %reduce.1787 = f32[] reduce(%convert_element_type.5995, %constant.1360), dimensions={0,1}, to_apply=%region_1819.40874
  %all-reduce.857 = f32[] all-reduce(%reduce.1787), channel_id=1660, replica_groups=[1,8]<=[8], use_global_device_ids=true, to_apply=%region_1819.40874.clone
  %convert_element_type.5996 = bf16[] convert(%all-reduce.857)
  %add.5028 = bf16[] add(%add.5027, %convert_element_type.5996)
  %square.598 = bf16[1,4096,14336]{2,1,0} multiply(%add.3551, %add.3551)
  %convert_element_type.5997 = f32[1,4096,14336]{2,1,0} convert(%square.598)
  %reduce.1788 = f32[] reduce(%convert_element_type.5997, %constant.1360), dimensions={0,1,2}, to_apply=%region_1820.40883
  %all-reduce.858 = f32[] all-reduce(%reduce.1788), channel_id=1661, replica_groups=[1,8]<=[8], use_global_device_ids=true, to_apply=%region_1820.40883.clone
  %convert_element_type.5998 = bf16[] convert(%all-reduce.858)
  %add.5029 = bf16[] add(%add.5028, %convert_element_type.5998)
  %square.599 = bf16[1,4096,14336]{2,1,0} multiply(%add.3556, %add.3556)
  %convert_element_type.6000 = f32[1,4096,14336]{2,1,0} convert(%square.599)
  %reduce.1789 = f32[] reduce(%convert_element_type.6000, %constant.1360), dimensions={0,1,2}, to_apply=%region_1821.40892
  %all-reduce.859 = f32[] all-reduce(%reduce.1789), channel_id=1662, replica_groups=[1,8]<=[8], use_global_device_ids=true, to_apply=%region_1821.40892.clone
  %convert_element_type.6001 = bf16[] convert(%all-reduce.859)
  %add.5031 = bf16[] add(%add.5029, %convert_element_type.6001)
  %square.600 = bf16[1,14336,4096]{2,1,0} multiply(%add.3564, %add.3564)
  %convert_element_type.6002 = f32[1,14336,4096]{2,1,0} convert(%square.600)
  %reduce.1790 = f32[] reduce(%convert_element_type.6002, %constant.1360), dimensions={0,1,2}, to_apply=%region_1822.40901
  %all-reduce.860 = f32[] all-reduce(%reduce.1790), channel_id=1663, replica_groups=[1,8]<=[8], use_global_device_ids=true, to_apply=%region_1822.40901.clone
  %convert_element_type.6003 = bf16[] convert(%all-reduce.860)
  %add.5032 = bf16[] add(%add.5031, %convert_element_type.6003)
  %square.601 = bf16[4096]{0} multiply(%add.3570, %add.3570)
  %convert_element_type.6004 = f32[4096]{0} convert(%square.601)
  %reduce.1791 = f32[] reduce(%convert_element_type.6004, %constant.1360), dimensions={0}, to_apply=%region_1823.40910
  %convert_element_type.6005 = bf16[] convert(%reduce.1791)
  %add.5033 = bf16[] add(%add.5032, %convert_element_type.6005)
  %square.602 = bf16[4096]{0} multiply(%add.3575, %add.3575)
  %convert_element_type.6006 = f32[4096]{0} convert(%square.602)
  %reduce.1792 = f32[] reduce(%convert_element_type.6006, %constant.1360), dimensions={0}, to_apply=%region_1824.40919
  %convert_element_type.6007 = bf16[] convert(%reduce.1792)
  %add.5034 = bf16[] add(%add.5033, %convert_element_type.6007)
  %square.603 = bf16[512,8,128]{2,1,0} multiply(%add.3581, %add.3581)
  %convert_element_type.6008 = f32[512,8,128]{2,1,0} convert(%square.603)
  %reduce.1793 = f32[] reduce(%convert_element_type.6008, %constant.1360), dimensions={0,1,2}, to_apply=%region_1825.40928
  %all-reduce.861 = f32[] all-reduce(%reduce.1793), channel_id=1664, replica_groups=[1,8]<=[8], use_global_device_ids=true, to_apply=%region_1825.40928.clone
  %convert_element_type.6009 = bf16[] convert(%all-reduce.861)
  %add.5035 = bf16[] add(%add.5034, %convert_element_type.6009)
  %square.604 = bf16[32,128,512]{2,1,0} multiply(%add.3586, %add.3586)
  %convert_element_type.6010 = f32[32,128,512]{2,1,0} convert(%square.604)
  %reduce.1794 = f32[] reduce(%convert_element_type.6010, %constant.1360), dimensions={0,1,2}, to_apply=%region_1826.40937
  %all-reduce.862 = f32[] all-reduce(%reduce.1794), channel_id=1665, replica_groups=[1,8]<=[8], use_global_device_ids=true, to_apply=%region_1826.40937.clone
  %convert_element_type.6012 = bf16[] convert(%all-reduce.862)
  %add.5036 = bf16[] add(%add.5035, %convert_element_type.6012)
  %square.605 = bf16[512,32,128]{2,1,0} multiply(%add.3592, %add.3592)
  %convert_element_type.6013 = f32[512,32,128]{2,1,0} convert(%square.605)
  %reduce.1795 = f32[] reduce(%convert_element_type.6013, %constant.1360), dimensions={0,1,2}, to_apply=%region_1827.40946
  %all-reduce.863 = f32[] all-reduce(%reduce.1795), channel_id=1666, replica_groups=[1,8]<=[8], use_global_device_ids=true, to_apply=%region_1827.40946.clone
  %convert_element_type.6014 = bf16[] convert(%all-reduce.863)
  %add.5037 = bf16[] add(%add.5036, %convert_element_type.6014)
  %square.606 = bf16[512,8,128]{2,1,0} multiply(%add.3597, %add.3597)
  %convert_element_type.6015 = f32[512,8,128]{2,1,0} convert(%square.606)
  %reduce.1796 = f32[] reduce(%convert_element_type.6015, %constant.1360), dimensions={0,1,2}, to_apply=%region_1828.40955
  %all-reduce.864 = f32[] all-reduce(%reduce.1796), channel_id=1667, replica_groups=[1,8]<=[8], use_global_device_ids=true, to_apply=%region_1828.40955.clone
  %convert_element_type.6016 = bf16[] convert(%all-reduce.864)
  %add.5039 = bf16[] add(%add.5037, %convert_element_type.6016)
  %square.607 = bf16[512,8]{1,0} multiply(%add.3602, %add.3602)
  %convert_element_type.6017 = f32[512,8]{1,0} convert(%square.607)
  %reduce.1797 = f32[] reduce(%convert_element_type.6017, %constant.1360), dimensions={0,1}, to_apply=%region_1829.40964
  %all-reduce.865 = f32[] all-reduce(%reduce.1797), channel_id=1668, replica_groups=[1,8]<=[8], use_global_device_ids=true, to_apply=%region_1829.40964.clone
  %convert_element_type.6019 = bf16[] convert(%all-reduce.865)
  %add.5040 = bf16[] add(%add.5039, %convert_element_type.6019)
  %square.608 = bf16[1,4096,14336]{2,1,0} multiply(%add.3608, %add.3608)
  %convert_element_type.6020 = f32[1,4096,14336]{2,1,0} convert(%square.608)
  %reduce.1798 = f32[] reduce(%convert_element_type.6020, %constant.1360), dimensions={0,1,2}, to_apply=%region_1830.40973
  %all-reduce.866 = f32[] all-reduce(%reduce.1798), channel_id=1669, replica_groups=[1,8]<=[8], use_global_device_ids=true, to_apply=%region_1830.40973.clone
  %convert_element_type.6021 = bf16[] convert(%all-reduce.866)
  %add.5041 = bf16[] add(%add.5040, %convert_element_type.6021)
  %square.609 = bf16[1,4096,14336]{2,1,0} multiply(%add.3613, %add.3613)
  %convert_element_type.6023 = f32[1,4096,14336]{2,1,0} convert(%square.609)
  %reduce.1799 = f32[] reduce(%convert_element_type.6023, %constant.1360), dimensions={0,1,2}, to_apply=%region_1831.40982
  %all-reduce.867 = f32[] all-reduce(%reduce.1799), channel_id=1670, replica_groups=[1,8]<=[8], use_global_device_ids=true, to_apply=%region_1831.40982.clone
  %convert_element_type.6024 = bf16[] convert(%all-reduce.867)
  %add.5042 = bf16[] add(%add.5041, %convert_element_type.6024)
  %square.610 = bf16[1,14336,4096]{2,1,0} multiply(%add.3618, %add.3618)
  %convert_element_type.6025 = f32[1,14336,4096]{2,1,0} convert(%square.610)
  %reduce.1800 = f32[] reduce(%convert_element_type.6025, %constant.1360), dimensions={0,1,2}, to_apply=%region_1832.40991
  %all-reduce.868 = f32[] all-reduce(%reduce.1800), channel_id=1671, replica_groups=[1,8]<=[8], use_global_device_ids=true, to_apply=%region_1832.40991.clone
  %convert_element_type.6026 = bf16[] convert(%all-reduce.868)
  %add.5043 = bf16[] add(%add.5042, %convert_element_type.6026)
  %square.611 = bf16[4096]{0} multiply(%add.3623, %add.3623)
  %convert_element_type.6027 = f32[4096]{0} convert(%square.611)
  %reduce.1801 = f32[] reduce(%convert_element_type.6027, %constant.1360), dimensions={0}, to_apply=%region_1833.41000
  %convert_element_type.6030 = bf16[] convert(%reduce.1801)
  %add.5044 = bf16[] add(%add.5043, %convert_element_type.6030)
  %square.612 = bf16[4096]{0} multiply(%add.3628, %add.3628)
  %convert_element_type.6031 = f32[4096]{0} convert(%square.612)
  %reduce.1802 = f32[] reduce(%convert_element_type.6031, %constant.1360), dimensions={0}, to_apply=%region_1834.41009
  %convert_element_type.6032 = bf16[] convert(%reduce.1802)
  %add.5045 = bf16[] add(%add.5044, %convert_element_type.6032)
  %square.613 = bf16[512,8,128]{2,1,0} multiply(%add.3633, %add.3633)
  %convert_element_type.6033 = f32[512,8,128]{2,1,0} convert(%square.613)
  %reduce.1803 = f32[] reduce(%convert_element_type.6033, %constant.1360), dimensions={0,1,2}, to_apply=%region_1835.41018
  %all-reduce.869 = f32[] all-reduce(%reduce.1803), channel_id=1672, replica_groups=[1,8]<=[8], use_global_device_ids=true, to_apply=%region_1835.41018.clone
  %convert_element_type.6035 = bf16[] convert(%all-reduce.869)
  %add.5046 = bf16[] add(%add.5045, %convert_element_type.6035)
  %square.614 = bf16[32,128,512]{2,1,0} multiply(%add.3638, %add.3638)
  %convert_element_type.6037 = f32[32,128,512]{2,1,0} convert(%square.614)
  %reduce.1804 = f32[] reduce(%convert_element_type.6037, %constant.1360), dimensions={0,1,2}, to_apply=%region_1836.41027
  %all-reduce.870 = f32[] all-reduce(%reduce.1804), channel_id=1673, replica_groups=[1,8]<=[8], use_global_device_ids=true, to_apply=%region_1836.41027.clone
  %convert_element_type.6038 = bf16[] convert(%all-reduce.870)
  %add.5048 = bf16[] add(%add.5046, %convert_element_type.6038)
  %square.615 = bf16[512,32,128]{2,1,0} multiply(%add.3645, %add.3645)
  %convert_element_type.6039 = f32[512,32,128]{2,1,0} convert(%square.615)
  %reduce.1805 = f32[] reduce(%convert_element_type.6039, %constant.1360), dimensions={0,1,2}, to_apply=%region_1837.41036
  %all-reduce.871 = f32[] all-reduce(%reduce.1805), channel_id=1674, replica_groups=[1,8]<=[8], use_global_device_ids=true, to_apply=%region_1837.41036.clone
  %convert_element_type.6040 = bf16[] convert(%all-reduce.871)
  %add.5049 = bf16[] add(%add.5048, %convert_element_type.6040)
  %square.616 = bf16[512,8,128]{2,1,0} multiply(%add.3650, %add.3650)
  %convert_element_type.6041 = f32[512,8,128]{2,1,0} convert(%square.616)
  %reduce.1806 = f32[] reduce(%convert_element_type.6041, %constant.1360), dimensions={0,1,2}, to_apply=%region_1838.41045
  %all-reduce.872 = f32[] all-reduce(%reduce.1806), channel_id=1675, replica_groups=[1,8]<=[8], use_global_device_ids=true, to_apply=%region_1838.41045.clone
  %convert_element_type.6042 = bf16[] convert(%all-reduce.872)
  %add.5050 = bf16[] add(%add.5049, %convert_element_type.6042)
  %square.617 = bf16[512,8]{1,0} multiply(%add.3656, %add.3656)
  %convert_element_type.6043 = f32[512,8]{1,0} convert(%square.617)
  %reduce.1807 = f32[] reduce(%convert_element_type.6043, %constant.1360), dimensions={0,1}, to_apply=%region_1839.41054
  %all-reduce.873 = f32[] all-reduce(%reduce.1807), channel_id=1676, replica_groups=[1,8]<=[8], use_global_device_ids=true, to_apply=%region_1839.41054.clone
  %convert_element_type.6044 = bf16[] convert(%all-reduce.873)
  %add.5051 = bf16[] add(%add.5050, %convert_element_type.6044)
  %square.618 = bf16[1,4096,14336]{2,1,0} multiply(%add.3661, %add.3661)
  %convert_element_type.6045 = f32[1,4096,14336]{2,1,0} convert(%square.618)
  %reduce.1808 = f32[] reduce(%convert_element_type.6045, %constant.1360), dimensions={0,1,2}, to_apply=%region_1840.41063
  %all-reduce.874 = f32[] all-reduce(%reduce.1808), channel_id=1677, replica_groups=[1,8]<=[8], use_global_device_ids=true, to_apply=%region_1840.41063.clone
  %convert_element_type.6046 = bf16[] convert(%all-reduce.874)
  %add.5052 = bf16[] add(%add.5051, %convert_element_type.6046)
  %square.619 = bf16[1,4096,14336]{2,1,0} multiply(%add.3666, %add.3666)
  %convert_element_type.6047 = f32[1,4096,14336]{2,1,0} convert(%square.619)
  %reduce.1809 = f32[] reduce(%convert_element_type.6047, %constant.1360), dimensions={0,1,2}, to_apply=%region_1841.41072
  %all-reduce.875 = f32[] all-reduce(%reduce.1809), channel_id=1678, replica_groups=[1,8]<=[8], use_global_device_ids=true, to_apply=%region_1841.41072.clone
  %convert_element_type.6049 = bf16[] convert(%all-reduce.875)
  %add.5053 = bf16[] add(%add.5052, %convert_element_type.6049)
  %square.620 = bf16[1,14336,4096]{2,1,0} multiply(%add.3671, %add.3671)
  %convert_element_type.6050 = f32[1,14336,4096]{2,1,0} convert(%square.620)
  %reduce.1810 = f32[] reduce(%convert_element_type.6050, %constant.1360), dimensions={0,1,2}, to_apply=%region_1842.41081
  %all-reduce.876 = f32[] all-reduce(%reduce.1810), channel_id=1679, replica_groups=[1,8]<=[8], use_global_device_ids=true, to_apply=%region_1842.41081.clone
  %convert_element_type.6052 = bf16[] convert(%all-reduce.876)
  %add.5054 = bf16[] add(%add.5053, %convert_element_type.6052)
  %square.621 = bf16[4096]{0} multiply(%add.3676, %add.3676)
  %convert_element_type.6053 = f32[4096]{0} convert(%square.621)
  %reduce.1811 = f32[] reduce(%convert_element_type.6053, %constant.1360), dimensions={0}, to_apply=%region_1843.41090
  %convert_element_type.6056 = bf16[] convert(%reduce.1811)
  %add.5055 = bf16[] add(%add.5054, %convert_element_type.6056)
  %square.622 = bf16[4096]{0} multiply(%add.3681, %add.3681)
  %convert_element_type.6057 = f32[4096]{0} convert(%square.622)
  %reduce.1812 = f32[] reduce(%convert_element_type.6057, %constant.1360), dimensions={0}, to_apply=%region_1844.41099
  %convert_element_type.6058 = bf16[] convert(%reduce.1812)
  %add.5056 = bf16[] add(%add.5055, %convert_element_type.6058)
  %square.623 = bf16[512,8,128]{2,1,0} multiply(%add.3687, %add.3687)
  %convert_element_type.6059 = f32[512,8,128]{2,1,0} convert(%square.623)
  %reduce.1813 = f32[] reduce(%convert_element_type.6059, %constant.1360), dimensions={0,1,2}, to_apply=%region_1845.41108
  %all-reduce.877 = f32[] all-reduce(%reduce.1813), channel_id=1680, replica_groups=[1,8]<=[8], use_global_device_ids=true, to_apply=%region_1845.41108.clone
  %convert_element_type.6060 = bf16[] convert(%all-reduce.877)
  %add.5057 = bf16[] add(%add.5056, %convert_element_type.6060)
  %square.624 = bf16[32,128,512]{2,1,0} multiply(%add.3693, %add.3693)
  %convert_element_type.6062 = f32[32,128,512]{2,1,0} convert(%square.624)
  %reduce.1814 = f32[] reduce(%convert_element_type.6062, %constant.1360), dimensions={0,1,2}, to_apply=%region_1846.41117
  %all-reduce.878 = f32[] all-reduce(%reduce.1814), channel_id=1681, replica_groups=[1,8]<=[8], use_global_device_ids=true, to_apply=%region_1846.41117.clone
  %convert_element_type.6063 = bf16[] convert(%all-reduce.878)
  %add.5058 = bf16[] add(%add.5057, %convert_element_type.6063)
  %square.625 = bf16[512,32,128]{2,1,0} multiply(%add.3698, %add.3698)
  %convert_element_type.6064 = f32[512,32,128]{2,1,0} convert(%square.625)
  %reduce.1815 = f32[] reduce(%convert_element_type.6064, %constant.1360), dimensions={0,1,2}, to_apply=%region_1847.41126
  %all-reduce.879 = f32[] all-reduce(%reduce.1815), channel_id=1682, replica_groups=[1,8]<=[8], use_global_device_ids=true, to_apply=%region_1847.41126.clone
  %convert_element_type.6065 = bf16[] convert(%all-reduce.879)
  %add.5059 = bf16[] add(%add.5058, %convert_element_type.6065)
  %square.626 = bf16[512,8,128]{2,1,0} multiply(%add.3703, %add.3703)
  %convert_element_type.6066 = f32[512,8,128]{2,1,0} convert(%square.626)
  %reduce.1816 = f32[] reduce(%convert_element_type.6066, %constant.1360), dimensions={0,1,2}, to_apply=%region_1848.41135
  %all-reduce.880 = f32[] all-reduce(%reduce.1816), channel_id=1683, replica_groups=[1,8]<=[8], use_global_device_ids=true, to_apply=%region_1848.41135.clone
  %convert_element_type.6068 = bf16[] convert(%all-reduce.880)
  %add.5060 = bf16[] add(%add.5059, %convert_element_type.6068)
  %square.627 = bf16[512,8]{1,0} multiply(%add.3708, %add.3708)
  %convert_element_type.6069 = f32[512,8]{1,0} convert(%square.627)
  %reduce.1817 = f32[] reduce(%convert_element_type.6069, %constant.1360), dimensions={0,1}, to_apply=%region_1849.41144
  %all-reduce.881 = f32[] all-reduce(%reduce.1817), channel_id=1684, replica_groups=[1,8]<=[8], use_global_device_ids=true, to_apply=%region_1849.41144.clone
  %convert_element_type.6070 = bf16[] convert(%all-reduce.881)
  %add.5061 = bf16[] add(%add.5060, %convert_element_type.6070)
  %square.628 = bf16[1,4096,14336]{2,1,0} multiply(%add.3715, %add.3715)
  %convert_element_type.6071 = f32[1,4096,14336]{2,1,0} convert(%square.628)
  %reduce.1818 = f32[] reduce(%convert_element_type.6071, %constant.1360), dimensions={0,1,2}, to_apply=%region_1850.41153
  %all-reduce.882 = f32[] all-reduce(%reduce.1818), channel_id=1685, replica_groups=[1,8]<=[8], use_global_device_ids=true, to_apply=%region_1850.41153.clone
  %convert_element_type.6072 = bf16[] convert(%all-reduce.882)
  %add.5062 = bf16[] add(%add.5061, %convert_element_type.6072)
  %square.629 = bf16[1,4096,14336]{2,1,0} multiply(%add.3720, %add.3720)
  %convert_element_type.6073 = f32[1,4096,14336]{2,1,0} convert(%square.629)
  %reduce.1819 = f32[] reduce(%convert_element_type.6073, %constant.1360), dimensions={0,1,2}, to_apply=%region_1851.41162
  %all-reduce.883 = f32[] all-reduce(%reduce.1819), channel_id=1686, replica_groups=[1,8]<=[8], use_global_device_ids=true, to_apply=%region_1851.41162.clone
  %convert_element_type.6074 = bf16[] convert(%all-reduce.883)
  %add.5063 = bf16[] add(%add.5062, %convert_element_type.6074)
  %square.630 = bf16[1,14336,4096]{2,1,0} multiply(%add.3725, %add.3725)
  %convert_element_type.6075 = f32[1,14336,4096]{2,1,0} convert(%square.630)
  %reduce.1820 = f32[] reduce(%convert_element_type.6075, %constant.1360), dimensions={0,1,2}, to_apply=%region_1852.41171
  %all-reduce.884 = f32[] all-reduce(%reduce.1820), channel_id=1687, replica_groups=[1,8]<=[8], use_global_device_ids=true, to_apply=%region_1852.41171.clone
  %convert_element_type.6076 = bf16[] convert(%all-reduce.884)
  %add.5064 = bf16[] add(%add.5063, %convert_element_type.6076)
  %square.631 = bf16[4096]{0} multiply(%add.3730, %add.3730)
  %convert_element_type.6078 = f32[4096]{0} convert(%square.631)
  %reduce.1821 = f32[] reduce(%convert_element_type.6078, %constant.1360), dimensions={0}, to_apply=%region_1853.41180
  %convert_element_type.6079 = bf16[] convert(%reduce.1821)
  %add.5065 = bf16[] add(%add.5064, %convert_element_type.6079)
  %square.632 = bf16[4096]{0} multiply(%add.3737, %add.3737)
  %convert_element_type.6080 = f32[4096]{0} convert(%square.632)
  %reduce.1822 = f32[] reduce(%convert_element_type.6080, %constant.1360), dimensions={0}, to_apply=%region_1854.41189
  %convert_element_type.6081 = bf16[] convert(%reduce.1822)
  %add.5066 = bf16[] add(%add.5065, %convert_element_type.6081)
  %square.633 = bf16[512,8,128]{2,1,0} multiply(%add.3742, %add.3742)
  %convert_element_type.6082 = f32[512,8,128]{2,1,0} convert(%square.633)
  %reduce.1823 = f32[] reduce(%convert_element_type.6082, %constant.1360), dimensions={0,1,2}, to_apply=%region_1855.41198
  %all-reduce.885 = f32[] all-reduce(%reduce.1823), channel_id=1688, replica_groups=[1,8]<=[8], use_global_device_ids=true, to_apply=%region_1855.41198.clone
  %convert_element_type.6083 = bf16[] convert(%all-reduce.885)
  %add.5067 = bf16[] add(%add.5066, %convert_element_type.6083)
  %square.634 = bf16[32,128,512]{2,1,0} multiply(%add.3747, %add.3747)
  %convert_element_type.6084 = f32[32,128,512]{2,1,0} convert(%square.634)
  %reduce.1824 = f32[] reduce(%convert_element_type.6084, %constant.1360), dimensions={0,1,2}, to_apply=%region_1856.41207
  %all-reduce.886 = f32[] all-reduce(%reduce.1824), channel_id=1689, replica_groups=[1,8]<=[8], use_global_device_ids=true, to_apply=%region_1856.41207.clone
  %convert_element_type.6085 = bf16[] convert(%all-reduce.886)
  %add.5068 = bf16[] add(%add.5067, %convert_element_type.6085)
  %square.635 = bf16[512,32,128]{2,1,0} multiply(%add.3753, %add.3753)
  %convert_element_type.6086 = f32[512,32,128]{2,1,0} convert(%square.635)
  %reduce.1825 = f32[] reduce(%convert_element_type.6086, %constant.1360), dimensions={0,1,2}, to_apply=%region_1857.41216
  %all-reduce.887 = f32[] all-reduce(%reduce.1825), channel_id=1690, replica_groups=[1,8]<=[8], use_global_device_ids=true, to_apply=%region_1857.41216.clone
  %convert_element_type.6087 = bf16[] convert(%all-reduce.887)
  %add.5070 = bf16[] add(%add.5068, %convert_element_type.6087)
  %square.636 = bf16[512,8,128]{2,1,0} multiply(%add.3758, %add.3758)
  %convert_element_type.6088 = f32[512,8,128]{2,1,0} convert(%square.636)
  %reduce.1826 = f32[] reduce(%convert_element_type.6088, %constant.1360), dimensions={0,1,2}, to_apply=%region_1858.41225
  %all-reduce.888 = f32[] all-reduce(%reduce.1826), channel_id=1691, replica_groups=[1,8]<=[8], use_global_device_ids=true, to_apply=%region_1858.41225.clone
  %convert_element_type.6089 = bf16[] convert(%all-reduce.888)
  %add.5071 = bf16[] add(%add.5070, %convert_element_type.6089)
  %square.637 = bf16[512,8]{1,0} multiply(%add.3764, %add.3764)
  %convert_element_type.6090 = f32[512,8]{1,0} convert(%square.637)
  %reduce.1827 = f32[] reduce(%convert_element_type.6090, %constant.1360), dimensions={0,1}, to_apply=%region_1859.41234
  %all-reduce.889 = f32[] all-reduce(%reduce.1827), channel_id=1692, replica_groups=[1,8]<=[8], use_global_device_ids=true, to_apply=%region_1859.41234.clone
  %convert_element_type.6091 = bf16[] convert(%all-reduce.889)
  %add.5072 = bf16[] add(%add.5071, %convert_element_type.6091)
  %square.638 = bf16[1,4096,14336]{2,1,0} multiply(%add.3769, %add.3769)
  %convert_element_type.6093 = f32[1,4096,14336]{2,1,0} convert(%square.638)
  %reduce.1828 = f32[] reduce(%convert_element_type.6093, %constant.1360), dimensions={0,1,2}, to_apply=%region_1860.41243
  %all-reduce.890 = f32[] all-reduce(%reduce.1828), channel_id=1693, replica_groups=[1,8]<=[8], use_global_device_ids=true, to_apply=%region_1860.41243.clone
  %convert_element_type.6095 = bf16[] convert(%all-reduce.890)
  %add.5073 = bf16[] add(%add.5072, %convert_element_type.6095)
  %square.639 = bf16[1,4096,14336]{2,1,0} multiply(%add.3774, %add.3774)
  %convert_element_type.6096 = f32[1,4096,14336]{2,1,0} convert(%square.639)
  %reduce.1829 = f32[] reduce(%convert_element_type.6096, %constant.1360), dimensions={0,1,2}, to_apply=%region_1861.41252
  %all-reduce.891 = f32[] all-reduce(%reduce.1829), channel_id=1694, replica_groups=[1,8]<=[8], use_global_device_ids=true, to_apply=%region_1861.41252.clone
  %convert_element_type.6097 = bf16[] convert(%all-reduce.891)
  %add.5074 = bf16[] add(%add.5073, %convert_element_type.6097)
  %square.640 = bf16[1,14336,4096]{2,1,0} multiply(%add.3779, %add.3779)
  %convert_element_type.6098 = f32[1,14336,4096]{2,1,0} convert(%square.640)
  %reduce.1830 = f32[] reduce(%convert_element_type.6098, %constant.1360), dimensions={0,1,2}, to_apply=%region_1862.41261
  %all-reduce.892 = f32[] all-reduce(%reduce.1830), channel_id=1695, replica_groups=[1,8]<=[8], use_global_device_ids=true, to_apply=%region_1862.41261.clone
  %convert_element_type.6099 = bf16[] convert(%all-reduce.892)
  %add.5075 = bf16[] add(%add.5074, %convert_element_type.6099)
  %square.641 = bf16[4096]{0} multiply(%add.3784, %add.3784)
  %convert_element_type.6100 = f32[4096]{0} convert(%square.641)
  %reduce.1831 = f32[] reduce(%convert_element_type.6100, %constant.1360), dimensions={0}, to_apply=%region_1863.41270
  %convert_element_type.6101 = bf16[] convert(%reduce.1831)
  %add.5076 = bf16[] add(%add.5075, %convert_element_type.6101)
  %square.642 = bf16[4096]{0} multiply(%add.3789, %add.3789)
  %convert_element_type.6102 = f32[4096]{0} convert(%square.642)
  %reduce.1832 = f32[] reduce(%convert_element_type.6102, %constant.1360), dimensions={0}, to_apply=%region_1864.41279
  %convert_element_type.6104 = bf16[] convert(%reduce.1832)
  %add.5078 = bf16[] add(%add.5076, %convert_element_type.6104)
  %square.643 = bf16[512,8,128]{2,1,0} multiply(%add.3794, %add.3794)
  %convert_element_type.6105 = f32[512,8,128]{2,1,0} convert(%square.643)
  %reduce.1833 = f32[] reduce(%convert_element_type.6105, %constant.1360), dimensions={0,1,2}, to_apply=%region_1865.41288
  %all-reduce.893 = f32[] all-reduce(%reduce.1833), channel_id=1696, replica_groups=[1,8]<=[8], use_global_device_ids=true, to_apply=%region_1865.41288.clone
  %convert_element_type.6106 = bf16[] convert(%all-reduce.893)
  %add.5079 = bf16[] add(%add.5078, %convert_element_type.6106)
  %square.644 = bf16[32,128,512]{2,1,0} multiply(%add.3799, %add.3799)
  %convert_element_type.6108 = f32[32,128,512]{2,1,0} convert(%square.644)
  %reduce.1834 = f32[] reduce(%convert_element_type.6108, %constant.1360), dimensions={0,1,2}, to_apply=%region_1866.41297
  %all-reduce.894 = f32[] all-reduce(%reduce.1834), channel_id=1697, replica_groups=[1,8]<=[8], use_global_device_ids=true, to_apply=%region_1866.41297.clone
  %convert_element_type.6109 = bf16[] convert(%all-reduce.894)
  %add.5081 = bf16[] add(%add.5079, %convert_element_type.6109)
  %square.645 = bf16[512,32,128]{2,1,0} multiply(%add.3805, %add.3805)
  %convert_element_type.6111 = f32[512,32,128]{2,1,0} convert(%square.645)
  %reduce.1835 = f32[] reduce(%convert_element_type.6111, %constant.1360), dimensions={0,1,2}, to_apply=%region_1867.41306
  %all-reduce.895 = f32[] all-reduce(%reduce.1835), channel_id=1698, replica_groups=[1,8]<=[8], use_global_device_ids=true, to_apply=%region_1867.41306.clone
  %convert_element_type.6112 = bf16[] convert(%all-reduce.895)
  %add.5082 = bf16[] add(%add.5081, %convert_element_type.6112)
  %square.646 = bf16[512,8,128]{2,1,0} multiply(%add.3810, %add.3810)
  %convert_element_type.6113 = f32[512,8,128]{2,1,0} convert(%square.646)
  %reduce.1836 = f32[] reduce(%convert_element_type.6113, %constant.1360), dimensions={0,1,2}, to_apply=%region_1868.41315
  %all-reduce.896 = f32[] all-reduce(%reduce.1836), channel_id=1699, replica_groups=[1,8]<=[8], use_global_device_ids=true, to_apply=%region_1868.41315.clone
  %convert_element_type.6114 = bf16[] convert(%all-reduce.896)
  %add.5084 = bf16[] add(%add.5082, %convert_element_type.6114)
  %square.647 = bf16[512,8]{1,0} multiply(%add.3817, %add.3817)
  %convert_element_type.6115 = f32[512,8]{1,0} convert(%square.647)
  %reduce.1837 = f32[] reduce(%convert_element_type.6115, %constant.1360), dimensions={0,1}, to_apply=%region_1869.41324
  %all-reduce.897 = f32[] all-reduce(%reduce.1837), channel_id=1700, replica_groups=[1,8]<=[8], use_global_device_ids=true, to_apply=%region_1869.41324.clone
  %convert_element_type.6116 = bf16[] convert(%all-reduce.897)
  %add.5085 = bf16[] add(%add.5084, %convert_element_type.6116)
  %square.648 = bf16[1,4096,14336]{2,1,0} multiply(%add.3822, %add.3822)
  %convert_element_type.6117 = f32[1,4096,14336]{2,1,0} convert(%square.648)
  %reduce.1838 = f32[] reduce(%convert_element_type.6117, %constant.1360), dimensions={0,1,2}, to_apply=%region_1870.41333
  %all-reduce.898 = f32[] all-reduce(%reduce.1838), channel_id=1701, replica_groups=[1,8]<=[8], use_global_device_ids=true, to_apply=%region_1870.41333.clone
  %convert_element_type.6118 = bf16[] convert(%all-reduce.898)
  %add.5086 = bf16[] add(%add.5085, %convert_element_type.6118)
  %square.649 = bf16[1,4096,14336]{2,1,0} multiply(%add.3827, %add.3827)
  %convert_element_type.6119 = f32[1,4096,14336]{2,1,0} convert(%square.649)
  %reduce.1839 = f32[] reduce(%convert_element_type.6119, %constant.1360), dimensions={0,1,2}, to_apply=%region_1871.41342
  %all-reduce.899 = f32[] all-reduce(%reduce.1839), channel_id=1702, replica_groups=[1,8]<=[8], use_global_device_ids=true, to_apply=%region_1871.41342.clone
  %convert_element_type.6121 = bf16[] convert(%all-reduce.899)
  %add.5089 = bf16[] add(%add.5086, %convert_element_type.6121)
  %square.650 = bf16[1,14336,4096]{2,1,0} multiply(%add.3833, %add.3833)
  %convert_element_type.6124 = f32[1,14336,4096]{2,1,0} convert(%square.650)
  %reduce.1840 = f32[] reduce(%convert_element_type.6124, %constant.1360), dimensions={0,1,2}, to_apply=%region_1872.41351
  %all-reduce.900 = f32[] all-reduce(%reduce.1840), channel_id=1703, replica_groups=[1,8]<=[8], use_global_device_ids=true, to_apply=%region_1872.41351.clone
  %convert_element_type.6125 = bf16[] convert(%all-reduce.900)
  %add.5090 = bf16[] add(%add.5089, %convert_element_type.6125)
  %square.651 = bf16[4096]{0} multiply(%add.3838, %add.3838)
  %convert_element_type.6126 = f32[4096]{0} convert(%square.651)
  %reduce.1841 = f32[] reduce(%convert_element_type.6126, %constant.1360), dimensions={0}, to_apply=%region_1873.41360
  %convert_element_type.6127 = bf16[] convert(%reduce.1841)
  %add.5091 = bf16[] add(%add.5090, %convert_element_type.6127)
  %square.652 = bf16[4096]{0} multiply(%add.3844, %add.3844)
  %convert_element_type.6128 = f32[4096]{0} convert(%square.652)
  %reduce.1842 = f32[] reduce(%convert_element_type.6128, %constant.1360), dimensions={0}, to_apply=%region_1874.41369
  %convert_element_type.6129 = bf16[] convert(%reduce.1842)
  %add.5092 = bf16[] add(%add.5091, %convert_element_type.6129)
  %square.653 = bf16[512,8,128]{2,1,0} multiply(%add.3849, %add.3849)
  %convert_element_type.6130 = f32[512,8,128]{2,1,0} convert(%square.653)
  %reduce.1843 = f32[] reduce(%convert_element_type.6130, %constant.1360), dimensions={0,1,2}, to_apply=%region_1875.41378
  %all-reduce.901 = f32[] all-reduce(%reduce.1843), channel_id=1704, replica_groups=[1,8]<=[8], use_global_device_ids=true, to_apply=%region_1875.41378.clone
  %convert_element_type.6131 = bf16[] convert(%all-reduce.901)
  %add.5093 = bf16[] add(%add.5092, %convert_element_type.6131)
  %square.654 = bf16[32,128,512]{2,1,0} multiply(%add.3854, %add.3854)
  %convert_element_type.6132 = f32[32,128,512]{2,1,0} convert(%square.654)
  %reduce.1844 = f32[] reduce(%convert_element_type.6132, %constant.1360), dimensions={0,1,2}, to_apply=%region_1876.41387
  %all-reduce.902 = f32[] all-reduce(%reduce.1844), channel_id=1705, replica_groups=[1,8]<=[8], use_global_device_ids=true, to_apply=%region_1876.41387.clone
  %convert_element_type.6133 = bf16[] convert(%all-reduce.902)
  %add.5094 = bf16[] add(%add.5093, %convert_element_type.6133)
  %square.655 = bf16[512,32,128]{2,1,0} multiply(%add.3859, %add.3859)
  %convert_element_type.6134 = f32[512,32,128]{2,1,0} convert(%square.655)
  %reduce.1845 = f32[] reduce(%convert_element_type.6134, %constant.1360), dimensions={0,1,2}, to_apply=%region_1877.41396
  %all-reduce.903 = f32[] all-reduce(%reduce.1845), channel_id=1706, replica_groups=[1,8]<=[8], use_global_device_ids=true, to_apply=%region_1877.41396.clone
  %convert_element_type.6136 = bf16[] convert(%all-reduce.903)
  %add.5095 = bf16[] add(%add.5094, %convert_element_type.6136)
  %square.656 = bf16[512,8,128]{2,1,0} multiply(%add.3866, %add.3866)
  %convert_element_type.6137 = f32[512,8,128]{2,1,0} convert(%square.656)
  %reduce.1846 = f32[] reduce(%convert_element_type.6137, %constant.1360), dimensions={0,1,2}, to_apply=%region_1878.41405
  %all-reduce.904 = f32[] all-reduce(%reduce.1846), channel_id=1707, replica_groups=[1,8]<=[8], use_global_device_ids=true, to_apply=%region_1878.41405.clone
  %convert_element_type.6138 = bf16[] convert(%all-reduce.904)
  %add.5096 = bf16[] add(%add.5095, %convert_element_type.6138)
  %square.657 = bf16[512,8]{1,0} multiply(%add.3872, %add.3872)
  %convert_element_type.6139 = f32[512,8]{1,0} convert(%square.657)
  %reduce.1847 = f32[] reduce(%convert_element_type.6139, %constant.1360), dimensions={0,1}, to_apply=%region_1879.41414
  %all-reduce.905 = f32[] all-reduce(%reduce.1847), channel_id=1708, replica_groups=[1,8]<=[8], use_global_device_ids=true, to_apply=%region_1879.41414.clone
  %convert_element_type.6140 = bf16[] convert(%all-reduce.905)
  %add.5098 = bf16[] add(%add.5096, %convert_element_type.6140)
  %square.658 = bf16[1,4096,14336]{2,1,0} multiply(%add.3878, %add.3878)
  %convert_element_type.6141 = f32[1,4096,14336]{2,1,0} convert(%square.658)
  %reduce.1848 = f32[] reduce(%convert_element_type.6141, %constant.1360), dimensions={0,1,2}, to_apply=%region_1880.41423
  %all-reduce.906 = f32[] all-reduce(%reduce.1848), channel_id=1709, replica_groups=[1,8]<=[8], use_global_device_ids=true, to_apply=%region_1880.41423.clone
  %convert_element_type.6142 = bf16[] convert(%all-reduce.906)
  %add.5099 = bf16[] add(%add.5098, %convert_element_type.6142)
  %square.659 = bf16[1,4096,14336]{2,1,0} multiply(%add.3884, %add.3884)
  %convert_element_type.6143 = f32[1,4096,14336]{2,1,0} convert(%square.659)
  %reduce.1849 = f32[] reduce(%convert_element_type.6143, %constant.1360), dimensions={0,1,2}, to_apply=%region_1881.41432
  %all-reduce.907 = f32[] all-reduce(%reduce.1849), channel_id=1710, replica_groups=[1,8]<=[8], use_global_device_ids=true, to_apply=%region_1881.41432.clone
  %convert_element_type.6144 = bf16[] convert(%all-reduce.907)
  %add.5100 = bf16[] add(%add.5099, %convert_element_type.6144)
  %square.660 = bf16[1,14336,4096]{2,1,0} multiply(%add.3889, %add.3889)
  %convert_element_type.6145 = f32[1,14336,4096]{2,1,0} convert(%square.660)
  %reduce.1850 = f32[] reduce(%convert_element_type.6145, %constant.1360), dimensions={0,1,2}, to_apply=%region_1882.41441
  %all-reduce.908 = f32[] all-reduce(%reduce.1850), channel_id=1711, replica_groups=[1,8]<=[8], use_global_device_ids=true, to_apply=%region_1882.41441.clone
  %convert_element_type.6146 = bf16[] convert(%all-reduce.908)
  %add.5101 = bf16[] add(%add.5100, %convert_element_type.6146)
  %square.661 = bf16[4096]{0} multiply(%add.3895, %add.3895)
  %convert_element_type.6148 = f32[4096]{0} convert(%square.661)
  %reduce.1851 = f32[] reduce(%convert_element_type.6148, %constant.1360), dimensions={0}, to_apply=%region_1883.41450
  %convert_element_type.6149 = bf16[] convert(%reduce.1851)
  %add.5102 = bf16[] add(%add.5101, %convert_element_type.6149)
  %square.662 = bf16[4096]{0} multiply(%add.3900, %add.3900)
  %convert_element_type.6151 = f32[4096]{0} convert(%square.662)
  %reduce.1852 = f32[] reduce(%convert_element_type.6151, %constant.1360), dimensions={0}, to_apply=%region_1884.41459
  %convert_element_type.6152 = bf16[] convert(%reduce.1852)
  %add.5103 = bf16[] add(%add.5102, %convert_element_type.6152)
  %square.663 = bf16[512,8,128]{2,1,0} multiply(%add.3905, %add.3905)
  %convert_element_type.6153 = f32[512,8,128]{2,1,0} convert(%square.663)
  %reduce.1853 = f32[] reduce(%convert_element_type.6153, %constant.1360), dimensions={0,1,2}, to_apply=%region_1885.41468
  %all-reduce.909 = f32[] all-reduce(%reduce.1853), channel_id=1712, replica_groups=[1,8]<=[8], use_global_device_ids=true, to_apply=%region_1885.41468.clone
  %convert_element_type.6154 = bf16[] convert(%all-reduce.909)
  %add.5104 = bf16[] add(%add.5103, %convert_element_type.6154)
  %square.664 = bf16[32,128,512]{2,1,0} multiply(%add.3911, %add.3911)
  %convert_element_type.6155 = f32[32,128,512]{2,1,0} convert(%square.664)
  %reduce.1854 = f32[] reduce(%convert_element_type.6155, %constant.1360), dimensions={0,1,2}, to_apply=%region_1886.41477
  %all-reduce.910 = f32[] all-reduce(%reduce.1854), channel_id=1713, replica_groups=[1,8]<=[8], use_global_device_ids=true, to_apply=%region_1886.41477.clone
  %convert_element_type.6156 = bf16[] convert(%all-reduce.910)
  %add.5105 = bf16[] add(%add.5104, %convert_element_type.6156)
  %square.665 = bf16[512,32,128]{2,1,0} multiply(%add.3916, %add.3916)
  %convert_element_type.6157 = f32[512,32,128]{2,1,0} convert(%square.665)
  %reduce.1855 = f32[] reduce(%convert_element_type.6157, %constant.1360), dimensions={0,1,2}, to_apply=%region_1887.41486
  %all-reduce.911 = f32[] all-reduce(%reduce.1855), channel_id=1714, replica_groups=[1,8]<=[8], use_global_device_ids=true, to_apply=%region_1887.41486.clone
  %convert_element_type.6158 = bf16[] convert(%all-reduce.911)
  %add.5106 = bf16[] add(%add.5105, %convert_element_type.6158)
  %square.666 = bf16[512,8,128]{2,1,0} multiply(%add.3921, %add.3921)
  %convert_element_type.6159 = f32[512,8,128]{2,1,0} convert(%square.666)
  %reduce.1856 = f32[] reduce(%convert_element_type.6159, %constant.1360), dimensions={0,1,2}, to_apply=%region_1888.41495
  %all-reduce.912 = f32[] all-reduce(%reduce.1856), channel_id=1715, replica_groups=[1,8]<=[8], use_global_device_ids=true, to_apply=%region_1888.41495.clone
  %convert_element_type.6161 = bf16[] convert(%all-reduce.912)
  %add.5108 = bf16[] add(%add.5106, %convert_element_type.6161)
  %square.667 = bf16[512,8]{1,0} multiply(%add.3926, %add.3926)
  %convert_element_type.6163 = f32[512,8]{1,0} convert(%square.667)
  %reduce.1857 = f32[] reduce(%convert_element_type.6163, %constant.1360), dimensions={0,1}, to_apply=%region_1889.41504
  %all-reduce.913 = f32[] all-reduce(%reduce.1857), channel_id=1716, replica_groups=[1,8]<=[8], use_global_device_ids=true, to_apply=%region_1889.41504.clone
  %convert_element_type.6164 = bf16[] convert(%all-reduce.913)
  %add.5109 = bf16[] add(%add.5108, %convert_element_type.6164)
  %square.668 = bf16[1,4096,14336]{2,1,0} multiply(%add.3931, %add.3931)
  %convert_element_type.6165 = f32[1,4096,14336]{2,1,0} convert(%square.668)
  %reduce.1858 = f32[] reduce(%convert_element_type.6165, %constant.1360), dimensions={0,1,2}, to_apply=%region_1890.41513
  %all-reduce.914 = f32[] all-reduce(%reduce.1858), channel_id=1717, replica_groups=[1,8]<=[8], use_global_device_ids=true, to_apply=%region_1890.41513.clone
  %convert_element_type.6166 = bf16[] convert(%all-reduce.914)
  %add.5110 = bf16[] add(%add.5109, %convert_element_type.6166)
  %square.669 = bf16[1,4096,14336]{2,1,0} multiply(%add.3936, %add.3936)
  %convert_element_type.6167 = f32[1,4096,14336]{2,1,0} convert(%square.669)
  %reduce.1859 = f32[] reduce(%convert_element_type.6167, %constant.1360), dimensions={0,1,2}, to_apply=%region_1891.41522
  %all-reduce.915 = f32[] all-reduce(%reduce.1859), channel_id=1718, replica_groups=[1,8]<=[8], use_global_device_ids=true, to_apply=%region_1891.41522.clone
  %convert_element_type.6168 = bf16[] convert(%all-reduce.915)
  %add.5111 = bf16[] add(%add.5110, %convert_element_type.6168)
  %square.670 = bf16[1,14336,4096]{2,1,0} multiply(%add.3941, %add.3941)
  %convert_element_type.6169 = f32[1,14336,4096]{2,1,0} convert(%square.670)
  %reduce.1860 = f32[] reduce(%convert_element_type.6169, %constant.1360), dimensions={0,1,2}, to_apply=%region_1892.41531
  %all-reduce.916 = f32[] all-reduce(%reduce.1860), channel_id=1719, replica_groups=[1,8]<=[8], use_global_device_ids=true, to_apply=%region_1892.41531.clone
  %convert_element_type.6170 = bf16[] convert(%all-reduce.916)
  %add.5112 = bf16[] add(%add.5111, %convert_element_type.6170)
  %square.671 = bf16[4096]{0} multiply(%add.3947, %add.3947)
  %convert_element_type.6171 = f32[4096]{0} convert(%square.671)
  %reduce.1861 = f32[] reduce(%convert_element_type.6171, %constant.1360), dimensions={0}, to_apply=%region_1893.41540
  %convert_element_type.6172 = bf16[] convert(%reduce.1861)
  %add.5113 = bf16[] add(%add.5112, %convert_element_type.6172)
  %square.672 = bf16[4096]{0} multiply(%add.3952, %add.3952)
  %convert_element_type.6173 = f32[4096]{0} convert(%square.672)
  %reduce.1862 = f32[] reduce(%convert_element_type.6173, %constant.1360), dimensions={0}, to_apply=%region_1894.41549
  %convert_element_type.6174 = bf16[] convert(%reduce.1862)
  %add.5114 = bf16[] add(%add.5113, %convert_element_type.6174)
  %square.673 = bf16[512,8,128]{2,1,0} multiply(%add.3959, %add.3959)
  %convert_element_type.6175 = f32[512,8,128]{2,1,0} convert(%square.673)
  %reduce.1863 = f32[] reduce(%convert_element_type.6175, %constant.1360), dimensions={0,1,2}, to_apply=%region_1895.41558
  %all-reduce.917 = f32[] all-reduce(%reduce.1863), channel_id=1720, replica_groups=[1,8]<=[8], use_global_device_ids=true, to_apply=%region_1895.41558.clone
  %convert_element_type.6176 = bf16[] convert(%all-reduce.917)
  %add.5115 = bf16[] add(%add.5114, %convert_element_type.6176)
  %square.674 = bf16[32,128,512]{2,1,0} multiply(%add.3965, %add.3965)
  %convert_element_type.6177 = f32[32,128,512]{2,1,0} convert(%square.674)
  %reduce.1864 = f32[] reduce(%convert_element_type.6177, %constant.1360), dimensions={0,1,2}, to_apply=%region_1896.41567
  %all-reduce.918 = f32[] all-reduce(%reduce.1864), channel_id=1721, replica_groups=[1,8]<=[8], use_global_device_ids=true, to_apply=%region_1896.41567.clone
  %convert_element_type.6178 = bf16[] convert(%all-reduce.918)
  %add.5116 = bf16[] add(%add.5115, %convert_element_type.6178)
  %square.675 = bf16[512,32,128]{2,1,0} multiply(%add.3970, %add.3970)
  %convert_element_type.6181 = f32[512,32,128]{2,1,0} convert(%square.675)
  %reduce.1865 = f32[] reduce(%convert_element_type.6181, %constant.1360), dimensions={0,1,2}, to_apply=%region_1897.41576
  %all-reduce.919 = f32[] all-reduce(%reduce.1865), channel_id=1722, replica_groups=[1,8]<=[8], use_global_device_ids=true, to_apply=%region_1897.41576.clone
  %convert_element_type.6182 = bf16[] convert(%all-reduce.919)
  %add.5118 = bf16[] add(%add.5116, %convert_element_type.6182)
  %square.676 = bf16[512,8,128]{2,1,0} multiply(%add.3975, %add.3975)
  %convert_element_type.6183 = f32[512,8,128]{2,1,0} convert(%square.676)
  %reduce.1866 = f32[] reduce(%convert_element_type.6183, %constant.1360), dimensions={0,1,2}, to_apply=%region_1898.41585
  %all-reduce.920 = f32[] all-reduce(%reduce.1866), channel_id=1723, replica_groups=[1,8]<=[8], use_global_device_ids=true, to_apply=%region_1898.41585.clone
  %convert_element_type.6184 = bf16[] convert(%all-reduce.920)
  %add.5119 = bf16[] add(%add.5118, %convert_element_type.6184)
  %square.677 = bf16[512,8]{1,0} multiply(%add.3980, %add.3980)
  %convert_element_type.6185 = f32[512,8]{1,0} convert(%square.677)
  %reduce.1867 = f32[] reduce(%convert_element_type.6185, %constant.1360), dimensions={0,1}, to_apply=%region_1899.41594
  %all-reduce.921 = f32[] all-reduce(%reduce.1867), channel_id=1724, replica_groups=[1,8]<=[8], use_global_device_ids=true, to_apply=%region_1899.41594.clone
  %convert_element_type.6186 = bf16[] convert(%all-reduce.921)
  %add.5120 = bf16[] add(%add.5119, %convert_element_type.6186)
  %square.678 = bf16[1,4096,14336]{2,1,0} multiply(%add.3986, %add.3986)
  %convert_element_type.6187 = f32[1,4096,14336]{2,1,0} convert(%square.678)
  %reduce.1868 = f32[] reduce(%convert_element_type.6187, %constant.1360), dimensions={0,1,2}, to_apply=%region_1900.41603
  %all-reduce.922 = f32[] all-reduce(%reduce.1868), channel_id=1725, replica_groups=[1,8]<=[8], use_global_device_ids=true, to_apply=%region_1900.41603.clone
  %convert_element_type.6188 = bf16[] convert(%all-reduce.922)
  %add.5121 = bf16[] add(%add.5120, %convert_element_type.6188)
  %square.679 = bf16[1,4096,14336]{2,1,0} multiply(%add.3991, %add.3991)
  %convert_element_type.6189 = f32[1,4096,14336]{2,1,0} convert(%square.679)
  %reduce.1869 = f32[] reduce(%convert_element_type.6189, %constant.1360), dimensions={0,1,2}, to_apply=%region_1901.41612
  %all-reduce.923 = f32[] all-reduce(%reduce.1869), channel_id=1726, replica_groups=[1,8]<=[8], use_global_device_ids=true, to_apply=%region_1901.41612.clone
  %convert_element_type.6190 = bf16[] convert(%all-reduce.923)
  %add.5122 = bf16[] add(%add.5121, %convert_element_type.6190)
  %square.680 = bf16[1,14336,4096]{2,1,0} multiply(%add.3996, %add.3996)
  %convert_element_type.6191 = f32[1,14336,4096]{2,1,0} convert(%square.680)
  %reduce.1870 = f32[] reduce(%convert_element_type.6191, %constant.1360), dimensions={0,1,2}, to_apply=%region_1902.41621
  %all-reduce.924 = f32[] all-reduce(%reduce.1870), channel_id=1727, replica_groups=[1,8]<=[8], use_global_device_ids=true, to_apply=%region_1902.41621.clone
  %convert_element_type.6192 = bf16[] convert(%all-reduce.924)
  %add.5123 = bf16[] add(%add.5122, %convert_element_type.6192)
  %square.681 = bf16[4096]{0} multiply(%add.4001, %add.4001)
  %convert_element_type.6193 = f32[4096]{0} convert(%square.681)
  %reduce.1871 = f32[] reduce(%convert_element_type.6193, %constant.1360), dimensions={0}, to_apply=%region_1903.41630
  %convert_element_type.6194 = bf16[] convert(%reduce.1871)
  %add.5124 = bf16[] add(%add.5123, %convert_element_type.6194)
  %square.682 = bf16[4096]{0} multiply(%add.4008, %add.4008)
  %convert_element_type.6195 = f32[4096]{0} convert(%square.682)
  %reduce.1872 = f32[] reduce(%convert_element_type.6195, %constant.1360), dimensions={0}, to_apply=%region_1904.41639
  %convert_element_type.6196 = bf16[] convert(%reduce.1872)
  %add.5125 = bf16[] add(%add.5124, %convert_element_type.6196)
  %square.683 = bf16[512,8,128]{2,1,0} multiply(%add.4013, %add.4013)
  %convert_element_type.6198 = f32[512,8,128]{2,1,0} convert(%square.683)
  %reduce.1873 = f32[] reduce(%convert_element_type.6198, %constant.1360), dimensions={0,1,2}, to_apply=%region_1905.41648
  %all-reduce.925 = f32[] all-reduce(%reduce.1873), channel_id=1728, replica_groups=[1,8]<=[8], use_global_device_ids=true, to_apply=%region_1905.41648.clone
  %convert_element_type.6199 = bf16[] convert(%all-reduce.925)
  %add.5126 = bf16[] add(%add.5125, %convert_element_type.6199)
  %square.684 = bf16[32,128,512]{2,1,0} multiply(%add.4019, %add.4019)
  %convert_element_type.6200 = f32[32,128,512]{2,1,0} convert(%square.684)
  %reduce.1874 = f32[] reduce(%convert_element_type.6200, %constant.1360), dimensions={0,1,2}, to_apply=%region_1906.41657
  %all-reduce.926 = f32[] all-reduce(%reduce.1874), channel_id=1729, replica_groups=[1,8]<=[8], use_global_device_ids=true, to_apply=%region_1906.41657.clone
  %convert_element_type.6201 = bf16[] convert(%all-reduce.926)
  %add.5127 = bf16[] add(%add.5126, %convert_element_type.6201)
  %square.685 = bf16[512,32,128]{2,1,0} multiply(%add.4024, %add.4024)
  %convert_element_type.6202 = f32[512,32,128]{2,1,0} convert(%square.685)
  %reduce.1875 = f32[] reduce(%convert_element_type.6202, %constant.1360), dimensions={0,1,2}, to_apply=%region_1907.41666
  %all-reduce.927 = f32[] all-reduce(%reduce.1875), channel_id=1730, replica_groups=[1,8]<=[8], use_global_device_ids=true, to_apply=%region_1907.41666.clone
  %convert_element_type.6203 = bf16[] convert(%all-reduce.927)
  %add.5128 = bf16[] add(%add.5127, %convert_element_type.6203)
  %square.686 = bf16[512,8,128]{2,1,0} multiply(%add.4029, %add.4029)
  %convert_element_type.6204 = f32[512,8,128]{2,1,0} convert(%square.686)
  %reduce.1876 = f32[] reduce(%convert_element_type.6204, %constant.1360), dimensions={0,1,2}, to_apply=%region_1908.41675
  %all-reduce.928 = f32[] all-reduce(%reduce.1876), channel_id=1731, replica_groups=[1,8]<=[8], use_global_device_ids=true, to_apply=%region_1908.41675.clone
  %convert_element_type.6205 = bf16[] convert(%all-reduce.928)
  %add.5129 = bf16[] add(%add.5128, %convert_element_type.6205)
  %square.687 = bf16[512,8]{1,0} multiply(%add.4035, %add.4035)
  %convert_element_type.6206 = f32[512,8]{1,0} convert(%square.687)
  %reduce.1877 = f32[] reduce(%convert_element_type.6206, %constant.1360), dimensions={0,1}, to_apply=%region_1909.41684
  %all-reduce.929 = f32[] all-reduce(%reduce.1877), channel_id=1732, replica_groups=[1,8]<=[8], use_global_device_ids=true, to_apply=%region_1909.41684.clone
  %convert_element_type.6207 = bf16[] convert(%all-reduce.929)
  %add.5130 = bf16[] add(%add.5129, %convert_element_type.6207)
  %square.688 = bf16[1,4096,14336]{2,1,0} multiply(%add.4040, %add.4040)
  %convert_element_type.6209 = f32[1,4096,14336]{2,1,0} convert(%square.688)
  %reduce.1878 = f32[] reduce(%convert_element_type.6209, %constant.1360), dimensions={0,1,2}, to_apply=%region_1910.41693
  %all-reduce.930 = f32[] all-reduce(%reduce.1878), channel_id=1733, replica_groups=[1,8]<=[8], use_global_device_ids=true, to_apply=%region_1910.41693.clone
  %convert_element_type.6211 = bf16[] convert(%all-reduce.930)
  %add.5131 = bf16[] add(%add.5130, %convert_element_type.6211)
  %square.689 = bf16[1,4096,14336]{2,1,0} multiply(%add.4045, %add.4045)
  %convert_element_type.6212 = f32[1,4096,14336]{2,1,0} convert(%square.689)
  %reduce.1879 = f32[] reduce(%convert_element_type.6212, %constant.1360), dimensions={0,1,2}, to_apply=%region_1911.41702
  %all-reduce.931 = f32[] all-reduce(%reduce.1879), channel_id=1734, replica_groups=[1,8]<=[8], use_global_device_ids=true, to_apply=%region_1911.41702.clone
  %convert_element_type.6213 = bf16[] convert(%all-reduce.931)
  %add.5132 = bf16[] add(%add.5131, %convert_element_type.6213)
  %square.690 = bf16[1,14336,4096]{2,1,0} multiply(%add.4050, %add.4050)
  %convert_element_type.6214 = f32[1,14336,4096]{2,1,0} convert(%square.690)
  %reduce.1880 = f32[] reduce(%convert_element_type.6214, %constant.1360), dimensions={0,1,2}, to_apply=%region_1912.41711
  %all-reduce.932 = f32[] all-reduce(%reduce.1880), channel_id=1735, replica_groups=[1,8]<=[8], use_global_device_ids=true, to_apply=%region_1912.41711.clone
  %convert_element_type.6215 = bf16[] convert(%all-reduce.932)
  %add.5133 = bf16[] add(%add.5132, %convert_element_type.6215)
  %square.691 = bf16[4096]{0} multiply(%add.4056, %add.4056)
  %convert_element_type.6216 = f32[4096]{0} convert(%square.691)
  %reduce.1881 = f32[] reduce(%convert_element_type.6216, %constant.1360), dimensions={0}, to_apply=%region_1913.41720
  %convert_element_type.6217 = bf16[] convert(%reduce.1881)
  %add.5134 = bf16[] add(%add.5133, %convert_element_type.6217)
  %square.692 = bf16[4096]{0} multiply(%add.4061, %add.4061)
  %convert_element_type.6219 = f32[4096]{0} convert(%square.692)
  %reduce.1882 = f32[] reduce(%convert_element_type.6219, %constant.1360), dimensions={0}, to_apply=%region_1914.41729
  %convert_element_type.6220 = bf16[] convert(%reduce.1882)
  %add.5135 = bf16[] add(%add.5134, %convert_element_type.6220)
  %square.693 = bf16[512,8,128]{2,1,0} multiply(%add.4066, %add.4066)
  %convert_element_type.6221 = f32[512,8,128]{2,1,0} convert(%square.693)
  %reduce.1883 = f32[] reduce(%convert_element_type.6221, %constant.1360), dimensions={0,1,2}, to_apply=%region_1915.41738
  %all-reduce.933 = f32[] all-reduce(%reduce.1883), channel_id=1736, replica_groups=[1,8]<=[8], use_global_device_ids=true, to_apply=%region_1915.41738.clone
  %convert_element_type.6222 = bf16[] convert(%all-reduce.933)
  %add.5136 = bf16[] add(%add.5135, %convert_element_type.6222)
  %square.694 = bf16[32,128,512]{2,1,0} multiply(%add.4071, %add.4071)
  %convert_element_type.6223 = f32[32,128,512]{2,1,0} convert(%square.694)
  %reduce.1884 = f32[] reduce(%convert_element_type.6223, %constant.1360), dimensions={0,1,2}, to_apply=%region_1916.41747
  %all-reduce.934 = f32[] all-reduce(%reduce.1884), channel_id=1737, replica_groups=[1,8]<=[8], use_global_device_ids=true, to_apply=%region_1916.41747.clone
  %convert_element_type.6224 = bf16[] convert(%all-reduce.934)
  %add.5137 = bf16[] add(%add.5136, %convert_element_type.6224)
  %square.695 = bf16[512,32,128]{2,1,0} multiply(%add.4076, %add.4076)
  %convert_element_type.6226 = f32[512,32,128]{2,1,0} convert(%square.695)
  %reduce.1885 = f32[] reduce(%convert_element_type.6226, %constant.1360), dimensions={0,1,2}, to_apply=%region_1917.41756
  %all-reduce.935 = f32[] all-reduce(%reduce.1885), channel_id=1738, replica_groups=[1,8]<=[8], use_global_device_ids=true, to_apply=%region_1917.41756.clone
  %convert_element_type.6227 = bf16[] convert(%all-reduce.935)
  %add.5138 = bf16[] add(%add.5137, %convert_element_type.6227)
  %square.696 = bf16[512,8,128]{2,1,0} multiply(%add.4081, %add.4081)
  %convert_element_type.6228 = f32[512,8,128]{2,1,0} convert(%square.696)
  %reduce.1886 = f32[] reduce(%convert_element_type.6228, %constant.1360), dimensions={0,1,2}, to_apply=%region_1918.41765
  %all-reduce.936 = f32[] all-reduce(%reduce.1886), channel_id=1739, replica_groups=[1,8]<=[8], use_global_device_ids=true, to_apply=%region_1918.41765.clone
  %convert_element_type.6229 = bf16[] convert(%all-reduce.936)
  %add.5139 = bf16[] add(%add.5138, %convert_element_type.6229)
  %square.697 = bf16[512,8]{1,0} multiply(%add.4086, %add.4086)
  %convert_element_type.6230 = f32[512,8]{1,0} convert(%square.697)
  %reduce.1887 = f32[] reduce(%convert_element_type.6230, %constant.1360), dimensions={0,1}, to_apply=%region_1919.41774
  %all-reduce.937 = f32[] all-reduce(%reduce.1887), channel_id=1740, replica_groups=[1,8]<=[8], use_global_device_ids=true, to_apply=%region_1919.41774.clone
  %convert_element_type.6231 = bf16[] convert(%all-reduce.937)
  %add.5140 = bf16[] add(%add.5139, %convert_element_type.6231)
  %square.698 = bf16[1,4096,14336]{2,1,0} multiply(%add.4092, %add.4092)
  %convert_element_type.6232 = f32[1,4096,14336]{2,1,0} convert(%square.698)
  %reduce.1888 = f32[] reduce(%convert_element_type.6232, %constant.1360), dimensions={0,1,2}, to_apply=%region_1920.41783
  %all-reduce.938 = f32[] all-reduce(%reduce.1888), channel_id=1741, replica_groups=[1,8]<=[8], use_global_device_ids=true, to_apply=%region_1920.41783.clone
  %convert_element_type.6233 = bf16[] convert(%all-reduce.938)
  %add.5141 = bf16[] add(%add.5140, %convert_element_type.6233)
  %square.699 = bf16[1,4096,14336]{2,1,0} multiply(%add.4097, %add.4097)
  %convert_element_type.6234 = f32[1,4096,14336]{2,1,0} convert(%square.699)
  %reduce.1889 = f32[] reduce(%convert_element_type.6234, %constant.1360), dimensions={0,1,2}, to_apply=%region_1921.41792
  %all-reduce.939 = f32[] all-reduce(%reduce.1889), channel_id=1742, replica_groups=[1,8]<=[8], use_global_device_ids=true, to_apply=%region_1921.41792.clone
  %convert_element_type.6235 = bf16[] convert(%all-reduce.939)
  %add.5142 = bf16[] add(%add.5141, %convert_element_type.6235)
  %square.700 = bf16[1,14336,4096]{2,1,0} multiply(%add.4103, %add.4103)
  %convert_element_type.6236 = f32[1,14336,4096]{2,1,0} convert(%square.700)
  %reduce.1890 = f32[] reduce(%convert_element_type.6236, %constant.1360), dimensions={0,1,2}, to_apply=%region_1922.41801
  %all-reduce.940 = f32[] all-reduce(%reduce.1890), channel_id=1743, replica_groups=[1,8]<=[8], use_global_device_ids=true, to_apply=%region_1922.41801.clone
  %convert_element_type.6238 = bf16[] convert(%all-reduce.940)
  %add.5143 = bf16[] add(%add.5142, %convert_element_type.6238)
  %square.701 = bf16[4096]{0} multiply(%add.4109, %add.4109)
  %convert_element_type.6241 = f32[4096]{0} convert(%square.701)
  %reduce.1891 = f32[] reduce(%convert_element_type.6241, %constant.1360), dimensions={0}, to_apply=%region_1923.41810
  %convert_element_type.6242 = bf16[] convert(%reduce.1891)
  %add.5144 = bf16[] add(%add.5143, %convert_element_type.6242)
  %square.702 = bf16[4096]{0} multiply(%add.4115, %add.4115)
  %convert_element_type.6243 = f32[4096]{0} convert(%square.702)
  %reduce.1892 = f32[] reduce(%convert_element_type.6243, %constant.1360), dimensions={0}, to_apply=%region_1924.41819
  %convert_element_type.6245 = bf16[] convert(%reduce.1892)
  %add.5145 = bf16[] add(%add.5144, %convert_element_type.6245)
  %square.703 = bf16[512,8,128]{2,1,0} multiply(%add.4121, %add.4121)
  %convert_element_type.6246 = f32[512,8,128]{2,1,0} convert(%square.703)
  %reduce.1893 = f32[] reduce(%convert_element_type.6246, %constant.1360), dimensions={0,1,2}, to_apply=%region_1925.41828
  %all-reduce.941 = f32[] all-reduce(%reduce.1893), channel_id=1744, replica_groups=[1,8]<=[8], use_global_device_ids=true, to_apply=%region_1925.41828.clone
  %convert_element_type.6247 = bf16[] convert(%all-reduce.941)
  %add.5146 = bf16[] add(%add.5145, %convert_element_type.6247)
  %square.704 = bf16[32,128,512]{2,1,0} multiply(%add.4126, %add.4126)
  %convert_element_type.6248 = f32[32,128,512]{2,1,0} convert(%square.704)
  %reduce.1894 = f32[] reduce(%convert_element_type.6248, %constant.1360), dimensions={0,1,2}, to_apply=%region_1926.41837
  %all-reduce.942 = f32[] all-reduce(%reduce.1894), channel_id=1745, replica_groups=[1,8]<=[8], use_global_device_ids=true, to_apply=%region_1926.41837.clone
  %convert_element_type.6249 = bf16[] convert(%all-reduce.942)
  %add.5147 = bf16[] add(%add.5146, %convert_element_type.6249)
  %square.705 = bf16[512,32,128]{2,1,0} multiply(%add.4131, %add.4131)
  %convert_element_type.6250 = f32[512,32,128]{2,1,0} convert(%square.705)
  %reduce.1895 = f32[] reduce(%convert_element_type.6250, %constant.1360), dimensions={0,1,2}, to_apply=%region_1927.41846
  %all-reduce.943 = f32[] all-reduce(%reduce.1895), channel_id=1746, replica_groups=[1,8]<=[8], use_global_device_ids=true, to_apply=%region_1927.41846.clone
  %convert_element_type.6251 = bf16[] convert(%all-reduce.943)
  %add.5148 = bf16[] add(%add.5147, %convert_element_type.6251)
  %square.706 = bf16[512,8,128]{2,1,0} multiply(%add.4136, %add.4136)
  %convert_element_type.6253 = f32[512,8,128]{2,1,0} convert(%square.706)
  %reduce.1896 = f32[] reduce(%convert_element_type.6253, %constant.1360), dimensions={0,1,2}, to_apply=%region_1928.41855
  %all-reduce.944 = f32[] all-reduce(%reduce.1896), channel_id=1747, replica_groups=[1,8]<=[8], use_global_device_ids=true, to_apply=%region_1928.41855.clone
  %convert_element_type.6254 = bf16[] convert(%all-reduce.944)
  %add.5149 = bf16[] add(%add.5148, %convert_element_type.6254)
  %square.707 = bf16[512,8]{1,0} multiply(%add.4141, %add.4141)
  %convert_element_type.6255 = f32[512,8]{1,0} convert(%square.707)
  %reduce.1897 = f32[] reduce(%convert_element_type.6255, %constant.1360), dimensions={0,1}, to_apply=%region_1929.41864
  %all-reduce.945 = f32[] all-reduce(%reduce.1897), channel_id=1748, replica_groups=[1,8]<=[8], use_global_device_ids=true, to_apply=%region_1929.41864.clone
  %convert_element_type.6256 = bf16[] convert(%all-reduce.945)
  %add.5150 = bf16[] add(%add.5149, %convert_element_type.6256)
  %square.708 = bf16[1,4096,14336]{2,1,0} multiply(%add.4146, %add.4146)
  %convert_element_type.6257 = f32[1,4096,14336]{2,1,0} convert(%square.708)
  %reduce.1898 = f32[] reduce(%convert_element_type.6257, %constant.1360), dimensions={0,1,2}, to_apply=%region_1930.41873
  %all-reduce.946 = f32[] all-reduce(%reduce.1898), channel_id=1749, replica_groups=[1,8]<=[8], use_global_device_ids=true, to_apply=%region_1930.41873.clone
  %convert_element_type.6258 = bf16[] convert(%all-reduce.946)
  %add.5151 = bf16[] add(%add.5150, %convert_element_type.6258)
  %square.709 = bf16[1,4096,14336]{2,1,0} multiply(%add.4152, %add.4152)
  %convert_element_type.6259 = f32[1,4096,14336]{2,1,0} convert(%square.709)
  %reduce.1899 = f32[] reduce(%convert_element_type.6259, %constant.1360), dimensions={0,1,2}, to_apply=%region_1931.41882
  %all-reduce.947 = f32[] all-reduce(%reduce.1899), channel_id=1750, replica_groups=[1,8]<=[8], use_global_device_ids=true, to_apply=%region_1931.41882.clone
  %convert_element_type.6260 = bf16[] convert(%all-reduce.947)
  %add.5152 = bf16[] add(%add.5151, %convert_element_type.6260)
  %square.710 = bf16[1,14336,4096]{2,1,0} multiply(%add.4157, %add.4157)
  %convert_element_type.6261 = f32[1,14336,4096]{2,1,0} convert(%square.710)
  %reduce.1900 = f32[] reduce(%convert_element_type.6261, %constant.1360), dimensions={0,1,2}, to_apply=%region_1932.41891
  %all-reduce.948 = f32[] all-reduce(%reduce.1900), channel_id=1751, replica_groups=[1,8]<=[8], use_global_device_ids=true, to_apply=%region_1932.41891.clone
  %convert_element_type.6262 = bf16[] convert(%all-reduce.948)
  %add.5153 = bf16[] add(%add.5152, %convert_element_type.6262)
  %square.711 = bf16[4096]{0} multiply(%add.4162, %add.4162)
  %convert_element_type.6263 = f32[4096]{0} convert(%square.711)
  %reduce.1901 = f32[] reduce(%convert_element_type.6263, %constant.1360), dimensions={0}, to_apply=%region_1933.41900
  %convert_element_type.6265 = bf16[] convert(%reduce.1901)
  %add.5154 = bf16[] add(%add.5153, %convert_element_type.6265)
  %square.712 = bf16[4096]{0} multiply(%add.4169, %add.4169)
  %convert_element_type.6266 = f32[4096]{0} convert(%square.712)
  %reduce.1902 = f32[] reduce(%convert_element_type.6266, %constant.1360), dimensions={0}, to_apply=%region_1934.41909
  %convert_element_type.6267 = bf16[] convert(%reduce.1902)
  %add.5155 = bf16[] add(%add.5154, %convert_element_type.6267)
  %square.713 = bf16[512,8,128]{2,1,0} multiply(%add.4175, %add.4175)
  %convert_element_type.6268 = f32[512,8,128]{2,1,0} convert(%square.713)
  %reduce.1903 = f32[] reduce(%convert_element_type.6268, %constant.1360), dimensions={0,1,2}, to_apply=%region_1935.41918
  %all-reduce.949 = f32[] all-reduce(%reduce.1903), channel_id=1752, replica_groups=[1,8]<=[8], use_global_device_ids=true, to_apply=%region_1935.41918.clone
  %convert_element_type.6269 = bf16[] convert(%all-reduce.949)
  %add.5156 = bf16[] add(%add.5155, %convert_element_type.6269)
  %square.714 = bf16[32,128,512]{2,1,0} multiply(%add.4180, %add.4180)
  %convert_element_type.6271 = f32[32,128,512]{2,1,0} convert(%square.714)
  %reduce.1904 = f32[] reduce(%convert_element_type.6271, %constant.1360), dimensions={0,1,2}, to_apply=%region_1936.41927
  %all-reduce.950 = f32[] all-reduce(%reduce.1904), channel_id=1753, replica_groups=[1,8]<=[8], use_global_device_ids=true, to_apply=%region_1936.41927.clone
  %convert_element_type.6272 = bf16[] convert(%all-reduce.950)
  %add.5157 = bf16[] add(%add.5156, %convert_element_type.6272)
  %square.715 = bf16[512,32,128]{2,1,0} multiply(%add.4187, %add.4187)
  %convert_element_type.6273 = f32[512,32,128]{2,1,0} convert(%square.715)
  %reduce.1905 = f32[] reduce(%convert_element_type.6273, %constant.1360), dimensions={0,1,2}, to_apply=%region_1937.41936
  %all-reduce.951 = f32[] all-reduce(%reduce.1905), channel_id=1754, replica_groups=[1,8]<=[8], use_global_device_ids=true, to_apply=%region_1937.41936.clone
  %convert_element_type.6274 = bf16[] convert(%all-reduce.951)
  %add.5158 = bf16[] add(%add.5157, %convert_element_type.6274)
  %square.716 = bf16[512,8,128]{2,1,0} multiply(%add.4192, %add.4192)
  %convert_element_type.6275 = f32[512,8,128]{2,1,0} convert(%square.716)
  %reduce.1906 = f32[] reduce(%convert_element_type.6275, %constant.1360), dimensions={0,1,2}, to_apply=%region_1938.41945
  %all-reduce.952 = f32[] all-reduce(%reduce.1906), channel_id=1755, replica_groups=[1,8]<=[8], use_global_device_ids=true, to_apply=%region_1938.41945.clone
  %convert_element_type.6276 = bf16[] convert(%all-reduce.952)
  %add.5159 = bf16[] add(%add.5158, %convert_element_type.6276)
  %square.717 = bf16[512,8]{1,0} multiply(%add.4198, %add.4198)
  %convert_element_type.6277 = f32[512,8]{1,0} convert(%square.717)
  %reduce.1907 = f32[] reduce(%convert_element_type.6277, %constant.1360), dimensions={0,1}, to_apply=%region_1939.41954
  %all-reduce.953 = f32[] all-reduce(%reduce.1907), channel_id=1756, replica_groups=[1,8]<=[8], use_global_device_ids=true, to_apply=%region_1939.41954.clone
  %convert_element_type.6278 = bf16[] convert(%all-reduce.953)
  %add.5160 = bf16[] add(%add.5159, %convert_element_type.6278)
  %square.718 = bf16[1,4096,14336]{2,1,0} multiply(%add.4203, %add.4203)
  %convert_element_type.6279 = f32[1,4096,14336]{2,1,0} convert(%square.718)
  %reduce.1908 = f32[] reduce(%convert_element_type.6279, %constant.1360), dimensions={0,1,2}, to_apply=%region_1940.41963
  %all-reduce.954 = f32[] all-reduce(%reduce.1908), channel_id=1757, replica_groups=[1,8]<=[8], use_global_device_ids=true, to_apply=%region_1940.41963.clone
  %convert_element_type.6280 = bf16[] convert(%all-reduce.954)
  %add.5161 = bf16[] add(%add.5160, %convert_element_type.6280)
  %square.719 = bf16[1,4096,14336]{2,1,0} multiply(%add.4208, %add.4208)
  %convert_element_type.6281 = f32[1,4096,14336]{2,1,0} convert(%square.719)
  %reduce.1909 = f32[] reduce(%convert_element_type.6281, %constant.1360), dimensions={0,1,2}, to_apply=%region_1941.41972
  %all-reduce.955 = f32[] all-reduce(%reduce.1909), channel_id=1758, replica_groups=[1,8]<=[8], use_global_device_ids=true, to_apply=%region_1941.41972.clone
  %convert_element_type.6283 = bf16[] convert(%all-reduce.955)
  %add.5163 = bf16[] add(%add.5161, %convert_element_type.6283)
  %square.720 = bf16[1,14336,4096]{2,1,0} multiply(%add.4213, %add.4213)
  %convert_element_type.6284 = f32[1,14336,4096]{2,1,0} convert(%square.720)
  %reduce.1910 = f32[] reduce(%convert_element_type.6284, %constant.1360), dimensions={0,1,2}, to_apply=%region_1942.41981
  %all-reduce.956 = f32[] all-reduce(%reduce.1910), channel_id=1759, replica_groups=[1,8]<=[8], use_global_device_ids=true, to_apply=%region_1942.41981.clone
  %convert_element_type.6285 = bf16[] convert(%all-reduce.956)
  %add.5164 = bf16[] add(%add.5163, %convert_element_type.6285)
  %square.721 = bf16[4096]{0} multiply(%add.4218, %add.4218)
  %convert_element_type.6286 = f32[4096]{0} convert(%square.721)
  %reduce.1911 = f32[] reduce(%convert_element_type.6286, %constant.1360), dimensions={0}, to_apply=%region_1943.41990
  %convert_element_type.6288 = bf16[] convert(%reduce.1911)
  %add.5165 = bf16[] add(%add.5164, %convert_element_type.6288)
  %square.722 = bf16[4096]{0} multiply(%add.4223, %add.4223)
  %convert_element_type.6290 = f32[4096]{0} convert(%square.722)
  %reduce.1912 = f32[] reduce(%convert_element_type.6290, %constant.1360), dimensions={0}, to_apply=%region_1944.41999
  %convert_element_type.6291 = bf16[] convert(%reduce.1912)
  %add.5166 = bf16[] add(%add.5165, %convert_element_type.6291)
  %square.723 = bf16[512,8,128]{2,1,0} multiply(%add.4229, %add.4229)
  %convert_element_type.6292 = f32[512,8,128]{2,1,0} convert(%square.723)
  %reduce.1913 = f32[] reduce(%convert_element_type.6292, %constant.1360), dimensions={0,1,2}, to_apply=%region_1945.42008
  %all-reduce.957 = f32[] all-reduce(%reduce.1913), channel_id=1760, replica_groups=[1,8]<=[8], use_global_device_ids=true, to_apply=%region_1945.42008.clone
  %convert_element_type.6294 = bf16[] convert(%all-reduce.957)
  %add.5167 = bf16[] add(%add.5166, %convert_element_type.6294)
  %square.724 = bf16[32,128,512]{2,1,0} multiply(%add.4235, %add.4235)
  %convert_element_type.6295 = f32[32,128,512]{2,1,0} convert(%square.724)
  %reduce.1914 = f32[] reduce(%convert_element_type.6295, %constant.1360), dimensions={0,1,2}, to_apply=%region_1946.42017
  %all-reduce.958 = f32[] all-reduce(%reduce.1914), channel_id=1761, replica_groups=[1,8]<=[8], use_global_device_ids=true, to_apply=%region_1946.42017.clone
  %convert_element_type.6296 = bf16[] convert(%all-reduce.958)
  %add.5168 = bf16[] add(%add.5167, %convert_element_type.6296)
  %square.725 = bf16[512,32,128]{2,1,0} multiply(%add.4240, %add.4240)
  %convert_element_type.6297 = f32[512,32,128]{2,1,0} convert(%square.725)
  %reduce.1915 = f32[] reduce(%convert_element_type.6297, %constant.1360), dimensions={0,1,2}, to_apply=%region_1947.42026
  %all-reduce.959 = f32[] all-reduce(%reduce.1915), channel_id=1762, replica_groups=[1,8]<=[8], use_global_device_ids=true, to_apply=%region_1947.42026.clone
  %convert_element_type.6298 = bf16[] convert(%all-reduce.959)
  %add.5169 = bf16[] add(%add.5168, %convert_element_type.6298)
  %square.726 = bf16[512,8,128]{2,1,0} multiply(%add.4245, %add.4245)
  %convert_element_type.6300 = f32[512,8,128]{2,1,0} convert(%square.726)
  %reduce.1916 = f32[] reduce(%convert_element_type.6300, %constant.1360), dimensions={0,1,2}, to_apply=%region_1948.42035
  %all-reduce.960 = f32[] all-reduce(%reduce.1916), channel_id=1763, replica_groups=[1,8]<=[8], use_global_device_ids=true, to_apply=%region_1948.42035.clone
  %convert_element_type.6301 = bf16[] convert(%all-reduce.960)
  %add.5170 = bf16[] add(%add.5169, %convert_element_type.6301)
  %square.727 = bf16[512,8]{1,0} multiply(%add.4251, %add.4251)
  %convert_element_type.6302 = f32[512,8]{1,0} convert(%square.727)
  %reduce.1917 = f32[] reduce(%convert_element_type.6302, %constant.1360), dimensions={0,1}, to_apply=%region_1949.42044
  %all-reduce.961 = f32[] all-reduce(%reduce.1917), channel_id=1764, replica_groups=[1,8]<=[8], use_global_device_ids=true, to_apply=%region_1949.42044.clone
  %convert_element_type.6303 = bf16[] convert(%all-reduce.961)
  %add.5172 = bf16[] add(%add.5170, %convert_element_type.6303)
  %square.728 = bf16[1,4096,14336]{2,1,0} multiply(%add.4257, %add.4257)
  %convert_element_type.6304 = f32[1,4096,14336]{2,1,0} convert(%square.728)
  %reduce.1918 = f32[] reduce(%convert_element_type.6304, %constant.1360), dimensions={0,1,2}, to_apply=%region_1950.42053
  %all-reduce.962 = f32[] all-reduce(%reduce.1918), channel_id=1765, replica_groups=[1,8]<=[8], use_global_device_ids=true, to_apply=%region_1950.42053.clone
  %convert_element_type.6306 = bf16[] convert(%all-reduce.962)
  %add.5173 = bf16[] add(%add.5172, %convert_element_type.6306)
  %square.729 = bf16[1,4096,14336]{2,1,0} multiply(%add.4263, %add.4263)
  %convert_element_type.6307 = f32[1,4096,14336]{2,1,0} convert(%square.729)
  %reduce.1919 = f32[] reduce(%convert_element_type.6307, %constant.1360), dimensions={0,1,2}, to_apply=%region_1951.42062
  %all-reduce.963 = f32[] all-reduce(%reduce.1919), channel_id=1766, replica_groups=[1,8]<=[8], use_global_device_ids=true, to_apply=%region_1951.42062.clone
  %convert_element_type.6308 = bf16[] convert(%all-reduce.963)
  %add.5175 = bf16[] add(%add.5173, %convert_element_type.6308)
  %square.730 = bf16[1,14336,4096]{2,1,0} multiply(%add.4268, %add.4268)
  %convert_element_type.6309 = f32[1,14336,4096]{2,1,0} convert(%square.730)
  %reduce.1920 = f32[] reduce(%convert_element_type.6309, %constant.1360), dimensions={0,1,2}, to_apply=%region_1952.42071
  %all-reduce.964 = f32[] all-reduce(%reduce.1920), channel_id=1767, replica_groups=[1,8]<=[8], use_global_device_ids=true, to_apply=%region_1952.42071.clone
  %convert_element_type.6310 = bf16[] convert(%all-reduce.964)
  %add.5176 = bf16[] add(%add.5175, %convert_element_type.6310)
  %square.731 = bf16[4096]{0} multiply(%add.4273, %add.4273)
  %convert_element_type.6311 = f32[4096]{0} convert(%square.731)
  %reduce.1921 = f32[] reduce(%convert_element_type.6311, %constant.1360), dimensions={0}, to_apply=%region_1953.42080
  %convert_element_type.6312 = bf16[] convert(%reduce.1921)
  %add.5177 = bf16[] add(%add.5176, %convert_element_type.6312)
  %square.732 = bf16[4096]{0} multiply(%add.4280, %add.4280)
  %convert_element_type.6313 = f32[4096]{0} convert(%square.732)
  %reduce.1922 = f32[] reduce(%convert_element_type.6313, %constant.1360), dimensions={0}, to_apply=%region_1954.42089
  %convert_element_type.6314 = bf16[] convert(%reduce.1922)
  %add.5178 = bf16[] add(%add.5177, %convert_element_type.6314)
  %square.733 = bf16[512,8,128]{2,1,0} multiply(%add.4285, %add.4285)
  %convert_element_type.6315 = f32[512,8,128]{2,1,0} convert(%square.733)
  %reduce.1923 = f32[] reduce(%convert_element_type.6315, %constant.1360), dimensions={0,1,2}, to_apply=%region_1955.42098
  %all-reduce.965 = f32[] all-reduce(%reduce.1923), channel_id=1768, replica_groups=[1,8]<=[8], use_global_device_ids=true, to_apply=%region_1955.42098.clone
  %convert_element_type.6316 = bf16[] convert(%all-reduce.965)
  %add.5179 = bf16[] add(%add.5178, %convert_element_type.6316)
  %square.734 = bf16[32,128,512]{2,1,0} multiply(%add.4290, %add.4290)
  %convert_element_type.6317 = f32[32,128,512]{2,1,0} convert(%square.734)
  %reduce.1924 = f32[] reduce(%convert_element_type.6317, %constant.1360), dimensions={0,1,2}, to_apply=%region_1956.42107
  %all-reduce.966 = f32[] all-reduce(%reduce.1924), channel_id=1769, replica_groups=[1,8]<=[8], use_global_device_ids=true, to_apply=%region_1956.42107.clone
  %convert_element_type.6318 = bf16[] convert(%all-reduce.966)
  %add.5180 = bf16[] add(%add.5179, %convert_element_type.6318)
  %square.735 = bf16[512,32,128]{2,1,0} multiply(%add.4295, %add.4295)
  %convert_element_type.6319 = f32[512,32,128]{2,1,0} convert(%square.735)
  %reduce.1925 = f32[] reduce(%convert_element_type.6319, %constant.1360), dimensions={0,1,2}, to_apply=%region_1957.42116
  %all-reduce.967 = f32[] all-reduce(%reduce.1925), channel_id=1770, replica_groups=[1,8]<=[8], use_global_device_ids=true, to_apply=%region_1957.42116.clone
  %convert_element_type.6320 = bf16[] convert(%all-reduce.967)
  %add.5181 = bf16[] add(%add.5180, %convert_element_type.6320)
  %square.736 = bf16[512,8,128]{2,1,0} multiply(%add.4300, %add.4300)
  %convert_element_type.6321 = f32[512,8,128]{2,1,0} convert(%square.736)
  %reduce.1926 = f32[] reduce(%convert_element_type.6321, %constant.1360), dimensions={0,1,2}, to_apply=%region_1958.42125
  %all-reduce.968 = f32[] all-reduce(%reduce.1926), channel_id=1771, replica_groups=[1,8]<=[8], use_global_device_ids=true, to_apply=%region_1958.42125.clone
  %convert_element_type.6323 = bf16[] convert(%all-reduce.968)
  %add.5182 = bf16[] add(%add.5181, %convert_element_type.6323)
  %square.737 = bf16[512,8]{1,0} multiply(%add.4306, %add.4306)
  %convert_element_type.6324 = f32[512,8]{1,0} convert(%square.737)
  %reduce.1927 = f32[] reduce(%convert_element_type.6324, %constant.1360), dimensions={0,1}, to_apply=%region_1959.42134
  %all-reduce.969 = f32[] all-reduce(%reduce.1927), channel_id=1772, replica_groups=[1,8]<=[8], use_global_device_ids=true, to_apply=%region_1959.42134.clone
  %convert_element_type.6325 = bf16[] convert(%all-reduce.969)
  %add.5184 = bf16[] add(%add.5182, %convert_element_type.6325)
  %square.738 = bf16[1,4096,14336]{2,1,0} multiply(%add.4311, %add.4311)
  %convert_element_type.6327 = f32[1,4096,14336]{2,1,0} convert(%square.738)
  %reduce.1928 = f32[] reduce(%convert_element_type.6327, %constant.1360), dimensions={0,1,2}, to_apply=%region_1960.42143
  %all-reduce.970 = f32[] all-reduce(%reduce.1928), channel_id=1773, replica_groups=[1,8]<=[8], use_global_device_ids=true, to_apply=%region_1960.42143.clone
  %convert_element_type.6328 = bf16[] convert(%all-reduce.970)
  %add.5185 = bf16[] add(%add.5184, %convert_element_type.6328)
  %square.739 = bf16[1,4096,14336]{2,1,0} multiply(%add.4316, %add.4316)
  %convert_element_type.6329 = f32[1,4096,14336]{2,1,0} convert(%square.739)
  %reduce.1929 = f32[] reduce(%convert_element_type.6329, %constant.1360), dimensions={0,1,2}, to_apply=%region_1961.42152
  %all-reduce.971 = f32[] all-reduce(%reduce.1929), channel_id=1774, replica_groups=[1,8]<=[8], use_global_device_ids=true, to_apply=%region_1961.42152.clone
  %convert_element_type.6330 = bf16[] convert(%all-reduce.971)
  %add.5186 = bf16[] add(%add.5185, %convert_element_type.6330)
  %square.740 = bf16[1,14336,4096]{2,1,0} multiply(%add.4322, %add.4322)
  %convert_element_type.6331 = f32[1,14336,4096]{2,1,0} convert(%square.740)
  %reduce.1930 = f32[] reduce(%convert_element_type.6331, %constant.1360), dimensions={0,1,2}, to_apply=%region_1962.42161
  %all-reduce.972 = f32[] all-reduce(%reduce.1930), channel_id=1775, replica_groups=[1,8]<=[8], use_global_device_ids=true, to_apply=%region_1962.42161.clone
  %convert_element_type.6334 = bf16[] convert(%all-reduce.972)
  %add.5187 = bf16[] add(%add.5186, %convert_element_type.6334)
  %square.741 = bf16[4096]{0} multiply(%add.4327, %add.4327)
  %convert_element_type.6335 = f32[4096]{0} convert(%square.741)
  %reduce.1931 = f32[] reduce(%convert_element_type.6335, %constant.1360), dimensions={0}, to_apply=%region_1963.42170
  %convert_element_type.6336 = bf16[] convert(%reduce.1931)
  %add.5188 = bf16[] add(%add.5187, %convert_element_type.6336)
  %square.742 = bf16[4096]{0} multiply(%add.4332, %add.4332)
  %convert_element_type.6337 = f32[4096]{0} convert(%square.742)
  %reduce.1932 = f32[] reduce(%convert_element_type.6337, %constant.1360), dimensions={0}, to_apply=%region_1964.42179
  %convert_element_type.6339 = bf16[] convert(%reduce.1932)
  %add.5189 = bf16[] add(%add.5188, %convert_element_type.6339)
  %square.743 = bf16[512,8,128]{2,1,0} multiply(%add.4337, %add.4337)
  %convert_element_type.6341 = f32[512,8,128]{2,1,0} convert(%square.743)
  %reduce.1933 = f32[] reduce(%convert_element_type.6341, %constant.1360), dimensions={0,1,2}, to_apply=%region_1965.42188
  %all-reduce.973 = f32[] all-reduce(%reduce.1933), channel_id=1776, replica_groups=[1,8]<=[8], use_global_device_ids=true, to_apply=%region_1965.42188.clone
  %convert_element_type.6342 = bf16[] convert(%all-reduce.973)
  %add.5190 = bf16[] add(%add.5189, %convert_element_type.6342)
  %square.744 = bf16[32,128,512]{2,1,0} multiply(%add.4342, %add.4342)
  %convert_element_type.6343 = f32[32,128,512]{2,1,0} convert(%square.744)
  %reduce.1934 = f32[] reduce(%convert_element_type.6343, %constant.1360), dimensions={0,1,2}, to_apply=%region_1966.42197
  %all-reduce.974 = f32[] all-reduce(%reduce.1934), channel_id=1777, replica_groups=[1,8]<=[8], use_global_device_ids=true, to_apply=%region_1966.42197.clone
  %convert_element_type.6344 = bf16[] convert(%all-reduce.974)
  %add.5191 = bf16[] add(%add.5190, %convert_element_type.6344)
  %square.745 = bf16[512,32,128]{2,1,0} multiply(%add.4347, %add.4347)
  %convert_element_type.6345 = f32[512,32,128]{2,1,0} convert(%square.745)
  %reduce.1935 = f32[] reduce(%convert_element_type.6345, %constant.1360), dimensions={0,1,2}, to_apply=%region_1967.42206
  %all-reduce.975 = f32[] all-reduce(%reduce.1935), channel_id=1778, replica_groups=[1,8]<=[8], use_global_device_ids=true, to_apply=%region_1967.42206.clone
  %convert_element_type.6346 = bf16[] convert(%all-reduce.975)
  %add.5192 = bf16[] add(%add.5191, %convert_element_type.6346)
  %square.746 = bf16[512,8,128]{2,1,0} multiply(%add.4352, %add.4352)
  %convert_element_type.6347 = f32[512,8,128]{2,1,0} convert(%square.746)
  %reduce.1936 = f32[] reduce(%convert_element_type.6347, %constant.1360), dimensions={0,1,2}, to_apply=%region_1968.42215
  %all-reduce.976 = f32[] all-reduce(%reduce.1936), channel_id=1779, replica_groups=[1,8]<=[8], use_global_device_ids=true, to_apply=%region_1968.42215.clone
  %convert_element_type.6348 = bf16[] convert(%all-reduce.976)
  %add.5193 = bf16[] add(%add.5192, %convert_element_type.6348)
  %square.747 = bf16[512,8]{1,0} multiply(%add.4357, %add.4357)
  %convert_element_type.6349 = f32[512,8]{1,0} convert(%square.747)
  %reduce.1937 = f32[] reduce(%convert_element_type.6349, %constant.1360), dimensions={0,1}, to_apply=%region_1969.42224
  %all-reduce.977 = f32[] all-reduce(%reduce.1937), channel_id=1780, replica_groups=[1,8]<=[8], use_global_device_ids=true, to_apply=%region_1969.42224.clone
  %convert_element_type.6350 = bf16[] convert(%all-reduce.977)
  %add.5195 = bf16[] add(%add.5193, %convert_element_type.6350)
  %square.748 = bf16[1,4096,14336]{2,1,0} multiply(%add.4363, %add.4363)
  %convert_element_type.6351 = f32[1,4096,14336]{2,1,0} convert(%square.748)
  %reduce.1938 = f32[] reduce(%convert_element_type.6351, %constant.1360), dimensions={0,1,2}, to_apply=%region_1970.42233
  %all-reduce.978 = f32[] all-reduce(%reduce.1938), channel_id=1781, replica_groups=[1,8]<=[8], use_global_device_ids=true, to_apply=%region_1970.42233.clone
  %convert_element_type.6353 = bf16[] convert(%all-reduce.978)
  %add.5196 = bf16[] add(%add.5195, %convert_element_type.6353)
  %square.749 = bf16[1,4096,14336]{2,1,0} multiply(%add.4368, %add.4368)
  %convert_element_type.6354 = f32[1,4096,14336]{2,1,0} convert(%square.749)
  %reduce.1939 = f32[] reduce(%convert_element_type.6354, %constant.1360), dimensions={0,1,2}, to_apply=%region_1971.42242
  %all-reduce.979 = f32[] all-reduce(%reduce.1939), channel_id=1782, replica_groups=[1,8]<=[8], use_global_device_ids=true, to_apply=%region_1971.42242.clone
  %convert_element_type.6355 = bf16[] convert(%all-reduce.979)
  %add.5197 = bf16[] add(%add.5196, %convert_element_type.6355)
  %square.750 = bf16[1,14336,4096]{2,1,0} multiply(%add.4374, %add.4374)
  %convert_element_type.6356 = f32[1,14336,4096]{2,1,0} convert(%square.750)
  %reduce.1940 = f32[] reduce(%convert_element_type.6356, %constant.1360), dimensions={0,1,2}, to_apply=%region_1972.42251
  %all-reduce.980 = f32[] all-reduce(%reduce.1940), channel_id=1783, replica_groups=[1,8]<=[8], use_global_device_ids=true, to_apply=%region_1972.42251.clone
  %convert_element_type.6357 = bf16[] convert(%all-reduce.980)
  %add.5198 = bf16[] add(%add.5197, %convert_element_type.6357)
  %square.751 = bf16[4096]{0} multiply(%add.4379, %add.4379)
  %convert_element_type.6359 = f32[4096]{0} convert(%square.751)
  %reduce.1941 = f32[] reduce(%convert_element_type.6359, %constant.1360), dimensions={0}, to_apply=%region_1973.42260
  %convert_element_type.6360 = bf16[] convert(%reduce.1941)
  %add.5199 = bf16[] add(%add.5198, %convert_element_type.6360)
  %square.752 = bf16[4096]{0} multiply(%add.4385, %add.4385)
  %convert_element_type.6361 = f32[4096]{0} convert(%square.752)
  %reduce.1942 = f32[] reduce(%convert_element_type.6361, %constant.1360), dimensions={0}, to_apply=%region_1974.42269
  %convert_element_type.6362 = bf16[] convert(%reduce.1942)
  %add.5200 = bf16[] add(%add.5199, %convert_element_type.6362)
  %square.753 = bf16[512,8,128]{2,1,0} multiply(%add.4390, %add.4390)
  %convert_element_type.6363 = f32[512,8,128]{2,1,0} convert(%square.753)
  %reduce.1943 = f32[] reduce(%convert_element_type.6363, %constant.1360), dimensions={0,1,2}, to_apply=%region_1975.42278
  %all-reduce.981 = f32[] all-reduce(%reduce.1943), channel_id=1784, replica_groups=[1,8]<=[8], use_global_device_ids=true, to_apply=%region_1975.42278.clone
  %convert_element_type.6364 = bf16[] convert(%all-reduce.981)
  %add.5201 = bf16[] add(%add.5200, %convert_element_type.6364)
  %square.754 = bf16[32,128,512]{2,1,0} multiply(%add.4395, %add.4395)
  %convert_element_type.6366 = f32[32,128,512]{2,1,0} convert(%square.754)
  %reduce.1944 = f32[] reduce(%convert_element_type.6366, %constant.1360), dimensions={0,1,2}, to_apply=%region_1976.42287
  %all-reduce.982 = f32[] all-reduce(%reduce.1944), channel_id=1785, replica_groups=[1,8]<=[8], use_global_device_ids=true, to_apply=%region_1976.42287.clone
  %convert_element_type.6367 = bf16[] convert(%all-reduce.982)
  %add.5202 = bf16[] add(%add.5201, %convert_element_type.6367)
  %square.755 = bf16[512,32,128]{2,1,0} multiply(%add.4400, %add.4400)
  %convert_element_type.6368 = f32[512,32,128]{2,1,0} convert(%square.755)
  %reduce.1945 = f32[] reduce(%convert_element_type.6368, %constant.1360), dimensions={0,1,2}, to_apply=%region_1977.42296
  %all-reduce.983 = f32[] all-reduce(%reduce.1945), channel_id=1786, replica_groups=[1,8]<=[8], use_global_device_ids=true, to_apply=%region_1977.42296.clone
  %convert_element_type.6369 = bf16[] convert(%all-reduce.983)
  %add.5203 = bf16[] add(%add.5202, %convert_element_type.6369)
  %square.756 = bf16[512,8,128]{2,1,0} multiply(%add.4405, %add.4405)
  %convert_element_type.6370 = f32[512,8,128]{2,1,0} convert(%square.756)
  %reduce.1946 = f32[] reduce(%convert_element_type.6370, %constant.1360), dimensions={0,1,2}, to_apply=%region_1978.42305
  %all-reduce.984 = f32[] all-reduce(%reduce.1946), channel_id=1787, replica_groups=[1,8]<=[8], use_global_device_ids=true, to_apply=%region_1978.42305.clone
  %convert_element_type.6371 = bf16[] convert(%all-reduce.984)
  %add.5204 = bf16[] add(%add.5203, %convert_element_type.6371)
  %square.757 = bf16[512,8]{1,0} multiply(%add.4410, %add.4410)
  %convert_element_type.6372 = f32[512,8]{1,0} convert(%square.757)
  %reduce.1947 = f32[] reduce(%convert_element_type.6372, %constant.1360), dimensions={0,1}, to_apply=%region_1979.42314
  %all-reduce.985 = f32[] all-reduce(%reduce.1947), channel_id=1788, replica_groups=[1,8]<=[8], use_global_device_ids=true, to_apply=%region_1979.42314.clone
  %convert_element_type.6373 = bf16[] convert(%all-reduce.985)
  %add.5205 = bf16[] add(%add.5204, %convert_element_type.6373)
  %square.758 = bf16[1,4096,14336]{2,1,0} multiply(%add.4416, %add.4416)
  %convert_element_type.6375 = f32[1,4096,14336]{2,1,0} convert(%square.758)
  %reduce.1948 = f32[] reduce(%convert_element_type.6375, %constant.1360), dimensions={0,1,2}, to_apply=%region_1980.42323
  %all-reduce.986 = f32[] all-reduce(%reduce.1948), channel_id=1789, replica_groups=[1,8]<=[8], use_global_device_ids=true, to_apply=%region_1980.42323.clone
  %convert_element_type.6376 = bf16[] convert(%all-reduce.986)
  %add.5206 = bf16[] add(%add.5205, %convert_element_type.6376)
  %square.759 = bf16[1,4096,14336]{2,1,0} multiply(%add.4423, %add.4423)
  %convert_element_type.6377 = f32[1,4096,14336]{2,1,0} convert(%square.759)
  %reduce.1949 = f32[] reduce(%convert_element_type.6377, %constant.1360), dimensions={0,1,2}, to_apply=%region_1981.42332
  %all-reduce.987 = f32[] all-reduce(%reduce.1949), channel_id=1790, replica_groups=[1,8]<=[8], use_global_device_ids=true, to_apply=%region_1981.42332.clone
  %convert_element_type.6378 = bf16[] convert(%all-reduce.987)
  %add.5207 = bf16[] add(%add.5206, %convert_element_type.6378)
  %square.760 = bf16[1,14336,4096]{2,1,0} multiply(%add.4428, %add.4428)
  %convert_element_type.6379 = f32[1,14336,4096]{2,1,0} convert(%square.760)
  %reduce.1950 = f32[] reduce(%convert_element_type.6379, %constant.1360), dimensions={0,1,2}, to_apply=%region_1982.42341
  %all-reduce.988 = f32[] all-reduce(%reduce.1950), channel_id=1791, replica_groups=[1,8]<=[8], use_global_device_ids=true, to_apply=%region_1982.42341.clone
  %convert_element_type.6380 = bf16[] convert(%all-reduce.988)
  %add.5208 = bf16[] add(%add.5207, %convert_element_type.6380)
  %square.761 = bf16[4096]{0} multiply(%add.4433, %add.4433)
  %convert_element_type.6382 = f32[4096]{0} convert(%square.761)
  %reduce.1951 = f32[] reduce(%convert_element_type.6382, %constant.1360), dimensions={0}, to_apply=%region_1983.42350
  %convert_element_type.6383 = bf16[] convert(%reduce.1951)
  %add.5209 = bf16[] add(%add.5208, %convert_element_type.6383)
  %square.762 = bf16[4096]{0} multiply(%add.4438, %add.4438)
  %convert_element_type.6384 = f32[4096]{0} convert(%square.762)
  %reduce.1952 = f32[] reduce(%convert_element_type.6384, %constant.1360), dimensions={0}, to_apply=%region_1984.42359
  %convert_element_type.6385 = bf16[] convert(%reduce.1952)
  %add.5210 = bf16[] add(%add.5209, %convert_element_type.6385)
  %square.763 = bf16[512,8,128]{2,1,0} multiply(%add.4443, %add.4443)
  %convert_element_type.6386 = f32[512,8,128]{2,1,0} convert(%square.763)
  %reduce.1953 = f32[] reduce(%convert_element_type.6386, %constant.1360), dimensions={0,1,2}, to_apply=%region_1985.42368
  %all-reduce.989 = f32[] all-reduce(%reduce.1953), channel_id=1792, replica_groups=[1,8]<=[8], use_global_device_ids=true, to_apply=%region_1985.42368.clone
  %convert_element_type.6387 = bf16[] convert(%all-reduce.989)
  %add.5211 = bf16[] add(%add.5210, %convert_element_type.6387)
  %square.764 = bf16[32,128,512]{2,1,0} multiply(%add.4448, %add.4448)
  %convert_element_type.6388 = f32[32,128,512]{2,1,0} convert(%square.764)
  %reduce.1954 = f32[] reduce(%convert_element_type.6388, %constant.1360), dimensions={0,1,2}, to_apply=%region_1986.42377
  %all-reduce.990 = f32[] all-reduce(%reduce.1954), channel_id=1793, replica_groups=[1,8]<=[8], use_global_device_ids=true, to_apply=%region_1986.42377.clone
  %convert_element_type.6389 = bf16[] convert(%all-reduce.990)
  %add.5212 = bf16[] add(%add.5211, %convert_element_type.6389)
  %square.765 = bf16[512,32,128]{2,1,0} multiply(%add.4454, %add.4454)
  %convert_element_type.6390 = f32[512,32,128]{2,1,0} convert(%square.765)
  %reduce.1955 = f32[] reduce(%convert_element_type.6390, %constant.1360), dimensions={0,1,2}, to_apply=%region_1987.42386
  %all-reduce.991 = f32[] all-reduce(%reduce.1955), channel_id=1794, replica_groups=[1,8]<=[8], use_global_device_ids=true, to_apply=%region_1987.42386.clone
  %convert_element_type.6391 = bf16[] convert(%all-reduce.991)
  %add.5213 = bf16[] add(%add.5212, %convert_element_type.6391)
  %square.766 = bf16[512,8,128]{2,1,0} multiply(%add.4459, %add.4459)
  %convert_element_type.6392 = f32[512,8,128]{2,1,0} convert(%square.766)
  %reduce.1956 = f32[] reduce(%convert_element_type.6392, %constant.1360), dimensions={0,1,2}, to_apply=%region_1988.42395
  %all-reduce.992 = f32[] all-reduce(%reduce.1956), channel_id=1795, replica_groups=[1,8]<=[8], use_global_device_ids=true, to_apply=%region_1988.42395.clone
  %convert_element_type.6393 = bf16[] convert(%all-reduce.992)
  %add.5214 = bf16[] add(%add.5213, %convert_element_type.6393)
  %square.767 = bf16[512,8]{1,0} multiply(%add.4464, %add.4464)
  %convert_element_type.6395 = f32[512,8]{1,0} convert(%square.767)
  %reduce.1957 = f32[] reduce(%convert_element_type.6395, %constant.1360), dimensions={0,1}, to_apply=%region_1989.42404
  %all-reduce.993 = f32[] all-reduce(%reduce.1957), channel_id=1796, replica_groups=[1,8]<=[8], use_global_device_ids=true, to_apply=%region_1989.42404.clone
  %convert_element_type.6397 = bf16[] convert(%all-reduce.993)
  %add.5215 = bf16[] add(%add.5214, %convert_element_type.6397)
  %square.768 = bf16[1,4096,14336]{2,1,0} multiply(%add.4470, %add.4470)
  %convert_element_type.6398 = f32[1,4096,14336]{2,1,0} convert(%square.768)
  %reduce.1958 = f32[] reduce(%convert_element_type.6398, %constant.1360), dimensions={0,1,2}, to_apply=%region_1990.42413
  %all-reduce.994 = f32[] all-reduce(%reduce.1958), channel_id=1797, replica_groups=[1,8]<=[8], use_global_device_ids=true, to_apply=%region_1990.42413.clone
  %convert_element_type.6399 = bf16[] convert(%all-reduce.994)
  %add.5216 = bf16[] add(%add.5215, %convert_element_type.6399)
  %square.769 = bf16[1,4096,14336]{2,1,0} multiply(%add.4477, %add.4477)
  %convert_element_type.6400 = f32[1,4096,14336]{2,1,0} convert(%square.769)
  %reduce.1959 = f32[] reduce(%convert_element_type.6400, %constant.1360), dimensions={0,1,2}, to_apply=%region_1991.42422
  %all-reduce.995 = f32[] all-reduce(%reduce.1959), channel_id=1798, replica_groups=[1,8]<=[8], use_global_device_ids=true, to_apply=%region_1991.42422.clone
  %convert_element_type.6401 = bf16[] convert(%all-reduce.995)
  %add.5217 = bf16[] add(%add.5216, %convert_element_type.6401)
  %square.770 = bf16[1,14336,4096]{2,1,0} multiply(%add.4482, %add.4482)
  %convert_element_type.6402 = f32[1,14336,4096]{2,1,0} convert(%square.770)
  %reduce.1960 = f32[] reduce(%convert_element_type.6402, %constant.1360), dimensions={0,1,2}, to_apply=%region_1992.42431
  %all-reduce.996 = f32[] all-reduce(%reduce.1960), channel_id=1799, replica_groups=[1,8]<=[8], use_global_device_ids=true, to_apply=%region_1992.42431.clone
  %convert_element_type.6403 = bf16[] convert(%all-reduce.996)
  %add.5218 = bf16[] add(%add.5217, %convert_element_type.6403)
  %square.771 = bf16[4096]{0} multiply(%add.4487, %add.4487)
  %convert_element_type.6404 = f32[4096]{0} convert(%square.771)
  %reduce.1961 = f32[] reduce(%convert_element_type.6404, %constant.1360), dimensions={0}, to_apply=%region_1993.42440
  %convert_element_type.6405 = bf16[] convert(%reduce.1961)
  %add.5219 = bf16[] add(%add.5218, %convert_element_type.6405)
  %square.772 = bf16[4096]{0} multiply(%add.4493, %add.4493)
  %convert_element_type.6407 = f32[4096]{0} convert(%square.772)
  %reduce.1962 = f32[] reduce(%convert_element_type.6407, %constant.1360), dimensions={0}, to_apply=%region_1994.42449
  %convert_element_type.6408 = bf16[] convert(%reduce.1962)
  %add.5220 = bf16[] add(%add.5219, %convert_element_type.6408)
  %square.773 = bf16[512,8,128]{2,1,0} multiply(%add.4500, %add.4500)
  %convert_element_type.6409 = f32[512,8,128]{2,1,0} convert(%square.773)
  %reduce.1963 = f32[] reduce(%convert_element_type.6409, %constant.1360), dimensions={0,1,2}, to_apply=%region_1995.42458
  %all-reduce.997 = f32[] all-reduce(%reduce.1963), channel_id=1800, replica_groups=[1,8]<=[8], use_global_device_ids=true, to_apply=%region_1995.42458.clone
  %convert_element_type.6410 = bf16[] convert(%all-reduce.997)
  %add.5221 = bf16[] add(%add.5220, %convert_element_type.6410)
  %square.774 = bf16[32,128,512]{2,1,0} multiply(%add.4506, %add.4506)
  %convert_element_type.6412 = f32[32,128,512]{2,1,0} convert(%square.774)
  %reduce.1964 = f32[] reduce(%convert_element_type.6412, %constant.1360), dimensions={0,1,2}, to_apply=%region_1996.42467
  %all-reduce.998 = f32[] all-reduce(%reduce.1964), channel_id=1801, replica_groups=[1,8]<=[8], use_global_device_ids=true, to_apply=%region_1996.42467.clone
  %convert_element_type.6413 = bf16[] convert(%all-reduce.998)
  %add.5222 = bf16[] add(%add.5221, %convert_element_type.6413)
  %square.775 = bf16[512,32,128]{2,1,0} multiply(%add.4511, %add.4511)
  %convert_element_type.6415 = f32[512,32,128]{2,1,0} convert(%square.775)
  %reduce.1965 = f32[] reduce(%convert_element_type.6415, %constant.1360), dimensions={0,1,2}, to_apply=%region_1997.42476
  %all-reduce.999 = f32[] all-reduce(%reduce.1965), channel_id=1802, replica_groups=[1,8]<=[8], use_global_device_ids=true, to_apply=%region_1997.42476.clone
  %convert_element_type.6416 = bf16[] convert(%all-reduce.999)
  %add.5223 = bf16[] add(%add.5222, %convert_element_type.6416)
  %square.776 = bf16[512,8,128]{2,1,0} multiply(%add.4516, %add.4516)
  %convert_element_type.6417 = f32[512,8,128]{2,1,0} convert(%square.776)
  %reduce.1966 = f32[] reduce(%convert_element_type.6417, %constant.1360), dimensions={0,1,2}, to_apply=%region_1998.42485
  %all-reduce.1000 = f32[] all-reduce(%reduce.1966), channel_id=1803, replica_groups=[1,8]<=[8], use_global_device_ids=true, to_apply=%region_1998.42485.clone
  %convert_element_type.6418 = bf16[] convert(%all-reduce.1000)
  %add.5224 = bf16[] add(%add.5223, %convert_element_type.6418)
  %square.777 = bf16[512,32000]{1,0} multiply(%add.4522, %add.4522)
  %convert_element_type.6419 = f32[512,32000]{1,0} convert(%square.777)
  %reduce.1967 = f32[] reduce(%convert_element_type.6419, %constant.1360), dimensions={0,1}, to_apply=%region_1999.42494
  %all-reduce.1001 = f32[] all-reduce(%reduce.1967), channel_id=1804, replica_groups=[1,8]<=[8], use_global_device_ids=true, to_apply=%region_1999.42494.clone
  %convert_element_type.6420 = bf16[] convert(%all-reduce.1001)
  %add.5225 = bf16[] add(%add.5224, %convert_element_type.6420)
  %square.778 = bf16[32000,512]{1,0} multiply(%add.4529, %add.4529)
  %convert_element_type.6421 = f32[32000,512]{1,0} convert(%square.778)
  %reduce.1968 = f32[] reduce(%convert_element_type.6421, %constant.1360), dimensions={0,1}, to_apply=%region_2000.42503
  %all-reduce.1002 = f32[] all-reduce(%reduce.1968), channel_id=1805, replica_groups=[1,8]<=[8], use_global_device_ids=true, to_apply=%region_2000.42503.clone
  %convert_element_type.6422 = bf16[] convert(%all-reduce.1002)
  %add.5226 = bf16[] add(%add.5225, %convert_element_type.6422)
  %sqrt.325 = bf16[] sqrt(%add.5226)
  %all-reduce.1003 = f32[] all-reduce(%reduce.933), channel_id=1806, replica_groups=[1,8]<=[8], use_global_device_ids=true, to_apply=%region_2002.42521.clone
  %convert_element_type.6428 = bf16[] convert(%all-reduce.1003)
  %add.5227 = bf16[] add(%convert_element_type.2003, %convert_element_type.6428)
  %all-reduce.1004 = f32[] all-reduce(%reduce.934), channel_id=1807, replica_groups=[1,8]<=[8], use_global_device_ids=true, to_apply=%region_2003.42530.clone
  %convert_element_type.6430 = bf16[] convert(%all-reduce.1004)
  %add.5228 = bf16[] add(%add.5227, %convert_element_type.6430)
  %all-reduce.1005 = f32[] all-reduce(%reduce.935), channel_id=1808, replica_groups=[1,8]<=[8], use_global_device_ids=true, to_apply=%region_2004.42539.clone
  %convert_element_type.6432 = bf16[] convert(%all-reduce.1005)
  %add.5229 = bf16[] add(%add.5228, %convert_element_type.6432)
  %all-reduce.1006 = f32[] all-reduce(%reduce.936), channel_id=1809, replica_groups=[1,8]<=[8], use_global_device_ids=true, to_apply=%region_2005.42548.clone
  %convert_element_type.6434 = bf16[] convert(%all-reduce.1006)
  %add.5231 = bf16[] add(%add.5229, %convert_element_type.6434)
  %add.5233 = bf16[] add(%add.5231, %convert_element_type.3050)
  %add.5234 = bf16[] add(%add.5233, %convert_element_type.3056)
  %all-reduce.1007 = f32[] all-reduce(%reduce.942), channel_id=1810, replica_groups=[1,8]<=[8], use_global_device_ids=true, to_apply=%region_2008.42575.clone
  %convert_element_type.6440 = bf16[] convert(%all-reduce.1007)
  %add.5235 = bf16[] add(%add.5234, %convert_element_type.6440)
  %all-reduce.1008 = f32[] all-reduce(%reduce.943), channel_id=1811, replica_groups=[1,8]<=[8], use_global_device_ids=true, to_apply=%region_2009.42584.clone
  %convert_element_type.6442 = bf16[] convert(%all-reduce.1008)
  %add.5236 = bf16[] add(%add.5235, %convert_element_type.6442)
  %all-reduce.1009 = f32[] all-reduce(%reduce.944), channel_id=1812, replica_groups=[1,8]<=[8], use_global_device_ids=true, to_apply=%region_2010.42593.clone
  %convert_element_type.6444 = bf16[] convert(%all-reduce.1009)
  %add.5237 = bf16[] add(%add.5236, %convert_element_type.6444)
  %all-reduce.1010 = f32[] all-reduce(%reduce.945), channel_id=1813, replica_groups=[1,8]<=[8], use_global_device_ids=true, to_apply=%region_2011.42602.clone
  %convert_element_type.6446 = bf16[] convert(%all-reduce.1010)
  %add.5238 = bf16[] add(%add.5237, %convert_element_type.6446)
  %all-reduce.1011 = f32[] all-reduce(%reduce.946), channel_id=1814, replica_groups=[1,8]<=[8], use_global_device_ids=true, to_apply=%region_2012.42611.clone
  %convert_element_type.6448 = bf16[] convert(%all-reduce.1011)
  %add.5239 = bf16[] add(%add.5238, %convert_element_type.6448)
  %all-reduce.1012 = f32[] all-reduce(%reduce.947), channel_id=1815, replica_groups=[1,8]<=[8], use_global_device_ids=true, to_apply=%region_2013.42620.clone
  %convert_element_type.6452 = bf16[] convert(%all-reduce.1012)
  %add.5240 = bf16[] add(%add.5239, %convert_element_type.6452)
  %all-reduce.1013 = f32[] all-reduce(%reduce.948), channel_id=1816, replica_groups=[1,8]<=[8], use_global_device_ids=true, to_apply=%region_2014.42629.clone
  %convert_element_type.6455 = bf16[] convert(%all-reduce.1013)
  %add.5241 = bf16[] add(%add.5240, %convert_element_type.6455)
  %all-reduce.1014 = f32[] all-reduce(%reduce.949), channel_id=1817, replica_groups=[1,8]<=[8], use_global_device_ids=true, to_apply=%region_2015.42638.clone
  %convert_element_type.6457 = bf16[] convert(%all-reduce.1014)
  %add.5242 = bf16[] add(%add.5241, %convert_element_type.6457)
  %add.5243 = bf16[] add(%add.5242, %convert_element_type.3077)
  %add.5244 = bf16[] add(%add.5243, %convert_element_type.3079)
  %all-reduce.1015 = f32[] all-reduce(%reduce.954), channel_id=1818, replica_groups=[1,8]<=[8], use_global_device_ids=true, to_apply=%region_2018.42665.clone
  %convert_element_type.6463 = bf16[] convert(%all-reduce.1015)
  %add.5245 = bf16[] add(%add.5244, %convert_element_type.6463)
  %all-reduce.1016 = f32[] all-reduce(%reduce.955), channel_id=1819, replica_groups=[1,8]<=[8], use_global_device_ids=true, to_apply=%region_2019.42674.clone
  %convert_element_type.6467 = bf16[] convert(%all-reduce.1016)
  %add.5246 = bf16[] add(%add.5245, %convert_element_type.6467)
  %all-reduce.1017 = f32[] all-reduce(%reduce.956), channel_id=1820, replica_groups=[1,8]<=[8], use_global_device_ids=true, to_apply=%region_2020.42683.clone
  %convert_element_type.6470 = bf16[] convert(%all-reduce.1017)
  %add.5247 = bf16[] add(%add.5246, %convert_element_type.6470)
  %all-reduce.1018 = f32[] all-reduce(%reduce.957), channel_id=1821, replica_groups=[1,8]<=[8], use_global_device_ids=true, to_apply=%region_2021.42692.clone
  %convert_element_type.6472 = bf16[] convert(%all-reduce.1018)
  %add.5248 = bf16[] add(%add.5247, %convert_element_type.6472)
  %all-reduce.1019 = f32[] all-reduce(%reduce.958), channel_id=1822, replica_groups=[1,8]<=[8], use_global_device_ids=true, to_apply=%region_2022.42701.clone
  %convert_element_type.6474 = bf16[] convert(%all-reduce.1019)
  %add.5249 = bf16[] add(%add.5248, %convert_element_type.6474)
  %all-reduce.1020 = f32[] all-reduce(%reduce.959), channel_id=1823, replica_groups=[1,8]<=[8], use_global_device_ids=true, to_apply=%region_2023.42710.clone
  %convert_element_type.6476 = bf16[] convert(%all-reduce.1020)
  %add.5250 = bf16[] add(%add.5249, %convert_element_type.6476)
  %all-reduce.1021 = f32[] all-reduce(%reduce.960), channel_id=1824, replica_groups=[1,8]<=[8], use_global_device_ids=true, to_apply=%region_2024.42719.clone
  %convert_element_type.6478 = bf16[] convert(%all-reduce.1021)
  %add.5251 = bf16[] add(%add.5250, %convert_element_type.6478)
  %all-reduce.1022 = f32[] all-reduce(%reduce.961), channel_id=1825, replica_groups=[1,8]<=[8], use_global_device_ids=true, to_apply=%region_2025.42728.clone
  %convert_element_type.6481 = bf16[] convert(%all-reduce.1022)
  %add.5252 = bf16[] add(%add.5251, %convert_element_type.6481)
  %add.5253 = bf16[] add(%add.5252, %convert_element_type.3100)
  %add.5254 = bf16[] add(%add.5253, %convert_element_type.3102)
  %all-reduce.1023 = f32[] all-reduce(%reduce.966), channel_id=1826, replica_groups=[1,8]<=[8], use_global_device_ids=true, to_apply=%region_2028.42755.clone
  %convert_element_type.6487 = bf16[] convert(%all-reduce.1023)
  %add.5255 = bf16[] add(%add.5254, %convert_element_type.6487)
  %all-reduce.1024 = f32[] all-reduce(%reduce.967), channel_id=1827, replica_groups=[1,8]<=[8], use_global_device_ids=true, to_apply=%region_2029.42764.clone
  %convert_element_type.6489 = bf16[] convert(%all-reduce.1024)
  %add.5256 = bf16[] add(%add.5255, %convert_element_type.6489)
  %all-reduce.1025 = f32[] all-reduce(%reduce.968), channel_id=1828, replica_groups=[1,8]<=[8], use_global_device_ids=true, to_apply=%region_2030.42773.clone
  %convert_element_type.6491 = bf16[] convert(%all-reduce.1025)
  %add.5257 = bf16[] add(%add.5256, %convert_element_type.6491)
  %all-reduce.1026 = f32[] all-reduce(%reduce.969), channel_id=1829, replica_groups=[1,8]<=[8], use_global_device_ids=true, to_apply=%region_2031.42782.clone
  %convert_element_type.6493 = bf16[] convert(%all-reduce.1026)
  %add.5258 = bf16[] add(%add.5257, %convert_element_type.6493)
  %all-reduce.1027 = f32[] all-reduce(%reduce.970), channel_id=1830, replica_groups=[1,8]<=[8], use_global_device_ids=true, to_apply=%region_2032.42791.clone
  %convert_element_type.6495 = bf16[] convert(%all-reduce.1027)
  %add.5259 = bf16[] add(%add.5258, %convert_element_type.6495)
  %all-reduce.1028 = f32[] all-reduce(%reduce.971), channel_id=1831, replica_groups=[1,8]<=[8], use_global_device_ids=true, to_apply=%region_2033.42800.clone
  %convert_element_type.6498 = bf16[] convert(%all-reduce.1028)
  %add.5260 = bf16[] add(%add.5259, %convert_element_type.6498)
  %all-reduce.1029 = f32[] all-reduce(%reduce.972), channel_id=1832, replica_groups=[1,8]<=[8], use_global_device_ids=true, to_apply=%region_2034.42809.clone
  %convert_element_type.6500 = bf16[] convert(%all-reduce.1029)
  %add.5261 = bf16[] add(%add.5260, %convert_element_type.6500)
  %all-reduce.1030 = f32[] all-reduce(%reduce.973), channel_id=1833, replica_groups=[1,8]<=[8], use_global_device_ids=true, to_apply=%region_2035.42818.clone
  %convert_element_type.6502 = bf16[] convert(%all-reduce.1030)
  %add.5262 = bf16[] add(%add.5261, %convert_element_type.6502)
  %add.5263 = bf16[] add(%add.5262, %convert_element_type.3125)
  %add.5264 = bf16[] add(%add.5263, %convert_element_type.3127)
  %all-reduce.1031 = f32[] all-reduce(%reduce.978), channel_id=1834, replica_groups=[1,8]<=[8], use_global_device_ids=true, to_apply=%region_2038.42845.clone
  %convert_element_type.6508 = bf16[] convert(%all-reduce.1031)
  %add.5266 = bf16[] add(%add.5264, %convert_element_type.6508)
  %all-reduce.1032 = f32[] all-reduce(%reduce.979), channel_id=1835, replica_groups=[1,8]<=[8], use_global_device_ids=true, to_apply=%region_2039.42854.clone
  %convert_element_type.6512 = bf16[] convert(%all-reduce.1032)
  %add.5267 = bf16[] add(%add.5266, %convert_element_type.6512)
  %all-reduce.1033 = f32[] all-reduce(%reduce.980), channel_id=1836, replica_groups=[1,8]<=[8], use_global_device_ids=true, to_apply=%region_2040.42863.clone
  %convert_element_type.6516 = bf16[] convert(%all-reduce.1033)
  %add.5268 = bf16[] add(%add.5267, %convert_element_type.6516)
  %all-reduce.1034 = f32[] all-reduce(%reduce.981), channel_id=1837, replica_groups=[1,8]<=[8], use_global_device_ids=true, to_apply=%region_2041.42872.clone
  %convert_element_type.6518 = bf16[] convert(%all-reduce.1034)
  %add.5269 = bf16[] add(%add.5268, %convert_element_type.6518)
  %all-reduce.1035 = f32[] all-reduce(%reduce.982), channel_id=1838, replica_groups=[1,8]<=[8], use_global_device_ids=true, to_apply=%region_2042.42881.clone
  %convert_element_type.6520 = bf16[] convert(%all-reduce.1035)
  %add.5271 = bf16[] add(%add.5269, %convert_element_type.6520)
  %all-reduce.1036 = f32[] all-reduce(%reduce.983), channel_id=1839, replica_groups=[1,8]<=[8], use_global_device_ids=true, to_apply=%region_2043.42890.clone
  %convert_element_type.6523 = bf16[] convert(%all-reduce.1036)
  %add.5272 = bf16[] add(%add.5271, %convert_element_type.6523)
  %all-reduce.1037 = f32[] all-reduce(%reduce.984), channel_id=1840, replica_groups=[1,8]<=[8], use_global_device_ids=true, to_apply=%region_2044.42899.clone
  %convert_element_type.6525 = bf16[] convert(%all-reduce.1037)
  %add.5273 = bf16[] add(%add.5272, %convert_element_type.6525)
  %all-reduce.1038 = f32[] all-reduce(%reduce.985), channel_id=1841, replica_groups=[1,8]<=[8], use_global_device_ids=true, to_apply=%region_2045.42908.clone
  %convert_element_type.6527 = bf16[] convert(%all-reduce.1038)
  %add.5274 = bf16[] add(%add.5273, %convert_element_type.6527)
  %add.5275 = bf16[] add(%add.5274, %convert_element_type.3146)
  %add.5276 = bf16[] add(%add.5275, %convert_element_type.3148)
  %all-reduce.1039 = f32[] all-reduce(%reduce.990), channel_id=1842, replica_groups=[1,8]<=[8], use_global_device_ids=true, to_apply=%region_2048.42935.clone
  %convert_element_type.6533 = bf16[] convert(%all-reduce.1039)
  %add.5277 = bf16[] add(%add.5276, %convert_element_type.6533)
  %all-reduce.1040 = f32[] all-reduce(%reduce.991), channel_id=1843, replica_groups=[1,8]<=[8], use_global_device_ids=true, to_apply=%region_2049.42944.clone
  %convert_element_type.6535 = bf16[] convert(%all-reduce.1040)
  %add.5278 = bf16[] add(%add.5277, %convert_element_type.6535)
  %all-reduce.1041 = f32[] all-reduce(%reduce.992), channel_id=1844, replica_groups=[1,8]<=[8], use_global_device_ids=true, to_apply=%region_2050.42953.clone
  %convert_element_type.6537 = bf16[] convert(%all-reduce.1041)
  %add.5279 = bf16[] add(%add.5278, %convert_element_type.6537)
  %all-reduce.1042 = f32[] all-reduce(%reduce.993), channel_id=1845, replica_groups=[1,8]<=[8], use_global_device_ids=true, to_apply=%region_2051.42962.clone
  %convert_element_type.6539 = bf16[] convert(%all-reduce.1042)
  %add.5280 = bf16[] add(%add.5279, %convert_element_type.6539)
  %all-reduce.1043 = f32[] all-reduce(%reduce.994), channel_id=1846, replica_groups=[1,8]<=[8], use_global_device_ids=true, to_apply=%region_2052.42971.clone
  %convert_element_type.6542 = bf16[] convert(%all-reduce.1043)
  %add.5281 = bf16[] add(%add.5280, %convert_element_type.6542)
  %all-reduce.1044 = f32[] all-reduce(%reduce.995), channel_id=1847, replica_groups=[1,8]<=[8], use_global_device_ids=true, to_apply=%region_2053.42980.clone
  %convert_element_type.6544 = bf16[] convert(%all-reduce.1044)
  %add.5282 = bf16[] add(%add.5281, %convert_element_type.6544)
  %all-reduce.1045 = f32[] all-reduce(%reduce.996), channel_id=1848, replica_groups=[1,8]<=[8], use_global_device_ids=true, to_apply=%region_2054.42989.clone
  %convert_element_type.6546 = bf16[] convert(%all-reduce.1045)
  %add.5283 = bf16[] add(%add.5282, %convert_element_type.6546)
  %all-reduce.1046 = f32[] all-reduce(%reduce.997), channel_id=1849, replica_groups=[1,8]<=[8], use_global_device_ids=true, to_apply=%region_2055.42998.clone
  %convert_element_type.6548 = bf16[] convert(%all-reduce.1046)
  %add.5284 = bf16[] add(%add.5283, %convert_element_type.6548)
  %add.5285 = bf16[] add(%add.5284, %convert_element_type.3167)
  %add.5286 = bf16[] add(%add.5285, %convert_element_type.3169)
  %all-reduce.1047 = f32[] all-reduce(%reduce.1002), channel_id=1850, replica_groups=[1,8]<=[8], use_global_device_ids=true, to_apply=%region_2058.43025.clone
  %convert_element_type.6555 = bf16[] convert(%all-reduce.1047)
  %add.5287 = bf16[] add(%add.5286, %convert_element_type.6555)
  %all-reduce.1048 = f32[] all-reduce(%reduce.1003), channel_id=1851, replica_groups=[1,8]<=[8], use_global_device_ids=true, to_apply=%region_2059.43034.clone
  %convert_element_type.6558 = bf16[] convert(%all-reduce.1048)
  %add.5288 = bf16[] add(%add.5287, %convert_element_type.6558)
  %all-reduce.1049 = f32[] all-reduce(%reduce.1004), channel_id=1852, replica_groups=[1,8]<=[8], use_global_device_ids=true, to_apply=%region_2060.43043.clone
  %convert_element_type.6561 = bf16[] convert(%all-reduce.1049)
  %add.5289 = bf16[] add(%add.5288, %convert_element_type.6561)
  %all-reduce.1050 = f32[] all-reduce(%reduce.1005), channel_id=1853, replica_groups=[1,8]<=[8], use_global_device_ids=true, to_apply=%region_2061.43052.clone
  %convert_element_type.6563 = bf16[] convert(%all-reduce.1050)
  %add.5290 = bf16[] add(%add.5289, %convert_element_type.6563)
  %all-reduce.1051 = f32[] all-reduce(%reduce.1006), channel_id=1854, replica_groups=[1,8]<=[8], use_global_device_ids=true, to_apply=%region_2062.43061.clone
  %convert_element_type.6566 = bf16[] convert(%all-reduce.1051)
  %add.5291 = bf16[] add(%add.5290, %convert_element_type.6566)
  %all-reduce.1052 = f32[] all-reduce(%reduce.1007), channel_id=1855, replica_groups=[1,8]<=[8], use_global_device_ids=true, to_apply=%region_2063.43070.clone
  %convert_element_type.6569 = bf16[] convert(%all-reduce.1052)
  %add.5292 = bf16[] add(%add.5291, %convert_element_type.6569)
  %all-reduce.1053 = f32[] all-reduce(%reduce.1008), channel_id=1856, replica_groups=[1,8]<=[8], use_global_device_ids=true, to_apply=%region_2064.43079.clone
  %convert_element_type.6572 = bf16[] convert(%all-reduce.1053)
  %add.5293 = bf16[] add(%add.5292, %convert_element_type.6572)
  %all-reduce.1054 = f32[] all-reduce(%reduce.1009), channel_id=1857, replica_groups=[1,8]<=[8], use_global_device_ids=true, to_apply=%region_2065.43088.clone
  %convert_element_type.6574 = bf16[] convert(%all-reduce.1054)
  %add.5294 = bf16[] add(%add.5293, %convert_element_type.6574)
  %add.5295 = bf16[] add(%add.5294, %convert_element_type.3189)
  %add.5296 = bf16[] add(%add.5295, %convert_element_type.3191)
  %all-reduce.1055 = f32[] all-reduce(%reduce.1014), channel_id=1858, replica_groups=[1,8]<=[8], use_global_device_ids=true, to_apply=%region_2068.43115.clone
  %convert_element_type.6581 = bf16[] convert(%all-reduce.1055)
  %add.5297 = bf16[] add(%add.5296, %convert_element_type.6581)
  %all-reduce.1056 = f32[] all-reduce(%reduce.1015), channel_id=1859, replica_groups=[1,8]<=[8], use_global_device_ids=true, to_apply=%region_2069.43124.clone
  %convert_element_type.6583 = bf16[] convert(%all-reduce.1056)
  %add.5298 = bf16[] add(%add.5297, %convert_element_type.6583)
  %all-reduce.1057 = f32[] all-reduce(%reduce.1016), channel_id=1860, replica_groups=[1,8]<=[8], use_global_device_ids=true, to_apply=%region_2070.43133.clone
  %convert_element_type.6585 = bf16[] convert(%all-reduce.1057)
  %add.5299 = bf16[] add(%add.5298, %convert_element_type.6585)
  %all-reduce.1058 = f32[] all-reduce(%reduce.1017), channel_id=1861, replica_groups=[1,8]<=[8], use_global_device_ids=true, to_apply=%region_2071.43142.clone
  %convert_element_type.6587 = bf16[] convert(%all-reduce.1058)
  %add.5300 = bf16[] add(%add.5299, %convert_element_type.6587)
  %all-reduce.1059 = f32[] all-reduce(%reduce.1018), channel_id=1862, replica_groups=[1,8]<=[8], use_global_device_ids=true, to_apply=%region_2072.43151.clone
  %convert_element_type.6589 = bf16[] convert(%all-reduce.1059)
  %add.5301 = bf16[] add(%add.5300, %convert_element_type.6589)
  %all-reduce.1060 = f32[] all-reduce(%reduce.1019), channel_id=1863, replica_groups=[1,8]<=[8], use_global_device_ids=true, to_apply=%region_2073.43160.clone
  %convert_element_type.6592 = bf16[] convert(%all-reduce.1060)
  %add.5302 = bf16[] add(%add.5301, %convert_element_type.6592)
  %all-reduce.1061 = f32[] all-reduce(%reduce.1020), channel_id=1864, replica_groups=[1,8]<=[8], use_global_device_ids=true, to_apply=%region_2074.43169.clone
  %convert_element_type.6595 = bf16[] convert(%all-reduce.1061)
  %add.5303 = bf16[] add(%add.5302, %convert_element_type.6595)
  %all-reduce.1062 = f32[] all-reduce(%reduce.1021), channel_id=1865, replica_groups=[1,8]<=[8], use_global_device_ids=true, to_apply=%region_2075.43178.clone
  %convert_element_type.6598 = bf16[] convert(%all-reduce.1062)
  %add.5304 = bf16[] add(%add.5303, %convert_element_type.6598)
  %add.5305 = bf16[] add(%add.5304, %convert_element_type.3213)
  %add.5306 = bf16[] add(%add.5305, %convert_element_type.3215)
  %all-reduce.1063 = f32[] all-reduce(%reduce.1026), channel_id=1866, replica_groups=[1,8]<=[8], use_global_device_ids=true, to_apply=%region_2078.43205.clone
  %convert_element_type.6605 = bf16[] convert(%all-reduce.1063)
  %add.5307 = bf16[] add(%add.5306, %convert_element_type.6605)
  %all-reduce.1064 = f32[] all-reduce(%reduce.1027), channel_id=1867, replica_groups=[1,8]<=[8], use_global_device_ids=true, to_apply=%region_2079.43214.clone
  %convert_element_type.6607 = bf16[] convert(%all-reduce.1064)
  %add.5308 = bf16[] add(%add.5307, %convert_element_type.6607)
  %all-reduce.1065 = f32[] all-reduce(%reduce.1028), channel_id=1868, replica_groups=[1,8]<=[8], use_global_device_ids=true, to_apply=%region_2080.43223.clone
  %convert_element_type.6610 = bf16[] convert(%all-reduce.1065)
  %add.5310 = bf16[] add(%add.5308, %convert_element_type.6610)
  %all-reduce.1066 = f32[] all-reduce(%reduce.1029), channel_id=1869, replica_groups=[1,8]<=[8], use_global_device_ids=true, to_apply=%region_2081.43232.clone
  %convert_element_type.6612 = bf16[] convert(%all-reduce.1066)
  %add.5311 = bf16[] add(%add.5310, %convert_element_type.6612)
  %all-reduce.1067 = f32[] all-reduce(%reduce.1030), channel_id=1870, replica_groups=[1,8]<=[8], use_global_device_ids=true, to_apply=%region_2082.43241.clone
  %convert_element_type.6614 = bf16[] convert(%all-reduce.1067)
  %add.5312 = bf16[] add(%add.5311, %convert_element_type.6614)
  %all-reduce.1068 = f32[] all-reduce(%reduce.1031), channel_id=1871, replica_groups=[1,8]<=[8], use_global_device_ids=true, to_apply=%region_2083.43250.clone
  %convert_element_type.6616 = bf16[] convert(%all-reduce.1068)
  %add.5313 = bf16[] add(%add.5312, %convert_element_type.6616)
  %all-reduce.1069 = f32[] all-reduce(%reduce.1032), channel_id=1872, replica_groups=[1,8]<=[8], use_global_device_ids=true, to_apply=%region_2084.43259.clone
  %convert_element_type.6618 = bf16[] convert(%all-reduce.1069)
  %add.5314 = bf16[] add(%add.5313, %convert_element_type.6618)
  %all-reduce.1070 = f32[] all-reduce(%reduce.1033), channel_id=1873, replica_groups=[1,8]<=[8], use_global_device_ids=true, to_apply=%region_2085.43268.clone
  %convert_element_type.6620 = bf16[] convert(%all-reduce.1070)
  %add.5315 = bf16[] add(%add.5314, %convert_element_type.6620)
  %add.5316 = bf16[] add(%add.5315, %convert_element_type.3236)
  %add.5317 = bf16[] add(%add.5316, %convert_element_type.3238)
  %all-reduce.1071 = f32[] all-reduce(%reduce.1038), channel_id=1874, replica_groups=[1,8]<=[8], use_global_device_ids=true, to_apply=%region_2088.43295.clone
  %convert_element_type.6626 = bf16[] convert(%all-reduce.1071)
  %add.5319 = bf16[] add(%add.5317, %convert_element_type.6626)
  %all-reduce.1072 = f32[] all-reduce(%reduce.1039), channel_id=1875, replica_groups=[1,8]<=[8], use_global_device_ids=true, to_apply=%region_2089.43304.clone
  %convert_element_type.6628 = bf16[] convert(%all-reduce.1072)
  %add.5320 = bf16[] add(%add.5319, %convert_element_type.6628)
  %all-reduce.1073 = f32[] all-reduce(%reduce.1040), channel_id=1876, replica_groups=[1,8]<=[8], use_global_device_ids=true, to_apply=%region_2090.43313.clone
  %convert_element_type.6630 = bf16[] convert(%all-reduce.1073)
  %add.5321 = bf16[] add(%add.5320, %convert_element_type.6630)
  %all-reduce.1074 = f32[] all-reduce(%reduce.1041), channel_id=1877, replica_groups=[1,8]<=[8], use_global_device_ids=true, to_apply=%region_2091.43322.clone
  %convert_element_type.6632 = bf16[] convert(%all-reduce.1074)
  %add.5322 = bf16[] add(%add.5321, %convert_element_type.6632)
  %all-reduce.1075 = f32[] all-reduce(%reduce.1042), channel_id=1878, replica_groups=[1,8]<=[8], use_global_device_ids=true, to_apply=%region_2092.43331.clone
  %convert_element_type.6634 = bf16[] convert(%all-reduce.1075)
  %add.5323 = bf16[] add(%add.5322, %convert_element_type.6634)
  %all-reduce.1076 = f32[] all-reduce(%reduce.1043), channel_id=1879, replica_groups=[1,8]<=[8], use_global_device_ids=true, to_apply=%region_2093.43340.clone
  %convert_element_type.6638 = bf16[] convert(%all-reduce.1076)
  %add.5325 = bf16[] add(%add.5323, %convert_element_type.6638)
  %all-reduce.1077 = f32[] all-reduce(%reduce.1044), channel_id=1880, replica_groups=[1,8]<=[8], use_global_device_ids=true, to_apply=%region_2094.43349.clone
  %convert_element_type.6640 = bf16[] convert(%all-reduce.1077)
  %add.5326 = bf16[] add(%add.5325, %convert_element_type.6640)
  %all-reduce.1078 = f32[] all-reduce(%reduce.1045), channel_id=1881, replica_groups=[1,8]<=[8], use_global_device_ids=true, to_apply=%region_2095.43358.clone
  %convert_element_type.6642 = bf16[] convert(%all-reduce.1078)
  %add.5327 = bf16[] add(%add.5326, %convert_element_type.6642)
  %add.5328 = bf16[] add(%add.5327, %convert_element_type.3260)
  %add.5329 = bf16[] add(%add.5328, %convert_element_type.3262)
  %all-reduce.1079 = f32[] all-reduce(%reduce.1050), channel_id=1882, replica_groups=[1,8]<=[8], use_global_device_ids=true, to_apply=%region_2098.43385.clone
  %convert_element_type.6650 = bf16[] convert(%all-reduce.1079)
  %add.5330 = bf16[] add(%add.5329, %convert_element_type.6650)
  %all-reduce.1080 = f32[] all-reduce(%reduce.1051), channel_id=1883, replica_groups=[1,8]<=[8], use_global_device_ids=true, to_apply=%region_2099.43394.clone
  %convert_element_type.6652 = bf16[] convert(%all-reduce.1080)
  %add.5331 = bf16[] add(%add.5330, %convert_element_type.6652)
  %all-reduce.1081 = f32[] all-reduce(%reduce.1052), channel_id=1884, replica_groups=[1,8]<=[8], use_global_device_ids=true, to_apply=%region_2100.43403.clone
  %convert_element_type.6654 = bf16[] convert(%all-reduce.1081)
  %add.5332 = bf16[] add(%add.5331, %convert_element_type.6654)
  %all-reduce.1082 = f32[] all-reduce(%reduce.1053), channel_id=1885, replica_groups=[1,8]<=[8], use_global_device_ids=true, to_apply=%region_2101.43412.clone
  %convert_element_type.6657 = bf16[] convert(%all-reduce.1082)
  %add.5333 = bf16[] add(%add.5332, %convert_element_type.6657)
  %all-reduce.1083 = f32[] all-reduce(%reduce.1054), channel_id=1886, replica_groups=[1,8]<=[8], use_global_device_ids=true, to_apply=%region_2102.43421.clone
  %convert_element_type.6659 = bf16[] convert(%all-reduce.1083)
  %add.5335 = bf16[] add(%add.5333, %convert_element_type.6659)
  %all-reduce.1084 = f32[] all-reduce(%reduce.1055), channel_id=1887, replica_groups=[1,8]<=[8], use_global_device_ids=true, to_apply=%region_2103.43430.clone
  %convert_element_type.6661 = bf16[] convert(%all-reduce.1084)
  %add.5336 = bf16[] add(%add.5335, %convert_element_type.6661)
  %all-reduce.1085 = f32[] all-reduce(%reduce.1056), channel_id=1888, replica_groups=[1,8]<=[8], use_global_device_ids=true, to_apply=%region_2104.43439.clone
  %convert_element_type.6664 = bf16[] convert(%all-reduce.1085)
  %add.5337 = bf16[] add(%add.5336, %convert_element_type.6664)
  %all-reduce.1086 = f32[] all-reduce(%reduce.1057), channel_id=1889, replica_groups=[1,8]<=[8], use_global_device_ids=true, to_apply=%region_2105.43448.clone
  %convert_element_type.6667 = bf16[] convert(%all-reduce.1086)
  %add.5338 = bf16[] add(%add.5337, %convert_element_type.6667)
  %add.5339 = bf16[] add(%add.5338, %convert_element_type.3281)
  %add.5341 = bf16[] add(%add.5339, %convert_element_type.3283)
  %all-reduce.1087 = f32[] all-reduce(%reduce.1062), channel_id=1890, replica_groups=[1,8]<=[8], use_global_device_ids=true, to_apply=%region_2108.43475.clone
  %convert_element_type.6673 = bf16[] convert(%all-reduce.1087)
  %add.5342 = bf16[] add(%add.5341, %convert_element_type.6673)
  %all-reduce.1088 = f32[] all-reduce(%reduce.1063), channel_id=1891, replica_groups=[1,8]<=[8], use_global_device_ids=true, to_apply=%region_2109.43484.clone
  %convert_element_type.6675 = bf16[] convert(%all-reduce.1088)
  %add.5343 = bf16[] add(%add.5342, %convert_element_type.6675)
  %all-reduce.1089 = f32[] all-reduce(%reduce.1064), channel_id=1892, replica_groups=[1,8]<=[8], use_global_device_ids=true, to_apply=%region_2110.43493.clone
  %convert_element_type.6678 = bf16[] convert(%all-reduce.1089)
  %add.5344 = bf16[] add(%add.5343, %convert_element_type.6678)
  %all-reduce.1090 = f32[] all-reduce(%reduce.1065), channel_id=1893, replica_groups=[1,8]<=[8], use_global_device_ids=true, to_apply=%region_2111.43502.clone
  %convert_element_type.6680 = bf16[] convert(%all-reduce.1090)
  %add.5345 = bf16[] add(%add.5344, %convert_element_type.6680)
  %all-reduce.1091 = f32[] all-reduce(%reduce.1066), channel_id=1894, replica_groups=[1,8]<=[8], use_global_device_ids=true, to_apply=%region_2112.43511.clone
  %convert_element_type.6682 = bf16[] convert(%all-reduce.1091)
  %add.5346 = bf16[] add(%add.5345, %convert_element_type.6682)
  %all-reduce.1092 = f32[] all-reduce(%reduce.1067), channel_id=1895, replica_groups=[1,8]<=[8], use_global_device_ids=true, to_apply=%region_2113.43520.clone
  %convert_element_type.6684 = bf16[] convert(%all-reduce.1092)
  %add.5347 = bf16[] add(%add.5346, %convert_element_type.6684)
  %all-reduce.1093 = f32[] all-reduce(%reduce.1068), channel_id=1896, replica_groups=[1,8]<=[8], use_global_device_ids=true, to_apply=%region_2114.43529.clone
  %convert_element_type.6687 = bf16[] convert(%all-reduce.1093)
  %add.5348 = bf16[] add(%add.5347, %convert_element_type.6687)
  %all-reduce.1094 = f32[] all-reduce(%reduce.1069), channel_id=1897, replica_groups=[1,8]<=[8], use_global_device_ids=true, to_apply=%region_2115.43538.clone
  %convert_element_type.6689 = bf16[] convert(%all-reduce.1094)
  %add.5349 = bf16[] add(%add.5348, %convert_element_type.6689)
  %add.5350 = bf16[] add(%add.5349, %convert_element_type.3305)
  %add.5351 = bf16[] add(%add.5350, %convert_element_type.3307)
  %all-reduce.1095 = f32[] all-reduce(%reduce.1074), channel_id=1898, replica_groups=[1,8]<=[8], use_global_device_ids=true, to_apply=%region_2118.43565.clone
  %convert_element_type.6695 = bf16[] convert(%all-reduce.1095)
  %add.5352 = bf16[] add(%add.5351, %convert_element_type.6695)
  %all-reduce.1096 = f32[] all-reduce(%reduce.1075), channel_id=1899, replica_groups=[1,8]<=[8], use_global_device_ids=true, to_apply=%region_2119.43574.clone
  %convert_element_type.6697 = bf16[] convert(%all-reduce.1096)
  %add.5353 = bf16[] add(%add.5352, %convert_element_type.6697)
  %all-reduce.1097 = f32[] all-reduce(%reduce.1076), channel_id=1900, replica_groups=[1,8]<=[8], use_global_device_ids=true, to_apply=%region_2120.43583.clone
  %convert_element_type.6699 = bf16[] convert(%all-reduce.1097)
  %add.5354 = bf16[] add(%add.5353, %convert_element_type.6699)
  %all-reduce.1098 = f32[] all-reduce(%reduce.1077), channel_id=1901, replica_groups=[1,8]<=[8], use_global_device_ids=true, to_apply=%region_2121.43592.clone
  %convert_element_type.6702 = bf16[] convert(%all-reduce.1098)
  %add.5355 = bf16[] add(%add.5354, %convert_element_type.6702)
  %all-reduce.1099 = f32[] all-reduce(%reduce.1078), channel_id=1902, replica_groups=[1,8]<=[8], use_global_device_ids=true, to_apply=%region_2122.43601.clone
  %convert_element_type.6704 = bf16[] convert(%all-reduce.1099)
  %add.5356 = bf16[] add(%add.5355, %convert_element_type.6704)
  %all-reduce.1100 = f32[] all-reduce(%reduce.1079), channel_id=1903, replica_groups=[1,8]<=[8], use_global_device_ids=true, to_apply=%region_2123.43610.clone
  %convert_element_type.6706 = bf16[] convert(%all-reduce.1100)
  %add.5357 = bf16[] add(%add.5356, %convert_element_type.6706)
  %all-reduce.1101 = f32[] all-reduce(%reduce.1080), channel_id=1904, replica_groups=[1,8]<=[8], use_global_device_ids=true, to_apply=%region_2124.43619.clone
  %convert_element_type.6708 = bf16[] convert(%all-reduce.1101)
  %add.5360 = bf16[] add(%add.5357, %convert_element_type.6708)
  %all-reduce.1102 = f32[] all-reduce(%reduce.1081), channel_id=1905, replica_groups=[1,8]<=[8], use_global_device_ids=true, to_apply=%region_2125.43628.clone
  %convert_element_type.6710 = bf16[] convert(%all-reduce.1102)
  %add.5361 = bf16[] add(%add.5360, %convert_element_type.6710)
  %add.5362 = bf16[] add(%add.5361, %convert_element_type.3329)
  %add.5363 = bf16[] add(%add.5362, %convert_element_type.3331)
  %all-reduce.1103 = f32[] all-reduce(%reduce.1086), channel_id=1906, replica_groups=[1,8]<=[8], use_global_device_ids=true, to_apply=%region_2128.43655.clone
  %convert_element_type.6717 = bf16[] convert(%all-reduce.1103)
  %add.5364 = bf16[] add(%add.5363, %convert_element_type.6717)
  %all-reduce.1104 = f32[] all-reduce(%reduce.1087), channel_id=1907, replica_groups=[1,8]<=[8], use_global_device_ids=true, to_apply=%region_2129.43664.clone
  %convert_element_type.6720 = bf16[] convert(%all-reduce.1104)
  %add.5365 = bf16[] add(%add.5364, %convert_element_type.6720)
  %all-reduce.1105 = f32[] all-reduce(%reduce.1088), channel_id=1908, replica_groups=[1,8]<=[8], use_global_device_ids=true, to_apply=%region_2130.43673.clone
  %convert_element_type.6724 = bf16[] convert(%all-reduce.1105)
  %add.5366 = bf16[] add(%add.5365, %convert_element_type.6724)
  %all-reduce.1106 = f32[] all-reduce(%reduce.1089), channel_id=1909, replica_groups=[1,8]<=[8], use_global_device_ids=true, to_apply=%region_2131.43682.clone
  %convert_element_type.6726 = bf16[] convert(%all-reduce.1106)
  %add.5367 = bf16[] add(%add.5366, %convert_element_type.6726)
  %all-reduce.1107 = f32[] all-reduce(%reduce.1090), channel_id=1910, replica_groups=[1,8]<=[8], use_global_device_ids=true, to_apply=%region_2132.43691.clone
  %convert_element_type.6729 = bf16[] convert(%all-reduce.1107)
  %add.5368 = bf16[] add(%add.5367, %convert_element_type.6729)
  %all-reduce.1108 = f32[] all-reduce(%reduce.1091), channel_id=1911, replica_groups=[1,8]<=[8], use_global_device_ids=true, to_apply=%region_2133.43700.clone
  %convert_element_type.6732 = bf16[] convert(%all-reduce.1108)
  %add.5369 = bf16[] add(%add.5368, %convert_element_type.6732)
  %all-reduce.1109 = f32[] all-reduce(%reduce.1092), channel_id=1912, replica_groups=[1,8]<=[8], use_global_device_ids=true, to_apply=%region_2134.43709.clone
  %convert_element_type.6734 = bf16[] convert(%all-reduce.1109)
  %add.5370 = bf16[] add(%add.5369, %convert_element_type.6734)
  %all-reduce.1110 = f32[] all-reduce(%reduce.1093), channel_id=1913, replica_groups=[1,8]<=[8], use_global_device_ids=true, to_apply=%region_2135.43718.clone
  %convert_element_type.6736 = bf16[] convert(%all-reduce.1110)
  %add.5371 = bf16[] add(%add.5370, %convert_element_type.6736)
  %add.5372 = bf16[] add(%add.5371, %convert_element_type.3352)
  %add.5373 = bf16[] add(%add.5372, %convert_element_type.3354)
  %all-reduce.1111 = f32[] all-reduce(%reduce.1098), channel_id=1914, replica_groups=[1,8]<=[8], use_global_device_ids=true, to_apply=%region_2138.43745.clone
  %convert_element_type.6743 = bf16[] convert(%all-reduce.1111)
  %add.5374 = bf16[] add(%add.5373, %convert_element_type.6743)
  %all-reduce.1112 = f32[] all-reduce(%reduce.1099), channel_id=1915, replica_groups=[1,8]<=[8], use_global_device_ids=true, to_apply=%region_2139.43754.clone
  %convert_element_type.6745 = bf16[] convert(%all-reduce.1112)
  %add.5375 = bf16[] add(%add.5374, %convert_element_type.6745)
  %all-reduce.1113 = f32[] all-reduce(%reduce.1100), channel_id=1916, replica_groups=[1,8]<=[8], use_global_device_ids=true, to_apply=%region_2140.43763.clone
  %convert_element_type.6747 = bf16[] convert(%all-reduce.1113)
  %add.5376 = bf16[] add(%add.5375, %convert_element_type.6747)
  %all-reduce.1114 = f32[] all-reduce(%reduce.1101), channel_id=1917, replica_groups=[1,8]<=[8], use_global_device_ids=true, to_apply=%region_2141.43772.clone
  %convert_element_type.6749 = bf16[] convert(%all-reduce.1114)
  %add.5377 = bf16[] add(%add.5376, %convert_element_type.6749)
  %all-reduce.1115 = f32[] all-reduce(%reduce.1102), channel_id=1918, replica_groups=[1,8]<=[8], use_global_device_ids=true, to_apply=%region_2142.43781.clone
  %convert_element_type.6752 = bf16[] convert(%all-reduce.1115)
  %add.5378 = bf16[] add(%add.5377, %convert_element_type.6752)
  %all-reduce.1116 = f32[] all-reduce(%reduce.1103), channel_id=1919, replica_groups=[1,8]<=[8], use_global_device_ids=true, to_apply=%region_2143.43790.clone
  %convert_element_type.6754 = bf16[] convert(%all-reduce.1116)
  %add.5379 = bf16[] add(%add.5378, %convert_element_type.6754)
  %all-reduce.1117 = f32[] all-reduce(%reduce.1104), channel_id=1920, replica_groups=[1,8]<=[8], use_global_device_ids=true, to_apply=%region_2144.43799.clone
  %convert_element_type.6757 = bf16[] convert(%all-reduce.1117)
  %add.5380 = bf16[] add(%add.5379, %convert_element_type.6757)
  %all-reduce.1118 = f32[] all-reduce(%reduce.1105), channel_id=1921, replica_groups=[1,8]<=[8], use_global_device_ids=true, to_apply=%region_2145.43808.clone
  %convert_element_type.6760 = bf16[] convert(%all-reduce.1118)
  %add.5382 = bf16[] add(%add.5380, %convert_element_type.6760)
  %add.5383 = bf16[] add(%add.5382, %convert_element_type.3376)
  %add.5385 = bf16[] add(%add.5383, %convert_element_type.3378)
  %all-reduce.1119 = f32[] all-reduce(%reduce.1110), channel_id=1922, replica_groups=[1,8]<=[8], use_global_device_ids=true, to_apply=%region_2148.43835.clone
  %convert_element_type.6766 = bf16[] convert(%all-reduce.1119)
  %add.5386 = bf16[] add(%add.5385, %convert_element_type.6766)
  %all-reduce.1120 = f32[] all-reduce(%reduce.1111), channel_id=1923, replica_groups=[1,8]<=[8], use_global_device_ids=true, to_apply=%region_2149.43844.clone
  %convert_element_type.6771 = bf16[] convert(%all-reduce.1120)
  %add.5389 = bf16[] add(%add.5386, %convert_element_type.6771)
  %all-reduce.1121 = f32[] all-reduce(%reduce.1112), channel_id=1924, replica_groups=[1,8]<=[8], use_global_device_ids=true, to_apply=%region_2150.43853.clone
  %convert_element_type.6773 = bf16[] convert(%all-reduce.1121)
  %add.5390 = bf16[] add(%add.5389, %convert_element_type.6773)
  %all-reduce.1122 = f32[] all-reduce(%reduce.1113), channel_id=1925, replica_groups=[1,8]<=[8], use_global_device_ids=true, to_apply=%region_2151.43862.clone
  %convert_element_type.6775 = bf16[] convert(%all-reduce.1122)
  %add.5391 = bf16[] add(%add.5390, %convert_element_type.6775)
  %all-reduce.1123 = f32[] all-reduce(%reduce.1114), channel_id=1926, replica_groups=[1,8]<=[8], use_global_device_ids=true, to_apply=%region_2152.43871.clone
  %convert_element_type.6777 = bf16[] convert(%all-reduce.1123)
  %add.5392 = bf16[] add(%add.5391, %convert_element_type.6777)
  %all-reduce.1124 = f32[] all-reduce(%reduce.1115), channel_id=1927, replica_groups=[1,8]<=[8], use_global_device_ids=true, to_apply=%region_2153.43880.clone
  %convert_element_type.6779 = bf16[] convert(%all-reduce.1124)
  %add.5393 = bf16[] add(%add.5392, %convert_element_type.6779)
  %all-reduce.1125 = f32[] all-reduce(%reduce.1116), channel_id=1928, replica_groups=[1,8]<=[8], use_global_device_ids=true, to_apply=%region_2154.43889.clone
  %convert_element_type.6783 = bf16[] convert(%all-reduce.1125)
  %add.5394 = bf16[] add(%add.5393, %convert_element_type.6783)
  %all-reduce.1126 = f32[] all-reduce(%reduce.1117), channel_id=1929, replica_groups=[1,8]<=[8], use_global_device_ids=true, to_apply=%region_2155.43898.clone
  %convert_element_type.6785 = bf16[] convert(%all-reduce.1126)
  %add.5395 = bf16[] add(%add.5394, %convert_element_type.6785)
  %add.5396 = bf16[] add(%add.5395, %convert_element_type.3399)
  %add.5397 = bf16[] add(%add.5396, %convert_element_type.3401)
  %all-reduce.1127 = f32[] all-reduce(%reduce.1122), channel_id=1930, replica_groups=[1,8]<=[8], use_global_device_ids=true, to_apply=%region_2158.43925.clone
  %convert_element_type.6792 = bf16[] convert(%all-reduce.1127)
  %add.5398 = bf16[] add(%add.5397, %convert_element_type.6792)
  %all-reduce.1128 = f32[] all-reduce(%reduce.1123), channel_id=1931, replica_groups=[1,8]<=[8], use_global_device_ids=true, to_apply=%region_2159.43934.clone
  %convert_element_type.6794 = bf16[] convert(%all-reduce.1128)
  %add.5399 = bf16[] add(%add.5398, %convert_element_type.6794)
  %all-reduce.1129 = f32[] all-reduce(%reduce.1124), channel_id=1932, replica_groups=[1,8]<=[8], use_global_device_ids=true, to_apply=%region_2160.43943.clone
  %convert_element_type.6796 = bf16[] convert(%all-reduce.1129)
  %add.5400 = bf16[] add(%add.5399, %convert_element_type.6796)
  %all-reduce.1130 = f32[] all-reduce(%reduce.1125), channel_id=1933, replica_groups=[1,8]<=[8], use_global_device_ids=true, to_apply=%region_2161.43952.clone
  %convert_element_type.6798 = bf16[] convert(%all-reduce.1130)
  %add.5402 = bf16[] add(%add.5400, %convert_element_type.6798)
  %all-reduce.1131 = f32[] all-reduce(%reduce.1126), channel_id=1934, replica_groups=[1,8]<=[8], use_global_device_ids=true, to_apply=%region_2162.43961.clone
  %convert_element_type.6800 = bf16[] convert(%all-reduce.1131)
  %add.5403 = bf16[] add(%add.5402, %convert_element_type.6800)
  %all-reduce.1132 = f32[] all-reduce(%reduce.1127), channel_id=1935, replica_groups=[1,8]<=[8], use_global_device_ids=true, to_apply=%region_2163.43970.clone
  %convert_element_type.6802 = bf16[] convert(%all-reduce.1132)
  %add.5404 = bf16[] add(%add.5403, %convert_element_type.6802)
  %all-reduce.1133 = f32[] all-reduce(%reduce.1128), channel_id=1936, replica_groups=[1,8]<=[8], use_global_device_ids=true, to_apply=%region_2164.43979.clone
  %convert_element_type.6804 = bf16[] convert(%all-reduce.1133)
  %add.5405 = bf16[] add(%add.5404, %convert_element_type.6804)
  %all-reduce.1134 = f32[] all-reduce(%reduce.1129), channel_id=1937, replica_groups=[1,8]<=[8], use_global_device_ids=true, to_apply=%region_2165.43988.clone
  %convert_element_type.6806 = bf16[] convert(%all-reduce.1134)
  %add.5406 = bf16[] add(%add.5405, %convert_element_type.6806)
  %add.5407 = bf16[] add(%add.5406, %convert_element_type.3422)
  %add.5408 = bf16[] add(%add.5407, %convert_element_type.3427)
  %all-reduce.1135 = f32[] all-reduce(%reduce.1134), channel_id=1938, replica_groups=[1,8]<=[8], use_global_device_ids=true, to_apply=%region_2168.44015.clone
  %convert_element_type.6813 = bf16[] convert(%all-reduce.1135)
  %add.5409 = bf16[] add(%add.5408, %convert_element_type.6813)
  %all-reduce.1136 = f32[] all-reduce(%reduce.1135), channel_id=1939, replica_groups=[1,8]<=[8], use_global_device_ids=true, to_apply=%region_2169.44024.clone
  %convert_element_type.6815 = bf16[] convert(%all-reduce.1136)
  %add.5410 = bf16[] add(%add.5409, %convert_element_type.6815)
  %all-reduce.1137 = f32[] all-reduce(%reduce.1136), channel_id=1940, replica_groups=[1,8]<=[8], use_global_device_ids=true, to_apply=%region_2170.44033.clone
  %convert_element_type.6817 = bf16[] convert(%all-reduce.1137)
  %add.5412 = bf16[] add(%add.5410, %convert_element_type.6817)
  %all-reduce.1138 = f32[] all-reduce(%reduce.1137), channel_id=1941, replica_groups=[1,8]<=[8], use_global_device_ids=true, to_apply=%region_2171.44042.clone
  %convert_element_type.6820 = bf16[] convert(%all-reduce.1138)
  %add.5413 = bf16[] add(%add.5412, %convert_element_type.6820)
  %all-reduce.1139 = f32[] all-reduce(%reduce.1138), channel_id=1942, replica_groups=[1,8]<=[8], use_global_device_ids=true, to_apply=%region_2172.44051.clone
  %convert_element_type.6822 = bf16[] convert(%all-reduce.1139)
  %add.5414 = bf16[] add(%add.5413, %convert_element_type.6822)
  %all-reduce.1140 = f32[] all-reduce(%reduce.1139), channel_id=1943, replica_groups=[1,8]<=[8], use_global_device_ids=true, to_apply=%region_2173.44060.clone
  %convert_element_type.6825 = bf16[] convert(%all-reduce.1140)
  %add.5415 = bf16[] add(%add.5414, %convert_element_type.6825)
  %all-reduce.1141 = f32[] all-reduce(%reduce.1140), channel_id=1944, replica_groups=[1,8]<=[8], use_global_device_ids=true, to_apply=%region_2174.44069.clone
  %convert_element_type.6828 = bf16[] convert(%all-reduce.1141)
  %add.5416 = bf16[] add(%add.5415, %convert_element_type.6828)
  %all-reduce.1142 = f32[] all-reduce(%reduce.1141), channel_id=1945, replica_groups=[1,8]<=[8], use_global_device_ids=true, to_apply=%region_2175.44078.clone
  %convert_element_type.6830 = bf16[] convert(%all-reduce.1142)
  %add.5417 = bf16[] add(%add.5416, %convert_element_type.6830)
  %add.5418 = bf16[] add(%add.5417, %convert_element_type.3445)
  %add.5419 = bf16[] add(%add.5418, %convert_element_type.3447)
  %all-reduce.1143 = f32[] all-reduce(%reduce.1146), channel_id=1946, replica_groups=[1,8]<=[8], use_global_device_ids=true, to_apply=%region_2178.44105.clone
  %convert_element_type.6838 = bf16[] convert(%all-reduce.1143)
  %add.5420 = bf16[] add(%add.5419, %convert_element_type.6838)
  %all-reduce.1144 = f32[] all-reduce(%reduce.1147), channel_id=1947, replica_groups=[1,8]<=[8], use_global_device_ids=true, to_apply=%region_2179.44114.clone
  %convert_element_type.6840 = bf16[] convert(%all-reduce.1144)
  %add.5421 = bf16[] add(%add.5420, %convert_element_type.6840)
  %all-reduce.1145 = f32[] all-reduce(%reduce.1148), channel_id=1948, replica_groups=[1,8]<=[8], use_global_device_ids=true, to_apply=%region_2180.44123.clone
  %convert_element_type.6843 = bf16[] convert(%all-reduce.1145)
  %add.5422 = bf16[] add(%add.5421, %convert_element_type.6843)
  %all-reduce.1146 = f32[] all-reduce(%reduce.1149), channel_id=1949, replica_groups=[1,8]<=[8], use_global_device_ids=true, to_apply=%region_2181.44132.clone
  %convert_element_type.6846 = bf16[] convert(%all-reduce.1146)
  %add.5423 = bf16[] add(%add.5422, %convert_element_type.6846)
  %all-reduce.1147 = f32[] all-reduce(%reduce.1150), channel_id=1950, replica_groups=[1,8]<=[8], use_global_device_ids=true, to_apply=%region_2182.44141.clone
  %convert_element_type.6849 = bf16[] convert(%all-reduce.1147)
  %add.5424 = bf16[] add(%add.5423, %convert_element_type.6849)
  %all-reduce.1148 = f32[] all-reduce(%reduce.1151), channel_id=1951, replica_groups=[1,8]<=[8], use_global_device_ids=true, to_apply=%region_2183.44150.clone
  %convert_element_type.6851 = bf16[] convert(%all-reduce.1148)
  %add.5425 = bf16[] add(%add.5424, %convert_element_type.6851)
  %all-reduce.1149 = f32[] all-reduce(%reduce.1152), channel_id=1952, replica_groups=[1,8]<=[8], use_global_device_ids=true, to_apply=%region_2184.44159.clone
  %convert_element_type.6853 = bf16[] convert(%all-reduce.1149)
  %add.5426 = bf16[] add(%add.5425, %convert_element_type.6853)
  %all-reduce.1150 = f32[] all-reduce(%reduce.1153), channel_id=1953, replica_groups=[1,8]<=[8], use_global_device_ids=true, to_apply=%region_2185.44168.clone
  %convert_element_type.6855 = bf16[] convert(%all-reduce.1150)
  %add.5427 = bf16[] add(%add.5426, %convert_element_type.6855)
  %add.5428 = bf16[] add(%add.5427, %convert_element_type.3465)
  %add.5429 = bf16[] add(%add.5428, %convert_element_type.3467)
  %all-reduce.1151 = f32[] all-reduce(%reduce.1158), channel_id=1954, replica_groups=[1,8]<=[8], use_global_device_ids=true, to_apply=%region_2188.44195.clone
  %convert_element_type.6862 = bf16[] convert(%all-reduce.1151)
  %add.5430 = bf16[] add(%add.5429, %convert_element_type.6862)
  %all-reduce.1152 = f32[] all-reduce(%reduce.1159), channel_id=1955, replica_groups=[1,8]<=[8], use_global_device_ids=true, to_apply=%region_2189.44204.clone
  %convert_element_type.6865 = bf16[] convert(%all-reduce.1152)
  %add.5431 = bf16[] add(%add.5430, %convert_element_type.6865)
  %all-reduce.1153 = f32[] all-reduce(%reduce.1160), channel_id=1956, replica_groups=[1,8]<=[8], use_global_device_ids=true, to_apply=%region_2190.44213.clone
  %convert_element_type.6867 = bf16[] convert(%all-reduce.1153)
  %add.5432 = bf16[] add(%add.5431, %convert_element_type.6867)
  %all-reduce.1154 = f32[] all-reduce(%reduce.1161), channel_id=1957, replica_groups=[1,8]<=[8], use_global_device_ids=true, to_apply=%region_2191.44222.clone
  %convert_element_type.6870 = bf16[] convert(%all-reduce.1154)
  %add.5433 = bf16[] add(%add.5432, %convert_element_type.6870)
  %all-reduce.1155 = f32[] all-reduce(%reduce.1162), channel_id=1958, replica_groups=[1,8]<=[8], use_global_device_ids=true, to_apply=%region_2192.44231.clone
  %convert_element_type.6873 = bf16[] convert(%all-reduce.1155)
  %add.5434 = bf16[] add(%add.5433, %convert_element_type.6873)
  %all-reduce.1156 = f32[] all-reduce(%reduce.1163), channel_id=1959, replica_groups=[1,8]<=[8], use_global_device_ids=true, to_apply=%region_2193.44240.clone
  %convert_element_type.6876 = bf16[] convert(%all-reduce.1156)
  %add.5435 = bf16[] add(%add.5434, %convert_element_type.6876)
  %all-reduce.1157 = f32[] all-reduce(%reduce.1164), channel_id=1960, replica_groups=[1,8]<=[8], use_global_device_ids=true, to_apply=%region_2194.44249.clone
  %convert_element_type.6878 = bf16[] convert(%all-reduce.1157)
  %add.5436 = bf16[] add(%add.5435, %convert_element_type.6878)
  %all-reduce.1158 = f32[] all-reduce(%reduce.1165), channel_id=1961, replica_groups=[1,8]<=[8], use_global_device_ids=true, to_apply=%region_2195.44258.clone
  %convert_element_type.6881 = bf16[] convert(%all-reduce.1158)
  %add.5437 = bf16[] add(%add.5436, %convert_element_type.6881)
  %add.5438 = bf16[] add(%add.5437, %convert_element_type.3490)
  %add.5439 = bf16[] add(%add.5438, %convert_element_type.3492)
  %all-reduce.1159 = f32[] all-reduce(%reduce.1170), channel_id=1962, replica_groups=[1,8]<=[8], use_global_device_ids=true, to_apply=%region_2198.44285.clone
  %convert_element_type.6887 = bf16[] convert(%all-reduce.1159)
  %add.5440 = bf16[] add(%add.5439, %convert_element_type.6887)
  %all-reduce.1160 = f32[] all-reduce(%reduce.1171), channel_id=1963, replica_groups=[1,8]<=[8], use_global_device_ids=true, to_apply=%region_2199.44294.clone
  %convert_element_type.6889 = bf16[] convert(%all-reduce.1160)
  %add.5441 = bf16[] add(%add.5440, %convert_element_type.6889)
  %all-reduce.1161 = f32[] all-reduce(%reduce.1172), channel_id=1964, replica_groups=[1,8]<=[8], use_global_device_ids=true, to_apply=%region_2200.44303.clone
  %convert_element_type.6891 = bf16[] convert(%all-reduce.1161)
  %add.5443 = bf16[] add(%add.5441, %convert_element_type.6891)
  %all-reduce.1162 = f32[] all-reduce(%reduce.1173), channel_id=1965, replica_groups=[1,8]<=[8], use_global_device_ids=true, to_apply=%region_2201.44312.clone
  %convert_element_type.6893 = bf16[] convert(%all-reduce.1162)
  %add.5444 = bf16[] add(%add.5443, %convert_element_type.6893)
  %all-reduce.1163 = f32[] all-reduce(%reduce.1174), channel_id=1966, replica_groups=[1,8]<=[8], use_global_device_ids=true, to_apply=%region_2202.44321.clone
  %convert_element_type.6896 = bf16[] convert(%all-reduce.1163)
  %add.5445 = bf16[] add(%add.5444, %convert_element_type.6896)
  %all-reduce.1164 = f32[] all-reduce(%reduce.1175), channel_id=1967, replica_groups=[1,8]<=[8], use_global_device_ids=true, to_apply=%region_2203.44330.clone
  %convert_element_type.6898 = bf16[] convert(%all-reduce.1164)
  %add.5446 = bf16[] add(%add.5445, %convert_element_type.6898)
  %all-reduce.1165 = f32[] all-reduce(%reduce.1176), channel_id=1968, replica_groups=[1,8]<=[8], use_global_device_ids=true, to_apply=%region_2204.44339.clone
  %convert_element_type.6900 = bf16[] convert(%all-reduce.1165)
  %add.5447 = bf16[] add(%add.5446, %convert_element_type.6900)
  %all-reduce.1166 = f32[] all-reduce(%reduce.1177), channel_id=1969, replica_groups=[1,8]<=[8], use_global_device_ids=true, to_apply=%region_2205.44348.clone
  %convert_element_type.6902 = bf16[] convert(%all-reduce.1166)
  %add.5448 = bf16[] add(%add.5447, %convert_element_type.6902)
  %add.5449 = bf16[] add(%add.5448, %convert_element_type.3512)
  %add.5450 = bf16[] add(%add.5449, %convert_element_type.3514)
  %all-reduce.1167 = f32[] all-reduce(%reduce.1182), channel_id=1970, replica_groups=[1,8]<=[8], use_global_device_ids=true, to_apply=%region_2208.44375.clone
  %convert_element_type.6909 = bf16[] convert(%all-reduce.1167)
  %add.5451 = bf16[] add(%add.5450, %convert_element_type.6909)
  %all-reduce.1168 = f32[] all-reduce(%reduce.1183), channel_id=1971, replica_groups=[1,8]<=[8], use_global_device_ids=true, to_apply=%region_2209.44384.clone
  %convert_element_type.6911 = bf16[] convert(%all-reduce.1168)
  %add.5452 = bf16[] add(%add.5451, %convert_element_type.6911)
  %all-reduce.1169 = f32[] all-reduce(%reduce.1184), channel_id=1972, replica_groups=[1,8]<=[8], use_global_device_ids=true, to_apply=%region_2210.44393.clone
  %convert_element_type.6913 = bf16[] convert(%all-reduce.1169)
  %add.5453 = bf16[] add(%add.5452, %convert_element_type.6913)
  %all-reduce.1170 = f32[] all-reduce(%reduce.1185), channel_id=1973, replica_groups=[1,8]<=[8], use_global_device_ids=true, to_apply=%region_2211.44402.clone
  %convert_element_type.6915 = bf16[] convert(%all-reduce.1170)
  %add.5455 = bf16[] add(%add.5453, %convert_element_type.6915)
  %all-reduce.1171 = f32[] all-reduce(%reduce.1186), channel_id=1974, replica_groups=[1,8]<=[8], use_global_device_ids=true, to_apply=%region_2212.44411.clone
  %convert_element_type.6918 = bf16[] convert(%all-reduce.1171)
  %add.5456 = bf16[] add(%add.5455, %convert_element_type.6918)
  %all-reduce.1172 = f32[] all-reduce(%reduce.1187), channel_id=1975, replica_groups=[1,8]<=[8], use_global_device_ids=true, to_apply=%region_2213.44420.clone
  %convert_element_type.6920 = bf16[] convert(%all-reduce.1172)
  %add.5457 = bf16[] add(%add.5456, %convert_element_type.6920)
  %all-reduce.1173 = f32[] all-reduce(%reduce.1188), channel_id=1976, replica_groups=[1,8]<=[8], use_global_device_ids=true, to_apply=%region_2214.44429.clone
  %convert_element_type.6922 = bf16[] convert(%all-reduce.1173)
  %add.5458 = bf16[] add(%add.5457, %convert_element_type.6922)
  %all-reduce.1174 = f32[] all-reduce(%reduce.1189), channel_id=1977, replica_groups=[1,8]<=[8], use_global_device_ids=true, to_apply=%region_2215.44438.clone
  %convert_element_type.6924 = bf16[] convert(%all-reduce.1174)
  %add.5459 = bf16[] add(%add.5458, %convert_element_type.6924)
  %add.5460 = bf16[] add(%add.5459, %convert_element_type.3538)
  %add.5461 = bf16[] add(%add.5460, %convert_element_type.3540)
  %all-reduce.1175 = f32[] all-reduce(%reduce.1194), channel_id=1978, replica_groups=[1,8]<=[8], use_global_device_ids=true, to_apply=%region_2218.44465.clone
  %convert_element_type.6930 = bf16[] convert(%all-reduce.1175)
  %add.5462 = bf16[] add(%add.5461, %convert_element_type.6930)
  %all-reduce.1176 = f32[] all-reduce(%reduce.1195), channel_id=1979, replica_groups=[1,8]<=[8], use_global_device_ids=true, to_apply=%region_2219.44474.clone
  %convert_element_type.6932 = bf16[] convert(%all-reduce.1176)
  %add.5463 = bf16[] add(%add.5462, %convert_element_type.6932)
  %all-reduce.1177 = f32[] all-reduce(%reduce.1196), channel_id=1980, replica_groups=[1,8]<=[8], use_global_device_ids=true, to_apply=%region_2220.44483.clone
  %convert_element_type.6934 = bf16[] convert(%all-reduce.1177)
  %add.5464 = bf16[] add(%add.5463, %convert_element_type.6934)
  %all-reduce.1178 = f32[] all-reduce(%reduce.1197), channel_id=1981, replica_groups=[1,8]<=[8], use_global_device_ids=true, to_apply=%region_2221.44492.clone
  %convert_element_type.6937 = bf16[] convert(%all-reduce.1178)
  %add.5467 = bf16[] add(%add.5464, %convert_element_type.6937)
  %all-reduce.1179 = f32[] all-reduce(%reduce.1198), channel_id=1982, replica_groups=[1,8]<=[8], use_global_device_ids=true, to_apply=%region_2222.44501.clone
  %convert_element_type.6939 = bf16[] convert(%all-reduce.1179)
  %add.5468 = bf16[] add(%add.5467, %convert_element_type.6939)
  %all-reduce.1180 = f32[] all-reduce(%reduce.1199), channel_id=1983, replica_groups=[1,8]<=[8], use_global_device_ids=true, to_apply=%region_2223.44510.clone
  %convert_element_type.6942 = bf16[] convert(%all-reduce.1180)
  %add.5469 = bf16[] add(%add.5468, %convert_element_type.6942)
  %all-reduce.1181 = f32[] all-reduce(%reduce.1200), channel_id=1984, replica_groups=[1,8]<=[8], use_global_device_ids=true, to_apply=%region_2224.44519.clone
  %convert_element_type.6944 = bf16[] convert(%all-reduce.1181)
  %add.5470 = bf16[] add(%add.5469, %convert_element_type.6944)
  %all-reduce.1182 = f32[] all-reduce(%reduce.1201), channel_id=1985, replica_groups=[1,8]<=[8], use_global_device_ids=true, to_apply=%region_2225.44528.clone
  %convert_element_type.6946 = bf16[] convert(%all-reduce.1182)
  %add.5471 = bf16[] add(%add.5470, %convert_element_type.6946)
  %add.5472 = bf16[] add(%add.5471, %convert_element_type.3559)
  %add.5473 = bf16[] add(%add.5472, %convert_element_type.3562)
  %all-reduce.1183 = f32[] all-reduce(%reduce.1206), channel_id=1986, replica_groups=[1,8]<=[8], use_global_device_ids=true, to_apply=%region_2228.44555.clone
  %convert_element_type.6953 = bf16[] convert(%all-reduce.1183)
  %add.5474 = bf16[] add(%add.5473, %convert_element_type.6953)
  %all-reduce.1184 = f32[] all-reduce(%reduce.1207), channel_id=1987, replica_groups=[1,8]<=[8], use_global_device_ids=true, to_apply=%region_2229.44564.clone
  %convert_element_type.6955 = bf16[] convert(%all-reduce.1184)
  %add.5475 = bf16[] add(%add.5474, %convert_element_type.6955)
  %all-reduce.1185 = f32[] all-reduce(%reduce.1208), channel_id=1988, replica_groups=[1,8]<=[8], use_global_device_ids=true, to_apply=%region_2230.44573.clone
  %convert_element_type.6957 = bf16[] convert(%all-reduce.1185)
  %add.5476 = bf16[] add(%add.5475, %convert_element_type.6957)
  %all-reduce.1186 = f32[] all-reduce(%reduce.1209), channel_id=1989, replica_groups=[1,8]<=[8], use_global_device_ids=true, to_apply=%region_2231.44582.clone
  %convert_element_type.6959 = bf16[] convert(%all-reduce.1186)
  %add.5477 = bf16[] add(%add.5476, %convert_element_type.6959)
  %all-reduce.1187 = f32[] all-reduce(%reduce.1210), channel_id=1990, replica_groups=[1,8]<=[8], use_global_device_ids=true, to_apply=%region_2232.44591.clone
  %convert_element_type.6962 = bf16[] convert(%all-reduce.1187)
  %add.5479 = bf16[] add(%add.5477, %convert_element_type.6962)
  %all-reduce.1188 = f32[] all-reduce(%reduce.1211), channel_id=1991, replica_groups=[1,8]<=[8], use_global_device_ids=true, to_apply=%region_2233.44600.clone
  %convert_element_type.6964 = bf16[] convert(%all-reduce.1188)
  %add.5480 = bf16[] add(%add.5479, %convert_element_type.6964)
  %all-reduce.1189 = f32[] all-reduce(%reduce.1212), channel_id=1992, replica_groups=[1,8]<=[8], use_global_device_ids=true, to_apply=%region_2234.44609.clone
  %convert_element_type.6967 = bf16[] convert(%all-reduce.1189)
  %add.5481 = bf16[] add(%add.5480, %convert_element_type.6967)
  %all-reduce.1190 = f32[] all-reduce(%reduce.1213), channel_id=1993, replica_groups=[1,8]<=[8], use_global_device_ids=true, to_apply=%region_2235.44618.clone
  %convert_element_type.6969 = bf16[] convert(%all-reduce.1190)
  %add.5482 = bf16[] add(%add.5481, %convert_element_type.6969)
  %add.5483 = bf16[] add(%add.5482, %convert_element_type.3582)
  %add.5484 = bf16[] add(%add.5483, %convert_element_type.3585)
  %all-reduce.1191 = f32[] all-reduce(%reduce.1218), channel_id=1994, replica_groups=[1,8]<=[8], use_global_device_ids=true, to_apply=%region_2238.44645.clone
  %convert_element_type.6975 = bf16[] convert(%all-reduce.1191)
  %add.5485 = bf16[] add(%add.5484, %convert_element_type.6975)
  %all-reduce.1192 = f32[] all-reduce(%reduce.1219), channel_id=1995, replica_groups=[1,8]<=[8], use_global_device_ids=true, to_apply=%region_2239.44654.clone
  %convert_element_type.6977 = bf16[] convert(%all-reduce.1192)
  %add.5486 = bf16[] add(%add.5485, %convert_element_type.6977)
  %all-reduce.1193 = f32[] all-reduce(%reduce.1220), channel_id=1996, replica_groups=[1,8]<=[8], use_global_device_ids=true, to_apply=%region_2240.44663.clone
  %convert_element_type.6979 = bf16[] convert(%all-reduce.1193)
  %add.5487 = bf16[] add(%add.5486, %convert_element_type.6979)
  %all-reduce.1194 = f32[] all-reduce(%reduce.1221), channel_id=1997, replica_groups=[1,8]<=[8], use_global_device_ids=true, to_apply=%region_2241.44672.clone
  %convert_element_type.6981 = bf16[] convert(%all-reduce.1194)
  %add.5488 = bf16[] add(%add.5487, %convert_element_type.6981)
  %all-reduce.1195 = f32[] all-reduce(%reduce.1222), channel_id=1998, replica_groups=[1,8]<=[8], use_global_device_ids=true, to_apply=%region_2242.44681.clone
  %convert_element_type.6983 = bf16[] convert(%all-reduce.1195)
  %add.5489 = bf16[] add(%add.5488, %convert_element_type.6983)
  %all-reduce.1196 = f32[] all-reduce(%reduce.1223), channel_id=1999, replica_groups=[1,8]<=[8], use_global_device_ids=true, to_apply=%region_2243.44690.clone
  %convert_element_type.6985 = bf16[] convert(%all-reduce.1196)
  %add.5490 = bf16[] add(%add.5489, %convert_element_type.6985)
  %all-reduce.1197 = f32[] all-reduce(%reduce.1224), channel_id=2000, replica_groups=[1,8]<=[8], use_global_device_ids=true, to_apply=%region_2244.44699.clone
  %convert_element_type.6987 = bf16[] convert(%all-reduce.1197)
  %add.5491 = bf16[] add(%add.5490, %convert_element_type.6987)
  %all-reduce.1198 = f32[] all-reduce(%reduce.1225), channel_id=2001, replica_groups=[1,8]<=[8], use_global_device_ids=true, to_apply=%region_2245.44708.clone
  %convert_element_type.6990 = bf16[] convert(%all-reduce.1198)
  %add.5492 = bf16[] add(%add.5491, %convert_element_type.6990)
  %add.5493 = bf16[] add(%add.5492, %convert_element_type.3607)
  %add.5494 = bf16[] add(%add.5493, %convert_element_type.3609)
  %all-reduce.1199 = f32[] all-reduce(%reduce.1230), channel_id=2002, replica_groups=[1,8]<=[8], use_global_device_ids=true, to_apply=%region_2248.44735.clone
  %convert_element_type.6998 = bf16[] convert(%all-reduce.1199)
  %add.5495 = bf16[] add(%add.5494, %convert_element_type.6998)
  %all-reduce.1200 = f32[] all-reduce(%reduce.1231), channel_id=2003, replica_groups=[1,8]<=[8], use_global_device_ids=true, to_apply=%region_2249.44744.clone
  %convert_element_type.7000 = bf16[] convert(%all-reduce.1200)
  %add.5496 = bf16[] add(%add.5495, %convert_element_type.7000)
  %all-reduce.1201 = f32[] all-reduce(%reduce.1232), channel_id=2004, replica_groups=[1,8]<=[8], use_global_device_ids=true, to_apply=%region_2250.44753.clone
  %convert_element_type.7002 = bf16[] convert(%all-reduce.1201)
  %add.5497 = bf16[] add(%add.5496, %convert_element_type.7002)
  %all-reduce.1202 = f32[] all-reduce(%reduce.1233), channel_id=2005, replica_groups=[1,8]<=[8], use_global_device_ids=true, to_apply=%region_2251.44762.clone
  %convert_element_type.7005 = bf16[] convert(%all-reduce.1202)
  %add.5498 = bf16[] add(%add.5497, %convert_element_type.7005)
  %all-reduce.1203 = f32[] all-reduce(%reduce.1234), channel_id=2006, replica_groups=[1,8]<=[8], use_global_device_ids=true, to_apply=%region_2252.44771.clone
  %convert_element_type.7007 = bf16[] convert(%all-reduce.1203)
  %add.5499 = bf16[] add(%add.5498, %convert_element_type.7007)
  %all-reduce.1204 = f32[] all-reduce(%reduce.1235), channel_id=2007, replica_groups=[1,8]<=[8], use_global_device_ids=true, to_apply=%region_2253.44780.clone
  %convert_element_type.7009 = bf16[] convert(%all-reduce.1204)
  %add.5500 = bf16[] add(%add.5499, %convert_element_type.7009)
  %all-reduce.1205 = f32[] all-reduce(%reduce.1236), channel_id=2008, replica_groups=[1,8]<=[8], use_global_device_ids=true, to_apply=%region_2254.44789.clone
  %convert_element_type.7012 = bf16[] convert(%all-reduce.1205)
  %add.5501 = bf16[] add(%add.5500, %convert_element_type.7012)
  %all-reduce.1206 = f32[] all-reduce(%reduce.1237), channel_id=2009, replica_groups=[1,8]<=[8], use_global_device_ids=true, to_apply=%region_2255.44798.clone
  %convert_element_type.7014 = bf16[] convert(%all-reduce.1206)
  %add.5502 = bf16[] add(%add.5501, %convert_element_type.7014)
  %add.5504 = bf16[] add(%add.5502, %convert_element_type.3631)
  %add.5505 = bf16[] add(%add.5504, %convert_element_type.3633)
  %all-reduce.1207 = f32[] all-reduce(%reduce.1242), channel_id=2010, replica_groups=[1,8]<=[8], use_global_device_ids=true, to_apply=%region_2258.44825.clone
  %convert_element_type.7023 = bf16[] convert(%all-reduce.1207)
  %add.5506 = bf16[] add(%add.5505, %convert_element_type.7023)
  %all-reduce.1208 = f32[] all-reduce(%reduce.1243), channel_id=2011, replica_groups=[1,8]<=[8], use_global_device_ids=true, to_apply=%region_2259.44834.clone
  %convert_element_type.7025 = bf16[] convert(%all-reduce.1208)
  %add.5507 = bf16[] add(%add.5506, %convert_element_type.7025)
  %all-reduce.1209 = f32[] all-reduce(%reduce.1244), channel_id=2012, replica_groups=[1,8]<=[8], use_global_device_ids=true, to_apply=%region_2260.44843.clone
  %convert_element_type.7027 = bf16[] convert(%all-reduce.1209)
  %add.5508 = bf16[] add(%add.5507, %convert_element_type.7027)
  %all-reduce.1210 = f32[] all-reduce(%reduce.1245), channel_id=2013, replica_groups=[1,8]<=[8], use_global_device_ids=true, to_apply=%region_2261.44852.clone
  %convert_element_type.7029 = bf16[] convert(%all-reduce.1210)
  %add.5509 = bf16[] add(%add.5508, %convert_element_type.7029)
  %all-reduce.1211 = f32[] all-reduce(%reduce.1246), channel_id=2014, replica_groups=[1,8]<=[8], use_global_device_ids=true, to_apply=%region_2262.44861.clone
  %convert_element_type.7031 = bf16[] convert(%all-reduce.1211)
  %add.5510 = bf16[] add(%add.5509, %convert_element_type.7031)
  %all-reduce.1212 = f32[] all-reduce(%reduce.1247), channel_id=2015, replica_groups=[1,8]<=[8], use_global_device_ids=true, to_apply=%region_2263.44870.clone
  %convert_element_type.7035 = bf16[] convert(%all-reduce.1212)
  %add.5511 = bf16[] add(%add.5510, %convert_element_type.7035)
  %all-reduce.1213 = f32[] all-reduce(%reduce.1248), channel_id=2016, replica_groups=[1,8]<=[8], use_global_device_ids=true, to_apply=%region_2264.44879.clone
  %convert_element_type.7037 = bf16[] convert(%all-reduce.1213)
  %add.5512 = bf16[] add(%add.5511, %convert_element_type.7037)
  %all-reduce.1214 = f32[] all-reduce(%reduce.1249), channel_id=2017, replica_groups=[1,8]<=[8], use_global_device_ids=true, to_apply=%region_2265.44888.clone
  %convert_element_type.7040 = bf16[] convert(%all-reduce.1214)
  %add.5513 = bf16[] add(%add.5512, %convert_element_type.7040)
  %add.5514 = bf16[] add(%add.5513, %convert_element_type.3652)
  %add.5515 = bf16[] add(%add.5514, %convert_element_type.3654)
  %all-reduce.1215 = f32[] all-reduce(%reduce.1254), channel_id=2018, replica_groups=[1,8]<=[8], use_global_device_ids=true, to_apply=%region_2268.44915.clone
  %convert_element_type.7046 = bf16[] convert(%all-reduce.1215)
  %add.5516 = bf16[] add(%add.5515, %convert_element_type.7046)
  %all-reduce.1216 = f32[] all-reduce(%reduce.1255), channel_id=2019, replica_groups=[1,8]<=[8], use_global_device_ids=true, to_apply=%region_2269.44924.clone
  %convert_element_type.7048 = bf16[] convert(%all-reduce.1216)
  %add.5517 = bf16[] add(%add.5516, %convert_element_type.7048)
  %all-reduce.1217 = f32[] all-reduce(%reduce.1256), channel_id=2020, replica_groups=[1,8]<=[8], use_global_device_ids=true, to_apply=%region_2270.44933.clone
  %convert_element_type.7050 = bf16[] convert(%all-reduce.1217)
  %add.5518 = bf16[] add(%add.5517, %convert_element_type.7050)
  %all-reduce.1218 = f32[] all-reduce(%reduce.1257), channel_id=2021, replica_groups=[1,8]<=[8], use_global_device_ids=true, to_apply=%region_2271.44942.clone
  %convert_element_type.7054 = bf16[] convert(%all-reduce.1218)
  %add.5519 = bf16[] add(%add.5518, %convert_element_type.7054)
  %all-reduce.1219 = f32[] all-reduce(%reduce.1258), channel_id=2022, replica_groups=[1,8]<=[8], use_global_device_ids=true, to_apply=%region_2272.44951.clone
  %convert_element_type.7056 = bf16[] convert(%all-reduce.1219)
  %add.5520 = bf16[] add(%add.5519, %convert_element_type.7056)
  %all-reduce.1220 = f32[] all-reduce(%reduce.1259), channel_id=2023, replica_groups=[1,8]<=[8], use_global_device_ids=true, to_apply=%region_2273.44960.clone
  %convert_element_type.7060 = bf16[] convert(%all-reduce.1220)
  %add.5521 = bf16[] add(%add.5520, %convert_element_type.7060)
  %all-reduce.1221 = f32[] all-reduce(%reduce.1260), channel_id=2024, replica_groups=[1,8]<=[8], use_global_device_ids=true, to_apply=%region_2274.44969.clone
  %convert_element_type.7063 = bf16[] convert(%all-reduce.1221)
  %add.5522 = bf16[] add(%add.5521, %convert_element_type.7063)
  %all-reduce.1222 = f32[] all-reduce(%reduce.1261), channel_id=2025, replica_groups=[1,8]<=[8], use_global_device_ids=true, to_apply=%region_2275.44978.clone
  %convert_element_type.7065 = bf16[] convert(%all-reduce.1222)
  %add.5523 = bf16[] add(%add.5522, %convert_element_type.7065)
  %add.5524 = bf16[] add(%add.5523, %convert_element_type.3676)
  %add.5525 = bf16[] add(%add.5524, %convert_element_type.3679)
  %all-reduce.1223 = f32[] all-reduce(%reduce.1266), channel_id=2026, replica_groups=[1,8]<=[8], use_global_device_ids=true, to_apply=%region_2278.45005.clone
  %convert_element_type.7071 = bf16[] convert(%all-reduce.1223)
  %add.5526 = bf16[] add(%add.5525, %convert_element_type.7071)
  %all-reduce.1224 = f32[] all-reduce(%reduce.1267), channel_id=2027, replica_groups=[1,8]<=[8], use_global_device_ids=true, to_apply=%region_2279.45014.clone
  %convert_element_type.7075 = bf16[] convert(%all-reduce.1224)
  %add.5527 = bf16[] add(%add.5526, %convert_element_type.7075)
  %all-reduce.1225 = f32[] all-reduce(%reduce.1268), channel_id=2028, replica_groups=[1,8]<=[8], use_global_device_ids=true, to_apply=%region_2280.45023.clone
  %convert_element_type.7077 = bf16[] convert(%all-reduce.1225)
  %add.5528 = bf16[] add(%add.5527, %convert_element_type.7077)
  %all-reduce.1226 = f32[] all-reduce(%reduce.1269), channel_id=2029, replica_groups=[1,8]<=[8], use_global_device_ids=true, to_apply=%region_2281.45032.clone
  %convert_element_type.7079 = bf16[] convert(%all-reduce.1226)
  %add.5529 = bf16[] add(%add.5528, %convert_element_type.7079)
  %all-reduce.1227 = f32[] all-reduce(%reduce.1270), channel_id=2030, replica_groups=[1,8]<=[8], use_global_device_ids=true, to_apply=%region_2282.45041.clone
  %convert_element_type.7081 = bf16[] convert(%all-reduce.1227)
  %add.5530 = bf16[] add(%add.5529, %convert_element_type.7081)
  %all-reduce.1228 = f32[] all-reduce(%reduce.1271), channel_id=2031, replica_groups=[1,8]<=[8], use_global_device_ids=true, to_apply=%region_2283.45050.clone
  %convert_element_type.7084 = bf16[] convert(%all-reduce.1228)
  %add.5531 = bf16[] add(%add.5530, %convert_element_type.7084)
  %all-reduce.1229 = f32[] all-reduce(%reduce.1272), channel_id=2032, replica_groups=[1,8]<=[8], use_global_device_ids=true, to_apply=%region_2284.45059.clone
  %convert_element_type.7086 = bf16[] convert(%all-reduce.1229)
  %add.5532 = bf16[] add(%add.5531, %convert_element_type.7086)
  %all-reduce.1230 = f32[] all-reduce(%reduce.1273), channel_id=2033, replica_groups=[1,8]<=[8], use_global_device_ids=true, to_apply=%region_2285.45068.clone
  %convert_element_type.7088 = bf16[] convert(%all-reduce.1230)
  %add.5533 = bf16[] add(%add.5532, %convert_element_type.7088)
  %add.5535 = bf16[] add(%add.5533, %convert_element_type.3701)
  %add.5537 = bf16[] add(%add.5535, %convert_element_type.3703)
  %all-reduce.1231 = f32[] all-reduce(%reduce.1278), channel_id=2034, replica_groups=[1,8]<=[8], use_global_device_ids=true, to_apply=%region_2288.45095.clone
  %convert_element_type.7094 = bf16[] convert(%all-reduce.1231)
  %add.5538 = bf16[] add(%add.5537, %convert_element_type.7094)
  %all-reduce.1232 = f32[] all-reduce(%reduce.1279), channel_id=2035, replica_groups=[1,8]<=[8], use_global_device_ids=true, to_apply=%region_2289.45104.clone
  %convert_element_type.7097 = bf16[] convert(%all-reduce.1232)
  %add.5539 = bf16[] add(%add.5538, %convert_element_type.7097)
  %all-reduce.1233 = f32[] all-reduce(%reduce.1280), channel_id=2036, replica_groups=[1,8]<=[8], use_global_device_ids=true, to_apply=%region_2290.45113.clone
  %convert_element_type.7099 = bf16[] convert(%all-reduce.1233)
  %add.5540 = bf16[] add(%add.5539, %convert_element_type.7099)
  %all-reduce.1234 = f32[] all-reduce(%reduce.1281), channel_id=2037, replica_groups=[1,8]<=[8], use_global_device_ids=true, to_apply=%region_2291.45122.clone
  %convert_element_type.7101 = bf16[] convert(%all-reduce.1234)
  %add.5541 = bf16[] add(%add.5540, %convert_element_type.7101)
  %all-reduce.1235 = f32[] all-reduce(%reduce.1282), channel_id=2038, replica_groups=[1,8]<=[8], use_global_device_ids=true, to_apply=%region_2292.45131.clone
  %convert_element_type.7104 = bf16[] convert(%all-reduce.1235)
  %add.5542 = bf16[] add(%add.5541, %convert_element_type.7104)
  %all-reduce.1236 = f32[] all-reduce(%reduce.1283), channel_id=2039, replica_groups=[1,8]<=[8], use_global_device_ids=true, to_apply=%region_2293.45140.clone
  %convert_element_type.7107 = bf16[] convert(%all-reduce.1236)
  %add.5543 = bf16[] add(%add.5542, %convert_element_type.7107)
  %all-reduce.1237 = f32[] all-reduce(%reduce.1284), channel_id=2040, replica_groups=[1,8]<=[8], use_global_device_ids=true, to_apply=%region_2294.45149.clone
  %convert_element_type.7109 = bf16[] convert(%all-reduce.1237)
  %add.5544 = bf16[] add(%add.5543, %convert_element_type.7109)
  %all-reduce.1238 = f32[] all-reduce(%reduce.1285), channel_id=2041, replica_groups=[1,8]<=[8], use_global_device_ids=true, to_apply=%region_2295.45158.clone
  %convert_element_type.7111 = bf16[] convert(%all-reduce.1238)
  %add.5545 = bf16[] add(%add.5544, %convert_element_type.7111)
  %add.5546 = bf16[] add(%add.5545, %convert_element_type.3723)
  %add.5547 = bf16[] add(%add.5546, %convert_element_type.3725)
  %all-reduce.1239 = f32[] all-reduce(%reduce.1290), channel_id=2042, replica_groups=[1,8]<=[8], use_global_device_ids=true, to_apply=%region_2298.45185.clone
  %convert_element_type.7119 = bf16[] convert(%all-reduce.1239)
  %add.5548 = bf16[] add(%add.5547, %convert_element_type.7119)
  %all-reduce.1240 = f32[] all-reduce(%reduce.1291), channel_id=2043, replica_groups=[1,8]<=[8], use_global_device_ids=true, to_apply=%region_2299.45194.clone
  %convert_element_type.7121 = bf16[] convert(%all-reduce.1240)
  %add.5549 = bf16[] add(%add.5548, %convert_element_type.7121)
  %all-reduce.1241 = f32[] all-reduce(%reduce.1292), channel_id=2044, replica_groups=[1,8]<=[8], use_global_device_ids=true, to_apply=%region_2300.45203.clone
  %convert_element_type.7124 = bf16[] convert(%all-reduce.1241)
  %add.5550 = bf16[] add(%add.5549, %convert_element_type.7124)
  %all-reduce.1242 = f32[] all-reduce(%reduce.1293), channel_id=2045, replica_groups=[1,8]<=[8], use_global_device_ids=true, to_apply=%region_2301.45212.clone
  %convert_element_type.7126 = bf16[] convert(%all-reduce.1242)
  %add.5551 = bf16[] add(%add.5550, %convert_element_type.7126)
  %all-reduce.1243 = f32[] all-reduce(%reduce.1294), channel_id=2046, replica_groups=[1,8]<=[8], use_global_device_ids=true, to_apply=%region_2302.45221.clone
  %convert_element_type.7128 = bf16[] convert(%all-reduce.1243)
  %add.5552 = bf16[] add(%add.5551, %convert_element_type.7128)
  %all-reduce.1244 = f32[] all-reduce(%reduce.1295), channel_id=2047, replica_groups=[1,8]<=[8], use_global_device_ids=true, to_apply=%region_2303.45230.clone
  %convert_element_type.7131 = bf16[] convert(%all-reduce.1244)
  %add.5553 = bf16[] add(%add.5552, %convert_element_type.7131)
  %all-reduce.1245 = f32[] all-reduce(%reduce.1296), channel_id=2048, replica_groups=[1,8]<=[8], use_global_device_ids=true, to_apply=%region_2304.45239.clone
  %convert_element_type.7133 = bf16[] convert(%all-reduce.1245)
  %add.5554 = bf16[] add(%add.5553, %convert_element_type.7133)
  %all-reduce.1246 = f32[] all-reduce(%reduce.1297), channel_id=2049, replica_groups=[1,8]<=[8], use_global_device_ids=true, to_apply=%region_2305.45248.clone
  %convert_element_type.7136 = bf16[] convert(%all-reduce.1246)
  %add.5555 = bf16[] add(%add.5554, %convert_element_type.7136)
  %add.5556 = bf16[] add(%add.5555, %convert_element_type.3747)
  %add.5557 = bf16[] add(%add.5556, %convert_element_type.3749)
  %all-reduce.1247 = f32[] all-reduce(%reduce.1302), channel_id=2050, replica_groups=[1,8]<=[8], use_global_device_ids=true, to_apply=%region_2308.45275.clone
  %convert_element_type.7143 = bf16[] convert(%all-reduce.1247)
  %add.5558 = bf16[] add(%add.5557, %convert_element_type.7143)
  %all-reduce.1248 = f32[] all-reduce(%reduce.1303), channel_id=2051, replica_groups=[1,8]<=[8], use_global_device_ids=true, to_apply=%region_2309.45284.clone
  %convert_element_type.7146 = bf16[] convert(%all-reduce.1248)
  %add.5559 = bf16[] add(%add.5558, %convert_element_type.7146)
  %all-reduce.1249 = f32[] all-reduce(%reduce.1304), channel_id=2052, replica_groups=[1,8]<=[8], use_global_device_ids=true, to_apply=%region_2310.45293.clone
  %convert_element_type.7148 = bf16[] convert(%all-reduce.1249)
  %add.5560 = bf16[] add(%add.5559, %convert_element_type.7148)
  %all-reduce.1250 = f32[] all-reduce(%reduce.1305), channel_id=2053, replica_groups=[1,8]<=[8], use_global_device_ids=true, to_apply=%region_2311.45302.clone
  %convert_element_type.7152 = bf16[] convert(%all-reduce.1250)
  %add.5561 = bf16[] add(%add.5560, %convert_element_type.7152)
  %all-reduce.1251 = f32[] all-reduce(%reduce.1306), channel_id=2054, replica_groups=[1,8]<=[8], use_global_device_ids=true, to_apply=%region_2312.45311.clone
  %convert_element_type.7154 = bf16[] convert(%all-reduce.1251)
  %add.5562 = bf16[] add(%add.5561, %convert_element_type.7154)
  %all-reduce.1252 = f32[] all-reduce(%reduce.1307), channel_id=2055, replica_groups=[1,8]<=[8], use_global_device_ids=true, to_apply=%region_2313.45320.clone
  %convert_element_type.7156 = bf16[] convert(%all-reduce.1252)
  %add.5563 = bf16[] add(%add.5562, %convert_element_type.7156)
  %all-reduce.1253 = f32[] all-reduce(%reduce.1308), channel_id=2056, replica_groups=[1,8]<=[8], use_global_device_ids=true, to_apply=%region_2314.45329.clone
  %convert_element_type.7158 = bf16[] convert(%all-reduce.1253)
  %add.5564 = bf16[] add(%add.5563, %convert_element_type.7158)
  %all-reduce.1254 = f32[] all-reduce(%reduce.1309), channel_id=2057, replica_groups=[1,8]<=[8], use_global_device_ids=true, to_apply=%region_2315.45338.clone
  %convert_element_type.7160 = bf16[] convert(%all-reduce.1254)
  %add.5565 = bf16[] add(%add.5564, %convert_element_type.7160)
  %add.5566 = bf16[] add(%add.5565, %convert_element_type.3768)
  %add.5567 = bf16[] add(%add.5566, %convert_element_type.3771)
  %all-reduce.1255 = f32[] all-reduce(%reduce.1314), channel_id=2058, replica_groups=[1,8]<=[8], use_global_device_ids=true, to_apply=%region_2318.45365.clone
  %convert_element_type.7167 = bf16[] convert(%all-reduce.1255)
  %add.5568 = bf16[] add(%add.5567, %convert_element_type.7167)
  %all-reduce.1256 = f32[] all-reduce(%reduce.1315), channel_id=2059, replica_groups=[1,8]<=[8], use_global_device_ids=true, to_apply=%region_2319.45374.clone
  %convert_element_type.7169 = bf16[] convert(%all-reduce.1256)
  %add.5569 = bf16[] add(%add.5568, %convert_element_type.7169)
  %all-reduce.1257 = f32[] all-reduce(%reduce.1316), channel_id=2060, replica_groups=[1,8]<=[8], use_global_device_ids=true, to_apply=%region_2320.45383.clone
  %convert_element_type.7171 = bf16[] convert(%all-reduce.1257)
  %add.5570 = bf16[] add(%add.5569, %convert_element_type.7171)
  %all-reduce.1258 = f32[] all-reduce(%reduce.1317), channel_id=2061, replica_groups=[1,8]<=[8], use_global_device_ids=true, to_apply=%region_2321.45392.clone
  %convert_element_type.7173 = bf16[] convert(%all-reduce.1258)
  %add.5571 = bf16[] add(%add.5570, %convert_element_type.7173)
  %all-reduce.1259 = f32[] all-reduce(%reduce.1318), channel_id=2062, replica_groups=[1,8]<=[8], use_global_device_ids=true, to_apply=%region_2322.45401.clone
  %convert_element_type.7175 = bf16[] convert(%all-reduce.1259)
  %add.5572 = bf16[] add(%add.5571, %convert_element_type.7175)
  %all-reduce.1260 = f32[] all-reduce(%reduce.1320), channel_id=2063, replica_groups=[1,8]<=[8], use_global_device_ids=true, to_apply=%region_2323.45410.clone
  %convert_element_type.7179 = bf16[] convert(%all-reduce.1260)
  %add.5573 = bf16[] add(%add.5572, %convert_element_type.7179)
  %sqrt.326 = bf16[] sqrt(%add.5573)
  ROOT %tuple.351 = (s32[], bf16[4096]{0}, bf16[512,8]{1,0}, bf16[1,4096,14336]{2,1,0}, bf16[1,4096,14336]{2,1,0}, /*index=5*/bf16[1,14336,4096]{2,1,0}, bf16[4096]{0}, bf16[4096]{0}, bf16[512,8,128]{2,1,0}, bf16[32,128,512]{2,1,0}, /*index=10*/bf16[512,32,128]{2,1,0}, bf16[512,8,128]{2,1,0}, bf16[512,8]{1,0}, bf16[1,4096,14336]{2,1,0}, bf16[1,4096,14336]{2,1,0}, /*index=15*/bf16[1,14336,4096]{2,1,0}, bf16[4096]{0}, bf16[4096]{0}, bf16[512,8,128]{2,1,0}, bf16[32,128,512]{2,1,0}, /*index=20*/bf16[512,32,128]{2,1,0}, bf16[512,8,128]{2,1,0}, bf16[512,8]{1,0}, bf16[1,4096,14336]{2,1,0}, bf16[1,4096,14336]{2,1,0}, /*index=25*/bf16[1,14336,4096]{2,1,0}, bf16[4096]{0}, bf16[4096]{0}, bf16[512,8,128]{2,1,0}, bf16[32,128,512]{2,1,0}, /*index=30*/bf16[512,32,128]{2,1,0}, bf16[512,8,128]{2,1,0}, bf16[512,8]{1,0}, bf16[1,4096,14336]{2,1,0}, bf16[1,4096,14336]{2,1,0}, /*index=35*/bf16[1,14336,4096]{2,1,0}, bf16[4096]{0}, bf16[4096]{0}, bf16[512,8,128]{2,1,0}, bf16[32,128,512]{2,1,0}, /*index=40*/bf16[512,32,128]{2,1,0}, bf16[512,8,128]{2,1,0}, bf16[512,8]{1,0}, bf16[1,4096,14336]{2,1,0}, bf16[1,4096,14336]{2,1,0}, /*index=45*/bf16[1,14336,4096]{2,1,0}, bf16[4096]{0}, bf16[4096]{0}, bf16[512,8,128]{2,1,0}, bf16[32,128,512]{2,1,0}, /*index=50*/bf16[512,32,128]{2,1,0}, bf16[512,8,128]{2,1,0}, bf16[512,8]{1,0}, bf16[1,4096,14336]{2,1,0}, bf16[1,4096,14336]{2,1,0}, /*index=55*/bf16[1,14336,4096]{2,1,0}, bf16[4096]{0}, bf16[4096]{0}, bf16[512,8,128]{2,1,0}, bf16[32,128,512]{2,1,0}, /*index=60*/bf16[512,32,128]{2,1,0}, bf16[512,8,128]{2,1,0}, bf16[512,8]{1,0}, bf16[1,4096,14336]{2,1,0}, bf16[1,4096,14336]{2,1,0}, /*index=65*/bf16[1,14336,4096]{2,1,0}, bf16[4096]{0}, bf16[4096]{0}, bf16[512,8,128]{2,1,0}, bf16[32,128,512]{2,1,0}, /*index=70*/bf16[512,32,128]{2,1,0}, bf16[512,8,128]{2,1,0}, bf16[512,8]{1,0}, bf16[1,4096,14336]{2,1,0}, bf16[1,4096,14336]{2,1,0}, /*index=75*/bf16[1,14336,4096]{2,1,0}, bf16[4096]{0}, bf16[4096]{0}, bf16[512,8,128]{2,1,0}, bf16[32,128,512]{2,1,0}, /*index=80*/bf16[512,32,128]{2,1,0}, bf16[512,8,128]{2,1,0}, bf16[512,8]{1,0}, bf16[1,4096,14336]{2,1,0}, bf16[1,4096,14336]{2,1,0}, /*index=85*/bf16[1,14336,4096]{2,1,0}, bf16[4096]{0}, bf16[4096]{0}, bf16[512,8,128]{2,1,0}, bf16[32,128,512]{2,1,0}, /*index=90*/bf16[512,32,128]{2,1,0}, bf16[512,8,128]{2,1,0}, bf16[512,8]{1,0}, bf16[1,4096,14336]{2,1,0}, bf16[1,4096,14336]{2,1,0}, /*index=95*/bf16[1,14336,4096]{2,1,0}, bf16[4096]{0}, bf16[4096]{0}, bf16[512,8,128]{2,1,0}, bf16[32,128,512]{2,1,0}, /*index=100*/bf16[512,32,128]{2,1,0}, bf16[512,8,128]{2,1,0}, bf16[512,8]{1,0}, bf16[1,4096,14336]{2,1,0}, bf16[1,4096,14336]{2,1,0}, /*index=105*/bf16[1,14336,4096]{2,1,0}, bf16[4096]{0}, bf16[4096]{0}, bf16[512,8,128]{2,1,0}, bf16[32,128,512]{2,1,0}, /*index=110*/bf16[512,32,128]{2,1,0}, bf16[512,8,128]{2,1,0}, bf16[512,8]{1,0}, bf16[1,4096,14336]{2,1,0}, bf16[1,4096,14336]{2,1,0}, /*index=115*/bf16[1,14336,4096]{2,1,0}, bf16[4096]{0}, bf16[4096]{0}, bf16[512,8,128]{2,1,0}, bf16[32,128,512]{2,1,0}, /*index=120*/bf16[512,32,128]{2,1,0}, bf16[512,8,128]{2,1,0}, bf16[512,8]{1,0}, bf16[1,4096,14336]{2,1,0}, bf16[1,4096,14336]{2,1,0}, /*index=125*/bf16[1,14336,4096]{2,1,0}, bf16[4096]{0}, bf16[4096]{0}, bf16[512,8,128]{2,1,0}, bf16[32,128,512]{2,1,0}, /*index=130*/bf16[512,32,128]{2,1,0}, bf16[512,8,128]{2,1,0}, bf16[512,8]{1,0}, bf16[1,4096,14336]{2,1,0}, bf16[1,4096,14336]{2,1,0}, /*index=135*/bf16[1,14336,4096]{2,1,0}, bf16[4096]{0}, bf16[4096]{0}, bf16[512,8,128]{2,1,0}, bf16[32,128,512]{2,1,0}, /*index=140*/bf16[512,32,128]{2,1,0}, bf16[512,8,128]{2,1,0}, bf16[512,8]{1,0}, bf16[1,4096,14336]{2,1,0}, bf16[1,4096,14336]{2,1,0}, /*index=145*/bf16[1,14336,4096]{2,1,0}, bf16[4096]{0}, bf16[4096]{0}, bf16[512,8,128]{2,1,0}, bf16[32,128,512]{2,1,0}, /*index=150*/bf16[512,32,128]{2,1,0}, bf16[512,8,128]{2,1,0}, bf16[512,8]{1,0}, bf16[1,4096,14336]{2,1,0}, bf16[1,4096,14336]{2,1,0}, /*index=155*/bf16[1,14336,4096]{2,1,0}, bf16[4096]{0}, bf16[4096]{0}, bf16[512,8,128]{2,1,0}, bf16[32,128,512]{2,1,0}, /*index=160*/bf16[512,32,128]{2,1,0}, bf16[512,8,128]{2,1,0}, bf16[512,8]{1,0}, bf16[1,4096,14336]{2,1,0}, bf16[1,4096,14336]{2,1,0}, /*index=165*/bf16[1,14336,4096]{2,1,0}, bf16[4096]{0}, bf16[4096]{0}, bf16[512,8,128]{2,1,0}, bf16[32,128,512]{2,1,0}, /*index=170*/bf16[512,32,128]{2,1,0}, bf16[512,8,128]{2,1,0}, bf16[512,8]{1,0}, bf16[1,4096,14336]{2,1,0}, bf16[1,4096,14336]{2,1,0}, /*index=175*/bf16[1,14336,4096]{2,1,0}, bf16[4096]{0}, bf16[4096]{0}, bf16[512,8,128]{2,1,0}, bf16[32,128,512]{2,1,0}, /*index=180*/bf16[512,32,128]{2,1,0}, bf16[512,8,128]{2,1,0}, bf16[512,8]{1,0}, bf16[1,4096,14336]{2,1,0}, bf16[1,4096,14336]{2,1,0}, /*index=185*/bf16[1,14336,4096]{2,1,0}, bf16[4096]{0}, bf16[4096]{0}, bf16[512,8,128]{2,1,0}, bf16[32,128,512]{2,1,0}, /*index=190*/bf16[512,32,128]{2,1,0}, bf16[512,8,128]{2,1,0}, bf16[512,8]{1,0}, bf16[1,4096,14336]{2,1,0}, bf16[1,4096,14336]{2,1,0}, /*index=195*/bf16[1,14336,4096]{2,1,0}, bf16[4096]{0}, bf16[4096]{0}, bf16[512,8,128]{2,1,0}, bf16[32,128,512]{2,1,0}, /*index=200*/bf16[512,32,128]{2,1,0}, bf16[512,8,128]{2,1,0}, bf16[512,8]{1,0}, bf16[1,4096,14336]{2,1,0}, bf16[1,4096,14336]{2,1,0}, /*index=205*/bf16[1,14336,4096]{2,1,0}, bf16[4096]{0}, bf16[4096]{0}, bf16[512,8,128]{2,1,0}, bf16[32,128,512]{2,1,0}, /*index=210*/bf16[512,32,128]{2,1,0}, bf16[512,8,128]{2,1,0}, bf16[512,8]{1,0}, bf16[1,4096,14336]{2,1,0}, bf16[1,4096,14336]{2,1,0}, /*index=215*/bf16[1,14336,4096]{2,1,0}, bf16[4096]{0}, bf16[4096]{0}, bf16[512,8,128]{2,1,0}, bf16[32,128,512]{2,1,0}, /*index=220*/bf16[512,32,128]{2,1,0}, bf16[512,8,128]{2,1,0}, bf16[512,8]{1,0}, bf16[1,4096,14336]{2,1,0}, bf16[1,4096,14336]{2,1,0}, /*index=225*/bf16[1,14336,4096]{2,1,0}, bf16[4096]{0}, bf16[4096]{0}, bf16[512,8,128]{2,1,0}, bf16[32,128,512]{2,1,0}, /*index=230*/bf16[512,32,128]{2,1,0}, bf16[512,8,128]{2,1,0}, bf16[512,8]{1,0}, bf16[1,4096,14336]{2,1,0}, bf16[1,4096,14336]{2,1,0}, /*index=235*/bf16[1,14336,4096]{2,1,0}, bf16[4096]{0}, bf16[4096]{0}, bf16[512,8,128]{2,1,0}, bf16[32,128,512]{2,1,0}, /*index=240*/bf16[512,32,128]{2,1,0}, bf16[512,8,128]{2,1,0}, bf16[512,8]{1,0}, bf16[1,4096,14336]{2,1,0}, bf16[1,4096,14336]{2,1,0}, /*index=245*/bf16[1,14336,4096]{2,1,0}, bf16[4096]{0}, bf16[4096]{0}, bf16[512,8,128]{2,1,0}, bf16[32,128,512]{2,1,0}, /*index=250*/bf16[512,32,128]{2,1,0}, bf16[512,8,128]{2,1,0}, bf16[512,8]{1,0}, bf16[1,4096,14336]{2,1,0}, bf16[1,4096,14336]{2,1,0}, /*index=255*/bf16[1,14336,4096]{2,1,0}, bf16[4096]{0}, bf16[4096]{0}, bf16[512,8,128]{2,1,0}, bf16[32,128,512]{2,1,0}, /*index=260*/bf16[512,32,128]{2,1,0}, bf16[512,8,128]{2,1,0}, bf16[512,8]{1,0}, bf16[1,4096,14336]{2,1,0}, bf16[1,4096,14336]{2,1,0}, /*index=265*/bf16[1,14336,4096]{2,1,0}, bf16[4096]{0}, bf16[4096]{0}, bf16[512,8,128]{2,1,0}, bf16[32,128,512]{2,1,0}, /*index=270*/bf16[512,32,128]{2,1,0}, bf16[512,8,128]{2,1,0}, bf16[512,8]{1,0}, bf16[1,4096,14336]{2,1,0}, bf16[1,4096,14336]{2,1,0}, /*index=275*/bf16[1,14336,4096]{2,1,0}, bf16[4096]{0}, bf16[4096]{0}, bf16[512,8,128]{2,1,0}, bf16[32,128,512]{2,1,0}, /*index=280*/bf16[512,32,128]{2,1,0}, bf16[512,8,128]{2,1,0}, bf16[512,8]{1,0}, bf16[1,4096,14336]{2,1,0}, bf16[1,4096,14336]{2,1,0}, /*index=285*/bf16[1,14336,4096]{2,1,0}, bf16[4096]{0}, bf16[4096]{0}, bf16[512,8,128]{2,1,0}, bf16[32,128,512]{2,1,0}, /*index=290*/bf16[512,32,128]{2,1,0}, bf16[512,8,128]{2,1,0}, bf16[512,8]{1,0}, bf16[1,4096,14336]{2,1,0}, bf16[1,4096,14336]{2,1,0}, /*index=295*/bf16[1,14336,4096]{2,1,0}, bf16[4096]{0}, bf16[4096]{0}, bf16[512,8,128]{2,1,0}, bf16[32,128,512]{2,1,0}, /*index=300*/bf16[512,32,128]{2,1,0}, bf16[512,8,128]{2,1,0}, bf16[512,8]{1,0}, bf16[1,4096,14336]{2,1,0}, bf16[1,4096,14336]{2,1,0}, /*index=305*/bf16[1,14336,4096]{2,1,0}, bf16[4096]{0}, bf16[4096]{0}, bf16[512,8,128]{2,1,0}, bf16[32,128,512]{2,1,0}, /*index=310*/bf16[512,32,128]{2,1,0}, bf16[512,8,128]{2,1,0}, bf16[512,8]{1,0}, bf16[1,4096,14336]{2,1,0}, bf16[1,4096,14336]{2,1,0}, /*index=315*/bf16[1,14336,4096]{2,1,0}, bf16[4096]{0}, bf16[4096]{0}, bf16[512,8,128]{2,1,0}, bf16[32,128,512]{2,1,0}, /*index=320*/bf16[512,32,128]{2,1,0}, bf16[512,8,128]{2,1,0}, bf16[512,32000]{1,0}, bf16[32000,512]{1,0}, s32[], /*index=325*/bf16[4096]{0}, bf16[512,8]{1,0}, bf16[1,4096,14336]{2,1,0}, bf16[1,4096,14336]{2,1,0}, bf16[1,14336,4096]{2,1,0}, /*index=330*/bf16[4096]{0}, bf16[4096]{0}, bf16[512,8,128]{2,1,0}, bf16[32,128,512]{2,1,0}, bf16[512,32,128]{2,1,0}, /*index=335*/bf16[512,8,128]{2,1,0}, bf16[512,8]{1,0}, bf16[1,4096,14336]{2,1,0}, bf16[1,4096,14336]{2,1,0}, bf16[1,14336,4096]{2,1,0}, /*index=340*/bf16[4096]{0}, bf16[4096]{0}, bf16[512,8,128]{2,1,0}, bf16[32,128,512]{2,1,0}, bf16[512,32,128]{2,1,0}, /*index=345*/bf16[512,8,128]{2,1,0}, bf16[512,8]{1,0}, bf16[1,4096,14336]{2,1,0}, bf16[1,4096,14336]{2,1,0}, bf16[1,14336,4096]{2,1,0}, /*index=350*/bf16[4096]{0}, bf16[4096]{0}, bf16[512,8,128]{2,1,0}, bf16[32,128,512]{2,1,0}, bf16[512,32,128]{2,1,0}, /*index=355*/bf16[512,8,128]{2,1,0}, bf16[512,8]{1,0}, bf16[1,4096,14336]{2,1,0}, bf16[1,4096,14336]{2,1,0}, bf16[1,14336,4096]{2,1,0}, /*index=360*/bf16[4096]{0}, bf16[4096]{0}, bf16[512,8,128]{2,1,0}, bf16[32,128,512]{2,1,0}, bf16[512,32,128]{2,1,0}, /*index=365*/bf16[512,8,128]{2,1,0}, bf16[512,8]{1,0}, bf16[1,4096,14336]{2,1,0}, bf16[1,4096,14336]{2,1,0}, bf16[1,14336,4096]{2,1,0}, /*index=370*/bf16[4096]{0}, bf16[4096]{0}, bf16[512,8,128]{2,1,0}, bf16[32,128,512]{2,1,0}, bf16[512,32,128]{2,1,0}, /*index=375*/bf16[512,8,128]{2,1,0}, bf16[512,8]{1,0}, bf16[1,4096,14336]{2,1,0}, bf16[1,4096,14336]{2,1,0}, bf16[1,14336,4096]{2,1,0}, /*index=380*/bf16[4096]{0}, bf16[4096]{0}, bf16[512,8,128]{2,1,0}, bf16[32,128,512]{2,1,0}, bf16[512,32,128]{2,1,0}, /*index=385*/bf16[512,8,128]{2,1,0}, bf16[512,8]{1,0}, bf16[1,4096,14336]{2,1,0}, bf16[1,4096,14336]{2,1,0}, bf16[1,14336,4096]{2,1,0}, /*index=390*/bf16[4096]{0}, bf16[4096]{0}, bf16[512,8,128]{2,1,0}, bf16[32,128,512]{2,1,0}, bf16[512,32,128]{2,1,0}, /*index=395*/bf16[512,8,128]{2,1,0}, bf16[512,8]{1,0}, bf16[1,4096,14336]{2,1,0}, bf16[1,4096,14336]{2,1,0}, bf16[1,14336,4096]{2,1,0}, /*index=400*/bf16[4096]{0}, bf16[4096]{0}, bf16[512,8,128]{2,1,0}, bf16[32,128,512]{2,1,0}, bf16[512,32,128]{2,1,0}, /*index=405*/bf16[512,8,128]{2,1,0}, bf16[512,8]{1,0}, bf16[1,4096,14336]{2,1,0}, bf16[1,4096,14336]{2,1,0}, bf16[1,14336,4096]{2,1,0}, /*index=410*/bf16[4096]{0}, bf16[4096]{0}, bf16[512,8,128]{2,1,0}, bf16[32,128,512]{2,1,0}, bf16[512,32,128]{2,1,0}, /*index=415*/bf16[512,8,128]{2,1,0}, bf16[512,8]{1,0}, bf16[1,4096,14336]{2,1,0}, bf16[1,4096,14336]{2,1,0}, bf16[1,14336,4096]{2,1,0}, /*index=420*/bf16[4096]{0}, bf16[4096]{0}, bf16[512,8,128]{2,1,0}, bf16[32,128,512]{2,1,0}, bf16[512,32,128]{2,1,0}, /*index=425*/bf16[512,8,128]{2,1,0}, bf16[512,8]{1,0}, bf16[1,4096,14336]{2,1,0}, bf16[1,4096,14336]{2,1,0}, bf16[1,14336,4096]{2,1,0}, /*index=430*/bf16[4096]{0}, bf16[4096]{0}, bf16[512,8,128]{2,1,0}, bf16[32,128,512]{2,1,0}, bf16[512,32,128]{2,1,0}, /*index=435*/bf16[512,8,128]{2,1,0}, bf16[512,8]{1,0}, bf16[1,4096,14336]{2,1,0}, bf16[1,4096,14336]{2,1,0}, bf16[1,14336,4096]{2,1,0}, /*index=440*/bf16[4096]{0}, bf16[4096]{0}, bf16[512,8,128]{2,1,0}, bf16[32,128,512]{2,1,0}, bf16[512,32,128]{2,1,0}, /*index=445*/bf16[512,8,128]{2,1,0}, bf16[512,8]{1,0}, bf16[1,4096,14336]{2,1,0}, bf16[1,4096,14336]{2,1,0}, bf16[1,14336,4096]{2,1,0}, /*index=450*/bf16[4096]{0}, bf16[4096]{0}, bf16[512,8,128]{2,1,0}, bf16[32,128,512]{2,1,0}, bf16[512,32,128]{2,1,0}, /*index=455*/bf16[512,8,128]{2,1,0}, bf16[512,8]{1,0}, bf16[1,4096,14336]{2,1,0}, bf16[1,4096,14336]{2,1,0}, bf16[1,14336,4096]{2,1,0}, /*index=460*/bf16[4096]{0}, bf16[4096]{0}, bf16[512,8,128]{2,1,0}, bf16[32,128,512]{2,1,0}, bf16[512,32,128]{2,1,0}, /*index=465*/bf16[512,8,128]{2,1,0}, bf16[512,8]{1,0}, bf16[1,4096,14336]{2,1,0}, bf16[1,4096,14336]{2,1,0}, bf16[1,14336,4096]{2,1,0}, /*index=470*/bf16[4096]{0}, bf16[4096]{0}, bf16[512,8,128]{2,1,0}, bf16[32,128,512]{2,1,0}, bf16[512,32,128]{2,1,0}, /*index=475*/bf16[512,8,128]{2,1,0}, bf16[512,8]{1,0}, bf16[1,4096,14336]{2,1,0}, bf16[1,4096,14336]{2,1,0}, bf16[1,14336,4096]{2,1,0}, /*index=480*/bf16[4096]{0}, bf16[4096]{0}, bf16[512,8,128]{2,1,0}, bf16[32,128,512]{2,1,0}, bf16[512,32,128]{2,1,0}, /*index=485*/bf16[512,8,128]{2,1,0}, bf16[512,8]{1,0}, bf16[1,4096,14336]{2,1,0}, bf16[1,4096,14336]{2,1,0}, bf16[1,14336,4096]{2,1,0}, /*index=490*/bf16[4096]{0}, bf16[4096]{0}, bf16[512,8,128]{2,1,0}, bf16[32,128,512]{2,1,0}, bf16[512,32,128]{2,1,0}, /*index=495*/bf16[512,8,128]{2,1,0}, bf16[512,8]{1,0}, bf16[1,4096,14336]{2,1,0}, bf16[1,4096,14336]{2,1,0}, bf16[1,14336,4096]{2,1,0}, /*index=500*/bf16[4096]{0}, bf16[4096]{0}, bf16[512,8,128]{2,1,0}, bf16[32,128,512]{2,1,0}, bf16[512,32,128]{2,1,0}, /*index=505*/bf16[512,8,128]{2,1,0}, bf16[512,8]{1,0}, bf16[1,4096,14336]{2,1,0}, bf16[1,4096,14336]{2,1,0}, bf16[1,14336,4096]{2,1,0}, /*index=510*/bf16[4096]{0}, bf16[4096]{0}, bf16[512,8,128]{2,1,0}, bf16[32,128,512]{2,1,0}, bf16[512,32,128]{2,1,0}, /*index=515*/bf16[512,8,128]{2,1,0}, bf16[512,8]{1,0}, bf16[1,4096,14336]{2,1,0}, bf16[1,4096,14336]{2,1,0}, bf16[1,14336,4096]{2,1,0}, /*index=520*/bf16[4096]{0}, bf16[4096]{0}, bf16[512,8,128]{2,1,0}, bf16[32,128,512]{2,1,0}, bf16[512,32,128]{2,1,0}, /*index=525*/bf16[512,8,128]{2,1,0}, bf16[512,8]{1,0}, bf16[1,4096,14336]{2,1,0}, bf16[1,4096,14336]{2,1,0}, bf16[1,14336,4096]{2,1,0}, /*index=530*/bf16[4096]{0}, bf16[4096]{0}, bf16[512,8,128]{2,1,0}, bf16[32,128,512]{2,1,0}, bf16[512,32,128]{2,1,0}, /*index=535*/bf16[512,8,128]{2,1,0}, bf16[512,8]{1,0}, bf16[1,4096,14336]{2,1,0}, bf16[1,4096,14336]{2,1,0}, bf16[1,14336,4096]{2,1,0}, /*index=540*/bf16[4096]{0}, bf16[4096]{0}, bf16[512,8,128]{2,1,0}, bf16[32,128,512]{2,1,0}, bf16[512,32,128]{2,1,0}, /*index=545*/bf16[512,8,128]{2,1,0}, bf16[512,8]{1,0}, bf16[1,4096,14336]{2,1,0}, bf16[1,4096,14336]{2,1,0}, bf16[1,14336,4096]{2,1,0}, /*index=550*/bf16[4096]{0}, bf16[4096]{0}, bf16[512,8,128]{2,1,0}, bf16[32,128,512]{2,1,0}, bf16[512,32,128]{2,1,0}, /*index=555*/bf16[512,8,128]{2,1,0}, bf16[512,8]{1,0}, bf16[1,4096,14336]{2,1,0}, bf16[1,4096,14336]{2,1,0}, bf16[1,14336,4096]{2,1,0}, /*index=560*/bf16[4096]{0}, bf16[4096]{0}, bf16[512,8,128]{2,1,0}, bf16[32,128,512]{2,1,0}, bf16[512,32,128]{2,1,0}, /*index=565*/bf16[512,8,128]{2,1,0}, bf16[512,8]{1,0}, bf16[1,4096,14336]{2,1,0}, bf16[1,4096,14336]{2,1,0}, bf16[1,14336,4096]{2,1,0}, /*index=570*/bf16[4096]{0}, bf16[4096]{0}, bf16[512,8,128]{2,1,0}, bf16[32,128,512]{2,1,0}, bf16[512,32,128]{2,1,0}, /*index=575*/bf16[512,8,128]{2,1,0}, bf16[512,8]{1,0}, bf16[1,4096,14336]{2,1,0}, bf16[1,4096,14336]{2,1,0}, bf16[1,14336,4096]{2,1,0}, /*index=580*/bf16[4096]{0}, bf16[4096]{0}, bf16[512,8,128]{2,1,0}, bf16[32,128,512]{2,1,0}, bf16[512,32,128]{2,1,0}, /*index=585*/bf16[512,8,128]{2,1,0}, bf16[512,8]{1,0}, bf16[1,4096,14336]{2,1,0}, bf16[1,4096,14336]{2,1,0}, bf16[1,14336,4096]{2,1,0}, /*index=590*/bf16[4096]{0}, bf16[4096]{0}, bf16[512,8,128]{2,1,0}, bf16[32,128,512]{2,1,0}, bf16[512,32,128]{2,1,0}, /*index=595*/bf16[512,8,128]{2,1,0}, bf16[512,8]{1,0}, bf16[1,4096,14336]{2,1,0}, bf16[1,4096,14336]{2,1,0}, bf16[1,14336,4096]{2,1,0}, /*index=600*/bf16[4096]{0}, bf16[4096]{0}, bf16[512,8,128]{2,1,0}, bf16[32,128,512]{2,1,0}, bf16[512,32,128]{2,1,0}, /*index=605*/bf16[512,8,128]{2,1,0}, bf16[512,8]{1,0}, bf16[1,4096,14336]{2,1,0}, bf16[1,4096,14336]{2,1,0}, bf16[1,14336,4096]{2,1,0}, /*index=610*/bf16[4096]{0}, bf16[4096]{0}, bf16[512,8,128]{2,1,0}, bf16[32,128,512]{2,1,0}, bf16[512,32,128]{2,1,0}, /*index=615*/bf16[512,8,128]{2,1,0}, bf16[512,8]{1,0}, bf16[1,4096,14336]{2,1,0}, bf16[1,4096,14336]{2,1,0}, bf16[1,14336,4096]{2,1,0}, /*index=620*/bf16[4096]{0}, bf16[4096]{0}, bf16[512,8,128]{2,1,0}, bf16[32,128,512]{2,1,0}, bf16[512,32,128]{2,1,0}, /*index=625*/bf16[512,8,128]{2,1,0}, bf16[512,8]{1,0}, bf16[1,4096,14336]{2,1,0}, bf16[1,4096,14336]{2,1,0}, bf16[1,14336,4096]{2,1,0}, /*index=630*/bf16[4096]{0}, bf16[4096]{0}, bf16[512,8,128]{2,1,0}, bf16[32,128,512]{2,1,0}, bf16[512,32,128]{2,1,0}, /*index=635*/bf16[512,8,128]{2,1,0}, bf16[512,8]{1,0}, bf16[1,4096,14336]{2,1,0}, bf16[1,4096,14336]{2,1,0}, bf16[1,14336,4096]{2,1,0}, /*index=640*/bf16[4096]{0}, bf16[4096]{0}, bf16[512,8,128]{2,1,0}, bf16[32,128,512]{2,1,0}, bf16[512,32,128]{2,1,0}, /*index=645*/bf16[512,8,128]{2,1,0}, bf16[512,32000]{1,0}, bf16[32000,512]{1,0}, bf16[4096]{0}, bf16[512,8]{1,0}, /*index=650*/bf16[1,4096,14336]{2,1,0}, bf16[1,4096,14336]{2,1,0}, bf16[1,14336,4096]{2,1,0}, bf16[4096]{0}, bf16[4096]{0}, /*index=655*/bf16[512,8,128]{2,1,0}, bf16[32,128,512]{2,1,0}, bf16[512,32,128]{2,1,0}, bf16[512,8,128]{2,1,0}, bf16[512,8]{1,0}, /*index=660*/bf16[1,4096,14336]{2,1,0}, bf16[1,4096,14336]{2,1,0}, bf16[1,14336,4096]{2,1,0}, bf16[4096]{0}, bf16[4096]{0}, /*index=665*/bf16[512,8,128]{2,1,0}, bf16[32,128,512]{2,1,0}, bf16[512,32,128]{2,1,0}, bf16[512,8,128]{2,1,0}, bf16[512,8]{1,0}, /*index=670*/bf16[1,4096,14336]{2,1,0}, bf16[1,4096,14336]{2,1,0}, bf16[1,14336,4096]{2,1,0}, bf16[4096]{0}, bf16[4096]{0}, /*index=675*/bf16[512,8,128]{2,1,0}, bf16[32,128,512]{2,1,0}, bf16[512,32,128]{2,1,0}, bf16[512,8,128]{2,1,0}, bf16[512,8]{1,0}, /*index=680*/bf16[1,4096,14336]{2,1,0}, bf16[1,4096,14336]{2,1,0}, bf16[1,14336,4096]{2,1,0}, bf16[4096]{0}, bf16[4096]{0}, /*index=685*/bf16[512,8,128]{2,1,0}, bf16[32,128,512]{2,1,0}, bf16[512,32,128]{2,1,0}, bf16[512,8,128]{2,1,0}, bf16[512,8]{1,0}, /*index=690*/bf16[1,4096,14336]{2,1,0}, bf16[1,4096,14336]{2,1,0}, bf16[1,14336,4096]{2,1,0}, bf16[4096]{0}, bf16[4096]{0}, /*index=695*/bf16[512,8,128]{2,1,0}, bf16[32,128,512]{2,1,0}, bf16[512,32,128]{2,1,0}, bf16[512,8,128]{2,1,0}, bf16[512,8]{1,0}, /*index=700*/bf16[1,4096,14336]{2,1,0}, bf16[1,4096,14336]{2,1,0}, bf16[1,14336,4096]{2,1,0}, bf16[4096]{0}, bf16[4096]{0}, /*index=705*/bf16[512,8,128]{2,1,0}, bf16[32,128,512]{2,1,0}, bf16[512,32,128]{2,1,0}, bf16[512,8,128]{2,1,0}, bf16[512,8]{1,0}, /*index=710*/bf16[1,4096,14336]{2,1,0}, bf16[1,4096,14336]{2,1,0}, bf16[1,14336,4096]{2,1,0}, bf16[4096]{0}, bf16[4096]{0}, /*index=715*/bf16[512,8,128]{2,1,0}, bf16[32,128,512]{2,1,0}, bf16[512,32,128]{2,1,0}, bf16[512,8,128]{2,1,0}, bf16[512,8]{1,0}, /*index=720*/bf16[1,4096,14336]{2,1,0}, bf16[1,4096,14336]{2,1,0}, bf16[1,14336,4096]{2,1,0}, bf16[4096]{0}, bf16[4096]{0}, /*index=725*/bf16[512,8,128]{2,1,0}, bf16[32,128,512]{2,1,0}, bf16[512,32,128]{2,1,0}, bf16[512,8,128]{2,1,0}, bf16[512,8]{1,0}, /*index=730*/bf16[1,4096,14336]{2,1,0}, bf16[1,4096,14336]{2,1,0}, bf16[1,14336,4096]{2,1,0}, bf16[4096]{0}, bf16[4096]{0}, /*index=735*/bf16[512,8,128]{2,1,0}, bf16[32,128,512]{2,1,0}, bf16[512,32,128]{2,1,0}, bf16[512,8,128]{2,1,0}, bf16[512,8]{1,0}, /*index=740*/bf16[1,4096,14336]{2,1,0}, bf16[1,4096,14336]{2,1,0}, bf16[1,14336,4096]{2,1,0}, bf16[4096]{0}, bf16[4096]{0}, /*index=745*/bf16[512,8,128]{2,1,0}, bf16[32,128,512]{2,1,0}, bf16[512,32,128]{2,1,0}, bf16[512,8,128]{2,1,0}, bf16[512,8]{1,0}, /*index=750*/bf16[1,4096,14336]{2,1,0}, bf16[1,4096,14336]{2,1,0}, bf16[1,14336,4096]{2,1,0}, bf16[4096]{0}, bf16[4096]{0}, /*index=755*/bf16[512,8,128]{2,1,0}, bf16[32,128,512]{2,1,0}, bf16[512,32,128]{2,1,0}, bf16[512,8,128]{2,1,0}, bf16[512,8]{1,0}, /*index=760*/bf16[1,4096,14336]{2,1,0}, bf16[1,4096,14336]{2,1,0}, bf16[1,14336,4096]{2,1,0}, bf16[4096]{0}, bf16[4096]{0}, /*index=765*/bf16[512,8,128]{2,1,0}, bf16[32,128,512]{2,1,0}, bf16[512,32,128]{2,1,0}, bf16[512,8,128]{2,1,0}, bf16[512,8]{1,0}, /*index=770*/bf16[1,4096,14336]{2,1,0}, bf16[1,4096,14336]{2,1,0}, bf16[1,14336,4096]{2,1,0}, bf16[4096]{0}, bf16[4096]{0}, /*index=775*/bf16[512,8,128]{2,1,0}, bf16[32,128,512]{2,1,0}, bf16[512,32,128]{2,1,0}, bf16[512,8,128]{2,1,0}, bf16[512,8]{1,0}, /*index=780*/bf16[1,4096,14336]{2,1,0}, bf16[1,4096,14336]{2,1,0}, bf16[1,14336,4096]{2,1,0}, bf16[4096]{0}, bf16[4096]{0}, /*index=785*/bf16[512,8,128]{2,1,0}, bf16[32,128,512]{2,1,0}, bf16[512,32,128]{2,1,0}, bf16[512,8,128]{2,1,0}, bf16[512,8]{1,0}, /*index=790*/bf16[1,4096,14336]{2,1,0}, bf16[1,4096,14336]{2,1,0}, bf16[1,14336,4096]{2,1,0}, bf16[4096]{0}, bf16[4096]{0}, /*index=795*/bf16[512,8,128]{2,1,0}, bf16[32,128,512]{2,1,0}, bf16[512,32,128]{2,1,0}, bf16[512,8,128]{2,1,0}, bf16[512,8]{1,0}, /*index=800*/bf16[1,4096,14336]{2,1,0}, bf16[1,4096,14336]{2,1,0}, bf16[1,14336,4096]{2,1,0}, bf16[4096]{0}, bf16[4096]{0}, /*index=805*/bf16[512,8,128]{2,1,0}, bf16[32,128,512]{2,1,0}, bf16[512,32,128]{2,1,0}, bf16[512,8,128]{2,1,0}, bf16[512,8]{1,0}, /*index=810*/bf16[1,4096,14336]{2,1,0}, bf16[1,4096,14336]{2,1,0}, bf16[1,14336,4096]{2,1,0}, bf16[4096]{0}, bf16[4096]{0}, /*index=815*/bf16[512,8,128]{2,1,0}, bf16[32,128,512]{2,1,0}, bf16[512,32,128]{2,1,0}, bf16[512,8,128]{2,1,0}, bf16[512,8]{1,0}, /*index=820*/bf16[1,4096,14336]{2,1,0}, bf16[1,4096,14336]{2,1,0}, bf16[1,14336,4096]{2,1,0}, bf16[4096]{0}, bf16[4096]{0}, /*index=825*/bf16[512,8,128]{2,1,0}, bf16[32,128,512]{2,1,0}, bf16[512,32,128]{2,1,0}, bf16[512,8,128]{2,1,0}, bf16[512,8]{1,0}, /*index=830*/bf16[1,4096,14336]{2,1,0}, bf16[1,4096,14336]{2,1,0}, bf16[1,14336,4096]{2,1,0}, bf16[4096]{0}, bf16[4096]{0}, /*index=835*/bf16[512,8,128]{2,1,0}, bf16[32,128,512]{2,1,0}, bf16[512,32,128]{2,1,0}, bf16[512,8,128]{2,1,0}, bf16[512,8]{1,0}, /*index=840*/bf16[1,4096,14336]{2,1,0}, bf16[1,4096,14336]{2,1,0}, bf16[1,14336,4096]{2,1,0}, bf16[4096]{0}, bf16[4096]{0}, /*index=845*/bf16[512,8,128]{2,1,0}, bf16[32,128,512]{2,1,0}, bf16[512,32,128]{2,1,0}, bf16[512,8,128]{2,1,0}, bf16[512,8]{1,0}, /*index=850*/bf16[1,4096,14336]{2,1,0}, bf16[1,4096,14336]{2,1,0}, bf16[1,14336,4096]{2,1,0}, bf16[4096]{0}, bf16[4096]{0}, /*index=855*/bf16[512,8,128]{2,1,0}, bf16[32,128,512]{2,1,0}, bf16[512,32,128]{2,1,0}, bf16[512,8,128]{2,1,0}, bf16[512,8]{1,0}, /*index=860*/bf16[1,4096,14336]{2,1,0}, bf16[1,4096,14336]{2,1,0}, bf16[1,14336,4096]{2,1,0}, bf16[4096]{0}, bf16[4096]{0}, /*index=865*/bf16[512,8,128]{2,1,0}, bf16[32,128,512]{2,1,0}, bf16[512,32,128]{2,1,0}, bf16[512,8,128]{2,1,0}, bf16[512,8]{1,0}, /*index=870*/bf16[1,4096,14336]{2,1,0}, bf16[1,4096,14336]{2,1,0}, bf16[1,14336,4096]{2,1,0}, bf16[4096]{0}, bf16[4096]{0}, /*index=875*/bf16[512,8,128]{2,1,0}, bf16[32,128,512]{2,1,0}, bf16[512,32,128]{2,1,0}, bf16[512,8,128]{2,1,0}, bf16[512,8]{1,0}, /*index=880*/bf16[1,4096,14336]{2,1,0}, bf16[1,4096,14336]{2,1,0}, bf16[1,14336,4096]{2,1,0}, bf16[4096]{0}, bf16[4096]{0}, /*index=885*/bf16[512,8,128]{2,1,0}, bf16[32,128,512]{2,1,0}, bf16[512,32,128]{2,1,0}, bf16[512,8,128]{2,1,0}, bf16[512,8]{1,0}, /*index=890*/bf16[1,4096,14336]{2,1,0}, bf16[1,4096,14336]{2,1,0}, bf16[1,14336,4096]{2,1,0}, bf16[4096]{0}, bf16[4096]{0}, /*index=895*/bf16[512,8,128]{2,1,0}, bf16[32,128,512]{2,1,0}, bf16[512,32,128]{2,1,0}, bf16[512,8,128]{2,1,0}, bf16[512,8]{1,0}, /*index=900*/bf16[1,4096,14336]{2,1,0}, bf16[1,4096,14336]{2,1,0}, bf16[1,14336,4096]{2,1,0}, bf16[4096]{0}, bf16[4096]{0}, /*index=905*/bf16[512,8,128]{2,1,0}, bf16[32,128,512]{2,1,0}, bf16[512,32,128]{2,1,0}, bf16[512,8,128]{2,1,0}, bf16[512,8]{1,0}, /*index=910*/bf16[1,4096,14336]{2,1,0}, bf16[1,4096,14336]{2,1,0}, bf16[1,14336,4096]{2,1,0}, bf16[4096]{0}, bf16[4096]{0}, /*index=915*/bf16[512,8,128]{2,1,0}, bf16[32,128,512]{2,1,0}, bf16[512,32,128]{2,1,0}, bf16[512,8,128]{2,1,0}, bf16[512,8]{1,0}, /*index=920*/bf16[1,4096,14336]{2,1,0}, bf16[1,4096,14336]{2,1,0}, bf16[1,14336,4096]{2,1,0}, bf16[4096]{0}, bf16[4096]{0}, /*index=925*/bf16[512,8,128]{2,1,0}, bf16[32,128,512]{2,1,0}, bf16[512,32,128]{2,1,0}, bf16[512,8,128]{2,1,0}, bf16[512,8]{1,0}, /*index=930*/bf16[1,4096,14336]{2,1,0}, bf16[1,4096,14336]{2,1,0}, bf16[1,14336,4096]{2,1,0}, bf16[4096]{0}, bf16[4096]{0}, /*index=935*/bf16[512,8,128]{2,1,0}, bf16[32,128,512]{2,1,0}, bf16[512,32,128]{2,1,0}, bf16[512,8,128]{2,1,0}, bf16[512,8]{1,0}, /*index=940*/bf16[1,4096,14336]{2,1,0}, bf16[1,4096,14336]{2,1,0}, bf16[1,14336,4096]{2,1,0}, bf16[4096]{0}, bf16[4096]{0}, /*index=945*/bf16[512,8,128]{2,1,0}, bf16[32,128,512]{2,1,0}, bf16[512,32,128]{2,1,0}, bf16[512,8,128]{2,1,0}, bf16[512,8]{1,0}, /*index=950*/bf16[1,4096,14336]{2,1,0}, bf16[1,4096,14336]{2,1,0}, bf16[1,14336,4096]{2,1,0}, bf16[4096]{0}, bf16[4096]{0}, /*index=955*/bf16[512,8,128]{2,1,0}, bf16[32,128,512]{2,1,0}, bf16[512,32,128]{2,1,0}, bf16[512,8,128]{2,1,0}, bf16[512,8]{1,0}, /*index=960*/bf16[1,4096,14336]{2,1,0}, bf16[1,4096,14336]{2,1,0}, bf16[1,14336,4096]{2,1,0}, bf16[4096]{0}, bf16[4096]{0}, /*index=965*/bf16[512,8,128]{2,1,0}, bf16[32,128,512]{2,1,0}, bf16[512,32,128]{2,1,0}, bf16[512,8,128]{2,1,0}, bf16[512,32000]{1,0}, /*index=970*/bf16[32000,512]{1,0}, s32[], bf16[], f32[], f32[], /*index=975*/f32[], bf16[], bf16[], s32[]) tuple(%add.1352, %add.2785, %add.2790, %add.2796, %add.2802, /*index=5*/%add.2807, %add.2812, %add.2817, %add.2822, %add.2828, /*index=10*/%add.2833, %add.2839, %add.2844, %add.2849, %add.2854, /*index=15*/%add.2859, %add.2864, %add.2869, %add.2875, %add.2881, /*index=20*/%add.2886, %add.2891, %add.2897, %add.2904, %add.2909, /*index=25*/%add.2914, %add.2921, %add.2926, %add.2931, %add.2936, /*index=30*/%add.2941, %add.2946, %add.2953, %add.2959, %add.2964, /*index=35*/%add.2970, %add.2975, %add.2981, %add.2986, %add.2991, /*index=40*/%add.2996, %add.3001, %add.3007, %add.3012, %add.3018, /*index=45*/%add.3023, %add.3029, %add.3035, %add.3040, %add.3045, /*index=50*/%add.3051, %add.3056, %add.3061, %add.3067, %add.3072, /*index=55*/%add.3077, %add.3082, %add.3087, %add.3092, %add.3098, /*index=60*/%add.3104, %add.3109, %add.3114, %add.3119, %add.3124, /*index=65*/%add.3129, %add.3134, %add.3139, %add.3146, %add.3152, /*index=70*/%add.3157, %add.3162, %add.3167, %add.3173, %add.3178, /*index=75*/%add.3183, %add.3188, %add.3195, %add.3201, %add.3207, /*index=80*/%add.3212, %add.3217, %add.3223, %add.3228, %add.3233, /*index=85*/%add.3238, %add.3243, %add.3248, %add.3254, %add.3261, /*index=90*/%add.3266, %add.3271, %add.3278, %add.3284, %add.3290, /*index=95*/%add.3295, %add.3301, %add.3306, %add.3311, %add.3316, /*index=100*/%add.3321, %add.3326, %add.3331, %add.3337, %add.3343, /*index=105*/%add.3348, %add.3354, %add.3359, %add.3364, %add.3370, /*index=110*/%add.3375, %add.3380, %add.3385, %add.3390, %add.3395, /*index=115*/%add.3400, %add.3405, %add.3411, %add.3417, %add.3423, /*index=120*/%add.3428, %add.3433, %add.3438, %add.3444, %add.3450, /*index=125*/%add.3455, %add.3460, %add.3467, %add.3472, %add.3477, /*index=130*/%add.3482, %add.3487, %add.3493, %add.3498, %add.3504, /*index=135*/%add.3509, %add.3515, %add.3520, %add.3525, %add.3530, /*index=140*/%add.3535, %add.3540, %add.3546, %add.3551, %add.3556, /*index=145*/%add.3564, %add.3570, %add.3575, %add.3581, %add.3586, /*index=150*/%add.3592, %add.3597, %add.3602, %add.3608, %add.3613, /*index=155*/%add.3618, %add.3623, %add.3628, %add.3633, %add.3638, /*index=160*/%add.3645, %add.3650, %add.3656, %add.3661, %add.3666, /*index=165*/%add.3671, %add.3676, %add.3681, %add.3687, %add.3693, /*index=170*/%add.3698, %add.3703, %add.3708, %add.3715, %add.3720, /*index=175*/%add.3725, %add.3730, %add.3737, %add.3742, %add.3747, /*index=180*/%add.3753, %add.3758, %add.3764, %add.3769, %add.3774, /*index=185*/%add.3779, %add.3784, %add.3789, %add.3794, %add.3799, /*index=190*/%add.3805, %add.3810, %add.3817, %add.3822, %add.3827, /*index=195*/%add.3833, %add.3838, %add.3844, %add.3849, %add.3854, /*index=200*/%add.3859, %add.3866, %add.3872, %add.3878, %add.3884, /*index=205*/%add.3889, %add.3895, %add.3900, %add.3905, %add.3911, /*index=210*/%add.3916, %add.3921, %add.3926, %add.3931, %add.3936, /*index=215*/%add.3941, %add.3947, %add.3952, %add.3959, %add.3965, /*index=220*/%add.3970, %add.3975, %add.3980, %add.3986, %add.3991, /*index=225*/%add.3996, %add.4001, %add.4008, %add.4013, %add.4019, /*index=230*/%add.4024, %add.4029, %add.4035, %add.4040, %add.4045, /*index=235*/%add.4050, %add.4056, %add.4061, %add.4066, %add.4071, /*index=240*/%add.4076, %add.4081, %add.4086, %add.4092, %add.4097, /*index=245*/%add.4103, %add.4109, %add.4115, %add.4121, %add.4126, /*index=250*/%add.4131, %add.4136, %add.4141, %add.4146, %add.4152, /*index=255*/%add.4157, %add.4162, %add.4169, %add.4175, %add.4180, /*index=260*/%add.4187, %add.4192, %add.4198, %add.4203, %add.4208, /*index=265*/%add.4213, %add.4218, %add.4223, %add.4229, %add.4235, /*index=270*/%add.4240, %add.4245, %add.4251, %add.4257, %add.4263, /*index=275*/%add.4268, %add.4273, %add.4280, %add.4285, %add.4290, /*index=280*/%add.4295, %add.4300, %add.4306, %add.4311, %add.4316, /*index=285*/%add.4322, %add.4327, %add.4332, %add.4337, %add.4342, /*index=290*/%add.4347, %add.4352, %add.4357, %add.4363, %add.4368, /*index=295*/%add.4374, %add.4379, %add.4385, %add.4390, %add.4395, /*index=300*/%add.4400, %add.4405, %add.4410, %add.4416, %add.4423, /*index=305*/%add.4428, %add.4433, %add.4438, %add.4443, %add.4448, /*index=310*/%add.4454, %add.4459, %add.4464, %add.4470, %add.4477, /*index=315*/%add.4482, %add.4487, %add.4493, %add.4500, %add.4506, /*index=320*/%add.4511, %add.4516, %add.4522, %add.4529, %select_n.703, /*index=325*/%add.2780, %add.2786, %add.2791, %add.2797, %add.2803, /*index=330*/%add.2808, %add.2813, %add.2818, %add.2823, %add.2829, /*index=335*/%add.2834, %add.2840, %add.2845, %add.2850, %add.2855, /*index=340*/%add.2860, %add.2865, %add.2871, %add.2876, %add.2882, /*index=345*/%add.2887, %add.2893, %add.2898, %add.2905, %add.2910, /*index=350*/%add.2915, %add.2922, %add.2927, %add.2932, %add.2937, /*index=355*/%add.2942, %add.2947, %add.2954, %add.2960, %add.2965, /*index=360*/%add.2971, %add.2976, %add.2982, %add.2987, %add.2992, /*index=365*/%add.2997, %add.3002, %add.3008, %add.3013, %add.3019, /*index=370*/%add.3024, %add.3030, %add.3036, %add.3041, %add.3047, /*index=375*/%add.3052, %add.3057, %add.3062, %add.3068, %add.3073, /*index=380*/%add.3078, %add.3083, %add.3088, %add.3093, %add.3099, /*index=385*/%add.3105, %add.3110, %add.3115, %add.3120, %add.3125, /*index=390*/%add.3130, %add.3135, %add.3140, %add.3147, %add.3153, /*index=395*/%add.3158, %add.3163, %add.3168, %add.3174, %add.3179, /*index=400*/%add.3184, %add.3189, %add.3197, %add.3202, %add.3208, /*index=405*/%add.3213, %add.3218, %add.3224, %add.3229, %add.3234, /*index=410*/%add.3239, %add.3244, %add.3249, %add.3255, %add.3262, /*index=415*/%add.3267, %add.3272, %add.3279, %add.3285, %add.3291, /*index=420*/%add.3296, %add.3302, %add.3307, %add.3312, %add.3317, /*index=425*/%add.3322, %add.3327, %add.3332, %add.3339, %add.3344, /*index=430*/%add.3349, %add.3355, %add.3360, %add.3365, %add.3371, /*index=435*/%add.3376, %add.3381, %add.3386, %add.3391, %add.3396, /*index=440*/%add.3401, %add.3407, %add.3413, %add.3418, %add.3424, /*index=445*/%add.3429, %add.3434, %add.3439, %add.3445, %add.3451, /*index=450*/%add.3456, %add.3463, %add.3468, %add.3473, %add.3478, /*index=455*/%add.3483, %add.3488, %add.3494, %add.3499, %add.3505, /*index=460*/%add.3511, %add.3516, %add.3521, %add.3526, %add.3531, /*index=465*/%add.3536, %add.3541, %add.3547, %add.3552, %add.3558, /*index=470*/%add.3565, %add.3571, %add.3576, %add.3582, %add.3588, /*index=475*/%add.3593, %add.3598, %add.3603, %add.3609, %add.3614, /*index=480*/%add.3619, %add.3624, %add.3629, %add.3634, %add.3640, /*index=485*/%add.3646, %add.3651, %add.3657, %add.3662, %add.3667, /*index=490*/%add.3672, %add.3677, %add.3682, %add.3688, %add.3694, /*index=495*/%add.3699, %add.3704, %add.3709, %add.3716, %add.3721, /*index=500*/%add.3726, %add.3731, %add.3738, %add.3743, %add.3748, /*index=505*/%add.3754, %add.3759, %add.3765, %add.3770, %add.3775, /*index=510*/%add.3780, %add.3785, %add.3790, %add.3795, %add.3800, /*index=515*/%add.3806, %add.3811, %add.3818, %add.3823, %add.3829, /*index=520*/%add.3834, %add.3840, %add.3845, %add.3850, %add.3855, /*index=525*/%add.3860, %add.3868, %add.3873, %add.3879, %add.3885, /*index=530*/%add.3890, %add.3896, %add.3901, %add.3906, %add.3912, /*index=535*/%add.3917, %add.3922, %add.3927, %add.3932, %add.3937, /*index=540*/%add.3942, %add.3948, %add.3953, %add.3960, %add.3966, /*index=545*/%add.3971, %add.3976, %add.3981, %add.3987, %add.3992, /*index=550*/%add.3997, %add.4002, %add.4009, %add.4015, %add.4020, /*index=555*/%add.4025, %add.4030, %add.4036, %add.4041, %add.4046, /*index=560*/%add.4051, %add.4057, %add.4062, %add.4067, %add.4072, /*index=565*/%add.4077, %add.4082, %add.4088, %add.4093, %add.4098, /*index=570*/%add.4104, %add.4111, %add.4116, %add.4122, %add.4127, /*index=575*/%add.4132, %add.4137, %add.4142, %add.4147, %add.4153, /*index=580*/%add.4158, %add.4163, %add.4170, %add.4176, %add.4182, /*index=585*/%add.4188, %add.4193, %add.4199, %add.4204, %add.4209, /*index=590*/%add.4214, %add.4219, %add.4224, %add.4230, %add.4236, /*index=595*/%add.4241, %add.4246, %add.4252, %add.4258, %add.4264, /*index=600*/%add.4269, %add.4276, %add.4281, %add.4286, %add.4291, /*index=605*/%add.4296, %add.4301, %add.4307, %add.4312, %add.4317, /*index=610*/%add.4323, %add.4328, %add.4333, %add.4338, %add.4343, /*index=615*/%add.4348, %add.4353, %add.4359, %add.4364, %add.4369, /*index=620*/%add.4375, %add.4380, %add.4386, %add.4391, %add.4396, /*index=625*/%add.4401, %add.4406, %add.4411, %add.4417, %add.4424, /*index=630*/%add.4429, %add.4434, %add.4439, %add.4444, %add.4449, /*index=635*/%add.4455, %add.4460, %add.4465, %add.4471, %add.4478, /*index=640*/%add.4483, %add.4488, %add.4494, %add.4501, %add.4507, /*index=645*/%add.4512, %add.4517, %add.4523, %add.2782, %add.2787, /*index=650*/%add.2792, %add.2799, %add.2804, %add.2809, %add.2814, /*index=655*/%add.2819, %add.2824, %add.2830, %add.2835, %add.2841, /*index=660*/%add.2846, %add.2851, %add.2856, %add.2861, %add.2866, /*index=665*/%add.2872, %add.2877, %add.2883, %add.2888, %add.2894, /*index=670*/%add.2899, %add.2906, %add.2911, %add.2916, %add.2923, /*index=675*/%add.2928, %add.2933, %add.2938, %add.2943, %add.2948, /*index=680*/%add.2956, %add.2961, %add.2966, %add.2972, %add.2977, /*index=685*/%add.2983, %add.2988, %add.2993, %add.2998, %add.3004, /*index=690*/%add.3009, %add.3014, %add.3020, %add.3025, %add.3031, /*index=695*/%add.3037, %add.3042, %add.3048, %add.3053, %add.3058, /*index=700*/%add.3063, %add.3069, %add.3074, %add.3079, %add.3084, /*index=705*/%add.3089, %add.3094, %add.3100, %add.3106, %add.3111, /*index=710*/%add.3116, %add.3121, %add.3126, %add.3131, %add.3136, /*index=715*/%add.3143, %add.3148, %add.3154, %add.3159, %add.3164, /*index=720*/%add.3169, %add.3175, %add.3180, %add.3185, %add.3192, /*index=725*/%add.3198, %add.3203, %add.3209, %add.3214, %add.3219, /*index=730*/%add.3225, %add.3230, %add.3235, %add.3240, %add.3245, /*index=735*/%add.3250, %add.3257, %add.3263, %add.3268, %add.3275, /*index=740*/%add.3280, %add.3287, %add.3292, %add.3298, %add.3303, /*index=745*/%add.3308, %add.3313, %add.3318, %add.3323, %add.3328, /*index=750*/%add.3333, %add.3340, %add.3345, %add.3351, %add.3356, /*index=755*/%add.3361, %add.3366, %add.3372, %add.3377, %add.3382, /*index=760*/%add.3387, %add.3392, %add.3397, %add.3402, %add.3408, /*index=765*/%add.3414, %add.3419, %add.3425, %add.3430, %add.3435, /*index=770*/%add.3440, %add.3447, %add.3452, %add.3457, %add.3464, /*index=775*/%add.3469, %add.3474, %add.3479, %add.3484, %add.3489, /*index=780*/%add.3495, %add.3501, %add.3506, %add.3512, %add.3517, /*index=785*/%add.3522, %add.3527, %add.3532, %add.3537, %add.3542, /*index=790*/%add.3548, %add.3553, %add.3559, %add.3566, %add.3572, /*index=795*/%add.3578, %add.3583, %add.3589, %add.3594, %add.3599, /*index=800*/%add.3604, %add.3610, %add.3615, %add.3620, %add.3625, /*index=805*/%add.3630, %add.3635, %add.3641, %add.3647, %add.3652, /*index=810*/%add.3658, %add.3663, %add.3668, %add.3673, %add.3678, /*index=815*/%add.3684, %add.3689, %add.3695, %add.3700, %add.3705, /*index=820*/%add.3711, %add.3717, %add.3722, %add.3727, %add.3734, /*index=825*/%add.3739, %add.3744, %add.3749, %add.3755, %add.3760, /*index=830*/%add.3766, %add.3771, %add.3776, %add.3781, %add.3786, /*index=835*/%add.3791, %add.3796, %add.3801, %add.3807, %add.3812, /*index=840*/%add.3819, %add.3824, %add.3830, %add.3835, %add.3841, /*index=845*/%add.3846, %add.3851, %add.3856, %add.3862, %add.3869, /*index=850*/%add.3874, %add.3880, %add.3886, %add.3892, %add.3897, /*index=855*/%add.3902, %add.3907, %add.3913, %add.3918, %add.3923, /*index=860*/%add.3928, %add.3933, %add.3938, %add.3943, %add.3949, /*index=865*/%add.3955, %add.3961, %add.3967, %add.3972, %add.3977, /*index=870*/%add.3982, %add.3988, %add.3993, %add.3998, %add.4005, /*index=875*/%add.4010, %add.4016, %add.4021, %add.4026, %add.4031, /*index=880*/%add.4037, %add.4042, %add.4047, %add.4052, %add.4058, /*index=885*/%add.4063, %add.4068, %add.4073, %add.4078, %add.4083, /*index=890*/%add.4089, %add.4094, %add.4100, %add.4105, %add.4112, /*index=895*/%add.4117, %add.4123, %add.4128, %add.4133, %add.4138, /*index=900*/%add.4143, %add.4149, %add.4154, %add.4159, %add.4164, /*index=905*/%add.4172, %add.4177, %add.4183, %add.4189, %add.4194, /*index=910*/%add.4200, %add.4205, %add.4210, %add.4215, %add.4220, /*index=915*/%add.4226, %add.4231, %add.4237, %add.4242, %add.4247, /*index=920*/%add.4253, %add.4259, %add.4265, %add.4270, %add.4277, /*index=925*/%add.4282, %add.4287, %add.4292, %add.4297, %add.4302, /*index=930*/%add.4308, %add.4313, %add.4319, %add.4324, %add.4329, /*index=935*/%add.4334, %add.4339, %add.4344, %add.4349, %add.4354, /*index=940*/%add.4360, %add.4365, %add.4371, %add.4376, %add.4382, /*index=945*/%add.4387, %add.4392, %add.4397, %add.4402, %add.4407, /*index=950*/%add.4413, %add.4418, %add.4425, %add.4430, %add.4435, /*index=955*/%add.4440, %add.4445, %add.4450, %add.4456, %add.4461, /*index=960*/%add.4466, %add.4473, %add.4479, %add.4484, %add.4490, /*index=965*/%add.4495, %add.4502, %add.4508, %add.4513, %add.4518, /*index=970*/%add.4524, %select_n.1035, %sqrt.324, %div.3265, %constant.1360, /*index=975*/%constant.1360, %sqrt.325, %sqrt.326, %all-reduce)
}

