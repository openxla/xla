HloModule jit_train_step, input_output_alias={ {0}: (0, {}, may-alias), {1}: (1, {}, may-alias), {2}: (2, {}, may-alias), {3}: (3, {}, may-alias), {4}: (4, {}, may-alias), {5}: (5, {}, may-alias), {6}: (6, {}, may-alias), {7}: (7, {}, may-alias), {8}: (8, {}, may-alias), {9}: (9, {}, may-alias), {10}: (10, {}, may-alias), {11}: (11, {}, may-alias), {12}: (12, {}, may-alias), {13}: (13, {}, may-alias), {14}: (14, {}, may-alias), {15}: (15, {}, may-alias), {16}: (16, {}, may-alias), {17}: (17, {}, may-alias), {18}: (18, {}, may-alias), {19}: (19, {}, may-alias), {20}: (20, {}, may-alias), {21}: (21, {}, may-alias), {22}: (22, {}, may-alias), {23}: (23, {}, may-alias), {24}: (24, {}, may-alias), {25}: (25, {}, may-alias), {26}: (26, {}, may-alias), {27}: (27, {}, may-alias), {28}: (28, {}, may-alias), {29}: (29, {}, may-alias), {30}: (30, {}, may-alias), {31}: (31, {}, may-alias), {32}: (32, {}, may-alias), {33}: (33, {}, may-alias), {34}: (34, {}, may-alias), {35}: (35, {}, may-alias), {36}: (36, {}, may-alias), {37}: (37, {}, may-alias), {38}: (38, {}, may-alias), {39}: (39, {}, may-alias), {40}: (40, {}, may-alias), {41}: (41, {}, may-alias), {42}: (42, {}, may-alias), {43}: (43, {}, may-alias), {44}: (44, {}, may-alias), {45}: (45, {}, may-alias), {46}: (46, {}, may-alias), {47}: (47, {}, may-alias), {48}: (48, {}, may-alias), {49}: (49, {}, may-alias), {50}: (50, {}, may-alias), {51}: (51, {}, may-alias), {52}: (52, {}, may-alias), {53}: (53, {}, may-alias), {54}: (54, {}, may-alias), {55}: (55, {}, may-alias), {56}: (56, {}, may-alias), {57}: (57, {}, may-alias), {58}: (58, {}, may-alias), {59}: (59, {}, may-alias), {60}: (60, {}, may-alias), {61}: (61, {}, may-alias), {62}: (62, {}, may-alias), {63}: (63, {}, may-alias), {64}: (64, {}, may-alias), {65}: (65, {}, may-alias), {66}: (66, {}, may-alias), {67}: (67, {}, may-alias), {68}: (68, {}, may-alias), {69}: (69, {}, may-alias), {70}: (70, {}, may-alias), {71}: (71, {}, may-alias), {72}: (72, {}, may-alias), {73}: (73, {}, may-alias), {74}: (74, {}, may-alias), {75}: (75, {}, may-alias), {76}: (76, {}, may-alias), {77}: (77, {}, may-alias), {78}: (78, {}, may-alias), {79}: (79, {}, may-alias), {80}: (80, {}, may-alias) }, entry_computation_layout={(s32[], f32[80,1024]{1,0}, f32[80,1]{1,0}, f32[80,1024]{1,0}, f32[80,1]{1,0}, /*index=5*/f32[80,1024]{1,0}, f32[80,1]{1,0}, f32[80,1024]{1,0}, f32[80,1]{1,0}, f32[80,1024]{1,0}, /*index=10*/f32[80,1]{1,0}, f32[80,1024]{1,0}, f32[80,1]{1,0}, f32[80,1024]{1,0}, f32[80,1]{1,0}, /*index=15*/f32[80,1024]{1,0}, f32[80,1]{1,0}, f32[80,1024]{1,0}, f32[80,1]{1,0}, f32[80,1024]{1,0}, /*index=20*/f32[80,1]{1,0}, f32[80,1024]{1,0}, f32[80,1]{1,0}, f32[80,1024]{1,0}, f32[80,1]{1,0}, /*index=25*/f32[80,1024]{1,0}, f32[80,1]{1,0}, f32[80,1024]{1,0}, f32[80,1]{1,0}, f32[80,1024]{1,0}, /*index=30*/f32[80,1]{1,0}, f32[80,1024]{1,0}, f32[80,1]{1,0}, f32[80,1024]{1,0}, f32[80,1]{1,0}, /*index=35*/f32[80,1024]{1,0}, f32[80,1]{1,0}, f32[80,1024]{1,0}, f32[80,1]{1,0}, f32[80,1024]{1,0}, /*index=40*/f32[80,1]{1,0}, f32[80,1024]{1,0}, f32[80,1]{1,0}, f32[8192]{0}, f32[64,80,28672]{2,1,0}, /*index=45*/f32[64,80,28672]{2,1,0}, f32[28672,80,64]{2,1,0}, f32[8192,80]{1,0}, f32[8192,80]{1,0}, f32[64,80,8,128]{3,2,1,0}, /*index=50*/f32[64,80,128,64]{3,2,1,0}, f32[64,80,64,128]{3,2,1,0}, f32[64,80,8,128]{3,2,1,0}, f32[64,128256]{1,0}, f32[128256,64]{1,0}, /*index=55*/s32[], f32[8192]{0}, f32[64,80,28672]{2,1,0}, f32[64,80,28672]{2,1,0}, f32[28672,80,64]{2,1,0}, /*index=60*/f32[8192,80]{1,0}, f32[8192,80]{1,0}, f32[64,80,8,128]{3,2,1,0}, f32[64,80,128,64]{3,2,1,0}, f32[64,80,64,128]{3,2,1,0}, /*index=65*/f32[64,80,8,128]{3,2,1,0}, f32[64,128256]{1,0}, f32[128256,64]{1,0}, f32[8192]{0}, f32[64,80,28672]{2,1,0}, /*index=70*/f32[64,80,28672]{2,1,0}, f32[28672,80,64]{2,1,0}, f32[8192,80]{1,0}, f32[8192,80]{1,0}, f32[64,80,8,128]{3,2,1,0}, /*index=75*/f32[64,80,128,64]{3,2,1,0}, f32[64,80,64,128]{3,2,1,0}, f32[64,80,8,128]{3,2,1,0}, f32[64,128256]{1,0}, f32[128256,64]{1,0}, /*index=80*/s32[], s32[2,8192]{1,0}, s32[2,8192]{1,0}, s32[2,8192]{1,0}, s32[2,8192]{1,0}, /*index=85*/s32[2,8192]{1,0})->(s32[], f32[80,1024]{1,0}, f32[80,1]{1,0}, f32[80,1024]{1,0}, f32[80,1]{1,0}, /*index=5*/f32[80,1024]{1,0}, f32[80,1]{1,0}, f32[80,1024]{1,0}, f32[80,1]{1,0}, f32[80,1024]{1,0}, /*index=10*/f32[80,1]{1,0}, f32[80,1024]{1,0}, f32[80,1]{1,0}, f32[80,1024]{1,0}, f32[80,1]{1,0}, /*index=15*/f32[80,1024]{1,0}, f32[80,1]{1,0}, f32[80,1024]{1,0}, f32[80,1]{1,0}, f32[80,1024]{1,0}, /*index=20*/f32[80,1]{1,0}, f32[80,1024]{1,0}, f32[80,1]{1,0}, f32[80,1024]{1,0}, f32[80,1]{1,0}, /*index=25*/f32[80,1024]{1,0}, f32[80,1]{1,0}, f32[80,1024]{1,0}, f32[80,1]{1,0}, f32[80,1024]{1,0}, /*index=30*/f32[80,1]{1,0}, f32[80,1024]{1,0}, f32[80,1]{1,0}, f32[80,1024]{1,0}, f32[80,1]{1,0}, /*index=35*/f32[80,1024]{1,0}, f32[80,1]{1,0}, f32[80,1024]{1,0}, f32[80,1]{1,0}, f32[80,1024]{1,0}, /*index=40*/f32[80,1]{1,0}, f32[80,1024]{1,0}, f32[80,1]{1,0}, f32[8192]{0}, f32[64,80,28672]{2,1,0}, /*index=45*/f32[64,80,28672]{2,1,0}, f32[28672,80,64]{2,1,0}, f32[8192,80]{1,0}, f32[8192,80]{1,0}, f32[64,80,8,128]{3,2,1,0}, /*index=50*/f32[64,80,128,64]{3,2,1,0}, f32[64,80,64,128]{3,2,1,0}, f32[64,80,8,128]{3,2,1,0}, f32[64,128256]{1,0}, f32[128256,64]{1,0}, /*index=55*/s32[], f32[8192]{0}, f32[64,80,28672]{2,1,0}, f32[64,80,28672]{2,1,0}, f32[28672,80,64]{2,1,0}, /*index=60*/f32[8192,80]{1,0}, f32[8192,80]{1,0}, f32[64,80,8,128]{3,2,1,0}, f32[64,80,128,64]{3,2,1,0}, f32[64,80,64,128]{3,2,1,0}, /*index=65*/f32[64,80,8,128]{3,2,1,0}, f32[64,128256]{1,0}, f32[128256,64]{1,0}, f32[8192]{0}, f32[64,80,28672]{2,1,0}, /*index=70*/f32[64,80,28672]{2,1,0}, f32[28672,80,64]{2,1,0}, f32[8192,80]{1,0}, f32[8192,80]{1,0}, f32[64,80,8,128]{3,2,1,0}, /*index=75*/f32[64,80,128,64]{3,2,1,0}, f32[64,80,64,128]{3,2,1,0}, f32[64,80,8,128]{3,2,1,0}, f32[64,128256]{1,0}, f32[128256,64]{1,0}, /*index=80*/s32[], f32[], f32[], f32[], f32[], /*index=85*/f32[], f32[], s32[])}

%region_60.2446 (reduce_max.2443: bf16[], reduce_max.62: bf16[]) -> bf16[] {
  %reduce_max.2443 = bf16[] parameter(0)
  %reduce_max.62 = bf16[] parameter(1)
  ROOT %reduce_max.63 = bf16[] maximum(%reduce_max.2443, %reduce_max.62)
}

%region_72.2662 (reduce_max.2659: bf16[], reduce_max.2660: bf16[]) -> bf16[] {
  %reduce_max.2659 = bf16[] parameter(0)
  %reduce_max.2660 = bf16[] parameter(1)
  ROOT %reduce_max.2661 = bf16[] maximum(%reduce_max.2659, %reduce_max.2660)
}

%region_75.2716 (reduce_max.69: bf16[], reduce_max.2714: bf16[]) -> bf16[] {
  %reduce_max.69 = bf16[] parameter(0)
  %reduce_max.2714 = bf16[] parameter(1)
  ROOT %reduce_max.2715 = bf16[] maximum(%reduce_max.69, %reduce_max.2714)
}

%region_148.3787 (reduce_sum.3784: f32[], reduce_sum.3785: f32[]) -> f32[] {
  %reduce_sum.3784 = f32[] parameter(0)
  %reduce_sum.3785 = f32[] parameter(1)
  ROOT %reduce_sum.3786 = f32[] add(%reduce_sum.3784, %reduce_sum.3785)
}

%region_149.3793 (reduce_sum.3790: f32[], reduce_sum.3791: f32[]) -> f32[] {
  %reduce_sum.3790 = f32[] parameter(0)
  %reduce_sum.3791 = f32[] parameter(1)
  ROOT %reduce_sum.3792 = f32[] add(%reduce_sum.3790, %reduce_sum.3791)
}

%region_150.3800 (reduce_sum.3797: f32[], reduce_sum.3798: f32[]) -> f32[] {
  %reduce_sum.3797 = f32[] parameter(0)
  %reduce_sum.3798 = f32[] parameter(1)
  ROOT %reduce_sum.3799 = f32[] add(%reduce_sum.3797, %reduce_sum.3798)
}

%region_151.3807 (reduce_sum.3804: f32[], reduce_sum.3805: f32[]) -> f32[] {
  %reduce_sum.3804 = f32[] parameter(0)
  %reduce_sum.3805 = f32[] parameter(1)
  ROOT %reduce_sum.3806 = f32[] add(%reduce_sum.3804, %reduce_sum.3805)
}

%region_152.3814 (reduce_sum.3811: f32[], reduce_sum.3812: f32[]) -> f32[] {
  %reduce_sum.3811 = f32[] parameter(0)
  %reduce_sum.3812 = f32[] parameter(1)
  ROOT %reduce_sum.3813 = f32[] add(%reduce_sum.3811, %reduce_sum.3812)
}

%region_153.3821 (reduce_sum.3818: f32[], reduce_sum.3819: f32[]) -> f32[] {
  %reduce_sum.3818 = f32[] parameter(0)
  %reduce_sum.3819 = f32[] parameter(1)
  ROOT %reduce_sum.3820 = f32[] add(%reduce_sum.3818, %reduce_sum.3819)
}

%region_154.3828 (reduce_sum.3825: f32[], reduce_sum.3826: f32[]) -> f32[] {
  %reduce_sum.3825 = f32[] parameter(0)
  %reduce_sum.3826 = f32[] parameter(1)
  ROOT %reduce_sum.3827 = f32[] add(%reduce_sum.3825, %reduce_sum.3826)
}

%region_155.3835 (reduce_sum.3832: f32[], reduce_sum.3833: f32[]) -> f32[] {
  %reduce_sum.3832 = f32[] parameter(0)
  %reduce_sum.3833 = f32[] parameter(1)
  ROOT %reduce_sum.3834 = f32[] add(%reduce_sum.3832, %reduce_sum.3833)
}

%region_156.3842 (reduce_sum.3839: f32[], reduce_sum.3840: f32[]) -> f32[] {
  %reduce_sum.3839 = f32[] parameter(0)
  %reduce_sum.3840 = f32[] parameter(1)
  ROOT %reduce_sum.3841 = f32[] add(%reduce_sum.3839, %reduce_sum.3840)
}

%region_157.3849 (reduce_sum.3846: f32[], reduce_sum.3847: f32[]) -> f32[] {
  %reduce_sum.3846 = f32[] parameter(0)
  %reduce_sum.3847 = f32[] parameter(1)
  ROOT %reduce_sum.3848 = f32[] add(%reduce_sum.3846, %reduce_sum.3847)
}

%region_158.3856 (reduce_sum.3853: f32[], reduce_sum.3854: f32[]) -> f32[] {
  %reduce_sum.3853 = f32[] parameter(0)
  %reduce_sum.3854 = f32[] parameter(1)
  ROOT %reduce_sum.3855 = f32[] add(%reduce_sum.3853, %reduce_sum.3854)
}

%region_159.3863 (reduce_sum.3860: f32[], reduce_sum.3861: f32[]) -> f32[] {
  %reduce_sum.3860 = f32[] parameter(0)
  %reduce_sum.3861 = f32[] parameter(1)
  ROOT %reduce_sum.3862 = f32[] add(%reduce_sum.3860, %reduce_sum.3861)
}

%region_160.3870 (reduce_sum.3867: f32[], reduce_sum.3868: f32[]) -> f32[] {
  %reduce_sum.3867 = f32[] parameter(0)
  %reduce_sum.3868 = f32[] parameter(1)
  ROOT %reduce_sum.3869 = f32[] add(%reduce_sum.3867, %reduce_sum.3868)
}

%region_161.3877 (reduce_sum.3874: f32[], reduce_sum.3875: f32[]) -> f32[] {
  %reduce_sum.3874 = f32[] parameter(0)
  %reduce_sum.3875 = f32[] parameter(1)
  ROOT %reduce_sum.3876 = f32[] add(%reduce_sum.3874, %reduce_sum.3875)
}

%region_162.3884 (reduce_sum.3881: f32[], reduce_sum.3882: f32[]) -> f32[] {
  %reduce_sum.3881 = f32[] parameter(0)
  %reduce_sum.3882 = f32[] parameter(1)
  ROOT %reduce_sum.3883 = f32[] add(%reduce_sum.3881, %reduce_sum.3882)
}

%region_163.3891 (reduce_sum.3888: f32[], reduce_sum.3889: f32[]) -> f32[] {
  %reduce_sum.3888 = f32[] parameter(0)
  %reduce_sum.3889 = f32[] parameter(1)
  ROOT %reduce_sum.3890 = f32[] add(%reduce_sum.3888, %reduce_sum.3889)
}

%region_164.3898 (reduce_sum.3895: f32[], reduce_sum.3896: f32[]) -> f32[] {
  %reduce_sum.3895 = f32[] parameter(0)
  %reduce_sum.3896 = f32[] parameter(1)
  ROOT %reduce_sum.3897 = f32[] add(%reduce_sum.3895, %reduce_sum.3896)
}

%region_165.3905 (reduce_sum.3902: f32[], reduce_sum.3903: f32[]) -> f32[] {
  %reduce_sum.3902 = f32[] parameter(0)
  %reduce_sum.3903 = f32[] parameter(1)
  ROOT %reduce_sum.3904 = f32[] add(%reduce_sum.3902, %reduce_sum.3903)
}

%region_166.3912 (reduce_sum.3909: f32[], reduce_sum.3910: f32[]) -> f32[] {
  %reduce_sum.3909 = f32[] parameter(0)
  %reduce_sum.3910 = f32[] parameter(1)
  ROOT %reduce_sum.3911 = f32[] add(%reduce_sum.3909, %reduce_sum.3910)
}

%region_167.3919 (reduce_sum.3916: f32[], reduce_sum.3917: f32[]) -> f32[] {
  %reduce_sum.3916 = f32[] parameter(0)
  %reduce_sum.3917 = f32[] parameter(1)
  ROOT %reduce_sum.3918 = f32[] add(%reduce_sum.3916, %reduce_sum.3917)
}

%region_168.3926 (reduce_sum.3923: f32[], reduce_sum.3924: f32[]) -> f32[] {
  %reduce_sum.3923 = f32[] parameter(0)
  %reduce_sum.3924 = f32[] parameter(1)
  ROOT %reduce_sum.3925 = f32[] add(%reduce_sum.3923, %reduce_sum.3924)
}

%region_169.3933 (reduce_sum.3930: f32[], reduce_sum.3931: f32[]) -> f32[] {
  %reduce_sum.3930 = f32[] parameter(0)
  %reduce_sum.3931 = f32[] parameter(1)
  ROOT %reduce_sum.3932 = f32[] add(%reduce_sum.3930, %reduce_sum.3931)
}

%region_170.3940 (reduce_sum.3937: f32[], reduce_sum.3938: f32[]) -> f32[] {
  %reduce_sum.3937 = f32[] parameter(0)
  %reduce_sum.3938 = f32[] parameter(1)
  ROOT %reduce_sum.3939 = f32[] add(%reduce_sum.3937, %reduce_sum.3938)
}

%region_171.3947 (reduce_sum.3944: f32[], reduce_sum.3945: f32[]) -> f32[] {
  %reduce_sum.3944 = f32[] parameter(0)
  %reduce_sum.3945 = f32[] parameter(1)
  ROOT %reduce_sum.3946 = f32[] add(%reduce_sum.3944, %reduce_sum.3945)
}

%region_172.3954 (reduce_sum.3951: f32[], reduce_sum.3952: f32[]) -> f32[] {
  %reduce_sum.3951 = f32[] parameter(0)
  %reduce_sum.3952 = f32[] parameter(1)
  ROOT %reduce_sum.3953 = f32[] add(%reduce_sum.3951, %reduce_sum.3952)
}

%region_173.3961 (reduce_sum.3958: f32[], reduce_sum.3959: f32[]) -> f32[] {
  %reduce_sum.3958 = f32[] parameter(0)
  %reduce_sum.3959 = f32[] parameter(1)
  ROOT %reduce_sum.3960 = f32[] add(%reduce_sum.3958, %reduce_sum.3959)
}

%region_174.3968 (reduce_sum.3965: f32[], reduce_sum.3966: f32[]) -> f32[] {
  %reduce_sum.3965 = f32[] parameter(0)
  %reduce_sum.3966 = f32[] parameter(1)
  ROOT %reduce_sum.3967 = f32[] add(%reduce_sum.3965, %reduce_sum.3966)
}

%region_175.3975 (reduce_sum.3972: f32[], reduce_sum.3973: f32[]) -> f32[] {
  %reduce_sum.3972 = f32[] parameter(0)
  %reduce_sum.3973 = f32[] parameter(1)
  ROOT %reduce_sum.3974 = f32[] add(%reduce_sum.3972, %reduce_sum.3973)
}

%region_176.3982 (reduce_sum.3979: f32[], reduce_sum.3980: f32[]) -> f32[] {
  %reduce_sum.3979 = f32[] parameter(0)
  %reduce_sum.3980 = f32[] parameter(1)
  ROOT %reduce_sum.3981 = f32[] add(%reduce_sum.3979, %reduce_sum.3980)
}

%region_177.3989 (reduce_sum.3986: f32[], reduce_sum.3987: f32[]) -> f32[] {
  %reduce_sum.3986 = f32[] parameter(0)
  %reduce_sum.3987 = f32[] parameter(1)
  ROOT %reduce_sum.3988 = f32[] add(%reduce_sum.3986, %reduce_sum.3987)
}

%region_178.3996 (reduce_sum.3993: f32[], reduce_sum.26: f32[]) -> f32[] {
  %reduce_sum.3993 = f32[] parameter(0)
  %reduce_sum.26 = f32[] parameter(1)
  ROOT %reduce_sum.27 = f32[] add(%reduce_sum.3993, %reduce_sum.26)
}

%region_179.4003 (reduce_sum.28: f32[], reduce_sum.29: f32[]) -> f32[] {
  %reduce_sum.28 = f32[] parameter(0)
  %reduce_sum.29 = f32[] parameter(1)
  ROOT %reduce_sum.30 = f32[] add(%reduce_sum.28, %reduce_sum.29)
}

%region_180.4010 (reduce_sum.31: f32[], reduce_sum.32: f32[]) -> f32[] {
  %reduce_sum.31 = f32[] parameter(0)
  %reduce_sum.32 = f32[] parameter(1)
  ROOT %reduce_sum.33 = f32[] add(%reduce_sum.31, %reduce_sum.32)
}

%region_181.4017 (reduce_sum.34: f32[], reduce_sum.35: f32[]) -> f32[] {
  %reduce_sum.34 = f32[] parameter(0)
  %reduce_sum.35 = f32[] parameter(1)
  ROOT %reduce_sum.36 = f32[] add(%reduce_sum.34, %reduce_sum.35)
}

%region_182.4024 (reduce_sum.37: f32[], reduce_sum.38: f32[]) -> f32[] {
  %reduce_sum.37 = f32[] parameter(0)
  %reduce_sum.38 = f32[] parameter(1)
  ROOT %reduce_sum.39 = f32[] add(%reduce_sum.37, %reduce_sum.38)
}

%region_183.4031 (reduce_sum.40: f32[], reduce_sum.41: f32[]) -> f32[] {
  %reduce_sum.40 = f32[] parameter(0)
  %reduce_sum.41 = f32[] parameter(1)
  ROOT %reduce_sum.42 = f32[] add(%reduce_sum.40, %reduce_sum.41)
}

%region_184.4038 (reduce_sum.43: f32[], reduce_sum.44: f32[]) -> f32[] {
  %reduce_sum.43 = f32[] parameter(0)
  %reduce_sum.44 = f32[] parameter(1)
  ROOT %reduce_sum.45 = f32[] add(%reduce_sum.43, %reduce_sum.44)
}

%region_185.4045 (reduce_sum.46: f32[], reduce_sum.47: f32[]) -> f32[] {
  %reduce_sum.46 = f32[] parameter(0)
  %reduce_sum.47 = f32[] parameter(1)
  ROOT %reduce_sum.48 = f32[] add(%reduce_sum.46, %reduce_sum.47)
}

%region_186.4052 (reduce_sum.49: f32[], reduce_sum.50: f32[]) -> f32[] {
  %reduce_sum.49 = f32[] parameter(0)
  %reduce_sum.50 = f32[] parameter(1)
  ROOT %reduce_sum.51 = f32[] add(%reduce_sum.49, %reduce_sum.50)
}

%region_187.4059 (reduce_sum.52: f32[], reduce_sum.53: f32[]) -> f32[] {
  %reduce_sum.52 = f32[] parameter(0)
  %reduce_sum.53 = f32[] parameter(1)
  ROOT %reduce_sum.54 = f32[] add(%reduce_sum.52, %reduce_sum.53)
}

%region_188.4066 (reduce_sum.55: f32[], reduce_sum.56: f32[]) -> f32[] {
  %reduce_sum.55 = f32[] parameter(0)
  %reduce_sum.56 = f32[] parameter(1)
  ROOT %reduce_sum.57 = f32[] add(%reduce_sum.55, %reduce_sum.56)
}

%region_189.4073 (reduce_sum.58: f32[], reduce_sum.59: f32[]) -> f32[] {
  %reduce_sum.58 = f32[] parameter(0)
  %reduce_sum.59 = f32[] parameter(1)
  ROOT %reduce_sum.60 = f32[] add(%reduce_sum.58, %reduce_sum.59)
}

%region_202.4165 (reduce_sum.100: f32[], reduce_sum.101: f32[]) -> f32[] {
  %reduce_sum.100 = f32[] parameter(0)
  %reduce_sum.101 = f32[] parameter(1)
  ROOT %reduce_sum.4164 = f32[] add(%reduce_sum.100, %reduce_sum.101)
}

%region_203.4171 (reduce_sum.102: f32[], reduce_sum.103: f32[]) -> f32[] {
  %reduce_sum.102 = f32[] parameter(0)
  %reduce_sum.103 = f32[] parameter(1)
  ROOT %reduce_sum.104 = f32[] add(%reduce_sum.102, %reduce_sum.103)
}

%region_204.4178 (reduce_sum.105: f32[], reduce_sum.106: f32[]) -> f32[] {
  %reduce_sum.105 = f32[] parameter(0)
  %reduce_sum.106 = f32[] parameter(1)
  ROOT %reduce_sum.107 = f32[] add(%reduce_sum.105, %reduce_sum.106)
}

%region_205.4185 (reduce_sum.108: f32[], reduce_sum.109: f32[]) -> f32[] {
  %reduce_sum.108 = f32[] parameter(0)
  %reduce_sum.109 = f32[] parameter(1)
  ROOT %reduce_sum.110 = f32[] add(%reduce_sum.108, %reduce_sum.109)
}

%region_206.4192 (reduce_sum.111: f32[], reduce_sum.112: f32[]) -> f32[] {
  %reduce_sum.111 = f32[] parameter(0)
  %reduce_sum.112 = f32[] parameter(1)
  ROOT %reduce_sum.113 = f32[] add(%reduce_sum.111, %reduce_sum.112)
}

%region_207.4199 (reduce_sum.114: f32[], reduce_sum.115: f32[]) -> f32[] {
  %reduce_sum.114 = f32[] parameter(0)
  %reduce_sum.115 = f32[] parameter(1)
  ROOT %reduce_sum.116 = f32[] add(%reduce_sum.114, %reduce_sum.115)
}

%region_208.4206 (reduce_sum.117: f32[], reduce_sum.118: f32[]) -> f32[] {
  %reduce_sum.117 = f32[] parameter(0)
  %reduce_sum.118 = f32[] parameter(1)
  ROOT %reduce_sum.119 = f32[] add(%reduce_sum.117, %reduce_sum.118)
}

%region_209.4213 (reduce_sum.120: f32[], reduce_sum.121: f32[]) -> f32[] {
  %reduce_sum.120 = f32[] parameter(0)
  %reduce_sum.121 = f32[] parameter(1)
  ROOT %reduce_sum.122 = f32[] add(%reduce_sum.120, %reduce_sum.121)
}

%region_210.4220 (reduce_sum.123: f32[], reduce_sum.124: f32[]) -> f32[] {
  %reduce_sum.123 = f32[] parameter(0)
  %reduce_sum.124 = f32[] parameter(1)
  ROOT %reduce_sum.125 = f32[] add(%reduce_sum.123, %reduce_sum.124)
}

%region_211.4227 (reduce_sum.126: f32[], reduce_sum.127: f32[]) -> f32[] {
  %reduce_sum.126 = f32[] parameter(0)
  %reduce_sum.127 = f32[] parameter(1)
  ROOT %reduce_sum.128 = f32[] add(%reduce_sum.126, %reduce_sum.127)
}

%region_212.4234 (reduce_sum.129: f32[], reduce_sum.130: f32[]) -> f32[] {
  %reduce_sum.129 = f32[] parameter(0)
  %reduce_sum.130 = f32[] parameter(1)
  ROOT %reduce_sum.131 = f32[] add(%reduce_sum.129, %reduce_sum.130)
}

%region_213.4241 (reduce_sum.132: f32[], reduce_sum.133: f32[]) -> f32[] {
  %reduce_sum.132 = f32[] parameter(0)
  %reduce_sum.133 = f32[] parameter(1)
  ROOT %reduce_sum.134 = f32[] add(%reduce_sum.132, %reduce_sum.133)
}

%region_214.4248 (reduce_sum.135: f32[], reduce_sum.136: f32[]) -> f32[] {
  %reduce_sum.135 = f32[] parameter(0)
  %reduce_sum.136 = f32[] parameter(1)
  ROOT %reduce_sum.137 = f32[] add(%reduce_sum.135, %reduce_sum.136)
}

%region_215.4255 (reduce_sum.138: f32[], reduce_sum.139: f32[]) -> f32[] {
  %reduce_sum.138 = f32[] parameter(0)
  %reduce_sum.139 = f32[] parameter(1)
  ROOT %reduce_sum.140 = f32[] add(%reduce_sum.138, %reduce_sum.139)
}

%region_216.4262 (reduce_sum.141: f32[], reduce_sum.142: f32[]) -> f32[] {
  %reduce_sum.141 = f32[] parameter(0)
  %reduce_sum.142 = f32[] parameter(1)
  ROOT %reduce_sum.143 = f32[] add(%reduce_sum.141, %reduce_sum.142)
}

%region_217.4269 (reduce_sum.144: f32[], reduce_sum.145: f32[]) -> f32[] {
  %reduce_sum.144 = f32[] parameter(0)
  %reduce_sum.145 = f32[] parameter(1)
  ROOT %reduce_sum.146 = f32[] add(%reduce_sum.144, %reduce_sum.145)
}

%region_218.4276 (reduce_sum.147: f32[], reduce_sum.148: f32[]) -> f32[] {
  %reduce_sum.147 = f32[] parameter(0)
  %reduce_sum.148 = f32[] parameter(1)
  ROOT %reduce_sum.149 = f32[] add(%reduce_sum.147, %reduce_sum.148)
}

%region_219.4283 (reduce_sum.150: f32[], reduce_sum.151: f32[]) -> f32[] {
  %reduce_sum.150 = f32[] parameter(0)
  %reduce_sum.151 = f32[] parameter(1)
  ROOT %reduce_sum.152 = f32[] add(%reduce_sum.150, %reduce_sum.151)
}

%region_220.4290 (reduce_sum.153: f32[], reduce_sum.154: f32[]) -> f32[] {
  %reduce_sum.153 = f32[] parameter(0)
  %reduce_sum.154 = f32[] parameter(1)
  ROOT %reduce_sum.155 = f32[] add(%reduce_sum.153, %reduce_sum.154)
}

%region_221.4297 (reduce_sum.156: f32[], reduce_sum.157: f32[]) -> f32[] {
  %reduce_sum.156 = f32[] parameter(0)
  %reduce_sum.157 = f32[] parameter(1)
  ROOT %reduce_sum.158 = f32[] add(%reduce_sum.156, %reduce_sum.157)
}

%region_222.4304 (reduce_sum.159: f32[], reduce_sum.160: f32[]) -> f32[] {
  %reduce_sum.159 = f32[] parameter(0)
  %reduce_sum.160 = f32[] parameter(1)
  ROOT %reduce_sum.161 = f32[] add(%reduce_sum.159, %reduce_sum.160)
}

%region_223.4311 (reduce_sum.162: f32[], reduce_sum.163: f32[]) -> f32[] {
  %reduce_sum.162 = f32[] parameter(0)
  %reduce_sum.163 = f32[] parameter(1)
  ROOT %reduce_sum.164 = f32[] add(%reduce_sum.162, %reduce_sum.163)
}

%region_224.4318 (reduce_sum.165: f32[], reduce_sum.166: f32[]) -> f32[] {
  %reduce_sum.165 = f32[] parameter(0)
  %reduce_sum.166 = f32[] parameter(1)
  ROOT %reduce_sum.167 = f32[] add(%reduce_sum.165, %reduce_sum.166)
}

%region_225.4325 (reduce_sum.168: f32[], reduce_sum.169: f32[]) -> f32[] {
  %reduce_sum.168 = f32[] parameter(0)
  %reduce_sum.169 = f32[] parameter(1)
  ROOT %reduce_sum.170 = f32[] add(%reduce_sum.168, %reduce_sum.169)
}

%region_226.4332 (reduce_sum.171: f32[], reduce_sum.172: f32[]) -> f32[] {
  %reduce_sum.171 = f32[] parameter(0)
  %reduce_sum.172 = f32[] parameter(1)
  ROOT %reduce_sum.173 = f32[] add(%reduce_sum.171, %reduce_sum.172)
}

%region_227.4339 (reduce_sum.174: f32[], reduce_sum.175: f32[]) -> f32[] {
  %reduce_sum.174 = f32[] parameter(0)
  %reduce_sum.175 = f32[] parameter(1)
  ROOT %reduce_sum.176 = f32[] add(%reduce_sum.174, %reduce_sum.175)
}

%region_228.4346 (reduce_sum.177: f32[], reduce_sum.178: f32[]) -> f32[] {
  %reduce_sum.177 = f32[] parameter(0)
  %reduce_sum.178 = f32[] parameter(1)
  ROOT %reduce_sum.179 = f32[] add(%reduce_sum.177, %reduce_sum.178)
}

%region_229.4353 (reduce_sum.180: f32[], reduce_sum.181: f32[]) -> f32[] {
  %reduce_sum.180 = f32[] parameter(0)
  %reduce_sum.181 = f32[] parameter(1)
  ROOT %reduce_sum.182 = f32[] add(%reduce_sum.180, %reduce_sum.181)
}

%region_230.4360 (reduce_sum.183: f32[], reduce_sum.184: f32[]) -> f32[] {
  %reduce_sum.183 = f32[] parameter(0)
  %reduce_sum.184 = f32[] parameter(1)
  ROOT %reduce_sum.185 = f32[] add(%reduce_sum.183, %reduce_sum.184)
}

%region_231.4367 (reduce_sum.186: f32[], reduce_sum.187: f32[]) -> f32[] {
  %reduce_sum.186 = f32[] parameter(0)
  %reduce_sum.187 = f32[] parameter(1)
  ROOT %reduce_sum.188 = f32[] add(%reduce_sum.186, %reduce_sum.187)
}

%region_232.4374 (reduce_sum.4371: f32[], reduce_sum.189: f32[]) -> f32[] {
  %reduce_sum.4371 = f32[] parameter(0)
  %reduce_sum.189 = f32[] parameter(1)
  ROOT %reduce_sum.190 = f32[] add(%reduce_sum.4371, %reduce_sum.189)
}

%region_233.4381 (reduce_sum.191: f32[], reduce_sum.192: f32[]) -> f32[] {
  %reduce_sum.191 = f32[] parameter(0)
  %reduce_sum.192 = f32[] parameter(1)
  ROOT %reduce_sum.193 = f32[] add(%reduce_sum.191, %reduce_sum.192)
}

%region_234.4388 (reduce_sum.194: f32[], reduce_sum.195: f32[]) -> f32[] {
  %reduce_sum.194 = f32[] parameter(0)
  %reduce_sum.195 = f32[] parameter(1)
  ROOT %reduce_sum.196 = f32[] add(%reduce_sum.194, %reduce_sum.195)
}

%region_235.4395 (reduce_sum.197: f32[], reduce_sum.198: f32[]) -> f32[] {
  %reduce_sum.197 = f32[] parameter(0)
  %reduce_sum.198 = f32[] parameter(1)
  ROOT %reduce_sum.199 = f32[] add(%reduce_sum.197, %reduce_sum.198)
}

%region_236.4402 (reduce_sum.200: f32[], reduce_sum.201: f32[]) -> f32[] {
  %reduce_sum.200 = f32[] parameter(0)
  %reduce_sum.201 = f32[] parameter(1)
  ROOT %reduce_sum.202 = f32[] add(%reduce_sum.200, %reduce_sum.201)
}

%region_237.4409 (reduce_sum.203: f32[], reduce_sum.204: f32[]) -> f32[] {
  %reduce_sum.203 = f32[] parameter(0)
  %reduce_sum.204 = f32[] parameter(1)
  ROOT %reduce_sum.205 = f32[] add(%reduce_sum.203, %reduce_sum.204)
}

%region_238.4416 (reduce_sum.206: f32[], reduce_sum.207: f32[]) -> f32[] {
  %reduce_sum.206 = f32[] parameter(0)
  %reduce_sum.207 = f32[] parameter(1)
  ROOT %reduce_sum.208 = f32[] add(%reduce_sum.206, %reduce_sum.207)
}

%region_239.4423 (reduce_sum.209: f32[], reduce_sum.210: f32[]) -> f32[] {
  %reduce_sum.209 = f32[] parameter(0)
  %reduce_sum.210 = f32[] parameter(1)
  ROOT %reduce_sum.211 = f32[] add(%reduce_sum.209, %reduce_sum.210)
}

%region_240.4430 (reduce_sum.212: f32[], reduce_sum.213: f32[]) -> f32[] {
  %reduce_sum.212 = f32[] parameter(0)
  %reduce_sum.213 = f32[] parameter(1)
  ROOT %reduce_sum.214 = f32[] add(%reduce_sum.212, %reduce_sum.213)
}

%region_241.4437 (reduce_sum.215: f32[], reduce_sum.216: f32[]) -> f32[] {
  %reduce_sum.215 = f32[] parameter(0)
  %reduce_sum.216 = f32[] parameter(1)
  ROOT %reduce_sum.217 = f32[] add(%reduce_sum.215, %reduce_sum.216)
}

%region_242.4444 (reduce_sum.218: f32[], reduce_sum.219: f32[]) -> f32[] {
  %reduce_sum.218 = f32[] parameter(0)
  %reduce_sum.219 = f32[] parameter(1)
  ROOT %reduce_sum.220 = f32[] add(%reduce_sum.218, %reduce_sum.219)
}

%region_243.4451 (reduce_sum.221: f32[], reduce_sum.222: f32[]) -> f32[] {
  %reduce_sum.221 = f32[] parameter(0)
  %reduce_sum.222 = f32[] parameter(1)
  ROOT %reduce_sum.223 = f32[] add(%reduce_sum.221, %reduce_sum.222)
}

%region_244.4458 (reduce_sum.224: f32[], reduce_sum.225: f32[]) -> f32[] {
  %reduce_sum.224 = f32[] parameter(0)
  %reduce_sum.225 = f32[] parameter(1)
  ROOT %reduce_sum.226 = f32[] add(%reduce_sum.224, %reduce_sum.225)
}

%region_245.4465 (reduce_sum.227: f32[], reduce_sum.228: f32[]) -> f32[] {
  %reduce_sum.227 = f32[] parameter(0)
  %reduce_sum.228 = f32[] parameter(1)
  ROOT %reduce_sum.229 = f32[] add(%reduce_sum.227, %reduce_sum.228)
}

%region_246.4472 (reduce_sum.230: f32[], reduce_sum.231: f32[]) -> f32[] {
  %reduce_sum.230 = f32[] parameter(0)
  %reduce_sum.231 = f32[] parameter(1)
  ROOT %reduce_sum.232 = f32[] add(%reduce_sum.230, %reduce_sum.231)
}

%region_247.4479 (reduce_sum.233: f32[], reduce_sum.234: f32[]) -> f32[] {
  %reduce_sum.233 = f32[] parameter(0)
  %reduce_sum.234 = f32[] parameter(1)
  ROOT %reduce_sum.235 = f32[] add(%reduce_sum.233, %reduce_sum.234)
}

%region_248.4486 (reduce_sum.236: f32[], reduce_sum.237: f32[]) -> f32[] {
  %reduce_sum.236 = f32[] parameter(0)
  %reduce_sum.237 = f32[] parameter(1)
  ROOT %reduce_sum.238 = f32[] add(%reduce_sum.236, %reduce_sum.237)
}

%region_249.4493 (reduce_sum.239: f32[], reduce_sum.240: f32[]) -> f32[] {
  %reduce_sum.239 = f32[] parameter(0)
  %reduce_sum.240 = f32[] parameter(1)
  ROOT %reduce_sum.241 = f32[] add(%reduce_sum.239, %reduce_sum.240)
}

%region_250.4500 (reduce_sum.242: f32[], reduce_sum.243: f32[]) -> f32[] {
  %reduce_sum.242 = f32[] parameter(0)
  %reduce_sum.243 = f32[] parameter(1)
  ROOT %reduce_sum.244 = f32[] add(%reduce_sum.242, %reduce_sum.243)
}

%region_251.4507 (reduce_sum.245: f32[], reduce_sum.246: f32[]) -> f32[] {
  %reduce_sum.245 = f32[] parameter(0)
  %reduce_sum.246 = f32[] parameter(1)
  ROOT %reduce_sum.247 = f32[] add(%reduce_sum.245, %reduce_sum.246)
}

%region_252.4514 (reduce_sum.248: f32[], reduce_sum.249: f32[]) -> f32[] {
  %reduce_sum.248 = f32[] parameter(0)
  %reduce_sum.249 = f32[] parameter(1)
  ROOT %reduce_sum.250 = f32[] add(%reduce_sum.248, %reduce_sum.249)
}

%region_253.4521 (reduce_sum.251: f32[], reduce_sum.252: f32[]) -> f32[] {
  %reduce_sum.251 = f32[] parameter(0)
  %reduce_sum.252 = f32[] parameter(1)
  ROOT %reduce_sum.253 = f32[] add(%reduce_sum.251, %reduce_sum.252)
}

%region_254.4528 (reduce_sum.254: f32[], reduce_sum.255: f32[]) -> f32[] {
  %reduce_sum.254 = f32[] parameter(0)
  %reduce_sum.255 = f32[] parameter(1)
  ROOT %reduce_sum.256 = f32[] add(%reduce_sum.254, %reduce_sum.255)
}

%region_255.4535 (reduce_sum.257: f32[], reduce_sum.258: f32[]) -> f32[] {
  %reduce_sum.257 = f32[] parameter(0)
  %reduce_sum.258 = f32[] parameter(1)
  ROOT %reduce_sum.259 = f32[] add(%reduce_sum.257, %reduce_sum.258)
}

%region_0.36._custom_call_lowering_rule (reduce_window_sum.33: s32[], reduce_window_sum.34: s32[]) -> s32[] {
  %reduce_window_sum.33 = s32[] parameter(0)
  %reduce_window_sum.34 = s32[] parameter(1)
  ROOT %reduce_window_sum.35 = s32[] add(%reduce_window_sum.33, %reduce_window_sum.34)
}

%region_0.98 (reduce_sum.95: s32[], reduce_sum.96: s32[]) -> s32[] {
  %reduce_sum.95 = s32[] parameter(0)
  %reduce_sum.96 = s32[] parameter(1)
  ROOT %reduce_sum.97 = s32[] add(%reduce_sum.95, %reduce_sum.96)
}

%region_0.98.clone (reduce_sum.358: s32[], reduce_sum.359: s32[]) -> s32[] {
  %reduce_sum.358 = s32[] parameter(0)
  %reduce_sum.359 = s32[] parameter(1)
  ROOT %reduce_sum.360 = s32[] add(%reduce_sum.358, %reduce_sum.359)
}

%region_1.265 (reduce_sum.262: s32[], reduce_sum.263: s32[]) -> s32[] {
  %reduce_sum.262 = s32[] parameter(0)
  %reduce_sum.263 = s32[] parameter(1)
  ROOT %reduce_sum.264 = s32[] add(%reduce_sum.262, %reduce_sum.263)
}

%region_2.274 (reduce_sum.271: s32[], reduce_sum.272: s32[]) -> s32[] {
  %reduce_sum.271 = s32[] parameter(0)
  %reduce_sum.272 = s32[] parameter(1)
  ROOT %reduce_sum.273 = s32[] add(%reduce_sum.271, %reduce_sum.272)
}

%region_3.281 (reduce_max.278: s32[], reduce_max.279: s32[]) -> s32[] {
  %reduce_max.278 = s32[] parameter(0)
  %reduce_max.279 = s32[] parameter(1)
  ROOT %reduce_max.280 = s32[] maximum(%reduce_max.278, %reduce_max.279)
}

%region_5.375 (reduce_sum.372: f32[], reduce_sum.373: f32[]) -> f32[] {
  %reduce_sum.372 = f32[] parameter(0)
  %reduce_sum.373 = f32[] parameter(1)
  ROOT %reduce_sum.374 = f32[] add(%reduce_sum.372, %reduce_sum.373)
}

%region_6.401 (reduce_max.398: f32[], reduce_max.399: f32[]) -> f32[] {
  %reduce_max.398 = f32[] parameter(0)
  %reduce_max.399 = f32[] parameter(1)
  ROOT %reduce_max.400 = f32[] maximum(%reduce_max.398, %reduce_max.399)
}

%region_7.432 (reduce_max.429: f32[], reduce_max.430: f32[]) -> f32[] {
  %reduce_max.429 = f32[] parameter(0)
  %reduce_max.430 = f32[] parameter(1)
  ROOT %reduce_max.431 = f32[] maximum(%reduce_max.429, %reduce_max.430)
}

%region_8.488 (reduce_max.485: f32[], reduce_max.486: f32[]) -> f32[] {
  %reduce_max.485 = f32[] parameter(0)
  %reduce_max.486 = f32[] parameter(1)
  ROOT %reduce_max.487 = f32[] maximum(%reduce_max.485, %reduce_max.486)
}

%region_9.515 (reduce_max.512: f32[], reduce_max.513: f32[]) -> f32[] {
  %reduce_max.512 = f32[] parameter(0)
  %reduce_max.513 = f32[] parameter(1)
  ROOT %reduce_max.514 = f32[] maximum(%reduce_max.512, %reduce_max.513)
}

%region_10.570 (reduce_max.567: f32[], reduce_max.568: f32[]) -> f32[] {
  %reduce_max.567 = f32[] parameter(0)
  %reduce_max.568 = f32[] parameter(1)
  ROOT %reduce_max.569 = f32[] maximum(%reduce_max.567, %reduce_max.568)
}

%region_11.596 (reduce_max.593: f32[], reduce_max.594: f32[]) -> f32[] {
  %reduce_max.593 = f32[] parameter(0)
  %reduce_max.594 = f32[] parameter(1)
  ROOT %reduce_max.595 = f32[] maximum(%reduce_max.593, %reduce_max.594)
}

%region_0.33._custom_call_lowering_rule (reduce_window_sum.30: s32[], reduce_window_sum.31: s32[]) -> s32[] {
  %reduce_window_sum.30 = s32[] parameter(0)
  %reduce_window_sum.31 = s32[] parameter(1)
  ROOT %reduce_window_sum.32 = s32[] add(%reduce_window_sum.30, %reduce_window_sum.31)
}

%region_0.33._custom_call_lowering_rule.clone (reduce_window_sum.9: s32[], reduce_window_sum.10: s32[]) -> s32[] {
  %reduce_window_sum.9 = s32[] parameter(0)
  %reduce_window_sum.10 = s32[] parameter(1)
  ROOT %reduce_window_sum.11 = s32[] add(%reduce_window_sum.9, %reduce_window_sum.10)
}

%region_12.637 (reduce_max.634: f32[], reduce_max.635: f32[]) -> f32[] {
  %reduce_max.634 = f32[] parameter(0)
  %reduce_max.635 = f32[] parameter(1)
  ROOT %reduce_max.636 = f32[] maximum(%reduce_max.634, %reduce_max.635)
}

%region_13.665 (reduce_max.662: f32[], reduce_max.663: f32[]) -> f32[] {
  %reduce_max.662 = f32[] parameter(0)
  %reduce_max.663 = f32[] parameter(1)
  ROOT %reduce_max.664 = f32[] maximum(%reduce_max.662, %reduce_max.663)
}

%region_14.700 (reduce_sum.697: f32[], reduce_sum.698: f32[]) -> f32[] {
  %reduce_sum.697 = f32[] parameter(0)
  %reduce_sum.698 = f32[] parameter(1)
  ROOT %reduce_sum.699 = f32[] add(%reduce_sum.697, %reduce_sum.698)
}

%region_15.718 (reduce_max.715: f32[], reduce_max.716: f32[]) -> f32[] {
  %reduce_max.715 = f32[] parameter(0)
  %reduce_max.716 = f32[] parameter(1)
  ROOT %reduce_max.717 = f32[] maximum(%reduce_max.715, %reduce_max.716)
}

%region_16.745 (reduce_max.742: f32[], reduce_max.743: f32[]) -> f32[] {
  %reduce_max.742 = f32[] parameter(0)
  %reduce_max.743 = f32[] parameter(1)
  ROOT %reduce_max.744 = f32[] maximum(%reduce_max.742, %reduce_max.743)
}

%region_17.784 (reduce_max.781: f32[], reduce_max.782: f32[]) -> f32[] {
  %reduce_max.781 = f32[] parameter(0)
  %reduce_max.782 = f32[] parameter(1)
  ROOT %reduce_max.783 = f32[] maximum(%reduce_max.781, %reduce_max.782)
}

%region_18.810 (reduce_max.57: f32[], reduce_max.58: f32[]) -> f32[] {
  %reduce_max.57 = f32[] parameter(0)
  %reduce_max.58 = f32[] parameter(1)
  ROOT %reduce_max.59 = f32[] maximum(%reduce_max.57, %reduce_max.58)
}

%region_19.843 (reduce_max.840: f32[], reduce_max.841: f32[]) -> f32[] {
  %reduce_max.840 = f32[] parameter(0)
  %reduce_max.841 = f32[] parameter(1)
  ROOT %reduce_max.842 = f32[] maximum(%reduce_max.840, %reduce_max.841)
}

%region_20.871 (reduce_max.868: f32[], reduce_max.869: f32[]) -> f32[] {
  %reduce_max.868 = f32[] parameter(0)
  %reduce_max.869 = f32[] parameter(1)
  ROOT %reduce_max.870 = f32[] maximum(%reduce_max.868, %reduce_max.869)
}

%region_4.905_spmd (param.43: (s32[], bf16[2,8192,8192], bf16[80,2,8192,8192], f32[80,8192], f32[80,1024], /*index=5*/f32[80,1], f32[80,64,64,128], f32[80,1024], f32[80,1], f32[2,8192,1,128], /*index=10*/s32[2,8192,64,128], f32[2,8192,1,128], f32[1,1,1,128], f32[80,1024], f32[80,1], /*index=15*/f32[80,64,8,128], f32[80,1024], f32[80,1], f32[2,8192,1,128], s32[2,8192,8,128], /*index=20*/f32[2,8192,1,128], f32[1,1,1,128], f32[80,1024], f32[80,1], f32[80,64,8,128], /*index=25*/f32[80,1024], f32[80,1], s32[2,1], s32[2,1], f32[80,1024], /*index=30*/f32[80,1], f32[80,64,128,64], f32[80,1024], f32[80,1], f32[80,8192], /*index=35*/f32[80,1024], f32[80,1], f32[80,64,28672], f32[80,1024], f32[80,1], /*index=40*/f32[80,1024], f32[80,1], f32[80,64,28672], f32[80,1024], f32[80,1], /*index=45*/f32[80,1024], f32[80,1], f32[80,28672,64], f32[80,1024], f32[80,1])) -> (s32[], bf16[2,8192,8192], bf16[80,2,8192,8192], f32[80,8192], f32[80,1024], /*index=5*/f32[80,1], f32[80,64,64,128], f32[80,1024], f32[80,1], f32[2,8192,1,128], /*index=10*/s32[2,8192,64,128], f32[2,8192,1,128], f32[1,1,1,128], f32[80,1024], f32[80,1], /*index=15*/f32[80,64,8,128], f32[80,1024], f32[80,1], f32[2,8192,1,128], s32[2,8192,8,128], /*index=20*/f32[2,8192,1,128], f32[1,1,1,128], f32[80,1024], f32[80,1], f32[80,64,8,128], /*index=25*/f32[80,1024], f32[80,1], s32[2,1], s32[2,1], f32[80,1024], /*index=30*/f32[80,1], f32[80,64,128,64], f32[80,1024], f32[80,1], f32[80,8192], /*index=35*/f32[80,1024], f32[80,1], f32[80,64,28672], f32[80,1024], f32[80,1], /*index=40*/f32[80,1024], f32[80,1], f32[80,64,28672], f32[80,1024], f32[80,1], /*index=45*/f32[80,1024], f32[80,1], f32[80,28672,64], f32[80,1024], f32[80,1]) {
  %param.43 = (s32[], bf16[2,8192,8192]{2,1,0}, bf16[80,2,8192,8192]{3,2,1,0}, f32[80,8192]{1,0}, f32[80,1024]{1,0}, /*index=5*/f32[80,1]{1,0}, f32[80,64,64,128]{3,2,1,0}, f32[80,1024]{1,0}, f32[80,1]{1,0}, f32[2,8192,1,128]{3,2,1,0}, /*index=10*/s32[2,8192,64,128]{3,2,1,0}, f32[2,8192,1,128]{3,2,1,0}, f32[1,1,1,128]{3,2,1,0}, f32[80,1024]{1,0}, f32[80,1]{1,0}, /*index=15*/f32[80,64,8,128]{3,2,1,0}, f32[80,1024]{1,0}, f32[80,1]{1,0}, f32[2,8192,1,128]{3,2,1,0}, s32[2,8192,8,128]{3,2,1,0}, /*index=20*/f32[2,8192,1,128]{3,2,1,0}, f32[1,1,1,128]{3,2,1,0}, f32[80,1024]{1,0}, f32[80,1]{1,0}, f32[80,64,8,128]{3,2,1,0}, /*index=25*/f32[80,1024]{1,0}, f32[80,1]{1,0}, s32[2,1]{1,0}, s32[2,1]{1,0}, f32[80,1024]{1,0}, /*index=30*/f32[80,1]{1,0}, f32[80,64,128,64]{3,2,1,0}, f32[80,1024]{1,0}, f32[80,1]{1,0}, f32[80,8192]{1,0}, /*index=35*/f32[80,1024]{1,0}, f32[80,1]{1,0}, f32[80,64,28672]{2,1,0}, f32[80,1024]{1,0}, f32[80,1]{1,0}, /*index=40*/f32[80,1024]{1,0}, f32[80,1]{1,0}, f32[80,64,28672]{2,1,0}, f32[80,1024]{1,0}, f32[80,1]{1,0}, /*index=45*/f32[80,1024]{1,0}, f32[80,1]{1,0}, f32[80,28672,64]{2,1,0}, f32[80,1024]{1,0}, f32[80,1]{1,0}) parameter(0)
  %get-tuple-element.253 = s32[] get-tuple-element(%param.43), index=0
  %constant.939 = s32[] constant(1)
  %add.183 = s32[] add(%get-tuple-element.253, %constant.939)
  %constant.940 = bf16[] constant(-448)
  %max.171 = bf16[2,8192,28672]{2,1,0} broadcast(%constant.940), dimensions={}
  %max.172 = bf16[2,8192,8192]{2,1,0} broadcast(%constant.940), dimensions={}
  %get-tuple-element.254 = bf16[2,8192,8192]{2,1,0} get-tuple-element(%param.43), index=1
  %sharding_constraint.38 = bf16[2,8192,8192]{2,1,0} copy(%get-tuple-element.254)
  %max.173 = bf16[2,8192,64,128]{3,2,1,0} broadcast(%constant.940), dimensions={}
  %convert_element_type.267 = f32[2,8192,8192]{2,1,0} convert(%sharding_constraint.38)
  %square.81 = f32[2,8192,8192]{2,1,0} multiply(%convert_element_type.267, %convert_element_type.267)
  %constant.941 = f32[] constant(0)
  %reduce.88 = f32[2,8192]{1,0} reduce(%square.81, %constant.941), dimensions={2}, to_apply=%region_5.375
  %constant.942 = f32[] constant(0.000122070312)
  %closed_call.0 = f32[2,8192]{1,0} broadcast(%constant.942), dimensions={}
  %div.305 = f32[2,8192]{1,0} multiply(%reduce.88, %closed_call.0)
  %constant.943 = f32[] constant(1e-05)
  %closed_call.1 = f32[2,8192]{1,0} broadcast(%constant.943), dimensions={}
  %add.184 = f32[2,8192]{1,0} add(%div.305, %closed_call.1)
  %rsqrt.6 = f32[2,8192]{1,0} rsqrt(%add.184)
  %mul.279 = f32[2,8192,8192]{2,1,0} broadcast(%rsqrt.6), dimensions={0,1}
  %mul.280 = f32[2,8192,8192]{2,1,0} multiply(%convert_element_type.267, %mul.279)
  %convert_element_type.268 = bf16[2,8192,8192]{2,1,0} convert(%mul.280)
  %get-tuple-element.255 = f32[80,8192]{1,0} get-tuple-element(%param.43), index=3
  %constant.944 = s32[] constant(0)
  %dynamic_slice.7 = f32[1,8192]{1,0} dynamic-slice(%get-tuple-element.255, %get-tuple-element.253, %constant.944), dynamic_slice_sizes={1,8192}
  %convert_element_type.269 = bf16[1,8192]{1,0} convert(%dynamic_slice.7)
  %mul.281 = bf16[8192]{0} reshape(%convert_element_type.269)
  %mul.282 = bf16[2,8192,8192]{2,1,0} broadcast(%mul.281), dimensions={2}
  %mul.283 = bf16[2,8192,8192]{2,1,0} multiply(%convert_element_type.268, %mul.282)
  %sharding_constraint.39 = bf16[2,8192,8192]{2,1,0} copy(%mul.283)
  %sharding_constraint.40 = bf16[2,8192,8192]{2,1,0} copy(%sharding_constraint.39)
  %constant.945 = f32[1]{0} constant({1})
  %get-tuple-element.256 = f32[80,1024]{1,0} get-tuple-element(%param.43), index=4
  %dynamic_slice.8 = f32[1,1024]{1,0} dynamic-slice(%get-tuple-element.256, %get-tuple-element.253, %constant.944), dynamic_slice_sizes={1,1024}
  %constant.946 = f32[] constant(-inf)
  %reduce.89 = f32[] reduce(%dynamic_slice.8, %constant.946), dimensions={0,1}, to_apply=%region_6.401
  %is_finite.36 = pred[] is-finite(%reduce.89)
  %select_n.503 = pred[1]{0} reshape(%is_finite.36)
  %gt.37 = pred[] compare(%reduce.89, %constant.941), direction=GT
  %select_n.504 = pred[1]{0} reshape(%gt.37)
  %constant.947 = f32[] constant(448)
  %div.306 = f32[] divide(%constant.947, %reduce.89)
  %broadcast_in_dim.382 = f32[1]{0} reshape(%div.306)
  %constant.948 = f32[1,1]{1,0} constant({ {1} })
  %get-tuple-element.257 = f32[80,1]{1,0} get-tuple-element(%param.43), index=5
  %dynamic_slice.9 = f32[1,1]{1,0} dynamic-slice(%get-tuple-element.257, %get-tuple-element.253, %constant.944), dynamic_slice_sizes={1,1}
  %div.307 = f32[1,1]{1,0} divide(%constant.948, %dynamic_slice.9)
  %div.308 = f32[1]{0} reshape(%div.307)
  %select_n.505 = f32[1]{0} select(%select_n.504, %broadcast_in_dim.382, %div.308)
  %select_n.506 = f32[1]{0} select(%select_n.503, %select_n.505, %div.308)
  %div.309 = f32[1]{0} divide(%constant.945, %select_n.506)
  %convert_element_type.271 = bf16[1]{0} convert(%div.309)
  %convert_element_type.272 = bf16[] reshape(%convert_element_type.271)
  %broadcast_in_dim.383 = bf16[2,8192,8192]{2,1,0} broadcast(%convert_element_type.272), dimensions={}
  %div.310 = bf16[2,8192,8192]{2,1,0} divide(%sharding_constraint.40, %broadcast_in_dim.383)
  %constant.949 = bf16[] constant(448)
  %min.171 = bf16[2,8192,8192]{2,1,0} broadcast(%constant.949), dimensions={}
  %min.172 = bf16[2,8192,8192]{2,1,0} clamp(%max.172, %div.310, %min.171)
  %convert_element_type.273 = f8e4m3fn[2,8192,8192]{2,1,0} convert(%min.172)
  %max.174 = bf16[1,64,64,128]{3,2,1,0} broadcast(%constant.940), dimensions={}
  %get-tuple-element.258 = f32[80,64,64,128]{3,2,1,0} get-tuple-element(%param.43), index=6
  %dynamic-slice.126 = f32[1,64,64,128]{3,2,1,0} dynamic-slice(%get-tuple-element.258, %get-tuple-element.253, %constant.944, %constant.944, %constant.944), dynamic_slice_sizes={1,64,64,128}
  %convert_element_type.274 = bf16[1,64,64,128]{3,2,1,0} convert(%dynamic-slice.126)
  %get-tuple-element.259 = f32[80,1024]{1,0} get-tuple-element(%param.43), index=7
  %dynamic_slice.10 = f32[1,1024]{1,0} dynamic-slice(%get-tuple-element.259, %get-tuple-element.253, %constant.944), dynamic_slice_sizes={1,1024}
  %reduce.90 = f32[] reduce(%dynamic_slice.10, %constant.946), dimensions={0,1}, to_apply=%region_7.432
  %is_finite.37 = pred[] is-finite(%reduce.90)
  %select_n.507 = pred[1]{0} reshape(%is_finite.37)
  %gt.38 = pred[] compare(%reduce.90, %constant.941), direction=GT
  %select_n.508 = pred[1]{0} reshape(%gt.38)
  %div.312 = f32[] divide(%constant.947, %reduce.90)
  %broadcast_in_dim.384 = f32[1]{0} reshape(%div.312)
  %get-tuple-element.260 = f32[80,1]{1,0} get-tuple-element(%param.43), index=8
  %dynamic_slice.11 = f32[1,1]{1,0} dynamic-slice(%get-tuple-element.260, %get-tuple-element.253, %constant.944), dynamic_slice_sizes={1,1}
  %div.313 = f32[1,1]{1,0} divide(%constant.948, %dynamic_slice.11)
  %div.314 = f32[1]{0} reshape(%div.313)
  %select_n.509 = f32[1]{0} select(%select_n.508, %broadcast_in_dim.384, %div.314)
  %select_n.510 = f32[1]{0} select(%select_n.507, %select_n.509, %div.314)
  %div.317 = f32[1]{0} divide(%constant.945, %select_n.510)
  %convert_element_type.275 = bf16[1]{0} convert(%div.317)
  %convert_element_type.276 = bf16[] reshape(%convert_element_type.275)
  %broadcast_in_dim.385 = bf16[1,64,64,128]{3,2,1,0} broadcast(%convert_element_type.276), dimensions={}
  %div.318 = bf16[1,64,64,128]{3,2,1,0} divide(%convert_element_type.274, %broadcast_in_dim.385)
  %min.173 = bf16[1,64,64,128]{3,2,1,0} broadcast(%constant.949), dimensions={}
  %min.174 = bf16[1,64,64,128]{3,2,1,0} clamp(%max.174, %div.318, %min.173)
  %convert_element_type.277 = f8e4m3fn[1,64,64,128]{3,2,1,0} convert(%min.174)
  %convert_element_type.278 = f8e4m3fn[64,64,128]{2,1,0} reshape(%convert_element_type.277)
  %all-gather = f8e4m3fn[8192,64,128]{2,1,0} all-gather(%convert_element_type.278), channel_id=3, replica_groups=[2,128]<=[256], dimensions={0}, use_global_device_ids=true
  %dot.5 = bf16[2,8192,64,128]{3,2,1,0} dot(%convert_element_type.273, %all-gather), lhs_contracting_dims={2}, rhs_contracting_dims={0}
  %mul.284 = f32[1]{0} multiply(%div.309, %div.317)
  %convert_element_type.279 = bf16[1]{0} convert(%mul.284)
  %convert_element_type.280 = bf16[] reshape(%convert_element_type.279)
  %broadcast_in_dim.386 = bf16[2,8192,64,128]{3,2,1,0} broadcast(%convert_element_type.280), dimensions={}
  %mul.285 = bf16[2,8192,64,128]{3,2,1,0} multiply(%dot.5, %broadcast_in_dim.386)
  %convert_element_type.281 = f32[2,8192,64,128]{3,2,1,0} convert(%mul.285)
  %get-tuple-element.261 = f32[2,8192,1,128]{3,2,1,0} get-tuple-element(%param.43), index=9
  %mul.286 = f32[2,8192,128]{2,1,0} reshape(%get-tuple-element.261)
  %mul.287 = f32[2,8192,64,128]{3,2,1,0} broadcast(%mul.286), dimensions={0,1,3}
  %mul.288 = f32[2,8192,64,128]{3,2,1,0} multiply(%convert_element_type.281, %mul.287)
  %get-tuple-element.262 = s32[2,8192,64,128]{3,2,1,0} get-tuple-element(%param.43), index=10
  %select_n.511 = s32[2,8192,64,128]{3,2,1,0} broadcast(%constant.939), dimensions={}
  %select_n.512 = pred[2,8192,64,128]{3,2,1,0} compare(%get-tuple-element.262, %select_n.511), direction=LT
  %slice.392 = bf16[2,8192,64,127]{3,2,1,0} slice(%mul.285), slice={[0:2], [0:8192], [0:64], [1:128]}
  %slice.393 = bf16[2,8192,64,1]{3,2,1,0} slice(%mul.285), slice={[0:2], [0:8192], [0:64], [0:1]}
  %concatenate.111 = bf16[2,8192,64,128]{3,2,1,0} concatenate(%slice.392, %slice.393), dimensions={3}
  %slice.394 = bf16[2,8192,64,1]{3,2,1,0} slice(%mul.285), slice={[0:2], [0:8192], [0:64], [127:128]}
  %slice.395 = bf16[2,8192,64,127]{3,2,1,0} slice(%mul.285), slice={[0:2], [0:8192], [0:64], [0:127]}
  %concatenate.112 = bf16[2,8192,64,128]{3,2,1,0} concatenate(%slice.394, %slice.395), dimensions={3}
  %select_n.513 = bf16[2,8192,64,128]{3,2,1,0} select(%select_n.512, %concatenate.111, %concatenate.112)
  %convert_element_type.282 = f32[2,8192,64,128]{3,2,1,0} convert(%select_n.513)
  %get-tuple-element.263 = f32[2,8192,1,128]{3,2,1,0} get-tuple-element(%param.43), index=11
  %mul.289 = f32[2,8192,128]{2,1,0} reshape(%get-tuple-element.263)
  %mul.290 = f32[2,8192,64,128]{3,2,1,0} broadcast(%mul.289), dimensions={0,1,3}
  %mul.291 = f32[2,8192,64,128]{3,2,1,0} multiply(%convert_element_type.282, %mul.290)
  %get-tuple-element.264 = f32[1,1,1,128]{3,2,1,0} get-tuple-element(%param.43), index=12
  %mul.292 = f32[128]{0} reshape(%get-tuple-element.264)
  %mul.293 = f32[2,8192,64,128]{3,2,1,0} broadcast(%mul.292), dimensions={3}
  %mul.294 = f32[2,8192,64,128]{3,2,1,0} multiply(%mul.291, %mul.293)
  %add.185 = f32[2,8192,64,128]{3,2,1,0} add(%mul.288, %mul.294)
  %convert_element_type.283 = bf16[2,8192,64,128]{3,2,1,0} convert(%add.185)
  %sharding_constraint.41 = bf16[2,8192,64,128]{3,2,1,0} copy(%convert_element_type.283)
  %get-tuple-element.265 = f32[80,1024]{1,0} get-tuple-element(%param.43), index=13
  %dynamic_slice.12 = f32[1,1024]{1,0} dynamic-slice(%get-tuple-element.265, %get-tuple-element.253, %constant.944), dynamic_slice_sizes={1,1024}
  %reduce.91 = f32[] reduce(%dynamic_slice.12, %constant.946), dimensions={0,1}, to_apply=%region_8.488
  %is_finite.38 = pred[] is-finite(%reduce.91)
  %select_n.514 = pred[1]{0} reshape(%is_finite.38)
  %gt.39 = pred[] compare(%reduce.91, %constant.941), direction=GT
  %select_n.515 = pred[1]{0} reshape(%gt.39)
  %div.319 = f32[] divide(%constant.947, %reduce.91)
  %broadcast_in_dim.388 = f32[1]{0} reshape(%div.319)
  %get-tuple-element.266 = f32[80,1]{1,0} get-tuple-element(%param.43), index=14
  %dynamic_slice.13 = f32[1,1]{1,0} dynamic-slice(%get-tuple-element.266, %get-tuple-element.253, %constant.944), dynamic_slice_sizes={1,1}
  %div.320 = f32[1,1]{1,0} divide(%constant.948, %dynamic_slice.13)
  %div.322 = f32[1]{0} reshape(%div.320)
  %select_n.516 = f32[1]{0} select(%select_n.515, %broadcast_in_dim.388, %div.322)
  %select_n.517 = f32[1]{0} select(%select_n.514, %select_n.516, %div.322)
  %div.324 = f32[1]{0} divide(%constant.945, %select_n.517)
  %convert_element_type.284 = bf16[1]{0} convert(%div.324)
  %convert_element_type.285 = bf16[] reshape(%convert_element_type.284)
  %broadcast_in_dim.389 = bf16[2,8192,8192]{2,1,0} broadcast(%convert_element_type.285), dimensions={}
  %div.325 = bf16[2,8192,8192]{2,1,0} divide(%sharding_constraint.40, %broadcast_in_dim.389)
  %min.175 = bf16[2,8192,8192]{2,1,0} clamp(%max.172, %div.325, %min.171)
  %convert_element_type.286 = f8e4m3fn[2,8192,8192]{2,1,0} convert(%min.175)
  %max.175 = bf16[1,64,8,128]{3,2,1,0} broadcast(%constant.940), dimensions={}
  %get-tuple-element.267 = f32[80,64,8,128]{3,2,1,0} get-tuple-element(%param.43), index=15
  %dynamic-slice.131 = f32[1,64,8,128]{3,2,1,0} dynamic-slice(%get-tuple-element.267, %get-tuple-element.253, %constant.944, %constant.944, %constant.944), dynamic_slice_sizes={1,64,8,128}
  %convert_element_type.287 = bf16[1,64,8,128]{3,2,1,0} convert(%dynamic-slice.131)
  %get-tuple-element.268 = f32[80,1024]{1,0} get-tuple-element(%param.43), index=16
  %dynamic_slice.14 = f32[1,1024]{1,0} dynamic-slice(%get-tuple-element.268, %get-tuple-element.253, %constant.944), dynamic_slice_sizes={1,1024}
  %reduce.92 = f32[] reduce(%dynamic_slice.14, %constant.946), dimensions={0,1}, to_apply=%region_9.515
  %is_finite.39 = pred[] is-finite(%reduce.92)
  %select_n.519 = pred[1]{0} reshape(%is_finite.39)
  %gt.40 = pred[] compare(%reduce.92, %constant.941), direction=GT
  %select_n.521 = pred[1]{0} reshape(%gt.40)
  %div.327 = f32[] divide(%constant.947, %reduce.92)
  %broadcast_in_dim.390 = f32[1]{0} reshape(%div.327)
  %get-tuple-element.269 = f32[80,1]{1,0} get-tuple-element(%param.43), index=17
  %dynamic_slice.15 = f32[1,1]{1,0} dynamic-slice(%get-tuple-element.269, %get-tuple-element.253, %constant.944), dynamic_slice_sizes={1,1}
  %div.328 = f32[1,1]{1,0} divide(%constant.948, %dynamic_slice.15)
  %div.330 = f32[1]{0} reshape(%div.328)
  %select_n.522 = f32[1]{0} select(%select_n.521, %broadcast_in_dim.390, %div.330)
  %select_n.523 = f32[1]{0} select(%select_n.519, %select_n.522, %div.330)
  %div.331 = f32[1]{0} divide(%constant.945, %select_n.523)
  %convert_element_type.288 = bf16[1]{0} convert(%div.331)
  %convert_element_type.289 = bf16[] reshape(%convert_element_type.288)
  %broadcast_in_dim.391 = bf16[1,64,8,128]{3,2,1,0} broadcast(%convert_element_type.289), dimensions={}
  %div.332 = bf16[1,64,8,128]{3,2,1,0} divide(%convert_element_type.287, %broadcast_in_dim.391)
  %min.176 = bf16[1,64,8,128]{3,2,1,0} broadcast(%constant.949), dimensions={}
  %min.177 = bf16[1,64,8,128]{3,2,1,0} clamp(%max.175, %div.332, %min.176)
  %convert_element_type.290 = f8e4m3fn[1,64,8,128]{3,2,1,0} convert(%min.177)
  %convert_element_type.291 = f8e4m3fn[64,8,128]{2,1,0} reshape(%convert_element_type.290)
  %all-gather.1 = f8e4m3fn[8192,8,128]{2,1,0} all-gather(%convert_element_type.291), channel_id=4, replica_groups=[2,128]<=[256], dimensions={0}, use_global_device_ids=true
  %dot.6 = bf16[2,8192,8,128]{3,2,1,0} dot(%convert_element_type.286, %all-gather.1), lhs_contracting_dims={2}, rhs_contracting_dims={0}
  %mul.295 = f32[1]{0} multiply(%div.324, %div.331)
  %convert_element_type.292 = bf16[1]{0} convert(%mul.295)
  %convert_element_type.293 = bf16[] reshape(%convert_element_type.292)
  %broadcast_in_dim.392 = bf16[2,8192,8,128]{3,2,1,0} broadcast(%convert_element_type.293), dimensions={}
  %mul.296 = bf16[2,8192,8,128]{3,2,1,0} multiply(%dot.6, %broadcast_in_dim.392)
  %convert_element_type.294 = f32[2,8192,8,128]{3,2,1,0} convert(%mul.296)
  %get-tuple-element.270 = f32[2,8192,1,128]{3,2,1,0} get-tuple-element(%param.43), index=18
  %mul.297 = f32[2,8192,128]{2,1,0} reshape(%get-tuple-element.270)
  %mul.298 = f32[2,8192,8,128]{3,2,1,0} broadcast(%mul.297), dimensions={0,1,3}
  %mul.299 = f32[2,8192,8,128]{3,2,1,0} multiply(%convert_element_type.294, %mul.298)
  %get-tuple-element.271 = s32[2,8192,8,128]{3,2,1,0} get-tuple-element(%param.43), index=19
  %select_n.524 = s32[2,8192,8,128]{3,2,1,0} broadcast(%constant.939), dimensions={}
  %select_n.525 = pred[2,8192,8,128]{3,2,1,0} compare(%get-tuple-element.271, %select_n.524), direction=LT
  %slice.396 = bf16[2,8192,8,127]{3,2,1,0} slice(%mul.296), slice={[0:2], [0:8192], [0:8], [1:128]}
  %slice.397 = bf16[2,8192,8,1]{3,2,1,0} slice(%mul.296), slice={[0:2], [0:8192], [0:8], [0:1]}
  %concatenate.113 = bf16[2,8192,8,128]{3,2,1,0} concatenate(%slice.396, %slice.397), dimensions={3}
  %slice.398 = bf16[2,8192,8,1]{3,2,1,0} slice(%mul.296), slice={[0:2], [0:8192], [0:8], [127:128]}
  %slice.399 = bf16[2,8192,8,127]{3,2,1,0} slice(%mul.296), slice={[0:2], [0:8192], [0:8], [0:127]}
  %concatenate.114 = bf16[2,8192,8,128]{3,2,1,0} concatenate(%slice.398, %slice.399), dimensions={3}
  %select_n.528 = bf16[2,8192,8,128]{3,2,1,0} select(%select_n.525, %concatenate.113, %concatenate.114)
  %convert_element_type.295 = f32[2,8192,8,128]{3,2,1,0} convert(%select_n.528)
  %get-tuple-element.272 = f32[2,8192,1,128]{3,2,1,0} get-tuple-element(%param.43), index=20
  %mul.300 = f32[2,8192,128]{2,1,0} reshape(%get-tuple-element.272)
  %mul.301 = f32[2,8192,8,128]{3,2,1,0} broadcast(%mul.300), dimensions={0,1,3}
  %mul.302 = f32[2,8192,8,128]{3,2,1,0} multiply(%convert_element_type.295, %mul.301)
  %get-tuple-element.273 = f32[1,1,1,128]{3,2,1,0} get-tuple-element(%param.43), index=21
  %mul.303 = f32[128]{0} reshape(%get-tuple-element.273)
  %mul.304 = f32[2,8192,8,128]{3,2,1,0} broadcast(%mul.303), dimensions={3}
  %mul.305 = f32[2,8192,8,128]{3,2,1,0} multiply(%mul.302, %mul.304)
  %add.186 = f32[2,8192,8,128]{3,2,1,0} add(%mul.299, %mul.305)
  %convert_element_type.296 = bf16[2,8192,8,128]{3,2,1,0} convert(%add.186)
  %sharding_constraint.43 = bf16[2,8192,8,128]{3,2,1,0} copy(%convert_element_type.296)
  %get-tuple-element.274 = f32[80,1024]{1,0} get-tuple-element(%param.43), index=22
  %dynamic_slice.16 = f32[1,1024]{1,0} dynamic-slice(%get-tuple-element.274, %get-tuple-element.253, %constant.944), dynamic_slice_sizes={1,1024}
  %reduce.93 = f32[] reduce(%dynamic_slice.16, %constant.946), dimensions={0,1}, to_apply=%region_10.570
  %is_finite.40 = pred[] is-finite(%reduce.93)
  %select_n.529 = pred[1]{0} reshape(%is_finite.40)
  %gt.41 = pred[] compare(%reduce.93, %constant.941), direction=GT
  %select_n.530 = pred[1]{0} reshape(%gt.41)
  %div.333 = f32[] divide(%constant.947, %reduce.93)
  %broadcast_in_dim.393 = f32[1]{0} reshape(%div.333)
  %get-tuple-element.275 = f32[80,1]{1,0} get-tuple-element(%param.43), index=23
  %dynamic_slice.17 = f32[1,1]{1,0} dynamic-slice(%get-tuple-element.275, %get-tuple-element.253, %constant.944), dynamic_slice_sizes={1,1}
  %div.335 = f32[1,1]{1,0} divide(%constant.948, %dynamic_slice.17)
  %div.336 = f32[1]{0} reshape(%div.335)
  %select_n.531 = f32[1]{0} select(%select_n.530, %broadcast_in_dim.393, %div.336)
  %select_n.532 = f32[1]{0} select(%select_n.529, %select_n.531, %div.336)
  %div.344 = f32[1]{0} divide(%constant.945, %select_n.532)
  %convert_element_type.297 = bf16[1]{0} convert(%div.344)
  %convert_element_type.298 = bf16[] reshape(%convert_element_type.297)
  %broadcast_in_dim.394 = bf16[2,8192,8192]{2,1,0} broadcast(%convert_element_type.298), dimensions={}
  %div.345 = bf16[2,8192,8192]{2,1,0} divide(%sharding_constraint.40, %broadcast_in_dim.394)
  %min.178 = bf16[2,8192,8192]{2,1,0} clamp(%max.172, %div.345, %min.171)
  %convert_element_type.299 = f8e4m3fn[2,8192,8192]{2,1,0} convert(%min.178)
  %get-tuple-element.276 = f32[80,64,8,128]{3,2,1,0} get-tuple-element(%param.43), index=24
  %dynamic-slice.136 = f32[1,64,8,128]{3,2,1,0} dynamic-slice(%get-tuple-element.276, %get-tuple-element.253, %constant.944, %constant.944, %constant.944), dynamic_slice_sizes={1,64,8,128}
  %convert_element_type.300 = bf16[1,64,8,128]{3,2,1,0} convert(%dynamic-slice.136)
  %get-tuple-element.277 = f32[80,1024]{1,0} get-tuple-element(%param.43), index=25
  %dynamic_slice.18 = f32[1,1024]{1,0} dynamic-slice(%get-tuple-element.277, %get-tuple-element.253, %constant.944), dynamic_slice_sizes={1,1024}
  %reduce.94 = f32[] reduce(%dynamic_slice.18, %constant.946), dimensions={0,1}, to_apply=%region_11.596
  %is_finite.41 = pred[] is-finite(%reduce.94)
  %select_n.533 = pred[1]{0} reshape(%is_finite.41)
  %gt.42 = pred[] compare(%reduce.94, %constant.941), direction=GT
  %select_n.534 = pred[1]{0} reshape(%gt.42)
  %div.346 = f32[] divide(%constant.947, %reduce.94)
  %broadcast_in_dim.395 = f32[1]{0} reshape(%div.346)
  %get-tuple-element.278 = f32[80,1]{1,0} get-tuple-element(%param.43), index=26
  %dynamic_slice.19 = f32[1,1]{1,0} dynamic-slice(%get-tuple-element.278, %get-tuple-element.253, %constant.944), dynamic_slice_sizes={1,1}
  %div.347 = f32[1,1]{1,0} divide(%constant.948, %dynamic_slice.19)
  %div.348 = f32[1]{0} reshape(%div.347)
  %select_n.535 = f32[1]{0} select(%select_n.534, %broadcast_in_dim.395, %div.348)
  %select_n.536 = f32[1]{0} select(%select_n.533, %select_n.535, %div.348)
  %div.349 = f32[1]{0} divide(%constant.945, %select_n.536)
  %convert_element_type.301 = bf16[1]{0} convert(%div.349)
  %convert_element_type.302 = bf16[] reshape(%convert_element_type.301)
  %broadcast_in_dim.396 = bf16[1,64,8,128]{3,2,1,0} broadcast(%convert_element_type.302), dimensions={}
  %div.350 = bf16[1,64,8,128]{3,2,1,0} divide(%convert_element_type.300, %broadcast_in_dim.396)
  %min.179 = bf16[1,64,8,128]{3,2,1,0} clamp(%max.175, %div.350, %min.176)
  %convert_element_type.303 = f8e4m3fn[1,64,8,128]{3,2,1,0} convert(%min.179)
  %convert_element_type.304 = f8e4m3fn[64,8,128]{2,1,0} reshape(%convert_element_type.303)
  %all-gather.2 = f8e4m3fn[8192,8,128]{2,1,0} all-gather(%convert_element_type.304), channel_id=5, replica_groups=[2,128]<=[256], dimensions={0}, use_global_device_ids=true
  %dot.7 = bf16[2,8192,8,128]{3,2,1,0} dot(%convert_element_type.299, %all-gather.2), lhs_contracting_dims={2}, rhs_contracting_dims={0}
  %mul.306 = f32[1]{0} multiply(%div.344, %div.349)
  %convert_element_type.305 = bf16[1]{0} convert(%mul.306)
  %convert_element_type.306 = bf16[] reshape(%convert_element_type.305)
  %broadcast_in_dim.397 = bf16[2,8192,8,128]{3,2,1,0} broadcast(%convert_element_type.306), dimensions={}
  %mul.307 = bf16[2,8192,8,128]{3,2,1,0} multiply(%dot.7, %broadcast_in_dim.397)
  %sharding_constraint.44 = bf16[2,8192,8,128]{3,2,1,0} copy(%mul.307)
  %constant.1035 = bf16[0]{0} constant({})
  %constant.1036 = u32[] constant(0)
  %reshape.1235 = u32[512]{0} broadcast(%constant.1036), dimensions={}
  %constant.1039 = s32[256]{0} constant({0, 2, 4, 6, 8, 10, 12, 14, 16, 18, 20, 22, 24, 26, 28, 30, 32, 34, 36, 38, 40, 42, 44, 46, 48, 50, 52, 54, 56, 58, 60, 62, 64, 66, 68, 70, 72, 74, 76, 78, 80, 82, 84, 86, 88, 90, 92, 94, 96, 98, 100, 102, 104, 106, 108, 110, 112, 114, 116, 118, 120, 122, 124, 126, 128, 130, 132, 134, 136, 138, 140, 142, 144, 146, 148, 150, 152, 154, 156, 158, 160, 162, 164, 166, 168, 170, 172, 174, 176, 178, 180, 182, 184, 186, 188, 190, 192, 194, 196, 198, 200, 202, 204, 206, 208, 210, 212, 214, 216, 218, 220, 222, 224, 226, 228, 230, 232, 234, 236, 238, 240, 242, 244, 246, 248, 250, 252, 254, 256, 258, 260, 262, 264, 266, 268, 270, 272, 274, 276, 278, 280, 282, 284, 286, 288, 290, 292, 294, 296, 298, 300, 302, 304, 306, 308, 310, 312, 314, 316, 318, 320, 322, 324, 326, 328, 330, 332, 334, 336, 338, 340, 342, 344, 346, 348, 350, 352, 354, 356, 358, 360, 362, 364, 366, 368, 370, 372, 374, 376, 378, 380, 382, 384, 386, 388, 390, 392, 394, 396, 398, 400, 402, 404, 406, 408, 410, 412, 414, 416, 418, 420, 422, 424, 426, 428, 430, 432, 434, 436, 438, 440, 442, 444, 446, 448, 450, 452, 454, 456, 458, 460, 462, 464, 466, 468, 470, 472, 474, 476, 478, 480, 482, 484, 486, 488, 490, 492, 494, 496, 498, 500, 502, 504, 506, 508, 510})
  %partition-id.1 = u32[] partition-id()
  %dynamic-slice.137 = s32[1]{0} dynamic-slice(%constant.1039, %partition-id.1), dynamic_slice_sizes={1}
  %reshape.1236 = s32[] reshape(%dynamic-slice.137)
  %dynamic-slice.138 = u32[2]{0} dynamic-slice(%reshape.1235, %reshape.1236), dynamic_slice_sizes={2}
  %constant.1040 = s32[1]{0} constant({0})
  %get-tuple-element.279 = s32[2,1]{1,0} get-tuple-element(%param.43), index=27
  %reshape.1237 = s32[2]{0} reshape(%get-tuple-element.279)
  %broadcast.872 = s32[2]{0} broadcast(%constant.944), dimensions={}
  %lt.19 = pred[2]{0} compare(%reshape.1237, %broadcast.872), direction=LT
  %select_n.537 = s32[2]{0} select(%lt.19, %broadcast.872, %reshape.1237)
  %reduce_window_sum.1 = s32[2]{0} reduce-window(%select_n.537, %constant.944), window={size=2 pad=1_0}, to_apply=%region_0.33._custom_call_lowering_rule
  %concatenate.115 = s32[3]{0} concatenate(%constant.1040, %reduce_window_sum.1), dimensions={0}
  %get-tuple-element.280 = s32[2,1]{1,0} get-tuple-element(%param.43), index=28
  %reshape.1238 = s32[2]{0} reshape(%get-tuple-element.280)
  %lt.41 = pred[2]{0} compare(%reshape.1238, %broadcast.872), direction=LT
  %select_n.538 = s32[2]{0} select(%lt.41, %broadcast.872, %reshape.1238)
  %reduce_window_sum.2 = s32[2]{0} reduce-window(%select_n.538, %constant.944), window={size=2 pad=1_0}, to_apply=%region_0.33._custom_call_lowering_rule.clone
  %concatenate.116 = s32[3]{0} concatenate(%constant.1040, %reduce_window_sum.2), dimensions={0}
  %constant.1038 = f32[0]{0} constant({})
  %te_fused_attn_forward_ffi.45 = (bf16[2,8192,64,128]{3,2,1,0}, f32[2,64,8192,1]{3,2,1,0}, u32[2,4]{1,0}, u8[48]{0}) custom-call(%sharding_constraint.41, %sharding_constraint.43, %sharding_constraint.44, %constant.1035, %dynamic-slice.138, /*index=5*/%concatenate.115, %concatenate.116, %constant.1038, %constant.1038, %constant.1038, /*index=10*/%constant.1038, %constant.1038, %constant.1038), custom_call_target="te_fused_attn_forward_ffi", operand_layout_constraints={bf16[2,8192,64,128]{3,2,1,0}, bf16[2,8192,8,128]{3,2,1,0}, bf16[2,8192,8,128]{3,2,1,0}, bf16[0]{0}, u32[2]{0}, s32[3]{0}, s32[3]{0}, f32[0]{0}, f32[0]{0}, f32[0]{0}, f32[0]{0}, f32[0]{0}, f32[0]{0}}, api_version=API_VERSION_TYPED_FFI, backend_config={attn_heads = 64 : i64, bias_batch = 0 : i64, bias_heads = 0 : i64, bias_type = 0 : i64, deterministic = false, dropout_probability = 0.000000e+00 : f64, input_batch = 2 : i64, is_training = true, kv_max_seqlen = 8192 : i64, mask_type = 3 : i64, max_segments_per_seq = 1 : i64, num_gqa_groups = 8 : i64, q_max_seqlen = 8192 : i64, qk_head_dim = 128 : i64, qkv_layout = 9 : i64, scaling_factor = 1.000000e+00 : f64, v_head_dim = 128 : i64, window_size_left = -1 : i64, window_size_right = -1 : i64}
  %get-tuple-element.284 = bf16[2,8192,64,128]{3,2,1,0} get-tuple-element(%te_fused_attn_forward_ffi.45), index=0
  %sharding_constraint.45 = bf16[2,8192,64,128]{3,2,1,0} copy(%get-tuple-element.284)
  %get-tuple-element.285 = f32[80,1024]{1,0} get-tuple-element(%param.43), index=29
  %dynamic_slice.20 = f32[1,1024]{1,0} dynamic-slice(%get-tuple-element.285, %get-tuple-element.253, %constant.944), dynamic_slice_sizes={1,1024}
  %reduce.95 = f32[] reduce(%dynamic_slice.20, %constant.946), dimensions={0,1}, to_apply=%region_12.637
  %is_finite.42 = pred[] is-finite(%reduce.95)
  %select_n.539 = pred[1]{0} reshape(%is_finite.42)
  %gt.43 = pred[] compare(%reduce.95, %constant.941), direction=GT
  %select_n.540 = pred[1]{0} reshape(%gt.43)
  %div.351 = f32[] divide(%constant.947, %reduce.95)
  %broadcast_in_dim.406 = f32[1]{0} reshape(%div.351)
  %get-tuple-element.286 = f32[80,1]{1,0} get-tuple-element(%param.43), index=30
  %dynamic_slice.21 = f32[1,1]{1,0} dynamic-slice(%get-tuple-element.286, %get-tuple-element.253, %constant.944), dynamic_slice_sizes={1,1}
  %div.352 = f32[1,1]{1,0} divide(%constant.948, %dynamic_slice.21)
  %div.353 = f32[1]{0} reshape(%div.352)
  %select_n.541 = f32[1]{0} select(%select_n.540, %broadcast_in_dim.406, %div.353)
  %select_n.542 = f32[1]{0} select(%select_n.539, %select_n.541, %div.353)
  %div.354 = f32[1]{0} divide(%constant.945, %select_n.542)
  %convert_element_type.307 = bf16[1]{0} convert(%div.354)
  %convert_element_type.308 = bf16[] reshape(%convert_element_type.307)
  %broadcast_in_dim.407 = bf16[2,8192,64,128]{3,2,1,0} broadcast(%convert_element_type.308), dimensions={}
  %div.355 = bf16[2,8192,64,128]{3,2,1,0} divide(%sharding_constraint.45, %broadcast_in_dim.407)
  %min.180 = bf16[2,8192,64,128]{3,2,1,0} broadcast(%constant.949), dimensions={}
  %min.181 = bf16[2,8192,64,128]{3,2,1,0} clamp(%max.173, %div.355, %min.180)
  %convert_element_type.309 = f8e4m3fn[2,8192,64,128]{3,2,1,0} convert(%min.181)
  %max.176 = bf16[1,64,128,64]{3,2,1,0} broadcast(%constant.940), dimensions={}
  %get-tuple-element.287 = f32[80,64,128,64]{3,2,1,0} get-tuple-element(%param.43), index=31
  %dynamic-slice.139 = f32[1,64,128,64]{3,2,1,0} dynamic-slice(%get-tuple-element.287, %get-tuple-element.253, %constant.944, %constant.944, %constant.944), dynamic_slice_sizes={1,64,128,64}
  %convert_element_type.311 = bf16[1,64,128,64]{3,2,1,0} convert(%dynamic-slice.139)
  %get-tuple-element.288 = f32[80,1024]{1,0} get-tuple-element(%param.43), index=32
  %dynamic_slice.22 = f32[1,1024]{1,0} dynamic-slice(%get-tuple-element.288, %get-tuple-element.253, %constant.944), dynamic_slice_sizes={1,1024}
  %reduce.96 = f32[] reduce(%dynamic_slice.22, %constant.946), dimensions={0,1}, to_apply=%region_13.665
  %is_finite.43 = pred[] is-finite(%reduce.96)
  %select_n.543 = pred[1]{0} reshape(%is_finite.43)
  %gt.44 = pred[] compare(%reduce.96, %constant.941), direction=GT
  %select_n.544 = pred[1]{0} reshape(%gt.44)
  %div.356 = f32[] divide(%constant.947, %reduce.96)
  %broadcast_in_dim.408 = f32[1]{0} reshape(%div.356)
  %get-tuple-element.289 = f32[80,1]{1,0} get-tuple-element(%param.43), index=33
  %dynamic_slice.23 = f32[1,1]{1,0} dynamic-slice(%get-tuple-element.289, %get-tuple-element.253, %constant.944), dynamic_slice_sizes={1,1}
  %div.357 = f32[1,1]{1,0} divide(%constant.948, %dynamic_slice.23)
  %div.358 = f32[1]{0} reshape(%div.357)
  %select_n.545 = f32[1]{0} select(%select_n.544, %broadcast_in_dim.408, %div.358)
  %select_n.546 = f32[1]{0} select(%select_n.543, %select_n.545, %div.358)
  %div.359 = f32[1]{0} divide(%constant.945, %select_n.546)
  %convert_element_type.312 = bf16[1]{0} convert(%div.359)
  %convert_element_type.313 = bf16[] reshape(%convert_element_type.312)
  %broadcast_in_dim.410 = bf16[1,64,128,64]{3,2,1,0} broadcast(%convert_element_type.313), dimensions={}
  %div.360 = bf16[1,64,128,64]{3,2,1,0} divide(%convert_element_type.311, %broadcast_in_dim.410)
  %min.182 = bf16[1,64,128,64]{3,2,1,0} broadcast(%constant.949), dimensions={}
  %min.183 = bf16[1,64,128,64]{3,2,1,0} clamp(%max.176, %div.360, %min.182)
  %convert_element_type.314 = f8e4m3fn[1,64,128,64]{3,2,1,0} convert(%min.183)
  %convert_element_type.315 = f8e4m3fn[64,128,64]{2,1,0} reshape(%convert_element_type.314)
  %all-gather.4 = f8e4m3fn[64,128,8192]{2,1,0} all-gather(%convert_element_type.315), channel_id=7, replica_groups=[2,128]<=[256], dimensions={2}, use_global_device_ids=true
  %dot.8 = bf16[2,8192,8192]{2,1,0} dot(%convert_element_type.309, %all-gather.4), lhs_contracting_dims={2,3}, rhs_contracting_dims={0,1}
  %mul.308 = f32[1]{0} multiply(%div.354, %div.359)
  %convert_element_type.316 = bf16[1]{0} convert(%mul.308)
  %convert_element_type.317 = bf16[] reshape(%convert_element_type.316)
  %broadcast_in_dim.411 = bf16[2,8192,8192]{2,1,0} broadcast(%convert_element_type.317), dimensions={}
  %mul.310 = bf16[2,8192,8192]{2,1,0} multiply(%dot.8, %broadcast_in_dim.411)
  %sharding_constraint.46 = bf16[2,8192,8192]{2,1,0} copy(%mul.310)
  %add.187 = bf16[2,8192,8192]{2,1,0} add(%sharding_constraint.38, %sharding_constraint.46)
  %convert_element_type.319 = f32[2,8192,8192]{2,1,0} convert(%add.187)
  %square.82 = f32[2,8192,8192]{2,1,0} multiply(%convert_element_type.319, %convert_element_type.319)
  %reduce.97 = f32[2,8192]{1,0} reduce(%square.82, %constant.941), dimensions={2}, to_apply=%region_14.700
  %div.361 = f32[2,8192]{1,0} multiply(%reduce.97, %closed_call.0)
  %add.188 = f32[2,8192]{1,0} add(%div.361, %closed_call.1)
  %rsqrt.7 = f32[2,8192]{1,0} rsqrt(%add.188)
  %mul.311 = f32[2,8192,8192]{2,1,0} broadcast(%rsqrt.7), dimensions={0,1}
  %mul.312 = f32[2,8192,8192]{2,1,0} multiply(%convert_element_type.319, %mul.311)
  %convert_element_type.321 = bf16[2,8192,8192]{2,1,0} convert(%mul.312)
  %get-tuple-element.290 = f32[80,8192]{1,0} get-tuple-element(%param.43), index=34
  %dynamic_slice.24 = f32[1,8192]{1,0} dynamic-slice(%get-tuple-element.290, %get-tuple-element.253, %constant.944), dynamic_slice_sizes={1,8192}
  %convert_element_type.322 = bf16[1,8192]{1,0} convert(%dynamic_slice.24)
  %mul.313 = bf16[8192]{0} reshape(%convert_element_type.322)
  %mul.314 = bf16[2,8192,8192]{2,1,0} broadcast(%mul.313), dimensions={2}
  %mul.315 = bf16[2,8192,8192]{2,1,0} multiply(%convert_element_type.321, %mul.314)
  %sharding_constraint.47 = bf16[2,8192,8192]{2,1,0} copy(%mul.315)
  %get-tuple-element.291 = f32[80,1024]{1,0} get-tuple-element(%param.43), index=35
  %dynamic_slice.25 = f32[1,1024]{1,0} dynamic-slice(%get-tuple-element.291, %get-tuple-element.253, %constant.944), dynamic_slice_sizes={1,1024}
  %reduce.98 = f32[] reduce(%dynamic_slice.25, %constant.946), dimensions={0,1}, to_apply=%region_15.718
  %is_finite.44 = pred[] is-finite(%reduce.98)
  %select_n.549 = pred[1]{0} reshape(%is_finite.44)
  %gt.45 = pred[] compare(%reduce.98, %constant.941), direction=GT
  %select_n.550 = pred[1]{0} reshape(%gt.45)
  %div.362 = f32[] divide(%constant.947, %reduce.98)
  %broadcast_in_dim.412 = f32[1]{0} reshape(%div.362)
  %get-tuple-element.292 = f32[80,1]{1,0} get-tuple-element(%param.43), index=36
  %dynamic_slice.26 = f32[1,1]{1,0} dynamic-slice(%get-tuple-element.292, %get-tuple-element.253, %constant.944), dynamic_slice_sizes={1,1}
  %div.364 = f32[1,1]{1,0} divide(%constant.948, %dynamic_slice.26)
  %div.365 = f32[1]{0} reshape(%div.364)
  %select_n.551 = f32[1]{0} select(%select_n.550, %broadcast_in_dim.412, %div.365)
  %select_n.552 = f32[1]{0} select(%select_n.549, %select_n.551, %div.365)
  %div.366 = f32[1]{0} divide(%constant.945, %select_n.552)
  %convert_element_type.323 = bf16[1]{0} convert(%div.366)
  %convert_element_type.324 = bf16[] reshape(%convert_element_type.323)
  %broadcast_in_dim.414 = bf16[2,8192,8192]{2,1,0} broadcast(%convert_element_type.324), dimensions={}
  %div.369 = bf16[2,8192,8192]{2,1,0} divide(%sharding_constraint.47, %broadcast_in_dim.414)
  %min.184 = bf16[2,8192,8192]{2,1,0} clamp(%max.172, %div.369, %min.171)
  %convert_element_type.325 = f8e4m3fn[2,8192,8192]{2,1,0} convert(%min.184)
  %max.177 = bf16[1,64,28672]{2,1,0} broadcast(%constant.940), dimensions={}
  %get-tuple-element.293 = f32[80,64,28672]{2,1,0} get-tuple-element(%param.43), index=37
  %dynamic-slice.140 = f32[1,64,28672]{2,1,0} dynamic-slice(%get-tuple-element.293, %get-tuple-element.253, %constant.944, %constant.944), dynamic_slice_sizes={1,64,28672}
  %convert_element_type.326 = bf16[1,64,28672]{2,1,0} convert(%dynamic-slice.140)
  %get-tuple-element.294 = f32[80,1024]{1,0} get-tuple-element(%param.43), index=38
  %dynamic_slice.27 = f32[1,1024]{1,0} dynamic-slice(%get-tuple-element.294, %get-tuple-element.253, %constant.944), dynamic_slice_sizes={1,1024}
  %reduce.99 = f32[] reduce(%dynamic_slice.27, %constant.946), dimensions={0,1}, to_apply=%region_16.745
  %is_finite.45 = pred[] is-finite(%reduce.99)
  %select_n.553 = pred[1]{0} reshape(%is_finite.45)
  %gt.46 = pred[] compare(%reduce.99, %constant.941), direction=GT
  %select_n.554 = pred[1]{0} reshape(%gt.46)
  %div.370 = f32[] divide(%constant.947, %reduce.99)
  %broadcast_in_dim.415 = f32[1]{0} reshape(%div.370)
  %get-tuple-element.295 = f32[80,1]{1,0} get-tuple-element(%param.43), index=39
  %dynamic_slice.28 = f32[1,1]{1,0} dynamic-slice(%get-tuple-element.295, %get-tuple-element.253, %constant.944), dynamic_slice_sizes={1,1}
  %div.371 = f32[1,1]{1,0} divide(%constant.948, %dynamic_slice.28)
  %div.372 = f32[1]{0} reshape(%div.371)
  %select_n.556 = f32[1]{0} select(%select_n.554, %broadcast_in_dim.415, %div.372)
  %select_n.557 = f32[1]{0} select(%select_n.553, %select_n.556, %div.372)
  %div.374 = f32[1]{0} divide(%constant.945, %select_n.557)
  %convert_element_type.327 = bf16[1]{0} convert(%div.374)
  %convert_element_type.328 = bf16[] reshape(%convert_element_type.327)
  %broadcast_in_dim.416 = bf16[1,64,28672]{2,1,0} broadcast(%convert_element_type.328), dimensions={}
  %div.376 = bf16[1,64,28672]{2,1,0} divide(%convert_element_type.326, %broadcast_in_dim.416)
  %min.185 = bf16[1,64,28672]{2,1,0} broadcast(%constant.949), dimensions={}
  %min.186 = bf16[1,64,28672]{2,1,0} clamp(%max.177, %div.376, %min.185)
  %convert_element_type.329 = f8e4m3fn[1,64,28672]{2,1,0} convert(%min.186)
  %convert_element_type.330 = f8e4m3fn[64,28672]{1,0} reshape(%convert_element_type.329)
  %all-gather.5 = f8e4m3fn[8192,28672]{1,0} all-gather(%convert_element_type.330), channel_id=8, replica_groups=[2,128]<=[256], dimensions={0}, use_global_device_ids=true
  %dot.9 = bf16[2,8192,28672]{2,1,0} dot(%convert_element_type.325, %all-gather.5), lhs_contracting_dims={2}, rhs_contracting_dims={0}
  %mul.316 = f32[1]{0} multiply(%div.366, %div.374)
  %convert_element_type.331 = bf16[1]{0} convert(%mul.316)
  %convert_element_type.332 = bf16[] reshape(%convert_element_type.331)
  %broadcast_in_dim.417 = bf16[2,8192,28672]{2,1,0} broadcast(%convert_element_type.332), dimensions={}
  %mul.317 = bf16[2,8192,28672]{2,1,0} multiply(%dot.9, %broadcast_in_dim.417)
  %constant.1051 = bf16[] constant(1)
  %jit_silu_.3 = bf16[2,8192,28672]{2,1,0} broadcast(%constant.1051), dimensions={}
  %neg.4 = bf16[2,8192,28672]{2,1,0} negate(%mul.317)
  %exp.4 = bf16[2,8192,28672]{2,1,0} exponential(%neg.4)
  %add.189 = bf16[2,8192,28672]{2,1,0} add(%exp.4, %jit_silu_.3)
  %div.377 = bf16[2,8192,28672]{2,1,0} divide(%jit_silu_.3, %add.189)
  %mul.318 = bf16[2,8192,28672]{2,1,0} multiply(%mul.317, %div.377)
  %get-tuple-element.296 = f32[80,1024]{1,0} get-tuple-element(%param.43), index=40
  %dynamic_slice.29 = f32[1,1024]{1,0} dynamic-slice(%get-tuple-element.296, %get-tuple-element.253, %constant.944), dynamic_slice_sizes={1,1024}
  %reduce.100 = f32[] reduce(%dynamic_slice.29, %constant.946), dimensions={0,1}, to_apply=%region_17.784
  %is_finite.46 = pred[] is-finite(%reduce.100)
  %select_n.558 = pred[1]{0} reshape(%is_finite.46)
  %gt.47 = pred[] compare(%reduce.100, %constant.941), direction=GT
  %select_n.559 = pred[1]{0} reshape(%gt.47)
  %div.380 = f32[] divide(%constant.947, %reduce.100)
  %broadcast_in_dim.418 = f32[1]{0} reshape(%div.380)
  %get-tuple-element.297 = f32[80,1]{1,0} get-tuple-element(%param.43), index=41
  %dynamic_slice.30 = f32[1,1]{1,0} dynamic-slice(%get-tuple-element.297, %get-tuple-element.253, %constant.944), dynamic_slice_sizes={1,1}
  %div.382 = f32[1,1]{1,0} divide(%constant.948, %dynamic_slice.30)
  %div.383 = f32[1]{0} reshape(%div.382)
  %select_n.560 = f32[1]{0} select(%select_n.559, %broadcast_in_dim.418, %div.383)
  %select_n.561 = f32[1]{0} select(%select_n.558, %select_n.560, %div.383)
  %div.384 = f32[1]{0} divide(%constant.945, %select_n.561)
  %convert_element_type.333 = bf16[1]{0} convert(%div.384)
  %convert_element_type.334 = bf16[] reshape(%convert_element_type.333)
  %broadcast_in_dim.420 = bf16[2,8192,8192]{2,1,0} broadcast(%convert_element_type.334), dimensions={}
  %div.385 = bf16[2,8192,8192]{2,1,0} divide(%sharding_constraint.47, %broadcast_in_dim.420)
  %min.187 = bf16[2,8192,8192]{2,1,0} clamp(%max.172, %div.385, %min.171)
  %convert_element_type.335 = f8e4m3fn[2,8192,8192]{2,1,0} convert(%min.187)
  %get-tuple-element.298 = f32[80,64,28672]{2,1,0} get-tuple-element(%param.43), index=42
  %dynamic-slice.141 = f32[1,64,28672]{2,1,0} dynamic-slice(%get-tuple-element.298, %get-tuple-element.253, %constant.944, %constant.944), dynamic_slice_sizes={1,64,28672}
  %convert_element_type.337 = bf16[1,64,28672]{2,1,0} convert(%dynamic-slice.141)
  %get-tuple-element.299 = f32[80,1024]{1,0} get-tuple-element(%param.43), index=43
  %dynamic_slice.31 = f32[1,1024]{1,0} dynamic-slice(%get-tuple-element.299, %get-tuple-element.253, %constant.944), dynamic_slice_sizes={1,1024}
  %reduce.101 = f32[] reduce(%dynamic_slice.31, %constant.946), dimensions={0,1}, to_apply=%region_18.810
  %is_finite.47 = pred[] is-finite(%reduce.101)
  %select_n.562 = pred[1]{0} reshape(%is_finite.47)
  %gt.48 = pred[] compare(%reduce.101, %constant.941), direction=GT
  %select_n.563 = pred[1]{0} reshape(%gt.48)
  %div.387 = f32[] divide(%constant.947, %reduce.101)
  %broadcast_in_dim.421 = f32[1]{0} reshape(%div.387)
  %get-tuple-element.300 = f32[80,1]{1,0} get-tuple-element(%param.43), index=44
  %dynamic_slice.32 = f32[1,1]{1,0} dynamic-slice(%get-tuple-element.300, %get-tuple-element.253, %constant.944), dynamic_slice_sizes={1,1}
  %div.388 = f32[1,1]{1,0} divide(%constant.948, %dynamic_slice.32)
  %div.396 = f32[1]{0} reshape(%div.388)
  %select_n.564 = f32[1]{0} select(%select_n.563, %broadcast_in_dim.421, %div.396)
  %select_n.565 = f32[1]{0} select(%select_n.562, %select_n.564, %div.396)
  %div.397 = f32[1]{0} divide(%constant.945, %select_n.565)
  %convert_element_type.338 = bf16[1]{0} convert(%div.397)
  %convert_element_type.339 = bf16[] reshape(%convert_element_type.338)
  %broadcast_in_dim.422 = bf16[1,64,28672]{2,1,0} broadcast(%convert_element_type.339), dimensions={}
  %div.398 = bf16[1,64,28672]{2,1,0} divide(%convert_element_type.337, %broadcast_in_dim.422)
  %min.188 = bf16[1,64,28672]{2,1,0} clamp(%max.177, %div.398, %min.185)
  %convert_element_type.340 = f8e4m3fn[1,64,28672]{2,1,0} convert(%min.188)
  %convert_element_type.341 = f8e4m3fn[64,28672]{1,0} reshape(%convert_element_type.340)
  %all-gather.6 = f8e4m3fn[8192,28672]{1,0} all-gather(%convert_element_type.341), channel_id=9, replica_groups=[2,128]<=[256], dimensions={0}, use_global_device_ids=true
  %dot.10 = bf16[2,8192,28672]{2,1,0} dot(%convert_element_type.335, %all-gather.6), lhs_contracting_dims={2}, rhs_contracting_dims={0}
  %mul.319 = f32[1]{0} multiply(%div.384, %div.397)
  %convert_element_type.342 = bf16[1]{0} convert(%mul.319)
  %convert_element_type.343 = bf16[] reshape(%convert_element_type.342)
  %broadcast_in_dim.423 = bf16[2,8192,28672]{2,1,0} broadcast(%convert_element_type.343), dimensions={}
  %mul.320 = bf16[2,8192,28672]{2,1,0} multiply(%dot.10, %broadcast_in_dim.423)
  %mul.321 = bf16[2,8192,28672]{2,1,0} multiply(%mul.318, %mul.320)
  %sharding_constraint.48 = bf16[2,8192,28672]{2,1,0} copy(%mul.321)
  %get-tuple-element.301 = f32[80,1024]{1,0} get-tuple-element(%param.43), index=45
  %dynamic_slice.33 = f32[1,1024]{1,0} dynamic-slice(%get-tuple-element.301, %get-tuple-element.253, %constant.944), dynamic_slice_sizes={1,1024}
  %reduce.102 = f32[] reduce(%dynamic_slice.33, %constant.946), dimensions={0,1}, to_apply=%region_19.843
  %is_finite.48 = pred[] is-finite(%reduce.102)
  %select_n.566 = pred[1]{0} reshape(%is_finite.48)
  %gt.49 = pred[] compare(%reduce.102, %constant.941), direction=GT
  %select_n.567 = pred[1]{0} reshape(%gt.49)
  %div.399 = f32[] divide(%constant.947, %reduce.102)
  %broadcast_in_dim.424 = f32[1]{0} reshape(%div.399)
  %get-tuple-element.302 = f32[80,1]{1,0} get-tuple-element(%param.43), index=46
  %dynamic_slice.34 = f32[1,1]{1,0} dynamic-slice(%get-tuple-element.302, %get-tuple-element.253, %constant.944), dynamic_slice_sizes={1,1}
  %div.400 = f32[1,1]{1,0} divide(%constant.948, %dynamic_slice.34)
  %div.401 = f32[1]{0} reshape(%div.400)
  %select_n.568 = f32[1]{0} select(%select_n.567, %broadcast_in_dim.424, %div.401)
  %select_n.569 = f32[1]{0} select(%select_n.566, %select_n.568, %div.401)
  %div.402 = f32[1]{0} divide(%constant.945, %select_n.569)
  %convert_element_type.344 = bf16[1]{0} convert(%div.402)
  %convert_element_type.345 = bf16[] reshape(%convert_element_type.344)
  %broadcast_in_dim.425 = bf16[2,8192,28672]{2,1,0} broadcast(%convert_element_type.345), dimensions={}
  %div.403 = bf16[2,8192,28672]{2,1,0} divide(%sharding_constraint.48, %broadcast_in_dim.425)
  %min.189 = bf16[2,8192,28672]{2,1,0} broadcast(%constant.949), dimensions={}
  %min.190 = bf16[2,8192,28672]{2,1,0} clamp(%max.171, %div.403, %min.189)
  %convert_element_type.346 = f8e4m3fn[2,8192,28672]{2,1,0} convert(%min.190)
  %max.178 = bf16[1,28672,64]{2,1,0} broadcast(%constant.940), dimensions={}
  %get-tuple-element.303 = f32[80,28672,64]{2,1,0} get-tuple-element(%param.43), index=47
  %dynamic-slice.142 = f32[1,28672,64]{2,1,0} dynamic-slice(%get-tuple-element.303, %get-tuple-element.253, %constant.944, %constant.944), dynamic_slice_sizes={1,28672,64}
  %convert_element_type.347 = bf16[1,28672,64]{2,1,0} convert(%dynamic-slice.142)
  %get-tuple-element.304 = f32[80,1024]{1,0} get-tuple-element(%param.43), index=48
  %dynamic_slice.35 = f32[1,1024]{1,0} dynamic-slice(%get-tuple-element.304, %get-tuple-element.253, %constant.944), dynamic_slice_sizes={1,1024}
  %reduce.103 = f32[] reduce(%dynamic_slice.35, %constant.946), dimensions={0,1}, to_apply=%region_20.871
  %is_finite.49 = pred[] is-finite(%reduce.103)
  %select_n.570 = pred[1]{0} reshape(%is_finite.49)
  %gt.50 = pred[] compare(%reduce.103, %constant.941), direction=GT
  %select_n.571 = pred[1]{0} reshape(%gt.50)
  %div.404 = f32[] divide(%constant.947, %reduce.103)
  %broadcast_in_dim.426 = f32[1]{0} reshape(%div.404)
  %get-tuple-element.305 = f32[80,1]{1,0} get-tuple-element(%param.43), index=49
  %dynamic_slice.36 = f32[1,1]{1,0} dynamic-slice(%get-tuple-element.305, %get-tuple-element.253, %constant.944), dynamic_slice_sizes={1,1}
  %div.405 = f32[1,1]{1,0} divide(%constant.948, %dynamic_slice.36)
  %div.406 = f32[1]{0} reshape(%div.405)
  %select_n.572 = f32[1]{0} select(%select_n.571, %broadcast_in_dim.426, %div.406)
  %select_n.574 = f32[1]{0} select(%select_n.570, %select_n.572, %div.406)
  %div.407 = f32[1]{0} divide(%constant.945, %select_n.574)
  %convert_element_type.348 = bf16[1]{0} convert(%div.407)
  %convert_element_type.349 = bf16[] reshape(%convert_element_type.348)
  %broadcast_in_dim.429 = bf16[1,28672,64]{2,1,0} broadcast(%convert_element_type.349), dimensions={}
  %div.409 = bf16[1,28672,64]{2,1,0} divide(%convert_element_type.347, %broadcast_in_dim.429)
  %min.191 = bf16[1,28672,64]{2,1,0} broadcast(%constant.949), dimensions={}
  %min.192 = bf16[1,28672,64]{2,1,0} clamp(%max.178, %div.409, %min.191)
  %convert_element_type.351 = f8e4m3fn[1,28672,64]{2,1,0} convert(%min.192)
  %convert_element_type.352 = f8e4m3fn[28672,64]{1,0} reshape(%convert_element_type.351)
  %all-gather.7 = f8e4m3fn[28672,8192]{1,0} all-gather(%convert_element_type.352), channel_id=10, replica_groups=[2,128]<=[256], dimensions={1}, use_global_device_ids=true
  %dot.11 = bf16[2,8192,8192]{2,1,0} dot(%convert_element_type.346, %all-gather.7), lhs_contracting_dims={2}, rhs_contracting_dims={0}
  %mul.322 = f32[1]{0} multiply(%div.402, %div.407)
  %convert_element_type.353 = bf16[1]{0} convert(%mul.322)
  %convert_element_type.354 = bf16[] reshape(%convert_element_type.353)
  %broadcast_in_dim.430 = bf16[2,8192,8192]{2,1,0} broadcast(%convert_element_type.354), dimensions={}
  %mul.323 = bf16[2,8192,8192]{2,1,0} multiply(%dot.11, %broadcast_in_dim.430)
  %sharding_constraint.49 = bf16[2,8192,8192]{2,1,0} copy(%mul.323)
  %add.192 = bf16[2,8192,8192]{2,1,0} add(%sharding_constraint.49, %add.187)
  %sharding_constraint.50 = bf16[2,8192,8192]{2,1,0} copy(%add.192)
  %get-tuple-element.306 = bf16[80,2,8192,8192]{3,2,1,0} get-tuple-element(%param.43), index=2
  %broadcast_in_dim.431 = bf16[1,2,8192,8192]{3,2,1,0} reshape(%sharding_constraint.38)
  %dynamic-update-slice.63 = bf16[80,2,8192,8192]{3,2,1,0} dynamic-update-slice(%get-tuple-element.306, %broadcast_in_dim.431, %get-tuple-element.253, %constant.944, %constant.944, /*index=5*/%constant.944)
  ROOT %tuple.111 = (s32[], bf16[2,8192,8192]{2,1,0}, bf16[80,2,8192,8192]{3,2,1,0}, f32[80,8192]{1,0}, f32[80,1024]{1,0}, /*index=5*/f32[80,1]{1,0}, f32[80,64,64,128]{3,2,1,0}, f32[80,1024]{1,0}, f32[80,1]{1,0}, f32[2,8192,1,128]{3,2,1,0}, /*index=10*/s32[2,8192,64,128]{3,2,1,0}, f32[2,8192,1,128]{3,2,1,0}, f32[1,1,1,128]{3,2,1,0}, f32[80,1024]{1,0}, f32[80,1]{1,0}, /*index=15*/f32[80,64,8,128]{3,2,1,0}, f32[80,1024]{1,0}, f32[80,1]{1,0}, f32[2,8192,1,128]{3,2,1,0}, s32[2,8192,8,128]{3,2,1,0}, /*index=20*/f32[2,8192,1,128]{3,2,1,0}, f32[1,1,1,128]{3,2,1,0}, f32[80,1024]{1,0}, f32[80,1]{1,0}, f32[80,64,8,128]{3,2,1,0}, /*index=25*/f32[80,1024]{1,0}, f32[80,1]{1,0}, s32[2,1]{1,0}, s32[2,1]{1,0}, f32[80,1024]{1,0}, /*index=30*/f32[80,1]{1,0}, f32[80,64,128,64]{3,2,1,0}, f32[80,1024]{1,0}, f32[80,1]{1,0}, f32[80,8192]{1,0}, /*index=35*/f32[80,1024]{1,0}, f32[80,1]{1,0}, f32[80,64,28672]{2,1,0}, f32[80,1024]{1,0}, f32[80,1]{1,0}, /*index=40*/f32[80,1024]{1,0}, f32[80,1]{1,0}, f32[80,64,28672]{2,1,0}, f32[80,1024]{1,0}, f32[80,1]{1,0}, /*index=45*/f32[80,1024]{1,0}, f32[80,1]{1,0}, f32[80,28672,64]{2,1,0}, f32[80,1024]{1,0}, f32[80,1]{1,0}) tuple(%add.183, %sharding_constraint.50, %dynamic-update-slice.63, %get-tuple-element.255, %get-tuple-element.256, /*index=5*/%get-tuple-element.257, %get-tuple-element.258, %get-tuple-element.259, %get-tuple-element.260, %get-tuple-element.261, /*index=10*/%get-tuple-element.262, %get-tuple-element.263, %get-tuple-element.264, %get-tuple-element.265, %get-tuple-element.266, /*index=15*/%get-tuple-element.267, %get-tuple-element.268, %get-tuple-element.269, %get-tuple-element.270, %get-tuple-element.271, /*index=20*/%get-tuple-element.272, %get-tuple-element.273, %get-tuple-element.274, %get-tuple-element.275, %get-tuple-element.276, /*index=25*/%get-tuple-element.277, %get-tuple-element.278, %get-tuple-element.279, %get-tuple-element.280, %get-tuple-element.285, /*index=30*/%get-tuple-element.286, %get-tuple-element.287, %get-tuple-element.288, %get-tuple-element.289, %get-tuple-element.290, /*index=35*/%get-tuple-element.291, %get-tuple-element.292, %get-tuple-element.293, %get-tuple-element.294, %get-tuple-element.295, /*index=40*/%get-tuple-element.296, %get-tuple-element.297, %get-tuple-element.298, %get-tuple-element.299, %get-tuple-element.300, /*index=45*/%get-tuple-element.301, %get-tuple-element.302, %get-tuple-element.303, %get-tuple-element.304, %get-tuple-element.305)
}

%region_21.959_spmd (param.42: (s32[], bf16[2,8192,8192], bf16[80,2,8192,8192], f32[80,8192], f32[80,1024], /*index=5*/f32[80,1], f32[80,64,64,128], f32[80,1024], f32[80,1], f32[2,8192,1,128], /*index=10*/s32[2,8192,64,128], f32[2,8192,1,128], f32[1,1,1,128], f32[80,1024], f32[80,1], /*index=15*/f32[80,64,8,128], f32[80,1024], f32[80,1], f32[2,8192,1,128], s32[2,8192,8,128], /*index=20*/f32[2,8192,1,128], f32[1,1,1,128], f32[80,1024], f32[80,1], f32[80,64,8,128], /*index=25*/f32[80,1024], f32[80,1], s32[2,1], s32[2,1], f32[80,1024], /*index=30*/f32[80,1], f32[80,64,128,64], f32[80,1024], f32[80,1], f32[80,8192], /*index=35*/f32[80,1024], f32[80,1], f32[80,64,28672], f32[80,1024], f32[80,1], /*index=40*/f32[80,1024], f32[80,1], f32[80,64,28672], f32[80,1024], f32[80,1], /*index=45*/f32[80,1024], f32[80,1], f32[80,28672,64], f32[80,1024], f32[80,1])) -> pred[] {
  %param.42 = (s32[], bf16[2,8192,8192]{2,1,0}, bf16[80,2,8192,8192]{3,2,1,0}, f32[80,8192]{1,0}, f32[80,1024]{1,0}, /*index=5*/f32[80,1]{1,0}, f32[80,64,64,128]{3,2,1,0}, f32[80,1024]{1,0}, f32[80,1]{1,0}, f32[2,8192,1,128]{3,2,1,0}, /*index=10*/s32[2,8192,64,128]{3,2,1,0}, f32[2,8192,1,128]{3,2,1,0}, f32[1,1,1,128]{3,2,1,0}, f32[80,1024]{1,0}, f32[80,1]{1,0}, /*index=15*/f32[80,64,8,128]{3,2,1,0}, f32[80,1024]{1,0}, f32[80,1]{1,0}, f32[2,8192,1,128]{3,2,1,0}, s32[2,8192,8,128]{3,2,1,0}, /*index=20*/f32[2,8192,1,128]{3,2,1,0}, f32[1,1,1,128]{3,2,1,0}, f32[80,1024]{1,0}, f32[80,1]{1,0}, f32[80,64,8,128]{3,2,1,0}, /*index=25*/f32[80,1024]{1,0}, f32[80,1]{1,0}, s32[2,1]{1,0}, s32[2,1]{1,0}, f32[80,1024]{1,0}, /*index=30*/f32[80,1]{1,0}, f32[80,64,128,64]{3,2,1,0}, f32[80,1024]{1,0}, f32[80,1]{1,0}, f32[80,8192]{1,0}, /*index=35*/f32[80,1024]{1,0}, f32[80,1]{1,0}, f32[80,64,28672]{2,1,0}, f32[80,1024]{1,0}, f32[80,1]{1,0}, /*index=40*/f32[80,1024]{1,0}, f32[80,1]{1,0}, f32[80,64,28672]{2,1,0}, f32[80,1024]{1,0}, f32[80,1]{1,0}, /*index=45*/f32[80,1024]{1,0}, f32[80,1]{1,0}, f32[80,28672,64]{2,1,0}, f32[80,1024]{1,0}, f32[80,1]{1,0}) parameter(0)
  %get-tuple-element.252 = s32[] get-tuple-element(%param.42), index=0
  %constant.938 = s32[] constant(80)
  ROOT %lt.18 = pred[] compare(%get-tuple-element.252, %constant.938), direction=LT
}

%region_22.970 (reduce_sum.967: f32[], reduce_sum.968: f32[]) -> f32[] {
  %reduce_sum.967 = f32[] parameter(0)
  %reduce_sum.968 = f32[] parameter(1)
  ROOT %reduce_sum.969 = f32[] add(%reduce_sum.967, %reduce_sum.968)
}

%region_23.995 (reduce_max.992: f32[], reduce_max.993: f32[]) -> f32[] {
  %reduce_max.992 = f32[] parameter(0)
  %reduce_max.993 = f32[] parameter(1)
  ROOT %reduce_max.994 = f32[] maximum(%reduce_max.992, %reduce_max.993)
}

%region_24.1003 (reduce_sum.1000: f32[], reduce_sum.1001: f32[]) -> f32[] {
  %reduce_sum.1000 = f32[] parameter(0)
  %reduce_sum.1001 = f32[] parameter(1)
  ROOT %reduce_sum.1002 = f32[] add(%reduce_sum.1000, %reduce_sum.1001)
}

%region_25.1033 (reduce_sum.1030: f32[], reduce_sum.1031: f32[]) -> f32[] {
  %reduce_sum.1030 = f32[] parameter(0)
  %reduce_sum.1031 = f32[] parameter(1)
  ROOT %reduce_sum.1032 = f32[] add(%reduce_sum.1030, %reduce_sum.1031)
}

%region_27.1229 (reduce_sum.1226: f32[], reduce_sum.1227: f32[]) -> f32[] {
  %reduce_sum.1226 = f32[] parameter(0)
  %reduce_sum.1227 = f32[] parameter(1)
  ROOT %reduce_sum.1228 = f32[] add(%reduce_sum.1226, %reduce_sum.1227)
}

%region_28.1256 (reduce_max.1253: f32[], reduce_max.1254: f32[]) -> f32[] {
  %reduce_max.1253 = f32[] parameter(0)
  %reduce_max.1254 = f32[] parameter(1)
  ROOT %reduce_max.1255 = f32[] maximum(%reduce_max.1253, %reduce_max.1254)
}

%region_29.1287 (reduce_max.1284: f32[], reduce_max.1285: f32[]) -> f32[] {
  %reduce_max.1284 = f32[] parameter(0)
  %reduce_max.1285 = f32[] parameter(1)
  ROOT %reduce_max.1286 = f32[] maximum(%reduce_max.1284, %reduce_max.1285)
}

%region_30.1430 (reduce_max.1427: f32[], reduce_max.1428: f32[]) -> f32[] {
  %reduce_max.1427 = f32[] parameter(0)
  %reduce_max.1428 = f32[] parameter(1)
  ROOT %reduce_max.1429 = f32[] maximum(%reduce_max.1427, %reduce_max.1428)
}

%region_31.1457 (reduce_max.1454: f32[], reduce_max.1455: f32[]) -> f32[] {
  %reduce_max.1454 = f32[] parameter(0)
  %reduce_max.1455 = f32[] parameter(1)
  ROOT %reduce_max.1456 = f32[] maximum(%reduce_max.1454, %reduce_max.1455)
}

%region_32.1573 (reduce_max.1570: f32[], reduce_max.1571: f32[]) -> f32[] {
  %reduce_max.1570 = f32[] parameter(0)
  %reduce_max.1571 = f32[] parameter(1)
  ROOT %reduce_max.1572 = f32[] maximum(%reduce_max.1570, %reduce_max.1571)
}

%region_33.1599 (reduce_max.1596: f32[], reduce_max.1597: f32[]) -> f32[] {
  %reduce_max.1596 = f32[] parameter(0)
  %reduce_max.1597 = f32[] parameter(1)
  ROOT %reduce_max.1598 = f32[] maximum(%reduce_max.1596, %reduce_max.1597)
}

%region_34.1648 (reduce_sum.1645: s32[], reduce_sum.1646: s32[]) -> s32[] {
  %reduce_sum.1645 = s32[] parameter(0)
  %reduce_sum.1646 = s32[] parameter(1)
  ROOT %reduce_sum.1647 = s32[] add(%reduce_sum.1645, %reduce_sum.1646)
}

%region_35.1657 (reduce_sum.1654: s32[], reduce_sum.1655: s32[]) -> s32[] {
  %reduce_sum.1654 = s32[] parameter(0)
  %reduce_sum.1655 = s32[] parameter(1)
  ROOT %reduce_sum.1656 = s32[] add(%reduce_sum.1654, %reduce_sum.1655)
}

%region_36.1664 (reduce_max.1661: s32[], reduce_max.1662: s32[]) -> s32[] {
  %reduce_max.1661 = s32[] parameter(0)
  %reduce_max.1662 = s32[] parameter(1)
  ROOT %reduce_max.1663 = s32[] maximum(%reduce_max.1661, %reduce_max.1662)
}

%region_0.33._custom_call_lowering_rule.1 (reduce_window_sum.0: s32[], reduce_window_sum.3: s32[]) -> s32[] {
  %reduce_window_sum.0 = s32[] parameter(0)
  %reduce_window_sum.3 = s32[] parameter(1)
  ROOT %reduce_window_sum.4 = s32[] add(%reduce_window_sum.0, %reduce_window_sum.3)
}

%region_0.33._custom_call_lowering_rule.1.clone (reduce_window_sum.12: s32[], reduce_window_sum.13: s32[]) -> s32[] {
  %reduce_window_sum.12 = s32[] parameter(0)
  %reduce_window_sum.13 = s32[] parameter(1)
  ROOT %reduce_window_sum.14 = s32[] add(%reduce_window_sum.12, %reduce_window_sum.13)
}

%region_37.1676 (reduce_max.1673: f32[], reduce_max.1674: f32[]) -> f32[] {
  %reduce_max.1673 = f32[] parameter(0)
  %reduce_max.1674 = f32[] parameter(1)
  ROOT %reduce_max.1675 = f32[] maximum(%reduce_max.1673, %reduce_max.1674)
}

%region_38.1704 (reduce_max.1701: f32[], reduce_max.1702: f32[]) -> f32[] {
  %reduce_max.1701 = f32[] parameter(0)
  %reduce_max.1702 = f32[] parameter(1)
  ROOT %reduce_max.1703 = f32[] maximum(%reduce_max.1701, %reduce_max.1702)
}

%region_39.1739 (reduce_sum.1736: f32[], reduce_sum.1737: f32[]) -> f32[] {
  %reduce_sum.1736 = f32[] parameter(0)
  %reduce_sum.1737 = f32[] parameter(1)
  ROOT %reduce_sum.1738 = f32[] add(%reduce_sum.1736, %reduce_sum.1737)
}

%region_40.1759 (reduce_max.1756: f32[], reduce_max.1757: f32[]) -> f32[] {
  %reduce_max.1756 = f32[] parameter(0)
  %reduce_max.1757 = f32[] parameter(1)
  ROOT %reduce_max.1758 = f32[] maximum(%reduce_max.1756, %reduce_max.1757)
}

%region_41.1786 (reduce_max.1783: f32[], reduce_max.1784: f32[]) -> f32[] {
  %reduce_max.1783 = f32[] parameter(0)
  %reduce_max.1784 = f32[] parameter(1)
  ROOT %reduce_max.1785 = f32[] maximum(%reduce_max.1783, %reduce_max.1784)
}

%region_42.1827 (reduce_max.1824: f32[], reduce_max.1825: f32[]) -> f32[] {
  %reduce_max.1824 = f32[] parameter(0)
  %reduce_max.1825 = f32[] parameter(1)
  ROOT %reduce_max.1826 = f32[] maximum(%reduce_max.1824, %reduce_max.1825)
}

%region_43.1857 (reduce_max.1854: f32[], reduce_max.1855: f32[]) -> f32[] {
  %reduce_max.1854 = f32[] parameter(0)
  %reduce_max.1855 = f32[] parameter(1)
  ROOT %reduce_max.1856 = f32[] maximum(%reduce_max.1854, %reduce_max.1855)
}

%region_44.1891 (reduce_max.1888: f32[], reduce_max.1889: f32[]) -> f32[] {
  %reduce_max.1888 = f32[] parameter(0)
  %reduce_max.1889 = f32[] parameter(1)
  ROOT %reduce_max.1890 = f32[] maximum(%reduce_max.1888, %reduce_max.1889)
}

%region_45.1918 (reduce_max.1915: f32[], reduce_max.1916: f32[]) -> f32[] {
  %reduce_max.1915 = f32[] parameter(0)
  %reduce_max.1916 = f32[] parameter(1)
  ROOT %reduce_max.1917 = f32[] maximum(%reduce_max.1915, %reduce_max.1916)
}

%region_46.1949 (reduce_max.1946: f32[], reduce_max.1947: f32[]) -> f32[] {
  %reduce_max.1946 = f32[] parameter(0)
  %reduce_max.1947 = f32[] parameter(1)
  ROOT %reduce_max.1948 = f32[] maximum(%reduce_max.1946, %reduce_max.1947)
}

%region_47.1986 (reduce_max.1983: f32[], reduce_max.1984: f32[]) -> f32[] {
  %reduce_max.1983 = f32[] parameter(0)
  %reduce_max.1984 = f32[] parameter(1)
  ROOT %reduce_max.1985 = f32[] maximum(%reduce_max.1983, %reduce_max.1984)
}

%region_48.2025 (reduce_sum.2022: f32[], reduce_sum.2023: f32[]) -> f32[] {
  %reduce_sum.2022 = f32[] parameter(0)
  %reduce_sum.2023 = f32[] parameter(1)
  ROOT %reduce_sum.2024 = f32[] add(%reduce_sum.2022, %reduce_sum.2023)
}

%region_49.2049 (reduce_max.2046: f32[], reduce_max.2047: f32[]) -> f32[] {
  %reduce_max.2046 = f32[] parameter(0)
  %reduce_max.2047 = f32[] parameter(1)
  ROOT %reduce_max.2048 = f32[] maximum(%reduce_max.2046, %reduce_max.2047)
}

%region_50.2086 (reduce_max.2083: f32[], reduce_max.2084: f32[]) -> f32[] {
  %reduce_max.2083 = f32[] parameter(0)
  %reduce_max.2084 = f32[] parameter(1)
  ROOT %reduce_max.2085 = f32[] maximum(%reduce_max.2083, %reduce_max.2084)
}

%region_51.2149 (reduce_max.2146: f32[], reduce_max.2147: f32[]) -> f32[] {
  %reduce_max.2146 = f32[] parameter(0)
  %reduce_max.2147 = f32[] parameter(1)
  ROOT %reduce_max.2148 = f32[] maximum(%reduce_max.2146, %reduce_max.2147)
}

%region_52.2213 (reduce_max.2210: f32[], reduce_max.2211: f32[]) -> f32[] {
  %reduce_max.2210 = f32[] parameter(0)
  %reduce_max.2211 = f32[] parameter(1)
  ROOT %reduce_max.2212 = f32[] maximum(%reduce_max.2210, %reduce_max.2211)
}

%region_53.2254 (reduce_sum.2251: f32[], reduce_sum.2252: f32[]) -> f32[] {
  %reduce_sum.2251 = f32[] parameter(0)
  %reduce_sum.2252 = f32[] parameter(1)
  ROOT %reduce_sum.2253 = f32[] add(%reduce_sum.2251, %reduce_sum.2252)
}

%add.clone (x.1: bf16[], y.1: bf16[]) -> bf16[] {
  %x.1 = bf16[] parameter(0)
  %y.1 = bf16[] parameter(1)
  ROOT %add.195 = bf16[] add(%x.1, %y.1)
}

%add.1.clone (x.3: bf16[], y.3: bf16[]) -> bf16[] {
  %x.3 = bf16[] parameter(0)
  %y.3 = bf16[] parameter(1)
  ROOT %add.197 = bf16[] add(%x.3, %y.3)
}

%add.2.clone (x.5: bf16[], y.5: bf16[]) -> bf16[] {
  %x.5 = bf16[] parameter(0)
  %y.5 = bf16[] parameter(1)
  ROOT %add.199 = bf16[] add(%x.5, %y.5)
}

%add.3.clone (x.7: bf16[], y.7: bf16[]) -> bf16[] {
  %x.7 = bf16[] parameter(0)
  %y.7 = bf16[] parameter(1)
  ROOT %add.201 = bf16[] add(%x.7, %y.7)
}

%region_54.2293 (reduce_max.2290: f32[], reduce_max.2291: f32[]) -> f32[] {
  %reduce_max.2290 = f32[] parameter(0)
  %reduce_max.2291 = f32[] parameter(1)
  ROOT %reduce_max.2292 = f32[] maximum(%reduce_max.2290, %reduce_max.2291)
}

%add.4.clone (x.9: bf16[], y.9: bf16[]) -> bf16[] {
  %x.9 = bf16[] parameter(0)
  %y.9 = bf16[] parameter(1)
  ROOT %add.204 = bf16[] add(%x.9, %y.9)
}

%add.5.clone (x.11: bf16[], y.11: bf16[]) -> bf16[] {
  %x.11 = bf16[] parameter(0)
  %y.11 = bf16[] parameter(1)
  ROOT %add.206 = bf16[] add(%x.11, %y.11)
}

%region_55.2327 (reduce_sum.2324: bf16[], reduce_sum.2325: bf16[]) -> bf16[] {
  %reduce_sum.2324 = bf16[] parameter(0)
  %reduce_sum.2325 = bf16[] parameter(1)
  ROOT %reduce_sum.2326 = bf16[] add(%reduce_sum.2324, %reduce_sum.2325)
}

%region_55.2327.clone (reduce_sum.361: bf16[], reduce_sum.362: bf16[]) -> bf16[] {
  %reduce_sum.361 = bf16[] parameter(0)
  %reduce_sum.362 = bf16[] parameter(1)
  ROOT %reduce_sum.363 = bf16[] add(%reduce_sum.361, %reduce_sum.362)
}

%region_56.2336 (reduce_sum.2333: bf16[], reduce_sum.2334: bf16[]) -> bf16[] {
  %reduce_sum.2333 = bf16[] parameter(0)
  %reduce_sum.2334 = bf16[] parameter(1)
  ROOT %reduce_sum.2335 = bf16[] add(%reduce_sum.2333, %reduce_sum.2334)
}

%region_56.2336.clone (reduce_sum.364: bf16[], reduce_sum.365: bf16[]) -> bf16[] {
  %reduce_sum.364 = bf16[] parameter(0)
  %reduce_sum.365 = bf16[] parameter(1)
  ROOT %reduce_sum.366 = bf16[] add(%reduce_sum.364, %reduce_sum.365)
}

%add.6.clone (x.13: bf16[], y.13: bf16[]) -> bf16[] {
  %x.13 = bf16[] parameter(0)
  %y.13 = bf16[] parameter(1)
  ROOT %add.208 = bf16[] add(%x.13, %y.13)
}

%add.7.clone (x.15: bf16[], y.15: bf16[]) -> bf16[] {
  %x.15 = bf16[] parameter(0)
  %y.15 = bf16[] parameter(1)
  ROOT %add.210 = bf16[] add(%x.15, %y.15)
}

%add.8.clone (x.17: bf16[], y.17: bf16[]) -> bf16[] {
  %x.17 = bf16[] parameter(0)
  %y.17 = bf16[] parameter(1)
  ROOT %add.212 = bf16[] add(%x.17, %y.17)
}

%add.9.clone (x.19: bf16[], y.19: bf16[]) -> bf16[] {
  %x.19 = bf16[] parameter(0)
  %y.19 = bf16[] parameter(1)
  ROOT %add.214 = bf16[] add(%x.19, %y.19)
}

%add.10.clone (x.21: bf16[], y.21: bf16[]) -> bf16[] {
  %x.21 = bf16[] parameter(0)
  %y.21 = bf16[] parameter(1)
  ROOT %add.216 = bf16[] add(%x.21, %y.21)
}

%add.11.clone (x.23: bf16[], y.23: bf16[]) -> bf16[] {
  %x.23 = bf16[] parameter(0)
  %y.23 = bf16[] parameter(1)
  ROOT %add.218 = bf16[] add(%x.23, %y.23)
}

%add.12.clone (x.25: bf16[], y.25: bf16[]) -> bf16[] {
  %x.25 = bf16[] parameter(0)
  %y.25 = bf16[] parameter(1)
  ROOT %add.220 = bf16[] add(%x.25, %y.25)
}

%add.13.clone (x.27: bf16[], y.27: bf16[]) -> bf16[] {
  %x.27 = bf16[] parameter(0)
  %y.27 = bf16[] parameter(1)
  ROOT %add.222 = bf16[] add(%x.27, %y.27)
}

%region_57.2392 (reduce_max.2389: bf16[], reduce_max.2390: bf16[]) -> bf16[] {
  %reduce_max.2389 = bf16[] parameter(0)
  %reduce_max.2390 = bf16[] parameter(1)
  ROOT %reduce_max.2391 = bf16[] maximum(%reduce_max.2389, %reduce_max.2390)
}

%region_57.2392.clone (reduce_max.72: bf16[], reduce_max.73: bf16[]) -> bf16[] {
  %reduce_max.72 = bf16[] parameter(0)
  %reduce_max.73 = bf16[] parameter(1)
  ROOT %reduce_max.74 = bf16[] maximum(%reduce_max.72, %reduce_max.73)
}

%region_58.2410 (reduce_max.2407: bf16[], reduce_max.2408: bf16[]) -> bf16[] {
  %reduce_max.2407 = bf16[] parameter(0)
  %reduce_max.2408 = bf16[] parameter(1)
  ROOT %reduce_max.2409 = bf16[] maximum(%reduce_max.2407, %reduce_max.2408)
}

%region_58.2410.clone (reduce_max.75: bf16[], reduce_max.76: bf16[]) -> bf16[] {
  %reduce_max.75 = bf16[] parameter(0)
  %reduce_max.76 = bf16[] parameter(1)
  ROOT %reduce_max.77 = bf16[] maximum(%reduce_max.75, %reduce_max.76)
}

%region_59.2428 (reduce_max.2425: bf16[], reduce_max.2426: bf16[]) -> bf16[] {
  %reduce_max.2425 = bf16[] parameter(0)
  %reduce_max.2426 = bf16[] parameter(1)
  ROOT %reduce_max.2427 = bf16[] maximum(%reduce_max.2425, %reduce_max.2426)
}

%region_59.2428.clone (reduce_max.78: bf16[], reduce_max.79: bf16[]) -> bf16[] {
  %reduce_max.78 = bf16[] parameter(0)
  %reduce_max.79 = bf16[] parameter(1)
  ROOT %reduce_max.80 = bf16[] maximum(%reduce_max.78, %reduce_max.79)
}

%region_60.2446.clone (reduce_max.81: bf16[], reduce_max.82: bf16[]) -> bf16[] {
  %reduce_max.81 = bf16[] parameter(0)
  %reduce_max.82 = bf16[] parameter(1)
  ROOT %reduce_max.83 = bf16[] maximum(%reduce_max.81, %reduce_max.82)
}

%region_61.2464 (reduce_max.2461: bf16[], reduce_max.64: bf16[]) -> bf16[] {
  %reduce_max.2461 = bf16[] parameter(0)
  %reduce_max.64 = bf16[] parameter(1)
  ROOT %reduce_max.65 = bf16[] maximum(%reduce_max.2461, %reduce_max.64)
}

%region_61.2464.clone (reduce_max.84: bf16[], reduce_max.85: bf16[]) -> bf16[] {
  %reduce_max.84 = bf16[] parameter(0)
  %reduce_max.85 = bf16[] parameter(1)
  ROOT %reduce_max.86 = bf16[] maximum(%reduce_max.84, %reduce_max.85)
}

%region_62.2482 (reduce_max.2479: bf16[], reduce_max.66: bf16[]) -> bf16[] {
  %reduce_max.2479 = bf16[] parameter(0)
  %reduce_max.66 = bf16[] parameter(1)
  ROOT %reduce_max.2481 = bf16[] maximum(%reduce_max.2479, %reduce_max.66)
}

%region_62.2482.clone (reduce_max.87: bf16[], reduce_max.88: bf16[]) -> bf16[] {
  %reduce_max.87 = bf16[] parameter(0)
  %reduce_max.88 = bf16[] parameter(1)
  ROOT %reduce_max.89 = bf16[] maximum(%reduce_max.87, %reduce_max.88)
}

%region_63.2500 (reduce_max.2497: bf16[], reduce_max.2498: bf16[]) -> bf16[] {
  %reduce_max.2497 = bf16[] parameter(0)
  %reduce_max.2498 = bf16[] parameter(1)
  ROOT %reduce_max.2499 = bf16[] maximum(%reduce_max.2497, %reduce_max.2498)
}

%region_63.2500.clone (reduce_max.90: bf16[], reduce_max.91: bf16[]) -> bf16[] {
  %reduce_max.90 = bf16[] parameter(0)
  %reduce_max.91 = bf16[] parameter(1)
  ROOT %reduce_max.92 = bf16[] maximum(%reduce_max.90, %reduce_max.91)
}

%region_64.2518 (reduce_max.2515: bf16[], reduce_max.2516: bf16[]) -> bf16[] {
  %reduce_max.2515 = bf16[] parameter(0)
  %reduce_max.2516 = bf16[] parameter(1)
  ROOT %reduce_max.2517 = bf16[] maximum(%reduce_max.2515, %reduce_max.2516)
}

%region_64.2518.clone (reduce_max.93: bf16[], reduce_max.94: bf16[]) -> bf16[] {
  %reduce_max.93 = bf16[] parameter(0)
  %reduce_max.94 = bf16[] parameter(1)
  ROOT %reduce_max.95 = bf16[] maximum(%reduce_max.93, %reduce_max.94)
}

%region_65.2536 (reduce_max.2533: bf16[], reduce_max.2534: bf16[]) -> bf16[] {
  %reduce_max.2533 = bf16[] parameter(0)
  %reduce_max.2534 = bf16[] parameter(1)
  ROOT %reduce_max.2535 = bf16[] maximum(%reduce_max.2533, %reduce_max.2534)
}

%region_65.2536.clone (reduce_max.96: bf16[], reduce_max.97: bf16[]) -> bf16[] {
  %reduce_max.96 = bf16[] parameter(0)
  %reduce_max.97 = bf16[] parameter(1)
  ROOT %reduce_max.98 = bf16[] maximum(%reduce_max.96, %reduce_max.97)
}

%region_66.2554 (reduce_max.2551: bf16[], reduce_max.2552: bf16[]) -> bf16[] {
  %reduce_max.2551 = bf16[] parameter(0)
  %reduce_max.2552 = bf16[] parameter(1)
  ROOT %reduce_max.2553 = bf16[] maximum(%reduce_max.2551, %reduce_max.2552)
}

%region_66.2554.clone (reduce_max.99: bf16[], reduce_max.100: bf16[]) -> bf16[] {
  %reduce_max.99 = bf16[] parameter(0)
  %reduce_max.100 = bf16[] parameter(1)
  ROOT %reduce_max.101 = bf16[] maximum(%reduce_max.99, %reduce_max.100)
}

%region_67.2572 (reduce_max.2569: bf16[], reduce_max.2570: bf16[]) -> bf16[] {
  %reduce_max.2569 = bf16[] parameter(0)
  %reduce_max.2570 = bf16[] parameter(1)
  ROOT %reduce_max.2571 = bf16[] maximum(%reduce_max.2569, %reduce_max.2570)
}

%region_67.2572.clone (reduce_max.102: bf16[], reduce_max.103: bf16[]) -> bf16[] {
  %reduce_max.102 = bf16[] parameter(0)
  %reduce_max.103 = bf16[] parameter(1)
  ROOT %reduce_max.104 = bf16[] maximum(%reduce_max.102, %reduce_max.103)
}

%region_68.2590 (reduce_max.2587: bf16[], reduce_max.2588: bf16[]) -> bf16[] {
  %reduce_max.2587 = bf16[] parameter(0)
  %reduce_max.2588 = bf16[] parameter(1)
  ROOT %reduce_max.2589 = bf16[] maximum(%reduce_max.2587, %reduce_max.2588)
}

%region_68.2590.clone (reduce_max.105: bf16[], reduce_max.106: bf16[]) -> bf16[] {
  %reduce_max.105 = bf16[] parameter(0)
  %reduce_max.106 = bf16[] parameter(1)
  ROOT %reduce_max.107 = bf16[] maximum(%reduce_max.105, %reduce_max.106)
}

%region_69.2608 (reduce_max.2605: bf16[], reduce_max.2606: bf16[]) -> bf16[] {
  %reduce_max.2605 = bf16[] parameter(0)
  %reduce_max.2606 = bf16[] parameter(1)
  ROOT %reduce_max.2607 = bf16[] maximum(%reduce_max.2605, %reduce_max.2606)
}

%region_69.2608.clone (reduce_max.108: bf16[], reduce_max.109: bf16[]) -> bf16[] {
  %reduce_max.108 = bf16[] parameter(0)
  %reduce_max.109 = bf16[] parameter(1)
  ROOT %reduce_max.110 = bf16[] maximum(%reduce_max.108, %reduce_max.109)
}

%region_70.2626 (reduce_max.2623: bf16[], reduce_max.2624: bf16[]) -> bf16[] {
  %reduce_max.2623 = bf16[] parameter(0)
  %reduce_max.2624 = bf16[] parameter(1)
  ROOT %reduce_max.2625 = bf16[] maximum(%reduce_max.2623, %reduce_max.2624)
}

%region_70.2626.clone (reduce_max.111: bf16[], reduce_max.112: bf16[]) -> bf16[] {
  %reduce_max.111 = bf16[] parameter(0)
  %reduce_max.112 = bf16[] parameter(1)
  ROOT %reduce_max.113 = bf16[] maximum(%reduce_max.111, %reduce_max.112)
}

%region_71.2644 (reduce_max.67: bf16[], reduce_max.68: bf16[]) -> bf16[] {
  %reduce_max.67 = bf16[] parameter(0)
  %reduce_max.68 = bf16[] parameter(1)
  ROOT %reduce_max.2643 = bf16[] maximum(%reduce_max.67, %reduce_max.68)
}

%region_71.2644.clone (reduce_max.114: bf16[], reduce_max.115: bf16[]) -> bf16[] {
  %reduce_max.114 = bf16[] parameter(0)
  %reduce_max.115 = bf16[] parameter(1)
  ROOT %reduce_max.116 = bf16[] maximum(%reduce_max.114, %reduce_max.115)
}

%region_72.2662.clone (reduce_max.117: bf16[], reduce_max.118: bf16[]) -> bf16[] {
  %reduce_max.117 = bf16[] parameter(0)
  %reduce_max.118 = bf16[] parameter(1)
  ROOT %reduce_max.119 = bf16[] maximum(%reduce_max.117, %reduce_max.118)
}

%region_73.2680 (reduce_max.2677: bf16[], reduce_max.2678: bf16[]) -> bf16[] {
  %reduce_max.2677 = bf16[] parameter(0)
  %reduce_max.2678 = bf16[] parameter(1)
  ROOT %reduce_max.2679 = bf16[] maximum(%reduce_max.2677, %reduce_max.2678)
}

%region_73.2680.clone (reduce_max.120: bf16[], reduce_max.121: bf16[]) -> bf16[] {
  %reduce_max.120 = bf16[] parameter(0)
  %reduce_max.121 = bf16[] parameter(1)
  ROOT %reduce_max.122 = bf16[] maximum(%reduce_max.120, %reduce_max.121)
}

%region_74.2698 (reduce_max.2695: bf16[], reduce_max.2696: bf16[]) -> bf16[] {
  %reduce_max.2695 = bf16[] parameter(0)
  %reduce_max.2696 = bf16[] parameter(1)
  ROOT %reduce_max.2697 = bf16[] maximum(%reduce_max.2695, %reduce_max.2696)
}

%region_74.2698.clone (reduce_max.123: bf16[], reduce_max.124: bf16[]) -> bf16[] {
  %reduce_max.123 = bf16[] parameter(0)
  %reduce_max.124 = bf16[] parameter(1)
  ROOT %reduce_max.125 = bf16[] maximum(%reduce_max.123, %reduce_max.124)
}

%region_75.2716.clone (reduce_max.126: bf16[], reduce_max.127: bf16[]) -> bf16[] {
  %reduce_max.126 = bf16[] parameter(0)
  %reduce_max.127 = bf16[] parameter(1)
  ROOT %reduce_max.128 = bf16[] maximum(%reduce_max.126, %reduce_max.127)
}

%region_76.2734 (reduce_max.2731: bf16[], reduce_max.2732: bf16[]) -> bf16[] {
  %reduce_max.2731 = bf16[] parameter(0)
  %reduce_max.2732 = bf16[] parameter(1)
  ROOT %reduce_max.2733 = bf16[] maximum(%reduce_max.2731, %reduce_max.2732)
}

%region_76.2734.clone (reduce_max.129: bf16[], reduce_max.130: bf16[]) -> bf16[] {
  %reduce_max.129 = bf16[] parameter(0)
  %reduce_max.130 = bf16[] parameter(1)
  ROOT %reduce_max.131 = bf16[] maximum(%reduce_max.129, %reduce_max.130)
}

%region_77.2752 (reduce_max.2749: bf16[], reduce_max.2750: bf16[]) -> bf16[] {
  %reduce_max.2749 = bf16[] parameter(0)
  %reduce_max.2750 = bf16[] parameter(1)
  ROOT %reduce_max.2751 = bf16[] maximum(%reduce_max.2749, %reduce_max.2750)
}

%region_77.2752.clone (reduce_max.132: bf16[], reduce_max.133: bf16[]) -> bf16[] {
  %reduce_max.132 = bf16[] parameter(0)
  %reduce_max.133 = bf16[] parameter(1)
  ROOT %reduce_max.134 = bf16[] maximum(%reduce_max.132, %reduce_max.133)
}

%region_26.2761_spmd (param.45: (s32[], bf16[2,8192,8192], f32[80,64,28672], f32[80,64,28672], f32[80,28672,64], /*index=5*/f32[80,8192], f32[80,8192], f32[80,64,8,128], f32[80,64,128,64], f32[80,64,64,128], /*index=10*/f32[80,64,8,128], f32[80,1024], f32[80,1], f32[80,1024], f32[80,1], /*index=15*/f32[80,1024], f32[80,1], f32[80,1024], f32[80,1], f32[80,1024], /*index=20*/f32[80,1], f32[80,1024], f32[80,1], f32[80,1024], f32[80,1], /*index=25*/f32[80,1024], f32[80,1], f32[80,1024], f32[80,1], f32[80,1024], /*index=30*/f32[80,1], f32[80,1024], f32[80,1], f32[80,1024], f32[80,1], /*index=35*/f32[80,1024], f32[80,1], f32[80,1024], f32[80,1], f32[80,1024], /*index=40*/f32[80,1], f32[80,1024], f32[80,1], f32[80,1024], f32[80,1], /*index=45*/f32[80,1024], f32[80,1], f32[80,1024], f32[80,1], f32[80,1024], /*index=50*/f32[80,1], f32[80,1024], f32[80,1], bf16[80,2,8192,8192], f32[80,8192], /*index=55*/f32[80,1024], f32[80,1], f32[80,64,64,128], f32[80,1024], f32[80,1], /*index=60*/s32[2,8192], f32[80,1024], f32[80,1], f32[80,64,8,128], f32[80,1024], /*index=65*/f32[80,1], f32[80,1024], f32[80,1], f32[80,64,8,128], f32[80,1024], /*index=70*/f32[80,1], s32[2,8192], f32[80,1024], f32[80,1], f32[80,64,128,64], /*index=75*/f32[80,1024], f32[80,1], f32[80,8192], f32[80,1024], f32[80,1], /*index=80*/f32[80,64,28672], f32[80,1024], f32[80,1], f32[80,1024], f32[80,1], /*index=85*/f32[80,28672,64], f32[80,1024], f32[80,1], f32[80,1024], f32[80,1], /*index=90*/f32[80,64,28672], f32[80,1024], f32[80,1], f32[80,1024], f32[80,1], /*index=95*/f32[80,1024], f32[80,1], f32[80,1024], f32[80,1], f32[80,1024], /*index=100*/f32[80,1], f32[80,1024], f32[80,1], f32[80,1024], f32[80,1], /*index=105*/f32[80,1024], f32[80,1])) -> (s32[], bf16[2,8192,8192], f32[80,64,28672], f32[80,64,28672], f32[80,28672,64], /*index=5*/f32[80,8192], f32[80,8192], f32[80,64,8,128], f32[80,64,128,64], f32[80,64,64,128], /*index=10*/f32[80,64,8,128], f32[80,1024], f32[80,1], f32[80,1024], f32[80,1], /*index=15*/f32[80,1024], f32[80,1], f32[80,1024], f32[80,1], f32[80,1024], /*index=20*/f32[80,1], f32[80,1024], f32[80,1], f32[80,1024], f32[80,1], /*index=25*/f32[80,1024], f32[80,1], f32[80,1024], f32[80,1], f32[80,1024], /*index=30*/f32[80,1], f32[80,1024], f32[80,1], f32[80,1024], f32[80,1], /*index=35*/f32[80,1024], f32[80,1], f32[80,1024], f32[80,1], f32[80,1024], /*index=40*/f32[80,1], f32[80,1024], f32[80,1], f32[80,1024], f32[80,1], /*index=45*/f32[80,1024], f32[80,1], f32[80,1024], f32[80,1], f32[80,1024], /*index=50*/f32[80,1], f32[80,1024], f32[80,1], bf16[80,2,8192,8192], f32[80,8192], /*index=55*/f32[80,1024], f32[80,1], f32[80,64,64,128], f32[80,1024], f32[80,1], /*index=60*/s32[2,8192], f32[80,1024], f32[80,1], f32[80,64,8,128], f32[80,1024], /*index=65*/f32[80,1], f32[80,1024], f32[80,1], f32[80,64,8,128], f32[80,1024], /*index=70*/f32[80,1], s32[2,8192], f32[80,1024], f32[80,1], f32[80,64,128,64], /*index=75*/f32[80,1024], f32[80,1], f32[80,8192], f32[80,1024], f32[80,1], /*index=80*/f32[80,64,28672], f32[80,1024], f32[80,1], f32[80,1024], f32[80,1], /*index=85*/f32[80,28672,64], f32[80,1024], f32[80,1], f32[80,1024], f32[80,1], /*index=90*/f32[80,64,28672], f32[80,1024], f32[80,1], f32[80,1024], f32[80,1], /*index=95*/f32[80,1024], f32[80,1], f32[80,1024], f32[80,1], f32[80,1024], /*index=100*/f32[80,1], f32[80,1024], f32[80,1], f32[80,1024], f32[80,1], /*index=105*/f32[80,1024], f32[80,1]) {
  %param.45 = (s32[], bf16[2,8192,8192]{2,1,0}, f32[80,64,28672]{2,1,0}, f32[80,64,28672]{2,1,0}, f32[80,28672,64]{2,1,0}, /*index=5*/f32[80,8192]{1,0}, f32[80,8192]{1,0}, f32[80,64,8,128]{3,2,1,0}, f32[80,64,128,64]{3,2,1,0}, f32[80,64,64,128]{3,2,1,0}, /*index=10*/f32[80,64,8,128]{3,2,1,0}, f32[80,1024]{1,0}, f32[80,1]{1,0}, f32[80,1024]{1,0}, f32[80,1]{1,0}, /*index=15*/f32[80,1024]{1,0}, f32[80,1]{1,0}, f32[80,1024]{1,0}, f32[80,1]{1,0}, f32[80,1024]{1,0}, /*index=20*/f32[80,1]{1,0}, f32[80,1024]{1,0}, f32[80,1]{1,0}, f32[80,1024]{1,0}, f32[80,1]{1,0}, /*index=25*/f32[80,1024]{1,0}, f32[80,1]{1,0}, f32[80,1024]{1,0}, f32[80,1]{1,0}, f32[80,1024]{1,0}, /*index=30*/f32[80,1]{1,0}, f32[80,1024]{1,0}, f32[80,1]{1,0}, f32[80,1024]{1,0}, f32[80,1]{1,0}, /*index=35*/f32[80,1024]{1,0}, f32[80,1]{1,0}, f32[80,1024]{1,0}, f32[80,1]{1,0}, f32[80,1024]{1,0}, /*index=40*/f32[80,1]{1,0}, f32[80,1024]{1,0}, f32[80,1]{1,0}, f32[80,1024]{1,0}, f32[80,1]{1,0}, /*index=45*/f32[80,1024]{1,0}, f32[80,1]{1,0}, f32[80,1024]{1,0}, f32[80,1]{1,0}, f32[80,1024]{1,0}, /*index=50*/f32[80,1]{1,0}, f32[80,1024]{1,0}, f32[80,1]{1,0}, bf16[80,2,8192,8192]{3,2,1,0}, f32[80,8192]{1,0}, /*index=55*/f32[80,1024]{1,0}, f32[80,1]{1,0}, f32[80,64,64,128]{3,2,1,0}, f32[80,1024]{1,0}, f32[80,1]{1,0}, /*index=60*/s32[2,8192]{1,0}, f32[80,1024]{1,0}, f32[80,1]{1,0}, f32[80,64,8,128]{3,2,1,0}, f32[80,1024]{1,0}, /*index=65*/f32[80,1]{1,0}, f32[80,1024]{1,0}, f32[80,1]{1,0}, f32[80,64,8,128]{3,2,1,0}, f32[80,1024]{1,0}, /*index=70*/f32[80,1]{1,0}, s32[2,8192]{1,0}, f32[80,1024]{1,0}, f32[80,1]{1,0}, f32[80,64,128,64]{3,2,1,0}, /*index=75*/f32[80,1024]{1,0}, f32[80,1]{1,0}, f32[80,8192]{1,0}, f32[80,1024]{1,0}, f32[80,1]{1,0}, /*index=80*/f32[80,64,28672]{2,1,0}, f32[80,1024]{1,0}, f32[80,1]{1,0}, f32[80,1024]{1,0}, f32[80,1]{1,0}, /*index=85*/f32[80,28672,64]{2,1,0}, f32[80,1024]{1,0}, f32[80,1]{1,0}, f32[80,1024]{1,0}, f32[80,1]{1,0}, /*index=90*/f32[80,64,28672]{2,1,0}, f32[80,1024]{1,0}, f32[80,1]{1,0}, f32[80,1024]{1,0}, f32[80,1]{1,0}, /*index=95*/f32[80,1024]{1,0}, f32[80,1]{1,0}, f32[80,1024]{1,0}, f32[80,1]{1,0}, f32[80,1024]{1,0}, /*index=100*/f32[80,1]{1,0}, f32[80,1024]{1,0}, f32[80,1]{1,0}, f32[80,1024]{1,0}, f32[80,1]{1,0}, /*index=105*/f32[80,1024]{1,0}, f32[80,1]{1,0}) parameter(0)
  %get-tuple-element.308 = s32[] get-tuple-element(%param.45), index=0
  %constant.1060 = s32[] constant(1)
  %add.223 = s32[] add(%get-tuple-element.308, %constant.1060)
  %get-tuple-element.309 = bf16[2,8192,8192]{2,1,0} get-tuple-element(%param.45), index=1
  %sharding_constraint.51 = bf16[2,8192,8192]{2,1,0} copy(%get-tuple-element.309)
  %constant.1061 = bf16[] constant(-5.734e+04)
  %max.179 = bf16[2,8192,28672]{2,1,0} broadcast(%constant.1061), dimensions={}
  %constant.1062 = bf16[] constant(-448)
  %max.180 = bf16[2,8192,8192]{2,1,0} broadcast(%constant.1062), dimensions={}
  %get-tuple-element.310 = bf16[80,2,8192,8192]{3,2,1,0} get-tuple-element(%param.45), index=53
  %constant.1063 = s32[] constant(79)
  %sub.6 = s32[] subtract(%constant.1063, %get-tuple-element.308)
  %constant.1064 = s32[] constant(0)
  %dynamic-slice.143 = bf16[1,2,8192,8192]{3,2,1,0} dynamic-slice(%get-tuple-element.310, %sub.6, %constant.1064, %constant.1064, %constant.1064), dynamic_slice_sizes={1,2,8192,8192}
  %squeeze.2 = bf16[2,8192,8192]{2,1,0} reshape(%dynamic-slice.143)
  %sharding_constraint.52 = bf16[2,8192,8192]{2,1,0} copy(%squeeze.2)
  %max.181 = bf16[2,8192,64,128]{3,2,1,0} broadcast(%constant.1062), dimensions={}
  %convert_element_type.355 = f32[2,8192,8192]{2,1,0} convert(%sharding_constraint.52)
  %square.83 = f32[2,8192,8192]{2,1,0} multiply(%convert_element_type.355, %convert_element_type.355)
  %constant.1068 = f32[] constant(0)
  %reduce.104 = f32[2,8192]{1,0} reduce(%square.83, %constant.1068), dimensions={2}, to_apply=%region_27.1229
  %constant.1069 = f32[] constant(0.000122070312)
  %closed_call.2 = f32[2,8192]{1,0} broadcast(%constant.1069), dimensions={}
  %div.410 = f32[2,8192]{1,0} multiply(%reduce.104, %closed_call.2)
  %constant.1070 = f32[] constant(1e-05)
  %closed_call.3 = f32[2,8192]{1,0} broadcast(%constant.1070), dimensions={}
  %add.224 = f32[2,8192]{1,0} add(%div.410, %closed_call.3)
  %add.225 = f32[2,8192,1]{2,1,0} reshape(%add.224)
  %rsqrt.8 = f32[2,8192,1]{2,1,0} rsqrt(%add.225)
  %mul.324 = f32[2,8192]{1,0} reshape(%rsqrt.8)
  %mul.326 = f32[2,8192,8192]{2,1,0} broadcast(%mul.324), dimensions={0,1}
  %mul.328 = f32[2,8192,8192]{2,1,0} multiply(%convert_element_type.355, %mul.326)
  %convert_element_type.356 = bf16[2,8192,8192]{2,1,0} convert(%mul.328)
  %get-tuple-element.311 = f32[80,8192]{1,0} get-tuple-element(%param.45), index=54
  %dynamic_slice.37 = f32[1,8192]{1,0} dynamic-slice(%get-tuple-element.311, %sub.6, %constant.1064), dynamic_slice_sizes={1,8192}
  %convert_element_type.357 = bf16[1,8192]{1,0} convert(%dynamic_slice.37)
  %mul.329 = bf16[8192]{0} reshape(%convert_element_type.357)
  %mul.330 = bf16[2,8192,8192]{2,1,0} broadcast(%mul.329), dimensions={2}
  %mul.331 = bf16[2,8192,8192]{2,1,0} multiply(%convert_element_type.356, %mul.330)
  %sharding_constraint.53 = bf16[2,8192,8192]{2,1,0} copy(%mul.331)
  %sharding_constraint.54 = bf16[2,8192,8192]{2,1,0} copy(%sharding_constraint.53)
  %constant.1071 = f32[1]{0} constant({1})
  %get-tuple-element.362 = f32[80,1024]{1,0} get-tuple-element(%param.45), index=55
  %dynamic_slice.38 = f32[1,1024]{1,0} dynamic-slice(%get-tuple-element.362, %sub.6, %constant.1064), dynamic_slice_sizes={1,1024}
  %constant.1072 = f32[] constant(-inf)
  %reduce.105 = f32[] reduce(%dynamic_slice.38, %constant.1072), dimensions={0,1}, to_apply=%region_28.1256
  %is_finite.50 = pred[] is-finite(%reduce.105)
  %select_n.576 = pred[1]{0} reshape(%is_finite.50)
  %gt.51 = pred[] compare(%reduce.105, %constant.1068), direction=GT
  %select_n.577 = pred[1]{0} reshape(%gt.51)
  %constant.1073 = f32[] constant(448)
  %div.411 = f32[] divide(%constant.1073, %reduce.105)
  %broadcast_in_dim.432 = f32[1]{0} reshape(%div.411)
  %constant.1074 = f32[1,1]{1,0} constant({ {1} })
  %get-tuple-element.363 = f32[80,1]{1,0} get-tuple-element(%param.45), index=56
  %dynamic_slice.39 = f32[1,1]{1,0} dynamic-slice(%get-tuple-element.363, %sub.6, %constant.1064), dynamic_slice_sizes={1,1}
  %div.414 = f32[1,1]{1,0} divide(%constant.1074, %dynamic_slice.39)
  %div.415 = f32[1]{0} reshape(%div.414)
  %select_n.578 = f32[1]{0} select(%select_n.577, %broadcast_in_dim.432, %div.415)
  %select_n.579 = f32[1]{0} select(%select_n.576, %select_n.578, %div.415)
  %div.417 = f32[1]{0} divide(%constant.1071, %select_n.579)
  %convert_element_type.358 = bf16[1]{0} convert(%div.417)
  %convert_element_type.359 = bf16[] reshape(%convert_element_type.358)
  %broadcast_in_dim.433 = bf16[2,8192,8192]{2,1,0} broadcast(%convert_element_type.359), dimensions={}
  %div.418 = bf16[2,8192,8192]{2,1,0} divide(%sharding_constraint.54, %broadcast_in_dim.433)
  %constant.1075 = bf16[] constant(448)
  %min.193 = bf16[2,8192,8192]{2,1,0} broadcast(%constant.1075), dimensions={}
  %min.194 = bf16[2,8192,8192]{2,1,0} clamp(%max.180, %div.418, %min.193)
  %convert_element_type.360 = f8e4m3fn[2,8192,8192]{2,1,0} convert(%min.194)
  %max.182 = bf16[1,64,64,128]{3,2,1,0} broadcast(%constant.1062), dimensions={}
  %get-tuple-element.364 = f32[80,64,64,128]{3,2,1,0} get-tuple-element(%param.45), index=57
  %dynamic-slice.144 = f32[1,64,64,128]{3,2,1,0} dynamic-slice(%get-tuple-element.364, %sub.6, %constant.1064, %constant.1064, %constant.1064), dynamic_slice_sizes={1,64,64,128}
  %convert_element_type.361 = bf16[1,64,64,128]{3,2,1,0} convert(%dynamic-slice.144)
  %get-tuple-element.365 = f32[80,1024]{1,0} get-tuple-element(%param.45), index=58
  %dynamic_slice.40 = f32[1,1024]{1,0} dynamic-slice(%get-tuple-element.365, %sub.6, %constant.1064), dynamic_slice_sizes={1,1024}
  %reduce.106 = f32[] reduce(%dynamic_slice.40, %constant.1072), dimensions={0,1}, to_apply=%region_29.1287
  %is_finite.51 = pred[] is-finite(%reduce.106)
  %select_n.580 = pred[1]{0} reshape(%is_finite.51)
  %gt.52 = pred[] compare(%reduce.106, %constant.1068), direction=GT
  %select_n.583 = pred[1]{0} reshape(%gt.52)
  %div.419 = f32[] divide(%constant.1073, %reduce.106)
  %broadcast_in_dim.434 = f32[1]{0} reshape(%div.419)
  %get-tuple-element.366 = f32[80,1]{1,0} get-tuple-element(%param.45), index=59
  %dynamic_slice.41 = f32[1,1]{1,0} dynamic-slice(%get-tuple-element.366, %sub.6, %constant.1064), dynamic_slice_sizes={1,1}
  %div.421 = f32[1,1]{1,0} divide(%constant.1074, %dynamic_slice.41)
  %div.422 = f32[1]{0} reshape(%div.421)
  %select_n.584 = f32[1]{0} select(%select_n.583, %broadcast_in_dim.434, %div.422)
  %select_n.585 = f32[1]{0} select(%select_n.580, %select_n.584, %div.422)
  %div.423 = f32[1]{0} divide(%constant.1071, %select_n.585)
  %convert_element_type.363 = bf16[1]{0} convert(%div.423)
  %convert_element_type.364 = bf16[] reshape(%convert_element_type.363)
  %broadcast_in_dim.435 = bf16[1,64,64,128]{3,2,1,0} broadcast(%convert_element_type.364), dimensions={}
  %div.424 = bf16[1,64,64,128]{3,2,1,0} divide(%convert_element_type.361, %broadcast_in_dim.435)
  %min.195 = bf16[1,64,64,128]{3,2,1,0} broadcast(%constant.1075), dimensions={}
  %min.196 = bf16[1,64,64,128]{3,2,1,0} clamp(%max.182, %div.424, %min.195)
  %convert_element_type.365 = f8e4m3fn[1,64,64,128]{3,2,1,0} convert(%min.196)
  %convert_element_type.366 = f8e4m3fn[64,64,128]{2,1,0} reshape(%convert_element_type.365)
  %all-gather.8 = f8e4m3fn[8192,64,128]{2,1,0} all-gather(%convert_element_type.366), channel_id=12, replica_groups=[2,128]<=[256], dimensions={0}, use_global_device_ids=true
  %dot.12 = bf16[2,8192,64,128]{3,2,1,0} dot(%convert_element_type.360, %all-gather.8), lhs_contracting_dims={2}, rhs_contracting_dims={0}
  %mul.332 = f32[1]{0} multiply(%div.417, %div.423)
  %convert_element_type.367 = bf16[1]{0} convert(%mul.332)
  %convert_element_type.368 = bf16[] reshape(%convert_element_type.367)
  %broadcast_in_dim.436 = bf16[2,8192,64,128]{3,2,1,0} broadcast(%convert_element_type.368), dimensions={}
  %mul.333 = bf16[2,8192,64,128]{3,2,1,0} multiply(%dot.12, %broadcast_in_dim.436)
  %convert_element_type.371 = f32[2,8192,64,128]{3,2,1,0} convert(%mul.333)
  %get-tuple-element.367 = s32[2,8192]{1,0} get-tuple-element(%param.45), index=60
  %convert_element_type.373 = f32[2,8192]{1,0} convert(%get-tuple-element.367)
  %div.425 = f32[2,8192,1,128]{3,2,1,0} broadcast(%convert_element_type.373), dimensions={0,1}
  %constant.1079 = f32[] constant(1)
  %closed_call.4 = f32[128]{0} broadcast(%constant.1079), dimensions={}
  %constant.1080 = f32[] constant(6.28318548)
  %closed_call.5 = f32[128]{0} broadcast(%constant.1080), dimensions={}
  %constant.1081 = f32[] constant(500000)
  %closed_call.6 = f32[128]{0} broadcast(%constant.1081), dimensions={}
  %iota.20 = s32[64]{0} iota(), iota_dimension=0
  %constant.1082 = s32[] constant(2)
  %closed_call.7 = s32[64]{0} broadcast(%constant.1082), dimensions={}
  %mul.334 = s32[64]{0} multiply(%iota.20, %closed_call.7)
  %convert_element_type.374 = f32[64]{0} convert(%mul.334)
  %constant.1083 = f32[] constant(0.0078125)
  %closed_call.8 = f32[64]{0} broadcast(%constant.1083), dimensions={}
  %div.426 = f32[64]{0} multiply(%convert_element_type.374, %closed_call.8)
  %broadcast_in_dim.437 = f32[64,2]{1,0} broadcast(%div.426), dimensions={0}
  %reshape.1239 = f32[128]{0} reshape(%broadcast_in_dim.437)
  %pow.2 = f32[128]{0} power(%closed_call.6, %reshape.1239)
  %div.427 = f32[128]{0} multiply(%closed_call.5, %pow.2)
  %constant.1084 = f32[] constant(2048)
  %closed_call.9 = f32[128]{0} broadcast(%constant.1084), dimensions={}
  %lt.21 = pred[128]{0} compare(%div.427, %closed_call.9), direction=LT
  %convert_element_type.375 = s32[128]{0} convert(%lt.21)
  %closed_call.10 = s32[128]{0} broadcast(%constant.1060), dimensions={}
  %select_n.586 = pred[128]{0} compare(%convert_element_type.375, %closed_call.10), direction=LT
  %constant.1085 = f32[] constant(8192)
  %closed_call.11 = f32[128]{0} broadcast(%constant.1085), dimensions={}
  %gt.53 = pred[128]{0} compare(%div.427, %closed_call.11), direction=GT
  %convert_element_type.376 = s32[128]{0} convert(%gt.53)
  %select_n.587 = pred[128]{0} compare(%convert_element_type.376, %closed_call.10), direction=LT
  %pow.3 = f32[128]{0} negate(%reshape.1239)
  %pow.4 = f32[128]{0} power(%closed_call.6, %pow.3)
  %multiply.85 = f32[128]{0} multiply(%closed_call.11, %pow.4)
  %constant.1086 = f32[] constant(0.159154937)
  %closed_call.12 = f32[128]{0} broadcast(%constant.1086), dimensions={}
  %div.428 = f32[128]{0} multiply(%multiply.85, %closed_call.12)
  %constant.1087 = f32[] constant(-1)
  %closed_call.13 = f32[128]{0} broadcast(%constant.1087), dimensions={}
  %sub.7 = f32[128]{0} add(%div.428, %closed_call.13)
  %constant.1088 = f32[] constant(0.333333343)
  %closed_call.14 = f32[128]{0} broadcast(%constant.1088), dimensions={}
  %div.429 = f32[128]{0} multiply(%sub.7, %closed_call.14)
  %sub.8 = f32[128]{0} subtract(%closed_call.4, %div.429)
  %mul.335 = f32[128]{0} multiply(%sub.8, %pow.4)
  %constant.1089 = f32[] constant(0.125)
  %closed_call.15 = f32[128]{0} broadcast(%constant.1089), dimensions={}
  %div.430 = f32[128]{0} multiply(%mul.335, %closed_call.15)
  %mul.336 = f32[128]{0} multiply(%div.429, %pow.4)
  %add.227 = f32[128]{0} add(%div.430, %mul.336)
  %div.431 = f32[128]{0} multiply(%pow.4, %closed_call.15)
  %select_n.588 = f32[128]{0} select(%select_n.587, %add.227, %div.431)
  %select_n.589 = f32[128]{0} select(%select_n.586, %select_n.588, %pow.4)
  %div.432 = f32[128]{0} divide(%closed_call.4, %select_n.589)
  %div.433 = f32[2,8192,1,128]{3,2,1,0} broadcast(%div.432), dimensions={3}
  %div.434 = f32[2,8192,1,128]{3,2,1,0} divide(%div.425, %div.433)
  %cos.2 = f32[2,8192,1,128]{3,2,1,0} cosine(%div.434)
  %mul.337 = f32[2,8192,128]{2,1,0} reshape(%cos.2)
  %mul.338 = f32[2,8192,64,128]{3,2,1,0} broadcast(%mul.337), dimensions={0,1,3}
  %mul.339 = f32[2,8192,64,128]{3,2,1,0} multiply(%convert_element_type.371, %mul.338)
  %iota.21 = s32[128]{0} iota(), iota_dimension=0
  %rem.16 = s32[128]{0} and(%iota.21, %closed_call.10)
  %jit_remainder_.0 = s32[128]{0} broadcast(%constant.1064), dimensions={}
  %lt.22 = pred[128]{0} compare(%rem.16, %jit_remainder_.0), direction=LT
  %ne.28 = pred[128]{0} compare(%rem.16, %jit_remainder_.0), direction=NE
  %and.81 = pred[128]{0} and(%lt.22, %ne.28)
  %add.228 = s32[128]{0} broadcast(%constant.1082), dimensions={}
  %add.229 = s32[128]{0} add(%rem.16, %add.228)
  %select_n.590 = s32[128]{0} select(%and.81, %add.229, %rem.16)
  %select_n.591 = pred[128]{0} compare(%select_n.590, %closed_call.10), direction=LT
  %reshape.1240 = pred[2,8192,64,128]{3,2,1,0} broadcast(%select_n.591), dimensions={3}
  %slice.400 = bf16[2,8192,64,127]{3,2,1,0} slice(%mul.333), slice={[0:2], [0:8192], [0:64], [1:128]}
  %slice.401 = bf16[2,8192,64,1]{3,2,1,0} slice(%mul.333), slice={[0:2], [0:8192], [0:64], [0:1]}
  %concatenate.117 = bf16[2,8192,64,128]{3,2,1,0} concatenate(%slice.400, %slice.401), dimensions={3}
  %slice.402 = bf16[2,8192,64,1]{3,2,1,0} slice(%mul.333), slice={[0:2], [0:8192], [0:64], [127:128]}
  %slice.403 = bf16[2,8192,64,127]{3,2,1,0} slice(%mul.333), slice={[0:2], [0:8192], [0:64], [0:127]}
  %concatenate.118 = bf16[2,8192,64,128]{3,2,1,0} concatenate(%slice.402, %slice.403), dimensions={3}
  %select_n.592 = bf16[2,8192,64,128]{3,2,1,0} select(%reshape.1240, %concatenate.117, %concatenate.118)
  %convert_element_type.377 = f32[2,8192,64,128]{3,2,1,0} convert(%select_n.592)
  %sin.2 = f32[2,8192,1,128]{3,2,1,0} sine(%div.434)
  %mul.340 = f32[2,8192,128]{2,1,0} reshape(%sin.2)
  %mul.341 = f32[2,8192,64,128]{3,2,1,0} broadcast(%mul.340), dimensions={0,1,3}
  %mul.342 = f32[2,8192,64,128]{3,2,1,0} multiply(%convert_element_type.377, %mul.341)
  %constant.1127 = s32[2]{0} constant({-1, 1})
  %broadcast_in_dim.438 = s32[64,2]{1,0} broadcast(%constant.1127), dimensions={1}
  %reshape.1245 = s32[128]{0} reshape(%broadcast_in_dim.438)
  %convert_element_type.378 = f32[128]{0} convert(%reshape.1245)
  %mul.343 = f32[2,8192,64,128]{3,2,1,0} broadcast(%convert_element_type.378), dimensions={3}
  %mul.344 = f32[2,8192,64,128]{3,2,1,0} multiply(%mul.342, %mul.343)
  %add.230 = f32[2,8192,64,128]{3,2,1,0} add(%mul.339, %mul.344)
  %convert_element_type.379 = bf16[2,8192,64,128]{3,2,1,0} convert(%add.230)
  %sharding_constraint.55 = bf16[2,8192,64,128]{3,2,1,0} copy(%convert_element_type.379)
  %get-tuple-element.368 = f32[80,1024]{1,0} get-tuple-element(%param.45), index=61
  %dynamic_slice.42 = f32[1,1024]{1,0} dynamic-slice(%get-tuple-element.368, %sub.6, %constant.1064), dynamic_slice_sizes={1,1024}
  %reduce.107 = f32[] reduce(%dynamic_slice.42, %constant.1072), dimensions={0,1}, to_apply=%region_30.1430
  %is_finite.52 = pred[] is-finite(%reduce.107)
  %select_n.593 = pred[1]{0} reshape(%is_finite.52)
  %gt.54 = pred[] compare(%reduce.107, %constant.1068), direction=GT
  %select_n.594 = pred[1]{0} reshape(%gt.54)
  %div.435 = f32[] divide(%constant.1073, %reduce.107)
  %broadcast_in_dim.440 = f32[1]{0} reshape(%div.435)
  %get-tuple-element.369 = f32[80,1]{1,0} get-tuple-element(%param.45), index=62
  %dynamic_slice.43 = f32[1,1]{1,0} dynamic-slice(%get-tuple-element.369, %sub.6, %constant.1064), dynamic_slice_sizes={1,1}
  %div.436 = f32[1,1]{1,0} divide(%constant.1074, %dynamic_slice.43)
  %div.437 = f32[1]{0} reshape(%div.436)
  %select_n.595 = f32[1]{0} select(%select_n.594, %broadcast_in_dim.440, %div.437)
  %select_n.596 = f32[1]{0} select(%select_n.593, %select_n.595, %div.437)
  %div.439 = f32[1]{0} divide(%constant.1071, %select_n.596)
  %convert_element_type.380 = bf16[1]{0} convert(%div.439)
  %convert_element_type.381 = bf16[] reshape(%convert_element_type.380)
  %broadcast_in_dim.441 = bf16[2,8192,8192]{2,1,0} broadcast(%convert_element_type.381), dimensions={}
  %div.440 = bf16[2,8192,8192]{2,1,0} divide(%sharding_constraint.54, %broadcast_in_dim.441)
  %min.197 = bf16[2,8192,8192]{2,1,0} clamp(%max.180, %div.440, %min.193)
  %convert_element_type.382 = f8e4m3fn[2,8192,8192]{2,1,0} convert(%min.197)
  %max.183 = bf16[1,64,8,128]{3,2,1,0} broadcast(%constant.1062), dimensions={}
  %get-tuple-element.370 = f32[80,64,8,128]{3,2,1,0} get-tuple-element(%param.45), index=63
  %dynamic-slice.149 = f32[1,64,8,128]{3,2,1,0} dynamic-slice(%get-tuple-element.370, %sub.6, %constant.1064, %constant.1064, %constant.1064), dynamic_slice_sizes={1,64,8,128}
  %convert_element_type.383 = bf16[1,64,8,128]{3,2,1,0} convert(%dynamic-slice.149)
  %get-tuple-element.371 = f32[80,1024]{1,0} get-tuple-element(%param.45), index=64
  %dynamic_slice.44 = f32[1,1024]{1,0} dynamic-slice(%get-tuple-element.371, %sub.6, %constant.1064), dynamic_slice_sizes={1,1024}
  %reduce.108 = f32[] reduce(%dynamic_slice.44, %constant.1072), dimensions={0,1}, to_apply=%region_31.1457
  %is_finite.53 = pred[] is-finite(%reduce.108)
  %select_n.597 = pred[1]{0} reshape(%is_finite.53)
  %gt.55 = pred[] compare(%reduce.108, %constant.1068), direction=GT
  %select_n.598 = pred[1]{0} reshape(%gt.55)
  %div.443 = f32[] divide(%constant.1073, %reduce.108)
  %broadcast_in_dim.442 = f32[1]{0} reshape(%div.443)
  %get-tuple-element.372 = f32[80,1]{1,0} get-tuple-element(%param.45), index=65
  %dynamic_slice.45 = f32[1,1]{1,0} dynamic-slice(%get-tuple-element.372, %sub.6, %constant.1064), dynamic_slice_sizes={1,1}
  %div.444 = f32[1,1]{1,0} divide(%constant.1074, %dynamic_slice.45)
  %div.446 = f32[1]{0} reshape(%div.444)
  %select_n.600 = f32[1]{0} select(%select_n.598, %broadcast_in_dim.442, %div.446)
  %select_n.602 = f32[1]{0} select(%select_n.597, %select_n.600, %div.446)
  %div.447 = f32[1]{0} divide(%constant.1071, %select_n.602)
  %convert_element_type.384 = bf16[1]{0} convert(%div.447)
  %convert_element_type.385 = bf16[] reshape(%convert_element_type.384)
  %broadcast_in_dim.443 = bf16[1,64,8,128]{3,2,1,0} broadcast(%convert_element_type.385), dimensions={}
  %div.448 = bf16[1,64,8,128]{3,2,1,0} divide(%convert_element_type.383, %broadcast_in_dim.443)
  %min.198 = bf16[1,64,8,128]{3,2,1,0} broadcast(%constant.1075), dimensions={}
  %min.199 = bf16[1,64,8,128]{3,2,1,0} clamp(%max.183, %div.448, %min.198)
  %convert_element_type.387 = f8e4m3fn[1,64,8,128]{3,2,1,0} convert(%min.199)
  %convert_element_type.390 = f8e4m3fn[64,8,128]{2,1,0} reshape(%convert_element_type.387)
  %all-gather.9 = f8e4m3fn[8192,8,128]{2,1,0} all-gather(%convert_element_type.390), channel_id=13, replica_groups=[2,128]<=[256], dimensions={0}, use_global_device_ids=true
  %dot.13 = bf16[2,8192,8,128]{3,2,1,0} dot(%convert_element_type.382, %all-gather.9), lhs_contracting_dims={2}, rhs_contracting_dims={0}
  %mul.345 = f32[1]{0} multiply(%div.439, %div.447)
  %convert_element_type.391 = bf16[1]{0} convert(%mul.345)
  %convert_element_type.392 = bf16[] reshape(%convert_element_type.391)
  %broadcast_in_dim.444 = bf16[2,8192,8,128]{3,2,1,0} broadcast(%convert_element_type.392), dimensions={}
  %mul.346 = bf16[2,8192,8,128]{3,2,1,0} multiply(%dot.13, %broadcast_in_dim.444)
  %convert_element_type.393 = f32[2,8192,8,128]{3,2,1,0} convert(%mul.346)
  %mul.351 = f32[2,8192,8,128]{3,2,1,0} broadcast(%mul.337), dimensions={0,1,3}
  %mul.352 = f32[2,8192,8,128]{3,2,1,0} multiply(%convert_element_type.393, %mul.351)
  %reshape.1247 = pred[2,8192,8,128]{3,2,1,0} broadcast(%select_n.591), dimensions={3}
  %slice.404 = bf16[2,8192,8,127]{3,2,1,0} slice(%mul.346), slice={[0:2], [0:8192], [0:8], [1:128]}
  %slice.405 = bf16[2,8192,8,1]{3,2,1,0} slice(%mul.346), slice={[0:2], [0:8192], [0:8], [0:1]}
  %concatenate.119 = bf16[2,8192,8,128]{3,2,1,0} concatenate(%slice.404, %slice.405), dimensions={3}
  %slice.406 = bf16[2,8192,8,1]{3,2,1,0} slice(%mul.346), slice={[0:2], [0:8192], [0:8], [127:128]}
  %slice.407 = bf16[2,8192,8,127]{3,2,1,0} slice(%mul.346), slice={[0:2], [0:8192], [0:8], [0:127]}
  %concatenate.120 = bf16[2,8192,8,128]{3,2,1,0} concatenate(%slice.406, %slice.407), dimensions={3}
  %select_n.611 = bf16[2,8192,8,128]{3,2,1,0} select(%reshape.1247, %concatenate.119, %concatenate.120)
  %convert_element_type.398 = f32[2,8192,8,128]{3,2,1,0} convert(%select_n.611)
  %mul.354 = f32[2,8192,8,128]{3,2,1,0} broadcast(%mul.340), dimensions={0,1,3}
  %mul.355 = f32[2,8192,8,128]{3,2,1,0} multiply(%convert_element_type.398, %mul.354)
  %mul.356 = f32[2,8192,8,128]{3,2,1,0} broadcast(%convert_element_type.378), dimensions={3}
  %mul.357 = f32[2,8192,8,128]{3,2,1,0} multiply(%mul.355, %mul.356)
  %add.233 = f32[2,8192,8,128]{3,2,1,0} add(%mul.352, %mul.357)
  %convert_element_type.400 = bf16[2,8192,8,128]{3,2,1,0} convert(%add.233)
  %sharding_constraint.57 = bf16[2,8192,8,128]{3,2,1,0} copy(%convert_element_type.400)
  %get-tuple-element.373 = f32[80,1024]{1,0} get-tuple-element(%param.45), index=66
  %dynamic_slice.46 = f32[1,1024]{1,0} dynamic-slice(%get-tuple-element.373, %sub.6, %constant.1064), dynamic_slice_sizes={1,1024}
  %reduce.109 = f32[] reduce(%dynamic_slice.46, %constant.1072), dimensions={0,1}, to_apply=%region_32.1573
  %is_finite.54 = pred[] is-finite(%reduce.109)
  %select_n.612 = pred[1]{0} reshape(%is_finite.54)
  %gt.57 = pred[] compare(%reduce.109, %constant.1068), direction=GT
  %select_n.613 = pred[1]{0} reshape(%gt.57)
  %div.460 = f32[] divide(%constant.1073, %reduce.109)
  %broadcast_in_dim.447 = f32[1]{0} reshape(%div.460)
  %get-tuple-element.374 = f32[80,1]{1,0} get-tuple-element(%param.45), index=67
  %dynamic_slice.47 = f32[1,1]{1,0} dynamic-slice(%get-tuple-element.374, %sub.6, %constant.1064), dynamic_slice_sizes={1,1}
  %div.461 = f32[1,1]{1,0} divide(%constant.1074, %dynamic_slice.47)
  %div.462 = f32[1]{0} reshape(%div.461)
  %select_n.614 = f32[1]{0} select(%select_n.613, %broadcast_in_dim.447, %div.462)
  %select_n.615 = f32[1]{0} select(%select_n.612, %select_n.614, %div.462)
  %div.463 = f32[1]{0} divide(%constant.1071, %select_n.615)
  %convert_element_type.401 = bf16[1]{0} convert(%div.463)
  %convert_element_type.403 = bf16[] reshape(%convert_element_type.401)
  %broadcast_in_dim.449 = bf16[2,8192,8192]{2,1,0} broadcast(%convert_element_type.403), dimensions={}
  %div.464 = bf16[2,8192,8192]{2,1,0} divide(%sharding_constraint.54, %broadcast_in_dim.449)
  %min.200 = bf16[2,8192,8192]{2,1,0} clamp(%max.180, %div.464, %min.193)
  %convert_element_type.404 = f8e4m3fn[2,8192,8192]{2,1,0} convert(%min.200)
  %get-tuple-element.375 = f32[80,64,8,128]{3,2,1,0} get-tuple-element(%param.45), index=68
  %dynamic-slice.154 = f32[1,64,8,128]{3,2,1,0} dynamic-slice(%get-tuple-element.375, %sub.6, %constant.1064, %constant.1064, %constant.1064), dynamic_slice_sizes={1,64,8,128}
  %convert_element_type.405 = bf16[1,64,8,128]{3,2,1,0} convert(%dynamic-slice.154)
  %get-tuple-element.376 = f32[80,1024]{1,0} get-tuple-element(%param.45), index=69
  %dynamic_slice.48 = f32[1,1024]{1,0} dynamic-slice(%get-tuple-element.376, %sub.6, %constant.1064), dynamic_slice_sizes={1,1024}
  %reduce.110 = f32[] reduce(%dynamic_slice.48, %constant.1072), dimensions={0,1}, to_apply=%region_33.1599
  %is_finite.55 = pred[] is-finite(%reduce.110)
  %select_n.616 = pred[1]{0} reshape(%is_finite.55)
  %gt.58 = pred[] compare(%reduce.110, %constant.1068), direction=GT
  %select_n.617 = pred[1]{0} reshape(%gt.58)
  %div.465 = f32[] divide(%constant.1073, %reduce.110)
  %broadcast_in_dim.450 = f32[1]{0} reshape(%div.465)
  %get-tuple-element.377 = f32[80,1]{1,0} get-tuple-element(%param.45), index=70
  %dynamic_slice.49 = f32[1,1]{1,0} dynamic-slice(%get-tuple-element.377, %sub.6, %constant.1064), dynamic_slice_sizes={1,1}
  %div.466 = f32[1,1]{1,0} divide(%constant.1074, %dynamic_slice.49)
  %div.467 = f32[1]{0} reshape(%div.466)
  %select_n.618 = f32[1]{0} select(%select_n.617, %broadcast_in_dim.450, %div.467)
  %select_n.619 = f32[1]{0} select(%select_n.616, %select_n.618, %div.467)
  %div.468 = f32[1]{0} divide(%constant.1071, %select_n.619)
  %convert_element_type.406 = bf16[1]{0} convert(%div.468)
  %convert_element_type.407 = bf16[] reshape(%convert_element_type.406)
  %broadcast_in_dim.451 = bf16[1,64,8,128]{3,2,1,0} broadcast(%convert_element_type.407), dimensions={}
  %div.469 = bf16[1,64,8,128]{3,2,1,0} divide(%convert_element_type.405, %broadcast_in_dim.451)
  %min.201 = bf16[1,64,8,128]{3,2,1,0} clamp(%max.183, %div.469, %min.198)
  %convert_element_type.408 = f8e4m3fn[1,64,8,128]{3,2,1,0} convert(%min.201)
  %convert_element_type.409 = f8e4m3fn[64,8,128]{2,1,0} reshape(%convert_element_type.408)
  %all-gather.10 = f8e4m3fn[8192,8,128]{2,1,0} all-gather(%convert_element_type.409), channel_id=14, replica_groups=[2,128]<=[256], dimensions={0}, use_global_device_ids=true
  %dot.14 = bf16[2,8192,8,128]{3,2,1,0} dot(%convert_element_type.404, %all-gather.10), lhs_contracting_dims={2}, rhs_contracting_dims={0}
  %mul.358 = f32[1]{0} multiply(%div.463, %div.468)
  %convert_element_type.410 = bf16[1]{0} convert(%mul.358)
  %convert_element_type.411 = bf16[] reshape(%convert_element_type.410)
  %broadcast_in_dim.452 = bf16[2,8192,8,128]{3,2,1,0} broadcast(%convert_element_type.411), dimensions={}
  %mul.359 = bf16[2,8192,8,128]{3,2,1,0} multiply(%dot.14, %broadcast_in_dim.452)
  %sharding_constraint.58 = bf16[2,8192,8,128]{3,2,1,0} copy(%mul.359)
  %constant.1170 = bf16[0]{0} constant({})
  %constant.1171 = u32[] constant(0)
  %reshape.1253 = u32[512]{0} broadcast(%constant.1171), dimensions={}
  %constant.1184 = s32[256]{0} constant({0, 2, 4, 6, 8, 10, 12, 14, 16, 18, 20, 22, 24, 26, 28, 30, 32, 34, 36, 38, 40, 42, 44, 46, 48, 50, 52, 54, 56, 58, 60, 62, 64, 66, 68, 70, 72, 74, 76, 78, 80, 82, 84, 86, 88, 90, 92, 94, 96, 98, 100, 102, 104, 106, 108, 110, 112, 114, 116, 118, 120, 122, 124, 126, 128, 130, 132, 134, 136, 138, 140, 142, 144, 146, 148, 150, 152, 154, 156, 158, 160, 162, 164, 166, 168, 170, 172, 174, 176, 178, 180, 182, 184, 186, 188, 190, 192, 194, 196, 198, 200, 202, 204, 206, 208, 210, 212, 214, 216, 218, 220, 222, 224, 226, 228, 230, 232, 234, 236, 238, 240, 242, 244, 246, 248, 250, 252, 254, 256, 258, 260, 262, 264, 266, 268, 270, 272, 274, 276, 278, 280, 282, 284, 286, 288, 290, 292, 294, 296, 298, 300, 302, 304, 306, 308, 310, 312, 314, 316, 318, 320, 322, 324, 326, 328, 330, 332, 334, 336, 338, 340, 342, 344, 346, 348, 350, 352, 354, 356, 358, 360, 362, 364, 366, 368, 370, 372, 374, 376, 378, 380, 382, 384, 386, 388, 390, 392, 394, 396, 398, 400, 402, 404, 406, 408, 410, 412, 414, 416, 418, 420, 422, 424, 426, 428, 430, 432, 434, 436, 438, 440, 442, 444, 446, 448, 450, 452, 454, 456, 458, 460, 462, 464, 466, 468, 470, 472, 474, 476, 478, 480, 482, 484, 486, 488, 490, 492, 494, 496, 498, 500, 502, 504, 506, 508, 510})
  %partition-id.3 = u32[] partition-id()
  %dynamic-slice.156 = s32[1]{0} dynamic-slice(%constant.1184, %partition-id.3), dynamic_slice_sizes={1}
  %reshape.1255 = s32[] reshape(%dynamic-slice.156)
  %dynamic-slice.157 = u32[2]{0} dynamic-slice(%reshape.1253, %reshape.1255), dynamic_slice_sizes={2}
  %constant.1185 = s32[1]{0} constant({0})
  %get-tuple-element.378 = s32[2,8192]{1,0} get-tuple-element(%param.45), index=71
  %eq.32 = s32[2,8192,8192]{2,1,0} broadcast(%get-tuple-element.378), dimensions={0,1}
  %eq.33 = s32[2,8192,8192]{2,1,0} broadcast(%get-tuple-element.378), dimensions={0,2}
  %eq.34 = pred[2,8192,8192]{2,1,0} compare(%eq.32, %eq.33), direction=EQ
  %iota.24 = s32[8192,8192]{1,0} iota(), iota_dimension=1
  %iota.25 = s32[8192,8192]{1,0} iota(), iota_dimension=0
  %le.1 = pred[8192,8192]{1,0} compare(%iota.24, %iota.25), direction=LE
  %and.83 = pred[2,8192,8192]{2,1,0} broadcast(%le.1), dimensions={1,2}
  %and.84 = pred[2,8192,8192]{2,1,0} and(%eq.34, %and.83)
  %broadcast_in_dim.453 = f32[2,8192,8192]{2,1,0} broadcast(%constant.1068), dimensions={}
  %constant.1172 = f32[] constant(-2.38197633e+38)
  %broadcast_in_dim.454 = f32[2,8192,8192]{2,1,0} broadcast(%constant.1172), dimensions={}
  %select_n.620 = f32[2,8192,8192]{2,1,0} select(%and.84, %broadcast_in_dim.453, %broadcast_in_dim.454)
  %ne.30 = pred[2,8192,8192]{2,1,0} compare(%select_n.620, %broadcast_in_dim.453), direction=NE
  %not.3 = pred[2,8192,8192]{2,1,0} not(%ne.30)
  %convert_element_type.412 = s32[2,8192,8192]{2,1,0} convert(%not.3)
  %reduce.111 = s32[2,8192]{1,0} reduce(%convert_element_type.412, %constant.1064), dimensions={1}, to_apply=%region_34.1648
  %reduce_sum.367 = s32[2,1,1,8192]{3,2,1,0} reshape(%reduce.111)
  %slice.408 = s32[2,1,1,1]{3,2,1,0} slice(%reduce_sum.367), slice={[0:2], [0:1], [0:1], [0:1]}
  %squeeze.3 = s32[2,1]{1,0} reshape(%slice.408)
  %reshape.1256 = s32[2]{0} reshape(%squeeze.3)
  %broadcast.873 = s32[2]{0} broadcast(%constant.1064), dimensions={}
  %lt.25 = pred[2]{0} compare(%reshape.1256, %broadcast.873), direction=LT
  %select_n.621 = s32[2]{0} select(%lt.25, %broadcast.873, %reshape.1256)
  %reduce_window_sum.5 = s32[2]{0} reduce-window(%select_n.621, %constant.1064), window={size=2 pad=1_0}, to_apply=%region_0.33._custom_call_lowering_rule.1
  %concatenate.121 = s32[3]{0} concatenate(%constant.1185, %reduce_window_sum.5), dimensions={0}
  %reduce.112 = s32[2,8192]{1,0} reduce(%convert_element_type.412, %constant.1064), dimensions={2}, to_apply=%region_35.1657
  %reduce_sum.368 = s32[2,1,1,8192]{3,2,1,0} reshape(%reduce.112)
  %constant.1182 = s32[] constant(-2147483648)
  %reduce.113 = s32[2,1]{1,0} reduce(%reduce_sum.368, %constant.1182), dimensions={3,2}, to_apply=%region_36.1664
  %reshape.1257 = s32[2]{0} reshape(%reduce.113)
  %lt.26 = pred[2]{0} compare(%reshape.1257, %broadcast.873), direction=LT
  %select_n.622 = s32[2]{0} select(%lt.26, %broadcast.873, %reshape.1257)
  %reduce_window_sum.6 = s32[2]{0} reduce-window(%select_n.622, %constant.1064), window={size=2 pad=1_0}, to_apply=%region_0.33._custom_call_lowering_rule.1.clone
  %concatenate.122 = s32[3]{0} concatenate(%constant.1185, %reduce_window_sum.6), dimensions={0}
  %constant.1183 = f32[0]{0} constant({})
  %te_fused_attn_forward_ffi.0 = (bf16[2,8192,64,128]{3,2,1,0}, f32[2,64,8192,1]{3,2,1,0}, u32[2,4]{1,0}, u8[48]{0}) custom-call(%sharding_constraint.55, %sharding_constraint.57, %sharding_constraint.58, %constant.1170, %dynamic-slice.157, /*index=5*/%concatenate.121, %concatenate.122, %constant.1183, %constant.1183, %constant.1183, /*index=10*/%constant.1183, %constant.1183, %constant.1183), custom_call_target="te_fused_attn_forward_ffi", operand_layout_constraints={bf16[2,8192,64,128]{3,2,1,0}, bf16[2,8192,8,128]{3,2,1,0}, bf16[2,8192,8,128]{3,2,1,0}, bf16[0]{0}, u32[2]{0}, s32[3]{0}, s32[3]{0}, f32[0]{0}, f32[0]{0}, f32[0]{0}, f32[0]{0}, f32[0]{0}, f32[0]{0}}, api_version=API_VERSION_TYPED_FFI, backend_config={attn_heads = 64 : i64, bias_batch = 0 : i64, bias_heads = 0 : i64, bias_type = 0 : i64, deterministic = false, dropout_probability = 0.000000e+00 : f64, input_batch = 2 : i64, is_training = true, kv_max_seqlen = 8192 : i64, mask_type = 3 : i64, max_segments_per_seq = 1 : i64, num_gqa_groups = 8 : i64, q_max_seqlen = 8192 : i64, qk_head_dim = 128 : i64, qkv_layout = 9 : i64, scaling_factor = 1.000000e+00 : f64, v_head_dim = 128 : i64, window_size_left = -1 : i64, window_size_right = -1 : i64}
  %get-tuple-element.379 = bf16[2,8192,64,128]{3,2,1,0} get-tuple-element(%te_fused_attn_forward_ffi.0), index=0
  %sharding_constraint.59 = bf16[2,8192,64,128]{3,2,1,0} copy(%get-tuple-element.379)
  %get-tuple-element.380 = f32[80,1024]{1,0} get-tuple-element(%param.45), index=72
  %dynamic_slice.50 = f32[1,1024]{1,0} dynamic-slice(%get-tuple-element.380, %sub.6, %constant.1064), dynamic_slice_sizes={1,1024}
  %reduce.114 = f32[] reduce(%dynamic_slice.50, %constant.1072), dimensions={0,1}, to_apply=%region_37.1676
  %is_finite.56 = pred[] is-finite(%reduce.114)
  %select_n.623 = pred[1]{0} reshape(%is_finite.56)
  %gt.59 = pred[] compare(%reduce.114, %constant.1068), direction=GT
  %select_n.624 = pred[1]{0} reshape(%gt.59)
  %div.470 = f32[] divide(%constant.1073, %reduce.114)
  %broadcast_in_dim.457 = f32[1]{0} reshape(%div.470)
  %get-tuple-element.381 = f32[80,1]{1,0} get-tuple-element(%param.45), index=73
  %dynamic_slice.51 = f32[1,1]{1,0} dynamic-slice(%get-tuple-element.381, %sub.6, %constant.1064), dynamic_slice_sizes={1,1}
  %div.471 = f32[1,1]{1,0} divide(%constant.1074, %dynamic_slice.51)
  %div.472 = f32[1]{0} reshape(%div.471)
  %select_n.625 = f32[1]{0} select(%select_n.624, %broadcast_in_dim.457, %div.472)
  %select_n.626 = f32[1]{0} select(%select_n.623, %select_n.625, %div.472)
  %div.473 = f32[1]{0} divide(%constant.1071, %select_n.626)
  %convert_element_type.414 = bf16[1]{0} convert(%div.473)
  %convert_element_type.415 = bf16[] reshape(%convert_element_type.414)
  %broadcast_in_dim.459 = bf16[2,8192,64,128]{3,2,1,0} broadcast(%convert_element_type.415), dimensions={}
  %div.474 = bf16[2,8192,64,128]{3,2,1,0} divide(%sharding_constraint.59, %broadcast_in_dim.459)
  %min.202 = bf16[2,8192,64,128]{3,2,1,0} broadcast(%constant.1075), dimensions={}
  %min.203 = bf16[2,8192,64,128]{3,2,1,0} clamp(%max.181, %div.474, %min.202)
  %convert_element_type.416 = f8e4m3fn[2,8192,64,128]{3,2,1,0} convert(%min.203)
  %max.184 = bf16[1,64,128,64]{3,2,1,0} broadcast(%constant.1062), dimensions={}
  %get-tuple-element.382 = f32[80,64,128,64]{3,2,1,0} get-tuple-element(%param.45), index=74
  %dynamic-slice.158 = f32[1,64,128,64]{3,2,1,0} dynamic-slice(%get-tuple-element.382, %sub.6, %constant.1064, %constant.1064, %constant.1064), dynamic_slice_sizes={1,64,128,64}
  %convert_element_type.419 = bf16[1,64,128,64]{3,2,1,0} convert(%dynamic-slice.158)
  %get-tuple-element.383 = f32[80,1024]{1,0} get-tuple-element(%param.45), index=75
  %dynamic_slice.52 = f32[1,1024]{1,0} dynamic-slice(%get-tuple-element.383, %sub.6, %constant.1064), dynamic_slice_sizes={1,1024}
  %reduce.115 = f32[] reduce(%dynamic_slice.52, %constant.1072), dimensions={0,1}, to_apply=%region_38.1704
  %is_finite.57 = pred[] is-finite(%reduce.115)
  %select_n.627 = pred[1]{0} reshape(%is_finite.57)
  %gt.60 = pred[] compare(%reduce.115, %constant.1068), direction=GT
  %select_n.628 = pred[1]{0} reshape(%gt.60)
  %div.475 = f32[] divide(%constant.1073, %reduce.115)
  %broadcast_in_dim.460 = f32[1]{0} reshape(%div.475)
  %get-tuple-element.384 = f32[80,1]{1,0} get-tuple-element(%param.45), index=76
  %dynamic_slice.53 = f32[1,1]{1,0} dynamic-slice(%get-tuple-element.384, %sub.6, %constant.1064), dynamic_slice_sizes={1,1}
  %div.476 = f32[1,1]{1,0} divide(%constant.1074, %dynamic_slice.53)
  %div.477 = f32[1]{0} reshape(%div.476)
  %select_n.629 = f32[1]{0} select(%select_n.628, %broadcast_in_dim.460, %div.477)
  %select_n.630 = f32[1]{0} select(%select_n.627, %select_n.629, %div.477)
  %div.478 = f32[1]{0} divide(%constant.1071, %select_n.630)
  %convert_element_type.420 = bf16[1]{0} convert(%div.478)
  %convert_element_type.421 = bf16[] reshape(%convert_element_type.420)
  %broadcast_in_dim.461 = bf16[1,64,128,64]{3,2,1,0} broadcast(%convert_element_type.421), dimensions={}
  %div.479 = bf16[1,64,128,64]{3,2,1,0} divide(%convert_element_type.419, %broadcast_in_dim.461)
  %min.204 = bf16[1,64,128,64]{3,2,1,0} broadcast(%constant.1075), dimensions={}
  %min.205 = bf16[1,64,128,64]{3,2,1,0} clamp(%max.184, %div.479, %min.204)
  %convert_element_type.422 = f8e4m3fn[1,64,128,64]{3,2,1,0} convert(%min.205)
  %convert_element_type.423 = f8e4m3fn[64,128,64]{2,1,0} reshape(%convert_element_type.422)
  %all-gather.11 = f8e4m3fn[64,128,8192]{2,1,0} all-gather(%convert_element_type.423), channel_id=15, replica_groups=[2,128]<=[256], dimensions={2}, use_global_device_ids=true
  %dot.15 = bf16[2,8192,8192]{2,1,0} dot(%convert_element_type.416, %all-gather.11), lhs_contracting_dims={2,3}, rhs_contracting_dims={0,1}
  %mul.360 = f32[1]{0} multiply(%div.473, %div.478)
  %convert_element_type.425 = bf16[1]{0} convert(%mul.360)
  %convert_element_type.426 = bf16[] reshape(%convert_element_type.425)
  %broadcast_in_dim.462 = bf16[2,8192,8192]{2,1,0} broadcast(%convert_element_type.426), dimensions={}
  %mul.362 = bf16[2,8192,8192]{2,1,0} multiply(%dot.15, %broadcast_in_dim.462)
  %sharding_constraint.60 = bf16[2,8192,8192]{2,1,0} copy(%mul.362)
  %add.234 = bf16[2,8192,8192]{2,1,0} add(%sharding_constraint.52, %sharding_constraint.60)
  %convert_element_type.428 = f32[2,8192,8192]{2,1,0} convert(%add.234)
  %square.84 = f32[2,8192,8192]{2,1,0} multiply(%convert_element_type.428, %convert_element_type.428)
  %reduce.116 = f32[2,8192]{1,0} reduce(%square.84, %constant.1068), dimensions={2}, to_apply=%region_39.1739
  %div.480 = f32[2,8192]{1,0} multiply(%reduce.116, %closed_call.2)
  %add.235 = f32[2,8192]{1,0} add(%div.480, %closed_call.3)
  %add.236 = f32[2,8192,1]{2,1,0} reshape(%add.235)
  %rsqrt.9 = f32[2,8192,1]{2,1,0} rsqrt(%add.236)
  %mul.363 = f32[2,8192]{1,0} reshape(%rsqrt.9)
  %mul.364 = f32[2,8192,8192]{2,1,0} broadcast(%mul.363), dimensions={0,1}
  %mul.365 = f32[2,8192,8192]{2,1,0} multiply(%convert_element_type.428, %mul.364)
  %convert_element_type.429 = bf16[2,8192,8192]{2,1,0} convert(%mul.365)
  %get-tuple-element.385 = f32[80,8192]{1,0} get-tuple-element(%param.45), index=77
  %dynamic_slice.54 = f32[1,8192]{1,0} dynamic-slice(%get-tuple-element.385, %sub.6, %constant.1064), dynamic_slice_sizes={1,8192}
  %convert_element_type.430 = bf16[1,8192]{1,0} convert(%dynamic_slice.54)
  %mul.366 = bf16[8192]{0} reshape(%convert_element_type.430)
  %mul.367 = bf16[2,8192,8192]{2,1,0} broadcast(%mul.366), dimensions={2}
  %mul.368 = bf16[2,8192,8192]{2,1,0} multiply(%convert_element_type.429, %mul.367)
  %sharding_constraint.61 = bf16[2,8192,8192]{2,1,0} copy(%mul.368)
  %get-tuple-element.386 = f32[80,1024]{1,0} get-tuple-element(%param.45), index=78
  %dynamic_slice.55 = f32[1,1024]{1,0} dynamic-slice(%get-tuple-element.386, %sub.6, %constant.1064), dynamic_slice_sizes={1,1024}
  %reduce.117 = f32[] reduce(%dynamic_slice.55, %constant.1072), dimensions={0,1}, to_apply=%region_40.1759
  %is_finite.58 = pred[] is-finite(%reduce.117)
  %select_n.631 = pred[1]{0} reshape(%is_finite.58)
  %gt.61 = pred[] compare(%reduce.117, %constant.1068), direction=GT
  %select_n.632 = pred[1]{0} reshape(%gt.61)
  %div.481 = f32[] divide(%constant.1073, %reduce.117)
  %broadcast_in_dim.463 = f32[1]{0} reshape(%div.481)
  %get-tuple-element.387 = f32[80,1]{1,0} get-tuple-element(%param.45), index=79
  %dynamic_slice.56 = f32[1,1]{1,0} dynamic-slice(%get-tuple-element.387, %sub.6, %constant.1064), dynamic_slice_sizes={1,1}
  %div.482 = f32[1,1]{1,0} divide(%constant.1074, %dynamic_slice.56)
  %div.483 = f32[1]{0} reshape(%div.482)
  %select_n.633 = f32[1]{0} select(%select_n.632, %broadcast_in_dim.463, %div.483)
  %select_n.634 = f32[1]{0} select(%select_n.631, %select_n.633, %div.483)
  %div.484 = f32[1]{0} divide(%constant.1071, %select_n.634)
  %convert_element_type.431 = bf16[1]{0} convert(%div.484)
  %convert_element_type.432 = bf16[] reshape(%convert_element_type.431)
  %broadcast_in_dim.464 = bf16[2,8192,8192]{2,1,0} broadcast(%convert_element_type.432), dimensions={}
  %div.485 = bf16[2,8192,8192]{2,1,0} divide(%sharding_constraint.61, %broadcast_in_dim.464)
  %min.206 = bf16[2,8192,8192]{2,1,0} clamp(%max.180, %div.485, %min.193)
  %convert_element_type.433 = f8e4m3fn[2,8192,8192]{2,1,0} convert(%min.206)
  %max.185 = bf16[1,64,28672]{2,1,0} broadcast(%constant.1062), dimensions={}
  %get-tuple-element.388 = f32[80,64,28672]{2,1,0} get-tuple-element(%param.45), index=80
  %dynamic-slice.159 = f32[1,64,28672]{2,1,0} dynamic-slice(%get-tuple-element.388, %sub.6, %constant.1064, %constant.1064), dynamic_slice_sizes={1,64,28672}
  %convert_element_type.435 = bf16[1,64,28672]{2,1,0} convert(%dynamic-slice.159)
  %get-tuple-element.389 = f32[80,1024]{1,0} get-tuple-element(%param.45), index=81
  %dynamic_slice.57 = f32[1,1024]{1,0} dynamic-slice(%get-tuple-element.389, %sub.6, %constant.1064), dynamic_slice_sizes={1,1024}
  %reduce.118 = f32[] reduce(%dynamic_slice.57, %constant.1072), dimensions={0,1}, to_apply=%region_41.1786
  %is_finite.59 = pred[] is-finite(%reduce.118)
  %select_n.635 = pred[1]{0} reshape(%is_finite.59)
  %gt.62 = pred[] compare(%reduce.118, %constant.1068), direction=GT
  %select_n.636 = pred[1]{0} reshape(%gt.62)
  %div.486 = f32[] divide(%constant.1073, %reduce.118)
  %broadcast_in_dim.465 = f32[1]{0} reshape(%div.486)
  %get-tuple-element.390 = f32[80,1]{1,0} get-tuple-element(%param.45), index=82
  %dynamic_slice.58 = f32[1,1]{1,0} dynamic-slice(%get-tuple-element.390, %sub.6, %constant.1064), dynamic_slice_sizes={1,1}
  %div.487 = f32[1,1]{1,0} divide(%constant.1074, %dynamic_slice.58)
  %div.488 = f32[1]{0} reshape(%div.487)
  %select_n.637 = f32[1]{0} select(%select_n.636, %broadcast_in_dim.465, %div.488)
  %select_n.638 = f32[1]{0} select(%select_n.635, %select_n.637, %div.488)
  %div.489 = f32[1]{0} divide(%constant.1071, %select_n.638)
  %convert_element_type.436 = bf16[1]{0} convert(%div.489)
  %convert_element_type.437 = bf16[] reshape(%convert_element_type.436)
  %broadcast_in_dim.466 = bf16[1,64,28672]{2,1,0} broadcast(%convert_element_type.437), dimensions={}
  %div.490 = bf16[1,64,28672]{2,1,0} divide(%convert_element_type.435, %broadcast_in_dim.466)
  %min.207 = bf16[1,64,28672]{2,1,0} broadcast(%constant.1075), dimensions={}
  %min.208 = bf16[1,64,28672]{2,1,0} clamp(%max.185, %div.490, %min.207)
  %convert_element_type.438 = f8e4m3fn[1,64,28672]{2,1,0} convert(%min.208)
  %convert_element_type.439 = f8e4m3fn[64,28672]{1,0} reshape(%convert_element_type.438)
  %all-gather.12 = f8e4m3fn[8192,28672]{1,0} all-gather(%convert_element_type.439), channel_id=16, replica_groups=[2,128]<=[256], dimensions={0}, use_global_device_ids=true
  %dot.16 = bf16[2,8192,28672]{2,1,0} dot(%convert_element_type.433, %all-gather.12), lhs_contracting_dims={2}, rhs_contracting_dims={0}
  %mul.369 = f32[1]{0} multiply(%div.484, %div.489)
  %convert_element_type.440 = bf16[1]{0} convert(%mul.369)
  %convert_element_type.441 = bf16[] reshape(%convert_element_type.440)
  %broadcast_in_dim.467 = bf16[2,8192,28672]{2,1,0} broadcast(%convert_element_type.441), dimensions={}
  %mul.370 = bf16[2,8192,28672]{2,1,0} multiply(%dot.16, %broadcast_in_dim.467)
  %constant.1195 = bf16[] constant(1)
  %jit_silu_.4 = bf16[2,8192,28672]{2,1,0} broadcast(%constant.1195), dimensions={}
  %neg.5 = bf16[2,8192,28672]{2,1,0} negate(%mul.370)
  %exp.5 = bf16[2,8192,28672]{2,1,0} exponential(%neg.5)
  %add.237 = bf16[2,8192,28672]{2,1,0} add(%exp.5, %jit_silu_.4)
  %div.491 = bf16[2,8192,28672]{2,1,0} divide(%jit_silu_.4, %add.237)
  %mul.371 = bf16[2,8192,28672]{2,1,0} multiply(%mul.370, %div.491)
  %max.186 = bf16[2,8192,8192]{2,1,0} broadcast(%constant.1061), dimensions={}
  %sharding_constraint.62 = bf16[2,8192,8192]{2,1,0} copy(%sharding_constraint.51)
  %get-tuple-element.391 = f32[80,1024]{1,0} get-tuple-element(%param.45), index=83
  %dynamic_slice.59 = f32[1,1024]{1,0} dynamic-slice(%get-tuple-element.391, %sub.6, %constant.1064), dynamic_slice_sizes={1,1024}
  %reduce.119 = f32[] reduce(%dynamic_slice.59, %constant.1072), dimensions={0,1}, to_apply=%region_42.1827
  %is_finite.60 = pred[] is-finite(%reduce.119)
  %select_n.639 = pred[1]{0} reshape(%is_finite.60)
  %gt.63 = pred[] compare(%reduce.119, %constant.1068), direction=GT
  %select_n.641 = pred[1]{0} reshape(%gt.63)
  %constant.1196 = f32[] constant(57344)
  %div.492 = f32[] divide(%constant.1196, %reduce.119)
  %broadcast_in_dim.468 = f32[1]{0} reshape(%div.492)
  %get-tuple-element.392 = f32[80,1]{1,0} get-tuple-element(%param.45), index=84
  %dynamic_slice.60 = f32[1,1]{1,0} dynamic-slice(%get-tuple-element.392, %sub.6, %constant.1064), dynamic_slice_sizes={1,1}
  %div.493 = f32[1,1]{1,0} divide(%constant.1074, %dynamic_slice.60)
  %div.495 = f32[1]{0} reshape(%div.493)
  %select_n.643 = f32[1]{0} select(%select_n.641, %broadcast_in_dim.468, %div.495)
  %select_n.644 = f32[1]{0} select(%select_n.639, %select_n.643, %div.495)
  %div.496 = f32[1]{0} divide(%constant.1071, %select_n.644)
  %convert_element_type.443 = bf16[1]{0} convert(%div.496)
  %convert_element_type.444 = bf16[] reshape(%convert_element_type.443)
  %broadcast_in_dim.469 = bf16[2,8192,8192]{2,1,0} broadcast(%convert_element_type.444), dimensions={}
  %div.499 = bf16[2,8192,8192]{2,1,0} divide(%sharding_constraint.62, %broadcast_in_dim.469)
  %constant.1197 = bf16[] constant(5.734e+04)
  %min.209 = bf16[2,8192,8192]{2,1,0} broadcast(%constant.1197), dimensions={}
  %min.210 = bf16[2,8192,8192]{2,1,0} clamp(%max.186, %div.499, %min.209)
  %convert_element_type.445 = f8e5m2[2,8192,8192]{2,1,0} convert(%min.210)
  %max.187 = bf16[1,28672,64]{2,1,0} broadcast(%constant.1062), dimensions={}
  %get-tuple-element.393 = f32[80,28672,64]{2,1,0} get-tuple-element(%param.45), index=85
  %dynamic-slice.160 = f32[1,28672,64]{2,1,0} dynamic-slice(%get-tuple-element.393, %sub.6, %constant.1064, %constant.1064), dynamic_slice_sizes={1,28672,64}
  %convert_element_type.448 = bf16[1,28672,64]{2,1,0} convert(%dynamic-slice.160)
  %get-tuple-element.394 = f32[80,1024]{1,0} get-tuple-element(%param.45), index=86
  %dynamic_slice.61 = f32[1,1024]{1,0} dynamic-slice(%get-tuple-element.394, %sub.6, %constant.1064), dynamic_slice_sizes={1,1024}
  %reduce.120 = f32[] reduce(%dynamic_slice.61, %constant.1072), dimensions={0,1}, to_apply=%region_43.1857
  %is_finite.61 = pred[] is-finite(%reduce.120)
  %select_n.645 = pred[1]{0} reshape(%is_finite.61)
  %gt.64 = pred[] compare(%reduce.120, %constant.1068), direction=GT
  %select_n.646 = pred[1]{0} reshape(%gt.64)
  %div.500 = f32[] divide(%constant.1073, %reduce.120)
  %broadcast_in_dim.470 = f32[1]{0} reshape(%div.500)
  %get-tuple-element.395 = f32[80,1]{1,0} get-tuple-element(%param.45), index=87
  %dynamic_slice.62 = f32[1,1]{1,0} dynamic-slice(%get-tuple-element.395, %sub.6, %constant.1064), dynamic_slice_sizes={1,1}
  %div.502 = f32[1,1]{1,0} divide(%constant.1074, %dynamic_slice.62)
  %div.503 = f32[1]{0} reshape(%div.502)
  %select_n.647 = f32[1]{0} select(%select_n.646, %broadcast_in_dim.470, %div.503)
  %select_n.650 = f32[1]{0} select(%select_n.645, %select_n.647, %div.503)
  %div.504 = f32[1]{0} divide(%constant.1071, %select_n.650)
  %convert_element_type.449 = bf16[1]{0} convert(%div.504)
  %convert_element_type.450 = bf16[] reshape(%convert_element_type.449)
  %broadcast_in_dim.471 = bf16[1,28672,64]{2,1,0} broadcast(%convert_element_type.450), dimensions={}
  %div.506 = bf16[1,28672,64]{2,1,0} divide(%convert_element_type.448, %broadcast_in_dim.471)
  %min.211 = bf16[1,28672,64]{2,1,0} broadcast(%constant.1075), dimensions={}
  %min.212 = bf16[1,28672,64]{2,1,0} clamp(%max.187, %div.506, %min.211)
  %convert_element_type.451 = f8e4m3fn[1,28672,64]{2,1,0} convert(%min.212)
  %convert_element_type.454 = f8e4m3fn[28672,64]{1,0} reshape(%convert_element_type.451)
  %all-gather.13 = f8e4m3fn[28672,8192]{1,0} all-gather(%convert_element_type.454), channel_id=17, replica_groups=[2,128]<=[256], dimensions={1}, use_global_device_ids=true
  %dot.17 = bf16[2,8192,28672]{2,1,0} dot(%convert_element_type.445, %all-gather.13), lhs_contracting_dims={2}, rhs_contracting_dims={1}, operand_precision={highest,highest}
  %mul.372 = f32[1]{0} multiply(%div.504, %div.496)
  %convert_element_type.455 = bf16[1]{0} convert(%mul.372)
  %convert_element_type.458 = bf16[] reshape(%convert_element_type.455)
  %broadcast_in_dim.472 = bf16[2,8192,28672]{2,1,0} broadcast(%convert_element_type.458), dimensions={}
  %mul.373 = bf16[2,8192,28672]{2,1,0} multiply(%dot.17, %broadcast_in_dim.472)
  %sharding_constraint.63 = bf16[2,8192,28672]{2,1,0} copy(%mul.373)
  %mul.374 = bf16[2,8192,28672]{2,1,0} multiply(%mul.371, %sharding_constraint.63)
  %get-tuple-element.396 = f32[80,1024]{1,0} get-tuple-element(%param.45), index=88
  %dynamic_slice.63 = f32[1,1024]{1,0} dynamic-slice(%get-tuple-element.396, %sub.6, %constant.1064), dynamic_slice_sizes={1,1024}
  %reduce.121 = f32[] reduce(%dynamic_slice.63, %constant.1072), dimensions={0,1}, to_apply=%region_44.1891
  %is_finite.62 = pred[] is-finite(%reduce.121)
  %select_n.651 = pred[1]{0} reshape(%is_finite.62)
  %gt.65 = pred[] compare(%reduce.121, %constant.1068), direction=GT
  %select_n.652 = pred[1]{0} reshape(%gt.65)
  %div.507 = f32[] divide(%constant.1196, %reduce.121)
  %broadcast_in_dim.473 = f32[1]{0} reshape(%div.507)
  %get-tuple-element.397 = f32[80,1]{1,0} get-tuple-element(%param.45), index=89
  %dynamic_slice.64 = f32[1,1]{1,0} dynamic-slice(%get-tuple-element.397, %sub.6, %constant.1064), dynamic_slice_sizes={1,1}
  %div.508 = f32[1,1]{1,0} divide(%constant.1074, %dynamic_slice.64)
  %div.509 = f32[1]{0} reshape(%div.508)
  %select_n.653 = f32[1]{0} select(%select_n.652, %broadcast_in_dim.473, %div.509)
  %select_n.654 = f32[1]{0} select(%select_n.651, %select_n.653, %div.509)
  %div.510 = f32[1]{0} divide(%constant.1071, %select_n.654)
  %convert_element_type.459 = bf16[1]{0} convert(%div.510)
  %convert_element_type.461 = bf16[] reshape(%convert_element_type.459)
  %broadcast_in_dim.474 = bf16[2,8192,28672]{2,1,0} broadcast(%convert_element_type.461), dimensions={}
  %div.511 = bf16[2,8192,28672]{2,1,0} divide(%mul.374, %broadcast_in_dim.474)
  %min.213 = bf16[2,8192,28672]{2,1,0} broadcast(%constant.1197), dimensions={}
  %min.214 = bf16[2,8192,28672]{2,1,0} clamp(%max.179, %div.511, %min.213)
  %convert_element_type.462 = f8e5m2[2,8192,28672]{2,1,0} convert(%min.214)
  %get-tuple-element.398 = f32[80,64,28672]{2,1,0} get-tuple-element(%param.45), index=90
  %dynamic-slice.161 = f32[1,64,28672]{2,1,0} dynamic-slice(%get-tuple-element.398, %sub.6, %constant.1064, %constant.1064), dynamic_slice_sizes={1,64,28672}
  %convert_element_type.463 = bf16[1,64,28672]{2,1,0} convert(%dynamic-slice.161)
  %get-tuple-element.399 = f32[80,1024]{1,0} get-tuple-element(%param.45), index=91
  %dynamic_slice.65 = f32[1,1024]{1,0} dynamic-slice(%get-tuple-element.399, %sub.6, %constant.1064), dynamic_slice_sizes={1,1024}
  %reduce.122 = f32[] reduce(%dynamic_slice.65, %constant.1072), dimensions={0,1}, to_apply=%region_45.1918
  %is_finite.63 = pred[] is-finite(%reduce.122)
  %select_n.655 = pred[1]{0} reshape(%is_finite.63)
  %gt.66 = pred[] compare(%reduce.122, %constant.1068), direction=GT
  %select_n.656 = pred[1]{0} reshape(%gt.66)
  %div.512 = f32[] divide(%constant.1073, %reduce.122)
  %broadcast_in_dim.475 = f32[1]{0} reshape(%div.512)
  %get-tuple-element.400 = f32[80,1]{1,0} get-tuple-element(%param.45), index=92
  %dynamic_slice.66 = f32[1,1]{1,0} dynamic-slice(%get-tuple-element.400, %sub.6, %constant.1064), dynamic_slice_sizes={1,1}
  %div.513 = f32[1,1]{1,0} divide(%constant.1074, %dynamic_slice.66)
  %div.514 = f32[1]{0} reshape(%div.513)
  %select_n.657 = f32[1]{0} select(%select_n.656, %broadcast_in_dim.475, %div.514)
  %select_n.658 = f32[1]{0} select(%select_n.655, %select_n.657, %div.514)
  %div.515 = f32[1]{0} divide(%constant.1071, %select_n.658)
  %convert_element_type.464 = bf16[1]{0} convert(%div.515)
  %convert_element_type.465 = bf16[] reshape(%convert_element_type.464)
  %broadcast_in_dim.476 = bf16[1,64,28672]{2,1,0} broadcast(%convert_element_type.465), dimensions={}
  %div.516 = bf16[1,64,28672]{2,1,0} divide(%convert_element_type.463, %broadcast_in_dim.476)
  %min.215 = bf16[1,64,28672]{2,1,0} clamp(%max.185, %div.516, %min.207)
  %convert_element_type.466 = f8e4m3fn[1,64,28672]{2,1,0} convert(%min.215)
  %convert_element_type.467 = f8e4m3fn[64,28672]{1,0} reshape(%convert_element_type.466)
  %all-gather.14 = f8e4m3fn[8192,28672]{1,0} all-gather(%convert_element_type.467), channel_id=18, replica_groups=[2,128]<=[256], dimensions={0}, use_global_device_ids=true
  %dot.18 = bf16[2,8192,8192]{2,1,0} dot(%convert_element_type.462, %all-gather.14), lhs_contracting_dims={2}, rhs_contracting_dims={1}, operand_precision={highest,highest}
  %mul.375 = f32[1]{0} multiply(%div.515, %div.510)
  %convert_element_type.468 = bf16[1]{0} convert(%mul.375)
  %convert_element_type.469 = bf16[] reshape(%convert_element_type.468)
  %broadcast_in_dim.477 = bf16[2,8192,8192]{2,1,0} broadcast(%convert_element_type.469), dimensions={}
  %mul.376 = bf16[2,8192,8192]{2,1,0} multiply(%dot.18, %broadcast_in_dim.477)
  %get-tuple-element.401 = f32[80,1024]{1,0} get-tuple-element(%param.45), index=93
  %dynamic_slice.67 = f32[1,1024]{1,0} dynamic-slice(%get-tuple-element.401, %sub.6, %constant.1064), dynamic_slice_sizes={1,1024}
  %reduce.123 = f32[] reduce(%dynamic_slice.67, %constant.1072), dimensions={0,1}, to_apply=%region_46.1949
  %is_finite.64 = pred[] is-finite(%reduce.123)
  %select_n.659 = pred[1]{0} reshape(%is_finite.64)
  %gt.67 = pred[] compare(%reduce.123, %constant.1068), direction=GT
  %select_n.660 = pred[1]{0} reshape(%gt.67)
  %div.517 = f32[] divide(%constant.1073, %reduce.123)
  %broadcast_in_dim.478 = f32[1]{0} reshape(%div.517)
  %get-tuple-element.402 = f32[80,1]{1,0} get-tuple-element(%param.45), index=94
  %dynamic_slice.68 = f32[1,1]{1,0} dynamic-slice(%get-tuple-element.402, %sub.6, %constant.1064), dynamic_slice_sizes={1,1}
  %div.518 = f32[1,1]{1,0} divide(%constant.1074, %dynamic_slice.68)
  %div.519 = f32[1]{0} reshape(%div.518)
  %select_n.661 = f32[1]{0} select(%select_n.660, %broadcast_in_dim.478, %div.519)
  %select_n.662 = f32[1]{0} select(%select_n.659, %select_n.661, %div.519)
  %div.520 = f32[1]{0} divide(%constant.1071, %select_n.662)
  %convert_element_type.470 = bf16[1]{0} convert(%div.520)
  %convert_element_type.471 = bf16[] reshape(%convert_element_type.470)
  %broadcast_in_dim.479 = bf16[2,8192,8192]{2,1,0} broadcast(%convert_element_type.471), dimensions={}
  %div.522 = bf16[2,8192,8192]{2,1,0} divide(%sharding_constraint.61, %broadcast_in_dim.479)
  %min.216 = bf16[2,8192,8192]{2,1,0} clamp(%max.180, %div.522, %min.193)
  %convert_element_type.472 = f8e4m3fn[2,8192,8192]{2,1,0} convert(%min.216)
  %dot.19 = bf16[2,8192,28672]{2,1,0} dot(%convert_element_type.472, %all-gather.14), lhs_contracting_dims={2}, rhs_contracting_dims={0}
  %mul.378 = f32[1]{0} multiply(%div.520, %div.515)
  %convert_element_type.474 = bf16[1]{0} convert(%mul.378)
  %convert_element_type.475 = bf16[] reshape(%convert_element_type.474)
  %broadcast_in_dim.480 = bf16[2,8192,28672]{2,1,0} broadcast(%convert_element_type.475), dimensions={}
  %mul.380 = bf16[2,8192,28672]{2,1,0} multiply(%dot.19, %broadcast_in_dim.480)
  %mul.381 = bf16[2,8192,28672]{2,1,0} multiply(%sharding_constraint.63, %mul.380)
  %mul.382 = bf16[2,8192,28672]{2,1,0} multiply(%mul.381, %div.491)
  %mul.383 = bf16[2,8192,28672]{2,1,0} multiply(%mul.370, %mul.381)
  %sub.11 = bf16[2,8192,28672]{2,1,0} subtract(%jit_silu_.4, %div.491)
  %mul.386 = bf16[2,8192,28672]{2,1,0} multiply(%div.491, %sub.11)
  %mul.387 = bf16[2,8192,28672]{2,1,0} multiply(%mul.383, %mul.386)
  %add_any.17 = bf16[2,8192,28672]{2,1,0} add(%mul.382, %mul.387)
  %get-tuple-element.403 = f32[80,1024]{1,0} get-tuple-element(%param.45), index=95
  %dynamic_slice.69 = f32[1,1024]{1,0} dynamic-slice(%get-tuple-element.403, %sub.6, %constant.1064), dynamic_slice_sizes={1,1024}
  %reduce.124 = f32[] reduce(%dynamic_slice.69, %constant.1072), dimensions={0,1}, to_apply=%region_47.1986
  %is_finite.65 = pred[] is-finite(%reduce.124)
  %select_n.663 = pred[1]{0} reshape(%is_finite.65)
  %gt.68 = pred[] compare(%reduce.124, %constant.1068), direction=GT
  %select_n.664 = pred[1]{0} reshape(%gt.68)
  %div.523 = f32[] divide(%constant.1196, %reduce.124)
  %broadcast_in_dim.481 = f32[1]{0} reshape(%div.523)
  %get-tuple-element.404 = f32[80,1]{1,0} get-tuple-element(%param.45), index=96
  %dynamic_slice.70 = f32[1,1]{1,0} dynamic-slice(%get-tuple-element.404, %sub.6, %constant.1064), dynamic_slice_sizes={1,1}
  %div.526 = f32[1,1]{1,0} divide(%constant.1074, %dynamic_slice.70)
  %div.527 = f32[1]{0} reshape(%div.526)
  %select_n.665 = f32[1]{0} select(%select_n.664, %broadcast_in_dim.481, %div.527)
  %select_n.666 = f32[1]{0} select(%select_n.663, %select_n.665, %div.527)
  %div.529 = f32[1]{0} divide(%constant.1071, %select_n.666)
  %convert_element_type.476 = bf16[1]{0} convert(%div.529)
  %convert_element_type.477 = bf16[] reshape(%convert_element_type.476)
  %broadcast_in_dim.482 = bf16[2,8192,28672]{2,1,0} broadcast(%convert_element_type.477), dimensions={}
  %div.530 = bf16[2,8192,28672]{2,1,0} divide(%add_any.17, %broadcast_in_dim.482)
  %min.217 = bf16[2,8192,28672]{2,1,0} clamp(%max.179, %div.530, %min.213)
  %convert_element_type.478 = f8e5m2[2,8192,28672]{2,1,0} convert(%min.217)
  %dot.20 = bf16[2,8192,8192]{2,1,0} dot(%convert_element_type.478, %all-gather.12), lhs_contracting_dims={2}, rhs_contracting_dims={1}, operand_precision={highest,highest}
  %mul.388 = f32[1]{0} multiply(%div.489, %div.529)
  %convert_element_type.479 = bf16[1]{0} convert(%mul.388)
  %convert_element_type.480 = bf16[] reshape(%convert_element_type.479)
  %broadcast_in_dim.483 = bf16[2,8192,8192]{2,1,0} broadcast(%convert_element_type.480), dimensions={}
  %mul.389 = bf16[2,8192,8192]{2,1,0} multiply(%dot.20, %broadcast_in_dim.483)
  %add_any.18 = bf16[2,8192,8192]{2,1,0} add(%mul.376, %mul.389)
  %sharding_constraint.64 = bf16[2,8192,8192]{2,1,0} copy(%add_any.18)
  %mul.395 = bf16[2,8192,8192]{2,1,0} multiply(%sharding_constraint.64, %mul.367)
  %convert_element_type.482 = f32[2,8192,8192]{2,1,0} convert(%mul.395)
  %mul.398 = f32[2,8192,8192]{2,1,0} multiply(%convert_element_type.482, %mul.364)
  %mul.399 = f32[2,8192,8192]{2,1,0} multiply(%convert_element_type.428, %convert_element_type.482)
  %reduce.125 = f32[2,8192]{1,0} reduce(%mul.399, %constant.1068), dimensions={2}, to_apply=%region_48.2025
  %reshape.1258 = f32[2,8192,1]{2,1,0} reshape(%reduce.125)
  %div.531 = f32[2,8192,1]{2,1,0} divide(%rsqrt.9, %add.236)
  %constant.1202 = f32[] constant(-0.5)
  %closed_call.16 = f32[2,8192,1]{2,1,0} broadcast(%constant.1202), dimensions={}
  %mul.400 = f32[2,8192,1]{2,1,0} multiply(%div.531, %closed_call.16)
  %mul.401 = f32[2,8192,1]{2,1,0} multiply(%reshape.1258, %mul.400)
  %constant.1203 = f32[] constant(0.000244140625)
  %mul.402 = f32[2,8192,1]{2,1,0} broadcast(%constant.1203), dimensions={}
  %mul.403 = f32[2,8192,1]{2,1,0} multiply(%mul.401, %mul.402)
  %mul.404 = f32[2,8192]{1,0} reshape(%mul.403)
  %mul.405 = f32[2,8192,8192]{2,1,0} broadcast(%mul.404), dimensions={0,1}
  %mul.406 = f32[2,8192,8192]{2,1,0} multiply(%convert_element_type.428, %mul.405)
  %add_any.19 = f32[2,8192,8192]{2,1,0} add(%mul.398, %mul.406)
  %convert_element_type.483 = bf16[2,8192,8192]{2,1,0} convert(%add_any.19)
  %add_any.20 = bf16[2,8192,8192]{2,1,0} add(%sharding_constraint.51, %convert_element_type.483)
  %max.188 = bf16[2,8192,8,128]{3,2,1,0} broadcast(%constant.1061), dimensions={}
  %get-tuple-element.405 = f32[2,64,8192,1]{3,2,1,0} get-tuple-element(%te_fused_attn_forward_ffi.0), index=1
  %get-tuple-element.406 = u32[2,4]{1,0} get-tuple-element(%te_fused_attn_forward_ffi.0), index=2
  %sharding_constraint.65 = u32[2,4]{1,0} copy(%get-tuple-element.406)
  %sharding_constraint.66 = bf16[2,8192,8192]{2,1,0} copy(%add_any.20)
  %get-tuple-element.407 = f32[80,1024]{1,0} get-tuple-element(%param.45), index=97
  %dynamic_slice.71 = f32[1,1024]{1,0} dynamic-slice(%get-tuple-element.407, %sub.6, %constant.1064), dynamic_slice_sizes={1,1024}
  %reduce.126 = f32[] reduce(%dynamic_slice.71, %constant.1072), dimensions={0,1}, to_apply=%region_49.2049
  %is_finite.66 = pred[] is-finite(%reduce.126)
  %select_n.667 = pred[1]{0} reshape(%is_finite.66)
  %gt.69 = pred[] compare(%reduce.126, %constant.1068), direction=GT
  %select_n.669 = pred[1]{0} reshape(%gt.69)
  %div.533 = f32[] divide(%constant.1196, %reduce.126)
  %broadcast_in_dim.484 = f32[1]{0} reshape(%div.533)
  %get-tuple-element.408 = f32[80,1]{1,0} get-tuple-element(%param.45), index=98
  %dynamic_slice.72 = f32[1,1]{1,0} dynamic-slice(%get-tuple-element.408, %sub.6, %constant.1064), dynamic_slice_sizes={1,1}
  %div.534 = f32[1,1]{1,0} divide(%constant.1074, %dynamic_slice.72)
  %div.535 = f32[1]{0} reshape(%div.534)
  %select_n.672 = f32[1]{0} select(%select_n.669, %broadcast_in_dim.484, %div.535)
  %select_n.674 = f32[1]{0} select(%select_n.667, %select_n.672, %div.535)
  %div.536 = f32[1]{0} divide(%constant.1071, %select_n.674)
  %convert_element_type.484 = bf16[1]{0} convert(%div.536)
  %convert_element_type.485 = bf16[] reshape(%convert_element_type.484)
  %broadcast_in_dim.485 = bf16[2,8192,8192]{2,1,0} broadcast(%convert_element_type.485), dimensions={}
  %div.537 = bf16[2,8192,8192]{2,1,0} divide(%sharding_constraint.66, %broadcast_in_dim.485)
  %min.218 = bf16[2,8192,8192]{2,1,0} clamp(%max.186, %div.537, %min.209)
  %convert_element_type.486 = f8e5m2[2,8192,8192]{2,1,0} convert(%min.218)
  %dot.21 = bf16[2,8192,64,128]{3,2,1,0} dot(%convert_element_type.486, %all-gather.11), lhs_contracting_dims={2}, rhs_contracting_dims={2}, operand_precision={highest,highest}
  %mul.407 = f32[1]{0} multiply(%div.478, %div.536)
  %convert_element_type.487 = bf16[1]{0} convert(%mul.407)
  %convert_element_type.488 = bf16[] reshape(%convert_element_type.487)
  %broadcast_in_dim.486 = bf16[2,8192,64,128]{3,2,1,0} broadcast(%convert_element_type.488), dimensions={}
  %mul.408 = bf16[2,8192,64,128]{3,2,1,0} multiply(%dot.21, %broadcast_in_dim.486)
  %sharding_constraint.67 = bf16[2,8192,64,128]{3,2,1,0} copy(%mul.408)
  %te_fused_attn_backward_ffi.48 = (bf16[2,8192,64,128]{3,2,1,0}, bf16[2,8192,8,128]{3,2,1,0}, bf16[2,8192,8,128]{3,2,1,0}, bf16[0]{0}, u8[1077936176]{0}) custom-call(%sharding_constraint.55, %sharding_constraint.57, %sharding_constraint.58, %constant.1170, %get-tuple-element.405, /*index=5*/%sharding_constraint.65, %get-tuple-element.379, %sharding_constraint.67, %concatenate.121, %concatenate.122, /*index=10*/%constant.1183, %constant.1183, %constant.1183, %constant.1183, %constant.1183, /*index=15*/%constant.1183), custom_call_target="te_fused_attn_backward_ffi", operand_layout_constraints={bf16[2,8192,64,128]{3,2,1,0}, bf16[2,8192,8,128]{3,2,1,0}, bf16[2,8192,8,128]{3,2,1,0}, bf16[0]{0}, f32[2,64,8192,1]{3,2,1,0}, u32[2,4]{1,0}, bf16[2,8192,64,128]{3,2,1,0}, bf16[2,8192,64,128]{3,2,1,0}, s32[3]{0}, s32[3]{0}, f32[0]{0}, f32[0]{0}, f32[0]{0}, f32[0]{0}, f32[0]{0}, f32[0]{0}}, api_version=API_VERSION_TYPED_FFI, backend_config={attn_heads = 64 : i64, bias_batch = 0 : i64, bias_heads = 0 : i64, bias_type = 0 : i64, deterministic = false, dropout_probability = 0.000000e+00 : f64, input_batch = 2 : i64, is_training = true, kv_max_seqlen = 8192 : i64, mask_type = 3 : i64, max_segments_per_seq = 1 : i64, num_gqa_groups = 8 : i64, q_max_seqlen = 8192 : i64, qk_head_dim = 128 : i64, qkv_layout = 9 : i64, scaling_factor = 1.000000e+00 : f64, v_head_dim = 128 : i64, window_size_left = -1 : i64, window_size_right = -1 : i64}
  %get-tuple-element.409 = bf16[2,8192,8,128]{3,2,1,0} get-tuple-element(%te_fused_attn_backward_ffi.48), index=2
  %sharding_constraint.68 = bf16[2,8192,8,128]{3,2,1,0} copy(%get-tuple-element.409)
  %get-tuple-element.410 = f32[80,1024]{1,0} get-tuple-element(%param.45), index=99
  %dynamic_slice.73 = f32[1,1024]{1,0} dynamic-slice(%get-tuple-element.410, %sub.6, %constant.1064), dynamic_slice_sizes={1,1024}
  %reduce.127 = f32[] reduce(%dynamic_slice.73, %constant.1072), dimensions={0,1}, to_apply=%region_50.2086
  %is_finite.67 = pred[] is-finite(%reduce.127)
  %select_n.679 = pred[1]{0} reshape(%is_finite.67)
  %gt.70 = pred[] compare(%reduce.127, %constant.1068), direction=GT
  %select_n.680 = pred[1]{0} reshape(%gt.70)
  %div.538 = f32[] divide(%constant.1196, %reduce.127)
  %broadcast_in_dim.489 = f32[1]{0} reshape(%div.538)
  %get-tuple-element.411 = f32[80,1]{1,0} get-tuple-element(%param.45), index=100
  %dynamic_slice.74 = f32[1,1]{1,0} dynamic-slice(%get-tuple-element.411, %sub.6, %constant.1064), dynamic_slice_sizes={1,1}
  %div.539 = f32[1,1]{1,0} divide(%constant.1074, %dynamic_slice.74)
  %div.540 = f32[1]{0} reshape(%div.539)
  %select_n.681 = f32[1]{0} select(%select_n.680, %broadcast_in_dim.489, %div.540)
  %select_n.682 = f32[1]{0} select(%select_n.679, %select_n.681, %div.540)
  %div.541 = f32[1]{0} divide(%constant.1071, %select_n.682)
  %convert_element_type.489 = bf16[1]{0} convert(%div.541)
  %convert_element_type.490 = bf16[] reshape(%convert_element_type.489)
  %broadcast_in_dim.490 = bf16[2,8192,8,128]{3,2,1,0} broadcast(%convert_element_type.490), dimensions={}
  %div.542 = bf16[2,8192,8,128]{3,2,1,0} divide(%sharding_constraint.68, %broadcast_in_dim.490)
  %min.219 = bf16[2,8192,8,128]{3,2,1,0} broadcast(%constant.1197), dimensions={}
  %min.220 = bf16[2,8192,8,128]{3,2,1,0} clamp(%max.188, %div.542, %min.219)
  %convert_element_type.491 = f8e5m2[2,8192,8,128]{3,2,1,0} convert(%min.220)
  %dot.22 = bf16[2,8192,8192]{2,1,0} dot(%convert_element_type.491, %all-gather.10), lhs_contracting_dims={2,3}, rhs_contracting_dims={1,2}, operand_precision={highest,highest}
  %mul.409 = f32[1]{0} multiply(%div.468, %div.541)
  %convert_element_type.492 = bf16[1]{0} convert(%mul.409)
  %convert_element_type.493 = bf16[] reshape(%convert_element_type.492)
  %broadcast_in_dim.491 = bf16[2,8192,8192]{2,1,0} broadcast(%convert_element_type.493), dimensions={}
  %mul.410 = bf16[2,8192,8192]{2,1,0} multiply(%dot.22, %broadcast_in_dim.491)
  %get-tuple-element.412 = bf16[2,8192,8,128]{3,2,1,0} get-tuple-element(%te_fused_attn_backward_ffi.48), index=1
  %sharding_constraint.69 = bf16[2,8192,8,128]{3,2,1,0} copy(%get-tuple-element.412)
  %convert_element_type.494 = f32[2,8192,8,128]{3,2,1,0} convert(%sharding_constraint.69)
  %mul.413 = f32[2,8192,8,128]{3,2,1,0} multiply(%convert_element_type.494, %mul.351)
  %convert_element_type.495 = bf16[2,8192,8,128]{3,2,1,0} convert(%mul.413)
  %eq.35 = pred[128]{0} compare(%select_n.590, %closed_call.10), direction=EQ
  %reshape.1261 = pred[2,8192,8,128]{3,2,1,0} broadcast(%eq.35), dimensions={3}
  %mul.415 = f32[2,8192,8,128]{3,2,1,0} multiply(%convert_element_type.494, %mul.356)
  %mul.418 = f32[2,8192,8,128]{3,2,1,0} multiply(%mul.415, %mul.354)
  %convert_element_type.497 = bf16[2,8192,8,128]{3,2,1,0} convert(%mul.418)
  %constant.1209 = bf16[] constant(0)
  %broadcast_in_dim.493 = bf16[2,8192,8,128]{3,2,1,0} broadcast(%constant.1209), dimensions={}
  %select_n.684 = bf16[2,8192,8,128]{3,2,1,0} select(%reshape.1261, %convert_element_type.497, %broadcast_in_dim.493)
  %slice.409 = bf16[2,8192,8,127]{3,2,1,0} slice(%select_n.684), slice={[0:2], [0:8192], [0:8], [1:128]}
  %pad.50 = bf16[2,8192,8,128]{3,2,1,0} pad(%slice.409, %constant.1209), padding=0_0x0_0x0_0x0_1
  %add_any.21 = bf16[2,8192,8,128]{3,2,1,0} add(%convert_element_type.495, %pad.50)
  %slice.410 = bf16[2,8192,8,1]{3,2,1,0} slice(%select_n.684), slice={[0:2], [0:8192], [0:8], [0:1]}
  %pad.51 = bf16[2,8192,8,128]{3,2,1,0} pad(%slice.410, %constant.1209), padding=0_0x0_0x0_0x127_0
  %add_any.22 = bf16[2,8192,8,128]{3,2,1,0} add(%add_any.21, %pad.51)
  %eq.36 = pred[128]{0} compare(%select_n.590, %jit_remainder_.0), direction=EQ
  %reshape.1267 = pred[2,8192,8,128]{3,2,1,0} broadcast(%eq.36), dimensions={3}
  %select_n.686 = bf16[2,8192,8,128]{3,2,1,0} select(%reshape.1267, %convert_element_type.497, %broadcast_in_dim.493)
  %slice.411 = bf16[2,8192,8,1]{3,2,1,0} slice(%select_n.686), slice={[0:2], [0:8192], [0:8], [127:128]}
  %pad.52 = bf16[2,8192,8,128]{3,2,1,0} pad(%slice.411, %constant.1209), padding=0_0x0_0x0_0x0_127
  %add_any.23 = bf16[2,8192,8,128]{3,2,1,0} add(%add_any.22, %pad.52)
  %slice.412 = bf16[2,8192,8,127]{3,2,1,0} slice(%select_n.686), slice={[0:2], [0:8192], [0:8], [0:127]}
  %pad.53 = bf16[2,8192,8,128]{3,2,1,0} pad(%slice.412, %constant.1209), padding=0_0x0_0x0_0x1_0
  %add_any.24 = bf16[2,8192,8,128]{3,2,1,0} add(%add_any.23, %pad.53)
  %get-tuple-element.413 = f32[80,1024]{1,0} get-tuple-element(%param.45), index=101
  %dynamic_slice.75 = f32[1,1024]{1,0} dynamic-slice(%get-tuple-element.413, %sub.6, %constant.1064), dynamic_slice_sizes={1,1024}
  %reduce.128 = f32[] reduce(%dynamic_slice.75, %constant.1072), dimensions={0,1}, to_apply=%region_51.2149
  %is_finite.68 = pred[] is-finite(%reduce.128)
  %select_n.687 = pred[1]{0} reshape(%is_finite.68)
  %gt.71 = pred[] compare(%reduce.128, %constant.1068), direction=GT
  %select_n.688 = pred[1]{0} reshape(%gt.71)
  %div.543 = f32[] divide(%constant.1196, %reduce.128)
  %broadcast_in_dim.494 = f32[1]{0} reshape(%div.543)
  %get-tuple-element.414 = f32[80,1]{1,0} get-tuple-element(%param.45), index=102
  %dynamic_slice.76 = f32[1,1]{1,0} dynamic-slice(%get-tuple-element.414, %sub.6, %constant.1064), dynamic_slice_sizes={1,1}
  %div.544 = f32[1,1]{1,0} divide(%constant.1074, %dynamic_slice.76)
  %div.545 = f32[1]{0} reshape(%div.544)
  %select_n.689 = f32[1]{0} select(%select_n.688, %broadcast_in_dim.494, %div.545)
  %select_n.690 = f32[1]{0} select(%select_n.687, %select_n.689, %div.545)
  %div.546 = f32[1]{0} divide(%constant.1071, %select_n.690)
  %convert_element_type.498 = bf16[1]{0} convert(%div.546)
  %convert_element_type.499 = bf16[] reshape(%convert_element_type.498)
  %broadcast_in_dim.496 = bf16[2,8192,8,128]{3,2,1,0} broadcast(%convert_element_type.499), dimensions={}
  %div.547 = bf16[2,8192,8,128]{3,2,1,0} divide(%add_any.24, %broadcast_in_dim.496)
  %min.221 = bf16[2,8192,8,128]{3,2,1,0} clamp(%max.188, %div.547, %min.219)
  %convert_element_type.500 = f8e5m2[2,8192,8,128]{3,2,1,0} convert(%min.221)
  %dot.23 = bf16[2,8192,8192]{2,1,0} dot(%convert_element_type.500, %all-gather.9), lhs_contracting_dims={2,3}, rhs_contracting_dims={1,2}, operand_precision={highest,highest}
  %mul.419 = f32[1]{0} multiply(%div.447, %div.546)
  %convert_element_type.501 = bf16[1]{0} convert(%mul.419)
  %convert_element_type.504 = bf16[] reshape(%convert_element_type.501)
  %broadcast_in_dim.497 = bf16[2,8192,8192]{2,1,0} broadcast(%convert_element_type.504), dimensions={}
  %mul.420 = bf16[2,8192,8192]{2,1,0} multiply(%dot.23, %broadcast_in_dim.497)
  %add_any.25 = bf16[2,8192,8192]{2,1,0} add(%mul.410, %mul.420)
  %sharding_constraint.70 = bf16[2,8192,8192]{2,1,0} copy(%add_any.25)
  %max.189 = bf16[2,8192,64,128]{3,2,1,0} broadcast(%constant.1061), dimensions={}
  %get-tuple-element.415 = bf16[2,8192,64,128]{3,2,1,0} get-tuple-element(%te_fused_attn_backward_ffi.48), index=0
  %sharding_constraint.71 = bf16[2,8192,64,128]{3,2,1,0} copy(%get-tuple-element.415)
  %convert_element_type.505 = f32[2,8192,64,128]{3,2,1,0} convert(%sharding_constraint.71)
  %mul.423 = f32[2,8192,64,128]{3,2,1,0} multiply(%convert_element_type.505, %mul.338)
  %convert_element_type.506 = bf16[2,8192,64,128]{3,2,1,0} convert(%mul.423)
  %reshape.1272 = pred[2,8192,64,128]{3,2,1,0} broadcast(%eq.35), dimensions={3}
  %mul.425 = f32[2,8192,64,128]{3,2,1,0} multiply(%convert_element_type.505, %mul.343)
  %mul.428 = f32[2,8192,64,128]{3,2,1,0} multiply(%mul.425, %mul.341)
  %convert_element_type.509 = bf16[2,8192,64,128]{3,2,1,0} convert(%mul.428)
  %broadcast_in_dim.499 = bf16[2,8192,64,128]{3,2,1,0} broadcast(%constant.1209), dimensions={}
  %select_n.692 = bf16[2,8192,64,128]{3,2,1,0} select(%reshape.1272, %convert_element_type.509, %broadcast_in_dim.499)
  %slice.413 = bf16[2,8192,64,127]{3,2,1,0} slice(%select_n.692), slice={[0:2], [0:8192], [0:64], [1:128]}
  %pad.54 = bf16[2,8192,64,128]{3,2,1,0} pad(%slice.413, %constant.1209), padding=0_0x0_0x0_0x0_1
  %add_any.26 = bf16[2,8192,64,128]{3,2,1,0} add(%convert_element_type.506, %pad.54)
  %slice.414 = bf16[2,8192,64,1]{3,2,1,0} slice(%select_n.692), slice={[0:2], [0:8192], [0:64], [0:1]}
  %pad.55 = bf16[2,8192,64,128]{3,2,1,0} pad(%slice.414, %constant.1209), padding=0_0x0_0x0_0x127_0
  %add_any.27 = bf16[2,8192,64,128]{3,2,1,0} add(%add_any.26, %pad.55)
  %reshape.1278 = pred[2,8192,64,128]{3,2,1,0} broadcast(%eq.36), dimensions={3}
  %select_n.694 = bf16[2,8192,64,128]{3,2,1,0} select(%reshape.1278, %convert_element_type.509, %broadcast_in_dim.499)
  %slice.415 = bf16[2,8192,64,1]{3,2,1,0} slice(%select_n.694), slice={[0:2], [0:8192], [0:64], [127:128]}
  %pad.56 = bf16[2,8192,64,128]{3,2,1,0} pad(%slice.415, %constant.1209), padding=0_0x0_0x0_0x0_127
  %add_any.28 = bf16[2,8192,64,128]{3,2,1,0} add(%add_any.27, %pad.56)
  %slice.416 = bf16[2,8192,64,127]{3,2,1,0} slice(%select_n.694), slice={[0:2], [0:8192], [0:64], [0:127]}
  %pad.57 = bf16[2,8192,64,128]{3,2,1,0} pad(%slice.416, %constant.1209), padding=0_0x0_0x0_0x1_0
  %add_any.29 = bf16[2,8192,64,128]{3,2,1,0} add(%add_any.28, %pad.57)
  %get-tuple-element.416 = f32[80,1024]{1,0} get-tuple-element(%param.45), index=103
  %dynamic_slice.77 = f32[1,1024]{1,0} dynamic-slice(%get-tuple-element.416, %sub.6, %constant.1064), dynamic_slice_sizes={1,1024}
  %reduce.129 = f32[] reduce(%dynamic_slice.77, %constant.1072), dimensions={0,1}, to_apply=%region_52.2213
  %is_finite.69 = pred[] is-finite(%reduce.129)
  %select_n.695 = pred[1]{0} reshape(%is_finite.69)
  %gt.72 = pred[] compare(%reduce.129, %constant.1068), direction=GT
  %select_n.696 = pred[1]{0} reshape(%gt.72)
  %div.548 = f32[] divide(%constant.1196, %reduce.129)
  %broadcast_in_dim.500 = f32[1]{0} reshape(%div.548)
  %get-tuple-element.417 = f32[80,1]{1,0} get-tuple-element(%param.45), index=104
  %dynamic_slice.78 = f32[1,1]{1,0} dynamic-slice(%get-tuple-element.417, %sub.6, %constant.1064), dynamic_slice_sizes={1,1}
  %div.549 = f32[1,1]{1,0} divide(%constant.1074, %dynamic_slice.78)
  %div.550 = f32[1]{0} reshape(%div.549)
  %select_n.697 = f32[1]{0} select(%select_n.696, %broadcast_in_dim.500, %div.550)
  %select_n.698 = f32[1]{0} select(%select_n.695, %select_n.697, %div.550)
  %div.551 = f32[1]{0} divide(%constant.1071, %select_n.698)
  %convert_element_type.511 = bf16[1]{0} convert(%div.551)
  %convert_element_type.512 = bf16[] reshape(%convert_element_type.511)
  %broadcast_in_dim.501 = bf16[2,8192,64,128]{3,2,1,0} broadcast(%convert_element_type.512), dimensions={}
  %div.552 = bf16[2,8192,64,128]{3,2,1,0} divide(%add_any.29, %broadcast_in_dim.501)
  %min.222 = bf16[2,8192,64,128]{3,2,1,0} broadcast(%constant.1197), dimensions={}
  %min.223 = bf16[2,8192,64,128]{3,2,1,0} clamp(%max.189, %div.552, %min.222)
  %convert_element_type.513 = f8e5m2[2,8192,64,128]{3,2,1,0} convert(%min.223)
  %dot.24 = bf16[2,8192,8192]{2,1,0} dot(%convert_element_type.513, %all-gather.8), lhs_contracting_dims={2,3}, rhs_contracting_dims={1,2}, operand_precision={highest,highest}
  %mul.429 = f32[1]{0} multiply(%div.423, %div.551)
  %convert_element_type.514 = bf16[1]{0} convert(%mul.429)
  %convert_element_type.515 = bf16[] reshape(%convert_element_type.514)
  %broadcast_in_dim.502 = bf16[2,8192,8192]{2,1,0} broadcast(%convert_element_type.515), dimensions={}
  %mul.430 = bf16[2,8192,8192]{2,1,0} multiply(%dot.24, %broadcast_in_dim.502)
  %sharding_constraint.72 = bf16[2,8192,8192]{2,1,0} copy(%mul.430)
  %add_any.30 = bf16[2,8192,8192]{2,1,0} add(%sharding_constraint.70, %sharding_constraint.72)
  %sharding_constraint.73 = bf16[2,8192,8192]{2,1,0} copy(%add_any.30)
  %mul.433 = bf16[2,8192,8192]{2,1,0} multiply(%sharding_constraint.73, %mul.330)
  %convert_element_type.516 = f32[2,8192,8192]{2,1,0} convert(%mul.433)
  %mul.436 = f32[2,8192,8192]{2,1,0} multiply(%convert_element_type.516, %mul.326)
  %mul.437 = f32[2,8192,8192]{2,1,0} multiply(%convert_element_type.355, %convert_element_type.516)
  %reduce.130 = f32[2,8192]{1,0} reduce(%mul.437, %constant.1068), dimensions={2}, to_apply=%region_53.2254
  %reshape.1283 = f32[2,8192,1]{2,1,0} reshape(%reduce.130)
  %div.553 = f32[2,8192,1]{2,1,0} divide(%rsqrt.8, %add.225)
  %mul.438 = f32[2,8192,1]{2,1,0} multiply(%div.553, %closed_call.16)
  %mul.439 = f32[2,8192,1]{2,1,0} multiply(%reshape.1283, %mul.438)
  %mul.440 = f32[2,8192,1]{2,1,0} multiply(%mul.439, %mul.402)
  %mul.441 = f32[2,8192]{1,0} reshape(%mul.440)
  %mul.442 = f32[2,8192,8192]{2,1,0} broadcast(%mul.441), dimensions={0,1}
  %mul.443 = f32[2,8192,8192]{2,1,0} multiply(%convert_element_type.355, %mul.442)
  %add_any.31 = f32[2,8192,8192]{2,1,0} add(%mul.436, %mul.443)
  %convert_element_type.517 = bf16[2,8192,8192]{2,1,0} convert(%add_any.31)
  %add_any.32 = bf16[2,8192,8192]{2,1,0} add(%add_any.20, %convert_element_type.517)
  %sharding_constraint.74 = bf16[2,8192,8192]{2,1,0} copy(%add_any.32)
  %get-tuple-element.418 = f32[80,64,28672]{2,1,0} get-tuple-element(%param.45), index=2
  %dot.25 = bf16[8192,28672]{1,0} dot(%convert_element_type.433, %convert_element_type.478), lhs_contracting_dims={0,1}, rhs_contracting_dims={0,1}, operand_precision={highest,highest}
  %all-reduce = bf16[8192,28672]{1,0} all-reduce(%dot.25), channel_id=19, replica_groups=[2,128]<=[256], use_global_device_ids=true, to_apply=%add.clone
  %constant.1375 = s32[128]{0} constant({0, 64, 128, 192, 256, 320, 384, 448, 512, 576, 640, 704, 768, 832, 896, 960, 1024, 1088, 1152, 1216, 1280, 1344, 1408, 1472, 1536, 1600, 1664, 1728, 1792, 1856, 1920, 1984, 2048, 2112, 2176, 2240, 2304, 2368, 2432, 2496, 2560, 2624, 2688, 2752, 2816, 2880, 2944, 3008, 3072, 3136, 3200, 3264, 3328, 3392, 3456, 3520, 3584, 3648, 3712, 3776, 3840, 3904, 3968, 4032, 4096, 4160, 4224, 4288, 4352, 4416, 4480, 4544, 4608, 4672, 4736, 4800, 4864, 4928, 4992, 5056, 5120, 5184, 5248, 5312, 5376, 5440, 5504, 5568, 5632, 5696, 5760, 5824, 5888, 5952, 6016, 6080, 6144, 6208, 6272, 6336, 6400, 6464, 6528, 6592, 6656, 6720, 6784, 6848, 6912, 6976, 7040, 7104, 7168, 7232, 7296, 7360, 7424, 7488, 7552, 7616, 7680, 7744, 7808, 7872, 7936, 8000, 8064, 8128})
  %constant.1374 = u32[256]{0} constant({0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127})
  %dynamic-slice.179 = u32[1]{0} dynamic-slice(%constant.1374, %partition-id.3), dynamic_slice_sizes={1}
  %reshape.1285 = u32[] reshape(%dynamic-slice.179)
  %dynamic-slice.180 = s32[1]{0} dynamic-slice(%constant.1375, %reshape.1285), dynamic_slice_sizes={1}
  %reshape.1286 = s32[] reshape(%dynamic-slice.180)
  %dynamic-slice.181 = bf16[64,28672]{1,0} dynamic-slice(%all-reduce, %reshape.1286, %constant.1064), dynamic_slice_sizes={64,28672}
  %all-reduce.1 = bf16[64,28672]{1,0} all-reduce(%dynamic-slice.181), channel_id=20, replica_groups=[128,2]<=[2,128]T(1,0), use_global_device_ids=true, to_apply=%add.1.clone
  %mul.444 = f32[1]{0} multiply(%div.484, %div.529)
  %convert_element_type.518 = bf16[1]{0} convert(%mul.444)
  %convert_element_type.519 = bf16[] reshape(%convert_element_type.518)
  %broadcast_in_dim.503 = bf16[64,28672]{1,0} broadcast(%convert_element_type.519), dimensions={}
  %mul.445 = bf16[64,28672]{1,0} multiply(%all-reduce.1, %broadcast_in_dim.503)
  %convert_element_type.520 = f32[64,28672]{1,0} convert(%mul.445)
  %broadcast_in_dim.505 = f32[1,64,28672]{2,1,0} reshape(%convert_element_type.520)
  %dynamic-update-slice.64 = f32[80,64,28672]{2,1,0} dynamic-update-slice(%get-tuple-element.418, %broadcast_in_dim.505, %sub.6, %constant.1064, %constant.1064)
  %get-tuple-element.419 = f32[80,64,28672]{2,1,0} get-tuple-element(%param.45), index=3
  %dot.26 = bf16[8192,28672]{1,0} dot(%convert_element_type.472, %convert_element_type.462), lhs_contracting_dims={0,1}, rhs_contracting_dims={0,1}, operand_precision={highest,highest}
  %all-reduce.2 = bf16[8192,28672]{1,0} all-reduce(%dot.26), channel_id=21, replica_groups=[2,128]<=[256], use_global_device_ids=true, to_apply=%add.2.clone
  %dynamic-slice.185 = bf16[64,28672]{1,0} dynamic-slice(%all-reduce.2, %reshape.1286, %constant.1064), dynamic_slice_sizes={64,28672}
  %all-reduce.3 = bf16[64,28672]{1,0} all-reduce(%dynamic-slice.185), channel_id=22, replica_groups=[128,2]<=[2,128]T(1,0), use_global_device_ids=true, to_apply=%add.3.clone
  %mul.446 = f32[1]{0} multiply(%div.520, %div.510)
  %convert_element_type.521 = bf16[1]{0} convert(%mul.446)
  %convert_element_type.522 = bf16[] reshape(%convert_element_type.521)
  %broadcast_in_dim.506 = bf16[64,28672]{1,0} broadcast(%convert_element_type.522), dimensions={}
  %mul.447 = bf16[64,28672]{1,0} multiply(%all-reduce.3, %broadcast_in_dim.506)
  %convert_element_type.523 = f32[64,28672]{1,0} convert(%mul.447)
  %broadcast_in_dim.507 = f32[1,64,28672]{2,1,0} reshape(%convert_element_type.523)
  %dynamic-update-slice.65 = f32[80,64,28672]{2,1,0} dynamic-update-slice(%get-tuple-element.419, %broadcast_in_dim.507, %sub.6, %constant.1064, %constant.1064)
  %get-tuple-element.420 = f32[80,28672,64]{2,1,0} get-tuple-element(%param.45), index=4
  %max.190 = bf16[2,8192,28672]{2,1,0} broadcast(%constant.1062), dimensions={}
  %mul.448 = bf16[2,8192,28672]{2,1,0} multiply(%mul.371, %mul.380)
  %sharding_constraint.75 = bf16[2,8192,28672]{2,1,0} copy(%mul.448)
  %get-tuple-element.421 = f32[80,1024]{1,0} get-tuple-element(%param.45), index=105
  %dynamic_slice.79 = f32[1,1024]{1,0} dynamic-slice(%get-tuple-element.421, %sub.6, %constant.1064), dynamic_slice_sizes={1,1024}
  %reduce.131 = f32[] reduce(%dynamic_slice.79, %constant.1072), dimensions={0,1}, to_apply=%region_54.2293
  %is_finite.70 = pred[] is-finite(%reduce.131)
  %select_n.699 = pred[1]{0} reshape(%is_finite.70)
  %gt.73 = pred[] compare(%reduce.131, %constant.1068), direction=GT
  %select_n.700 = pred[1]{0} reshape(%gt.73)
  %div.554 = f32[] divide(%constant.1073, %reduce.131)
  %broadcast_in_dim.508 = f32[1]{0} reshape(%div.554)
  %get-tuple-element.422 = f32[80,1]{1,0} get-tuple-element(%param.45), index=106
  %dynamic_slice.80 = f32[1,1]{1,0} dynamic-slice(%get-tuple-element.422, %sub.6, %constant.1064), dynamic_slice_sizes={1,1}
  %div.555 = f32[1,1]{1,0} divide(%constant.1074, %dynamic_slice.80)
  %div.556 = f32[1]{0} reshape(%div.555)
  %select_n.701 = f32[1]{0} select(%select_n.700, %broadcast_in_dim.508, %div.556)
  %select_n.702 = f32[1]{0} select(%select_n.699, %select_n.701, %div.556)
  %div.557 = f32[1]{0} divide(%constant.1071, %select_n.702)
  %convert_element_type.524 = bf16[1]{0} convert(%div.557)
  %convert_element_type.525 = bf16[] reshape(%convert_element_type.524)
  %broadcast_in_dim.509 = bf16[2,8192,28672]{2,1,0} broadcast(%convert_element_type.525), dimensions={}
  %div.558 = bf16[2,8192,28672]{2,1,0} divide(%sharding_constraint.75, %broadcast_in_dim.509)
  %min.224 = bf16[2,8192,28672]{2,1,0} broadcast(%constant.1075), dimensions={}
  %min.225 = bf16[2,8192,28672]{2,1,0} clamp(%max.190, %div.558, %min.224)
  %convert_element_type.526 = f8e4m3fn[2,8192,28672]{2,1,0} convert(%min.225)
  %dot.27 = bf16[28672,8192]{1,0} dot(%convert_element_type.526, %convert_element_type.445), lhs_contracting_dims={0,1}, rhs_contracting_dims={0,1}, operand_precision={highest,highest}
  %all-reduce.4 = bf16[28672,8192]{1,0} all-reduce(%dot.27), channel_id=23, replica_groups=[2,128]<=[256], use_global_device_ids=true, to_apply=%add.4.clone
  %dynamic-slice.189 = bf16[28672,64]{1,0} dynamic-slice(%all-reduce.4, %constant.1064, %reshape.1286), dynamic_slice_sizes={28672,64}
  %all-reduce.5 = bf16[28672,64]{1,0} all-reduce(%dynamic-slice.189), channel_id=24, replica_groups=[128,2]<=[2,128]T(1,0), use_global_device_ids=true, to_apply=%add.5.clone
  %mul.449 = f32[1]{0} multiply(%div.557, %div.496)
  %convert_element_type.527 = bf16[1]{0} convert(%mul.449)
  %convert_element_type.528 = bf16[] reshape(%convert_element_type.527)
  %broadcast_in_dim.510 = bf16[28672,64]{1,0} broadcast(%convert_element_type.528), dimensions={}
  %mul.450 = bf16[28672,64]{1,0} multiply(%all-reduce.5, %broadcast_in_dim.510)
  %convert_element_type.531 = f32[28672,64]{1,0} convert(%mul.450)
  %broadcast_in_dim.511 = f32[1,28672,64]{2,1,0} reshape(%convert_element_type.531)
  %dynamic-update-slice.66 = f32[80,28672,64]{2,1,0} dynamic-update-slice(%get-tuple-element.420, %broadcast_in_dim.511, %sub.6, %constant.1064, %constant.1064)
  %get-tuple-element.423 = f32[80,8192]{1,0} get-tuple-element(%param.45), index=5
  %mul.451 = bf16[2,8192,8192]{2,1,0} multiply(%convert_element_type.429, %sharding_constraint.64)
  %reduce.132 = bf16[8192]{0} reduce(%mul.451, %constant.1209), dimensions={0,1}, to_apply=%region_55.2327
  %all-reduce.6 = bf16[8192]{0} all-reduce(%reduce.132), channel_id=25, replica_groups=[1,256]<=[256], use_global_device_ids=true, to_apply=%region_55.2327.clone
  %convert_element_type.532 = f32[8192]{0} convert(%all-reduce.6)
  %broadcast_in_dim.512 = f32[1,8192]{1,0} reshape(%convert_element_type.532)
  %dynamic_update_slice.0 = f32[80,8192]{1,0} dynamic-update-slice(%get-tuple-element.423, %broadcast_in_dim.512, %sub.6, %constant.1064)
  %get-tuple-element.424 = f32[80,8192]{1,0} get-tuple-element(%param.45), index=6
  %mul.452 = bf16[2,8192,8192]{2,1,0} multiply(%convert_element_type.356, %sharding_constraint.73)
  %reduce.133 = bf16[8192]{0} reduce(%mul.452, %constant.1209), dimensions={0,1}, to_apply=%region_56.2336
  %all-reduce.7 = bf16[8192]{0} all-reduce(%reduce.133), channel_id=26, replica_groups=[1,256]<=[256], use_global_device_ids=true, to_apply=%region_56.2336.clone
  %convert_element_type.533 = f32[8192]{0} convert(%all-reduce.7)
  %broadcast_in_dim.513 = f32[1,8192]{1,0} reshape(%convert_element_type.533)
  %dynamic_update_slice.1 = f32[80,8192]{1,0} dynamic-update-slice(%get-tuple-element.424, %broadcast_in_dim.513, %sub.6, %constant.1064)
  %get-tuple-element.425 = f32[80,64,8,128]{3,2,1,0} get-tuple-element(%param.45), index=7
  %dot.28 = bf16[8,128,8192]{2,1,0} dot(%convert_element_type.500, %convert_element_type.382), lhs_contracting_dims={0,1}, rhs_contracting_dims={0,1}, operand_precision={highest,highest}
  %all-reduce.8 = bf16[8,128,8192]{2,1,0} all-reduce(%dot.28), channel_id=27, replica_groups=[2,128]<=[256], use_global_device_ids=true, to_apply=%add.6.clone
  %dynamic-slice.193 = bf16[8,128,64]{2,1,0} dynamic-slice(%all-reduce.8, %constant.1064, %constant.1064, %reshape.1286), dynamic_slice_sizes={8,128,64}
  %all-reduce.9 = bf16[8,128,64]{2,1,0} all-reduce(%dynamic-slice.193), channel_id=28, replica_groups=[128,2]<=[2,128]T(1,0), use_global_device_ids=true, to_apply=%add.7.clone
  %mul.453 = f32[1]{0} multiply(%div.439, %div.546)
  %convert_element_type.534 = bf16[1]{0} convert(%mul.453)
  %convert_element_type.537 = bf16[] reshape(%convert_element_type.534)
  %broadcast_in_dim.514 = bf16[8,128,64]{2,1,0} broadcast(%convert_element_type.537), dimensions={}
  %mul.454 = bf16[8,128,64]{2,1,0} multiply(%all-reduce.9, %broadcast_in_dim.514)
  %convert_element_type.538 = f32[8,128,64]{2,1,0} convert(%mul.454)
  %convert_element_type.541 = f32[64,8,128]{0,2,1} transpose(%convert_element_type.538), dimensions={2,0,1}
  %broadcast_in_dim.515 = f32[1,64,8,128]{3,2,1,0} reshape(%convert_element_type.541)
  %dynamic-update-slice.67 = f32[80,64,8,128]{3,2,1,0} dynamic-update-slice(%get-tuple-element.425, %broadcast_in_dim.515, %sub.6, %constant.1064, %constant.1064, /*index=5*/%constant.1064)
  %get-tuple-element.426 = f32[80,64,128,64]{3,2,1,0} get-tuple-element(%param.45), index=8
  %dot.29 = bf16[8192,64,128]{2,1,0} dot(%convert_element_type.486, %convert_element_type.416), lhs_contracting_dims={0,1}, rhs_contracting_dims={0,1}, operand_precision={highest,highest}
  %all-reduce.10 = bf16[8192,64,128]{2,1,0} all-reduce(%dot.29), channel_id=29, replica_groups=[2,128]<=[256], use_global_device_ids=true, to_apply=%add.8.clone
  %dynamic-slice.197 = bf16[64,64,128]{2,1,0} dynamic-slice(%all-reduce.10, %reshape.1286, %constant.1064, %constant.1064), dynamic_slice_sizes={64,64,128}
  %all-reduce.11 = bf16[64,64,128]{2,1,0} all-reduce(%dynamic-slice.197), channel_id=30, replica_groups=[128,2]<=[2,128]T(1,0), use_global_device_ids=true, to_apply=%add.9.clone
  %mul.456 = f32[1]{0} multiply(%div.473, %div.536)
  %convert_element_type.542 = bf16[1]{0} convert(%mul.456)
  %convert_element_type.544 = bf16[] reshape(%convert_element_type.542)
  %broadcast_in_dim.516 = bf16[64,64,128]{2,1,0} broadcast(%convert_element_type.544), dimensions={}
  %mul.457 = bf16[64,64,128]{2,1,0} multiply(%all-reduce.11, %broadcast_in_dim.516)
  %convert_element_type.545 = f32[64,64,128]{2,1,0} convert(%mul.457)
  %convert_element_type.546 = f32[64,128,64]{1,0,2} transpose(%convert_element_type.545), dimensions={1,2,0}
  %broadcast_in_dim.517 = f32[1,64,128,64]{3,2,1,0} reshape(%convert_element_type.546)
  %dynamic-update-slice.68 = f32[80,64,128,64]{3,2,1,0} dynamic-update-slice(%get-tuple-element.426, %broadcast_in_dim.517, %sub.6, %constant.1064, %constant.1064, /*index=5*/%constant.1064)
  %get-tuple-element.427 = f32[80,64,64,128]{3,2,1,0} get-tuple-element(%param.45), index=9
  %dot.30 = bf16[64,128,8192]{2,1,0} dot(%convert_element_type.513, %convert_element_type.360), lhs_contracting_dims={0,1}, rhs_contracting_dims={0,1}, operand_precision={highest,highest}
  %all-reduce.12 = bf16[64,128,8192]{2,1,0} all-reduce(%dot.30), channel_id=31, replica_groups=[2,128]<=[256], use_global_device_ids=true, to_apply=%add.10.clone
  %dynamic-slice.201 = bf16[64,128,64]{2,1,0} dynamic-slice(%all-reduce.12, %constant.1064, %constant.1064, %reshape.1286), dynamic_slice_sizes={64,128,64}
  %all-reduce.13 = bf16[64,128,64]{2,1,0} all-reduce(%dynamic-slice.201), channel_id=32, replica_groups=[128,2]<=[2,128]T(1,0), use_global_device_ids=true, to_apply=%add.11.clone
  %mul.458 = f32[1]{0} multiply(%div.417, %div.551)
  %convert_element_type.547 = bf16[1]{0} convert(%mul.458)
  %convert_element_type.548 = bf16[] reshape(%convert_element_type.547)
  %broadcast_in_dim.518 = bf16[64,128,64]{2,1,0} broadcast(%convert_element_type.548), dimensions={}
  %mul.460 = bf16[64,128,64]{2,1,0} multiply(%all-reduce.13, %broadcast_in_dim.518)
  %convert_element_type.549 = f32[64,128,64]{2,1,0} convert(%mul.460)
  %convert_element_type.550 = f32[64,64,128]{0,2,1} transpose(%convert_element_type.549), dimensions={2,0,1}
  %broadcast_in_dim.519 = f32[1,64,64,128]{3,2,1,0} reshape(%convert_element_type.550)
  %dynamic-update-slice.69 = f32[80,64,64,128]{3,2,1,0} dynamic-update-slice(%get-tuple-element.427, %broadcast_in_dim.519, %sub.6, %constant.1064, %constant.1064, /*index=5*/%constant.1064)
  %get-tuple-element.428 = f32[80,64,8,128]{3,2,1,0} get-tuple-element(%param.45), index=10
  %dot.31 = bf16[8,128,8192]{2,1,0} dot(%convert_element_type.491, %convert_element_type.404), lhs_contracting_dims={0,1}, rhs_contracting_dims={0,1}, operand_precision={highest,highest}
  %all-reduce.14 = bf16[8,128,8192]{2,1,0} all-reduce(%dot.31), channel_id=33, replica_groups=[2,128]<=[256], use_global_device_ids=true, to_apply=%add.12.clone
  %dynamic-slice.205 = bf16[8,128,64]{2,1,0} dynamic-slice(%all-reduce.14, %constant.1064, %constant.1064, %reshape.1286), dynamic_slice_sizes={8,128,64}
  %all-reduce.15 = bf16[8,128,64]{2,1,0} all-reduce(%dynamic-slice.205), channel_id=34, replica_groups=[128,2]<=[2,128]T(1,0), use_global_device_ids=true, to_apply=%add.13.clone
  %mul.464 = f32[1]{0} multiply(%div.463, %div.541)
  %convert_element_type.551 = bf16[1]{0} convert(%mul.464)
  %convert_element_type.552 = bf16[] reshape(%convert_element_type.551)
  %broadcast_in_dim.520 = bf16[8,128,64]{2,1,0} broadcast(%convert_element_type.552), dimensions={}
  %mul.465 = bf16[8,128,64]{2,1,0} multiply(%all-reduce.15, %broadcast_in_dim.520)
  %convert_element_type.553 = f32[8,128,64]{2,1,0} convert(%mul.465)
  %convert_element_type.554 = f32[64,8,128]{0,2,1} transpose(%convert_element_type.553), dimensions={2,0,1}
  %broadcast_in_dim.521 = f32[1,64,8,128]{3,2,1,0} reshape(%convert_element_type.554)
  %dynamic-update-slice.70 = f32[80,64,8,128]{3,2,1,0} dynamic-update-slice(%get-tuple-element.428, %broadcast_in_dim.521, %sub.6, %constant.1064, %constant.1064, /*index=5*/%constant.1064)
  %get-tuple-element.429 = f32[80,1024]{1,0} get-tuple-element(%param.45), index=11
  %squeeze.4 = f32[1024]{0} reshape(%dynamic_slice.55)
  %slice.417 = f32[1023]{0} slice(%squeeze.4), slice={[1:1024]}
  %slice.418 = f32[1,1]{1,0} slice(%dynamic_slice.55), slice={[0:1], [0:1]}
  %slice.419 = f32[1]{0} reshape(%slice.418)
  %concatenate.125 = f32[1024]{0} concatenate(%slice.417, %slice.419), dimensions={0}
  %broadcast_in_dim.523 = f32[1,1024]{1,0} reshape(%concatenate.125)
  %abs.28 = bf16[2,8192,8192]{2,1,0} abs(%sharding_constraint.61)
  %constant.1436 = bf16[] constant(-inf)
  %reduce.134 = bf16[] reduce(%abs.28, %constant.1436), dimensions={0,1,2}, to_apply=%region_57.2392
  %all-reduce.16 = bf16[] all-reduce(%reduce.134), channel_id=35, replica_groups=[1,256]<=[256], use_global_device_ids=true, to_apply=%region_57.2392.clone
  %convert_element_type.555 = f32[] convert(%all-reduce.16)
  %broadcast_in_dim.524 = f32[1,1]{1,0} reshape(%convert_element_type.555)
  %scatter.22 = f32[1,1024]{1,0} dynamic-update-slice(%broadcast_in_dim.523, %broadcast_in_dim.524, %constant.1064, %constant.1064)
  %dynamic_update_slice.2 = f32[80,1024]{1,0} dynamic-update-slice(%get-tuple-element.429, %scatter.22, %sub.6, %constant.1064)
  %get-tuple-element.430 = f32[80,1]{1,0} get-tuple-element(%param.45), index=12
  %broadcast_in_dim.525 = f32[1,1]{1,0} reshape(%div.484)
  %dynamic_update_slice.3 = f32[80,1]{1,0} dynamic-update-slice(%get-tuple-element.430, %broadcast_in_dim.525, %sub.6, %constant.1064)
  %get-tuple-element.431 = f32[80,1024]{1,0} get-tuple-element(%param.45), index=13
  %squeeze.5 = f32[1024]{0} reshape(%dynamic_slice.57)
  %slice.420 = f32[1023]{0} slice(%squeeze.5), slice={[1:1024]}
  %slice.421 = f32[1,1]{1,0} slice(%dynamic_slice.57), slice={[0:1], [0:1]}
  %slice.422 = f32[1]{0} reshape(%slice.421)
  %concatenate.126 = f32[1024]{0} concatenate(%slice.420, %slice.422), dimensions={0}
  %broadcast_in_dim.526 = f32[1,1024]{1,0} reshape(%concatenate.126)
  %abs.29 = bf16[1,64,28672]{2,1,0} abs(%convert_element_type.435)
  %reduce.135 = bf16[] reduce(%abs.29, %constant.1436), dimensions={0,1,2}, to_apply=%region_58.2410
  %all-reduce.17 = bf16[] all-reduce(%reduce.135), channel_id=36, replica_groups=[2,128]<=[256], use_global_device_ids=true, to_apply=%region_58.2410.clone
  %convert_element_type.557 = f32[] convert(%all-reduce.17)
  %broadcast_in_dim.527 = f32[1,1]{1,0} reshape(%convert_element_type.557)
  %scatter.23 = f32[1,1024]{1,0} dynamic-update-slice(%broadcast_in_dim.526, %broadcast_in_dim.527, %constant.1064, %constant.1064)
  %dynamic_update_slice.4 = f32[80,1024]{1,0} dynamic-update-slice(%get-tuple-element.431, %scatter.23, %sub.6, %constant.1064)
  %get-tuple-element.432 = f32[80,1]{1,0} get-tuple-element(%param.45), index=14
  %broadcast_in_dim.528 = f32[1,1]{1,0} reshape(%div.489)
  %dynamic_update_slice.5 = f32[80,1]{1,0} dynamic-update-slice(%get-tuple-element.432, %broadcast_in_dim.528, %sub.6, %constant.1064)
  %get-tuple-element.433 = f32[80,1024]{1,0} get-tuple-element(%param.45), index=15
  %squeeze.6 = f32[1024]{0} reshape(%dynamic_slice.69)
  %slice.423 = f32[1023]{0} slice(%squeeze.6), slice={[1:1024]}
  %slice.424 = f32[1,1]{1,0} slice(%dynamic_slice.69), slice={[0:1], [0:1]}
  %slice.425 = f32[1]{0} reshape(%slice.424)
  %concatenate.127 = f32[1024]{0} concatenate(%slice.423, %slice.425), dimensions={0}
  %broadcast_in_dim.529 = f32[1,1024]{1,0} reshape(%concatenate.127)
  %abs.30 = bf16[2,8192,28672]{2,1,0} abs(%add_any.17)
  %reduce.136 = bf16[] reduce(%abs.30, %constant.1436), dimensions={0,1,2}, to_apply=%region_59.2428
  %all-reduce.18 = bf16[] all-reduce(%reduce.136), channel_id=37, replica_groups=[1,256]<=[256], use_global_device_ids=true, to_apply=%region_59.2428.clone
  %convert_element_type.558 = f32[] convert(%all-reduce.18)
  %broadcast_in_dim.530 = f32[1,1]{1,0} reshape(%convert_element_type.558)
  %scatter.24 = f32[1,1024]{1,0} dynamic-update-slice(%broadcast_in_dim.529, %broadcast_in_dim.530, %constant.1064, %constant.1064)
  %dynamic_update_slice.6 = f32[80,1024]{1,0} dynamic-update-slice(%get-tuple-element.433, %scatter.24, %sub.6, %constant.1064)
  %get-tuple-element.434 = f32[80,1]{1,0} get-tuple-element(%param.45), index=16
  %broadcast_in_dim.532 = f32[1,1]{1,0} reshape(%div.529)
  %dynamic_update_slice.7 = f32[80,1]{1,0} dynamic-update-slice(%get-tuple-element.434, %broadcast_in_dim.532, %sub.6, %constant.1064)
  %get-tuple-element.435 = f32[80,1024]{1,0} get-tuple-element(%param.45), index=17
  %squeeze.7 = f32[1024]{0} reshape(%dynamic_slice.67)
  %slice.426 = f32[1023]{0} slice(%squeeze.7), slice={[1:1024]}
  %slice.427 = f32[1,1]{1,0} slice(%dynamic_slice.67), slice={[0:1], [0:1]}
  %slice.428 = f32[1]{0} reshape(%slice.427)
  %concatenate.128 = f32[1024]{0} concatenate(%slice.426, %slice.428), dimensions={0}
  %broadcast_in_dim.533 = f32[1,1024]{1,0} reshape(%concatenate.128)
  %all-reduce.19 = bf16[] all-reduce(%reduce.134), channel_id=38, replica_groups=[1,256]<=[256], use_global_device_ids=true, to_apply=%region_60.2446.clone
  %convert_element_type.559 = f32[] convert(%all-reduce.19)
  %broadcast_in_dim.534 = f32[1,1]{1,0} reshape(%convert_element_type.559)
  %scatter.25 = f32[1,1024]{1,0} dynamic-update-slice(%broadcast_in_dim.533, %broadcast_in_dim.534, %constant.1064, %constant.1064)
  %dynamic_update_slice.8 = f32[80,1024]{1,0} dynamic-update-slice(%get-tuple-element.435, %scatter.25, %sub.6, %constant.1064)
  %get-tuple-element.436 = f32[80,1]{1,0} get-tuple-element(%param.45), index=18
  %broadcast_in_dim.535 = f32[1,1]{1,0} reshape(%div.520)
  %dynamic_update_slice.9 = f32[80,1]{1,0} dynamic-update-slice(%get-tuple-element.436, %broadcast_in_dim.535, %sub.6, %constant.1064)
  %get-tuple-element.437 = f32[80,1024]{1,0} get-tuple-element(%param.45), index=19
  %squeeze.8 = f32[1024]{0} reshape(%dynamic_slice.65)
  %slice.429 = f32[1023]{0} slice(%squeeze.8), slice={[1:1024]}
  %slice.430 = f32[1,1]{1,0} slice(%dynamic_slice.65), slice={[0:1], [0:1]}
  %slice.431 = f32[1]{0} reshape(%slice.430)
  %concatenate.129 = f32[1024]{0} concatenate(%slice.429, %slice.431), dimensions={0}
  %broadcast_in_dim.536 = f32[1,1024]{1,0} reshape(%concatenate.129)
  %abs.32 = bf16[1,64,28672]{2,1,0} abs(%convert_element_type.463)
  %reduce.138 = bf16[] reduce(%abs.32, %constant.1436), dimensions={0,1,2}, to_apply=%region_61.2464
  %all-reduce.20 = bf16[] all-reduce(%reduce.138), channel_id=39, replica_groups=[2,128]<=[256], use_global_device_ids=true, to_apply=%region_61.2464.clone
  %convert_element_type.560 = f32[] convert(%all-reduce.20)
  %broadcast_in_dim.537 = f32[1,1]{1,0} reshape(%convert_element_type.560)
  %scatter.26 = f32[1,1024]{1,0} dynamic-update-slice(%broadcast_in_dim.536, %broadcast_in_dim.537, %constant.1064, %constant.1064)
  %dynamic_update_slice.10 = f32[80,1024]{1,0} dynamic-update-slice(%get-tuple-element.437, %scatter.26, %sub.6, %constant.1064)
  %get-tuple-element.438 = f32[80,1]{1,0} get-tuple-element(%param.45), index=20
  %broadcast_in_dim.538 = f32[1,1]{1,0} reshape(%div.515)
  %dynamic_update_slice.11 = f32[80,1]{1,0} dynamic-update-slice(%get-tuple-element.438, %broadcast_in_dim.538, %sub.6, %constant.1064)
  %get-tuple-element.439 = f32[80,1024]{1,0} get-tuple-element(%param.45), index=21
  %squeeze.9 = f32[1024]{0} reshape(%dynamic_slice.63)
  %slice.432 = f32[1023]{0} slice(%squeeze.9), slice={[1:1024]}
  %slice.433 = f32[1,1]{1,0} slice(%dynamic_slice.63), slice={[0:1], [0:1]}
  %slice.434 = f32[1]{0} reshape(%slice.433)
  %concatenate.130 = f32[1024]{0} concatenate(%slice.432, %slice.434), dimensions={0}
  %broadcast_in_dim.539 = f32[1,1024]{1,0} reshape(%concatenate.130)
  %abs.33 = bf16[2,8192,28672]{2,1,0} abs(%mul.374)
  %reduce.139 = bf16[] reduce(%abs.33, %constant.1436), dimensions={0,1,2}, to_apply=%region_62.2482
  %all-reduce.21 = bf16[] all-reduce(%reduce.139), channel_id=40, replica_groups=[1,256]<=[256], use_global_device_ids=true, to_apply=%region_62.2482.clone
  %convert_element_type.561 = f32[] convert(%all-reduce.21)
  %broadcast_in_dim.540 = f32[1,1]{1,0} reshape(%convert_element_type.561)
  %scatter.27 = f32[1,1024]{1,0} dynamic-update-slice(%broadcast_in_dim.539, %broadcast_in_dim.540, %constant.1064, %constant.1064)
  %dynamic_update_slice.12 = f32[80,1024]{1,0} dynamic-update-slice(%get-tuple-element.439, %scatter.27, %sub.6, %constant.1064)
  %get-tuple-element.440 = f32[80,1]{1,0} get-tuple-element(%param.45), index=22
  %broadcast_in_dim.542 = f32[1,1]{1,0} reshape(%div.510)
  %dynamic_update_slice.13 = f32[80,1]{1,0} dynamic-update-slice(%get-tuple-element.440, %broadcast_in_dim.542, %sub.6, %constant.1064)
  %get-tuple-element.441 = f32[80,1024]{1,0} get-tuple-element(%param.45), index=23
  %squeeze.10 = f32[1024]{0} reshape(%dynamic_slice.79)
  %slice.435 = f32[1023]{0} slice(%squeeze.10), slice={[1:1024]}
  %slice.436 = f32[1,1]{1,0} slice(%dynamic_slice.79), slice={[0:1], [0:1]}
  %slice.437 = f32[1]{0} reshape(%slice.436)
  %concatenate.131 = f32[1024]{0} concatenate(%slice.435, %slice.437), dimensions={0}
  %broadcast_in_dim.543 = f32[1,1024]{1,0} reshape(%concatenate.131)
  %abs.34 = bf16[2,8192,28672]{2,1,0} abs(%sharding_constraint.75)
  %reduce.140 = bf16[] reduce(%abs.34, %constant.1436), dimensions={0,1,2}, to_apply=%region_63.2500
  %all-reduce.22 = bf16[] all-reduce(%reduce.140), channel_id=41, replica_groups=[1,256]<=[256], use_global_device_ids=true, to_apply=%region_63.2500.clone
  %convert_element_type.562 = f32[] convert(%all-reduce.22)
  %broadcast_in_dim.544 = f32[1,1]{1,0} reshape(%convert_element_type.562)
  %scatter.28 = f32[1,1024]{1,0} dynamic-update-slice(%broadcast_in_dim.543, %broadcast_in_dim.544, %constant.1064, %constant.1064)
  %dynamic_update_slice.14 = f32[80,1024]{1,0} dynamic-update-slice(%get-tuple-element.441, %scatter.28, %sub.6, %constant.1064)
  %get-tuple-element.442 = f32[80,1]{1,0} get-tuple-element(%param.45), index=24
  %broadcast_in_dim.545 = f32[1,1]{1,0} reshape(%div.557)
  %dynamic_update_slice.15 = f32[80,1]{1,0} dynamic-update-slice(%get-tuple-element.442, %broadcast_in_dim.545, %sub.6, %constant.1064)
  %get-tuple-element.443 = f32[80,1024]{1,0} get-tuple-element(%param.45), index=25
  %squeeze.11 = f32[1024]{0} reshape(%dynamic_slice.61)
  %slice.438 = f32[1023]{0} slice(%squeeze.11), slice={[1:1024]}
  %slice.439 = f32[1,1]{1,0} slice(%dynamic_slice.61), slice={[0:1], [0:1]}
  %slice.441 = f32[1]{0} reshape(%slice.439)
  %concatenate.132 = f32[1024]{0} concatenate(%slice.438, %slice.441), dimensions={0}
  %broadcast_in_dim.546 = f32[1,1024]{1,0} reshape(%concatenate.132)
  %abs.35 = bf16[1,28672,64]{2,1,0} abs(%convert_element_type.448)
  %reduce.141 = bf16[] reduce(%abs.35, %constant.1436), dimensions={0,1,2}, to_apply=%region_64.2518
  %all-reduce.23 = bf16[] all-reduce(%reduce.141), channel_id=42, replica_groups=[2,128]<=[256], use_global_device_ids=true, to_apply=%region_64.2518.clone
  %convert_element_type.563 = f32[] convert(%all-reduce.23)
  %broadcast_in_dim.547 = f32[1,1]{1,0} reshape(%convert_element_type.563)
  %scatter.29 = f32[1,1024]{1,0} dynamic-update-slice(%broadcast_in_dim.546, %broadcast_in_dim.547, %constant.1064, %constant.1064)
  %dynamic_update_slice.16 = f32[80,1024]{1,0} dynamic-update-slice(%get-tuple-element.443, %scatter.29, %sub.6, %constant.1064)
  %get-tuple-element.444 = f32[80,1]{1,0} get-tuple-element(%param.45), index=26
  %broadcast_in_dim.548 = f32[1,1]{1,0} reshape(%div.504)
  %dynamic_update_slice.17 = f32[80,1]{1,0} dynamic-update-slice(%get-tuple-element.444, %broadcast_in_dim.548, %sub.6, %constant.1064)
  %get-tuple-element.445 = f32[80,1024]{1,0} get-tuple-element(%param.45), index=27
  %squeeze.12 = f32[1024]{0} reshape(%dynamic_slice.59)
  %slice.442 = f32[1023]{0} slice(%squeeze.12), slice={[1:1024]}
  %slice.443 = f32[1,1]{1,0} slice(%dynamic_slice.59), slice={[0:1], [0:1]}
  %slice.444 = f32[1]{0} reshape(%slice.443)
  %concatenate.133 = f32[1024]{0} concatenate(%slice.442, %slice.444), dimensions={0}
  %broadcast_in_dim.549 = f32[1,1024]{1,0} reshape(%concatenate.133)
  %abs.36 = bf16[2,8192,8192]{2,1,0} abs(%sharding_constraint.62)
  %reduce.142 = bf16[] reduce(%abs.36, %constant.1436), dimensions={0,1,2}, to_apply=%region_65.2536
  %all-reduce.24 = bf16[] all-reduce(%reduce.142), channel_id=43, replica_groups=[1,256]<=[256], use_global_device_ids=true, to_apply=%region_65.2536.clone
  %convert_element_type.565 = f32[] convert(%all-reduce.24)
  %broadcast_in_dim.550 = f32[1,1]{1,0} reshape(%convert_element_type.565)
  %scatter.30 = f32[1,1024]{1,0} dynamic-update-slice(%broadcast_in_dim.549, %broadcast_in_dim.550, %constant.1064, %constant.1064)
  %dynamic_update_slice.18 = f32[80,1024]{1,0} dynamic-update-slice(%get-tuple-element.445, %scatter.30, %sub.6, %constant.1064)
  %get-tuple-element.446 = f32[80,1]{1,0} get-tuple-element(%param.45), index=28
  %broadcast_in_dim.551 = f32[1,1]{1,0} reshape(%div.496)
  %dynamic_update_slice.19 = f32[80,1]{1,0} dynamic-update-slice(%get-tuple-element.446, %broadcast_in_dim.551, %sub.6, %constant.1064)
  %get-tuple-element.447 = f32[80,1024]{1,0} get-tuple-element(%param.45), index=29
  %squeeze.13 = f32[1024]{0} reshape(%dynamic_slice.42)
  %slice.445 = f32[1023]{0} slice(%squeeze.13), slice={[1:1024]}
  %slice.446 = f32[1,1]{1,0} slice(%dynamic_slice.42), slice={[0:1], [0:1]}
  %slice.447 = f32[1]{0} reshape(%slice.446)
  %concatenate.134 = f32[1024]{0} concatenate(%slice.445, %slice.447), dimensions={0}
  %broadcast_in_dim.552 = f32[1,1024]{1,0} reshape(%concatenate.134)
  %abs.37 = bf16[2,8192,8192]{2,1,0} abs(%sharding_constraint.54)
  %reduce.143 = bf16[] reduce(%abs.37, %constant.1436), dimensions={0,1,2}, to_apply=%region_66.2554
  %all-reduce.25 = bf16[] all-reduce(%reduce.143), channel_id=44, replica_groups=[1,256]<=[256], use_global_device_ids=true, to_apply=%region_66.2554.clone
  %convert_element_type.566 = f32[] convert(%all-reduce.25)
  %broadcast_in_dim.553 = f32[1,1]{1,0} reshape(%convert_element_type.566)
  %scatter.31 = f32[1,1024]{1,0} dynamic-update-slice(%broadcast_in_dim.552, %broadcast_in_dim.553, %constant.1064, %constant.1064)
  %dynamic_update_slice.20 = f32[80,1024]{1,0} dynamic-update-slice(%get-tuple-element.447, %scatter.31, %sub.6, %constant.1064)
  %get-tuple-element.448 = f32[80,1]{1,0} get-tuple-element(%param.45), index=30
  %broadcast_in_dim.554 = f32[1,1]{1,0} reshape(%div.439)
  %dynamic_update_slice.21 = f32[80,1]{1,0} dynamic-update-slice(%get-tuple-element.448, %broadcast_in_dim.554, %sub.6, %constant.1064)
  %get-tuple-element.449 = f32[80,1024]{1,0} get-tuple-element(%param.45), index=31
  %squeeze.14 = f32[1024]{0} reshape(%dynamic_slice.44)
  %slice.448 = f32[1023]{0} slice(%squeeze.14), slice={[1:1024]}
  %slice.449 = f32[1,1]{1,0} slice(%dynamic_slice.44), slice={[0:1], [0:1]}
  %slice.450 = f32[1]{0} reshape(%slice.449)
  %concatenate.135 = f32[1024]{0} concatenate(%slice.448, %slice.450), dimensions={0}
  %broadcast_in_dim.555 = f32[1,1024]{1,0} reshape(%concatenate.135)
  %abs.38 = bf16[1,64,8,128]{3,2,1,0} abs(%convert_element_type.383)
  %reduce.144 = bf16[] reduce(%abs.38, %constant.1436), dimensions={0,1,2,3}, to_apply=%region_67.2572
  %all-reduce.26 = bf16[] all-reduce(%reduce.144), channel_id=45, replica_groups=[2,128]<=[256], use_global_device_ids=true, to_apply=%region_67.2572.clone
  %convert_element_type.567 = f32[] convert(%all-reduce.26)
  %broadcast_in_dim.556 = f32[1,1]{1,0} reshape(%convert_element_type.567)
  %scatter.32 = f32[1,1024]{1,0} dynamic-update-slice(%broadcast_in_dim.555, %broadcast_in_dim.556, %constant.1064, %constant.1064)
  %dynamic_update_slice.22 = f32[80,1024]{1,0} dynamic-update-slice(%get-tuple-element.449, %scatter.32, %sub.6, %constant.1064)
  %get-tuple-element.450 = f32[80,1]{1,0} get-tuple-element(%param.45), index=32
  %broadcast_in_dim.557 = f32[1,1]{1,0} reshape(%div.447)
  %dynamic_update_slice.23 = f32[80,1]{1,0} dynamic-update-slice(%get-tuple-element.450, %broadcast_in_dim.557, %sub.6, %constant.1064)
  %get-tuple-element.451 = f32[80,1024]{1,0} get-tuple-element(%param.45), index=33
  %squeeze.15 = f32[1024]{0} reshape(%dynamic_slice.75)
  %slice.451 = f32[1023]{0} slice(%squeeze.15), slice={[1:1024]}
  %slice.452 = f32[1,1]{1,0} slice(%dynamic_slice.75), slice={[0:1], [0:1]}
  %slice.453 = f32[1]{0} reshape(%slice.452)
  %concatenate.136 = f32[1024]{0} concatenate(%slice.451, %slice.453), dimensions={0}
  %broadcast_in_dim.558 = f32[1,1024]{1,0} reshape(%concatenate.136)
  %abs.39 = bf16[2,8192,8,128]{3,2,1,0} abs(%add_any.24)
  %reduce.145 = bf16[] reduce(%abs.39, %constant.1436), dimensions={0,1,2,3}, to_apply=%region_68.2590
  %all-reduce.27 = bf16[] all-reduce(%reduce.145), channel_id=46, replica_groups=[1,256]<=[256], use_global_device_ids=true, to_apply=%region_68.2590.clone
  %convert_element_type.568 = f32[] convert(%all-reduce.27)
  %broadcast_in_dim.559 = f32[1,1]{1,0} reshape(%convert_element_type.568)
  %scatter.33 = f32[1,1024]{1,0} dynamic-update-slice(%broadcast_in_dim.558, %broadcast_in_dim.559, %constant.1064, %constant.1064)
  %dynamic_update_slice.24 = f32[80,1024]{1,0} dynamic-update-slice(%get-tuple-element.451, %scatter.33, %sub.6, %constant.1064)
  %get-tuple-element.452 = f32[80,1]{1,0} get-tuple-element(%param.45), index=34
  %broadcast_in_dim.560 = f32[1,1]{1,0} reshape(%div.546)
  %dynamic_update_slice.25 = f32[80,1]{1,0} dynamic-update-slice(%get-tuple-element.452, %broadcast_in_dim.560, %sub.6, %constant.1064)
  %get-tuple-element.453 = f32[80,1024]{1,0} get-tuple-element(%param.45), index=35
  %squeeze.16 = f32[1024]{0} reshape(%dynamic_slice.50)
  %slice.454 = f32[1023]{0} slice(%squeeze.16), slice={[1:1024]}
  %slice.455 = f32[1,1]{1,0} slice(%dynamic_slice.50), slice={[0:1], [0:1]}
  %slice.456 = f32[1]{0} reshape(%slice.455)
  %concatenate.137 = f32[1024]{0} concatenate(%slice.454, %slice.456), dimensions={0}
  %broadcast_in_dim.561 = f32[1,1024]{1,0} reshape(%concatenate.137)
  %abs.40 = bf16[2,8192,64,128]{3,2,1,0} abs(%sharding_constraint.59)
  %reduce.146 = bf16[] reduce(%abs.40, %constant.1436), dimensions={0,1,2,3}, to_apply=%region_69.2608
  %all-reduce.28 = bf16[] all-reduce(%reduce.146), channel_id=47, replica_groups=[1,256]<=[256], use_global_device_ids=true, to_apply=%region_69.2608.clone
  %convert_element_type.569 = f32[] convert(%all-reduce.28)
  %broadcast_in_dim.562 = f32[1,1]{1,0} reshape(%convert_element_type.569)
  %scatter.34 = f32[1,1024]{1,0} dynamic-update-slice(%broadcast_in_dim.561, %broadcast_in_dim.562, %constant.1064, %constant.1064)
  %dynamic_update_slice.26 = f32[80,1024]{1,0} dynamic-update-slice(%get-tuple-element.453, %scatter.34, %sub.6, %constant.1064)
  %get-tuple-element.504 = f32[80,1]{1,0} get-tuple-element(%param.45), index=36
  %broadcast_in_dim.563 = f32[1,1]{1,0} reshape(%div.473)
  %dynamic_update_slice.27 = f32[80,1]{1,0} dynamic-update-slice(%get-tuple-element.504, %broadcast_in_dim.563, %sub.6, %constant.1064)
  %get-tuple-element.505 = f32[80,1024]{1,0} get-tuple-element(%param.45), index=37
  %squeeze.17 = f32[1024]{0} reshape(%dynamic_slice.52)
  %slice.457 = f32[1023]{0} slice(%squeeze.17), slice={[1:1024]}
  %slice.458 = f32[1,1]{1,0} slice(%dynamic_slice.52), slice={[0:1], [0:1]}
  %slice.459 = f32[1]{0} reshape(%slice.458)
  %concatenate.138 = f32[1024]{0} concatenate(%slice.457, %slice.459), dimensions={0}
  %broadcast_in_dim.564 = f32[1,1024]{1,0} reshape(%concatenate.138)
  %abs.41 = bf16[1,64,128,64]{3,2,1,0} abs(%convert_element_type.419)
  %reduce.147 = bf16[] reduce(%abs.41, %constant.1436), dimensions={0,1,2,3}, to_apply=%region_70.2626
  %all-reduce.29 = bf16[] all-reduce(%reduce.147), channel_id=48, replica_groups=[2,128]<=[256], use_global_device_ids=true, to_apply=%region_70.2626.clone
  %convert_element_type.570 = f32[] convert(%all-reduce.29)
  %broadcast_in_dim.565 = f32[1,1]{1,0} reshape(%convert_element_type.570)
  %scatter.35 = f32[1,1024]{1,0} dynamic-update-slice(%broadcast_in_dim.564, %broadcast_in_dim.565, %constant.1064, %constant.1064)
  %dynamic_update_slice.28 = f32[80,1024]{1,0} dynamic-update-slice(%get-tuple-element.505, %scatter.35, %sub.6, %constant.1064)
  %get-tuple-element.506 = f32[80,1]{1,0} get-tuple-element(%param.45), index=38
  %broadcast_in_dim.566 = f32[1,1]{1,0} reshape(%div.478)
  %dynamic_update_slice.29 = f32[80,1]{1,0} dynamic-update-slice(%get-tuple-element.506, %broadcast_in_dim.566, %sub.6, %constant.1064)
  %get-tuple-element.507 = f32[80,1024]{1,0} get-tuple-element(%param.45), index=39
  %squeeze.18 = f32[1024]{0} reshape(%dynamic_slice.71)
  %slice.460 = f32[1023]{0} slice(%squeeze.18), slice={[1:1024]}
  %slice.461 = f32[1,1]{1,0} slice(%dynamic_slice.71), slice={[0:1], [0:1]}
  %slice.462 = f32[1]{0} reshape(%slice.461)
  %concatenate.139 = f32[1024]{0} concatenate(%slice.460, %slice.462), dimensions={0}
  %broadcast_in_dim.567 = f32[1,1024]{1,0} reshape(%concatenate.139)
  %abs.42 = bf16[2,8192,8192]{2,1,0} abs(%sharding_constraint.66)
  %reduce.148 = bf16[] reduce(%abs.42, %constant.1436), dimensions={0,1,2}, to_apply=%region_71.2644
  %all-reduce.30 = bf16[] all-reduce(%reduce.148), channel_id=49, replica_groups=[1,256]<=[256], use_global_device_ids=true, to_apply=%region_71.2644.clone
  %convert_element_type.571 = f32[] convert(%all-reduce.30)
  %broadcast_in_dim.568 = f32[1,1]{1,0} reshape(%convert_element_type.571)
  %scatter.36 = f32[1,1024]{1,0} dynamic-update-slice(%broadcast_in_dim.567, %broadcast_in_dim.568, %constant.1064, %constant.1064)
  %dynamic_update_slice.30 = f32[80,1024]{1,0} dynamic-update-slice(%get-tuple-element.507, %scatter.36, %sub.6, %constant.1064)
  %get-tuple-element.508 = f32[80,1]{1,0} get-tuple-element(%param.45), index=40
  %broadcast_in_dim.569 = f32[1,1]{1,0} reshape(%div.536)
  %dynamic_update_slice.31 = f32[80,1]{1,0} dynamic-update-slice(%get-tuple-element.508, %broadcast_in_dim.569, %sub.6, %constant.1064)
  %get-tuple-element.509 = f32[80,1024]{1,0} get-tuple-element(%param.45), index=41
  %squeeze.19 = f32[1024]{0} reshape(%dynamic_slice.38)
  %slice.463 = f32[1023]{0} slice(%squeeze.19), slice={[1:1024]}
  %slice.464 = f32[1,1]{1,0} slice(%dynamic_slice.38), slice={[0:1], [0:1]}
  %slice.465 = f32[1]{0} reshape(%slice.464)
  %concatenate.140 = f32[1024]{0} concatenate(%slice.463, %slice.465), dimensions={0}
  %broadcast_in_dim.570 = f32[1,1024]{1,0} reshape(%concatenate.140)
  %all-reduce.31 = bf16[] all-reduce(%reduce.143), channel_id=50, replica_groups=[1,256]<=[256], use_global_device_ids=true, to_apply=%region_72.2662.clone
  %convert_element_type.572 = f32[] convert(%all-reduce.31)
  %broadcast_in_dim.571 = f32[1,1]{1,0} reshape(%convert_element_type.572)
  %scatter.37 = f32[1,1024]{1,0} dynamic-update-slice(%broadcast_in_dim.570, %broadcast_in_dim.571, %constant.1064, %constant.1064)
  %dynamic_update_slice.32 = f32[80,1024]{1,0} dynamic-update-slice(%get-tuple-element.509, %scatter.37, %sub.6, %constant.1064)
  %get-tuple-element.510 = f32[80,1]{1,0} get-tuple-element(%param.45), index=42
  %broadcast_in_dim.572 = f32[1,1]{1,0} reshape(%div.417)
  %dynamic_update_slice.33 = f32[80,1]{1,0} dynamic-update-slice(%get-tuple-element.510, %broadcast_in_dim.572, %sub.6, %constant.1064)
  %get-tuple-element.511 = f32[80,1024]{1,0} get-tuple-element(%param.45), index=43
  %squeeze.20 = f32[1024]{0} reshape(%dynamic_slice.40)
  %slice.468 = f32[1023]{0} slice(%squeeze.20), slice={[1:1024]}
  %slice.471 = f32[1,1]{1,0} slice(%dynamic_slice.40), slice={[0:1], [0:1]}
  %slice.472 = f32[1]{0} reshape(%slice.471)
  %concatenate.141 = f32[1024]{0} concatenate(%slice.468, %slice.472), dimensions={0}
  %broadcast_in_dim.573 = f32[1,1024]{1,0} reshape(%concatenate.141)
  %abs.44 = bf16[1,64,64,128]{3,2,1,0} abs(%convert_element_type.361)
  %reduce.150 = bf16[] reduce(%abs.44, %constant.1436), dimensions={0,1,2,3}, to_apply=%region_73.2680
  %all-reduce.32 = bf16[] all-reduce(%reduce.150), channel_id=51, replica_groups=[2,128]<=[256], use_global_device_ids=true, to_apply=%region_73.2680.clone
  %convert_element_type.573 = f32[] convert(%all-reduce.32)
  %broadcast_in_dim.574 = f32[1,1]{1,0} reshape(%convert_element_type.573)
  %scatter.38 = f32[1,1024]{1,0} dynamic-update-slice(%broadcast_in_dim.573, %broadcast_in_dim.574, %constant.1064, %constant.1064)
  %dynamic_update_slice.34 = f32[80,1024]{1,0} dynamic-update-slice(%get-tuple-element.511, %scatter.38, %sub.6, %constant.1064)
  %get-tuple-element.512 = f32[80,1]{1,0} get-tuple-element(%param.45), index=44
  %broadcast_in_dim.575 = f32[1,1]{1,0} reshape(%div.423)
  %dynamic_update_slice.35 = f32[80,1]{1,0} dynamic-update-slice(%get-tuple-element.512, %broadcast_in_dim.575, %sub.6, %constant.1064)
  %get-tuple-element.513 = f32[80,1024]{1,0} get-tuple-element(%param.45), index=45
  %squeeze.21 = f32[1024]{0} reshape(%dynamic_slice.77)
  %slice.473 = f32[1023]{0} slice(%squeeze.21), slice={[1:1024]}
  %slice.474 = f32[1,1]{1,0} slice(%dynamic_slice.77), slice={[0:1], [0:1]}
  %slice.475 = f32[1]{0} reshape(%slice.474)
  %concatenate.142 = f32[1024]{0} concatenate(%slice.473, %slice.475), dimensions={0}
  %broadcast_in_dim.576 = f32[1,1024]{1,0} reshape(%concatenate.142)
  %abs.45 = bf16[2,8192,64,128]{3,2,1,0} abs(%add_any.29)
  %reduce.151 = bf16[] reduce(%abs.45, %constant.1436), dimensions={0,1,2,3}, to_apply=%region_74.2698
  %all-reduce.33 = bf16[] all-reduce(%reduce.151), channel_id=52, replica_groups=[1,256]<=[256], use_global_device_ids=true, to_apply=%region_74.2698.clone
  %convert_element_type.574 = f32[] convert(%all-reduce.33)
  %broadcast_in_dim.578 = f32[1,1]{1,0} reshape(%convert_element_type.574)
  %scatter.39 = f32[1,1024]{1,0} dynamic-update-slice(%broadcast_in_dim.576, %broadcast_in_dim.578, %constant.1064, %constant.1064)
  %dynamic_update_slice.36 = f32[80,1024]{1,0} dynamic-update-slice(%get-tuple-element.513, %scatter.39, %sub.6, %constant.1064)
  %get-tuple-element.514 = f32[80,1]{1,0} get-tuple-element(%param.45), index=46
  %broadcast_in_dim.579 = f32[1,1]{1,0} reshape(%div.551)
  %dynamic_update_slice.37 = f32[80,1]{1,0} dynamic-update-slice(%get-tuple-element.514, %broadcast_in_dim.579, %sub.6, %constant.1064)
  %get-tuple-element.515 = f32[80,1024]{1,0} get-tuple-element(%param.45), index=47
  %squeeze.22 = f32[1024]{0} reshape(%dynamic_slice.46)
  %slice.476 = f32[1023]{0} slice(%squeeze.22), slice={[1:1024]}
  %slice.477 = f32[1,1]{1,0} slice(%dynamic_slice.46), slice={[0:1], [0:1]}
  %slice.478 = f32[1]{0} reshape(%slice.477)
  %concatenate.143 = f32[1024]{0} concatenate(%slice.476, %slice.478), dimensions={0}
  %broadcast_in_dim.580 = f32[1,1024]{1,0} reshape(%concatenate.143)
  %all-reduce.34 = bf16[] all-reduce(%reduce.143), channel_id=53, replica_groups=[1,256]<=[256], use_global_device_ids=true, to_apply=%region_75.2716.clone
  %convert_element_type.575 = f32[] convert(%all-reduce.34)
  %broadcast_in_dim.581 = f32[1,1]{1,0} reshape(%convert_element_type.575)
  %scatter.40 = f32[1,1024]{1,0} dynamic-update-slice(%broadcast_in_dim.580, %broadcast_in_dim.581, %constant.1064, %constant.1064)
  %dynamic_update_slice.38 = f32[80,1024]{1,0} dynamic-update-slice(%get-tuple-element.515, %scatter.40, %sub.6, %constant.1064)
  %get-tuple-element.516 = f32[80,1]{1,0} get-tuple-element(%param.45), index=48
  %broadcast_in_dim.582 = f32[1,1]{1,0} reshape(%div.463)
  %dynamic_update_slice.39 = f32[80,1]{1,0} dynamic-update-slice(%get-tuple-element.516, %broadcast_in_dim.582, %sub.6, %constant.1064)
  %get-tuple-element.517 = f32[80,1024]{1,0} get-tuple-element(%param.45), index=49
  %squeeze.23 = f32[1024]{0} reshape(%dynamic_slice.48)
  %slice.479 = f32[1023]{0} slice(%squeeze.23), slice={[1:1024]}
  %slice.480 = f32[1,1]{1,0} slice(%dynamic_slice.48), slice={[0:1], [0:1]}
  %slice.481 = f32[1]{0} reshape(%slice.480)
  %concatenate.144 = f32[1024]{0} concatenate(%slice.479, %slice.481), dimensions={0}
  %broadcast_in_dim.583 = f32[1,1024]{1,0} reshape(%concatenate.144)
  %abs.47 = bf16[1,64,8,128]{3,2,1,0} abs(%convert_element_type.405)
  %reduce.153 = bf16[] reduce(%abs.47, %constant.1436), dimensions={0,1,2,3}, to_apply=%region_76.2734
  %all-reduce.35 = bf16[] all-reduce(%reduce.153), channel_id=54, replica_groups=[2,128]<=[256], use_global_device_ids=true, to_apply=%region_76.2734.clone
  %convert_element_type.576 = f32[] convert(%all-reduce.35)
  %broadcast_in_dim.584 = f32[1,1]{1,0} reshape(%convert_element_type.576)
  %scatter.41 = f32[1,1024]{1,0} dynamic-update-slice(%broadcast_in_dim.583, %broadcast_in_dim.584, %constant.1064, %constant.1064)
  %dynamic_update_slice.40 = f32[80,1024]{1,0} dynamic-update-slice(%get-tuple-element.517, %scatter.41, %sub.6, %constant.1064)
  %get-tuple-element.518 = f32[80,1]{1,0} get-tuple-element(%param.45), index=50
  %broadcast_in_dim.585 = f32[1,1]{1,0} reshape(%div.468)
  %dynamic_update_slice.41 = f32[80,1]{1,0} dynamic-update-slice(%get-tuple-element.518, %broadcast_in_dim.585, %sub.6, %constant.1064)
  %get-tuple-element.519 = f32[80,1024]{1,0} get-tuple-element(%param.45), index=51
  %squeeze.24 = f32[1024]{0} reshape(%dynamic_slice.73)
  %slice.482 = f32[1023]{0} slice(%squeeze.24), slice={[1:1024]}
  %slice.483 = f32[1,1]{1,0} slice(%dynamic_slice.73), slice={[0:1], [0:1]}
  %slice.484 = f32[1]{0} reshape(%slice.483)
  %concatenate.145 = f32[1024]{0} concatenate(%slice.482, %slice.484), dimensions={0}
  %broadcast_in_dim.587 = f32[1,1024]{1,0} reshape(%concatenate.145)
  %abs.48 = bf16[2,8192,8,128]{3,2,1,0} abs(%sharding_constraint.68)
  %reduce.154 = bf16[] reduce(%abs.48, %constant.1436), dimensions={0,1,2,3}, to_apply=%region_77.2752
  %all-reduce.36 = bf16[] all-reduce(%reduce.154), channel_id=55, replica_groups=[1,256]<=[256], use_global_device_ids=true, to_apply=%region_77.2752.clone
  %convert_element_type.577 = f32[] convert(%all-reduce.36)
  %broadcast_in_dim.588 = f32[1,1]{1,0} reshape(%convert_element_type.577)
  %scatter.42 = f32[1,1024]{1,0} dynamic-update-slice(%broadcast_in_dim.587, %broadcast_in_dim.588, %constant.1064, %constant.1064)
  %dynamic_update_slice.42 = f32[80,1024]{1,0} dynamic-update-slice(%get-tuple-element.519, %scatter.42, %sub.6, %constant.1064)
  %get-tuple-element.520 = f32[80,1]{1,0} get-tuple-element(%param.45), index=52
  %broadcast_in_dim.589 = f32[1,1]{1,0} reshape(%div.541)
  %dynamic_update_slice.43 = f32[80,1]{1,0} dynamic-update-slice(%get-tuple-element.520, %broadcast_in_dim.589, %sub.6, %constant.1064)
  ROOT %tuple.114 = (s32[], bf16[2,8192,8192]{2,1,0}, f32[80,64,28672]{2,1,0}, f32[80,64,28672]{2,1,0}, f32[80,28672,64]{2,1,0}, /*index=5*/f32[80,8192]{1,0}, f32[80,8192]{1,0}, f32[80,64,8,128]{3,2,1,0}, f32[80,64,128,64]{3,2,1,0}, f32[80,64,64,128]{3,2,1,0}, /*index=10*/f32[80,64,8,128]{3,2,1,0}, f32[80,1024]{1,0}, f32[80,1]{1,0}, f32[80,1024]{1,0}, f32[80,1]{1,0}, /*index=15*/f32[80,1024]{1,0}, f32[80,1]{1,0}, f32[80,1024]{1,0}, f32[80,1]{1,0}, f32[80,1024]{1,0}, /*index=20*/f32[80,1]{1,0}, f32[80,1024]{1,0}, f32[80,1]{1,0}, f32[80,1024]{1,0}, f32[80,1]{1,0}, /*index=25*/f32[80,1024]{1,0}, f32[80,1]{1,0}, f32[80,1024]{1,0}, f32[80,1]{1,0}, f32[80,1024]{1,0}, /*index=30*/f32[80,1]{1,0}, f32[80,1024]{1,0}, f32[80,1]{1,0}, f32[80,1024]{1,0}, f32[80,1]{1,0}, /*index=35*/f32[80,1024]{1,0}, f32[80,1]{1,0}, f32[80,1024]{1,0}, f32[80,1]{1,0}, f32[80,1024]{1,0}, /*index=40*/f32[80,1]{1,0}, f32[80,1024]{1,0}, f32[80,1]{1,0}, f32[80,1024]{1,0}, f32[80,1]{1,0}, /*index=45*/f32[80,1024]{1,0}, f32[80,1]{1,0}, f32[80,1024]{1,0}, f32[80,1]{1,0}, f32[80,1024]{1,0}, /*index=50*/f32[80,1]{1,0}, f32[80,1024]{1,0}, f32[80,1]{1,0}, bf16[80,2,8192,8192]{3,2,1,0}, f32[80,8192]{1,0}, /*index=55*/f32[80,1024]{1,0}, f32[80,1]{1,0}, f32[80,64,64,128]{3,2,1,0}, f32[80,1024]{1,0}, f32[80,1]{1,0}, /*index=60*/s32[2,8192]{1,0}, f32[80,1024]{1,0}, f32[80,1]{1,0}, f32[80,64,8,128]{3,2,1,0}, f32[80,1024]{1,0}, /*index=65*/f32[80,1]{1,0}, f32[80,1024]{1,0}, f32[80,1]{1,0}, f32[80,64,8,128]{3,2,1,0}, f32[80,1024]{1,0}, /*index=70*/f32[80,1]{1,0}, s32[2,8192]{1,0}, f32[80,1024]{1,0}, f32[80,1]{1,0}, f32[80,64,128,64]{3,2,1,0}, /*index=75*/f32[80,1024]{1,0}, f32[80,1]{1,0}, f32[80,8192]{1,0}, f32[80,1024]{1,0}, f32[80,1]{1,0}, /*index=80*/f32[80,64,28672]{2,1,0}, f32[80,1024]{1,0}, f32[80,1]{1,0}, f32[80,1024]{1,0}, f32[80,1]{1,0}, /*index=85*/f32[80,28672,64]{2,1,0}, f32[80,1024]{1,0}, f32[80,1]{1,0}, f32[80,1024]{1,0}, f32[80,1]{1,0}, /*index=90*/f32[80,64,28672]{2,1,0}, f32[80,1024]{1,0}, f32[80,1]{1,0}, f32[80,1024]{1,0}, f32[80,1]{1,0}, /*index=95*/f32[80,1024]{1,0}, f32[80,1]{1,0}, f32[80,1024]{1,0}, f32[80,1]{1,0}, f32[80,1024]{1,0}, /*index=100*/f32[80,1]{1,0}, f32[80,1024]{1,0}, f32[80,1]{1,0}, f32[80,1024]{1,0}, f32[80,1]{1,0}, /*index=105*/f32[80,1024]{1,0}, f32[80,1]{1,0}) tuple(%add.223, %sharding_constraint.74, %dynamic-update-slice.64, %dynamic-update-slice.65, %dynamic-update-slice.66, /*index=5*/%dynamic_update_slice.0, %dynamic_update_slice.1, %dynamic-update-slice.67, %dynamic-update-slice.68, %dynamic-update-slice.69, /*index=10*/%dynamic-update-slice.70, %dynamic_update_slice.2, %dynamic_update_slice.3, %dynamic_update_slice.4, %dynamic_update_slice.5, /*index=15*/%dynamic_update_slice.6, %dynamic_update_slice.7, %dynamic_update_slice.8, %dynamic_update_slice.9, %dynamic_update_slice.10, /*index=20*/%dynamic_update_slice.11, %dynamic_update_slice.12, %dynamic_update_slice.13, %dynamic_update_slice.14, %dynamic_update_slice.15, /*index=25*/%dynamic_update_slice.16, %dynamic_update_slice.17, %dynamic_update_slice.18, %dynamic_update_slice.19, %dynamic_update_slice.20, /*index=30*/%dynamic_update_slice.21, %dynamic_update_slice.22, %dynamic_update_slice.23, %dynamic_update_slice.24, %dynamic_update_slice.25, /*index=35*/%dynamic_update_slice.26, %dynamic_update_slice.27, %dynamic_update_slice.28, %dynamic_update_slice.29, %dynamic_update_slice.30, /*index=40*/%dynamic_update_slice.31, %dynamic_update_slice.32, %dynamic_update_slice.33, %dynamic_update_slice.34, %dynamic_update_slice.35, /*index=45*/%dynamic_update_slice.36, %dynamic_update_slice.37, %dynamic_update_slice.38, %dynamic_update_slice.39, %dynamic_update_slice.40, /*index=50*/%dynamic_update_slice.41, %dynamic_update_slice.42, %dynamic_update_slice.43, %get-tuple-element.310, %get-tuple-element.311, /*index=55*/%get-tuple-element.362, %get-tuple-element.363, %get-tuple-element.364, %get-tuple-element.365, %get-tuple-element.366, /*index=60*/%get-tuple-element.367, %get-tuple-element.368, %get-tuple-element.369, %get-tuple-element.370, %get-tuple-element.371, /*index=65*/%get-tuple-element.372, %get-tuple-element.373, %get-tuple-element.374, %get-tuple-element.375, %get-tuple-element.376, /*index=70*/%get-tuple-element.377, %get-tuple-element.378, %get-tuple-element.380, %get-tuple-element.381, %get-tuple-element.382, /*index=75*/%get-tuple-element.383, %get-tuple-element.384, %get-tuple-element.385, %get-tuple-element.386, %get-tuple-element.387, /*index=80*/%get-tuple-element.388, %get-tuple-element.389, %get-tuple-element.390, %get-tuple-element.391, %get-tuple-element.392, /*index=85*/%get-tuple-element.393, %get-tuple-element.394, %get-tuple-element.395, %get-tuple-element.396, %get-tuple-element.397, /*index=90*/%get-tuple-element.398, %get-tuple-element.399, %get-tuple-element.400, %get-tuple-element.401, %get-tuple-element.402, /*index=95*/%get-tuple-element.403, %get-tuple-element.404, %get-tuple-element.407, %get-tuple-element.408, %get-tuple-element.410, /*index=100*/%get-tuple-element.411, %get-tuple-element.413, %get-tuple-element.414, %get-tuple-element.416, %get-tuple-element.417, /*index=105*/%get-tuple-element.421, %get-tuple-element.422)
}

%region_78.2872_spmd (param.44: (s32[], bf16[2,8192,8192], f32[80,64,28672], f32[80,64,28672], f32[80,28672,64], /*index=5*/f32[80,8192], f32[80,8192], f32[80,64,8,128], f32[80,64,128,64], f32[80,64,64,128], /*index=10*/f32[80,64,8,128], f32[80,1024], f32[80,1], f32[80,1024], f32[80,1], /*index=15*/f32[80,1024], f32[80,1], f32[80,1024], f32[80,1], f32[80,1024], /*index=20*/f32[80,1], f32[80,1024], f32[80,1], f32[80,1024], f32[80,1], /*index=25*/f32[80,1024], f32[80,1], f32[80,1024], f32[80,1], f32[80,1024], /*index=30*/f32[80,1], f32[80,1024], f32[80,1], f32[80,1024], f32[80,1], /*index=35*/f32[80,1024], f32[80,1], f32[80,1024], f32[80,1], f32[80,1024], /*index=40*/f32[80,1], f32[80,1024], f32[80,1], f32[80,1024], f32[80,1], /*index=45*/f32[80,1024], f32[80,1], f32[80,1024], f32[80,1], f32[80,1024], /*index=50*/f32[80,1], f32[80,1024], f32[80,1], bf16[80,2,8192,8192], f32[80,8192], /*index=55*/f32[80,1024], f32[80,1], f32[80,64,64,128], f32[80,1024], f32[80,1], /*index=60*/s32[2,8192], f32[80,1024], f32[80,1], f32[80,64,8,128], f32[80,1024], /*index=65*/f32[80,1], f32[80,1024], f32[80,1], f32[80,64,8,128], f32[80,1024], /*index=70*/f32[80,1], s32[2,8192], f32[80,1024], f32[80,1], f32[80,64,128,64], /*index=75*/f32[80,1024], f32[80,1], f32[80,8192], f32[80,1024], f32[80,1], /*index=80*/f32[80,64,28672], f32[80,1024], f32[80,1], f32[80,1024], f32[80,1], /*index=85*/f32[80,28672,64], f32[80,1024], f32[80,1], f32[80,1024], f32[80,1], /*index=90*/f32[80,64,28672], f32[80,1024], f32[80,1], f32[80,1024], f32[80,1], /*index=95*/f32[80,1024], f32[80,1], f32[80,1024], f32[80,1], f32[80,1024], /*index=100*/f32[80,1], f32[80,1024], f32[80,1], f32[80,1024], f32[80,1], /*index=105*/f32[80,1024], f32[80,1])) -> pred[] {
  %param.44 = (s32[], bf16[2,8192,8192]{2,1,0}, f32[80,64,28672]{2,1,0}, f32[80,64,28672]{2,1,0}, f32[80,28672,64]{2,1,0}, /*index=5*/f32[80,8192]{1,0}, f32[80,8192]{1,0}, f32[80,64,8,128]{3,2,1,0}, f32[80,64,128,64]{3,2,1,0}, f32[80,64,64,128]{3,2,1,0}, /*index=10*/f32[80,64,8,128]{3,2,1,0}, f32[80,1024]{1,0}, f32[80,1]{1,0}, f32[80,1024]{1,0}, f32[80,1]{1,0}, /*index=15*/f32[80,1024]{1,0}, f32[80,1]{1,0}, f32[80,1024]{1,0}, f32[80,1]{1,0}, f32[80,1024]{1,0}, /*index=20*/f32[80,1]{1,0}, f32[80,1024]{1,0}, f32[80,1]{1,0}, f32[80,1024]{1,0}, f32[80,1]{1,0}, /*index=25*/f32[80,1024]{1,0}, f32[80,1]{1,0}, f32[80,1024]{1,0}, f32[80,1]{1,0}, f32[80,1024]{1,0}, /*index=30*/f32[80,1]{1,0}, f32[80,1024]{1,0}, f32[80,1]{1,0}, f32[80,1024]{1,0}, f32[80,1]{1,0}, /*index=35*/f32[80,1024]{1,0}, f32[80,1]{1,0}, f32[80,1024]{1,0}, f32[80,1]{1,0}, f32[80,1024]{1,0}, /*index=40*/f32[80,1]{1,0}, f32[80,1024]{1,0}, f32[80,1]{1,0}, f32[80,1024]{1,0}, f32[80,1]{1,0}, /*index=45*/f32[80,1024]{1,0}, f32[80,1]{1,0}, f32[80,1024]{1,0}, f32[80,1]{1,0}, f32[80,1024]{1,0}, /*index=50*/f32[80,1]{1,0}, f32[80,1024]{1,0}, f32[80,1]{1,0}, bf16[80,2,8192,8192]{3,2,1,0}, f32[80,8192]{1,0}, /*index=55*/f32[80,1024]{1,0}, f32[80,1]{1,0}, f32[80,64,64,128]{3,2,1,0}, f32[80,1024]{1,0}, f32[80,1]{1,0}, /*index=60*/s32[2,8192]{1,0}, f32[80,1024]{1,0}, f32[80,1]{1,0}, f32[80,64,8,128]{3,2,1,0}, f32[80,1024]{1,0}, /*index=65*/f32[80,1]{1,0}, f32[80,1024]{1,0}, f32[80,1]{1,0}, f32[80,64,8,128]{3,2,1,0}, f32[80,1024]{1,0}, /*index=70*/f32[80,1]{1,0}, s32[2,8192]{1,0}, f32[80,1024]{1,0}, f32[80,1]{1,0}, f32[80,64,128,64]{3,2,1,0}, /*index=75*/f32[80,1024]{1,0}, f32[80,1]{1,0}, f32[80,8192]{1,0}, f32[80,1024]{1,0}, f32[80,1]{1,0}, /*index=80*/f32[80,64,28672]{2,1,0}, f32[80,1024]{1,0}, f32[80,1]{1,0}, f32[80,1024]{1,0}, f32[80,1]{1,0}, /*index=85*/f32[80,28672,64]{2,1,0}, f32[80,1024]{1,0}, f32[80,1]{1,0}, f32[80,1024]{1,0}, f32[80,1]{1,0}, /*index=90*/f32[80,64,28672]{2,1,0}, f32[80,1024]{1,0}, f32[80,1]{1,0}, f32[80,1024]{1,0}, f32[80,1]{1,0}, /*index=95*/f32[80,1024]{1,0}, f32[80,1]{1,0}, f32[80,1024]{1,0}, f32[80,1]{1,0}, f32[80,1024]{1,0}, /*index=100*/f32[80,1]{1,0}, f32[80,1024]{1,0}, f32[80,1]{1,0}, f32[80,1024]{1,0}, f32[80,1]{1,0}, /*index=105*/f32[80,1024]{1,0}, f32[80,1]{1,0}) parameter(0)
  %get-tuple-element.307 = s32[] get-tuple-element(%param.44), index=0
  %constant.1059 = s32[] constant(80)
  ROOT %lt.20 = pred[] compare(%get-tuple-element.307, %constant.1059), direction=LT
}

%region_79.2960 (reduce_sum.2957: bf16[], reduce_sum.2958: bf16[]) -> bf16[] {
  %reduce_sum.2957 = bf16[] parameter(0)
  %reduce_sum.2958 = bf16[] parameter(1)
  ROOT %reduce_sum.2959 = bf16[] add(%reduce_sum.2957, %reduce_sum.2958)
}

%region_79.2960.clone (reduce_sum.369: bf16[], reduce_sum.370: bf16[]) -> bf16[] {
  %reduce_sum.369 = bf16[] parameter(0)
  %reduce_sum.370 = bf16[] parameter(1)
  ROOT %reduce_sum.371 = bf16[] add(%reduce_sum.369, %reduce_sum.370)
}

%region_80.2967 (reduce_sum.2964: f32[], reduce_sum.2965: f32[]) -> f32[] {
  %reduce_sum.2964 = f32[] parameter(0)
  %reduce_sum.2965 = f32[] parameter(1)
  ROOT %reduce_sum.2966 = f32[] add(%reduce_sum.2964, %reduce_sum.2965)
}

%region_81.2974 (reduce_sum.2971: f32[], reduce_sum.2972: f32[]) -> f32[] {
  %reduce_sum.2971 = f32[] parameter(0)
  %reduce_sum.2972 = f32[] parameter(1)
  ROOT %reduce_sum.2973 = f32[] add(%reduce_sum.2971, %reduce_sum.2972)
}

%region_81.2974.clone (reduce_sum.375: f32[], reduce_sum.377: f32[]) -> f32[] {
  %reduce_sum.375 = f32[] parameter(0)
  %reduce_sum.377 = f32[] parameter(1)
  ROOT %reduce_sum.378 = f32[] add(%reduce_sum.375, %reduce_sum.377)
}

%region_82.2982 (reduce_sum.2979: f32[], reduce_sum.2980: f32[]) -> f32[] {
  %reduce_sum.2979 = f32[] parameter(0)
  %reduce_sum.2980 = f32[] parameter(1)
  ROOT %reduce_sum.2981 = f32[] add(%reduce_sum.2979, %reduce_sum.2980)
}

%region_82.2982.clone (reduce_sum.379: f32[], reduce_sum.380: f32[]) -> f32[] {
  %reduce_sum.379 = f32[] parameter(0)
  %reduce_sum.380 = f32[] parameter(1)
  ROOT %reduce_sum.381 = f32[] add(%reduce_sum.379, %reduce_sum.380)
}

%region_83.2990 (reduce_sum.2987: f32[], reduce_sum.2988: f32[]) -> f32[] {
  %reduce_sum.2987 = f32[] parameter(0)
  %reduce_sum.2988 = f32[] parameter(1)
  ROOT %reduce_sum.2989 = f32[] add(%reduce_sum.2987, %reduce_sum.2988)
}

%region_83.2990.clone (reduce_sum.382: f32[], reduce_sum.383: f32[]) -> f32[] {
  %reduce_sum.382 = f32[] parameter(0)
  %reduce_sum.383 = f32[] parameter(1)
  ROOT %reduce_sum.384 = f32[] add(%reduce_sum.382, %reduce_sum.383)
}

%region_84.2998 (reduce_sum.2995: f32[], reduce_sum.2996: f32[]) -> f32[] {
  %reduce_sum.2995 = f32[] parameter(0)
  %reduce_sum.2996 = f32[] parameter(1)
  ROOT %reduce_sum.2997 = f32[] add(%reduce_sum.2995, %reduce_sum.2996)
}

%region_85.3006 (reduce_sum.3003: f32[], reduce_sum.3004: f32[]) -> f32[] {
  %reduce_sum.3003 = f32[] parameter(0)
  %reduce_sum.3004 = f32[] parameter(1)
  ROOT %reduce_sum.3005 = f32[] add(%reduce_sum.3003, %reduce_sum.3004)
}

%region_86.3014 (reduce_sum.3011: f32[], reduce_sum.3012: f32[]) -> f32[] {
  %reduce_sum.3011 = f32[] parameter(0)
  %reduce_sum.3012 = f32[] parameter(1)
  ROOT %reduce_sum.3013 = f32[] add(%reduce_sum.3011, %reduce_sum.3012)
}

%region_86.3014.clone (reduce_sum.385: f32[], reduce_sum.386: f32[]) -> f32[] {
  %reduce_sum.385 = f32[] parameter(0)
  %reduce_sum.386 = f32[] parameter(1)
  ROOT %reduce_sum.387 = f32[] add(%reduce_sum.385, %reduce_sum.386)
}

%region_87.3022 (reduce_sum.3019: f32[], reduce_sum.3020: f32[]) -> f32[] {
  %reduce_sum.3019 = f32[] parameter(0)
  %reduce_sum.3020 = f32[] parameter(1)
  ROOT %reduce_sum.3021 = f32[] add(%reduce_sum.3019, %reduce_sum.3020)
}

%region_87.3022.clone (reduce_sum.388: f32[], reduce_sum.389: f32[]) -> f32[] {
  %reduce_sum.388 = f32[] parameter(0)
  %reduce_sum.389 = f32[] parameter(1)
  ROOT %reduce_sum.390 = f32[] add(%reduce_sum.388, %reduce_sum.389)
}

%region_88.3030 (reduce_sum.3027: f32[], reduce_sum.3028: f32[]) -> f32[] {
  %reduce_sum.3027 = f32[] parameter(0)
  %reduce_sum.3028 = f32[] parameter(1)
  ROOT %reduce_sum.3029 = f32[] add(%reduce_sum.3027, %reduce_sum.3028)
}

%region_88.3030.clone (reduce_sum.391: f32[], reduce_sum.392: f32[]) -> f32[] {
  %reduce_sum.391 = f32[] parameter(0)
  %reduce_sum.392 = f32[] parameter(1)
  ROOT %reduce_sum.393 = f32[] add(%reduce_sum.391, %reduce_sum.392)
}

%region_89.3038 (reduce_sum.3035: f32[], reduce_sum.3036: f32[]) -> f32[] {
  %reduce_sum.3035 = f32[] parameter(0)
  %reduce_sum.3036 = f32[] parameter(1)
  ROOT %reduce_sum.3037 = f32[] add(%reduce_sum.3035, %reduce_sum.3036)
}

%region_89.3038.clone (reduce_sum.394: f32[], reduce_sum.395: f32[]) -> f32[] {
  %reduce_sum.394 = f32[] parameter(0)
  %reduce_sum.395 = f32[] parameter(1)
  ROOT %reduce_sum.396 = f32[] add(%reduce_sum.394, %reduce_sum.395)
}

%add.14.clone (x.29: bf16[], y.29: bf16[]) -> bf16[] {
  %x.29 = bf16[] parameter(0)
  %y.29 = bf16[] parameter(1)
  ROOT %add.244 = bf16[] add(%x.29, %y.29)
}

%add.15.clone (x.31: bf16[], y.31: bf16[]) -> bf16[] {
  %x.31 = bf16[] parameter(0)
  %y.31 = bf16[] parameter(1)
  ROOT %add.246 = bf16[] add(%x.31, %y.31)
}

%region_90.3047 (reduce_sum.3044: f32[], reduce_sum.3045: f32[]) -> f32[] {
  %reduce_sum.3044 = f32[] parameter(0)
  %reduce_sum.3045 = f32[] parameter(1)
  ROOT %reduce_sum.3046 = f32[] add(%reduce_sum.3044, %reduce_sum.3045)
}

%region_90.3047.clone (reduce_sum.397: f32[], reduce_sum.398: f32[]) -> f32[] {
  %reduce_sum.397 = f32[] parameter(0)
  %reduce_sum.398 = f32[] parameter(1)
  ROOT %reduce_sum.399 = f32[] add(%reduce_sum.397, %reduce_sum.398)
}

%add.16.clone (x.33: bf16[], y.33: bf16[]) -> bf16[] {
  %x.33 = bf16[] parameter(0)
  %y.33 = bf16[] parameter(1)
  ROOT %add.248 = bf16[] add(%x.33, %y.33)
}

%add.17.clone (x.35: bf16[], y.35: bf16[]) -> bf16[] {
  %x.35 = bf16[] parameter(0)
  %y.35 = bf16[] parameter(1)
  ROOT %add.250 = bf16[] add(%x.35, %y.35)
}

%region_91.3056 (reduce_sum.3053: f32[], reduce_sum.3054: f32[]) -> f32[] {
  %reduce_sum.3053 = f32[] parameter(0)
  %reduce_sum.3054 = f32[] parameter(1)
  ROOT %reduce_sum.3055 = f32[] add(%reduce_sum.3053, %reduce_sum.3054)
}

%region_91.3056.clone (reduce_sum.400: f32[], reduce_sum.401: f32[]) -> f32[] {
  %reduce_sum.400 = f32[] parameter(0)
  %reduce_sum.401 = f32[] parameter(1)
  ROOT %reduce_sum.402 = f32[] add(%reduce_sum.400, %reduce_sum.401)
}

%region_92.3387 (reduce_sum.3384: f32[], reduce_sum.3385: f32[]) -> f32[] {
  %reduce_sum.3384 = f32[] parameter(0)
  %reduce_sum.3385 = f32[] parameter(1)
  ROOT %reduce_sum.3386 = f32[] add(%reduce_sum.3384, %reduce_sum.3385)
}

%region_93.3393 (reduce_sum.3390: f32[], reduce_sum.3391: f32[]) -> f32[] {
  %reduce_sum.3390 = f32[] parameter(0)
  %reduce_sum.3391 = f32[] parameter(1)
  ROOT %reduce_sum.3392 = f32[] add(%reduce_sum.3390, %reduce_sum.3391)
}

%region_94.3400 (reduce_sum.3397: f32[], reduce_sum.3398: f32[]) -> f32[] {
  %reduce_sum.3397 = f32[] parameter(0)
  %reduce_sum.3398 = f32[] parameter(1)
  ROOT %reduce_sum.3399 = f32[] add(%reduce_sum.3397, %reduce_sum.3398)
}

%region_95.3407 (reduce_sum.3404: f32[], reduce_sum.3405: f32[]) -> f32[] {
  %reduce_sum.3404 = f32[] parameter(0)
  %reduce_sum.3405 = f32[] parameter(1)
  ROOT %reduce_sum.3406 = f32[] add(%reduce_sum.3404, %reduce_sum.3405)
}

%region_96.3414 (reduce_sum.3411: f32[], reduce_sum.3412: f32[]) -> f32[] {
  %reduce_sum.3411 = f32[] parameter(0)
  %reduce_sum.3412 = f32[] parameter(1)
  ROOT %reduce_sum.3413 = f32[] add(%reduce_sum.3411, %reduce_sum.3412)
}

%region_97.3421 (reduce_sum.3418: f32[], reduce_sum.3419: f32[]) -> f32[] {
  %reduce_sum.3418 = f32[] parameter(0)
  %reduce_sum.3419 = f32[] parameter(1)
  ROOT %reduce_sum.3420 = f32[] add(%reduce_sum.3418, %reduce_sum.3419)
}

%region_98.3428 (reduce_sum.3425: f32[], reduce_sum.3426: f32[]) -> f32[] {
  %reduce_sum.3425 = f32[] parameter(0)
  %reduce_sum.3426 = f32[] parameter(1)
  ROOT %reduce_sum.3427 = f32[] add(%reduce_sum.3425, %reduce_sum.3426)
}

%region_99.3435 (reduce_sum.3432: f32[], reduce_sum.3433: f32[]) -> f32[] {
  %reduce_sum.3432 = f32[] parameter(0)
  %reduce_sum.3433 = f32[] parameter(1)
  ROOT %reduce_sum.3434 = f32[] add(%reduce_sum.3432, %reduce_sum.3433)
}

%region_100.3442 (reduce_sum.3439: f32[], reduce_sum.3440: f32[]) -> f32[] {
  %reduce_sum.3439 = f32[] parameter(0)
  %reduce_sum.3440 = f32[] parameter(1)
  ROOT %reduce_sum.3441 = f32[] add(%reduce_sum.3439, %reduce_sum.3440)
}

%region_101.3449 (reduce_sum.3446: f32[], reduce_sum.3447: f32[]) -> f32[] {
  %reduce_sum.3446 = f32[] parameter(0)
  %reduce_sum.3447 = f32[] parameter(1)
  ROOT %reduce_sum.3448 = f32[] add(%reduce_sum.3446, %reduce_sum.3447)
}

%region_102.3456 (reduce_sum.3453: f32[], reduce_sum.3454: f32[]) -> f32[] {
  %reduce_sum.3453 = f32[] parameter(0)
  %reduce_sum.3454 = f32[] parameter(1)
  ROOT %reduce_sum.3455 = f32[] add(%reduce_sum.3453, %reduce_sum.3454)
}

%region_103.3463 (reduce_sum.3460: f32[], reduce_sum.3461: f32[]) -> f32[] {
  %reduce_sum.3460 = f32[] parameter(0)
  %reduce_sum.3461 = f32[] parameter(1)
  ROOT %reduce_sum.3462 = f32[] add(%reduce_sum.3460, %reduce_sum.3461)
}

%region_104.3470 (reduce_sum.3467: f32[], reduce_sum.3468: f32[]) -> f32[] {
  %reduce_sum.3467 = f32[] parameter(0)
  %reduce_sum.3468 = f32[] parameter(1)
  ROOT %reduce_sum.3469 = f32[] add(%reduce_sum.3467, %reduce_sum.3468)
}

%region_105.3477 (reduce_sum.3474: f32[], reduce_sum.3475: f32[]) -> f32[] {
  %reduce_sum.3474 = f32[] parameter(0)
  %reduce_sum.3475 = f32[] parameter(1)
  ROOT %reduce_sum.3476 = f32[] add(%reduce_sum.3474, %reduce_sum.3475)
}

%region_106.3484 (reduce_sum.3481: f32[], reduce_sum.3482: f32[]) -> f32[] {
  %reduce_sum.3481 = f32[] parameter(0)
  %reduce_sum.3482 = f32[] parameter(1)
  ROOT %reduce_sum.3483 = f32[] add(%reduce_sum.3481, %reduce_sum.3482)
}

%region_107.3491 (reduce_sum.3488: f32[], reduce_sum.3489: f32[]) -> f32[] {
  %reduce_sum.3488 = f32[] parameter(0)
  %reduce_sum.3489 = f32[] parameter(1)
  ROOT %reduce_sum.3490 = f32[] add(%reduce_sum.3488, %reduce_sum.3489)
}

%region_108.3498 (reduce_sum.3495: f32[], reduce_sum.3496: f32[]) -> f32[] {
  %reduce_sum.3495 = f32[] parameter(0)
  %reduce_sum.3496 = f32[] parameter(1)
  ROOT %reduce_sum.3497 = f32[] add(%reduce_sum.3495, %reduce_sum.3496)
}

%region_109.3505 (reduce_sum.3502: f32[], reduce_sum.3503: f32[]) -> f32[] {
  %reduce_sum.3502 = f32[] parameter(0)
  %reduce_sum.3503 = f32[] parameter(1)
  ROOT %reduce_sum.3504 = f32[] add(%reduce_sum.3502, %reduce_sum.3503)
}

%region_110.3512 (reduce_sum.3509: f32[], reduce_sum.3510: f32[]) -> f32[] {
  %reduce_sum.3509 = f32[] parameter(0)
  %reduce_sum.3510 = f32[] parameter(1)
  ROOT %reduce_sum.3511 = f32[] add(%reduce_sum.3509, %reduce_sum.3510)
}

%region_111.3519 (reduce_sum.3516: f32[], reduce_sum.3517: f32[]) -> f32[] {
  %reduce_sum.3516 = f32[] parameter(0)
  %reduce_sum.3517 = f32[] parameter(1)
  ROOT %reduce_sum.3518 = f32[] add(%reduce_sum.3516, %reduce_sum.3517)
}

%region_112.3526 (reduce_sum.3523: f32[], reduce_sum.3524: f32[]) -> f32[] {
  %reduce_sum.3523 = f32[] parameter(0)
  %reduce_sum.3524 = f32[] parameter(1)
  ROOT %reduce_sum.3525 = f32[] add(%reduce_sum.3523, %reduce_sum.3524)
}

%region_113.3533 (reduce_sum.3530: f32[], reduce_sum.3531: f32[]) -> f32[] {
  %reduce_sum.3530 = f32[] parameter(0)
  %reduce_sum.3531 = f32[] parameter(1)
  ROOT %reduce_sum.3532 = f32[] add(%reduce_sum.3530, %reduce_sum.3531)
}

%region_114.3540 (reduce_sum.3537: f32[], reduce_sum.3538: f32[]) -> f32[] {
  %reduce_sum.3537 = f32[] parameter(0)
  %reduce_sum.3538 = f32[] parameter(1)
  ROOT %reduce_sum.3539 = f32[] add(%reduce_sum.3537, %reduce_sum.3538)
}

%region_115.3547 (reduce_sum.3544: f32[], reduce_sum.3545: f32[]) -> f32[] {
  %reduce_sum.3544 = f32[] parameter(0)
  %reduce_sum.3545 = f32[] parameter(1)
  ROOT %reduce_sum.3546 = f32[] add(%reduce_sum.3544, %reduce_sum.3545)
}

%region_116.3554 (reduce_sum.3551: f32[], reduce_sum.3552: f32[]) -> f32[] {
  %reduce_sum.3551 = f32[] parameter(0)
  %reduce_sum.3552 = f32[] parameter(1)
  ROOT %reduce_sum.3553 = f32[] add(%reduce_sum.3551, %reduce_sum.3552)
}

%region_117.3561 (reduce_sum.3558: f32[], reduce_sum.3559: f32[]) -> f32[] {
  %reduce_sum.3558 = f32[] parameter(0)
  %reduce_sum.3559 = f32[] parameter(1)
  ROOT %reduce_sum.3560 = f32[] add(%reduce_sum.3558, %reduce_sum.3559)
}

%region_118.3568 (reduce_sum.3565: f32[], reduce_sum.3566: f32[]) -> f32[] {
  %reduce_sum.3565 = f32[] parameter(0)
  %reduce_sum.3566 = f32[] parameter(1)
  ROOT %reduce_sum.3567 = f32[] add(%reduce_sum.3565, %reduce_sum.3566)
}

%region_119.3575 (reduce_sum.3572: f32[], reduce_sum.3573: f32[]) -> f32[] {
  %reduce_sum.3572 = f32[] parameter(0)
  %reduce_sum.3573 = f32[] parameter(1)
  ROOT %reduce_sum.3574 = f32[] add(%reduce_sum.3572, %reduce_sum.3573)
}

%region_120.3582 (reduce_sum.3579: f32[], reduce_sum.3580: f32[]) -> f32[] {
  %reduce_sum.3579 = f32[] parameter(0)
  %reduce_sum.3580 = f32[] parameter(1)
  ROOT %reduce_sum.3581 = f32[] add(%reduce_sum.3579, %reduce_sum.3580)
}

%region_121.3589 (reduce_sum.3586: f32[], reduce_sum.14: f32[]) -> f32[] {
  %reduce_sum.3586 = f32[] parameter(0)
  %reduce_sum.14 = f32[] parameter(1)
  ROOT %reduce_sum.3588 = f32[] add(%reduce_sum.3586, %reduce_sum.14)
}

%region_122.3596 (reduce_sum.15: f32[], reduce_sum.3594: f32[]) -> f32[] {
  %reduce_sum.15 = f32[] parameter(0)
  %reduce_sum.3594 = f32[] parameter(1)
  ROOT %reduce_sum.3595 = f32[] add(%reduce_sum.15, %reduce_sum.3594)
}

%region_123.3603 (reduce_sum.16: f32[], reduce_sum.3601: f32[]) -> f32[] {
  %reduce_sum.16 = f32[] parameter(0)
  %reduce_sum.3601 = f32[] parameter(1)
  ROOT %reduce_sum.3602 = f32[] add(%reduce_sum.16, %reduce_sum.3601)
}

%region_124.3610 (reduce_sum.17: f32[], reduce_sum.3608: f32[]) -> f32[] {
  %reduce_sum.17 = f32[] parameter(0)
  %reduce_sum.3608 = f32[] parameter(1)
  ROOT %reduce_sum.3609 = f32[] add(%reduce_sum.17, %reduce_sum.3608)
}

%region_125.3617 (reduce_sum.18: f32[], reduce_sum.3615: f32[]) -> f32[] {
  %reduce_sum.18 = f32[] parameter(0)
  %reduce_sum.3615 = f32[] parameter(1)
  ROOT %reduce_sum.3616 = f32[] add(%reduce_sum.18, %reduce_sum.3615)
}

%region_126.3624 (reduce_sum.19: f32[], reduce_sum.3622: f32[]) -> f32[] {
  %reduce_sum.19 = f32[] parameter(0)
  %reduce_sum.3622 = f32[] parameter(1)
  ROOT %reduce_sum.3623 = f32[] add(%reduce_sum.19, %reduce_sum.3622)
}

%region_127.3631 (reduce_sum.20: f32[], reduce_sum.3629: f32[]) -> f32[] {
  %reduce_sum.20 = f32[] parameter(0)
  %reduce_sum.3629 = f32[] parameter(1)
  ROOT %reduce_sum.3630 = f32[] add(%reduce_sum.20, %reduce_sum.3629)
}

%region_128.3638 (reduce_sum.21: f32[], reduce_sum.3636: f32[]) -> f32[] {
  %reduce_sum.21 = f32[] parameter(0)
  %reduce_sum.3636 = f32[] parameter(1)
  ROOT %reduce_sum.3637 = f32[] add(%reduce_sum.21, %reduce_sum.3636)
}

%region_129.3645 (reduce_sum.22: f32[], reduce_sum.3643: f32[]) -> f32[] {
  %reduce_sum.22 = f32[] parameter(0)
  %reduce_sum.3643 = f32[] parameter(1)
  ROOT %reduce_sum.3644 = f32[] add(%reduce_sum.22, %reduce_sum.3643)
}

%region_130.3652 (reduce_sum.23: f32[], reduce_sum.3650: f32[]) -> f32[] {
  %reduce_sum.23 = f32[] parameter(0)
  %reduce_sum.3650 = f32[] parameter(1)
  ROOT %reduce_sum.3651 = f32[] add(%reduce_sum.23, %reduce_sum.3650)
}

%region_131.3659 (reduce_sum.24: f32[], reduce_sum.3657: f32[]) -> f32[] {
  %reduce_sum.24 = f32[] parameter(0)
  %reduce_sum.3657 = f32[] parameter(1)
  ROOT %reduce_sum.3658 = f32[] add(%reduce_sum.24, %reduce_sum.3657)
}

%region_132.3666 (reduce_sum.25: f32[], reduce_sum.3664: f32[]) -> f32[] {
  %reduce_sum.25 = f32[] parameter(0)
  %reduce_sum.3664 = f32[] parameter(1)
  ROOT %reduce_sum.3665 = f32[] add(%reduce_sum.25, %reduce_sum.3664)
}

%region_133.3673 (reduce_sum.3670: f32[], reduce_sum.3671: f32[]) -> f32[] {
  %reduce_sum.3670 = f32[] parameter(0)
  %reduce_sum.3671 = f32[] parameter(1)
  ROOT %reduce_sum.3672 = f32[] add(%reduce_sum.3670, %reduce_sum.3671)
}

%region_134.3680 (reduce_sum.3677: f32[], reduce_sum.3678: f32[]) -> f32[] {
  %reduce_sum.3677 = f32[] parameter(0)
  %reduce_sum.3678 = f32[] parameter(1)
  ROOT %reduce_sum.3679 = f32[] add(%reduce_sum.3677, %reduce_sum.3678)
}

%region_135.3687 (reduce_sum.3684: f32[], reduce_sum.3685: f32[]) -> f32[] {
  %reduce_sum.3684 = f32[] parameter(0)
  %reduce_sum.3685 = f32[] parameter(1)
  ROOT %reduce_sum.3686 = f32[] add(%reduce_sum.3684, %reduce_sum.3685)
}

%region_135.3687.clone (reduce_sum.403: f32[], reduce_sum.404: f32[]) -> f32[] {
  %reduce_sum.403 = f32[] parameter(0)
  %reduce_sum.404 = f32[] parameter(1)
  ROOT %reduce_sum.405 = f32[] add(%reduce_sum.403, %reduce_sum.404)
}

%region_136.3694 (reduce_sum.3691: f32[], reduce_sum.3692: f32[]) -> f32[] {
  %reduce_sum.3691 = f32[] parameter(0)
  %reduce_sum.3692 = f32[] parameter(1)
  ROOT %reduce_sum.3693 = f32[] add(%reduce_sum.3691, %reduce_sum.3692)
}

%region_136.3694.clone (reduce_sum.406: f32[], reduce_sum.407: f32[]) -> f32[] {
  %reduce_sum.406 = f32[] parameter(0)
  %reduce_sum.407 = f32[] parameter(1)
  ROOT %reduce_sum.408 = f32[] add(%reduce_sum.406, %reduce_sum.407)
}

%region_137.3701 (reduce_sum.3698: f32[], reduce_sum.3699: f32[]) -> f32[] {
  %reduce_sum.3698 = f32[] parameter(0)
  %reduce_sum.3699 = f32[] parameter(1)
  ROOT %reduce_sum.3700 = f32[] add(%reduce_sum.3698, %reduce_sum.3699)
}

%region_137.3701.clone (reduce_sum.409: f32[], reduce_sum.410: f32[]) -> f32[] {
  %reduce_sum.409 = f32[] parameter(0)
  %reduce_sum.410 = f32[] parameter(1)
  ROOT %reduce_sum.411 = f32[] add(%reduce_sum.409, %reduce_sum.410)
}

%region_138.3708 (reduce_sum.3705: f32[], reduce_sum.3706: f32[]) -> f32[] {
  %reduce_sum.3705 = f32[] parameter(0)
  %reduce_sum.3706 = f32[] parameter(1)
  ROOT %reduce_sum.3707 = f32[] add(%reduce_sum.3705, %reduce_sum.3706)
}

%region_139.3715 (reduce_sum.3712: f32[], reduce_sum.3713: f32[]) -> f32[] {
  %reduce_sum.3712 = f32[] parameter(0)
  %reduce_sum.3713 = f32[] parameter(1)
  ROOT %reduce_sum.3714 = f32[] add(%reduce_sum.3712, %reduce_sum.3713)
}

%region_140.3722 (reduce_sum.3719: f32[], reduce_sum.3720: f32[]) -> f32[] {
  %reduce_sum.3719 = f32[] parameter(0)
  %reduce_sum.3720 = f32[] parameter(1)
  ROOT %reduce_sum.3721 = f32[] add(%reduce_sum.3719, %reduce_sum.3720)
}

%region_140.3722.clone (reduce_sum.412: f32[], reduce_sum.413: f32[]) -> f32[] {
  %reduce_sum.412 = f32[] parameter(0)
  %reduce_sum.413 = f32[] parameter(1)
  ROOT %reduce_sum.414 = f32[] add(%reduce_sum.412, %reduce_sum.413)
}

%region_141.3729 (reduce_sum.3726: f32[], reduce_sum.3727: f32[]) -> f32[] {
  %reduce_sum.3726 = f32[] parameter(0)
  %reduce_sum.3727 = f32[] parameter(1)
  ROOT %reduce_sum.3728 = f32[] add(%reduce_sum.3726, %reduce_sum.3727)
}

%region_141.3729.clone (reduce_sum.415: f32[], reduce_sum.416: f32[]) -> f32[] {
  %reduce_sum.415 = f32[] parameter(0)
  %reduce_sum.416 = f32[] parameter(1)
  ROOT %reduce_sum.417 = f32[] add(%reduce_sum.415, %reduce_sum.416)
}

%region_142.3736 (reduce_sum.3733: f32[], reduce_sum.3734: f32[]) -> f32[] {
  %reduce_sum.3733 = f32[] parameter(0)
  %reduce_sum.3734 = f32[] parameter(1)
  ROOT %reduce_sum.3735 = f32[] add(%reduce_sum.3733, %reduce_sum.3734)
}

%region_142.3736.clone (reduce_sum.418: f32[], reduce_sum.419: f32[]) -> f32[] {
  %reduce_sum.418 = f32[] parameter(0)
  %reduce_sum.419 = f32[] parameter(1)
  ROOT %reduce_sum.420 = f32[] add(%reduce_sum.418, %reduce_sum.419)
}

%region_143.3743 (reduce_sum.3740: f32[], reduce_sum.3741: f32[]) -> f32[] {
  %reduce_sum.3740 = f32[] parameter(0)
  %reduce_sum.3741 = f32[] parameter(1)
  ROOT %reduce_sum.3742 = f32[] add(%reduce_sum.3740, %reduce_sum.3741)
}

%region_143.3743.clone (reduce_sum.421: f32[], reduce_sum.422: f32[]) -> f32[] {
  %reduce_sum.421 = f32[] parameter(0)
  %reduce_sum.422 = f32[] parameter(1)
  ROOT %reduce_sum.423 = f32[] add(%reduce_sum.421, %reduce_sum.422)
}

%region_144.3750 (reduce_sum.3747: f32[], reduce_sum.3748: f32[]) -> f32[] {
  %reduce_sum.3747 = f32[] parameter(0)
  %reduce_sum.3748 = f32[] parameter(1)
  ROOT %reduce_sum.3749 = f32[] add(%reduce_sum.3747, %reduce_sum.3748)
}

%region_144.3750.clone (reduce_sum.424: f32[], reduce_sum.425: f32[]) -> f32[] {
  %reduce_sum.424 = f32[] parameter(0)
  %reduce_sum.425 = f32[] parameter(1)
  ROOT %reduce_sum.426 = f32[] add(%reduce_sum.424, %reduce_sum.425)
}

%region_145.3757 (reduce_sum.3754: f32[], reduce_sum.3755: f32[]) -> f32[] {
  %reduce_sum.3754 = f32[] parameter(0)
  %reduce_sum.3755 = f32[] parameter(1)
  ROOT %reduce_sum.3756 = f32[] add(%reduce_sum.3754, %reduce_sum.3755)
}

%region_145.3757.clone (reduce_sum.427: f32[], reduce_sum.428: f32[]) -> f32[] {
  %reduce_sum.427 = f32[] parameter(0)
  %reduce_sum.428 = f32[] parameter(1)
  ROOT %reduce_sum.429 = f32[] add(%reduce_sum.427, %reduce_sum.428)
}

%region_146.3769 (reduce_sum.3766: f32[], reduce_sum.3767: f32[]) -> f32[] {
  %reduce_sum.3766 = f32[] parameter(0)
  %reduce_sum.3767 = f32[] parameter(1)
  ROOT %reduce_sum.3768 = f32[] add(%reduce_sum.3766, %reduce_sum.3767)
}

%region_147.3780 (reduce_sum.3777: f32[], reduce_sum.3778: f32[]) -> f32[] {
  %reduce_sum.3777 = f32[] parameter(0)
  %reduce_sum.3778 = f32[] parameter(1)
  ROOT %reduce_sum.3779 = f32[] add(%reduce_sum.3777, %reduce_sum.3778)
}

%region_147.3780.clone (reduce_sum.430: f32[], reduce_sum.431: f32[]) -> f32[] {
  %reduce_sum.430 = f32[] parameter(0)
  %reduce_sum.431 = f32[] parameter(1)
  ROOT %reduce_sum.432 = f32[] add(%reduce_sum.430, %reduce_sum.431)
}

%region_190.4080 (reduce_sum.61: f32[], reduce_sum.62: f32[]) -> f32[] {
  %reduce_sum.61 = f32[] parameter(0)
  %reduce_sum.62 = f32[] parameter(1)
  ROOT %reduce_sum.63 = f32[] add(%reduce_sum.61, %reduce_sum.62)
}

%region_191.4087 (reduce_sum.64: f32[], reduce_sum.65: f32[]) -> f32[] {
  %reduce_sum.64 = f32[] parameter(0)
  %reduce_sum.65 = f32[] parameter(1)
  ROOT %reduce_sum.66 = f32[] add(%reduce_sum.64, %reduce_sum.65)
}

%region_191.4087.clone (reduce_sum.433: f32[], reduce_sum.434: f32[]) -> f32[] {
  %reduce_sum.433 = f32[] parameter(0)
  %reduce_sum.434 = f32[] parameter(1)
  ROOT %reduce_sum.438 = f32[] add(%reduce_sum.433, %reduce_sum.434)
}

%region_192.4094 (reduce_sum.67: f32[], reduce_sum.68: f32[]) -> f32[] {
  %reduce_sum.67 = f32[] parameter(0)
  %reduce_sum.68 = f32[] parameter(1)
  ROOT %reduce_sum.69 = f32[] add(%reduce_sum.67, %reduce_sum.68)
}

%region_192.4094.clone (reduce_sum.440: f32[], reduce_sum.441: f32[]) -> f32[] {
  %reduce_sum.440 = f32[] parameter(0)
  %reduce_sum.441 = f32[] parameter(1)
  ROOT %reduce_sum.442 = f32[] add(%reduce_sum.440, %reduce_sum.441)
}

%region_193.4101 (reduce_sum.70: f32[], reduce_sum.71: f32[]) -> f32[] {
  %reduce_sum.70 = f32[] parameter(0)
  %reduce_sum.71 = f32[] parameter(1)
  ROOT %reduce_sum.72 = f32[] add(%reduce_sum.70, %reduce_sum.71)
}

%region_193.4101.clone (reduce_sum.446: f32[], reduce_sum.448: f32[]) -> f32[] {
  %reduce_sum.446 = f32[] parameter(0)
  %reduce_sum.448 = f32[] parameter(1)
  ROOT %reduce_sum.449 = f32[] add(%reduce_sum.446, %reduce_sum.448)
}

%region_194.4108 (reduce_sum.73: f32[], reduce_sum.74: f32[]) -> f32[] {
  %reduce_sum.73 = f32[] parameter(0)
  %reduce_sum.74 = f32[] parameter(1)
  ROOT %reduce_sum.75 = f32[] add(%reduce_sum.73, %reduce_sum.74)
}

%region_195.4115 (reduce_sum.76: f32[], reduce_sum.77: f32[]) -> f32[] {
  %reduce_sum.76 = f32[] parameter(0)
  %reduce_sum.77 = f32[] parameter(1)
  ROOT %reduce_sum.78 = f32[] add(%reduce_sum.76, %reduce_sum.77)
}

%region_196.4122 (reduce_sum.79: f32[], reduce_sum.80: f32[]) -> f32[] {
  %reduce_sum.79 = f32[] parameter(0)
  %reduce_sum.80 = f32[] parameter(1)
  ROOT %reduce_sum.81 = f32[] add(%reduce_sum.79, %reduce_sum.80)
}

%region_196.4122.clone (reduce_sum.450: f32[], reduce_sum.451: f32[]) -> f32[] {
  %reduce_sum.450 = f32[] parameter(0)
  %reduce_sum.451 = f32[] parameter(1)
  ROOT %reduce_sum.452 = f32[] add(%reduce_sum.450, %reduce_sum.451)
}

%region_197.4129 (reduce_sum.82: f32[], reduce_sum.83: f32[]) -> f32[] {
  %reduce_sum.82 = f32[] parameter(0)
  %reduce_sum.83 = f32[] parameter(1)
  ROOT %reduce_sum.84 = f32[] add(%reduce_sum.82, %reduce_sum.83)
}

%region_197.4129.clone (reduce_sum.453: f32[], reduce_sum.454: f32[]) -> f32[] {
  %reduce_sum.453 = f32[] parameter(0)
  %reduce_sum.454 = f32[] parameter(1)
  ROOT %reduce_sum.455 = f32[] add(%reduce_sum.453, %reduce_sum.454)
}

%region_198.4136 (reduce_sum.85: f32[], reduce_sum.86: f32[]) -> f32[] {
  %reduce_sum.85 = f32[] parameter(0)
  %reduce_sum.86 = f32[] parameter(1)
  ROOT %reduce_sum.87 = f32[] add(%reduce_sum.85, %reduce_sum.86)
}

%region_198.4136.clone (reduce_sum.456: f32[], reduce_sum.457: f32[]) -> f32[] {
  %reduce_sum.456 = f32[] parameter(0)
  %reduce_sum.457 = f32[] parameter(1)
  ROOT %reduce_sum.458 = f32[] add(%reduce_sum.456, %reduce_sum.457)
}

%region_199.4143 (reduce_sum.88: f32[], reduce_sum.89: f32[]) -> f32[] {
  %reduce_sum.88 = f32[] parameter(0)
  %reduce_sum.89 = f32[] parameter(1)
  ROOT %reduce_sum.90 = f32[] add(%reduce_sum.88, %reduce_sum.89)
}

%region_199.4143.clone (reduce_sum.459: f32[], reduce_sum.460: f32[]) -> f32[] {
  %reduce_sum.459 = f32[] parameter(0)
  %reduce_sum.460 = f32[] parameter(1)
  ROOT %reduce_sum.461 = f32[] add(%reduce_sum.459, %reduce_sum.460)
}

%region_200.4150 (reduce_sum.91: f32[], reduce_sum.92: f32[]) -> f32[] {
  %reduce_sum.91 = f32[] parameter(0)
  %reduce_sum.92 = f32[] parameter(1)
  ROOT %reduce_sum.93 = f32[] add(%reduce_sum.91, %reduce_sum.92)
}

%region_200.4150.clone (reduce_sum.462: f32[], reduce_sum.463: f32[]) -> f32[] {
  %reduce_sum.462 = f32[] parameter(0)
  %reduce_sum.463 = f32[] parameter(1)
  ROOT %reduce_sum.464 = f32[] add(%reduce_sum.462, %reduce_sum.463)
}

%region_201.4157 (reduce_sum.94: f32[], reduce_sum.98: f32[]) -> f32[] {
  %reduce_sum.94 = f32[] parameter(0)
  %reduce_sum.98 = f32[] parameter(1)
  ROOT %reduce_sum.99 = f32[] add(%reduce_sum.94, %reduce_sum.98)
}

%region_201.4157.clone (reduce_sum.465: f32[], reduce_sum.466: f32[]) -> f32[] {
  %reduce_sum.465 = f32[] parameter(0)
  %reduce_sum.466 = f32[] parameter(1)
  ROOT %reduce_sum.467 = f32[] add(%reduce_sum.465, %reduce_sum.466)
}

%region_245.4465.clone (reduce_sum.468: f32[], reduce_sum.469: f32[]) -> f32[] {
  %reduce_sum.468 = f32[] parameter(0)
  %reduce_sum.469 = f32[] parameter(1)
  ROOT %reduce_sum.470 = f32[] add(%reduce_sum.468, %reduce_sum.469)
}

%region_246.4472.clone (reduce_sum.471: f32[], reduce_sum.472: f32[]) -> f32[] {
  %reduce_sum.471 = f32[] parameter(0)
  %reduce_sum.472 = f32[] parameter(1)
  ROOT %reduce_sum.473 = f32[] add(%reduce_sum.471, %reduce_sum.472)
}

%region_247.4479.clone (reduce_sum.474: f32[], reduce_sum.475: f32[]) -> f32[] {
  %reduce_sum.474 = f32[] parameter(0)
  %reduce_sum.475 = f32[] parameter(1)
  ROOT %reduce_sum.476 = f32[] add(%reduce_sum.474, %reduce_sum.475)
}

%region_250.4500.clone (reduce_sum.477: f32[], reduce_sum.478: f32[]) -> f32[] {
  %reduce_sum.477 = f32[] parameter(0)
  %reduce_sum.478 = f32[] parameter(1)
  ROOT %reduce_sum.479 = f32[] add(%reduce_sum.477, %reduce_sum.478)
}

%region_251.4507.clone (reduce_sum.480: f32[], reduce_sum.481: f32[]) -> f32[] {
  %reduce_sum.480 = f32[] parameter(0)
  %reduce_sum.481 = f32[] parameter(1)
  ROOT %reduce_sum.482 = f32[] add(%reduce_sum.480, %reduce_sum.481)
}

%region_252.4514.clone (reduce_sum.483: f32[], reduce_sum.484: f32[]) -> f32[] {
  %reduce_sum.483 = f32[] parameter(0)
  %reduce_sum.484 = f32[] parameter(1)
  ROOT %reduce_sum.485 = f32[] add(%reduce_sum.483, %reduce_sum.484)
}

%region_253.4521.clone (reduce_sum.486: f32[], reduce_sum.487: f32[]) -> f32[] {
  %reduce_sum.486 = f32[] parameter(0)
  %reduce_sum.487 = f32[] parameter(1)
  ROOT %reduce_sum.488 = f32[] add(%reduce_sum.486, %reduce_sum.487)
}

%region_254.4528.clone (reduce_sum.489: f32[], reduce_sum.490: f32[]) -> f32[] {
  %reduce_sum.489 = f32[] parameter(0)
  %reduce_sum.490 = f32[] parameter(1)
  ROOT %reduce_sum.491 = f32[] add(%reduce_sum.489, %reduce_sum.490)
}

%region_255.4535.clone (reduce_sum.492: f32[], reduce_sum.493: f32[]) -> f32[] {
  %reduce_sum.492 = f32[] parameter(0)
  %reduce_sum.493 = f32[] parameter(1)
  ROOT %reduce_sum.494 = f32[] add(%reduce_sum.492, %reduce_sum.493)
}

ENTRY %main.4628_spmd (param.46: s32[], param.74: f32[80,1024], param.75: f32[80,1], param.77: f32[80,1024], param.78: f32[80,1], param.96: f32[80,1024], param.97: f32[80,1], param.79: f32[80,1024], param.80: f32[80,1], param.82: f32[80,1024], param.83: f32[80,1], param.94: f32[80,1024], param.95: f32[80,1], param.84: f32[80,1024], param.85: f32[80,1], param.87: f32[80,1024], param.88: f32[80,1], param.92: f32[80,1024], param.93: f32[80,1], param.57: f32[80,1024], param.58: f32[80,1], param.60: f32[80,1024], param.61: f32[80,1], param.102: f32[80,1024], param.103: f32[80,1], param.68: f32[80,1024], param.69: f32[80,1], param.71: f32[80,1024], param.72: f32[80,1], param.98: f32[80,1024], param.99: f32[80,1], param.51: f32[80,1024], param.52: f32[80,1], param.54: f32[80,1024], param.55: f32[80,1], param.104: f32[80,1024], param.105: f32[80,1], param.62: f32[80,1024], param.63: f32[80,1], param.65: f32[80,1024], param.66: f32[80,1], param.100: f32[80,1024], param.101: f32[80,1], param.89: f32[8192], param.76: f32[64,80,28672], param.81: f32[64,80,28672], param.86: f32[28672,80,64], param.73: f32[8192,80], param.50: f32[8192,80], param.59: f32[64,80,8,128], param.70: f32[64,80,128,64], param.53: f32[64,80,64,128], param.64: f32[64,80,8,128], param.90: f32[64,128256], param.49: f32[128256,64], param.108: s32[], param.107: f32[8192], param.110: f32[64,80,28672], param.112: f32[64,80,28672], param.114: f32[28672,80,64], param.116: f32[8192,80], param.118: f32[8192,80], param.120: f32[64,80,8,128], param.122: f32[64,80,128,64], param.124: f32[64,80,64,128], param.126: f32[64,80,8,128], param.128: f32[64,128256], param.130: f32[128256,64], param.109: f32[8192], param.111: f32[64,80,28672], param.113: f32[64,80,28672], param.115: f32[28672,80,64], param.117: f32[8192,80], param.119: f32[8192,80], param.121: f32[64,80,8,128], param.123: f32[64,80,128,64], param.125: f32[64,80,64,128], param.127: f32[64,80,8,128], param.129: f32[64,128256], param.131: f32[128256,64], param.106: s32[], param.48: s32[2,8192], param.56: s32[2,8192], param.67: s32[2,8192], param.91: s32[2,8192], param.47: s32[2,8192]) -> (s32[], f32[80,1024], f32[80,1], f32[80,1024], f32[80,1], /*index=5*/f32[80,1024], f32[80,1], f32[80,1024], f32[80,1], f32[80,1024], /*index=10*/f32[80,1], f32[80,1024], f32[80,1], f32[80,1024], f32[80,1], /*index=15*/f32[80,1024], f32[80,1], f32[80,1024], f32[80,1], f32[80,1024], /*index=20*/f32[80,1], f32[80,1024], f32[80,1], f32[80,1024], f32[80,1], /*index=25*/f32[80,1024], f32[80,1], f32[80,1024], f32[80,1], f32[80,1024], /*index=30*/f32[80,1], f32[80,1024], f32[80,1], f32[80,1024], f32[80,1], /*index=35*/f32[80,1024], f32[80,1], f32[80,1024], f32[80,1], f32[80,1024], /*index=40*/f32[80,1], f32[80,1024], f32[80,1], f32[8192], f32[64,80,28672], /*index=45*/f32[64,80,28672], f32[28672,80,64], f32[8192,80], f32[8192,80], f32[64,80,8,128], /*index=50*/f32[64,80,128,64], f32[64,80,64,128], f32[64,80,8,128], f32[64,128256], f32[128256,64], /*index=55*/s32[], f32[8192], f32[64,80,28672], f32[64,80,28672], f32[28672,80,64], /*index=60*/f32[8192,80], f32[8192,80], f32[64,80,8,128], f32[64,80,128,64], f32[64,80,64,128], /*index=65*/f32[64,80,8,128], f32[64,128256], f32[128256,64], f32[8192], f32[64,80,28672], /*index=70*/f32[64,80,28672], f32[28672,80,64], f32[8192,80], f32[8192,80], f32[64,80,8,128], /*index=75*/f32[64,80,128,64], f32[64,80,64,128], f32[64,80,8,128], f32[64,128256], f32[128256,64], /*index=80*/s32[], f32[], f32[], f32[], f32[], /*index=85*/f32[], f32[], s32[]) {
  %param.46 = s32[] parameter(0), sharding={replicated}
  %constant.1437 = s32[] constant(1)
  %add.251 = s32[] add(%param.46, %constant.1437)
  %constant.1438 = s32[] constant(0)
  %param.47 = s32[2,8192]{1,0} parameter(85), sharding={devices=[256,1]<=[256]}
  %broadcast.875 = s32[2,8192]{1,0} broadcast(%constant.1438), dimensions={}
  %ne.35 = pred[2,8192]{1,0} compare(%param.47, %broadcast.875), direction=NE
  %constant.1439 = f32[] constant(1)
  %convert_element_type.578 = s32[2,8192]{1,0} convert(%ne.35)
  %reduce.155 = s32[] reduce(%convert_element_type.578, %constant.1438), dimensions={0,1}, to_apply=%region_0.98
  %all-reduce.37 = s32[] all-reduce(%reduce.155), channel_id=1, replica_groups=[1,256]<=[256], use_global_device_ids=true, to_apply=%region_0.98.clone
  %convert_element_type.579 = f32[] convert(%all-reduce.37)
  %constant.1440 = f32[] constant(1e-08)
  %add.252 = f32[] add(%convert_element_type.579, %constant.1440)
  %div.559 = f32[] divide(%constant.1439, %add.252)
  %broadcast_in_dim.590 = f32[2,8192]{1,0} broadcast(%div.559), dimensions={}
  %constant.1441 = f32[] constant(0)
  %broadcast.876 = f32[2,8192]{1,0} broadcast(%constant.1441), dimensions={}
  %mul.466 = f32[2,8192]{1,0} select(%ne.35, %broadcast_in_dim.590, %broadcast.876)
  %sharding_constraint.76 = f32[2,8192]{1,0} copy(%mul.466)
  %mul.467 = f32[2,8192,128256]{2,1,0} broadcast(%sharding_constraint.76), dimensions={0,1}
  %param.48 = s32[2,8192]{1,0} parameter(81), sharding={devices=[256,1]<=[256]}
  %eq.39 = s32[2,8192,128256]{2,1,0} broadcast(%param.48), dimensions={0,1}
  %iota.30 = s32[2,8192,128256]{2,1,0} iota(), iota_dimension=2
  %eq.40 = pred[2,8192,128256]{2,1,0} compare(%eq.39, %iota.30), direction=EQ
  %convert_element_type.580 = bf16[2,8192,128256]{2,1,0} convert(%eq.40)
  %param.49 = f32[128256,64]{1,0} parameter(54), sharding={devices=[1,128,2]<=[2,128]T(1,0) last_tile_dim_replicate}
  %convert_element_type.581 = bf16[128256,64]{1,0} convert(%param.49)
  %all-gather.15 = bf16[128256,8192]{1,0} all-gather(%convert_element_type.581), channel_id=2, replica_groups=[2,128]<=[256], dimensions={1}, use_global_device_ids=true
  %dot.32 = bf16[2,8192,8192]{2,1,0} dot(%convert_element_type.580, %all-gather.15), lhs_contracting_dims={2}, rhs_contracting_dims={0}
  %sharding_constraint.77 = bf16[2,8192,8192]{2,1,0} copy(%dot.32)
  %constant.1442 = bf16[] constant(0)
  %broadcast_in_dim.591 = bf16[80,2,8192,8192]{3,2,1,0} broadcast(%constant.1442), dimensions={}
  %param.50 = f32[8192,80]{1,0} parameter(48), sharding={replicated}
  %transpose.56 = f32[80,8192]{0,1} transpose(%param.50), dimensions={1,0}
  %param.51 = f32[80,1024]{1,0} parameter(31), sharding={replicated}
  %state.110 = f32[80,1024]{1,0} copy(%param.51)
  %param.52 = f32[80,1]{1,0} parameter(32), sharding={replicated}
  %state.111 = f32[80,1]{1,0} copy(%param.52)
  %param.53 = f32[64,80,64,128]{3,2,1,0} parameter(51), sharding={devices=[128,1,1,1,2]<=[2,128]T(1,0) last_tile_dim_replicate}
  %transpose.57 = f32[80,64,64,128]{3,2,0,1} transpose(%param.53), dimensions={1,0,2,3}
  %param.54 = f32[80,1024]{1,0} parameter(33), sharding={replicated}
  %state.112 = f32[80,1024]{1,0} copy(%param.54)
  %param.55 = f32[80,1]{1,0} parameter(34), sharding={replicated}
  %state.113 = f32[80,1]{1,0} copy(%param.55)
  %param.56 = s32[2,8192]{1,0} parameter(82), sharding={devices=[256,1]<=[256]}
  %convert_element_type.582 = f32[2,8192]{1,0} convert(%param.56)
  %div.560 = f32[2,8192,1,128]{3,2,1,0} broadcast(%convert_element_type.582), dimensions={0,1}
  %broadcast.877 = f32[128]{0} broadcast(%constant.1439), dimensions={}
  %constant.1443 = f32[] constant(6.28318548)
  %broadcast.878 = f32[128]{0} broadcast(%constant.1443), dimensions={}
  %constant.1444 = f32[] constant(500000)
  %broadcast.879 = f32[128]{0} broadcast(%constant.1444), dimensions={}
  %iota.31 = s32[64]{0} iota(), iota_dimension=0
  %constant.1445 = s32[] constant(2)
  %broadcast.880 = s32[64]{0} broadcast(%constant.1445), dimensions={}
  %mul.468 = s32[64]{0} multiply(%iota.31, %broadcast.880)
  %convert_element_type.583 = f32[64]{0} convert(%mul.468)
  %constant.1446 = f32[] constant(0.0078125)
  %broadcast.881 = f32[64]{0} broadcast(%constant.1446), dimensions={}
  %div.561 = f32[64]{0} multiply(%convert_element_type.583, %broadcast.881)
  %broadcast_in_dim.592 = f32[64,2]{1,0} broadcast(%div.561), dimensions={0}
  %reshape.1305 = f32[128]{0} reshape(%broadcast_in_dim.592)
  %pow.8 = f32[128]{0} power(%broadcast.879, %reshape.1305)
  %div.562 = f32[128]{0} multiply(%broadcast.878, %pow.8)
  %constant.1447 = f32[] constant(2048)
  %broadcast.882 = f32[128]{0} broadcast(%constant.1447), dimensions={}
  %lt.32 = pred[128]{0} compare(%div.562, %broadcast.882), direction=LT
  %convert_element_type.586 = s32[128]{0} convert(%lt.32)
  %broadcast.883 = s32[128]{0} broadcast(%constant.1437), dimensions={}
  %select_n.703 = pred[128]{0} compare(%convert_element_type.586, %broadcast.883), direction=LT
  %constant.1448 = f32[] constant(8192)
  %broadcast.884 = f32[128]{0} broadcast(%constant.1448), dimensions={}
  %gt.74 = pred[128]{0} compare(%div.562, %broadcast.884), direction=GT
  %convert_element_type.587 = s32[128]{0} convert(%gt.74)
  %select_n.704 = pred[128]{0} compare(%convert_element_type.587, %broadcast.883), direction=LT
  %pow.9 = f32[128]{0} negate(%reshape.1305)
  %pow.10 = f32[128]{0} power(%broadcast.879, %pow.9)
  %multiply.112 = f32[128]{0} multiply(%broadcast.884, %pow.10)
  %constant.1449 = f32[] constant(0.159154937)
  %broadcast.885 = f32[128]{0} broadcast(%constant.1449), dimensions={}
  %div.563 = f32[128]{0} multiply(%multiply.112, %broadcast.885)
  %constant.1450 = f32[] constant(-1)
  %broadcast.886 = f32[128]{0} broadcast(%constant.1450), dimensions={}
  %sub.12 = f32[128]{0} add(%div.563, %broadcast.886)
  %constant.1451 = f32[] constant(0.333333343)
  %broadcast.887 = f32[128]{0} broadcast(%constant.1451), dimensions={}
  %div.564 = f32[128]{0} multiply(%sub.12, %broadcast.887)
  %sub.13 = f32[128]{0} subtract(%broadcast.877, %div.564)
  %mul.469 = f32[128]{0} multiply(%sub.13, %pow.10)
  %constant.1452 = f32[] constant(0.125)
  %broadcast.888 = f32[128]{0} broadcast(%constant.1452), dimensions={}
  %div.565 = f32[128]{0} multiply(%mul.469, %broadcast.888)
  %mul.470 = f32[128]{0} multiply(%div.564, %pow.10)
  %add.253 = f32[128]{0} add(%div.565, %mul.470)
  %div.566 = f32[128]{0} multiply(%pow.10, %broadcast.888)
  %select_n.705 = f32[128]{0} select(%select_n.704, %add.253, %div.566)
  %select_n.706 = f32[128]{0} select(%select_n.703, %select_n.705, %pow.10)
  %div.567 = f32[128]{0} divide(%broadcast.877, %select_n.706)
  %div.568 = f32[2,8192,1,128]{3,2,1,0} broadcast(%div.567), dimensions={3}
  %div.569 = f32[2,8192,1,128]{3,2,1,0} divide(%div.560, %div.568)
  %cos.4 = f32[2,8192,1,128]{3,2,1,0} cosine(%div.569)
  %iota.32 = s32[128]{0} iota(), iota_dimension=0
  %rem.22 = s32[128]{0} and(%iota.32, %broadcast.883)
  %jit_remainder_.1 = s32[128]{0} broadcast(%constant.1438), dimensions={}
  %lt.33 = pred[128]{0} compare(%rem.22, %jit_remainder_.1), direction=LT
  %ne.37 = pred[128]{0} compare(%rem.22, %jit_remainder_.1), direction=NE
  %and.89 = pred[128]{0} and(%lt.33, %ne.37)
  %add.254 = s32[128]{0} broadcast(%constant.1445), dimensions={}
  %add.255 = s32[128]{0} add(%rem.22, %add.254)
  %select_n.707 = s32[128]{0} select(%and.89, %add.255, %rem.22)
  %reshape.1306 = s32[2,8192,64,128]{3,2,1,0} broadcast(%select_n.707), dimensions={3}
  %sin.4 = f32[2,8192,1,128]{3,2,1,0} sine(%div.569)
  %constant.1453 = s32[2]{0} constant({-1, 1})
  %broadcast_in_dim.593 = s32[64,2]{1,0} broadcast(%constant.1453), dimensions={1}
  %reshape.1307 = s32[128]{0} reshape(%broadcast_in_dim.593)
  %convert_element_type.588 = f32[128]{0} convert(%reshape.1307)
  %broadcast_in_dim.594 = f32[1,1,1,128]{3,2,1,0} reshape(%convert_element_type.588)
  %param.57 = f32[80,1024]{1,0} parameter(19), sharding={replicated}
  %state.114 = f32[80,1024]{1,0} copy(%param.57)
  %param.58 = f32[80,1]{1,0} parameter(20), sharding={replicated}
  %state.115 = f32[80,1]{1,0} copy(%param.58)
  %param.59 = f32[64,80,8,128]{3,2,1,0} parameter(49), sharding={devices=[128,1,1,1,2]<=[2,128]T(1,0) last_tile_dim_replicate}
  %transpose.58 = f32[80,64,8,128]{3,2,0,1} transpose(%param.59), dimensions={1,0,2,3}
  %param.60 = f32[80,1024]{1,0} parameter(21), sharding={replicated}
  %state.116 = f32[80,1024]{1,0} copy(%param.60)
  %param.61 = f32[80,1]{1,0} parameter(22), sharding={replicated}
  %state.117 = f32[80,1]{1,0} copy(%param.61)
  %reshape.1309 = s32[2,8192,8,128]{3,2,1,0} broadcast(%select_n.707), dimensions={3}
  %param.62 = f32[80,1024]{1,0} parameter(37), sharding={replicated}
  %state.118 = f32[80,1024]{1,0} copy(%param.62)
  %param.63 = f32[80,1]{1,0} parameter(38), sharding={replicated}
  %state.119 = f32[80,1]{1,0} copy(%param.63)
  %param.64 = f32[64,80,8,128]{3,2,1,0} parameter(52), sharding={devices=[128,1,1,1,2]<=[2,128]T(1,0) last_tile_dim_replicate}
  %transpose.59 = f32[80,64,8,128]{3,2,0,1} transpose(%param.64), dimensions={1,0,2,3}
  %param.65 = f32[80,1024]{1,0} parameter(39), sharding={replicated}
  %state.120 = f32[80,1024]{1,0} copy(%param.65)
  %param.66 = f32[80,1]{1,0} parameter(40), sharding={replicated}
  %state.121 = f32[80,1]{1,0} copy(%param.66)
  %param.67 = s32[2,8192]{1,0} parameter(83), sharding={devices=[256,1]<=[256]}
  %eq.41 = s32[2,8192,8192]{2,1,0} broadcast(%param.67), dimensions={0,1}
  %eq.42 = s32[2,8192,8192]{2,1,0} broadcast(%param.67), dimensions={0,2}
  %eq.43 = pred[2,8192,8192]{2,1,0} compare(%eq.41, %eq.42), direction=EQ
  %iota.35 = s32[8192,8192]{1,0} iota(), iota_dimension=1
  %iota.36 = s32[8192,8192]{1,0} iota(), iota_dimension=0
  %le.2 = pred[8192,8192]{1,0} compare(%iota.35, %iota.36), direction=LE
  %and.91 = pred[2,8192,8192]{2,1,0} broadcast(%le.2), dimensions={1,2}
  %and.92 = pred[2,8192,8192]{2,1,0} and(%eq.43, %and.91)
  %broadcast_in_dim.598 = f32[2,8192,8192]{2,1,0} broadcast(%constant.1441), dimensions={}
  %constant.1454 = f32[] constant(-2.38197633e+38)
  %broadcast_in_dim.599 = f32[2,8192,8192]{2,1,0} broadcast(%constant.1454), dimensions={}
  %select_n.713 = f32[2,8192,8192]{2,1,0} select(%and.92, %broadcast_in_dim.598, %broadcast_in_dim.599)
  %ne.39 = pred[2,8192,8192]{2,1,0} compare(%select_n.713, %broadcast_in_dim.598), direction=NE
  %not.4 = pred[2,8192,8192]{2,1,0} not(%ne.39)
  %convert_element_type.596 = s32[2,8192,8192]{2,1,0} convert(%not.4)
  %reduce.156 = s32[2,8192]{1,0} reduce(%convert_element_type.596, %constant.1438), dimensions={1}, to_apply=%region_1.265
  %reduce_sum.495 = s32[2,1,1,8192]{3,2,1,0} reshape(%reduce.156)
  %slice.485 = s32[2,1,1,1]{3,2,1,0} slice(%reduce_sum.495), slice={[0:2], [0:1], [0:1], [0:1]}
  %squeeze.25 = s32[2,1]{1,0} reshape(%slice.485)
  %reduce.157 = s32[2,8192]{1,0} reduce(%convert_element_type.596, %constant.1438), dimensions={2}, to_apply=%region_2.274
  %reduce_sum.496 = s32[2,1,1,8192]{3,2,1,0} reshape(%reduce.157)
  %constant.1464 = s32[] constant(-2147483648)
  %reduce.158 = s32[2,1]{1,0} reduce(%reduce_sum.496, %constant.1464), dimensions={3,2}, to_apply=%region_3.281
  %param.68 = f32[80,1024]{1,0} parameter(25), sharding={replicated}
  %state.122 = f32[80,1024]{1,0} copy(%param.68)
  %param.69 = f32[80,1]{1,0} parameter(26), sharding={replicated}
  %state.123 = f32[80,1]{1,0} copy(%param.69)
  %param.70 = f32[64,80,128,64]{3,2,1,0} parameter(50), sharding={devices=[1,1,1,128,2]<=[2,128]T(1,0) last_tile_dim_replicate}
  %transpose.60 = f32[80,64,128,64]{3,2,0,1} transpose(%param.70), dimensions={1,0,2,3}
  %param.71 = f32[80,1024]{1,0} parameter(27), sharding={replicated}
  %state.124 = f32[80,1024]{1,0} copy(%param.71)
  %param.72 = f32[80,1]{1,0} parameter(28), sharding={replicated}
  %state.125 = f32[80,1]{1,0} copy(%param.72)
  %param.73 = f32[8192,80]{1,0} parameter(47), sharding={replicated}
  %transpose.61 = f32[80,8192]{0,1} transpose(%param.73), dimensions={1,0}
  %param.74 = f32[80,1024]{1,0} parameter(1), sharding={replicated}
  %state.126 = f32[80,1024]{1,0} copy(%param.74)
  %param.75 = f32[80,1]{1,0} parameter(2), sharding={replicated}
  %state.127 = f32[80,1]{1,0} copy(%param.75)
  %param.76 = f32[64,80,28672]{2,1,0} parameter(44), sharding={devices=[128,1,1,2]<=[2,128]T(1,0) last_tile_dim_replicate}
  %transpose.62 = f32[80,64,28672]{2,0,1} transpose(%param.76), dimensions={1,0,2}
  %param.77 = f32[80,1024]{1,0} parameter(3), sharding={replicated}
  %state.128 = f32[80,1024]{1,0} copy(%param.77)
  %param.78 = f32[80,1]{1,0} parameter(4), sharding={replicated}
  %state.129 = f32[80,1]{1,0} copy(%param.78)
  %param.79 = f32[80,1024]{1,0} parameter(7), sharding={replicated}
  %state.130 = f32[80,1024]{1,0} copy(%param.79)
  %param.80 = f32[80,1]{1,0} parameter(8), sharding={replicated}
  %state.131 = f32[80,1]{1,0} copy(%param.80)
  %param.81 = f32[64,80,28672]{2,1,0} parameter(45), sharding={devices=[128,1,1,2]<=[2,128]T(1,0) last_tile_dim_replicate}
  %transpose.63 = f32[80,64,28672]{2,0,1} transpose(%param.81), dimensions={1,0,2}
  %param.82 = f32[80,1024]{1,0} parameter(9), sharding={replicated}
  %state.132 = f32[80,1024]{1,0} copy(%param.82)
  %param.83 = f32[80,1]{1,0} parameter(10), sharding={replicated}
  %state.133 = f32[80,1]{1,0} copy(%param.83)
  %param.84 = f32[80,1024]{1,0} parameter(13), sharding={replicated}
  %state.134 = f32[80,1024]{1,0} copy(%param.84)
  %param.85 = f32[80,1]{1,0} parameter(14), sharding={replicated}
  %state.135 = f32[80,1]{1,0} copy(%param.85)
  %param.86 = f32[28672,80,64]{2,1,0} parameter(46), sharding={devices=[1,1,128,2]<=[2,128]T(1,0) last_tile_dim_replicate}
  %transpose.64 = f32[80,28672,64]{2,0,1} transpose(%param.86), dimensions={1,0,2}
  %param.87 = f32[80,1024]{1,0} parameter(15), sharding={replicated}
  %state.136 = f32[80,1024]{1,0} copy(%param.87)
  %param.88 = f32[80,1]{1,0} parameter(16), sharding={replicated}
  %state.137 = f32[80,1]{1,0} copy(%param.88)
  %tuple.115 = (s32[], bf16[2,8192,8192]{2,1,0}, bf16[80,2,8192,8192]{3,2,1,0}, f32[80,8192]{0,1}, f32[80,1024]{1,0}, /*index=5*/f32[80,1]{1,0}, f32[80,64,64,128]{3,2,0,1}, f32[80,1024]{1,0}, f32[80,1]{1,0}, f32[2,8192,1,128]{3,2,1,0}, /*index=10*/s32[2,8192,64,128]{3,2,1,0}, f32[2,8192,1,128]{3,2,1,0}, f32[1,1,1,128]{3,2,1,0}, f32[80,1024]{1,0}, f32[80,1]{1,0}, /*index=15*/f32[80,64,8,128]{3,2,0,1}, f32[80,1024]{1,0}, f32[80,1]{1,0}, f32[2,8192,1,128]{3,2,1,0}, s32[2,8192,8,128]{3,2,1,0}, /*index=20*/f32[2,8192,1,128]{3,2,1,0}, f32[1,1,1,128]{3,2,1,0}, f32[80,1024]{1,0}, f32[80,1]{1,0}, f32[80,64,8,128]{3,2,0,1}, /*index=25*/f32[80,1024]{1,0}, f32[80,1]{1,0}, s32[2,1]{1,0}, s32[2,1]{1,0}, f32[80,1024]{1,0}, /*index=30*/f32[80,1]{1,0}, f32[80,64,128,64]{3,2,0,1}, f32[80,1024]{1,0}, f32[80,1]{1,0}, f32[80,8192]{0,1}, /*index=35*/f32[80,1024]{1,0}, f32[80,1]{1,0}, f32[80,64,28672]{2,0,1}, f32[80,1024]{1,0}, f32[80,1]{1,0}, /*index=40*/f32[80,1024]{1,0}, f32[80,1]{1,0}, f32[80,64,28672]{2,0,1}, f32[80,1024]{1,0}, f32[80,1]{1,0}, /*index=45*/f32[80,1024]{1,0}, f32[80,1]{1,0}, f32[80,28672,64]{2,0,1}, f32[80,1024]{1,0}, f32[80,1]{1,0}) tuple(%constant.1438, %sharding_constraint.77, %broadcast_in_dim.591, %transpose.56, %state.110, /*index=5*/%state.111, %transpose.57, %state.112, %state.113, %cos.4, /*index=10*/%reshape.1306, %sin.4, %broadcast_in_dim.594, %state.114, %state.115, /*index=15*/%transpose.58, %state.116, %state.117, %cos.4, %reshape.1309, /*index=20*/%sin.4, %broadcast_in_dim.594, %state.118, %state.119, %transpose.59, /*index=25*/%state.120, %state.121, %squeeze.25, %reduce.158, %state.122, /*index=30*/%state.123, %transpose.60, %state.124, %state.125, %transpose.61, /*index=35*/%state.126, %state.127, %transpose.62, %state.128, %state.129, /*index=40*/%state.130, %state.131, %transpose.63, %state.132, %state.133, /*index=45*/%state.134, %state.135, %transpose.64, %state.136, %state.137)
  %while.21 = (s32[], bf16[2,8192,8192]{2,1,0}, bf16[80,2,8192,8192]{3,2,1,0}, f32[80,8192]{0,1}, f32[80,1024]{1,0}, /*index=5*/f32[80,1]{1,0}, f32[80,64,64,128]{3,2,0,1}, f32[80,1024]{1,0}, f32[80,1]{1,0}, f32[2,8192,1,128]{3,2,1,0}, /*index=10*/s32[2,8192,64,128]{3,2,1,0}, f32[2,8192,1,128]{3,2,1,0}, f32[1,1,1,128]{3,2,1,0}, f32[80,1024]{1,0}, f32[80,1]{1,0}, /*index=15*/f32[80,64,8,128]{3,2,0,1}, f32[80,1024]{1,0}, f32[80,1]{1,0}, f32[2,8192,1,128]{3,2,1,0}, s32[2,8192,8,128]{3,2,1,0}, /*index=20*/f32[2,8192,1,128]{3,2,1,0}, f32[1,1,1,128]{3,2,1,0}, f32[80,1024]{1,0}, f32[80,1]{1,0}, f32[80,64,8,128]{3,2,0,1}, /*index=25*/f32[80,1024]{1,0}, f32[80,1]{1,0}, s32[2,1]{1,0}, s32[2,1]{1,0}, f32[80,1024]{1,0}, /*index=30*/f32[80,1]{1,0}, f32[80,64,128,64]{3,2,0,1}, f32[80,1024]{1,0}, f32[80,1]{1,0}, f32[80,8192]{0,1}, /*index=35*/f32[80,1024]{1,0}, f32[80,1]{1,0}, f32[80,64,28672]{2,0,1}, f32[80,1024]{1,0}, f32[80,1]{1,0}, /*index=40*/f32[80,1024]{1,0}, f32[80,1]{1,0}, f32[80,64,28672]{2,0,1}, f32[80,1024]{1,0}, f32[80,1]{1,0}, /*index=45*/f32[80,1024]{1,0}, f32[80,1]{1,0}, f32[80,28672,64]{2,0,1}, f32[80,1024]{1,0}, f32[80,1]{1,0}) while(%tuple.115), condition=%region_21.959_spmd, body=%region_4.905_spmd
  %get-tuple-element.521 = bf16[2,8192,8192]{2,1,0} get-tuple-element(%while.21), index=1
  %convert_element_type.598 = f32[2,8192,8192]{2,1,0} convert(%get-tuple-element.521)
  %square.85 = f32[2,8192,8192]{2,1,0} multiply(%convert_element_type.598, %convert_element_type.598)
  %reduce.159 = f32[2,8192]{1,0} reduce(%square.85, %constant.1441), dimensions={2}, to_apply=%region_22.970
  %constant.1465 = f32[] constant(0.000122070312)
  %broadcast.889 = f32[2,8192]{1,0} broadcast(%constant.1465), dimensions={}
  %div.584 = f32[2,8192]{1,0} multiply(%reduce.159, %broadcast.889)
  %constant.1466 = f32[] constant(1e-05)
  %add.258 = f32[2,8192]{1,0} broadcast(%constant.1466), dimensions={}
  %add.259 = f32[2,8192]{1,0} add(%div.584, %add.258)
  %add.260 = f32[2,8192,1]{2,1,0} reshape(%add.259)
  %rsqrt.10 = f32[2,8192,1]{2,1,0} rsqrt(%add.260)
  %mul.480 = f32[2,8192]{1,0} reshape(%rsqrt.10)
  %mul.481 = f32[2,8192,8192]{2,1,0} broadcast(%mul.480), dimensions={0,1}
  %mul.482 = f32[2,8192,8192]{2,1,0} multiply(%convert_element_type.598, %mul.481)
  %convert_element_type.599 = bf16[2,8192,8192]{2,1,0} convert(%mul.482)
  %param.89 = f32[8192]{0} parameter(43), sharding={replicated}
  %convert_element_type.600 = bf16[8192]{0} convert(%param.89)
  %mul.483 = bf16[2,8192,8192]{2,1,0} broadcast(%convert_element_type.600), dimensions={2}
  %mul.484 = bf16[2,8192,8192]{2,1,0} multiply(%convert_element_type.599, %mul.483)
  %param.90 = f32[64,128256]{1,0} parameter(53), sharding={devices=[128,1,2]<=[2,128]T(1,0) last_tile_dim_replicate}
  %convert_element_type.601 = bf16[64,128256]{1,0} convert(%param.90)
  %all-gather.16 = bf16[8192,128256]{1,0} all-gather(%convert_element_type.601), channel_id=11, replica_groups=[2,128]<=[256], dimensions={0}, use_global_device_ids=true
  %dot.33 = bf16[2,8192,128256]{2,1,0} dot(%mul.484, %all-gather.16), lhs_contracting_dims={2}, rhs_contracting_dims={0}
  %sharding_constraint.78 = bf16[2,8192,128256]{2,1,0} copy(%dot.33)
  %convert_element_type.602 = f32[2,8192,128256]{2,1,0} convert(%sharding_constraint.78)
  %constant.1467 = f32[] constant(-inf)
  %reduce.160 = f32[2,8192]{1,0} reduce(%convert_element_type.602, %constant.1467), dimensions={2}, to_apply=%region_23.995
  %sub.16 = f32[2,8192,128256]{2,1,0} broadcast(%reduce.160), dimensions={0,1}
  %sub.17 = f32[2,8192,128256]{2,1,0} subtract(%convert_element_type.602, %sub.16)
  %exp.6 = f32[2,8192,128256]{2,1,0} exponential(%sub.17)
  %reduce.161 = f32[2,8192]{1,0} reduce(%exp.6, %constant.1441), dimensions={2}, to_apply=%region_24.1003
  %log.2 = f32[2,8192]{1,0} log(%reduce.161)
  %add.261 = f32[2,8192]{1,0} add(%log.2, %reduce.160)
  %mul.485 = f32[2,8192]{1,0} multiply(%add.261, %broadcast.876)
  %add.262 = f32[2,8192]{1,0} broadcast(%constant.1439), dimensions={}
  %add.263 = f32[2,8192]{1,0} add(%mul.485, %add.262)
  %mul.486 = f32[2,8192,128256]{2,1,0} broadcast(%add.263), dimensions={0,1}
  %mul.487 = f32[2,8192,128256]{2,1,0} multiply(%mul.486, %exp.6)
  %div.585 = f32[2,8192,128256]{2,1,0} broadcast(%reduce.161), dimensions={0,1}
  %div.586 = f32[2,8192,128256]{2,1,0} divide(%mul.487, %div.585)
  %param.91 = s32[2,8192]{1,0} parameter(84), sharding={devices=[256,1]<=[256]}
  %eq.44 = s32[2,8192,128256]{2,1,0} broadcast(%param.91), dimensions={0,1}
  %iota.37 = s32[2,8192,128256]{2,1,0} iota(), iota_dimension=2
  %eq.45 = pred[2,8192,128256]{2,1,0} compare(%eq.44, %iota.37), direction=EQ
  %convert_element_type.603 = f32[2,8192,128256]{2,1,0} convert(%eq.45)
  %sub.18 = f32[2,8192,128256]{2,1,0} subtract(%div.586, %convert_element_type.603)
  %mul.488 = f32[2,8192,128256]{2,1,0} multiply(%mul.467, %sub.18)
  %convert_element_type.604 = bf16[2,8192,128256]{2,1,0} convert(%mul.488)
  %sharding_constraint.79 = bf16[2,8192,128256]{2,1,0} copy(%convert_element_type.604)
  %dot.34 = bf16[2,8192,8192]{2,1,0} dot(%sharding_constraint.79, %all-gather.16), lhs_contracting_dims={2}, rhs_contracting_dims={1}
  %mul.490 = bf16[2,8192,8192]{2,1,0} multiply(%dot.34, %mul.483)
  %convert_element_type.605 = f32[2,8192,8192]{2,1,0} convert(%mul.490)
  %mul.493 = f32[2,8192,8192]{2,1,0} multiply(%convert_element_type.605, %mul.481)
  %mul.494 = f32[2,8192,8192]{2,1,0} multiply(%convert_element_type.598, %convert_element_type.605)
  %reduce.162 = f32[2,8192]{1,0} reduce(%mul.494, %constant.1441), dimensions={2}, to_apply=%region_25.1033
  %reshape.1312 = f32[2,8192,1]{2,1,0} reshape(%reduce.162)
  %div.588 = f32[2,8192,1]{2,1,0} divide(%rsqrt.10, %add.260)
  %constant.1468 = f32[] constant(-0.5)
  %mul.495 = f32[2,8192,1]{2,1,0} broadcast(%constant.1468), dimensions={}
  %mul.496 = f32[2,8192,1]{2,1,0} multiply(%div.588, %mul.495)
  %mul.497 = f32[2,8192,1]{2,1,0} multiply(%reshape.1312, %mul.496)
  %constant.1469 = f32[] constant(0.000244140625)
  %mul.498 = f32[2,8192,1]{2,1,0} broadcast(%constant.1469), dimensions={}
  %mul.499 = f32[2,8192,1]{2,1,0} multiply(%mul.497, %mul.498)
  %mul.500 = f32[2,8192]{1,0} reshape(%mul.499)
  %mul.501 = f32[2,8192,8192]{2,1,0} broadcast(%mul.500), dimensions={0,1}
  %mul.502 = f32[2,8192,8192]{2,1,0} multiply(%convert_element_type.598, %mul.501)
  %add_any.33 = f32[2,8192,8192]{2,1,0} add(%mul.493, %mul.502)
  %convert_element_type.606 = bf16[2,8192,8192]{2,1,0} convert(%add_any.33)
  %broadcast.890 = f32[80,64,28672]{2,1,0} broadcast(%constant.1441), dimensions={}
  %broadcast_in_dim.600 = f32[80,28672,64]{2,1,0} broadcast(%constant.1441), dimensions={}
  %broadcast.891 = f32[80,8192]{1,0} broadcast(%constant.1441), dimensions={}
  %broadcast.892 = f32[80,64,8,128]{3,2,1,0} broadcast(%constant.1441), dimensions={}
  %broadcast_in_dim.601 = f32[80,64,128,64]{3,2,1,0} broadcast(%constant.1441), dimensions={}
  %broadcast_in_dim.602 = f32[80,64,64,128]{3,2,1,0} broadcast(%constant.1441), dimensions={}
  %broadcast.893 = f32[80,1024]{1,0} broadcast(%constant.1441), dimensions={}
  %broadcast.894 = f32[80,1]{1,0} broadcast(%constant.1441), dimensions={}
  %get-tuple-element.522 = bf16[80,2,8192,8192]{3,2,1,0} get-tuple-element(%while.21), index=2
  %data__inputs_position__.1 = s32[2,8192]{1,0} copy(%param.56)
  %data__inputs_segmentation__.1 = s32[2,8192]{1,0} copy(%param.67)
  %param.92 = f32[80,1024]{1,0} parameter(17), sharding={replicated}
  %state.158 = f32[80,1024]{1,0} copy(%param.92)
  %param.93 = f32[80,1]{1,0} parameter(18), sharding={replicated}
  %state.159 = f32[80,1]{1,0} copy(%param.93)
  %param.94 = f32[80,1024]{1,0} parameter(11), sharding={replicated}
  %state.162 = f32[80,1024]{1,0} copy(%param.94)
  %param.95 = f32[80,1]{1,0} parameter(12), sharding={replicated}
  %state.163 = f32[80,1]{1,0} copy(%param.95)
  %param.96 = f32[80,1024]{1,0} parameter(5), sharding={replicated}
  %state.168 = f32[80,1024]{1,0} copy(%param.96)
  %param.97 = f32[80,1]{1,0} parameter(6), sharding={replicated}
  %state.169 = f32[80,1]{1,0} copy(%param.97)
  %param.98 = f32[80,1024]{1,0} parameter(29), sharding={replicated}
  %state.170 = f32[80,1024]{1,0} copy(%param.98)
  %param.99 = f32[80,1]{1,0} parameter(30), sharding={replicated}
  %state.171 = f32[80,1]{1,0} copy(%param.99)
  %param.100 = f32[80,1024]{1,0} parameter(41), sharding={replicated}
  %state.172 = f32[80,1024]{1,0} copy(%param.100)
  %param.101 = f32[80,1]{1,0} parameter(42), sharding={replicated}
  %state.173 = f32[80,1]{1,0} copy(%param.101)
  %param.102 = f32[80,1024]{1,0} parameter(23), sharding={replicated}
  %state.174 = f32[80,1024]{1,0} copy(%param.102)
  %param.103 = f32[80,1]{1,0} parameter(24), sharding={replicated}
  %state.175 = f32[80,1]{1,0} copy(%param.103)
  %param.104 = f32[80,1024]{1,0} parameter(35), sharding={replicated}
  %state.176 = f32[80,1024]{1,0} copy(%param.104)
  %param.105 = f32[80,1]{1,0} parameter(36), sharding={replicated}
  %state.177 = f32[80,1]{1,0} copy(%param.105)
  %tuple.116 = (s32[], bf16[2,8192,8192]{2,1,0}, f32[80,64,28672]{2,1,0}, f32[80,64,28672]{2,1,0}, f32[80,28672,64]{2,1,0}, /*index=5*/f32[80,8192]{1,0}, f32[80,8192]{1,0}, f32[80,64,8,128]{3,2,1,0}, f32[80,64,128,64]{3,2,1,0}, f32[80,64,64,128]{3,2,1,0}, /*index=10*/f32[80,64,8,128]{3,2,1,0}, f32[80,1024]{1,0}, f32[80,1]{1,0}, f32[80,1024]{1,0}, f32[80,1]{1,0}, /*index=15*/f32[80,1024]{1,0}, f32[80,1]{1,0}, f32[80,1024]{1,0}, f32[80,1]{1,0}, f32[80,1024]{1,0}, /*index=20*/f32[80,1]{1,0}, f32[80,1024]{1,0}, f32[80,1]{1,0}, f32[80,1024]{1,0}, f32[80,1]{1,0}, /*index=25*/f32[80,1024]{1,0}, f32[80,1]{1,0}, f32[80,1024]{1,0}, f32[80,1]{1,0}, f32[80,1024]{1,0}, /*index=30*/f32[80,1]{1,0}, f32[80,1024]{1,0}, f32[80,1]{1,0}, f32[80,1024]{1,0}, f32[80,1]{1,0}, /*index=35*/f32[80,1024]{1,0}, f32[80,1]{1,0}, f32[80,1024]{1,0}, f32[80,1]{1,0}, f32[80,1024]{1,0}, /*index=40*/f32[80,1]{1,0}, f32[80,1024]{1,0}, f32[80,1]{1,0}, f32[80,1024]{1,0}, f32[80,1]{1,0}, /*index=45*/f32[80,1024]{1,0}, f32[80,1]{1,0}, f32[80,1024]{1,0}, f32[80,1]{1,0}, f32[80,1024]{1,0}, /*index=50*/f32[80,1]{1,0}, f32[80,1024]{1,0}, f32[80,1]{1,0}, bf16[80,2,8192,8192]{3,2,1,0}, f32[80,8192]{0,1}, /*index=55*/f32[80,1024]{1,0}, f32[80,1]{1,0}, f32[80,64,64,128]{3,2,0,1}, f32[80,1024]{1,0}, f32[80,1]{1,0}, /*index=60*/s32[2,8192]{1,0}, f32[80,1024]{1,0}, f32[80,1]{1,0}, f32[80,64,8,128]{3,2,0,1}, f32[80,1024]{1,0}, /*index=65*/f32[80,1]{1,0}, f32[80,1024]{1,0}, f32[80,1]{1,0}, f32[80,64,8,128]{3,2,0,1}, f32[80,1024]{1,0}, /*index=70*/f32[80,1]{1,0}, s32[2,8192]{1,0}, f32[80,1024]{1,0}, f32[80,1]{1,0}, f32[80,64,128,64]{3,2,0,1}, /*index=75*/f32[80,1024]{1,0}, f32[80,1]{1,0}, f32[80,8192]{0,1}, f32[80,1024]{1,0}, f32[80,1]{1,0}, /*index=80*/f32[80,64,28672]{2,0,1}, f32[80,1024]{1,0}, f32[80,1]{1,0}, f32[80,1024]{1,0}, f32[80,1]{1,0}, /*index=85*/f32[80,28672,64]{2,0,1}, f32[80,1024]{1,0}, f32[80,1]{1,0}, f32[80,1024]{1,0}, f32[80,1]{1,0}, /*index=90*/f32[80,64,28672]{2,0,1}, f32[80,1024]{1,0}, f32[80,1]{1,0}, f32[80,1024]{1,0}, f32[80,1]{1,0}, /*index=95*/f32[80,1024]{1,0}, f32[80,1]{1,0}, f32[80,1024]{1,0}, f32[80,1]{1,0}, f32[80,1024]{1,0}, /*index=100*/f32[80,1]{1,0}, f32[80,1024]{1,0}, f32[80,1]{1,0}, f32[80,1024]{1,0}, f32[80,1]{1,0}, /*index=105*/f32[80,1024]{1,0}, f32[80,1]{1,0}) tuple(%constant.1438, %convert_element_type.606, %broadcast.890, %broadcast.890, %broadcast_in_dim.600, /*index=5*/%broadcast.891, %broadcast.891, %broadcast.892, %broadcast_in_dim.601, %broadcast_in_dim.602, /*index=10*/%broadcast.892, %broadcast.893, %broadcast.894, %broadcast.893, %broadcast.894, /*index=15*/%broadcast.893, %broadcast.894, %broadcast.893, %broadcast.894, %broadcast.893, /*index=20*/%broadcast.894, %broadcast.893, %broadcast.894, %broadcast.893, %broadcast.894, /*index=25*/%broadcast.893, %broadcast.894, %broadcast.893, %broadcast.894, %broadcast.893, /*index=30*/%broadcast.894, %broadcast.893, %broadcast.894, %broadcast.893, %broadcast.894, /*index=35*/%broadcast.893, %broadcast.894, %broadcast.893, %broadcast.894, %broadcast.893, /*index=40*/%broadcast.894, %broadcast.893, %broadcast.894, %broadcast.893, %broadcast.894, /*index=45*/%broadcast.893, %broadcast.894, %broadcast.893, %broadcast.894, %broadcast.893, /*index=50*/%broadcast.894, %broadcast.893, %broadcast.894, %get-tuple-element.522, %transpose.56, /*index=55*/%state.110, %state.111, %transpose.57, %state.112, %state.113, /*index=60*/%data__inputs_position__.1, %state.114, %state.115, %transpose.58, %state.116, /*index=65*/%state.117, %state.118, %state.119, %transpose.59, %state.120, /*index=70*/%state.121, %data__inputs_segmentation__.1, %state.122, %state.123, %transpose.60, /*index=75*/%state.124, %state.125, %transpose.61, %state.126, %state.127, /*index=80*/%transpose.62, %state.128, %state.129, %state.158, %state.159, /*index=85*/%transpose.64, %state.136, %state.137, %state.162, %state.163, /*index=90*/%transpose.63, %state.132, %state.133, %state.130, %state.131, /*index=95*/%state.168, %state.169, %state.170, %state.171, %state.172, /*index=100*/%state.173, %state.174, %state.175, %state.176, %state.177, /*index=105*/%state.134, %state.135)
  %while.22 = (s32[], bf16[2,8192,8192]{2,1,0}, f32[80,64,28672]{2,1,0}, f32[80,64,28672]{2,1,0}, f32[80,28672,64]{2,1,0}, /*index=5*/f32[80,8192]{1,0}, f32[80,8192]{1,0}, f32[80,64,8,128]{3,2,1,0}, f32[80,64,128,64]{3,2,1,0}, f32[80,64,64,128]{3,2,1,0}, /*index=10*/f32[80,64,8,128]{3,2,1,0}, f32[80,1024]{1,0}, f32[80,1]{1,0}, f32[80,1024]{1,0}, f32[80,1]{1,0}, /*index=15*/f32[80,1024]{1,0}, f32[80,1]{1,0}, f32[80,1024]{1,0}, f32[80,1]{1,0}, f32[80,1024]{1,0}, /*index=20*/f32[80,1]{1,0}, f32[80,1024]{1,0}, f32[80,1]{1,0}, f32[80,1024]{1,0}, f32[80,1]{1,0}, /*index=25*/f32[80,1024]{1,0}, f32[80,1]{1,0}, f32[80,1024]{1,0}, f32[80,1]{1,0}, f32[80,1024]{1,0}, /*index=30*/f32[80,1]{1,0}, f32[80,1024]{1,0}, f32[80,1]{1,0}, f32[80,1024]{1,0}, f32[80,1]{1,0}, /*index=35*/f32[80,1024]{1,0}, f32[80,1]{1,0}, f32[80,1024]{1,0}, f32[80,1]{1,0}, f32[80,1024]{1,0}, /*index=40*/f32[80,1]{1,0}, f32[80,1024]{1,0}, f32[80,1]{1,0}, f32[80,1024]{1,0}, f32[80,1]{1,0}, /*index=45*/f32[80,1024]{1,0}, f32[80,1]{1,0}, f32[80,1024]{1,0}, f32[80,1]{1,0}, f32[80,1024]{1,0}, /*index=50*/f32[80,1]{1,0}, f32[80,1024]{1,0}, f32[80,1]{1,0}, bf16[80,2,8192,8192]{3,2,1,0}, f32[80,8192]{0,1}, /*index=55*/f32[80,1024]{1,0}, f32[80,1]{1,0}, f32[80,64,64,128]{3,2,0,1}, f32[80,1024]{1,0}, f32[80,1]{1,0}, /*index=60*/s32[2,8192]{1,0}, f32[80,1024]{1,0}, f32[80,1]{1,0}, f32[80,64,8,128]{3,2,0,1}, f32[80,1024]{1,0}, /*index=65*/f32[80,1]{1,0}, f32[80,1024]{1,0}, f32[80,1]{1,0}, f32[80,64,8,128]{3,2,0,1}, f32[80,1024]{1,0}, /*index=70*/f32[80,1]{1,0}, s32[2,8192]{1,0}, f32[80,1024]{1,0}, f32[80,1]{1,0}, f32[80,64,128,64]{3,2,0,1}, /*index=75*/f32[80,1024]{1,0}, f32[80,1]{1,0}, f32[80,8192]{0,1}, f32[80,1024]{1,0}, f32[80,1]{1,0}, /*index=80*/f32[80,64,28672]{2,0,1}, f32[80,1024]{1,0}, f32[80,1]{1,0}, f32[80,1024]{1,0}, f32[80,1]{1,0}, /*index=85*/f32[80,28672,64]{2,0,1}, f32[80,1024]{1,0}, f32[80,1]{1,0}, f32[80,1024]{1,0}, f32[80,1]{1,0}, /*index=90*/f32[80,64,28672]{2,0,1}, f32[80,1024]{1,0}, f32[80,1]{1,0}, f32[80,1024]{1,0}, f32[80,1]{1,0}, /*index=95*/f32[80,1024]{1,0}, f32[80,1]{1,0}, f32[80,1024]{1,0}, f32[80,1]{1,0}, f32[80,1024]{1,0}, /*index=100*/f32[80,1]{1,0}, f32[80,1024]{1,0}, f32[80,1]{1,0}, f32[80,1024]{1,0}, f32[80,1]{1,0}, /*index=105*/f32[80,1024]{1,0}, f32[80,1]{1,0}) while(%tuple.116), condition=%region_78.2872_spmd, body=%region_26.2761_spmd
  %get-tuple-element.523 = f32[80,1024]{1,0} get-tuple-element(%while.22), index=11
  %get-tuple-element.524 = f32[80,1]{1,0} get-tuple-element(%while.22), index=12
  %get-tuple-element.525 = f32[80,1024]{1,0} get-tuple-element(%while.22), index=13
  %get-tuple-element.526 = f32[80,1]{1,0} get-tuple-element(%while.22), index=14
  %get-tuple-element.527 = f32[80,1024]{1,0} get-tuple-element(%while.22), index=15
  %get-tuple-element.528 = f32[80,1]{1,0} get-tuple-element(%while.22), index=16
  %get-tuple-element.529 = f32[80,1024]{1,0} get-tuple-element(%while.22), index=17
  %get-tuple-element.530 = f32[80,1]{1,0} get-tuple-element(%while.22), index=18
  %get-tuple-element.531 = f32[80,1024]{1,0} get-tuple-element(%while.22), index=19
  %get-tuple-element.532 = f32[80,1]{1,0} get-tuple-element(%while.22), index=20
  %get-tuple-element.533 = f32[80,1024]{1,0} get-tuple-element(%while.22), index=21
  %get-tuple-element.534 = f32[80,1]{1,0} get-tuple-element(%while.22), index=22
  %get-tuple-element.535 = f32[80,1024]{1,0} get-tuple-element(%while.22), index=23
  %get-tuple-element.536 = f32[80,1]{1,0} get-tuple-element(%while.22), index=24
  %get-tuple-element.537 = f32[80,1024]{1,0} get-tuple-element(%while.22), index=25
  %get-tuple-element.538 = f32[80,1]{1,0} get-tuple-element(%while.22), index=26
  %get-tuple-element.539 = f32[80,1024]{1,0} get-tuple-element(%while.22), index=27
  %get-tuple-element.540 = f32[80,1]{1,0} get-tuple-element(%while.22), index=28
  %get-tuple-element.541 = f32[80,1024]{1,0} get-tuple-element(%while.22), index=29
  %get-tuple-element.542 = f32[80,1]{1,0} get-tuple-element(%while.22), index=30
  %get-tuple-element.543 = f32[80,1024]{1,0} get-tuple-element(%while.22), index=31
  %get-tuple-element.544 = f32[80,1]{1,0} get-tuple-element(%while.22), index=32
  %get-tuple-element.545 = f32[80,1024]{1,0} get-tuple-element(%while.22), index=33
  %get-tuple-element.546 = f32[80,1]{1,0} get-tuple-element(%while.22), index=34
  %get-tuple-element.547 = f32[80,1024]{1,0} get-tuple-element(%while.22), index=35
  %get-tuple-element.548 = f32[80,1]{1,0} get-tuple-element(%while.22), index=36
  %get-tuple-element.549 = f32[80,1024]{1,0} get-tuple-element(%while.22), index=37
  %get-tuple-element.550 = f32[80,1]{1,0} get-tuple-element(%while.22), index=38
  %get-tuple-element.551 = f32[80,1024]{1,0} get-tuple-element(%while.22), index=39
  %get-tuple-element.552 = f32[80,1]{1,0} get-tuple-element(%while.22), index=40
  %get-tuple-element.553 = f32[80,1024]{1,0} get-tuple-element(%while.22), index=41
  %get-tuple-element.554 = f32[80,1]{1,0} get-tuple-element(%while.22), index=42
  %get-tuple-element.555 = f32[80,1024]{1,0} get-tuple-element(%while.22), index=43
  %get-tuple-element.556 = f32[80,1]{1,0} get-tuple-element(%while.22), index=44
  %get-tuple-element.557 = f32[80,1024]{1,0} get-tuple-element(%while.22), index=45
  %get-tuple-element.558 = f32[80,1]{1,0} get-tuple-element(%while.22), index=46
  %get-tuple-element.559 = f32[80,1024]{1,0} get-tuple-element(%while.22), index=47
  %get-tuple-element.560 = f32[80,1]{1,0} get-tuple-element(%while.22), index=48
  %get-tuple-element.561 = f32[80,1024]{1,0} get-tuple-element(%while.22), index=49
  %get-tuple-element.562 = f32[80,1]{1,0} get-tuple-element(%while.22), index=50
  %get-tuple-element.563 = f32[80,1024]{1,0} get-tuple-element(%while.22), index=51
  %get-tuple-element.564 = f32[80,1]{1,0} get-tuple-element(%while.22), index=52
  %param.106 = s32[] parameter(80), sharding={replicated}
  %lt.36 = pred[] compare(%param.106, %constant.1437), direction=LT
  %max.191 = s32[] maximum(%constant.1438, %param.106)
  %min.226 = s32[] minimum(%constant.1437, %max.191)
  %convert_element_type.607 = f32[] convert(%min.226)
  %sub.19 = f32[] subtract(%constant.1439, %convert_element_type.607)
  %constant.1470 = f32[] constant(-0.001)
  %mul.503 = f32[] multiply(%sub.19, %constant.1470)
  %constant.1471 = f32[] constant(0.001)
  %add.264 = f32[] add(%mul.503, %constant.1471)
  %constant.1472 = s32[] constant(-1)
  %sub.20 = s32[] add(%param.106, %constant.1472)
  %convert_element_type.608 = f32[] convert(%sub.20)
  %constant.1473 = f32[] constant(0.209439531)
  %mul.504 = f32[] multiply(%convert_element_type.608, %constant.1473)
  %cos.6 = f32[] cosine(%mul.504)
  %add.265 = f32[] add(%cos.6, %constant.1439)
  %constant.1474 = f32[] constant(0.0005)
  %mul.505 = f32[] multiply(%add.265, %constant.1474)
  %constant.1475 = f32[] constant(0.5)
  %mul.506 = f32[] multiply(%add.265, %constant.1475)
  %sub.21 = f32[] subtract(%constant.1439, %mul.506)
  %constant.1476 = f32[] constant(0.0001)
  %mul.507 = f32[] multiply(%sub.21, %constant.1476)
  %add.266 = f32[] add(%mul.505, %mul.507)
  %select_n.714 = f32[] select(%lt.36, %add.264, %add.266)
  %mul.508 = f32[] multiply(%select_n.714, %constant.1450)
  %mul.509 = f32[8192]{0} broadcast(%mul.508), dimensions={}
  %mul.510 = bf16[2,8192,8192]{2,1,0} multiply(%convert_element_type.599, %dot.34)
  %reduce.163 = bf16[8192]{0} reduce(%mul.510, %constant.1442), dimensions={0,1}, to_apply=%region_79.2960
  %all-reduce.38 = bf16[8192]{0} all-reduce(%reduce.163), channel_id=56, replica_groups=[1,256]<=[256], use_global_device_ids=true, to_apply=%region_79.2960.clone
  %convert_element_type.609 = f32[8192]{0} convert(%all-reduce.38)
  %mul.511 = f32[8192]{0} multiply(%convert_element_type.609, %convert_element_type.609)
  %reduce.164 = f32[] reduce(%mul.511, %constant.1441), dimensions={0}, to_apply=%region_80.2967
  %get-tuple-element.565 = f32[80,64,28672]{2,1,0} get-tuple-element(%while.22), index=2
  %transpose.65 = f32[64,80,28672]{2,0,1} transpose(%get-tuple-element.565), dimensions={1,0,2}
  %mul.512 = f32[64,80,28672]{2,0,1} multiply(%transpose.65, %transpose.65)
  %reduce.165 = f32[] reduce(%mul.512, %constant.1441), dimensions={0,1,2}, to_apply=%region_81.2974
  %all-reduce.39 = f32[] all-reduce(%reduce.165), channel_id=57, replica_groups=[2,128]<=[256], use_global_device_ids=true, to_apply=%region_81.2974.clone
  %add.267 = f32[] add(%reduce.164, %all-reduce.39)
  %get-tuple-element.566 = f32[80,64,28672]{2,1,0} get-tuple-element(%while.22), index=3
  %transpose.66 = f32[64,80,28672]{2,0,1} transpose(%get-tuple-element.566), dimensions={1,0,2}
  %mul.513 = f32[64,80,28672]{2,0,1} multiply(%transpose.66, %transpose.66)
  %reduce.166 = f32[] reduce(%mul.513, %constant.1441), dimensions={0,1,2}, to_apply=%region_82.2982
  %all-reduce.40 = f32[] all-reduce(%reduce.166), channel_id=58, replica_groups=[2,128]<=[256], use_global_device_ids=true, to_apply=%region_82.2982.clone
  %add.268 = f32[] add(%add.267, %all-reduce.40)
  %get-tuple-element.567 = f32[80,28672,64]{2,1,0} get-tuple-element(%while.22), index=4
  %transpose.67 = f32[28672,80,64]{2,0,1} transpose(%get-tuple-element.567), dimensions={1,0,2}
  %mul.514 = f32[28672,80,64]{2,0,1} multiply(%transpose.67, %transpose.67)
  %reduce.167 = f32[] reduce(%mul.514, %constant.1441), dimensions={0,1,2}, to_apply=%region_83.2990
  %all-reduce.41 = f32[] all-reduce(%reduce.167), channel_id=59, replica_groups=[2,128]<=[256], use_global_device_ids=true, to_apply=%region_83.2990.clone
  %add.269 = f32[] add(%add.268, %all-reduce.41)
  %get-tuple-element.568 = f32[80,8192]{1,0} get-tuple-element(%while.22), index=5
  %transpose.68 = f32[8192,80]{0,1} transpose(%get-tuple-element.568), dimensions={1,0}
  %mul.515 = f32[8192,80]{0,1} multiply(%transpose.68, %transpose.68)
  %reduce.168 = f32[] reduce(%mul.515, %constant.1441), dimensions={0,1}, to_apply=%region_84.2998
  %add.270 = f32[] add(%add.269, %reduce.168)
  %get-tuple-element.569 = f32[80,8192]{1,0} get-tuple-element(%while.22), index=6
  %transpose.69 = f32[8192,80]{0,1} transpose(%get-tuple-element.569), dimensions={1,0}
  %mul.516 = f32[8192,80]{0,1} multiply(%transpose.69, %transpose.69)
  %reduce.169 = f32[] reduce(%mul.516, %constant.1441), dimensions={0,1}, to_apply=%region_85.3006
  %add.271 = f32[] add(%add.270, %reduce.169)
  %get-tuple-element.570 = f32[80,64,8,128]{3,2,1,0} get-tuple-element(%while.22), index=7
  %transpose.70 = f32[64,80,8,128]{3,2,0,1} transpose(%get-tuple-element.570), dimensions={1,0,2,3}
  %mul.517 = f32[64,80,8,128]{3,2,0,1} multiply(%transpose.70, %transpose.70)
  %reduce.170 = f32[] reduce(%mul.517, %constant.1441), dimensions={0,1,2,3}, to_apply=%region_86.3014
  %all-reduce.42 = f32[] all-reduce(%reduce.170), channel_id=60, replica_groups=[2,128]<=[256], use_global_device_ids=true, to_apply=%region_86.3014.clone
  %add.272 = f32[] add(%add.271, %all-reduce.42)
  %get-tuple-element.571 = f32[80,64,128,64]{3,2,1,0} get-tuple-element(%while.22), index=8
  %transpose.71 = f32[64,80,128,64]{3,2,0,1} transpose(%get-tuple-element.571), dimensions={1,0,2,3}
  %mul.518 = f32[64,80,128,64]{3,2,0,1} multiply(%transpose.71, %transpose.71)
  %reduce.171 = f32[] reduce(%mul.518, %constant.1441), dimensions={0,1,2,3}, to_apply=%region_87.3022
  %all-reduce.43 = f32[] all-reduce(%reduce.171), channel_id=61, replica_groups=[2,128]<=[256], use_global_device_ids=true, to_apply=%region_87.3022.clone
  %add.273 = f32[] add(%add.272, %all-reduce.43)
  %get-tuple-element.572 = f32[80,64,64,128]{3,2,1,0} get-tuple-element(%while.22), index=9
  %transpose.72 = f32[64,80,64,128]{3,2,0,1} transpose(%get-tuple-element.572), dimensions={1,0,2,3}
  %mul.519 = f32[64,80,64,128]{3,2,0,1} multiply(%transpose.72, %transpose.72)
  %reduce.172 = f32[] reduce(%mul.519, %constant.1441), dimensions={0,1,2,3}, to_apply=%region_88.3030
  %all-reduce.44 = f32[] all-reduce(%reduce.172), channel_id=62, replica_groups=[2,128]<=[256], use_global_device_ids=true, to_apply=%region_88.3030.clone
  %add.274 = f32[] add(%add.273, %all-reduce.44)
  %get-tuple-element.573 = f32[80,64,8,128]{3,2,1,0} get-tuple-element(%while.22), index=10
  %transpose.73 = f32[64,80,8,128]{3,2,0,1} transpose(%get-tuple-element.573), dimensions={1,0,2,3}
  %mul.520 = f32[64,80,8,128]{3,2,0,1} multiply(%transpose.73, %transpose.73)
  %reduce.173 = f32[] reduce(%mul.520, %constant.1441), dimensions={0,1,2,3}, to_apply=%region_89.3038
  %all-reduce.45 = f32[] all-reduce(%reduce.173), channel_id=63, replica_groups=[2,128]<=[256], use_global_device_ids=true, to_apply=%region_89.3038.clone
  %add.275 = f32[] add(%add.274, %all-reduce.45)
  %dot.35 = bf16[8192,128256]{1,0} dot(%mul.484, %sharding_constraint.79), lhs_contracting_dims={0,1}, rhs_contracting_dims={0,1}
  %all-reduce.46 = bf16[8192,128256]{1,0} all-reduce(%dot.35), channel_id=64, replica_groups=[2,128]<=[256], use_global_device_ids=true, to_apply=%add.14.clone
  %constant.1481 = s32[128]{0} constant({0, 64, 128, 192, 256, 320, 384, 448, 512, 576, 640, 704, 768, 832, 896, 960, 1024, 1088, 1152, 1216, 1280, 1344, 1408, 1472, 1536, 1600, 1664, 1728, 1792, 1856, 1920, 1984, 2048, 2112, 2176, 2240, 2304, 2368, 2432, 2496, 2560, 2624, 2688, 2752, 2816, 2880, 2944, 3008, 3072, 3136, 3200, 3264, 3328, 3392, 3456, 3520, 3584, 3648, 3712, 3776, 3840, 3904, 3968, 4032, 4096, 4160, 4224, 4288, 4352, 4416, 4480, 4544, 4608, 4672, 4736, 4800, 4864, 4928, 4992, 5056, 5120, 5184, 5248, 5312, 5376, 5440, 5504, 5568, 5632, 5696, 5760, 5824, 5888, 5952, 6016, 6080, 6144, 6208, 6272, 6336, 6400, 6464, 6528, 6592, 6656, 6720, 6784, 6848, 6912, 6976, 7040, 7104, 7168, 7232, 7296, 7360, 7424, 7488, 7552, 7616, 7680, 7744, 7808, 7872, 7936, 8000, 8064, 8128})
  %constant.1480 = u32[256]{0} constant({0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127})
  %partition-id.12 = u32[] partition-id()
  %dynamic-slice.208 = u32[1]{0} dynamic-slice(%constant.1480, %partition-id.12), dynamic_slice_sizes={1}
  %reshape.1314 = u32[] reshape(%dynamic-slice.208)
  %dynamic-slice.209 = s32[1]{0} dynamic-slice(%constant.1481, %reshape.1314), dynamic_slice_sizes={1}
  %reshape.1315 = s32[] reshape(%dynamic-slice.209)
  %dynamic-slice.210 = bf16[64,128256]{1,0} dynamic-slice(%all-reduce.46, %reshape.1315, %constant.1438), dynamic_slice_sizes={64,128256}
  %all-reduce.47 = bf16[64,128256]{1,0} all-reduce(%dynamic-slice.210), channel_id=65, replica_groups=[128,2]<=[2,128]T(1,0), use_global_device_ids=true, to_apply=%add.15.clone
  %convert_element_type.612 = f32[64,128256]{1,0} convert(%all-reduce.47)
  %mul.521 = f32[64,128256]{1,0} multiply(%convert_element_type.612, %convert_element_type.612)
  %reduce.174 = f32[] reduce(%mul.521, %constant.1441), dimensions={0,1}, to_apply=%region_90.3047
  %all-reduce.48 = f32[] all-reduce(%reduce.174), channel_id=66, replica_groups=[2,128]<=[256], use_global_device_ids=true, to_apply=%region_90.3047.clone
  %add.276 = f32[] add(%add.275, %all-reduce.48)
  %get-tuple-element.574 = bf16[2,8192,8192]{2,1,0} get-tuple-element(%while.22), index=1
  %sharding_constraint.80 = bf16[2,8192,8192]{2,1,0} copy(%get-tuple-element.574)
  %dot.36 = bf16[128256,8192]{1,0} dot(%convert_element_type.580, %sharding_constraint.80), lhs_contracting_dims={0,1}, rhs_contracting_dims={0,1}
  %all-reduce.49 = bf16[128256,8192]{1,0} all-reduce(%dot.36), channel_id=67, replica_groups=[2,128]<=[256], use_global_device_ids=true, to_apply=%add.16.clone
  %dynamic-slice.214 = bf16[128256,64]{1,0} dynamic-slice(%all-reduce.49, %constant.1438, %reshape.1315), dynamic_slice_sizes={128256,64}
  %all-reduce.50 = bf16[128256,64]{1,0} all-reduce(%dynamic-slice.214), channel_id=68, replica_groups=[128,2]<=[2,128]T(1,0), use_global_device_ids=true, to_apply=%add.17.clone
  %convert_element_type.613 = f32[128256,64]{1,0} convert(%all-reduce.50)
  %mul.522 = f32[128256,64]{1,0} multiply(%convert_element_type.613, %convert_element_type.613)
  %reduce.175 = f32[] reduce(%mul.522, %constant.1441), dimensions={0,1}, to_apply=%region_91.3056
  %all-reduce.51 = f32[] all-reduce(%reduce.175), channel_id=69, replica_groups=[2,128]<=[256], use_global_device_ids=true, to_apply=%region_91.3056.clone
  %add.277 = f32[] add(%add.276, %all-reduce.51)
  %sqrt.0 = f32[] sqrt(%add.277)
  %lt.37 = pred[] compare(%sqrt.0, %constant.1439), direction=LT
  %select_n.715 = pred[8192]{0} broadcast(%lt.37), dimensions={}
  %div.589 = f32[8192]{0} broadcast(%sqrt.0), dimensions={}
  %div.590 = f32[8192]{0} divide(%convert_element_type.609, %div.589)
  %select_n.716 = f32[8192]{0} select(%select_n.715, %convert_element_type.609, %div.590)
  %constant.1489 = f32[] constant(0.1)
  %broadcast.895 = f32[8192]{0} broadcast(%constant.1489), dimensions={}
  %mul.523 = f32[8192]{0} multiply(%select_n.716, %broadcast.895)
  %param.107 = f32[8192]{0} parameter(56), sharding={replicated}
  %constant.1490 = f32[] constant(0.9)
  %mul.524 = f32[8192]{0} broadcast(%constant.1490), dimensions={}
  %mul.525 = f32[8192]{0} multiply(%param.107, %mul.524)
  %add.278 = f32[8192]{0} add(%mul.523, %mul.525)
  %param.108 = s32[] parameter(55), sharding={replicated}
  %constant.1491 = s32[] constant(2147483647)
  %lt.38 = pred[] compare(%param.108, %constant.1491), direction=LT
  %add.279 = s32[] add(%param.108, %constant.1437)
  %select_n.717 = s32[] select(%lt.38, %add.279, %constant.1491)
  %pow.14 = f32[] convert(%select_n.717)
  %pow.15 = f32[] power(%constant.1490, %pow.14)
  %sub.22 = f32[] subtract(%constant.1439, %pow.15)
  %div.591 = f32[8192]{0} broadcast(%sub.22), dimensions={}
  %integer_pow.0 = f32[8192]{0} multiply(%select_n.716, %select_n.716)
  %constant.1492 = f32[] constant(0.05)
  %mul.526 = f32[8192]{0} broadcast(%constant.1492), dimensions={}
  %mul.527 = f32[8192]{0} multiply(%integer_pow.0, %mul.526)
  %param.109 = f32[8192]{0} parameter(68), sharding={replicated}
  %constant.1493 = f32[] constant(0.95)
  %mul.528 = f32[8192]{0} broadcast(%constant.1493), dimensions={}
  %mul.529 = f32[8192]{0} multiply(%param.109, %mul.528)
  %add.280 = f32[8192]{0} add(%mul.527, %mul.529)
  %pow.17 = f32[] power(%constant.1493, %pow.14)
  %sub.23 = f32[] subtract(%constant.1439, %pow.17)
  %div.592 = f32[8192]{0} broadcast(%sub.23), dimensions={}
  %div.593 = f32[8192]{0} divide(%add.280, %div.592)
  %sqrt.1 = f32[8192]{0} sqrt(%div.593)
  %add.281 = f32[8192]{0} broadcast(%constant.1440), dimensions={}
  %add.282 = f32[8192]{0} add(%sqrt.1, %add.281)
  %multiply.115 = f32[8192]{0} multiply(%div.591, %add.282)
  %div.594 = f32[8192]{0} divide(%add.278, %multiply.115)
  %mul.530 = f32[8192]{0} multiply(%param.89, %broadcast.895)
  %add.283 = f32[8192]{0} add(%div.594, %mul.530)
  %mul.531 = f32[8192]{0} multiply(%mul.509, %add.283)
  %add.284 = f32[8192]{0} add(%param.89, %mul.531)
  %mul.532 = f32[64,80,28672]{2,1,0} broadcast(%mul.508), dimensions={}
  %select_n.718 = pred[64,80,28672]{2,1,0} broadcast(%lt.37), dimensions={}
  %div.595 = f32[64,80,28672]{2,1,0} broadcast(%sqrt.0), dimensions={}
  %div.596 = f32[64,80,28672]{2,0,1} divide(%transpose.65, %div.595)
  %select_n.719 = f32[64,80,28672]{2,1,0} select(%select_n.718, %transpose.65, %div.596)
  %broadcast.896 = f32[64,80,28672]{2,1,0} broadcast(%constant.1489), dimensions={}
  %mul.533 = f32[64,80,28672]{2,1,0} multiply(%select_n.719, %broadcast.896)
  %param.110 = f32[64,80,28672]{2,1,0} parameter(57), sharding={devices=[128,1,1,2]<=[2,128]T(1,0) last_tile_dim_replicate}
  %broadcast.897 = f32[64,80,28672]{2,1,0} broadcast(%constant.1490), dimensions={}
  %mul.534 = f32[64,80,28672]{2,1,0} multiply(%param.110, %broadcast.897)
  %add.285 = f32[64,80,28672]{2,1,0} add(%mul.533, %mul.534)
  %div.597 = f32[64,80,28672]{2,1,0} broadcast(%sub.22), dimensions={}
  %integer_pow.1 = f32[64,80,28672]{2,1,0} multiply(%select_n.719, %select_n.719)
  %broadcast.898 = f32[64,80,28672]{2,1,0} broadcast(%constant.1492), dimensions={}
  %mul.535 = f32[64,80,28672]{2,1,0} multiply(%integer_pow.1, %broadcast.898)
  %param.111 = f32[64,80,28672]{2,1,0} parameter(69), sharding={devices=[128,1,1,2]<=[2,128]T(1,0) last_tile_dim_replicate}
  %broadcast.899 = f32[64,80,28672]{2,1,0} broadcast(%constant.1493), dimensions={}
  %mul.536 = f32[64,80,28672]{2,1,0} multiply(%param.111, %broadcast.899)
  %add.286 = f32[64,80,28672]{2,1,0} add(%mul.535, %mul.536)
  %div.598 = f32[64,80,28672]{2,1,0} broadcast(%sub.23), dimensions={}
  %div.599 = f32[64,80,28672]{2,1,0} divide(%add.286, %div.598)
  %sqrt.2 = f32[64,80,28672]{2,1,0} sqrt(%div.599)
  %broadcast.900 = f32[64,80,28672]{2,1,0} broadcast(%constant.1440), dimensions={}
  %add.287 = f32[64,80,28672]{2,1,0} add(%sqrt.2, %broadcast.900)
  %multiply.116 = f32[64,80,28672]{2,1,0} multiply(%div.597, %add.287)
  %div.600 = f32[64,80,28672]{2,1,0} divide(%add.285, %multiply.116)
  %mul.537 = f32[64,80,28672]{2,1,0} multiply(%param.76, %broadcast.896)
  %add.288 = f32[64,80,28672]{2,1,0} add(%div.600, %mul.537)
  %mul.539 = f32[64,80,28672]{2,1,0} multiply(%mul.532, %add.288)
  %add.289 = f32[64,80,28672]{2,1,0} add(%param.76, %mul.539)
  %div.601 = f32[64,80,28672]{2,0,1} divide(%transpose.66, %div.595)
  %select_n.720 = f32[64,80,28672]{2,1,0} select(%select_n.718, %transpose.66, %div.601)
  %mul.540 = f32[64,80,28672]{2,1,0} multiply(%select_n.720, %broadcast.896)
  %param.112 = f32[64,80,28672]{2,1,0} parameter(58), sharding={devices=[128,1,1,2]<=[2,128]T(1,0) last_tile_dim_replicate}
  %mul.541 = f32[64,80,28672]{2,1,0} multiply(%param.112, %broadcast.897)
  %add.290 = f32[64,80,28672]{2,1,0} add(%mul.540, %mul.541)
  %integer_pow.2 = f32[64,80,28672]{2,1,0} multiply(%select_n.720, %select_n.720)
  %mul.543 = f32[64,80,28672]{2,1,0} multiply(%integer_pow.2, %broadcast.898)
  %param.113 = f32[64,80,28672]{2,1,0} parameter(70), sharding={devices=[128,1,1,2]<=[2,128]T(1,0) last_tile_dim_replicate}
  %mul.547 = f32[64,80,28672]{2,1,0} multiply(%param.113, %broadcast.899)
  %add.291 = f32[64,80,28672]{2,1,0} add(%mul.543, %mul.547)
  %div.603 = f32[64,80,28672]{2,1,0} divide(%add.291, %div.598)
  %sqrt.3 = f32[64,80,28672]{2,1,0} sqrt(%div.603)
  %add.292 = f32[64,80,28672]{2,1,0} add(%sqrt.3, %broadcast.900)
  %multiply.117 = f32[64,80,28672]{2,1,0} multiply(%div.597, %add.292)
  %div.604 = f32[64,80,28672]{2,1,0} divide(%add.290, %multiply.117)
  %mul.548 = f32[64,80,28672]{2,1,0} multiply(%param.81, %broadcast.896)
  %add.293 = f32[64,80,28672]{2,1,0} add(%div.604, %mul.548)
  %mul.549 = f32[64,80,28672]{2,1,0} multiply(%mul.532, %add.293)
  %add.294 = f32[64,80,28672]{2,1,0} add(%param.81, %mul.549)
  %mul.550 = f32[28672,80,64]{2,1,0} broadcast(%mul.508), dimensions={}
  %select_n.722 = pred[28672,80,64]{2,1,0} broadcast(%lt.37), dimensions={}
  %div.607 = f32[28672,80,64]{2,1,0} broadcast(%sqrt.0), dimensions={}
  %div.608 = f32[28672,80,64]{2,0,1} divide(%transpose.67, %div.607)
  %select_n.725 = f32[28672,80,64]{2,1,0} select(%select_n.722, %transpose.67, %div.608)
  %broadcast.901 = f32[28672,80,64]{2,1,0} broadcast(%constant.1489), dimensions={}
  %mul.551 = f32[28672,80,64]{2,1,0} multiply(%select_n.725, %broadcast.901)
  %param.114 = f32[28672,80,64]{2,1,0} parameter(59), sharding={devices=[1,1,128,2]<=[2,128]T(1,0) last_tile_dim_replicate}
  %mul.552 = f32[28672,80,64]{2,1,0} broadcast(%constant.1490), dimensions={}
  %mul.553 = f32[28672,80,64]{2,1,0} multiply(%param.114, %mul.552)
  %add.295 = f32[28672,80,64]{2,1,0} add(%mul.551, %mul.553)
  %div.610 = f32[28672,80,64]{2,1,0} broadcast(%sub.22), dimensions={}
  %integer_pow.3 = f32[28672,80,64]{2,1,0} multiply(%select_n.725, %select_n.725)
  %mul.554 = f32[28672,80,64]{2,1,0} broadcast(%constant.1492), dimensions={}
  %mul.555 = f32[28672,80,64]{2,1,0} multiply(%integer_pow.3, %mul.554)
  %param.115 = f32[28672,80,64]{2,1,0} parameter(71), sharding={devices=[1,1,128,2]<=[2,128]T(1,0) last_tile_dim_replicate}
  %mul.556 = f32[28672,80,64]{2,1,0} broadcast(%constant.1493), dimensions={}
  %mul.563 = f32[28672,80,64]{2,1,0} multiply(%param.115, %mul.556)
  %add.296 = f32[28672,80,64]{2,1,0} add(%mul.555, %mul.563)
  %div.611 = f32[28672,80,64]{2,1,0} broadcast(%sub.23), dimensions={}
  %div.612 = f32[28672,80,64]{2,1,0} divide(%add.296, %div.611)
  %sqrt.4 = f32[28672,80,64]{2,1,0} sqrt(%div.612)
  %add.299 = f32[28672,80,64]{2,1,0} broadcast(%constant.1440), dimensions={}
  %add.300 = f32[28672,80,64]{2,1,0} add(%sqrt.4, %add.299)
  %multiply.118 = f32[28672,80,64]{2,1,0} multiply(%div.610, %add.300)
  %div.614 = f32[28672,80,64]{2,1,0} divide(%add.295, %multiply.118)
  %mul.564 = f32[28672,80,64]{2,1,0} multiply(%param.86, %broadcast.901)
  %add.301 = f32[28672,80,64]{2,1,0} add(%div.614, %mul.564)
  %mul.565 = f32[28672,80,64]{2,1,0} multiply(%mul.550, %add.301)
  %add.302 = f32[28672,80,64]{2,1,0} add(%param.86, %mul.565)
  %mul.566 = f32[8192,80]{1,0} broadcast(%mul.508), dimensions={}
  %select_n.726 = pred[8192,80]{1,0} broadcast(%lt.37), dimensions={}
  %div.615 = f32[8192,80]{1,0} broadcast(%sqrt.0), dimensions={}
  %div.616 = f32[8192,80]{0,1} divide(%transpose.68, %div.615)
  %select_n.727 = f32[8192,80]{1,0} select(%select_n.726, %transpose.68, %div.616)
  %broadcast.902 = f32[8192,80]{1,0} broadcast(%constant.1489), dimensions={}
  %mul.567 = f32[8192,80]{1,0} multiply(%select_n.727, %broadcast.902)
  %param.116 = f32[8192,80]{1,0} parameter(60), sharding={replicated}
  %broadcast.903 = f32[8192,80]{1,0} broadcast(%constant.1490), dimensions={}
  %mul.568 = f32[8192,80]{1,0} multiply(%param.116, %broadcast.903)
  %add.303 = f32[8192,80]{1,0} add(%mul.567, %mul.568)
  %div.617 = f32[8192,80]{1,0} broadcast(%sub.22), dimensions={}
  %integer_pow.4 = f32[8192,80]{1,0} multiply(%select_n.727, %select_n.727)
  %broadcast.904 = f32[8192,80]{1,0} broadcast(%constant.1492), dimensions={}
  %mul.569 = f32[8192,80]{1,0} multiply(%integer_pow.4, %broadcast.904)
  %param.117 = f32[8192,80]{1,0} parameter(72), sharding={replicated}
  %broadcast.905 = f32[8192,80]{1,0} broadcast(%constant.1493), dimensions={}
  %mul.570 = f32[8192,80]{1,0} multiply(%param.117, %broadcast.905)
  %add.304 = f32[8192,80]{1,0} add(%mul.569, %mul.570)
  %div.618 = f32[8192,80]{1,0} broadcast(%sub.23), dimensions={}
  %div.619 = f32[8192,80]{1,0} divide(%add.304, %div.618)
  %sqrt.5 = f32[8192,80]{1,0} sqrt(%div.619)
  %broadcast.906 = f32[8192,80]{1,0} broadcast(%constant.1440), dimensions={}
  %add.305 = f32[8192,80]{1,0} add(%sqrt.5, %broadcast.906)
  %multiply.119 = f32[8192,80]{1,0} multiply(%div.617, %add.305)
  %div.620 = f32[8192,80]{1,0} divide(%add.303, %multiply.119)
  %mul.571 = f32[8192,80]{1,0} multiply(%param.73, %broadcast.902)
  %add.306 = f32[8192,80]{1,0} add(%div.620, %mul.571)
  %mul.572 = f32[8192,80]{1,0} multiply(%mul.566, %add.306)
  %add.307 = f32[8192,80]{1,0} add(%param.73, %mul.572)
  %div.621 = f32[8192,80]{0,1} divide(%transpose.69, %div.615)
  %select_n.728 = f32[8192,80]{1,0} select(%select_n.726, %transpose.69, %div.621)
  %mul.573 = f32[8192,80]{1,0} multiply(%select_n.728, %broadcast.902)
  %param.118 = f32[8192,80]{1,0} parameter(61), sharding={replicated}
  %mul.574 = f32[8192,80]{1,0} multiply(%param.118, %broadcast.903)
  %add.308 = f32[8192,80]{1,0} add(%mul.573, %mul.574)
  %integer_pow.5 = f32[8192,80]{1,0} multiply(%select_n.728, %select_n.728)
  %mul.575 = f32[8192,80]{1,0} multiply(%integer_pow.5, %broadcast.904)
  %param.119 = f32[8192,80]{1,0} parameter(73), sharding={replicated}
  %mul.576 = f32[8192,80]{1,0} multiply(%param.119, %broadcast.905)
  %add.309 = f32[8192,80]{1,0} add(%mul.575, %mul.576)
  %div.622 = f32[8192,80]{1,0} divide(%add.309, %div.618)
  %sqrt.6 = f32[8192,80]{1,0} sqrt(%div.622)
  %add.310 = f32[8192,80]{1,0} add(%sqrt.6, %broadcast.906)
  %multiply.120 = f32[8192,80]{1,0} multiply(%div.617, %add.310)
  %div.623 = f32[8192,80]{1,0} divide(%add.308, %multiply.120)
  %mul.577 = f32[8192,80]{1,0} multiply(%param.50, %broadcast.902)
  %add.311 = f32[8192,80]{1,0} add(%div.623, %mul.577)
  %mul.578 = f32[8192,80]{1,0} multiply(%mul.566, %add.311)
  %add.312 = f32[8192,80]{1,0} add(%param.50, %mul.578)
  %mul.579 = f32[64,80,8,128]{3,2,1,0} broadcast(%mul.508), dimensions={}
  %select_n.733 = pred[64,80,8,128]{3,2,1,0} broadcast(%lt.37), dimensions={}
  %div.624 = f32[64,80,8,128]{3,2,1,0} broadcast(%sqrt.0), dimensions={}
  %div.625 = f32[64,80,8,128]{3,2,0,1} divide(%transpose.70, %div.624)
  %select_n.734 = f32[64,80,8,128]{3,2,1,0} select(%select_n.733, %transpose.70, %div.625)
  %broadcast.907 = f32[64,80,8,128]{3,2,1,0} broadcast(%constant.1489), dimensions={}
  %mul.580 = f32[64,80,8,128]{3,2,1,0} multiply(%select_n.734, %broadcast.907)
  %param.120 = f32[64,80,8,128]{3,2,1,0} parameter(62), sharding={devices=[128,1,1,1,2]<=[2,128]T(1,0) last_tile_dim_replicate}
  %broadcast.908 = f32[64,80,8,128]{3,2,1,0} broadcast(%constant.1490), dimensions={}
  %mul.581 = f32[64,80,8,128]{3,2,1,0} multiply(%param.120, %broadcast.908)
  %add.313 = f32[64,80,8,128]{3,2,1,0} add(%mul.580, %mul.581)
  %div.626 = f32[64,80,8,128]{3,2,1,0} broadcast(%sub.22), dimensions={}
  %integer_pow.6 = f32[64,80,8,128]{3,2,1,0} multiply(%select_n.734, %select_n.734)
  %broadcast.909 = f32[64,80,8,128]{3,2,1,0} broadcast(%constant.1492), dimensions={}
  %mul.582 = f32[64,80,8,128]{3,2,1,0} multiply(%integer_pow.6, %broadcast.909)
  %param.121 = f32[64,80,8,128]{3,2,1,0} parameter(74), sharding={devices=[128,1,1,1,2]<=[2,128]T(1,0) last_tile_dim_replicate}
  %broadcast.910 = f32[64,80,8,128]{3,2,1,0} broadcast(%constant.1493), dimensions={}
  %mul.583 = f32[64,80,8,128]{3,2,1,0} multiply(%param.121, %broadcast.910)
  %add.314 = f32[64,80,8,128]{3,2,1,0} add(%mul.582, %mul.583)
  %div.627 = f32[64,80,8,128]{3,2,1,0} broadcast(%sub.23), dimensions={}
  %div.628 = f32[64,80,8,128]{3,2,1,0} divide(%add.314, %div.627)
  %sqrt.7 = f32[64,80,8,128]{3,2,1,0} sqrt(%div.628)
  %broadcast.911 = f32[64,80,8,128]{3,2,1,0} broadcast(%constant.1440), dimensions={}
  %add.315 = f32[64,80,8,128]{3,2,1,0} add(%sqrt.7, %broadcast.911)
  %multiply.121 = f32[64,80,8,128]{3,2,1,0} multiply(%div.626, %add.315)
  %div.629 = f32[64,80,8,128]{3,2,1,0} divide(%add.313, %multiply.121)
  %mul.584 = f32[64,80,8,128]{3,2,1,0} multiply(%param.59, %broadcast.907)
  %add.316 = f32[64,80,8,128]{3,2,1,0} add(%div.629, %mul.584)
  %mul.585 = f32[64,80,8,128]{3,2,1,0} multiply(%mul.579, %add.316)
  %add.317 = f32[64,80,8,128]{3,2,1,0} add(%param.59, %mul.585)
  %mul.586 = f32[64,80,128,64]{3,2,1,0} broadcast(%mul.508), dimensions={}
  %select_n.735 = pred[64,80,128,64]{3,2,1,0} broadcast(%lt.37), dimensions={}
  %div.630 = f32[64,80,128,64]{3,2,1,0} broadcast(%sqrt.0), dimensions={}
  %div.631 = f32[64,80,128,64]{3,2,0,1} divide(%transpose.71, %div.630)
  %select_n.736 = f32[64,80,128,64]{3,2,1,0} select(%select_n.735, %transpose.71, %div.631)
  %broadcast.912 = f32[64,80,128,64]{3,2,1,0} broadcast(%constant.1489), dimensions={}
  %mul.587 = f32[64,80,128,64]{3,2,1,0} multiply(%select_n.736, %broadcast.912)
  %param.122 = f32[64,80,128,64]{3,2,1,0} parameter(63), sharding={devices=[1,1,1,128,2]<=[2,128]T(1,0) last_tile_dim_replicate}
  %mul.588 = f32[64,80,128,64]{3,2,1,0} broadcast(%constant.1490), dimensions={}
  %mul.589 = f32[64,80,128,64]{3,2,1,0} multiply(%param.122, %mul.588)
  %add.318 = f32[64,80,128,64]{3,2,1,0} add(%mul.587, %mul.589)
  %div.632 = f32[64,80,128,64]{3,2,1,0} broadcast(%sub.22), dimensions={}
  %integer_pow.7 = f32[64,80,128,64]{3,2,1,0} multiply(%select_n.736, %select_n.736)
  %mul.590 = f32[64,80,128,64]{3,2,1,0} broadcast(%constant.1492), dimensions={}
  %mul.591 = f32[64,80,128,64]{3,2,1,0} multiply(%integer_pow.7, %mul.590)
  %param.123 = f32[64,80,128,64]{3,2,1,0} parameter(75), sharding={devices=[1,1,1,128,2]<=[2,128]T(1,0) last_tile_dim_replicate}
  %mul.592 = f32[64,80,128,64]{3,2,1,0} broadcast(%constant.1493), dimensions={}
  %mul.593 = f32[64,80,128,64]{3,2,1,0} multiply(%param.123, %mul.592)
  %add.319 = f32[64,80,128,64]{3,2,1,0} add(%mul.591, %mul.593)
  %div.633 = f32[64,80,128,64]{3,2,1,0} broadcast(%sub.23), dimensions={}
  %div.634 = f32[64,80,128,64]{3,2,1,0} divide(%add.319, %div.633)
  %sqrt.8 = f32[64,80,128,64]{3,2,1,0} sqrt(%div.634)
  %add.320 = f32[64,80,128,64]{3,2,1,0} broadcast(%constant.1440), dimensions={}
  %add.321 = f32[64,80,128,64]{3,2,1,0} add(%sqrt.8, %add.320)
  %multiply.122 = f32[64,80,128,64]{3,2,1,0} multiply(%div.632, %add.321)
  %div.635 = f32[64,80,128,64]{3,2,1,0} divide(%add.318, %multiply.122)
  %mul.594 = f32[64,80,128,64]{3,2,1,0} multiply(%param.70, %broadcast.912)
  %add.322 = f32[64,80,128,64]{3,2,1,0} add(%div.635, %mul.594)
  %mul.595 = f32[64,80,128,64]{3,2,1,0} multiply(%mul.586, %add.322)
  %add.323 = f32[64,80,128,64]{3,2,1,0} add(%param.70, %mul.595)
  %mul.596 = f32[64,80,64,128]{3,2,1,0} broadcast(%mul.508), dimensions={}
  %select_n.737 = pred[64,80,64,128]{3,2,1,0} broadcast(%lt.37), dimensions={}
  %div.636 = f32[64,80,64,128]{3,2,1,0} broadcast(%sqrt.0), dimensions={}
  %div.637 = f32[64,80,64,128]{3,2,0,1} divide(%transpose.72, %div.636)
  %select_n.738 = f32[64,80,64,128]{3,2,1,0} select(%select_n.737, %transpose.72, %div.637)
  %broadcast.913 = f32[64,80,64,128]{3,2,1,0} broadcast(%constant.1489), dimensions={}
  %mul.597 = f32[64,80,64,128]{3,2,1,0} multiply(%select_n.738, %broadcast.913)
  %param.124 = f32[64,80,64,128]{3,2,1,0} parameter(64), sharding={devices=[128,1,1,1,2]<=[2,128]T(1,0) last_tile_dim_replicate}
  %mul.598 = f32[64,80,64,128]{3,2,1,0} broadcast(%constant.1490), dimensions={}
  %mul.599 = f32[64,80,64,128]{3,2,1,0} multiply(%param.124, %mul.598)
  %add.324 = f32[64,80,64,128]{3,2,1,0} add(%mul.597, %mul.599)
  %div.638 = f32[64,80,64,128]{3,2,1,0} broadcast(%sub.22), dimensions={}
  %integer_pow.8 = f32[64,80,64,128]{3,2,1,0} multiply(%select_n.738, %select_n.738)
  %mul.600 = f32[64,80,64,128]{3,2,1,0} broadcast(%constant.1492), dimensions={}
  %mul.601 = f32[64,80,64,128]{3,2,1,0} multiply(%integer_pow.8, %mul.600)
  %param.125 = f32[64,80,64,128]{3,2,1,0} parameter(76), sharding={devices=[128,1,1,1,2]<=[2,128]T(1,0) last_tile_dim_replicate}
  %mul.602 = f32[64,80,64,128]{3,2,1,0} broadcast(%constant.1493), dimensions={}
  %mul.603 = f32[64,80,64,128]{3,2,1,0} multiply(%param.125, %mul.602)
  %add.325 = f32[64,80,64,128]{3,2,1,0} add(%mul.601, %mul.603)
  %div.639 = f32[64,80,64,128]{3,2,1,0} broadcast(%sub.23), dimensions={}
  %div.640 = f32[64,80,64,128]{3,2,1,0} divide(%add.325, %div.639)
  %sqrt.9 = f32[64,80,64,128]{3,2,1,0} sqrt(%div.640)
  %add.326 = f32[64,80,64,128]{3,2,1,0} broadcast(%constant.1440), dimensions={}
  %add.327 = f32[64,80,64,128]{3,2,1,0} add(%sqrt.9, %add.326)
  %multiply.123 = f32[64,80,64,128]{3,2,1,0} multiply(%div.638, %add.327)
  %div.641 = f32[64,80,64,128]{3,2,1,0} divide(%add.324, %multiply.123)
  %mul.604 = f32[64,80,64,128]{3,2,1,0} multiply(%param.53, %broadcast.913)
  %add.329 = f32[64,80,64,128]{3,2,1,0} add(%div.641, %mul.604)
  %mul.605 = f32[64,80,64,128]{3,2,1,0} multiply(%mul.596, %add.329)
  %add.330 = f32[64,80,64,128]{3,2,1,0} add(%param.53, %mul.605)
  %div.642 = f32[64,80,8,128]{3,2,0,1} divide(%transpose.73, %div.624)
  %select_n.739 = f32[64,80,8,128]{3,2,1,0} select(%select_n.733, %transpose.73, %div.642)
  %mul.606 = f32[64,80,8,128]{3,2,1,0} multiply(%select_n.739, %broadcast.907)
  %param.126 = f32[64,80,8,128]{3,2,1,0} parameter(65), sharding={devices=[128,1,1,1,2]<=[2,128]T(1,0) last_tile_dim_replicate}
  %mul.607 = f32[64,80,8,128]{3,2,1,0} multiply(%param.126, %broadcast.908)
  %add.331 = f32[64,80,8,128]{3,2,1,0} add(%mul.606, %mul.607)
  %integer_pow.9 = f32[64,80,8,128]{3,2,1,0} multiply(%select_n.739, %select_n.739)
  %mul.608 = f32[64,80,8,128]{3,2,1,0} multiply(%integer_pow.9, %broadcast.909)
  %param.127 = f32[64,80,8,128]{3,2,1,0} parameter(77), sharding={devices=[128,1,1,1,2]<=[2,128]T(1,0) last_tile_dim_replicate}
  %mul.609 = f32[64,80,8,128]{3,2,1,0} multiply(%param.127, %broadcast.910)
  %add.332 = f32[64,80,8,128]{3,2,1,0} add(%mul.608, %mul.609)
  %div.644 = f32[64,80,8,128]{3,2,1,0} divide(%add.332, %div.627)
  %sqrt.10 = f32[64,80,8,128]{3,2,1,0} sqrt(%div.644)
  %add.333 = f32[64,80,8,128]{3,2,1,0} add(%sqrt.10, %broadcast.911)
  %multiply.124 = f32[64,80,8,128]{3,2,1,0} multiply(%div.626, %add.333)
  %div.645 = f32[64,80,8,128]{3,2,1,0} divide(%add.331, %multiply.124)
  %mul.610 = f32[64,80,8,128]{3,2,1,0} multiply(%param.64, %broadcast.907)
  %add.334 = f32[64,80,8,128]{3,2,1,0} add(%div.645, %mul.610)
  %mul.611 = f32[64,80,8,128]{3,2,1,0} multiply(%mul.579, %add.334)
  %add.335 = f32[64,80,8,128]{3,2,1,0} add(%param.64, %mul.611)
  %mul.612 = f32[64,128256]{1,0} broadcast(%mul.508), dimensions={}
  %select_n.740 = pred[64,128256]{1,0} broadcast(%lt.37), dimensions={}
  %div.648 = f32[64,128256]{1,0} broadcast(%sqrt.0), dimensions={}
  %div.649 = f32[64,128256]{1,0} divide(%convert_element_type.612, %div.648)
  %select_n.741 = f32[64,128256]{1,0} select(%select_n.740, %convert_element_type.612, %div.649)
  %broadcast.914 = f32[64,128256]{1,0} broadcast(%constant.1489), dimensions={}
  %mul.613 = f32[64,128256]{1,0} multiply(%select_n.741, %broadcast.914)
  %param.128 = f32[64,128256]{1,0} parameter(66), sharding={devices=[128,1,2]<=[2,128]T(1,0) last_tile_dim_replicate}
  %mul.614 = f32[64,128256]{1,0} broadcast(%constant.1490), dimensions={}
  %mul.615 = f32[64,128256]{1,0} multiply(%param.128, %mul.614)
  %add.336 = f32[64,128256]{1,0} add(%mul.613, %mul.615)
  %div.651 = f32[64,128256]{1,0} broadcast(%sub.22), dimensions={}
  %integer_pow.10 = f32[64,128256]{1,0} multiply(%select_n.741, %select_n.741)
  %mul.616 = f32[64,128256]{1,0} broadcast(%constant.1492), dimensions={}
  %mul.617 = f32[64,128256]{1,0} multiply(%integer_pow.10, %mul.616)
  %param.129 = f32[64,128256]{1,0} parameter(78), sharding={devices=[128,1,2]<=[2,128]T(1,0) last_tile_dim_replicate}
  %mul.619 = f32[64,128256]{1,0} broadcast(%constant.1493), dimensions={}
  %mul.620 = f32[64,128256]{1,0} multiply(%param.129, %mul.619)
  %add.337 = f32[64,128256]{1,0} add(%mul.617, %mul.620)
  %div.652 = f32[64,128256]{1,0} broadcast(%sub.23), dimensions={}
  %div.653 = f32[64,128256]{1,0} divide(%add.337, %div.652)
  %sqrt.11 = f32[64,128256]{1,0} sqrt(%div.653)
  %add.338 = f32[64,128256]{1,0} broadcast(%constant.1440), dimensions={}
  %add.339 = f32[64,128256]{1,0} add(%sqrt.11, %add.338)
  %multiply.125 = f32[64,128256]{1,0} multiply(%div.651, %add.339)
  %div.655 = f32[64,128256]{1,0} divide(%add.336, %multiply.125)
  %mul.621 = f32[64,128256]{1,0} multiply(%param.90, %broadcast.914)
  %add.340 = f32[64,128256]{1,0} add(%div.655, %mul.621)
  %mul.623 = f32[64,128256]{1,0} multiply(%mul.612, %add.340)
  %add.341 = f32[64,128256]{1,0} add(%param.90, %mul.623)
  %mul.624 = f32[128256,64]{1,0} broadcast(%mul.508), dimensions={}
  %select_n.742 = pred[128256,64]{1,0} broadcast(%lt.37), dimensions={}
  %div.656 = f32[128256,64]{1,0} broadcast(%sqrt.0), dimensions={}
  %div.657 = f32[128256,64]{1,0} divide(%convert_element_type.613, %div.656)
  %select_n.743 = f32[128256,64]{1,0} select(%select_n.742, %convert_element_type.613, %div.657)
  %broadcast.915 = f32[128256,64]{1,0} broadcast(%constant.1489), dimensions={}
  %mul.625 = f32[128256,64]{1,0} multiply(%select_n.743, %broadcast.915)
  %param.130 = f32[128256,64]{1,0} parameter(67), sharding={devices=[1,128,2]<=[2,128]T(1,0) last_tile_dim_replicate}
  %mul.626 = f32[128256,64]{1,0} broadcast(%constant.1490), dimensions={}
  %mul.627 = f32[128256,64]{1,0} multiply(%param.130, %mul.626)
  %add.342 = f32[128256,64]{1,0} add(%mul.625, %mul.627)
  %div.658 = f32[128256,64]{1,0} broadcast(%sub.22), dimensions={}
  %integer_pow.11 = f32[128256,64]{1,0} multiply(%select_n.743, %select_n.743)
  %mul.628 = f32[128256,64]{1,0} broadcast(%constant.1492), dimensions={}
  %mul.629 = f32[128256,64]{1,0} multiply(%integer_pow.11, %mul.628)
  %param.131 = f32[128256,64]{1,0} parameter(79), sharding={devices=[1,128,2]<=[2,128]T(1,0) last_tile_dim_replicate}
  %mul.630 = f32[128256,64]{1,0} broadcast(%constant.1493), dimensions={}
  %mul.631 = f32[128256,64]{1,0} multiply(%param.131, %mul.630)
  %add.343 = f32[128256,64]{1,0} add(%mul.629, %mul.631)
  %div.659 = f32[128256,64]{1,0} broadcast(%sub.23), dimensions={}
  %div.660 = f32[128256,64]{1,0} divide(%add.343, %div.659)
  %sqrt.12 = f32[128256,64]{1,0} sqrt(%div.660)
  %add.344 = f32[128256,64]{1,0} broadcast(%constant.1440), dimensions={}
  %add.345 = f32[128256,64]{1,0} add(%sqrt.12, %add.344)
  %multiply.126 = f32[128256,64]{1,0} multiply(%div.658, %add.345)
  %div.661 = f32[128256,64]{1,0} divide(%add.342, %multiply.126)
  %mul.632 = f32[128256,64]{1,0} multiply(%param.49, %broadcast.915)
  %add.346 = f32[128256,64]{1,0} add(%div.661, %mul.632)
  %mul.633 = f32[128256,64]{1,0} multiply(%mul.624, %add.346)
  %add.347 = f32[128256,64]{1,0} add(%param.49, %mul.633)
  %lt.39 = pred[] compare(%param.106, %constant.1491), direction=LT
  %add.348 = s32[] add(%param.106, %constant.1437)
  %select_n.744 = s32[] select(%lt.39, %add.348, %constant.1491)
  %square.86 = f32[80,1024]{1,0} multiply(%get-tuple-element.523, %get-tuple-element.523)
  %reduce.176 = f32[] reduce(%square.86, %constant.1441), dimensions={0,1}, to_apply=%region_92.3387
  %square.87 = f32[80,1]{1,0} multiply(%get-tuple-element.524, %get-tuple-element.524)
  %reduce.177 = f32[] reduce(%square.87, %constant.1441), dimensions={0,1}, to_apply=%region_93.3393
  %add.349 = f32[] add(%reduce.176, %reduce.177)
  %square.88 = f32[80,1024]{1,0} multiply(%get-tuple-element.525, %get-tuple-element.525)
  %reduce.178 = f32[] reduce(%square.88, %constant.1441), dimensions={0,1}, to_apply=%region_94.3400
  %add.350 = f32[] add(%add.349, %reduce.178)
  %square.89 = f32[80,1]{1,0} multiply(%get-tuple-element.526, %get-tuple-element.526)
  %reduce.179 = f32[] reduce(%square.89, %constant.1441), dimensions={0,1}, to_apply=%region_95.3407
  %add.351 = f32[] add(%add.350, %reduce.179)
  %square.90 = f32[80,1024]{1,0} multiply(%get-tuple-element.527, %get-tuple-element.527)
  %reduce.180 = f32[] reduce(%square.90, %constant.1441), dimensions={0,1}, to_apply=%region_96.3414
  %add.352 = f32[] add(%add.351, %reduce.180)
  %square.91 = f32[80,1]{1,0} multiply(%get-tuple-element.528, %get-tuple-element.528)
  %reduce.181 = f32[] reduce(%square.91, %constant.1441), dimensions={0,1}, to_apply=%region_97.3421
  %add.353 = f32[] add(%add.352, %reduce.181)
  %square.92 = f32[80,1024]{1,0} multiply(%get-tuple-element.529, %get-tuple-element.529)
  %reduce.182 = f32[] reduce(%square.92, %constant.1441), dimensions={0,1}, to_apply=%region_98.3428
  %add.354 = f32[] add(%add.353, %reduce.182)
  %square.93 = f32[80,1]{1,0} multiply(%get-tuple-element.530, %get-tuple-element.530)
  %reduce.183 = f32[] reduce(%square.93, %constant.1441), dimensions={0,1}, to_apply=%region_99.3435
  %add.355 = f32[] add(%add.354, %reduce.183)
  %square.94 = f32[80,1024]{1,0} multiply(%get-tuple-element.531, %get-tuple-element.531)
  %reduce.184 = f32[] reduce(%square.94, %constant.1441), dimensions={0,1}, to_apply=%region_100.3442
  %add.356 = f32[] add(%add.355, %reduce.184)
  %square.95 = f32[80,1]{1,0} multiply(%get-tuple-element.532, %get-tuple-element.532)
  %reduce.185 = f32[] reduce(%square.95, %constant.1441), dimensions={0,1}, to_apply=%region_101.3449
  %add.357 = f32[] add(%add.356, %reduce.185)
  %square.96 = f32[80,1024]{1,0} multiply(%get-tuple-element.533, %get-tuple-element.533)
  %reduce.186 = f32[] reduce(%square.96, %constant.1441), dimensions={0,1}, to_apply=%region_102.3456
  %add.358 = f32[] add(%add.357, %reduce.186)
  %square.97 = f32[80,1]{1,0} multiply(%get-tuple-element.534, %get-tuple-element.534)
  %reduce.187 = f32[] reduce(%square.97, %constant.1441), dimensions={0,1}, to_apply=%region_103.3463
  %add.359 = f32[] add(%add.358, %reduce.187)
  %square.98 = f32[80,1024]{1,0} multiply(%get-tuple-element.535, %get-tuple-element.535)
  %reduce.188 = f32[] reduce(%square.98, %constant.1441), dimensions={0,1}, to_apply=%region_104.3470
  %add.360 = f32[] add(%add.359, %reduce.188)
  %square.99 = f32[80,1]{1,0} multiply(%get-tuple-element.536, %get-tuple-element.536)
  %reduce.189 = f32[] reduce(%square.99, %constant.1441), dimensions={0,1}, to_apply=%region_105.3477
  %add.361 = f32[] add(%add.360, %reduce.189)
  %square.100 = f32[80,1024]{1,0} multiply(%get-tuple-element.537, %get-tuple-element.537)
  %reduce.190 = f32[] reduce(%square.100, %constant.1441), dimensions={0,1}, to_apply=%region_106.3484
  %add.362 = f32[] add(%add.361, %reduce.190)
  %square.101 = f32[80,1]{1,0} multiply(%get-tuple-element.538, %get-tuple-element.538)
  %reduce.191 = f32[] reduce(%square.101, %constant.1441), dimensions={0,1}, to_apply=%region_107.3491
  %add.363 = f32[] add(%add.362, %reduce.191)
  %square.102 = f32[80,1024]{1,0} multiply(%get-tuple-element.539, %get-tuple-element.539)
  %reduce.192 = f32[] reduce(%square.102, %constant.1441), dimensions={0,1}, to_apply=%region_108.3498
  %add.365 = f32[] add(%add.363, %reduce.192)
  %square.103 = f32[80,1]{1,0} multiply(%get-tuple-element.540, %get-tuple-element.540)
  %reduce.193 = f32[] reduce(%square.103, %constant.1441), dimensions={0,1}, to_apply=%region_109.3505
  %add.366 = f32[] add(%add.365, %reduce.193)
  %square.104 = f32[80,1024]{1,0} multiply(%get-tuple-element.541, %get-tuple-element.541)
  %reduce.194 = f32[] reduce(%square.104, %constant.1441), dimensions={0,1}, to_apply=%region_110.3512
  %add.367 = f32[] add(%add.366, %reduce.194)
  %square.105 = f32[80,1]{1,0} multiply(%get-tuple-element.542, %get-tuple-element.542)
  %reduce.195 = f32[] reduce(%square.105, %constant.1441), dimensions={0,1}, to_apply=%region_111.3519
  %add.368 = f32[] add(%add.367, %reduce.195)
  %square.106 = f32[80,1024]{1,0} multiply(%get-tuple-element.543, %get-tuple-element.543)
  %reduce.196 = f32[] reduce(%square.106, %constant.1441), dimensions={0,1}, to_apply=%region_112.3526
  %add.369 = f32[] add(%add.368, %reduce.196)
  %square.107 = f32[80,1]{1,0} multiply(%get-tuple-element.544, %get-tuple-element.544)
  %reduce.197 = f32[] reduce(%square.107, %constant.1441), dimensions={0,1}, to_apply=%region_113.3533
  %add.370 = f32[] add(%add.369, %reduce.197)
  %square.108 = f32[80,1024]{1,0} multiply(%get-tuple-element.545, %get-tuple-element.545)
  %reduce.198 = f32[] reduce(%square.108, %constant.1441), dimensions={0,1}, to_apply=%region_114.3540
  %add.371 = f32[] add(%add.370, %reduce.198)
  %square.109 = f32[80,1]{1,0} multiply(%get-tuple-element.546, %get-tuple-element.546)
  %reduce.199 = f32[] reduce(%square.109, %constant.1441), dimensions={0,1}, to_apply=%region_115.3547
  %add.372 = f32[] add(%add.371, %reduce.199)
  %square.110 = f32[80,1024]{1,0} multiply(%get-tuple-element.547, %get-tuple-element.547)
  %reduce.200 = f32[] reduce(%square.110, %constant.1441), dimensions={0,1}, to_apply=%region_116.3554
  %add.373 = f32[] add(%add.372, %reduce.200)
  %square.111 = f32[80,1]{1,0} multiply(%get-tuple-element.548, %get-tuple-element.548)
  %reduce.201 = f32[] reduce(%square.111, %constant.1441), dimensions={0,1}, to_apply=%region_117.3561
  %add.374 = f32[] add(%add.373, %reduce.201)
  %square.112 = f32[80,1024]{1,0} multiply(%get-tuple-element.549, %get-tuple-element.549)
  %reduce.202 = f32[] reduce(%square.112, %constant.1441), dimensions={0,1}, to_apply=%region_118.3568
  %add.375 = f32[] add(%add.374, %reduce.202)
  %square.113 = f32[80,1]{1,0} multiply(%get-tuple-element.550, %get-tuple-element.550)
  %reduce.203 = f32[] reduce(%square.113, %constant.1441), dimensions={0,1}, to_apply=%region_119.3575
  %add.376 = f32[] add(%add.375, %reduce.203)
  %square.114 = f32[80,1024]{1,0} multiply(%get-tuple-element.551, %get-tuple-element.551)
  %reduce.204 = f32[] reduce(%square.114, %constant.1441), dimensions={0,1}, to_apply=%region_120.3582
  %add.377 = f32[] add(%add.376, %reduce.204)
  %square.115 = f32[80,1]{1,0} multiply(%get-tuple-element.552, %get-tuple-element.552)
  %reduce.205 = f32[] reduce(%square.115, %constant.1441), dimensions={0,1}, to_apply=%region_121.3589
  %add.378 = f32[] add(%add.377, %reduce.205)
  %square.116 = f32[80,1024]{1,0} multiply(%get-tuple-element.553, %get-tuple-element.553)
  %reduce.206 = f32[] reduce(%square.116, %constant.1441), dimensions={0,1}, to_apply=%region_122.3596
  %add.379 = f32[] add(%add.378, %reduce.206)
  %square.117 = f32[80,1]{1,0} multiply(%get-tuple-element.554, %get-tuple-element.554)
  %reduce.207 = f32[] reduce(%square.117, %constant.1441), dimensions={0,1}, to_apply=%region_123.3603
  %add.381 = f32[] add(%add.379, %reduce.207)
  %square.118 = f32[80,1024]{1,0} multiply(%get-tuple-element.555, %get-tuple-element.555)
  %reduce.208 = f32[] reduce(%square.118, %constant.1441), dimensions={0,1}, to_apply=%region_124.3610
  %add.383 = f32[] add(%add.381, %reduce.208)
  %square.119 = f32[80,1]{1,0} multiply(%get-tuple-element.556, %get-tuple-element.556)
  %reduce.209 = f32[] reduce(%square.119, %constant.1441), dimensions={0,1}, to_apply=%region_125.3617
  %add.384 = f32[] add(%add.383, %reduce.209)
  %square.120 = f32[80,1024]{1,0} multiply(%get-tuple-element.557, %get-tuple-element.557)
  %reduce.210 = f32[] reduce(%square.120, %constant.1441), dimensions={0,1}, to_apply=%region_126.3624
  %add.385 = f32[] add(%add.384, %reduce.210)
  %square.121 = f32[80,1]{1,0} multiply(%get-tuple-element.558, %get-tuple-element.558)
  %reduce.211 = f32[] reduce(%square.121, %constant.1441), dimensions={0,1}, to_apply=%region_127.3631
  %add.386 = f32[] add(%add.385, %reduce.211)
  %square.122 = f32[80,1024]{1,0} multiply(%get-tuple-element.559, %get-tuple-element.559)
  %reduce.212 = f32[] reduce(%square.122, %constant.1441), dimensions={0,1}, to_apply=%region_128.3638
  %add.387 = f32[] add(%add.386, %reduce.212)
  %square.123 = f32[80,1]{1,0} multiply(%get-tuple-element.560, %get-tuple-element.560)
  %reduce.213 = f32[] reduce(%square.123, %constant.1441), dimensions={0,1}, to_apply=%region_129.3645
  %add.388 = f32[] add(%add.387, %reduce.213)
  %square.124 = f32[80,1024]{1,0} multiply(%get-tuple-element.561, %get-tuple-element.561)
  %reduce.214 = f32[] reduce(%square.124, %constant.1441), dimensions={0,1}, to_apply=%region_130.3652
  %add.389 = f32[] add(%add.388, %reduce.214)
  %square.125 = f32[80,1]{1,0} multiply(%get-tuple-element.562, %get-tuple-element.562)
  %reduce.215 = f32[] reduce(%square.125, %constant.1441), dimensions={0,1}, to_apply=%region_131.3659
  %add.390 = f32[] add(%add.389, %reduce.215)
  %square.126 = f32[80,1024]{1,0} multiply(%get-tuple-element.563, %get-tuple-element.563)
  %reduce.216 = f32[] reduce(%square.126, %constant.1441), dimensions={0,1}, to_apply=%region_132.3666
  %add.391 = f32[] add(%add.390, %reduce.216)
  %square.127 = f32[80,1]{1,0} multiply(%get-tuple-element.564, %get-tuple-element.564)
  %reduce.217 = f32[] reduce(%square.127, %constant.1441), dimensions={0,1}, to_apply=%region_133.3673
  %add.392 = f32[] add(%add.391, %reduce.217)
  %reduce.218 = f32[] reduce(%integer_pow.0, %constant.1441), dimensions={0}, to_apply=%region_134.3680
  %add.393 = f32[] add(%add.392, %reduce.218)
  %reduce.219 = f32[] reduce(%integer_pow.1, %constant.1441), dimensions={0,1,2}, to_apply=%region_135.3687
  %all-reduce.52 = f32[] all-reduce(%reduce.219), channel_id=70, replica_groups=[2,128]<=[256], use_global_device_ids=true, to_apply=%region_135.3687.clone
  %add.394 = f32[] add(%add.393, %all-reduce.52)
  %reduce.220 = f32[] reduce(%integer_pow.2, %constant.1441), dimensions={0,1,2}, to_apply=%region_136.3694
  %all-reduce.53 = f32[] all-reduce(%reduce.220), channel_id=71, replica_groups=[2,128]<=[256], use_global_device_ids=true, to_apply=%region_136.3694.clone
  %add.395 = f32[] add(%add.394, %all-reduce.53)
  %reduce.221 = f32[] reduce(%integer_pow.3, %constant.1441), dimensions={0,1,2}, to_apply=%region_137.3701
  %all-reduce.54 = f32[] all-reduce(%reduce.221), channel_id=72, replica_groups=[2,128]<=[256], use_global_device_ids=true, to_apply=%region_137.3701.clone
  %add.396 = f32[] add(%add.395, %all-reduce.54)
  %reduce.222 = f32[] reduce(%integer_pow.4, %constant.1441), dimensions={0,1}, to_apply=%region_138.3708
  %add.397 = f32[] add(%add.396, %reduce.222)
  %reduce.223 = f32[] reduce(%integer_pow.5, %constant.1441), dimensions={0,1}, to_apply=%region_139.3715
  %add.398 = f32[] add(%add.397, %reduce.223)
  %reduce.224 = f32[] reduce(%integer_pow.6, %constant.1441), dimensions={0,1,2,3}, to_apply=%region_140.3722
  %all-reduce.55 = f32[] all-reduce(%reduce.224), channel_id=73, replica_groups=[2,128]<=[256], use_global_device_ids=true, to_apply=%region_140.3722.clone
  %add.399 = f32[] add(%add.398, %all-reduce.55)
  %reduce.225 = f32[] reduce(%integer_pow.7, %constant.1441), dimensions={0,1,2,3}, to_apply=%region_141.3729
  %all-reduce.56 = f32[] all-reduce(%reduce.225), channel_id=74, replica_groups=[2,128]<=[256], use_global_device_ids=true, to_apply=%region_141.3729.clone
  %add.400 = f32[] add(%add.399, %all-reduce.56)
  %reduce.226 = f32[] reduce(%integer_pow.8, %constant.1441), dimensions={0,1,2,3}, to_apply=%region_142.3736
  %all-reduce.57 = f32[] all-reduce(%reduce.226), channel_id=75, replica_groups=[2,128]<=[256], use_global_device_ids=true, to_apply=%region_142.3736.clone
  %add.401 = f32[] add(%add.400, %all-reduce.57)
  %reduce.227 = f32[] reduce(%integer_pow.9, %constant.1441), dimensions={0,1,2,3}, to_apply=%region_143.3743
  %all-reduce.58 = f32[] all-reduce(%reduce.227), channel_id=76, replica_groups=[2,128]<=[256], use_global_device_ids=true, to_apply=%region_143.3743.clone
  %add.402 = f32[] add(%add.401, %all-reduce.58)
  %reduce.228 = f32[] reduce(%integer_pow.10, %constant.1441), dimensions={0,1}, to_apply=%region_144.3750
  %all-reduce.59 = f32[] all-reduce(%reduce.228), channel_id=77, replica_groups=[2,128]<=[256], use_global_device_ids=true, to_apply=%region_144.3750.clone
  %add.403 = f32[] add(%add.402, %all-reduce.59)
  %reduce.229 = f32[] reduce(%integer_pow.11, %constant.1441), dimensions={0,1}, to_apply=%region_145.3757
  %all-reduce.60 = f32[] all-reduce(%reduce.229), channel_id=78, replica_groups=[2,128]<=[256], use_global_device_ids=true, to_apply=%region_145.3757.clone
  %add.404 = f32[] add(%add.403, %all-reduce.60)
  %sqrt.13 = f32[] sqrt(%add.404)
  %sub.24 = f32[2,8192,128256]{2,1,0} broadcast(%log.2), dimensions={0,1}
  %sub.25 = f32[2,8192,128256]{2,1,0} subtract(%sub.17, %sub.24)
  %broadcast.916 = f32[2,8192,128256]{2,1,0} broadcast(%constant.1441), dimensions={}
  %mul.634 = f32[2,8192,128256]{2,1,0} select(%eq.45, %sub.25, %broadcast.916)
  %reduce.230 = f32[2,8192]{1,0} reduce(%mul.634, %constant.1441), dimensions={2}, to_apply=%region_146.3769
  %neg.6 = f32[2,8192]{1,0} negate(%reduce.230)
  %square.140 = f32[2,8192]{1,0} multiply(%add.261, %add.261)
  %mul.635 = f32[2,8192]{1,0} multiply(%square.140, %broadcast.876)
  %add.405 = f32[2,8192]{1,0} add(%neg.6, %mul.635)
  %sharding_constraint.81 = f32[2,8192]{1,0} copy(%add.405)
  %mul.636 = f32[2,8192]{1,0} select(%ne.35, %sharding_constraint.81, %broadcast.876)
  %reduce.231 = f32[] reduce(%mul.636, %constant.1441), dimensions={0,1}, to_apply=%region_147.3780
  %all-reduce.61 = f32[] all-reduce(%reduce.231), channel_id=79, replica_groups=[1,256]<=[256], use_global_device_ids=true, to_apply=%region_147.3780.clone
  %div.662 = f32[] divide(%all-reduce.61, %add.252)
  %square.183 = f32[8192]{0} multiply(%add.284, %add.284)
  %reduce.274 = f32[] reduce(%square.183, %constant.1441), dimensions={0}, to_apply=%region_190.4080
  %add.447 = f32[] add(%add.392, %reduce.274)
  %square.184 = f32[64,80,28672]{2,1,0} multiply(%add.289, %add.289)
  %reduce.275 = f32[] reduce(%square.184, %constant.1441), dimensions={0,1,2}, to_apply=%region_191.4087
  %all-reduce.62 = f32[] all-reduce(%reduce.275), channel_id=80, replica_groups=[2,128]<=[256], use_global_device_ids=true, to_apply=%region_191.4087.clone
  %add.448 = f32[] add(%add.447, %all-reduce.62)
  %square.185 = f32[64,80,28672]{2,1,0} multiply(%add.294, %add.294)
  %reduce.276 = f32[] reduce(%square.185, %constant.1441), dimensions={0,1,2}, to_apply=%region_192.4094
  %all-reduce.63 = f32[] all-reduce(%reduce.276), channel_id=81, replica_groups=[2,128]<=[256], use_global_device_ids=true, to_apply=%region_192.4094.clone
  %add.449 = f32[] add(%add.448, %all-reduce.63)
  %square.186 = f32[28672,80,64]{2,1,0} multiply(%add.302, %add.302)
  %reduce.277 = f32[] reduce(%square.186, %constant.1441), dimensions={0,1,2}, to_apply=%region_193.4101
  %all-reduce.64 = f32[] all-reduce(%reduce.277), channel_id=82, replica_groups=[2,128]<=[256], use_global_device_ids=true, to_apply=%region_193.4101.clone
  %add.450 = f32[] add(%add.449, %all-reduce.64)
  %square.187 = f32[8192,80]{1,0} multiply(%add.307, %add.307)
  %reduce.278 = f32[] reduce(%square.187, %constant.1441), dimensions={0,1}, to_apply=%region_194.4108
  %add.451 = f32[] add(%add.450, %reduce.278)
  %square.188 = f32[8192,80]{1,0} multiply(%add.312, %add.312)
  %reduce.279 = f32[] reduce(%square.188, %constant.1441), dimensions={0,1}, to_apply=%region_195.4115
  %add.452 = f32[] add(%add.451, %reduce.279)
  %square.189 = f32[64,80,8,128]{3,2,1,0} multiply(%add.317, %add.317)
  %reduce.280 = f32[] reduce(%square.189, %constant.1441), dimensions={0,1,2,3}, to_apply=%region_196.4122
  %all-reduce.65 = f32[] all-reduce(%reduce.280), channel_id=83, replica_groups=[2,128]<=[256], use_global_device_ids=true, to_apply=%region_196.4122.clone
  %add.453 = f32[] add(%add.452, %all-reduce.65)
  %square.190 = f32[64,80,128,64]{3,2,1,0} multiply(%add.323, %add.323)
  %reduce.281 = f32[] reduce(%square.190, %constant.1441), dimensions={0,1,2,3}, to_apply=%region_197.4129
  %all-reduce.66 = f32[] all-reduce(%reduce.281), channel_id=84, replica_groups=[2,128]<=[256], use_global_device_ids=true, to_apply=%region_197.4129.clone
  %add.454 = f32[] add(%add.453, %all-reduce.66)
  %square.191 = f32[64,80,64,128]{3,2,1,0} multiply(%add.330, %add.330)
  %reduce.282 = f32[] reduce(%square.191, %constant.1441), dimensions={0,1,2,3}, to_apply=%region_198.4136
  %all-reduce.67 = f32[] all-reduce(%reduce.282), channel_id=85, replica_groups=[2,128]<=[256], use_global_device_ids=true, to_apply=%region_198.4136.clone
  %add.455 = f32[] add(%add.454, %all-reduce.67)
  %square.192 = f32[64,80,8,128]{3,2,1,0} multiply(%add.335, %add.335)
  %reduce.283 = f32[] reduce(%square.192, %constant.1441), dimensions={0,1,2,3}, to_apply=%region_199.4143
  %all-reduce.68 = f32[] all-reduce(%reduce.283), channel_id=86, replica_groups=[2,128]<=[256], use_global_device_ids=true, to_apply=%region_199.4143.clone
  %add.456 = f32[] add(%add.455, %all-reduce.68)
  %square.193 = f32[64,128256]{1,0} multiply(%add.341, %add.341)
  %reduce.284 = f32[] reduce(%square.193, %constant.1441), dimensions={0,1}, to_apply=%region_200.4150
  %all-reduce.69 = f32[] all-reduce(%reduce.284), channel_id=87, replica_groups=[2,128]<=[256], use_global_device_ids=true, to_apply=%region_200.4150.clone
  %add.457 = f32[] add(%add.456, %all-reduce.69)
  %square.194 = f32[128256,64]{1,0} multiply(%add.347, %add.347)
  %reduce.285 = f32[] reduce(%square.194, %constant.1441), dimensions={0,1}, to_apply=%region_201.4157
  %all-reduce.70 = f32[] all-reduce(%reduce.285), channel_id=88, replica_groups=[2,128]<=[256], use_global_device_ids=true, to_apply=%region_201.4157.clone
  %add.458 = f32[] add(%add.457, %all-reduce.70)
  %sqrt.14 = f32[] sqrt(%add.458)
  %add.501 = f32[] add(%add.392, %reduce.164)
  %all-reduce.71 = f32[] all-reduce(%reduce.165), channel_id=89, replica_groups=[2,128]<=[256], use_global_device_ids=true, to_apply=%region_245.4465.clone
  %add.502 = f32[] add(%add.501, %all-reduce.71)
  %all-reduce.72 = f32[] all-reduce(%reduce.166), channel_id=90, replica_groups=[2,128]<=[256], use_global_device_ids=true, to_apply=%region_246.4472.clone
  %add.503 = f32[] add(%add.502, %all-reduce.72)
  %all-reduce.73 = f32[] all-reduce(%reduce.167), channel_id=91, replica_groups=[2,128]<=[256], use_global_device_ids=true, to_apply=%region_247.4479.clone
  %add.504 = f32[] add(%add.503, %all-reduce.73)
  %add.505 = f32[] add(%add.504, %reduce.168)
  %add.506 = f32[] add(%add.505, %reduce.169)
  %all-reduce.74 = f32[] all-reduce(%reduce.170), channel_id=92, replica_groups=[2,128]<=[256], use_global_device_ids=true, to_apply=%region_250.4500.clone
  %add.507 = f32[] add(%add.506, %all-reduce.74)
  %all-reduce.75 = f32[] all-reduce(%reduce.171), channel_id=93, replica_groups=[2,128]<=[256], use_global_device_ids=true, to_apply=%region_251.4507.clone
  %add.508 = f32[] add(%add.507, %all-reduce.75)
  %all-reduce.76 = f32[] all-reduce(%reduce.172), channel_id=94, replica_groups=[2,128]<=[256], use_global_device_ids=true, to_apply=%region_252.4514.clone
  %add.509 = f32[] add(%add.508, %all-reduce.76)
  %all-reduce.77 = f32[] all-reduce(%reduce.173), channel_id=95, replica_groups=[2,128]<=[256], use_global_device_ids=true, to_apply=%region_253.4521.clone
  %add.510 = f32[] add(%add.509, %all-reduce.77)
  %all-reduce.78 = f32[] all-reduce(%reduce.174), channel_id=96, replica_groups=[2,128]<=[256], use_global_device_ids=true, to_apply=%region_254.4528.clone
  %add.511 = f32[] add(%add.510, %all-reduce.78)
  %all-reduce.79 = f32[] all-reduce(%reduce.175), channel_id=97, replica_groups=[2,128]<=[256], use_global_device_ids=true, to_apply=%region_255.4535.clone
  %add.512 = f32[] add(%add.511, %all-reduce.79)
  %sqrt.15 = f32[] sqrt(%add.512)
  ROOT %tuple.117 = (s32[], f32[80,1024]{1,0}, f32[80,1]{1,0}, f32[80,1024]{1,0}, f32[80,1]{1,0}, /*index=5*/f32[80,1024]{1,0}, f32[80,1]{1,0}, f32[80,1024]{1,0}, f32[80,1]{1,0}, f32[80,1024]{1,0}, /*index=10*/f32[80,1]{1,0}, f32[80,1024]{1,0}, f32[80,1]{1,0}, f32[80,1024]{1,0}, f32[80,1]{1,0}, /*index=15*/f32[80,1024]{1,0}, f32[80,1]{1,0}, f32[80,1024]{1,0}, f32[80,1]{1,0}, f32[80,1024]{1,0}, /*index=20*/f32[80,1]{1,0}, f32[80,1024]{1,0}, f32[80,1]{1,0}, f32[80,1024]{1,0}, f32[80,1]{1,0}, /*index=25*/f32[80,1024]{1,0}, f32[80,1]{1,0}, f32[80,1024]{1,0}, f32[80,1]{1,0}, f32[80,1024]{1,0}, /*index=30*/f32[80,1]{1,0}, f32[80,1024]{1,0}, f32[80,1]{1,0}, f32[80,1024]{1,0}, f32[80,1]{1,0}, /*index=35*/f32[80,1024]{1,0}, f32[80,1]{1,0}, f32[80,1024]{1,0}, f32[80,1]{1,0}, f32[80,1024]{1,0}, /*index=40*/f32[80,1]{1,0}, f32[80,1024]{1,0}, f32[80,1]{1,0}, f32[8192]{0}, f32[64,80,28672]{2,1,0}, /*index=45*/f32[64,80,28672]{2,1,0}, f32[28672,80,64]{2,1,0}, f32[8192,80]{1,0}, f32[8192,80]{1,0}, f32[64,80,8,128]{3,2,1,0}, /*index=50*/f32[64,80,128,64]{3,2,1,0}, f32[64,80,64,128]{3,2,1,0}, f32[64,80,8,128]{3,2,1,0}, f32[64,128256]{1,0}, f32[128256,64]{1,0}, /*index=55*/s32[], f32[8192]{0}, f32[64,80,28672]{2,1,0}, f32[64,80,28672]{2,1,0}, f32[28672,80,64]{2,1,0}, /*index=60*/f32[8192,80]{1,0}, f32[8192,80]{1,0}, f32[64,80,8,128]{3,2,1,0}, f32[64,80,128,64]{3,2,1,0}, f32[64,80,64,128]{3,2,1,0}, /*index=65*/f32[64,80,8,128]{3,2,1,0}, f32[64,128256]{1,0}, f32[128256,64]{1,0}, f32[8192]{0}, f32[64,80,28672]{2,1,0}, /*index=70*/f32[64,80,28672]{2,1,0}, f32[28672,80,64]{2,1,0}, f32[8192,80]{1,0}, f32[8192,80]{1,0}, f32[64,80,8,128]{3,2,1,0}, /*index=75*/f32[64,80,128,64]{3,2,1,0}, f32[64,80,64,128]{3,2,1,0}, f32[64,80,8,128]{3,2,1,0}, f32[64,128256]{1,0}, f32[128256,64]{1,0}, /*index=80*/s32[], f32[], f32[], f32[], f32[], /*index=85*/f32[], f32[], s32[]) tuple(%add.251, %get-tuple-element.523, %get-tuple-element.524, %get-tuple-element.525, %get-tuple-element.526, /*index=5*/%get-tuple-element.527, %get-tuple-element.528, %get-tuple-element.529, %get-tuple-element.530, %get-tuple-element.531, /*index=10*/%get-tuple-element.532, %get-tuple-element.533, %get-tuple-element.534, %get-tuple-element.535, %get-tuple-element.536, /*index=15*/%get-tuple-element.537, %get-tuple-element.538, %get-tuple-element.539, %get-tuple-element.540, %get-tuple-element.541, /*index=20*/%get-tuple-element.542, %get-tuple-element.543, %get-tuple-element.544, %get-tuple-element.545, %get-tuple-element.546, /*index=25*/%get-tuple-element.547, %get-tuple-element.548, %get-tuple-element.549, %get-tuple-element.550, %get-tuple-element.551, /*index=30*/%get-tuple-element.552, %get-tuple-element.553, %get-tuple-element.554, %get-tuple-element.555, %get-tuple-element.556, /*index=35*/%get-tuple-element.557, %get-tuple-element.558, %get-tuple-element.559, %get-tuple-element.560, %get-tuple-element.561, /*index=40*/%get-tuple-element.562, %get-tuple-element.563, %get-tuple-element.564, %add.284, %add.289, /*index=45*/%add.294, %add.302, %add.307, %add.312, %add.317, /*index=50*/%add.323, %add.330, %add.335, %add.341, %add.347, /*index=55*/%select_n.717, %add.278, %add.285, %add.290, %add.295, /*index=60*/%add.303, %add.308, %add.313, %add.318, %add.324, /*index=65*/%add.331, %add.336, %add.342, %add.280, %add.286, /*index=70*/%add.291, %add.296, %add.304, %add.309, %add.314, /*index=75*/%add.319, %add.325, %add.332, %add.337, %add.343, /*index=80*/%select_n.744, %sqrt.13, %div.662, %constant.1441, %constant.1441, /*index=85*/%sqrt.14, %sqrt.15, %all-reduce.37)
}

