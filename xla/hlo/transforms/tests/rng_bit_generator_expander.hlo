// NOTE: Assertions have been autogenerated by hlo/tools/generate_hlo_test_checks.py
// RUN: hlo-opt %s --split-input-file --passes=rng-bit-generator-expander | FileCheck %s

// CHECK-LABEL: HloModule TestDefaultAlgorithm, entry_computation_layout={()->(u64[2]{0}, u32[])}

// CHECK:       %[[$rng_247:[^ ]+]]
// CHECK-NEXT:  %[[state_1:[^ ]+]] = u64[2]{0} parameter(0)
// CHECK-NEXT:  %[[slice_4:[^ ]+]] = u64[1]{0} slice(u64[2]{0} %[[state_1]]), slice={[1:2]}
// CHECK-NEXT:  %[[reshape_5:[^ ]+]] = u64[] reshape(u64[1]{0} %[[slice_4]])
// CHECK-NEXT:  %[[broadcast_6:[^ ]+]] = u64[1]{0} broadcast(u64[] %[[reshape_5]]), dimensions={}
// CHECK-NEXT:  %[[convert_11:[^ ]+]] = u32[1]{0} convert(u64[1]{0} %[[broadcast_6]])
// CHECK-NEXT:  %[[slice_2:[^ ]+]] = u64[1]{0} slice(u64[2]{0} %[[state_1]]), slice={[0:1]}
// CHECK-NEXT:  %[[reshape_3:[^ ]+]] = u64[] reshape(u64[1]{0} %[[slice_2]])
// CHECK-NEXT:  %[[convert_16:[^ ]+]] = u32[] convert(u64[] %[[reshape_3]])
// CHECK-NEXT:  %[[bitcast_convert_19:[^ ]+]] = u32[] bitcast-convert(u32[] %[[convert_16]])
// CHECK-NEXT:  %[[broadcast_24:[^ ]+]] = u32[1]{0} broadcast(u32[] %[[bitcast_convert_19]]), dimensions={}
// CHECK-NEXT:  %[[add_25:[^ ]+]] = u32[1]{0} add(u32[1]{0} %[[convert_11]], u32[1]{0} %[[broadcast_24]])
// CHECK-NEXT:  %[[constant_10:[^ ]+]] = u64[] constant(32)
// CHECK-NEXT:  %[[broadcast_12:[^ ]+]] = u64[1]{0} broadcast(u64[] %[[constant_10]]), dimensions={}
// CHECK-NEXT:  %[[shift_right_logical_13:[^ ]+]] = u64[1]{0} shift-right-logical(u64[1]{0} %[[broadcast_6]], u64[1]{0} %[[broadcast_12]])
// CHECK-NEXT:  %[[convert_14:[^ ]+]] = u32[1]{0} convert(u64[1]{0} %[[shift_right_logical_13]])
// CHECK-NEXT:  %[[constant_15:[^ ]+]] = u64[] constant(32)
// CHECK-NEXT:  %[[shift_right_logical_17:[^ ]+]] = u64[] shift-right-logical(u64[] %[[reshape_3]], u64[] %[[constant_15]])
// CHECK-NEXT:  %[[convert_18:[^ ]+]] = u32[] convert(u64[] %[[shift_right_logical_17]])
// CHECK-NEXT:  %[[bitcast_convert_20:[^ ]+]] = u32[] bitcast-convert(u32[] %[[convert_18]])
// CHECK-NEXT:  %[[broadcast_26:[^ ]+]] = u32[1]{0} broadcast(u32[] %[[bitcast_convert_20]]), dimensions={}
// CHECK-NEXT:  %[[add_27:[^ ]+]] = u32[1]{0} add(u32[1]{0} %[[convert_14]], u32[1]{0} %[[broadcast_26]])
// CHECK-NEXT:  %[[add_28:[^ ]+]] = u32[1]{0} add(u32[1]{0} %[[add_25]], u32[1]{0} %[[add_27]])
// CHECK-NEXT:  %[[constant_29:[^ ]+]] = u32[] constant(13)
// CHECK-NEXT:  %[[broadcast_30:[^ ]+]] = u32[1]{0} broadcast(u32[] %[[constant_29]]), dimensions={}
// CHECK-NEXT:  %[[shift_left_31:[^ ]+]] = u32[1]{0} shift-left(u32[1]{0} %[[add_27]], u32[1]{0} %[[broadcast_30]])
// CHECK-NEXT:  %[[constant_32:[^ ]+]] = u32[] constant(19)
// CHECK-NEXT:  %[[broadcast_33:[^ ]+]] = u32[1]{0} broadcast(u32[] %[[constant_32]]), dimensions={}
// CHECK-NEXT:  %[[shift_right_logical_34:[^ ]+]] = u32[1]{0} shift-right-logical(u32[1]{0} %[[add_27]], u32[1]{0} %[[broadcast_33]])
// CHECK-NEXT:  %[[or_35:[^ ]+]] = u32[1]{0} or(u32[1]{0} %[[shift_left_31]], u32[1]{0} %[[shift_right_logical_34]])
// CHECK-NEXT:  %[[xor_36:[^ ]+]] = u32[1]{0} xor(u32[1]{0} %[[add_28]], u32[1]{0} %[[or_35]])
// CHECK-NEXT:  %[[add_37:[^ ]+]] = u32[1]{0} add(u32[1]{0} %[[add_28]], u32[1]{0} %[[xor_36]])
// CHECK-NEXT:  %[[constant_38:[^ ]+]] = u32[] constant(15)
// CHECK-NEXT:  %[[broadcast_39:[^ ]+]] = u32[1]{0} broadcast(u32[] %[[constant_38]]), dimensions={}
// CHECK-NEXT:  %[[shift_left_40:[^ ]+]] = u32[1]{0} shift-left(u32[1]{0} %[[xor_36]], u32[1]{0} %[[broadcast_39]])
// CHECK-NEXT:  %[[constant_41:[^ ]+]] = u32[] constant(17)
// CHECK-NEXT:  %[[broadcast_42:[^ ]+]] = u32[1]{0} broadcast(u32[] %[[constant_41]]), dimensions={}
// CHECK-NEXT:  %[[shift_right_logical_43:[^ ]+]] = u32[1]{0} shift-right-logical(u32[1]{0} %[[xor_36]], u32[1]{0} %[[broadcast_42]])
// CHECK-NEXT:  %[[or_44:[^ ]+]] = u32[1]{0} or(u32[1]{0} %[[shift_left_40]], u32[1]{0} %[[shift_right_logical_43]])
// CHECK-NEXT:  %[[xor_45:[^ ]+]] = u32[1]{0} xor(u32[1]{0} %[[add_37]], u32[1]{0} %[[or_44]])
// CHECK-NEXT:  %[[add_46:[^ ]+]] = u32[1]{0} add(u32[1]{0} %[[add_37]], u32[1]{0} %[[xor_45]])
// CHECK-NEXT:  %[[constant_47:[^ ]+]] = u32[] constant(26)
// CHECK-NEXT:  %[[broadcast_48:[^ ]+]] = u32[1]{0} broadcast(u32[] %[[constant_47]]), dimensions={}
// CHECK-NEXT:  %[[shift_left_49:[^ ]+]] = u32[1]{0} shift-left(u32[1]{0} %[[xor_45]], u32[1]{0} %[[broadcast_48]])
// CHECK-NEXT:  %[[constant_50:[^ ]+]] = u32[] constant(6)
// CHECK-NEXT:  %[[broadcast_51:[^ ]+]] = u32[1]{0} broadcast(u32[] %[[constant_50]]), dimensions={}
// CHECK-NEXT:  %[[shift_right_logical_52:[^ ]+]] = u32[1]{0} shift-right-logical(u32[1]{0} %[[xor_45]], u32[1]{0} %[[broadcast_51]])
// CHECK-NEXT:  %[[or_53:[^ ]+]] = u32[1]{0} or(u32[1]{0} %[[shift_left_49]], u32[1]{0} %[[shift_right_logical_52]])
// CHECK-NEXT:  %[[xor_54:[^ ]+]] = u32[1]{0} xor(u32[1]{0} %[[add_46]], u32[1]{0} %[[or_53]])
// CHECK-NEXT:  %[[add_55:[^ ]+]] = u32[1]{0} add(u32[1]{0} %[[add_46]], u32[1]{0} %[[xor_54]])
// CHECK-NEXT:  %[[broadcast_64:[^ ]+]] = u32[1]{0} broadcast(u32[] %[[bitcast_convert_20]]), dimensions={}
// CHECK-NEXT:  %[[add_65:[^ ]+]] = u32[1]{0} add(u32[1]{0} %[[add_55]], u32[1]{0} %[[broadcast_64]])
// CHECK-NEXT:  %[[constant_56:[^ ]+]] = u32[] constant(6)
// CHECK-NEXT:  %[[broadcast_57:[^ ]+]] = u32[1]{0} broadcast(u32[] %[[constant_56]]), dimensions={}
// CHECK-NEXT:  %[[shift_left_58:[^ ]+]] = u32[1]{0} shift-left(u32[1]{0} %[[xor_54]], u32[1]{0} %[[broadcast_57]])
// CHECK-NEXT:  %[[constant_59:[^ ]+]] = u32[] constant(26)
// CHECK-NEXT:  %[[broadcast_60:[^ ]+]] = u32[1]{0} broadcast(u32[] %[[constant_59]]), dimensions={}
// CHECK-NEXT:  %[[shift_right_logical_61:[^ ]+]] = u32[1]{0} shift-right-logical(u32[1]{0} %[[xor_54]], u32[1]{0} %[[broadcast_60]])
// CHECK-NEXT:  %[[or_62:[^ ]+]] = u32[1]{0} or(u32[1]{0} %[[shift_left_58]], u32[1]{0} %[[shift_right_logical_61]])
// CHECK-NEXT:  %[[xor_63:[^ ]+]] = u32[1]{0} xor(u32[1]{0} %[[add_55]], u32[1]{0} %[[or_62]])
// CHECK-NEXT:  %[[constant_21:[^ ]+]] = u32[] constant(466688986)
// CHECK-NEXT:  %[[xor_22:[^ ]+]] = u32[] xor(u32[] %[[constant_21]], u32[] %[[bitcast_convert_19]])
// CHECK-NEXT:  %[[xor_23:[^ ]+]] = u32[] xor(u32[] %[[xor_22]], u32[] %[[bitcast_convert_20]])
// CHECK-NEXT:  %[[broadcast_66:[^ ]+]] = u32[1]{0} broadcast(u32[] %[[xor_23]]), dimensions={}
// CHECK-NEXT:  %[[add_67:[^ ]+]] = u32[1]{0} add(u32[1]{0} %[[xor_63]], u32[1]{0} %[[broadcast_66]])
// CHECK-NEXT:  %[[constant_68:[^ ]+]] = u32[] constant(1)
// CHECK-NEXT:  %[[broadcast_69:[^ ]+]] = u32[1]{0} broadcast(u32[] %[[constant_68]]), dimensions={}
// CHECK-NEXT:  %[[add_70:[^ ]+]] = u32[1]{0} add(u32[1]{0} %[[add_67]], u32[1]{0} %[[broadcast_69]])
// CHECK-NEXT:  %[[add_71:[^ ]+]] = u32[1]{0} add(u32[1]{0} %[[add_65]], u32[1]{0} %[[add_70]])
// CHECK-NEXT:  %[[constant_72:[^ ]+]] = u32[] constant(17)
// CHECK-NEXT:  %[[broadcast_73:[^ ]+]] = u32[1]{0} broadcast(u32[] %[[constant_72]]), dimensions={}
// CHECK-NEXT:  %[[shift_left_74:[^ ]+]] = u32[1]{0} shift-left(u32[1]{0} %[[add_70]], u32[1]{0} %[[broadcast_73]])
// CHECK-NEXT:  %[[constant_75:[^ ]+]] = u32[] constant(15)
// CHECK-NEXT:  %[[broadcast_76:[^ ]+]] = u32[1]{0} broadcast(u32[] %[[constant_75]]), dimensions={}
// CHECK-NEXT:  %[[shift_right_logical_77:[^ ]+]] = u32[1]{0} shift-right-logical(u32[1]{0} %[[add_70]], u32[1]{0} %[[broadcast_76]])
// CHECK-NEXT:  %[[or_78:[^ ]+]] = u32[1]{0} or(u32[1]{0} %[[shift_left_74]], u32[1]{0} %[[shift_right_logical_77]])
// CHECK-NEXT:  %[[xor_79:[^ ]+]] = u32[1]{0} xor(u32[1]{0} %[[add_71]], u32[1]{0} %[[or_78]])
// CHECK-NEXT:  %[[add_80:[^ ]+]] = u32[1]{0} add(u32[1]{0} %[[add_71]], u32[1]{0} %[[xor_79]])
// CHECK-NEXT:  %[[constant_81:[^ ]+]] = u32[] constant(29)
// CHECK-NEXT:  %[[broadcast_82:[^ ]+]] = u32[1]{0} broadcast(u32[] %[[constant_81]]), dimensions={}
// CHECK-NEXT:  %[[shift_left_83:[^ ]+]] = u32[1]{0} shift-left(u32[1]{0} %[[xor_79]], u32[1]{0} %[[broadcast_82]])
// CHECK-NEXT:  %[[constant_84:[^ ]+]] = u32[] constant(3)
// CHECK-NEXT:  %[[broadcast_85:[^ ]+]] = u32[1]{0} broadcast(u32[] %[[constant_84]]), dimensions={}
// CHECK-NEXT:  %[[shift_right_logical_86:[^ ]+]] = u32[1]{0} shift-right-logical(u32[1]{0} %[[xor_79]], u32[1]{0} %[[broadcast_85]])
// CHECK-NEXT:  %[[or_87:[^ ]+]] = u32[1]{0} or(u32[1]{0} %[[shift_left_83]], u32[1]{0} %[[shift_right_logical_86]])
// CHECK-NEXT:  %[[xor_88:[^ ]+]] = u32[1]{0} xor(u32[1]{0} %[[add_80]], u32[1]{0} %[[or_87]])
// CHECK-NEXT:  %[[add_89:[^ ]+]] = u32[1]{0} add(u32[1]{0} %[[add_80]], u32[1]{0} %[[xor_88]])
// CHECK-NEXT:  %[[constant_90:[^ ]+]] = u32[] constant(16)
// CHECK-NEXT:  %[[broadcast_91:[^ ]+]] = u32[1]{0} broadcast(u32[] %[[constant_90]]), dimensions={}
// CHECK-NEXT:  %[[shift_left_92:[^ ]+]] = u32[1]{0} shift-left(u32[1]{0} %[[xor_88]], u32[1]{0} %[[broadcast_91]])
// CHECK-NEXT:  %[[constant_93:[^ ]+]] = u32[] constant(16)
// CHECK-NEXT:  %[[broadcast_94:[^ ]+]] = u32[1]{0} broadcast(u32[] %[[constant_93]]), dimensions={}
// CHECK-NEXT:  %[[shift_right_logical_95:[^ ]+]] = u32[1]{0} shift-right-logical(u32[1]{0} %[[xor_88]], u32[1]{0} %[[broadcast_94]])
// CHECK-NEXT:  %[[or_96:[^ ]+]] = u32[1]{0} or(u32[1]{0} %[[shift_left_92]], u32[1]{0} %[[shift_right_logical_95]])
// CHECK-NEXT:  %[[xor_97:[^ ]+]] = u32[1]{0} xor(u32[1]{0} %[[add_89]], u32[1]{0} %[[or_96]])
// CHECK-NEXT:  %[[add_98:[^ ]+]] = u32[1]{0} add(u32[1]{0} %[[add_89]], u32[1]{0} %[[xor_97]])
// CHECK-NEXT:  %[[broadcast_107:[^ ]+]] = u32[1]{0} broadcast(u32[] %[[xor_23]]), dimensions={}
// CHECK-NEXT:  %[[add_108:[^ ]+]] = u32[1]{0} add(u32[1]{0} %[[add_98]], u32[1]{0} %[[broadcast_107]])
// CHECK-NEXT:  %[[constant_99:[^ ]+]] = u32[] constant(24)
// CHECK-NEXT:  %[[broadcast_100:[^ ]+]] = u32[1]{0} broadcast(u32[] %[[constant_99]]), dimensions={}
// CHECK-NEXT:  %[[shift_left_101:[^ ]+]] = u32[1]{0} shift-left(u32[1]{0} %[[xor_97]], u32[1]{0} %[[broadcast_100]])
// CHECK-NEXT:  %[[constant_102:[^ ]+]] = u32[] constant(8)
// CHECK-NEXT:  %[[broadcast_103:[^ ]+]] = u32[1]{0} broadcast(u32[] %[[constant_102]]), dimensions={}
// CHECK-NEXT:  %[[shift_right_logical_104:[^ ]+]] = u32[1]{0} shift-right-logical(u32[1]{0} %[[xor_97]], u32[1]{0} %[[broadcast_103]])
// CHECK-NEXT:  %[[or_105:[^ ]+]] = u32[1]{0} or(u32[1]{0} %[[shift_left_101]], u32[1]{0} %[[shift_right_logical_104]])
// CHECK-NEXT:  %[[xor_106:[^ ]+]] = u32[1]{0} xor(u32[1]{0} %[[add_98]], u32[1]{0} %[[or_105]])
// CHECK-NEXT:  %[[broadcast_109:[^ ]+]] = u32[1]{0} broadcast(u32[] %[[bitcast_convert_19]]), dimensions={}
// CHECK-NEXT:  %[[add_110:[^ ]+]] = u32[1]{0} add(u32[1]{0} %[[xor_106]], u32[1]{0} %[[broadcast_109]])
// CHECK-NEXT:  %[[constant_111:[^ ]+]] = u32[] constant(2)
// CHECK-NEXT:  %[[broadcast_112:[^ ]+]] = u32[1]{0} broadcast(u32[] %[[constant_111]]), dimensions={}
// CHECK-NEXT:  %[[add_113:[^ ]+]] = u32[1]{0} add(u32[1]{0} %[[add_110]], u32[1]{0} %[[broadcast_112]])
// CHECK-NEXT:  %[[add_114:[^ ]+]] = u32[1]{0} add(u32[1]{0} %[[add_108]], u32[1]{0} %[[add_113]])
// CHECK-NEXT:  %[[constant_115:[^ ]+]] = u32[] constant(13)
// CHECK-NEXT:  %[[broadcast_116:[^ ]+]] = u32[1]{0} broadcast(u32[] %[[constant_115]]), dimensions={}
// CHECK-NEXT:  %[[shift_left_117:[^ ]+]] = u32[1]{0} shift-left(u32[1]{0} %[[add_113]], u32[1]{0} %[[broadcast_116]])
// CHECK-NEXT:  %[[constant_118:[^ ]+]] = u32[] constant(19)
// CHECK-NEXT:  %[[broadcast_119:[^ ]+]] = u32[1]{0} broadcast(u32[] %[[constant_118]]), dimensions={}
// CHECK-NEXT:  %[[shift_right_logical_120:[^ ]+]] = u32[1]{0} shift-right-logical(u32[1]{0} %[[add_113]], u32[1]{0} %[[broadcast_119]])
// CHECK-NEXT:  %[[or_121:[^ ]+]] = u32[1]{0} or(u32[1]{0} %[[shift_left_117]], u32[1]{0} %[[shift_right_logical_120]])
// CHECK-NEXT:  %[[xor_122:[^ ]+]] = u32[1]{0} xor(u32[1]{0} %[[add_114]], u32[1]{0} %[[or_121]])
// CHECK-NEXT:  %[[add_123:[^ ]+]] = u32[1]{0} add(u32[1]{0} %[[add_114]], u32[1]{0} %[[xor_122]])
// CHECK-NEXT:  %[[constant_124:[^ ]+]] = u32[] constant(15)
// CHECK-NEXT:  %[[broadcast_125:[^ ]+]] = u32[1]{0} broadcast(u32[] %[[constant_124]]), dimensions={}
// CHECK-NEXT:  %[[shift_left_126:[^ ]+]] = u32[1]{0} shift-left(u32[1]{0} %[[xor_122]], u32[1]{0} %[[broadcast_125]])
// CHECK-NEXT:  %[[constant_127:[^ ]+]] = u32[] constant(17)
// CHECK-NEXT:  %[[broadcast_128:[^ ]+]] = u32[1]{0} broadcast(u32[] %[[constant_127]]), dimensions={}
// CHECK-NEXT:  %[[shift_right_logical_129:[^ ]+]] = u32[1]{0} shift-right-logical(u32[1]{0} %[[xor_122]], u32[1]{0} %[[broadcast_128]])
// CHECK-NEXT:  %[[or_130:[^ ]+]] = u32[1]{0} or(u32[1]{0} %[[shift_left_126]], u32[1]{0} %[[shift_right_logical_129]])
// CHECK-NEXT:  %[[xor_131:[^ ]+]] = u32[1]{0} xor(u32[1]{0} %[[add_123]], u32[1]{0} %[[or_130]])
// CHECK-NEXT:  %[[add_132:[^ ]+]] = u32[1]{0} add(u32[1]{0} %[[add_123]], u32[1]{0} %[[xor_131]])
// CHECK-NEXT:  %[[constant_133:[^ ]+]] = u32[] constant(26)
// CHECK-NEXT:  %[[broadcast_134:[^ ]+]] = u32[1]{0} broadcast(u32[] %[[constant_133]]), dimensions={}
// CHECK-NEXT:  %[[shift_left_135:[^ ]+]] = u32[1]{0} shift-left(u32[1]{0} %[[xor_131]], u32[1]{0} %[[broadcast_134]])
// CHECK-NEXT:  %[[constant_136:[^ ]+]] = u32[] constant(6)
// CHECK-NEXT:  %[[broadcast_137:[^ ]+]] = u32[1]{0} broadcast(u32[] %[[constant_136]]), dimensions={}
// CHECK-NEXT:  %[[shift_right_logical_138:[^ ]+]] = u32[1]{0} shift-right-logical(u32[1]{0} %[[xor_131]], u32[1]{0} %[[broadcast_137]])
// CHECK-NEXT:  %[[or_139:[^ ]+]] = u32[1]{0} or(u32[1]{0} %[[shift_left_135]], u32[1]{0} %[[shift_right_logical_138]])
// CHECK-NEXT:  %[[xor_140:[^ ]+]] = u32[1]{0} xor(u32[1]{0} %[[add_132]], u32[1]{0} %[[or_139]])
// CHECK-NEXT:  %[[add_141:[^ ]+]] = u32[1]{0} add(u32[1]{0} %[[add_132]], u32[1]{0} %[[xor_140]])
// CHECK-NEXT:  %[[broadcast_150:[^ ]+]] = u32[1]{0} broadcast(u32[] %[[bitcast_convert_19]]), dimensions={}
// CHECK-NEXT:  %[[add_151:[^ ]+]] = u32[1]{0} add(u32[1]{0} %[[add_141]], u32[1]{0} %[[broadcast_150]])
// CHECK-NEXT:  %[[constant_142:[^ ]+]] = u32[] constant(6)
// CHECK-NEXT:  %[[broadcast_143:[^ ]+]] = u32[1]{0} broadcast(u32[] %[[constant_142]]), dimensions={}
// CHECK-NEXT:  %[[shift_left_144:[^ ]+]] = u32[1]{0} shift-left(u32[1]{0} %[[xor_140]], u32[1]{0} %[[broadcast_143]])
// CHECK-NEXT:  %[[constant_145:[^ ]+]] = u32[] constant(26)
// CHECK-NEXT:  %[[broadcast_146:[^ ]+]] = u32[1]{0} broadcast(u32[] %[[constant_145]]), dimensions={}
// CHECK-NEXT:  %[[shift_right_logical_147:[^ ]+]] = u32[1]{0} shift-right-logical(u32[1]{0} %[[xor_140]], u32[1]{0} %[[broadcast_146]])
// CHECK-NEXT:  %[[or_148:[^ ]+]] = u32[1]{0} or(u32[1]{0} %[[shift_left_144]], u32[1]{0} %[[shift_right_logical_147]])
// CHECK-NEXT:  %[[xor_149:[^ ]+]] = u32[1]{0} xor(u32[1]{0} %[[add_141]], u32[1]{0} %[[or_148]])
// CHECK-NEXT:  %[[broadcast_152:[^ ]+]] = u32[1]{0} broadcast(u32[] %[[bitcast_convert_20]]), dimensions={}
// CHECK-NEXT:  %[[add_153:[^ ]+]] = u32[1]{0} add(u32[1]{0} %[[xor_149]], u32[1]{0} %[[broadcast_152]])
// CHECK-NEXT:  %[[constant_154:[^ ]+]] = u32[] constant(3)
// CHECK-NEXT:  %[[broadcast_155:[^ ]+]] = u32[1]{0} broadcast(u32[] %[[constant_154]]), dimensions={}
// CHECK-NEXT:  %[[add_156:[^ ]+]] = u32[1]{0} add(u32[1]{0} %[[add_153]], u32[1]{0} %[[broadcast_155]])
// CHECK-NEXT:  %[[add_157:[^ ]+]] = u32[1]{0} add(u32[1]{0} %[[add_151]], u32[1]{0} %[[add_156]])
// CHECK-NEXT:  %[[constant_158:[^ ]+]] = u32[] constant(17)
// CHECK-NEXT:  %[[broadcast_159:[^ ]+]] = u32[1]{0} broadcast(u32[] %[[constant_158]]), dimensions={}
// CHECK-NEXT:  %[[shift_left_160:[^ ]+]] = u32[1]{0} shift-left(u32[1]{0} %[[add_156]], u32[1]{0} %[[broadcast_159]])
// CHECK-NEXT:  %[[constant_161:[^ ]+]] = u32[] constant(15)
// CHECK-NEXT:  %[[broadcast_162:[^ ]+]] = u32[1]{0} broadcast(u32[] %[[constant_161]]), dimensions={}
// CHECK-NEXT:  %[[shift_right_logical_163:[^ ]+]] = u32[1]{0} shift-right-logical(u32[1]{0} %[[add_156]], u32[1]{0} %[[broadcast_162]])
// CHECK-NEXT:  %[[or_164:[^ ]+]] = u32[1]{0} or(u32[1]{0} %[[shift_left_160]], u32[1]{0} %[[shift_right_logical_163]])
// CHECK-NEXT:  %[[xor_165:[^ ]+]] = u32[1]{0} xor(u32[1]{0} %[[add_157]], u32[1]{0} %[[or_164]])
// CHECK-NEXT:  %[[add_166:[^ ]+]] = u32[1]{0} add(u32[1]{0} %[[add_157]], u32[1]{0} %[[xor_165]])
// CHECK-NEXT:  %[[constant_167:[^ ]+]] = u32[] constant(29)
// CHECK-NEXT:  %[[broadcast_168:[^ ]+]] = u32[1]{0} broadcast(u32[] %[[constant_167]]), dimensions={}
// CHECK-NEXT:  %[[shift_left_169:[^ ]+]] = u32[1]{0} shift-left(u32[1]{0} %[[xor_165]], u32[1]{0} %[[broadcast_168]])
// CHECK-NEXT:  %[[constant_170:[^ ]+]] = u32[] constant(3)
// CHECK-NEXT:  %[[broadcast_171:[^ ]+]] = u32[1]{0} broadcast(u32[] %[[constant_170]]), dimensions={}
// CHECK-NEXT:  %[[shift_right_logical_172:[^ ]+]] = u32[1]{0} shift-right-logical(u32[1]{0} %[[xor_165]], u32[1]{0} %[[broadcast_171]])
// CHECK-NEXT:  %[[or_173:[^ ]+]] = u32[1]{0} or(u32[1]{0} %[[shift_left_169]], u32[1]{0} %[[shift_right_logical_172]])
// CHECK-NEXT:  %[[xor_174:[^ ]+]] = u32[1]{0} xor(u32[1]{0} %[[add_166]], u32[1]{0} %[[or_173]])
// CHECK-NEXT:  %[[add_175:[^ ]+]] = u32[1]{0} add(u32[1]{0} %[[add_166]], u32[1]{0} %[[xor_174]])
// CHECK-NEXT:  %[[constant_176:[^ ]+]] = u32[] constant(16)
// CHECK-NEXT:  %[[broadcast_177:[^ ]+]] = u32[1]{0} broadcast(u32[] %[[constant_176]]), dimensions={}
// CHECK-NEXT:  %[[shift_left_178:[^ ]+]] = u32[1]{0} shift-left(u32[1]{0} %[[xor_174]], u32[1]{0} %[[broadcast_177]])
// CHECK-NEXT:  %[[constant_179:[^ ]+]] = u32[] constant(16)
// CHECK-NEXT:  %[[broadcast_180:[^ ]+]] = u32[1]{0} broadcast(u32[] %[[constant_179]]), dimensions={}
// CHECK-NEXT:  %[[shift_right_logical_181:[^ ]+]] = u32[1]{0} shift-right-logical(u32[1]{0} %[[xor_174]], u32[1]{0} %[[broadcast_180]])
// CHECK-NEXT:  %[[or_182:[^ ]+]] = u32[1]{0} or(u32[1]{0} %[[shift_left_178]], u32[1]{0} %[[shift_right_logical_181]])
// CHECK-NEXT:  %[[xor_183:[^ ]+]] = u32[1]{0} xor(u32[1]{0} %[[add_175]], u32[1]{0} %[[or_182]])
// CHECK-NEXT:  %[[add_184:[^ ]+]] = u32[1]{0} add(u32[1]{0} %[[add_175]], u32[1]{0} %[[xor_183]])
// CHECK-NEXT:  %[[broadcast_193:[^ ]+]] = u32[1]{0} broadcast(u32[] %[[bitcast_convert_20]]), dimensions={}
// CHECK-NEXT:  %[[add_194:[^ ]+]] = u32[1]{0} add(u32[1]{0} %[[add_184]], u32[1]{0} %[[broadcast_193]])
// CHECK-NEXT:  %[[constant_185:[^ ]+]] = u32[] constant(24)
// CHECK-NEXT:  %[[broadcast_186:[^ ]+]] = u32[1]{0} broadcast(u32[] %[[constant_185]]), dimensions={}
// CHECK-NEXT:  %[[shift_left_187:[^ ]+]] = u32[1]{0} shift-left(u32[1]{0} %[[xor_183]], u32[1]{0} %[[broadcast_186]])
// CHECK-NEXT:  %[[constant_188:[^ ]+]] = u32[] constant(8)
// CHECK-NEXT:  %[[broadcast_189:[^ ]+]] = u32[1]{0} broadcast(u32[] %[[constant_188]]), dimensions={}
// CHECK-NEXT:  %[[shift_right_logical_190:[^ ]+]] = u32[1]{0} shift-right-logical(u32[1]{0} %[[xor_183]], u32[1]{0} %[[broadcast_189]])
// CHECK-NEXT:  %[[or_191:[^ ]+]] = u32[1]{0} or(u32[1]{0} %[[shift_left_187]], u32[1]{0} %[[shift_right_logical_190]])
// CHECK-NEXT:  %[[xor_192:[^ ]+]] = u32[1]{0} xor(u32[1]{0} %[[add_184]], u32[1]{0} %[[or_191]])
// CHECK-NEXT:  %[[broadcast_195:[^ ]+]] = u32[1]{0} broadcast(u32[] %[[xor_23]]), dimensions={}
// CHECK-NEXT:  %[[add_196:[^ ]+]] = u32[1]{0} add(u32[1]{0} %[[xor_192]], u32[1]{0} %[[broadcast_195]])
// CHECK-NEXT:  %[[constant_197:[^ ]+]] = u32[] constant(4)
// CHECK-NEXT:  %[[broadcast_198:[^ ]+]] = u32[1]{0} broadcast(u32[] %[[constant_197]]), dimensions={}
// CHECK-NEXT:  %[[add_199:[^ ]+]] = u32[1]{0} add(u32[1]{0} %[[add_196]], u32[1]{0} %[[broadcast_198]])
// CHECK-NEXT:  %[[add_200:[^ ]+]] = u32[1]{0} add(u32[1]{0} %[[add_194]], u32[1]{0} %[[add_199]])
// CHECK-NEXT:  %[[constant_201:[^ ]+]] = u32[] constant(13)
// CHECK-NEXT:  %[[broadcast_202:[^ ]+]] = u32[1]{0} broadcast(u32[] %[[constant_201]]), dimensions={}
// CHECK-NEXT:  %[[shift_left_203:[^ ]+]] = u32[1]{0} shift-left(u32[1]{0} %[[add_199]], u32[1]{0} %[[broadcast_202]])
// CHECK-NEXT:  %[[constant_204:[^ ]+]] = u32[] constant(19)
// CHECK-NEXT:  %[[broadcast_205:[^ ]+]] = u32[1]{0} broadcast(u32[] %[[constant_204]]), dimensions={}
// CHECK-NEXT:  %[[shift_right_logical_206:[^ ]+]] = u32[1]{0} shift-right-logical(u32[1]{0} %[[add_199]], u32[1]{0} %[[broadcast_205]])
// CHECK-NEXT:  %[[or_207:[^ ]+]] = u32[1]{0} or(u32[1]{0} %[[shift_left_203]], u32[1]{0} %[[shift_right_logical_206]])
// CHECK-NEXT:  %[[xor_208:[^ ]+]] = u32[1]{0} xor(u32[1]{0} %[[add_200]], u32[1]{0} %[[or_207]])
// CHECK-NEXT:  %[[add_209:[^ ]+]] = u32[1]{0} add(u32[1]{0} %[[add_200]], u32[1]{0} %[[xor_208]])
// CHECK-NEXT:  %[[constant_210:[^ ]+]] = u32[] constant(15)
// CHECK-NEXT:  %[[broadcast_211:[^ ]+]] = u32[1]{0} broadcast(u32[] %[[constant_210]]), dimensions={}
// CHECK-NEXT:  %[[shift_left_212:[^ ]+]] = u32[1]{0} shift-left(u32[1]{0} %[[xor_208]], u32[1]{0} %[[broadcast_211]])
// CHECK-NEXT:  %[[constant_213:[^ ]+]] = u32[] constant(17)
// CHECK-NEXT:  %[[broadcast_214:[^ ]+]] = u32[1]{0} broadcast(u32[] %[[constant_213]]), dimensions={}
// CHECK-NEXT:  %[[shift_right_logical_215:[^ ]+]] = u32[1]{0} shift-right-logical(u32[1]{0} %[[xor_208]], u32[1]{0} %[[broadcast_214]])
// CHECK-NEXT:  %[[or_216:[^ ]+]] = u32[1]{0} or(u32[1]{0} %[[shift_left_212]], u32[1]{0} %[[shift_right_logical_215]])
// CHECK-NEXT:  %[[xor_217:[^ ]+]] = u32[1]{0} xor(u32[1]{0} %[[add_209]], u32[1]{0} %[[or_216]])
// CHECK-NEXT:  %[[add_218:[^ ]+]] = u32[1]{0} add(u32[1]{0} %[[add_209]], u32[1]{0} %[[xor_217]])
// CHECK-NEXT:  %[[constant_219:[^ ]+]] = u32[] constant(26)
// CHECK-NEXT:  %[[broadcast_220:[^ ]+]] = u32[1]{0} broadcast(u32[] %[[constant_219]]), dimensions={}
// CHECK-NEXT:  %[[shift_left_221:[^ ]+]] = u32[1]{0} shift-left(u32[1]{0} %[[xor_217]], u32[1]{0} %[[broadcast_220]])
// CHECK-NEXT:  %[[constant_222:[^ ]+]] = u32[] constant(6)
// CHECK-NEXT:  %[[broadcast_223:[^ ]+]] = u32[1]{0} broadcast(u32[] %[[constant_222]]), dimensions={}
// CHECK-NEXT:  %[[shift_right_logical_224:[^ ]+]] = u32[1]{0} shift-right-logical(u32[1]{0} %[[xor_217]], u32[1]{0} %[[broadcast_223]])
// CHECK-NEXT:  %[[or_225:[^ ]+]] = u32[1]{0} or(u32[1]{0} %[[shift_left_221]], u32[1]{0} %[[shift_right_logical_224]])
// CHECK-NEXT:  %[[xor_226:[^ ]+]] = u32[1]{0} xor(u32[1]{0} %[[add_218]], u32[1]{0} %[[or_225]])
// CHECK-NEXT:  %[[add_227:[^ ]+]] = u32[1]{0} add(u32[1]{0} %[[add_218]], u32[1]{0} %[[xor_226]])
// CHECK-NEXT:  %[[constant_228:[^ ]+]] = u32[] constant(6)
// CHECK-NEXT:  %[[broadcast_229:[^ ]+]] = u32[1]{0} broadcast(u32[] %[[constant_228]]), dimensions={}
// CHECK-NEXT:  %[[shift_left_230:[^ ]+]] = u32[1]{0} shift-left(u32[1]{0} %[[xor_226]], u32[1]{0} %[[broadcast_229]])
// CHECK-NEXT:  %[[constant_231:[^ ]+]] = u32[] constant(26)
// CHECK-NEXT:  %[[broadcast_232:[^ ]+]] = u32[1]{0} broadcast(u32[] %[[constant_231]]), dimensions={}
// CHECK-NEXT:  %[[shift_right_logical_233:[^ ]+]] = u32[1]{0} shift-right-logical(u32[1]{0} %[[xor_226]], u32[1]{0} %[[broadcast_232]])
// CHECK-NEXT:  %[[or_234:[^ ]+]] = u32[1]{0} or(u32[1]{0} %[[shift_left_230]], u32[1]{0} %[[shift_right_logical_233]])
// CHECK-NEXT:  %[[xor_235:[^ ]+]] = u32[1]{0} xor(u32[1]{0} %[[add_227]], u32[1]{0} %[[or_234]])
// CHECK-NEXT:  %[[broadcast_238:[^ ]+]] = u32[1]{0} broadcast(u32[] %[[bitcast_convert_19]]), dimensions={}
// CHECK-NEXT:  %[[add_239:[^ ]+]] = u32[1]{0} add(u32[1]{0} %[[xor_235]], u32[1]{0} %[[broadcast_238]])
// CHECK-NEXT:  %[[constant_240:[^ ]+]] = u32[] constant(5)
// CHECK-NEXT:  %[[broadcast_241:[^ ]+]] = u32[1]{0} broadcast(u32[] %[[constant_240]]), dimensions={}
// CHECK-NEXT:  %[[add_242:[^ ]+]] = u32[1]{0} add(u32[1]{0} %[[add_239]], u32[1]{0} %[[broadcast_241]])
// CHECK-NEXT:  %[[reshape_244:[^ ]+]] = u64[1]{0} reshape(u64[] %[[reshape_3]])
// CHECK-NEXT:  %[[constant_7:[^ ]+]] = u64[] constant(1)
// CHECK-NEXT:  %[[broadcast_8:[^ ]+]] = u64[1]{0} broadcast(u64[] %[[constant_7]]), dimensions={}
// CHECK-NEXT:  %[[add_9:[^ ]+]] = u64[1]{0} add(u64[1]{0} %[[slice_4]], u64[1]{0} %[[broadcast_8]])
// CHECK-NEXT:  %[[concatenate_245:[^ ]+]] = u64[2]{0} concatenate(u64[1]{0} %[[reshape_244]], u64[1]{0} %[[add_9]]), dimensions={0}
// CHECK-NEXT:  %[[broadcast_236:[^ ]+]] = u32[1]{0} broadcast(u32[] %[[xor_23]]), dimensions={}
// CHECK-NEXT:  %[[add_237:[^ ]+]] = u32[1]{0} add(u32[1]{0} %[[add_227]], u32[1]{0} %[[broadcast_236]])
// CHECK-NEXT:  %[[reshape_243:[^ ]+]] = u32[] reshape(u32[1]{0} %[[add_237]])
// CHECK-NEXT:  ROOT %[[tuple_246:[^ ]+]] = (u64[2]{0}, u32[]) tuple(u64[2]{0} %[[concatenate_245]], u32[] %[[reshape_243]])

// CHECK-LABEL: ENTRY %test_default
// CHECK-NEXT:  %[[initial_state:[^ ]+]] = u64[2]{0} constant({0, 1})
// CHECK-NEXT:  ROOT %[[call:[^ ]+]] = (u64[2]{0}, u32[]) call(u64[2]{0} %[[initial_state]]), to_apply=%[[$rng_247]]

HloModule TestDefaultAlgorithm

ENTRY test_default {
  initial_state = u64[2] constant({0, 1})
  ROOT result = (u64[2], u32[]) rng-bit-generator(initial_state), algorithm=rng_default
}

// -----

// CHECK-LABEL: HloModule TestThreeFryAlgorithm, entry_computation_layout={()->(u64[4]{0}, u32[])}

// CHECK:       %[[$rng_247:[^ ]+]]
// CHECK-NEXT:  %[[state_1:[^ ]+]] = u64[4]{0} parameter(0)
// CHECK-NEXT:  %[[slice_4:[^ ]+]] = u64[1]{0} slice(u64[4]{0} %[[state_1]]), slice={[1:2]}
// CHECK-NEXT:  %[[reshape_5:[^ ]+]] = u64[] reshape(u64[1]{0} %[[slice_4]])
// CHECK-NEXT:  %[[broadcast_6:[^ ]+]] = u64[1]{0} broadcast(u64[] %[[reshape_5]]), dimensions={}
// CHECK-NEXT:  %[[convert_11:[^ ]+]] = u32[1]{0} convert(u64[1]{0} %[[broadcast_6]])
// CHECK-NEXT:  %[[slice_2:[^ ]+]] = u64[1]{0} slice(u64[4]{0} %[[state_1]]), slice={[0:1]}
// CHECK-NEXT:  %[[reshape_3:[^ ]+]] = u64[] reshape(u64[1]{0} %[[slice_2]])
// CHECK-NEXT:  %[[convert_16:[^ ]+]] = u32[] convert(u64[] %[[reshape_3]])
// CHECK-NEXT:  %[[bitcast_convert_19:[^ ]+]] = u32[] bitcast-convert(u32[] %[[convert_16]])
// CHECK-NEXT:  %[[broadcast_24:[^ ]+]] = u32[1]{0} broadcast(u32[] %[[bitcast_convert_19]]), dimensions={}
// CHECK-NEXT:  %[[add_25:[^ ]+]] = u32[1]{0} add(u32[1]{0} %[[convert_11]], u32[1]{0} %[[broadcast_24]])
// CHECK-NEXT:  %[[constant_10:[^ ]+]] = u64[] constant(32)
// CHECK-NEXT:  %[[broadcast_12:[^ ]+]] = u64[1]{0} broadcast(u64[] %[[constant_10]]), dimensions={}
// CHECK-NEXT:  %[[shift_right_logical_13:[^ ]+]] = u64[1]{0} shift-right-logical(u64[1]{0} %[[broadcast_6]], u64[1]{0} %[[broadcast_12]])
// CHECK-NEXT:  %[[convert_14:[^ ]+]] = u32[1]{0} convert(u64[1]{0} %[[shift_right_logical_13]])
// CHECK-NEXT:  %[[constant_15:[^ ]+]] = u64[] constant(32)
// CHECK-NEXT:  %[[shift_right_logical_17:[^ ]+]] = u64[] shift-right-logical(u64[] %[[reshape_3]], u64[] %[[constant_15]])
// CHECK-NEXT:  %[[convert_18:[^ ]+]] = u32[] convert(u64[] %[[shift_right_logical_17]])
// CHECK-NEXT:  %[[bitcast_convert_20:[^ ]+]] = u32[] bitcast-convert(u32[] %[[convert_18]])
// CHECK-NEXT:  %[[broadcast_26:[^ ]+]] = u32[1]{0} broadcast(u32[] %[[bitcast_convert_20]]), dimensions={}
// CHECK-NEXT:  %[[add_27:[^ ]+]] = u32[1]{0} add(u32[1]{0} %[[convert_14]], u32[1]{0} %[[broadcast_26]])
// CHECK-NEXT:  %[[add_28:[^ ]+]] = u32[1]{0} add(u32[1]{0} %[[add_25]], u32[1]{0} %[[add_27]])
// CHECK-NEXT:  %[[constant_29:[^ ]+]] = u32[] constant(13)
// CHECK-NEXT:  %[[broadcast_30:[^ ]+]] = u32[1]{0} broadcast(u32[] %[[constant_29]]), dimensions={}
// CHECK-NEXT:  %[[shift_left_31:[^ ]+]] = u32[1]{0} shift-left(u32[1]{0} %[[add_27]], u32[1]{0} %[[broadcast_30]])
// CHECK-NEXT:  %[[constant_32:[^ ]+]] = u32[] constant(19)
// CHECK-NEXT:  %[[broadcast_33:[^ ]+]] = u32[1]{0} broadcast(u32[] %[[constant_32]]), dimensions={}
// CHECK-NEXT:  %[[shift_right_logical_34:[^ ]+]] = u32[1]{0} shift-right-logical(u32[1]{0} %[[add_27]], u32[1]{0} %[[broadcast_33]])
// CHECK-NEXT:  %[[or_35:[^ ]+]] = u32[1]{0} or(u32[1]{0} %[[shift_left_31]], u32[1]{0} %[[shift_right_logical_34]])
// CHECK-NEXT:  %[[xor_36:[^ ]+]] = u32[1]{0} xor(u32[1]{0} %[[add_28]], u32[1]{0} %[[or_35]])
// CHECK-NEXT:  %[[add_37:[^ ]+]] = u32[1]{0} add(u32[1]{0} %[[add_28]], u32[1]{0} %[[xor_36]])
// CHECK-NEXT:  %[[constant_38:[^ ]+]] = u32[] constant(15)
// CHECK-NEXT:  %[[broadcast_39:[^ ]+]] = u32[1]{0} broadcast(u32[] %[[constant_38]]), dimensions={}
// CHECK-NEXT:  %[[shift_left_40:[^ ]+]] = u32[1]{0} shift-left(u32[1]{0} %[[xor_36]], u32[1]{0} %[[broadcast_39]])
// CHECK-NEXT:  %[[constant_41:[^ ]+]] = u32[] constant(17)
// CHECK-NEXT:  %[[broadcast_42:[^ ]+]] = u32[1]{0} broadcast(u32[] %[[constant_41]]), dimensions={}
// CHECK-NEXT:  %[[shift_right_logical_43:[^ ]+]] = u32[1]{0} shift-right-logical(u32[1]{0} %[[xor_36]], u32[1]{0} %[[broadcast_42]])
// CHECK-NEXT:  %[[or_44:[^ ]+]] = u32[1]{0} or(u32[1]{0} %[[shift_left_40]], u32[1]{0} %[[shift_right_logical_43]])
// CHECK-NEXT:  %[[xor_45:[^ ]+]] = u32[1]{0} xor(u32[1]{0} %[[add_37]], u32[1]{0} %[[or_44]])
// CHECK-NEXT:  %[[add_46:[^ ]+]] = u32[1]{0} add(u32[1]{0} %[[add_37]], u32[1]{0} %[[xor_45]])
// CHECK-NEXT:  %[[constant_47:[^ ]+]] = u32[] constant(26)
// CHECK-NEXT:  %[[broadcast_48:[^ ]+]] = u32[1]{0} broadcast(u32[] %[[constant_47]]), dimensions={}
// CHECK-NEXT:  %[[shift_left_49:[^ ]+]] = u32[1]{0} shift-left(u32[1]{0} %[[xor_45]], u32[1]{0} %[[broadcast_48]])
// CHECK-NEXT:  %[[constant_50:[^ ]+]] = u32[] constant(6)
// CHECK-NEXT:  %[[broadcast_51:[^ ]+]] = u32[1]{0} broadcast(u32[] %[[constant_50]]), dimensions={}
// CHECK-NEXT:  %[[shift_right_logical_52:[^ ]+]] = u32[1]{0} shift-right-logical(u32[1]{0} %[[xor_45]], u32[1]{0} %[[broadcast_51]])
// CHECK-NEXT:  %[[or_53:[^ ]+]] = u32[1]{0} or(u32[1]{0} %[[shift_left_49]], u32[1]{0} %[[shift_right_logical_52]])
// CHECK-NEXT:  %[[xor_54:[^ ]+]] = u32[1]{0} xor(u32[1]{0} %[[add_46]], u32[1]{0} %[[or_53]])
// CHECK-NEXT:  %[[add_55:[^ ]+]] = u32[1]{0} add(u32[1]{0} %[[add_46]], u32[1]{0} %[[xor_54]])
// CHECK-NEXT:  %[[broadcast_64:[^ ]+]] = u32[1]{0} broadcast(u32[] %[[bitcast_convert_20]]), dimensions={}
// CHECK-NEXT:  %[[add_65:[^ ]+]] = u32[1]{0} add(u32[1]{0} %[[add_55]], u32[1]{0} %[[broadcast_64]])
// CHECK-NEXT:  %[[constant_56:[^ ]+]] = u32[] constant(6)
// CHECK-NEXT:  %[[broadcast_57:[^ ]+]] = u32[1]{0} broadcast(u32[] %[[constant_56]]), dimensions={}
// CHECK-NEXT:  %[[shift_left_58:[^ ]+]] = u32[1]{0} shift-left(u32[1]{0} %[[xor_54]], u32[1]{0} %[[broadcast_57]])
// CHECK-NEXT:  %[[constant_59:[^ ]+]] = u32[] constant(26)
// CHECK-NEXT:  %[[broadcast_60:[^ ]+]] = u32[1]{0} broadcast(u32[] %[[constant_59]]), dimensions={}
// CHECK-NEXT:  %[[shift_right_logical_61:[^ ]+]] = u32[1]{0} shift-right-logical(u32[1]{0} %[[xor_54]], u32[1]{0} %[[broadcast_60]])
// CHECK-NEXT:  %[[or_62:[^ ]+]] = u32[1]{0} or(u32[1]{0} %[[shift_left_58]], u32[1]{0} %[[shift_right_logical_61]])
// CHECK-NEXT:  %[[xor_63:[^ ]+]] = u32[1]{0} xor(u32[1]{0} %[[add_55]], u32[1]{0} %[[or_62]])
// CHECK-NEXT:  %[[constant_21:[^ ]+]] = u32[] constant(466688986)
// CHECK-NEXT:  %[[xor_22:[^ ]+]] = u32[] xor(u32[] %[[constant_21]], u32[] %[[bitcast_convert_19]])
// CHECK-NEXT:  %[[xor_23:[^ ]+]] = u32[] xor(u32[] %[[xor_22]], u32[] %[[bitcast_convert_20]])
// CHECK-NEXT:  %[[broadcast_66:[^ ]+]] = u32[1]{0} broadcast(u32[] %[[xor_23]]), dimensions={}
// CHECK-NEXT:  %[[add_67:[^ ]+]] = u32[1]{0} add(u32[1]{0} %[[xor_63]], u32[1]{0} %[[broadcast_66]])
// CHECK-NEXT:  %[[constant_68:[^ ]+]] = u32[] constant(1)
// CHECK-NEXT:  %[[broadcast_69:[^ ]+]] = u32[1]{0} broadcast(u32[] %[[constant_68]]), dimensions={}
// CHECK-NEXT:  %[[add_70:[^ ]+]] = u32[1]{0} add(u32[1]{0} %[[add_67]], u32[1]{0} %[[broadcast_69]])
// CHECK-NEXT:  %[[add_71:[^ ]+]] = u32[1]{0} add(u32[1]{0} %[[add_65]], u32[1]{0} %[[add_70]])
// CHECK-NEXT:  %[[constant_72:[^ ]+]] = u32[] constant(17)
// CHECK-NEXT:  %[[broadcast_73:[^ ]+]] = u32[1]{0} broadcast(u32[] %[[constant_72]]), dimensions={}
// CHECK-NEXT:  %[[shift_left_74:[^ ]+]] = u32[1]{0} shift-left(u32[1]{0} %[[add_70]], u32[1]{0} %[[broadcast_73]])
// CHECK-NEXT:  %[[constant_75:[^ ]+]] = u32[] constant(15)
// CHECK-NEXT:  %[[broadcast_76:[^ ]+]] = u32[1]{0} broadcast(u32[] %[[constant_75]]), dimensions={}
// CHECK-NEXT:  %[[shift_right_logical_77:[^ ]+]] = u32[1]{0} shift-right-logical(u32[1]{0} %[[add_70]], u32[1]{0} %[[broadcast_76]])
// CHECK-NEXT:  %[[or_78:[^ ]+]] = u32[1]{0} or(u32[1]{0} %[[shift_left_74]], u32[1]{0} %[[shift_right_logical_77]])
// CHECK-NEXT:  %[[xor_79:[^ ]+]] = u32[1]{0} xor(u32[1]{0} %[[add_71]], u32[1]{0} %[[or_78]])
// CHECK-NEXT:  %[[add_80:[^ ]+]] = u32[1]{0} add(u32[1]{0} %[[add_71]], u32[1]{0} %[[xor_79]])
// CHECK-NEXT:  %[[constant_81:[^ ]+]] = u32[] constant(29)
// CHECK-NEXT:  %[[broadcast_82:[^ ]+]] = u32[1]{0} broadcast(u32[] %[[constant_81]]), dimensions={}
// CHECK-NEXT:  %[[shift_left_83:[^ ]+]] = u32[1]{0} shift-left(u32[1]{0} %[[xor_79]], u32[1]{0} %[[broadcast_82]])
// CHECK-NEXT:  %[[constant_84:[^ ]+]] = u32[] constant(3)
// CHECK-NEXT:  %[[broadcast_85:[^ ]+]] = u32[1]{0} broadcast(u32[] %[[constant_84]]), dimensions={}
// CHECK-NEXT:  %[[shift_right_logical_86:[^ ]+]] = u32[1]{0} shift-right-logical(u32[1]{0} %[[xor_79]], u32[1]{0} %[[broadcast_85]])
// CHECK-NEXT:  %[[or_87:[^ ]+]] = u32[1]{0} or(u32[1]{0} %[[shift_left_83]], u32[1]{0} %[[shift_right_logical_86]])
// CHECK-NEXT:  %[[xor_88:[^ ]+]] = u32[1]{0} xor(u32[1]{0} %[[add_80]], u32[1]{0} %[[or_87]])
// CHECK-NEXT:  %[[add_89:[^ ]+]] = u32[1]{0} add(u32[1]{0} %[[add_80]], u32[1]{0} %[[xor_88]])
// CHECK-NEXT:  %[[constant_90:[^ ]+]] = u32[] constant(16)
// CHECK-NEXT:  %[[broadcast_91:[^ ]+]] = u32[1]{0} broadcast(u32[] %[[constant_90]]), dimensions={}
// CHECK-NEXT:  %[[shift_left_92:[^ ]+]] = u32[1]{0} shift-left(u32[1]{0} %[[xor_88]], u32[1]{0} %[[broadcast_91]])
// CHECK-NEXT:  %[[constant_93:[^ ]+]] = u32[] constant(16)
// CHECK-NEXT:  %[[broadcast_94:[^ ]+]] = u32[1]{0} broadcast(u32[] %[[constant_93]]), dimensions={}
// CHECK-NEXT:  %[[shift_right_logical_95:[^ ]+]] = u32[1]{0} shift-right-logical(u32[1]{0} %[[xor_88]], u32[1]{0} %[[broadcast_94]])
// CHECK-NEXT:  %[[or_96:[^ ]+]] = u32[1]{0} or(u32[1]{0} %[[shift_left_92]], u32[1]{0} %[[shift_right_logical_95]])
// CHECK-NEXT:  %[[xor_97:[^ ]+]] = u32[1]{0} xor(u32[1]{0} %[[add_89]], u32[1]{0} %[[or_96]])
// CHECK-NEXT:  %[[add_98:[^ ]+]] = u32[1]{0} add(u32[1]{0} %[[add_89]], u32[1]{0} %[[xor_97]])
// CHECK-NEXT:  %[[broadcast_107:[^ ]+]] = u32[1]{0} broadcast(u32[] %[[xor_23]]), dimensions={}
// CHECK-NEXT:  %[[add_108:[^ ]+]] = u32[1]{0} add(u32[1]{0} %[[add_98]], u32[1]{0} %[[broadcast_107]])
// CHECK-NEXT:  %[[constant_99:[^ ]+]] = u32[] constant(24)
// CHECK-NEXT:  %[[broadcast_100:[^ ]+]] = u32[1]{0} broadcast(u32[] %[[constant_99]]), dimensions={}
// CHECK-NEXT:  %[[shift_left_101:[^ ]+]] = u32[1]{0} shift-left(u32[1]{0} %[[xor_97]], u32[1]{0} %[[broadcast_100]])
// CHECK-NEXT:  %[[constant_102:[^ ]+]] = u32[] constant(8)
// CHECK-NEXT:  %[[broadcast_103:[^ ]+]] = u32[1]{0} broadcast(u32[] %[[constant_102]]), dimensions={}
// CHECK-NEXT:  %[[shift_right_logical_104:[^ ]+]] = u32[1]{0} shift-right-logical(u32[1]{0} %[[xor_97]], u32[1]{0} %[[broadcast_103]])
// CHECK-NEXT:  %[[or_105:[^ ]+]] = u32[1]{0} or(u32[1]{0} %[[shift_left_101]], u32[1]{0} %[[shift_right_logical_104]])
// CHECK-NEXT:  %[[xor_106:[^ ]+]] = u32[1]{0} xor(u32[1]{0} %[[add_98]], u32[1]{0} %[[or_105]])
// CHECK-NEXT:  %[[broadcast_109:[^ ]+]] = u32[1]{0} broadcast(u32[] %[[bitcast_convert_19]]), dimensions={}
// CHECK-NEXT:  %[[add_110:[^ ]+]] = u32[1]{0} add(u32[1]{0} %[[xor_106]], u32[1]{0} %[[broadcast_109]])
// CHECK-NEXT:  %[[constant_111:[^ ]+]] = u32[] constant(2)
// CHECK-NEXT:  %[[broadcast_112:[^ ]+]] = u32[1]{0} broadcast(u32[] %[[constant_111]]), dimensions={}
// CHECK-NEXT:  %[[add_113:[^ ]+]] = u32[1]{0} add(u32[1]{0} %[[add_110]], u32[1]{0} %[[broadcast_112]])
// CHECK-NEXT:  %[[add_114:[^ ]+]] = u32[1]{0} add(u32[1]{0} %[[add_108]], u32[1]{0} %[[add_113]])
// CHECK-NEXT:  %[[constant_115:[^ ]+]] = u32[] constant(13)
// CHECK-NEXT:  %[[broadcast_116:[^ ]+]] = u32[1]{0} broadcast(u32[] %[[constant_115]]), dimensions={}
// CHECK-NEXT:  %[[shift_left_117:[^ ]+]] = u32[1]{0} shift-left(u32[1]{0} %[[add_113]], u32[1]{0} %[[broadcast_116]])
// CHECK-NEXT:  %[[constant_118:[^ ]+]] = u32[] constant(19)
// CHECK-NEXT:  %[[broadcast_119:[^ ]+]] = u32[1]{0} broadcast(u32[] %[[constant_118]]), dimensions={}
// CHECK-NEXT:  %[[shift_right_logical_120:[^ ]+]] = u32[1]{0} shift-right-logical(u32[1]{0} %[[add_113]], u32[1]{0} %[[broadcast_119]])
// CHECK-NEXT:  %[[or_121:[^ ]+]] = u32[1]{0} or(u32[1]{0} %[[shift_left_117]], u32[1]{0} %[[shift_right_logical_120]])
// CHECK-NEXT:  %[[xor_122:[^ ]+]] = u32[1]{0} xor(u32[1]{0} %[[add_114]], u32[1]{0} %[[or_121]])
// CHECK-NEXT:  %[[add_123:[^ ]+]] = u32[1]{0} add(u32[1]{0} %[[add_114]], u32[1]{0} %[[xor_122]])
// CHECK-NEXT:  %[[constant_124:[^ ]+]] = u32[] constant(15)
// CHECK-NEXT:  %[[broadcast_125:[^ ]+]] = u32[1]{0} broadcast(u32[] %[[constant_124]]), dimensions={}
// CHECK-NEXT:  %[[shift_left_126:[^ ]+]] = u32[1]{0} shift-left(u32[1]{0} %[[xor_122]], u32[1]{0} %[[broadcast_125]])
// CHECK-NEXT:  %[[constant_127:[^ ]+]] = u32[] constant(17)
// CHECK-NEXT:  %[[broadcast_128:[^ ]+]] = u32[1]{0} broadcast(u32[] %[[constant_127]]), dimensions={}
// CHECK-NEXT:  %[[shift_right_logical_129:[^ ]+]] = u32[1]{0} shift-right-logical(u32[1]{0} %[[xor_122]], u32[1]{0} %[[broadcast_128]])
// CHECK-NEXT:  %[[or_130:[^ ]+]] = u32[1]{0} or(u32[1]{0} %[[shift_left_126]], u32[1]{0} %[[shift_right_logical_129]])
// CHECK-NEXT:  %[[xor_131:[^ ]+]] = u32[1]{0} xor(u32[1]{0} %[[add_123]], u32[1]{0} %[[or_130]])
// CHECK-NEXT:  %[[add_132:[^ ]+]] = u32[1]{0} add(u32[1]{0} %[[add_123]], u32[1]{0} %[[xor_131]])
// CHECK-NEXT:  %[[constant_133:[^ ]+]] = u32[] constant(26)
// CHECK-NEXT:  %[[broadcast_134:[^ ]+]] = u32[1]{0} broadcast(u32[] %[[constant_133]]), dimensions={}
// CHECK-NEXT:  %[[shift_left_135:[^ ]+]] = u32[1]{0} shift-left(u32[1]{0} %[[xor_131]], u32[1]{0} %[[broadcast_134]])
// CHECK-NEXT:  %[[constant_136:[^ ]+]] = u32[] constant(6)
// CHECK-NEXT:  %[[broadcast_137:[^ ]+]] = u32[1]{0} broadcast(u32[] %[[constant_136]]), dimensions={}
// CHECK-NEXT:  %[[shift_right_logical_138:[^ ]+]] = u32[1]{0} shift-right-logical(u32[1]{0} %[[xor_131]], u32[1]{0} %[[broadcast_137]])
// CHECK-NEXT:  %[[or_139:[^ ]+]] = u32[1]{0} or(u32[1]{0} %[[shift_left_135]], u32[1]{0} %[[shift_right_logical_138]])
// CHECK-NEXT:  %[[xor_140:[^ ]+]] = u32[1]{0} xor(u32[1]{0} %[[add_132]], u32[1]{0} %[[or_139]])
// CHECK-NEXT:  %[[add_141:[^ ]+]] = u32[1]{0} add(u32[1]{0} %[[add_132]], u32[1]{0} %[[xor_140]])
// CHECK-NEXT:  %[[broadcast_150:[^ ]+]] = u32[1]{0} broadcast(u32[] %[[bitcast_convert_19]]), dimensions={}
// CHECK-NEXT:  %[[add_151:[^ ]+]] = u32[1]{0} add(u32[1]{0} %[[add_141]], u32[1]{0} %[[broadcast_150]])
// CHECK-NEXT:  %[[constant_142:[^ ]+]] = u32[] constant(6)
// CHECK-NEXT:  %[[broadcast_143:[^ ]+]] = u32[1]{0} broadcast(u32[] %[[constant_142]]), dimensions={}
// CHECK-NEXT:  %[[shift_left_144:[^ ]+]] = u32[1]{0} shift-left(u32[1]{0} %[[xor_140]], u32[1]{0} %[[broadcast_143]])
// CHECK-NEXT:  %[[constant_145:[^ ]+]] = u32[] constant(26)
// CHECK-NEXT:  %[[broadcast_146:[^ ]+]] = u32[1]{0} broadcast(u32[] %[[constant_145]]), dimensions={}
// CHECK-NEXT:  %[[shift_right_logical_147:[^ ]+]] = u32[1]{0} shift-right-logical(u32[1]{0} %[[xor_140]], u32[1]{0} %[[broadcast_146]])
// CHECK-NEXT:  %[[or_148:[^ ]+]] = u32[1]{0} or(u32[1]{0} %[[shift_left_144]], u32[1]{0} %[[shift_right_logical_147]])
// CHECK-NEXT:  %[[xor_149:[^ ]+]] = u32[1]{0} xor(u32[1]{0} %[[add_141]], u32[1]{0} %[[or_148]])
// CHECK-NEXT:  %[[broadcast_152:[^ ]+]] = u32[1]{0} broadcast(u32[] %[[bitcast_convert_20]]), dimensions={}
// CHECK-NEXT:  %[[add_153:[^ ]+]] = u32[1]{0} add(u32[1]{0} %[[xor_149]], u32[1]{0} %[[broadcast_152]])
// CHECK-NEXT:  %[[constant_154:[^ ]+]] = u32[] constant(3)
// CHECK-NEXT:  %[[broadcast_155:[^ ]+]] = u32[1]{0} broadcast(u32[] %[[constant_154]]), dimensions={}
// CHECK-NEXT:  %[[add_156:[^ ]+]] = u32[1]{0} add(u32[1]{0} %[[add_153]], u32[1]{0} %[[broadcast_155]])
// CHECK-NEXT:  %[[add_157:[^ ]+]] = u32[1]{0} add(u32[1]{0} %[[add_151]], u32[1]{0} %[[add_156]])
// CHECK-NEXT:  %[[constant_158:[^ ]+]] = u32[] constant(17)
// CHECK-NEXT:  %[[broadcast_159:[^ ]+]] = u32[1]{0} broadcast(u32[] %[[constant_158]]), dimensions={}
// CHECK-NEXT:  %[[shift_left_160:[^ ]+]] = u32[1]{0} shift-left(u32[1]{0} %[[add_156]], u32[1]{0} %[[broadcast_159]])
// CHECK-NEXT:  %[[constant_161:[^ ]+]] = u32[] constant(15)
// CHECK-NEXT:  %[[broadcast_162:[^ ]+]] = u32[1]{0} broadcast(u32[] %[[constant_161]]), dimensions={}
// CHECK-NEXT:  %[[shift_right_logical_163:[^ ]+]] = u32[1]{0} shift-right-logical(u32[1]{0} %[[add_156]], u32[1]{0} %[[broadcast_162]])
// CHECK-NEXT:  %[[or_164:[^ ]+]] = u32[1]{0} or(u32[1]{0} %[[shift_left_160]], u32[1]{0} %[[shift_right_logical_163]])
// CHECK-NEXT:  %[[xor_165:[^ ]+]] = u32[1]{0} xor(u32[1]{0} %[[add_157]], u32[1]{0} %[[or_164]])
// CHECK-NEXT:  %[[add_166:[^ ]+]] = u32[1]{0} add(u32[1]{0} %[[add_157]], u32[1]{0} %[[xor_165]])
// CHECK-NEXT:  %[[constant_167:[^ ]+]] = u32[] constant(29)
// CHECK-NEXT:  %[[broadcast_168:[^ ]+]] = u32[1]{0} broadcast(u32[] %[[constant_167]]), dimensions={}
// CHECK-NEXT:  %[[shift_left_169:[^ ]+]] = u32[1]{0} shift-left(u32[1]{0} %[[xor_165]], u32[1]{0} %[[broadcast_168]])
// CHECK-NEXT:  %[[constant_170:[^ ]+]] = u32[] constant(3)
// CHECK-NEXT:  %[[broadcast_171:[^ ]+]] = u32[1]{0} broadcast(u32[] %[[constant_170]]), dimensions={}
// CHECK-NEXT:  %[[shift_right_logical_172:[^ ]+]] = u32[1]{0} shift-right-logical(u32[1]{0} %[[xor_165]], u32[1]{0} %[[broadcast_171]])
// CHECK-NEXT:  %[[or_173:[^ ]+]] = u32[1]{0} or(u32[1]{0} %[[shift_left_169]], u32[1]{0} %[[shift_right_logical_172]])
// CHECK-NEXT:  %[[xor_174:[^ ]+]] = u32[1]{0} xor(u32[1]{0} %[[add_166]], u32[1]{0} %[[or_173]])
// CHECK-NEXT:  %[[add_175:[^ ]+]] = u32[1]{0} add(u32[1]{0} %[[add_166]], u32[1]{0} %[[xor_174]])
// CHECK-NEXT:  %[[constant_176:[^ ]+]] = u32[] constant(16)
// CHECK-NEXT:  %[[broadcast_177:[^ ]+]] = u32[1]{0} broadcast(u32[] %[[constant_176]]), dimensions={}
// CHECK-NEXT:  %[[shift_left_178:[^ ]+]] = u32[1]{0} shift-left(u32[1]{0} %[[xor_174]], u32[1]{0} %[[broadcast_177]])
// CHECK-NEXT:  %[[constant_179:[^ ]+]] = u32[] constant(16)
// CHECK-NEXT:  %[[broadcast_180:[^ ]+]] = u32[1]{0} broadcast(u32[] %[[constant_179]]), dimensions={}
// CHECK-NEXT:  %[[shift_right_logical_181:[^ ]+]] = u32[1]{0} shift-right-logical(u32[1]{0} %[[xor_174]], u32[1]{0} %[[broadcast_180]])
// CHECK-NEXT:  %[[or_182:[^ ]+]] = u32[1]{0} or(u32[1]{0} %[[shift_left_178]], u32[1]{0} %[[shift_right_logical_181]])
// CHECK-NEXT:  %[[xor_183:[^ ]+]] = u32[1]{0} xor(u32[1]{0} %[[add_175]], u32[1]{0} %[[or_182]])
// CHECK-NEXT:  %[[add_184:[^ ]+]] = u32[1]{0} add(u32[1]{0} %[[add_175]], u32[1]{0} %[[xor_183]])
// CHECK-NEXT:  %[[broadcast_193:[^ ]+]] = u32[1]{0} broadcast(u32[] %[[bitcast_convert_20]]), dimensions={}
// CHECK-NEXT:  %[[add_194:[^ ]+]] = u32[1]{0} add(u32[1]{0} %[[add_184]], u32[1]{0} %[[broadcast_193]])
// CHECK-NEXT:  %[[constant_185:[^ ]+]] = u32[] constant(24)
// CHECK-NEXT:  %[[broadcast_186:[^ ]+]] = u32[1]{0} broadcast(u32[] %[[constant_185]]), dimensions={}
// CHECK-NEXT:  %[[shift_left_187:[^ ]+]] = u32[1]{0} shift-left(u32[1]{0} %[[xor_183]], u32[1]{0} %[[broadcast_186]])
// CHECK-NEXT:  %[[constant_188:[^ ]+]] = u32[] constant(8)
// CHECK-NEXT:  %[[broadcast_189:[^ ]+]] = u32[1]{0} broadcast(u32[] %[[constant_188]]), dimensions={}
// CHECK-NEXT:  %[[shift_right_logical_190:[^ ]+]] = u32[1]{0} shift-right-logical(u32[1]{0} %[[xor_183]], u32[1]{0} %[[broadcast_189]])
// CHECK-NEXT:  %[[or_191:[^ ]+]] = u32[1]{0} or(u32[1]{0} %[[shift_left_187]], u32[1]{0} %[[shift_right_logical_190]])
// CHECK-NEXT:  %[[xor_192:[^ ]+]] = u32[1]{0} xor(u32[1]{0} %[[add_184]], u32[1]{0} %[[or_191]])
// CHECK-NEXT:  %[[broadcast_195:[^ ]+]] = u32[1]{0} broadcast(u32[] %[[xor_23]]), dimensions={}
// CHECK-NEXT:  %[[add_196:[^ ]+]] = u32[1]{0} add(u32[1]{0} %[[xor_192]], u32[1]{0} %[[broadcast_195]])
// CHECK-NEXT:  %[[constant_197:[^ ]+]] = u32[] constant(4)
// CHECK-NEXT:  %[[broadcast_198:[^ ]+]] = u32[1]{0} broadcast(u32[] %[[constant_197]]), dimensions={}
// CHECK-NEXT:  %[[add_199:[^ ]+]] = u32[1]{0} add(u32[1]{0} %[[add_196]], u32[1]{0} %[[broadcast_198]])
// CHECK-NEXT:  %[[add_200:[^ ]+]] = u32[1]{0} add(u32[1]{0} %[[add_194]], u32[1]{0} %[[add_199]])
// CHECK-NEXT:  %[[constant_201:[^ ]+]] = u32[] constant(13)
// CHECK-NEXT:  %[[broadcast_202:[^ ]+]] = u32[1]{0} broadcast(u32[] %[[constant_201]]), dimensions={}
// CHECK-NEXT:  %[[shift_left_203:[^ ]+]] = u32[1]{0} shift-left(u32[1]{0} %[[add_199]], u32[1]{0} %[[broadcast_202]])
// CHECK-NEXT:  %[[constant_204:[^ ]+]] = u32[] constant(19)
// CHECK-NEXT:  %[[broadcast_205:[^ ]+]] = u32[1]{0} broadcast(u32[] %[[constant_204]]), dimensions={}
// CHECK-NEXT:  %[[shift_right_logical_206:[^ ]+]] = u32[1]{0} shift-right-logical(u32[1]{0} %[[add_199]], u32[1]{0} %[[broadcast_205]])
// CHECK-NEXT:  %[[or_207:[^ ]+]] = u32[1]{0} or(u32[1]{0} %[[shift_left_203]], u32[1]{0} %[[shift_right_logical_206]])
// CHECK-NEXT:  %[[xor_208:[^ ]+]] = u32[1]{0} xor(u32[1]{0} %[[add_200]], u32[1]{0} %[[or_207]])
// CHECK-NEXT:  %[[add_209:[^ ]+]] = u32[1]{0} add(u32[1]{0} %[[add_200]], u32[1]{0} %[[xor_208]])
// CHECK-NEXT:  %[[constant_210:[^ ]+]] = u32[] constant(15)
// CHECK-NEXT:  %[[broadcast_211:[^ ]+]] = u32[1]{0} broadcast(u32[] %[[constant_210]]), dimensions={}
// CHECK-NEXT:  %[[shift_left_212:[^ ]+]] = u32[1]{0} shift-left(u32[1]{0} %[[xor_208]], u32[1]{0} %[[broadcast_211]])
// CHECK-NEXT:  %[[constant_213:[^ ]+]] = u32[] constant(17)
// CHECK-NEXT:  %[[broadcast_214:[^ ]+]] = u32[1]{0} broadcast(u32[] %[[constant_213]]), dimensions={}
// CHECK-NEXT:  %[[shift_right_logical_215:[^ ]+]] = u32[1]{0} shift-right-logical(u32[1]{0} %[[xor_208]], u32[1]{0} %[[broadcast_214]])
// CHECK-NEXT:  %[[or_216:[^ ]+]] = u32[1]{0} or(u32[1]{0} %[[shift_left_212]], u32[1]{0} %[[shift_right_logical_215]])
// CHECK-NEXT:  %[[xor_217:[^ ]+]] = u32[1]{0} xor(u32[1]{0} %[[add_209]], u32[1]{0} %[[or_216]])
// CHECK-NEXT:  %[[add_218:[^ ]+]] = u32[1]{0} add(u32[1]{0} %[[add_209]], u32[1]{0} %[[xor_217]])
// CHECK-NEXT:  %[[constant_219:[^ ]+]] = u32[] constant(26)
// CHECK-NEXT:  %[[broadcast_220:[^ ]+]] = u32[1]{0} broadcast(u32[] %[[constant_219]]), dimensions={}
// CHECK-NEXT:  %[[shift_left_221:[^ ]+]] = u32[1]{0} shift-left(u32[1]{0} %[[xor_217]], u32[1]{0} %[[broadcast_220]])
// CHECK-NEXT:  %[[constant_222:[^ ]+]] = u32[] constant(6)
// CHECK-NEXT:  %[[broadcast_223:[^ ]+]] = u32[1]{0} broadcast(u32[] %[[constant_222]]), dimensions={}
// CHECK-NEXT:  %[[shift_right_logical_224:[^ ]+]] = u32[1]{0} shift-right-logical(u32[1]{0} %[[xor_217]], u32[1]{0} %[[broadcast_223]])
// CHECK-NEXT:  %[[or_225:[^ ]+]] = u32[1]{0} or(u32[1]{0} %[[shift_left_221]], u32[1]{0} %[[shift_right_logical_224]])
// CHECK-NEXT:  %[[xor_226:[^ ]+]] = u32[1]{0} xor(u32[1]{0} %[[add_218]], u32[1]{0} %[[or_225]])
// CHECK-NEXT:  %[[add_227:[^ ]+]] = u32[1]{0} add(u32[1]{0} %[[add_218]], u32[1]{0} %[[xor_226]])
// CHECK-NEXT:  %[[constant_228:[^ ]+]] = u32[] constant(6)
// CHECK-NEXT:  %[[broadcast_229:[^ ]+]] = u32[1]{0} broadcast(u32[] %[[constant_228]]), dimensions={}
// CHECK-NEXT:  %[[shift_left_230:[^ ]+]] = u32[1]{0} shift-left(u32[1]{0} %[[xor_226]], u32[1]{0} %[[broadcast_229]])
// CHECK-NEXT:  %[[constant_231:[^ ]+]] = u32[] constant(26)
// CHECK-NEXT:  %[[broadcast_232:[^ ]+]] = u32[1]{0} broadcast(u32[] %[[constant_231]]), dimensions={}
// CHECK-NEXT:  %[[shift_right_logical_233:[^ ]+]] = u32[1]{0} shift-right-logical(u32[1]{0} %[[xor_226]], u32[1]{0} %[[broadcast_232]])
// CHECK-NEXT:  %[[or_234:[^ ]+]] = u32[1]{0} or(u32[1]{0} %[[shift_left_230]], u32[1]{0} %[[shift_right_logical_233]])
// CHECK-NEXT:  %[[xor_235:[^ ]+]] = u32[1]{0} xor(u32[1]{0} %[[add_227]], u32[1]{0} %[[or_234]])
// CHECK-NEXT:  %[[broadcast_238:[^ ]+]] = u32[1]{0} broadcast(u32[] %[[bitcast_convert_19]]), dimensions={}
// CHECK-NEXT:  %[[add_239:[^ ]+]] = u32[1]{0} add(u32[1]{0} %[[xor_235]], u32[1]{0} %[[broadcast_238]])
// CHECK-NEXT:  %[[constant_240:[^ ]+]] = u32[] constant(5)
// CHECK-NEXT:  %[[broadcast_241:[^ ]+]] = u32[1]{0} broadcast(u32[] %[[constant_240]]), dimensions={}
// CHECK-NEXT:  %[[add_242:[^ ]+]] = u32[1]{0} add(u32[1]{0} %[[add_239]], u32[1]{0} %[[broadcast_241]])
// CHECK-NEXT:  %[[reshape_244:[^ ]+]] = u64[1]{0} reshape(u64[] %[[reshape_3]])
// CHECK-NEXT:  %[[constant_7:[^ ]+]] = u64[] constant(1)
// CHECK-NEXT:  %[[broadcast_8:[^ ]+]] = u64[1]{0} broadcast(u64[] %[[constant_7]]), dimensions={}
// CHECK-NEXT:  %[[add_9:[^ ]+]] = u64[1]{0} add(u64[1]{0} %[[slice_4]], u64[1]{0} %[[broadcast_8]])
// CHECK-NEXT:  %[[concatenate_245:[^ ]+]] = u64[2]{0} concatenate(u64[1]{0} %[[reshape_244]], u64[1]{0} %[[add_9]]), dimensions={0}
// CHECK-NEXT:  %[[broadcast_236:[^ ]+]] = u32[1]{0} broadcast(u32[] %[[xor_23]]), dimensions={}
// CHECK-NEXT:  %[[add_237:[^ ]+]] = u32[1]{0} add(u32[1]{0} %[[add_227]], u32[1]{0} %[[broadcast_236]])
// CHECK-NEXT:  %[[reshape_243:[^ ]+]] = u32[] reshape(u32[1]{0} %[[add_237]])
// CHECK-NEXT:  ROOT %[[tuple_246:[^ ]+]] = (u64[2]{0}, u32[]) tuple(u64[2]{0} %[[concatenate_245]], u32[] %[[reshape_243]])

// CHECK-LABEL: ENTRY %test_three_fry
// CHECK-NEXT:  %[[initial_state:[^ ]+]] = u64[4]{0} constant({9, 10, 11, 12})
// CHECK-NEXT:  ROOT %[[call:[^ ]+]] = (u64[4]{0}, u32[]) call(u64[4]{0} %[[initial_state]]), to_apply=%[[$rng_247]]

HloModule TestThreeFryAlgorithm

ENTRY test_three_fry {
  initial_state = u64[4] constant({9, 10, 11, 12})
  ROOT result = (u64[4], u32[]) rng-bit-generator(initial_state), algorithm=rng_three_fry
}

// -----

// CHECK-LABEL: HloModule TestPhiloxAlgorithm, entry_computation_layout={()->(u64[6]{0}, u32[])}

// CHECK:       %[[$rng_353:[^ ]+]]
// CHECK-NEXT:  %[[state_1:[^ ]+]] = u64[6]{0} parameter(0)
// CHECK-NEXT:  %[[slice_2:[^ ]+]] = u64[1]{0} slice(u64[6]{0} %[[state_1]]), slice={[0:1]}
// CHECK-NEXT:  %[[reshape_3:[^ ]+]] = u64[] reshape(u64[1]{0} %[[slice_2]])
// CHECK-NEXT:  %[[convert_6:[^ ]+]] = u32[] convert(u64[] %[[reshape_3]])
// CHECK-NEXT:  %[[constant_86:[^ ]+]] = u32[] constant(2654435769)
// CHECK-NEXT:  %[[add_87:[^ ]+]] = u32[] add(u32[] %[[convert_6]], u32[] %[[constant_86]])
// CHECK-NEXT:  %[[constant_114:[^ ]+]] = u32[] constant(2654435769)
// CHECK-NEXT:  %[[add_115:[^ ]+]] = u32[] add(u32[] %[[add_87]], u32[] %[[constant_114]])
// CHECK-NEXT:  %[[constant_142:[^ ]+]] = u32[] constant(2654435769)
// CHECK-NEXT:  %[[add_143:[^ ]+]] = u32[] add(u32[] %[[add_115]], u32[] %[[constant_142]])
// CHECK-NEXT:  %[[constant_170:[^ ]+]] = u32[] constant(2654435769)
// CHECK-NEXT:  %[[add_171:[^ ]+]] = u32[] add(u32[] %[[add_143]], u32[] %[[constant_170]])
// CHECK-NEXT:  %[[constant_198:[^ ]+]] = u32[] constant(2654435769)
// CHECK-NEXT:  %[[add_199:[^ ]+]] = u32[] add(u32[] %[[add_171]], u32[] %[[constant_198]])
// CHECK-NEXT:  %[[constant_226:[^ ]+]] = u32[] constant(2654435769)
// CHECK-NEXT:  %[[add_227:[^ ]+]] = u32[] add(u32[] %[[add_199]], u32[] %[[constant_226]])
// CHECK-NEXT:  %[[constant_254:[^ ]+]] = u32[] constant(2654435769)
// CHECK-NEXT:  %[[add_255:[^ ]+]] = u32[] add(u32[] %[[add_227]], u32[] %[[constant_254]])
// CHECK-NEXT:  %[[constant_282:[^ ]+]] = u32[] constant(2654435769)
// CHECK-NEXT:  %[[add_283:[^ ]+]] = u32[] add(u32[] %[[add_255]], u32[] %[[constant_282]])
// CHECK-NEXT:  %[[constant_310:[^ ]+]] = u32[] constant(2654435769)
// CHECK-NEXT:  %[[add_311:[^ ]+]] = u32[] add(u32[] %[[add_283]], u32[] %[[constant_310]])
// CHECK-NEXT:  %[[constant_338:[^ ]+]] = u32[] constant(2654435769)
// CHECK-NEXT:  %[[add_339:[^ ]+]] = u32[] add(u32[] %[[add_311]], u32[] %[[constant_338]])
// CHECK-NEXT:  %[[constant_5:[^ ]+]] = u64[] constant(32)
// CHECK-NEXT:  %[[shift_right_logical_7:[^ ]+]] = u64[] shift-right-logical(u64[] %[[reshape_3]], u64[] %[[constant_5]])
// CHECK-NEXT:  %[[convert_8:[^ ]+]] = u32[] convert(u64[] %[[shift_right_logical_7]])
// CHECK-NEXT:  %[[constant_88:[^ ]+]] = u32[] constant(3144134277)
// CHECK-NEXT:  %[[add_89:[^ ]+]] = u32[] add(u32[] %[[convert_8]], u32[] %[[constant_88]])
// CHECK-NEXT:  %[[constant_116:[^ ]+]] = u32[] constant(3144134277)
// CHECK-NEXT:  %[[add_117:[^ ]+]] = u32[] add(u32[] %[[add_89]], u32[] %[[constant_116]])
// CHECK-NEXT:  %[[constant_144:[^ ]+]] = u32[] constant(3144134277)
// CHECK-NEXT:  %[[add_145:[^ ]+]] = u32[] add(u32[] %[[add_117]], u32[] %[[constant_144]])
// CHECK-NEXT:  %[[constant_172:[^ ]+]] = u32[] constant(3144134277)
// CHECK-NEXT:  %[[add_173:[^ ]+]] = u32[] add(u32[] %[[add_145]], u32[] %[[constant_172]])
// CHECK-NEXT:  %[[constant_200:[^ ]+]] = u32[] constant(3144134277)
// CHECK-NEXT:  %[[add_201:[^ ]+]] = u32[] add(u32[] %[[add_173]], u32[] %[[constant_200]])
// CHECK-NEXT:  %[[constant_228:[^ ]+]] = u32[] constant(3144134277)
// CHECK-NEXT:  %[[add_229:[^ ]+]] = u32[] add(u32[] %[[add_201]], u32[] %[[constant_228]])
// CHECK-NEXT:  %[[constant_256:[^ ]+]] = u32[] constant(3144134277)
// CHECK-NEXT:  %[[add_257:[^ ]+]] = u32[] add(u32[] %[[add_229]], u32[] %[[constant_256]])
// CHECK-NEXT:  %[[constant_284:[^ ]+]] = u32[] constant(3144134277)
// CHECK-NEXT:  %[[add_285:[^ ]+]] = u32[] add(u32[] %[[add_257]], u32[] %[[constant_284]])
// CHECK-NEXT:  %[[constant_312:[^ ]+]] = u32[] constant(3144134277)
// CHECK-NEXT:  %[[add_313:[^ ]+]] = u32[] add(u32[] %[[add_285]], u32[] %[[constant_312]])
// CHECK-NEXT:  %[[constant_340:[^ ]+]] = u32[] constant(3144134277)
// CHECK-NEXT:  %[[add_341:[^ ]+]] = u32[] add(u32[] %[[add_313]], u32[] %[[constant_340]])
// CHECK-NEXT:  %[[reshape_350:[^ ]+]] = u64[1]{0} reshape(u64[] %[[reshape_3]])
// CHECK-NEXT:  %[[slice_4:[^ ]+]] = u64[2]{0} slice(u64[6]{0} %[[state_1]]), slice={[1:3]}
// CHECK-NEXT:  %[[slice_9:[^ ]+]] = u64[1]{0} slice(u64[2]{0} %[[slice_4]]), slice={[0:1]}
// CHECK-NEXT:  %[[reshape_10:[^ ]+]] = u64[] reshape(u64[1]{0} %[[slice_9]])
// CHECK-NEXT:  %[[convert_14:[^ ]+]] = u32[] convert(u64[] %[[reshape_10]])
// CHECK-NEXT:  %[[convert_22:[^ ]+]] = u64[] convert(u32[] %[[convert_14]])
// CHECK-NEXT:  %[[constant_13:[^ ]+]] = u64[] constant(32)
// CHECK-NEXT:  %[[shift_right_logical_15:[^ ]+]] = u64[] shift-right-logical(u64[] %[[reshape_10]], u64[] %[[constant_13]])
// CHECK-NEXT:  %[[convert_16:[^ ]+]] = u32[] convert(u64[] %[[shift_right_logical_15]])
// CHECK-NEXT:  %[[convert_23:[^ ]+]] = u64[] convert(u32[] %[[convert_16]])
// CHECK-NEXT:  %[[constant_24:[^ ]+]] = u64[] constant(32)
// CHECK-NEXT:  %[[shift_left_25:[^ ]+]] = u64[] shift-left(u64[] %[[convert_23]], u64[] %[[constant_24]])
// CHECK-NEXT:  %[[or_26:[^ ]+]] = u64[] or(u64[] %[[convert_22]], u64[] %[[shift_left_25]])
// CHECK-NEXT:  %[[constant_51:[^ ]+]] = u64[] constant(1)
// CHECK-NEXT:  %[[add_52:[^ ]+]] = u64[] add(u64[] %[[or_26]], u64[] %[[constant_51]])
// CHECK-NEXT:  %[[reshape_59:[^ ]+]] = u64[1]{0} reshape(u64[] %[[add_52]])
// CHECK-NEXT:  %[[compare_54:[^ ]+]] = pred[] compare(u64[] %[[add_52]], u64[] %[[or_26]]), direction=LT
// CHECK-NEXT:  %[[slice_11:[^ ]+]] = u64[1]{0} slice(u64[2]{0} %[[slice_4]]), slice={[1:2]}
// CHECK-NEXT:  %[[reshape_12:[^ ]+]] = u64[] reshape(u64[1]{0} %[[slice_11]])
// CHECK-NEXT:  %[[convert_18:[^ ]+]] = u32[] convert(u64[] %[[reshape_12]])
// CHECK-NEXT:  %[[convert_27:[^ ]+]] = u64[] convert(u32[] %[[convert_18]])
// CHECK-NEXT:  %[[constant_17:[^ ]+]] = u64[] constant(32)
// CHECK-NEXT:  %[[shift_right_logical_19:[^ ]+]] = u64[] shift-right-logical(u64[] %[[reshape_12]], u64[] %[[constant_17]])
// CHECK-NEXT:  %[[convert_20:[^ ]+]] = u32[] convert(u64[] %[[shift_right_logical_19]])
// CHECK-NEXT:  %[[convert_28:[^ ]+]] = u64[] convert(u32[] %[[convert_20]])
// CHECK-NEXT:  %[[constant_29:[^ ]+]] = u64[] constant(32)
// CHECK-NEXT:  %[[shift_left_30:[^ ]+]] = u64[] shift-left(u64[] %[[convert_28]], u64[] %[[constant_29]])
// CHECK-NEXT:  %[[or_31:[^ ]+]] = u64[] or(u64[] %[[convert_27]], u64[] %[[shift_left_30]])
// CHECK-NEXT:  %[[constant_53:[^ ]+]] = u64[] constant(1)
// CHECK-NEXT:  %[[add_55:[^ ]+]] = u64[] add(u64[] %[[or_31]], u64[] %[[constant_53]])
// CHECK-NEXT:  %[[broadcast_56:[^ ]+]] = u64[] broadcast(u64[] %[[add_55]]), dimensions={}
// CHECK-NEXT:  %[[broadcast_57:[^ ]+]] = u64[] broadcast(u64[] %[[or_31]]), dimensions={}
// CHECK-NEXT:  %[[select_58:[^ ]+]] = u64[] select(pred[] %[[compare_54]], u64[] %[[broadcast_56]], u64[] %[[broadcast_57]])
// CHECK-NEXT:  %[[reshape_60:[^ ]+]] = u64[1]{0} reshape(u64[] %[[select_58]])
// CHECK-NEXT:  %[[concatenate_61:[^ ]+]] = u64[2]{0} concatenate(u64[1]{0} %[[reshape_59]], u64[1]{0} %[[reshape_60]]), dimensions={0}
// CHECK-NEXT:  %[[concatenate_351:[^ ]+]] = u64[3]{0} concatenate(u64[1]{0} %[[reshape_350]], u64[2]{0} %[[concatenate_61]]), dimensions={0}
// CHECK-NEXT:  %[[broadcast_32:[^ ]+]] = u64[1]{0} broadcast(u64[] %[[or_26]]), dimensions={}
// CHECK-NEXT:  %[[iota_21:[^ ]+]] = u64[1]{0} iota(), iota_dimension=0
// CHECK-NEXT:  %[[add_33:[^ ]+]] = u64[1]{0} add(u64[1]{0} %[[broadcast_32]], u64[1]{0} %[[iota_21]])
// CHECK-NEXT:  %[[convert_42:[^ ]+]] = u32[1]{0} convert(u64[1]{0} %[[add_33]])
// CHECK-NEXT:  %[[convert_62:[^ ]+]] = u64[1]{0} convert(u32[1]{0} %[[convert_42]])
// CHECK-NEXT:  %[[constant_63:[^ ]+]] = u64[] constant(3528531795)
// CHECK-NEXT:  %[[broadcast_64:[^ ]+]] = u64[1]{0} broadcast(u64[] %[[constant_63]]), dimensions={}
// CHECK-NEXT:  %[[multiply_65:[^ ]+]] = u64[1]{0} multiply(u64[1]{0} %[[convert_62]], u64[1]{0} %[[broadcast_64]])
// CHECK-NEXT:  %[[constant_67:[^ ]+]] = u64[] constant(32)
// CHECK-NEXT:  %[[broadcast_68:[^ ]+]] = u64[1]{0} broadcast(u64[] %[[constant_67]]), dimensions={}
// CHECK-NEXT:  %[[shift_right_logical_69:[^ ]+]] = u64[1]{0} shift-right-logical(u64[1]{0} %[[multiply_65]], u64[1]{0} %[[broadcast_68]])
// CHECK-NEXT:  %[[convert_70:[^ ]+]] = u32[1]{0} convert(u64[1]{0} %[[shift_right_logical_69]])
// CHECK-NEXT:  %[[broadcast_35:[^ ]+]] = u64[1]{0} broadcast(u64[] %[[or_26]]), dimensions={}
// CHECK-NEXT:  %[[compare_36:[^ ]+]] = pred[1]{0} compare(u64[1]{0} %[[add_33]], u64[1]{0} %[[broadcast_35]]), direction=LT
// CHECK-NEXT:  %[[constant_34:[^ ]+]] = u64[] constant(1)
// CHECK-NEXT:  %[[add_37:[^ ]+]] = u64[] add(u64[] %[[or_31]], u64[] %[[constant_34]])
// CHECK-NEXT:  %[[broadcast_38:[^ ]+]] = u64[1]{0} broadcast(u64[] %[[add_37]]), dimensions={}
// CHECK-NEXT:  %[[broadcast_39:[^ ]+]] = u64[1]{0} broadcast(u64[] %[[or_31]]), dimensions={}
// CHECK-NEXT:  %[[select_40:[^ ]+]] = u64[1]{0} select(pred[1]{0} %[[compare_36]], u64[1]{0} %[[broadcast_38]], u64[1]{0} %[[broadcast_39]])
// CHECK-NEXT:  %[[constant_46:[^ ]+]] = u64[] constant(32)
// CHECK-NEXT:  %[[broadcast_48:[^ ]+]] = u64[1]{0} broadcast(u64[] %[[constant_46]]), dimensions={}
// CHECK-NEXT:  %[[shift_right_logical_49:[^ ]+]] = u64[1]{0} shift-right-logical(u64[1]{0} %[[select_40]], u64[1]{0} %[[broadcast_48]])
// CHECK-NEXT:  %[[convert_50:[^ ]+]] = u32[1]{0} convert(u64[1]{0} %[[shift_right_logical_49]])
// CHECK-NEXT:  %[[xor_83:[^ ]+]] = u32[1]{0} xor(u32[1]{0} %[[convert_70]], u32[1]{0} %[[convert_50]])
// CHECK-NEXT:  %[[broadcast_84:[^ ]+]] = u32[1]{0} broadcast(u32[] %[[convert_8]]), dimensions={}
// CHECK-NEXT:  %[[xor_85:[^ ]+]] = u32[1]{0} xor(u32[1]{0} %[[xor_83]], u32[1]{0} %[[broadcast_84]])
// CHECK-NEXT:  %[[convert_99:[^ ]+]] = u64[1]{0} convert(u32[1]{0} %[[xor_85]])
// CHECK-NEXT:  %[[constant_100:[^ ]+]] = u64[] constant(3449720151)
// CHECK-NEXT:  %[[broadcast_101:[^ ]+]] = u64[1]{0} broadcast(u64[] %[[constant_100]]), dimensions={}
// CHECK-NEXT:  %[[multiply_102:[^ ]+]] = u64[1]{0} multiply(u64[1]{0} %[[convert_99]], u64[1]{0} %[[broadcast_101]])
// CHECK-NEXT:  %[[constant_104:[^ ]+]] = u64[] constant(32)
// CHECK-NEXT:  %[[broadcast_105:[^ ]+]] = u64[1]{0} broadcast(u64[] %[[constant_104]]), dimensions={}
// CHECK-NEXT:  %[[shift_right_logical_106:[^ ]+]] = u64[1]{0} shift-right-logical(u64[1]{0} %[[multiply_102]], u64[1]{0} %[[broadcast_105]])
// CHECK-NEXT:  %[[convert_107:[^ ]+]] = u32[1]{0} convert(u64[1]{0} %[[shift_right_logical_106]])
// CHECK-NEXT:  %[[convert_47:[^ ]+]] = u32[1]{0} convert(u64[1]{0} %[[select_40]])
// CHECK-NEXT:  %[[convert_71:[^ ]+]] = u64[1]{0} convert(u32[1]{0} %[[convert_47]])
// CHECK-NEXT:  %[[constant_72:[^ ]+]] = u64[] constant(3449720151)
// CHECK-NEXT:  %[[broadcast_73:[^ ]+]] = u64[1]{0} broadcast(u64[] %[[constant_72]]), dimensions={}
// CHECK-NEXT:  %[[multiply_74:[^ ]+]] = u64[1]{0} multiply(u64[1]{0} %[[convert_71]], u64[1]{0} %[[broadcast_73]])
// CHECK-NEXT:  %[[convert_75:[^ ]+]] = u32[1]{0} convert(u64[1]{0} %[[multiply_74]])
// CHECK-NEXT:  %[[xor_108:[^ ]+]] = u32[1]{0} xor(u32[1]{0} %[[convert_107]], u32[1]{0} %[[convert_75]])
// CHECK-NEXT:  %[[broadcast_109:[^ ]+]] = u32[1]{0} broadcast(u32[] %[[add_87]]), dimensions={}
// CHECK-NEXT:  %[[xor_110:[^ ]+]] = u32[1]{0} xor(u32[1]{0} %[[xor_108]], u32[1]{0} %[[broadcast_109]])
// CHECK-NEXT:  %[[convert_118:[^ ]+]] = u64[1]{0} convert(u32[1]{0} %[[xor_110]])
// CHECK-NEXT:  %[[constant_119:[^ ]+]] = u64[] constant(3528531795)
// CHECK-NEXT:  %[[broadcast_120:[^ ]+]] = u64[1]{0} broadcast(u64[] %[[constant_119]]), dimensions={}
// CHECK-NEXT:  %[[multiply_121:[^ ]+]] = u64[1]{0} multiply(u64[1]{0} %[[convert_118]], u64[1]{0} %[[broadcast_120]])
// CHECK-NEXT:  %[[constant_123:[^ ]+]] = u64[] constant(32)
// CHECK-NEXT:  %[[broadcast_124:[^ ]+]] = u64[1]{0} broadcast(u64[] %[[constant_123]]), dimensions={}
// CHECK-NEXT:  %[[shift_right_logical_125:[^ ]+]] = u64[1]{0} shift-right-logical(u64[1]{0} %[[multiply_121]], u64[1]{0} %[[broadcast_124]])
// CHECK-NEXT:  %[[convert_126:[^ ]+]] = u32[1]{0} convert(u64[1]{0} %[[shift_right_logical_125]])
// CHECK-NEXT:  %[[constant_76:[^ ]+]] = u64[] constant(32)
// CHECK-NEXT:  %[[broadcast_77:[^ ]+]] = u64[1]{0} broadcast(u64[] %[[constant_76]]), dimensions={}
// CHECK-NEXT:  %[[shift_right_logical_78:[^ ]+]] = u64[1]{0} shift-right-logical(u64[1]{0} %[[multiply_74]], u64[1]{0} %[[broadcast_77]])
// CHECK-NEXT:  %[[convert_79:[^ ]+]] = u32[1]{0} convert(u64[1]{0} %[[shift_right_logical_78]])
// CHECK-NEXT:  %[[constant_41:[^ ]+]] = u64[] constant(32)
// CHECK-NEXT:  %[[broadcast_43:[^ ]+]] = u64[1]{0} broadcast(u64[] %[[constant_41]]), dimensions={}
// CHECK-NEXT:  %[[shift_right_logical_44:[^ ]+]] = u64[1]{0} shift-right-logical(u64[1]{0} %[[add_33]], u64[1]{0} %[[broadcast_43]])
// CHECK-NEXT:  %[[convert_45:[^ ]+]] = u32[1]{0} convert(u64[1]{0} %[[shift_right_logical_44]])
// CHECK-NEXT:  %[[xor_80:[^ ]+]] = u32[1]{0} xor(u32[1]{0} %[[convert_79]], u32[1]{0} %[[convert_45]])
// CHECK-NEXT:  %[[broadcast_81:[^ ]+]] = u32[1]{0} broadcast(u32[] %[[convert_6]]), dimensions={}
// CHECK-NEXT:  %[[xor_82:[^ ]+]] = u32[1]{0} xor(u32[1]{0} %[[xor_80]], u32[1]{0} %[[broadcast_81]])
// CHECK-NEXT:  %[[convert_90:[^ ]+]] = u64[1]{0} convert(u32[1]{0} %[[xor_82]])
// CHECK-NEXT:  %[[constant_91:[^ ]+]] = u64[] constant(3528531795)
// CHECK-NEXT:  %[[broadcast_92:[^ ]+]] = u64[1]{0} broadcast(u64[] %[[constant_91]]), dimensions={}
// CHECK-NEXT:  %[[multiply_93:[^ ]+]] = u64[1]{0} multiply(u64[1]{0} %[[convert_90]], u64[1]{0} %[[broadcast_92]])
// CHECK-NEXT:  %[[convert_94:[^ ]+]] = u32[1]{0} convert(u64[1]{0} %[[multiply_93]])
// CHECK-NEXT:  %[[xor_139:[^ ]+]] = u32[1]{0} xor(u32[1]{0} %[[convert_126]], u32[1]{0} %[[convert_94]])
// CHECK-NEXT:  %[[broadcast_140:[^ ]+]] = u32[1]{0} broadcast(u32[] %[[add_117]]), dimensions={}
// CHECK-NEXT:  %[[xor_141:[^ ]+]] = u32[1]{0} xor(u32[1]{0} %[[xor_139]], u32[1]{0} %[[broadcast_140]])
// CHECK-NEXT:  %[[convert_155:[^ ]+]] = u64[1]{0} convert(u32[1]{0} %[[xor_141]])
// CHECK-NEXT:  %[[constant_156:[^ ]+]] = u64[] constant(3449720151)
// CHECK-NEXT:  %[[broadcast_157:[^ ]+]] = u64[1]{0} broadcast(u64[] %[[constant_156]]), dimensions={}
// CHECK-NEXT:  %[[multiply_158:[^ ]+]] = u64[1]{0} multiply(u64[1]{0} %[[convert_155]], u64[1]{0} %[[broadcast_157]])
// CHECK-NEXT:  %[[constant_160:[^ ]+]] = u64[] constant(32)
// CHECK-NEXT:  %[[broadcast_161:[^ ]+]] = u64[1]{0} broadcast(u64[] %[[constant_160]]), dimensions={}
// CHECK-NEXT:  %[[shift_right_logical_162:[^ ]+]] = u64[1]{0} shift-right-logical(u64[1]{0} %[[multiply_158]], u64[1]{0} %[[broadcast_161]])
// CHECK-NEXT:  %[[convert_163:[^ ]+]] = u32[1]{0} convert(u64[1]{0} %[[shift_right_logical_162]])
// CHECK-NEXT:  %[[constant_95:[^ ]+]] = u64[] constant(32)
// CHECK-NEXT:  %[[broadcast_96:[^ ]+]] = u64[1]{0} broadcast(u64[] %[[constant_95]]), dimensions={}
// CHECK-NEXT:  %[[shift_right_logical_97:[^ ]+]] = u64[1]{0} shift-right-logical(u64[1]{0} %[[multiply_93]], u64[1]{0} %[[broadcast_96]])
// CHECK-NEXT:  %[[convert_98:[^ ]+]] = u32[1]{0} convert(u64[1]{0} %[[shift_right_logical_97]])
// CHECK-NEXT:  %[[convert_66:[^ ]+]] = u32[1]{0} convert(u64[1]{0} %[[multiply_65]])
// CHECK-NEXT:  %[[xor_111:[^ ]+]] = u32[1]{0} xor(u32[1]{0} %[[convert_98]], u32[1]{0} %[[convert_66]])
// CHECK-NEXT:  %[[broadcast_112:[^ ]+]] = u32[1]{0} broadcast(u32[] %[[add_89]]), dimensions={}
// CHECK-NEXT:  %[[xor_113:[^ ]+]] = u32[1]{0} xor(u32[1]{0} %[[xor_111]], u32[1]{0} %[[broadcast_112]])
// CHECK-NEXT:  %[[convert_127:[^ ]+]] = u64[1]{0} convert(u32[1]{0} %[[xor_113]])
// CHECK-NEXT:  %[[constant_128:[^ ]+]] = u64[] constant(3449720151)
// CHECK-NEXT:  %[[broadcast_129:[^ ]+]] = u64[1]{0} broadcast(u64[] %[[constant_128]]), dimensions={}
// CHECK-NEXT:  %[[multiply_130:[^ ]+]] = u64[1]{0} multiply(u64[1]{0} %[[convert_127]], u64[1]{0} %[[broadcast_129]])
// CHECK-NEXT:  %[[convert_131:[^ ]+]] = u32[1]{0} convert(u64[1]{0} %[[multiply_130]])
// CHECK-NEXT:  %[[xor_164:[^ ]+]] = u32[1]{0} xor(u32[1]{0} %[[convert_163]], u32[1]{0} %[[convert_131]])
// CHECK-NEXT:  %[[broadcast_165:[^ ]+]] = u32[1]{0} broadcast(u32[] %[[add_143]]), dimensions={}
// CHECK-NEXT:  %[[xor_166:[^ ]+]] = u32[1]{0} xor(u32[1]{0} %[[xor_164]], u32[1]{0} %[[broadcast_165]])
// CHECK-NEXT:  %[[convert_174:[^ ]+]] = u64[1]{0} convert(u32[1]{0} %[[xor_166]])
// CHECK-NEXT:  %[[constant_175:[^ ]+]] = u64[] constant(3528531795)
// CHECK-NEXT:  %[[broadcast_176:[^ ]+]] = u64[1]{0} broadcast(u64[] %[[constant_175]]), dimensions={}
// CHECK-NEXT:  %[[multiply_177:[^ ]+]] = u64[1]{0} multiply(u64[1]{0} %[[convert_174]], u64[1]{0} %[[broadcast_176]])
// CHECK-NEXT:  %[[constant_179:[^ ]+]] = u64[] constant(32)
// CHECK-NEXT:  %[[broadcast_180:[^ ]+]] = u64[1]{0} broadcast(u64[] %[[constant_179]]), dimensions={}
// CHECK-NEXT:  %[[shift_right_logical_181:[^ ]+]] = u64[1]{0} shift-right-logical(u64[1]{0} %[[multiply_177]], u64[1]{0} %[[broadcast_180]])
// CHECK-NEXT:  %[[convert_182:[^ ]+]] = u32[1]{0} convert(u64[1]{0} %[[shift_right_logical_181]])
// CHECK-NEXT:  %[[constant_132:[^ ]+]] = u64[] constant(32)
// CHECK-NEXT:  %[[broadcast_133:[^ ]+]] = u64[1]{0} broadcast(u64[] %[[constant_132]]), dimensions={}
// CHECK-NEXT:  %[[shift_right_logical_134:[^ ]+]] = u64[1]{0} shift-right-logical(u64[1]{0} %[[multiply_130]], u64[1]{0} %[[broadcast_133]])
// CHECK-NEXT:  %[[convert_135:[^ ]+]] = u32[1]{0} convert(u64[1]{0} %[[shift_right_logical_134]])
// CHECK-NEXT:  %[[convert_103:[^ ]+]] = u32[1]{0} convert(u64[1]{0} %[[multiply_102]])
// CHECK-NEXT:  %[[xor_136:[^ ]+]] = u32[1]{0} xor(u32[1]{0} %[[convert_135]], u32[1]{0} %[[convert_103]])
// CHECK-NEXT:  %[[broadcast_137:[^ ]+]] = u32[1]{0} broadcast(u32[] %[[add_115]]), dimensions={}
// CHECK-NEXT:  %[[xor_138:[^ ]+]] = u32[1]{0} xor(u32[1]{0} %[[xor_136]], u32[1]{0} %[[broadcast_137]])
// CHECK-NEXT:  %[[convert_146:[^ ]+]] = u64[1]{0} convert(u32[1]{0} %[[xor_138]])
// CHECK-NEXT:  %[[constant_147:[^ ]+]] = u64[] constant(3528531795)
// CHECK-NEXT:  %[[broadcast_148:[^ ]+]] = u64[1]{0} broadcast(u64[] %[[constant_147]]), dimensions={}
// CHECK-NEXT:  %[[multiply_149:[^ ]+]] = u64[1]{0} multiply(u64[1]{0} %[[convert_146]], u64[1]{0} %[[broadcast_148]])
// CHECK-NEXT:  %[[convert_150:[^ ]+]] = u32[1]{0} convert(u64[1]{0} %[[multiply_149]])
// CHECK-NEXT:  %[[xor_195:[^ ]+]] = u32[1]{0} xor(u32[1]{0} %[[convert_182]], u32[1]{0} %[[convert_150]])
// CHECK-NEXT:  %[[broadcast_196:[^ ]+]] = u32[1]{0} broadcast(u32[] %[[add_173]]), dimensions={}
// CHECK-NEXT:  %[[xor_197:[^ ]+]] = u32[1]{0} xor(u32[1]{0} %[[xor_195]], u32[1]{0} %[[broadcast_196]])
// CHECK-NEXT:  %[[convert_211:[^ ]+]] = u64[1]{0} convert(u32[1]{0} %[[xor_197]])
// CHECK-NEXT:  %[[constant_212:[^ ]+]] = u64[] constant(3449720151)
// CHECK-NEXT:  %[[broadcast_213:[^ ]+]] = u64[1]{0} broadcast(u64[] %[[constant_212]]), dimensions={}
// CHECK-NEXT:  %[[multiply_214:[^ ]+]] = u64[1]{0} multiply(u64[1]{0} %[[convert_211]], u64[1]{0} %[[broadcast_213]])
// CHECK-NEXT:  %[[constant_216:[^ ]+]] = u64[] constant(32)
// CHECK-NEXT:  %[[broadcast_217:[^ ]+]] = u64[1]{0} broadcast(u64[] %[[constant_216]]), dimensions={}
// CHECK-NEXT:  %[[shift_right_logical_218:[^ ]+]] = u64[1]{0} shift-right-logical(u64[1]{0} %[[multiply_214]], u64[1]{0} %[[broadcast_217]])
// CHECK-NEXT:  %[[convert_219:[^ ]+]] = u32[1]{0} convert(u64[1]{0} %[[shift_right_logical_218]])
// CHECK-NEXT:  %[[constant_151:[^ ]+]] = u64[] constant(32)
// CHECK-NEXT:  %[[broadcast_152:[^ ]+]] = u64[1]{0} broadcast(u64[] %[[constant_151]]), dimensions={}
// CHECK-NEXT:  %[[shift_right_logical_153:[^ ]+]] = u64[1]{0} shift-right-logical(u64[1]{0} %[[multiply_149]], u64[1]{0} %[[broadcast_152]])
// CHECK-NEXT:  %[[convert_154:[^ ]+]] = u32[1]{0} convert(u64[1]{0} %[[shift_right_logical_153]])
// CHECK-NEXT:  %[[convert_122:[^ ]+]] = u32[1]{0} convert(u64[1]{0} %[[multiply_121]])
// CHECK-NEXT:  %[[xor_167:[^ ]+]] = u32[1]{0} xor(u32[1]{0} %[[convert_154]], u32[1]{0} %[[convert_122]])
// CHECK-NEXT:  %[[broadcast_168:[^ ]+]] = u32[1]{0} broadcast(u32[] %[[add_145]]), dimensions={}
// CHECK-NEXT:  %[[xor_169:[^ ]+]] = u32[1]{0} xor(u32[1]{0} %[[xor_167]], u32[1]{0} %[[broadcast_168]])
// CHECK-NEXT:  %[[convert_183:[^ ]+]] = u64[1]{0} convert(u32[1]{0} %[[xor_169]])
// CHECK-NEXT:  %[[constant_184:[^ ]+]] = u64[] constant(3449720151)
// CHECK-NEXT:  %[[broadcast_185:[^ ]+]] = u64[1]{0} broadcast(u64[] %[[constant_184]]), dimensions={}
// CHECK-NEXT:  %[[multiply_186:[^ ]+]] = u64[1]{0} multiply(u64[1]{0} %[[convert_183]], u64[1]{0} %[[broadcast_185]])
// CHECK-NEXT:  %[[convert_187:[^ ]+]] = u32[1]{0} convert(u64[1]{0} %[[multiply_186]])
// CHECK-NEXT:  %[[xor_220:[^ ]+]] = u32[1]{0} xor(u32[1]{0} %[[convert_219]], u32[1]{0} %[[convert_187]])
// CHECK-NEXT:  %[[broadcast_221:[^ ]+]] = u32[1]{0} broadcast(u32[] %[[add_199]]), dimensions={}
// CHECK-NEXT:  %[[xor_222:[^ ]+]] = u32[1]{0} xor(u32[1]{0} %[[xor_220]], u32[1]{0} %[[broadcast_221]])
// CHECK-NEXT:  %[[convert_230:[^ ]+]] = u64[1]{0} convert(u32[1]{0} %[[xor_222]])
// CHECK-NEXT:  %[[constant_231:[^ ]+]] = u64[] constant(3528531795)
// CHECK-NEXT:  %[[broadcast_232:[^ ]+]] = u64[1]{0} broadcast(u64[] %[[constant_231]]), dimensions={}
// CHECK-NEXT:  %[[multiply_233:[^ ]+]] = u64[1]{0} multiply(u64[1]{0} %[[convert_230]], u64[1]{0} %[[broadcast_232]])
// CHECK-NEXT:  %[[constant_235:[^ ]+]] = u64[] constant(32)
// CHECK-NEXT:  %[[broadcast_236:[^ ]+]] = u64[1]{0} broadcast(u64[] %[[constant_235]]), dimensions={}
// CHECK-NEXT:  %[[shift_right_logical_237:[^ ]+]] = u64[1]{0} shift-right-logical(u64[1]{0} %[[multiply_233]], u64[1]{0} %[[broadcast_236]])
// CHECK-NEXT:  %[[convert_238:[^ ]+]] = u32[1]{0} convert(u64[1]{0} %[[shift_right_logical_237]])
// CHECK-NEXT:  %[[constant_188:[^ ]+]] = u64[] constant(32)
// CHECK-NEXT:  %[[broadcast_189:[^ ]+]] = u64[1]{0} broadcast(u64[] %[[constant_188]]), dimensions={}
// CHECK-NEXT:  %[[shift_right_logical_190:[^ ]+]] = u64[1]{0} shift-right-logical(u64[1]{0} %[[multiply_186]], u64[1]{0} %[[broadcast_189]])
// CHECK-NEXT:  %[[convert_191:[^ ]+]] = u32[1]{0} convert(u64[1]{0} %[[shift_right_logical_190]])
// CHECK-NEXT:  %[[convert_159:[^ ]+]] = u32[1]{0} convert(u64[1]{0} %[[multiply_158]])
// CHECK-NEXT:  %[[xor_192:[^ ]+]] = u32[1]{0} xor(u32[1]{0} %[[convert_191]], u32[1]{0} %[[convert_159]])
// CHECK-NEXT:  %[[broadcast_193:[^ ]+]] = u32[1]{0} broadcast(u32[] %[[add_171]]), dimensions={}
// CHECK-NEXT:  %[[xor_194:[^ ]+]] = u32[1]{0} xor(u32[1]{0} %[[xor_192]], u32[1]{0} %[[broadcast_193]])
// CHECK-NEXT:  %[[convert_202:[^ ]+]] = u64[1]{0} convert(u32[1]{0} %[[xor_194]])
// CHECK-NEXT:  %[[constant_203:[^ ]+]] = u64[] constant(3528531795)
// CHECK-NEXT:  %[[broadcast_204:[^ ]+]] = u64[1]{0} broadcast(u64[] %[[constant_203]]), dimensions={}
// CHECK-NEXT:  %[[multiply_205:[^ ]+]] = u64[1]{0} multiply(u64[1]{0} %[[convert_202]], u64[1]{0} %[[broadcast_204]])
// CHECK-NEXT:  %[[convert_206:[^ ]+]] = u32[1]{0} convert(u64[1]{0} %[[multiply_205]])
// CHECK-NEXT:  %[[xor_251:[^ ]+]] = u32[1]{0} xor(u32[1]{0} %[[convert_238]], u32[1]{0} %[[convert_206]])
// CHECK-NEXT:  %[[broadcast_252:[^ ]+]] = u32[1]{0} broadcast(u32[] %[[add_229]]), dimensions={}
// CHECK-NEXT:  %[[xor_253:[^ ]+]] = u32[1]{0} xor(u32[1]{0} %[[xor_251]], u32[1]{0} %[[broadcast_252]])
// CHECK-NEXT:  %[[convert_267:[^ ]+]] = u64[1]{0} convert(u32[1]{0} %[[xor_253]])
// CHECK-NEXT:  %[[constant_268:[^ ]+]] = u64[] constant(3449720151)
// CHECK-NEXT:  %[[broadcast_269:[^ ]+]] = u64[1]{0} broadcast(u64[] %[[constant_268]]), dimensions={}
// CHECK-NEXT:  %[[multiply_270:[^ ]+]] = u64[1]{0} multiply(u64[1]{0} %[[convert_267]], u64[1]{0} %[[broadcast_269]])
// CHECK-NEXT:  %[[constant_272:[^ ]+]] = u64[] constant(32)
// CHECK-NEXT:  %[[broadcast_273:[^ ]+]] = u64[1]{0} broadcast(u64[] %[[constant_272]]), dimensions={}
// CHECK-NEXT:  %[[shift_right_logical_274:[^ ]+]] = u64[1]{0} shift-right-logical(u64[1]{0} %[[multiply_270]], u64[1]{0} %[[broadcast_273]])
// CHECK-NEXT:  %[[convert_275:[^ ]+]] = u32[1]{0} convert(u64[1]{0} %[[shift_right_logical_274]])
// CHECK-NEXT:  %[[constant_207:[^ ]+]] = u64[] constant(32)
// CHECK-NEXT:  %[[broadcast_208:[^ ]+]] = u64[1]{0} broadcast(u64[] %[[constant_207]]), dimensions={}
// CHECK-NEXT:  %[[shift_right_logical_209:[^ ]+]] = u64[1]{0} shift-right-logical(u64[1]{0} %[[multiply_205]], u64[1]{0} %[[broadcast_208]])
// CHECK-NEXT:  %[[convert_210:[^ ]+]] = u32[1]{0} convert(u64[1]{0} %[[shift_right_logical_209]])
// CHECK-NEXT:  %[[convert_178:[^ ]+]] = u32[1]{0} convert(u64[1]{0} %[[multiply_177]])
// CHECK-NEXT:  %[[xor_223:[^ ]+]] = u32[1]{0} xor(u32[1]{0} %[[convert_210]], u32[1]{0} %[[convert_178]])
// CHECK-NEXT:  %[[broadcast_224:[^ ]+]] = u32[1]{0} broadcast(u32[] %[[add_201]]), dimensions={}
// CHECK-NEXT:  %[[xor_225:[^ ]+]] = u32[1]{0} xor(u32[1]{0} %[[xor_223]], u32[1]{0} %[[broadcast_224]])
// CHECK-NEXT:  %[[convert_239:[^ ]+]] = u64[1]{0} convert(u32[1]{0} %[[xor_225]])
// CHECK-NEXT:  %[[constant_240:[^ ]+]] = u64[] constant(3449720151)
// CHECK-NEXT:  %[[broadcast_241:[^ ]+]] = u64[1]{0} broadcast(u64[] %[[constant_240]]), dimensions={}
// CHECK-NEXT:  %[[multiply_242:[^ ]+]] = u64[1]{0} multiply(u64[1]{0} %[[convert_239]], u64[1]{0} %[[broadcast_241]])
// CHECK-NEXT:  %[[convert_243:[^ ]+]] = u32[1]{0} convert(u64[1]{0} %[[multiply_242]])
// CHECK-NEXT:  %[[xor_276:[^ ]+]] = u32[1]{0} xor(u32[1]{0} %[[convert_275]], u32[1]{0} %[[convert_243]])
// CHECK-NEXT:  %[[broadcast_277:[^ ]+]] = u32[1]{0} broadcast(u32[] %[[add_255]]), dimensions={}
// CHECK-NEXT:  %[[xor_278:[^ ]+]] = u32[1]{0} xor(u32[1]{0} %[[xor_276]], u32[1]{0} %[[broadcast_277]])
// CHECK-NEXT:  %[[convert_286:[^ ]+]] = u64[1]{0} convert(u32[1]{0} %[[xor_278]])
// CHECK-NEXT:  %[[constant_287:[^ ]+]] = u64[] constant(3528531795)
// CHECK-NEXT:  %[[broadcast_288:[^ ]+]] = u64[1]{0} broadcast(u64[] %[[constant_287]]), dimensions={}
// CHECK-NEXT:  %[[multiply_289:[^ ]+]] = u64[1]{0} multiply(u64[1]{0} %[[convert_286]], u64[1]{0} %[[broadcast_288]])
// CHECK-NEXT:  %[[constant_291:[^ ]+]] = u64[] constant(32)
// CHECK-NEXT:  %[[broadcast_292:[^ ]+]] = u64[1]{0} broadcast(u64[] %[[constant_291]]), dimensions={}
// CHECK-NEXT:  %[[shift_right_logical_293:[^ ]+]] = u64[1]{0} shift-right-logical(u64[1]{0} %[[multiply_289]], u64[1]{0} %[[broadcast_292]])
// CHECK-NEXT:  %[[convert_294:[^ ]+]] = u32[1]{0} convert(u64[1]{0} %[[shift_right_logical_293]])
// CHECK-NEXT:  %[[constant_244:[^ ]+]] = u64[] constant(32)
// CHECK-NEXT:  %[[broadcast_245:[^ ]+]] = u64[1]{0} broadcast(u64[] %[[constant_244]]), dimensions={}
// CHECK-NEXT:  %[[shift_right_logical_246:[^ ]+]] = u64[1]{0} shift-right-logical(u64[1]{0} %[[multiply_242]], u64[1]{0} %[[broadcast_245]])
// CHECK-NEXT:  %[[convert_247:[^ ]+]] = u32[1]{0} convert(u64[1]{0} %[[shift_right_logical_246]])
// CHECK-NEXT:  %[[convert_215:[^ ]+]] = u32[1]{0} convert(u64[1]{0} %[[multiply_214]])
// CHECK-NEXT:  %[[xor_248:[^ ]+]] = u32[1]{0} xor(u32[1]{0} %[[convert_247]], u32[1]{0} %[[convert_215]])
// CHECK-NEXT:  %[[broadcast_249:[^ ]+]] = u32[1]{0} broadcast(u32[] %[[add_227]]), dimensions={}
// CHECK-NEXT:  %[[xor_250:[^ ]+]] = u32[1]{0} xor(u32[1]{0} %[[xor_248]], u32[1]{0} %[[broadcast_249]])
// CHECK-NEXT:  %[[convert_258:[^ ]+]] = u64[1]{0} convert(u32[1]{0} %[[xor_250]])
// CHECK-NEXT:  %[[constant_259:[^ ]+]] = u64[] constant(3528531795)
// CHECK-NEXT:  %[[broadcast_260:[^ ]+]] = u64[1]{0} broadcast(u64[] %[[constant_259]]), dimensions={}
// CHECK-NEXT:  %[[multiply_261:[^ ]+]] = u64[1]{0} multiply(u64[1]{0} %[[convert_258]], u64[1]{0} %[[broadcast_260]])
// CHECK-NEXT:  %[[convert_262:[^ ]+]] = u32[1]{0} convert(u64[1]{0} %[[multiply_261]])
// CHECK-NEXT:  %[[xor_307:[^ ]+]] = u32[1]{0} xor(u32[1]{0} %[[convert_294]], u32[1]{0} %[[convert_262]])
// CHECK-NEXT:  %[[broadcast_308:[^ ]+]] = u32[1]{0} broadcast(u32[] %[[add_285]]), dimensions={}
// CHECK-NEXT:  %[[xor_309:[^ ]+]] = u32[1]{0} xor(u32[1]{0} %[[xor_307]], u32[1]{0} %[[broadcast_308]])
// CHECK-NEXT:  %[[convert_323:[^ ]+]] = u64[1]{0} convert(u32[1]{0} %[[xor_309]])
// CHECK-NEXT:  %[[constant_324:[^ ]+]] = u64[] constant(3449720151)
// CHECK-NEXT:  %[[broadcast_325:[^ ]+]] = u64[1]{0} broadcast(u64[] %[[constant_324]]), dimensions={}
// CHECK-NEXT:  %[[multiply_326:[^ ]+]] = u64[1]{0} multiply(u64[1]{0} %[[convert_323]], u64[1]{0} %[[broadcast_325]])
// CHECK-NEXT:  %[[constant_328:[^ ]+]] = u64[] constant(32)
// CHECK-NEXT:  %[[broadcast_329:[^ ]+]] = u64[1]{0} broadcast(u64[] %[[constant_328]]), dimensions={}
// CHECK-NEXT:  %[[shift_right_logical_330:[^ ]+]] = u64[1]{0} shift-right-logical(u64[1]{0} %[[multiply_326]], u64[1]{0} %[[broadcast_329]])
// CHECK-NEXT:  %[[convert_331:[^ ]+]] = u32[1]{0} convert(u64[1]{0} %[[shift_right_logical_330]])
// CHECK-NEXT:  %[[constant_263:[^ ]+]] = u64[] constant(32)
// CHECK-NEXT:  %[[broadcast_264:[^ ]+]] = u64[1]{0} broadcast(u64[] %[[constant_263]]), dimensions={}
// CHECK-NEXT:  %[[shift_right_logical_265:[^ ]+]] = u64[1]{0} shift-right-logical(u64[1]{0} %[[multiply_261]], u64[1]{0} %[[broadcast_264]])
// CHECK-NEXT:  %[[convert_266:[^ ]+]] = u32[1]{0} convert(u64[1]{0} %[[shift_right_logical_265]])
// CHECK-NEXT:  %[[convert_234:[^ ]+]] = u32[1]{0} convert(u64[1]{0} %[[multiply_233]])
// CHECK-NEXT:  %[[xor_279:[^ ]+]] = u32[1]{0} xor(u32[1]{0} %[[convert_266]], u32[1]{0} %[[convert_234]])
// CHECK-NEXT:  %[[broadcast_280:[^ ]+]] = u32[1]{0} broadcast(u32[] %[[add_257]]), dimensions={}
// CHECK-NEXT:  %[[xor_281:[^ ]+]] = u32[1]{0} xor(u32[1]{0} %[[xor_279]], u32[1]{0} %[[broadcast_280]])
// CHECK-NEXT:  %[[convert_295:[^ ]+]] = u64[1]{0} convert(u32[1]{0} %[[xor_281]])
// CHECK-NEXT:  %[[constant_296:[^ ]+]] = u64[] constant(3449720151)
// CHECK-NEXT:  %[[broadcast_297:[^ ]+]] = u64[1]{0} broadcast(u64[] %[[constant_296]]), dimensions={}
// CHECK-NEXT:  %[[multiply_298:[^ ]+]] = u64[1]{0} multiply(u64[1]{0} %[[convert_295]], u64[1]{0} %[[broadcast_297]])
// CHECK-NEXT:  %[[convert_299:[^ ]+]] = u32[1]{0} convert(u64[1]{0} %[[multiply_298]])
// CHECK-NEXT:  %[[xor_332:[^ ]+]] = u32[1]{0} xor(u32[1]{0} %[[convert_331]], u32[1]{0} %[[convert_299]])
// CHECK-NEXT:  %[[broadcast_333:[^ ]+]] = u32[1]{0} broadcast(u32[] %[[add_311]]), dimensions={}
// CHECK-NEXT:  %[[xor_334:[^ ]+]] = u32[1]{0} xor(u32[1]{0} %[[xor_332]], u32[1]{0} %[[broadcast_333]])
// CHECK-NEXT:  %[[reshape_342:[^ ]+]] = u32[1,1]{1,0} reshape(u32[1]{0} %[[xor_334]])
// CHECK-NEXT:  %[[convert_327:[^ ]+]] = u32[1]{0} convert(u64[1]{0} %[[multiply_326]])
// CHECK-NEXT:  %[[reshape_343:[^ ]+]] = u32[1,1]{1,0} reshape(u32[1]{0} %[[convert_327]])
// CHECK-NEXT:  %[[constant_300:[^ ]+]] = u64[] constant(32)
// CHECK-NEXT:  %[[broadcast_301:[^ ]+]] = u64[1]{0} broadcast(u64[] %[[constant_300]]), dimensions={}
// CHECK-NEXT:  %[[shift_right_logical_302:[^ ]+]] = u64[1]{0} shift-right-logical(u64[1]{0} %[[multiply_298]], u64[1]{0} %[[broadcast_301]])
// CHECK-NEXT:  %[[convert_303:[^ ]+]] = u32[1]{0} convert(u64[1]{0} %[[shift_right_logical_302]])
// CHECK-NEXT:  %[[convert_271:[^ ]+]] = u32[1]{0} convert(u64[1]{0} %[[multiply_270]])
// CHECK-NEXT:  %[[xor_304:[^ ]+]] = u32[1]{0} xor(u32[1]{0} %[[convert_303]], u32[1]{0} %[[convert_271]])
// CHECK-NEXT:  %[[broadcast_305:[^ ]+]] = u32[1]{0} broadcast(u32[] %[[add_283]]), dimensions={}
// CHECK-NEXT:  %[[xor_306:[^ ]+]] = u32[1]{0} xor(u32[1]{0} %[[xor_304]], u32[1]{0} %[[broadcast_305]])
// CHECK-NEXT:  %[[convert_314:[^ ]+]] = u64[1]{0} convert(u32[1]{0} %[[xor_306]])
// CHECK-NEXT:  %[[constant_315:[^ ]+]] = u64[] constant(3528531795)
// CHECK-NEXT:  %[[broadcast_316:[^ ]+]] = u64[1]{0} broadcast(u64[] %[[constant_315]]), dimensions={}
// CHECK-NEXT:  %[[multiply_317:[^ ]+]] = u64[1]{0} multiply(u64[1]{0} %[[convert_314]], u64[1]{0} %[[broadcast_316]])
// CHECK-NEXT:  %[[constant_319:[^ ]+]] = u64[] constant(32)
// CHECK-NEXT:  %[[broadcast_320:[^ ]+]] = u64[1]{0} broadcast(u64[] %[[constant_319]]), dimensions={}
// CHECK-NEXT:  %[[shift_right_logical_321:[^ ]+]] = u64[1]{0} shift-right-logical(u64[1]{0} %[[multiply_317]], u64[1]{0} %[[broadcast_320]])
// CHECK-NEXT:  %[[convert_322:[^ ]+]] = u32[1]{0} convert(u64[1]{0} %[[shift_right_logical_321]])
// CHECK-NEXT:  %[[convert_290:[^ ]+]] = u32[1]{0} convert(u64[1]{0} %[[multiply_289]])
// CHECK-NEXT:  %[[xor_335:[^ ]+]] = u32[1]{0} xor(u32[1]{0} %[[convert_322]], u32[1]{0} %[[convert_290]])
// CHECK-NEXT:  %[[broadcast_336:[^ ]+]] = u32[1]{0} broadcast(u32[] %[[add_313]]), dimensions={}
// CHECK-NEXT:  %[[xor_337:[^ ]+]] = u32[1]{0} xor(u32[1]{0} %[[xor_335]], u32[1]{0} %[[broadcast_336]])
// CHECK-NEXT:  %[[reshape_344:[^ ]+]] = u32[1,1]{1,0} reshape(u32[1]{0} %[[xor_337]])
// CHECK-NEXT:  %[[convert_318:[^ ]+]] = u32[1]{0} convert(u64[1]{0} %[[multiply_317]])
// CHECK-NEXT:  %[[reshape_345:[^ ]+]] = u32[1,1]{1,0} reshape(u32[1]{0} %[[convert_318]])
// CHECK-NEXT:  %[[concatenate_346:[^ ]+]] = u32[1,4]{1,0} concatenate(u32[1,1]{1,0} %[[reshape_342]], u32[1,1]{1,0} %[[reshape_343]], u32[1,1]{1,0} %[[reshape_344]], u32[1,1]{1,0} %[[reshape_345]]), dimensions={1}
// CHECK-NEXT:  %[[reshape_347:[^ ]+]] = u32[4]{0} reshape(u32[1,4]{1,0} %[[concatenate_346]])
// CHECK-NEXT:  %[[slice_348:[^ ]+]] = u32[1]{0} slice(u32[4]{0} %[[reshape_347]]), slice={[0:1]}
// CHECK-NEXT:  %[[reshape_349:[^ ]+]] = u32[] reshape(u32[1]{0} %[[slice_348]])
// CHECK-NEXT:  ROOT %[[tuple_352:[^ ]+]] = (u64[3]{0}, u32[]) tuple(u64[3]{0} %[[concatenate_351]], u32[] %[[reshape_349]])

// CHECK-LABEL: ENTRY %test_philox
// CHECK-NEXT:  %[[initial_state:[^ ]+]] = u64[6]{0} constant({0, 1, 8, 9, 4, 1})
// CHECK-NEXT:  ROOT %[[call:[^ ]+]] = (u64[6]{0}, u32[]) call(u64[6]{0} %[[initial_state]]), to_apply=%[[$rng_353]]

HloModule TestPhiloxAlgorithm

ENTRY test_philox {
  initial_state = u64[6] constant({0, 1, 8, 9, 4, 1})
  ROOT result = (u64[6], u32[]) rng-bit-generator(initial_state), algorithm=rng_philox
}
