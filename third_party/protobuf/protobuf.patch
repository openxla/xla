diff --git a/BUILD.bazel b/BUILD.bazel
index 32b26cbdc..61f74ff50 100644
--- a/BUILD.bazel
+++ b/BUILD.bazel
@@ -431,7 +431,8 @@ proto_lang_toolchain(
         "//:cpp_features_proto",
         "//:descriptor_proto",
     ],
-    command_line = "--cpp_out=$(OUT)",
+    command_line = "--cpp_out=dllexport_decl=PROTOBUF_EXPORT:$(OUT)",
+#    command_line = "--cpp_out=$(OUT)",
     runtime = "//src/google/protobuf",
     visibility = ["//visibility:public"],
 )
diff --git a/build_defs/BUILD.bazel b/build_defs/BUILD.bazel
index 8745e1d61..efa137275 100644
--- a/build_defs/BUILD.bazel
+++ b/build_defs/BUILD.bazel
@@ -1,6 +1,7 @@
 # Internal Starlark definitions for Protobuf.
 
 load("@bazel_skylib//lib:selects.bzl", "selects")
+load("@bazel_skylib//rules:common_settings.bzl", "bool_flag")
 load("@rules_pkg//pkg:mappings.bzl", "pkg_files", "strip_prefix")
 load("//bazel:cc_proto_library.bzl", starlark_cc_proto_library = "cc_proto_library")
 load(":cc_proto_blacklist_test.bzl", "cc_proto_blacklist_test")
@@ -13,6 +14,20 @@ package(
     ],
 )
 
+bool_flag(
+    name = "use_dlls",
+    build_setting_default = False,
+    visibility = ["//visibility:public"],
+)
+
+config_setting(
+    name = "config_use_dlls",
+    flag_values = {
+        ":use_dlls": "True",
+    },
+    visibility = ["//visibility:public"],
+)
+
 create_compiler_config_setting(
     name = "config_msvc_cl",
     value = "msvc-cl",
diff --git a/python/dist/system_python.bzl b/python/dist/system_python.bzl
index 9367dd00f..d962397ce 100644
--- a/python/dist/system_python.bzl
+++ b/python/dist/system_python.bzl
@@ -73,11 +73,10 @@ load("@bazel_skylib//lib:selects.bzl", "selects")
 load("@bazel_skylib//rules:common_settings.bzl", "string_flag")
 load("@bazel_tools//tools/python:toolchain.bzl", "py_runtime_pair")
 
-cc_library(
-   name = "python_headers",
-   hdrs = glob(["python/**/*.h"], allow_empty = True),
-   includes = ["python"],
-   visibility = ["//visibility:public"],
+alias(
+    name = "python_headers",
+    actual = "@python//:python_headers",
+    visibility = ["//visibility:public"],
 )
 
 string_flag(
@@ -219,7 +218,7 @@ def _system_python_impl(repository_ctx):
     python3 = repository_ctx.which("python3")
     python_version = _get_python_version(repository_ctx)
 
-    if path and python_version[0] == "3":
+    if False:
         _populate_package(repository_ctx, path, python3, python_version)
     else:
         # buildifier: disable=print
diff --git a/python/google/protobuf/__init__.py b/python/google/protobuf/__init__.py
index 8998f3d6d..54381e7e0 100755
--- a/python/google/protobuf/__init__.py
+++ b/python/google/protobuf/__init__.py
@@ -8,3 +8,9 @@
 # Copyright 2007 Google Inc. All Rights Reserved.
 
 __version__ = '5.29.4'
+
+if __name__ != '__main__':
+  try:
+    __import__('pkg_resources').declare_namespace(__name__)
+  except ImportError:
+    __path__ = __import__('pkgutil').extend_path(__path__, __name__)
diff --git a/src/google/protobuf/BUILD.bazel b/src/google/protobuf/BUILD.bazel
index 5cfd160d9..405420865 100644
--- a/src/google/protobuf/BUILD.bazel
+++ b/src/google/protobuf/BUILD.bazel
@@ -432,6 +432,13 @@ cc_library(
         "serial_arena.h",
         "thread_safe_arena.h",
     ],
+    local_defines = select({
+        "//build_defs:config_use_dlls": [
+            "PROTOBUF_USE_DLLS",
+            "LIBPROTOBUF_EXPORTS",
+        ],
+        "//conditions:default": [],
+    }),
     strip_include_prefix = "/src",
     visibility = [
         "//:__subpackages__",
@@ -531,7 +538,15 @@ cc_library(
         "serial_arena.h",
         "thread_safe_arena.h",
         "wire_format_lite.h",
+        "port.h",
     ],
+    local_defines = select({
+        "//build_defs:config_use_dlls": [
+            "PROTOBUF_USE_DLLS",
+            "LIBPROTOBUF_EXPORTS",
+        ],
+        "//conditions:default": [],
+    }),
     copts = COPTS + select({
         "//build_defs:config_msvc": [],
         "//conditions:default": [
@@ -639,6 +654,13 @@ cc_library(
     ],
     hdrs = PROTOBUF_HEADERS,
     copts = COPTS,
+    local_defines = select({
+        "//build_defs:config_use_dlls": [
+            "PROTOBUF_USE_DLLS",
+            "LIBPROTOBUF_EXPORTS",
+        ],
+        "//conditions:default": [],
+    }),
     linkopts = LINK_OPTS,
     strip_include_prefix = "/src",
     visibility = [
diff --git a/src/google/protobuf/arena.cc b/src/google/protobuf/arena.cc
index 55d87ab6b..0df4f9670 100644
--- a/src/google/protobuf/arena.cc
+++ b/src/google/protobuf/arena.cc
@@ -554,7 +554,7 @@ ThreadSafeArena::ThreadCache& ThreadSafeArena::thread_cache() {
       new internal::ThreadLocalStorage<ThreadCache>();
   return *thread_cache_->Get();
 }
-#elif defined(PROTOBUF_USE_DLLS) && defined(_WIN32)
+#elif defined(_WIN32)
 ThreadSafeArena::ThreadCache& ThreadSafeArena::thread_cache() {
   static PROTOBUF_THREAD_LOCAL ThreadCache thread_cache;
   return thread_cache;
diff --git a/src/google/protobuf/io/BUILD.bazel b/src/google/protobuf/io/BUILD.bazel
index 192fec3ab..e89abff3e 100644
--- a/src/google/protobuf/io/BUILD.bazel
+++ b/src/google/protobuf/io/BUILD.bazel
@@ -22,6 +22,13 @@ cc_library(
         "zero_copy_stream_impl.h",
         "zero_copy_stream_impl_lite.h",
     ],
+    local_defines = select({
+        "//build_defs:config_use_dlls": [
+            "PROTOBUF_USE_DLLS",
+            "LIBPROTOBUF_EXPORTS",
+        ],
+        "//conditions:default": [],
+    }),
     copts = COPTS,
     strip_include_prefix = "/src",
     deps = [
diff --git a/src/google/protobuf/map_field.h b/src/google/protobuf/map_field.h
index 0e37a16d7..069cd62e6 100644
--- a/src/google/protobuf/map_field.h
+++ b/src/google/protobuf/map_field.h
@@ -692,7 +692,7 @@ bool AllAreInitialized(const TypeDefinedMapFieldBase<Key, T>& field) {
   return true;
 }
 
-class PROTOBUF_EXPORT DynamicMapField final
+class DynamicMapField final
     : public TypeDefinedMapFieldBase<MapKey, MapValueRef> {
  public:
   explicit DynamicMapField(const Message* default_entry);
diff --git a/src/google/protobuf/port_def.inc b/src/google/protobuf/port_def.inc
index 56f995e45..675a2184e 100644
--- a/src/google/protobuf/port_def.inc
+++ b/src/google/protobuf/port_def.inc
@@ -435,7 +435,7 @@ static_assert(PROTOBUF_ABSL_MIN(20230125, 3),
 #endif
 
 // Lexan sets both MSV_VER and clang, so handle it with the clang path.
-#if defined(_MSC_VER) && !defined(__clang__)
+#if defined(_MSC_VER)
 // MSVC 17 currently seems to raise an error about constant-initialized pointers.
 # if PROTOBUF_MSC_VER_MIN(1930)
 #  define PROTOBUF_CONSTINIT
diff --git a/src/google/protobuf/thread_safe_arena.h b/src/google/protobuf/thread_safe_arena.h
index 2065ee98e..609c1645d 100644
--- a/src/google/protobuf/thread_safe_arena.h
+++ b/src/google/protobuf/thread_safe_arena.h
@@ -248,7 +248,7 @@ class PROTOBUF_EXPORT ThreadSafeArena {
   // iOS does not support __thread keyword so we use a custom thread local
   // storage class we implemented.
   static ThreadCache& thread_cache();
-#elif defined(PROTOBUF_USE_DLLS) && defined(_WIN32)
+#elif defined(_WIN32)
   // Thread local variables cannot be exposed through MSVC DLL interface but we
   // can wrap them in static functions.
   static ThreadCache& thread_cache();
