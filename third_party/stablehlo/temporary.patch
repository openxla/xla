diff --ruN a/stablehlo/stablehlo/dialect/StablehloOps.cpp b/stablehlo/stablehlo/dialect/StablehloOps.cpp
--- stablehlo/stablehlo/dialect/StablehloOps.cpp
+++ stablehlo/stablehlo/dialect/StablehloOps.cpp
@@ -3852,14 +3852,19 @@
 //
 // Note that this right now only does comparision on the first pair of block
 // arguments.
-static void buildSortComparisonBody(llvm::ArrayRef<Type> elementTypes,
-                                    ComparisonDirection direction,
-                                    std::optional<StringRef> compareType,
-                                    Region* body, OpBuilder* builder) {
+void buildSortComparisonBody(llvm::ArrayRef<Type> elementTypes,
+                             ComparisonDirection direction,
+                             std::optional<StringRef> compareType, Region* body,
+                            OpBuilder* builder) {
   OpBuilder::InsertionGuard insertionPointGuard(*builder);
 
   Location loc = body->getLoc();
-  Block* block = builder->createBlock(body);
+  Block* block;
+  if (body->empty()) {
+    block = builder->createBlock(body);
+  } else {
+    block = &body->front();
+  }
   // Add two arguments for each element type.
   for (Type elementType : elementTypes) {
     ShapedType shapedType = RankedTensorType::get({}, elementType);
diff --ruN a/stablehlo/stablehlo/dialect/StablehloOps.h b/stablehlo/stablehlo/dialect/StablehloOps.h
--- stablehlo/stablehlo/dialect/StablehloOps.h
+++ stablehlo/stablehlo/dialect/StablehloOps.h
@@ -177,6 +177,16 @@
                     const llvm::ArrayRef<Type> &elementTypes, int64_t dimension,
                     bool isStable, ComparisonDirection direction);
 
+// Builds the region `body` for stablehlo.sort's comparator: for each type in
+// `element_types`, create two block arguments, one for lhs and one for rhs, and
+// generates stablehlo.compare op to compare them with the given `direction`.
+// Note that this right now only does comparision on the first pair of block
+// arguments.
+void buildSortComparisonBody(llvm::ArrayRef<Type> elementTypes,
+                             ComparisonDirection direction,
+                             std::optional<StringRef> compareType, Region *body,
+                             OpBuilder *builder);
+
 template <typename OpTy>
 void buildReduceBody(Type elementType, Region &body, OpBuilder &builder) {
   OpBuilder::InsertionGuard guard(builder);
diff --ruN a/stablehlo/stablehlo/transforms/ChloLegalizeToStablehlo.cpp b/stablehlo/stablehlo/transforms/ChloLegalizeToStablehlo.cpp
--- stablehlo/stablehlo/transforms/ChloLegalizeToStablehlo.cpp
+++ stablehlo/stablehlo/transforms/ChloLegalizeToStablehlo.cpp
@@ -50,6 +50,10 @@
 #include "stablehlo/transforms/ChloDecompositionUtils.h"
 #include "stablehlo/transforms/PassUtils.h"
 #include "stablehlo/transforms/Passes.h"
+
+// This must precede all other headers, otherwise during Windows cross
+// compilation, M_PI will not be defined.
+#define _USE_MATH_DEFINES
 
 namespace mlir {
 namespace stablehlo {

