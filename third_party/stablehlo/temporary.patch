diff --ruN a/stablehlo/stablehlo/dialect/StablehloOps.cpp b/stablehlo/stablehlo/dialect/StablehloOps.cpp
--- stablehlo/stablehlo/dialect/StablehloOps.cpp
+++ stablehlo/stablehlo/dialect/StablehloOps.cpp
@@ -2635,6 +2635,38 @@
                           inferredReturnTypes);
 }
 
+class FoldConstantCaseOp : public OpRewritePattern<CaseOp> {
+ public:
+  explicit FoldConstantCaseOp(MLIRContext* context)
+      : OpRewritePattern<CaseOp>(context) {}
+  LogicalResult matchAndRewrite(CaseOp op,
+                                PatternRewriter& rewriter) const override {
+    DenseIntElementsAttr branch;
+    if (!matchPattern(op.getIndex(), m_Constant(&branch))) return failure();
+
+    int index = *branch.getValues<int>().begin();
+    if (index >= op.getBranches().size() || index < 0) {
+      return failure();
+    }
+
+    Block &block = op.getBranches()[index].back();
+    IRMapping mapping;
+    for (auto &block_op : block.without_terminator()) {
+      rewriter.clone(block_op, mapping);
+    }
+    rewriter.replaceOp(
+        op, llvm::to_vector(llvm::map_range(
+            block.getTerminator()->getOperands(),
+            [&](Value v) { return mapping.lookupOrDefault(v); })));
+      return success();
+  }
+};
+
+void CaseOp::getCanonicalizationPatterns(RewritePatternSet& results,
+                                         MLIRContext* context) {
+  results.add<FoldConstantCaseOp>(context);
+}
+
 //===----------------------------------------------------------------------===//
 // SliceOp
 //===----------------------------------------------------------------------===//
diff --ruN a/stablehlo/stablehlo/dialect/StablehloOps.td b/stablehlo/stablehlo/dialect/StablehloOps.td
--- stablehlo/stablehlo/dialect/StablehloOps.td
+++ stablehlo/stablehlo/dialect/StablehloOps.td
@@ -1392,7 +1392,7 @@
   );
 
   let regions = (region VariadicRegion<SizedRegion<1>>:$branches /*case_i2*/);
-
+  let hasCanonicalizer = 1;
   let results = (outs Variadic<HLO_TensorOrPerAxisQuantizedTensorOrToken>);
 }
 
diff --ruN a/stablehlo/stablehlo/tests/canonicalize.mlir b/stablehlo/stablehlo/tests/canonicalize.mlir
--- stablehlo/stablehlo/tests/canonicalize.mlir
+++ stablehlo/stablehlo/tests/canonicalize.mlir
@@ -0,0 +1,13 @@
+// RUN: stablehlo-opt %s -pass-pipeline='builtin.module(func.func(canonicalize{test-convergence}))' -split-input-file -allow-unregistered-dialect | FileCheck %s
+
+func.func @fold_constant_case(%arg0: tensor<i32>, %arg1: tensor<i32>) -> (tensor<i32>) {
+ %0 = "stablehlo.constant"() <{value = dense<1> : tensor<i32>}> : () -> tensor<i32>
+ %1 = "stablehlo.case"(%0) ({
+   "stablehlo.return"(%arg0) : (tensor<i32>) -> ()
+ }, {
+  "stablehlo.return"(%arg1) : (tensor<i32>) -> ()
+ }) : (tensor<i32>) -> tensor<i32>
+ return %1 : tensor<i32>
+
+// CHECK: return %arg1
+}

