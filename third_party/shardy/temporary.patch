diff --git a/third_party/llvm/generated.patch b/third_party/llvm/generated.patch
index 99ef3cb..509398d 100644
--- a/third_party/llvm/generated.patch
+++ b/third_party/llvm/generated.patch
@@ -1,546 +1 @@
 Auto generated patch. Do not edit or delete it, even if empty.
-diff -ruN --strip-trailing-cr a/clang/lib/Driver/ToolChains/Clang.cpp b/clang/lib/Driver/ToolChains/Clang.cpp
---- a/clang/lib/Driver/ToolChains/Clang.cpp
-+++ b/clang/lib/Driver/ToolChains/Clang.cpp
-@@ -6397,7 +6397,9 @@
-   Args.AddLastArg(CmdArgs, options::OPT_fconvergent_functions,
-                   options::OPT_fno_convergent_functions);
- 
--  addPGOAndCoverageFlags(TC, C, JA, Output, Args, SanitizeArgs, CmdArgs);
-+  // NVPTX doesn't support PGO or coverage
-+  if (!Triple.isNVPTX())
-+    addPGOAndCoverageFlags(TC, C, JA, Output, Args, SanitizeArgs, CmdArgs);
- 
-   Args.AddLastArg(CmdArgs, options::OPT_fclang_abi_compat_EQ);
- 
-diff -ruN --strip-trailing-cr a/clang/test/Driver/cuda-no-pgo-or-coverage.cu b/clang/test/Driver/cuda-no-pgo-or-coverage.cu
---- a/clang/test/Driver/cuda-no-pgo-or-coverage.cu
-+++ b/clang/test/Driver/cuda-no-pgo-or-coverage.cu
-@@ -0,0 +1,33 @@
-+// Check that profiling/coverage arguments doen't get passed down to device-side
-+// compilation.
-+//
-+//
-+// XRUN: not %clang -### --target=x86_64-linux-gnu -c --cuda-gpu-arch=sm_20 \
-+// XRUN:   -fprofile-generate %s 2>&1 | \
-+// XRUN:   FileCheck --check-prefixes=CHECK,PROF %s
-+//
-+// RUN: not %clang -### --target=x86_64-linux-gnu -c --cuda-gpu-arch=sm_20 \
-+// RUN:   -fprofile-instr-generate %s 2>&1 | \
-+// RUN:   FileCheck --check-prefixes=CHECK,PROF %s
-+//
-+// RUN: not %clang -### --target=x86_64-linux-gnu -c --cuda-gpu-arch=sm_20 \
-+// RUN:   -coverage %s 2>&1 | \
-+// RUN:   FileCheck --check-prefixes=CHECK,GCOV %s
-+//
-+// RUN: not %clang -### --target=x86_64-linux-gnu -c --cuda-gpu-arch=sm_20 \
-+// RUN:   -ftest-coverage %s 2>&1 | \
-+// RUN:   FileCheck --check-prefixes=CHECK,GCOV %s
-+//
-+// RUN: not %clang -### --target=x86_64-linux-gnu -c --cuda-gpu-arch=sm_20   \
-+// RUN:   -fprofile-instr-generate -fcoverage-mapping %s 2>&1 | \
-+// RUN:   FileCheck --check-prefixes=CHECK,PROF %s
-+//
-+//
-+// CHECK-NOT: error: unsupported option '-fprofile
-+// CHECK-NOT: error: invalid argument
-+// CHECK-DAG: "-fcuda-is-device"
-+// CHECK-NOT: "-f{{[^"/]*coverage.*}}"
-+// CHECK-NOT: "-fprofile{{[^"]*}}"
-+// CHECK: "-triple" "x86_64-unknown-linux-gnu"
-+// PROF:      "-fprofile{{.*}}"
-+// GCOV:      "-coverage-notes-file=
-diff -ruN --strip-trailing-cr a/lldb/tools/lldb-dap/DAP.cpp b/lldb/tools/lldb-dap/DAP.cpp
---- a/lldb/tools/lldb-dap/DAP.cpp
-+++ b/lldb/tools/lldb-dap/DAP.cpp
-@@ -711,12 +711,12 @@
-                            [](const std::string &message) -> llvm::StringRef {
-                              return message;
-                            },
--                           [](const protocol::Response::Message &message)
-+                           [](const protocol::ResponseMessage &message)
-                                -> llvm::StringRef {
-                              switch (message) {
--                             case protocol::Response::Message::cancelled:
-+                             case protocol::eResponseMessageCancelled:
-                                return "cancelled";
--                             case protocol::Response::Message::notStopped:
-+                             case protocol::eResponseMessageNotStopped:
-                                return "notStopped";
-                              }
-                            }),
-diff -ruN --strip-trailing-cr a/lldb/tools/lldb-dap/Protocol/ProtocolBase.cpp b/lldb/tools/lldb-dap/Protocol/ProtocolBase.cpp
---- a/lldb/tools/lldb-dap/Protocol/ProtocolBase.cpp
-+++ b/lldb/tools/lldb-dap/Protocol/ProtocolBase.cpp
-@@ -7,6 +7,7 @@
- //===----------------------------------------------------------------------===//
- 
- #include "Protocol/ProtocolBase.h"
-+#include "lldb/lldb-enumerations.h"
- #include "llvm/ADT/StringRef.h"
- #include "llvm/ADT/StringSwitch.h"
- #include "llvm/Support/ErrorHandling.h"
-@@ -31,11 +32,8 @@
- 
- namespace lldb_dap::protocol {
- 
--enum MessageType {
--  eMessageTypeRequest,
--  eMessageTypeResponse,
--  eMessageTypeEvent
--};
-+FLAGS_ENUM(MessageType){eMessageTypeRequest, eMessageTypeResponse,
-+                        eMessageTypeEvent};
- 
- bool fromJSON(const json::Value &Params, MessageType &M, json::Path P) {
-   auto rawType = Params.getAsString();
-@@ -107,12 +105,12 @@
- 
-   if (R.message) {
-     assert(!R.success && "message can only be used if success is false");
--    if (const auto *messageEnum = std::get_if<Response::Message>(&*R.message)) {
-+    if (const auto *messageEnum = std::get_if<ResponseMessage>(&*R.message)) {
-       switch (*messageEnum) {
--      case Response::Message::cancelled:
-+      case eResponseMessageCancelled:
-         Result.insert({"message", "cancelled"});
-         break;
--      case Response::Message::notStopped:
-+      case eResponseMessageNotStopped:
-         Result.insert({"message", "notStopped"});
-         break;
-       }
-@@ -129,16 +127,16 @@
- }
- 
- bool fromJSON(json::Value const &Params,
--              std::variant<Response::Message, std::string> &M, json::Path P) {
-+              std::variant<ResponseMessage, std::string> &M, json::Path P) {
-   auto rawMessage = Params.getAsString();
-   if (!rawMessage) {
-     P.report("expected a string");
-     return false;
-   }
--  std::optional<Response::Message> message =
--      StringSwitch<std::optional<Response::Message>>(*rawMessage)
--          .Case("cancelled", Response::Message::cancelled)
--          .Case("notStopped", Response::Message::notStopped)
-+  std::optional<ResponseMessage> message =
-+      StringSwitch<std::optional<ResponseMessage>>(*rawMessage)
-+          .Case("cancelled", eResponseMessageCancelled)
-+          .Case("notStopped", eResponseMessageNotStopped)
-           .Default(std::nullopt);
-   if (message)
-     M = *message;
-diff -ruN --strip-trailing-cr a/lldb/tools/lldb-dap/Protocol/ProtocolBase.h b/lldb/tools/lldb-dap/Protocol/ProtocolBase.h
---- a/lldb/tools/lldb-dap/Protocol/ProtocolBase.h
-+++ b/lldb/tools/lldb-dap/Protocol/ProtocolBase.h
-@@ -20,6 +20,7 @@
- #ifndef LLDB_TOOLS_LLDB_DAP_PROTOCOL_H
- #define LLDB_TOOLS_LLDB_DAP_PROTOCOL_H
- 
-+#include "lldb/lldb-enumerations.h"
- #include "llvm/Support/JSON.h"
- #include <cstdint>
- #include <optional>
-@@ -64,15 +65,15 @@
- llvm::json::Value toJSON(const Event &);
- bool fromJSON(const llvm::json::Value &, Event &, llvm::json::Path);
- 
--/// Response for a request.
--struct Response {
--  enum class Message {
-+FLAGS_ENUM(ResponseMessage){
-     /// The request was cancelled
--    cancelled,
-+    eResponseMessageCancelled,
-     /// The request may be retried once the adapter is in a 'stopped' state
--    notStopped,
--  };
-+    eResponseMessageNotStopped,
-+};
- 
-+/// Response for a request.
-+struct Response {
-   /// Sequence number of the corresponding request.
-   int64_t request_seq;
- 
-@@ -90,7 +91,7 @@
-   /// Contains the raw error in short form if `success` is false. This raw error
-   /// might be interpreted by the client and is not shown in the UI. Some
-   /// predefined values exist.
--  std::optional<std::variant<Message, std::string>> message;
-+  std::optional<std::variant<ResponseMessage, std::string>> message;
- 
-   /// Contains request result if success is true and error details if success is
-   /// false.
-diff -ruN --strip-trailing-cr a/lldb/tools/lldb-dap/Protocol/ProtocolRequests.h b/lldb/tools/lldb-dap/Protocol/ProtocolRequests.h
---- a/lldb/tools/lldb-dap/Protocol/ProtocolRequests.h
-+++ b/lldb/tools/lldb-dap/Protocol/ProtocolRequests.h
-@@ -22,6 +22,8 @@
- 
- #include "Protocol/ProtocolBase.h"
- #include "Protocol/ProtocolTypes.h"
-+#include "lldb/lldb-enumerations.h"
-+#include "llvm/ADT/DenseSet.h"
- #include "llvm/Support/JSON.h"
- #include <cstdint>
- #include <optional>
-@@ -55,26 +57,26 @@
- using DisconnectResponse = VoidResponse;
- 
- /// Features supported by DAP clients.
--enum ClientFeature {
--  eClientFeatureVariableType,
--  eClientFeatureVariablePaging,
--  eClientFeatureRunInTerminalRequest,
--  eClientFeatureMemoryReferences,
--  eClientFeatureProgressReporting,
--  eClientFeatureInvalidatedEvent,
--  eClientFeatureMemoryEvent,
--  /// Client supports the `argsCanBeInterpretedByShell` attribute on the
--  /// `runInTerminal` request.
--  eClientFeatureArgsCanBeInterpretedByShell,
--  eClientFeatureStartDebuggingRequest,
--  /// The client will interpret ANSI escape sequences in the display of
--  /// `OutputEvent.output` and `Variable.value` fields when
--  /// `Capabilities.supportsANSIStyling` is also enabled.
--  eClientFeatureANSIStyling,
-+FLAGS_ENUM(ClientFeature){
-+    eClientFeatureVariableType,
-+    eClientFeatureVariablePaging,
-+    eClientFeatureRunInTerminalRequest,
-+    eClientFeatureMemoryReferences,
-+    eClientFeatureProgressReporting,
-+    eClientFeatureInvalidatedEvent,
-+    eClientFeatureMemoryEvent,
-+    /// Client supports the `argsCanBeInterpretedByShell` attribute on the
-+    /// `runInTerminal` request.
-+    eClientFeatureArgsCanBeInterpretedByShell,
-+    eClientFeatureStartDebuggingRequest,
-+    /// The client will interpret ANSI escape sequences in the display of
-+    /// `OutputEvent.output` and `Variable.value` fields when
-+    /// `Capabilities.supportsANSIStyling` is also enabled.
-+    eClientFeatureANSIStyling,
- };
- 
- /// Format of paths reported by the debug adapter.
--enum PathFormat { ePatFormatPath, ePathFormatURI };
-+FLAGS_ENUM(PathFormat){ePatFormatPath, ePathFormatURI};
- 
- /// Arguments for `initialize` request.
- struct InitializeRequestArguments {
-diff -ruN --strip-trailing-cr a/lldb/tools/lldb-dap/Protocol/ProtocolTypes.h b/lldb/tools/lldb-dap/Protocol/ProtocolTypes.h
---- a/lldb/tools/lldb-dap/Protocol/ProtocolTypes.h
-+++ b/lldb/tools/lldb-dap/Protocol/ProtocolTypes.h
-@@ -20,6 +20,7 @@
- #ifndef LLDB_TOOLS_LLDB_DAP_PROTOCOL_PROTOCOL_TYPES_H
- #define LLDB_TOOLS_LLDB_DAP_PROTOCOL_PROTOCOL_TYPES_H
- 
-+#include "lldb/lldb-enumerations.h"
- #include "llvm/ADT/DenseSet.h"
- #include "llvm/Support/JSON.h"
- #include <cstdint>
-@@ -56,12 +57,8 @@
- };
- llvm::json::Value toJSON(const ExceptionBreakpointsFilter &);
- 
--enum ColumnType {
--  eColumnTypeString,
--  eColumnTypeNumber,
--  eColumnTypeBoolean,
--  eColumnTypeTimestamp
--};
-+FLAGS_ENUM(ColumnType){eColumnTypeString, eColumnTypeNumber, eColumnTypeBoolean,
-+                       eColumnTypeTimestamp};
- 
- /// A ColumnDescriptor specifies what module attribute to show in a column of
- /// the modules view, how to format it, and what the column’s label should be.
-@@ -90,27 +87,23 @@
- 
- /// Names of checksum algorithms that may be supported by a debug adapter.
- /// Values: ‘MD5’, ‘SHA1’, ‘SHA256’, ‘timestamp’.
--enum ChecksumAlgorithm {
--  eChecksumAlgorithmMD5,
--  eChecksumAlgorithmSHA1,
--  eChecksumAlgorithmSHA256,
--  eChecksumAlgorithmTimestamp
--};
-+FLAGS_ENUM(ChecksumAlgorithm){eChecksumAlgorithmMD5, eChecksumAlgorithmSHA1,
-+                              eChecksumAlgorithmSHA256,
-+                              eChecksumAlgorithmTimestamp};
- llvm::json::Value toJSON(const ChecksumAlgorithm &);
- 
- /// Describes one or more type of breakpoint a BreakpointMode applies to. This
- /// is a non-exhaustive enumeration and may expand as future breakpoint types
- /// are added.
--enum BreakpointModeApplicability {
--  /// In `SourceBreakpoint`'s.
--  eBreakpointModeApplicabilitySource,
--  /// In exception breakpoints applied in the `ExceptionFilterOptions`.
--  eBreakpointModeApplicabilityException,
--  /// In data breakpoints requested in the `DataBreakpointInfo` request.
--  eBreakpointModeApplicabilityData,
--  /// In `InstructionBreakpoint`'s.
--  eBreakpointModeApplicabilityInstruction
--};
-+FLAGS_ENUM(BreakpointModeApplicability){
-+    /// In `SourceBreakpoint`'s.
-+    eBreakpointModeApplicabilitySource,
-+    /// In exception breakpoints applied in the `ExceptionFilterOptions`.
-+    eBreakpointModeApplicabilityException,
-+    /// In data breakpoints requested in the `DataBreakpointInfo` request.
-+    eBreakpointModeApplicabilityData,
-+    /// In `InstructionBreakpoint`'s.
-+    eBreakpointModeApplicabilityInstruction};
- llvm::json::Value toJSON(const BreakpointModeApplicability &);
- 
- /// A `BreakpointMode` is provided as a option when setting breakpoints on
-@@ -133,101 +126,101 @@
- llvm::json::Value toJSON(const BreakpointMode &);
- 
- /// Debug Adapter Features flags supported by lldb-dap.
--enum AdapterFeature {
--  /// The debug adapter supports ANSI escape sequences in styling of
--  /// `OutputEvent.output` and `Variable.value` fields.
--  eAdapterFeatureANSIStyling,
--  /// The debug adapter supports the `breakpointLocations` request.
--  eAdapterFeatureBreakpointLocationsRequest,
--  /// The debug adapter supports the `cancel` request.
--  eAdapterFeatureCancelRequest,
--  /// The debug adapter supports the `clipboard` context value in the
--  /// `evaluate` request.
--  eAdapterFeatureClipboardContext,
--  /// The debug adapter supports the `completions` request.
--  eAdapterFeatureCompletionsRequest,
--  /// The debug adapter supports conditional breakpoints.
--  eAdapterFeatureConditionalBreakpoints,
--  /// The debug adapter supports the `configurationDone` request.
--  eAdapterFeatureConfigurationDoneRequest,
--  /// The debug adapter supports the `asAddress` and `bytes` fields in the
--  /// `dataBreakpointInfo` request.
--  eAdapterFeatureDataBreakpointBytes,
--  /// The debug adapter supports data breakpoints.
--  eAdapterFeatureDataBreakpoints,
--  /// The debug adapter supports the delayed loading of parts of the stack,
--  /// which requires that both the `startFrame` and `levels` arguments and the
--  /// `totalFrames` result of the `stackTrace` request are supported.
--  eAdapterFeatureDelayedStackTraceLoading,
--  /// The debug adapter supports the `disassemble` request.
--  eAdapterFeatureDisassembleRequest,
--  /// The debug adapter supports a (side effect free) `evaluate` request for
--  /// data hovers.
--  eAdapterFeatureEvaluateForHovers,
--  /// The debug adapter supports `filterOptions` as an argument on the
--  /// `setExceptionBreakpoints` request.
--  eAdapterFeatureExceptionFilterOptions,
--  /// The debug adapter supports the `exceptionInfo` request.
--  eAdapterFeatureExceptionInfoRequest,
--  /// The debug adapter supports `exceptionOptions` on the
--  /// `setExceptionBreakpoints` request.
--  eAdapterFeatureExceptionOptions,
--  /// The debug adapter supports function breakpoints.
--  eAdapterFeatureFunctionBreakpoints,
--  /// The debug adapter supports the `gotoTargets` request.
--  eAdapterFeatureGotoTargetsRequest,
--  /// The debug adapter supports breakpoints that break execution after a
--  /// specified number of hits.
--  eAdapterFeatureHitConditionalBreakpoints,
--  /// The debug adapter supports adding breakpoints based on instruction
--  /// references.
--  eAdapterFeatureInstructionBreakpoints,
--  /// The debug adapter supports the `loadedSources` request.
--  eAdapterFeatureLoadedSourcesRequest,
--  /// The debug adapter supports log points by interpreting the `logMessage`
--  /// attribute of the `SourceBreakpoint`.
--  eAdapterFeatureLogPoints,
--  /// The debug adapter supports the `modules` request.
--  eAdapterFeatureModulesRequest,
--  /// The debug adapter supports the `readMemory` request.
--  eAdapterFeatureReadMemoryRequest,
--  /// The debug adapter supports restarting a frame.
--  eAdapterFeatureRestartFrame,
--  /// The debug adapter supports the `restart` request. In this case a client
--  /// should not implement `restart` by terminating and relaunching the
--  /// adapter but by calling the `restart` request.
--  eAdapterFeatureRestartRequest,
--  /// The debug adapter supports the `setExpression` request.
--  eAdapterFeatureSetExpression,
--  /// The debug adapter supports setting a variable to a value.
--  eAdapterFeatureSetVariable,
--  /// The debug adapter supports the `singleThread` property on the execution
--  /// requests (`continue`, `next`, `stepIn`, `stepOut`, `reverseContinue`,
--  /// `stepBack`).
--  eAdapterFeatureSingleThreadExecutionRequests,
--  /// The debug adapter supports stepping back via the `stepBack` and
--  /// `reverseContinue` requests.
--  eAdapterFeatureStepBack,
--  /// The debug adapter supports the `stepInTargets` request.
--  eAdapterFeatureStepInTargetsRequest,
--  /// The debug adapter supports stepping granularities (argument
--  /// `granularity`) for the stepping requests.
--  eAdapterFeatureSteppingGranularity,
--  /// The debug adapter supports the `terminate` request.
--  eAdapterFeatureTerminateRequest,
--  /// The debug adapter supports the `terminateThreads` request.
--  eAdapterFeatureTerminateThreadsRequest,
--  /// The debug adapter supports the `suspendDebuggee` attribute on the
--  /// `disconnect` request.
--  eAdapterFeatureSuspendDebuggee,
--  /// The debug adapter supports a `format` attribute on the `stackTrace`,
--  /// `variables`, and `evaluate` requests.
--  eAdapterFeatureValueFormattingOptions,
--  /// The debug adapter supports the `writeMemory` request.
--  eAdapterFeatureWriteMemoryRequest,
--  /// The debug adapter supports the `terminateDebuggee` attribute on the
--  /// `disconnect` request.
--  eAdapterFeatureTerminateDebuggee,
-+FLAGS_ENUM(AdapterFeature){
-+    /// The debug adapter supports ANSI escape sequences in styling of
-+    /// `OutputEvent.output` and `Variable.value` fields.
-+    eAdapterFeatureANSIStyling,
-+    /// The debug adapter supports the `breakpointLocations` request.
-+    eAdapterFeatureBreakpointLocationsRequest,
-+    /// The debug adapter supports the `cancel` request.
-+    eAdapterFeatureCancelRequest,
-+    /// The debug adapter supports the `clipboard` context value in the
-+    /// `evaluate` request.
-+    eAdapterFeatureClipboardContext,
-+    /// The debug adapter supports the `completions` request.
-+    eAdapterFeatureCompletionsRequest,
-+    /// The debug adapter supports conditional breakpoints.
-+    eAdapterFeatureConditionalBreakpoints,
-+    /// The debug adapter supports the `configurationDone` request.
-+    eAdapterFeatureConfigurationDoneRequest,
-+    /// The debug adapter supports the `asAddress` and `bytes` fields in the
-+    /// `dataBreakpointInfo` request.
-+    eAdapterFeatureDataBreakpointBytes,
-+    /// The debug adapter supports data breakpoints.
-+    eAdapterFeatureDataBreakpoints,
-+    /// The debug adapter supports the delayed loading of parts of the stack,
-+    /// which requires that both the `startFrame` and `levels` arguments and the
-+    /// `totalFrames` result of the `stackTrace` request are supported.
-+    eAdapterFeatureDelayedStackTraceLoading,
-+    /// The debug adapter supports the `disassemble` request.
-+    eAdapterFeatureDisassembleRequest,
-+    /// The debug adapter supports a (side effect free) `evaluate` request for
-+    /// data hovers.
-+    eAdapterFeatureEvaluateForHovers,
-+    /// The debug adapter supports `filterOptions` as an argument on the
-+    /// `setExceptionBreakpoints` request.
-+    eAdapterFeatureExceptionFilterOptions,
-+    /// The debug adapter supports the `exceptionInfo` request.
-+    eAdapterFeatureExceptionInfoRequest,
-+    /// The debug adapter supports `exceptionOptions` on the
-+    /// `setExceptionBreakpoints` request.
-+    eAdapterFeatureExceptionOptions,
-+    /// The debug adapter supports function breakpoints.
-+    eAdapterFeatureFunctionBreakpoints,
-+    /// The debug adapter supports the `gotoTargets` request.
-+    eAdapterFeatureGotoTargetsRequest,
-+    /// The debug adapter supports breakpoints that break execution after a
-+    /// specified number of hits.
-+    eAdapterFeatureHitConditionalBreakpoints,
-+    /// The debug adapter supports adding breakpoints based on instruction
-+    /// references.
-+    eAdapterFeatureInstructionBreakpoints,
-+    /// The debug adapter supports the `loadedSources` request.
-+    eAdapterFeatureLoadedSourcesRequest,
-+    /// The debug adapter supports log points by interpreting the `logMessage`
-+    /// attribute of the `SourceBreakpoint`.
-+    eAdapterFeatureLogPoints,
-+    /// The debug adapter supports the `modules` request.
-+    eAdapterFeatureModulesRequest,
-+    /// The debug adapter supports the `readMemory` request.
-+    eAdapterFeatureReadMemoryRequest,
-+    /// The debug adapter supports restarting a frame.
-+    eAdapterFeatureRestartFrame,
-+    /// The debug adapter supports the `restart` request. In this case a client
-+    /// should not implement `restart` by terminating and relaunching the
-+    /// adapter but by calling the `restart` request.
-+    eAdapterFeatureRestartRequest,
-+    /// The debug adapter supports the `setExpression` request.
-+    eAdapterFeatureSetExpression,
-+    /// The debug adapter supports setting a variable to a value.
-+    eAdapterFeatureSetVariable,
-+    /// The debug adapter supports the `singleThread` property on the execution
-+    /// requests (`continue`, `next`, `stepIn`, `stepOut`, `reverseContinue`,
-+    /// `stepBack`).
-+    eAdapterFeatureSingleThreadExecutionRequests,
-+    /// The debug adapter supports stepping back via the `stepBack` and
-+    /// `reverseContinue` requests.
-+    eAdapterFeatureStepBack,
-+    /// The debug adapter supports the `stepInTargets` request.
-+    eAdapterFeatureStepInTargetsRequest,
-+    /// The debug adapter supports stepping granularities (argument
-+    /// `granularity`) for the stepping requests.
-+    eAdapterFeatureSteppingGranularity,
-+    /// The debug adapter supports the `terminate` request.
-+    eAdapterFeatureTerminateRequest,
-+    /// The debug adapter supports the `terminateThreads` request.
-+    eAdapterFeatureTerminateThreadsRequest,
-+    /// The debug adapter supports the `suspendDebuggee` attribute on the
-+    /// `disconnect` request.
-+    eAdapterFeatureSuspendDebuggee,
-+    /// The debug adapter supports a `format` attribute on the `stackTrace`,
-+    /// `variables`, and `evaluate` requests.
-+    eAdapterFeatureValueFormattingOptions,
-+    /// The debug adapter supports the `writeMemory` request.
-+    eAdapterFeatureWriteMemoryRequest,
-+    /// The debug adapter supports the `terminateDebuggee` attribute on the
-+    /// `disconnect` request.
-+    eAdapterFeatureTerminateDebuggee,
- };
- 
- /// Information about the capabilities of a debug adapter.
-@@ -268,10 +261,10 @@
- };
- llvm::json::Value toJSON(const Capabilities &);
- 
--enum PresentationHint {
--  ePresentationHintNormal,
--  ePresentationHintEmphasize,
--  ePresentationHintDeemphasize,
-+FLAGS_ENUM(PresentationHint){
-+    ePresentationHintNormal,
-+    ePresentationHintEmphasize,
-+    ePresentationHintDeemphasize,
- };
- 
- /// A `Source` is a descriptor for source code. It is returned from the debug
-diff -ruN --strip-trailing-cr a/llvm/test/tools/llvm-profdata/malformed-ptr-to-counter-array.test b/llvm/test/tools/llvm-profdata/malformed-ptr-to-counter-array.test
---- a/llvm/test/tools/llvm-profdata/malformed-ptr-to-counter-array.test
-+++ b/llvm/test/tools/llvm-profdata/malformed-ptr-to-counter-array.test
-@@ -1,7 +1,7 @@
- // Header
- //
- // INSTR_PROF_RAW_HEADER(uint64_t, Magic, __llvm_profile_get_magic())
--// INSTR_PROF_RAW_HEADER(uint64_t, Version, Version)
-+// INSTR_PROF_RAW_HEADER(uint64_t, Version, __llvm_profile_get_version())
- // INSTR_PROF_RAW_HEADER(uint64_t, BinaryIdsSize, __llvm_write_binary_ids(NULL))
- // INSTR_PROF_RAW_HEADER(uint64_t, DataSize, DataSize)
- // INSTR_PROF_RAW_HEADER(uint64_t, CountersSize, CountersSize)
-diff -ruN --strip-trailing-cr a/offload/test/offloading/gpupgo/pgo1.c b/offload/test/offloading/gpupgo/pgo1.c
---- a/offload/test/offloading/gpupgo/pgo1.c
-+++ b/offload/test/offloading/gpupgo/pgo1.c
-@@ -14,7 +14,7 @@
- // RUN:     %target_triple.%basename_t.clang.profraw | \
- // RUN:     %fcheck-generic --check-prefix="CLANG-PGO"
- 
--// REQUIRES: gpu
-+// REQUIRES: amdgpu
- // REQUIRES: pgo
- 
- int test1(int a) { return a / 2; }
-diff -ruN --strip-trailing-cr a/offload/test/offloading/gpupgo/pgo2.c b/offload/test/offloading/gpupgo/pgo2.c
---- a/offload/test/offloading/gpupgo/pgo2.c
-+++ b/offload/test/offloading/gpupgo/pgo2.c
-@@ -48,7 +48,7 @@
- // RUN:     %target_triple.%basename_t.hfdi.profraw \
- // RUN:     | %fcheck-generic --check-prefix="LLVM-DEVICE"
- 
--// REQUIRES: gpu
-+// REQUIRES: amdgpu
- // REQUIRES: pgo
- 
- int main() {
diff --git a/third_party/llvm/workspace.bzl b/third_party/llvm/workspace.bzl
index 005737a..fd9baec 100644
--- a/third_party/llvm/workspace.bzl
+++ b/third_party/llvm/workspace.bzl
@@ -4,8 +4,8 @@ load("//third_party:repo.bzl", "tf_http_archive")
 
 def repo(name):
     """Imports LLVM."""
-    LLVM_COMMIT = "c0952a931c7d556ca9f0073d86d591a37eb60477"
-    LLVM_SHA256 = "0a24477c0e3d6f3418dad1fe6375a74381b7b174c32c750f97ea05d540dddb84"
+    LLVM_COMMIT = "799e9053641a6478d3144866a97737b37b87c260"
+    LLVM_SHA256 = "be33f1f9f20da6bd744d62356bf469e906e3b5f5e9cba2af6ee6418cee49f1f3"
 
     tf_http_archive(
         name = name,
