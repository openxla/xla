diff --git a/third_party/llvm/generated.patch b/third_party/llvm/generated.patch
index d52ea5c..843d79d 100644
--- a/third_party/llvm/generated.patch
+++ b/third_party/llvm/generated.patch
@@ -1,3002 +1,1842 @@
 Auto generated patch. Do not edit or delete it, even if empty.
-diff -ruN --strip-trailing-cr a/clang/include/clang/Basic/SourceManager.h b/clang/include/clang/Basic/SourceManager.h
---- a/clang/include/clang/Basic/SourceManager.h
-+++ b/clang/include/clang/Basic/SourceManager.h
-@@ -824,12 +824,6 @@
+diff -ruN --strip-trailing-cr a/clang/lib/Format/Format.cpp b/clang/lib/Format/Format.cpp
+--- a/clang/lib/Format/Format.cpp
++++ b/clang/lib/Format/Format.cpp
+@@ -2643,13 +2643,14 @@
+       for (FormatToken *Tok = Line->First; Tok && Tok->Next; Tok = Tok->Next) {
+         if (Tok->isNot(TT_PointerOrReference))
+           continue;
+-        // Don't treat space in `void foo() &&` as evidence.
++        // Don't treat space in `void foo() &&` or `void() &&` as evidence.
+         if (const auto *Prev = Tok->getPreviousNonComment()) {
+           if (Prev->is(tok::r_paren) && Prev->MatchingParen) {
+             if (const auto *Func =
+                     Prev->MatchingParen->getPreviousNonComment()) {
+               if (Func->isOneOf(TT_FunctionDeclarationName, TT_StartOfName,
+-                                TT_OverloadedOperator)) {
++                                TT_OverloadedOperator) ||
++                  Func->isTypeName(LangOpts)) {
+                 continue;
+               }
+             }
+diff -ruN --strip-trailing-cr a/clang/lib/Sema/SemaDeclAttr.cpp b/clang/lib/Sema/SemaDeclAttr.cpp
+--- a/clang/lib/Sema/SemaDeclAttr.cpp
++++ b/clang/lib/Sema/SemaDeclAttr.cpp
+@@ -1970,6 +1970,13 @@
+   if (!FD)
+     return;
  
-   mutable std::unique_ptr<SrcMgr::SLocEntry> FakeSLocEntryForRecovery;
- 
--  /// Cache for filenames used in diagnostics. See 'getNameForDiagnostic()'.
--  mutable llvm::StringMap<StringRef> DiagNames;
--
--  /// Allocator for absolute/short names.
--  mutable llvm::BumpPtrAllocator DiagNameAlloc;
--
-   /// Lazily computed map of macro argument chunks to their expanded
-   /// source location.
-   using MacroArgsMap = std::map<unsigned, SourceLocation>;
-@@ -1854,16 +1848,6 @@
-   /// \return Location of the top-level macro caller.
-   SourceLocation getTopMacroCallerLoc(SourceLocation Loc) const;
- 
--  /// Retrieve the name of a file suitable for diagnostics.
--  // FIXME: Passing in the DiagnosticOptions here is a workaround for the
--  // fact that installapi does some weird things with DiagnosticsEngines,
--  // which causes the 'Diag' member of SourceManager (or at least the
--  // DiagnosticsOptions member thereof) to be a dangling reference
--  // sometimes. We should probably fix that or decouple the two classes
--  // to avoid this issue entirely.
--  StringRef getNameForDiagnostic(StringRef Filename,
--                                 const DiagnosticOptions &Opts) const;
--
- private:
-   friend class ASTReader;
-   friend class ASTWriter;
-diff -ruN --strip-trailing-cr a/clang/lib/Basic/SourceManager.cpp b/clang/lib/Basic/SourceManager.cpp
---- a/clang/lib/Basic/SourceManager.cpp
-+++ b/clang/lib/Basic/SourceManager.cpp
-@@ -2390,75 +2390,3 @@
-   assert(ID.isValid());
-   SourceMgr->setMainFileID(ID);
- }
--
--StringRef
--SourceManager::getNameForDiagnostic(StringRef Filename,
--                                    const DiagnosticOptions &Opts) const {
--  OptionalFileEntryRef File = getFileManager().getOptionalFileRef(Filename);
--  if (!File)
--    return Filename;
--
--  bool SimplifyPath = [&] {
--    if (Opts.AbsolutePath)
--      return true;
--
--    // Try to simplify paths that contain '..' in any case since paths to
--    // standard library headers especially tend to get quite long otherwise.
--    // Only do that for local filesystems though to avoid slowing down
--    // compilation too much.
--    if (!File->getName().contains(".."))
--      return false;
--
--    // If we're not on Windows, check if we're on a network file system and
--    // avoid simplifying the path in that case since that can be slow. On
--    // Windows, the check for a local filesystem is already slow, so skip it.
--#ifndef _WIN32
--    if (!llvm::sys::fs::is_local(File->getName()))
--      return false;
--#endif
--
--    return true;
--  }();
--
--  if (!SimplifyPath)
--    return Filename;
--
--  // This may involve computing canonical names, so cache the result.
--  StringRef &CacheEntry = DiagNames[Filename];
--  if (!CacheEntry.empty())
--    return CacheEntry;
--
--  // We want to print a simplified absolute path, i. e. without "dots".
--  //
--  // The hardest part here are the paths like "<part1>/<link>/../<part2>".
--  // On Unix-like systems, we cannot just collapse "<link>/..", because
--  // paths are resolved sequentially, and, thereby, the path
--  // "<part1>/<part2>" may point to a different location. That is why
--  // we use FileManager::getCanonicalName(), which expands all indirections
--  // with llvm::sys::fs::real_path() and caches the result.
--  //
--  // On the other hand, it would be better to preserve as much of the
--  // original path as possible, because that helps a user to recognize it.
--  // real_path() expands all links, which sometimes too much. Luckily,
--  // on Windows we can just use llvm::sys::path::remove_dots(), because,
--  // on that system, both aforementioned paths point to the same place.
--  SmallString<256> TempBuf;
--#ifdef _WIN32
--  TempBuf = File->getName();
--  llvm::sys::fs::make_absolute(TempBuf);
--  llvm::sys::path::native(TempBuf);
--  llvm::sys::path::remove_dots(TempBuf, /* remove_dot_dot */ true);
--#else
--  TempBuf = getFileManager().getCanonicalName(*File);
--#endif
--
--  // In some cases, the resolved path may actually end up being longer (e.g.
--  // if it was originally a relative path), so just retain whichever one
--  // ends up being shorter.
--  if (!Opts.AbsolutePath && TempBuf.size() > Filename.size())
--    CacheEntry = Filename;
--  else
--    CacheEntry = TempBuf.str().copy(DiagNameAlloc);
--
--  return CacheEntry;
--}
-diff -ruN --strip-trailing-cr a/clang/lib/Frontend/SARIFDiagnostic.cpp b/clang/lib/Frontend/SARIFDiagnostic.cpp
---- a/clang/lib/Frontend/SARIFDiagnostic.cpp
-+++ b/clang/lib/Frontend/SARIFDiagnostic.cpp
-@@ -163,7 +163,36 @@
- 
- llvm::StringRef SARIFDiagnostic::emitFilename(StringRef Filename,
-                                               const SourceManager &SM) {
--  return SM.getNameForDiagnostic(Filename, DiagOpts);
-+  if (DiagOpts.AbsolutePath) {
-+    auto File = SM.getFileManager().getOptionalFileRef(Filename);
-+    if (File) {
-+      // We want to print a simplified absolute path, i. e. without "dots".
-+      //
-+      // The hardest part here are the paths like "<part1>/<link>/../<part2>".
-+      // On Unix-like systems, we cannot just collapse "<link>/..", because
-+      // paths are resolved sequentially, and, thereby, the path
-+      // "<part1>/<part2>" may point to a different location. That is why
-+      // we use FileManager::getCanonicalName(), which expands all indirections
-+      // with llvm::sys::fs::real_path() and caches the result.
-+      //
-+      // On the other hand, it would be better to preserve as much of the
-+      // original path as possible, because that helps a user to recognize it.
-+      // real_path() expands all links, which is sometimes too much. Luckily,
-+      // on Windows we can just use llvm::sys::path::remove_dots(), because,
-+      // on that system, both aforementioned paths point to the same place.
-+#ifdef _WIN32
-+      SmallString<256> TmpFilename = File->getName();
-+      llvm::sys::fs::make_absolute(TmpFilename);
-+      llvm::sys::path::native(TmpFilename);
-+      llvm::sys::path::remove_dots(TmpFilename, /* remove_dot_dot */ true);
-+      Filename = StringRef(TmpFilename.data(), TmpFilename.size());
-+#else
-+      Filename = SM.getFileManager().getCanonicalName(*File);
-+#endif
-+    }
-+  }
++  // Skip explicit specializations here as they may have
++  // a user-provided definition that may deliberately differ from the primary
++  // template. If an explicit specialization truly never returns, the user
++  // should explicitly mark it with [[noreturn]].
++  if (FD->getTemplateSpecializationKind() == TSK_ExplicitSpecialization)
++    return;
 +
-+  return Filename;
- }
+   auto *NonConstFD = const_cast<FunctionDecl *>(FD);
+   DiagnosticsEngine &Diags = S.getDiagnostics();
+   if (Diags.isIgnored(diag::warn_falloff_nonvoid, FD->getLocation()) &&
+diff -ruN --strip-trailing-cr a/clang/lib/Sema/SemaDecl.cpp b/clang/lib/Sema/SemaDecl.cpp
+--- a/clang/lib/Sema/SemaDecl.cpp
++++ b/clang/lib/Sema/SemaDecl.cpp
+@@ -3267,6 +3267,14 @@
+     if (isa<UsedAttr>(I) || isa<RetainAttr>(I))
+       continue;
  
- /// Print out the file/line/column information and include trace.
-diff -ruN --strip-trailing-cr a/clang/lib/Frontend/TextDiagnostic.cpp b/clang/lib/Frontend/TextDiagnostic.cpp
---- a/clang/lib/Frontend/TextDiagnostic.cpp
-+++ b/clang/lib/Frontend/TextDiagnostic.cpp
-@@ -738,7 +738,39 @@
- }
- 
- void TextDiagnostic::emitFilename(StringRef Filename, const SourceManager &SM) {
--  OS << SM.getNameForDiagnostic(Filename, DiagOpts);
-+#ifdef _WIN32
-+  SmallString<4096> TmpFilename;
-+#endif
-+  if (DiagOpts.AbsolutePath) {
-+    auto File = SM.getFileManager().getOptionalFileRef(Filename);
-+    if (File) {
-+      // We want to print a simplified absolute path, i. e. without "dots".
-+      //
-+      // The hardest part here are the paths like "<part1>/<link>/../<part2>".
-+      // On Unix-like systems, we cannot just collapse "<link>/..", because
-+      // paths are resolved sequentially, and, thereby, the path
-+      // "<part1>/<part2>" may point to a different location. That is why
-+      // we use FileManager::getCanonicalName(), which expands all indirections
-+      // with llvm::sys::fs::real_path() and caches the result.
-+      //
-+      // On the other hand, it would be better to preserve as much of the
-+      // original path as possible, because that helps a user to recognize it.
-+      // real_path() expands all links, which sometimes too much. Luckily,
-+      // on Windows we can just use llvm::sys::path::remove_dots(), because,
-+      // on that system, both aforementioned paths point to the same place.
-+#ifdef _WIN32
-+      TmpFilename = File->getName();
-+      llvm::sys::fs::make_absolute(TmpFilename);
-+      llvm::sys::path::native(TmpFilename);
-+      llvm::sys::path::remove_dots(TmpFilename, /* remove_dot_dot */ true);
-+      Filename = StringRef(TmpFilename.data(), TmpFilename.size());
-+#else
-+      Filename = SM.getFileManager().getCanonicalName(*File);
-+#endif
++    if (isa<InferredNoReturnAttr>(I)) {
++      if (auto *FD = dyn_cast<FunctionDecl>(New)) {
++        if (FD->getTemplateSpecializationKind() == TSK_ExplicitSpecialization)
++          continue; // Don't propagate inferred noreturn attributes to explicit
++                    // specializations.
++      }
 +    }
-+  }
 +
-+  OS << Filename;
- }
+     if (mergeDeclAttribute(*this, New, I, LocalAMK))
+       foundAny = true;
+   }
+diff -ruN --strip-trailing-cr a/clang/lib/Sema/SemaOverload.cpp b/clang/lib/Sema/SemaOverload.cpp
+--- a/clang/lib/Sema/SemaOverload.cpp
++++ b/clang/lib/Sema/SemaOverload.cpp
+@@ -8042,8 +8042,8 @@
  
- /// Print out the file/line/column information and include trace.
-diff -ruN --strip-trailing-cr a/clang/lib/Headers/CMakeLists.txt b/clang/lib/Headers/CMakeLists.txt
---- a/clang/lib/Headers/CMakeLists.txt
-+++ b/clang/lib/Headers/CMakeLists.txt
-@@ -347,6 +347,10 @@
-   cuda_wrappers/bits/basic_string.tcc
- )
+     Candidate.IgnoreObjectArgument =
+         isa<CXXMethodDecl>(Candidate.Function) &&
+-        cast<CXXMethodDecl>(Candidate.Function)
+-            ->isImplicitObjectMemberFunction() &&
++        !cast<CXXMethodDecl>(Candidate.Function)
++             ->isExplicitObjectMemberFunction() &&
+         !isa<CXXConstructorDecl>(Candidate.Function);
  
-+set(cuda_wrapper_utility_files
-+  cuda_wrappers/__utility/declval.h
-+)
-+
- set(ppc_wrapper_files
-   ppc_wrappers/mmintrin.h
-   ppc_wrappers/xmmintrin.h
-@@ -443,8 +447,9 @@
+     Candidate.ExplicitCallArguments = Args.size();
+diff -ruN --strip-trailing-cr a/clang/test/Driver/offload-target.c b/clang/test/Driver/offload-target.c
+--- a/clang/test/Driver/offload-target.c
++++ b/clang/test/Driver/offload-target.c
+@@ -10,7 +10,7 @@
+ // RUN: | FileCheck %s -check-prefix=CUDA
+ // CUDA: "nvptx64-nvidia-cuda" - "clang", inputs: ["[[INPUT:.+]]"], output: "[[NV_OBJ:.+]]"
  
- # Copy header files from the source directory to the build directory
- foreach( f ${files} ${cuda_wrapper_files} ${cuda_wrapper_bits_files}
--           ${ppc_wrapper_files} ${openmp_wrapper_files} ${zos_wrapper_files} ${hlsl_files}
--	   ${llvm_libc_wrapper_files} ${llvm_offload_wrapper_files})
-+           ${cuda_wrapper_utility_files} ${ppc_wrapper_files} ${openmp_wrapper_files}
-+           ${zos_wrapper_files} ${hlsl_files} ${llvm_libc_wrapper_files}
-+           ${llvm_offload_wrapper_files})
-   copy_header_to_output_dir(${CMAKE_CURRENT_SOURCE_DIR} ${f})
- endforeach( f )
+-// RUN: %clang -### --offload-targets=amdgcn-amd-amdhsa,nvptx64-nvidia-cuda -fopenmp \
++// RUN: %clang -### --offload-targets=amdgcn-amd-amdhsa,nvptx64-nvidia-cuda -fopenmp=libomp \
+ // RUN:   -Xarch_amdgcn --offload-arch=gfx90a -Xarch_nvptx64 --offload-arch=sm_89 \
+ // RUN:   -nogpulib -nogpuinc %s -ccc-print-bindings 2>&1 \
+ // RUN: | FileCheck %s -check-prefix=OPENMP
+diff -ruN --strip-trailing-cr a/clang/test/Interpreter/pretty-print.c b/clang/test/Interpreter/pretty-print.c
+--- a/clang/test/Interpreter/pretty-print.c
++++ b/clang/test/Interpreter/pretty-print.c
+@@ -3,7 +3,7 @@
+ // RUN: cat %s | clang-repl -Xcc -xc  | FileCheck %s
+ // RUN: cat %s | clang-repl -Xcc -std=c++11 | FileCheck %s
  
-@@ -553,7 +558,7 @@
- # Architecture/platform specific targets
- add_header_target("arm-resource-headers" "${arm_only_files};${arm_only_generated_files}")
- add_header_target("aarch64-resource-headers" "${aarch64_only_files};${aarch64_only_generated_files}")
--add_header_target("cuda-resource-headers" "${cuda_files};${cuda_wrapper_files};${cuda_wrapper_bits_files}")
-+add_header_target("cuda-resource-headers" "${cuda_files};${cuda_wrapper_files};${cuda_wrapper_bits_files};${cuda_wrapper_utility_files}")
- add_header_target("hexagon-resource-headers" "${hexagon_files}")
- add_header_target("hip-resource-headers" "${hip_files}")
- add_header_target("loongarch-resource-headers" "${loongarch_files}")
-@@ -601,6 +606,11 @@
-   COMPONENT clang-resource-headers)
+-// UNSUPPORTED: hwasan
++// UNSUPPORTED: hwasan, msan
  
- install(
-+  FILES ${cuda_wrapper_utility_files}
-+  DESTINATION ${header_install_dir}/cuda_wrappers/__utility
-+  COMPONENT clang-resource-headers)
-+
-+install(
-   FILES ${ppc_wrapper_files}
-   DESTINATION ${header_install_dir}/ppc_wrappers
-   COMPONENT clang-resource-headers)
-@@ -663,6 +673,12 @@
-   EXCLUDE_FROM_ALL
-   COMPONENT cuda-resource-headers)
  
-+install(
-+  FILES ${cuda_wrapper_utility_files}
-+  DESTINATION ${header_install_dir}/cuda_wrappers/__utility
-+  EXCLUDE_FROM_ALL
-+  COMPONENT cuda-resource-headers)
+ char c = 'a'; c
+diff -ruN --strip-trailing-cr a/clang/test/SemaCXX/cxx2b-deducing-this.cpp b/clang/test/SemaCXX/cxx2b-deducing-this.cpp
+--- a/clang/test/SemaCXX/cxx2b-deducing-this.cpp
++++ b/clang/test/SemaCXX/cxx2b-deducing-this.cpp
+@@ -1357,3 +1357,35 @@
+ }
+ 
+ }
 +
- install(
-   FILES ${cuda_files}
-   DESTINATION ${header_install_dir}
-diff -ruN --strip-trailing-cr a/clang/lib/Headers/cuda_wrappers/__utility/declval.h b/clang/lib/Headers/cuda_wrappers/__utility/declval.h
---- a/clang/lib/Headers/cuda_wrappers/__utility/declval.h
-+++ b/clang/lib/Headers/cuda_wrappers/__utility/declval.h
-@@ -0,0 +1,28 @@
-+#ifndef __CUDA_WRAPPERS_UTILITY_DECLVAL_H__
-+#define __CUDA_WRAPPERS_UTILITY_DECLVAL_H__
++namespace GH147046_regression {
 +
-+#include_next <__utility/declval.h>
++template <typename z> struct ai {
++    ai(z::ah);
++};
 +
-+// The stuff below is the exact copy of the <__utility/declval.h>,
-+// but with __device__ attribute applied to the functions, so it works on a GPU.
++template <typename z> struct ak {
++    template <typename am> void an(am, z);
++    template <typename am> static void an(am, ai<z>);
++};
++template <typename> struct ao {};
 +
-+_LIBCPP_BEGIN_NAMESPACE_STD
++template <typename ap>
++auto ar(ao<ap> at) -> decltype(ak<ap>::an(at, 0));
++// expected-note@-1 {{candidate template ignored: substitution failure [with ap = GH147046_regression::ay]: no matching function for call to 'an'}}
 +
-+// Suppress deprecation notice for volatile-qualified return type resulting
-+// from volatile-qualified types _Tp.
-+_LIBCPP_SUPPRESS_DEPRECATED_PUSH
-+template <class _Tp> __attribute__((device)) _Tp &&__declval(int);
-+template <class _Tp> __attribute__((device)) _Tp __declval(long);
-+_LIBCPP_SUPPRESS_DEPRECATED_POP
++class aw;
++struct ax {
++    typedef int ah;
++};
++struct ay {
++    typedef aw ah;
++};
 +
-+template <class _Tp>
-+__attribute__((device)) _LIBCPP_HIDE_FROM_ABI decltype(std::__declval<_Tp>(0))
-+declval() _NOEXCEPT {
-+  static_assert(!__is_same(_Tp, _Tp),
-+                "std::declval can only be used in an unevaluated context. "
-+                "It's likely that your current usage is trying to extract a "
-+                "value from the function.");
++ao<ay> az ;
++ai<ax> bd(0);
++void f() {
++    ar(az); // expected-error {{no matching function for call to 'ar'}}
 +}
 +
-+_LIBCPP_END_NAMESPACE_STD
-+#endif // __CUDA_WRAPPERS_UTILITY_DECLVAL_H__
-diff -ruN --strip-trailing-cr a/clang/lib/Sema/AnalysisBasedWarnings.cpp b/clang/lib/Sema/AnalysisBasedWarnings.cpp
---- a/clang/lib/Sema/AnalysisBasedWarnings.cpp
-+++ b/clang/lib/Sema/AnalysisBasedWarnings.cpp
-@@ -1943,11 +1943,26 @@
- 
-   void handleNoMutexHeld(const NamedDecl *D, ProtectedOperationKind POK,
-                          AccessKind AK, SourceLocation Loc) override {
--    assert((POK == POK_VarAccess || POK == POK_VarDereference) &&
--           "Only works for variables");
--    unsigned DiagID = POK == POK_VarAccess?
--                        diag::warn_variable_requires_any_lock:
--                        diag::warn_var_deref_requires_any_lock;
-+    unsigned DiagID = 0;
-+    switch (POK) {
-+    case POK_VarAccess:
-+    case POK_PassByRef:
-+    case POK_ReturnByRef:
-+    case POK_PassPointer:
-+    case POK_ReturnPointer:
-+      DiagID = diag::warn_variable_requires_any_lock;
-+      break;
-+    case POK_VarDereference:
-+    case POK_PtPassByRef:
-+    case POK_PtReturnByRef:
-+    case POK_PtPassPointer:
-+    case POK_PtReturnPointer:
-+      DiagID = diag::warn_var_deref_requires_any_lock;
-+      break;
-+    case POK_FunctionCall:
-+      llvm_unreachable("Only works for variables");
-+      break;
-+    }
-     PartialDiagnosticAt Warning(Loc, S.PDiag(DiagID)
-       << D << getLockKindFromAccessKind(AK));
-     Warnings.emplace_back(std::move(Warning), getNotes());
-diff -ruN --strip-trailing-cr a/clang/test/ClangScanDeps/visible-modules.c b/clang/test/ClangScanDeps/visible-modules.c
---- a/clang/test/ClangScanDeps/visible-modules.c
-+++ b/clang/test/ClangScanDeps/visible-modules.c
-@@ -30,7 +30,7 @@
- // RUN: %clang @%t/A.rsp
- 
- /// Verify compilation & scan agree with each other.
--// RUN: not %clang @%t/tu.rsp 2>&1 | FileCheck %s --check-prefix=COMPILE
-+// RUN: not %clang @%t/tu.rsp -o %t/blah.o 2>&1 | FileCheck %s --check-prefix=COMPILE
- 
- // SINGLE:        "visible-clang-modules": [
- // SINGLE-NEXT:     "A"
-diff -ruN --strip-trailing-cr a/clang/test/Frontend/absolute-paths.c b/clang/test/Frontend/absolute-paths.c
---- a/clang/test/Frontend/absolute-paths.c
-+++ b/clang/test/Frontend/absolute-paths.c
-@@ -8,9 +8,9 @@
- 
- #include "absolute-paths.h"
++}
+diff -ruN --strip-trailing-cr a/clang/test/SemaCXX/wreturn-always-throws.cpp b/clang/test/SemaCXX/wreturn-always-throws.cpp
+--- a/clang/test/SemaCXX/wreturn-always-throws.cpp
++++ b/clang/test/SemaCXX/wreturn-always-throws.cpp
+@@ -1,4 +1,4 @@
+-// RUN: %clang_cc1 -fsyntax-only -fcxx-exceptions -fexceptions -Wreturn-type -verify %s
++// RUN: %clang_cc1 -fsyntax-only -fcxx-exceptions -fexceptions -Wreturn-type -Winvalid-noreturn -verify %s
+ // expected-no-diagnostics
  
--// Check that the bogus prefix we added is stripped out even if absolute paths
--// are disabled.
--// NORMAL-NOT: SystemHeaderPrefix
-+// Check whether the diagnostic from the header above includes the dummy
-+// directory in the path.
-+// NORMAL: SystemHeaderPrefix
- // ABSOLUTE-NOT: SystemHeaderPrefix
- // CHECK: warning: non-void function does not return a value
+ namespace std {
+@@ -44,3 +44,22 @@
+   throwErrorTemplate("ERROR");
+   (void)ensureZeroTemplate(42);
+ }
++
++// Ensure that explicit specialization of a member function does not inherit
++// the warning from the primary template.
++
++template<typename T>
++struct S {
++  void f();
++  void g();
++};
++
++template<typename T>
++void S<T>::f() { throw 0; } 
++template<>
++void S<int>::f() {}
++
++template<typename T> 
++void S<T>::g() {}  
++template<> 
++void S<int>::g() { throw 0; }
+diff -ruN --strip-trailing-cr a/clang/unittests/Format/FormatTest.cpp b/clang/unittests/Format/FormatTest.cpp
+--- a/clang/unittests/Format/FormatTest.cpp
++++ b/clang/unittests/Format/FormatTest.cpp
+@@ -12103,6 +12103,8 @@
+   Prefix = "void a() const &;\n"
+            "void b() const &;\n";
+   verifyFormat(Prefix + "int *x;", Prefix + "int* x;", DerivePointerAlignment);
++
++  verifyGoogleFormat("MACRO(int*, std::function<void() &&>);");
+ }
  
-diff -ruN --strip-trailing-cr a/clang/test/Frontend/simplify-paths.c b/clang/test/Frontend/simplify-paths.c
---- a/clang/test/Frontend/simplify-paths.c
-+++ b/clang/test/Frontend/simplify-paths.c
-@@ -1,18 +0,0 @@
--// REQUIRES: shell
--
--// RUN: rm -rf %t
--// RUN: mkdir -p %t/a/b/
--// RUN: echo 'void x;' > %t/test.h
--// RUN: echo 'const void x;' > %t/header_with_a_really_long_name.h
--// RUN: ln -s %t/header_with_a_really_long_name.h %t/a/shorter_name.h
+ TEST_F(FormatTest, PointerAlignmentFallback) {
+diff -ruN --strip-trailing-cr a/clang-tools-extra/clangd/refactor/tweaks/CMakeLists.txt b/clang-tools-extra/clangd/refactor/tweaks/CMakeLists.txt
+--- a/clang-tools-extra/clangd/refactor/tweaks/CMakeLists.txt
++++ b/clang-tools-extra/clangd/refactor/tweaks/CMakeLists.txt
+@@ -14,9 +14,9 @@
+ add_clang_library(clangDaemonTweaks OBJECT
+   AddUsing.cpp
+   AnnotateHighlightings.cpp
++  DumpAST.cpp
+   DefineInline.cpp
+   DefineOutline.cpp
+-  DumpAST.cpp
+   ExpandDeducedType.cpp
+   ExpandMacro.cpp
+   ExtractFunction.cpp
+@@ -24,7 +24,6 @@
+   MemberwiseConstructor.cpp
+   ObjCLocalizeStringLiteral.cpp
+   ObjCMemberwiseInitializer.cpp
+-  OverridePureVirtuals.cpp
+   PopulateSwitch.cpp
+   RawStringLiteral.cpp
+   RemoveUsingNamespace.cpp
+diff -ruN --strip-trailing-cr a/clang-tools-extra/clangd/refactor/tweaks/OverridePureVirtuals.cpp b/clang-tools-extra/clangd/refactor/tweaks/OverridePureVirtuals.cpp
+--- a/clang-tools-extra/clangd/refactor/tweaks/OverridePureVirtuals.cpp
++++ b/clang-tools-extra/clangd/refactor/tweaks/OverridePureVirtuals.cpp
+@@ -1,374 +0,0 @@
+-//===--- OverridePureVirtuals.cpp --------------------------------*- C++-*-===//
 -//
--// RUN: %clang_cc1 -fsyntax-only -I %t %s 2> %t/output.txt || true
--// RUN: cat %t/output.txt | FileCheck %s
--
--// Check that we strip '..' by canonicalising the path...
--#include "a/b/../../test.h"
--// CHECK: simplify-paths.c.tmp/test.h:1:6: error: variable has incomplete type 'void'
--
--// ... but only if the resulting path is actually shorter.
--#include "a/b/../shorter_name.h"
--// CHECK: simplify-paths.c.tmp/a/b/../shorter_name.h:1:12: error: variable has incomplete type 'const void'
-diff -ruN --strip-trailing-cr a/clang/test/SemaCXX/warn-thread-safety-analysis.cpp b/clang/test/SemaCXX/warn-thread-safety-analysis.cpp
---- a/clang/test/SemaCXX/warn-thread-safety-analysis.cpp
-+++ b/clang/test/SemaCXX/warn-thread-safety-analysis.cpp
-@@ -6196,6 +6196,8 @@
-   Mutex mu;
-   Foo foo GUARDED_BY(mu);
-   Foo* foo_ptr PT_GUARDED_BY(mu);
-+  Foo foo_depr GUARDED_VAR;          // test deprecated attribute
-+  Foo* foo_ptr_depr PT_GUARDED_VAR;  // test deprecated attribute
- 
-   Foo returns_value_locked() {
-     MutexLock lock(&mu);
-@@ -6297,6 +6299,18 @@
-     return *foo_ptr;          // expected-warning {{returning the value that 'foo_ptr' points to by reference requires holding mutex 'mu' exclusively}}
+-// Part of the LLVM Project, under the Apache License v2.0 with LLVM Exceptions.
+-// See https://llvm.org/LICENSE.txt for license information.
+-// SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception
+-//
+-//===----------------------------------------------------------------------===//
+-//
+-// Tweak to automatically generate stubs for pure virtual methods inherited from
+-// base classes.
+-//
+-// Purpose:
+-//   - Simplifies making a derived class concrete by automating the creation of
+-//     required method overrides from abstract bases.
+-//
+-// Tweak Summary:
+-//
+-// 1. Activation Conditions (prepare):
+-//    - The tweak activates when the cursor is over a C++ class definition.
+-//    - The class must be abstract (it, or its base classes, have unimplemented
+-//      pure virtual functions).
+-//    - It must also inherit from at least one other abstract class.
+-//
+-// 2. Identifying Missing Methods:
+-//    - The tweak scans the inheritance hierarchy of the current class.
+-//    - It identifies all unique pure virtual methods from base classes
+-//      that are not yet implemented or overridden.
+-//    - These missing methods are then grouped by their original access
+-//      specifier (e.g., public, protected).
+-//
+-// 3. Code Generation and Insertion:
+-//    - For each group of missing methods, stubs are inserted.
+-//    - If an access specifier section (like `public:`) exists, stubs are
+-//      inserted there; otherwise, a new section is created and appended.
+-//    - Each generated stub includes the `override` keyword, a `// TODO:`
+-//      comment, and a `static_assert(false, ...)` to force a compile-time
+-//      error if the method remains unimplemented.
+-//    - The base method's signature is adjusted (e.g., `virtual` and `= 0`
+-//      are removed for the override).
+-//
+-// 4. Code Action Provided:
+-//    - A single code action titled "Override pure virtual methods" is offered.
+-//    - Applying this action results in a single source file modification
+-//      containing all the generated method stubs.
+-//
+-// Example:
+-//
+-//  class Base {
+-//  public:
+-//    virtual void publicMethod() = 0;
+-//  protected:
+-//    virtual auto privateMethod() const -> int = 0;
+-//  };
+-//
+-// Before:
+-//                              // cursor here
+-//  class Derived : public Base {}^;
+-//
+-// After:
+-//
+-// class Derived : public Base {
+-//  public:
+-//   void publicMethod() override {
+-//     // TODO: Implement this pure virtual method.
+-//     static_assert(false, "Method `publicMethod` is not implemented.");
+-//   }
+-//
+-//  protected:
+-//   auto privateMethod() const -> int override {
+-//     // TODO: Implement this pure virtual method.
+-//     static_assert(false, "Method `privateMethod` is not implemented.");
+-//   }
+-// };
+-//
+-//===----------------------------------------------------------------------===//
+-
+-#include "refactor/Tweak.h"
+-#include "support/Token.h"
+-
+-#include "clang/AST/ASTContext.h"
+-#include "clang/AST/DeclCXX.h"
+-#include "clang/AST/Type.h"
+-#include "clang/AST/TypeLoc.h"
+-#include "clang/Basic/LLVM.h"
+-#include "clang/Basic/SourceLocation.h"
+-#include "clang/Tooling/Core/Replacement.h"
+-#include "llvm/ADT/DenseSet.h"
+-#include "llvm/Support/FormatVariadic.h"
+-#include <string>
+-
+-namespace clang {
+-namespace clangd {
+-namespace {
+-
+-// This function removes the "virtual" and the "= 0" at the end;
+-// e.g.:
+-//   "virtual void foo(int var = 0) = 0"  // input.
+-//   "void foo(int var = 0)"              // output.
+-std::string removePureVirtualSyntax(const std::string &MethodDecl,
+-                                    const LangOptions &LangOpts) {
+-  assert(!MethodDecl.empty());
+-
+-  TokenStream TS = lex(MethodDecl, LangOpts);
+-
+-  std::string DeclString;
+-  for (const clangd::Token &Tk : TS.tokens()) {
+-    if (Tk.Kind == clang::tok::raw_identifier && Tk.text() == "virtual")
+-      continue;
+-
+-    // If the ending two tokens are "= 0", we break here and we already have the
+-    // method's string without the pure virtual syntax.
+-    const auto &Next = Tk.next();
+-    if (Next.next().Kind == tok::eof && Tk.Kind == clang::tok::equal &&
+-        Next.text() == "0")
+-      break;
+-
+-    DeclString += Tk.text();
+-    if (Tk.Kind != tok::l_paren && Next.Kind != tok::comma &&
+-        Next.Kind != tok::r_paren && Next.Kind != tok::l_paren)
+-      DeclString += ' ';
+-  }
+-  // Trim the last whitespace.
+-  if (DeclString.back() == ' ')
+-    DeclString.pop_back();
+-
+-  return DeclString;
+-}
+-
+-class OverridePureVirtuals final : public Tweak {
+-public:
+-  const char *id() const final; // defined by REGISTER_TWEAK.
+-  bool prepare(const Selection &Sel) override;
+-  Expected<Effect> apply(const Selection &Sel) override;
+-  std::string title() const override { return "Override pure virtual methods"; }
+-  llvm::StringLiteral kind() const override {
+-    return CodeAction::QUICKFIX_KIND;
+-  }
+-
+-private:
+-  // Stores the CXXRecordDecl of the class being modified.
+-  const CXXRecordDecl *CurrentDeclDef = nullptr;
+-  // Stores pure virtual methods that need overriding, grouped by their original
+-  // access specifier.
+-  llvm::MapVector<AccessSpecifier, llvm::SmallVector<const CXXMethodDecl *>>
+-      MissingMethodsByAccess;
+-  // Stores the source locations of existing access specifiers in CurrentDecl.
+-  llvm::MapVector<AccessSpecifier, SourceLocation> AccessSpecifierLocations;
+-  // Helper function to gather information before applying the tweak.
+-  void collectMissingPureVirtuals();
+-};
+-
+-REGISTER_TWEAK(OverridePureVirtuals)
+-
+-// Function to get all unique pure virtual methods from the entire
+-// base class hierarchy of CurrentDeclDef.
+-llvm::SmallVector<const clang::CXXMethodDecl *>
+-getAllUniquePureVirtualsFromBaseHierarchy(
+-    const clang::CXXRecordDecl *CurrentDeclDef) {
+-  llvm::SmallVector<const clang::CXXMethodDecl *> AllPureVirtualsInHierarchy;
+-  llvm::DenseSet<const clang::CXXMethodDecl *> CanonicalPureVirtualsSeen;
+-
+-  if (!CurrentDeclDef || !CurrentDeclDef->getDefinition())
+-    return AllPureVirtualsInHierarchy;
+-
+-  const clang::CXXRecordDecl *Def = CurrentDeclDef->getDefinition();
+-
+-  Def->forallBases([&](const clang::CXXRecordDecl *BaseDefinition) {
+-    for (const clang::CXXMethodDecl *Method : BaseDefinition->methods()) {
+-      if (Method->isPureVirtual() &&
+-          CanonicalPureVirtualsSeen.insert(Method->getCanonicalDecl()).second)
+-        AllPureVirtualsInHierarchy.emplace_back(Method);
+-    }
+-    // Continue iterating through all bases.
+-    return true;
+-  });
+-
+-  return AllPureVirtualsInHierarchy;
+-}
+-
+-// Gets canonical declarations of methods already overridden or implemented in
+-// class D.
+-llvm::SetVector<const CXXMethodDecl *>
+-getImplementedOrOverriddenCanonicals(const CXXRecordDecl *D) {
+-  llvm::SetVector<const CXXMethodDecl *> ImplementedSet;
+-  for (const CXXMethodDecl *M : D->methods()) {
+-    // If M provides an implementation for any virtual method it overrides.
+-    // A method is an "implementation" if it's virtual and not pure.
+-    // Or if it directly overrides a base method.
+-    for (const CXXMethodDecl *OverriddenM : M->overridden_methods())
+-      ImplementedSet.insert(OverriddenM->getCanonicalDecl());
+-  }
+-  return ImplementedSet;
+-}
+-
+-// Get the location of every colon of the `AccessSpecifier`.
+-llvm::MapVector<AccessSpecifier, SourceLocation>
+-getSpecifierLocations(const CXXRecordDecl *D) {
+-  llvm::MapVector<AccessSpecifier, SourceLocation> Locs;
+-  for (auto *DeclNode : D->decls()) {
+-    if (const auto *ASD = llvm::dyn_cast<AccessSpecDecl>(DeclNode))
+-      Locs[ASD->getAccess()] = ASD->getColonLoc();
+-  }
+-  return Locs;
+-}
+-
+-bool hasAbstractBaseAncestor(const clang::CXXRecordDecl *CurrentDecl) {
+-  assert(CurrentDecl && CurrentDecl->getDefinition());
+-
+-  return llvm::any_of(
+-      CurrentDecl->getDefinition()->bases(), [](CXXBaseSpecifier BaseSpec) {
+-        const auto *D = BaseSpec.getType()->getAsCXXRecordDecl();
+-        const auto *Def = D ? D->getDefinition() : nullptr;
+-        return Def && Def->isAbstract();
+-      });
+-}
+-
+-// The tweak is available if the selection is over an abstract C++ class
+-// definition that also inherits from at least one other abstract class.
+-bool OverridePureVirtuals::prepare(const Selection &Sel) {
+-  const SelectionTree::Node *Node = Sel.ASTSelection.commonAncestor();
+-  if (!Node)
+-    return false;
+-
+-  // Make sure we have a definition.
+-  CurrentDeclDef = Node->ASTNode.get<CXXRecordDecl>();
+-  if (!CurrentDeclDef || !CurrentDeclDef->getDefinition())
+-    return false;
+-
+-  // From now on, we should work with the definition.
+-  CurrentDeclDef = CurrentDeclDef->getDefinition();
+-
+-  // Only offer for abstract classes with abstract bases.
+-  return CurrentDeclDef->isAbstract() &&
+-         hasAbstractBaseAncestor(CurrentDeclDef);
+-}
+-
+-// Collects all pure virtual methods from base classes that `CurrentDeclDef` has
+-// not yet overridden, grouped by their original access specifier.
+-//
+-// Results are stored in `MissingMethodsByAccess` and `AccessSpecifierLocations`
+-// is also populated.
+-void OverridePureVirtuals::collectMissingPureVirtuals() {
+-  if (!CurrentDeclDef)
+-    return;
+-
+-  AccessSpecifierLocations = getSpecifierLocations(CurrentDeclDef);
+-  MissingMethodsByAccess.clear();
+-
+-  // Get all unique pure virtual methods from the entire base class hierarchy.
+-  llvm::SmallVector<const CXXMethodDecl *> AllPureVirtualsInHierarchy =
+-      getAllUniquePureVirtualsFromBaseHierarchy(CurrentDeclDef);
+-
+-  // Get methods already implemented or overridden in CurrentDecl.
+-  const auto ImplementedOrOverriddenSet =
+-      getImplementedOrOverriddenCanonicals(CurrentDeclDef);
+-
+-  // Filter AllPureVirtualsInHierarchy to find those not in
+-  // ImplementedOrOverriddenSet, which needs to be overriden.
+-  for (const CXXMethodDecl *BaseMethod : AllPureVirtualsInHierarchy) {
+-    bool AlreadyHandled = ImplementedOrOverriddenSet.contains(BaseMethod);
+-    if (!AlreadyHandled)
+-      MissingMethodsByAccess[BaseMethod->getAccess()].emplace_back(BaseMethod);
+-  }
+-}
+-
+-std::string generateOverrideString(const CXXMethodDecl *Method,
+-                                   const LangOptions &LangOpts) {
+-  std::string MethodDecl;
+-  auto OS = llvm::raw_string_ostream(MethodDecl);
+-  Method->print(OS);
+-
+-  return llvm::formatv(
+-             "\n  {0} override {{\n"
+-             "    // TODO: Implement this pure virtual method.\n"
+-             "    static_assert(false, \"Method `{1}` is not implemented.\");\n"
+-             "  }",
+-             removePureVirtualSyntax(MethodDecl, LangOpts), Method->getName())
+-      .str();
+-}
+-
+-// Free function to generate the string for a group of method overrides.
+-std::string generateOverridesStringForGroup(
+-    llvm::SmallVector<const CXXMethodDecl *> Methods,
+-    const LangOptions &LangOpts) {
+-  llvm::SmallVector<std::string> MethodsString;
+-  MethodsString.reserve(Methods.size());
+-
+-  for (const CXXMethodDecl *Method : Methods) {
+-    MethodsString.emplace_back(generateOverrideString(Method, LangOpts));
+-  }
+-
+-  return llvm::join(MethodsString, "\n") + '\n';
+-}
+-
+-Expected<Tweak::Effect> OverridePureVirtuals::apply(const Selection &Sel) {
+-  // The correctness of this tweak heavily relies on the accurate population of
+-  // these members.
+-  collectMissingPureVirtuals();
+-  // The `prepare` should prevent this. If the prepare identifies an abstract
+-  // method, then is must have missing methods.
+-  assert(!MissingMethodsByAccess.empty());
+-
+-  const auto &SM = Sel.AST->getSourceManager();
+-  const auto &LangOpts = Sel.AST->getLangOpts();
+-
+-  tooling::Replacements EditReplacements;
+-  // Stores text for new access specifier sections that are not already present
+-  // in the class.
+-  // Example:
+-  //  public:    // ...
+-  //  protected: // ...
+-  std::string NewSectionsToAppendText;
+-
+-  for (const auto &[AS, Methods] : MissingMethodsByAccess) {
+-    assert(!Methods.empty());
+-
+-    std::string MethodsGroupString =
+-        generateOverridesStringForGroup(Methods, LangOpts);
+-
+-    auto *ExistingSpecLocIter = AccessSpecifierLocations.find(AS);
+-    bool ASExists = ExistingSpecLocIter != AccessSpecifierLocations.end();
+-    if (ASExists) {
+-      // Access specifier section already exists in the class.
+-      // Get location immediately *after* the colon.
+-      SourceLocation InsertLoc =
+-          ExistingSpecLocIter->second.getLocWithOffset(1);
+-
+-      // Create a replacement to insert the method declarations.
+-      // The replacement is at InsertLoc, has length 0 (insertion), and uses
+-      // InsertionText.
+-      std::string InsertionText = MethodsGroupString;
+-      tooling::Replacement Rep(SM, InsertLoc, 0, InsertionText);
+-      if (auto Err = EditReplacements.add(Rep))
+-        return llvm::Expected<Tweak::Effect>(std::move(Err));
+-    } else {
+-      // Access specifier section does not exist in the class.
+-      // These methods will be grouped into NewSectionsToAppendText and added
+-      // towards the end of the class definition.
+-      NewSectionsToAppendText +=
+-          getAccessSpelling(AS).str() + ':' + MethodsGroupString;
+-    }
+-  }
+-
+-  // After processing all access specifiers, add any newly created sections
+-  // (stored in NewSectionsToAppendText) to the end of the class.
+-  if (!NewSectionsToAppendText.empty()) {
+-    // AppendLoc is the SourceLocation of the closing brace '}' of the class.
+-    // The replacement will insert text *before* this closing brace.
+-    SourceLocation AppendLoc = CurrentDeclDef->getBraceRange().getEnd();
+-    std::string FinalAppendText = std::move(NewSectionsToAppendText);
+-
+-    if (!CurrentDeclDef->decls_empty() || !EditReplacements.empty()) {
+-      FinalAppendText = '\n' + FinalAppendText;
+-    }
+-
+-    // Create a replacement to append the new sections.
+-    tooling::Replacement Rep(SM, AppendLoc, 0, FinalAppendText);
+-    if (auto Err = EditReplacements.add(Rep))
+-      return llvm::Expected<Tweak::Effect>(std::move(Err));
+-  }
+-
+-  if (EditReplacements.empty()) {
+-    return llvm::make_error<llvm::StringError>(
+-        "No changes to apply (internal error or no methods generated).",
+-        llvm::inconvertibleErrorCode());
+-  }
+-
+-  // Return the collected replacements as the effect of this tweak.
+-  return Effect::mainFileEdit(SM, EditReplacements);
+-}
+-
+-} // namespace
+-} // namespace clangd
+-} // namespace clang
+diff -ruN --strip-trailing-cr a/clang-tools-extra/clangd/unittests/CMakeLists.txt b/clang-tools-extra/clangd/unittests/CMakeLists.txt
+--- a/clang-tools-extra/clangd/unittests/CMakeLists.txt
++++ b/clang-tools-extra/clangd/unittests/CMakeLists.txt
+@@ -131,7 +131,6 @@
+   tweaks/MemberwiseConstructorTests.cpp
+   tweaks/ObjCLocalizeStringLiteralTests.cpp
+   tweaks/ObjCMemberwiseInitializerTests.cpp
+-  tweaks/OverridePureVirtualsTests.cpp
+   tweaks/PopulateSwitchTests.cpp
+   tweaks/RawStringLiteralTests.cpp
+   tweaks/RemoveUsingNamespaceTests.cpp
+diff -ruN --strip-trailing-cr a/clang-tools-extra/clangd/unittests/tweaks/OverridePureVirtualsTests.cpp b/clang-tools-extra/clangd/unittests/tweaks/OverridePureVirtualsTests.cpp
+--- a/clang-tools-extra/clangd/unittests/tweaks/OverridePureVirtualsTests.cpp
++++ b/clang-tools-extra/clangd/unittests/tweaks/OverridePureVirtualsTests.cpp
+@@ -1,720 +0,0 @@
+-//===-- OverridePureVirtualsTests.cpp ---------------------------*- C++ -*-===//
+-//
+-// Part of the LLVM Project, under the Apache License v2.0 with LLVM Exceptions.
+-// See https://llvm.org/LICENSE.txt for license information.
+-// SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception
+-//
+-//===----------------------------------------------------------------------===//
+-
+-#include "TweakTesting.h"
+-#include "gtest/gtest.h"
+-
+-namespace clang {
+-namespace clangd {
+-namespace {
+-
+-class OverridePureVirtualsTests : public TweakTest {
+-protected:
+-  OverridePureVirtualsTests() : TweakTest("OverridePureVirtuals") {}
+-};
+-
+-TEST_F(OverridePureVirtualsTests, MinimalUnavailable) {
+-  EXPECT_UNAVAILABLE("class ^C {};");
+-}
+-
+-TEST_F(OverridePureVirtualsTests, MinimalAvailable) {
+-  EXPECT_AVAILABLE(R"cpp(
+-class B { public: virtual void Foo() = 0; };
+-class ^C : public B {};
+-)cpp");
+-}
+-
+-TEST_F(OverridePureVirtualsTests, UnavailableWhenOverriden) {
+-  EXPECT_UNAVAILABLE(
+-      R"cpp(
+-class B {
+-public:
+-  virtual void foo() = 0;
+-};
+-
+-class ^D : public B {
+-public:
+-  void foo() override;
+-};
+-)cpp");
+-}
+-
+-TEST_F(OverridePureVirtualsTests, AvailabilityNoOverride) {
+-  EXPECT_AVAILABLE(R"cpp(
+-class Base {
+-public:
+-virtual ~Base() = default;
+-virtual void F1() = 0;
+-virtual void F2() = 0;
+-};
+-
+-class ^Derived : public Base {
+-public:
+-};
+-
+-)cpp");
+-}
+-
+-TEST_F(OverridePureVirtualsTests, AvailabilityPartiallyOverridden) {
+-  EXPECT_AVAILABLE(R"cpp(
+-class Base {
+-public:
+-virtual ~Base() = default;
+-virtual void F1() = 0;
+-virtual void F2() = 0;
+-};
+-
+-class ^Derived : public Base {
+-public:
+-void F1() override;
+-};
+-)cpp");
+-}
+-
+-TEST_F(OverridePureVirtualsTests, EmptyDerivedClass) {
+-  const char *Before = R"cpp(
+-class Base {
+-public:
+-virtual ~Base() = default;
+-virtual void F1() = 0;
+-virtual void F2(int P1, const int &P2) = 0;
+-};
+-
+-class ^Derived : public Base {};
+-)cpp";
+-  const auto *Expected = R"cpp(
+-class Base {
+-public:
+-virtual ~Base() = default;
+-virtual void F1() = 0;
+-virtual void F2(int P1, const int &P2) = 0;
+-};
+-
+-class Derived : public Base {
+-public:
+-  void F1() override {
+-    // TODO: Implement this pure virtual method.
+-    static_assert(false, "Method `F1` is not implemented.");
+-  }
+-
+-  void F2(int P1, const int & P2) override {
+-    // TODO: Implement this pure virtual method.
+-    static_assert(false, "Method `F2` is not implemented.");
+-  }
+-};
+-)cpp";
+-  auto Applied = apply(Before);
+-  EXPECT_EQ(Expected, Applied) << "Applied result:\n" << Applied;
+-}
+-
+-TEST_F(OverridePureVirtualsTests, SingleBaseClassPartiallyImplemented) {
+-  auto Applied = apply(
+-      R"cpp(
+-class Base {
+-public:
+-virtual ~Base() = default;
+-virtual void F1() = 0;
+-virtual void F2() = 0;
+-};
+-
+-class ^Derived : public Base {
+-public:
+-  void F1() override;
+-};
+-)cpp");
+-
+-  const auto *Expected = R"cpp(
+-class Base {
+-public:
+-virtual ~Base() = default;
+-virtual void F1() = 0;
+-virtual void F2() = 0;
+-};
+-
+-class Derived : public Base {
+-public:
+-  void F2() override {
+-    // TODO: Implement this pure virtual method.
+-    static_assert(false, "Method `F2` is not implemented.");
+-  }
+-
+-  void F1() override;
+-};
+-)cpp";
+-  EXPECT_EQ(Applied, Expected) << "Applied result:\n" << Applied;
+-}
+-
+-TEST_F(OverridePureVirtualsTests, MultipleDirectBaseClasses) {
+-  const char *Before = R"cpp(
+-class Base1 {
+-public:
+-  virtual void func1() = 0;
+-};
+-class Base2 {
+-protected:
+-  virtual bool func2(char c) const = 0;
+-};
+-
+-class ^Derived : public Base1, public Base2 {};
+-)cpp";
+-  const auto *Expected = R"cpp(
+-class Base1 {
+-public:
+-  virtual void func1() = 0;
+-};
+-class Base2 {
+-protected:
+-  virtual bool func2(char c) const = 0;
+-};
+-
+-class Derived : public Base1, public Base2 {
+-public:
+-  void func1() override {
+-    // TODO: Implement this pure virtual method.
+-    static_assert(false, "Method `func1` is not implemented.");
+-  }
+-protected:
+-  bool func2(char c) const override {
+-    // TODO: Implement this pure virtual method.
+-    static_assert(false, "Method `func2` is not implemented.");
+-  }
+-};
+-)cpp";
+-  auto Applied = apply(Before);
+-  EXPECT_EQ(Expected, Applied) << "Applied result:\n" << Applied;
+-}
+-
+-TEST_F(OverridePureVirtualsTests, UnnamedParametersInBase) {
+-  const char *Before = R"cpp(
+-struct S {};
+-class Base {
+-public:
+-  virtual void func(int, const S&, char*) = 0;
+-};
+-
+-class ^Derived : public Base {};
+-)cpp";
+-
+-  const auto *Expected = R"cpp(
+-struct S {};
+-class Base {
+-public:
+-  virtual void func(int, const S&, char*) = 0;
+-};
+-
+-class Derived : public Base {
+-public:
+-  void func(int, const S &, char *) override {
+-    // TODO: Implement this pure virtual method.
+-    static_assert(false, "Method `func` is not implemented.");
+-  }
+-};
+-)cpp";
+-  auto Applied = apply(Before);
+-  EXPECT_EQ(Expected, Applied) << "Applied result:\n" << Applied;
+-}
+-
+-TEST_F(OverridePureVirtualsTests, DiamondInheritance) {
+-  const char *Before = R"cpp(
+-class Top {
+-public:
+-  virtual ~Top() = default;
+-  virtual void diamond_func() = 0;
+-};
+-class Left : virtual public Top {};
+-class Right : virtual public Top {};
+-class ^Bottom : public Left, public Right {};
+-)cpp";
+-  const auto *Expected = R"cpp(
+-class Top {
+-public:
+-  virtual ~Top() = default;
+-  virtual void diamond_func() = 0;
+-};
+-class Left : virtual public Top {};
+-class Right : virtual public Top {};
+-class Bottom : public Left, public Right {
+-public:
+-  void diamond_func() override {
+-    // TODO: Implement this pure virtual method.
+-    static_assert(false, "Method `diamond_func` is not implemented.");
+-  }
+-};
+-)cpp";
+-  auto Applied = apply(Before);
+-  EXPECT_EQ(Expected, Applied) << "Applied result:\n" << Applied;
+-}
+-
+-TEST_F(OverridePureVirtualsTests, MixedAccessSpecifiers) {
+-  const char *Before = R"cpp(
+-class Base {
+-public:
+-  virtual void pub_func() = 0;
+-  virtual void pub_func2(char) const = 0;
+-protected:
+-  virtual int prot_func(int x) const = 0;
+-};
+-
+-class ^Derived : public Base {
+-  int member; // Existing member
+-public:
+-  Derived(int m) : member(m) {}
+-};
+-)cpp";
+-  const auto *Expected = R"cpp(
+-class Base {
+-public:
+-  virtual void pub_func() = 0;
+-  virtual void pub_func2(char) const = 0;
+-protected:
+-  virtual int prot_func(int x) const = 0;
+-};
+-
+-class Derived : public Base {
+-  int member; // Existing member
+-public:
+-  void pub_func() override {
+-    // TODO: Implement this pure virtual method.
+-    static_assert(false, "Method `pub_func` is not implemented.");
+-  }
+-
+-  void pub_func2(char) const override {
+-    // TODO: Implement this pure virtual method.
+-    static_assert(false, "Method `pub_func2` is not implemented.");
+-  }
+-
+-  Derived(int m) : member(m) {}
+-
+-protected:
+-  int prot_func(int x) const override {
+-    // TODO: Implement this pure virtual method.
+-    static_assert(false, "Method `prot_func` is not implemented.");
+-  }
+-};
+-)cpp";
+-  auto Applied = apply(Before);
+-  EXPECT_EQ(Expected, Applied) << "Applied result:\n" << Applied;
+-}
+-
+-TEST_F(OverridePureVirtualsTests, OutOfOrderMixedAccessSpecifiers) {
+-  const char *Before = R"cpp(
+-class Base {
+-public:
+-  virtual void pub_func() = 0;
+-  virtual void pub_func2(char) const = 0;
+-protected:
+-  virtual int prot_func(int x) const = 0;
+-};
+-
+-class ^Derived : public Base {
+-  int member; // Existing member
+-protected:
+-  void foo();
+-public:
+-  Derived(int m) : member(m) {}
+-};
+-)cpp";
+-  const auto *Expected = R"cpp(
+-class Base {
+-public:
+-  virtual void pub_func() = 0;
+-  virtual void pub_func2(char) const = 0;
+-protected:
+-  virtual int prot_func(int x) const = 0;
+-};
+-
+-class Derived : public Base {
+-  int member; // Existing member
+-protected:
+-  int prot_func(int x) const override {
+-    // TODO: Implement this pure virtual method.
+-    static_assert(false, "Method `prot_func` is not implemented.");
+-  }
+-
+-  void foo();
+-public:
+-  void pub_func() override {
+-    // TODO: Implement this pure virtual method.
+-    static_assert(false, "Method `pub_func` is not implemented.");
+-  }
+-
+-  void pub_func2(char) const override {
+-    // TODO: Implement this pure virtual method.
+-    static_assert(false, "Method `pub_func2` is not implemented.");
+-  }
+-
+-  Derived(int m) : member(m) {}
+-};
+-)cpp";
+-  auto Applied = apply(Before);
+-  EXPECT_EQ(Expected, Applied) << "Applied result:\n" << Applied;
+-}
+-
+-TEST_F(OverridePureVirtualsTests, MultiAccessSpecifiersOverride) {
+-  constexpr auto Before = R"cpp(
+-class Base {
+-public:
+-  virtual void foo() = 0;
+-protected:
+-  virtual void bar() = 0;
+-};
+-
+-class ^Derived : public Base {};
+-)cpp";
+-
+-  constexpr auto Expected = R"cpp(
+-class Base {
+-public:
+-  virtual void foo() = 0;
+-protected:
+-  virtual void bar() = 0;
+-};
+-
+-class Derived : public Base {
+-public:
+-  void foo() override {
+-    // TODO: Implement this pure virtual method.
+-    static_assert(false, "Method `foo` is not implemented.");
+-  }
+-protected:
+-  void bar() override {
+-    // TODO: Implement this pure virtual method.
+-    static_assert(false, "Method `bar` is not implemented.");
+-  }
+-};
+-)cpp";
+-  auto Applied = apply(Before);
+-  EXPECT_EQ(Expected, Applied) << "Applied result:\n" << Applied;
+-}
+-
+-TEST_F(OverridePureVirtualsTests, AccessSpecifierAlreadyExisting) {
+-  const char *Before = R"cpp(
+-class Base {
+-public:
+-  virtual void func1() = 0;
+-};
+-
+-class ^Derived : public Base {
+-public:
+-};
+-)cpp";
+-
+-  const auto *Expected = R"cpp(
+-class Base {
+-public:
+-  virtual void func1() = 0;
+-};
+-
+-class Derived : public Base {
+-public:
+-  void func1() override {
+-    // TODO: Implement this pure virtual method.
+-    static_assert(false, "Method `func1` is not implemented.");
+-  }
+-
+-};
+-)cpp";
+-  auto Applied = apply(Before);
+-  EXPECT_EQ(Expected, Applied) << "Applied result:\n" << Applied;
+-}
+-
+-TEST_F(OverridePureVirtualsTests, ConstexprSpecifier) {
+-  ExtraArgs.push_back("-std=c++20");
+-
+-  constexpr auto Before = R"cpp(
+-class B {
+-public:
+-  constexpr virtual int getValue() const = 0;
+-};
+-
+-class ^D : public B {};
+-)cpp";
+-
+-  constexpr auto Expected = R"cpp(
+-class B {
+-public:
+-  constexpr virtual int getValue() const = 0;
+-};
+-
+-class D : public B {
+-public:
+-  constexpr int getValue() const override {
+-    // TODO: Implement this pure virtual method.
+-    static_assert(false, "Method `getValue` is not implemented.");
+-  }
+-};
+-)cpp";
+-  auto Applied = apply(Before);
+-  EXPECT_EQ(Expected, Applied) << "Applied result:\n" << Applied;
+-}
+-
+-TEST_F(OverridePureVirtualsTests, ConstevalSpecifier) {
+-  ExtraArgs.push_back("-std=c++20");
+-
+-  constexpr auto Before = R"cpp(
+-class B {
+-public:
+-  virtual consteval float calculate() = 0;
+-};
+-
+-class ^D : public B {};
+-)cpp";
+-
+-  constexpr auto Expected = R"cpp(
+-class B {
+-public:
+-  virtual consteval float calculate() = 0;
+-};
+-
+-class D : public B {
+-public:
+-  consteval float calculate() override {
+-    // TODO: Implement this pure virtual method.
+-    static_assert(false, "Method `calculate` is not implemented.");
+-  }
+-};
+-)cpp";
+-  auto Applied = apply(Before);
+-  EXPECT_EQ(Expected, Applied) << "Applied result:\n" << Applied;
+-}
+-
+-TEST_F(OverridePureVirtualsTests, LValueRefQualifier) {
+-  constexpr auto Before = R"cpp(
+-class B {
+-public:
+-  virtual void process() & = 0;
+-};
+-
+-class ^D : public B {};
+-)cpp";
+-
+-  constexpr auto Expected = R"cpp(
+-class B {
+-public:
+-  virtual void process() & = 0;
+-};
+-
+-class D : public B {
+-public:
+-  void process() & override {
+-    // TODO: Implement this pure virtual method.
+-    static_assert(false, "Method `process` is not implemented.");
+-  }
+-};
+-)cpp";
+-  auto Applied = apply(Before);
+-  EXPECT_EQ(Expected, Applied) << "Applied result:\n" << Applied;
+-}
+-
+-TEST_F(OverridePureVirtualsTests, RValueRefQualifier) {
+-  constexpr auto Before = R"cpp(
+-class B {
+-public:
+-  virtual bool isValid() && = 0;
+-};
+-
+-class ^D : public B {};
+-)cpp";
+-
+-  constexpr auto Expected = R"cpp(
+-class B {
+-public:
+-  virtual bool isValid() && = 0;
+-};
+-
+-class D : public B {
+-public:
+-  bool isValid() && override {
+-    // TODO: Implement this pure virtual method.
+-    static_assert(false, "Method `isValid` is not implemented.");
+-  }
+-};
+-)cpp";
+-  auto Applied = apply(Before);
+-  EXPECT_EQ(Expected, Applied) << "Applied result:\n" << Applied;
+-}
+-
+-TEST_F(OverridePureVirtualsTests, SimpleTrailingReturnType) {
+-  constexpr auto Before = R"cpp(
+-class B {
+-public:
+-  virtual auto getStatus() -> bool = 0;
+-};
+-
+-class ^D : public B {};
+-)cpp";
+-
+-  constexpr auto Expected = R"cpp(
+-class B {
+-public:
+-  virtual auto getStatus() -> bool = 0;
+-};
+-
+-class D : public B {
+-public:
+-  auto getStatus() -> bool override {
+-    // TODO: Implement this pure virtual method.
+-    static_assert(false, "Method `getStatus` is not implemented.");
+-  }
+-};
+-)cpp";
+-  auto Applied = apply(Before);
+-  EXPECT_EQ(Expected, Applied) << "Applied result:\n" << Applied;
+-}
+-
+-TEST_F(OverridePureVirtualsTests, ConstexprLValueRefAndTrailingReturn) {
+-  ExtraArgs.push_back("-std=c++20");
+-
+-  constexpr auto Before = R"cpp(
+-class B {
+-public:
+-  constexpr virtual auto getData() & -> const char * = 0;
+-};
+-
+-class ^D : public B {};
+-)cpp";
+-
+-  constexpr auto Expected = R"cpp(
+-class B {
+-public:
+-  constexpr virtual auto getData() & -> const char * = 0;
+-};
+-
+-class D : public B {
+-public:
+-  constexpr auto getData() & -> const char * override {
+-    // TODO: Implement this pure virtual method.
+-    static_assert(false, "Method `getData` is not implemented.");
+-  }
+-};
+-)cpp";
+-  auto Applied = apply(Before);
+-  EXPECT_EQ(Expected, Applied) << "Applied result:\n" << Applied;
+-}
+-
+-TEST_F(OverridePureVirtualsTests, ConstevalRValueRefAndTrailingReturn) {
+-  ExtraArgs.push_back("-std=c++20");
+-
+-  constexpr auto Before = R"cpp(
+-class B {
+-public:
+-  virtual consteval auto foo() && -> double = 0;
+-};
+-
+-class ^D : public B {};
+-)cpp";
+-
+-  constexpr auto Expected = R"cpp(
+-class B {
+-public:
+-  virtual consteval auto foo() && -> double = 0;
+-};
+-
+-class D : public B {
+-public:
+-  consteval auto foo() && -> double override {
+-    // TODO: Implement this pure virtual method.
+-    static_assert(false, "Method `foo` is not implemented.");
+-  }
+-};
+-)cpp";
+-  auto Applied = apply(Before);
+-  EXPECT_EQ(Expected, Applied) << "Applied result:\n" << Applied;
+-}
+-
+-TEST_F(OverridePureVirtualsTests, CombinedFeaturesWithTrailingReturnTypes) {
+-  ExtraArgs.push_back("-std=c++20");
+-
+-  constexpr auto Before = R"cpp(
+-class B {
+-public:
+-  virtual auto f1() & -> int = 0;
+-  constexpr virtual auto f2() && -> int = 0;
+-  virtual consteval auto f3() -> int = 0;
+-  virtual auto f4() const & -> char = 0;
+-  constexpr virtual auto f5() const && -> bool = 0;
+-};
+-
+-class ^D : public B {};
+-)cpp";
+-
+-  constexpr auto Expected = R"cpp(
+-class B {
+-public:
+-  virtual auto f1() & -> int = 0;
+-  constexpr virtual auto f2() && -> int = 0;
+-  virtual consteval auto f3() -> int = 0;
+-  virtual auto f4() const & -> char = 0;
+-  constexpr virtual auto f5() const && -> bool = 0;
+-};
+-
+-class D : public B {
+-public:
+-  auto f1() & -> int override {
+-    // TODO: Implement this pure virtual method.
+-    static_assert(false, "Method `f1` is not implemented.");
+-  }
+-
+-  constexpr auto f2() && -> int override {
+-    // TODO: Implement this pure virtual method.
+-    static_assert(false, "Method `f2` is not implemented.");
+-  }
+-
+-  consteval auto f3() -> int override {
+-    // TODO: Implement this pure virtual method.
+-    static_assert(false, "Method `f3` is not implemented.");
+-  }
+-
+-  auto f4() const & -> char override {
+-    // TODO: Implement this pure virtual method.
+-    static_assert(false, "Method `f4` is not implemented.");
+-  }
+-
+-  constexpr auto f5() const && -> bool override {
+-    // TODO: Implement this pure virtual method.
+-    static_assert(false, "Method `f5` is not implemented.");
+-  }
+-};
+-)cpp";
+-  auto Applied = apply(Before);
+-  EXPECT_EQ(Expected, Applied) << "Applied result:\n" << Applied;
+-}
+-
+-TEST_F(OverridePureVirtualsTests, DefaultParameters) {
+-  ExtraArgs.push_back("-std=c++20");
+-
+-  constexpr auto Before = R"cpp(
+-class B {
+-public:
+-  virtual void foo(int var = 0) = 0;
+-};
+-
+-class ^D : public B {};
+-)cpp";
+-
+-  constexpr auto Expected = R"cpp(
+-class B {
+-public:
+-  virtual void foo(int var = 0) = 0;
+-};
+-
+-class D : public B {
+-public:
+-  void foo(int var = 0) override {
+-    // TODO: Implement this pure virtual method.
+-    static_assert(false, "Method `foo` is not implemented.");
+-  }
+-};
+-)cpp";
+-  auto Applied = apply(Before);
+-  EXPECT_EQ(Expected, Applied) << "Applied result:\n" << Applied;
+-}
+-
+-} // namespace
+-} // namespace clangd
+-} // namespace clang
+diff -ruN --strip-trailing-cr a/libc/src/__support/FPUtil/bfloat16.h b/libc/src/__support/FPUtil/bfloat16.h
+--- a/libc/src/__support/FPUtil/bfloat16.h
++++ b/libc/src/__support/FPUtil/bfloat16.h
+@@ -12,6 +12,7 @@
+ #include "src/__support/CPP/bit.h"
+ #include "src/__support/CPP/type_traits.h"
+ #include "src/__support/FPUtil/cast.h"
++#include "src/__support/FPUtil/comparison_operations.h"
+ #include "src/__support/FPUtil/dyadic_float.h"
+ #include "src/__support/macros/config.h"
+ #include "src/__support/macros/properties/types.h"
+@@ -57,6 +58,30 @@
+     uint32_t x_bits = static_cast<uint32_t>(bits) << 16U;
+     return cpp::bit_cast<float>(x_bits);
    }
- 
-+  Foo *returns_ptr_deprecated() {
-+    return &foo_depr;          // expected-warning {{writing variable 'foo_depr' requires holding any mutex exclusively}}
++
++  LIBC_INLINE constexpr bool operator==(BFloat16 other) const {
++    return fputil::equals(*this, other);
 +  }
 +
-+  Foo *returns_pt_ptr_deprecated() {
-+    return foo_ptr_depr;       // expected-warning {{writing the value pointed to by 'foo_ptr_depr' requires holding any mutex exclusively}}
++  LIBC_INLINE constexpr bool operator!=(BFloat16 other) const {
++    return !fputil::equals(*this, other);
 +  }
 +
-+  Foo &returns_ref_deprecated() {
-+    return *foo_ptr_depr;      // expected-warning {{writing the value pointed to by 'foo_ptr_depr' requires holding any mutex exclusively}}
++  LIBC_INLINE constexpr bool operator<(BFloat16 other) const {
++    return fputil::less_than(*this, other);
 +  }
 +
-   // FIXME: Basic alias analysis would help catch cases like below.
-   Foo *returns_ptr_alias() {
-     mu.Lock();
-diff -ruN --strip-trailing-cr a/clang-tools-extra/test/clang-tidy/infrastructure/file-filter-symlinks.cpp b/clang-tools-extra/test/clang-tidy/infrastructure/file-filter-symlinks.cpp
---- a/clang-tools-extra/test/clang-tidy/infrastructure/file-filter-symlinks.cpp
-+++ b/clang-tools-extra/test/clang-tidy/infrastructure/file-filter-symlinks.cpp
-@@ -12,9 +12,8 @@
- // RUN: clang-tidy -checks='-*,google-explicit-constructor' -header-filter='header\.h' %s -- -I %t 2>&1 | FileCheck --check-prefix=CHECK_HEADER %s
- // RUN: clang-tidy -checks='-*,google-explicit-constructor' -header-filter='header\.h' -quiet %s -- -I %t 2>&1 | FileCheck --check-prefix=CHECK_HEADER %s
- 
--// `-header-filter` operates on the actual file path that the user provided in
--// the #include directive; however, Clang's path name simplification causes the
--// path to be printed in canonicalised form here.
-+// Check that `-header-filter` operates on the same file paths as paths in
-+// diagnostics printed by ClangTidy.
- #include "dir1/dir2/../header_alias.h"
--// CHECK_HEADER_ALIAS: dir1/header.h:1:11: warning: single-argument constructors
-+// CHECK_HEADER_ALIAS: dir1/dir2/../header_alias.h:1:11: warning: single-argument constructors
- // CHECK_HEADER-NOT: warning:
-diff -ruN --strip-trailing-cr a/libcxx/include/ext/hash_map b/libcxx/include/ext/hash_map
---- a/libcxx/include/ext/hash_map
-+++ b/libcxx/include/ext/hash_map
-@@ -744,7 +744,7 @@
-   _LIBCPP_HIDE_FROM_ABI const_iterator begin() const { return __table_.begin(); }
-   _LIBCPP_HIDE_FROM_ABI const_iterator end() const { return __table_.end(); }
- 
--  _LIBCPP_HIDE_FROM_ABI iterator insert(const value_type& __x) { return __table_.__emplace_unique(__x); }
-+  _LIBCPP_HIDE_FROM_ABI iterator insert(const value_type& __x) { return __table_.__emplace_multi(__x); }
-   _LIBCPP_HIDE_FROM_ABI iterator insert(const_iterator, const value_type& __x) { return insert(__x); }
-   template <class _InputIterator>
-   _LIBCPP_HIDE_FROM_ABI void insert(_InputIterator __first, _InputIterator __last);
-@@ -831,7 +831,7 @@
- template <class _InputIterator>
- inline void hash_multimap<_Key, _Tp, _Hash, _Pred, _Alloc>::insert(_InputIterator __first, _InputIterator __last) {
-   for (; __first != __last; ++__first)
--    __table_.__emplace_unique(*__first);
-+    __table_.__emplace_multi(*__first);
- }
- 
- template <class _Key, class _Tp, class _Hash, class _Pred, class _Alloc>
-diff -ruN --strip-trailing-cr a/libcxx/include/ext/hash_set b/libcxx/include/ext/hash_set
---- a/libcxx/include/ext/hash_set
-+++ b/libcxx/include/ext/hash_set
-@@ -458,7 +458,7 @@
-   _LIBCPP_HIDE_FROM_ABI const_iterator begin() const { return __table_.begin(); }
-   _LIBCPP_HIDE_FROM_ABI const_iterator end() const { return __table_.end(); }
- 
--  _LIBCPP_HIDE_FROM_ABI iterator insert(const value_type& __x) { return __table_.__emplace_unique(__x); }
-+  _LIBCPP_HIDE_FROM_ABI iterator insert(const value_type& __x) { return __table_.__emplace_multi(__x); }
-   _LIBCPP_HIDE_FROM_ABI iterator insert(const_iterator, const value_type& __x) { return insert(__x); }
-   template <class _InputIterator>
-   _LIBCPP_HIDE_FROM_ABI void insert(_InputIterator __first, _InputIterator __last);
-@@ -543,7 +543,7 @@
- template <class _InputIterator>
- inline void hash_multiset<_Value, _Hash, _Pred, _Alloc>::insert(_InputIterator __first, _InputIterator __last) {
-   for (; __first != __last; ++__first)
--    __table_.__emplace_unique(*__first);
-+    __table_.__emplace_multi(*__first);
- }
- 
- template <class _Value, class _Hash, class _Pred, class _Alloc>
-diff -ruN --strip-trailing-cr a/libcxx/include/unordered_map b/libcxx/include/unordered_map
---- a/libcxx/include/unordered_map
-+++ b/libcxx/include/unordered_map
-@@ -967,9 +967,8 @@
-   typedef __hash_value_type<key_type, mapped_type> __value_type;
-   typedef __unordered_map_hasher<key_type, value_type, hasher, key_equal> __hasher;
-   typedef __unordered_map_equal<key_type, value_type, key_equal, hasher> __key_equal;
--  typedef __rebind_alloc<allocator_traits<allocator_type>, __value_type> __allocator_type;
++  LIBC_INLINE constexpr bool operator<=(BFloat16 other) const {
++    return fputil::less_than_or_equals(*this, other);
++  }
++
++  LIBC_INLINE constexpr bool operator>(BFloat16 other) const {
++    return fputil::greater_than(*this, other);
++  }
++
++  LIBC_INLINE constexpr bool operator>=(BFloat16 other) const {
++    return fputil::greater_than_or_equals(*this, other);
++  }
+ }; // struct BFloat16
  
--  typedef __hash_table<__value_type, __hasher, __key_equal, __allocator_type> __table;
-+  typedef __hash_table<__value_type, __hasher, __key_equal, allocator_type> __table;
+ } // namespace fputil
+diff -ruN --strip-trailing-cr a/libc/src/__support/FPUtil/CMakeLists.txt b/libc/src/__support/FPUtil/CMakeLists.txt
+--- a/libc/src/__support/FPUtil/CMakeLists.txt
++++ b/libc/src/__support/FPUtil/CMakeLists.txt
+@@ -274,6 +274,7 @@
+     bfloat16.h
+   DEPENDS
+     .cast
++    .comparison_operations
+     .dyadic_float
+     libc.src.__support.CPP.bit
+     libc.src.__support.CPP.type_traits
+diff -ruN --strip-trailing-cr a/lldb/source/Plugins/ObjectFile/Minidump/MinidumpFileBuilder.cpp b/lldb/source/Plugins/ObjectFile/Minidump/MinidumpFileBuilder.cpp
+--- a/lldb/source/Plugins/ObjectFile/Minidump/MinidumpFileBuilder.cpp
++++ b/lldb/source/Plugins/ObjectFile/Minidump/MinidumpFileBuilder.cpp
+@@ -201,7 +201,7 @@
+     return error;
+   };
  
-   __table __table_;
+-  llvm::minidump::SystemInfo sys_info;
++  llvm::minidump::SystemInfo sys_info{};
+   sys_info.ProcessorArch =
+       static_cast<llvm::support::little_t<ProcessorArchitecture>>(arch);
+   // Global offset to beginning of a csd_string in a data section
+@@ -378,7 +378,7 @@
+     helper_data.AppendData(&signature, sizeof(llvm::support::ulittle32_t));
+     helper_data.AppendData(uuid.begin(), uuid.size());
  
-@@ -1777,9 +1776,8 @@
-   typedef __hash_value_type<key_type, mapped_type> __value_type;
-   typedef __unordered_map_hasher<key_type, value_type, hasher, key_equal> __hasher;
-   typedef __unordered_map_equal<key_type, value_type, key_equal, hasher> __key_equal;
--  typedef __rebind_alloc<allocator_traits<allocator_type>, __value_type> __allocator_type;
+-    llvm::minidump::Module m;
++    llvm::minidump::Module m{};
+     m.BaseOfImage = static_cast<llvm::support::ulittle64_t>(
+         mod->GetObjectFile()->GetBaseAddress().GetLoadAddress(&target));
+     m.SizeOfImage = static_cast<llvm::support::ulittle32_t>(mod_size);
+@@ -745,7 +745,7 @@
+   if (error.Fail())
+     return error;
  
--  typedef __hash_table<__value_type, __hasher, __key_equal, __allocator_type> __table;
-+  typedef __hash_table<__value_type, __hasher, __key_equal, allocator_type> __table;
+-  lldb_private::minidump::MinidumpMiscInfo misc_info;
++  lldb_private::minidump::MinidumpMiscInfo misc_info{};
+   misc_info.size = static_cast<llvm::support::ulittle32_t>(
+       sizeof(lldb_private::minidump::MinidumpMiscInfo));
+   // Default set flags1 to 0, in case that we will not be able to
+diff -ruN --strip-trailing-cr a/llvm/test/CodeGen/NVPTX/pr126337.ll b/llvm/test/CodeGen/NVPTX/pr126337.ll
+--- a/llvm/test/CodeGen/NVPTX/pr126337.ll
++++ b/llvm/test/CodeGen/NVPTX/pr126337.ll
+@@ -1,6 +1,6 @@
+ ; NOTE: Assertions have been autogenerated by utils/update_llc_test_checks.py UTC_ARGS: --version 5
+ ; RUN: llc < %s -mtriple=nvptx64 -mcpu=sm_70 | FileCheck %s
+-; RUN: %if ptxas %{ llc < %s -mtriple=nvptx64 -mcpu=sm_70 | %ptxas-verify %}
++; RUN: %if ptxas %{ llc < %s -mtriple=nvptx64 -mcpu=sm_70 | %ptxas -arch=sm_70 -c - %}
  
-   __table __table_;
+ ; This IR should compile without triggering assertions in LICM
+ ; when the CopyToReg from %0 in the first BB gets eliminated
+diff -ruN --strip-trailing-cr a/utils/bazel/llvm-project-overlay/libc/BUILD.bazel b/utils/bazel/llvm-project-overlay/libc/BUILD.bazel
+--- a/utils/bazel/llvm-project-overlay/libc/BUILD.bazel
++++ b/utils/bazel/llvm-project-overlay/libc/BUILD.bazel
+@@ -1002,6 +1002,19 @@
+ )
  
-diff -ruN --strip-trailing-cr a/libcxx/test/extensions/gnu/hash_multimap/insert.pass.cpp b/libcxx/test/extensions/gnu/hash_multimap/insert.pass.cpp
---- a/libcxx/test/extensions/gnu/hash_multimap/insert.pass.cpp
-+++ b/libcxx/test/extensions/gnu/hash_multimap/insert.pass.cpp
-@@ -0,0 +1,35 @@
-+//===----------------------------------------------------------------------===//
-+//
-+// Part of the LLVM Project, under the Apache License v2.0 with LLVM Exceptions.
-+// See https://llvm.org/LICENSE.txt for license information.
-+// SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception
-+//
-+//===----------------------------------------------------------------------===//
-+
-+// ADDITIONAL_COMPILE_FLAGS: -Wno-deprecated
-+
-+// hash_multimap::insert
-+
-+#include <cassert>
-+#include <ext/hash_map>
-+
-+int main(int, char**) {
-+  __gnu_cxx::hash_multimap<int, int> map;
-+
-+  map.insert(std::make_pair(1, 1));
-+  map.insert(std::make_pair(1, 1));
-+
-+  assert(map.size() == 2);
-+  assert(map.equal_range(1).first == map.begin());
-+  assert(map.equal_range(1).second == map.end());
-+
-+  std::pair<int, int> arr[] = {std::make_pair(1, 1), std::make_pair(1, 1)};
-+
-+  map.insert(arr, arr + 2);
-+
-+  assert(map.size() == 4);
-+  assert(map.equal_range(1).first == map.begin());
-+  assert(map.equal_range(1).second == map.end());
-+
-+  return 0;
-+}
-diff -ruN --strip-trailing-cr a/libcxx/test/extensions/gnu/hash_multiset/insert.pass.cpp b/libcxx/test/extensions/gnu/hash_multiset/insert.pass.cpp
---- a/libcxx/test/extensions/gnu/hash_multiset/insert.pass.cpp
-+++ b/libcxx/test/extensions/gnu/hash_multiset/insert.pass.cpp
-@@ -0,0 +1,35 @@
-+//===----------------------------------------------------------------------===//
-+//
-+// Part of the LLVM Project, under the Apache License v2.0 with LLVM Exceptions.
-+// See https://llvm.org/LICENSE.txt for license information.
-+// SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception
-+//
-+//===----------------------------------------------------------------------===//
-+
-+// ADDITIONAL_COMPILE_FLAGS: -Wno-deprecated
-+
-+// hash_multimap::insert
-+
-+#include <cassert>
-+#include <ext/hash_set>
-+
-+int main(int, char**) {
-+  __gnu_cxx::hash_multiset<int> map;
-+
-+  map.insert(1);
-+  map.insert(1);
-+
-+  assert(map.size() == 2);
-+  assert(map.equal_range(1).first == map.begin());
-+  assert(map.equal_range(1).second == map.end());
-+
-+  int arr[] = {1, 1};
-+
-+  map.insert(arr, arr + 2);
-+
-+  assert(map.size() == 4);
-+  assert(map.equal_range(1).first == map.begin());
-+  assert(map.equal_range(1).second == map.end());
+ libc_support_library(
++    name = "__support_fputil_comparison_operations",
++    hdrs = [
++        "src/__support/FPUtil/comparison_operations.h",
++    ],
++    deps = [
++        ":__support_cpp_type_traits",
++        ":__support_fputil_fenv_impl",
++        ":__support_fputil_fp_bits",
++        ":__support_macros_config",
++    ],
++)
 +
-+  return 0;
-+}
-diff -ruN --strip-trailing-cr a/libcxx/test/std/containers/associative/multimap/incomplete_type.pass.cpp b/libcxx/test/std/containers/associative/multimap/incomplete_type.pass.cpp
---- a/libcxx/test/std/containers/associative/multimap/incomplete_type.pass.cpp
-+++ b/libcxx/test/std/containers/associative/multimap/incomplete_type.pass.cpp
-@@ -13,6 +13,7 @@
- 
- #include <map>
- 
-+#include "min_allocator.h"
- #include "test_macros.h"
++libc_support_library(
+     name = "__support_file_file",
+     srcs = [
+         "include/llvm-libc-types/off_t.h",
+@@ -1085,6 +1098,7 @@
+         ":__support_cpp_bit",
+         ":__support_cpp_type_traits",
+         ":__support_fputil_cast",
++        ":__support_fputil_comparison_operations",
+         ":__support_fputil_dyadic_float",
+         ":__support_macros_config",
+         ":__support_macros_properties_types",
+@@ -1159,6 +1173,7 @@
+     name = "__support_fputil_rounding_mode",
+     hdrs = ["src/__support/FPUtil/rounding_mode.h"],
+     deps = [
++        ":__support_cpp_type_traits",
+         ":__support_macros_attributes",
+         ":__support_macros_config",
+         ":hdr_fenv_macros",
+@@ -1919,8 +1934,8 @@
+     srcs = ["src/math/generic/common_constants.cpp"],
+     hdrs = ["src/math/generic/common_constants.h"],
+     deps = [
+-        ":__support_math_exp_constants",
+         ":__support_math_acosh_float_constants",
++        ":__support_math_exp_constants",
+         ":__support_number_pair",
+     ],
+ )
+@@ -2003,10 +2018,10 @@
+         ":__support_fputil_fma",
+         ":__support_fputil_multiply_add",
+         ":__support_fputil_nearest_integer",
+-        ":__support_math_exp_utils",
+-        ":__support_math_exp10f_utils",
+-        ":__support_math_acoshf_utils",
+         ":__support_macros_properties_cpu_features",
++        ":__support_math_acoshf_utils",
++        ":__support_math_exp10f_utils",
++        ":__support_math_exp_utils",
+         ":common_constants",
+     ],
+ )
+@@ -2058,8 +2073,8 @@
+         ":__support_fputil_cast",
+         ":__support_fputil_fp_bits",
+         ":__support_fputil_nearest_integer",
+-        ":__support_math_expf16_utils",
+         ":__support_math_exp10_float16_constants",
++        ":__support_math_expf16_utils",
+     ],
+ )
  
- struct A {
-@@ -28,5 +29,8 @@
- int main(int, char**) {
-   A a;
+@@ -2067,7 +2082,6 @@
+     name = "__support_math_acos",
+     hdrs = ["src/__support/math/acos.h"],
+     deps = [
+-        ":__support_math_asin_utils",
+         ":__support_fputil_double_double",
+         ":__support_fputil_dyadic_float",
+         ":__support_fputil_fenv_impl",
+@@ -2076,8 +2090,9 @@
+         ":__support_fputil_polyeval",
+         ":__support_fputil_sqrt",
+         ":__support_macros_optimization",
+-        ":__support_macros_properties_types",
+         ":__support_macros_properties_cpu_features",
++        ":__support_macros_properties_types",
++        ":__support_math_asin_utils",
+     ],
+ )
  
-+  // Make sure that the allocator isn't rebound to and incomplete type
-+  std::multimap<int, int, std::less<int>, complete_type_allocator<std::pair<const int, int> > > m;
-+
-   return 0;
- }
-diff -ruN --strip-trailing-cr a/libcxx/test/std/containers/unord/unord.map/incomplete_type.pass.cpp b/libcxx/test/std/containers/unord/unord.map/incomplete_type.pass.cpp
---- a/libcxx/test/std/containers/unord/unord.map/incomplete_type.pass.cpp
-+++ b/libcxx/test/std/containers/unord/unord.map/incomplete_type.pass.cpp
-@@ -14,6 +14,7 @@
+@@ -2085,13 +2100,13 @@
+     name = "__support_math_acosf",
+     hdrs = ["src/__support/math/acosf.h"],
+     deps = [
+-        ":__support_math_inv_trigf_utils",
+         ":__support_fputil_except_value_utils",
+         ":__support_fputil_fp_bits",
+         ":__support_fputil_multiply_add",
+         ":__support_fputil_polyeval",
+         ":__support_fputil_sqrt",
+         ":__support_macros_optimization",
++        ":__support_math_inv_trigf_utils",
+     ],
+ )
  
- #include <unordered_map>
+@@ -2100,6 +2115,7 @@
+     hdrs = ["src/__support/math/acosf16.h"],
+     deps = [
+         ":__support_fputil_cast",
++        ":__support_fputil_except_value_utils",
+         ":__support_fputil_fma",
+         ":__support_fputil_multiply_add",
+         ":__support_fputil_nearest_integer",
+@@ -2121,10 +2137,10 @@
+     name = "__support_math_acoshf_utils",
+     hdrs = ["src/__support/math/acoshf_utils.h"],
+     deps = [
+-        ":__support_math_acosh_float_constants",
+         ":__support_fputil_fp_bits",
+         ":__support_fputil_multiply_add",
+         ":__support_fputil_polyeval",
++        ":__support_math_acosh_float_constants",
+     ],
+ )
  
-+#include "min_allocator.h"
- #include "test_macros.h"
+@@ -2132,12 +2148,12 @@
+     name = "__support_math_acoshf",
+     hdrs = ["src/__support/math/acoshf.h"],
+     deps = [
+-        ":__support_math_acoshf_utils",
+         ":__support_fputil_fenv_impl",
+         ":__support_fputil_fp_bits",
+         ":__support_fputil_multiply_add",
+         ":__support_fputil_sqrt",
+         ":__support_macros_optimization",
++        ":__support_math_acoshf_utils",
+     ],
+ )
  
- template <class Tp>
-@@ -36,5 +37,9 @@
- int main(int, char**) {
-   A a;
+@@ -2145,7 +2161,6 @@
+     name = "__support_math_acoshf16",
+     hdrs = ["src/__support/math/acoshf16.h"],
+     deps = [
+-        ":__support_math_acoshf_utils",
+         ":__support_fputil_cast",
+         ":__support_fputil_except_value_utils",
+         ":__support_fputil_fenv_impl",
+@@ -2154,6 +2169,7 @@
+         ":__support_fputil_polyeval",
+         ":__support_fputil_sqrt",
+         ":__support_macros_optimization",
++        ":__support_math_acoshf_utils",
+     ],
+ )
  
-+  // Make sure that the allocator isn't rebound to an incomplete type
-+  std::unordered_map<int, int, std::hash<int>, std::equal_to<int>, complete_type_allocator<std::pair<const int, int> > >
-+      m;
-+
-   return 0;
- }
-diff -ruN --strip-trailing-cr a/libcxx/test/std/containers/unord/unord.multimap/incomplete.pass.cpp b/libcxx/test/std/containers/unord/unord.multimap/incomplete.pass.cpp
---- a/libcxx/test/std/containers/unord/unord.multimap/incomplete.pass.cpp
-+++ b/libcxx/test/std/containers/unord/unord.multimap/incomplete.pass.cpp
-@@ -14,6 +14,7 @@
+@@ -2161,12 +2177,12 @@
+     name = "__support_math_asin_utils",
+     hdrs = ["src/__support/math/asin_utils.h"],
+     deps = [
+-        ":__support_integer_literals",
+         ":__support_fputil_double_double",
+         ":__support_fputil_dyadic_float",
+         ":__support_fputil_multiply_add",
+         ":__support_fputil_nearest_integer",
+         ":__support_fputil_polyeval",
++        ":__support_integer_literals",
+         ":__support_macros_optimization",
+     ],
+ )
+@@ -2175,6 +2191,8 @@
+     name = "__support_math_erff",
+     hdrs = ["src/__support/math/erff.h"],
+     deps = [
++        ":__support_fputil_except_value_utils",
++        ":__support_fputil_fp_bits",
+         ":__support_fputil_multiply_add",
+         ":__support_fputil_polyeval",
+         ":__support_macros_optimization",
+@@ -2215,7 +2233,7 @@
+         ":__support_fputil_nearest_integer",
+         ":__support_fputil_polyeval",
+         ":__support_macros_attributes",
+-        ":llvm_libc_macros_float16_macros"
++        ":llvm_libc_macros_float16_macros",
+     ],
+ )
  
- #include <unordered_map>
+@@ -2224,7 +2242,6 @@
+     hdrs = ["src/__support/math/expf16.h"],
+     deps = [
+         ":__support_common",
+-        ":__support_libc_errno",
+         ":__support_cpp_array",
+         ":__support_fputil_cast",
+         ":__support_fputil_except_value_utils",
+@@ -2234,9 +2251,10 @@
+         ":__support_fputil_nearest_integer",
+         ":__support_fputil_polyeval",
+         ":__support_fputil_rounding_mode",
++        ":__support_libc_errno",
+         ":__support_macros_optimization",
+         ":__support_math_expf16_utils",
+-        ":llvm_libc_macros_float16_macros"
++        ":llvm_libc_macros_float16_macros",
+     ],
+ )
  
-+#include "min_allocator.h"
- #include "test_macros.h"
+@@ -2244,8 +2262,8 @@
+     name = "__support_math_frexpf128",
+     hdrs = ["src/__support/math/frexpf128.h"],
+     deps = [
+-        ":__support_macros_properties_types",
+         ":__support_fputil_manipulation_functions",
++        ":__support_macros_properties_types",
+     ],
+ )
  
- template <class Tp>
-@@ -36,5 +37,13 @@
- int main(int, char**) {
-   A a;
+@@ -2253,9 +2271,9 @@
+     name = "__support_math_inv_trigf_utils",
+     hdrs = ["src/__support/math/inv_trigf_utils.h"],
+     deps = [
++        ":__support_common",
+         ":__support_fputil_multiply_add",
+         ":__support_fputil_polyeval",
+-        ":__support_common",
+     ],
+ )
  
-+  // Make sure that the allocator isn't rebound to an incomplete type
-+  std::unordered_multimap<int,
-+                          int,
-+                          std::hash<int>,
-+                          std::equal_to<int>,
-+                          complete_type_allocator<std::pair<const int, int> > >
-+      m;
-+
-   return 0;
- }
-diff -ruN --strip-trailing-cr a/llvm/lib/Transforms/Coroutines/CoroSplit.cpp b/llvm/lib/Transforms/Coroutines/CoroSplit.cpp
---- a/llvm/lib/Transforms/Coroutines/CoroSplit.cpp
-+++ b/llvm/lib/Transforms/Coroutines/CoroSplit.cpp
-@@ -1484,12 +1484,9 @@
-     // If there is no DISubprogram for F, it implies the function is compiled
-     // without debug info. So we also don't generate debug info for the
-     // suspension points.
--    bool AddDebugLabels =
--        (DIS && DIS->getUnit() &&
--         (DIS->getUnit()->getEmissionKind() ==
--              DICompileUnit::DebugEmissionKind::FullDebug ||
--          DIS->getUnit()->getEmissionKind() ==
--              DICompileUnit::DebugEmissionKind::LineTablesOnly));
-+    bool AddDebugLabels = DIS && DIS->getUnit() &&
-+                          (DIS->getUnit()->getEmissionKind() ==
-+                           DICompileUnit::DebugEmissionKind::FullDebug);
+@@ -2263,10 +2281,10 @@
+     name = "__support_math_frexpf16",
+     hdrs = ["src/__support/math/frexpf16.h"],
+     deps = [
++        ":__support_fputil_manipulation_functions",
+         ":__support_macros_config",
+         ":__support_macros_properties_types",
+-        ":__support_fputil_manipulation_functions",
+-        ":llvm_libc_macros_float16_macros"
++        ":llvm_libc_macros_float16_macros",
+     ],
+ )
  
-     // resume.entry:
-     //  %index.addr = getelementptr inbounds %f.Frame, %f.Frame* %FramePtr, i32
-diff -ruN --strip-trailing-cr a/llvm/lib/Transforms/Instrumentation/MemorySanitizer.cpp b/llvm/lib/Transforms/Instrumentation/MemorySanitizer.cpp
---- a/llvm/lib/Transforms/Instrumentation/MemorySanitizer.cpp
-+++ b/llvm/lib/Transforms/Instrumentation/MemorySanitizer.cpp
-@@ -4322,8 +4322,9 @@
-     if (isa<Constant>(Idx))
-       return;
+@@ -2284,7 +2302,7 @@
+     deps = [
+         ":__support_fputil_manipulation_functions",
+         ":__support_macros_properties_types",
+-        ":llvm_libc_types_float128"
++        ":llvm_libc_types_float128",
+     ],
+ )
  
-+    auto *IdxShadow = getShadow(Idx);
-     Value *Truncated = IRB.CreateTrunc(
--        Idx,
-+        IdxShadow,
-         FixedVectorType::get(Type::getIntNTy(*MS.C, Log2_64(IdxVectorSize)),
-                              IdxVectorSize));
-     insertCheckShadow(Truncated, getOrigin(Idx), I);
-diff -ruN --strip-trailing-cr a/llvm/test/Instrumentation/MemorySanitizer/i386/avx-intrinsics-i386.ll b/llvm/test/Instrumentation/MemorySanitizer/i386/avx-intrinsics-i386.ll
---- a/llvm/test/Instrumentation/MemorySanitizer/i386/avx-intrinsics-i386.ll
-+++ b/llvm/test/Instrumentation/MemorySanitizer/i386/avx-intrinsics-i386.ll
-@@ -987,20 +987,21 @@
- define <2 x double> @test_x86_avx_vpermilvar_pd(<2 x double> %a0, <2 x i64> %a1) #0 {
- ; CHECK-LABEL: @test_x86_avx_vpermilvar_pd(
- ; CHECK-NEXT:    [[TMP1:%.*]] = load <2 x i64>, ptr @__msan_param_tls, align 8
-+; CHECK-NEXT:    [[A1:%.*]] = load <2 x i64>, ptr inttoptr (i64 add (i64 ptrtoint (ptr @__msan_param_tls to i64), i64 16) to ptr), align 8
- ; CHECK-NEXT:    [[TMP5:%.*]] = load i64, ptr @__msan_va_arg_overflow_size_tls, align 8
- ; CHECK-NEXT:    call void @llvm.donothing()
--; CHECK-NEXT:    [[TMP3:%.*]] = trunc <2 x i64> [[A1:%.*]] to <2 x i1>
-+; CHECK-NEXT:    [[TMP3:%.*]] = trunc <2 x i64> [[A1]] to <2 x i1>
- ; CHECK-NEXT:    [[A0:%.*]] = bitcast <2 x i64> [[TMP1]] to <2 x double>
--; CHECK-NEXT:    [[RES:%.*]] = call <2 x double> @llvm.x86.avx.vpermilvar.pd(<2 x double> [[A0]], <2 x i64> [[A1]])
-+; CHECK-NEXT:    [[RES:%.*]] = call <2 x double> @llvm.x86.avx.vpermilvar.pd(<2 x double> [[A0]], <2 x i64> [[A2:%.*]])
- ; CHECK-NEXT:    [[TMP6:%.*]] = bitcast <2 x double> [[RES]] to <2 x i64>
- ; CHECK-NEXT:    [[TMP7:%.*]] = bitcast <2 x i1> [[TMP3]] to i2
- ; CHECK-NEXT:    [[_MSCMP:%.*]] = icmp ne i2 [[TMP7]], 0
--; CHECK-NEXT:    br i1 [[_MSCMP]], label [[TMP8:%.*]], label [[TMP9:%.*]], !prof [[PROF1]]
--; CHECK:       8:
-+; CHECK-NEXT:    br i1 [[_MSCMP]], label [[TMP9:%.*]], label [[TMP10:%.*]], !prof [[PROF1]]
-+; CHECK:       9:
- ; CHECK-NEXT:    call void @__msan_warning_noreturn()
- ; CHECK-NEXT:    unreachable
--; CHECK:       9:
--; CHECK-NEXT:    [[RES1:%.*]] = call <2 x double> @llvm.x86.avx.vpermilvar.pd(<2 x double> [[A2:%.*]], <2 x i64> [[A1]])
-+; CHECK:       10:
-+; CHECK-NEXT:    [[RES1:%.*]] = call <2 x double> @llvm.x86.avx.vpermilvar.pd(<2 x double> [[A3:%.*]], <2 x i64> [[A2]])
- ; CHECK-NEXT:    store <2 x i64> [[TMP6]], ptr @__msan_retval_tls, align 8
- ; CHECK-NEXT:    ret <2 x double> [[RES1]]
- ;
-@@ -1013,20 +1014,21 @@
- define <4 x double> @test_x86_avx_vpermilvar_pd_256(<4 x double> %a0, <4 x i64> %a1) #0 {
- ; CHECK-LABEL: @test_x86_avx_vpermilvar_pd_256(
- ; CHECK-NEXT:    [[TMP1:%.*]] = load <4 x i64>, ptr @__msan_param_tls, align 8
-+; CHECK-NEXT:    [[A1:%.*]] = load <4 x i64>, ptr inttoptr (i64 add (i64 ptrtoint (ptr @__msan_param_tls to i64), i64 32) to ptr), align 8
- ; CHECK-NEXT:    [[TMP5:%.*]] = load i64, ptr @__msan_va_arg_overflow_size_tls, align 8
- ; CHECK-NEXT:    call void @llvm.donothing()
--; CHECK-NEXT:    [[TMP3:%.*]] = trunc <4 x i64> [[A1:%.*]] to <4 x i2>
-+; CHECK-NEXT:    [[TMP3:%.*]] = trunc <4 x i64> [[A1]] to <4 x i2>
- ; CHECK-NEXT:    [[A0:%.*]] = bitcast <4 x i64> [[TMP1]] to <4 x double>
--; CHECK-NEXT:    [[RES:%.*]] = call <4 x double> @llvm.x86.avx.vpermilvar.pd.256(<4 x double> [[A0]], <4 x i64> [[A1]])
-+; CHECK-NEXT:    [[RES:%.*]] = call <4 x double> @llvm.x86.avx.vpermilvar.pd.256(<4 x double> [[A0]], <4 x i64> [[A2:%.*]])
- ; CHECK-NEXT:    [[TMP6:%.*]] = bitcast <4 x double> [[RES]] to <4 x i64>
- ; CHECK-NEXT:    [[TMP7:%.*]] = bitcast <4 x i2> [[TMP3]] to i8
- ; CHECK-NEXT:    [[_MSCMP:%.*]] = icmp ne i8 [[TMP7]], 0
--; CHECK-NEXT:    br i1 [[_MSCMP]], label [[TMP8:%.*]], label [[TMP9:%.*]], !prof [[PROF1]]
--; CHECK:       8:
-+; CHECK-NEXT:    br i1 [[_MSCMP]], label [[TMP9:%.*]], label [[TMP10:%.*]], !prof [[PROF1]]
-+; CHECK:       9:
- ; CHECK-NEXT:    call void @__msan_warning_noreturn()
- ; CHECK-NEXT:    unreachable
--; CHECK:       9:
--; CHECK-NEXT:    [[RES1:%.*]] = call <4 x double> @llvm.x86.avx.vpermilvar.pd.256(<4 x double> [[A2:%.*]], <4 x i64> [[A1]])
-+; CHECK:       10:
-+; CHECK-NEXT:    [[RES1:%.*]] = call <4 x double> @llvm.x86.avx.vpermilvar.pd.256(<4 x double> [[A3:%.*]], <4 x i64> [[A2]])
- ; CHECK-NEXT:    store <4 x i64> [[TMP6]], ptr @__msan_retval_tls, align 8
- ; CHECK-NEXT:    ret <4 x double> [[RES1]]
- ;
-@@ -1054,20 +1056,21 @@
- define <4 x float> @test_x86_avx_vpermilvar_ps(<4 x float> %a0, <4 x i32> %a1) #0 {
- ; CHECK-LABEL: @test_x86_avx_vpermilvar_ps(
- ; CHECK-NEXT:    [[TMP1:%.*]] = load <4 x i32>, ptr @__msan_param_tls, align 8
-+; CHECK-NEXT:    [[A1:%.*]] = load <4 x i32>, ptr inttoptr (i64 add (i64 ptrtoint (ptr @__msan_param_tls to i64), i64 16) to ptr), align 8
- ; CHECK-NEXT:    [[TMP5:%.*]] = load i64, ptr @__msan_va_arg_overflow_size_tls, align 8
- ; CHECK-NEXT:    call void @llvm.donothing()
--; CHECK-NEXT:    [[TMP3:%.*]] = trunc <4 x i32> [[A1:%.*]] to <4 x i2>
-+; CHECK-NEXT:    [[TMP3:%.*]] = trunc <4 x i32> [[A1]] to <4 x i2>
- ; CHECK-NEXT:    [[A0:%.*]] = bitcast <4 x i32> [[TMP1]] to <4 x float>
--; CHECK-NEXT:    [[RES:%.*]] = call <4 x float> @llvm.x86.avx.vpermilvar.ps(<4 x float> [[A0]], <4 x i32> [[A1]])
-+; CHECK-NEXT:    [[RES:%.*]] = call <4 x float> @llvm.x86.avx.vpermilvar.ps(<4 x float> [[A0]], <4 x i32> [[A2:%.*]])
- ; CHECK-NEXT:    [[TMP6:%.*]] = bitcast <4 x float> [[RES]] to <4 x i32>
- ; CHECK-NEXT:    [[TMP7:%.*]] = bitcast <4 x i2> [[TMP3]] to i8
- ; CHECK-NEXT:    [[_MSCMP:%.*]] = icmp ne i8 [[TMP7]], 0
--; CHECK-NEXT:    br i1 [[_MSCMP]], label [[TMP8:%.*]], label [[TMP9:%.*]], !prof [[PROF1]]
--; CHECK:       8:
-+; CHECK-NEXT:    br i1 [[_MSCMP]], label [[TMP9:%.*]], label [[TMP10:%.*]], !prof [[PROF1]]
-+; CHECK:       9:
- ; CHECK-NEXT:    call void @__msan_warning_noreturn()
- ; CHECK-NEXT:    unreachable
--; CHECK:       9:
--; CHECK-NEXT:    [[RES1:%.*]] = call <4 x float> @llvm.x86.avx.vpermilvar.ps(<4 x float> [[A2:%.*]], <4 x i32> [[A1]])
-+; CHECK:       10:
-+; CHECK-NEXT:    [[RES1:%.*]] = call <4 x float> @llvm.x86.avx.vpermilvar.ps(<4 x float> [[A3:%.*]], <4 x i32> [[A2]])
- ; CHECK-NEXT:    store <4 x i32> [[TMP6]], ptr @__msan_retval_tls, align 8
- ; CHECK-NEXT:    ret <4 x float> [[RES1]]
- ;
-@@ -1091,7 +1094,7 @@
- ; CHECK-NEXT:    [[TMP6:%.*]] = and i64 [[TMP5]], -2147483649
- ; CHECK-NEXT:    [[TMP7:%.*]] = inttoptr i64 [[TMP6]] to ptr
- ; CHECK-NEXT:    [[_MSLD:%.*]] = load <4 x i32>, ptr [[TMP7]], align 16
--; CHECK-NEXT:    [[TMP9:%.*]] = trunc <4 x i32> [[A2]] to <4 x i2>
-+; CHECK-NEXT:    [[TMP9:%.*]] = trunc <4 x i32> [[_MSLD]] to <4 x i2>
- ; CHECK-NEXT:    [[A0:%.*]] = bitcast <4 x i32> [[TMP2]] to <4 x float>
- ; CHECK-NEXT:    [[RES:%.*]] = call <4 x float> @llvm.x86.avx.vpermilvar.ps(<4 x float> [[A0]], <4 x i32> [[A2]])
- ; CHECK-NEXT:    [[TMP11:%.*]] = bitcast <4 x float> [[RES]] to <4 x i32>
-@@ -1116,20 +1119,21 @@
- define <8 x float> @test_x86_avx_vpermilvar_ps_256(<8 x float> %a0, <8 x i32> %a1) #0 {
- ; CHECK-LABEL: @test_x86_avx_vpermilvar_ps_256(
- ; CHECK-NEXT:    [[TMP1:%.*]] = load <8 x i32>, ptr @__msan_param_tls, align 8
-+; CHECK-NEXT:    [[A1:%.*]] = load <8 x i32>, ptr inttoptr (i64 add (i64 ptrtoint (ptr @__msan_param_tls to i64), i64 32) to ptr), align 8
- ; CHECK-NEXT:    [[TMP5:%.*]] = load i64, ptr @__msan_va_arg_overflow_size_tls, align 8
- ; CHECK-NEXT:    call void @llvm.donothing()
--; CHECK-NEXT:    [[TMP3:%.*]] = trunc <8 x i32> [[A1:%.*]] to <8 x i3>
-+; CHECK-NEXT:    [[TMP3:%.*]] = trunc <8 x i32> [[A1]] to <8 x i3>
- ; CHECK-NEXT:    [[A0:%.*]] = bitcast <8 x i32> [[TMP1]] to <8 x float>
--; CHECK-NEXT:    [[RES:%.*]] = call <8 x float> @llvm.x86.avx.vpermilvar.ps.256(<8 x float> [[A0]], <8 x i32> [[A1]])
-+; CHECK-NEXT:    [[RES:%.*]] = call <8 x float> @llvm.x86.avx.vpermilvar.ps.256(<8 x float> [[A0]], <8 x i32> [[A2:%.*]])
- ; CHECK-NEXT:    [[TMP6:%.*]] = bitcast <8 x float> [[RES]] to <8 x i32>
- ; CHECK-NEXT:    [[TMP7:%.*]] = bitcast <8 x i3> [[TMP3]] to i24
- ; CHECK-NEXT:    [[_MSCMP:%.*]] = icmp ne i24 [[TMP7]], 0
--; CHECK-NEXT:    br i1 [[_MSCMP]], label [[TMP8:%.*]], label [[TMP9:%.*]], !prof [[PROF1]]
--; CHECK:       8:
-+; CHECK-NEXT:    br i1 [[_MSCMP]], label [[TMP9:%.*]], label [[TMP10:%.*]], !prof [[PROF1]]
-+; CHECK:       9:
- ; CHECK-NEXT:    call void @__msan_warning_noreturn()
- ; CHECK-NEXT:    unreachable
--; CHECK:       9:
--; CHECK-NEXT:    [[RES1:%.*]] = call <8 x float> @llvm.x86.avx.vpermilvar.ps.256(<8 x float> [[A2:%.*]], <8 x i32> [[A1]])
-+; CHECK:       10:
-+; CHECK-NEXT:    [[RES1:%.*]] = call <8 x float> @llvm.x86.avx.vpermilvar.ps.256(<8 x float> [[A3:%.*]], <8 x i32> [[A2]])
- ; CHECK-NEXT:    store <8 x i32> [[TMP6]], ptr @__msan_retval_tls, align 8
- ; CHECK-NEXT:    ret <8 x float> [[RES1]]
- ;
-diff -ruN --strip-trailing-cr a/llvm/test/Instrumentation/MemorySanitizer/X86/avx512bw-intrinsics.ll b/llvm/test/Instrumentation/MemorySanitizer/X86/avx512bw-intrinsics.ll
---- a/llvm/test/Instrumentation/MemorySanitizer/X86/avx512bw-intrinsics.ll
-+++ b/llvm/test/Instrumentation/MemorySanitizer/X86/avx512bw-intrinsics.ll
-@@ -1477,17 +1477,18 @@
- ; CHECK-LABEL: @test_int_x86_avx512_vpermt2var_hi_512(
- ; CHECK-NEXT:    [[TMP1:%.*]] = load <32 x i16>, ptr inttoptr (i64 add (i64 ptrtoint (ptr @__msan_param_tls to i64), i64 64) to ptr), align 8
- ; CHECK-NEXT:    [[TMP2:%.*]] = load <32 x i16>, ptr inttoptr (i64 add (i64 ptrtoint (ptr @__msan_param_tls to i64), i64 128) to ptr), align 8
-+; CHECK-NEXT:    [[X0:%.*]] = load <32 x i16>, ptr @__msan_param_tls, align 8
- ; CHECK-NEXT:    call void @llvm.donothing()
--; CHECK-NEXT:    [[TMP3:%.*]] = trunc <32 x i16> [[X0:%.*]] to <32 x i5>
--; CHECK-NEXT:    [[TMP100:%.*]] = call <32 x i16> @llvm.x86.avx512.vpermi2var.hi.512(<32 x i16> [[TMP1]], <32 x i16> [[X0]], <32 x i16> [[TMP2]])
-+; CHECK-NEXT:    [[TMP3:%.*]] = trunc <32 x i16> [[X0]] to <32 x i5>
-+; CHECK-NEXT:    [[TMP100:%.*]] = call <32 x i16> @llvm.x86.avx512.vpermi2var.hi.512(<32 x i16> [[TMP1]], <32 x i16> [[X3:%.*]], <32 x i16> [[TMP2]])
- ; CHECK-NEXT:    [[TMP5:%.*]] = bitcast <32 x i5> [[TMP3]] to i160
- ; CHECK-NEXT:    [[_MSCMP:%.*]] = icmp ne i160 [[TMP5]], 0
--; CHECK-NEXT:    br i1 [[_MSCMP]], label [[TMP6:%.*]], label [[TMP7:%.*]], !prof [[PROF1]]
--; CHECK:       6:
-+; CHECK-NEXT:    br i1 [[_MSCMP]], label [[TMP7:%.*]], label [[TMP8:%.*]], !prof [[PROF1]]
-+; CHECK:       7:
- ; CHECK-NEXT:    call void @__msan_warning_noreturn() #[[ATTR8]]
- ; CHECK-NEXT:    unreachable
--; CHECK:       7:
--; CHECK-NEXT:    [[TMP103:%.*]] = call <32 x i16> @llvm.x86.avx512.vpermi2var.hi.512(<32 x i16> [[X1:%.*]], <32 x i16> [[X0]], <32 x i16> [[X2:%.*]])
-+; CHECK:       8:
-+; CHECK-NEXT:    [[TMP103:%.*]] = call <32 x i16> @llvm.x86.avx512.vpermi2var.hi.512(<32 x i16> [[X1:%.*]], <32 x i16> [[X3]], <32 x i16> [[X2:%.*]])
- ; CHECK-NEXT:    store <32 x i16> [[TMP100]], ptr @__msan_retval_tls, align 8
- ; CHECK-NEXT:    ret <32 x i16> [[TMP103]]
- ;
-@@ -1499,18 +1500,19 @@
- ; CHECK-LABEL: @test_int_x86_avx512_mask_vpermt2var_hi_512(
- ; CHECK-NEXT:    [[TMP1:%.*]] = load <32 x i16>, ptr inttoptr (i64 add (i64 ptrtoint (ptr @__msan_param_tls to i64), i64 64) to ptr), align 8
- ; CHECK-NEXT:    [[TMP2:%.*]] = load <32 x i16>, ptr inttoptr (i64 add (i64 ptrtoint (ptr @__msan_param_tls to i64), i64 128) to ptr), align 8
-+; CHECK-NEXT:    [[X0:%.*]] = load <32 x i16>, ptr @__msan_param_tls, align 8
- ; CHECK-NEXT:    [[TMP4:%.*]] = load i32, ptr inttoptr (i64 add (i64 ptrtoint (ptr @__msan_param_tls to i64), i64 192) to ptr), align 8
- ; CHECK-NEXT:    call void @llvm.donothing()
--; CHECK-NEXT:    [[TMP5:%.*]] = trunc <32 x i16> [[X0:%.*]] to <32 x i5>
--; CHECK-NEXT:    [[TMP101:%.*]] = call <32 x i16> @llvm.x86.avx512.vpermi2var.hi.512(<32 x i16> [[TMP1]], <32 x i16> [[X0]], <32 x i16> [[TMP2]])
-+; CHECK-NEXT:    [[TMP5:%.*]] = trunc <32 x i16> [[X0]] to <32 x i5>
-+; CHECK-NEXT:    [[TMP101:%.*]] = call <32 x i16> @llvm.x86.avx512.vpermi2var.hi.512(<32 x i16> [[TMP1]], <32 x i16> [[X4:%.*]], <32 x i16> [[TMP2]])
- ; CHECK-NEXT:    [[TMP6:%.*]] = bitcast <32 x i5> [[TMP5]] to i160
- ; CHECK-NEXT:    [[_MSCMP:%.*]] = icmp ne i160 [[TMP6]], 0
--; CHECK-NEXT:    br i1 [[_MSCMP]], label [[TMP7:%.*]], label [[TMP8:%.*]], !prof [[PROF1]]
--; CHECK:       7:
-+; CHECK-NEXT:    br i1 [[_MSCMP]], label [[TMP8:%.*]], label [[TMP9:%.*]], !prof [[PROF1]]
-+; CHECK:       8:
- ; CHECK-NEXT:    call void @__msan_warning_noreturn() #[[ATTR8]]
- ; CHECK-NEXT:    unreachable
--; CHECK:       8:
--; CHECK-NEXT:    [[TMP104:%.*]] = call <32 x i16> @llvm.x86.avx512.vpermi2var.hi.512(<32 x i16> [[X1:%.*]], <32 x i16> [[X0]], <32 x i16> [[X2:%.*]])
-+; CHECK:       9:
-+; CHECK-NEXT:    [[TMP104:%.*]] = call <32 x i16> @llvm.x86.avx512.vpermi2var.hi.512(<32 x i16> [[X1:%.*]], <32 x i16> [[X4]], <32 x i16> [[X2:%.*]])
- ; CHECK-NEXT:    [[TMP105:%.*]] = bitcast i32 [[TMP4]] to <32 x i1>
- ; CHECK-NEXT:    [[TMP106:%.*]] = bitcast i32 [[X3:%.*]] to <32 x i1>
- ; CHECK-NEXT:    [[TMP107:%.*]] = select <32 x i1> [[TMP106]], <32 x i16> [[TMP101]], <32 x i16> [[TMP1]]
-@@ -1532,18 +1534,19 @@
- ; CHECK-LABEL: @test_int_x86_avx512_maskz_vpermt2var_hi_512(
- ; CHECK-NEXT:    [[TMP1:%.*]] = load <32 x i16>, ptr inttoptr (i64 add (i64 ptrtoint (ptr @__msan_param_tls to i64), i64 64) to ptr), align 8
- ; CHECK-NEXT:    [[TMP2:%.*]] = load <32 x i16>, ptr inttoptr (i64 add (i64 ptrtoint (ptr @__msan_param_tls to i64), i64 128) to ptr), align 8
-+; CHECK-NEXT:    [[X0:%.*]] = load <32 x i16>, ptr @__msan_param_tls, align 8
- ; CHECK-NEXT:    [[TMP4:%.*]] = load i32, ptr inttoptr (i64 add (i64 ptrtoint (ptr @__msan_param_tls to i64), i64 192) to ptr), align 8
- ; CHECK-NEXT:    call void @llvm.donothing()
--; CHECK-NEXT:    [[TMP5:%.*]] = trunc <32 x i16> [[X0:%.*]] to <32 x i5>
--; CHECK-NEXT:    [[TMP101:%.*]] = call <32 x i16> @llvm.x86.avx512.vpermi2var.hi.512(<32 x i16> [[TMP1]], <32 x i16> [[X0]], <32 x i16> [[TMP2]])
-+; CHECK-NEXT:    [[TMP5:%.*]] = trunc <32 x i16> [[X0]] to <32 x i5>
-+; CHECK-NEXT:    [[TMP101:%.*]] = call <32 x i16> @llvm.x86.avx512.vpermi2var.hi.512(<32 x i16> [[TMP1]], <32 x i16> [[X4:%.*]], <32 x i16> [[TMP2]])
- ; CHECK-NEXT:    [[TMP6:%.*]] = bitcast <32 x i5> [[TMP5]] to i160
- ; CHECK-NEXT:    [[_MSCMP:%.*]] = icmp ne i160 [[TMP6]], 0
--; CHECK-NEXT:    br i1 [[_MSCMP]], label [[TMP7:%.*]], label [[TMP8:%.*]], !prof [[PROF1]]
--; CHECK:       7:
-+; CHECK-NEXT:    br i1 [[_MSCMP]], label [[TMP8:%.*]], label [[TMP9:%.*]], !prof [[PROF1]]
-+; CHECK:       8:
- ; CHECK-NEXT:    call void @__msan_warning_noreturn() #[[ATTR8]]
- ; CHECK-NEXT:    unreachable
--; CHECK:       8:
--; CHECK-NEXT:    [[TMP104:%.*]] = call <32 x i16> @llvm.x86.avx512.vpermi2var.hi.512(<32 x i16> [[X1:%.*]], <32 x i16> [[X0]], <32 x i16> [[X2:%.*]])
-+; CHECK:       9:
-+; CHECK-NEXT:    [[TMP104:%.*]] = call <32 x i16> @llvm.x86.avx512.vpermi2var.hi.512(<32 x i16> [[X1:%.*]], <32 x i16> [[X4]], <32 x i16> [[X2:%.*]])
- ; CHECK-NEXT:    [[TMP105:%.*]] = bitcast i32 [[TMP4]] to <32 x i1>
- ; CHECK-NEXT:    [[TMP106:%.*]] = bitcast i32 [[X3:%.*]] to <32 x i1>
- ; CHECK-NEXT:    [[TMP107:%.*]] = select <32 x i1> [[TMP106]], <32 x i16> [[TMP101]], <32 x i16> zeroinitializer
-@@ -1567,17 +1570,18 @@
- ; CHECK-LABEL: @test_int_x86_avx512_vpermi2var_hi_512(
- ; CHECK-NEXT:    [[TMP1:%.*]] = load <32 x i16>, ptr @__msan_param_tls, align 8
- ; CHECK-NEXT:    [[TMP2:%.*]] = load <32 x i16>, ptr inttoptr (i64 add (i64 ptrtoint (ptr @__msan_param_tls to i64), i64 128) to ptr), align 8
-+; CHECK-NEXT:    [[X1:%.*]] = load <32 x i16>, ptr inttoptr (i64 add (i64 ptrtoint (ptr @__msan_param_tls to i64), i64 64) to ptr), align 8
- ; CHECK-NEXT:    call void @llvm.donothing()
--; CHECK-NEXT:    [[TMP3:%.*]] = trunc <32 x i16> [[X1:%.*]] to <32 x i5>
--; CHECK-NEXT:    [[TMP100:%.*]] = call <32 x i16> @llvm.x86.avx512.vpermi2var.hi.512(<32 x i16> [[TMP1]], <32 x i16> [[X1]], <32 x i16> [[TMP2]])
-+; CHECK-NEXT:    [[TMP3:%.*]] = trunc <32 x i16> [[X1]] to <32 x i5>
-+; CHECK-NEXT:    [[TMP100:%.*]] = call <32 x i16> @llvm.x86.avx512.vpermi2var.hi.512(<32 x i16> [[TMP1]], <32 x i16> [[X3:%.*]], <32 x i16> [[TMP2]])
- ; CHECK-NEXT:    [[TMP5:%.*]] = bitcast <32 x i5> [[TMP3]] to i160
- ; CHECK-NEXT:    [[_MSCMP:%.*]] = icmp ne i160 [[TMP5]], 0
--; CHECK-NEXT:    br i1 [[_MSCMP]], label [[TMP6:%.*]], label [[TMP7:%.*]], !prof [[PROF1]]
--; CHECK:       6:
-+; CHECK-NEXT:    br i1 [[_MSCMP]], label [[TMP7:%.*]], label [[TMP8:%.*]], !prof [[PROF1]]
-+; CHECK:       7:
- ; CHECK-NEXT:    call void @__msan_warning_noreturn() #[[ATTR8]]
- ; CHECK-NEXT:    unreachable
--; CHECK:       7:
--; CHECK-NEXT:    [[TMP103:%.*]] = call <32 x i16> @llvm.x86.avx512.vpermi2var.hi.512(<32 x i16> [[X0:%.*]], <32 x i16> [[X1]], <32 x i16> [[X2:%.*]])
-+; CHECK:       8:
-+; CHECK-NEXT:    [[TMP103:%.*]] = call <32 x i16> @llvm.x86.avx512.vpermi2var.hi.512(<32 x i16> [[X0:%.*]], <32 x i16> [[X3]], <32 x i16> [[X2:%.*]])
- ; CHECK-NEXT:    store <32 x i16> [[TMP100]], ptr @__msan_retval_tls, align 8
- ; CHECK-NEXT:    ret <32 x i16> [[TMP103]]
- ;
-@@ -1589,11 +1593,11 @@
- ; CHECK-LABEL: @test_int_x86_avx512_mask_vpermi2var_hi_512(
- ; CHECK-NEXT:    [[TMP1:%.*]] = load <32 x i16>, ptr @__msan_param_tls, align 8
- ; CHECK-NEXT:    [[TMP2:%.*]] = load <32 x i16>, ptr inttoptr (i64 add (i64 ptrtoint (ptr @__msan_param_tls to i64), i64 128) to ptr), align 8
--; CHECK-NEXT:    [[TMP4:%.*]] = load i32, ptr inttoptr (i64 add (i64 ptrtoint (ptr @__msan_param_tls to i64), i64 192) to ptr), align 8
- ; CHECK-NEXT:    [[TMP3:%.*]] = load <32 x i16>, ptr inttoptr (i64 add (i64 ptrtoint (ptr @__msan_param_tls to i64), i64 64) to ptr), align 8
-+; CHECK-NEXT:    [[TMP4:%.*]] = load i32, ptr inttoptr (i64 add (i64 ptrtoint (ptr @__msan_param_tls to i64), i64 192) to ptr), align 8
- ; CHECK-NEXT:    call void @llvm.donothing()
--; CHECK-NEXT:    [[TMP5:%.*]] = trunc <32 x i16> [[X1:%.*]] to <32 x i5>
--; CHECK-NEXT:    [[TMP101:%.*]] = call <32 x i16> @llvm.x86.avx512.vpermi2var.hi.512(<32 x i16> [[TMP1]], <32 x i16> [[X1]], <32 x i16> [[TMP2]])
-+; CHECK-NEXT:    [[TMP5:%.*]] = trunc <32 x i16> [[TMP3]] to <32 x i5>
-+; CHECK-NEXT:    [[TMP101:%.*]] = call <32 x i16> @llvm.x86.avx512.vpermi2var.hi.512(<32 x i16> [[TMP1]], <32 x i16> [[X1:%.*]], <32 x i16> [[TMP2]])
- ; CHECK-NEXT:    [[TMP7:%.*]] = bitcast <32 x i5> [[TMP5]] to i160
- ; CHECK-NEXT:    [[_MSCMP:%.*]] = icmp ne i160 [[TMP7]], 0
- ; CHECK-NEXT:    br i1 [[_MSCMP]], label [[TMP8:%.*]], label [[TMP9:%.*]], !prof [[PROF1]]
-diff -ruN --strip-trailing-cr a/llvm/test/Instrumentation/MemorySanitizer/X86/avx512bw-intrinsics-upgrade.ll b/llvm/test/Instrumentation/MemorySanitizer/X86/avx512bw-intrinsics-upgrade.ll
---- a/llvm/test/Instrumentation/MemorySanitizer/X86/avx512bw-intrinsics-upgrade.ll
-+++ b/llvm/test/Instrumentation/MemorySanitizer/X86/avx512bw-intrinsics-upgrade.ll
-@@ -5108,17 +5108,18 @@
- ; CHECK-LABEL: @test_int_x86_avx512_vpermt2var_hi_512(
- ; CHECK-NEXT:    [[TMP1:%.*]] = load <32 x i16>, ptr inttoptr (i64 add (i64 ptrtoint (ptr @__msan_param_tls to i64), i64 64) to ptr), align 8
- ; CHECK-NEXT:    [[TMP2:%.*]] = load <32 x i16>, ptr inttoptr (i64 add (i64 ptrtoint (ptr @__msan_param_tls to i64), i64 128) to ptr), align 8
-+; CHECK-NEXT:    [[X0:%.*]] = load <32 x i16>, ptr @__msan_param_tls, align 8
- ; CHECK-NEXT:    call void @llvm.donothing()
--; CHECK-NEXT:    [[TMP3:%.*]] = trunc <32 x i16> [[X0:%.*]] to <32 x i5>
--; CHECK-NEXT:    [[TMP100:%.*]] = call <32 x i16> @llvm.x86.avx512.vpermi2var.hi.512(<32 x i16> [[TMP1]], <32 x i16> [[X0]], <32 x i16> [[TMP2]])
-+; CHECK-NEXT:    [[TMP3:%.*]] = trunc <32 x i16> [[X0]] to <32 x i5>
-+; CHECK-NEXT:    [[TMP100:%.*]] = call <32 x i16> @llvm.x86.avx512.vpermi2var.hi.512(<32 x i16> [[TMP1]], <32 x i16> [[X3:%.*]], <32 x i16> [[TMP2]])
- ; CHECK-NEXT:    [[TMP5:%.*]] = bitcast <32 x i5> [[TMP3]] to i160
- ; CHECK-NEXT:    [[_MSCMP:%.*]] = icmp ne i160 [[TMP5]], 0
--; CHECK-NEXT:    br i1 [[_MSCMP]], label [[TMP6:%.*]], label [[TMP7:%.*]], !prof [[PROF1]]
--; CHECK:       6:
-+; CHECK-NEXT:    br i1 [[_MSCMP]], label [[TMP7:%.*]], label [[TMP8:%.*]], !prof [[PROF1]]
-+; CHECK:       7:
- ; CHECK-NEXT:    call void @__msan_warning_noreturn() #[[ATTR7]]
- ; CHECK-NEXT:    unreachable
--; CHECK:       7:
--; CHECK-NEXT:    [[TMP103:%.*]] = call <32 x i16> @llvm.x86.avx512.vpermi2var.hi.512(<32 x i16> [[X1:%.*]], <32 x i16> [[X0]], <32 x i16> [[X2:%.*]])
-+; CHECK:       8:
-+; CHECK-NEXT:    [[TMP103:%.*]] = call <32 x i16> @llvm.x86.avx512.vpermi2var.hi.512(<32 x i16> [[X1:%.*]], <32 x i16> [[X3]], <32 x i16> [[X2:%.*]])
- ; CHECK-NEXT:    store <32 x i16> [[TMP100]], ptr @__msan_retval_tls, align 8
- ; CHECK-NEXT:    ret <32 x i16> [[TMP103]]
- ;
-@@ -5130,18 +5131,19 @@
- ; CHECK-LABEL: @test_int_x86_avx512_mask_vpermt2var_hi_512(
- ; CHECK-NEXT:    [[TMP1:%.*]] = load <32 x i16>, ptr inttoptr (i64 add (i64 ptrtoint (ptr @__msan_param_tls to i64), i64 64) to ptr), align 8
- ; CHECK-NEXT:    [[TMP2:%.*]] = load <32 x i16>, ptr inttoptr (i64 add (i64 ptrtoint (ptr @__msan_param_tls to i64), i64 128) to ptr), align 8
-+; CHECK-NEXT:    [[X0:%.*]] = load <32 x i16>, ptr @__msan_param_tls, align 8
- ; CHECK-NEXT:    [[TMP4:%.*]] = load i32, ptr inttoptr (i64 add (i64 ptrtoint (ptr @__msan_param_tls to i64), i64 192) to ptr), align 8
- ; CHECK-NEXT:    call void @llvm.donothing()
--; CHECK-NEXT:    [[TMP5:%.*]] = trunc <32 x i16> [[X0:%.*]] to <32 x i5>
--; CHECK-NEXT:    [[TMP101:%.*]] = call <32 x i16> @llvm.x86.avx512.vpermi2var.hi.512(<32 x i16> [[TMP1]], <32 x i16> [[X0]], <32 x i16> [[TMP2]])
-+; CHECK-NEXT:    [[TMP5:%.*]] = trunc <32 x i16> [[X0]] to <32 x i5>
-+; CHECK-NEXT:    [[TMP101:%.*]] = call <32 x i16> @llvm.x86.avx512.vpermi2var.hi.512(<32 x i16> [[TMP1]], <32 x i16> [[X4:%.*]], <32 x i16> [[TMP2]])
- ; CHECK-NEXT:    [[TMP6:%.*]] = bitcast <32 x i5> [[TMP5]] to i160
- ; CHECK-NEXT:    [[_MSCMP:%.*]] = icmp ne i160 [[TMP6]], 0
--; CHECK-NEXT:    br i1 [[_MSCMP]], label [[TMP7:%.*]], label [[TMP8:%.*]], !prof [[PROF1]]
--; CHECK:       7:
-+; CHECK-NEXT:    br i1 [[_MSCMP]], label [[TMP8:%.*]], label [[TMP9:%.*]], !prof [[PROF1]]
-+; CHECK:       8:
- ; CHECK-NEXT:    call void @__msan_warning_noreturn() #[[ATTR7]]
- ; CHECK-NEXT:    unreachable
--; CHECK:       8:
--; CHECK-NEXT:    [[TMP104:%.*]] = call <32 x i16> @llvm.x86.avx512.vpermi2var.hi.512(<32 x i16> [[X1:%.*]], <32 x i16> [[X0]], <32 x i16> [[X2:%.*]])
-+; CHECK:       9:
-+; CHECK-NEXT:    [[TMP104:%.*]] = call <32 x i16> @llvm.x86.avx512.vpermi2var.hi.512(<32 x i16> [[X1:%.*]], <32 x i16> [[X4]], <32 x i16> [[X2:%.*]])
- ; CHECK-NEXT:    [[TMP105:%.*]] = bitcast i32 [[TMP4]] to <32 x i1>
- ; CHECK-NEXT:    [[TMP106:%.*]] = bitcast i32 [[X3:%.*]] to <32 x i1>
- ; CHECK-NEXT:    [[TMP107:%.*]] = select <32 x i1> [[TMP106]], <32 x i16> [[TMP101]], <32 x i16> [[TMP1]]
-@@ -5163,18 +5165,19 @@
- ; CHECK-LABEL: @test_int_x86_avx512_maskz_vpermt2var_hi_512(
- ; CHECK-NEXT:    [[TMP1:%.*]] = load <32 x i16>, ptr inttoptr (i64 add (i64 ptrtoint (ptr @__msan_param_tls to i64), i64 64) to ptr), align 8
- ; CHECK-NEXT:    [[TMP2:%.*]] = load <32 x i16>, ptr inttoptr (i64 add (i64 ptrtoint (ptr @__msan_param_tls to i64), i64 128) to ptr), align 8
-+; CHECK-NEXT:    [[X0:%.*]] = load <32 x i16>, ptr @__msan_param_tls, align 8
- ; CHECK-NEXT:    [[TMP4:%.*]] = load i32, ptr inttoptr (i64 add (i64 ptrtoint (ptr @__msan_param_tls to i64), i64 192) to ptr), align 8
- ; CHECK-NEXT:    call void @llvm.donothing()
--; CHECK-NEXT:    [[TMP5:%.*]] = trunc <32 x i16> [[X0:%.*]] to <32 x i5>
--; CHECK-NEXT:    [[TMP101:%.*]] = call <32 x i16> @llvm.x86.avx512.vpermi2var.hi.512(<32 x i16> [[TMP1]], <32 x i16> [[X0]], <32 x i16> [[TMP2]])
-+; CHECK-NEXT:    [[TMP5:%.*]] = trunc <32 x i16> [[X0]] to <32 x i5>
-+; CHECK-NEXT:    [[TMP101:%.*]] = call <32 x i16> @llvm.x86.avx512.vpermi2var.hi.512(<32 x i16> [[TMP1]], <32 x i16> [[X4:%.*]], <32 x i16> [[TMP2]])
- ; CHECK-NEXT:    [[TMP6:%.*]] = bitcast <32 x i5> [[TMP5]] to i160
- ; CHECK-NEXT:    [[_MSCMP:%.*]] = icmp ne i160 [[TMP6]], 0
--; CHECK-NEXT:    br i1 [[_MSCMP]], label [[TMP7:%.*]], label [[TMP8:%.*]], !prof [[PROF1]]
--; CHECK:       7:
-+; CHECK-NEXT:    br i1 [[_MSCMP]], label [[TMP8:%.*]], label [[TMP9:%.*]], !prof [[PROF1]]
-+; CHECK:       8:
- ; CHECK-NEXT:    call void @__msan_warning_noreturn() #[[ATTR7]]
- ; CHECK-NEXT:    unreachable
--; CHECK:       8:
--; CHECK-NEXT:    [[TMP104:%.*]] = call <32 x i16> @llvm.x86.avx512.vpermi2var.hi.512(<32 x i16> [[X1:%.*]], <32 x i16> [[X0]], <32 x i16> [[X2:%.*]])
-+; CHECK:       9:
-+; CHECK-NEXT:    [[TMP104:%.*]] = call <32 x i16> @llvm.x86.avx512.vpermi2var.hi.512(<32 x i16> [[X1:%.*]], <32 x i16> [[X4]], <32 x i16> [[X2:%.*]])
- ; CHECK-NEXT:    [[TMP105:%.*]] = bitcast i32 [[TMP4]] to <32 x i1>
- ; CHECK-NEXT:    [[TMP106:%.*]] = bitcast i32 [[X3:%.*]] to <32 x i1>
- ; CHECK-NEXT:    [[TMP107:%.*]] = select <32 x i1> [[TMP106]], <32 x i16> [[TMP101]], <32 x i16> zeroinitializer
-@@ -5196,17 +5199,18 @@
- ; CHECK-LABEL: @test_int_x86_avx512_vpermi2var_hi_512(
- ; CHECK-NEXT:    [[TMP1:%.*]] = load <32 x i16>, ptr @__msan_param_tls, align 8
- ; CHECK-NEXT:    [[TMP2:%.*]] = load <32 x i16>, ptr inttoptr (i64 add (i64 ptrtoint (ptr @__msan_param_tls to i64), i64 128) to ptr), align 8
-+; CHECK-NEXT:    [[X1:%.*]] = load <32 x i16>, ptr inttoptr (i64 add (i64 ptrtoint (ptr @__msan_param_tls to i64), i64 64) to ptr), align 8
- ; CHECK-NEXT:    call void @llvm.donothing()
--; CHECK-NEXT:    [[TMP3:%.*]] = trunc <32 x i16> [[X1:%.*]] to <32 x i5>
--; CHECK-NEXT:    [[TMP100:%.*]] = call <32 x i16> @llvm.x86.avx512.vpermi2var.hi.512(<32 x i16> [[TMP1]], <32 x i16> [[X1]], <32 x i16> [[TMP2]])
-+; CHECK-NEXT:    [[TMP3:%.*]] = trunc <32 x i16> [[X1]] to <32 x i5>
-+; CHECK-NEXT:    [[TMP100:%.*]] = call <32 x i16> @llvm.x86.avx512.vpermi2var.hi.512(<32 x i16> [[TMP1]], <32 x i16> [[X3:%.*]], <32 x i16> [[TMP2]])
- ; CHECK-NEXT:    [[TMP5:%.*]] = bitcast <32 x i5> [[TMP3]] to i160
- ; CHECK-NEXT:    [[_MSCMP:%.*]] = icmp ne i160 [[TMP5]], 0
--; CHECK-NEXT:    br i1 [[_MSCMP]], label [[TMP6:%.*]], label [[TMP7:%.*]], !prof [[PROF1]]
--; CHECK:       6:
-+; CHECK-NEXT:    br i1 [[_MSCMP]], label [[TMP7:%.*]], label [[TMP8:%.*]], !prof [[PROF1]]
-+; CHECK:       7:
- ; CHECK-NEXT:    call void @__msan_warning_noreturn() #[[ATTR7]]
- ; CHECK-NEXT:    unreachable
--; CHECK:       7:
--; CHECK-NEXT:    [[TMP103:%.*]] = call <32 x i16> @llvm.x86.avx512.vpermi2var.hi.512(<32 x i16> [[X0:%.*]], <32 x i16> [[X1]], <32 x i16> [[X2:%.*]])
-+; CHECK:       8:
-+; CHECK-NEXT:    [[TMP103:%.*]] = call <32 x i16> @llvm.x86.avx512.vpermi2var.hi.512(<32 x i16> [[X0:%.*]], <32 x i16> [[X3]], <32 x i16> [[X2:%.*]])
- ; CHECK-NEXT:    store <32 x i16> [[TMP100]], ptr @__msan_retval_tls, align 8
- ; CHECK-NEXT:    ret <32 x i16> [[TMP103]]
- ;
-@@ -5218,11 +5222,11 @@
- ; CHECK-LABEL: @test_int_x86_avx512_mask_vpermi2var_hi_512(
- ; CHECK-NEXT:    [[TMP1:%.*]] = load <32 x i16>, ptr @__msan_param_tls, align 8
- ; CHECK-NEXT:    [[TMP2:%.*]] = load <32 x i16>, ptr inttoptr (i64 add (i64 ptrtoint (ptr @__msan_param_tls to i64), i64 128) to ptr), align 8
--; CHECK-NEXT:    [[TMP4:%.*]] = load i32, ptr inttoptr (i64 add (i64 ptrtoint (ptr @__msan_param_tls to i64), i64 192) to ptr), align 8
- ; CHECK-NEXT:    [[TMP3:%.*]] = load <32 x i16>, ptr inttoptr (i64 add (i64 ptrtoint (ptr @__msan_param_tls to i64), i64 64) to ptr), align 8
-+; CHECK-NEXT:    [[TMP4:%.*]] = load i32, ptr inttoptr (i64 add (i64 ptrtoint (ptr @__msan_param_tls to i64), i64 192) to ptr), align 8
- ; CHECK-NEXT:    call void @llvm.donothing()
--; CHECK-NEXT:    [[TMP5:%.*]] = trunc <32 x i16> [[X1:%.*]] to <32 x i5>
--; CHECK-NEXT:    [[TMP101:%.*]] = call <32 x i16> @llvm.x86.avx512.vpermi2var.hi.512(<32 x i16> [[TMP1]], <32 x i16> [[X1]], <32 x i16> [[TMP2]])
-+; CHECK-NEXT:    [[TMP5:%.*]] = trunc <32 x i16> [[TMP3]] to <32 x i5>
-+; CHECK-NEXT:    [[TMP101:%.*]] = call <32 x i16> @llvm.x86.avx512.vpermi2var.hi.512(<32 x i16> [[TMP1]], <32 x i16> [[X1:%.*]], <32 x i16> [[TMP2]])
- ; CHECK-NEXT:    [[TMP7:%.*]] = bitcast <32 x i5> [[TMP5]] to i160
- ; CHECK-NEXT:    [[_MSCMP:%.*]] = icmp ne i160 [[TMP7]], 0
- ; CHECK-NEXT:    br i1 [[_MSCMP]], label [[TMP8:%.*]], label [[TMP9:%.*]], !prof [[PROF1]]
-diff -ruN --strip-trailing-cr a/llvm/test/Instrumentation/MemorySanitizer/X86/avx512-intrinsics.ll b/llvm/test/Instrumentation/MemorySanitizer/X86/avx512-intrinsics.ll
---- a/llvm/test/Instrumentation/MemorySanitizer/X86/avx512-intrinsics.ll
-+++ b/llvm/test/Instrumentation/MemorySanitizer/X86/avx512-intrinsics.ll
-@@ -5495,28 +5495,29 @@
- ; CHECK-LABEL: @test_int_x86_avx512_vpermi2var_d_512(
- ; CHECK-NEXT:    [[TMP1:%.*]] = load i64, ptr inttoptr (i64 add (i64 ptrtoint (ptr @__msan_param_tls to i64), i64 128) to ptr), align 8
- ; CHECK-NEXT:    [[TMP2:%.*]] = load <16 x i32>, ptr @__msan_param_tls, align 8
-+; CHECK-NEXT:    [[X1:%.*]] = load <16 x i32>, ptr inttoptr (i64 add (i64 ptrtoint (ptr @__msan_param_tls to i64), i64 64) to ptr), align 8
- ; CHECK-NEXT:    call void @llvm.donothing()
- ; CHECK-NEXT:    [[_MSCMP:%.*]] = icmp ne i64 [[TMP1]], 0
--; CHECK-NEXT:    br i1 [[_MSCMP]], label [[TMP3:%.*]], label [[TMP4:%.*]], !prof [[PROF1]]
--; CHECK:       3:
-+; CHECK-NEXT:    br i1 [[_MSCMP]], label [[TMP4:%.*]], label [[TMP5:%.*]], !prof [[PROF1]]
-+; CHECK:       4:
- ; CHECK-NEXT:    call void @__msan_warning_noreturn() #[[ATTR10]]
- ; CHECK-NEXT:    unreachable
--; CHECK:       4:
-+; CHECK:       5:
- ; CHECK-NEXT:    [[X2:%.*]] = load <16 x i32>, ptr [[X2P:%.*]], align 64
- ; CHECK-NEXT:    [[TMP6:%.*]] = ptrtoint ptr [[X2P]] to i64
- ; CHECK-NEXT:    [[TMP7:%.*]] = xor i64 [[TMP6]], 87960930222080
- ; CHECK-NEXT:    [[TMP8:%.*]] = inttoptr i64 [[TMP7]] to ptr
- ; CHECK-NEXT:    [[_MSLD:%.*]] = load <16 x i32>, ptr [[TMP8]], align 64
--; CHECK-NEXT:    [[TMP13:%.*]] = trunc <16 x i32> [[X1:%.*]] to <16 x i4>
--; CHECK-NEXT:    [[_MSPROP1:%.*]] = call <16 x i32> @llvm.x86.avx512.vpermi2var.d.512(<16 x i32> [[TMP2]], <16 x i32> [[X1]], <16 x i32> [[_MSLD]])
-+; CHECK-NEXT:    [[TMP13:%.*]] = trunc <16 x i32> [[X1]] to <16 x i4>
-+; CHECK-NEXT:    [[_MSPROP1:%.*]] = call <16 x i32> @llvm.x86.avx512.vpermi2var.d.512(<16 x i32> [[TMP2]], <16 x i32> [[X3:%.*]], <16 x i32> [[_MSLD]])
- ; CHECK-NEXT:    [[TMP10:%.*]] = bitcast <16 x i4> [[TMP13]] to i64
- ; CHECK-NEXT:    [[_MSCMP1:%.*]] = icmp ne i64 [[TMP10]], 0
--; CHECK-NEXT:    br i1 [[_MSCMP1]], label [[TMP11:%.*]], label [[TMP12:%.*]], !prof [[PROF1]]
--; CHECK:       11:
-+; CHECK-NEXT:    br i1 [[_MSCMP1]], label [[TMP12:%.*]], label [[TMP14:%.*]], !prof [[PROF1]]
-+; CHECK:       12:
- ; CHECK-NEXT:    call void @__msan_warning_noreturn() #[[ATTR10]]
- ; CHECK-NEXT:    unreachable
--; CHECK:       12:
--; CHECK-NEXT:    [[TMP9:%.*]] = call <16 x i32> @llvm.x86.avx512.vpermi2var.d.512(<16 x i32> [[X0:%.*]], <16 x i32> [[X1]], <16 x i32> [[X2]])
-+; CHECK:       13:
-+; CHECK-NEXT:    [[TMP9:%.*]] = call <16 x i32> @llvm.x86.avx512.vpermi2var.d.512(<16 x i32> [[X0:%.*]], <16 x i32> [[X3]], <16 x i32> [[X2]])
- ; CHECK-NEXT:    store <16 x i32> [[_MSPROP1]], ptr @__msan_retval_tls, align 8
- ; CHECK-NEXT:    ret <16 x i32> [[TMP9]]
- ;
-@@ -5529,8 +5530,8 @@
- ; CHECK-LABEL: @test_int_x86_avx512_mask_vpermi2var_d_512(
- ; CHECK-NEXT:    [[TMP1:%.*]] = load i64, ptr inttoptr (i64 add (i64 ptrtoint (ptr @__msan_param_tls to i64), i64 128) to ptr), align 8
- ; CHECK-NEXT:    [[TMP2:%.*]] = load <16 x i32>, ptr @__msan_param_tls, align 8
--; CHECK-NEXT:    [[TMP4:%.*]] = load i16, ptr inttoptr (i64 add (i64 ptrtoint (ptr @__msan_param_tls to i64), i64 136) to ptr), align 8
- ; CHECK-NEXT:    [[TMP3:%.*]] = load <16 x i32>, ptr inttoptr (i64 add (i64 ptrtoint (ptr @__msan_param_tls to i64), i64 64) to ptr), align 8
-+; CHECK-NEXT:    [[TMP4:%.*]] = load i16, ptr inttoptr (i64 add (i64 ptrtoint (ptr @__msan_param_tls to i64), i64 136) to ptr), align 8
- ; CHECK-NEXT:    call void @llvm.donothing()
- ; CHECK-NEXT:    [[_MSCMP:%.*]] = icmp ne i64 [[TMP1]], 0
- ; CHECK-NEXT:    br i1 [[_MSCMP]], label [[TMP5:%.*]], label [[TMP6:%.*]], !prof [[PROF1]]
-@@ -5543,8 +5544,8 @@
- ; CHECK-NEXT:    [[TMP8:%.*]] = xor i64 [[TMP7]], 87960930222080
- ; CHECK-NEXT:    [[TMP9:%.*]] = inttoptr i64 [[TMP8]] to ptr
- ; CHECK-NEXT:    [[_MSLD:%.*]] = load <16 x i32>, ptr [[TMP9]], align 64
--; CHECK-NEXT:    [[TMP18:%.*]] = trunc <16 x i32> [[X1:%.*]] to <16 x i4>
--; CHECK-NEXT:    [[_MSPROP1:%.*]] = call <16 x i32> @llvm.x86.avx512.vpermi2var.d.512(<16 x i32> [[TMP2]], <16 x i32> [[X1]], <16 x i32> [[_MSLD]])
-+; CHECK-NEXT:    [[TMP18:%.*]] = trunc <16 x i32> [[TMP3]] to <16 x i4>
-+; CHECK-NEXT:    [[_MSPROP1:%.*]] = call <16 x i32> @llvm.x86.avx512.vpermi2var.d.512(<16 x i32> [[TMP2]], <16 x i32> [[X1:%.*]], <16 x i32> [[_MSLD]])
- ; CHECK-NEXT:    [[TMP19:%.*]] = bitcast <16 x i4> [[TMP18]] to i64
- ; CHECK-NEXT:    [[_MSCMP1:%.*]] = icmp ne i64 [[TMP19]], 0
- ; CHECK-NEXT:    br i1 [[_MSCMP1]], label [[TMP20:%.*]], label [[TMP21:%.*]], !prof [[PROF1]]
-@@ -5577,20 +5578,21 @@
- ; CHECK-LABEL: @test_int_x86_avx512_vpermi2var_pd_512(
- ; CHECK-NEXT:    [[TMP1:%.*]] = load <8 x i64>, ptr @__msan_param_tls, align 8
- ; CHECK-NEXT:    [[TMP3:%.*]] = load <8 x i64>, ptr inttoptr (i64 add (i64 ptrtoint (ptr @__msan_param_tls to i64), i64 128) to ptr), align 8
-+; CHECK-NEXT:    [[X1:%.*]] = load <8 x i64>, ptr inttoptr (i64 add (i64 ptrtoint (ptr @__msan_param_tls to i64), i64 64) to ptr), align 8
- ; CHECK-NEXT:    call void @llvm.donothing()
--; CHECK-NEXT:    [[TMP6:%.*]] = trunc <8 x i64> [[X1:%.*]] to <8 x i3>
-+; CHECK-NEXT:    [[TMP6:%.*]] = trunc <8 x i64> [[X1]] to <8 x i3>
- ; CHECK-NEXT:    [[TMP4:%.*]] = bitcast <8 x i64> [[TMP1]] to <8 x double>
- ; CHECK-NEXT:    [[TMP5:%.*]] = bitcast <8 x i64> [[TMP3]] to <8 x double>
--; CHECK-NEXT:    [[TMP11:%.*]] = call <8 x double> @llvm.x86.avx512.vpermi2var.pd.512(<8 x double> [[TMP4]], <8 x i64> [[X1]], <8 x double> [[TMP5]])
-+; CHECK-NEXT:    [[TMP11:%.*]] = call <8 x double> @llvm.x86.avx512.vpermi2var.pd.512(<8 x double> [[TMP4]], <8 x i64> [[X3:%.*]], <8 x double> [[TMP5]])
- ; CHECK-NEXT:    [[TMP7:%.*]] = bitcast <8 x double> [[TMP11]] to <8 x i64>
- ; CHECK-NEXT:    [[TMP8:%.*]] = bitcast <8 x i3> [[TMP6]] to i24
- ; CHECK-NEXT:    [[_MSCMP:%.*]] = icmp ne i24 [[TMP8]], 0
--; CHECK-NEXT:    br i1 [[_MSCMP]], label [[TMP12:%.*]], label [[TMP10:%.*]], !prof [[PROF1]]
--; CHECK:       9:
-+; CHECK-NEXT:    br i1 [[_MSCMP]], label [[TMP10:%.*]], label [[TMP12:%.*]], !prof [[PROF1]]
-+; CHECK:       10:
- ; CHECK-NEXT:    call void @__msan_warning_noreturn() #[[ATTR10]]
- ; CHECK-NEXT:    unreachable
--; CHECK:       10:
--; CHECK-NEXT:    [[TMP9:%.*]] = call <8 x double> @llvm.x86.avx512.vpermi2var.pd.512(<8 x double> [[X0:%.*]], <8 x i64> [[X1]], <8 x double> [[X2:%.*]])
-+; CHECK:       11:
-+; CHECK-NEXT:    [[TMP9:%.*]] = call <8 x double> @llvm.x86.avx512.vpermi2var.pd.512(<8 x double> [[X0:%.*]], <8 x i64> [[X3]], <8 x double> [[X2:%.*]])
- ; CHECK-NEXT:    store <8 x i64> [[TMP7]], ptr @__msan_retval_tls, align 8
- ; CHECK-NEXT:    ret <8 x double> [[TMP9]]
- ;
-@@ -5605,10 +5607,10 @@
- ; CHECK-NEXT:    [[TMP2:%.*]] = load <8 x i64>, ptr inttoptr (i64 add (i64 ptrtoint (ptr @__msan_param_tls to i64), i64 64) to ptr), align 8
- ; CHECK-NEXT:    [[TMP4:%.*]] = load i8, ptr inttoptr (i64 add (i64 ptrtoint (ptr @__msan_param_tls to i64), i64 192) to ptr), align 8
- ; CHECK-NEXT:    call void @llvm.donothing()
--; CHECK-NEXT:    [[TMP7:%.*]] = trunc <8 x i64> [[X1:%.*]] to <8 x i3>
-+; CHECK-NEXT:    [[TMP7:%.*]] = trunc <8 x i64> [[TMP2]] to <8 x i3>
- ; CHECK-NEXT:    [[TMP5:%.*]] = bitcast <8 x i64> [[TMP1]] to <8 x double>
- ; CHECK-NEXT:    [[TMP6:%.*]] = bitcast <8 x i64> [[TMP3]] to <8 x double>
--; CHECK-NEXT:    [[TMP9:%.*]] = call <8 x double> @llvm.x86.avx512.vpermi2var.pd.512(<8 x double> [[TMP5]], <8 x i64> [[X1]], <8 x double> [[TMP6]])
-+; CHECK-NEXT:    [[TMP9:%.*]] = call <8 x double> @llvm.x86.avx512.vpermi2var.pd.512(<8 x double> [[TMP5]], <8 x i64> [[X1:%.*]], <8 x double> [[TMP6]])
- ; CHECK-NEXT:    [[TMP8:%.*]] = bitcast <8 x double> [[TMP9]] to <8 x i64>
- ; CHECK-NEXT:    [[TMP21:%.*]] = bitcast <8 x i3> [[TMP7]] to i24
- ; CHECK-NEXT:    [[_MSCMP:%.*]] = icmp ne i24 [[TMP21]], 0
-@@ -5645,20 +5647,21 @@
- ; CHECK-LABEL: @test_int_x86_avx512_vpermi2var_ps_512(
- ; CHECK-NEXT:    [[TMP1:%.*]] = load <16 x i32>, ptr @__msan_param_tls, align 8
- ; CHECK-NEXT:    [[TMP3:%.*]] = load <16 x i32>, ptr inttoptr (i64 add (i64 ptrtoint (ptr @__msan_param_tls to i64), i64 128) to ptr), align 8
-+; CHECK-NEXT:    [[X1:%.*]] = load <16 x i32>, ptr inttoptr (i64 add (i64 ptrtoint (ptr @__msan_param_tls to i64), i64 64) to ptr), align 8
- ; CHECK-NEXT:    call void @llvm.donothing()
--; CHECK-NEXT:    [[TMP6:%.*]] = trunc <16 x i32> [[X1:%.*]] to <16 x i4>
-+; CHECK-NEXT:    [[TMP6:%.*]] = trunc <16 x i32> [[X1]] to <16 x i4>
- ; CHECK-NEXT:    [[TMP4:%.*]] = bitcast <16 x i32> [[TMP1]] to <16 x float>
- ; CHECK-NEXT:    [[TMP5:%.*]] = bitcast <16 x i32> [[TMP3]] to <16 x float>
--; CHECK-NEXT:    [[TMP11:%.*]] = call <16 x float> @llvm.x86.avx512.vpermi2var.ps.512(<16 x float> [[TMP4]], <16 x i32> [[X1]], <16 x float> [[TMP5]])
-+; CHECK-NEXT:    [[TMP11:%.*]] = call <16 x float> @llvm.x86.avx512.vpermi2var.ps.512(<16 x float> [[TMP4]], <16 x i32> [[X3:%.*]], <16 x float> [[TMP5]])
- ; CHECK-NEXT:    [[TMP7:%.*]] = bitcast <16 x float> [[TMP11]] to <16 x i32>
- ; CHECK-NEXT:    [[TMP8:%.*]] = bitcast <16 x i4> [[TMP6]] to i64
- ; CHECK-NEXT:    [[_MSCMP:%.*]] = icmp ne i64 [[TMP8]], 0
--; CHECK-NEXT:    br i1 [[_MSCMP]], label [[TMP12:%.*]], label [[TMP10:%.*]], !prof [[PROF1]]
--; CHECK:       9:
-+; CHECK-NEXT:    br i1 [[_MSCMP]], label [[TMP10:%.*]], label [[TMP12:%.*]], !prof [[PROF1]]
-+; CHECK:       10:
- ; CHECK-NEXT:    call void @__msan_warning_noreturn() #[[ATTR10]]
- ; CHECK-NEXT:    unreachable
--; CHECK:       10:
--; CHECK-NEXT:    [[TMP9:%.*]] = call <16 x float> @llvm.x86.avx512.vpermi2var.ps.512(<16 x float> [[X0:%.*]], <16 x i32> [[X1]], <16 x float> [[X2:%.*]])
-+; CHECK:       11:
-+; CHECK-NEXT:    [[TMP9:%.*]] = call <16 x float> @llvm.x86.avx512.vpermi2var.ps.512(<16 x float> [[X0:%.*]], <16 x i32> [[X3]], <16 x float> [[X2:%.*]])
- ; CHECK-NEXT:    store <16 x i32> [[TMP7]], ptr @__msan_retval_tls, align 8
- ; CHECK-NEXT:    ret <16 x float> [[TMP9]]
- ;
-@@ -5673,10 +5676,10 @@
- ; CHECK-NEXT:    [[TMP2:%.*]] = load <16 x i32>, ptr inttoptr (i64 add (i64 ptrtoint (ptr @__msan_param_tls to i64), i64 64) to ptr), align 8
- ; CHECK-NEXT:    [[TMP4:%.*]] = load i16, ptr inttoptr (i64 add (i64 ptrtoint (ptr @__msan_param_tls to i64), i64 192) to ptr), align 8
- ; CHECK-NEXT:    call void @llvm.donothing()
--; CHECK-NEXT:    [[TMP7:%.*]] = trunc <16 x i32> [[X1:%.*]] to <16 x i4>
-+; CHECK-NEXT:    [[TMP7:%.*]] = trunc <16 x i32> [[TMP2]] to <16 x i4>
- ; CHECK-NEXT:    [[TMP5:%.*]] = bitcast <16 x i32> [[TMP1]] to <16 x float>
- ; CHECK-NEXT:    [[TMP6:%.*]] = bitcast <16 x i32> [[TMP3]] to <16 x float>
--; CHECK-NEXT:    [[TMP9:%.*]] = call <16 x float> @llvm.x86.avx512.vpermi2var.ps.512(<16 x float> [[TMP5]], <16 x i32> [[X1]], <16 x float> [[TMP6]])
-+; CHECK-NEXT:    [[TMP9:%.*]] = call <16 x float> @llvm.x86.avx512.vpermi2var.ps.512(<16 x float> [[TMP5]], <16 x i32> [[X1:%.*]], <16 x float> [[TMP6]])
- ; CHECK-NEXT:    [[TMP8:%.*]] = bitcast <16 x float> [[TMP9]] to <16 x i32>
- ; CHECK-NEXT:    [[TMP21:%.*]] = bitcast <16 x i4> [[TMP7]] to i64
- ; CHECK-NEXT:    [[_MSCMP:%.*]] = icmp ne i64 [[TMP21]], 0
-@@ -5713,17 +5716,18 @@
- ; CHECK-LABEL: @test_int_x86_avx512_vpermi2var_q_512(
- ; CHECK-NEXT:    [[TMP1:%.*]] = load <8 x i64>, ptr @__msan_param_tls, align 8
- ; CHECK-NEXT:    [[TMP3:%.*]] = load <8 x i64>, ptr inttoptr (i64 add (i64 ptrtoint (ptr @__msan_param_tls to i64), i64 128) to ptr), align 8
-+; CHECK-NEXT:    [[X1:%.*]] = load <8 x i64>, ptr inttoptr (i64 add (i64 ptrtoint (ptr @__msan_param_tls to i64), i64 64) to ptr), align 8
- ; CHECK-NEXT:    call void @llvm.donothing()
--; CHECK-NEXT:    [[TMP8:%.*]] = trunc <8 x i64> [[X1:%.*]] to <8 x i3>
--; CHECK-NEXT:    [[_MSPROP1:%.*]] = call <8 x i64> @llvm.x86.avx512.vpermi2var.q.512(<8 x i64> [[TMP1]], <8 x i64> [[X1]], <8 x i64> [[TMP3]])
-+; CHECK-NEXT:    [[TMP8:%.*]] = trunc <8 x i64> [[X1]] to <8 x i3>
-+; CHECK-NEXT:    [[_MSPROP1:%.*]] = call <8 x i64> @llvm.x86.avx512.vpermi2var.q.512(<8 x i64> [[TMP1]], <8 x i64> [[X3:%.*]], <8 x i64> [[TMP3]])
- ; CHECK-NEXT:    [[TMP5:%.*]] = bitcast <8 x i3> [[TMP8]] to i24
- ; CHECK-NEXT:    [[_MSCMP:%.*]] = icmp ne i24 [[TMP5]], 0
--; CHECK-NEXT:    br i1 [[_MSCMP]], label [[TMP6:%.*]], label [[TMP7:%.*]], !prof [[PROF1]]
--; CHECK:       6:
-+; CHECK-NEXT:    br i1 [[_MSCMP]], label [[TMP7:%.*]], label [[TMP9:%.*]], !prof [[PROF1]]
-+; CHECK:       7:
- ; CHECK-NEXT:    call void @__msan_warning_noreturn() #[[ATTR10]]
- ; CHECK-NEXT:    unreachable
--; CHECK:       7:
--; CHECK-NEXT:    [[TMP4:%.*]] = call <8 x i64> @llvm.x86.avx512.vpermi2var.q.512(<8 x i64> [[X0:%.*]], <8 x i64> [[X1]], <8 x i64> [[X2:%.*]])
-+; CHECK:       8:
-+; CHECK-NEXT:    [[TMP4:%.*]] = call <8 x i64> @llvm.x86.avx512.vpermi2var.q.512(<8 x i64> [[X0:%.*]], <8 x i64> [[X3]], <8 x i64> [[X2:%.*]])
- ; CHECK-NEXT:    store <8 x i64> [[_MSPROP1]], ptr @__msan_retval_tls, align 8
- ; CHECK-NEXT:    ret <8 x i64> [[TMP4]]
- ;
-@@ -5735,11 +5739,11 @@
- ; CHECK-LABEL: @test_int_x86_avx512_mask_vpermi2var_q_512(
- ; CHECK-NEXT:    [[TMP1:%.*]] = load <8 x i64>, ptr @__msan_param_tls, align 8
- ; CHECK-NEXT:    [[TMP3:%.*]] = load <8 x i64>, ptr inttoptr (i64 add (i64 ptrtoint (ptr @__msan_param_tls to i64), i64 128) to ptr), align 8
--; CHECK-NEXT:    [[TMP4:%.*]] = load i8, ptr inttoptr (i64 add (i64 ptrtoint (ptr @__msan_param_tls to i64), i64 192) to ptr), align 8
- ; CHECK-NEXT:    [[TMP2:%.*]] = load <8 x i64>, ptr inttoptr (i64 add (i64 ptrtoint (ptr @__msan_param_tls to i64), i64 64) to ptr), align 8
-+; CHECK-NEXT:    [[TMP4:%.*]] = load i8, ptr inttoptr (i64 add (i64 ptrtoint (ptr @__msan_param_tls to i64), i64 192) to ptr), align 8
- ; CHECK-NEXT:    call void @llvm.donothing()
--; CHECK-NEXT:    [[TMP13:%.*]] = trunc <8 x i64> [[X1:%.*]] to <8 x i3>
--; CHECK-NEXT:    [[_MSPROP1:%.*]] = call <8 x i64> @llvm.x86.avx512.vpermi2var.q.512(<8 x i64> [[TMP1]], <8 x i64> [[X1]], <8 x i64> [[TMP3]])
-+; CHECK-NEXT:    [[TMP13:%.*]] = trunc <8 x i64> [[TMP2]] to <8 x i3>
-+; CHECK-NEXT:    [[_MSPROP1:%.*]] = call <8 x i64> @llvm.x86.avx512.vpermi2var.q.512(<8 x i64> [[TMP1]], <8 x i64> [[X1:%.*]], <8 x i64> [[TMP3]])
- ; CHECK-NEXT:    [[TMP14:%.*]] = bitcast <8 x i3> [[TMP13]] to i24
- ; CHECK-NEXT:    [[_MSCMP:%.*]] = icmp ne i24 [[TMP14]], 0
- ; CHECK-NEXT:    br i1 [[_MSCMP]], label [[TMP15:%.*]], label [[TMP16:%.*]], !prof [[PROF1]]
-@@ -5769,29 +5773,30 @@
- ; CHECK-LABEL: @test_int_x86_avx512_maskz_vpermt2var_d_512(
- ; CHECK-NEXT:    [[TMP1:%.*]] = load i64, ptr inttoptr (i64 add (i64 ptrtoint (ptr @__msan_param_tls to i64), i64 128) to ptr), align 8
- ; CHECK-NEXT:    [[TMP2:%.*]] = load <16 x i32>, ptr inttoptr (i64 add (i64 ptrtoint (ptr @__msan_param_tls to i64), i64 64) to ptr), align 8
-+; CHECK-NEXT:    [[X0:%.*]] = load <16 x i32>, ptr @__msan_param_tls, align 8
- ; CHECK-NEXT:    [[TMP4:%.*]] = load i16, ptr inttoptr (i64 add (i64 ptrtoint (ptr @__msan_param_tls to i64), i64 136) to ptr), align 8
- ; CHECK-NEXT:    call void @llvm.donothing()
- ; CHECK-NEXT:    [[_MSCMP:%.*]] = icmp ne i64 [[TMP1]], 0
--; CHECK-NEXT:    br i1 [[_MSCMP]], label [[TMP6:%.*]], label [[TMP5:%.*]], !prof [[PROF1]]
--; CHECK:       4:
-+; CHECK-NEXT:    br i1 [[_MSCMP]], label [[TMP5:%.*]], label [[TMP6:%.*]], !prof [[PROF1]]
-+; CHECK:       5:
- ; CHECK-NEXT:    call void @__msan_warning_noreturn() #[[ATTR10]]
- ; CHECK-NEXT:    unreachable
--; CHECK:       5:
-+; CHECK:       6:
- ; CHECK-NEXT:    [[X2:%.*]] = load <16 x i32>, ptr [[X2P:%.*]], align 64
- ; CHECK-NEXT:    [[TMP7:%.*]] = ptrtoint ptr [[X2P]] to i64
- ; CHECK-NEXT:    [[TMP8:%.*]] = xor i64 [[TMP7]], 87960930222080
- ; CHECK-NEXT:    [[TMP9:%.*]] = inttoptr i64 [[TMP8]] to ptr
- ; CHECK-NEXT:    [[_MSLD:%.*]] = load <16 x i32>, ptr [[TMP9]], align 64
--; CHECK-NEXT:    [[TMP18:%.*]] = trunc <16 x i32> [[X0:%.*]] to <16 x i4>
--; CHECK-NEXT:    [[_MSPROP1:%.*]] = call <16 x i32> @llvm.x86.avx512.vpermi2var.d.512(<16 x i32> [[TMP2]], <16 x i32> [[X0]], <16 x i32> [[_MSLD]])
-+; CHECK-NEXT:    [[TMP18:%.*]] = trunc <16 x i32> [[X0]] to <16 x i4>
-+; CHECK-NEXT:    [[_MSPROP1:%.*]] = call <16 x i32> @llvm.x86.avx512.vpermi2var.d.512(<16 x i32> [[TMP2]], <16 x i32> [[X4:%.*]], <16 x i32> [[_MSLD]])
- ; CHECK-NEXT:    [[TMP19:%.*]] = bitcast <16 x i4> [[TMP18]] to i64
- ; CHECK-NEXT:    [[_MSCMP1:%.*]] = icmp ne i64 [[TMP19]], 0
- ; CHECK-NEXT:    br i1 [[_MSCMP1]], label [[TMP20:%.*]], label [[TMP21:%.*]], !prof [[PROF1]]
--; CHECK:       12:
-+; CHECK:       13:
- ; CHECK-NEXT:    call void @__msan_warning_noreturn() #[[ATTR10]]
- ; CHECK-NEXT:    unreachable
--; CHECK:       13:
--; CHECK-NEXT:    [[TMP10:%.*]] = call <16 x i32> @llvm.x86.avx512.vpermi2var.d.512(<16 x i32> [[X1:%.*]], <16 x i32> [[X0]], <16 x i32> [[X2]])
-+; CHECK:       14:
-+; CHECK-NEXT:    [[TMP10:%.*]] = call <16 x i32> @llvm.x86.avx512.vpermi2var.d.512(<16 x i32> [[X1:%.*]], <16 x i32> [[X4]], <16 x i32> [[X2]])
- ; CHECK-NEXT:    [[TMP11:%.*]] = bitcast i16 [[TMP4]] to <16 x i1>
- ; CHECK-NEXT:    [[TMP12:%.*]] = bitcast i16 [[X3:%.*]] to <16 x i1>
- ; CHECK-NEXT:    [[TMP13:%.*]] = select <16 x i1> [[TMP12]], <16 x i32> [[_MSPROP1]], <16 x i32> zeroinitializer
-@@ -5816,14 +5821,15 @@
- ; CHECK-NEXT:    [[TMP5:%.*]] = load <8 x i64>, ptr inttoptr (i64 add (i64 ptrtoint (ptr @__msan_param_tls to i64), i64 144) to ptr), align 8
- ; CHECK-NEXT:    [[TMP6:%.*]] = load <8 x i64>, ptr inttoptr (i64 add (i64 ptrtoint (ptr @__msan_param_tls to i64), i64 208) to ptr), align 8
- ; CHECK-NEXT:    [[TMP2:%.*]] = load <8 x i64>, ptr inttoptr (i64 add (i64 ptrtoint (ptr @__msan_param_tls to i64), i64 64) to ptr), align 8
-+; CHECK-NEXT:    [[X0:%.*]] = load <8 x i64>, ptr @__msan_param_tls, align 8
- ; CHECK-NEXT:    [[TMP4:%.*]] = load i8, ptr inttoptr (i64 add (i64 ptrtoint (ptr @__msan_param_tls to i64), i64 136) to ptr), align 8
- ; CHECK-NEXT:    call void @llvm.donothing()
- ; CHECK-NEXT:    [[_MSCMP:%.*]] = icmp ne i64 [[TMP1]], 0
- ; CHECK-NEXT:    br i1 [[_MSCMP]], label [[TMP10:%.*]], label [[TMP12:%.*]], !prof [[PROF1]]
--; CHECK:       6:
-+; CHECK:       7:
- ; CHECK-NEXT:    call void @__msan_warning_noreturn() #[[ATTR10]]
- ; CHECK-NEXT:    unreachable
--; CHECK:       7:
-+; CHECK:       8:
- ; CHECK-NEXT:    [[X2S:%.*]] = load double, ptr [[X2PTR:%.*]], align 8
- ; CHECK-NEXT:    [[TMP7:%.*]] = ptrtoint ptr [[X2PTR]] to i64
- ; CHECK-NEXT:    [[TMP8:%.*]] = xor i64 [[TMP7]], 87960930222080
-@@ -5833,19 +5839,19 @@
- ; CHECK-NEXT:    [[X2INS:%.*]] = insertelement <8 x double> [[EXTRA_PARAM:%.*]], double [[X2S]], i32 0
- ; CHECK-NEXT:    [[_MSPROP1:%.*]] = shufflevector <8 x i64> [[_MSPROP]], <8 x i64> [[TMP6]], <8 x i32> zeroinitializer
- ; CHECK-NEXT:    [[X2:%.*]] = shufflevector <8 x double> [[X2INS]], <8 x double> [[EXTRA_PARAM2:%.*]], <8 x i32> zeroinitializer
--; CHECK-NEXT:    [[TMP11:%.*]] = trunc <8 x i64> [[X0:%.*]] to <8 x i3>
-+; CHECK-NEXT:    [[TMP11:%.*]] = trunc <8 x i64> [[X0]] to <8 x i3>
- ; CHECK-NEXT:    [[TMP24:%.*]] = bitcast <8 x i64> [[TMP2]] to <8 x double>
- ; CHECK-NEXT:    [[TMP13:%.*]] = bitcast <8 x i64> [[_MSPROP1]] to <8 x double>
--; CHECK-NEXT:    [[TMP14:%.*]] = call <8 x double> @llvm.x86.avx512.vpermi2var.pd.512(<8 x double> [[TMP24]], <8 x i64> [[X0]], <8 x double> [[TMP13]])
-+; CHECK-NEXT:    [[TMP14:%.*]] = call <8 x double> @llvm.x86.avx512.vpermi2var.pd.512(<8 x double> [[TMP24]], <8 x i64> [[X4:%.*]], <8 x double> [[TMP13]])
- ; CHECK-NEXT:    [[TMP25:%.*]] = bitcast <8 x double> [[TMP14]] to <8 x i64>
- ; CHECK-NEXT:    [[TMP26:%.*]] = bitcast <8 x i3> [[TMP11]] to i24
- ; CHECK-NEXT:    [[_MSCMP2:%.*]] = icmp ne i24 [[TMP26]], 0
- ; CHECK-NEXT:    br i1 [[_MSCMP2]], label [[TMP27:%.*]], label [[TMP28:%.*]], !prof [[PROF1]]
--; CHECK:       17:
-+; CHECK:       18:
- ; CHECK-NEXT:    call void @__msan_warning_noreturn() #[[ATTR10]]
- ; CHECK-NEXT:    unreachable
--; CHECK:       18:
--; CHECK-NEXT:    [[TMP15:%.*]] = call <8 x double> @llvm.x86.avx512.vpermi2var.pd.512(<8 x double> [[X1:%.*]], <8 x i64> [[X0]], <8 x double> [[X2]])
-+; CHECK:       19:
-+; CHECK-NEXT:    [[TMP15:%.*]] = call <8 x double> @llvm.x86.avx512.vpermi2var.pd.512(<8 x double> [[X1:%.*]], <8 x i64> [[X4]], <8 x double> [[X2]])
- ; CHECK-NEXT:    [[TMP16:%.*]] = bitcast i8 [[TMP4]] to <8 x i1>
- ; CHECK-NEXT:    [[TMP17:%.*]] = bitcast i8 [[X3:%.*]] to <8 x i1>
- ; CHECK-NEXT:    [[TMP18:%.*]] = select <8 x i1> [[TMP17]], <8 x i64> [[TMP25]], <8 x i64> zeroinitializer
-@@ -5871,21 +5877,22 @@
- ; CHECK-LABEL: @test_int_x86_avx512_maskz_vpermt2var_ps_512(
- ; CHECK-NEXT:    [[TMP1:%.*]] = load <16 x i32>, ptr inttoptr (i64 add (i64 ptrtoint (ptr @__msan_param_tls to i64), i64 64) to ptr), align 8
- ; CHECK-NEXT:    [[TMP3:%.*]] = load <16 x i32>, ptr inttoptr (i64 add (i64 ptrtoint (ptr @__msan_param_tls to i64), i64 128) to ptr), align 8
-+; CHECK-NEXT:    [[X0:%.*]] = load <16 x i32>, ptr @__msan_param_tls, align 8
- ; CHECK-NEXT:    [[TMP4:%.*]] = load i16, ptr inttoptr (i64 add (i64 ptrtoint (ptr @__msan_param_tls to i64), i64 192) to ptr), align 8
- ; CHECK-NEXT:    call void @llvm.donothing()
--; CHECK-NEXT:    [[TMP7:%.*]] = trunc <16 x i32> [[X0:%.*]] to <16 x i4>
-+; CHECK-NEXT:    [[TMP7:%.*]] = trunc <16 x i32> [[X0]] to <16 x i4>
- ; CHECK-NEXT:    [[TMP5:%.*]] = bitcast <16 x i32> [[TMP1]] to <16 x float>
- ; CHECK-NEXT:    [[TMP6:%.*]] = bitcast <16 x i32> [[TMP3]] to <16 x float>
--; CHECK-NEXT:    [[TMP19:%.*]] = call <16 x float> @llvm.x86.avx512.vpermi2var.ps.512(<16 x float> [[TMP5]], <16 x i32> [[X0]], <16 x float> [[TMP6]])
-+; CHECK-NEXT:    [[TMP19:%.*]] = call <16 x float> @llvm.x86.avx512.vpermi2var.ps.512(<16 x float> [[TMP5]], <16 x i32> [[X4:%.*]], <16 x float> [[TMP6]])
- ; CHECK-NEXT:    [[TMP8:%.*]] = bitcast <16 x float> [[TMP19]] to <16 x i32>
- ; CHECK-NEXT:    [[TMP9:%.*]] = bitcast <16 x i4> [[TMP7]] to i64
- ; CHECK-NEXT:    [[_MSCMP:%.*]] = icmp ne i64 [[TMP9]], 0
- ; CHECK-NEXT:    br i1 [[_MSCMP]], label [[TMP20:%.*]], label [[TMP21:%.*]], !prof [[PROF1]]
--; CHECK:       10:
-+; CHECK:       11:
- ; CHECK-NEXT:    call void @__msan_warning_noreturn() #[[ATTR10]]
- ; CHECK-NEXT:    unreachable
--; CHECK:       11:
--; CHECK-NEXT:    [[TMP10:%.*]] = call <16 x float> @llvm.x86.avx512.vpermi2var.ps.512(<16 x float> [[X1:%.*]], <16 x i32> [[X0]], <16 x float> [[X2:%.*]])
-+; CHECK:       12:
-+; CHECK-NEXT:    [[TMP10:%.*]] = call <16 x float> @llvm.x86.avx512.vpermi2var.ps.512(<16 x float> [[X1:%.*]], <16 x i32> [[X4]], <16 x float> [[X2:%.*]])
- ; CHECK-NEXT:    [[TMP11:%.*]] = bitcast i16 [[TMP4]] to <16 x i1>
- ; CHECK-NEXT:    [[TMP12:%.*]] = bitcast i16 [[X3:%.*]] to <16 x i1>
- ; CHECK-NEXT:    [[TMP13:%.*]] = select <16 x i1> [[TMP12]], <16 x i32> [[TMP8]], <16 x i32> zeroinitializer
-@@ -5908,18 +5915,19 @@
- ; CHECK-LABEL: @test_int_x86_avx512_maskz_vpermt2var_q_512(
- ; CHECK-NEXT:    [[TMP1:%.*]] = load <8 x i64>, ptr inttoptr (i64 add (i64 ptrtoint (ptr @__msan_param_tls to i64), i64 64) to ptr), align 8
- ; CHECK-NEXT:    [[TMP3:%.*]] = load <8 x i64>, ptr inttoptr (i64 add (i64 ptrtoint (ptr @__msan_param_tls to i64), i64 128) to ptr), align 8
-+; CHECK-NEXT:    [[X0:%.*]] = load <8 x i64>, ptr @__msan_param_tls, align 8
- ; CHECK-NEXT:    [[TMP4:%.*]] = load i8, ptr inttoptr (i64 add (i64 ptrtoint (ptr @__msan_param_tls to i64), i64 192) to ptr), align 8
- ; CHECK-NEXT:    call void @llvm.donothing()
--; CHECK-NEXT:    [[TMP13:%.*]] = trunc <8 x i64> [[X0:%.*]] to <8 x i3>
--; CHECK-NEXT:    [[_MSPROP1:%.*]] = call <8 x i64> @llvm.x86.avx512.vpermi2var.q.512(<8 x i64> [[TMP1]], <8 x i64> [[X0]], <8 x i64> [[TMP3]])
-+; CHECK-NEXT:    [[TMP13:%.*]] = trunc <8 x i64> [[X0]] to <8 x i3>
-+; CHECK-NEXT:    [[_MSPROP1:%.*]] = call <8 x i64> @llvm.x86.avx512.vpermi2var.q.512(<8 x i64> [[TMP1]], <8 x i64> [[X4:%.*]], <8 x i64> [[TMP3]])
- ; CHECK-NEXT:    [[TMP14:%.*]] = bitcast <8 x i3> [[TMP13]] to i24
- ; CHECK-NEXT:    [[_MSCMP:%.*]] = icmp ne i24 [[TMP14]], 0
- ; CHECK-NEXT:    br i1 [[_MSCMP]], label [[TMP15:%.*]], label [[TMP16:%.*]], !prof [[PROF1]]
--; CHECK:       7:
-+; CHECK:       8:
- ; CHECK-NEXT:    call void @__msan_warning_noreturn() #[[ATTR10]]
- ; CHECK-NEXT:    unreachable
--; CHECK:       8:
--; CHECK-NEXT:    [[TMP5:%.*]] = call <8 x i64> @llvm.x86.avx512.vpermi2var.q.512(<8 x i64> [[X1:%.*]], <8 x i64> [[X0]], <8 x i64> [[X2:%.*]])
-+; CHECK:       9:
-+; CHECK-NEXT:    [[TMP5:%.*]] = call <8 x i64> @llvm.x86.avx512.vpermi2var.q.512(<8 x i64> [[X1:%.*]], <8 x i64> [[X4]], <8 x i64> [[X2:%.*]])
- ; CHECK-NEXT:    [[TMP6:%.*]] = bitcast i8 [[TMP4]] to <8 x i1>
- ; CHECK-NEXT:    [[TMP7:%.*]] = bitcast i8 [[X3:%.*]] to <8 x i1>
- ; CHECK-NEXT:    [[TMP8:%.*]] = select <8 x i1> [[TMP7]], <8 x i64> [[_MSPROP1]], <8 x i64> zeroinitializer
-@@ -5941,17 +5949,18 @@
- ; CHECK-LABEL: @test_int_x86_avx512_vpermt2var_d_512(
- ; CHECK-NEXT:    [[TMP1:%.*]] = load <16 x i32>, ptr inttoptr (i64 add (i64 ptrtoint (ptr @__msan_param_tls to i64), i64 64) to ptr), align 8
- ; CHECK-NEXT:    [[TMP3:%.*]] = load <16 x i32>, ptr inttoptr (i64 add (i64 ptrtoint (ptr @__msan_param_tls to i64), i64 128) to ptr), align 8
-+; CHECK-NEXT:    [[X0:%.*]] = load <16 x i32>, ptr @__msan_param_tls, align 8
- ; CHECK-NEXT:    call void @llvm.donothing()
--; CHECK-NEXT:    [[TMP8:%.*]] = trunc <16 x i32> [[X0:%.*]] to <16 x i4>
--; CHECK-NEXT:    [[_MSPROP1:%.*]] = call <16 x i32> @llvm.x86.avx512.vpermi2var.d.512(<16 x i32> [[TMP1]], <16 x i32> [[X0]], <16 x i32> [[TMP3]])
-+; CHECK-NEXT:    [[TMP8:%.*]] = trunc <16 x i32> [[X0]] to <16 x i4>
-+; CHECK-NEXT:    [[_MSPROP1:%.*]] = call <16 x i32> @llvm.x86.avx512.vpermi2var.d.512(<16 x i32> [[TMP1]], <16 x i32> [[X3:%.*]], <16 x i32> [[TMP3]])
- ; CHECK-NEXT:    [[TMP5:%.*]] = bitcast <16 x i4> [[TMP8]] to i64
- ; CHECK-NEXT:    [[_MSCMP:%.*]] = icmp ne i64 [[TMP5]], 0
--; CHECK-NEXT:    br i1 [[_MSCMP]], label [[TMP6:%.*]], label [[TMP7:%.*]], !prof [[PROF1]]
--; CHECK:       6:
-+; CHECK-NEXT:    br i1 [[_MSCMP]], label [[TMP7:%.*]], label [[TMP9:%.*]], !prof [[PROF1]]
-+; CHECK:       7:
- ; CHECK-NEXT:    call void @__msan_warning_noreturn() #[[ATTR10]]
- ; CHECK-NEXT:    unreachable
--; CHECK:       7:
--; CHECK-NEXT:    [[TMP4:%.*]] = call <16 x i32> @llvm.x86.avx512.vpermi2var.d.512(<16 x i32> [[X1:%.*]], <16 x i32> [[X0]], <16 x i32> [[X2:%.*]])
-+; CHECK:       8:
-+; CHECK-NEXT:    [[TMP4:%.*]] = call <16 x i32> @llvm.x86.avx512.vpermi2var.d.512(<16 x i32> [[X1:%.*]], <16 x i32> [[X3]], <16 x i32> [[X2:%.*]])
- ; CHECK-NEXT:    store <16 x i32> [[_MSPROP1]], ptr @__msan_retval_tls, align 8
- ; CHECK-NEXT:    ret <16 x i32> [[TMP4]]
- ;
-@@ -5963,18 +5972,19 @@
- ; CHECK-LABEL: @test_int_x86_avx512_mask_vpermt2var_d_512(
- ; CHECK-NEXT:    [[TMP1:%.*]] = load <16 x i32>, ptr inttoptr (i64 add (i64 ptrtoint (ptr @__msan_param_tls to i64), i64 64) to ptr), align 8
- ; CHECK-NEXT:    [[TMP3:%.*]] = load <16 x i32>, ptr inttoptr (i64 add (i64 ptrtoint (ptr @__msan_param_tls to i64), i64 128) to ptr), align 8
-+; CHECK-NEXT:    [[X0:%.*]] = load <16 x i32>, ptr @__msan_param_tls, align 8
- ; CHECK-NEXT:    [[TMP4:%.*]] = load i16, ptr inttoptr (i64 add (i64 ptrtoint (ptr @__msan_param_tls to i64), i64 192) to ptr), align 8
- ; CHECK-NEXT:    call void @llvm.donothing()
--; CHECK-NEXT:    [[TMP13:%.*]] = trunc <16 x i32> [[X0:%.*]] to <16 x i4>
--; CHECK-NEXT:    [[_MSPROP1:%.*]] = call <16 x i32> @llvm.x86.avx512.vpermi2var.d.512(<16 x i32> [[TMP1]], <16 x i32> [[X0]], <16 x i32> [[TMP3]])
-+; CHECK-NEXT:    [[TMP13:%.*]] = trunc <16 x i32> [[X0]] to <16 x i4>
-+; CHECK-NEXT:    [[_MSPROP1:%.*]] = call <16 x i32> @llvm.x86.avx512.vpermi2var.d.512(<16 x i32> [[TMP1]], <16 x i32> [[X4:%.*]], <16 x i32> [[TMP3]])
- ; CHECK-NEXT:    [[TMP14:%.*]] = bitcast <16 x i4> [[TMP13]] to i64
- ; CHECK-NEXT:    [[_MSCMP:%.*]] = icmp ne i64 [[TMP14]], 0
- ; CHECK-NEXT:    br i1 [[_MSCMP]], label [[TMP15:%.*]], label [[TMP16:%.*]], !prof [[PROF1]]
--; CHECK:       7:
-+; CHECK:       8:
- ; CHECK-NEXT:    call void @__msan_warning_noreturn() #[[ATTR10]]
- ; CHECK-NEXT:    unreachable
--; CHECK:       8:
--; CHECK-NEXT:    [[TMP5:%.*]] = call <16 x i32> @llvm.x86.avx512.vpermi2var.d.512(<16 x i32> [[X1:%.*]], <16 x i32> [[X0]], <16 x i32> [[X2:%.*]])
-+; CHECK:       9:
-+; CHECK-NEXT:    [[TMP5:%.*]] = call <16 x i32> @llvm.x86.avx512.vpermi2var.d.512(<16 x i32> [[X1:%.*]], <16 x i32> [[X4]], <16 x i32> [[X2:%.*]])
- ; CHECK-NEXT:    [[TMP6:%.*]] = bitcast i16 [[TMP4]] to <16 x i1>
- ; CHECK-NEXT:    [[TMP7:%.*]] = bitcast i16 [[X3:%.*]] to <16 x i1>
- ; CHECK-NEXT:    [[TMP8:%.*]] = select <16 x i1> [[TMP7]], <16 x i32> [[_MSPROP1]], <16 x i32> [[TMP1]]
-@@ -8478,19 +8488,20 @@
- define <8 x double>@test_int_x86_avx512_vpermilvar_pd_512(<8 x double> %x0, <8 x i64> %x1) #0 {
- ; CHECK-LABEL: @test_int_x86_avx512_vpermilvar_pd_512(
- ; CHECK-NEXT:    [[TMP1:%.*]] = load <8 x i64>, ptr @__msan_param_tls, align 8
-+; CHECK-NEXT:    [[X1:%.*]] = load <8 x i64>, ptr inttoptr (i64 add (i64 ptrtoint (ptr @__msan_param_tls to i64), i64 64) to ptr), align 8
- ; CHECK-NEXT:    call void @llvm.donothing()
--; CHECK-NEXT:    [[TMP2:%.*]] = trunc <8 x i64> [[X1:%.*]] to <8 x i3>
-+; CHECK-NEXT:    [[TMP2:%.*]] = trunc <8 x i64> [[X1]] to <8 x i3>
- ; CHECK-NEXT:    [[X0:%.*]] = bitcast <8 x i64> [[TMP1]] to <8 x double>
--; CHECK-NEXT:    [[RES:%.*]] = call <8 x double> @llvm.x86.avx512.vpermilvar.pd.512(<8 x double> [[X0]], <8 x i64> [[X1]])
-+; CHECK-NEXT:    [[RES:%.*]] = call <8 x double> @llvm.x86.avx512.vpermilvar.pd.512(<8 x double> [[X0]], <8 x i64> [[X2:%.*]])
- ; CHECK-NEXT:    [[TMP4:%.*]] = bitcast <8 x double> [[RES]] to <8 x i64>
- ; CHECK-NEXT:    [[TMP6:%.*]] = bitcast <8 x i3> [[TMP2]] to i24
- ; CHECK-NEXT:    [[_MSCMP:%.*]] = icmp ne i24 [[TMP6]], 0
--; CHECK-NEXT:    br i1 [[_MSCMP]], label [[TMP7:%.*]], label [[TMP8:%.*]], !prof [[PROF1]]
--; CHECK:       7:
-+; CHECK-NEXT:    br i1 [[_MSCMP]], label [[TMP8:%.*]], label [[TMP9:%.*]], !prof [[PROF1]]
-+; CHECK:       8:
- ; CHECK-NEXT:    call void @__msan_warning_noreturn() #[[ATTR10]]
- ; CHECK-NEXT:    unreachable
--; CHECK:       8:
--; CHECK-NEXT:    [[RES1:%.*]] = call <8 x double> @llvm.x86.avx512.vpermilvar.pd.512(<8 x double> [[X2:%.*]], <8 x i64> [[X1]])
-+; CHECK:       9:
-+; CHECK-NEXT:    [[RES1:%.*]] = call <8 x double> @llvm.x86.avx512.vpermilvar.pd.512(<8 x double> [[X3:%.*]], <8 x i64> [[X2]])
- ; CHECK-NEXT:    store <8 x i64> [[TMP4]], ptr @__msan_retval_tls, align 8
- ; CHECK-NEXT:    ret <8 x double> [[RES1]]
- ;
-@@ -8501,21 +8512,22 @@
- define <8 x double>@test_int_x86_avx512_vpermilvar_pd_512_mask(<8 x double> %x0, <8 x i64> %x1, <8 x double> %x2, i8 %mask) #0 {
- ; CHECK-LABEL: @test_int_x86_avx512_vpermilvar_pd_512_mask(
- ; CHECK-NEXT:    [[TMP1:%.*]] = load <8 x i64>, ptr @__msan_param_tls, align 8
-+; CHECK-NEXT:    [[X1:%.*]] = load <8 x i64>, ptr inttoptr (i64 add (i64 ptrtoint (ptr @__msan_param_tls to i64), i64 64) to ptr), align 8
- ; CHECK-NEXT:    [[TMP3:%.*]] = load i8, ptr inttoptr (i64 add (i64 ptrtoint (ptr @__msan_param_tls to i64), i64 192) to ptr), align 8
- ; CHECK-NEXT:    [[TMP4:%.*]] = load <8 x i64>, ptr inttoptr (i64 add (i64 ptrtoint (ptr @__msan_param_tls to i64), i64 128) to ptr), align 8
- ; CHECK-NEXT:    call void @llvm.donothing()
--; CHECK-NEXT:    [[TMP5:%.*]] = trunc <8 x i64> [[X1:%.*]] to <8 x i3>
-+; CHECK-NEXT:    [[TMP5:%.*]] = trunc <8 x i64> [[X1]] to <8 x i3>
- ; CHECK-NEXT:    [[X0:%.*]] = bitcast <8 x i64> [[TMP1]] to <8 x double>
--; CHECK-NEXT:    [[RES:%.*]] = call <8 x double> @llvm.x86.avx512.vpermilvar.pd.512(<8 x double> [[X0]], <8 x i64> [[X1]])
-+; CHECK-NEXT:    [[RES:%.*]] = call <8 x double> @llvm.x86.avx512.vpermilvar.pd.512(<8 x double> [[X0]], <8 x i64> [[X3:%.*]])
- ; CHECK-NEXT:    [[TMP6:%.*]] = bitcast <8 x double> [[RES]] to <8 x i64>
- ; CHECK-NEXT:    [[TMP8:%.*]] = bitcast <8 x i3> [[TMP5]] to i24
- ; CHECK-NEXT:    [[_MSCMP:%.*]] = icmp ne i24 [[TMP8]], 0
- ; CHECK-NEXT:    br i1 [[_MSCMP]], label [[TMP16:%.*]], label [[TMP17:%.*]], !prof [[PROF1]]
--; CHECK:       9:
-+; CHECK:       10:
- ; CHECK-NEXT:    call void @__msan_warning_noreturn() #[[ATTR10]]
- ; CHECK-NEXT:    unreachable
--; CHECK:       10:
--; CHECK-NEXT:    [[RES1:%.*]] = call <8 x double> @llvm.x86.avx512.vpermilvar.pd.512(<8 x double> [[X3:%.*]], <8 x i64> [[X1]])
-+; CHECK:       11:
-+; CHECK-NEXT:    [[RES1:%.*]] = call <8 x double> @llvm.x86.avx512.vpermilvar.pd.512(<8 x double> [[X4:%.*]], <8 x i64> [[X3]])
- ; CHECK-NEXT:    [[TMP9:%.*]] = bitcast i8 [[TMP3]] to <8 x i1>
- ; CHECK-NEXT:    [[MASK_CAST:%.*]] = bitcast i8 [[MASK:%.*]] to <8 x i1>
- ; CHECK-NEXT:    [[TMP10:%.*]] = select <8 x i1> [[MASK_CAST]], <8 x i64> [[TMP6]], <8 x i64> [[TMP4]]
-@@ -8538,20 +8550,21 @@
- define <8 x double>@test_int_x86_avx512_vpermilvar_pd_512_maskz(<8 x double> %x0, <8 x i64> %x1, i8 %mask) #0 {
- ; CHECK-LABEL: @test_int_x86_avx512_vpermilvar_pd_512_maskz(
- ; CHECK-NEXT:    [[TMP1:%.*]] = load <8 x i64>, ptr @__msan_param_tls, align 8
-+; CHECK-NEXT:    [[X1:%.*]] = load <8 x i64>, ptr inttoptr (i64 add (i64 ptrtoint (ptr @__msan_param_tls to i64), i64 64) to ptr), align 8
- ; CHECK-NEXT:    [[TMP3:%.*]] = load i8, ptr inttoptr (i64 add (i64 ptrtoint (ptr @__msan_param_tls to i64), i64 128) to ptr), align 8
- ; CHECK-NEXT:    call void @llvm.donothing()
--; CHECK-NEXT:    [[TMP4:%.*]] = trunc <8 x i64> [[X1:%.*]] to <8 x i3>
-+; CHECK-NEXT:    [[TMP4:%.*]] = trunc <8 x i64> [[X1]] to <8 x i3>
- ; CHECK-NEXT:    [[X0:%.*]] = bitcast <8 x i64> [[TMP1]] to <8 x double>
--; CHECK-NEXT:    [[RES:%.*]] = call <8 x double> @llvm.x86.avx512.vpermilvar.pd.512(<8 x double> [[X0]], <8 x i64> [[X1]])
-+; CHECK-NEXT:    [[RES:%.*]] = call <8 x double> @llvm.x86.avx512.vpermilvar.pd.512(<8 x double> [[X0]], <8 x i64> [[X2:%.*]])
- ; CHECK-NEXT:    [[TMP5:%.*]] = bitcast <8 x double> [[RES]] to <8 x i64>
- ; CHECK-NEXT:    [[TMP7:%.*]] = bitcast <8 x i3> [[TMP4]] to i24
- ; CHECK-NEXT:    [[_MSCMP:%.*]] = icmp ne i24 [[TMP7]], 0
- ; CHECK-NEXT:    br i1 [[_MSCMP]], label [[TMP14:%.*]], label [[TMP15:%.*]], !prof [[PROF1]]
--; CHECK:       8:
-+; CHECK:       9:
- ; CHECK-NEXT:    call void @__msan_warning_noreturn() #[[ATTR10]]
- ; CHECK-NEXT:    unreachable
--; CHECK:       9:
--; CHECK-NEXT:    [[RES1:%.*]] = call <8 x double> @llvm.x86.avx512.vpermilvar.pd.512(<8 x double> [[X2:%.*]], <8 x i64> [[X1]])
-+; CHECK:       10:
-+; CHECK-NEXT:    [[RES1:%.*]] = call <8 x double> @llvm.x86.avx512.vpermilvar.pd.512(<8 x double> [[X3:%.*]], <8 x i64> [[X2]])
- ; CHECK-NEXT:    [[TMP8:%.*]] = bitcast i8 [[TMP3]] to <8 x i1>
- ; CHECK-NEXT:    [[MASK_CAST:%.*]] = bitcast i8 [[MASK:%.*]] to <8 x i1>
- ; CHECK-NEXT:    [[TMP9:%.*]] = select <8 x i1> [[MASK_CAST]], <8 x i64> [[TMP5]], <8 x i64> zeroinitializer
-@@ -8575,19 +8588,20 @@
- define <16 x float>@test_int_x86_avx512_vpermilvar_ps_512(<16 x float> %x0, <16 x i32> %x1) #0 {
- ; CHECK-LABEL: @test_int_x86_avx512_vpermilvar_ps_512(
- ; CHECK-NEXT:    [[TMP1:%.*]] = load <16 x i32>, ptr @__msan_param_tls, align 8
-+; CHECK-NEXT:    [[X1:%.*]] = load <16 x i32>, ptr inttoptr (i64 add (i64 ptrtoint (ptr @__msan_param_tls to i64), i64 64) to ptr), align 8
- ; CHECK-NEXT:    call void @llvm.donothing()
--; CHECK-NEXT:    [[TMP2:%.*]] = trunc <16 x i32> [[X1:%.*]] to <16 x i4>
-+; CHECK-NEXT:    [[TMP2:%.*]] = trunc <16 x i32> [[X1]] to <16 x i4>
- ; CHECK-NEXT:    [[X0:%.*]] = bitcast <16 x i32> [[TMP1]] to <16 x float>
--; CHECK-NEXT:    [[RES:%.*]] = call <16 x float> @llvm.x86.avx512.vpermilvar.ps.512(<16 x float> [[X0]], <16 x i32> [[X1]])
-+; CHECK-NEXT:    [[RES:%.*]] = call <16 x float> @llvm.x86.avx512.vpermilvar.ps.512(<16 x float> [[X0]], <16 x i32> [[X2:%.*]])
- ; CHECK-NEXT:    [[TMP4:%.*]] = bitcast <16 x float> [[RES]] to <16 x i32>
- ; CHECK-NEXT:    [[TMP6:%.*]] = bitcast <16 x i4> [[TMP2]] to i64
- ; CHECK-NEXT:    [[_MSCMP:%.*]] = icmp ne i64 [[TMP6]], 0
--; CHECK-NEXT:    br i1 [[_MSCMP]], label [[TMP7:%.*]], label [[TMP8:%.*]], !prof [[PROF1]]
--; CHECK:       7:
-+; CHECK-NEXT:    br i1 [[_MSCMP]], label [[TMP8:%.*]], label [[TMP9:%.*]], !prof [[PROF1]]
-+; CHECK:       8:
- ; CHECK-NEXT:    call void @__msan_warning_noreturn() #[[ATTR10]]
- ; CHECK-NEXT:    unreachable
--; CHECK:       8:
--; CHECK-NEXT:    [[RES1:%.*]] = call <16 x float> @llvm.x86.avx512.vpermilvar.ps.512(<16 x float> [[X2:%.*]], <16 x i32> [[X1]])
-+; CHECK:       9:
-+; CHECK-NEXT:    [[RES1:%.*]] = call <16 x float> @llvm.x86.avx512.vpermilvar.ps.512(<16 x float> [[X3:%.*]], <16 x i32> [[X2]])
- ; CHECK-NEXT:    store <16 x i32> [[TMP4]], ptr @__msan_retval_tls, align 8
- ; CHECK-NEXT:    ret <16 x float> [[RES1]]
- ;
-@@ -8598,21 +8612,22 @@
- define <16 x float>@test_int_x86_avx512_vpermilvar_ps_512_mask(<16 x float> %x0, <16 x i32> %x1, <16 x float> %x2, i16 %mask) #0 {
- ; CHECK-LABEL: @test_int_x86_avx512_vpermilvar_ps_512_mask(
- ; CHECK-NEXT:    [[TMP1:%.*]] = load <16 x i32>, ptr @__msan_param_tls, align 8
-+; CHECK-NEXT:    [[X1:%.*]] = load <16 x i32>, ptr inttoptr (i64 add (i64 ptrtoint (ptr @__msan_param_tls to i64), i64 64) to ptr), align 8
- ; CHECK-NEXT:    [[TMP3:%.*]] = load i16, ptr inttoptr (i64 add (i64 ptrtoint (ptr @__msan_param_tls to i64), i64 192) to ptr), align 8
- ; CHECK-NEXT:    [[TMP4:%.*]] = load <16 x i32>, ptr inttoptr (i64 add (i64 ptrtoint (ptr @__msan_param_tls to i64), i64 128) to ptr), align 8
- ; CHECK-NEXT:    call void @llvm.donothing()
--; CHECK-NEXT:    [[TMP5:%.*]] = trunc <16 x i32> [[X1:%.*]] to <16 x i4>
-+; CHECK-NEXT:    [[TMP5:%.*]] = trunc <16 x i32> [[X1]] to <16 x i4>
- ; CHECK-NEXT:    [[X0:%.*]] = bitcast <16 x i32> [[TMP1]] to <16 x float>
--; CHECK-NEXT:    [[RES:%.*]] = call <16 x float> @llvm.x86.avx512.vpermilvar.ps.512(<16 x float> [[X0]], <16 x i32> [[X1]])
-+; CHECK-NEXT:    [[RES:%.*]] = call <16 x float> @llvm.x86.avx512.vpermilvar.ps.512(<16 x float> [[X0]], <16 x i32> [[X3:%.*]])
- ; CHECK-NEXT:    [[TMP6:%.*]] = bitcast <16 x float> [[RES]] to <16 x i32>
- ; CHECK-NEXT:    [[TMP8:%.*]] = bitcast <16 x i4> [[TMP5]] to i64
- ; CHECK-NEXT:    [[_MSCMP:%.*]] = icmp ne i64 [[TMP8]], 0
- ; CHECK-NEXT:    br i1 [[_MSCMP]], label [[TMP16:%.*]], label [[TMP17:%.*]], !prof [[PROF1]]
--; CHECK:       9:
-+; CHECK:       10:
- ; CHECK-NEXT:    call void @__msan_warning_noreturn() #[[ATTR10]]
- ; CHECK-NEXT:    unreachable
--; CHECK:       10:
--; CHECK-NEXT:    [[RES1:%.*]] = call <16 x float> @llvm.x86.avx512.vpermilvar.ps.512(<16 x float> [[X3:%.*]], <16 x i32> [[X1]])
-+; CHECK:       11:
-+; CHECK-NEXT:    [[RES1:%.*]] = call <16 x float> @llvm.x86.avx512.vpermilvar.ps.512(<16 x float> [[X4:%.*]], <16 x i32> [[X3]])
- ; CHECK-NEXT:    [[TMP9:%.*]] = bitcast i16 [[TMP3]] to <16 x i1>
- ; CHECK-NEXT:    [[MASK_CAST:%.*]] = bitcast i16 [[MASK:%.*]] to <16 x i1>
- ; CHECK-NEXT:    [[TMP10:%.*]] = select <16 x i1> [[MASK_CAST]], <16 x i32> [[TMP6]], <16 x i32> [[TMP4]]
-@@ -8635,20 +8650,21 @@
- define <16 x float>@test_int_x86_avx512_vpermilvar_ps_512_maskz(<16 x float> %x0, <16 x i32> %x1, i16 %mask) #0 {
- ; CHECK-LABEL: @test_int_x86_avx512_vpermilvar_ps_512_maskz(
- ; CHECK-NEXT:    [[TMP1:%.*]] = load <16 x i32>, ptr @__msan_param_tls, align 8
-+; CHECK-NEXT:    [[X1:%.*]] = load <16 x i32>, ptr inttoptr (i64 add (i64 ptrtoint (ptr @__msan_param_tls to i64), i64 64) to ptr), align 8
- ; CHECK-NEXT:    [[TMP3:%.*]] = load i16, ptr inttoptr (i64 add (i64 ptrtoint (ptr @__msan_param_tls to i64), i64 128) to ptr), align 8
- ; CHECK-NEXT:    call void @llvm.donothing()
--; CHECK-NEXT:    [[TMP4:%.*]] = trunc <16 x i32> [[X1:%.*]] to <16 x i4>
-+; CHECK-NEXT:    [[TMP4:%.*]] = trunc <16 x i32> [[X1]] to <16 x i4>
- ; CHECK-NEXT:    [[X0:%.*]] = bitcast <16 x i32> [[TMP1]] to <16 x float>
--; CHECK-NEXT:    [[RES:%.*]] = call <16 x float> @llvm.x86.avx512.vpermilvar.ps.512(<16 x float> [[X0]], <16 x i32> [[X1]])
-+; CHECK-NEXT:    [[RES:%.*]] = call <16 x float> @llvm.x86.avx512.vpermilvar.ps.512(<16 x float> [[X0]], <16 x i32> [[X2:%.*]])
- ; CHECK-NEXT:    [[TMP5:%.*]] = bitcast <16 x float> [[RES]] to <16 x i32>
- ; CHECK-NEXT:    [[TMP7:%.*]] = bitcast <16 x i4> [[TMP4]] to i64
- ; CHECK-NEXT:    [[_MSCMP:%.*]] = icmp ne i64 [[TMP7]], 0
- ; CHECK-NEXT:    br i1 [[_MSCMP]], label [[TMP14:%.*]], label [[TMP15:%.*]], !prof [[PROF1]]
--; CHECK:       8:
-+; CHECK:       9:
- ; CHECK-NEXT:    call void @__msan_warning_noreturn() #[[ATTR10]]
- ; CHECK-NEXT:    unreachable
--; CHECK:       9:
--; CHECK-NEXT:    [[RES1:%.*]] = call <16 x float> @llvm.x86.avx512.vpermilvar.ps.512(<16 x float> [[X2:%.*]], <16 x i32> [[X1]])
-+; CHECK:       10:
-+; CHECK-NEXT:    [[RES1:%.*]] = call <16 x float> @llvm.x86.avx512.vpermilvar.ps.512(<16 x float> [[X3:%.*]], <16 x i32> [[X2]])
- ; CHECK-NEXT:    [[TMP8:%.*]] = bitcast i16 [[TMP3]] to <16 x i1>
- ; CHECK-NEXT:    [[MASK_CAST:%.*]] = bitcast i16 [[MASK:%.*]] to <16 x i1>
- ; CHECK-NEXT:    [[TMP9:%.*]] = select <16 x i1> [[MASK_CAST]], <16 x i32> [[TMP5]], <16 x i32> zeroinitializer
-diff -ruN --strip-trailing-cr a/llvm/test/Instrumentation/MemorySanitizer/X86/avx512-intrinsics-upgrade.ll b/llvm/test/Instrumentation/MemorySanitizer/X86/avx512-intrinsics-upgrade.ll
---- a/llvm/test/Instrumentation/MemorySanitizer/X86/avx512-intrinsics-upgrade.ll
-+++ b/llvm/test/Instrumentation/MemorySanitizer/X86/avx512-intrinsics-upgrade.ll
-@@ -8141,19 +8141,20 @@
- define <8 x double>@test_int_x86_avx512_vpermilvar_pd_512(<8 x double> %x0, <8 x i64> %x1, <8 x double> %x2)  #0 {
- ; CHECK-LABEL: @test_int_x86_avx512_vpermilvar_pd_512(
- ; CHECK-NEXT:    [[TMP1:%.*]] = load <8 x i64>, ptr @__msan_param_tls, align 8
-+; CHECK-NEXT:    [[X1:%.*]] = load <8 x i64>, ptr inttoptr (i64 add (i64 ptrtoint (ptr @__msan_param_tls to i64), i64 64) to ptr), align 8
- ; CHECK-NEXT:    call void @llvm.donothing()
--; CHECK-NEXT:    [[TMP2:%.*]] = trunc <8 x i64> [[X1:%.*]] to <8 x i3>
-+; CHECK-NEXT:    [[TMP2:%.*]] = trunc <8 x i64> [[X1]] to <8 x i3>
- ; CHECK-NEXT:    [[X0:%.*]] = bitcast <8 x i64> [[TMP1]] to <8 x double>
--; CHECK-NEXT:    [[TMP7:%.*]] = call <8 x double> @llvm.x86.avx512.vpermilvar.pd.512(<8 x double> [[X0]], <8 x i64> [[X1]])
-+; CHECK-NEXT:    [[TMP7:%.*]] = call <8 x double> @llvm.x86.avx512.vpermilvar.pd.512(<8 x double> [[X0]], <8 x i64> [[X2:%.*]])
- ; CHECK-NEXT:    [[TMP4:%.*]] = bitcast <8 x double> [[TMP7]] to <8 x i64>
- ; CHECK-NEXT:    [[TMP6:%.*]] = bitcast <8 x i3> [[TMP2]] to i24
- ; CHECK-NEXT:    [[_MSCMP:%.*]] = icmp ne i24 [[TMP6]], 0
--; CHECK-NEXT:    br i1 [[_MSCMP]], label [[TMP9:%.*]], label [[TMP8:%.*]], !prof [[PROF1]]
--; CHECK:       7:
-+; CHECK-NEXT:    br i1 [[_MSCMP]], label [[TMP8:%.*]], label [[TMP9:%.*]], !prof [[PROF1]]
-+; CHECK:       8:
- ; CHECK-NEXT:    call void @__msan_warning_noreturn() #[[ATTR8]]
- ; CHECK-NEXT:    unreachable
--; CHECK:       8:
--; CHECK-NEXT:    [[TMP5:%.*]] = call <8 x double> @llvm.x86.avx512.vpermilvar.pd.512(<8 x double> [[X2:%.*]], <8 x i64> [[X1]])
-+; CHECK:       9:
-+; CHECK-NEXT:    [[TMP5:%.*]] = call <8 x double> @llvm.x86.avx512.vpermilvar.pd.512(<8 x double> [[X3:%.*]], <8 x i64> [[X2]])
- ; CHECK-NEXT:    store <8 x i64> [[TMP4]], ptr @__msan_retval_tls, align 8
- ; CHECK-NEXT:    ret <8 x double> [[TMP5]]
- ;
-@@ -8165,21 +8166,22 @@
- ;
- ; CHECK-LABEL: @test_int_x86_avx512_mask_vpermilvar_pd_512(
- ; CHECK-NEXT:    [[TMP1:%.*]] = load <8 x i64>, ptr @__msan_param_tls, align 8
-+; CHECK-NEXT:    [[X1:%.*]] = load <8 x i64>, ptr inttoptr (i64 add (i64 ptrtoint (ptr @__msan_param_tls to i64), i64 64) to ptr), align 8
- ; CHECK-NEXT:    [[TMP3:%.*]] = load i8, ptr inttoptr (i64 add (i64 ptrtoint (ptr @__msan_param_tls to i64), i64 192) to ptr), align 8
- ; CHECK-NEXT:    [[TMP4:%.*]] = load <8 x i64>, ptr inttoptr (i64 add (i64 ptrtoint (ptr @__msan_param_tls to i64), i64 128) to ptr), align 8
- ; CHECK-NEXT:    call void @llvm.donothing()
--; CHECK-NEXT:    [[TMP5:%.*]] = trunc <8 x i64> [[X1:%.*]] to <8 x i3>
-+; CHECK-NEXT:    [[TMP5:%.*]] = trunc <8 x i64> [[X1]] to <8 x i3>
- ; CHECK-NEXT:    [[X0:%.*]] = bitcast <8 x i64> [[TMP1]] to <8 x double>
--; CHECK-NEXT:    [[TMP9:%.*]] = call <8 x double> @llvm.x86.avx512.vpermilvar.pd.512(<8 x double> [[X0]], <8 x i64> [[X1]])
-+; CHECK-NEXT:    [[TMP9:%.*]] = call <8 x double> @llvm.x86.avx512.vpermilvar.pd.512(<8 x double> [[X0]], <8 x i64> [[X4:%.*]])
- ; CHECK-NEXT:    [[TMP6:%.*]] = bitcast <8 x double> [[TMP9]] to <8 x i64>
- ; CHECK-NEXT:    [[TMP8:%.*]] = bitcast <8 x i3> [[TMP5]] to i24
- ; CHECK-NEXT:    [[_MSCMP:%.*]] = icmp ne i24 [[TMP8]], 0
- ; CHECK-NEXT:    br i1 [[_MSCMP]], label [[TMP19:%.*]], label [[TMP20:%.*]], !prof [[PROF1]]
--; CHECK:       9:
-+; CHECK:       10:
- ; CHECK-NEXT:    call void @__msan_warning_noreturn() #[[ATTR8]]
- ; CHECK-NEXT:    unreachable
--; CHECK:       10:
--; CHECK-NEXT:    [[TMP7:%.*]] = call <8 x double> @llvm.x86.avx512.vpermilvar.pd.512(<8 x double> [[X4:%.*]], <8 x i64> [[X1]])
-+; CHECK:       11:
-+; CHECK-NEXT:    [[TMP7:%.*]] = call <8 x double> @llvm.x86.avx512.vpermilvar.pd.512(<8 x double> [[X5:%.*]], <8 x i64> [[X4]])
- ; CHECK-NEXT:    [[TMP10:%.*]] = bitcast i8 [[TMP3]] to <8 x i1>
- ; CHECK-NEXT:    [[TMP11:%.*]] = bitcast i8 [[X3:%.*]] to <8 x i1>
- ; CHECK-NEXT:    [[TMP12:%.*]] = select <8 x i1> [[TMP11]], <8 x i64> [[TMP6]], <8 x i64> [[TMP4]]
-@@ -8201,20 +8203,21 @@
- ;
- ; CHECK-LABEL: @test_int_x86_avx512_maskz_vpermilvar_pd_512(
- ; CHECK-NEXT:    [[TMP1:%.*]] = load <8 x i64>, ptr @__msan_param_tls, align 8
-+; CHECK-NEXT:    [[X1:%.*]] = load <8 x i64>, ptr inttoptr (i64 add (i64 ptrtoint (ptr @__msan_param_tls to i64), i64 64) to ptr), align 8
- ; CHECK-NEXT:    [[TMP3:%.*]] = load i8, ptr inttoptr (i64 add (i64 ptrtoint (ptr @__msan_param_tls to i64), i64 192) to ptr), align 8
- ; CHECK-NEXT:    call void @llvm.donothing()
--; CHECK-NEXT:    [[TMP4:%.*]] = trunc <8 x i64> [[X1:%.*]] to <8 x i3>
-+; CHECK-NEXT:    [[TMP4:%.*]] = trunc <8 x i64> [[X1]] to <8 x i3>
- ; CHECK-NEXT:    [[X0:%.*]] = bitcast <8 x i64> [[TMP1]] to <8 x double>
--; CHECK-NEXT:    [[TMP8:%.*]] = call <8 x double> @llvm.x86.avx512.vpermilvar.pd.512(<8 x double> [[X0]], <8 x i64> [[X1]])
-+; CHECK-NEXT:    [[TMP8:%.*]] = call <8 x double> @llvm.x86.avx512.vpermilvar.pd.512(<8 x double> [[X0]], <8 x i64> [[X2:%.*]])
- ; CHECK-NEXT:    [[TMP5:%.*]] = bitcast <8 x double> [[TMP8]] to <8 x i64>
- ; CHECK-NEXT:    [[TMP7:%.*]] = bitcast <8 x i3> [[TMP4]] to i24
- ; CHECK-NEXT:    [[_MSCMP:%.*]] = icmp ne i24 [[TMP7]], 0
- ; CHECK-NEXT:    br i1 [[_MSCMP]], label [[TMP17:%.*]], label [[TMP18:%.*]], !prof [[PROF1]]
--; CHECK:       8:
-+; CHECK:       9:
- ; CHECK-NEXT:    call void @__msan_warning_noreturn() #[[ATTR8]]
- ; CHECK-NEXT:    unreachable
--; CHECK:       9:
--; CHECK-NEXT:    [[TMP6:%.*]] = call <8 x double> @llvm.x86.avx512.vpermilvar.pd.512(<8 x double> [[X2:%.*]], <8 x i64> [[X1]])
-+; CHECK:       10:
-+; CHECK-NEXT:    [[TMP6:%.*]] = call <8 x double> @llvm.x86.avx512.vpermilvar.pd.512(<8 x double> [[X4:%.*]], <8 x i64> [[X2]])
- ; CHECK-NEXT:    [[TMP9:%.*]] = bitcast i8 [[TMP3]] to <8 x i1>
- ; CHECK-NEXT:    [[TMP10:%.*]] = bitcast i8 [[X3:%.*]] to <8 x i1>
- ; CHECK-NEXT:    [[TMP11:%.*]] = select <8 x i1> [[TMP10]], <8 x i64> [[TMP5]], <8 x i64> zeroinitializer
-@@ -8236,19 +8239,20 @@
- define <16 x float>@test_int_x86_avx512_vpermilvar_ps_512(<16 x float> %x0, <16 x i32> %x1, <16 x float> %x2)  #0 {
- ; CHECK-LABEL: @test_int_x86_avx512_vpermilvar_ps_512(
- ; CHECK-NEXT:    [[TMP1:%.*]] = load <16 x i32>, ptr @__msan_param_tls, align 8
-+; CHECK-NEXT:    [[X1:%.*]] = load <16 x i32>, ptr inttoptr (i64 add (i64 ptrtoint (ptr @__msan_param_tls to i64), i64 64) to ptr), align 8
- ; CHECK-NEXT:    call void @llvm.donothing()
--; CHECK-NEXT:    [[TMP2:%.*]] = trunc <16 x i32> [[X1:%.*]] to <16 x i4>
-+; CHECK-NEXT:    [[TMP2:%.*]] = trunc <16 x i32> [[X1]] to <16 x i4>
- ; CHECK-NEXT:    [[X0:%.*]] = bitcast <16 x i32> [[TMP1]] to <16 x float>
--; CHECK-NEXT:    [[TMP7:%.*]] = call <16 x float> @llvm.x86.avx512.vpermilvar.ps.512(<16 x float> [[X0]], <16 x i32> [[X1]])
-+; CHECK-NEXT:    [[TMP7:%.*]] = call <16 x float> @llvm.x86.avx512.vpermilvar.ps.512(<16 x float> [[X0]], <16 x i32> [[X2:%.*]])
- ; CHECK-NEXT:    [[TMP4:%.*]] = bitcast <16 x float> [[TMP7]] to <16 x i32>
- ; CHECK-NEXT:    [[TMP6:%.*]] = bitcast <16 x i4> [[TMP2]] to i64
- ; CHECK-NEXT:    [[_MSCMP:%.*]] = icmp ne i64 [[TMP6]], 0
--; CHECK-NEXT:    br i1 [[_MSCMP]], label [[TMP9:%.*]], label [[TMP8:%.*]], !prof [[PROF1]]
--; CHECK:       7:
-+; CHECK-NEXT:    br i1 [[_MSCMP]], label [[TMP8:%.*]], label [[TMP9:%.*]], !prof [[PROF1]]
-+; CHECK:       8:
- ; CHECK-NEXT:    call void @__msan_warning_noreturn() #[[ATTR8]]
- ; CHECK-NEXT:    unreachable
--; CHECK:       8:
--; CHECK-NEXT:    [[TMP5:%.*]] = call <16 x float> @llvm.x86.avx512.vpermilvar.ps.512(<16 x float> [[X2:%.*]], <16 x i32> [[X1]])
-+; CHECK:       9:
-+; CHECK-NEXT:    [[TMP5:%.*]] = call <16 x float> @llvm.x86.avx512.vpermilvar.ps.512(<16 x float> [[X3:%.*]], <16 x i32> [[X2]])
- ; CHECK-NEXT:    store <16 x i32> [[TMP4]], ptr @__msan_retval_tls, align 8
- ; CHECK-NEXT:    ret <16 x float> [[TMP5]]
- ;
-@@ -8260,21 +8264,22 @@
- ;
- ; CHECK-LABEL: @test_int_x86_avx512_mask_vpermilvar_ps_512(
- ; CHECK-NEXT:    [[TMP1:%.*]] = load <16 x i32>, ptr @__msan_param_tls, align 8
-+; CHECK-NEXT:    [[X1:%.*]] = load <16 x i32>, ptr inttoptr (i64 add (i64 ptrtoint (ptr @__msan_param_tls to i64), i64 64) to ptr), align 8
- ; CHECK-NEXT:    [[TMP3:%.*]] = load i16, ptr inttoptr (i64 add (i64 ptrtoint (ptr @__msan_param_tls to i64), i64 192) to ptr), align 8
- ; CHECK-NEXT:    [[TMP4:%.*]] = load <16 x i32>, ptr inttoptr (i64 add (i64 ptrtoint (ptr @__msan_param_tls to i64), i64 128) to ptr), align 8
- ; CHECK-NEXT:    call void @llvm.donothing()
--; CHECK-NEXT:    [[TMP5:%.*]] = trunc <16 x i32> [[X1:%.*]] to <16 x i4>
-+; CHECK-NEXT:    [[TMP5:%.*]] = trunc <16 x i32> [[X1]] to <16 x i4>
- ; CHECK-NEXT:    [[X0:%.*]] = bitcast <16 x i32> [[TMP1]] to <16 x float>
--; CHECK-NEXT:    [[TMP9:%.*]] = call <16 x float> @llvm.x86.avx512.vpermilvar.ps.512(<16 x float> [[X0]], <16 x i32> [[X1]])
-+; CHECK-NEXT:    [[TMP9:%.*]] = call <16 x float> @llvm.x86.avx512.vpermilvar.ps.512(<16 x float> [[X0]], <16 x i32> [[X4:%.*]])
- ; CHECK-NEXT:    [[TMP6:%.*]] = bitcast <16 x float> [[TMP9]] to <16 x i32>
- ; CHECK-NEXT:    [[TMP8:%.*]] = bitcast <16 x i4> [[TMP5]] to i64
- ; CHECK-NEXT:    [[_MSCMP:%.*]] = icmp ne i64 [[TMP8]], 0
- ; CHECK-NEXT:    br i1 [[_MSCMP]], label [[TMP19:%.*]], label [[TMP20:%.*]], !prof [[PROF1]]
--; CHECK:       9:
-+; CHECK:       10:
- ; CHECK-NEXT:    call void @__msan_warning_noreturn() #[[ATTR8]]
- ; CHECK-NEXT:    unreachable
--; CHECK:       10:
--; CHECK-NEXT:    [[TMP7:%.*]] = call <16 x float> @llvm.x86.avx512.vpermilvar.ps.512(<16 x float> [[X4:%.*]], <16 x i32> [[X1]])
-+; CHECK:       11:
-+; CHECK-NEXT:    [[TMP7:%.*]] = call <16 x float> @llvm.x86.avx512.vpermilvar.ps.512(<16 x float> [[X5:%.*]], <16 x i32> [[X4]])
- ; CHECK-NEXT:    [[TMP10:%.*]] = bitcast i16 [[TMP3]] to <16 x i1>
- ; CHECK-NEXT:    [[TMP11:%.*]] = bitcast i16 [[X3:%.*]] to <16 x i1>
- ; CHECK-NEXT:    [[TMP12:%.*]] = select <16 x i1> [[TMP11]], <16 x i32> [[TMP6]], <16 x i32> [[TMP4]]
-@@ -8297,20 +8302,21 @@
- ;
- ; CHECK-LABEL: @test_int_x86_avx512_maskz_vpermilvar_ps_512(
- ; CHECK-NEXT:    [[TMP1:%.*]] = load <16 x i32>, ptr @__msan_param_tls, align 8
-+; CHECK-NEXT:    [[X1:%.*]] = load <16 x i32>, ptr inttoptr (i64 add (i64 ptrtoint (ptr @__msan_param_tls to i64), i64 64) to ptr), align 8
- ; CHECK-NEXT:    [[TMP3:%.*]] = load i16, ptr inttoptr (i64 add (i64 ptrtoint (ptr @__msan_param_tls to i64), i64 128) to ptr), align 8
- ; CHECK-NEXT:    call void @llvm.donothing()
--; CHECK-NEXT:    [[TMP4:%.*]] = trunc <16 x i32> [[X1:%.*]] to <16 x i4>
-+; CHECK-NEXT:    [[TMP4:%.*]] = trunc <16 x i32> [[X1]] to <16 x i4>
- ; CHECK-NEXT:    [[X0:%.*]] = bitcast <16 x i32> [[TMP1]] to <16 x float>
--; CHECK-NEXT:    [[TMP8:%.*]] = call <16 x float> @llvm.x86.avx512.vpermilvar.ps.512(<16 x float> [[X0]], <16 x i32> [[X1]])
-+; CHECK-NEXT:    [[TMP8:%.*]] = call <16 x float> @llvm.x86.avx512.vpermilvar.ps.512(<16 x float> [[X0]], <16 x i32> [[X2:%.*]])
- ; CHECK-NEXT:    [[TMP5:%.*]] = bitcast <16 x float> [[TMP8]] to <16 x i32>
- ; CHECK-NEXT:    [[TMP7:%.*]] = bitcast <16 x i4> [[TMP4]] to i64
- ; CHECK-NEXT:    [[_MSCMP:%.*]] = icmp ne i64 [[TMP7]], 0
- ; CHECK-NEXT:    br i1 [[_MSCMP]], label [[TMP17:%.*]], label [[TMP18:%.*]], !prof [[PROF1]]
--; CHECK:       8:
-+; CHECK:       9:
- ; CHECK-NEXT:    call void @__msan_warning_noreturn() #[[ATTR8]]
- ; CHECK-NEXT:    unreachable
--; CHECK:       9:
--; CHECK-NEXT:    [[TMP6:%.*]] = call <16 x float> @llvm.x86.avx512.vpermilvar.ps.512(<16 x float> [[X2:%.*]], <16 x i32> [[X1]])
-+; CHECK:       10:
-+; CHECK-NEXT:    [[TMP6:%.*]] = call <16 x float> @llvm.x86.avx512.vpermilvar.ps.512(<16 x float> [[X4:%.*]], <16 x i32> [[X2]])
- ; CHECK-NEXT:    [[TMP9:%.*]] = bitcast i16 [[TMP3]] to <16 x i1>
- ; CHECK-NEXT:    [[TMP10:%.*]] = bitcast i16 [[X3:%.*]] to <16 x i1>
- ; CHECK-NEXT:    [[TMP11:%.*]] = select <16 x i1> [[TMP10]], <16 x i32> [[TMP5]], <16 x i32> zeroinitializer
-@@ -13713,28 +13719,29 @@
- ; CHECK-NEXT:    [[TMP1:%.*]] = load i64, ptr inttoptr (i64 add (i64 ptrtoint (ptr @__msan_param_tls to i64), i64 128) to ptr), align 8
- ; CHECK-NEXT:    [[TMP2:%.*]] = load <16 x i32>, ptr @__msan_param_tls, align 8
- ; CHECK-NEXT:    [[TMP4:%.*]] = load <16 x i32>, ptr inttoptr (i64 add (i64 ptrtoint (ptr @__msan_param_tls to i64), i64 136) to ptr), align 8
-+; CHECK-NEXT:    [[X1:%.*]] = load <16 x i32>, ptr inttoptr (i64 add (i64 ptrtoint (ptr @__msan_param_tls to i64), i64 64) to ptr), align 8
- ; CHECK-NEXT:    call void @llvm.donothing()
- ; CHECK-NEXT:    [[_MSCMP:%.*]] = icmp ne i64 [[TMP1]], 0
--; CHECK-NEXT:    br i1 [[_MSCMP]], label [[TMP6:%.*]], label [[TMP5:%.*]], !prof [[PROF1]]
--; CHECK:       4:
-+; CHECK-NEXT:    br i1 [[_MSCMP]], label [[TMP5:%.*]], label [[TMP6:%.*]], !prof [[PROF1]]
-+; CHECK:       5:
- ; CHECK-NEXT:    call void @__msan_warning_noreturn() #[[ATTR8]]
- ; CHECK-NEXT:    unreachable
--; CHECK:       5:
-+; CHECK:       6:
- ; CHECK-NEXT:    [[X2:%.*]] = load <16 x i32>, ptr [[X2P:%.*]], align 64
- ; CHECK-NEXT:    [[TMP7:%.*]] = ptrtoint ptr [[X2P]] to i64
- ; CHECK-NEXT:    [[TMP8:%.*]] = xor i64 [[TMP7]], 87960930222080
- ; CHECK-NEXT:    [[TMP9:%.*]] = inttoptr i64 [[TMP8]] to ptr
- ; CHECK-NEXT:    [[_MSLD:%.*]] = load <16 x i32>, ptr [[TMP9]], align 64
--; CHECK-NEXT:    [[TMP14:%.*]] = trunc <16 x i32> [[X1:%.*]] to <16 x i4>
--; CHECK-NEXT:    [[_MSPROP1:%.*]] = call <16 x i32> @llvm.x86.avx512.vpermi2var.d.512(<16 x i32> [[TMP2]], <16 x i32> [[X1]], <16 x i32> [[TMP4]])
-+; CHECK-NEXT:    [[TMP14:%.*]] = trunc <16 x i32> [[X1]] to <16 x i4>
-+; CHECK-NEXT:    [[_MSPROP1:%.*]] = call <16 x i32> @llvm.x86.avx512.vpermi2var.d.512(<16 x i32> [[TMP2]], <16 x i32> [[X3:%.*]], <16 x i32> [[TMP4]])
- ; CHECK-NEXT:    [[TMP11:%.*]] = bitcast <16 x i4> [[TMP14]] to i64
- ; CHECK-NEXT:    [[_MSCMP1:%.*]] = icmp ne i64 [[TMP11]], 0
--; CHECK-NEXT:    br i1 [[_MSCMP1]], label [[TMP12:%.*]], label [[TMP13:%.*]], !prof [[PROF1]]
--; CHECK:       12:
-+; CHECK-NEXT:    br i1 [[_MSCMP1]], label [[TMP13:%.*]], label [[TMP15:%.*]], !prof [[PROF1]]
-+; CHECK:       13:
- ; CHECK-NEXT:    call void @__msan_warning_noreturn() #[[ATTR8]]
- ; CHECK-NEXT:    unreachable
--; CHECK:       13:
--; CHECK-NEXT:    [[TMP10:%.*]] = call <16 x i32> @llvm.x86.avx512.vpermi2var.d.512(<16 x i32> [[X0:%.*]], <16 x i32> [[X1]], <16 x i32> [[X4:%.*]])
-+; CHECK:       14:
-+; CHECK-NEXT:    [[TMP10:%.*]] = call <16 x i32> @llvm.x86.avx512.vpermi2var.d.512(<16 x i32> [[X0:%.*]], <16 x i32> [[X3]], <16 x i32> [[X4:%.*]])
- ; CHECK-NEXT:    store <16 x i32> [[_MSPROP1]], ptr @__msan_retval_tls, align 8
- ; CHECK-NEXT:    ret <16 x i32> [[TMP10]]
- ;
-@@ -13748,8 +13755,8 @@
- ; CHECK-LABEL: @test_int_x86_avx512_mask_vpermi2var_d_512(
- ; CHECK-NEXT:    [[TMP1:%.*]] = load i64, ptr inttoptr (i64 add (i64 ptrtoint (ptr @__msan_param_tls to i64), i64 128) to ptr), align 8
- ; CHECK-NEXT:    [[TMP2:%.*]] = load <16 x i32>, ptr @__msan_param_tls, align 8
--; CHECK-NEXT:    [[TMP4:%.*]] = load i16, ptr inttoptr (i64 add (i64 ptrtoint (ptr @__msan_param_tls to i64), i64 200) to ptr), align 8
- ; CHECK-NEXT:    [[TMP3:%.*]] = load <16 x i32>, ptr inttoptr (i64 add (i64 ptrtoint (ptr @__msan_param_tls to i64), i64 64) to ptr), align 8
-+; CHECK-NEXT:    [[TMP4:%.*]] = load i16, ptr inttoptr (i64 add (i64 ptrtoint (ptr @__msan_param_tls to i64), i64 200) to ptr), align 8
- ; CHECK-NEXT:    call void @llvm.donothing()
- ; CHECK-NEXT:    [[_MSCMP:%.*]] = icmp ne i64 [[TMP1]], 0
- ; CHECK-NEXT:    br i1 [[_MSCMP]], label [[TMP5:%.*]], label [[TMP6:%.*]], !prof [[PROF1]]
-@@ -13762,8 +13769,8 @@
- ; CHECK-NEXT:    [[TMP8:%.*]] = xor i64 [[TMP7]], 87960930222080
- ; CHECK-NEXT:    [[TMP9:%.*]] = inttoptr i64 [[TMP8]] to ptr
- ; CHECK-NEXT:    [[_MSLD:%.*]] = load <16 x i32>, ptr [[TMP9]], align 64
--; CHECK-NEXT:    [[TMP18:%.*]] = trunc <16 x i32> [[X1:%.*]] to <16 x i4>
--; CHECK-NEXT:    [[_MSPROP1:%.*]] = call <16 x i32> @llvm.x86.avx512.vpermi2var.d.512(<16 x i32> [[TMP2]], <16 x i32> [[X1]], <16 x i32> [[_MSLD]])
-+; CHECK-NEXT:    [[TMP18:%.*]] = trunc <16 x i32> [[TMP3]] to <16 x i4>
-+; CHECK-NEXT:    [[_MSPROP1:%.*]] = call <16 x i32> @llvm.x86.avx512.vpermi2var.d.512(<16 x i32> [[TMP2]], <16 x i32> [[X1:%.*]], <16 x i32> [[_MSLD]])
- ; CHECK-NEXT:    [[TMP19:%.*]] = bitcast <16 x i4> [[TMP18]] to i64
- ; CHECK-NEXT:    [[_MSCMP1:%.*]] = icmp ne i64 [[TMP19]], 0
- ; CHECK-NEXT:    br i1 [[_MSCMP1]], label [[TMP20:%.*]], label [[TMP21:%.*]], !prof [[PROF1]]
-@@ -13796,10 +13803,10 @@
- ; CHECK-NEXT:    [[TMP3:%.*]] = load <8 x i64>, ptr inttoptr (i64 add (i64 ptrtoint (ptr @__msan_param_tls to i64), i64 128) to ptr), align 8
- ; CHECK-NEXT:    [[TMP8:%.*]] = load <8 x i64>, ptr inttoptr (i64 add (i64 ptrtoint (ptr @__msan_param_tls to i64), i64 64) to ptr), align 8
- ; CHECK-NEXT:    call void @llvm.donothing()
--; CHECK-NEXT:    [[TMP6:%.*]] = trunc <8 x i64> [[X1:%.*]] to <8 x i3>
-+; CHECK-NEXT:    [[TMP6:%.*]] = trunc <8 x i64> [[TMP8]] to <8 x i3>
- ; CHECK-NEXT:    [[TMP4:%.*]] = bitcast <8 x i64> [[TMP1]] to <8 x double>
- ; CHECK-NEXT:    [[TMP5:%.*]] = bitcast <8 x i64> [[TMP3]] to <8 x double>
--; CHECK-NEXT:    [[TMP11:%.*]] = call <8 x double> @llvm.x86.avx512.vpermi2var.pd.512(<8 x double> [[TMP4]], <8 x i64> [[X1]], <8 x double> [[TMP5]])
-+; CHECK-NEXT:    [[TMP11:%.*]] = call <8 x double> @llvm.x86.avx512.vpermi2var.pd.512(<8 x double> [[TMP4]], <8 x i64> [[X1:%.*]], <8 x double> [[TMP5]])
- ; CHECK-NEXT:    [[TMP7:%.*]] = bitcast <8 x double> [[TMP11]] to <8 x i64>
- ; CHECK-NEXT:    [[TMP12:%.*]] = bitcast <8 x i3> [[TMP6]] to i24
- ; CHECK-NEXT:    [[_MSCMP:%.*]] = icmp ne i24 [[TMP12]], 0
-@@ -13825,10 +13832,10 @@
- ; CHECK-NEXT:    [[TMP2:%.*]] = load <8 x i64>, ptr inttoptr (i64 add (i64 ptrtoint (ptr @__msan_param_tls to i64), i64 64) to ptr), align 8
- ; CHECK-NEXT:    [[TMP4:%.*]] = load i8, ptr inttoptr (i64 add (i64 ptrtoint (ptr @__msan_param_tls to i64), i64 192) to ptr), align 8
- ; CHECK-NEXT:    call void @llvm.donothing()
--; CHECK-NEXT:    [[TMP7:%.*]] = trunc <8 x i64> [[X1:%.*]] to <8 x i3>
-+; CHECK-NEXT:    [[TMP7:%.*]] = trunc <8 x i64> [[TMP2]] to <8 x i3>
- ; CHECK-NEXT:    [[TMP5:%.*]] = bitcast <8 x i64> [[TMP1]] to <8 x double>
- ; CHECK-NEXT:    [[TMP6:%.*]] = bitcast <8 x i64> [[TMP3]] to <8 x double>
--; CHECK-NEXT:    [[TMP9:%.*]] = call <8 x double> @llvm.x86.avx512.vpermi2var.pd.512(<8 x double> [[TMP5]], <8 x i64> [[X1]], <8 x double> [[TMP6]])
-+; CHECK-NEXT:    [[TMP9:%.*]] = call <8 x double> @llvm.x86.avx512.vpermi2var.pd.512(<8 x double> [[TMP5]], <8 x i64> [[X1:%.*]], <8 x double> [[TMP6]])
- ; CHECK-NEXT:    [[TMP8:%.*]] = bitcast <8 x double> [[TMP9]] to <8 x i64>
- ; CHECK-NEXT:    [[TMP21:%.*]] = bitcast <8 x i3> [[TMP7]] to i24
- ; CHECK-NEXT:    [[_MSCMP:%.*]] = icmp ne i24 [[TMP21]], 0
-@@ -13864,10 +13871,10 @@
- ; CHECK-NEXT:    [[TMP3:%.*]] = load <16 x i32>, ptr inttoptr (i64 add (i64 ptrtoint (ptr @__msan_param_tls to i64), i64 128) to ptr), align 8
- ; CHECK-NEXT:    [[TMP8:%.*]] = load <16 x i32>, ptr inttoptr (i64 add (i64 ptrtoint (ptr @__msan_param_tls to i64), i64 64) to ptr), align 8
- ; CHECK-NEXT:    call void @llvm.donothing()
--; CHECK-NEXT:    [[TMP6:%.*]] = trunc <16 x i32> [[X1:%.*]] to <16 x i4>
-+; CHECK-NEXT:    [[TMP6:%.*]] = trunc <16 x i32> [[TMP8]] to <16 x i4>
- ; CHECK-NEXT:    [[TMP4:%.*]] = bitcast <16 x i32> [[TMP1]] to <16 x float>
- ; CHECK-NEXT:    [[TMP5:%.*]] = bitcast <16 x i32> [[TMP3]] to <16 x float>
--; CHECK-NEXT:    [[TMP11:%.*]] = call <16 x float> @llvm.x86.avx512.vpermi2var.ps.512(<16 x float> [[TMP4]], <16 x i32> [[X1]], <16 x float> [[TMP5]])
-+; CHECK-NEXT:    [[TMP11:%.*]] = call <16 x float> @llvm.x86.avx512.vpermi2var.ps.512(<16 x float> [[TMP4]], <16 x i32> [[X1:%.*]], <16 x float> [[TMP5]])
- ; CHECK-NEXT:    [[TMP7:%.*]] = bitcast <16 x float> [[TMP11]] to <16 x i32>
- ; CHECK-NEXT:    [[TMP12:%.*]] = bitcast <16 x i4> [[TMP6]] to i64
- ; CHECK-NEXT:    [[_MSCMP:%.*]] = icmp ne i64 [[TMP12]], 0
-@@ -13893,10 +13900,10 @@
- ; CHECK-NEXT:    [[TMP2:%.*]] = load <16 x i32>, ptr inttoptr (i64 add (i64 ptrtoint (ptr @__msan_param_tls to i64), i64 64) to ptr), align 8
- ; CHECK-NEXT:    [[TMP4:%.*]] = load i16, ptr inttoptr (i64 add (i64 ptrtoint (ptr @__msan_param_tls to i64), i64 192) to ptr), align 8
- ; CHECK-NEXT:    call void @llvm.donothing()
--; CHECK-NEXT:    [[TMP7:%.*]] = trunc <16 x i32> [[X1:%.*]] to <16 x i4>
-+; CHECK-NEXT:    [[TMP7:%.*]] = trunc <16 x i32> [[TMP2]] to <16 x i4>
- ; CHECK-NEXT:    [[TMP5:%.*]] = bitcast <16 x i32> [[TMP1]] to <16 x float>
- ; CHECK-NEXT:    [[TMP6:%.*]] = bitcast <16 x i32> [[TMP3]] to <16 x float>
--; CHECK-NEXT:    [[TMP9:%.*]] = call <16 x float> @llvm.x86.avx512.vpermi2var.ps.512(<16 x float> [[TMP5]], <16 x i32> [[X1]], <16 x float> [[TMP6]])
-+; CHECK-NEXT:    [[TMP9:%.*]] = call <16 x float> @llvm.x86.avx512.vpermi2var.ps.512(<16 x float> [[TMP5]], <16 x i32> [[X1:%.*]], <16 x float> [[TMP6]])
- ; CHECK-NEXT:    [[TMP8:%.*]] = bitcast <16 x float> [[TMP9]] to <16 x i32>
- ; CHECK-NEXT:    [[TMP21:%.*]] = bitcast <16 x i4> [[TMP7]] to i64
- ; CHECK-NEXT:    [[_MSCMP:%.*]] = icmp ne i64 [[TMP21]], 0
-@@ -13930,17 +13937,18 @@
- ; CHECK-LABEL: @test_int_x86_avx512_vpermi2var_q_512(
- ; CHECK-NEXT:    [[TMP1:%.*]] = load <8 x i64>, ptr @__msan_param_tls, align 8
- ; CHECK-NEXT:    [[TMP3:%.*]] = load <8 x i64>, ptr inttoptr (i64 add (i64 ptrtoint (ptr @__msan_param_tls to i64), i64 128) to ptr), align 8
-+; CHECK-NEXT:    [[X1:%.*]] = load <8 x i64>, ptr inttoptr (i64 add (i64 ptrtoint (ptr @__msan_param_tls to i64), i64 64) to ptr), align 8
- ; CHECK-NEXT:    call void @llvm.donothing()
--; CHECK-NEXT:    [[TMP8:%.*]] = trunc <8 x i64> [[X1:%.*]] to <8 x i3>
--; CHECK-NEXT:    [[_MSPROP1:%.*]] = call <8 x i64> @llvm.x86.avx512.vpermi2var.q.512(<8 x i64> [[TMP1]], <8 x i64> [[X1]], <8 x i64> [[TMP3]])
-+; CHECK-NEXT:    [[TMP8:%.*]] = trunc <8 x i64> [[X1]] to <8 x i3>
-+; CHECK-NEXT:    [[_MSPROP1:%.*]] = call <8 x i64> @llvm.x86.avx512.vpermi2var.q.512(<8 x i64> [[TMP1]], <8 x i64> [[X3:%.*]], <8 x i64> [[TMP3]])
- ; CHECK-NEXT:    [[TMP5:%.*]] = bitcast <8 x i3> [[TMP8]] to i24
- ; CHECK-NEXT:    [[_MSCMP:%.*]] = icmp ne i24 [[TMP5]], 0
--; CHECK-NEXT:    br i1 [[_MSCMP]], label [[TMP6:%.*]], label [[TMP7:%.*]], !prof [[PROF1]]
--; CHECK:       6:
-+; CHECK-NEXT:    br i1 [[_MSCMP]], label [[TMP7:%.*]], label [[TMP9:%.*]], !prof [[PROF1]]
-+; CHECK:       7:
- ; CHECK-NEXT:    call void @__msan_warning_noreturn() #[[ATTR8]]
- ; CHECK-NEXT:    unreachable
--; CHECK:       7:
--; CHECK-NEXT:    [[TMP4:%.*]] = call <8 x i64> @llvm.x86.avx512.vpermi2var.q.512(<8 x i64> [[X0:%.*]], <8 x i64> [[X1]], <8 x i64> [[X2:%.*]])
-+; CHECK:       8:
-+; CHECK-NEXT:    [[TMP4:%.*]] = call <8 x i64> @llvm.x86.avx512.vpermi2var.q.512(<8 x i64> [[X0:%.*]], <8 x i64> [[X3]], <8 x i64> [[X2:%.*]])
- ; CHECK-NEXT:    store <8 x i64> [[_MSPROP1]], ptr @__msan_retval_tls, align 8
- ; CHECK-NEXT:    ret <8 x i64> [[TMP4]]
- ;
-@@ -13953,11 +13961,11 @@
- ; CHECK-LABEL: @test_int_x86_avx512_mask_vpermi2var_q_512(
- ; CHECK-NEXT:    [[TMP1:%.*]] = load <8 x i64>, ptr @__msan_param_tls, align 8
- ; CHECK-NEXT:    [[TMP3:%.*]] = load <8 x i64>, ptr inttoptr (i64 add (i64 ptrtoint (ptr @__msan_param_tls to i64), i64 128) to ptr), align 8
--; CHECK-NEXT:    [[TMP4:%.*]] = load i8, ptr inttoptr (i64 add (i64 ptrtoint (ptr @__msan_param_tls to i64), i64 192) to ptr), align 8
- ; CHECK-NEXT:    [[TMP2:%.*]] = load <8 x i64>, ptr inttoptr (i64 add (i64 ptrtoint (ptr @__msan_param_tls to i64), i64 64) to ptr), align 8
-+; CHECK-NEXT:    [[TMP4:%.*]] = load i8, ptr inttoptr (i64 add (i64 ptrtoint (ptr @__msan_param_tls to i64), i64 192) to ptr), align 8
- ; CHECK-NEXT:    call void @llvm.donothing()
--; CHECK-NEXT:    [[TMP13:%.*]] = trunc <8 x i64> [[X1:%.*]] to <8 x i3>
--; CHECK-NEXT:    [[_MSPROP1:%.*]] = call <8 x i64> @llvm.x86.avx512.vpermi2var.q.512(<8 x i64> [[TMP1]], <8 x i64> [[X1]], <8 x i64> [[TMP3]])
-+; CHECK-NEXT:    [[TMP13:%.*]] = trunc <8 x i64> [[TMP2]] to <8 x i3>
-+; CHECK-NEXT:    [[_MSPROP1:%.*]] = call <8 x i64> @llvm.x86.avx512.vpermi2var.q.512(<8 x i64> [[TMP1]], <8 x i64> [[X1:%.*]], <8 x i64> [[TMP3]])
- ; CHECK-NEXT:    [[TMP14:%.*]] = bitcast <8 x i3> [[TMP13]] to i24
- ; CHECK-NEXT:    [[_MSCMP:%.*]] = icmp ne i24 [[TMP14]], 0
- ; CHECK-NEXT:    br i1 [[_MSCMP]], label [[TMP15:%.*]], label [[TMP16:%.*]], !prof [[PROF1]]
-@@ -13988,29 +13996,30 @@
- ; CHECK-LABEL: @test_int_x86_avx512_maskz_vpermt2var_d_512(
- ; CHECK-NEXT:    [[TMP1:%.*]] = load i64, ptr inttoptr (i64 add (i64 ptrtoint (ptr @__msan_param_tls to i64), i64 128) to ptr), align 8
- ; CHECK-NEXT:    [[TMP2:%.*]] = load <16 x i32>, ptr inttoptr (i64 add (i64 ptrtoint (ptr @__msan_param_tls to i64), i64 64) to ptr), align 8
-+; CHECK-NEXT:    [[X0:%.*]] = load <16 x i32>, ptr @__msan_param_tls, align 8
- ; CHECK-NEXT:    [[TMP4:%.*]] = load i16, ptr inttoptr (i64 add (i64 ptrtoint (ptr @__msan_param_tls to i64), i64 136) to ptr), align 8
- ; CHECK-NEXT:    call void @llvm.donothing()
- ; CHECK-NEXT:    [[_MSCMP:%.*]] = icmp ne i64 [[TMP1]], 0
--; CHECK-NEXT:    br i1 [[_MSCMP]], label [[TMP6:%.*]], label [[TMP5:%.*]], !prof [[PROF1]]
--; CHECK:       4:
-+; CHECK-NEXT:    br i1 [[_MSCMP]], label [[TMP5:%.*]], label [[TMP6:%.*]], !prof [[PROF1]]
-+; CHECK:       5:
- ; CHECK-NEXT:    call void @__msan_warning_noreturn() #[[ATTR8]]
- ; CHECK-NEXT:    unreachable
--; CHECK:       5:
-+; CHECK:       6:
- ; CHECK-NEXT:    [[X2:%.*]] = load <16 x i32>, ptr [[X2P:%.*]], align 64
- ; CHECK-NEXT:    [[TMP7:%.*]] = ptrtoint ptr [[X2P]] to i64
- ; CHECK-NEXT:    [[TMP8:%.*]] = xor i64 [[TMP7]], 87960930222080
- ; CHECK-NEXT:    [[TMP9:%.*]] = inttoptr i64 [[TMP8]] to ptr
- ; CHECK-NEXT:    [[_MSLD:%.*]] = load <16 x i32>, ptr [[TMP9]], align 64
--; CHECK-NEXT:    [[TMP18:%.*]] = trunc <16 x i32> [[X0:%.*]] to <16 x i4>
--; CHECK-NEXT:    [[_MSPROP1:%.*]] = call <16 x i32> @llvm.x86.avx512.vpermi2var.d.512(<16 x i32> [[TMP2]], <16 x i32> [[X0]], <16 x i32> [[_MSLD]])
-+; CHECK-NEXT:    [[TMP18:%.*]] = trunc <16 x i32> [[X0]] to <16 x i4>
-+; CHECK-NEXT:    [[_MSPROP1:%.*]] = call <16 x i32> @llvm.x86.avx512.vpermi2var.d.512(<16 x i32> [[TMP2]], <16 x i32> [[X4:%.*]], <16 x i32> [[_MSLD]])
- ; CHECK-NEXT:    [[TMP19:%.*]] = bitcast <16 x i4> [[TMP18]] to i64
- ; CHECK-NEXT:    [[_MSCMP1:%.*]] = icmp ne i64 [[TMP19]], 0
- ; CHECK-NEXT:    br i1 [[_MSCMP1]], label [[TMP20:%.*]], label [[TMP21:%.*]], !prof [[PROF1]]
--; CHECK:       12:
-+; CHECK:       13:
- ; CHECK-NEXT:    call void @__msan_warning_noreturn() #[[ATTR8]]
- ; CHECK-NEXT:    unreachable
--; CHECK:       13:
--; CHECK-NEXT:    [[TMP10:%.*]] = call <16 x i32> @llvm.x86.avx512.vpermi2var.d.512(<16 x i32> [[X1:%.*]], <16 x i32> [[X0]], <16 x i32> [[X2]])
-+; CHECK:       14:
-+; CHECK-NEXT:    [[TMP10:%.*]] = call <16 x i32> @llvm.x86.avx512.vpermi2var.d.512(<16 x i32> [[X1:%.*]], <16 x i32> [[X4]], <16 x i32> [[X2]])
- ; CHECK-NEXT:    [[TMP11:%.*]] = bitcast i16 [[TMP4]] to <16 x i1>
- ; CHECK-NEXT:    [[TMP12:%.*]] = bitcast i16 [[X3:%.*]] to <16 x i1>
- ; CHECK-NEXT:    [[TMP13:%.*]] = select <16 x i1> [[TMP12]], <16 x i32> [[_MSPROP1]], <16 x i32> zeroinitializer
-@@ -14035,14 +14044,15 @@
- ; CHECK-NEXT:    [[TMP1:%.*]] = load i64, ptr inttoptr (i64 add (i64 ptrtoint (ptr @__msan_param_tls to i64), i64 128) to ptr), align 8
- ; CHECK-NEXT:    [[TMP5:%.*]] = load <8 x i64>, ptr inttoptr (i64 add (i64 ptrtoint (ptr @__msan_param_tls to i64), i64 144) to ptr), align 8
- ; CHECK-NEXT:    [[TMP2:%.*]] = load <8 x i64>, ptr inttoptr (i64 add (i64 ptrtoint (ptr @__msan_param_tls to i64), i64 64) to ptr), align 8
-+; CHECK-NEXT:    [[X0:%.*]] = load <8 x i64>, ptr @__msan_param_tls, align 8
- ; CHECK-NEXT:    [[TMP4:%.*]] = load i8, ptr inttoptr (i64 add (i64 ptrtoint (ptr @__msan_param_tls to i64), i64 136) to ptr), align 8
- ; CHECK-NEXT:    call void @llvm.donothing()
- ; CHECK-NEXT:    [[_MSCMP:%.*]] = icmp ne i64 [[TMP1]], 0
--; CHECK-NEXT:    br i1 [[_MSCMP]], label [[TMP12:%.*]], label [[TMP6:%.*]], !prof [[PROF1]]
--; CHECK:       5:
-+; CHECK-NEXT:    br i1 [[_MSCMP]], label [[TMP6:%.*]], label [[TMP12:%.*]], !prof [[PROF1]]
-+; CHECK:       6:
- ; CHECK-NEXT:    call void @__msan_warning_noreturn() #[[ATTR8]]
- ; CHECK-NEXT:    unreachable
--; CHECK:       6:
-+; CHECK:       7:
- ; CHECK-NEXT:    [[X2S:%.*]] = load double, ptr [[X2PTR:%.*]], align 8
- ; CHECK-NEXT:    [[TMP7:%.*]] = ptrtoint ptr [[X2PTR]] to i64
- ; CHECK-NEXT:    [[TMP8:%.*]] = xor i64 [[TMP7]], 87960930222080
-@@ -14052,19 +14062,19 @@
- ; CHECK-NEXT:    [[X2INS:%.*]] = insertelement <8 x double> [[EXTRA_PARAM:%.*]], double [[X2S]], i32 0
- ; CHECK-NEXT:    [[_MSPROP1:%.*]] = shufflevector <8 x i64> [[_MSPROP]], <8 x i64> [[TMP5]], <8 x i32> zeroinitializer
- ; CHECK-NEXT:    [[X2:%.*]] = shufflevector <8 x double> [[X2INS]], <8 x double> [[EXTRA_PARAM]], <8 x i32> zeroinitializer
--; CHECK-NEXT:    [[TMP10:%.*]] = trunc <8 x i64> [[X0:%.*]] to <8 x i3>
-+; CHECK-NEXT:    [[TMP10:%.*]] = trunc <8 x i64> [[X0]] to <8 x i3>
- ; CHECK-NEXT:    [[TMP11:%.*]] = bitcast <8 x i64> [[TMP2]] to <8 x double>
- ; CHECK-NEXT:    [[TMP24:%.*]] = bitcast <8 x i64> [[_MSPROP1]] to <8 x double>
--; CHECK-NEXT:    [[TMP13:%.*]] = call <8 x double> @llvm.x86.avx512.vpermi2var.pd.512(<8 x double> [[TMP11]], <8 x i64> [[X0]], <8 x double> [[TMP24]])
-+; CHECK-NEXT:    [[TMP13:%.*]] = call <8 x double> @llvm.x86.avx512.vpermi2var.pd.512(<8 x double> [[TMP11]], <8 x i64> [[X4:%.*]], <8 x double> [[TMP24]])
- ; CHECK-NEXT:    [[TMP14:%.*]] = bitcast <8 x double> [[TMP13]] to <8 x i64>
- ; CHECK-NEXT:    [[TMP25:%.*]] = bitcast <8 x i3> [[TMP10]] to i24
- ; CHECK-NEXT:    [[_MSCMP2:%.*]] = icmp ne i24 [[TMP25]], 0
- ; CHECK-NEXT:    br i1 [[_MSCMP2]], label [[TMP26:%.*]], label [[TMP27:%.*]], !prof [[PROF1]]
--; CHECK:       16:
-+; CHECK:       17:
- ; CHECK-NEXT:    call void @__msan_warning_noreturn() #[[ATTR8]]
- ; CHECK-NEXT:    unreachable
--; CHECK:       17:
--; CHECK-NEXT:    [[TMP15:%.*]] = call <8 x double> @llvm.x86.avx512.vpermi2var.pd.512(<8 x double> [[X1:%.*]], <8 x i64> [[X0]], <8 x double> [[X2]])
-+; CHECK:       18:
-+; CHECK-NEXT:    [[TMP15:%.*]] = call <8 x double> @llvm.x86.avx512.vpermi2var.pd.512(<8 x double> [[X1:%.*]], <8 x i64> [[X4]], <8 x double> [[X2]])
- ; CHECK-NEXT:    [[TMP16:%.*]] = bitcast i8 [[TMP4]] to <8 x i1>
- ; CHECK-NEXT:    [[TMP17:%.*]] = bitcast i8 [[X3:%.*]] to <8 x i1>
- ; CHECK-NEXT:    [[TMP18:%.*]] = select <8 x i1> [[TMP17]], <8 x i64> [[TMP14]], <8 x i64> zeroinitializer
-@@ -14091,21 +14101,22 @@
- ; CHECK-LABEL: @test_int_x86_avx512_maskz_vpermt2var_ps_512(
- ; CHECK-NEXT:    [[TMP1:%.*]] = load <16 x i32>, ptr inttoptr (i64 add (i64 ptrtoint (ptr @__msan_param_tls to i64), i64 64) to ptr), align 8
- ; CHECK-NEXT:    [[TMP3:%.*]] = load <16 x i32>, ptr inttoptr (i64 add (i64 ptrtoint (ptr @__msan_param_tls to i64), i64 128) to ptr), align 8
-+; CHECK-NEXT:    [[X0:%.*]] = load <16 x i32>, ptr @__msan_param_tls, align 8
- ; CHECK-NEXT:    [[TMP4:%.*]] = load i16, ptr inttoptr (i64 add (i64 ptrtoint (ptr @__msan_param_tls to i64), i64 192) to ptr), align 8
- ; CHECK-NEXT:    call void @llvm.donothing()
--; CHECK-NEXT:    [[TMP7:%.*]] = trunc <16 x i32> [[X0:%.*]] to <16 x i4>
-+; CHECK-NEXT:    [[TMP7:%.*]] = trunc <16 x i32> [[X0]] to <16 x i4>
- ; CHECK-NEXT:    [[TMP5:%.*]] = bitcast <16 x i32> [[TMP1]] to <16 x float>
- ; CHECK-NEXT:    [[TMP6:%.*]] = bitcast <16 x i32> [[TMP3]] to <16 x float>
--; CHECK-NEXT:    [[TMP19:%.*]] = call <16 x float> @llvm.x86.avx512.vpermi2var.ps.512(<16 x float> [[TMP5]], <16 x i32> [[X0]], <16 x float> [[TMP6]])
-+; CHECK-NEXT:    [[TMP19:%.*]] = call <16 x float> @llvm.x86.avx512.vpermi2var.ps.512(<16 x float> [[TMP5]], <16 x i32> [[X4:%.*]], <16 x float> [[TMP6]])
- ; CHECK-NEXT:    [[TMP8:%.*]] = bitcast <16 x float> [[TMP19]] to <16 x i32>
- ; CHECK-NEXT:    [[TMP9:%.*]] = bitcast <16 x i4> [[TMP7]] to i64
- ; CHECK-NEXT:    [[_MSCMP:%.*]] = icmp ne i64 [[TMP9]], 0
- ; CHECK-NEXT:    br i1 [[_MSCMP]], label [[TMP20:%.*]], label [[TMP21:%.*]], !prof [[PROF1]]
--; CHECK:       10:
-+; CHECK:       11:
- ; CHECK-NEXT:    call void @__msan_warning_noreturn() #[[ATTR8]]
- ; CHECK-NEXT:    unreachable
--; CHECK:       11:
--; CHECK-NEXT:    [[TMP10:%.*]] = call <16 x float> @llvm.x86.avx512.vpermi2var.ps.512(<16 x float> [[X1:%.*]], <16 x i32> [[X0]], <16 x float> [[X2:%.*]])
-+; CHECK:       12:
-+; CHECK-NEXT:    [[TMP10:%.*]] = call <16 x float> @llvm.x86.avx512.vpermi2var.ps.512(<16 x float> [[X1:%.*]], <16 x i32> [[X4]], <16 x float> [[X2:%.*]])
- ; CHECK-NEXT:    [[TMP11:%.*]] = bitcast i16 [[TMP4]] to <16 x i1>
- ; CHECK-NEXT:    [[TMP12:%.*]] = bitcast i16 [[X3:%.*]] to <16 x i1>
- ; CHECK-NEXT:    [[TMP13:%.*]] = select <16 x i1> [[TMP12]], <16 x i32> [[TMP8]], <16 x i32> zeroinitializer
-@@ -14130,18 +14141,19 @@
- ; CHECK-LABEL: @test_int_x86_avx512_maskz_vpermt2var_q_512(
- ; CHECK-NEXT:    [[TMP1:%.*]] = load <8 x i64>, ptr inttoptr (i64 add (i64 ptrtoint (ptr @__msan_param_tls to i64), i64 64) to ptr), align 8
- ; CHECK-NEXT:    [[TMP3:%.*]] = load <8 x i64>, ptr inttoptr (i64 add (i64 ptrtoint (ptr @__msan_param_tls to i64), i64 128) to ptr), align 8
-+; CHECK-NEXT:    [[X0:%.*]] = load <8 x i64>, ptr @__msan_param_tls, align 8
- ; CHECK-NEXT:    [[TMP4:%.*]] = load i8, ptr inttoptr (i64 add (i64 ptrtoint (ptr @__msan_param_tls to i64), i64 192) to ptr), align 8
- ; CHECK-NEXT:    call void @llvm.donothing()
--; CHECK-NEXT:    [[TMP13:%.*]] = trunc <8 x i64> [[X0:%.*]] to <8 x i3>
--; CHECK-NEXT:    [[_MSPROP1:%.*]] = call <8 x i64> @llvm.x86.avx512.vpermi2var.q.512(<8 x i64> [[TMP1]], <8 x i64> [[X0]], <8 x i64> [[TMP3]])
-+; CHECK-NEXT:    [[TMP13:%.*]] = trunc <8 x i64> [[X0]] to <8 x i3>
-+; CHECK-NEXT:    [[_MSPROP1:%.*]] = call <8 x i64> @llvm.x86.avx512.vpermi2var.q.512(<8 x i64> [[TMP1]], <8 x i64> [[X4:%.*]], <8 x i64> [[TMP3]])
- ; CHECK-NEXT:    [[TMP14:%.*]] = bitcast <8 x i3> [[TMP13]] to i24
- ; CHECK-NEXT:    [[_MSCMP:%.*]] = icmp ne i24 [[TMP14]], 0
- ; CHECK-NEXT:    br i1 [[_MSCMP]], label [[TMP15:%.*]], label [[TMP16:%.*]], !prof [[PROF1]]
--; CHECK:       7:
-+; CHECK:       8:
- ; CHECK-NEXT:    call void @__msan_warning_noreturn() #[[ATTR8]]
- ; CHECK-NEXT:    unreachable
--; CHECK:       8:
--; CHECK-NEXT:    [[TMP5:%.*]] = call <8 x i64> @llvm.x86.avx512.vpermi2var.q.512(<8 x i64> [[X1:%.*]], <8 x i64> [[X0]], <8 x i64> [[X2:%.*]])
-+; CHECK:       9:
-+; CHECK-NEXT:    [[TMP5:%.*]] = call <8 x i64> @llvm.x86.avx512.vpermi2var.q.512(<8 x i64> [[X1:%.*]], <8 x i64> [[X4]], <8 x i64> [[X2:%.*]])
- ; CHECK-NEXT:    [[TMP6:%.*]] = bitcast i8 [[TMP4]] to <8 x i1>
- ; CHECK-NEXT:    [[TMP7:%.*]] = bitcast i8 [[X3:%.*]] to <8 x i1>
- ; CHECK-NEXT:    [[TMP8:%.*]] = select <8 x i1> [[TMP7]], <8 x i64> [[_MSPROP1]], <8 x i64> zeroinitializer
-@@ -14163,17 +14175,18 @@
- ; CHECK-LABEL: @test_int_x86_avx512_vpermt2var_d_512(
- ; CHECK-NEXT:    [[TMP1:%.*]] = load <16 x i32>, ptr inttoptr (i64 add (i64 ptrtoint (ptr @__msan_param_tls to i64), i64 64) to ptr), align 8
- ; CHECK-NEXT:    [[TMP3:%.*]] = load <16 x i32>, ptr inttoptr (i64 add (i64 ptrtoint (ptr @__msan_param_tls to i64), i64 128) to ptr), align 8
-+; CHECK-NEXT:    [[X0:%.*]] = load <16 x i32>, ptr @__msan_param_tls, align 8
- ; CHECK-NEXT:    call void @llvm.donothing()
--; CHECK-NEXT:    [[TMP8:%.*]] = trunc <16 x i32> [[X0:%.*]] to <16 x i4>
--; CHECK-NEXT:    [[_MSPROP1:%.*]] = call <16 x i32> @llvm.x86.avx512.vpermi2var.d.512(<16 x i32> [[TMP1]], <16 x i32> [[X0]], <16 x i32> [[TMP3]])
-+; CHECK-NEXT:    [[TMP8:%.*]] = trunc <16 x i32> [[X0]] to <16 x i4>
-+; CHECK-NEXT:    [[_MSPROP1:%.*]] = call <16 x i32> @llvm.x86.avx512.vpermi2var.d.512(<16 x i32> [[TMP1]], <16 x i32> [[X3:%.*]], <16 x i32> [[TMP3]])
- ; CHECK-NEXT:    [[TMP5:%.*]] = bitcast <16 x i4> [[TMP8]] to i64
- ; CHECK-NEXT:    [[_MSCMP:%.*]] = icmp ne i64 [[TMP5]], 0
--; CHECK-NEXT:    br i1 [[_MSCMP]], label [[TMP6:%.*]], label [[TMP7:%.*]], !prof [[PROF1]]
--; CHECK:       6:
-+; CHECK-NEXT:    br i1 [[_MSCMP]], label [[TMP7:%.*]], label [[TMP9:%.*]], !prof [[PROF1]]
-+; CHECK:       7:
- ; CHECK-NEXT:    call void @__msan_warning_noreturn() #[[ATTR8]]
- ; CHECK-NEXT:    unreachable
--; CHECK:       7:
--; CHECK-NEXT:    [[TMP4:%.*]] = call <16 x i32> @llvm.x86.avx512.vpermi2var.d.512(<16 x i32> [[X1:%.*]], <16 x i32> [[X0]], <16 x i32> [[X2:%.*]])
-+; CHECK:       8:
-+; CHECK-NEXT:    [[TMP4:%.*]] = call <16 x i32> @llvm.x86.avx512.vpermi2var.d.512(<16 x i32> [[X1:%.*]], <16 x i32> [[X3]], <16 x i32> [[X2:%.*]])
- ; CHECK-NEXT:    store <16 x i32> [[_MSPROP1]], ptr @__msan_retval_tls, align 8
- ; CHECK-NEXT:    ret <16 x i32> [[TMP4]]
- ;
-@@ -14186,18 +14199,19 @@
- ; CHECK-LABEL: @test_int_x86_avx512_mask_vpermt2var_d_512(
- ; CHECK-NEXT:    [[TMP1:%.*]] = load <16 x i32>, ptr inttoptr (i64 add (i64 ptrtoint (ptr @__msan_param_tls to i64), i64 64) to ptr), align 8
- ; CHECK-NEXT:    [[TMP3:%.*]] = load <16 x i32>, ptr inttoptr (i64 add (i64 ptrtoint (ptr @__msan_param_tls to i64), i64 128) to ptr), align 8
-+; CHECK-NEXT:    [[X0:%.*]] = load <16 x i32>, ptr @__msan_param_tls, align 8
- ; CHECK-NEXT:    [[TMP4:%.*]] = load i16, ptr inttoptr (i64 add (i64 ptrtoint (ptr @__msan_param_tls to i64), i64 192) to ptr), align 8
- ; CHECK-NEXT:    call void @llvm.donothing()
--; CHECK-NEXT:    [[TMP13:%.*]] = trunc <16 x i32> [[X0:%.*]] to <16 x i4>
--; CHECK-NEXT:    [[_MSPROP1:%.*]] = call <16 x i32> @llvm.x86.avx512.vpermi2var.d.512(<16 x i32> [[TMP1]], <16 x i32> [[X0]], <16 x i32> [[TMP3]])
-+; CHECK-NEXT:    [[TMP13:%.*]] = trunc <16 x i32> [[X0]] to <16 x i4>
-+; CHECK-NEXT:    [[_MSPROP1:%.*]] = call <16 x i32> @llvm.x86.avx512.vpermi2var.d.512(<16 x i32> [[TMP1]], <16 x i32> [[X4:%.*]], <16 x i32> [[TMP3]])
- ; CHECK-NEXT:    [[TMP14:%.*]] = bitcast <16 x i4> [[TMP13]] to i64
- ; CHECK-NEXT:    [[_MSCMP:%.*]] = icmp ne i64 [[TMP14]], 0
- ; CHECK-NEXT:    br i1 [[_MSCMP]], label [[TMP15:%.*]], label [[TMP16:%.*]], !prof [[PROF1]]
--; CHECK:       7:
-+; CHECK:       8:
- ; CHECK-NEXT:    call void @__msan_warning_noreturn() #[[ATTR8]]
- ; CHECK-NEXT:    unreachable
--; CHECK:       8:
--; CHECK-NEXT:    [[TMP5:%.*]] = call <16 x i32> @llvm.x86.avx512.vpermi2var.d.512(<16 x i32> [[X1:%.*]], <16 x i32> [[X0]], <16 x i32> [[X2:%.*]])
-+; CHECK:       9:
-+; CHECK-NEXT:    [[TMP5:%.*]] = call <16 x i32> @llvm.x86.avx512.vpermi2var.d.512(<16 x i32> [[X1:%.*]], <16 x i32> [[X4]], <16 x i32> [[X2:%.*]])
- ; CHECK-NEXT:    [[TMP6:%.*]] = bitcast i16 [[TMP4]] to <16 x i1>
- ; CHECK-NEXT:    [[TMP7:%.*]] = bitcast i16 [[X3:%.*]] to <16 x i1>
- ; CHECK-NEXT:    [[TMP8:%.*]] = select <16 x i1> [[TMP7]], <16 x i32> [[_MSPROP1]], <16 x i32> [[TMP1]]
-diff -ruN --strip-trailing-cr a/llvm/test/Instrumentation/MemorySanitizer/X86/avx512vl-intrinsics.ll b/llvm/test/Instrumentation/MemorySanitizer/X86/avx512vl-intrinsics.ll
---- a/llvm/test/Instrumentation/MemorySanitizer/X86/avx512vl-intrinsics.ll
-+++ b/llvm/test/Instrumentation/MemorySanitizer/X86/avx512vl-intrinsics.ll
-@@ -1902,16 +1902,17 @@
- ; CHECK-SAME: <4 x i32> [[X0:%.*]], <4 x i32> [[X1:%.*]], <4 x i32> [[X2:%.*]]) #[[ATTR0]] {
- ; CHECK-NEXT:    [[TMP6:%.*]] = load <4 x i32>, ptr @__msan_param_tls, align 8
- ; CHECK-NEXT:    [[TMP5:%.*]] = load <4 x i32>, ptr inttoptr (i64 add (i64 ptrtoint (ptr @__msan_param_tls to i64), i64 32) to ptr), align 8
-+; CHECK-NEXT:    [[TMP8:%.*]] = load <4 x i32>, ptr inttoptr (i64 add (i64 ptrtoint (ptr @__msan_param_tls to i64), i64 16) to ptr), align 8
- ; CHECK-NEXT:    call void @llvm.donothing()
--; CHECK-NEXT:    [[TMP3:%.*]] = trunc <4 x i32> [[X1]] to <4 x i2>
-+; CHECK-NEXT:    [[TMP3:%.*]] = trunc <4 x i32> [[TMP8]] to <4 x i2>
- ; CHECK-NEXT:    [[TMP4:%.*]] = call <4 x i32> @llvm.x86.avx512.vpermi2var.d.128(<4 x i32> [[TMP6]], <4 x i32> [[X1]], <4 x i32> [[TMP5]])
- ; CHECK-NEXT:    [[TMP7:%.*]] = bitcast <4 x i2> [[TMP3]] to i8
- ; CHECK-NEXT:    [[_MSCMP:%.*]] = icmp ne i8 [[TMP7]], 0
--; CHECK-NEXT:    br i1 [[_MSCMP]], label %[[BB6:.*]], label %[[BB7:.*]], !prof [[PROF1]]
--; CHECK:       [[BB6]]:
-+; CHECK-NEXT:    br i1 [[_MSCMP]], label %[[BB7:.*]], label %[[BB8:.*]], !prof [[PROF1]]
-+; CHECK:       [[BB7]]:
- ; CHECK-NEXT:    call void @__msan_warning_noreturn() #[[ATTR6]]
- ; CHECK-NEXT:    unreachable
--; CHECK:       [[BB7]]:
-+; CHECK:       [[BB8]]:
- ; CHECK-NEXT:    [[TMP1:%.*]] = call <4 x i32> @llvm.x86.avx512.vpermi2var.d.128(<4 x i32> [[X0]], <4 x i32> [[X1]], <4 x i32> [[X2]])
- ; CHECK-NEXT:    store <4 x i32> [[TMP4]], ptr @__msan_retval_tls, align 8
- ; CHECK-NEXT:    ret <4 x i32> [[TMP1]]
-@@ -1926,10 +1927,10 @@
- ; CHECK-SAME: <4 x i32> [[X0:%.*]], <4 x i32> [[X1:%.*]], <4 x i32> [[X2:%.*]], i8 [[X3:%.*]]) #[[ATTR0]] {
- ; CHECK-NEXT:    [[TMP8:%.*]] = load <4 x i32>, ptr @__msan_param_tls, align 8
- ; CHECK-NEXT:    [[TMP6:%.*]] = load <4 x i32>, ptr inttoptr (i64 add (i64 ptrtoint (ptr @__msan_param_tls to i64), i64 32) to ptr), align 8
--; CHECK-NEXT:    [[TMP11:%.*]] = load i8, ptr inttoptr (i64 add (i64 ptrtoint (ptr @__msan_param_tls to i64), i64 48) to ptr), align 8
- ; CHECK-NEXT:    [[TMP3:%.*]] = load <4 x i32>, ptr inttoptr (i64 add (i64 ptrtoint (ptr @__msan_param_tls to i64), i64 16) to ptr), align 8
-+; CHECK-NEXT:    [[TMP11:%.*]] = load i8, ptr inttoptr (i64 add (i64 ptrtoint (ptr @__msan_param_tls to i64), i64 48) to ptr), align 8
- ; CHECK-NEXT:    call void @llvm.donothing()
--; CHECK-NEXT:    [[TMP9:%.*]] = trunc <4 x i32> [[X1]] to <4 x i2>
-+; CHECK-NEXT:    [[TMP9:%.*]] = trunc <4 x i32> [[TMP3]] to <4 x i2>
- ; CHECK-NEXT:    [[TMP5:%.*]] = call <4 x i32> @llvm.x86.avx512.vpermi2var.d.128(<4 x i32> [[TMP8]], <4 x i32> [[X1]], <4 x i32> [[TMP6]])
- ; CHECK-NEXT:    [[TMP13:%.*]] = bitcast <4 x i2> [[TMP9]] to i8
- ; CHECK-NEXT:    [[_MSCMP:%.*]] = icmp ne i8 [[TMP13]], 0
-@@ -1964,16 +1965,17 @@
- ; CHECK-SAME: <4 x i32> [[X0:%.*]], <4 x i32> [[X1:%.*]], <4 x i32> [[X2:%.*]]) #[[ATTR0]] {
- ; CHECK-NEXT:    [[TMP6:%.*]] = load <4 x i32>, ptr inttoptr (i64 add (i64 ptrtoint (ptr @__msan_param_tls to i64), i64 16) to ptr), align 8
- ; CHECK-NEXT:    [[TMP5:%.*]] = load <4 x i32>, ptr inttoptr (i64 add (i64 ptrtoint (ptr @__msan_param_tls to i64), i64 32) to ptr), align 8
-+; CHECK-NEXT:    [[TMP8:%.*]] = load <4 x i32>, ptr @__msan_param_tls, align 8
- ; CHECK-NEXT:    call void @llvm.donothing()
--; CHECK-NEXT:    [[TMP3:%.*]] = trunc <4 x i32> [[X0]] to <4 x i2>
-+; CHECK-NEXT:    [[TMP3:%.*]] = trunc <4 x i32> [[TMP8]] to <4 x i2>
- ; CHECK-NEXT:    [[TMP4:%.*]] = call <4 x i32> @llvm.x86.avx512.vpermi2var.d.128(<4 x i32> [[TMP6]], <4 x i32> [[X0]], <4 x i32> [[TMP5]])
- ; CHECK-NEXT:    [[TMP7:%.*]] = bitcast <4 x i2> [[TMP3]] to i8
- ; CHECK-NEXT:    [[_MSCMP:%.*]] = icmp ne i8 [[TMP7]], 0
--; CHECK-NEXT:    br i1 [[_MSCMP]], label %[[BB6:.*]], label %[[BB7:.*]], !prof [[PROF1]]
--; CHECK:       [[BB6]]:
-+; CHECK-NEXT:    br i1 [[_MSCMP]], label %[[BB7:.*]], label %[[BB8:.*]], !prof [[PROF1]]
-+; CHECK:       [[BB7]]:
- ; CHECK-NEXT:    call void @__msan_warning_noreturn() #[[ATTR6]]
- ; CHECK-NEXT:    unreachable
--; CHECK:       [[BB7]]:
-+; CHECK:       [[BB8]]:
- ; CHECK-NEXT:    [[TMP1:%.*]] = call <4 x i32> @llvm.x86.avx512.vpermi2var.d.128(<4 x i32> [[X1]], <4 x i32> [[X0]], <4 x i32> [[X2]])
- ; CHECK-NEXT:    store <4 x i32> [[TMP4]], ptr @__msan_retval_tls, align 8
- ; CHECK-NEXT:    ret <4 x i32> [[TMP1]]
-@@ -1988,17 +1990,18 @@
- ; CHECK-SAME: <4 x i32> [[X0:%.*]], <4 x i32> [[X1:%.*]], <4 x i32> [[X2:%.*]], i8 [[X3:%.*]]) #[[ATTR0]] {
- ; CHECK-NEXT:    [[TMP8:%.*]] = load <4 x i32>, ptr inttoptr (i64 add (i64 ptrtoint (ptr @__msan_param_tls to i64), i64 16) to ptr), align 8
- ; CHECK-NEXT:    [[TMP6:%.*]] = load <4 x i32>, ptr inttoptr (i64 add (i64 ptrtoint (ptr @__msan_param_tls to i64), i64 32) to ptr), align 8
-+; CHECK-NEXT:    [[TMP3:%.*]] = load <4 x i32>, ptr @__msan_param_tls, align 8
- ; CHECK-NEXT:    [[TMP11:%.*]] = load i8, ptr inttoptr (i64 add (i64 ptrtoint (ptr @__msan_param_tls to i64), i64 48) to ptr), align 8
- ; CHECK-NEXT:    call void @llvm.donothing()
--; CHECK-NEXT:    [[TMP9:%.*]] = trunc <4 x i32> [[X0]] to <4 x i2>
-+; CHECK-NEXT:    [[TMP9:%.*]] = trunc <4 x i32> [[TMP3]] to <4 x i2>
- ; CHECK-NEXT:    [[TMP5:%.*]] = call <4 x i32> @llvm.x86.avx512.vpermi2var.d.128(<4 x i32> [[TMP8]], <4 x i32> [[X0]], <4 x i32> [[TMP6]])
- ; CHECK-NEXT:    [[TMP13:%.*]] = bitcast <4 x i2> [[TMP9]] to i8
- ; CHECK-NEXT:    [[_MSCMP:%.*]] = icmp ne i8 [[TMP13]], 0
--; CHECK-NEXT:    br i1 [[_MSCMP]], label %[[BB7:.*]], label %[[BB8:.*]], !prof [[PROF1]]
--; CHECK:       [[BB7]]:
-+; CHECK-NEXT:    br i1 [[_MSCMP]], label %[[BB8:.*]], label %[[BB9:.*]], !prof [[PROF1]]
-+; CHECK:       [[BB8]]:
- ; CHECK-NEXT:    call void @__msan_warning_noreturn() #[[ATTR6]]
- ; CHECK-NEXT:    unreachable
--; CHECK:       [[BB8]]:
-+; CHECK:       [[BB9]]:
- ; CHECK-NEXT:    [[TMP1:%.*]] = call <4 x i32> @llvm.x86.avx512.vpermi2var.d.128(<4 x i32> [[X1]], <4 x i32> [[X0]], <4 x i32> [[X2]])
- ; CHECK-NEXT:    [[TMP10:%.*]] = bitcast i8 [[TMP11]] to <8 x i1>
- ; CHECK-NEXT:    [[TMP2:%.*]] = bitcast i8 [[X3]] to <8 x i1>
-@@ -2026,17 +2029,18 @@
- ; CHECK-SAME: <4 x i32> [[X0:%.*]], <4 x i32> [[X1:%.*]], <4 x i32> [[X2:%.*]], i8 [[X3:%.*]]) #[[ATTR0]] {
- ; CHECK-NEXT:    [[TMP8:%.*]] = load <4 x i32>, ptr inttoptr (i64 add (i64 ptrtoint (ptr @__msan_param_tls to i64), i64 16) to ptr), align 8
- ; CHECK-NEXT:    [[TMP9:%.*]] = load <4 x i32>, ptr inttoptr (i64 add (i64 ptrtoint (ptr @__msan_param_tls to i64), i64 32) to ptr), align 8
-+; CHECK-NEXT:    [[TMP3:%.*]] = load <4 x i32>, ptr @__msan_param_tls, align 8
- ; CHECK-NEXT:    [[TMP11:%.*]] = load i8, ptr inttoptr (i64 add (i64 ptrtoint (ptr @__msan_param_tls to i64), i64 48) to ptr), align 8
- ; CHECK-NEXT:    call void @llvm.donothing()
--; CHECK-NEXT:    [[TMP14:%.*]] = trunc <4 x i32> [[X0]] to <4 x i2>
-+; CHECK-NEXT:    [[TMP14:%.*]] = trunc <4 x i32> [[TMP3]] to <4 x i2>
- ; CHECK-NEXT:    [[TMP13:%.*]] = call <4 x i32> @llvm.x86.avx512.vpermi2var.d.128(<4 x i32> [[TMP8]], <4 x i32> [[X0]], <4 x i32> [[TMP9]])
- ; CHECK-NEXT:    [[TMP15:%.*]] = bitcast <4 x i2> [[TMP14]] to i8
- ; CHECK-NEXT:    [[_MSCMP:%.*]] = icmp ne i8 [[TMP15]], 0
--; CHECK-NEXT:    br i1 [[_MSCMP]], label %[[BB7:.*]], label %[[BB8:.*]], !prof [[PROF1]]
--; CHECK:       [[BB7]]:
-+; CHECK-NEXT:    br i1 [[_MSCMP]], label %[[BB8:.*]], label %[[BB9:.*]], !prof [[PROF1]]
-+; CHECK:       [[BB8]]:
- ; CHECK-NEXT:    call void @__msan_warning_noreturn() #[[ATTR6]]
- ; CHECK-NEXT:    unreachable
--; CHECK:       [[BB8]]:
-+; CHECK:       [[BB9]]:
- ; CHECK-NEXT:    [[TMP1:%.*]] = call <4 x i32> @llvm.x86.avx512.vpermi2var.d.128(<4 x i32> [[X1]], <4 x i32> [[X0]], <4 x i32> [[X2]])
- ; CHECK-NEXT:    [[TMP10:%.*]] = bitcast i8 [[TMP11]] to <8 x i1>
- ; CHECK-NEXT:    [[TMP2:%.*]] = bitcast i8 [[X3]] to <8 x i1>
-@@ -2065,16 +2069,17 @@
- ; CHECK-SAME: <8 x i32> [[X0:%.*]], <8 x i32> [[X1:%.*]], <8 x i32> [[X2:%.*]]) #[[ATTR0]] {
- ; CHECK-NEXT:    [[TMP6:%.*]] = load <8 x i32>, ptr @__msan_param_tls, align 8
- ; CHECK-NEXT:    [[TMP5:%.*]] = load <8 x i32>, ptr inttoptr (i64 add (i64 ptrtoint (ptr @__msan_param_tls to i64), i64 64) to ptr), align 8
-+; CHECK-NEXT:    [[TMP8:%.*]] = load <8 x i32>, ptr inttoptr (i64 add (i64 ptrtoint (ptr @__msan_param_tls to i64), i64 32) to ptr), align 8
- ; CHECK-NEXT:    call void @llvm.donothing()
--; CHECK-NEXT:    [[TMP3:%.*]] = trunc <8 x i32> [[X1]] to <8 x i3>
-+; CHECK-NEXT:    [[TMP3:%.*]] = trunc <8 x i32> [[TMP8]] to <8 x i3>
- ; CHECK-NEXT:    [[TMP4:%.*]] = call <8 x i32> @llvm.x86.avx512.vpermi2var.d.256(<8 x i32> [[TMP6]], <8 x i32> [[X1]], <8 x i32> [[TMP5]])
- ; CHECK-NEXT:    [[TMP7:%.*]] = bitcast <8 x i3> [[TMP3]] to i24
- ; CHECK-NEXT:    [[_MSCMP:%.*]] = icmp ne i24 [[TMP7]], 0
--; CHECK-NEXT:    br i1 [[_MSCMP]], label %[[BB6:.*]], label %[[BB7:.*]], !prof [[PROF1]]
--; CHECK:       [[BB6]]:
-+; CHECK-NEXT:    br i1 [[_MSCMP]], label %[[BB7:.*]], label %[[BB8:.*]], !prof [[PROF1]]
-+; CHECK:       [[BB7]]:
- ; CHECK-NEXT:    call void @__msan_warning_noreturn() #[[ATTR6]]
- ; CHECK-NEXT:    unreachable
--; CHECK:       [[BB7]]:
-+; CHECK:       [[BB8]]:
- ; CHECK-NEXT:    [[TMP1:%.*]] = call <8 x i32> @llvm.x86.avx512.vpermi2var.d.256(<8 x i32> [[X0]], <8 x i32> [[X1]], <8 x i32> [[X2]])
- ; CHECK-NEXT:    store <8 x i32> [[TMP4]], ptr @__msan_retval_tls, align 8
- ; CHECK-NEXT:    ret <8 x i32> [[TMP1]]
-@@ -2089,10 +2094,10 @@
- ; CHECK-SAME: <8 x i32> [[X0:%.*]], <8 x i32> [[X1:%.*]], <8 x i32> [[X2:%.*]], i8 [[X3:%.*]]) #[[ATTR0]] {
- ; CHECK-NEXT:    [[TMP8:%.*]] = load <8 x i32>, ptr @__msan_param_tls, align 8
- ; CHECK-NEXT:    [[TMP6:%.*]] = load <8 x i32>, ptr inttoptr (i64 add (i64 ptrtoint (ptr @__msan_param_tls to i64), i64 64) to ptr), align 8
--; CHECK-NEXT:    [[TMP11:%.*]] = load i8, ptr inttoptr (i64 add (i64 ptrtoint (ptr @__msan_param_tls to i64), i64 96) to ptr), align 8
- ; CHECK-NEXT:    [[TMP3:%.*]] = load <8 x i32>, ptr inttoptr (i64 add (i64 ptrtoint (ptr @__msan_param_tls to i64), i64 32) to ptr), align 8
-+; CHECK-NEXT:    [[TMP11:%.*]] = load i8, ptr inttoptr (i64 add (i64 ptrtoint (ptr @__msan_param_tls to i64), i64 96) to ptr), align 8
- ; CHECK-NEXT:    call void @llvm.donothing()
--; CHECK-NEXT:    [[TMP9:%.*]] = trunc <8 x i32> [[X1]] to <8 x i3>
-+; CHECK-NEXT:    [[TMP9:%.*]] = trunc <8 x i32> [[TMP3]] to <8 x i3>
- ; CHECK-NEXT:    [[TMP5:%.*]] = call <8 x i32> @llvm.x86.avx512.vpermi2var.d.256(<8 x i32> [[TMP8]], <8 x i32> [[X1]], <8 x i32> [[TMP6]])
- ; CHECK-NEXT:    [[TMP13:%.*]] = bitcast <8 x i3> [[TMP9]] to i24
- ; CHECK-NEXT:    [[_MSCMP:%.*]] = icmp ne i24 [[TMP13]], 0
-@@ -2124,16 +2129,17 @@
- ; CHECK-SAME: <8 x i32> [[X0:%.*]], <8 x i32> [[X1:%.*]], <8 x i32> [[X2:%.*]]) #[[ATTR0]] {
- ; CHECK-NEXT:    [[TMP6:%.*]] = load <8 x i32>, ptr inttoptr (i64 add (i64 ptrtoint (ptr @__msan_param_tls to i64), i64 32) to ptr), align 8
- ; CHECK-NEXT:    [[TMP5:%.*]] = load <8 x i32>, ptr inttoptr (i64 add (i64 ptrtoint (ptr @__msan_param_tls to i64), i64 64) to ptr), align 8
-+; CHECK-NEXT:    [[TMP8:%.*]] = load <8 x i32>, ptr @__msan_param_tls, align 8
- ; CHECK-NEXT:    call void @llvm.donothing()
--; CHECK-NEXT:    [[TMP3:%.*]] = trunc <8 x i32> [[X0]] to <8 x i3>
-+; CHECK-NEXT:    [[TMP3:%.*]] = trunc <8 x i32> [[TMP8]] to <8 x i3>
- ; CHECK-NEXT:    [[TMP4:%.*]] = call <8 x i32> @llvm.x86.avx512.vpermi2var.d.256(<8 x i32> [[TMP6]], <8 x i32> [[X0]], <8 x i32> [[TMP5]])
- ; CHECK-NEXT:    [[TMP7:%.*]] = bitcast <8 x i3> [[TMP3]] to i24
- ; CHECK-NEXT:    [[_MSCMP:%.*]] = icmp ne i24 [[TMP7]], 0
--; CHECK-NEXT:    br i1 [[_MSCMP]], label %[[BB6:.*]], label %[[BB7:.*]], !prof [[PROF1]]
--; CHECK:       [[BB6]]:
-+; CHECK-NEXT:    br i1 [[_MSCMP]], label %[[BB7:.*]], label %[[BB8:.*]], !prof [[PROF1]]
-+; CHECK:       [[BB7]]:
- ; CHECK-NEXT:    call void @__msan_warning_noreturn() #[[ATTR6]]
- ; CHECK-NEXT:    unreachable
--; CHECK:       [[BB7]]:
-+; CHECK:       [[BB8]]:
- ; CHECK-NEXT:    [[TMP1:%.*]] = call <8 x i32> @llvm.x86.avx512.vpermi2var.d.256(<8 x i32> [[X1]], <8 x i32> [[X0]], <8 x i32> [[X2]])
- ; CHECK-NEXT:    store <8 x i32> [[TMP4]], ptr @__msan_retval_tls, align 8
- ; CHECK-NEXT:    ret <8 x i32> [[TMP1]]
-@@ -2148,17 +2154,18 @@
- ; CHECK-SAME: <8 x i32> [[X0:%.*]], <8 x i32> [[X1:%.*]], <8 x i32> [[X2:%.*]], i8 [[X3:%.*]]) #[[ATTR0]] {
- ; CHECK-NEXT:    [[TMP8:%.*]] = load <8 x i32>, ptr inttoptr (i64 add (i64 ptrtoint (ptr @__msan_param_tls to i64), i64 32) to ptr), align 8
- ; CHECK-NEXT:    [[TMP6:%.*]] = load <8 x i32>, ptr inttoptr (i64 add (i64 ptrtoint (ptr @__msan_param_tls to i64), i64 64) to ptr), align 8
-+; CHECK-NEXT:    [[TMP3:%.*]] = load <8 x i32>, ptr @__msan_param_tls, align 8
- ; CHECK-NEXT:    [[TMP11:%.*]] = load i8, ptr inttoptr (i64 add (i64 ptrtoint (ptr @__msan_param_tls to i64), i64 96) to ptr), align 8
- ; CHECK-NEXT:    call void @llvm.donothing()
--; CHECK-NEXT:    [[TMP9:%.*]] = trunc <8 x i32> [[X0]] to <8 x i3>
-+; CHECK-NEXT:    [[TMP9:%.*]] = trunc <8 x i32> [[TMP3]] to <8 x i3>
- ; CHECK-NEXT:    [[TMP5:%.*]] = call <8 x i32> @llvm.x86.avx512.vpermi2var.d.256(<8 x i32> [[TMP8]], <8 x i32> [[X0]], <8 x i32> [[TMP6]])
- ; CHECK-NEXT:    [[TMP13:%.*]] = bitcast <8 x i3> [[TMP9]] to i24
- ; CHECK-NEXT:    [[_MSCMP:%.*]] = icmp ne i24 [[TMP13]], 0
--; CHECK-NEXT:    br i1 [[_MSCMP]], label %[[BB7:.*]], label %[[BB8:.*]], !prof [[PROF1]]
--; CHECK:       [[BB7]]:
-+; CHECK-NEXT:    br i1 [[_MSCMP]], label %[[BB8:.*]], label %[[BB9:.*]], !prof [[PROF1]]
-+; CHECK:       [[BB8]]:
- ; CHECK-NEXT:    call void @__msan_warning_noreturn() #[[ATTR6]]
- ; CHECK-NEXT:    unreachable
--; CHECK:       [[BB8]]:
-+; CHECK:       [[BB9]]:
- ; CHECK-NEXT:    [[TMP1:%.*]] = call <8 x i32> @llvm.x86.avx512.vpermi2var.d.256(<8 x i32> [[X1]], <8 x i32> [[X0]], <8 x i32> [[X2]])
- ; CHECK-NEXT:    [[TMP10:%.*]] = bitcast i8 [[TMP11]] to <8 x i1>
- ; CHECK-NEXT:    [[TMP2:%.*]] = bitcast i8 [[X3]] to <8 x i1>
-@@ -2183,17 +2190,18 @@
- ; CHECK-SAME: <8 x i32> [[X0:%.*]], <8 x i32> [[X1:%.*]], <8 x i32> [[X2:%.*]], i8 [[X3:%.*]]) #[[ATTR0]] {
- ; CHECK-NEXT:    [[TMP8:%.*]] = load <8 x i32>, ptr inttoptr (i64 add (i64 ptrtoint (ptr @__msan_param_tls to i64), i64 32) to ptr), align 8
- ; CHECK-NEXT:    [[TMP9:%.*]] = load <8 x i32>, ptr inttoptr (i64 add (i64 ptrtoint (ptr @__msan_param_tls to i64), i64 64) to ptr), align 8
-+; CHECK-NEXT:    [[TMP3:%.*]] = load <8 x i32>, ptr @__msan_param_tls, align 8
- ; CHECK-NEXT:    [[TMP11:%.*]] = load i8, ptr inttoptr (i64 add (i64 ptrtoint (ptr @__msan_param_tls to i64), i64 96) to ptr), align 8
- ; CHECK-NEXT:    call void @llvm.donothing()
--; CHECK-NEXT:    [[TMP14:%.*]] = trunc <8 x i32> [[X0]] to <8 x i3>
-+; CHECK-NEXT:    [[TMP14:%.*]] = trunc <8 x i32> [[TMP3]] to <8 x i3>
- ; CHECK-NEXT:    [[TMP13:%.*]] = call <8 x i32> @llvm.x86.avx512.vpermi2var.d.256(<8 x i32> [[TMP8]], <8 x i32> [[X0]], <8 x i32> [[TMP9]])
- ; CHECK-NEXT:    [[TMP15:%.*]] = bitcast <8 x i3> [[TMP14]] to i24
- ; CHECK-NEXT:    [[_MSCMP:%.*]] = icmp ne i24 [[TMP15]], 0
--; CHECK-NEXT:    br i1 [[_MSCMP]], label %[[BB7:.*]], label %[[BB8:.*]], !prof [[PROF1]]
--; CHECK:       [[BB7]]:
-+; CHECK-NEXT:    br i1 [[_MSCMP]], label %[[BB8:.*]], label %[[BB9:.*]], !prof [[PROF1]]
-+; CHECK:       [[BB8]]:
- ; CHECK-NEXT:    call void @__msan_warning_noreturn() #[[ATTR6]]
- ; CHECK-NEXT:    unreachable
--; CHECK:       [[BB8]]:
-+; CHECK:       [[BB9]]:
- ; CHECK-NEXT:    [[TMP1:%.*]] = call <8 x i32> @llvm.x86.avx512.vpermi2var.d.256(<8 x i32> [[X1]], <8 x i32> [[X0]], <8 x i32> [[X2]])
- ; CHECK-NEXT:    [[TMP10:%.*]] = bitcast i8 [[TMP11]] to <8 x i1>
- ; CHECK-NEXT:    [[TMP2:%.*]] = bitcast i8 [[X3]] to <8 x i1>
-@@ -2219,19 +2227,20 @@
- ; CHECK-SAME: <2 x double> [[X0:%.*]], <2 x i64> [[X1:%.*]], <2 x double> [[X2:%.*]]) #[[ATTR0]] {
- ; CHECK-NEXT:    [[TMP9:%.*]] = load <2 x i64>, ptr @__msan_param_tls, align 8
- ; CHECK-NEXT:    [[TMP4:%.*]] = load <2 x i64>, ptr inttoptr (i64 add (i64 ptrtoint (ptr @__msan_param_tls to i64), i64 32) to ptr), align 8
-+; CHECK-NEXT:    [[TMP6:%.*]] = load <2 x i64>, ptr inttoptr (i64 add (i64 ptrtoint (ptr @__msan_param_tls to i64), i64 16) to ptr), align 8
- ; CHECK-NEXT:    call void @llvm.donothing()
--; CHECK-NEXT:    [[TMP3:%.*]] = trunc <2 x i64> [[X1]] to <2 x i1>
-+; CHECK-NEXT:    [[TMP3:%.*]] = trunc <2 x i64> [[TMP6]] to <2 x i1>
- ; CHECK-NEXT:    [[TMP8:%.*]] = bitcast <2 x i64> [[TMP9]] to <2 x double>
- ; CHECK-NEXT:    [[TMP5:%.*]] = bitcast <2 x i64> [[TMP4]] to <2 x double>
- ; CHECK-NEXT:    [[TMP10:%.*]] = call <2 x double> @llvm.x86.avx512.vpermi2var.pd.128(<2 x double> [[TMP8]], <2 x i64> [[X1]], <2 x double> [[TMP5]])
- ; CHECK-NEXT:    [[TMP7:%.*]] = bitcast <2 x double> [[TMP10]] to <2 x i64>
- ; CHECK-NEXT:    [[TMP11:%.*]] = bitcast <2 x i1> [[TMP3]] to i2
- ; CHECK-NEXT:    [[_MSCMP:%.*]] = icmp ne i2 [[TMP11]], 0
--; CHECK-NEXT:    br i1 [[_MSCMP]], label %[[BB9:.*]], label %[[BB10:.*]], !prof [[PROF1]]
--; CHECK:       [[BB9]]:
-+; CHECK-NEXT:    br i1 [[_MSCMP]], label %[[BB10:.*]], label %[[BB11:.*]], !prof [[PROF1]]
-+; CHECK:       [[BB10]]:
- ; CHECK-NEXT:    call void @__msan_warning_noreturn() #[[ATTR6]]
- ; CHECK-NEXT:    unreachable
--; CHECK:       [[BB10]]:
-+; CHECK:       [[BB11]]:
- ; CHECK-NEXT:    [[TMP1:%.*]] = call <2 x double> @llvm.x86.avx512.vpermi2var.pd.128(<2 x double> [[X0]], <2 x i64> [[X1]], <2 x double> [[X2]])
- ; CHECK-NEXT:    store <2 x i64> [[TMP7]], ptr @__msan_retval_tls, align 8
- ; CHECK-NEXT:    ret <2 x double> [[TMP1]]
-@@ -2249,7 +2258,7 @@
- ; CHECK-NEXT:    [[TMP13:%.*]] = load <2 x i64>, ptr inttoptr (i64 add (i64 ptrtoint (ptr @__msan_param_tls to i64), i64 16) to ptr), align 8
- ; CHECK-NEXT:    [[TMP4:%.*]] = load i8, ptr inttoptr (i64 add (i64 ptrtoint (ptr @__msan_param_tls to i64), i64 48) to ptr), align 8
- ; CHECK-NEXT:    call void @llvm.donothing()
--; CHECK-NEXT:    [[TMP15:%.*]] = trunc <2 x i64> [[X1]] to <2 x i1>
-+; CHECK-NEXT:    [[TMP15:%.*]] = trunc <2 x i64> [[TMP13]] to <2 x i1>
- ; CHECK-NEXT:    [[TMP9:%.*]] = bitcast <2 x i64> [[TMP11]] to <2 x double>
- ; CHECK-NEXT:    [[TMP12:%.*]] = bitcast <2 x i64> [[TMP8]] to <2 x double>
- ; CHECK-NEXT:    [[TMP17:%.*]] = call <2 x double> @llvm.x86.avx512.vpermi2var.pd.128(<2 x double> [[TMP9]], <2 x i64> [[X1]], <2 x double> [[TMP12]])
-@@ -2293,19 +2302,20 @@
- ; CHECK-SAME: <4 x double> [[X0:%.*]], <4 x i64> [[X1:%.*]], <4 x double> [[X2:%.*]]) #[[ATTR0]] {
- ; CHECK-NEXT:    [[TMP9:%.*]] = load <4 x i64>, ptr @__msan_param_tls, align 8
- ; CHECK-NEXT:    [[TMP4:%.*]] = load <4 x i64>, ptr inttoptr (i64 add (i64 ptrtoint (ptr @__msan_param_tls to i64), i64 64) to ptr), align 8
-+; CHECK-NEXT:    [[TMP6:%.*]] = load <4 x i64>, ptr inttoptr (i64 add (i64 ptrtoint (ptr @__msan_param_tls to i64), i64 32) to ptr), align 8
- ; CHECK-NEXT:    call void @llvm.donothing()
--; CHECK-NEXT:    [[TMP3:%.*]] = trunc <4 x i64> [[X1]] to <4 x i2>
-+; CHECK-NEXT:    [[TMP3:%.*]] = trunc <4 x i64> [[TMP6]] to <4 x i2>
- ; CHECK-NEXT:    [[TMP8:%.*]] = bitcast <4 x i64> [[TMP9]] to <4 x double>
- ; CHECK-NEXT:    [[TMP5:%.*]] = bitcast <4 x i64> [[TMP4]] to <4 x double>
- ; CHECK-NEXT:    [[TMP10:%.*]] = call <4 x double> @llvm.x86.avx512.vpermi2var.pd.256(<4 x double> [[TMP8]], <4 x i64> [[X1]], <4 x double> [[TMP5]])
- ; CHECK-NEXT:    [[TMP7:%.*]] = bitcast <4 x double> [[TMP10]] to <4 x i64>
- ; CHECK-NEXT:    [[TMP11:%.*]] = bitcast <4 x i2> [[TMP3]] to i8
- ; CHECK-NEXT:    [[_MSCMP:%.*]] = icmp ne i8 [[TMP11]], 0
--; CHECK-NEXT:    br i1 [[_MSCMP]], label %[[BB9:.*]], label %[[BB10:.*]], !prof [[PROF1]]
--; CHECK:       [[BB9]]:
-+; CHECK-NEXT:    br i1 [[_MSCMP]], label %[[BB10:.*]], label %[[BB11:.*]], !prof [[PROF1]]
-+; CHECK:       [[BB10]]:
- ; CHECK-NEXT:    call void @__msan_warning_noreturn() #[[ATTR6]]
- ; CHECK-NEXT:    unreachable
--; CHECK:       [[BB10]]:
-+; CHECK:       [[BB11]]:
- ; CHECK-NEXT:    [[TMP1:%.*]] = call <4 x double> @llvm.x86.avx512.vpermi2var.pd.256(<4 x double> [[X0]], <4 x i64> [[X1]], <4 x double> [[X2]])
- ; CHECK-NEXT:    store <4 x i64> [[TMP7]], ptr @__msan_retval_tls, align 8
- ; CHECK-NEXT:    ret <4 x double> [[TMP1]]
-@@ -2323,7 +2333,7 @@
- ; CHECK-NEXT:    [[TMP13:%.*]] = load <4 x i64>, ptr inttoptr (i64 add (i64 ptrtoint (ptr @__msan_param_tls to i64), i64 32) to ptr), align 8
- ; CHECK-NEXT:    [[TMP4:%.*]] = load i8, ptr inttoptr (i64 add (i64 ptrtoint (ptr @__msan_param_tls to i64), i64 96) to ptr), align 8
- ; CHECK-NEXT:    call void @llvm.donothing()
--; CHECK-NEXT:    [[TMP15:%.*]] = trunc <4 x i64> [[X1]] to <4 x i2>
-+; CHECK-NEXT:    [[TMP15:%.*]] = trunc <4 x i64> [[TMP13]] to <4 x i2>
- ; CHECK-NEXT:    [[TMP9:%.*]] = bitcast <4 x i64> [[TMP11]] to <4 x double>
- ; CHECK-NEXT:    [[TMP12:%.*]] = bitcast <4 x i64> [[TMP8]] to <4 x double>
- ; CHECK-NEXT:    [[TMP17:%.*]] = call <4 x double> @llvm.x86.avx512.vpermi2var.pd.256(<4 x double> [[TMP9]], <4 x i64> [[X1]], <4 x double> [[TMP12]])
-@@ -2367,19 +2377,20 @@
- ; CHECK-SAME: <4 x float> [[X0:%.*]], <4 x i32> [[X1:%.*]], <4 x float> [[X2:%.*]]) #[[ATTR0]] {
- ; CHECK-NEXT:    [[TMP9:%.*]] = load <4 x i32>, ptr @__msan_param_tls, align 8
- ; CHECK-NEXT:    [[TMP4:%.*]] = load <4 x i32>, ptr inttoptr (i64 add (i64 ptrtoint (ptr @__msan_param_tls to i64), i64 32) to ptr), align 8
-+; CHECK-NEXT:    [[TMP6:%.*]] = load <4 x i32>, ptr inttoptr (i64 add (i64 ptrtoint (ptr @__msan_param_tls to i64), i64 16) to ptr), align 8
- ; CHECK-NEXT:    call void @llvm.donothing()
--; CHECK-NEXT:    [[TMP3:%.*]] = trunc <4 x i32> [[X1]] to <4 x i2>
-+; CHECK-NEXT:    [[TMP3:%.*]] = trunc <4 x i32> [[TMP6]] to <4 x i2>
- ; CHECK-NEXT:    [[TMP8:%.*]] = bitcast <4 x i32> [[TMP9]] to <4 x float>
- ; CHECK-NEXT:    [[TMP5:%.*]] = bitcast <4 x i32> [[TMP4]] to <4 x float>
- ; CHECK-NEXT:    [[TMP10:%.*]] = call <4 x float> @llvm.x86.avx512.vpermi2var.ps.128(<4 x float> [[TMP8]], <4 x i32> [[X1]], <4 x float> [[TMP5]])
- ; CHECK-NEXT:    [[TMP7:%.*]] = bitcast <4 x float> [[TMP10]] to <4 x i32>
- ; CHECK-NEXT:    [[TMP11:%.*]] = bitcast <4 x i2> [[TMP3]] to i8
- ; CHECK-NEXT:    [[_MSCMP:%.*]] = icmp ne i8 [[TMP11]], 0
--; CHECK-NEXT:    br i1 [[_MSCMP]], label %[[BB9:.*]], label %[[BB10:.*]], !prof [[PROF1]]
--; CHECK:       [[BB9]]:
-+; CHECK-NEXT:    br i1 [[_MSCMP]], label %[[BB10:.*]], label %[[BB11:.*]], !prof [[PROF1]]
-+; CHECK:       [[BB10]]:
- ; CHECK-NEXT:    call void @__msan_warning_noreturn() #[[ATTR6]]
- ; CHECK-NEXT:    unreachable
--; CHECK:       [[BB10]]:
-+; CHECK:       [[BB11]]:
- ; CHECK-NEXT:    [[TMP1:%.*]] = call <4 x float> @llvm.x86.avx512.vpermi2var.ps.128(<4 x float> [[X0]], <4 x i32> [[X1]], <4 x float> [[X2]])
- ; CHECK-NEXT:    store <4 x i32> [[TMP7]], ptr @__msan_retval_tls, align 8
- ; CHECK-NEXT:    ret <4 x float> [[TMP1]]
-@@ -2397,7 +2408,7 @@
- ; CHECK-NEXT:    [[TMP13:%.*]] = load <4 x i32>, ptr inttoptr (i64 add (i64 ptrtoint (ptr @__msan_param_tls to i64), i64 16) to ptr), align 8
- ; CHECK-NEXT:    [[TMP4:%.*]] = load i8, ptr inttoptr (i64 add (i64 ptrtoint (ptr @__msan_param_tls to i64), i64 48) to ptr), align 8
- ; CHECK-NEXT:    call void @llvm.donothing()
--; CHECK-NEXT:    [[TMP15:%.*]] = trunc <4 x i32> [[X1]] to <4 x i2>
-+; CHECK-NEXT:    [[TMP15:%.*]] = trunc <4 x i32> [[TMP13]] to <4 x i2>
- ; CHECK-NEXT:    [[TMP9:%.*]] = bitcast <4 x i32> [[TMP11]] to <4 x float>
- ; CHECK-NEXT:    [[TMP12:%.*]] = bitcast <4 x i32> [[TMP8]] to <4 x float>
- ; CHECK-NEXT:    [[TMP17:%.*]] = call <4 x float> @llvm.x86.avx512.vpermi2var.ps.128(<4 x float> [[TMP9]], <4 x i32> [[X1]], <4 x float> [[TMP12]])
-@@ -2445,7 +2456,7 @@
- ; CHECK-NEXT:    call void @llvm.donothing()
- ; CHECK-NEXT:    [[TMP14:%.*]] = bitcast <2 x i64> [[TMP11]] to <4 x i32>
- ; CHECK-NEXT:    [[X1CAST:%.*]] = bitcast <2 x i64> [[X1]] to <4 x i32>
--; CHECK-NEXT:    [[TMP8:%.*]] = trunc <4 x i32> [[X1CAST]] to <4 x i2>
-+; CHECK-NEXT:    [[TMP8:%.*]] = trunc <4 x i32> [[TMP14]] to <4 x i2>
- ; CHECK-NEXT:    [[TMP16:%.*]] = bitcast <4 x i32> [[TMP12]] to <4 x float>
- ; CHECK-NEXT:    [[TMP18:%.*]] = bitcast <4 x i32> [[TMP13]] to <4 x float>
- ; CHECK-NEXT:    [[TMP19:%.*]] = call <4 x float> @llvm.x86.avx512.vpermi2var.ps.128(<4 x float> [[TMP16]], <4 x i32> [[X1CAST]], <4 x float> [[TMP18]])
-@@ -2490,19 +2501,20 @@
- ; CHECK-SAME: <8 x float> [[X0:%.*]], <8 x i32> [[X1:%.*]], <8 x float> [[X2:%.*]]) #[[ATTR0]] {
- ; CHECK-NEXT:    [[TMP9:%.*]] = load <8 x i32>, ptr @__msan_param_tls, align 8
- ; CHECK-NEXT:    [[TMP4:%.*]] = load <8 x i32>, ptr inttoptr (i64 add (i64 ptrtoint (ptr @__msan_param_tls to i64), i64 64) to ptr), align 8
-+; CHECK-NEXT:    [[TMP6:%.*]] = load <8 x i32>, ptr inttoptr (i64 add (i64 ptrtoint (ptr @__msan_param_tls to i64), i64 32) to ptr), align 8
- ; CHECK-NEXT:    call void @llvm.donothing()
--; CHECK-NEXT:    [[TMP3:%.*]] = trunc <8 x i32> [[X1]] to <8 x i3>
-+; CHECK-NEXT:    [[TMP3:%.*]] = trunc <8 x i32> [[TMP6]] to <8 x i3>
- ; CHECK-NEXT:    [[TMP8:%.*]] = bitcast <8 x i32> [[TMP9]] to <8 x float>
- ; CHECK-NEXT:    [[TMP5:%.*]] = bitcast <8 x i32> [[TMP4]] to <8 x float>
- ; CHECK-NEXT:    [[TMP10:%.*]] = call <8 x float> @llvm.x86.avx512.vpermi2var.ps.256(<8 x float> [[TMP8]], <8 x i32> [[X1]], <8 x float> [[TMP5]])
- ; CHECK-NEXT:    [[TMP7:%.*]] = bitcast <8 x float> [[TMP10]] to <8 x i32>
- ; CHECK-NEXT:    [[TMP11:%.*]] = bitcast <8 x i3> [[TMP3]] to i24
- ; CHECK-NEXT:    [[_MSCMP:%.*]] = icmp ne i24 [[TMP11]], 0
--; CHECK-NEXT:    br i1 [[_MSCMP]], label %[[BB9:.*]], label %[[BB10:.*]], !prof [[PROF1]]
--; CHECK:       [[BB9]]:
-+; CHECK-NEXT:    br i1 [[_MSCMP]], label %[[BB10:.*]], label %[[BB11:.*]], !prof [[PROF1]]
-+; CHECK:       [[BB10]]:
- ; CHECK-NEXT:    call void @__msan_warning_noreturn() #[[ATTR6]]
- ; CHECK-NEXT:    unreachable
--; CHECK:       [[BB10]]:
-+; CHECK:       [[BB11]]:
- ; CHECK-NEXT:    [[TMP1:%.*]] = call <8 x float> @llvm.x86.avx512.vpermi2var.ps.256(<8 x float> [[X0]], <8 x i32> [[X1]], <8 x float> [[X2]])
- ; CHECK-NEXT:    store <8 x i32> [[TMP7]], ptr @__msan_retval_tls, align 8
- ; CHECK-NEXT:    ret <8 x float> [[TMP1]]
-@@ -2520,7 +2532,7 @@
- ; CHECK-NEXT:    [[TMP13:%.*]] = load <8 x i32>, ptr inttoptr (i64 add (i64 ptrtoint (ptr @__msan_param_tls to i64), i64 32) to ptr), align 8
- ; CHECK-NEXT:    [[TMP4:%.*]] = load i8, ptr inttoptr (i64 add (i64 ptrtoint (ptr @__msan_param_tls to i64), i64 96) to ptr), align 8
- ; CHECK-NEXT:    call void @llvm.donothing()
--; CHECK-NEXT:    [[TMP15:%.*]] = trunc <8 x i32> [[X1]] to <8 x i3>
-+; CHECK-NEXT:    [[TMP15:%.*]] = trunc <8 x i32> [[TMP13]] to <8 x i3>
- ; CHECK-NEXT:    [[TMP9:%.*]] = bitcast <8 x i32> [[TMP11]] to <8 x float>
- ; CHECK-NEXT:    [[TMP12:%.*]] = bitcast <8 x i32> [[TMP8]] to <8 x float>
- ; CHECK-NEXT:    [[TMP17:%.*]] = call <8 x float> @llvm.x86.avx512.vpermi2var.ps.256(<8 x float> [[TMP9]], <8 x i32> [[X1]], <8 x float> [[TMP12]])
-@@ -2561,16 +2573,17 @@
- ; CHECK-SAME: <2 x i64> [[X0:%.*]], <2 x i64> [[X1:%.*]], <2 x i64> [[X2:%.*]]) #[[ATTR0]] {
- ; CHECK-NEXT:    [[TMP6:%.*]] = load <2 x i64>, ptr @__msan_param_tls, align 8
- ; CHECK-NEXT:    [[TMP5:%.*]] = load <2 x i64>, ptr inttoptr (i64 add (i64 ptrtoint (ptr @__msan_param_tls to i64), i64 32) to ptr), align 8
-+; CHECK-NEXT:    [[TMP8:%.*]] = load <2 x i64>, ptr inttoptr (i64 add (i64 ptrtoint (ptr @__msan_param_tls to i64), i64 16) to ptr), align 8
- ; CHECK-NEXT:    call void @llvm.donothing()
--; CHECK-NEXT:    [[TMP3:%.*]] = trunc <2 x i64> [[X1]] to <2 x i1>
-+; CHECK-NEXT:    [[TMP3:%.*]] = trunc <2 x i64> [[TMP8]] to <2 x i1>
- ; CHECK-NEXT:    [[TMP4:%.*]] = call <2 x i64> @llvm.x86.avx512.vpermi2var.q.128(<2 x i64> [[TMP6]], <2 x i64> [[X1]], <2 x i64> [[TMP5]])
- ; CHECK-NEXT:    [[TMP7:%.*]] = bitcast <2 x i1> [[TMP3]] to i2
- ; CHECK-NEXT:    [[_MSCMP:%.*]] = icmp ne i2 [[TMP7]], 0
--; CHECK-NEXT:    br i1 [[_MSCMP]], label %[[BB6:.*]], label %[[BB7:.*]], !prof [[PROF1]]
--; CHECK:       [[BB6]]:
-+; CHECK-NEXT:    br i1 [[_MSCMP]], label %[[BB7:.*]], label %[[BB8:.*]], !prof [[PROF1]]
-+; CHECK:       [[BB7]]:
- ; CHECK-NEXT:    call void @__msan_warning_noreturn() #[[ATTR6]]
- ; CHECK-NEXT:    unreachable
--; CHECK:       [[BB7]]:
-+; CHECK:       [[BB8]]:
- ; CHECK-NEXT:    [[TMP1:%.*]] = call <2 x i64> @llvm.x86.avx512.vpermi2var.q.128(<2 x i64> [[X0]], <2 x i64> [[X1]], <2 x i64> [[X2]])
- ; CHECK-NEXT:    store <2 x i64> [[TMP4]], ptr @__msan_retval_tls, align 8
- ; CHECK-NEXT:    ret <2 x i64> [[TMP1]]
-@@ -2585,10 +2598,10 @@
- ; CHECK-SAME: <2 x i64> [[X0:%.*]], <2 x i64> [[X1:%.*]], <2 x i64> [[X2:%.*]], i8 [[X3:%.*]]) #[[ATTR0]] {
- ; CHECK-NEXT:    [[TMP8:%.*]] = load <2 x i64>, ptr @__msan_param_tls, align 8
- ; CHECK-NEXT:    [[TMP6:%.*]] = load <2 x i64>, ptr inttoptr (i64 add (i64 ptrtoint (ptr @__msan_param_tls to i64), i64 32) to ptr), align 8
--; CHECK-NEXT:    [[TMP11:%.*]] = load i8, ptr inttoptr (i64 add (i64 ptrtoint (ptr @__msan_param_tls to i64), i64 48) to ptr), align 8
- ; CHECK-NEXT:    [[TMP3:%.*]] = load <2 x i64>, ptr inttoptr (i64 add (i64 ptrtoint (ptr @__msan_param_tls to i64), i64 16) to ptr), align 8
-+; CHECK-NEXT:    [[TMP11:%.*]] = load i8, ptr inttoptr (i64 add (i64 ptrtoint (ptr @__msan_param_tls to i64), i64 48) to ptr), align 8
- ; CHECK-NEXT:    call void @llvm.donothing()
--; CHECK-NEXT:    [[TMP9:%.*]] = trunc <2 x i64> [[X1]] to <2 x i1>
-+; CHECK-NEXT:    [[TMP9:%.*]] = trunc <2 x i64> [[TMP3]] to <2 x i1>
- ; CHECK-NEXT:    [[TMP5:%.*]] = call <2 x i64> @llvm.x86.avx512.vpermi2var.q.128(<2 x i64> [[TMP8]], <2 x i64> [[X1]], <2 x i64> [[TMP6]])
- ; CHECK-NEXT:    [[TMP13:%.*]] = bitcast <2 x i1> [[TMP9]] to i2
- ; CHECK-NEXT:    [[_MSCMP:%.*]] = icmp ne i2 [[TMP13]], 0
-@@ -2623,16 +2636,17 @@
- ; CHECK-SAME: <2 x i64> [[X0:%.*]], <2 x i64> [[X1:%.*]], <2 x i64> [[X2:%.*]]) #[[ATTR0]] {
- ; CHECK-NEXT:    [[TMP6:%.*]] = load <2 x i64>, ptr inttoptr (i64 add (i64 ptrtoint (ptr @__msan_param_tls to i64), i64 16) to ptr), align 8
- ; CHECK-NEXT:    [[TMP5:%.*]] = load <2 x i64>, ptr inttoptr (i64 add (i64 ptrtoint (ptr @__msan_param_tls to i64), i64 32) to ptr), align 8
-+; CHECK-NEXT:    [[TMP8:%.*]] = load <2 x i64>, ptr @__msan_param_tls, align 8
- ; CHECK-NEXT:    call void @llvm.donothing()
--; CHECK-NEXT:    [[TMP3:%.*]] = trunc <2 x i64> [[X0]] to <2 x i1>
-+; CHECK-NEXT:    [[TMP3:%.*]] = trunc <2 x i64> [[TMP8]] to <2 x i1>
- ; CHECK-NEXT:    [[TMP4:%.*]] = call <2 x i64> @llvm.x86.avx512.vpermi2var.q.128(<2 x i64> [[TMP6]], <2 x i64> [[X0]], <2 x i64> [[TMP5]])
- ; CHECK-NEXT:    [[TMP7:%.*]] = bitcast <2 x i1> [[TMP3]] to i2
- ; CHECK-NEXT:    [[_MSCMP:%.*]] = icmp ne i2 [[TMP7]], 0
--; CHECK-NEXT:    br i1 [[_MSCMP]], label %[[BB6:.*]], label %[[BB7:.*]], !prof [[PROF1]]
--; CHECK:       [[BB6]]:
-+; CHECK-NEXT:    br i1 [[_MSCMP]], label %[[BB7:.*]], label %[[BB8:.*]], !prof [[PROF1]]
-+; CHECK:       [[BB7]]:
- ; CHECK-NEXT:    call void @__msan_warning_noreturn() #[[ATTR6]]
- ; CHECK-NEXT:    unreachable
--; CHECK:       [[BB7]]:
-+; CHECK:       [[BB8]]:
- ; CHECK-NEXT:    [[TMP1:%.*]] = call <2 x i64> @llvm.x86.avx512.vpermi2var.q.128(<2 x i64> [[X1]], <2 x i64> [[X0]], <2 x i64> [[X2]])
- ; CHECK-NEXT:    store <2 x i64> [[TMP4]], ptr @__msan_retval_tls, align 8
- ; CHECK-NEXT:    ret <2 x i64> [[TMP1]]
-@@ -2647,17 +2661,18 @@
- ; CHECK-SAME: <2 x i64> [[X0:%.*]], <2 x i64> [[X1:%.*]], <2 x i64> [[X2:%.*]], i8 [[X3:%.*]]) #[[ATTR0]] {
- ; CHECK-NEXT:    [[TMP8:%.*]] = load <2 x i64>, ptr inttoptr (i64 add (i64 ptrtoint (ptr @__msan_param_tls to i64), i64 16) to ptr), align 8
- ; CHECK-NEXT:    [[TMP6:%.*]] = load <2 x i64>, ptr inttoptr (i64 add (i64 ptrtoint (ptr @__msan_param_tls to i64), i64 32) to ptr), align 8
-+; CHECK-NEXT:    [[TMP3:%.*]] = load <2 x i64>, ptr @__msan_param_tls, align 8
- ; CHECK-NEXT:    [[TMP11:%.*]] = load i8, ptr inttoptr (i64 add (i64 ptrtoint (ptr @__msan_param_tls to i64), i64 48) to ptr), align 8
- ; CHECK-NEXT:    call void @llvm.donothing()
--; CHECK-NEXT:    [[TMP9:%.*]] = trunc <2 x i64> [[X0]] to <2 x i1>
-+; CHECK-NEXT:    [[TMP9:%.*]] = trunc <2 x i64> [[TMP3]] to <2 x i1>
- ; CHECK-NEXT:    [[TMP5:%.*]] = call <2 x i64> @llvm.x86.avx512.vpermi2var.q.128(<2 x i64> [[TMP8]], <2 x i64> [[X0]], <2 x i64> [[TMP6]])
- ; CHECK-NEXT:    [[TMP13:%.*]] = bitcast <2 x i1> [[TMP9]] to i2
- ; CHECK-NEXT:    [[_MSCMP:%.*]] = icmp ne i2 [[TMP13]], 0
--; CHECK-NEXT:    br i1 [[_MSCMP]], label %[[BB7:.*]], label %[[BB8:.*]], !prof [[PROF1]]
--; CHECK:       [[BB7]]:
-+; CHECK-NEXT:    br i1 [[_MSCMP]], label %[[BB8:.*]], label %[[BB9:.*]], !prof [[PROF1]]
-+; CHECK:       [[BB8]]:
- ; CHECK-NEXT:    call void @__msan_warning_noreturn() #[[ATTR6]]
- ; CHECK-NEXT:    unreachable
--; CHECK:       [[BB8]]:
-+; CHECK:       [[BB9]]:
- ; CHECK-NEXT:    [[TMP1:%.*]] = call <2 x i64> @llvm.x86.avx512.vpermi2var.q.128(<2 x i64> [[X1]], <2 x i64> [[X0]], <2 x i64> [[X2]])
- ; CHECK-NEXT:    [[TMP10:%.*]] = bitcast i8 [[TMP11]] to <8 x i1>
- ; CHECK-NEXT:    [[TMP2:%.*]] = bitcast i8 [[X3]] to <8 x i1>
-@@ -2685,17 +2700,18 @@
- ; CHECK-SAME: <2 x i64> [[X0:%.*]], <2 x i64> [[X1:%.*]], <2 x i64> [[X2:%.*]], i8 [[X3:%.*]]) #[[ATTR0]] {
- ; CHECK-NEXT:    [[TMP8:%.*]] = load <2 x i64>, ptr inttoptr (i64 add (i64 ptrtoint (ptr @__msan_param_tls to i64), i64 16) to ptr), align 8
- ; CHECK-NEXT:    [[TMP9:%.*]] = load <2 x i64>, ptr inttoptr (i64 add (i64 ptrtoint (ptr @__msan_param_tls to i64), i64 32) to ptr), align 8
-+; CHECK-NEXT:    [[TMP3:%.*]] = load <2 x i64>, ptr @__msan_param_tls, align 8
- ; CHECK-NEXT:    [[TMP11:%.*]] = load i8, ptr inttoptr (i64 add (i64 ptrtoint (ptr @__msan_param_tls to i64), i64 48) to ptr), align 8
- ; CHECK-NEXT:    call void @llvm.donothing()
--; CHECK-NEXT:    [[TMP14:%.*]] = trunc <2 x i64> [[X0]] to <2 x i1>
-+; CHECK-NEXT:    [[TMP14:%.*]] = trunc <2 x i64> [[TMP3]] to <2 x i1>
- ; CHECK-NEXT:    [[TMP13:%.*]] = call <2 x i64> @llvm.x86.avx512.vpermi2var.q.128(<2 x i64> [[TMP8]], <2 x i64> [[X0]], <2 x i64> [[TMP9]])
- ; CHECK-NEXT:    [[TMP15:%.*]] = bitcast <2 x i1> [[TMP14]] to i2
- ; CHECK-NEXT:    [[_MSCMP:%.*]] = icmp ne i2 [[TMP15]], 0
--; CHECK-NEXT:    br i1 [[_MSCMP]], label %[[BB7:.*]], label %[[BB8:.*]], !prof [[PROF1]]
--; CHECK:       [[BB7]]:
-+; CHECK-NEXT:    br i1 [[_MSCMP]], label %[[BB8:.*]], label %[[BB9:.*]], !prof [[PROF1]]
-+; CHECK:       [[BB8]]:
- ; CHECK-NEXT:    call void @__msan_warning_noreturn() #[[ATTR6]]
- ; CHECK-NEXT:    unreachable
--; CHECK:       [[BB8]]:
-+; CHECK:       [[BB9]]:
- ; CHECK-NEXT:    [[TMP1:%.*]] = call <2 x i64> @llvm.x86.avx512.vpermi2var.q.128(<2 x i64> [[X1]], <2 x i64> [[X0]], <2 x i64> [[X2]])
- ; CHECK-NEXT:    [[TMP10:%.*]] = bitcast i8 [[TMP11]] to <8 x i1>
- ; CHECK-NEXT:    [[TMP2:%.*]] = bitcast i8 [[X3]] to <8 x i1>
-@@ -2724,16 +2740,17 @@
- ; CHECK-SAME: <4 x i64> [[X0:%.*]], <4 x i64> [[X1:%.*]], <4 x i64> [[X2:%.*]]) #[[ATTR0]] {
- ; CHECK-NEXT:    [[TMP6:%.*]] = load <4 x i64>, ptr @__msan_param_tls, align 8
- ; CHECK-NEXT:    [[TMP5:%.*]] = load <4 x i64>, ptr inttoptr (i64 add (i64 ptrtoint (ptr @__msan_param_tls to i64), i64 64) to ptr), align 8
-+; CHECK-NEXT:    [[TMP8:%.*]] = load <4 x i64>, ptr inttoptr (i64 add (i64 ptrtoint (ptr @__msan_param_tls to i64), i64 32) to ptr), align 8
- ; CHECK-NEXT:    call void @llvm.donothing()
--; CHECK-NEXT:    [[TMP3:%.*]] = trunc <4 x i64> [[X1]] to <4 x i2>
-+; CHECK-NEXT:    [[TMP3:%.*]] = trunc <4 x i64> [[TMP8]] to <4 x i2>
- ; CHECK-NEXT:    [[TMP4:%.*]] = call <4 x i64> @llvm.x86.avx512.vpermi2var.q.256(<4 x i64> [[TMP6]], <4 x i64> [[X1]], <4 x i64> [[TMP5]])
- ; CHECK-NEXT:    [[TMP7:%.*]] = bitcast <4 x i2> [[TMP3]] to i8
- ; CHECK-NEXT:    [[_MSCMP:%.*]] = icmp ne i8 [[TMP7]], 0
--; CHECK-NEXT:    br i1 [[_MSCMP]], label %[[BB6:.*]], label %[[BB7:.*]], !prof [[PROF1]]
--; CHECK:       [[BB6]]:
-+; CHECK-NEXT:    br i1 [[_MSCMP]], label %[[BB7:.*]], label %[[BB8:.*]], !prof [[PROF1]]
-+; CHECK:       [[BB7]]:
- ; CHECK-NEXT:    call void @__msan_warning_noreturn() #[[ATTR6]]
- ; CHECK-NEXT:    unreachable
--; CHECK:       [[BB7]]:
-+; CHECK:       [[BB8]]:
- ; CHECK-NEXT:    [[TMP1:%.*]] = call <4 x i64> @llvm.x86.avx512.vpermi2var.q.256(<4 x i64> [[X0]], <4 x i64> [[X1]], <4 x i64> [[X2]])
- ; CHECK-NEXT:    store <4 x i64> [[TMP4]], ptr @__msan_retval_tls, align 8
- ; CHECK-NEXT:    ret <4 x i64> [[TMP1]]
-@@ -2748,10 +2765,10 @@
- ; CHECK-SAME: <4 x i64> [[X0:%.*]], <4 x i64> [[X1:%.*]], <4 x i64> [[X2:%.*]], i8 [[X3:%.*]]) #[[ATTR0]] {
- ; CHECK-NEXT:    [[TMP8:%.*]] = load <4 x i64>, ptr @__msan_param_tls, align 8
- ; CHECK-NEXT:    [[TMP6:%.*]] = load <4 x i64>, ptr inttoptr (i64 add (i64 ptrtoint (ptr @__msan_param_tls to i64), i64 64) to ptr), align 8
--; CHECK-NEXT:    [[TMP11:%.*]] = load i8, ptr inttoptr (i64 add (i64 ptrtoint (ptr @__msan_param_tls to i64), i64 96) to ptr), align 8
- ; CHECK-NEXT:    [[TMP3:%.*]] = load <4 x i64>, ptr inttoptr (i64 add (i64 ptrtoint (ptr @__msan_param_tls to i64), i64 32) to ptr), align 8
-+; CHECK-NEXT:    [[TMP11:%.*]] = load i8, ptr inttoptr (i64 add (i64 ptrtoint (ptr @__msan_param_tls to i64), i64 96) to ptr), align 8
- ; CHECK-NEXT:    call void @llvm.donothing()
--; CHECK-NEXT:    [[TMP9:%.*]] = trunc <4 x i64> [[X1]] to <4 x i2>
-+; CHECK-NEXT:    [[TMP9:%.*]] = trunc <4 x i64> [[TMP3]] to <4 x i2>
- ; CHECK-NEXT:    [[TMP5:%.*]] = call <4 x i64> @llvm.x86.avx512.vpermi2var.q.256(<4 x i64> [[TMP8]], <4 x i64> [[X1]], <4 x i64> [[TMP6]])
- ; CHECK-NEXT:    [[TMP13:%.*]] = bitcast <4 x i2> [[TMP9]] to i8
- ; CHECK-NEXT:    [[_MSCMP:%.*]] = icmp ne i8 [[TMP13]], 0
-@@ -2786,16 +2803,17 @@
- ; CHECK-SAME: <4 x i64> [[X0:%.*]], <4 x i64> [[X1:%.*]], <4 x i64> [[X2:%.*]]) #[[ATTR0]] {
- ; CHECK-NEXT:    [[TMP6:%.*]] = load <4 x i64>, ptr inttoptr (i64 add (i64 ptrtoint (ptr @__msan_param_tls to i64), i64 32) to ptr), align 8
- ; CHECK-NEXT:    [[TMP5:%.*]] = load <4 x i64>, ptr inttoptr (i64 add (i64 ptrtoint (ptr @__msan_param_tls to i64), i64 64) to ptr), align 8
-+; CHECK-NEXT:    [[TMP8:%.*]] = load <4 x i64>, ptr @__msan_param_tls, align 8
- ; CHECK-NEXT:    call void @llvm.donothing()
--; CHECK-NEXT:    [[TMP3:%.*]] = trunc <4 x i64> [[X0]] to <4 x i2>
-+; CHECK-NEXT:    [[TMP3:%.*]] = trunc <4 x i64> [[TMP8]] to <4 x i2>
- ; CHECK-NEXT:    [[TMP4:%.*]] = call <4 x i64> @llvm.x86.avx512.vpermi2var.q.256(<4 x i64> [[TMP6]], <4 x i64> [[X0]], <4 x i64> [[TMP5]])
- ; CHECK-NEXT:    [[TMP7:%.*]] = bitcast <4 x i2> [[TMP3]] to i8
- ; CHECK-NEXT:    [[_MSCMP:%.*]] = icmp ne i8 [[TMP7]], 0
--; CHECK-NEXT:    br i1 [[_MSCMP]], label %[[BB6:.*]], label %[[BB7:.*]], !prof [[PROF1]]
--; CHECK:       [[BB6]]:
-+; CHECK-NEXT:    br i1 [[_MSCMP]], label %[[BB7:.*]], label %[[BB8:.*]], !prof [[PROF1]]
-+; CHECK:       [[BB7]]:
- ; CHECK-NEXT:    call void @__msan_warning_noreturn() #[[ATTR6]]
- ; CHECK-NEXT:    unreachable
--; CHECK:       [[BB7]]:
-+; CHECK:       [[BB8]]:
- ; CHECK-NEXT:    [[TMP1:%.*]] = call <4 x i64> @llvm.x86.avx512.vpermi2var.q.256(<4 x i64> [[X1]], <4 x i64> [[X0]], <4 x i64> [[X2]])
- ; CHECK-NEXT:    store <4 x i64> [[TMP4]], ptr @__msan_retval_tls, align 8
- ; CHECK-NEXT:    ret <4 x i64> [[TMP1]]
-@@ -2810,17 +2828,18 @@
- ; CHECK-SAME: <4 x i64> [[X0:%.*]], <4 x i64> [[X1:%.*]], <4 x i64> [[X2:%.*]], i8 [[X3:%.*]]) #[[ATTR0]] {
- ; CHECK-NEXT:    [[TMP8:%.*]] = load <4 x i64>, ptr inttoptr (i64 add (i64 ptrtoint (ptr @__msan_param_tls to i64), i64 32) to ptr), align 8
- ; CHECK-NEXT:    [[TMP6:%.*]] = load <4 x i64>, ptr inttoptr (i64 add (i64 ptrtoint (ptr @__msan_param_tls to i64), i64 64) to ptr), align 8
-+; CHECK-NEXT:    [[TMP3:%.*]] = load <4 x i64>, ptr @__msan_param_tls, align 8
- ; CHECK-NEXT:    [[TMP11:%.*]] = load i8, ptr inttoptr (i64 add (i64 ptrtoint (ptr @__msan_param_tls to i64), i64 96) to ptr), align 8
- ; CHECK-NEXT:    call void @llvm.donothing()
--; CHECK-NEXT:    [[TMP9:%.*]] = trunc <4 x i64> [[X0]] to <4 x i2>
-+; CHECK-NEXT:    [[TMP9:%.*]] = trunc <4 x i64> [[TMP3]] to <4 x i2>
- ; CHECK-NEXT:    [[TMP5:%.*]] = call <4 x i64> @llvm.x86.avx512.vpermi2var.q.256(<4 x i64> [[TMP8]], <4 x i64> [[X0]], <4 x i64> [[TMP6]])
- ; CHECK-NEXT:    [[TMP13:%.*]] = bitcast <4 x i2> [[TMP9]] to i8
- ; CHECK-NEXT:    [[_MSCMP:%.*]] = icmp ne i8 [[TMP13]], 0
--; CHECK-NEXT:    br i1 [[_MSCMP]], label %[[BB7:.*]], label %[[BB8:.*]], !prof [[PROF1]]
--; CHECK:       [[BB7]]:
-+; CHECK-NEXT:    br i1 [[_MSCMP]], label %[[BB8:.*]], label %[[BB9:.*]], !prof [[PROF1]]
-+; CHECK:       [[BB8]]:
- ; CHECK-NEXT:    call void @__msan_warning_noreturn() #[[ATTR6]]
- ; CHECK-NEXT:    unreachable
--; CHECK:       [[BB8]]:
-+; CHECK:       [[BB9]]:
- ; CHECK-NEXT:    [[TMP1:%.*]] = call <4 x i64> @llvm.x86.avx512.vpermi2var.q.256(<4 x i64> [[X1]], <4 x i64> [[X0]], <4 x i64> [[X2]])
- ; CHECK-NEXT:    [[TMP10:%.*]] = bitcast i8 [[TMP11]] to <8 x i1>
- ; CHECK-NEXT:    [[TMP2:%.*]] = bitcast i8 [[X3]] to <8 x i1>
-@@ -2848,17 +2867,18 @@
- ; CHECK-SAME: <4 x i64> [[X0:%.*]], <4 x i64> [[X1:%.*]], <4 x i64> [[X2:%.*]], i8 [[X3:%.*]]) #[[ATTR0]] {
- ; CHECK-NEXT:    [[TMP8:%.*]] = load <4 x i64>, ptr inttoptr (i64 add (i64 ptrtoint (ptr @__msan_param_tls to i64), i64 32) to ptr), align 8
- ; CHECK-NEXT:    [[TMP9:%.*]] = load <4 x i64>, ptr inttoptr (i64 add (i64 ptrtoint (ptr @__msan_param_tls to i64), i64 64) to ptr), align 8
-+; CHECK-NEXT:    [[TMP3:%.*]] = load <4 x i64>, ptr @__msan_param_tls, align 8
- ; CHECK-NEXT:    [[TMP11:%.*]] = load i8, ptr inttoptr (i64 add (i64 ptrtoint (ptr @__msan_param_tls to i64), i64 96) to ptr), align 8
- ; CHECK-NEXT:    call void @llvm.donothing()
--; CHECK-NEXT:    [[TMP14:%.*]] = trunc <4 x i64> [[X0]] to <4 x i2>
-+; CHECK-NEXT:    [[TMP14:%.*]] = trunc <4 x i64> [[TMP3]] to <4 x i2>
- ; CHECK-NEXT:    [[TMP13:%.*]] = call <4 x i64> @llvm.x86.avx512.vpermi2var.q.256(<4 x i64> [[TMP8]], <4 x i64> [[X0]], <4 x i64> [[TMP9]])
- ; CHECK-NEXT:    [[TMP15:%.*]] = bitcast <4 x i2> [[TMP14]] to i8
- ; CHECK-NEXT:    [[_MSCMP:%.*]] = icmp ne i8 [[TMP15]], 0
--; CHECK-NEXT:    br i1 [[_MSCMP]], label %[[BB7:.*]], label %[[BB8:.*]], !prof [[PROF1]]
--; CHECK:       [[BB7]]:
-+; CHECK-NEXT:    br i1 [[_MSCMP]], label %[[BB8:.*]], label %[[BB9:.*]], !prof [[PROF1]]
-+; CHECK:       [[BB8]]:
- ; CHECK-NEXT:    call void @__msan_warning_noreturn() #[[ATTR6]]
- ; CHECK-NEXT:    unreachable
--; CHECK:       [[BB8]]:
-+; CHECK:       [[BB9]]:
- ; CHECK-NEXT:    [[TMP1:%.*]] = call <4 x i64> @llvm.x86.avx512.vpermi2var.q.256(<4 x i64> [[X1]], <4 x i64> [[X0]], <4 x i64> [[X2]])
- ; CHECK-NEXT:    [[TMP10:%.*]] = bitcast i8 [[TMP11]] to <8 x i1>
- ; CHECK-NEXT:    [[TMP2:%.*]] = bitcast i8 [[X3]] to <8 x i1>
-diff -ruN --strip-trailing-cr a/llvm/test/Instrumentation/MemorySanitizer/X86/avx-intrinsics-x86.ll b/llvm/test/Instrumentation/MemorySanitizer/X86/avx-intrinsics-x86.ll
---- a/llvm/test/Instrumentation/MemorySanitizer/X86/avx-intrinsics-x86.ll
-+++ b/llvm/test/Instrumentation/MemorySanitizer/X86/avx-intrinsics-x86.ll
-@@ -948,19 +948,20 @@
- define <2 x double> @test_x86_avx_vpermilvar_pd(<2 x double> %a0, <2 x i64> %a1) #0 {
- ; CHECK-LABEL: @test_x86_avx_vpermilvar_pd(
- ; CHECK-NEXT:    [[TMP1:%.*]] = load <2 x i64>, ptr @__msan_param_tls, align 8
-+; CHECK-NEXT:    [[A1:%.*]] = load <2 x i64>, ptr inttoptr (i64 add (i64 ptrtoint (ptr @__msan_param_tls to i64), i64 16) to ptr), align 8
- ; CHECK-NEXT:    call void @llvm.donothing()
--; CHECK-NEXT:    [[TMP2:%.*]] = trunc <2 x i64> [[A1:%.*]] to <2 x i1>
-+; CHECK-NEXT:    [[TMP2:%.*]] = trunc <2 x i64> [[A1]] to <2 x i1>
- ; CHECK-NEXT:    [[A0:%.*]] = bitcast <2 x i64> [[TMP1]] to <2 x double>
--; CHECK-NEXT:    [[RES:%.*]] = call <2 x double> @llvm.x86.avx.vpermilvar.pd(<2 x double> [[A0]], <2 x i64> [[A1]])
-+; CHECK-NEXT:    [[RES:%.*]] = call <2 x double> @llvm.x86.avx.vpermilvar.pd(<2 x double> [[A0]], <2 x i64> [[A2:%.*]])
- ; CHECK-NEXT:    [[TMP4:%.*]] = bitcast <2 x double> [[RES]] to <2 x i64>
- ; CHECK-NEXT:    [[TMP6:%.*]] = bitcast <2 x i1> [[TMP2]] to i2
- ; CHECK-NEXT:    [[_MSCMP:%.*]] = icmp ne i2 [[TMP6]], 0
--; CHECK-NEXT:    br i1 [[_MSCMP]], label [[TMP7:%.*]], label [[TMP8:%.*]], !prof [[PROF1]]
--; CHECK:       7:
-+; CHECK-NEXT:    br i1 [[_MSCMP]], label [[TMP8:%.*]], label [[TMP9:%.*]], !prof [[PROF1]]
-+; CHECK:       8:
- ; CHECK-NEXT:    call void @__msan_warning_noreturn()
- ; CHECK-NEXT:    unreachable
--; CHECK:       8:
--; CHECK-NEXT:    [[RES1:%.*]] = call <2 x double> @llvm.x86.avx.vpermilvar.pd(<2 x double> [[A2:%.*]], <2 x i64> [[A1]])
-+; CHECK:       9:
-+; CHECK-NEXT:    [[RES1:%.*]] = call <2 x double> @llvm.x86.avx.vpermilvar.pd(<2 x double> [[A3:%.*]], <2 x i64> [[A2]])
- ; CHECK-NEXT:    store <2 x i64> [[TMP4]], ptr @__msan_retval_tls, align 8
- ; CHECK-NEXT:    ret <2 x double> [[RES1]]
- ;
-@@ -973,19 +974,20 @@
- define <4 x double> @test_x86_avx_vpermilvar_pd_256(<4 x double> %a0, <4 x i64> %a1) #0 {
- ; CHECK-LABEL: @test_x86_avx_vpermilvar_pd_256(
- ; CHECK-NEXT:    [[TMP1:%.*]] = load <4 x i64>, ptr @__msan_param_tls, align 8
-+; CHECK-NEXT:    [[A1:%.*]] = load <4 x i64>, ptr inttoptr (i64 add (i64 ptrtoint (ptr @__msan_param_tls to i64), i64 32) to ptr), align 8
- ; CHECK-NEXT:    call void @llvm.donothing()
--; CHECK-NEXT:    [[TMP2:%.*]] = trunc <4 x i64> [[A1:%.*]] to <4 x i2>
-+; CHECK-NEXT:    [[TMP2:%.*]] = trunc <4 x i64> [[A1]] to <4 x i2>
- ; CHECK-NEXT:    [[A0:%.*]] = bitcast <4 x i64> [[TMP1]] to <4 x double>
--; CHECK-NEXT:    [[RES:%.*]] = call <4 x double> @llvm.x86.avx.vpermilvar.pd.256(<4 x double> [[A0]], <4 x i64> [[A1]])
-+; CHECK-NEXT:    [[RES:%.*]] = call <4 x double> @llvm.x86.avx.vpermilvar.pd.256(<4 x double> [[A0]], <4 x i64> [[A2:%.*]])
- ; CHECK-NEXT:    [[TMP4:%.*]] = bitcast <4 x double> [[RES]] to <4 x i64>
- ; CHECK-NEXT:    [[TMP6:%.*]] = bitcast <4 x i2> [[TMP2]] to i8
- ; CHECK-NEXT:    [[_MSCMP:%.*]] = icmp ne i8 [[TMP6]], 0
--; CHECK-NEXT:    br i1 [[_MSCMP]], label [[TMP7:%.*]], label [[TMP8:%.*]], !prof [[PROF1]]
--; CHECK:       7:
-+; CHECK-NEXT:    br i1 [[_MSCMP]], label [[TMP8:%.*]], label [[TMP9:%.*]], !prof [[PROF1]]
-+; CHECK:       8:
- ; CHECK-NEXT:    call void @__msan_warning_noreturn()
- ; CHECK-NEXT:    unreachable
--; CHECK:       8:
--; CHECK-NEXT:    [[RES1:%.*]] = call <4 x double> @llvm.x86.avx.vpermilvar.pd.256(<4 x double> [[A2:%.*]], <4 x i64> [[A1]])
-+; CHECK:       9:
-+; CHECK-NEXT:    [[RES1:%.*]] = call <4 x double> @llvm.x86.avx.vpermilvar.pd.256(<4 x double> [[A3:%.*]], <4 x i64> [[A2]])
- ; CHECK-NEXT:    store <4 x i64> [[TMP4]], ptr @__msan_retval_tls, align 8
- ; CHECK-NEXT:    ret <4 x double> [[RES1]]
- ;
-@@ -1012,19 +1014,20 @@
- define <4 x float> @test_x86_avx_vpermilvar_ps(<4 x float> %a0, <4 x i32> %a1) #0 {
- ; CHECK-LABEL: @test_x86_avx_vpermilvar_ps(
- ; CHECK-NEXT:    [[TMP1:%.*]] = load <4 x i32>, ptr @__msan_param_tls, align 8
-+; CHECK-NEXT:    [[A1:%.*]] = load <4 x i32>, ptr inttoptr (i64 add (i64 ptrtoint (ptr @__msan_param_tls to i64), i64 16) to ptr), align 8
- ; CHECK-NEXT:    call void @llvm.donothing()
--; CHECK-NEXT:    [[TMP2:%.*]] = trunc <4 x i32> [[A1:%.*]] to <4 x i2>
-+; CHECK-NEXT:    [[TMP2:%.*]] = trunc <4 x i32> [[A1]] to <4 x i2>
- ; CHECK-NEXT:    [[A0:%.*]] = bitcast <4 x i32> [[TMP1]] to <4 x float>
--; CHECK-NEXT:    [[RES:%.*]] = call <4 x float> @llvm.x86.avx.vpermilvar.ps(<4 x float> [[A0]], <4 x i32> [[A1]])
-+; CHECK-NEXT:    [[RES:%.*]] = call <4 x float> @llvm.x86.avx.vpermilvar.ps(<4 x float> [[A0]], <4 x i32> [[A2:%.*]])
- ; CHECK-NEXT:    [[TMP4:%.*]] = bitcast <4 x float> [[RES]] to <4 x i32>
- ; CHECK-NEXT:    [[TMP6:%.*]] = bitcast <4 x i2> [[TMP2]] to i8
- ; CHECK-NEXT:    [[_MSCMP:%.*]] = icmp ne i8 [[TMP6]], 0
--; CHECK-NEXT:    br i1 [[_MSCMP]], label [[TMP7:%.*]], label [[TMP8:%.*]], !prof [[PROF1]]
--; CHECK:       7:
-+; CHECK-NEXT:    br i1 [[_MSCMP]], label [[TMP8:%.*]], label [[TMP9:%.*]], !prof [[PROF1]]
-+; CHECK:       8:
- ; CHECK-NEXT:    call void @__msan_warning_noreturn()
- ; CHECK-NEXT:    unreachable
--; CHECK:       8:
--; CHECK-NEXT:    [[RES1:%.*]] = call <4 x float> @llvm.x86.avx.vpermilvar.ps(<4 x float> [[A2:%.*]], <4 x i32> [[A1]])
-+; CHECK:       9:
-+; CHECK-NEXT:    [[RES1:%.*]] = call <4 x float> @llvm.x86.avx.vpermilvar.ps(<4 x float> [[A3:%.*]], <4 x i32> [[A2]])
- ; CHECK-NEXT:    store <4 x i32> [[TMP4]], ptr @__msan_retval_tls, align 8
- ; CHECK-NEXT:    ret <4 x float> [[RES1]]
- ;
-@@ -1047,7 +1050,7 @@
- ; CHECK-NEXT:    [[TMP6:%.*]] = xor i64 [[TMP5]], 87960930222080
- ; CHECK-NEXT:    [[TMP7:%.*]] = inttoptr i64 [[TMP6]] to ptr
- ; CHECK-NEXT:    [[_MSLD:%.*]] = load <4 x i32>, ptr [[TMP7]], align 16
--; CHECK-NEXT:    [[TMP8:%.*]] = trunc <4 x i32> [[A2]] to <4 x i2>
-+; CHECK-NEXT:    [[TMP8:%.*]] = trunc <4 x i32> [[_MSLD]] to <4 x i2>
- ; CHECK-NEXT:    [[A0:%.*]] = bitcast <4 x i32> [[TMP2]] to <4 x float>
- ; CHECK-NEXT:    [[RES:%.*]] = call <4 x float> @llvm.x86.avx.vpermilvar.ps(<4 x float> [[A0]], <4 x i32> [[A2]])
- ; CHECK-NEXT:    [[TMP10:%.*]] = bitcast <4 x float> [[RES]] to <4 x i32>
-@@ -1072,19 +1075,20 @@
- define <8 x float> @test_x86_avx_vpermilvar_ps_256(<8 x float> %a0, <8 x i32> %a1) #0 {
- ; CHECK-LABEL: @test_x86_avx_vpermilvar_ps_256(
- ; CHECK-NEXT:    [[TMP1:%.*]] = load <8 x i32>, ptr @__msan_param_tls, align 8
-+; CHECK-NEXT:    [[A1:%.*]] = load <8 x i32>, ptr inttoptr (i64 add (i64 ptrtoint (ptr @__msan_param_tls to i64), i64 32) to ptr), align 8
- ; CHECK-NEXT:    call void @llvm.donothing()
--; CHECK-NEXT:    [[TMP2:%.*]] = trunc <8 x i32> [[A1:%.*]] to <8 x i3>
-+; CHECK-NEXT:    [[TMP2:%.*]] = trunc <8 x i32> [[A1]] to <8 x i3>
- ; CHECK-NEXT:    [[A0:%.*]] = bitcast <8 x i32> [[TMP1]] to <8 x float>
--; CHECK-NEXT:    [[RES:%.*]] = call <8 x float> @llvm.x86.avx.vpermilvar.ps.256(<8 x float> [[A0]], <8 x i32> [[A1]])
-+; CHECK-NEXT:    [[RES:%.*]] = call <8 x float> @llvm.x86.avx.vpermilvar.ps.256(<8 x float> [[A0]], <8 x i32> [[A2:%.*]])
- ; CHECK-NEXT:    [[TMP4:%.*]] = bitcast <8 x float> [[RES]] to <8 x i32>
- ; CHECK-NEXT:    [[TMP6:%.*]] = bitcast <8 x i3> [[TMP2]] to i24
- ; CHECK-NEXT:    [[_MSCMP:%.*]] = icmp ne i24 [[TMP6]], 0
--; CHECK-NEXT:    br i1 [[_MSCMP]], label [[TMP7:%.*]], label [[TMP8:%.*]], !prof [[PROF1]]
--; CHECK:       7:
-+; CHECK-NEXT:    br i1 [[_MSCMP]], label [[TMP8:%.*]], label [[TMP9:%.*]], !prof [[PROF1]]
-+; CHECK:       8:
- ; CHECK-NEXT:    call void @__msan_warning_noreturn()
- ; CHECK-NEXT:    unreachable
--; CHECK:       8:
--; CHECK-NEXT:    [[RES1:%.*]] = call <8 x float> @llvm.x86.avx.vpermilvar.ps.256(<8 x float> [[A2:%.*]], <8 x i32> [[A1]])
-+; CHECK:       9:
-+; CHECK-NEXT:    [[RES1:%.*]] = call <8 x float> @llvm.x86.avx.vpermilvar.ps.256(<8 x float> [[A3:%.*]], <8 x i32> [[A2]])
- ; CHECK-NEXT:    store <8 x i32> [[TMP4]], ptr @__msan_retval_tls, align 8
- ; CHECK-NEXT:    ret <8 x float> [[RES1]]
- ;
-diff -ruN --strip-trailing-cr a/llvm/test/Instrumentation/MemorySanitizer/X86/x86-vpermi2.ll b/llvm/test/Instrumentation/MemorySanitizer/X86/x86-vpermi2.ll
---- a/llvm/test/Instrumentation/MemorySanitizer/X86/x86-vpermi2.ll
-+++ b/llvm/test/Instrumentation/MemorySanitizer/X86/x86-vpermi2.ll
-@@ -53,7 +53,7 @@
- ; CHECK-NEXT:    [[TMP8:%.*]] = or <2 x i64> [[TMP5]], [[TMP2]]
- ; CHECK-NEXT:    [[TMP9:%.*]] = or <2 x i64> [[TMP8]], [[TMP7]]
- ; CHECK-NEXT:    [[T:%.*]] = or <2 x i64> [[M]], <i64 0, i64 4>
--; CHECK-NEXT:    [[TMP10:%.*]] = trunc <2 x i64> [[T]] to <2 x i1>
-+; CHECK-NEXT:    [[TMP10:%.*]] = trunc <2 x i64> [[TMP9]] to <2 x i1>
- ; CHECK-NEXT:    [[_MSPROP1:%.*]] = call <2 x i64> @llvm.x86.avx512.vpermi2var.q.128(<2 x i64> [[TMP6]], <2 x i64> [[T]], <2 x i64> [[TMP3]])
- ; CHECK-NEXT:    [[TMP12:%.*]] = bitcast <2 x i1> [[TMP10]] to i2
- ; CHECK-NEXT:    [[_MSCMP:%.*]] = icmp ne i2 [[TMP12]], 0
-@@ -85,7 +85,7 @@
- ; CHECK-NEXT:    [[TMP8:%.*]] = or <2 x i64> [[TMP5]], [[TMP2]]
- ; CHECK-NEXT:    [[TMP9:%.*]] = or <2 x i64> [[TMP8]], [[TMP7]]
- ; CHECK-NEXT:    [[T:%.*]] = or <2 x i64> [[M]], <i64 0, i64 2>
--; CHECK-NEXT:    [[TMP10:%.*]] = trunc <2 x i64> [[T]] to <2 x i1>
-+; CHECK-NEXT:    [[TMP10:%.*]] = trunc <2 x i64> [[TMP9]] to <2 x i1>
- ; CHECK-NEXT:    [[_MSPROP1:%.*]] = call <2 x i64> @llvm.x86.avx512.vpermi2var.q.128(<2 x i64> [[TMP6]], <2 x i64> [[T]], <2 x i64> [[TMP3]])
- ; CHECK-NEXT:    [[TMP12:%.*]] = bitcast <2 x i1> [[TMP10]] to i2
- ; CHECK-NEXT:    [[_MSCMP:%.*]] = icmp ne i2 [[TMP12]], 0
-@@ -146,7 +146,7 @@
- ; CHECK-NEXT:    [[TMP8:%.*]] = or <4 x i64> [[TMP5]], [[TMP2]]
- ; CHECK-NEXT:    [[TMP9:%.*]] = or <4 x i64> [[TMP8]], [[TMP7]]
- ; CHECK-NEXT:    [[T:%.*]] = or <4 x i64> [[M]], <i64 0, i64 8, i64 16, i64 32>
--; CHECK-NEXT:    [[TMP10:%.*]] = trunc <4 x i64> [[T]] to <4 x i2>
-+; CHECK-NEXT:    [[TMP10:%.*]] = trunc <4 x i64> [[TMP9]] to <4 x i2>
- ; CHECK-NEXT:    [[_MSPROP1:%.*]] = call <4 x i64> @llvm.x86.avx512.vpermi2var.q.256(<4 x i64> [[TMP6]], <4 x i64> [[T]], <4 x i64> [[TMP3]])
- ; CHECK-NEXT:    [[TMP12:%.*]] = bitcast <4 x i2> [[TMP10]] to i8
- ; CHECK-NEXT:    [[_MSCMP:%.*]] = icmp ne i8 [[TMP12]], 0
-@@ -207,7 +207,7 @@
- ; CHECK-NEXT:    [[TMP8:%.*]] = or <8 x i64> [[TMP5]], [[TMP2]]
- ; CHECK-NEXT:    [[TMP9:%.*]] = or <8 x i64> [[TMP8]], [[TMP7]]
- ; CHECK-NEXT:    [[T:%.*]] = or <8 x i64> [[M]], <i64 0, i64 16, i64 32, i64 64, i64 256, i64 512, i64 1024, i64 -16>
--; CHECK-NEXT:    [[TMP10:%.*]] = trunc <8 x i64> [[T]] to <8 x i3>
-+; CHECK-NEXT:    [[TMP10:%.*]] = trunc <8 x i64> [[TMP9]] to <8 x i3>
- ; CHECK-NEXT:    [[_MSPROP1:%.*]] = call <8 x i64> @llvm.x86.avx512.vpermi2var.q.512(<8 x i64> [[TMP6]], <8 x i64> [[T]], <8 x i64> [[TMP3]])
- ; CHECK-NEXT:    [[TMP12:%.*]] = bitcast <8 x i3> [[TMP10]] to i24
- ; CHECK-NEXT:    [[_MSCMP:%.*]] = icmp ne i24 [[TMP12]], 0
-@@ -272,7 +272,7 @@
- ; CHECK-NEXT:    [[TMP8:%.*]] = or <4 x i32> [[TMP5]], [[TMP2]]
- ; CHECK-NEXT:    [[TMP9:%.*]] = or <4 x i32> [[TMP8]], [[TMP7]]
- ; CHECK-NEXT:    [[T:%.*]] = or <4 x i32> [[M]], <i32 0, i32 8, i32 16, i32 32>
--; CHECK-NEXT:    [[TMP10:%.*]] = trunc <4 x i32> [[T]] to <4 x i2>
-+; CHECK-NEXT:    [[TMP10:%.*]] = trunc <4 x i32> [[TMP9]] to <4 x i2>
- ; CHECK-NEXT:    [[_MSPROP1:%.*]] = call <4 x i32> @llvm.x86.avx512.vpermi2var.d.128(<4 x i32> [[TMP6]], <4 x i32> [[T]], <4 x i32> [[TMP3]])
- ; CHECK-NEXT:    [[TMP12:%.*]] = bitcast <4 x i2> [[TMP10]] to i8
- ; CHECK-NEXT:    [[_MSCMP:%.*]] = icmp ne i8 [[TMP12]], 0
-@@ -333,7 +333,7 @@
- ; CHECK-NEXT:    [[TMP8:%.*]] = or <8 x i32> [[TMP5]], [[TMP2]]
- ; CHECK-NEXT:    [[TMP9:%.*]] = or <8 x i32> [[TMP8]], [[TMP7]]
- ; CHECK-NEXT:    [[T:%.*]] = or <8 x i32> [[M]], <i32 0, i32 16, i32 32, i32 64, i32 256, i32 512, i32 -16, i32 -32>
--; CHECK-NEXT:    [[TMP10:%.*]] = trunc <8 x i32> [[T]] to <8 x i3>
-+; CHECK-NEXT:    [[TMP10:%.*]] = trunc <8 x i32> [[TMP9]] to <8 x i3>
- ; CHECK-NEXT:    [[_MSPROP1:%.*]] = call <8 x i32> @llvm.x86.avx512.vpermi2var.d.256(<8 x i32> [[TMP6]], <8 x i32> [[T]], <8 x i32> [[TMP3]])
- ; CHECK-NEXT:    [[TMP12:%.*]] = bitcast <8 x i3> [[TMP10]] to i24
- ; CHECK-NEXT:    [[_MSCMP:%.*]] = icmp ne i24 [[TMP12]], 0
-@@ -394,7 +394,7 @@
- ; CHECK-NEXT:    [[TMP8:%.*]] = or <16 x i32> [[TMP5]], [[TMP2]]
- ; CHECK-NEXT:    [[TMP9:%.*]] = or <16 x i32> [[TMP8]], [[TMP7]]
- ; CHECK-NEXT:    [[T:%.*]] = or <16 x i32> [[M]], <i32 0, i32 32, i32 64, i32 256, i32 512, i32 1024, i32 2048, i32 4096, i32 8192, i32 -32, i32 -64, i32 -128, i32 -256, i32 -512, i32 -1024, i32 -2048>
--; CHECK-NEXT:    [[TMP10:%.*]] = trunc <16 x i32> [[T]] to <16 x i4>
-+; CHECK-NEXT:    [[TMP10:%.*]] = trunc <16 x i32> [[TMP9]] to <16 x i4>
- ; CHECK-NEXT:    [[_MSPROP1:%.*]] = call <16 x i32> @llvm.x86.avx512.vpermi2var.d.512(<16 x i32> [[TMP6]], <16 x i32> [[T]], <16 x i32> [[TMP3]])
- ; CHECK-NEXT:    [[TMP12:%.*]] = bitcast <16 x i4> [[TMP10]] to i64
- ; CHECK-NEXT:    [[_MSCMP:%.*]] = icmp ne i64 [[TMP12]], 0
-@@ -459,7 +459,7 @@
- ; CHECK-NEXT:    [[TMP8:%.*]] = or <8 x i16> [[TMP5]], [[TMP2]]
- ; CHECK-NEXT:    [[TMP9:%.*]] = or <8 x i16> [[TMP8]], [[TMP7]]
- ; CHECK-NEXT:    [[T:%.*]] = or <8 x i16> [[M]], <i16 0, i16 16, i16 32, i16 64, i16 256, i16 512, i16 -16, i16 -32>
--; CHECK-NEXT:    [[TMP10:%.*]] = trunc <8 x i16> [[T]] to <8 x i3>
-+; CHECK-NEXT:    [[TMP10:%.*]] = trunc <8 x i16> [[TMP9]] to <8 x i3>
- ; CHECK-NEXT:    [[_MSPROP1:%.*]] = call <8 x i16> @llvm.x86.avx512.vpermi2var.hi.128(<8 x i16> [[TMP6]], <8 x i16> [[T]], <8 x i16> [[TMP3]])
- ; CHECK-NEXT:    [[TMP12:%.*]] = bitcast <8 x i3> [[TMP10]] to i24
- ; CHECK-NEXT:    [[_MSCMP:%.*]] = icmp ne i24 [[TMP12]], 0
-@@ -520,7 +520,7 @@
- ; CHECK-NEXT:    [[TMP8:%.*]] = or <16 x i16> [[TMP5]], [[TMP2]]
- ; CHECK-NEXT:    [[TMP9:%.*]] = or <16 x i16> [[TMP8]], [[TMP7]]
- ; CHECK-NEXT:    [[T:%.*]] = or <16 x i16> [[M]], <i16 0, i16 32, i16 64, i16 256, i16 512, i16 1024, i16 2048, i16 4096, i16 -32, i16 -64, i16 -128, i16 -256, i16 -512, i16 -1024, i16 -2048, i16 -4096>
--; CHECK-NEXT:    [[TMP10:%.*]] = trunc <16 x i16> [[T]] to <16 x i4>
-+; CHECK-NEXT:    [[TMP10:%.*]] = trunc <16 x i16> [[TMP9]] to <16 x i4>
- ; CHECK-NEXT:    [[_MSPROP1:%.*]] = call <16 x i16> @llvm.x86.avx512.vpermi2var.hi.256(<16 x i16> [[TMP6]], <16 x i16> [[T]], <16 x i16> [[TMP3]])
- ; CHECK-NEXT:    [[TMP12:%.*]] = bitcast <16 x i4> [[TMP10]] to i64
- ; CHECK-NEXT:    [[_MSCMP:%.*]] = icmp ne i64 [[TMP12]], 0
-@@ -581,7 +581,7 @@
- ; CHECK-NEXT:    [[TMP8:%.*]] = or <32 x i16> [[TMP5]], [[TMP2]]
- ; CHECK-NEXT:    [[TMP9:%.*]] = or <32 x i16> [[TMP8]], [[TMP7]]
- ; CHECK-NEXT:    [[T:%.*]] = or <32 x i16> [[M]], <i16 0, i16 64, i16 128, i16 256, i16 512, i16 1024, i16 2048, i16 4096, i16 0, i16 -64, i16 -128, i16 -256, i16 -512, i16 -1024, i16 -2048, i16 -4096, i16 0, i16 64, i16 128, i16 256, i16 512, i16 1024, i16 2048, i16 4096, i16 0, i16 -64, i16 -128, i16 -256, i16 -512, i16 -1024, i16 -2048, i16 -4096>
--; CHECK-NEXT:    [[TMP10:%.*]] = trunc <32 x i16> [[T]] to <32 x i5>
-+; CHECK-NEXT:    [[TMP10:%.*]] = trunc <32 x i16> [[TMP9]] to <32 x i5>
- ; CHECK-NEXT:    [[_MSPROP1:%.*]] = call <32 x i16> @llvm.x86.avx512.vpermi2var.hi.512(<32 x i16> [[TMP6]], <32 x i16> [[T]], <32 x i16> [[TMP3]])
- ; CHECK-NEXT:    [[TMP12:%.*]] = bitcast <32 x i5> [[TMP10]] to i160
- ; CHECK-NEXT:    [[_MSCMP:%.*]] = icmp ne i160 [[TMP12]], 0
-@@ -646,7 +646,7 @@
- ; CHECK-NEXT:    [[TMP8:%.*]] = or <16 x i8> [[TMP5]], [[TMP2]]
- ; CHECK-NEXT:    [[TMP9:%.*]] = or <16 x i8> [[TMP8]], [[TMP7]]
- ; CHECK-NEXT:    [[T:%.*]] = or <16 x i8> [[M]], <i8 0, i8 32, i8 64, i8 -128, i8 0, i8 -32, i8 -64, i8 -128, i8 0, i8 32, i8 64, i8 -128, i8 0, i8 -32, i8 -64, i8 -128>
--; CHECK-NEXT:    [[TMP10:%.*]] = trunc <16 x i8> [[T]] to <16 x i4>
-+; CHECK-NEXT:    [[TMP10:%.*]] = trunc <16 x i8> [[TMP9]] to <16 x i4>
- ; CHECK-NEXT:    [[_MSPROP1:%.*]] = call <16 x i8> @llvm.x86.avx512.vpermi2var.qi.128(<16 x i8> [[TMP6]], <16 x i8> [[T]], <16 x i8> [[TMP3]])
- ; CHECK-NEXT:    [[TMP12:%.*]] = bitcast <16 x i4> [[TMP10]] to i64
- ; CHECK-NEXT:    [[_MSCMP:%.*]] = icmp ne i64 [[TMP12]], 0
-@@ -707,7 +707,7 @@
- ; CHECK-NEXT:    [[TMP8:%.*]] = or <32 x i8> [[TMP5]], [[TMP2]]
- ; CHECK-NEXT:    [[TMP9:%.*]] = or <32 x i8> [[TMP8]], [[TMP7]]
- ; CHECK-NEXT:    [[T:%.*]] = or <32 x i8> [[M]], <i8 0, i8 0, i8 64, i8 -128, i8 0, i8 0, i8 -64, i8 -128, i8 0, i8 0, i8 64, i8 -128, i8 0, i8 0, i8 -64, i8 -128, i8 0, i8 0, i8 64, i8 -128, i8 0, i8 0, i8 -64, i8 -128, i8 0, i8 0, i8 64, i8 -128, i8 0, i8 0, i8 -64, i8 -128>
--; CHECK-NEXT:    [[TMP10:%.*]] = trunc <32 x i8> [[T]] to <32 x i5>
-+; CHECK-NEXT:    [[TMP10:%.*]] = trunc <32 x i8> [[TMP9]] to <32 x i5>
- ; CHECK-NEXT:    [[_MSPROP1:%.*]] = call <32 x i8> @llvm.x86.avx512.vpermi2var.qi.256(<32 x i8> [[TMP6]], <32 x i8> [[T]], <32 x i8> [[TMP3]])
- ; CHECK-NEXT:    [[TMP12:%.*]] = bitcast <32 x i5> [[TMP10]] to i160
- ; CHECK-NEXT:    [[_MSCMP:%.*]] = icmp ne i160 [[TMP12]], 0
-@@ -768,7 +768,7 @@
- ; CHECK-NEXT:    [[TMP8:%.*]] = or <64 x i8> [[TMP5]], [[TMP2]]
- ; CHECK-NEXT:    [[TMP9:%.*]] = or <64 x i8> [[TMP8]], [[TMP7]]
- ; CHECK-NEXT:    [[T:%.*]] = or <64 x i8> [[M]], <i8 0, i8 -128, i8 0, i8 -128, i8 0, i8 -128, i8 0, i8 -128, i8 0, i8 -128, i8 0, i8 -128, i8 0, i8 -128, i8 0, i8 -128, i8 0, i8 -128, i8 0, i8 -128, i8 0, i8 -128, i8 0, i8 -128, i8 0, i8 -128, i8 0, i8 -128, i8 0, i8 -128, i8 0, i8 -128, i8 0, i8 -128, i8 0, i8 -128, i8 0, i8 -128, i8 0, i8 -128, i8 0, i8 -128, i8 0, i8 -128, i8 0, i8 -128, i8 0, i8 -128, i8 0, i8 -128, i8 0, i8 -128, i8 0, i8 -128, i8 0, i8 -128, i8 0, i8 -128, i8 0, i8 -128, i8 0, i8 -128, i8 0, i8 -128>
--; CHECK-NEXT:    [[TMP10:%.*]] = trunc <64 x i8> [[T]] to <64 x i6>
-+; CHECK-NEXT:    [[TMP10:%.*]] = trunc <64 x i8> [[TMP9]] to <64 x i6>
- ; CHECK-NEXT:    [[_MSPROP1:%.*]] = call <64 x i8> @llvm.x86.avx512.vpermi2var.qi.512(<64 x i8> [[TMP6]], <64 x i8> [[T]], <64 x i8> [[TMP3]])
- ; CHECK-NEXT:    [[TMP12:%.*]] = bitcast <64 x i6> [[TMP10]] to i384
- ; CHECK-NEXT:    [[_MSCMP:%.*]] = icmp ne i384 [[TMP12]], 0
-diff -ruN --strip-trailing-cr a/llvm/test/Transforms/Coroutines/coro-split-dbg-labels.ll b/llvm/test/Transforms/Coroutines/coro-split-dbg-labels.ll
---- a/llvm/test/Transforms/Coroutines/coro-split-dbg-labels.ll
-+++ b/llvm/test/Transforms/Coroutines/coro-split-dbg-labels.ll
-@@ -1,14 +1,19 @@
- ; Tests that we add DILabels for the suspend points.
- ;
--; We check both the generated LLVM:
-+; Check the generated LLVM:
- ; RUN: opt < %s -passes='cgscc(coro-split)' -S | FileCheck %s
- ;
--; And the debug info:
-+; Check the generated DWARF debug info:
- ; REQUIRES: object-emission
- ; RUN: opt < %s -passes='cgscc(coro-split),coro-cleanup' \
- ; RUN:   | %llc_dwarf -O0 -filetype=obj -o - \
- ; RUN:   | llvm-dwarfdump - \
- ; RUN:   | FileCheck %s -check-prefix=DWARF
-+;
-+; Check that we don't emit any DILabel if in `LineTablesOnly` mode
-+; RUN: sed -e 's/emissionKind: FullDebug/emissionKind: LineTablesOnly/' %s \
-+; RUN:   | opt -passes='cgscc(coro-split)' -S \
-+; RUN:   | FileCheck %s -check-prefix=LINE-TABLE
+@@ -2292,9 +2310,9 @@
+     name = "__support_math_ldexpf16",
+     hdrs = ["src/__support/math/ldexpf16.h"],
+     deps = [
+-        ":__support_macros_properties_types",
+         ":__support_fputil_manipulation_functions",
+-        ":llvm_libc_macros_float16_macros"
++        ":__support_macros_properties_types",
++        ":llvm_libc_macros_float16_macros",
+     ],
+ )
  
- source_filename = "coro.c"
+@@ -2318,8 +2336,8 @@
+     name = "__support_math_exp_utils",
+     hdrs = ["src/__support/math/exp_utils.h"],
+     deps = [
+-        ":__support_cpp_optional",
+         ":__support_cpp_bit",
++        ":__support_cpp_optional",
+         ":__support_fputil_fp_bits",
+     ],
+ )
+@@ -2328,10 +2346,9 @@
+     name = "__support_math_exp",
+     hdrs = ["src/__support/math/exp.h"],
+     deps = [
+-        ":__support_math_exp_constants",
+-        ":__support_math_exp_utils",
+         ":__support_cpp_bit",
+         ":__support_cpp_optional",
++        ":__support_fputil_double_double",
+         ":__support_fputil_dyadic_float",
+         ":__support_fputil_fenv_impl",
+         ":__support_fputil_fp_bits",
+@@ -2340,9 +2357,10 @@
+         ":__support_fputil_polyeval",
+         ":__support_fputil_rounding_mode",
+         ":__support_fputil_triple_double",
+-        ":__support_fputil_double_double",
+         ":__support_integer_literals",
+         ":__support_macros_optimization",
++        ":__support_math_exp_constants",
++        ":__support_math_exp_utils",
+     ],
+ )
  
-@@ -83,6 +88,12 @@
- ; CHECK: ![[DESTROY_0]] = !DILabel(scope: !{{[0-9]+}}, name: "__coro_resume_0", file: !{{[0-9]*}}, line: 12, column: 6, isArtificial: true, coroSuspendIdx: 0)
- ; CHECK: ![[DESTROY_1]] = !DILabel(scope: !{{[0-9]+}}, name: "__coro_resume_1", file: !{{[0-9]*}}, line: 14, column: 6, isArtificial: true, coroSuspendIdx: 1)
+@@ -2350,8 +2368,6 @@
+     name = "__support_math_exp10",
+     hdrs = ["src/__support/math/exp10.h"],
+     deps = [
+-        ":__support_math_exp_constants",
+-        ":__support_math_exp_utils",
+         ":__support_fputil_double_double",
+         ":__support_fputil_dyadic_float",
+         ":__support_fputil_multiply_add",
+@@ -2361,6 +2377,8 @@
+         ":__support_fputil_triple_double",
+         ":__support_integer_literals",
+         ":__support_macros_optimization",
++        ":__support_math_exp_constants",
++        ":__support_math_exp_utils",
+     ],
+ )
  
-+; Check the we do not emit any DILabels in LineTablesOnly mode.
-+; The DWARF emitter cannot handle this and would run into an assertion.
-+; LINE-TABLE: !DICompileUnit{{.*}}LineTablesOnly
-+; LINE-TABLE-NOT: DILabel
-+
-+
- ; DWARF:        {{.*}}DW_TAG_label
- ; DWARF-NEXT:    DW_AT_name ("__coro_resume_0")
- ; DWARF-NEXT:    DW_AT_decl_file
-diff -ruN --strip-trailing-cr a/mlir/lib/Target/IRDLToCpp/TemplatingUtils.h b/mlir/lib/Target/IRDLToCpp/TemplatingUtils.h
---- a/mlir/lib/Target/IRDLToCpp/TemplatingUtils.h
-+++ b/mlir/lib/Target/IRDLToCpp/TemplatingUtils.h
-@@ -15,6 +15,7 @@
- #include "llvm/Support/ErrorHandling.h"
- #include "llvm/Support/raw_ostream.h"
- #include <variant>
-+#include <vector>
+@@ -2368,12 +2386,12 @@
+     name = "__support_math_exp10f_utils",
+     hdrs = ["src/__support/math/exp10f_utils.h"],
+     deps = [
++        ":__support_common",
+         ":__support_fputil_basic_operations",
+         ":__support_fputil_fenv_impl",
+         ":__support_fputil_multiply_add",
+         ":__support_fputil_nearest_integer",
+         ":__support_fputil_polyeval",
+-        ":__support_common",
+         ":__support_math_exp_utils",
+     ],
+ )
+@@ -2382,12 +2400,12 @@
+     name = "__support_math_exp10f",
+     hdrs = ["src/__support/math/exp10f.h"],
+     deps = [
+-        ":__support_math_exp10f_utils",
+         ":__support_fputil_fenv_impl",
+         ":__support_fputil_fp_bits",
+         ":__support_fputil_multiply_add",
+         ":__support_fputil_rounding_mode",
+         ":__support_macros_optimization",
++        ":__support_math_exp10f_utils",
+     ],
+ )
  
- namespace mlir::irdl::detail {
+@@ -2403,9 +2421,9 @@
+     name = "__support_math_exp10f16_utils",
+     hdrs = ["src/__support/math/exp10f16_utils.h"],
+     deps = [
++        ":__support_fputil_fp_bits",
+         ":__support_math_exp10_float16_constants",
+         ":__support_math_expf16_utils",
+-        ":__support_fputil_fp_bits",
+     ],
+ )
  
-diff -ruN --strip-trailing-cr a/utils/bazel/llvm-project-overlay/mlir/BUILD.bazel b/utils/bazel/llvm-project-overlay/mlir/BUILD.bazel
---- a/utils/bazel/llvm-project-overlay/mlir/BUILD.bazel
-+++ b/utils/bazel/llvm-project-overlay/mlir/BUILD.bazel
-@@ -4015,6 +4015,7 @@
-         ":VectorToSCF",
-         ":VectorToSPIRV",
-         ":VectorToXeGPU",
-+        ":XeVMToLLVM",
+@@ -2413,13 +2431,13 @@
+     name = "__support_math_exp10f16",
+     hdrs = ["src/__support/math/exp10f16.h"],
+     deps = [
+-        ":__support_math_exp10f16_utils",
+-        ":__support_fputil_fp_bits",
+         ":__support_fputil_cast",
+-        ":__support_fputil_rounding_mode",
+         ":__support_fputil_except_value_utils",
++        ":__support_fputil_fp_bits",
++        ":__support_fputil_rounding_mode",
+         ":__support_macros_optimization",
+         ":__support_macros_properties_cpu_features",
++        ":__support_math_exp10f16_utils",
      ],
  )
  
-@@ -4639,6 +4640,7 @@
-         ":VCIXToLLVMIRTranslation",
-         ":VectorToLLVM",
-         ":VectorTransformOps",
-+        ":XeVMToLLVM",
+@@ -2991,7 +3009,7 @@
+ libc_math_function(
+     name = "erff",
+     additional_deps = [
+-        ":__support_math_erff"
++        ":__support_math_erff",
      ],
  )
  
-@@ -13644,3 +13646,28 @@
-     td_file = "include/mlir/Dialect/LLVMIR/XeVMOps.td",
-     deps = [":XeVMTdFiles"],
+@@ -3462,13 +3480,13 @@
+     name = "frexpf128",
+     additional_deps = [
+         ":__support_math_frexpf128",
+-    ]
++    ],
  )
-+
-+cc_library(
-+    name = "XeVMToLLVM",
-+    srcs = glob([
-+        "lib/Conversion/XeVMToLLVM/*.cpp",
-+    ]),
-+    hdrs = glob([
-+        "include/mlir/Conversion/XeVMToLLVM/*.h",
-+    ]),
-+    includes = ["include"],
-+    deps = [
-+        ":XeVMDialect",
-+        ":ConversionPassIncGen",
-+	":ConvertToLLVMInterface",
-+	":GPUDialect",
-+        ":IR",
-+	":LLVMCommonConversion",
-+	":LLVMDialect",
-+        ":Pass",
-+	":Support",
-+        ":TransformUtils",
-+        ":VectorDialect",
-+	"//llvm:Support",
+ 
+ libc_math_function(
+     name = "frexpf16",
+     additional_deps = [
+-        ":__support_math_frexpf16"
++        ":__support_math_frexpf16",
+     ],
+ )
+ 
+@@ -3563,7 +3581,7 @@
+     name = "ldexpf",
+     additional_deps = [
+         ":__support_math_ldexpf",
+-    ]
 +    ],
-+)
-diff -ruN --strip-trailing-cr a/utils/bazel/llvm-project-overlay/mlir/python/BUILD.bazel b/utils/bazel/llvm-project-overlay/mlir/python/BUILD.bazel
---- a/utils/bazel/llvm-project-overlay/mlir/python/BUILD.bazel
-+++ b/utils/bazel/llvm-project-overlay/mlir/python/BUILD.bazel
-@@ -701,6 +701,32 @@
  )
  
- ##---------------------------------------------------------------------------##
-+# Tune dialect.
-+##---------------------------------------------------------------------------##
+ libc_math_function(name = "ldexpl")
+diff -ruN --strip-trailing-cr a/utils/bazel/llvm-project-overlay/libc/test/src/__support/FPUtil/BUILD.bazel b/utils/bazel/llvm-project-overlay/libc/test/src/__support/FPUtil/BUILD.bazel
+--- a/utils/bazel/llvm-project-overlay/libc/test/src/__support/FPUtil/BUILD.bazel
++++ b/utils/bazel/llvm-project-overlay/libc/test/src/__support/FPUtil/BUILD.bazel
+@@ -58,3 +58,15 @@
+         "//libc/utils/MPFRWrapper:mpfr_wrapper",
+     ],
+ )
 +
-+gentbl_filegroup(
-+    name = "TuneTransformOpsPyGen",
-+    tbl_outs = {"mlir/dialects/_transform_tune_extension_ops_gen.py": [
-+        "-gen-python-op-bindings",
-+        "-bind-dialect=transform",
-+        "-dialect-extension=transform_tune_extension",
-+    ]},
-+    tblgen = "//mlir:mlir-tblgen",
-+    td_file = "mlir/dialects/TransformTuneExtensionOps.td",
++libc_test(
++    name = "comparison_operations_test",
++    srcs = ["comparison_operations_test.cpp"],
 +    deps = [
-+        "//mlir:TransformTuneExtensionTdFiles",
++        "//libc:__support_fputil_bfloat16",
++        "//libc:__support_fputil_comparison_operations",
++        "//libc:__support_fputil_rounding_mode",
++        "//libc:__support_macros_properties_types",
++        "//libc/test/UnitTest:fp_test_helpers",
 +    ],
 +)
-+
-+filegroup(
-+    name = "TunePyFiles",
-+    srcs = [
-+        "mlir/dialects/transform/tune.py",
-+        ":TuneTransformOpsPyGen",
-+    ],
-+)
-+
-+##---------------------------------------------------------------------------##
- # PythonTest dialect.
- ##---------------------------------------------------------------------------##
- 
+diff -ruN --strip-trailing-cr a/utils/bazel/llvm-project-overlay/libc/utils/MPFRWrapper/BUILD.bazel b/utils/bazel/llvm-project-overlay/libc/utils/MPFRWrapper/BUILD.bazel
+--- a/utils/bazel/llvm-project-overlay/libc/utils/MPFRWrapper/BUILD.bazel
++++ b/utils/bazel/llvm-project-overlay/libc/utils/MPFRWrapper/BUILD.bazel
+@@ -44,6 +44,7 @@
+         "//libc:__support_cpp_type_traits",
+         "//libc:__support_fputil_bfloat16",
+         "//libc:__support_fputil_cast",
++        "//libc:__support_fputil_comparison_operations",
+         "//libc:__support_fputil_fp_bits",
+         "//libc:__support_macros_config",
+         "//libc:__support_macros_properties_types",
diff --git a/third_party/llvm/memcpy.patch b/third_party/llvm/memcpy.patch
deleted file mode 100644
index c6cc824..0000000
--- a/third_party/llvm/memcpy.patch
+++ /dev/null
@@ -1,62 +0,0 @@
-diff --git a/llvm/include/llvm/ADT/Hashing.h b/llvm/include/llvm/ADT/Hashing.h
-index 0093c281aac8..ad131015a7d9 100644
---- a/llvm/include/llvm/ADT/Hashing.h
-+++ b/llvm/include/llvm/ADT/Hashing.h
-@@ -136,7 +136,7 @@ namespace detail {
- 
- inline uint64_t fetch64(const char *p) {
-   uint64_t result;
--  memcpy(&result, p, sizeof(result));
-+  std::memcpy(&result, p, sizeof(result));
-   if (sys::IsBigEndianHost)
-     sys::swapByteOrder(result);
-   return result;
-@@ -144,7 +144,7 @@ inline uint64_t fetch64(const char *p) {
- 
- inline uint32_t fetch32(const char *p) {
-   uint32_t result;
--  memcpy(&result, p, sizeof(result));
-+  std::memcpy(&result, p, sizeof(result));
-   if (sys::IsBigEndianHost)
-     sys::swapByteOrder(result);
-   return result;
-@@ -379,7 +379,7 @@ bool store_and_advance(char *&buffer_ptr, char *buffer_end, const T& value,
-   if (buffer_ptr + store_size > buffer_end)
-     return false;
-   const char *value_data = reinterpret_cast<const char *>(&value);
--  memcpy(buffer_ptr, value_data + offset, store_size);
-+  std::memcpy(buffer_ptr, value_data + offset, store_size);
-   buffer_ptr += store_size;
-   return true;
- }
-@@ -513,7 +513,7 @@ public:
-       // with the variadic combine because that formation can have varying
-       // argument types.
-       size_t partial_store_size = buffer_end - buffer_ptr;
--      memcpy(buffer_ptr, &data, partial_store_size);
-+      std::memcpy(buffer_ptr, &data, partial_store_size);
- 
-       // If the store fails, our buffer is full and ready to hash. We have to
-       // either initialize the hash state (on the first full buffer) or mix
-diff --git a/llvm/include/llvm/ADT/SmallVector.h b/llvm/include/llvm/ADT/SmallVector.h
-index 0b8bb48b8fe5..80f7734b8690 100644
---- a/llvm/include/llvm/ADT/SmallVector.h
-+++ b/llvm/include/llvm/ADT/SmallVector.h
-@@ -518,7 +518,7 @@ protected:
-     // use memcpy here. Note that I and E are iterators and thus might be
-     // invalid for memcpy if they are equal.
-     if (I != E)
--      memcpy(reinterpret_cast<void *>(Dest), I, (E - I) * sizeof(T));
-+      std::memcpy(reinterpret_cast<void *>(Dest), I, (E - I) * sizeof(T));
-   }
- 
-   /// Double the size of the allocated memory, guaranteeing space for at
-@@ -561,7 +561,7 @@ protected:
- public:
-   void push_back(ValueParamT Elt) {
-     const T *EltPtr = reserveForParamAndGetAddress(Elt);
--    memcpy(reinterpret_cast<void *>(this->end()), EltPtr, sizeof(T));
-+    std::memcpy(reinterpret_cast<void *>(this->end()), EltPtr, sizeof(T));
-     this->set_size(this->size() + 1);
-   }
- 
diff --git a/third_party/llvm/workspace.bzl b/third_party/llvm/workspace.bzl
index a338a8f..189d649 100644
--- a/third_party/llvm/workspace.bzl
+++ b/third_party/llvm/workspace.bzl
@@ -4,8 +4,8 @@ load("//third_party:repo.bzl", "tf_http_archive")
 
 def repo(name):
     """Imports LLVM."""
-    LLVM_COMMIT = "0a343098b0ea300b75f16596db2dc32a55007546"
-    LLVM_SHA256 = "7865992af73fceffb9ddb823eea5987698d9e98e8ed7a4a0a214caae8d2771f9"
+    LLVM_COMMIT = "22b0835390516c2150c040521885c473f3a1e87e"
+    LLVM_SHA256 = "963953aedf9f6e5fdc16cdb3a64d93d80ab6159078c307216f4f49ab7be81d2b"
 
     tf_http_archive(
         name = name,
@@ -20,7 +20,6 @@ def repo(name):
             "//third_party/llvm:generated.patch",  # Autogenerated, don't remove.
             "//third_party/llvm:build.patch",
             "//third_party/llvm:mathextras.patch",
-            "//third_party/llvm:memcpy.patch",
             "//third_party/llvm:toolchains.patch",
             "//third_party/llvm:zstd.patch",
         ],
diff --git a/third_party/stablehlo/temporary.patch b/third_party/stablehlo/temporary.patch
index 1024e41..2a7842d 100755
--- a/third_party/stablehlo/temporary.patch
+++ b/third_party/stablehlo/temporary.patch
@@ -220,6 +220,33 @@ diff --ruN a/stablehlo/stablehlo/dialect/StablehloOps.cpp b/stablehlo/stablehlo/
      locs.push_back(i.getLoc());
    }
  
+diff --ruN a/stablehlo/stablehlo/dialect/StablehloOps.td b/stablehlo/stablehlo/dialect/StablehloOps.td
+--- stablehlo/stablehlo/dialect/StablehloOps.td
++++ stablehlo/stablehlo/dialect/StablehloOps.td
+@@ -1245,11 +1245,6 @@
+   );
+ 
+   let results = (outs HLO_Token);
+-  let builders = [
+-    OpBuilder<(ins
+-      "::mlir::Type":$result_type, "::mlir::Value":$operand,
+-      "::mlir::DenseIntElementsAttr":$source_target_pairs,
+-      "::mlir::stablehlo::ChannelHandleAttr":$channel_handle)>];
+ }
+ 
+ def StableHLO_RecvOp : StableHLO_Op<"recv", [
+@@ -1279,11 +1274,6 @@
+     DefaultValuedOptionalAttr<BoolAttr, "false">:$is_host_transfer, /*recv_i4*/
+     OptionalAttr<I64ElementsAttr>:$source_target_pairs /*recv_i5*/
+   );
+-  let builders = [
+-    OpBuilder<(ins
+-      "::mlir::Type":$result_type, "::mlir::Value":$operand,
+-      "::mlir::DenseIntElementsAttr":$source_target_pairs,
+-      "::mlir::stablehlo::ChannelHandleAttr":$channel_handle)>];
+ 
+   let results = (outs Variadic<HLO_StaticShapeTensorOrPerAxisQuantizedTensorOrToken>);
+   let hasVerifier = 1;
 diff --ruN a/stablehlo/stablehlo/dialect/TypeInference.cpp b/stablehlo/stablehlo/dialect/TypeInference.cpp
 --- stablehlo/stablehlo/dialect/TypeInference.cpp
 +++ stablehlo/stablehlo/dialect/TypeInference.cpp
