diff --git a/third_party/llvm/generated.patch b/third_party/llvm/generated.patch
index eb1c8a4..8617d02 100644
--- a/third_party/llvm/generated.patch
+++ b/third_party/llvm/generated.patch
@@ -1,171 +1,841 @@
 Auto generated patch. Do not edit or delete it, even if empty.
-diff -ruN --strip-trailing-cr a/clang/lib/CodeGen/CGBuiltin.cpp b/clang/lib/CodeGen/CGBuiltin.cpp
---- a/clang/lib/CodeGen/CGBuiltin.cpp
-+++ b/clang/lib/CodeGen/CGBuiltin.cpp
-@@ -859,24 +859,6 @@
-   StoreCos->setMetadata(LLVMContext::MD_noalias, AliasScopeList);
- }
- 
--static llvm::Value *emitModfBuiltin(CodeGenFunction &CGF, const CallExpr *E,
--                                    llvm::Intrinsic::ID IntrinsicID) {
--  llvm::Value *Val = CGF.EmitScalarExpr(E->getArg(0));
--  llvm::Value *IntPartDest = CGF.EmitScalarExpr(E->getArg(1));
--
--  llvm::Value *Call =
--      CGF.Builder.CreateIntrinsic(IntrinsicID, {Val->getType()}, Val);
--
--  llvm::Value *FractionalResult = CGF.Builder.CreateExtractValue(Call, 0);
--  llvm::Value *IntegralResult = CGF.Builder.CreateExtractValue(Call, 1);
--
--  QualType DestPtrType = E->getArg(1)->getType()->getPointeeType();
--  LValue IntegralLV = CGF.MakeNaturalAlignAddrLValue(IntPartDest, DestPtrType);
--  CGF.EmitStoreOfScalar(IntegralResult, IntegralLV);
--
--  return FractionalResult;
--}
+diff -ruN --strip-trailing-cr a/mlir/include/mlir/Dialect/Tosa/IR/TosaComplianceData.h b/mlir/include/mlir/Dialect/Tosa/IR/TosaComplianceData.h
+--- a/mlir/include/mlir/Dialect/Tosa/IR/TosaComplianceData.h
++++ b/mlir/include/mlir/Dialect/Tosa/IR/TosaComplianceData.h
+@@ -1,403 +0,0 @@
+-// The profile-based compliance content below is auto-generated by the script
+-// `tools/genspec.py` in https://git.mlplatform.org/tosa/specification.git
+-profileComplianceMap = {
+-    {"tosa.argmax",
+-     {{{Profile::pro_int}, {{i8T, i32T}}},
+-      {{Profile::pro_fp}, {{fp16T, i32T}, {fp32T, i32T}}}}},
+-    {"tosa.avg_pool2d",
+-     {{{Profile::pro_int}, {{i8T, i32T, i8T}}},
+-      {{Profile::pro_fp},
+-       {{fp16T, fp16T, fp16T}, {fp16T, fp32T, fp16T}, {fp32T, fp32T, fp32T}}}}},
+-    {"tosa.conv2d",
+-     {{{Profile::pro_int}, {{i8T, i8T, i32T, i32T, i32T}}},
+-      {{Profile::pro_fp},
+-       {{fp16T, fp16T, fp16T, fp16T, fp16T},
+-        {fp16T, fp16T, fp16T, fp32T, fp16T},
+-        {fp32T, fp32T, fp32T, fp32T, fp32T}}}}},
+-    {"tosa.conv3d",
+-     {{{Profile::pro_int}, {{i8T, i8T, i32T, i32T, i32T}}},
+-      {{Profile::pro_fp},
+-       {{fp16T, fp16T, fp16T, fp16T, fp16T},
+-        {fp16T, fp16T, fp16T, fp32T, fp16T},
+-        {fp32T, fp32T, fp32T, fp32T, fp32T}}}}},
+-    {"tosa.depthwise_conv2d",
+-     {{{Profile::pro_int}, {{i8T, i8T, i32T, i32T, i32T}}},
+-      {{Profile::pro_fp},
+-       {{fp16T, fp16T, fp16T, fp16T, fp16T},
+-        {fp16T, fp16T, fp16T, fp32T, fp16T},
+-        {fp32T, fp32T, fp32T, fp32T, fp32T}}}}},
+-    {"tosa.fully_connected",
+-     {{{Profile::pro_int}, {{i8T, i8T, i32T, i32T}}},
+-      {{Profile::pro_fp},
+-       {{fp16T, fp16T, fp16T, fp16T},
+-        {fp16T, fp16T, fp32T, fp32T},
+-        {fp32T, fp32T, fp32T, fp32T}}}}},
+-    {"tosa.matmul",
+-     {{{Profile::pro_int}, {{i8T, i8T, i32T}}},
+-      {{Profile::pro_fp},
+-       {{fp16T, fp16T, fp16T}, {fp16T, fp16T, fp32T}, {fp32T, fp32T, fp32T}}}}},
+-    {"tosa.max_pool2d",
+-     {{{Profile::pro_int}, {{i8T, i8T}}},
+-      {{Profile::pro_fp}, {{fp16T, fp16T}, {fp32T, fp32T}}}}},
+-    {"tosa.transpose_conv2d",
+-     {{{Profile::pro_int}, {{i8T, i8T, i32T, i32T, i32T}}},
+-      {{Profile::pro_fp},
+-       {{fp16T, fp16T, fp16T, fp16T, fp16T},
+-        {fp16T, fp16T, fp16T, fp32T, fp16T},
+-        {fp32T, fp32T, fp32T, fp32T, fp32T}}}}},
+-    {"tosa.clamp",
+-     {{{Profile::pro_int}, {{i8T, i8T}}},
+-      {{Profile::pro_fp}, {{fp16T, fp16T}, {fp32T, fp32T}}}}},
+-    {"tosa.erf", {{{Profile::pro_fp}, {{fp16T, fp16T}, {fp32T, fp32T}}}}},
+-    {"tosa.sigmoid", {{{Profile::pro_fp}, {{fp16T, fp16T}, {fp32T, fp32T}}}}},
+-    {"tosa.tanh", {{{Profile::pro_fp}, {{fp16T, fp16T}, {fp32T, fp32T}}}}},
+-    {"tosa.add",
+-     {{{Profile::pro_int, Profile::pro_fp}, {{i32T, i32T, i32T}}},
+-      {{Profile::pro_fp}, {{fp16T, fp16T, fp16T}, {fp32T, fp32T, fp32T}}}}},
+-    {"tosa.arithmetic_right_shift",
+-     {{{Profile::pro_int},
+-       {{i8T, i8T, i8T}, {i16T, i16T, i16T}, {i32T, i32T, i32T}}}}},
+-    {"tosa.bitwise_and",
+-     {{{Profile::pro_int},
+-       {{i8T, i8T, i8T}, {i16T, i16T, i16T}, {i32T, i32T, i32T}}}}},
+-    {"tosa.bitwise_or",
+-     {{{Profile::pro_int},
+-       {{i8T, i8T, i8T}, {i16T, i16T, i16T}, {i32T, i32T, i32T}}}}},
+-    {"tosa.bitwise_xor",
+-     {{{Profile::pro_int},
+-       {{i8T, i8T, i8T}, {i16T, i16T, i16T}, {i32T, i32T, i32T}}}}},
+-    {"tosa.intdiv",
+-     {{{Profile::pro_int, Profile::pro_fp}, {{i32T, i32T, i32T}}}}},
+-    {"tosa.logical_and",
+-     {{{Profile::pro_int, Profile::pro_fp}, {{boolT, boolT, boolT}}}}},
+-    {"tosa.logical_left_shift",
+-     {{{Profile::pro_int, Profile::pro_fp},
+-       {{i8T, i8T, i8T}, {i16T, i16T, i16T}, {i32T, i32T, i32T}}}}},
+-    {"tosa.logical_right_shift",
+-     {{{Profile::pro_int, Profile::pro_fp},
+-       {{i8T, i8T, i8T}, {i16T, i16T, i16T}, {i32T, i32T, i32T}}}}},
+-    {"tosa.logical_or",
+-     {{{Profile::pro_int, Profile::pro_fp}, {{boolT, boolT, boolT}}}}},
+-    {"tosa.logical_xor",
+-     {{{Profile::pro_int, Profile::pro_fp}, {{boolT, boolT, boolT}}}}},
+-    {"tosa.maximum",
+-     {{{Profile::pro_int}, {{i32T, i32T, i32T}}},
+-      {{Profile::pro_fp}, {{fp16T, fp16T, fp16T}, {fp32T, fp32T, fp32T}}}}},
+-    {"tosa.minimum",
+-     {{{Profile::pro_int}, {{i32T, i32T, i32T}}},
+-      {{Profile::pro_fp}, {{fp16T, fp16T, fp16T}, {fp32T, fp32T, fp32T}}}}},
+-    {"tosa.mul",
+-     {{{Profile::pro_int}, {{i8T, i8T, i32T}, {i16T, i16T, i32T}}},
+-      {{Profile::pro_int, Profile::pro_fp}, {{i32T, i32T, i32T}}},
+-      {{Profile::pro_fp}, {{fp16T, fp16T, fp16T}, {fp32T, fp32T, fp32T}}}}},
+-    {"tosa.pow",
+-     {{{Profile::pro_fp}, {{fp16T, fp16T, fp16T}, {fp32T, fp32T, fp32T}}}}},
+-    {"tosa.sub",
+-     {{{Profile::pro_int, Profile::pro_fp}, {{i32T, i32T, i32T}}},
+-      {{Profile::pro_fp}, {{fp16T, fp16T, fp16T}, {fp32T, fp32T, fp32T}}}}},
+-    {"tosa.table", {{{Profile::pro_int}, {{i8T, i8T, i8T}}}}},
+-    {"tosa.abs",
+-     {{{Profile::pro_int}, {{i32T, i32T}}},
+-      {{Profile::pro_fp}, {{fp16T, fp16T}, {fp32T, fp32T}}}}},
+-    {"tosa.bitwise_not",
+-     {{{Profile::pro_int}, {{i8T, i8T}, {i16T, i16T}, {i32T, i32T}}}}},
+-    {"tosa.ceil", {{{Profile::pro_fp}, {{fp16T, fp16T}, {fp32T, fp32T}}}}},
+-    {"tosa.clz", {{{Profile::pro_int}, {{i32T, i32T}}}}},
+-    {"tosa.cos", {{{Profile::pro_fp}, {{fp16T, fp16T}, {fp32T, fp32T}}}}},
+-    {"tosa.exp", {{{Profile::pro_fp}, {{fp16T, fp16T}, {fp32T, fp32T}}}}},
+-    {"tosa.floor", {{{Profile::pro_fp}, {{fp16T, fp16T}, {fp32T, fp32T}}}}},
+-    {"tosa.log", {{{Profile::pro_fp}, {{fp16T, fp16T}, {fp32T, fp32T}}}}},
+-    {"tosa.logical_not",
+-     {{{Profile::pro_int, Profile::pro_fp}, {{boolT, boolT}}}}},
+-    {"tosa.negate",
+-     {{{Profile::pro_int}, {{i8T, i8T}, {i16T, i16T}, {i32T, i32T}}},
+-      {{Profile::pro_fp}, {{fp16T, fp16T}, {fp32T, fp32T}}}}},
+-    {"tosa.reciprocal",
+-     {{{Profile::pro_fp}, {{fp16T, fp16T}, {fp32T, fp32T}}}}},
+-    {"tosa.rsqrt", {{{Profile::pro_fp}, {{fp16T, fp16T}, {fp32T, fp32T}}}}},
+-    {"tosa.select",
+-     {{{Profile::pro_int, Profile::pro_fp}, {{boolT, boolT, boolT}}},
+-      {{Profile::pro_int},
+-       {{i8T, i8T, i8T}, {i16T, i16T, i16T}, {i32T, i32T, i32T}}},
+-      {{Profile::pro_fp}, {{fp16T, fp16T, fp16T}, {fp32T, fp32T, fp32T}}}}},
+-    {"tosa.sin", {{{Profile::pro_fp}, {{fp16T, fp16T}, {fp32T, fp32T}}}}},
+-    {"tosa.equal",
+-     {{{Profile::pro_int}, {{i32T, i32T, boolT}}},
+-      {{Profile::pro_fp}, {{fp16T, fp16T, boolT}, {fp32T, fp32T, boolT}}}}},
+-    {"tosa.greater",
+-     {{{Profile::pro_int}, {{i32T, i32T, boolT}}},
+-      {{Profile::pro_fp}, {{fp16T, fp16T, boolT}, {fp32T, fp32T, boolT}}}}},
+-    {"tosa.greater_equal",
+-     {{{Profile::pro_int}, {{i32T, i32T, boolT}}},
+-      {{Profile::pro_fp}, {{fp16T, fp16T, boolT}, {fp32T, fp32T, boolT}}}}},
+-    {"tosa.reduce_all",
+-     {{{Profile::pro_int, Profile::pro_fp}, {{boolT, boolT}}}}},
+-    {"tosa.reduce_any",
+-     {{{Profile::pro_int, Profile::pro_fp}, {{boolT, boolT}}}}},
+-    {"tosa.reduce_max",
+-     {{{Profile::pro_int}, {{i8T, i8T}, {i16T, i16T}, {i32T, i32T}}},
+-      {{Profile::pro_fp}, {{fp16T, fp16T}, {fp32T, fp32T}}}}},
+-    {"tosa.reduce_min",
+-     {{{Profile::pro_int}, {{i8T, i8T}, {i16T, i16T}, {i32T, i32T}}},
+-      {{Profile::pro_fp}, {{fp16T, fp16T}, {fp32T, fp32T}}}}},
+-    {"tosa.reduce_product",
+-     {{{Profile::pro_fp}, {{fp16T, fp16T}, {fp32T, fp32T}}}}},
+-    {"tosa.reduce_sum",
+-     {{{Profile::pro_int}, {{i32T, i32T}}},
+-      {{Profile::pro_fp}, {{fp16T, fp16T}, {fp32T, fp32T}}}}},
+-    {"tosa.concat",
+-     {{{Profile::pro_int, Profile::pro_fp}, {{boolT, boolT}}},
+-      {{Profile::pro_int}, {{i8T, i8T}, {i16T, i16T}, {i32T, i32T}}},
+-      {{Profile::pro_fp}, {{fp16T, fp16T}, {fp32T, fp32T}}}}},
+-    {"tosa.pad",
+-     {{{Profile::pro_int, Profile::pro_fp}, {{boolT, boolT}}},
+-      {{Profile::pro_int}, {{i8T, i8T}, {i16T, i16T}, {i32T, i32T}}},
+-      {{Profile::pro_fp}, {{fp16T, fp16T}, {fp32T, fp32T}}}}},
+-    {"tosa.reshape",
+-     {{{Profile::pro_int, Profile::pro_fp}, {{boolT, boolT}}},
+-      {{Profile::pro_int}, {{i8T, i8T}, {i16T, i16T}, {i32T, i32T}}},
+-      {{Profile::pro_fp}, {{fp16T, fp16T}, {fp32T, fp32T}}}}},
+-    {"tosa.reverse",
+-     {{{Profile::pro_int, Profile::pro_fp}, {{boolT, boolT}}},
+-      {{Profile::pro_int}, {{i8T, i8T}, {i16T, i16T}, {i32T, i32T}}},
+-      {{Profile::pro_fp}, {{fp16T, fp16T}, {fp32T, fp32T}}}}},
+-    {"tosa.slice",
+-     {{{Profile::pro_int, Profile::pro_fp}, {{boolT, boolT}}},
+-      {{Profile::pro_int}, {{i8T, i8T}, {i16T, i16T}, {i32T, i32T}}},
+-      {{Profile::pro_fp}, {{fp16T, fp16T}, {fp32T, fp32T}}}}},
+-    {"tosa.tile",
+-     {{{Profile::pro_int, Profile::pro_fp}, {{boolT, boolT}}},
+-      {{Profile::pro_int}, {{i8T, i8T}, {i16T, i16T}, {i32T, i32T}}},
+-      {{Profile::pro_fp}, {{fp16T, fp16T}, {fp32T, fp32T}}}}},
+-    {"tosa.transpose",
+-     {{{Profile::pro_int, Profile::pro_fp}, {{boolT, boolT}}},
+-      {{Profile::pro_int}, {{i8T, i8T}, {i16T, i16T}, {i32T, i32T}}},
+-      {{Profile::pro_fp}, {{fp16T, fp16T}, {fp32T, fp32T}}}}},
+-    {"tosa.gather",
+-     {{{Profile::pro_int}, {{i8T, i8T}, {i16T, i16T}, {i32T, i32T}}},
+-      {{Profile::pro_fp}, {{fp16T, fp16T}, {fp32T, fp32T}}}}},
+-    {"tosa.scatter",
+-     {{{Profile::pro_int},
+-       {{i8T, i8T, i8T}, {i16T, i16T, i16T}, {i32T, i32T, i32T}}},
+-      {{Profile::pro_fp}, {{fp16T, fp16T, fp16T}, {fp32T, fp32T, fp32T}}}}},
+-    {"tosa.resize",
+-     {{{Profile::pro_int}, {{i8T, i32T}, {i8T, i8T}}},
+-      {{Profile::pro_fp}, {{fp16T, fp16T}, {fp32T, fp32T}}}}},
+-    {"tosa.cast",
+-     {{{Profile::pro_int},
+-       {{boolT, i8T},
+-        {boolT, i16T},
+-        {boolT, i32T},
+-        {i8T, boolT},
+-        {i8T, i16T},
+-        {i8T, i32T},
+-        {i16T, boolT},
+-        {i16T, i8T},
+-        {i16T, i32T},
+-        {i32T, boolT},
+-        {i32T, i8T},
+-        {i32T, i16T}}},
+-      {{Profile::pro_fp},
+-       {{i8T, fp16T},
+-        {i8T, fp32T},
+-        {i16T, fp16T},
+-        {i16T, fp32T},
+-        {i32T, fp16T},
+-        {i32T, fp32T},
+-        {fp16T, i8T},
+-        {fp16T, i16T},
+-        {fp16T, i32T},
+-        {fp16T, fp32T},
+-        {fp32T, i8T},
+-        {fp32T, i16T},
+-        {fp32T, i32T},
+-        {fp32T, fp16T}}}}},
+-    {"tosa.rescale",
+-     {{{Profile::pro_int},
+-       {{i8T, i8T},
+-        {i8T, i16T},
+-        {i8T, i32T},
+-        {i16T, i8T},
+-        {i16T, i16T},
+-        {i16T, i32T},
+-        {i32T, i8T},
+-        {i32T, i16T},
+-        {i32T, i32T}}}}},
+-    {"tosa.const",
+-     {{{Profile::pro_int}, {{boolT}, {i8T}, {i16T}, {i32T}}},
+-      {{Profile::pro_fp}, {{fp16T}, {fp32T}}}}},
+-    {"tosa.identity",
+-     {{{Profile::pro_int},
+-       {{boolT, boolT}, {i8T, i8T}, {i16T, i16T}, {i32T, i32T}}},
+-      {{Profile::pro_fp}, {{fp16T, fp16T}, {fp32T, fp32T}}}}},
+-    {"tosa.dim",
+-     {{{Profile::pro_int, Profile::pro_fp}, {{boolT}}},
+-      {{Profile::pro_int}, {{i8T}, {i16T}, {i32T}}},
+-      {{Profile::pro_fp}, {{fp16T}, {fp32T}}}}},
+-};
 -
- /// EmitFAbs - Emit a call to @llvm.fabs().
- static Value *EmitFAbs(CodeGenFunction &CGF, Value *V) {
-   Function *F = CGF.CGM.getIntrinsic(Intrinsic::fabs, V->getType());
-@@ -4130,15 +4112,6 @@
-   case Builtin::BI__builtin_frexpf128:
-   case Builtin::BI__builtin_frexpf16:
-     return RValue::get(emitFrexpBuiltin(*this, E, Intrinsic::frexp));
--  case Builtin::BImodf:
--  case Builtin::BImodff:
--  case Builtin::BImodfl:
--  case Builtin::BI__builtin_modf:
--  case Builtin::BI__builtin_modff:
--  case Builtin::BI__builtin_modfl:
--    if (Builder.getIsFPConstrained())
--      break; // TODO: Emit constrained modf intrinsic once one exists.
--    return RValue::get(emitModfBuiltin(*this, E, Intrinsic::modf));
-   case Builtin::BI__builtin_isgreater:
-   case Builtin::BI__builtin_isgreaterequal:
-   case Builtin::BI__builtin_isless:
-diff -ruN --strip-trailing-cr a/clang/test/CodeGen/aix-builtin-mapping.c b/clang/test/CodeGen/aix-builtin-mapping.c
---- a/clang/test/CodeGen/aix-builtin-mapping.c
-+++ b/clang/test/CodeGen/aix-builtin-mapping.c
-@@ -17,6 +17,6 @@
-   returnValue = __builtin_ldexpl(1.0L, 1);
- }
+-extensionComplianceMap = {
+-    {"tosa.argmax",
+-     {{{Extension::int16}, {{i16T, i32T}}},
+-      {{Extension::fp8e4m3}, {{fp8e4m3T, i32T}}},
+-      {{Extension::fp8e5m2}, {{fp8e5m2T, i32T}}},
+-      {{Extension::bf16}, {{bf16T, i32T}}}}},
+-    {"tosa.avg_pool2d",
+-     {{{Extension::int16}, {{i16T, i32T, i16T}}},
+-      {{Extension::fp8e4m3}, {{fp8e4m3T, fp16T, fp8e4m3T}}},
+-      {{Extension::fp8e5m2}, {{fp8e5m2T, fp16T, fp8e5m2T}}},
+-      {{Extension::bf16}, {{bf16T, fp32T, bf16T}}}}},
+-    {"tosa.conv2d",
+-     {{{Extension::int4}, {{i8T, i4T, i32T, i32T, i32T}}},
+-      {{Extension::int16}, {{i16T, i8T, i48T, i48T, i48T}}},
+-      {{Extension::fp8e4m3}, {{fp8e4m3T, fp8e4m3T, fp16T, fp16T, fp16T}}},
+-      {{Extension::fp8e5m2}, {{fp8e5m2T, fp8e5m2T, fp16T, fp16T, fp16T}}},
+-      {{Extension::bf16}, {{bf16T, bf16T, bf16T, fp32T, bf16T}}}}},
+-    {"tosa.conv3d",
+-     {{{Extension::int4}, {{i8T, i4T, i32T, i32T, i32T}}},
+-      {{Extension::int16}, {{i16T, i8T, i48T, i48T, i48T}}},
+-      {{Extension::fp8e4m3}, {{fp8e4m3T, fp8e4m3T, fp16T, fp16T, fp16T}}},
+-      {{Extension::fp8e5m2}, {{fp8e5m2T, fp8e5m2T, fp16T, fp16T, fp16T}}},
+-      {{Extension::bf16}, {{bf16T, bf16T, bf16T, fp32T, bf16T}}}}},
+-    {"tosa.depthwise_conv2d",
+-     {{{Extension::int4}, {{i8T, i4T, i32T, i32T, i32T}}},
+-      {{Extension::int16}, {{i16T, i8T, i48T, i48T, i48T}}},
+-      {{Extension::fp8e4m3}, {{fp8e4m3T, fp8e4m3T, fp16T, fp16T, fp16T}}},
+-      {{Extension::fp8e5m2}, {{fp8e5m2T, fp8e5m2T, fp16T, fp16T, fp16T}}},
+-      {{Extension::bf16}, {{bf16T, bf16T, bf16T, fp32T, bf16T}}}}},
+-    {"tosa.fft2d", {{{Extension::fft}, {{fp32T, fp32T, fp32T, fp32T}}}}},
+-    {"tosa.fully_connected",
+-     {{{Extension::int4}, {{i8T, i4T, i32T, i32T}}},
+-      {{Extension::int16}, {{i16T, i8T, i48T, i48T}}},
+-      {{Extension::bf16}, {{bf16T, bf16T, fp32T, fp32T}}}}},
+-    {"tosa.matmul",
+-     {{{Extension::int16}, {{i16T, i16T, i48T}}},
+-      {{Extension::fp8e4m3}, {{fp8e4m3T, fp8e4m3T, fp16T}}},
+-      {{Extension::fp8e5m2}, {{fp8e5m2T, fp8e5m2T, fp16T}}},
+-      {{Extension::bf16}, {{bf16T, bf16T, fp32T}}}}},
+-    {"tosa.max_pool2d",
+-     {{{Extension::int16}, {{i16T, i16T}}},
+-      {{Extension::fp8e4m3}, {{fp8e4m3T, fp8e4m3T}}},
+-      {{Extension::fp8e5m2}, {{fp8e5m2T, fp8e5m2T}}},
+-      {{Extension::bf16}, {{bf16T, bf16T}}}}},
+-    {"tosa.rfft2d", {{{Extension::fft}, {{fp32T, fp32T, fp32T}}}}},
+-    {"tosa.transpose_conv2d",
+-     {{{Extension::int4}, {{i8T, i4T, i32T, i32T, i32T}}},
+-      {{Extension::int16}, {{i16T, i8T, i48T, i48T, i48T}}},
+-      {{Extension::fp8e4m3}, {{fp8e4m3T, fp8e4m3T, fp16T, fp16T, fp16T}}},
+-      {{Extension::fp8e5m2}, {{fp8e5m2T, fp8e5m2T, fp16T, fp16T, fp16T}}},
+-      {{Extension::bf16}, {{bf16T, bf16T, bf16T, fp32T, bf16T}}}}},
+-    {"tosa.clamp",
+-     {{{Extension::int16}, {{i16T, i16T}}},
+-      {{Extension::bf16}, {{bf16T, bf16T}}}}},
+-    {"tosa.erf", {{{Extension::bf16}, {{bf16T, bf16T}}}}},
+-    {"tosa.sigmoid", {{{Extension::bf16}, {{bf16T, bf16T}}}}},
+-    {"tosa.tanh", {{{Extension::bf16}, {{bf16T, bf16T}}}}},
+-    {"tosa.add", {{{Extension::bf16}, {{bf16T, bf16T, bf16T}}}}},
+-    {"tosa.maximum", {{{Extension::bf16}, {{bf16T, bf16T, bf16T}}}}},
+-    {"tosa.minimum", {{{Extension::bf16}, {{bf16T, bf16T, bf16T}}}}},
+-    {"tosa.mul", {{{Extension::bf16}, {{bf16T, bf16T, bf16T}}}}},
+-    {"tosa.pow", {{{Extension::bf16}, {{bf16T, bf16T, bf16T}}}}},
+-    {"tosa.sub", {{{Extension::bf16}, {{bf16T, bf16T, bf16T}}}}},
+-    {"tosa.table", {{{Extension::int16}, {{i16T, i16T, i32T}}}}},
+-    {"tosa.abs", {{{Extension::bf16}, {{bf16T, bf16T}}}}},
+-    {"tosa.ceil", {{{Extension::bf16}, {{bf16T, bf16T}}}}},
+-    {"tosa.cos", {{{Extension::bf16}, {{bf16T, bf16T}}}}},
+-    {"tosa.exp", {{{Extension::bf16}, {{bf16T, bf16T}}}}},
+-    {"tosa.floor", {{{Extension::bf16}, {{bf16T, bf16T}}}}},
+-    {"tosa.log", {{{Extension::bf16}, {{bf16T, bf16T}}}}},
+-    {"tosa.negate", {{{Extension::bf16}, {{bf16T, bf16T}}}}},
+-    {"tosa.reciprocal", {{{Extension::bf16}, {{bf16T, bf16T}}}}},
+-    {"tosa.rsqrt", {{{Extension::bf16}, {{bf16T, bf16T}}}}},
+-    {"tosa.select", {{{Extension::bf16}, {{bf16T, bf16T, bf16T}}}}},
+-    {"tosa.sin", {{{Extension::bf16}, {{bf16T, bf16T}}}}},
+-    {"tosa.equal", {{{Extension::bf16}, {{bf16T, bf16T, boolT}}}}},
+-    {"tosa.greater", {{{Extension::bf16}, {{bf16T, bf16T, boolT}}}}},
+-    {"tosa.greater_equal", {{{Extension::bf16}, {{bf16T, bf16T, boolT}}}}},
+-    {"tosa.reduce_max", {{{Extension::bf16}, {{bf16T, bf16T}}}}},
+-    {"tosa.reduce_min", {{{Extension::bf16}, {{bf16T, bf16T}}}}},
+-    {"tosa.reduce_product", {{{Extension::bf16}, {{bf16T, bf16T}}}}},
+-    {"tosa.reduce_sum", {{{Extension::bf16}, {{bf16T, bf16T}}}}},
+-    {"tosa.concat",
+-     {{{Extension::fp8e4m3}, {{fp8e4m3T, fp8e4m3T}}},
+-      {{Extension::fp8e5m2}, {{fp8e5m2T, fp8e5m2T}}},
+-      {{Extension::bf16}, {{bf16T, bf16T}}}}},
+-    {"tosa.pad",
+-     {{{Extension::fp8e4m3}, {{fp8e4m3T, fp8e4m3T}}},
+-      {{Extension::fp8e5m2}, {{fp8e5m2T, fp8e5m2T}}},
+-      {{Extension::bf16}, {{bf16T, bf16T}}}}},
+-    {"tosa.reshape",
+-     {{{Extension::fp8e4m3}, {{fp8e4m3T, fp8e4m3T}}},
+-      {{Extension::fp8e5m2}, {{fp8e5m2T, fp8e5m2T}}},
+-      {{Extension::bf16}, {{bf16T, bf16T}}}}},
+-    {"tosa.reverse",
+-     {{{Extension::fp8e4m3}, {{fp8e4m3T, fp8e4m3T}}},
+-      {{Extension::fp8e5m2}, {{fp8e5m2T, fp8e5m2T}}},
+-      {{Extension::bf16}, {{bf16T, bf16T}}}}},
+-    {"tosa.slice",
+-     {{{Extension::fp8e4m3}, {{fp8e4m3T, fp8e4m3T}}},
+-      {{Extension::fp8e5m2}, {{fp8e5m2T, fp8e5m2T}}},
+-      {{Extension::bf16}, {{bf16T, bf16T}}}}},
+-    {"tosa.tile",
+-     {{{Extension::fp8e4m3}, {{fp8e4m3T, fp8e4m3T}}},
+-      {{Extension::fp8e5m2}, {{fp8e5m2T, fp8e5m2T}}},
+-      {{Extension::bf16}, {{bf16T, bf16T}}}}},
+-    {"tosa.transpose",
+-     {{{Extension::fp8e4m3}, {{fp8e4m3T, fp8e4m3T}}},
+-      {{Extension::fp8e5m2}, {{fp8e5m2T, fp8e5m2T}}},
+-      {{Extension::bf16}, {{bf16T, bf16T}}}}},
+-    {"tosa.gather",
+-     {{{Extension::fp8e4m3}, {{fp8e4m3T, fp8e4m3T}}},
+-      {{Extension::fp8e5m2}, {{fp8e5m2T, fp8e5m2T}}},
+-      {{Extension::bf16}, {{bf16T, bf16T}}}}},
+-    {"tosa.scatter",
+-     {{{Extension::fp8e4m3}, {{fp8e4m3T, fp8e4m3T, fp8e4m3T}}},
+-      {{Extension::fp8e5m2}, {{fp8e5m2T, fp8e5m2T, fp8e5m2T}}},
+-      {{Extension::bf16}, {{bf16T, bf16T, bf16T}}}}},
+-    {"tosa.resize",
+-     {{{Extension::int16}, {{i16T, i48T}, {i16T, i16T}}},
+-      {{Extension::bf16}, {{bf16T, bf16T}}}}},
+-    {"tosa.cast",
+-     {{{Extension::bf16},
+-       {{i8T, bf16T},
+-        {i16T, bf16T},
+-        {i32T, bf16T},
+-        {bf16T, i8T},
+-        {bf16T, i16T},
+-        {bf16T, i32T},
+-        {bf16T, fp32T},
+-        {fp32T, bf16T}}},
+-      {{Extension::bf16, Extension::fp8e4m3},
+-       {{bf16T, fp8e4m3T}, {fp8e4m3T, bf16T}}},
+-      {{Extension::bf16, Extension::fp8e5m2},
+-       {{bf16T, fp8e5m2T}, {fp8e5m2T, bf16T}}},
+-      {{Extension::fp8e4m3},
+-       {{fp8e4m3T, fp16T},
+-        {fp8e4m3T, fp32T},
+-        {fp16T, fp8e4m3T},
+-        {fp32T, fp8e4m3T}}},
+-      {{Extension::fp8e5m2},
+-       {{fp8e5m2T, fp16T},
+-        {fp8e5m2T, fp32T},
+-        {fp16T, fp8e5m2T},
+-        {fp32T, fp8e5m2T}}}}},
+-    {"tosa.rescale",
+-     {{{Extension::int16}, {{i48T, i8T}, {i48T, i16T}, {i48T, i32T}}}}},
+-    {"tosa.const",
+-     {{{Extension::int4}, {{i4T}}},
+-      {{Extension::int16}, {{i48T}}},
+-      {{Extension::fp8e4m3}, {{fp8e4m3T}}},
+-      {{Extension::fp8e5m2}, {{fp8e5m2T}}},
+-      {{Extension::bf16}, {{bf16T}}}}},
+-    {"tosa.identity",
+-     {{{Extension::int4}, {{i4T, i4T}}},
+-      {{Extension::int16}, {{i48T, i48T}}},
+-      {{Extension::fp8e4m3}, {{fp8e4m3T, fp8e4m3T}}},
+-      {{Extension::fp8e5m2}, {{fp8e5m2T, fp8e5m2T}}},
+-      {{Extension::bf16}, {{bf16T, bf16T}}}}},
+-    {"tosa.dim",
+-     {{{Extension::fp8e4m3}, {{fp8e4m3T}}},
+-      {{Extension::fp8e5m2}, {{fp8e5m2T}}},
+-      {{Extension::bf16}, {{bf16T}}}}},
+-};
+-// End of auto-generated metadata
+diff -ruN --strip-trailing-cr a/mlir/include/mlir/Dialect/Tosa/IR/TosaComplianceData.h.inc b/mlir/include/mlir/Dialect/Tosa/IR/TosaComplianceData.h.inc
+--- a/mlir/include/mlir/Dialect/Tosa/IR/TosaComplianceData.h.inc
++++ b/mlir/include/mlir/Dialect/Tosa/IR/TosaComplianceData.h.inc
+@@ -0,0 +1,403 @@
++// The profile-based compliance content below is auto-generated by the script
++// `tools/genspec.py` in https://git.mlplatform.org/tosa/specification.git
++profileComplianceMap = {
++    {"tosa.argmax",
++     {{{Profile::pro_int}, {{i8T, i32T}}},
++      {{Profile::pro_fp}, {{fp16T, i32T}, {fp32T, i32T}}}}},
++    {"tosa.avg_pool2d",
++     {{{Profile::pro_int}, {{i8T, i32T, i8T}}},
++      {{Profile::pro_fp},
++       {{fp16T, fp16T, fp16T}, {fp16T, fp32T, fp16T}, {fp32T, fp32T, fp32T}}}}},
++    {"tosa.conv2d",
++     {{{Profile::pro_int}, {{i8T, i8T, i32T, i32T, i32T}}},
++      {{Profile::pro_fp},
++       {{fp16T, fp16T, fp16T, fp16T, fp16T},
++        {fp16T, fp16T, fp16T, fp32T, fp16T},
++        {fp32T, fp32T, fp32T, fp32T, fp32T}}}}},
++    {"tosa.conv3d",
++     {{{Profile::pro_int}, {{i8T, i8T, i32T, i32T, i32T}}},
++      {{Profile::pro_fp},
++       {{fp16T, fp16T, fp16T, fp16T, fp16T},
++        {fp16T, fp16T, fp16T, fp32T, fp16T},
++        {fp32T, fp32T, fp32T, fp32T, fp32T}}}}},
++    {"tosa.depthwise_conv2d",
++     {{{Profile::pro_int}, {{i8T, i8T, i32T, i32T, i32T}}},
++      {{Profile::pro_fp},
++       {{fp16T, fp16T, fp16T, fp16T, fp16T},
++        {fp16T, fp16T, fp16T, fp32T, fp16T},
++        {fp32T, fp32T, fp32T, fp32T, fp32T}}}}},
++    {"tosa.fully_connected",
++     {{{Profile::pro_int}, {{i8T, i8T, i32T, i32T}}},
++      {{Profile::pro_fp},
++       {{fp16T, fp16T, fp16T, fp16T},
++        {fp16T, fp16T, fp32T, fp32T},
++        {fp32T, fp32T, fp32T, fp32T}}}}},
++    {"tosa.matmul",
++     {{{Profile::pro_int}, {{i8T, i8T, i32T}}},
++      {{Profile::pro_fp},
++       {{fp16T, fp16T, fp16T}, {fp16T, fp16T, fp32T}, {fp32T, fp32T, fp32T}}}}},
++    {"tosa.max_pool2d",
++     {{{Profile::pro_int}, {{i8T, i8T}}},
++      {{Profile::pro_fp}, {{fp16T, fp16T}, {fp32T, fp32T}}}}},
++    {"tosa.transpose_conv2d",
++     {{{Profile::pro_int}, {{i8T, i8T, i32T, i32T, i32T}}},
++      {{Profile::pro_fp},
++       {{fp16T, fp16T, fp16T, fp16T, fp16T},
++        {fp16T, fp16T, fp16T, fp32T, fp16T},
++        {fp32T, fp32T, fp32T, fp32T, fp32T}}}}},
++    {"tosa.clamp",
++     {{{Profile::pro_int}, {{i8T, i8T}}},
++      {{Profile::pro_fp}, {{fp16T, fp16T}, {fp32T, fp32T}}}}},
++    {"tosa.erf", {{{Profile::pro_fp}, {{fp16T, fp16T}, {fp32T, fp32T}}}}},
++    {"tosa.sigmoid", {{{Profile::pro_fp}, {{fp16T, fp16T}, {fp32T, fp32T}}}}},
++    {"tosa.tanh", {{{Profile::pro_fp}, {{fp16T, fp16T}, {fp32T, fp32T}}}}},
++    {"tosa.add",
++     {{{Profile::pro_int, Profile::pro_fp}, {{i32T, i32T, i32T}}},
++      {{Profile::pro_fp}, {{fp16T, fp16T, fp16T}, {fp32T, fp32T, fp32T}}}}},
++    {"tosa.arithmetic_right_shift",
++     {{{Profile::pro_int},
++       {{i8T, i8T, i8T}, {i16T, i16T, i16T}, {i32T, i32T, i32T}}}}},
++    {"tosa.bitwise_and",
++     {{{Profile::pro_int},
++       {{i8T, i8T, i8T}, {i16T, i16T, i16T}, {i32T, i32T, i32T}}}}},
++    {"tosa.bitwise_or",
++     {{{Profile::pro_int},
++       {{i8T, i8T, i8T}, {i16T, i16T, i16T}, {i32T, i32T, i32T}}}}},
++    {"tosa.bitwise_xor",
++     {{{Profile::pro_int},
++       {{i8T, i8T, i8T}, {i16T, i16T, i16T}, {i32T, i32T, i32T}}}}},
++    {"tosa.intdiv",
++     {{{Profile::pro_int, Profile::pro_fp}, {{i32T, i32T, i32T}}}}},
++    {"tosa.logical_and",
++     {{{Profile::pro_int, Profile::pro_fp}, {{boolT, boolT, boolT}}}}},
++    {"tosa.logical_left_shift",
++     {{{Profile::pro_int, Profile::pro_fp},
++       {{i8T, i8T, i8T}, {i16T, i16T, i16T}, {i32T, i32T, i32T}}}}},
++    {"tosa.logical_right_shift",
++     {{{Profile::pro_int, Profile::pro_fp},
++       {{i8T, i8T, i8T}, {i16T, i16T, i16T}, {i32T, i32T, i32T}}}}},
++    {"tosa.logical_or",
++     {{{Profile::pro_int, Profile::pro_fp}, {{boolT, boolT, boolT}}}}},
++    {"tosa.logical_xor",
++     {{{Profile::pro_int, Profile::pro_fp}, {{boolT, boolT, boolT}}}}},
++    {"tosa.maximum",
++     {{{Profile::pro_int}, {{i32T, i32T, i32T}}},
++      {{Profile::pro_fp}, {{fp16T, fp16T, fp16T}, {fp32T, fp32T, fp32T}}}}},
++    {"tosa.minimum",
++     {{{Profile::pro_int}, {{i32T, i32T, i32T}}},
++      {{Profile::pro_fp}, {{fp16T, fp16T, fp16T}, {fp32T, fp32T, fp32T}}}}},
++    {"tosa.mul",
++     {{{Profile::pro_int}, {{i8T, i8T, i32T}, {i16T, i16T, i32T}}},
++      {{Profile::pro_int, Profile::pro_fp}, {{i32T, i32T, i32T}}},
++      {{Profile::pro_fp}, {{fp16T, fp16T, fp16T}, {fp32T, fp32T, fp32T}}}}},
++    {"tosa.pow",
++     {{{Profile::pro_fp}, {{fp16T, fp16T, fp16T}, {fp32T, fp32T, fp32T}}}}},
++    {"tosa.sub",
++     {{{Profile::pro_int, Profile::pro_fp}, {{i32T, i32T, i32T}}},
++      {{Profile::pro_fp}, {{fp16T, fp16T, fp16T}, {fp32T, fp32T, fp32T}}}}},
++    {"tosa.table", {{{Profile::pro_int}, {{i8T, i8T, i8T}}}}},
++    {"tosa.abs",
++     {{{Profile::pro_int}, {{i32T, i32T}}},
++      {{Profile::pro_fp}, {{fp16T, fp16T}, {fp32T, fp32T}}}}},
++    {"tosa.bitwise_not",
++     {{{Profile::pro_int}, {{i8T, i8T}, {i16T, i16T}, {i32T, i32T}}}}},
++    {"tosa.ceil", {{{Profile::pro_fp}, {{fp16T, fp16T}, {fp32T, fp32T}}}}},
++    {"tosa.clz", {{{Profile::pro_int}, {{i32T, i32T}}}}},
++    {"tosa.cos", {{{Profile::pro_fp}, {{fp16T, fp16T}, {fp32T, fp32T}}}}},
++    {"tosa.exp", {{{Profile::pro_fp}, {{fp16T, fp16T}, {fp32T, fp32T}}}}},
++    {"tosa.floor", {{{Profile::pro_fp}, {{fp16T, fp16T}, {fp32T, fp32T}}}}},
++    {"tosa.log", {{{Profile::pro_fp}, {{fp16T, fp16T}, {fp32T, fp32T}}}}},
++    {"tosa.logical_not",
++     {{{Profile::pro_int, Profile::pro_fp}, {{boolT, boolT}}}}},
++    {"tosa.negate",
++     {{{Profile::pro_int}, {{i8T, i8T}, {i16T, i16T}, {i32T, i32T}}},
++      {{Profile::pro_fp}, {{fp16T, fp16T}, {fp32T, fp32T}}}}},
++    {"tosa.reciprocal",
++     {{{Profile::pro_fp}, {{fp16T, fp16T}, {fp32T, fp32T}}}}},
++    {"tosa.rsqrt", {{{Profile::pro_fp}, {{fp16T, fp16T}, {fp32T, fp32T}}}}},
++    {"tosa.select",
++     {{{Profile::pro_int, Profile::pro_fp}, {{boolT, boolT, boolT}}},
++      {{Profile::pro_int},
++       {{i8T, i8T, i8T}, {i16T, i16T, i16T}, {i32T, i32T, i32T}}},
++      {{Profile::pro_fp}, {{fp16T, fp16T, fp16T}, {fp32T, fp32T, fp32T}}}}},
++    {"tosa.sin", {{{Profile::pro_fp}, {{fp16T, fp16T}, {fp32T, fp32T}}}}},
++    {"tosa.equal",
++     {{{Profile::pro_int}, {{i32T, i32T, boolT}}},
++      {{Profile::pro_fp}, {{fp16T, fp16T, boolT}, {fp32T, fp32T, boolT}}}}},
++    {"tosa.greater",
++     {{{Profile::pro_int}, {{i32T, i32T, boolT}}},
++      {{Profile::pro_fp}, {{fp16T, fp16T, boolT}, {fp32T, fp32T, boolT}}}}},
++    {"tosa.greater_equal",
++     {{{Profile::pro_int}, {{i32T, i32T, boolT}}},
++      {{Profile::pro_fp}, {{fp16T, fp16T, boolT}, {fp32T, fp32T, boolT}}}}},
++    {"tosa.reduce_all",
++     {{{Profile::pro_int, Profile::pro_fp}, {{boolT, boolT}}}}},
++    {"tosa.reduce_any",
++     {{{Profile::pro_int, Profile::pro_fp}, {{boolT, boolT}}}}},
++    {"tosa.reduce_max",
++     {{{Profile::pro_int}, {{i8T, i8T}, {i16T, i16T}, {i32T, i32T}}},
++      {{Profile::pro_fp}, {{fp16T, fp16T}, {fp32T, fp32T}}}}},
++    {"tosa.reduce_min",
++     {{{Profile::pro_int}, {{i8T, i8T}, {i16T, i16T}, {i32T, i32T}}},
++      {{Profile::pro_fp}, {{fp16T, fp16T}, {fp32T, fp32T}}}}},
++    {"tosa.reduce_product",
++     {{{Profile::pro_fp}, {{fp16T, fp16T}, {fp32T, fp32T}}}}},
++    {"tosa.reduce_sum",
++     {{{Profile::pro_int}, {{i32T, i32T}}},
++      {{Profile::pro_fp}, {{fp16T, fp16T}, {fp32T, fp32T}}}}},
++    {"tosa.concat",
++     {{{Profile::pro_int, Profile::pro_fp}, {{boolT, boolT}}},
++      {{Profile::pro_int}, {{i8T, i8T}, {i16T, i16T}, {i32T, i32T}}},
++      {{Profile::pro_fp}, {{fp16T, fp16T}, {fp32T, fp32T}}}}},
++    {"tosa.pad",
++     {{{Profile::pro_int, Profile::pro_fp}, {{boolT, boolT}}},
++      {{Profile::pro_int}, {{i8T, i8T}, {i16T, i16T}, {i32T, i32T}}},
++      {{Profile::pro_fp}, {{fp16T, fp16T}, {fp32T, fp32T}}}}},
++    {"tosa.reshape",
++     {{{Profile::pro_int, Profile::pro_fp}, {{boolT, boolT}}},
++      {{Profile::pro_int}, {{i8T, i8T}, {i16T, i16T}, {i32T, i32T}}},
++      {{Profile::pro_fp}, {{fp16T, fp16T}, {fp32T, fp32T}}}}},
++    {"tosa.reverse",
++     {{{Profile::pro_int, Profile::pro_fp}, {{boolT, boolT}}},
++      {{Profile::pro_int}, {{i8T, i8T}, {i16T, i16T}, {i32T, i32T}}},
++      {{Profile::pro_fp}, {{fp16T, fp16T}, {fp32T, fp32T}}}}},
++    {"tosa.slice",
++     {{{Profile::pro_int, Profile::pro_fp}, {{boolT, boolT}}},
++      {{Profile::pro_int}, {{i8T, i8T}, {i16T, i16T}, {i32T, i32T}}},
++      {{Profile::pro_fp}, {{fp16T, fp16T}, {fp32T, fp32T}}}}},
++    {"tosa.tile",
++     {{{Profile::pro_int, Profile::pro_fp}, {{boolT, boolT}}},
++      {{Profile::pro_int}, {{i8T, i8T}, {i16T, i16T}, {i32T, i32T}}},
++      {{Profile::pro_fp}, {{fp16T, fp16T}, {fp32T, fp32T}}}}},
++    {"tosa.transpose",
++     {{{Profile::pro_int, Profile::pro_fp}, {{boolT, boolT}}},
++      {{Profile::pro_int}, {{i8T, i8T}, {i16T, i16T}, {i32T, i32T}}},
++      {{Profile::pro_fp}, {{fp16T, fp16T}, {fp32T, fp32T}}}}},
++    {"tosa.gather",
++     {{{Profile::pro_int}, {{i8T, i8T}, {i16T, i16T}, {i32T, i32T}}},
++      {{Profile::pro_fp}, {{fp16T, fp16T}, {fp32T, fp32T}}}}},
++    {"tosa.scatter",
++     {{{Profile::pro_int},
++       {{i8T, i8T, i8T}, {i16T, i16T, i16T}, {i32T, i32T, i32T}}},
++      {{Profile::pro_fp}, {{fp16T, fp16T, fp16T}, {fp32T, fp32T, fp32T}}}}},
++    {"tosa.resize",
++     {{{Profile::pro_int}, {{i8T, i32T}, {i8T, i8T}}},
++      {{Profile::pro_fp}, {{fp16T, fp16T}, {fp32T, fp32T}}}}},
++    {"tosa.cast",
++     {{{Profile::pro_int},
++       {{boolT, i8T},
++        {boolT, i16T},
++        {boolT, i32T},
++        {i8T, boolT},
++        {i8T, i16T},
++        {i8T, i32T},
++        {i16T, boolT},
++        {i16T, i8T},
++        {i16T, i32T},
++        {i32T, boolT},
++        {i32T, i8T},
++        {i32T, i16T}}},
++      {{Profile::pro_fp},
++       {{i8T, fp16T},
++        {i8T, fp32T},
++        {i16T, fp16T},
++        {i16T, fp32T},
++        {i32T, fp16T},
++        {i32T, fp32T},
++        {fp16T, i8T},
++        {fp16T, i16T},
++        {fp16T, i32T},
++        {fp16T, fp32T},
++        {fp32T, i8T},
++        {fp32T, i16T},
++        {fp32T, i32T},
++        {fp32T, fp16T}}}}},
++    {"tosa.rescale",
++     {{{Profile::pro_int},
++       {{i8T, i8T},
++        {i8T, i16T},
++        {i8T, i32T},
++        {i16T, i8T},
++        {i16T, i16T},
++        {i16T, i32T},
++        {i32T, i8T},
++        {i32T, i16T},
++        {i32T, i32T}}}}},
++    {"tosa.const",
++     {{{Profile::pro_int}, {{boolT}, {i8T}, {i16T}, {i32T}}},
++      {{Profile::pro_fp}, {{fp16T}, {fp32T}}}}},
++    {"tosa.identity",
++     {{{Profile::pro_int},
++       {{boolT, boolT}, {i8T, i8T}, {i16T, i16T}, {i32T, i32T}}},
++      {{Profile::pro_fp}, {{fp16T, fp16T}, {fp32T, fp32T}}}}},
++    {"tosa.dim",
++     {{{Profile::pro_int, Profile::pro_fp}, {{boolT}}},
++      {{Profile::pro_int}, {{i8T}, {i16T}, {i32T}}},
++      {{Profile::pro_fp}, {{fp16T}, {fp32T}}}}},
++};
++
++extensionComplianceMap = {
++    {"tosa.argmax",
++     {{{Extension::int16}, {{i16T, i32T}}},
++      {{Extension::fp8e4m3}, {{fp8e4m3T, i32T}}},
++      {{Extension::fp8e5m2}, {{fp8e5m2T, i32T}}},
++      {{Extension::bf16}, {{bf16T, i32T}}}}},
++    {"tosa.avg_pool2d",
++     {{{Extension::int16}, {{i16T, i32T, i16T}}},
++      {{Extension::fp8e4m3}, {{fp8e4m3T, fp16T, fp8e4m3T}}},
++      {{Extension::fp8e5m2}, {{fp8e5m2T, fp16T, fp8e5m2T}}},
++      {{Extension::bf16}, {{bf16T, fp32T, bf16T}}}}},
++    {"tosa.conv2d",
++     {{{Extension::int4}, {{i8T, i4T, i32T, i32T, i32T}}},
++      {{Extension::int16}, {{i16T, i8T, i48T, i48T, i48T}}},
++      {{Extension::fp8e4m3}, {{fp8e4m3T, fp8e4m3T, fp16T, fp16T, fp16T}}},
++      {{Extension::fp8e5m2}, {{fp8e5m2T, fp8e5m2T, fp16T, fp16T, fp16T}}},
++      {{Extension::bf16}, {{bf16T, bf16T, bf16T, fp32T, bf16T}}}}},
++    {"tosa.conv3d",
++     {{{Extension::int4}, {{i8T, i4T, i32T, i32T, i32T}}},
++      {{Extension::int16}, {{i16T, i8T, i48T, i48T, i48T}}},
++      {{Extension::fp8e4m3}, {{fp8e4m3T, fp8e4m3T, fp16T, fp16T, fp16T}}},
++      {{Extension::fp8e5m2}, {{fp8e5m2T, fp8e5m2T, fp16T, fp16T, fp16T}}},
++      {{Extension::bf16}, {{bf16T, bf16T, bf16T, fp32T, bf16T}}}}},
++    {"tosa.depthwise_conv2d",
++     {{{Extension::int4}, {{i8T, i4T, i32T, i32T, i32T}}},
++      {{Extension::int16}, {{i16T, i8T, i48T, i48T, i48T}}},
++      {{Extension::fp8e4m3}, {{fp8e4m3T, fp8e4m3T, fp16T, fp16T, fp16T}}},
++      {{Extension::fp8e5m2}, {{fp8e5m2T, fp8e5m2T, fp16T, fp16T, fp16T}}},
++      {{Extension::bf16}, {{bf16T, bf16T, bf16T, fp32T, bf16T}}}}},
++    {"tosa.fft2d", {{{Extension::fft}, {{fp32T, fp32T, fp32T, fp32T}}}}},
++    {"tosa.fully_connected",
++     {{{Extension::int4}, {{i8T, i4T, i32T, i32T}}},
++      {{Extension::int16}, {{i16T, i8T, i48T, i48T}}},
++      {{Extension::bf16}, {{bf16T, bf16T, fp32T, fp32T}}}}},
++    {"tosa.matmul",
++     {{{Extension::int16}, {{i16T, i16T, i48T}}},
++      {{Extension::fp8e4m3}, {{fp8e4m3T, fp8e4m3T, fp16T}}},
++      {{Extension::fp8e5m2}, {{fp8e5m2T, fp8e5m2T, fp16T}}},
++      {{Extension::bf16}, {{bf16T, bf16T, fp32T}}}}},
++    {"tosa.max_pool2d",
++     {{{Extension::int16}, {{i16T, i16T}}},
++      {{Extension::fp8e4m3}, {{fp8e4m3T, fp8e4m3T}}},
++      {{Extension::fp8e5m2}, {{fp8e5m2T, fp8e5m2T}}},
++      {{Extension::bf16}, {{bf16T, bf16T}}}}},
++    {"tosa.rfft2d", {{{Extension::fft}, {{fp32T, fp32T, fp32T}}}}},
++    {"tosa.transpose_conv2d",
++     {{{Extension::int4}, {{i8T, i4T, i32T, i32T, i32T}}},
++      {{Extension::int16}, {{i16T, i8T, i48T, i48T, i48T}}},
++      {{Extension::fp8e4m3}, {{fp8e4m3T, fp8e4m3T, fp16T, fp16T, fp16T}}},
++      {{Extension::fp8e5m2}, {{fp8e5m2T, fp8e5m2T, fp16T, fp16T, fp16T}}},
++      {{Extension::bf16}, {{bf16T, bf16T, bf16T, fp32T, bf16T}}}}},
++    {"tosa.clamp",
++     {{{Extension::int16}, {{i16T, i16T}}},
++      {{Extension::bf16}, {{bf16T, bf16T}}}}},
++    {"tosa.erf", {{{Extension::bf16}, {{bf16T, bf16T}}}}},
++    {"tosa.sigmoid", {{{Extension::bf16}, {{bf16T, bf16T}}}}},
++    {"tosa.tanh", {{{Extension::bf16}, {{bf16T, bf16T}}}}},
++    {"tosa.add", {{{Extension::bf16}, {{bf16T, bf16T, bf16T}}}}},
++    {"tosa.maximum", {{{Extension::bf16}, {{bf16T, bf16T, bf16T}}}}},
++    {"tosa.minimum", {{{Extension::bf16}, {{bf16T, bf16T, bf16T}}}}},
++    {"tosa.mul", {{{Extension::bf16}, {{bf16T, bf16T, bf16T}}}}},
++    {"tosa.pow", {{{Extension::bf16}, {{bf16T, bf16T, bf16T}}}}},
++    {"tosa.sub", {{{Extension::bf16}, {{bf16T, bf16T, bf16T}}}}},
++    {"tosa.table", {{{Extension::int16}, {{i16T, i16T, i32T}}}}},
++    {"tosa.abs", {{{Extension::bf16}, {{bf16T, bf16T}}}}},
++    {"tosa.ceil", {{{Extension::bf16}, {{bf16T, bf16T}}}}},
++    {"tosa.cos", {{{Extension::bf16}, {{bf16T, bf16T}}}}},
++    {"tosa.exp", {{{Extension::bf16}, {{bf16T, bf16T}}}}},
++    {"tosa.floor", {{{Extension::bf16}, {{bf16T, bf16T}}}}},
++    {"tosa.log", {{{Extension::bf16}, {{bf16T, bf16T}}}}},
++    {"tosa.negate", {{{Extension::bf16}, {{bf16T, bf16T}}}}},
++    {"tosa.reciprocal", {{{Extension::bf16}, {{bf16T, bf16T}}}}},
++    {"tosa.rsqrt", {{{Extension::bf16}, {{bf16T, bf16T}}}}},
++    {"tosa.select", {{{Extension::bf16}, {{bf16T, bf16T, bf16T}}}}},
++    {"tosa.sin", {{{Extension::bf16}, {{bf16T, bf16T}}}}},
++    {"tosa.equal", {{{Extension::bf16}, {{bf16T, bf16T, boolT}}}}},
++    {"tosa.greater", {{{Extension::bf16}, {{bf16T, bf16T, boolT}}}}},
++    {"tosa.greater_equal", {{{Extension::bf16}, {{bf16T, bf16T, boolT}}}}},
++    {"tosa.reduce_max", {{{Extension::bf16}, {{bf16T, bf16T}}}}},
++    {"tosa.reduce_min", {{{Extension::bf16}, {{bf16T, bf16T}}}}},
++    {"tosa.reduce_product", {{{Extension::bf16}, {{bf16T, bf16T}}}}},
++    {"tosa.reduce_sum", {{{Extension::bf16}, {{bf16T, bf16T}}}}},
++    {"tosa.concat",
++     {{{Extension::fp8e4m3}, {{fp8e4m3T, fp8e4m3T}}},
++      {{Extension::fp8e5m2}, {{fp8e5m2T, fp8e5m2T}}},
++      {{Extension::bf16}, {{bf16T, bf16T}}}}},
++    {"tosa.pad",
++     {{{Extension::fp8e4m3}, {{fp8e4m3T, fp8e4m3T}}},
++      {{Extension::fp8e5m2}, {{fp8e5m2T, fp8e5m2T}}},
++      {{Extension::bf16}, {{bf16T, bf16T}}}}},
++    {"tosa.reshape",
++     {{{Extension::fp8e4m3}, {{fp8e4m3T, fp8e4m3T}}},
++      {{Extension::fp8e5m2}, {{fp8e5m2T, fp8e5m2T}}},
++      {{Extension::bf16}, {{bf16T, bf16T}}}}},
++    {"tosa.reverse",
++     {{{Extension::fp8e4m3}, {{fp8e4m3T, fp8e4m3T}}},
++      {{Extension::fp8e5m2}, {{fp8e5m2T, fp8e5m2T}}},
++      {{Extension::bf16}, {{bf16T, bf16T}}}}},
++    {"tosa.slice",
++     {{{Extension::fp8e4m3}, {{fp8e4m3T, fp8e4m3T}}},
++      {{Extension::fp8e5m2}, {{fp8e5m2T, fp8e5m2T}}},
++      {{Extension::bf16}, {{bf16T, bf16T}}}}},
++    {"tosa.tile",
++     {{{Extension::fp8e4m3}, {{fp8e4m3T, fp8e4m3T}}},
++      {{Extension::fp8e5m2}, {{fp8e5m2T, fp8e5m2T}}},
++      {{Extension::bf16}, {{bf16T, bf16T}}}}},
++    {"tosa.transpose",
++     {{{Extension::fp8e4m3}, {{fp8e4m3T, fp8e4m3T}}},
++      {{Extension::fp8e5m2}, {{fp8e5m2T, fp8e5m2T}}},
++      {{Extension::bf16}, {{bf16T, bf16T}}}}},
++    {"tosa.gather",
++     {{{Extension::fp8e4m3}, {{fp8e4m3T, fp8e4m3T}}},
++      {{Extension::fp8e5m2}, {{fp8e5m2T, fp8e5m2T}}},
++      {{Extension::bf16}, {{bf16T, bf16T}}}}},
++    {"tosa.scatter",
++     {{{Extension::fp8e4m3}, {{fp8e4m3T, fp8e4m3T, fp8e4m3T}}},
++      {{Extension::fp8e5m2}, {{fp8e5m2T, fp8e5m2T, fp8e5m2T}}},
++      {{Extension::bf16}, {{bf16T, bf16T, bf16T}}}}},
++    {"tosa.resize",
++     {{{Extension::int16}, {{i16T, i48T}, {i16T, i16T}}},
++      {{Extension::bf16}, {{bf16T, bf16T}}}}},
++    {"tosa.cast",
++     {{{Extension::bf16},
++       {{i8T, bf16T},
++        {i16T, bf16T},
++        {i32T, bf16T},
++        {bf16T, i8T},
++        {bf16T, i16T},
++        {bf16T, i32T},
++        {bf16T, fp32T},
++        {fp32T, bf16T}}},
++      {{Extension::bf16, Extension::fp8e4m3},
++       {{bf16T, fp8e4m3T}, {fp8e4m3T, bf16T}}},
++      {{Extension::bf16, Extension::fp8e5m2},
++       {{bf16T, fp8e5m2T}, {fp8e5m2T, bf16T}}},
++      {{Extension::fp8e4m3},
++       {{fp8e4m3T, fp16T},
++        {fp8e4m3T, fp32T},
++        {fp16T, fp8e4m3T},
++        {fp32T, fp8e4m3T}}},
++      {{Extension::fp8e5m2},
++       {{fp8e5m2T, fp16T},
++        {fp8e5m2T, fp32T},
++        {fp16T, fp8e5m2T},
++        {fp32T, fp8e5m2T}}}}},
++    {"tosa.rescale",
++     {{{Extension::int16}, {{i48T, i8T}, {i48T, i16T}, {i48T, i32T}}}}},
++    {"tosa.const",
++     {{{Extension::int4}, {{i4T}}},
++      {{Extension::int16}, {{i48T}}},
++      {{Extension::fp8e4m3}, {{fp8e4m3T}}},
++      {{Extension::fp8e5m2}, {{fp8e5m2T}}},
++      {{Extension::bf16}, {{bf16T}}}}},
++    {"tosa.identity",
++     {{{Extension::int4}, {{i4T, i4T}}},
++      {{Extension::int16}, {{i48T, i48T}}},
++      {{Extension::fp8e4m3}, {{fp8e4m3T, fp8e4m3T}}},
++      {{Extension::fp8e5m2}, {{fp8e5m2T, fp8e5m2T}}},
++      {{Extension::bf16}, {{bf16T, bf16T}}}}},
++    {"tosa.dim",
++     {{{Extension::fp8e4m3}, {{fp8e4m3T}}},
++      {{Extension::fp8e5m2}, {{fp8e5m2T}}},
++      {{Extension::bf16}, {{bf16T}}}}},
++};
++// End of auto-generated metadata
+diff -ruN --strip-trailing-cr a/mlir/lib/Dialect/Tosa/Transforms/TosaProfileCompliance.cpp b/mlir/lib/Dialect/Tosa/Transforms/TosaProfileCompliance.cpp
+--- a/mlir/lib/Dialect/Tosa/Transforms/TosaProfileCompliance.cpp
++++ b/mlir/lib/Dialect/Tosa/Transforms/TosaProfileCompliance.cpp
+@@ -27,7 +27,7 @@
  
--// CHECK: %{{.+}} = call { double, double } @llvm.modf.f64(double 1.000000e+00)
-+// CHECK: %call = call double @modf(double noundef 1.000000e+00, ptr noundef %DummyLongDouble) #3
- // CHECK: %{{.+}} = call { double, i32 } @llvm.frexp.f64.i32(double 0.000000e+00)
- // CHECK: %{{.+}} = call double @llvm.ldexp.f64.i32(double 1.000000e+00, i32 1)
-diff -ruN --strip-trailing-cr a/clang/test/CodeGen/builtin-attributes.c b/clang/test/CodeGen/builtin-attributes.c
---- a/clang/test/CodeGen/builtin-attributes.c
-+++ b/clang/test/CodeGen/builtin-attributes.c
-@@ -24,11 +24,6 @@
-   return __builtin_strstr(a, b);
+ // The profile-based compliance content below is auto-generated by a script
+ // in https://git.mlplatform.org/tosa/specification.git
+-#include "mlir/Dialect/Tosa/IR/TosaComplianceData.h"
++#include "mlir/Dialect/Tosa/IR/TosaComplianceData.h.inc"
+   // End of auto-generated metadata
  }
  
--// Note: Use asm label to disable intrinsic lowering of modf.
--double modf(double x, double*) asm("modf");
--float modff(float x, float*) asm("modff");
--long double modfl(long double x, long double*) asm("modfl");
--
- // frexp is NOT readnone. It writes to its pointer argument.
- //
- // CHECK: f3
-@@ -60,9 +55,9 @@
-   frexp(x, &e);
-   frexpf(x, &e);
-   frexpl(x, &e);
--  modf(x, &e);
--  modff(x, &e);
--  modfl(x, &e);
-+  __builtin_modf(x, &e);
-+  __builtin_modff(x, &e);
-+  __builtin_modfl(x, &e);
-   __builtin_remquo(x, x, &e);
-   __builtin_remquof(x, x, &e);
-   __builtin_remquol(x, x, &e);
-diff -ruN --strip-trailing-cr a/clang/test/CodeGen/math-builtins-long.c b/clang/test/CodeGen/math-builtins-long.c
---- a/clang/test/CodeGen/math-builtins-long.c
-+++ b/clang/test/CodeGen/math-builtins-long.c
-@@ -58,9 +58,9 @@
-   // PPCF128: call fp128 @ldexpf128(fp128 noundef %{{.+}}, {{(signext)?.+}})
-   __builtin_ldexpl(f,f);
- 
--  // F80: call { x86_fp80, x86_fp80 } @llvm.modf.f80(x86_fp80 %{{.+}})
--  // PPC: call { ppc_fp128, ppc_fp128 } @llvm.modf.ppcf128(ppc_fp128 %{{.+}})
--  // X86F128: call { fp128, fp128 } @llvm.modf.f128(fp128 %{{.+}})
-+  // F80: call x86_fp80 @modfl(x86_fp80 noundef %{{.+}}, ptr noundef %{{.+}})
-+  // PPC: call ppc_fp128 @modfl(ppc_fp128 noundef %{{.+}}, ptr noundef %{{.+}})
-+  // X86F128: call fp128 @modfl(fp128 noundef %{{.+}}, ptr noundef %{{.+}})
-   // PPCF128: call fp128 @modff128(fp128 noundef %{{.+}}, ptr noundef %{{.+}})
-   __builtin_modfl(f,l);
- 
-diff -ruN --strip-trailing-cr a/clang/test/CodeGen/math-libcalls.c b/clang/test/CodeGen/math-libcalls.c
---- a/clang/test/CodeGen/math-libcalls.c
-+++ b/clang/test/CodeGen/math-libcalls.c
-@@ -83,12 +83,12 @@
- 
-   modf(f,d);       modff(f,fp);      modfl(f,l);
- 
--  // NO__ERRNO: declare { double, double } @llvm.modf.f64(double) [[READNONE_INTRINSIC]]
--  // NO__ERRNO: declare { float, float } @llvm.modf.f32(float) [[READNONE_INTRINSIC]]
--  // NO__ERRNO: declare { x86_fp80, x86_fp80 } @llvm.modf.f80(x86_fp80) [[READNONE_INTRINSIC]]
--  // HAS_ERRNO: declare { double, double } @llvm.modf.f64(double) [[READNONE_INTRINSIC]]
--  // HAS_ERRNO: declare { float, float } @llvm.modf.f32(float) [[READNONE_INTRINSIC]]
--  // HAS_ERRNO: declare { x86_fp80, x86_fp80 } @llvm.modf.f80(x86_fp80) [[READNONE_INTRINSIC]]
-+  // NO__ERRNO: declare double @modf(double noundef, ptr noundef) [[NOT_READNONE]]
-+  // NO__ERRNO: declare float @modff(float noundef, ptr noundef) [[NOT_READNONE]]
-+  // NO__ERRNO: declare x86_fp80 @modfl(x86_fp80 noundef, ptr noundef) [[NOT_READNONE]]
-+  // HAS_ERRNO: declare double @modf(double noundef, ptr noundef) [[NOT_READNONE]]
-+  // HAS_ERRNO: declare float @modff(float noundef, ptr noundef) [[NOT_READNONE]]
-+  // HAS_ERRNO: declare x86_fp80 @modfl(x86_fp80 noundef, ptr noundef) [[NOT_READNONE]]
-   // HAS_MAYTRAP: declare double @modf(double noundef, ptr noundef) [[NOT_READNONE]]
-   // HAS_MAYTRAP: declare float @modff(float noundef, ptr noundef) [[NOT_READNONE]]
-   // HAS_MAYTRAP: declare x86_fp80 @modfl(x86_fp80 noundef, ptr noundef) [[NOT_READNONE]]
-diff -ruN --strip-trailing-cr a/clang/test/CodeGen/X86/math-builtins.c b/clang/test/CodeGen/X86/math-builtins.c
---- a/clang/test/CodeGen/X86/math-builtins.c
-+++ b/clang/test/CodeGen/X86/math-builtins.c
-@@ -38,24 +38,6 @@
- // NO__ERRNO-NEXT: [[FREXP_F128_0:%.+]] = extractvalue { fp128, i32 } [[FREXP_F128]], 0
- 
- 
--// NO__ERRNO: [[MODF_F64:%.+]] = call { double, double } @llvm.modf.f64(double %{{.+}})
--// NO__ERRNO-NEXT: [[MODF_F64_FP:%.+]] = extractvalue { double, double } [[MODF_F64]], 0
--// NO__ERRNO-NEXT: [[MODF_F64_IP:%.+]] = extractvalue { double, double } [[MODF_F64]], 1
--// NO__ERRNO-NEXT: store double [[MODF_F64_IP]], ptr %{{.+}}, align 8
--
--// NO__ERRNO: [[MODF_F32:%.+]] = call { float, float } @llvm.modf.f32(float %{{.+}})
--// NO__ERRNO-NEXT: [[MODF_F32_FP:%.+]] = extractvalue { float, float } [[MODF_F32]], 0
--// NO__ERRNO-NEXT: [[MODF_F32_IP:%.+]] = extractvalue { float, float } [[MODF_F32]], 1
--// NO__ERRNO-NEXT: store float [[MODF_F32_IP]], ptr %{{.+}}, align 4
--
--// NO__ERRNO: [[MODF_F80:%.+]] = call { x86_fp80, x86_fp80 } @llvm.modf.f80(x86_fp80 %{{.+}})
--// NO__ERRNO-NEXT: [[MODF_F80_FP:%.+]] = extractvalue { x86_fp80, x86_fp80 } [[MODF_F80]], 0
--// NO__ERRNO-NEXT: [[MODF_F80_IP:%.+]] = extractvalue { x86_fp80, x86_fp80 } [[MODF_F80]], 1
--// NO__ERRNO-NEXT: store x86_fp80 [[MODF_F80_IP]], ptr %{{.+}}, align 16
--
--// NO__ERRNO: call fp128 @modff128(fp128 noundef %{{.+}}, ptr noundef %{{.+}})
--
--
- // NO__ERRNO: [[SINCOS_F64:%.+]] = call { double, double } @llvm.sincos.f64(double %{{.+}})
- // NO__ERRNO-NEXT: [[SINCOS_F64_0:%.+]] = extractvalue { double, double } [[SINCOS_F64]], 0
- // NO__ERRNO-NEXT: [[SINCOS_F64_1:%.+]] = extractvalue { double, double } [[SINCOS_F64]], 1
-@@ -157,13 +139,13 @@
- 
-   __builtin_modf(f,d);       __builtin_modff(f,fp);      __builtin_modfl(f,l); __builtin_modff128(f,l);
- 
--// NO__ERRNO: declare { double, double } @llvm.modf.f64(double) [[READNONE_INTRINSIC]]
--// NO__ERRNO: declare { float, float } @llvm.modf.f32(float) [[READNONE_INTRINSIC]]
--// NO__ERRNO: declare { x86_fp80, x86_fp80 } @llvm.modf.f80(x86_fp80) [[READNONE_INTRINSIC]]
--// NO__ERRNO: declare fp128 @modff128(fp128 noundef, ptr noundef) [[NOT_READNONE:#[0-9]+]]
--// HAS_ERRNO: declare { double, double } @llvm.modf.f64(double) [[READNONE_INTRINSIC]]
--// HAS_ERRNO: declare { float, float } @llvm.modf.f32(float) [[READNONE_INTRINSIC]]
--// HAS_ERRNO: declare { x86_fp80, x86_fp80 } @llvm.modf.f80(x86_fp80) [[READNONE_INTRINSIC]]
-+// NO__ERRNO: declare double @modf(double noundef, ptr noundef) [[NOT_READNONE:#[0-9]+]]
-+// NO__ERRNO: declare float @modff(float noundef, ptr noundef) [[NOT_READNONE]]
-+// NO__ERRNO: declare x86_fp80 @modfl(x86_fp80 noundef, ptr noundef) [[NOT_READNONE]]
-+// NO__ERRNO: declare fp128 @modff128(fp128 noundef, ptr noundef) [[NOT_READNONE]]
-+// HAS_ERRNO: declare double @modf(double noundef, ptr noundef) [[NOT_READNONE]]
-+// HAS_ERRNO: declare float @modff(float noundef, ptr noundef) [[NOT_READNONE]]
-+// HAS_ERRNO: declare x86_fp80 @modfl(x86_fp80 noundef, ptr noundef) [[NOT_READNONE]]
- // HAS_ERRNO: declare fp128 @modff128(fp128 noundef, ptr noundef) [[NOT_READNONE]]
- 
-   __builtin_nan(c);        __builtin_nanf(c);       __builtin_nanl(c); __builtin_nanf128(c);
+diff -ruN --strip-trailing-cr a/utils/bazel/llvm-project-overlay/mlir/BUILD.bazel b/utils/bazel/llvm-project-overlay/mlir/BUILD.bazel
+--- a/utils/bazel/llvm-project-overlay/mlir/BUILD.bazel
++++ b/utils/bazel/llvm-project-overlay/mlir/BUILD.bazel
+@@ -12356,7 +12356,9 @@
+         "lib/Dialect/Tosa/IR/*.cpp",
+         "lib/Dialect/Tosa/Utils/*.cpp",
+         "lib/Dialect/Tosa/Transforms/*.cpp",
+-    ]),
++    ]) + [
++        "include/mlir/Dialect/Tosa/IR/TosaComplianceData.h.inc",
++    ],
+     hdrs = glob([
+         "include/mlir/Dialect/Tosa/IR/*.h",
+         "include/mlir/Dialect/Tosa/Utils/*.h",
diff --git a/third_party/llvm/workspace.bzl b/third_party/llvm/workspace.bzl
index 1abfb98..d1548b5 100644
--- a/third_party/llvm/workspace.bzl
+++ b/third_party/llvm/workspace.bzl
@@ -4,8 +4,8 @@ load("//third_party:repo.bzl", "tf_http_archive")
 
 def repo(name):
     """Imports LLVM."""
-    LLVM_COMMIT = "dc326d0b01f63e49f4f11c0c332369bf109721df"
-    LLVM_SHA256 = "6fa9fbb5dbae0146c5fa7e28c6c2bcbb175a983d3443eb37cdada979fdcb0b96"
+    LLVM_COMMIT = "43d71baae36c8d8b5a9995aa35efebe09cc9c2d6"
+    LLVM_SHA256 = "436af8b4c3403e251ab0b7a471eda7df6063f9da9d22ccbe498f3115cd35225a"
 
     tf_http_archive(
         name = name,
