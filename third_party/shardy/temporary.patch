diff --git a/third_party/llvm/generated.patch b/third_party/llvm/generated.patch
index c9cd1fd..edbbb76 100644
--- a/third_party/llvm/generated.patch
+++ b/third_party/llvm/generated.patch
@@ -248,6 +248,28 @@ diff -ruN --strip-trailing-cr a/llvm/lib/Transforms/IPO/EmbedBitcodePass.cpp b/l
    else
      BitcodeWriterPass(OS, /*ShouldPreserveUseListOrder=*/false, EmitLTOSummary)
          .run(M, AM);
+diff -ruN --strip-trailing-cr a/llvm/lib/Transforms/Vectorize/VPlanUnroll.cpp b/llvm/lib/Transforms/Vectorize/VPlanUnroll.cpp
+--- a/llvm/lib/Transforms/Vectorize/VPlanUnroll.cpp
++++ b/llvm/lib/Transforms/Vectorize/VPlanUnroll.cpp
+@@ -490,8 +490,16 @@
+ void VPlanTransforms::replicateByVF(VPlan &Plan, ElementCount VF) {
+   Type *IdxTy = IntegerType::get(
+       Plan.getScalarHeader()->getIRBasicBlock()->getContext(), 32);
+-  for (VPBasicBlock *VPBB : VPBlockUtils::blocksOnly<VPBasicBlock>(
+-           vp_depth_first_shallow(Plan.getVectorLoopRegion()->getEntry()))) {
++
++  // Visit all VPBBs outside the loop region and directly inside the top-level
++  // loop region.
++  auto VPBBsOutsideLoopRegion = VPBlockUtils::blocksOnly<VPBasicBlock>(
++      vp_depth_first_shallow(Plan.getEntry()));
++  auto VPBBsInsideLoopRegion = VPBlockUtils::blocksOnly<VPBasicBlock>(
++      vp_depth_first_shallow(Plan.getVectorLoopRegion()->getEntry()));
++  auto VPBBsToUnroll =
++      concat<VPBasicBlock *>(VPBBsOutsideLoopRegion, VPBBsInsideLoopRegion);
++  for (VPBasicBlock *VPBB : VPBBsToUnroll) {
+     for (VPRecipeBase &R : make_early_inc_range(*VPBB)) {
+       auto *RepR = dyn_cast<VPReplicateRecipe>(&R);
+       if (!RepR || RepR->isSingleScalar())
 diff -ruN --strip-trailing-cr a/llvm/test/CodeGen/X86/dag-combiner-fma-folding.ll b/llvm/test/CodeGen/X86/dag-combiner-fma-folding.ll
 --- a/llvm/test/CodeGen/X86/dag-combiner-fma-folding.ll
 +++ b/llvm/test/CodeGen/X86/dag-combiner-fma-folding.ll
@@ -293,6 +315,82 @@ diff -ruN --strip-trailing-cr a/llvm/test/Transforms/EmbedBitcode/embed-wpd.ll b
  ; CHECK: @llvm.embedded.object = private constant {{.*}}, section ".llvm.lto", align 1
  ; CHECK: @llvm.compiler.used = appending global [1 x ptr] [ptr @llvm.embedded.object], section "llvm.metadata"
  @_ZTV3Foo = linkonce_odr hidden unnamed_addr constant { [5 x ptr] } { [5 x ptr] [ptr null, ptr @_ZTI3Foo, ptr @_ZN3FooD2Ev, ptr @_ZN3FooD0Ev, ptr @_ZNKSt13runtime_error4whatEv] }, comdat, align 8, !type !0, !type !1, !type !2, !type !3, !type !4, !type !5
+diff -ruN --strip-trailing-cr a/llvm/test/Transforms/LoopVectorize/AArch64/licm-calls.ll b/llvm/test/Transforms/LoopVectorize/AArch64/licm-calls.ll
+--- a/llvm/test/Transforms/LoopVectorize/AArch64/licm-calls.ll
++++ b/llvm/test/Transforms/LoopVectorize/AArch64/licm-calls.ll
+@@ -0,0 +1,72 @@
++; NOTE: Assertions have been autogenerated by utils/update_test_checks.py UTC_ARGS: --check-globals none --version 5
++; RUN: opt -p loop-vectorize -S %s | FileCheck %s
++
++target triple = "aarch64-unknown-linux-gnu"
++
++define void @licm_replicate_call(double %x, ptr %dst) {
++; CHECK-LABEL: define void @licm_replicate_call(
++; CHECK-SAME: double [[X:%.*]], ptr [[DST:%.*]]) {
++; CHECK-NEXT:  [[ENTRY:.*]]:
++; CHECK-NEXT:    br i1 false, label %[[SCALAR_PH:.*]], label %[[VECTOR_PH:.*]]
++; CHECK:       [[VECTOR_PH]]:
++; CHECK-NEXT:    [[TMP0:%.*]] = tail call double @llvm.pow.f64(double [[X]], double 3.000000e+00)
++; CHECK-NEXT:    [[TMP1:%.*]] = tail call double @llvm.pow.f64(double [[X]], double 3.000000e+00)
++; CHECK-NEXT:    [[TMP2:%.*]] = insertelement <2 x double> poison, double [[TMP0]], i32 0
++; CHECK-NEXT:    [[TMP3:%.*]] = insertelement <2 x double> [[TMP2]], double [[TMP1]], i32 1
++; CHECK-NEXT:    br label %[[VECTOR_BODY:.*]]
++; CHECK:       [[VECTOR_BODY]]:
++; CHECK-NEXT:    [[INDEX:%.*]] = phi i64 [ 0, %[[VECTOR_PH]] ], [ [[INDEX_NEXT:%.*]], %[[VECTOR_BODY]] ]
++; CHECK-NEXT:    [[VEC_IND:%.*]] = phi <2 x i32> [ <i32 0, i32 1>, %[[VECTOR_PH]] ], [ [[VEC_IND_NEXT:%.*]], %[[VECTOR_BODY]] ]
++; CHECK-NEXT:    [[STEP_ADD:%.*]] = add <2 x i32> [[VEC_IND]], splat (i32 2)
++; CHECK-NEXT:    [[TMP4:%.*]] = uitofp <2 x i32> [[VEC_IND]] to <2 x double>
++; CHECK-NEXT:    [[TMP5:%.*]] = uitofp <2 x i32> [[STEP_ADD]] to <2 x double>
++; CHECK-NEXT:    [[TMP6:%.*]] = fmul <2 x double> [[TMP3]], [[TMP4]]
++; CHECK-NEXT:    [[TMP7:%.*]] = fmul <2 x double> [[TMP3]], [[TMP5]]
++; CHECK-NEXT:    [[TMP8:%.*]] = getelementptr inbounds double, ptr [[DST]], i64 [[INDEX]]
++; CHECK-NEXT:    [[TMP9:%.*]] = getelementptr inbounds double, ptr [[TMP8]], i32 0
++; CHECK-NEXT:    [[TMP10:%.*]] = getelementptr inbounds double, ptr [[TMP8]], i32 2
++; CHECK-NEXT:    store <2 x double> [[TMP6]], ptr [[TMP9]], align 8
++; CHECK-NEXT:    store <2 x double> [[TMP7]], ptr [[TMP10]], align 8
++; CHECK-NEXT:    [[INDEX_NEXT]] = add nuw i64 [[INDEX]], 4
++; CHECK-NEXT:    [[VEC_IND_NEXT]] = add <2 x i32> [[STEP_ADD]], splat (i32 2)
++; CHECK-NEXT:    [[TMP11:%.*]] = icmp eq i64 [[INDEX_NEXT]], 128
++; CHECK-NEXT:    br i1 [[TMP11]], label %[[MIDDLE_BLOCK:.*]], label %[[VECTOR_BODY]], !llvm.loop [[LOOP0:![0-9]+]]
++; CHECK:       [[MIDDLE_BLOCK]]:
++; CHECK-NEXT:    br i1 false, label %[[EXIT:.*]], label %[[SCALAR_PH]]
++; CHECK:       [[SCALAR_PH]]:
++; CHECK-NEXT:    [[BC_RESUME_VAL:%.*]] = phi i64 [ 128, %[[MIDDLE_BLOCK]] ], [ 0, %[[ENTRY]] ]
++; CHECK-NEXT:    br label %[[LOOP:.*]]
++; CHECK:       [[LOOP]]:
++; CHECK-NEXT:    [[IV:%.*]] = phi i64 [ [[BC_RESUME_VAL]], %[[SCALAR_PH]] ], [ [[IV_NEXT:%.*]], %[[LOOP]] ]
++; CHECK-NEXT:    [[IV_TRUNC:%.*]] = trunc i64 [[IV]] to i32
++; CHECK-NEXT:    [[IV_AS_FP:%.*]] = uitofp i32 [[IV_TRUNC]] to double
++; CHECK-NEXT:    [[P:%.*]] = tail call double @llvm.pow.f64(double [[X]], double 3.000000e+00)
++; CHECK-NEXT:    [[MUL:%.*]] = fmul double [[P]], [[IV_AS_FP]]
++; CHECK-NEXT:    [[GEP_DST:%.*]] = getelementptr inbounds double, ptr [[DST]], i64 [[IV]]
++; CHECK-NEXT:    store double [[MUL]], ptr [[GEP_DST]], align 8
++; CHECK-NEXT:    [[IV_NEXT]] = add i64 [[IV]], 1
++; CHECK-NEXT:    [[EC:%.*]] = icmp eq i64 [[IV]], 128
++; CHECK-NEXT:    br i1 [[EC]], label %[[EXIT]], label %[[LOOP]], !llvm.loop [[LOOP3:![0-9]+]]
++; CHECK:       [[EXIT]]:
++; CHECK-NEXT:    ret void
++;
++entry:
++  br label %loop
++
++loop:
++  %iv = phi i64 [ 0, %entry ], [ %iv.next, %loop ]
++  %iv.trunc = trunc i64 %iv to i32
++  %iv.as.fp = uitofp i32 %iv.trunc to double
++  %p = tail call double @llvm.pow.f64(double %x, double 3.000000e+00)
++  %mul = fmul double %p, %iv.as.fp
++  %gep.dst = getelementptr inbounds double, ptr %dst, i64 %iv
++  store double %mul, ptr %gep.dst, align 8
++  %iv.next = add i64 %iv, 1
++  %ec = icmp eq i64 %iv, 128
++  br i1 %ec, label %exit, label %loop
++
++exit:
++  ret void
++}
++
++declare double @llvm.pow.f64(double, double)
 diff -ruN --strip-trailing-cr a/mlir/include/mlir/Dialect/XeGPU/IR/XeGPUTargetInfo.h b/mlir/include/mlir/Dialect/XeGPU/IR/XeGPUTargetInfo.h
 --- a/mlir/include/mlir/Dialect/XeGPU/IR/XeGPUTargetInfo.h
 +++ b/mlir/include/mlir/Dialect/XeGPU/IR/XeGPUTargetInfo.h
diff --git a/third_party/llvm/workspace.bzl b/third_party/llvm/workspace.bzl
index 133707f..f31472d 100644
--- a/third_party/llvm/workspace.bzl
+++ b/third_party/llvm/workspace.bzl
@@ -4,8 +4,8 @@ load("//third_party:repo.bzl", "tf_http_archive")
 
 def repo(name):
     """Imports LLVM."""
-    LLVM_COMMIT = "696c0f92e0fef955e331895cd8d65fb6cc080ad3"
-    LLVM_SHA256 = "6286243e3900d7958c72480a701427f23e99e52ff605c4ed67bc01587745bfdf"
+    LLVM_COMMIT = "aa2402931908317f5cc19b164ef17c5a74f2ae67"
+    LLVM_SHA256 = "19fcdd7e8ac305a91a0b54f22b7bcdca15fd59a0fa567d2014c648d53cceca89"
 
     tf_http_archive(
         name = name,
diff --git a/third_party/stablehlo/temporary.patch b/third_party/stablehlo/temporary.patch
index f1f145d..f34c37f 100755
--- a/third_party/stablehlo/temporary.patch
+++ b/third_party/stablehlo/temporary.patch
@@ -1,15 +1,3 @@
-diff --ruN a/stablehlo/stablehlo/dialect/AssemblyFormat.cpp b/stablehlo/stablehlo/dialect/AssemblyFormat.cpp
---- stablehlo/stablehlo/dialect/AssemblyFormat.cpp
-+++ stablehlo/stablehlo/dialect/AssemblyFormat.cpp
-@@ -655,7 +655,7 @@
-   }
-   p.printOptionalAttrDictWithKeyword(op->getAttrs());
-   p.printNewline();
--  p << " cond ";
-+  p << "cond ";
-   p.printRegion(cond, /*printEntryBlockArgs=*/false);
-   p << " do ";
-   p.printRegion(body, /*printEntryBlockArgs=*/false);
 diff --ruN a/stablehlo/stablehlo/conversions/linalg/transforms/MapStablehloToScalarOp.h b/stablehlo/stablehlo/conversions/linalg/transforms/MapStablehloToScalarOp.h
 --- stablehlo/stablehlo/conversions/linalg/transforms/MapStablehloToScalarOp.h
 +++ stablehlo/stablehlo/conversions/linalg/transforms/MapStablehloToScalarOp.h
@@ -58,4 +46,17 @@ diff --ruN a/stablehlo/stablehlo/conversions/linalg/transforms/StablehloToLinalg
 +                                          /*emitError=*/{});
          },
          linalg::getPrunedAttributeList(op));
+ 
+diff --ruN a/stablehlo/stablehlo/dialect/AssemblyFormat.cpp b/stablehlo/stablehlo/dialect/AssemblyFormat.cpp
+--- stablehlo/stablehlo/dialect/AssemblyFormat.cpp
++++ stablehlo/stablehlo/dialect/AssemblyFormat.cpp
+@@ -655,7 +655,7 @@
+   }
+   p.printOptionalAttrDictWithKeyword(op->getAttrs());
+   p.printNewline();
+-  p << " cond ";
++  p << "cond ";
+   p.printRegion(cond, /*printEntryBlockArgs=*/false);
+   p << " do ";
+   p.printRegion(body, /*printEntryBlockArgs=*/false);
 
