diff --git a/shardy/dialect/sdy/transforms/export/export_pipeline.cc b/shardy/dialect/sdy/transforms/export/export_pipeline.cc
index 53d6741..ca2baa8 100644
--- a/shardy/dialect/sdy/transforms/export/export_pipeline.cc
+++ b/shardy/dialect/sdy/transforms/export/export_pipeline.cc
@@ -24,8 +24,7 @@ namespace mlir {
 namespace sdy {
 
 void addExportPipeline(OpPassManager& pm, StringRef dumpDirectory,
-                       bool skipConvertToReshard,
-                       bool enableInsertExplicitCollectives) {
+                       bool skipConvertToReshard) {
   pm.addPass(createRemoveShardingGroupsPass());
   if (!skipConvertToReshard) {
     pm.addNestedPass<func::FuncOp>(createShardingConstraintToReshardPass());
@@ -35,15 +34,6 @@ void addExportPipeline(OpPassManager& pm, StringRef dumpDirectory,
       createUpdateNonDivisibleInputOutputShardingsPass());
   pm.addPass(mlir::sdy::createSaveModuleOpPass(dumpDirectory,
                                                "sdy_module_after_sdy_export"));
-  if (enableInsertExplicitCollectives) {
-    pm.addNestedPass<func::FuncOp>(createCloseShardingsPass());
-    pm.addNestedPass<func::FuncOp>(createInsertExplicitReshardsPass());
-    pm.addPass(mlir::sdy::createSaveModuleOpPass(
-        dumpDirectory, "sdy_module_after_insert_explicit_reshards"));
-    pm.addNestedPass<func::FuncOp>(createReshardToCollectivesPass());
-    pm.addPass(mlir::sdy::createSaveModuleOpPass(
-        dumpDirectory, "sdy_module_after_reshard_to_collectives"));
-  }
 }
 
 void registerExportPipeline() {
diff --git a/shardy/dialect/sdy/transforms/export/passes.h b/shardy/dialect/sdy/transforms/export/passes.h
index 1c23e0d..e225a6a 100644
--- a/shardy/dialect/sdy/transforms/export/passes.h
+++ b/shardy/dialect/sdy/transforms/export/passes.h
@@ -38,8 +38,7 @@ namespace sdy {
 // Adds a sequence of export passes needed as a post-processing step for SDY
 // propagation.
 void addExportPipeline(OpPassManager& pm, StringRef dumpDirectory = "",
-                       bool skipConvertToReshard = false,
-                       bool enableInsertExplicitCollectives = false);
+                       bool skipConvertToReshard = false);
 
 // Register the sdy-export-pipeline.
 void registerExportPipeline();
diff --git a/shardy/dialect/sdy/transforms/propagation/passes.h b/shardy/dialect/sdy/transforms/propagation/passes.h
index 1a9fdcb..d56485e 100644
--- a/shardy/dialect/sdy/transforms/propagation/passes.h
+++ b/shardy/dialect/sdy/transforms/propagation/passes.h
@@ -52,8 +52,6 @@ struct PropagationOptions {
   bool skipConvertToReshard = false;
   // Whether to skip inlining in the module.
   bool skipInline = false;
-  // Whether to enable inserting explicit collectives.
-  bool enableInsertExplicitCollectives = false;
 };
 
 // Adds the SDY propagation pass, preceded by a sequence of import passes needed
diff --git a/shardy/dialect/sdy/transforms/propagation/propagation_pipeline.cc b/shardy/dialect/sdy/transforms/propagation/propagation_pipeline.cc
index 3a941bc..dc1ada6 100644
--- a/shardy/dialect/sdy/transforms/propagation/propagation_pipeline.cc
+++ b/shardy/dialect/sdy/transforms/propagation/propagation_pipeline.cc
@@ -29,8 +29,7 @@ void addPropagationPipeline(OpPassManager& pm,
                             const PropagationOptions& options) {
   addImportPipeline(pm, options.dumpDirectory, options.skipInline);
   pm.addPass(createUserPriorityPropagationPass(options));
-  addExportPipeline(pm, options.dumpDirectory, options.skipConvertToReshard,
-                    options.enableInsertExplicitCollectives);
+  addExportPipeline(pm, options.dumpDirectory, options.skipConvertToReshard);
 }
 
 void registerPropagationPipeline() {
diff --git a/third_party/llvm/generated.patch b/third_party/llvm/generated.patch
index be80184..509398d 100644
--- a/third_party/llvm/generated.patch
+++ b/third_party/llvm/generated.patch
@@ -1,132 +1 @@
 Auto generated patch. Do not edit or delete it, even if empty.
-diff -ruN --strip-trailing-cr a/clang/include/clang/Basic/BuiltinsX86.td b/clang/include/clang/Basic/BuiltinsX86.td
---- a/clang/include/clang/Basic/BuiltinsX86.td
-+++ b/clang/include/clang/Basic/BuiltinsX86.td
-@@ -130,10 +130,6 @@
-   }
- }
- 
--let Features = "sse", Header = "xmmintrin.h", Attributes = [NoThrow, Const] in {
--  def _mm_prefetch : X86LibBuiltin<"void(void const *, int)">;
--}
--
- // AVX
- let Attributes = [Const, NoThrow, RequiredVectorWidth<256>], Features = "avx" in {
-   foreach Op = ["addsub", "hadd", "hsub", "max", "min"] in {
-@@ -142,12 +138,6 @@
-   }
- }
- 
--// PRFCHW
--let Features = "prfchw", Header = "intrin.h", Attributes = [NoThrow, Const] in {
--  def _m_prefetch : X86LibBuiltin<"void(void *)">;
--  def _m_prefetchw : X86LibBuiltin<"void(void volatile const *)">;
--}
--
- 
- // Mechanically ported builtins from the original `.def` file.
- //
-@@ -156,6 +146,10 @@
- // current formulation is based on what was easiest to recognize from the
- // pre-TableGen version.
- 
-+let Features = "mmx", Attributes = [NoThrow, Const] in {
-+  def _mm_prefetch : X86NoPrefixBuiltin<"void(char const *, int)">;
-+}
-+
- let Features = "sse", Attributes = [NoThrow] in {
-   def ldmxcsr : X86Builtin<"void(unsigned int)">;
- }
-diff -ruN --strip-trailing-cr a/clang/lib/CodeGen/CGBuiltin.cpp b/clang/lib/CodeGen/CGBuiltin.cpp
---- a/clang/lib/CodeGen/CGBuiltin.cpp
-+++ b/clang/lib/CodeGen/CGBuiltin.cpp
-@@ -15374,17 +15374,6 @@
-     Function *F = CGM.getIntrinsic(Intrinsic::prefetch, Address->getType());
-     return Builder.CreateCall(F, {Address, RW, Locality, Data});
-   }
--  case X86::BI_m_prefetch:
--  case X86::BI_m_prefetchw: {
--    Value *Address = Ops[0];
--    // The 'w' suffix implies write.
--    Value *RW =
--        ConstantInt::get(Int32Ty, BuiltinID == X86::BI_m_prefetchw ? 1 : 0);
--    Value *Locality = ConstantInt::get(Int32Ty, 0x3);
--    Value *Data = ConstantInt::get(Int32Ty, 1);
--    Function *F = CGM.getIntrinsic(Intrinsic::prefetch, Address->getType());
--    return Builder.CreateCall(F, {Address, RW, Locality, Data});
--  }
-   case X86::BI_mm_clflush: {
-     return Builder.CreateCall(CGM.getIntrinsic(Intrinsic::x86_sse2_clflush),
-                               Ops[0]);
-diff -ruN --strip-trailing-cr a/clang/lib/Headers/prfchwintrin.h b/clang/lib/Headers/prfchwintrin.h
---- a/clang/lib/Headers/prfchwintrin.h
-+++ b/clang/lib/Headers/prfchwintrin.h
-@@ -14,10 +14,6 @@
- #ifndef __PRFCHWINTRIN_H
- #define __PRFCHWINTRIN_H
- 
--#if defined(__cplusplus)
--extern "C" {
--#endif
--
- /// Loads a memory sequence containing the specified memory address into
- ///    all data cache levels.
- ///
-@@ -30,7 +26,11 @@
- ///
- /// \param __P
- ///    A pointer specifying the memory address to be prefetched.
--void _m_prefetch(void *__P);
-+static __inline__ void __attribute__((__always_inline__, __nodebug__))
-+_m_prefetch(void *__P)
-+{
-+  __builtin_prefetch (__P, 0, 3 /* _MM_HINT_T0 */);
-+}
- 
- /// Loads a memory sequence containing the specified memory address into
- ///    the L1 data cache and sets the cache-coherency state to modified.
-@@ -48,10 +48,13 @@
- ///
- /// \param __P
- ///    A pointer specifying the memory address to be prefetched.
--void _m_prefetchw(volatile const void *__P);
--
--#if defined(__cplusplus)
--} // extern "C"
--#endif
-+static __inline__ void __attribute__((__always_inline__, __nodebug__))
-+_m_prefetchw(volatile const void *__P)
-+{
-+#pragma clang diagnostic push
-+#pragma clang diagnostic ignored "-Wcast-qual"
-+  __builtin_prefetch ((const void*)__P, 1, 3 /* _MM_HINT_T0 */);
-+#pragma clang diagnostic pop
-+}
- 
- #endif /* __PRFCHWINTRIN_H */
-diff -ruN --strip-trailing-cr a/clang/lib/Headers/xmmintrin.h b/clang/lib/Headers/xmmintrin.h
---- a/clang/lib/Headers/xmmintrin.h
-+++ b/clang/lib/Headers/xmmintrin.h
-@@ -2197,7 +2197,10 @@
- #define _MM_HINT_T2  1
- #define _MM_HINT_NTA 0
- 
--#if 0
-+#ifndef _MSC_VER
-+/* FIXME: We have to #define this because "sel" must be a constant integer, and
-+   Sema doesn't do any form of constant propagation yet. */
-+
- /// Loads one cache line of data from the specified address to a location
- ///    closer to the processor.
- ///
-@@ -2222,10 +2225,6 @@
- ///    be generated. \n
- ///    _MM_HINT_T2: Move data using the T2 hint. The PREFETCHT2 instruction will
- ///    be generated.
--///
--/// _mm_prefetch is implemented as a "library builtin" directly in Clang,
--/// similar to how it is done in MSVC. Clang will warn if the user doesn't
--/// include xmmintrin.h or immintrin.h.
- #define _mm_prefetch(a, sel) (__builtin_prefetch((const void *)(a), \
-                                                  ((sel) >> 2) & 1, (sel) & 0x3))
- #endif
diff --git a/third_party/llvm/workspace.bzl b/third_party/llvm/workspace.bzl
index dc3cead..9695b98 100644
--- a/third_party/llvm/workspace.bzl
+++ b/third_party/llvm/workspace.bzl
@@ -4,8 +4,8 @@ load("//third_party:repo.bzl", "tf_http_archive")
 
 def repo(name):
     """Imports LLVM."""
-    LLVM_COMMIT = "f8287f6c373fcf993643dd6f0e30dde304c1be73"
-    LLVM_SHA256 = "add2841174abc79c45aa309bdf0cf631aa8f97e7a4df57dcfca57c60df27527f"
+    LLVM_COMMIT = "8b448842c4766306b74f9dba2ee9ad3af12fea6c"
+    LLVM_SHA256 = "ac217ced41cac2b14641e1ff692f941a81d03de18ba8e7b7039a3943913ebe81"
 
     tf_http_archive(
         name = name,
