diff --git a/shardy/dialect/sdy/transforms/import/BUILD b/shardy/dialect/sdy/transforms/import/BUILD
index ce6d8ae..21606f9 100644
--- a/shardy/dialect/sdy/transforms/import/BUILD
+++ b/shardy/dialect/sdy/transforms/import/BUILD
@@ -39,6 +39,7 @@ cc_library(
         "inline_meshes.cc",
         "lift_inlined_meshes.cc",
         "manual_axes_cleanup.cc",
+        "remove_size_one_axes.cc",
         "sharding_group_import.cc",
     ],
     hdrs = [
diff --git a/shardy/dialect/sdy/transforms/import/add_data_flow_edges.cc b/shardy/dialect/sdy/transforms/import/add_data_flow_edges.cc
index 5b5182c..09625df 100644
--- a/shardy/dialect/sdy/transforms/import/add_data_flow_edges.cc
+++ b/shardy/dialect/sdy/transforms/import/add_data_flow_edges.cc
@@ -13,16 +13,14 @@ See the License for the specific language governing permissions and
 limitations under the License.
 ==============================================================================*/
 
-#include <memory>  // IWYU pragma: keep
-
 #include "llvm/ADT/STLExtras.h"
 #include "mlir/Dialect/Func/IR/FuncOps.h"
 #include "mlir/IR/PatternMatch.h"
 #include "mlir/IR/Value.h"
 #include "mlir/IR/ValueRange.h"
-#include "mlir/Pass/Pass.h"  // IWYU pragma: keep
 #include "shardy/dialect/sdy/ir/dialect.h"
 #include "shardy/dialect/sdy/ir/utils.h"
+#include "shardy/dialect/sdy/transforms/import/passes.h"  // IWYU pragma: keep
 
 namespace mlir {
 namespace sdy {
diff --git a/shardy/dialect/sdy/transforms/import/apply_sharding_constraints.cc b/shardy/dialect/sdy/transforms/import/apply_sharding_constraints.cc
index b42469b..9957864 100644
--- a/shardy/dialect/sdy/transforms/import/apply_sharding_constraints.cc
+++ b/shardy/dialect/sdy/transforms/import/apply_sharding_constraints.cc
@@ -15,17 +15,16 @@ limitations under the License.
 
 #include <cassert>
 #include <functional>
-#include <memory>  // IWYU pragma: keep
 
 #include "llvm/ADT/STLExtras.h"
-#include "mlir/Dialect/Func/IR/FuncOps.h"  // IWYU pragma: keep
+#include "mlir/Dialect/Func/IR/FuncOps.h"
 #include "mlir/IR/Builders.h"
 #include "mlir/IR/BuiltinAttributes.h"
 #include "mlir/IR/Value.h"
-#include "mlir/Pass/Pass.h"  // IWYU pragma: keep
 #include "mlir/Support/LLVM.h"
 #include "shardy/dialect/sdy/ir/dialect.h"
 #include "shardy/dialect/sdy/ir/utils.h"
+#include "shardy/dialect/sdy/transforms/import/passes.h"  // IWYU pragma: keep
 
 namespace mlir {
 namespace sdy {
diff --git a/shardy/dialect/sdy/transforms/import/constant_or_scalar_splitter.cc b/shardy/dialect/sdy/transforms/import/constant_or_scalar_splitter.cc
index 6c13370..2e2caf0 100644
--- a/shardy/dialect/sdy/transforms/import/constant_or_scalar_splitter.cc
+++ b/shardy/dialect/sdy/transforms/import/constant_or_scalar_splitter.cc
@@ -14,7 +14,6 @@ limitations under the License.
 ==============================================================================*/
 
 #include <cassert>
-#include <memory>  // IWYU pragma: keep
 #include <utility>
 
 #include "llvm/ADT/STLExtras.h"
@@ -26,7 +25,6 @@ limitations under the License.
 #include "mlir/IR/PatternMatch.h"
 #include "mlir/IR/Value.h"
 #include "mlir/Interfaces/SideEffectInterfaces.h"
-#include "mlir/Pass/Pass.h"  // IWYU pragma: keep
 #include "mlir/Rewrite/FrozenRewritePatternSet.h"
 #include "mlir/Support/LLVM.h"
 #include "mlir/Support/LogicalResult.h"
@@ -34,6 +32,7 @@ limitations under the License.
 #include "shardy/dialect/sdy/ir/dialect.h"
 #include "shardy/dialect/sdy/ir/utils.h"
 #include "shardy/dialect/sdy/transforms/common/op_properties.h"
+#include "shardy/dialect/sdy/transforms/import/passes.h"  // IWYU pragma: keep
 #include "stablehlo/dialect/StablehloOps.h"
 
 namespace mlir {
diff --git a/shardy/dialect/sdy/transforms/import/import_pipeline.cc b/shardy/dialect/sdy/transforms/import/import_pipeline.cc
index b8854f2..33958ba 100644
--- a/shardy/dialect/sdy/transforms/import/import_pipeline.cc
+++ b/shardy/dialect/sdy/transforms/import/import_pipeline.cc
@@ -54,6 +54,7 @@ void addImportPipeline(OpPassManager& pm, StringRef dumpDirectory,
   }
   pm.addPass(createSymbolDCEPass());
   pm.addPass(createLiftInlinedMeshesPass());
+  pm.addPass(createRemoveSizeOneAxesPass());
   pm.addNestedPass<func::FuncOp>(createConstantOrScalarSplitterPass());
   pm.addNestedPass<func::FuncOp>(createAddDataFlowEdgesPass());
   pm.addPass(createManualAxesCleanupPass());
diff --git a/shardy/dialect/sdy/transforms/import/inline_meshes.cc b/shardy/dialect/sdy/transforms/import/inline_meshes.cc
index 0c9edfd..1edc746 100644
--- a/shardy/dialect/sdy/transforms/import/inline_meshes.cc
+++ b/shardy/dialect/sdy/transforms/import/inline_meshes.cc
@@ -14,7 +14,6 @@ limitations under the License.
 ==============================================================================*/
 
 #include <cassert>
-#include <memory>  // IWYU pragma: keep
 
 #include "llvm/ADT/STLExtras.h"
 #include "mlir/IR/Attributes.h"
@@ -22,11 +21,11 @@ limitations under the License.
 #include "mlir/IR/BuiltinAttributes.h"
 #include "mlir/IR/BuiltinOps.h"
 #include "mlir/IR/SymbolTable.h"
-#include "mlir/Pass/Pass.h"  // IWYU pragma: keep
 #include "mlir/Support/LLVM.h"
 #include "shardy/dialect/sdy/ir/dialect.h"
 #include "shardy/dialect/sdy/ir/utils.h"
 #include "shardy/dialect/sdy/transforms/common/sharding_walker.h"
+#include "shardy/dialect/sdy/transforms/import/passes.h"  // IWYU pragma: keep
 
 namespace mlir {
 namespace sdy {
diff --git a/shardy/dialect/sdy/transforms/import/lift_inlined_meshes.cc b/shardy/dialect/sdy/transforms/import/lift_inlined_meshes.cc
index 97f4997..9f6d483 100644
--- a/shardy/dialect/sdy/transforms/import/lift_inlined_meshes.cc
+++ b/shardy/dialect/sdy/transforms/import/lift_inlined_meshes.cc
@@ -15,7 +15,6 @@ limitations under the License.
 
 #include <cassert>
 #include <cstdint>
-#include <memory>  // IWYU pragma: keep
 #include <optional>
 #include <string>
 
@@ -27,10 +26,10 @@ limitations under the License.
 #include "mlir/IR/BuiltinAttributes.h"
 #include "mlir/IR/BuiltinOps.h"
 #include "mlir/IR/SymbolTable.h"
-#include "mlir/Pass/Pass.h"  // IWYU pragma: keep
 #include "mlir/Support/LLVM.h"
 #include "shardy/dialect/sdy/ir/dialect.h"
 #include "shardy/dialect/sdy/transforms/common/sharding_walker.h"
+#include "shardy/dialect/sdy/transforms/import/passes.h"  // IWYU pragma: keep
 
 namespace mlir {
 namespace sdy {
diff --git a/shardy/dialect/sdy/transforms/import/manual_axes_cleanup.cc b/shardy/dialect/sdy/transforms/import/manual_axes_cleanup.cc
index d1ede89..5d38ca2 100644
--- a/shardy/dialect/sdy/transforms/import/manual_axes_cleanup.cc
+++ b/shardy/dialect/sdy/transforms/import/manual_axes_cleanup.cc
@@ -16,7 +16,6 @@ limitations under the License.
 #include <cassert>
 #include <functional>
 #include <iterator>
-#include <memory>  // IWYU pragma: keep
 #include <optional>
 
 #include "llvm/ADT/STLExtras.h"
@@ -24,15 +23,15 @@ limitations under the License.
 #include "mlir/IR/Attributes.h"
 #include "mlir/IR/Builders.h"
 #include "mlir/IR/BuiltinAttributes.h"
-#include "mlir/IR/BuiltinTypeInterfaces.h"
 #include "mlir/IR/BuiltinOps.h"
+#include "mlir/IR/BuiltinTypeInterfaces.h"
 #include "mlir/IR/Operation.h"
 #include "mlir/IR/SymbolTable.h"
 #include "mlir/IR/TypeRange.h"
-#include "mlir/Pass/Pass.h"  // IWYU pragma: keep
 #include "mlir/Support/LLVM.h"
 #include "shardy/dialect/sdy/ir/dialect.h"
 #include "shardy/dialect/sdy/ir/utils.h"
+#include "shardy/dialect/sdy/transforms/import/passes.h"  // IWYU pragma: keep
 
 namespace mlir {
 namespace sdy {
diff --git a/shardy/dialect/sdy/transforms/import/passes.td b/shardy/dialect/sdy/transforms/import/passes.td
index 34dbc48..bb89f98 100644
--- a/shardy/dialect/sdy/transforms/import/passes.td
+++ b/shardy/dialect/sdy/transforms/import/passes.td
@@ -175,3 +175,13 @@ def ManualAxesCleanupPass : Pass<"sdy-manual-axes-cleanup", "ModuleOp"> {
   }];
   let dependentDialects = ["mlir::sdy::SdyDialect"];
 }
+
+def RemoveSizeOneAxesPass : Pass<"sdy-remove-size-one-axes", "ModuleOp"> {
+  let summary = "Removes size one axes from shardings.";
+  let description = [{
+    removes axes of size one from all shardings and manual computation ops, to
+    avoid conflict during propagation that are due to such axes. Note that the
+    axes in the meshes are not removed.
+  }];
+  let dependentDialects = ["mlir::sdy::SdyDialect"];
+}
diff --git a/shardy/dialect/sdy/transforms/import/remove_size_one_axes.cc b/shardy/dialect/sdy/transforms/import/remove_size_one_axes.cc
new file mode 100644
index 0000000..259b1ac
--- /dev/null
+++ b/shardy/dialect/sdy/transforms/import/remove_size_one_axes.cc
@@ -0,0 +1,107 @@
+/* Copyright 2025 The Shardy Authors.
+
+Licensed under the Apache License, Version 2.0 (the "License");
+you may not use this file except in compliance with the License.
+You may obtain a copy of the License at
+
+    http://www.apache.org/licenses/LICENSE-2.0
+
+Unless required by applicable law or agreed to in writing, software
+distributed under the License is distributed on an "AS IS" BASIS,
+WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+See the License for the specific language governing permissions and
+limitations under the License.
+==============================================================================*/
+
+#include <cassert>
+#include <cstdint>
+#include <iterator>
+#include <optional>
+
+#include "llvm/ADT/STLExtras.h"
+#include "llvm/ADT/SmallVector.h"
+#include "mlir/IR/BuiltinOps.h"
+#include "mlir/IR/SymbolTable.h"
+#include "mlir/Support/LLVM.h"
+#include "shardy/dialect/sdy/ir/dialect.h"
+#include "shardy/dialect/sdy/transforms/common/sharding_walker.h"
+#include "shardy/dialect/sdy/transforms/import/passes.h"  // IWYU pragma: keep
+
+namespace mlir {
+namespace sdy {
+
+#define GEN_PASS_DEF_REMOVESIZEONEAXESPASS
+#include "shardy/dialect/sdy/transforms/import/passes.h.inc"
+
+namespace {
+
+bool hasSizeOneAxes(MeshOp meshOp) {
+  return llvm::any_of(meshOp.getMesh().getAxes(),
+                      [](MeshAxisAttr axis) { return axis.getSize() == 1; });
+}
+
+TensorShardingAttr removeSizeOneAxes(TensorShardingAttr sharding,
+                                     const SymbolTable& symbolTable) {
+  MeshAttr mesh = sharding.getMesh(symbolTable);
+  assert(mesh && "unknown mesh");
+
+  auto isNotSizeOne = [&](AxisRefAttr axis) { return axis.getSize(mesh) != 1; };
+
+  // Remove from dimension shardings.
+  SmallVector<DimensionShardingAttr> dimShardings;
+  dimShardings.reserve(sharding.getRank());
+  for (DimensionShardingAttr dimSharding : sharding.getDimShardings()) {
+    SmallVector<AxisRefAttr> newAxes;
+    newAxes.reserve(dimSharding.getAxes().size());
+    llvm::copy_if(dimSharding.getAxes(), std::back_inserter(newAxes),
+                  isNotSizeOne);
+    // Remove priority if there are no sharding axes and the dimension is
+    // closed, since this isn't allowed by verification (would have no effect on
+    // propagation).
+    std::optional<int64_t> priority =
+        newAxes.empty() && dimSharding.getIsClosed()
+            ? std::nullopt
+            : dimSharding.getPriority();
+    dimShardings.push_back(
+        DimensionShardingAttr::get(dimSharding.getContext(), newAxes,
+                                   dimSharding.getIsClosed(), priority));
+  }
+
+  // Remove from replicated axes.
+  SmallVector<AxisRefAttr> replicatedAxes;
+  llvm::copy_if(sharding.getReplicatedAxes(),
+                std::back_inserter(replicatedAxes), isNotSizeOne);
+
+  // Remove from unreduced axes.
+  SmallVector<AxisRefAttr> unreducedAxes;
+  llvm::copy_if(sharding.getUnreducedAxes(), std::back_inserter(unreducedAxes),
+                isNotSizeOne);
+
+  return TensorShardingAttr::get(sharding.getContext(), sharding.getMeshOrRef(),
+                                 dimShardings, replicatedAxes, unreducedAxes);
+}
+
+struct RemoveSizeOneAxesPass
+    : public impl::RemoveSizeOneAxesPassBase<RemoveSizeOneAxesPass> {
+  using RemoveSizeOneAxesPassBase::RemoveSizeOneAxesPassBase;
+
+  void runOnOperation() final {
+    ModuleOp moduleOp = getOperation();
+    SymbolTable symbolTable(moduleOp);
+
+    if (llvm::none_of(moduleOp.getOps<MeshOp>(), hasSizeOneAxes)) {
+      // Nothing to do.
+      return;
+    }
+
+    transformShardings(moduleOp, [&](TensorShardingAttr sharding) {
+      return removeSizeOneAxes(sharding, symbolTable);
+    });
+    // The meshes still have size one axes, but they are not used in the
+    // shardings anymore.
+  }
+};
+
+}  // namespace
+}  // namespace sdy
+}  // namespace mlir
diff --git a/shardy/dialect/sdy/transforms/import/sharding_group_import.cc b/shardy/dialect/sdy/transforms/import/sharding_group_import.cc
index 50f9e9a..f046440 100644
--- a/shardy/dialect/sdy/transforms/import/sharding_group_import.cc
+++ b/shardy/dialect/sdy/transforms/import/sharding_group_import.cc
@@ -14,7 +14,6 @@ limitations under the License.
 ==============================================================================*/
 
 #include <cstdint>
-#include <memory>  // IWYU pragma: keep
 #include <utility>
 
 #include "llvm/ADT/DenseMap.h"
@@ -27,10 +26,10 @@ limitations under the License.
 #include "mlir/IR/BuiltinOps.h"
 #include "mlir/IR/Value.h"
 #include "mlir/IR/Visitors.h"
-#include "mlir/Pass/Pass.h"  // IWYU pragma: keep
 #include "mlir/Support/LLVM.h"
 #include "shardy/dialect/sdy/ir/dialect.h"
 #include "shardy/dialect/sdy/ir/utils.h"
+#include "shardy/dialect/sdy/transforms/import/passes.h"  // IWYU pragma: keep
 
 namespace mlir {
 namespace sdy {
diff --git a/shardy/dialect/sdy/transforms/import/test/remove_size_one_axes.mlir b/shardy/dialect/sdy/transforms/import/test/remove_size_one_axes.mlir
new file mode 100644
index 0000000..4cdcac6
--- /dev/null
+++ b/shardy/dialect/sdy/transforms/import/test/remove_size_one_axes.mlir
@@ -0,0 +1,111 @@
+// RUN: sdy_opt %s -sdy-remove-size-one-axes 2>&1 | FileCheck %s
+
+sdy.mesh @mesh1 = <["a"=1, "b"=2, "c"=1, "d"=4, "e"=1], device_ids=[0, 2, 1, 3, 4, 6, 5, 7]>
+sdy.mesh @mesh2 = <["a"=4, "b"=2]>
+sdy.mesh @mesh3 = <["x"=1, "y"=1]>
+sdy.mesh @mesh4 = <["a"=1, "b"=2, "c"=1]>
+
+// CHECK: sdy.mesh @mesh1 = <["a"=1, "b"=2, "c"=1, "d"=4, "e"=1], device_ids=[0, 2, 1, 3, 4, 6, 5, 7]>
+// CHECK: sdy.mesh @mesh2 = <["a"=4, "b"=2]>
+// CHECK: sdy.mesh @mesh3 = <["x"=1, "y"=1]>
+// CHECK: sdy.mesh @mesh4 = <["a"=1, "b"=2, "c"=1]>
+
+// CHECK-LABEL: func @func_and_op_shardings
+// CHECK-SAME:    %arg0: tensor<8x8xf32> {sdy.sharding = #sdy.sharding<@mesh1, [{"b"}, {?}]>},
+// CHECK-SAME:    %arg1: tensor<8x8xf32> {sdy.sharding = #sdy.sharding<@mesh1, [{"d", ?}, {}], replicated={"b"}>},
+// CHECK-SAME:    %arg2: tensor<8x8xf32> {sdy.sharding = #sdy.sharding<@mesh2, [{"a"}, {"b"}]>}
+// CHECK-SAME:  ) -> (
+// CHECK-SAME:    tensor<8x8xf32> {sdy.sharding = #sdy.sharding<@mesh1, [{}, {?}], unreduced={"d"}>},
+// CHECK-SAME:    tensor<8x8xf32> {sdy.sharding = #sdy.sharding<@mesh1, [{"b"}, {}]>}) {
+func.func @func_and_op_shardings(
+  %arg0: tensor<8x8xf32> {sdy.sharding = #sdy.sharding<@mesh1, [{"a", "b"}, {"c", ?}]>},
+  %arg1: tensor<8x8xf32> {sdy.sharding = #sdy.sharding<@mesh1, [{"d", "e", ?}, {}], replicated={"b", "c"}>},
+  %arg2: tensor<8x8xf32> {sdy.sharding = #sdy.sharding<@mesh2, [{"a"}, {"b"}]>}
+) -> (tensor<8x8xf32> {sdy.sharding = #sdy.sharding<@mesh1, [{"e"}, {"c", ?}], unreduced={"a", "d"}>},
+      tensor<8x8xf32> {sdy.sharding = #sdy.sharding<@mesh1, [{"a", "b", "c"}, {}], unreduced={"e"}>}) {
+  // CHECK-NEXT:   %[[ADD1:.*]] = stablehlo.add %arg0, %arg1 {sdy.sharding = #sdy.sharding_per_value<[<@mesh1, [{"d", ?}, {?}]>]>}
+  // CHECK-NEXT:   %[[ADD2:.*]] = stablehlo.add %arg2, %arg2
+  // CHECK-NOT:    sdy.sharding
+  // CHECK-NEXT:   %[[ADD3:.*]] = stablehlo.add %[[ADD2]], %[[ADD2]] {sdy.sharding = #sdy.sharding_per_value<[<@mesh1, [{}, {}], replicated={"d"}>]>}
+  // CHECK-NEXT:   return %[[ADD1]], %[[ADD3]]
+  // CHECK-NEXT: }
+  %0 = stablehlo.add %arg0, %arg1 {sdy.sharding = #sdy.sharding_per_value<[<@mesh1, [{"d", ?}, {"e", ?}]>]>} : tensor<8x8xf32>
+  %1 = stablehlo.add %arg2, %arg2 : tensor<8x8xf32>
+  %2 = stablehlo.add %1, %1 {sdy.sharding = #sdy.sharding_per_value<[<@mesh1, [{"c"}, {}], replicated={"d"}>]>} : tensor<8x8xf32>
+  return %0, %2 : tensor<8x8xf32>, tensor<8x8xf32>
+}
+
+// CHECK-LABEL: func @inlined_mesh
+// CHECK-SAME:    %arg0: tensor<8x8xf32> {sdy.sharding = #sdy.sharding<mesh<["a"=1, "b"=2, "c"=1, "d"=2], device_ids=[3, 1, 2, 0]>, [{"b"}, {?}]>}
+// CHECK-SAME:  ) -> (
+// CHECK-SAME:    tensor<8x8xf32> {sdy.sharding = #sdy.sharding<mesh<["a"=2, "b"=2]>, [{"a", "b"}, {}]>}) {
+func.func @inlined_mesh(
+  %arg0: tensor<8x8xf32> {sdy.sharding = #sdy.sharding<mesh<["a"=1, "b"=2, "c"=1, "d"=2], device_ids=[3, 1, 2, 0]>, [{"a", "b"}, {"c", ?}]>}
+) -> (tensor<8x8xf32> {sdy.sharding = #sdy.sharding<mesh<["a"=2, "b"=2]>, [{"a", "b"}, {}]>}) {
+  // CHECK-NEXT: stablehlo.add %arg0, %arg0 {sdy.sharding = #sdy.sharding_per_value<[<mesh<["a"=1, "b"=1]>, [{?}, {?}]>]>}
+  %0 = stablehlo.add %arg0, %arg0 {sdy.sharding = #sdy.sharding_per_value<[<mesh<["a"=1, "b"=1]>, [{"a", ?}, {"b", ?}]>]>} : tensor<8x8xf32>
+  return %0 : tensor<8x8xf32>
+}
+
+// CHECK-LABEL: func @shardings_with_priorities
+// CHECK-SAME:    %arg0: tensor<8x8xf32> {sdy.sharding = #sdy.sharding<@mesh1, [{"b"}p0, {?}p3], replicated={"d"}>},
+// CHECK-SAME:    %arg1: tensor<8x8xf32> {sdy.sharding = #sdy.sharding<@mesh2, [{"a", ?}p2, {}]>}
+// CHECK-SAME:  ) -> (
+// CHECK-SAME:    tensor<8x8xf32> {sdy.sharding = #sdy.sharding<@mesh3, [{}, {?}p2]>}) {
+func.func @shardings_with_priorities(
+  %arg0: tensor<8x8xf32> {sdy.sharding = #sdy.sharding<@mesh1, [{"a", "b"}p0, {"c", ?}p3], replicated={"d", "e"}>},
+  %arg1: tensor<8x8xf32> {sdy.sharding = #sdy.sharding<@mesh2, [{"a", ?}p2, {}]>}
+) -> (tensor<8x8xf32> {sdy.sharding = #sdy.sharding<@mesh3, [{"x"}p1, {"y", ?}p2]>}) {
+  // CHECK-NEXT:   %[[ADD1:.*]] = stablehlo.add %arg0, %arg1 {sdy.sharding = #sdy.sharding_per_value<[<@mesh1, [{"d", ?}p1, {?}]>]>}
+  // CHECK-NEXT:   %[[ADD2:.*]] = stablehlo.add %[[ADD1]], %[[ADD1]]
+  // CHECK-NOT:    sdy.sharding
+  // CHECK-NEXT:   return %[[ADD2]]
+  // CHECK-NEXT: }
+  %0 = stablehlo.add %arg0, %arg1 {sdy.sharding = #sdy.sharding_per_value<[<@mesh1, [{"d", ?}p1, {"e", ?}]>]>} : tensor<8x8xf32>
+  %1 = stablehlo.add %0, %0 : tensor<8x8xf32>
+  return %1 : tensor<8x8xf32>
+}
+
+// CHECK-LABEL: func @manual_computation
+func.func @manual_computation(%arg0: tensor<8x16xf32>, %arg1: tensor<16x32xf32>) -> tensor<8x32xf32> {
+  // CHECK-NEXT:          %[[MAN_COMP:.*]] = sdy.manual_computation(%arg0, %arg1)
+  // CHECK-SAME{LITERAL}:     in_shardings=[<@mesh1, [{"d"}, {"b"}]>, <@mesh1, [{"b"}, {}], replicated={"d"}>]
+  // CHECK-SAME{LITERAL}:     out_shardings=[<@mesh1, [{"d"}, {}], replicated={"b"}>]
+  // CHECK-SAME{LITERAL}:     manual_axes={"a", "b", "c", "d"}
+  // CHECK-SAME:              (%arg2: tensor<2x8xf32>, %arg3: tensor<8x32xf32>) {
+  // CHECK-NEXT:            stablehlo.add %arg2, %arg2 {sdy.sharding = #sdy.sharding_per_value<[<@mesh1, [{?}, {?}]>]>}
+  // CHECK:               } : (tensor<8x16xf32>, tensor<16x32xf32>) -> tensor<8x32xf32>
+  // CHECK-NEXT:          return %[[MAN_COMP]]
+  %0 = sdy.manual_computation(%arg0, %arg1)
+      in_shardings=[<@mesh1, [{"d", "a"}, {"b"}]>, <@mesh1, [{"b"}, {"c", "a"}], replicated={"d"}>]
+      out_shardings=[<@mesh1, [{"d"}, {}], replicated={"b", "c"}>]
+      manual_axes={"a", "b", "c", "d"} (%arg2: tensor<2x8xf32>, %arg3: tensor<8x32xf32>) {
+    %1 = stablehlo.add %arg2, %arg2 {sdy.sharding = #sdy.sharding_per_value<[<@mesh1, [{?}, {"e", ?}]>]>} : tensor<2x8xf32>
+    %2 = stablehlo.dot %1, %arg3 : (tensor<2x8xf32>, tensor<8x32xf32>) -> tensor<2x32xf32>
+    %3 = "stablehlo.all_reduce"(%2) ({
+    ^bb0(%arg4: tensor<f32>, %arg5: tensor<f32>):
+      %4 = stablehlo.add %arg4, %arg5 : tensor<f32>
+      stablehlo.return %4 : tensor<f32>
+    }) {
+      replica_groups = dense<[[0], [1]]> : tensor<2x1xi64>
+    } : (tensor<2x32xf32>) -> tensor<2x32xf32>
+    sdy.return %3 : tensor<2x32xf32>
+  } : (tensor<8x16xf32>, tensor<16x32xf32>) -> tensor<8x32xf32>
+  return %0 : tensor<8x32xf32>
+}
+
+// CHECK-LABEL: func @manual_computation_inlined_mesh
+func.func @manual_computation_inlined_mesh(%arg0: tensor<8x16xf32>, %arg1: tensor<8x16xf32>) -> tensor<8x16xf32> {
+  // CHECK-NEXT:          %[[MAN_COMP:.*]] = sdy.manual_computation(%arg0, %arg1)
+  // CHECK-SAME{LITERAL}:     in_shardings=[<@mesh4, [{"b"}, {}]>, <mesh<["a"=1, "b"=2, "c"=1]>, [{"b"}, {}]>]
+  // CHECK-SAME{LITERAL}:     out_shardings=[<mesh<["a"=1, "b"=2, "c"=1]>, [{"b"}, {}]>]
+  // CHECK-SAME{LITERAL}:     manual_axes={"a", "b"}
+  %0 = sdy.manual_computation(%arg0, %arg1)
+      in_shardings=[<@mesh4, [{"b", "a"}, {}]>, <mesh<["a"=1, "b"=2, "c"=1]>, [{"b"}, {}], replicated={"a"}>]
+      out_shardings=[<mesh<["a"=1, "b"=2, "c"=1]>, [{"a", "b"}, {}]>]
+      manual_axes={"a", "b"} (%arg2: tensor<4x16xf32>, %arg3: tensor<4x16xf32>) {
+    %1 = stablehlo.add %arg2, %arg2 : tensor<4x16xf32>
+    sdy.return %1 : tensor<4x16xf32>
+  } : (tensor<8x16xf32>, tensor<8x16xf32>) -> tensor<8x16xf32>
+  return %0 : tensor<8x16xf32>
+}
