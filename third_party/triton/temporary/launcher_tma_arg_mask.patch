diff --git a/third_party/nvidia/backend/driver.py b/third_party/nvidia/backend/driver.py
--- a/third_party/nvidia/backend/driver.py
+++ b/third_party/nvidia/backend/driver.py
@@ -1,8 +1,9 @@
-from collections.abc import Callable
+from collections.abc import Callable, Iterator, Sequence
 import functools
 import operator
 import os
 import subprocess
+from typing import Any, AnyStr
 import triton
 from triton.runtime import _allocation
 from triton.backends.compiler import GPUTarget
@@ -95,54 +96,64 @@ def ty_to_cpp(ty):
         "nvTmaDesc": "CUtensorMap",
     }[ty]
 
+# A nested sequence of arg type strings.
+type _ArgTypeWithNesting = str | Sequence[ "_ArgTypeWithNesting"]
 
-def flatten_tuples(xs):
+# Nested mask that has True for elements that should be kept and False for
+# elements that should be removed. Has the same shape as the signature.
+type _ArgMask = Sequence[bool | "_ArgMask"]
+
+
+def _make_nonconst_arg_mask(signature_types: Sequence[_ArgTypeWithNesting]) -> _ArgMask:
+    """Makes a mask that keeps non-constexpr args and removes constexpr args."""
+    # For example:
+    #   Signature: [i32, constexpr, (i32, constexpr)]
+    #   Mask:      [True, False, [True, False]]
+    return [
+        _make_nonconst_arg_mask(ty) if isinstance(ty, tuple) else ty != "constexpr"
+        for ty in signature_types
+    ]
+
+
+def _flatten_tuples(xs):
     """Recursively flattens tuple elements in xs."""
     for x in xs:
         if isinstance(x, tuple):
-            yield from flatten_tuples(x)
+            yield from _flatten_tuples(x)
         else:
             yield x
 
 
-def make_launcher(constants : dict[int, str], signature : dict[int, any]) -> Callable[..., None]:
-
-    # Here, signature can look like:
-    #  {'_0': 'i32',
-    #   'Ptrs': (),
-    #   '_1': 'constexpr',
-    #   'values': '[*f32, constexpr]',
-    #   'out_tuple': 'constexpr'}
-    # We want to remove the constexprs, flatten the tuples, and remove any more
-    # constexprs. If we remove them all at the end, we won't be able to remove
-    # entire tuples that are a single constexpr. If we remove them before
-    # flattening, we will miss mixed-tuples. So we do it twice.
-
-    def _serialize_signature(sig):
-        if isinstance(sig, tuple):
-            return ','.join(map(_serialize_signature, sig))
-        return sig
+def _flatten_and_apply_arg_mask(args: Sequence[Any], mask: _ArgMask) -> Iterator[Any]:
+    """Flattens nested args skipping those filtered out by the mask."""
+    if len(mask) != len(args):
+        # If the included elements in the mask are the same length as the args,
+        # we can assume the caller filtered the args already.
+        # Otherwise there is an unexpected length mismatch.
+        if mask.count(True) == len(args):
+            yield from _flatten_tuples(args)
+            return
+        else:
+            raise ValueError(f"Mask length {len(mask)} does not match arg length {len(args)}")
 
-    # Remember & remove all the constexpr before flattening.
-    constant_indices_before_flattening = {i for i, [k, v] in enumerate(signature.items()) if v == 'constexpr'}
-    # constant_indices_before_flattening = [2, 4]
-    signature = {k: v for k, v in signature.items() if v != 'constexpr'}
-    # signature = {'_0': 'i32', 'Ptrs': (), 'values': '[*f32, constexpr]'}
+    for mask_item, arg in zip(mask, args):
+        if not mask_item:
+            continue
+        arg_is_sequence = isinstance(arg, Sequence) and not isinstance(arg, str)
+        mask_item_is_sequence = isinstance(mask_item, Sequence)
+        if arg_is_sequence and mask_item_is_sequence:
+            yield from _flatten_and_apply_arg_mask(arg, mask_item)
+        elif arg_is_sequence != mask_item_is_sequence:
+            raise ValueError(f"Inconsistent mask {mask_item} and arg {arg}")
+        else:
+            yield arg
 
-    # Flatten.
-    signature = ','.join(map(_serialize_signature, signature.values()))
-    # signature = 'i32,,*f32,constexpr'
-    signature = list(filter(bool, signature.split(',')))
-    # signature = ['i32', '*f32', 'constexpr']
 
-    # Remove any constexprs after flattening.
-    constant_indices_after_flattening = {i for i, s in enumerate(signature) if s == 'constexpr'}
-    # constant_indices_after_flattening = [2]
-    signature = {i: s for i, s in enumerate(signature) if s != 'constexpr'}
-    # signature = {0: 'i32', 1: '*f32'}
+def make_launcher(signature_types: Sequence[_ArgTypeWithNesting]) -> Callable[..., None]:
+    non_const_arg_mask = _make_nonconst_arg_mask(signature_types)
+    flattened_signature = _flatten_and_apply_arg_mask(signature_types, non_const_arg_mask)
 
-    signature_metadata = cuda_utils.build_signature_metadata(
-            ty for ty in signature.values())
+    signature_metadata = cuda_utils.build_signature_metadata(flattened_signature)
 
     def wrapper(grid_dim_x: int, grid_dim_y: int, grid_dim_z: int,
                 stream: int, kernel: int, global_scratch: any,
@@ -151,23 +162,8 @@ def make_launcher(constants : dict[int, 
                 launch_enter_hook: Callable[..., None],
                 launch_exit_hook: Callable[..., None],
                 *args: any) -> None:
-        # Given the example above, args would look something like:
-        # args = [8, (), 5, (3, 4), (2, 2, 2)]
-        # constant_indices_before_flattening = [2, 4]
-        # Remove constantexprs before flattening:
-        non_const_args = [arg
-            for idx, arg in enumerate(args)
-            if idx not in constant_indices_before_flattening
-        ]
-        # non_const_args = [8, (), (3, 4)]
-        non_const_args = flatten_tuples(non_const_args)
-        # non_const_args = [8, 3, 4]
-        # constant_indices_after_flattening = [2]
-        non_const_args = [arg
-            for idx, arg in enumerate(non_const_args)
-            if idx not in constant_indices_after_flattening
-        ]
-        # non_const_args = [8, 3]
+        non_const_args = _flatten_and_apply_arg_mask(args, non_const_arg_mask)
+
         cuda_utils.launch(grid_dim_x, grid_dim_y, grid_dim_z, stream, kernel,
                           packed_metadata, hook_args, launch_enter_hook,
                           launch_exit_hook, signature_metadata, global_scratch,
@@ -255,7 +251,8 @@ class CudaLauncher(object):
         constants = {arg_idx(idx): value for idx, value in constants.items()}
         signature = {idx: value for idx, value in src.signature.items()}
         self.num_ctas = functools.reduce(operator.mul, metadata.cluster_dims, 1)
-        self.launch = make_launcher(constants, signature)
+        del constants  # Unused.
+        self.launch = make_launcher(signature.values())
         self.global_scratch_size = metadata.global_scratch_size
         self.global_scratch_align = metadata.global_scratch_align
         self.launch_cooperative_grid = metadata.launch_cooperative_grid
