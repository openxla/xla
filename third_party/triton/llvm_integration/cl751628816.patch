
--- a/lib/Conversion/TritonToTritonGPU/TritonGPUConversion.cpp	2025-04-11 01:29:32.000000000 -0700
+++ b/lib/Conversion/TritonToTritonGPU/TritonGPUConversion.cpp	2025-04-25 18:48:56.000000000 -0700
@@ -55,15 +55,6 @@
   //
   // Materializations
   //
-  // This will be called when (newArgType != origArgType)
-  // This will create newArg, and map(origArg, newArg)
-  addArgumentMaterialization([](OpBuilder &builder, RankedTensorType tensorType,
-                                ValueRange inputs, Location loc) -> Value {
-    llvm_unreachable("Argument rematerialization should not happen in Triton "
-                     "-> TritonGPU conversion");
-    return {};
-  });
-
   // If the origValue still has live user(s), use this to
   // convert origValue to newValue
   addSourceMaterialization([=](OpBuilder &builder, RankedTensorType tensorType,

--- a/third_party/amd/lib/TritonAMDGPUTransforms/CanonicalizePointers.cpp	2025-04-11 01:29:32.000000000 -0700
+++ b/third_party/amd/lib/TritonAMDGPUTransforms/CanonicalizePointers.cpp	2025-04-25 18:48:56.000000000 -0700
@@ -13,7 +13,7 @@
 #include "mlir/IR/TypeUtilities.h"
 #include "mlir/IR/Value.h"
 #include "mlir/Pass/Pass.h"
-#include "mlir/Transforms/OneToNTypeConversion.h"
+#include "mlir/Transforms/DialectConversion.h"
 #include "triton/Analysis/Utility.h"
 #include "triton/Dialect/Triton/IR/Dialect.h"
 #include "triton/Dialect/Triton/IR/Types.h"
