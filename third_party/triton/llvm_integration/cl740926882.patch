
--- a/third_party/amd/lib/TritonAMDGPUToLLVM/ElementwiseOpToLLVM.cpp	2025-03-25 07:48:50.000000000 -0700
+++ b/third_party/amd/lib/TritonAMDGPUToLLVM/ElementwiseOpToLLVM.cpp	2025-03-26 15:43:35.000000000 -0700
@@ -298,16 +298,16 @@
                                             ConversionPatternRewriter &rewriter,
                                             const SmallVector<Value> &v) {
   assert(v.size() == 2);
-  return cvtScaleFp8ToFp32<ROCDL::CvtScale32PkF32Fp8>(loc, rewriter, v[0],
-                                                      v[1]);
+  return cvtScaleFp8ToFp32<ROCDL::CvtScaleF32PkF32Fp8Op>(loc, rewriter, v[0],
+                                                         v[1]);
 }
 
 static SmallVector<Value> Fp8E5M2_to_Fp32(Location loc,
                                           ConversionPatternRewriter &rewriter,
                                           const SmallVector<Value> &v) {
   assert(v.size() == 2);
-  return cvtScaleFp8ToFp32<ROCDL::CvtScale32PkF32Bf8>(loc, rewriter, v[0],
-                                                      v[1]);
+  return cvtScaleFp8ToFp32<ROCDL::CvtScaleF32PkF32Bf8Op>(loc, rewriter, v[0],
+                                                         v[1]);
 }
 
 template <typename convertOp>
@@ -336,16 +336,16 @@
                                             ConversionPatternRewriter &rewriter,
                                             const SmallVector<Value> &v) {
   assert(v.size() == 2);
-  return cvtScaleFp32ToFp8<ROCDL::CvtScaleF32PkFp8F32>(loc, rewriter, v[0],
-                                                       v[1]);
+  return cvtScaleFp32ToFp8<ROCDL::CvtScaleF32PkFp8F32Op>(loc, rewriter, v[0],
+                                                         v[1]);
 }
 
 static SmallVector<Value> Fp32_to_Fp8E5M2(Location loc,
                                           ConversionPatternRewriter &rewriter,
                                           const SmallVector<Value> &v) {
   assert(v.size() == 2);
-  return cvtScaleFp32ToFp8<ROCDL::CvtScaleF32PkBf8F32>(loc, rewriter, v[0],
-                                                       v[1]);
+  return cvtScaleFp32ToFp8<ROCDL::CvtScaleF32PkBf8F32Op>(loc, rewriter, v[0],
+                                                         v[1]);
 }
 
 static SmallVector<Value>
