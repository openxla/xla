The PTX generated for this test is sensitive to the LLVM version. Newer versions
of the NVPTX backend may use 'prmt.b32' instead of 'bfe.u32' for byte extraction
and 'setp.eq.b32' instead of 'setp.eq.s32' for equality comparisons. A later
update (probably https://github.com/llvm/llvm-project/commit/f480e1b8258eac3565b3ffaf3f8ed0f77eb87fee)
optimized the number of prmt instructions generated for this code, so the
number of 'prmt.b32' instructions went from 64 to 48.
  The checks below have been updated to match the internal codegen as we think
  that they are just optimizations.

--- a/test/Conversion/tritongpu_to_ptx_mmav3.mlir	2025-07-31 05:01:16.000000000 -0700
+++ b/test/Conversion/tritongpu_to_ptx_mmav3.mlir	2025-08-06 05:43:00.000000000 -0700
@@ -57,7 +57,7 @@
 
     // CHECK: mov.u32       [[TID:%.*]], %tid.x;
     // CHECK: and.b32       [[L0_VAL:%.*]], [[TID]], 1;
-    // CHECK: setp.eq.s32   [[L0_OFF:%.*]], [[L0_VAL]], 0;
+    // CHECK: setp.eq.b32   [[L0_OFF:%.*]], [[L0_VAL]], 0;
 
     // This is used to perform 16 independent selects in stage 1.
 
@@ -106,10 +106,10 @@
     // the predicate (step 3).
 
     // CHECK-DAG: and.b32           [[L1_VAL:%.*]], [[TID]], 2;
-    // CHECK-DAG: setp.eq.s32       [[L1_OFF:%.*]], [[L1_VAL]], 0;
+    // CHECK-DAG: setp.eq.b32       [[L1_OFF:%.*]], [[L1_VAL]], 0;
     // CHECK-COUNT-16: selp.b32     {{.*}}, {{.*}}, [[L1_OFF]];
 
-    // CHECK-COUNT-64: bfe.u32
+    // CHECK-COUNT-48: prmt.b32
     // CHECK-COUNT-64: st.volatile.global.b8
 
     %0 = ttg.convert_layout %arg0 : tensor<128x64xf8E5M2, #mma> -> tensor<128x64xf8E5M2, #dot_op>
