
--- a/third_party/amd/lib/TritonAMDGPUToLLVM/AtomicRMWOpsEmitter.cpp	2025-07-31 00:13:23.000000000 -0700
+++ b/third_party/amd/lib/TritonAMDGPUToLLVM/AtomicRMWOpsEmitter.cpp	2025-08-26 08:20:29.000000000 -0700
@@ -405,12 +405,31 @@
   Value mask = targetInfo.ballot(rewriter, loc, i64_ty, done);
   Value start = loopBody->getArgument(0);
   Value cnt = b.trunc(i32_ty, generatePopcount64(rewriter, mask));
-  Value mbcntLoRes = rewriter
-                         .create<ROCDL::MbcntLoOp>(
-                             loc, i32_ty, b.trunc(i32_ty, mask), b.i32_val(0))
-                         ->getResult(0);
-  Value idx = rewriter.create<ROCDL::MbcntHiOp>(
-      loc, i32_ty, b.trunc(i32_ty, b.lshr(mask, b.i64_val(32))), mbcntLoRes);
+
+  NamedAttribute noundef = rewriter.getNamedAttr(
+      LLVM::LLVMDialect::getNoUndefAttrName(), rewriter.getUnitAttr());
+  NamedAttribute lowRange = rewriter.getNamedAttr(
+      LLVM::LLVMDialect::getRangeAttrName(),
+      LLVM::ConstantRangeAttr::get(rewriter.getContext(), APInt::getZero(32),
+                                   APInt(32, 32)));
+  NamedAttribute highRange = rewriter.getNamedAttr(
+      LLVM::LLVMDialect::getRangeAttrName(),
+      LLVM::ConstantRangeAttr::get(rewriter.getContext(), APInt::getZero(32),
+                                   APInt(32, 64)));
+
+  Value mbcntLoRes =
+      ROCDL::MbcntLoOp::create(
+          rewriter, loc, i32_ty, b.trunc(i32_ty, mask), b.i32_val(0),
+          /*arg_attrs=*/{},
+          /*res_attrs=*/
+          rewriter.getArrayAttr(
+              rewriter.getDictionaryAttr({noundef, lowRange})))
+          ->getResult(0);
+  Value idx = ROCDL::MbcntHiOp::create(
+      rewriter, loc, i32_ty, b.trunc(i32_ty, b.lshr(mask, b.i64_val(32))),
+      mbcntLoRes,
+      /*arg_attrs=*/{},
+      rewriter.getArrayAttr(rewriter.getDictionaryAttr({noundef, highRange})));
   Value base = b.add(start, cnt);
   Value leader = b.icmp_eq(idx, b.i32_val(0));
   cnt = b.sub(cnt, idx);
